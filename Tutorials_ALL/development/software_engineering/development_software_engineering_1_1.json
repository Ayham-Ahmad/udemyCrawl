{
  "courses": [
    {
      "title": "The Complete Introduction to New Relic One [With APM]",
      "url": "https://www.udemy.com/course/the-complete-introduction-to-new-relic-one/",
      "bio": "Become a New Relic Master with this hands on course [ Focused on APM ]",
      "objectives": [
        "You will setup New Relic agents and monitor web applications",
        "Understand New Relic from an architectural stand point",
        "How New Relic enables APM, RUM and Synthetic Monitoring",
        "Understand and apply Apdex scores with New Relic",
        "How to Monitor a Kubernetes Cluster with New Relic",
        "Setup Alerting with New Relic and integrate New Relic with 3rd party apps like Slack"
      ],
      "course_content": {},
      "requirements": [
        "A desire to learn and Crush It!",
        "A working Computer with either Windows/MacOS or Linux",
        "An Internet connection",
        "All technologies we will use will be free/have free trial versions",
        "Some Basic knowledge of unix/linux commands can be helpful, but not required"
      ],
      "description": "New Relic is a leading cloud based observability platform, designed to help its customers optimize their software. New Relic works as a SAAS (Software as a service) tool, monitoring everything from your databases to servers to user behaviour. After this course you will find New Relic to be intuitive and easy to use. New Relic gives you detailed stack traces of each error and even provides an overview of the experience your customers have while visiting your website.\nYou will create a New Relic account as well as install an agent in your application. The agent is a lightweight bit of code that gives detailed and segmented information about how long it takes for your servers to respond. The data the agent reports will be used to calculate metrics like Apdex Scores, SLO's, SLI's and SLA's. We will make use of the automated baselining feature as well.\nEverything is well documented and separated, so you can find what you need. Assignments and Quizzes will make sure you stay on track and test your knowledge. The course will have a combination of theory and practical examples.\nThe Introduction\nUnderstand why we should use New Relic and what having an APM tool really enables us to achieve. Everything in this course will be straight from the free trial version, so you you don't need to buy anything. What does the New Relic architecture look like? Familiarize yourself with the mechanics of the course.\nThe Application Setup\nStart of by signing up for New Relic. Learn how to integrate the New Relic agents in your applications. For an example we will be using a NodeJS application. We also demonstrate how to do this with a heavier Java application making use of TomCat.\nNew Relic APM\nNew Relic APM is the flagship product of New Relic One. We will spend some time learning how to navigate the UI, from the application overview dashboard to service maps, get detailed insights into your application's performance. Debug errors using the error analytics dashboard. We will touch upon the legacy errors page as well. Understand how Apdex score is calculated and how to set your thresholds in New Relic.\nInfrastructure and Kubernetes Monitoring\nWe need Kubernetes to orchestrate our containers but who will monitor Kubernetes? New Relic comes to our rescue. Kubernetes creates a layer of abstraction which we wish to monitor. First setup a simple MiniKube cluster incase you do not already have one. We shall aim to obtain metrics from nodes, pods and all our deployments.\nAlerting\nYou are rushing to debug a major production issue. The last thing you want is a lot of spam alerting disturbing you. Whether you use Slack or HipChat you want to be notified quickly on whichever platform your team is comfortable with. To achieve this goals we understand how New Relic Alerting works and setup a sample Integration with Slack. We learn how to take advantage of all the features available in the UI.\nUser Monitoring\nA single malfunctioning checkout button of an e-commerce website can cost you millions of dollars. Client side monitoring is fundamentally different from monitoring software or infrastructure. The focus is on what happens after once the server has sent a response. The primary goal is to understand what the user is going through. Real user monitoring means monitoring real users once the application is live. We achieve this by a simple snippet we put into our code. But this reports issues after the customer has seen them. Which means we rely on synthetic testing to prepare the website before customers actually come.",
      "target_audience": [
        "Developers/Tech Leads looking to monitor their applications",
        "DevOps Engineers trying to setup smart alerting for troubleshooting problems",
        "DevOps engineers looking to monitor their infrastructure and databases real time",
        "Developers looking to monitor user behavior using Real User Monitoring and Synthetic Testing"
      ]
    },
    {
      "title": "Algorithms and Data Structures in Python (INTERVIEW Q&A)",
      "url": "https://www.udemy.com/course/algorithms-and-data-structures-in-python/",
      "bio": "A guide to implement data structures, graph algorithms and sorting algorithms from scratch with interview questions!",
      "objectives": [
        "Understand arrays and linked lists",
        "Understand stacks and queues",
        "Understand tree like data structures (binary search trees)",
        "Understand balances trees (AVL trees and red-black trees)",
        "Understand heap data structures",
        "Understand hashing, hash tables and dictionaries",
        "Understand the differences between data structures and abstract data types",
        "Understand graph traversing (BFS and DFS)",
        "Understand shortest path algorithms such as Dijkstra's approach or Bellman-Ford method",
        "Understand minimum spanning trees (Prims's algorithm)",
        "Understand sorting algorithms",
        "Be able to develop your own algorithms",
        "Have a good grasp of algorithmic thinking",
        "Be able to detect and correct inefficient code snippets"
      ],
      "course_content": {},
      "requirements": [
        "Python basics",
        "Some theoretical background ( big O notation )"
      ],
      "description": "This course is about data structures, algorithms and graphs. We are going to implement the problems in Python programming language. I highly recommend typing out these data structures and algorithms several times on your own in order to get a good grasp of it.\nSo what are you going to learn in this course?\nSection 1:\nsetting up the environment\ndifferences between data structures and abstract data types\nSection 2 - Arrays:\nwhat is an array data structure\narrays related interview questions\nSection 3 - Linked Lists:\nlinked list data structure and its implementation\ndoubly linked lists\nlinked lists related interview questions\nSection 4 - Stacks and Queues:\nstacks and queues\nstack memory and heap memory\nhow the stack memory works exactly?\nstacks and queues related interview questions\n\n\nSection 5 - Binary Search Trees:\nwhat are binary search trees\npractical applications of binary search trees\nproblems with binary trees\nSection 6 - Balanced Binary Trees (AVL Trees and Red-Black Trees):\nwhy to use balanced binary search trees\nAVL trees\nred-black trees\nSection 7 - Priority Queues and Heaps:\nwhat are priority queues\nwhat are heaps\nheapsort algorithm overview\nSection 8 - Hashing and Dictionaries:\nassociative arrays and dictionaries\nhow to achieve O(1) constant running time with hashing\nSection 9 - Graph Traversal:\nbasic graph algorithms\nbreadth-first\ndepth-first search\nstack memory visualization for DFS\nSection 10 - Shortest Path problems (Dijkstra's and Bellman-Ford Algorithms):\nshortest path algorithms\nDijkstra's algorithm\nBellman-Ford algorithm\nhow to detect arbitrage opportunities on the FOREX?\nSection 11 - Spanning Trees (Kruskal's and Prim's Approaches):\nwhat are spanning trees\nwhat is the union-find data structure and how to use it\nKruskal's algorithm theory and implementation as well\nPrim's algorithm\nSection 12 - Substring Search Algorithms\nwhat are substring search algorithms and why are they important in real world softwares\nbrute-force substring search algorithm\nhashing and Rabin-Karp method\nKnuth-Morris-Pratt substring search algorithm\nZ substring search algorithm (Z algorithm)\nimplementations in Python\nSection 13 - Hamiltonian Cycles (Travelling Salesman Problem)\nHamiltonian cycles in graphs\nwhat is the travelling salesman problem?\nhow to use backtracking to solve the problem\nmeta-heuristic approaches to boost algorithms\nSection 14 - Sorting Algorithms\nsorting algorithms\nbubble sort, selection sort and insertion sort\nquicksort and merge sort\nnon-comparison based sorting algorithms\ncounting sort and radix sort\nSection 15 - Algorithms Analysis\nhow to measure the running time of algorithms\nrunning time analysis with big O (ordo), big Ω (omega) and big θ (theta) notations\ncomplexity classes\npolynomial (P) and non-deterministic polynomial (NP) algorithms\nO(1), O(logN), O(N) and several other running time complexities\nIn the first part of the course we are going to learn about basic data structures such as linked lists, stacks, queues, binary search trees, heaps and some advanced ones such as AVL trees and red-black trees.. The second part will be about graph algorithms such as spanning trees, shortest path algorithms and graph traversing. We will try to optimize each data structure as much as possible.\nIn each chapter I am going to talk about the theoretical background of each algorithm or data structure, then we are going to write the code step by step in Python.\nMost of the advanced algorithms relies heavily on these topics so it is definitely worth understanding the basics. These principles can be used in several fields: in investment banking, artificial intelligence or electronic trading algorithms on the stock market. Research institutes use Python as a programming language in the main: there are a lot of library available for the public from machine learning to complex networks.\nThanks for joining the course, let's get started!",
      "target_audience": [
        "Beginner Python developers curious about graphs, algorithms and data structures"
      ]
    },
    {
      "title": "IBM webMethods | An Exhaustive Content (Development & Admin)",
      "url": "https://www.udemy.com/course/webmethods-dev-admin-forall/",
      "bio": "The following course is focused for those engineers who wants to start their journey in the universe of webMethods",
      "objectives": [
        "webMethods 10.X Installation and Configurations. Bringing up IS/MWS, working with dbConfigurator, custom wrapper, wrapper log, extended settings and more.",
        "Flat Files, Flat File Schema, Flat File Dictionary, Large Flat File Handling",
        "Usage of WebServices, WSDL, XSD SOAP Handelr, SOAP Over JMS",
        "JMS, Structure of JMS, JNDI Configuration, pub-sub model, send and receieve, wait and wait for reply, JMS Triggers, JMS Filtering, JMS Conditions",
        "webMethods Basic Development like string/stringManipulation/adding2Numbers/Loops/Repeat/TryCatchFinally/Exit/String Customized",
        "Concpets like variable substitution, pipelines, document reference, document specification, debugging,",
        "Universal Messaging, Start and Stop UM, Configure UM within IS, Zone, Channel, Clusters, Queues, Topics, Instance Creation",
        "webMethods Here and There | savePipeline/restorePipleline File and No File, code is XML, node .ndf, Global Variables, stringToFile, Refactor and more",
        "Basic JDBC Adapters and JDBC Notifications, CustomSQL, DynamicSQL, Batch Insert, Update and more",
        "webService REST, Swagger, Resources, Extended Settings",
        "Java Services, Debugging Java Service, IDataMap, Invoke Java Client",
        "Dynamic Server Pages, Params and NoParams, outputTemplate and DSP Conditions",
        "webMethods Trigger, Filtering, Join Condition, pub-sub model, resource monitoring",
        "SFTP and FTP, webMethods File poller, Scheduler, Certificates HTTP/HTTPS, making IS Secure",
        "Parsing XML/JSON, XSLT Coding and XML Validation",
        "Sending email / SMTP MIME - With and Without Attachment, formatting HTML",
        "webMethods Here and There | Quiesce mode, SVN, Compare services and package, package dependency, URL Alias, Proxy Alias, User Management",
        "webMethods Here and There | Create IS instance, wMMonitor, Resubmit Pipeline, Caching Key value pair",
        "wMDeployer"
      ],
      "course_content": {
        "webMethods Journey": [
          "01 - As a fresher in webMethods Journey.",
          "02 - On what intention this course is created & How to understand the course",
          "03 - What is that you are going to learn from this course ?",
          "04 - Finally, Before we get to the course",
          "05 - One more thing - A very humble request"
        ],
        "Join Our Community": [
          "Join Our What'sApp Group"
        ],
        "Database Installation & Setup": [
          "01 - Install Oracle Database 21C - Express Edition",
          "02 - What is the difference between Pluggable and Container Database ?",
          "03 - Connect to Pluggable and Container Users",
          "04 - Create User and Grant Permission",
          "Oracle 21C - SQL Commands",
          "05 - Database Installation Failure - 23AI"
        ],
        "Before webMethods Installation": [
          "01 - Important websites - Few of them are deprecated",
          "02 - IBM Acquired SAG (webMethods)",
          "03 - Signup @IBM for webMethods Usage",
          "04 - webMethods Documentation Link",
          "05 - About webMethods & Software AG (Legacy Story)",
          "06 - Create User \"webmuser\" in PDB & Get the software's ready",
          "07 - No Clue & Clueless"
        ],
        "webMethods Installation - IS, MWS, TN, UM...": [
          "01 - webMethods Installation 101 | Select Image and Select the components",
          "02 - webMethods Installation 102 | Database, License keys",
          "03 - webMethods Installation 103 | Installation & dbConfigurator",
          "04 - webMethods Installation 104 | Drawbacks and Drop tables",
          "05 - Importance of webMethods Documentation",
          "06 - webMethods Installation 105 | dbConfigurator-NON-UI.bat"
        ],
        "Start, Stop, Restart - Integration Server (IS) and My webMethods Server (MWS)": [
          "01 - Start & Stop Integration Server (IS)",
          "Path of Integration Server Restart",
          "02 - Configure JDBC Pools and Point to Right User",
          "03 - Start and Stop My webMethods Server (MWS)",
          "04 - Configure User Access in IS & Login to MWS",
          "05 - Connect Integration Server to Designer"
        ],
        "youTube LiveStream Session": [
          "webMethods Installation - LiveStream"
        ],
        "Let's Start Coding in webMethods": [
          "01 - A quick note; 10.15 To 10.7",
          "02 - Folder Structure and Package Creation",
          "03 - Adding Two Numbers",
          "04 - Understanding Pipeline",
          "05 - Document, Parent & Child Relationship",
          "06 - Variable Substitution & Initialization",
          "07 - Document Reference",
          "08 - Document Specification"
        ],
        "Let's Debug, Loop, Repeat, Branch, Try Catch & finally Exit": [
          "01 - Debugging and Looping - 101",
          "02 - Looping - 102",
          "03 - Looping - 103 (Append To String List)",
          "04 - Branching in webMethods",
          "05 - How do we actually Repeat in webMethods ?",
          "06 - Try/Catch Sequence - 101",
          "07 - Try/Catch Sequence - 102",
          "08 - Exit - 101",
          "08 - Exit - 102",
          "09 - Try Catch - Try Finally"
        ],
        "Flat Files - Records are completely Flat In Structure": [
          "01 - Introduction to Flat Files",
          "02 - Flat Files - Error",
          "03 - Inbound & Outbound Processing",
          "04 - Dictionary",
          "05 - Record With ID-NOID",
          "06 - Quotes & Composite Definition",
          "07 - Fixed Length - 101",
          "08 - Fixed Length - 102",
          "09 - Format As A Service",
          "10 - Handle Large Flat File"
        ]
      },
      "requirements": [
        "Basic Understanding of Java, XML, XSLT, WebService, XSD"
      ],
      "description": "The following course is intended for those who are webMethods seekers / those who have plans to start their career in webMethods. The course covers the version 10.X and majority of the videos are recorded in version 10.11. Integration is categorized into 4 layers:-\n\n\nESB - Enterprise Service Bus\nAPI Management\nSOA Governance and\nMessaging Broker\nEach of these are itself a humungous topics. For example when we deal with Messaging Broker, webMethods have; webMethods Broker and Universal Messaging. When we deal with SOA Governance we have to cover the topics of CentraSite/Mediator. When we need to deal with Security/Policies/Runtime Management then we have to work on the webMethods API Management Tool and Mediator.\nConsidering all these factors, we know for sure irrespective of what, integration means Data Transformation from one format to another. And that falls under the layer of ESB. As an integration developer and also as an administrator, we need to know what is ESB and how to work with ESB. Do note: - ESB is just a concept, webMethods have incorporated ESB in it's own style. And for anyone who wants to start a career in Integration, I personally believe, ESB is the starting point, everyone should know how to deal with ESB. Once we are confident, then we move up the ladder. Henceforth, the following course is focused on the ESB layer only.\nWhat have we covered in this course? Well below are the topics we have covered\nwebMethods Installation and Configuration\nBasic and Advanced Development\nFlat Files\nWebservices - SOAP/WSDL\nJMS\nUniversal Messaging\nAdministrator works like\nStarting and Stopping IS/MWS\nExtended Settings\nWrapper & Custom Wrapper.conf\nLogging\nTuning Memory Management\nConfiguration of wM products\nPackage Installation\nwMDeployer\nJNDI\nSMTP - MIME\nXML, XSLT and JSON Development\nSFTP / FTP\nScheduler and File Polling\nJava Services\nDatabase - JDBC Adapter\nwebMethods Here and There... etc.;\nAs you can see, we have covered so many good topics and all these topics are very much essential for the webMethods journey. Having said that, I wish you all the very best in learning this course and hope, it would help in your webMethods career. Once again, wishing you all the very best. :)",
      "target_audience": [
        "This tutorial is intended for those who would like to start a career in webMethods space",
        "This tutorial is also for those who like to know about integration and strart their career in middleware tools"
      ]
    },
    {
      "title": "LeetCode in Java: Algorithms Coding Interview Questions",
      "url": "https://www.udemy.com/course/leetcode-coding-interview-question-solution-explanation/",
      "bio": "Ace your next coding interview by solving essential coding interview questions and get an offer from big tech company.",
      "objectives": [
        "Solve Easy to Hard Difficulty Problems using Different Data structures and algorithms (DSA)",
        "Solve Easy to Hard Difficulty Problems",
        "How to solve some of the classical coding interview questions",
        "How to breaking down the coding interview problems in a decomposition manner",
        "Strengthen your problem solving skills"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Intergers": [
          "FizzBuzz (LeetCode 412) [Asked by LinkedIn]",
          "FizzBuzz",
          "Single Number (LeetCode 136) [Asked by Amazon]",
          "Single Number",
          "Palindrome Number (LeetCode 9) [Asked by Facebook/Bloomberg]",
          "Palindrome Number",
          "Factorial Trailing Zeroes (LeetCode 172) [Asked by Microsoft]",
          "Factorial Trailing Zeroes",
          "Reverse Integer (LeetCode 7) [Asked by Facebook]",
          "Reverse Integer",
          "Pow(x, n) (LeetCode 50) [Asked by Facebook/Amazon/LinkedIn]",
          "Pow(x, n)",
          "Roman to Integer (LeetCode #13) [Asked by Google]",
          "Roman to Integer",
          "Integer to Roman (LeetCode #12) [Asked by Amazon]",
          "Integer to Roman"
        ],
        "Strings": [
          "Reverse String (LeetCode 344) [Asked by MicroSoft, Uber]",
          "Reverse String",
          "Longest Common Prefix (LeetCode 14) [Asked by Facebook]",
          "Longest Common Prefix",
          "Repeated DNA Sequences (LeetCode 187) [Asked by Google]",
          "Repeated DNA Sequences",
          "Valid Anagram (LeetCode 242) [Asked by Facebook]",
          "Valid Anagram",
          "Longest Palindromic Substring (LeetCode 5) [Asked by Facebook]",
          "Longest Substring without Repeating Characters (LeetCode 3) [Asked by Google]",
          "Reverse Words in a String (LeetCode 151) [Asked by Facebook/Amazon]",
          "Integer to English Words (LeetCode 273) [Facebook, Microsoft]"
        ],
        "Binary Search": [
          "Binary Search (LeetCode 704) [Asked by Infosys,Oracle]",
          "Search in Rotated Sorted Array (LeetCode 33) [Asked by Facebook]",
          "Find Minimum in Rotated Sorted Array (LeetCode 153) [Asked by Facebook]"
        ],
        "Arrays": [
          "Two Sum (LeetCode 1) [Asked by Google]",
          "Move Zeroes (LeetCode 283) [Asked by Facebook]",
          "Best Time to Buy And Sell Stock(LeetCode 121) [Asked by Facebook/Microsoft]",
          "Ransom Note (LeetCode 383) [Asked by Amazon]",
          "Contains Duplicate (LeetCode 217) [Asked by Google]",
          "Length of Last Word (LeetCode 58) [Asked by Amazon]",
          "Best Time to Buy and Sell Stock II (LeetCode 122) [Asked by Google]",
          "Rotate Array (LeetCode 189) [Asked by Microsoft]",
          "Jump Game (LeetCode 55) [Asked by Google]",
          "Product of Array Except Self (LeetCode 238) [Asked by Facebook]",
          "Sequential Digits (LeetCode 1291) [Asked by Facebook]",
          "Find All Disappeared Numbers in an Array (LeetCode 448) [Asked by Google]",
          "Find All Duplicates Numbers in an Array (Leetcode 442) [Asked by Facebook]",
          "First Missing Positive (LeetCode 41) [Asked by Microsoft]",
          "Next Permutation (LeetCode 31) [Asked by Google]",
          "Largest Subarray With 0 Sum [Asked by Microsoft]",
          "Subarray Product Less than K (LeetCode 713) [Asked by Goldman Sachs]",
          "K-Diff Pairs in an Array (LeetCode 532) [Asked by Amazon]"
        ],
        "Two Pointers": [
          "Two Sum II - Input Array Is Sorted (LeetCode 167) [Asked by Amazon]",
          "Is Subsequence (LeetCode 392) [Asked by Google]",
          "Remove Duplicates from Sorted Array (LeetCode 26) [Asked by Facebook/Microsoft]",
          "Sort Colors (LeetCode 75) [Asked by Facebook]",
          "Valid Palindrome (LeetCode 125) [Asked by Facebook]",
          "Merge Sorted Array (LeetCode 88) [Asked by Microsoft]",
          "3 Sum (LeetCode 15) [Asked by Facebook]"
        ],
        "Stacks and Queues": [
          "Valid Parentheses (LeetCode 20) [Facebook]",
          "Asteroid Collisions (LeetCode 735) [Asked by Lyft]",
          "Longest Valid Parentheses (LeetCode 32) [Asked by Google]",
          "Decode String (LeetCode 394) [Asked by Google]",
          "Largest Rectangle in Histogram (LeetCode 84) [Asked by Google]"
        ],
        "Famous Algorithm": [
          "Kaden's Algorithm (Maximum Subarray :: LeetCode 53) [Asked by Google]",
          "Boyer-Moore Voting Algorithm (Majority Element- LeetCode 169) [Asked by Amazon]"
        ],
        "Sorting Algorithms": [
          "Merge Sort Algorithm [Asked by Amazon, Microsoft]",
          "Count Inversions -- Using Merge Sort [Asked by Amazon, Microsoft]",
          "Quick Sort Algorithm [Asked by Amazon, Microsoft]",
          "Kth Largest/Smallest -- Quick Select (LeetCode 215) [Asked by Google, Microsoft]"
        ],
        "Matrix (2D ARRAY)": [
          "Matrix Diagonal Sum (LeetCode 1572) [Asked by MicroSoft]",
          "Practice - Matrix Diagonal Sum",
          "Transpose Matrix - 2 Variation (LeetCode 867) [Asked by Bloomberg]",
          "In-place Transpose Matrix - Square Matrix",
          "Rotate Image (LeetCode 48) [Asked by Microsoft]",
          "Rotate Matrix - Anti-clockwise",
          "Set Matrix Zeroes (LeetCode 73) [Asked by Facebook]",
          "Where Will the Ball Fall (LeetCode 1706) [Asked by Amzon]",
          "Range Sum Query 2D - Immutable (LeetCode 304) [Asked by Amazon]"
        ]
      },
      "requirements": [
        "Basic Knowledge of fundamental data structures and algorithms is preferred",
        "A Computer or Smart Phone with internet connection"
      ],
      "description": "Welcome to \"LeetCode in Java: Algorithms Coding Interview Questions\" course!\nIn this course, you'll have a detailed, step by step explanation of classical hand-picked LeetCode Problems where you'll learn about the optimum ways to solve technical coding interview question. This is the course I wish I had when I was preparing myself for the interviews. This course comes with a 30-day money-back guarantee. So nothing to lose!\nWhat is LeetCode?\nLeetCode is a huge repository of real interview questions asked by the most popular tech industries( Google, Amazon, Facebook, Microsoft, Apple, Quora, LinkedIn, Bloomberg, Uber, Goldman Sachs, Twitter and more ).\nInterviewers from the most popular companies(like Google, Amazon, Facebook, Uber, Twitter etc.) often directly ask questions they find on LeetCode. It's hard to navigate through the large amount of problems(around 1500) to most important questions, this is what this course stand for.\n\nI spent countless hours on LeetCode. From my experience, I'm telling you that you don't have to do the all problem and still be able to get a job at a big tech industry.\nBy the time you're finished with the course, you will be prepared for common technical coding interview questions.\nSee you inside the course!",
      "target_audience": [
        "Who want to succeed the technical coding interview at companies like Google, Facebook, Microsoft, Amazon, etc.",
        "People who want to developed their problem solving skill",
        "Who want to ace their technical coding interview",
        "Students getting ready for their internship"
      ]
    },
    {
      "title": "Spring Batch Framework for Beginners",
      "url": "https://www.udemy.com/course/spring-batch-framework-for-beginners-a/",
      "bio": "Build robust Batch Applications with Spring Batch and Spring Boot",
      "objectives": [
        "All Basic Fundamentals of Spring Batch",
        "Implement different Job Flows like Sequential Flow, Conditional Flow etc",
        "Implement different built-in ItemReaders like FlatFileItemReader, JdbcCursorItemReader, JsonItemReader etc",
        "Implement different built-in ItemWriters like FlatFileItemWriter, JdbcBatchItemWriter, JsonFileItemWriter etc",
        "Transforming, Validating and Filtering data using an ItemProcessor",
        "Implement different Spring Batch Listeners",
        "Error Handling in Spring Batch",
        "Build a complete Project in Spring Batch"
      ],
      "course_content": {
        "Introduction (Theory)": [
          "Course Overview",
          "What is Batch Processing?",
          "Use Cases of Batch Applications",
          "Introduction to Spring Batch",
          "Basic Concepts of Spring Batch",
          "Spring Batch Architecture"
        ],
        "Installation and Project Setup": [
          "Installing Eclipse IDE",
          "Installing MySQL Database",
          "Project Setup"
        ],
        "First Spring Batch Application": [
          "Write first Spring Batch Application",
          "Configuring Job Repository",
          "Running Spring Batch Jobs: Part 1",
          "Running Spring Batch Jobs: Part 2"
        ],
        "Basic Job Flow": [
          "Sequential Flow (Multiple Steps in a Job)",
          "Restarting Jobs",
          "Conditional Flow - Part 1 (BatchStatus and ExitStatus)",
          "Conditional Flow - Part 2",
          "Conditional Flow - Part 3 (Custom ExitStatus using StepExecutionListener)",
          "Conditional Flow - Part 4 (Custom ExitStatus using JobExecutionDecider)"
        ],
        "Reading Data": [
          "Introduction to Chunk-oriented Processing",
          "Introduction to ItemReader",
          "Implementing a Chunk-based Step",
          "Reading Data from a Flat File (CSV File)",
          "Reading Data from Relational Database - Part 1",
          "Reading Data from Relational Database - Part 2"
        ],
        "Writing Data": [
          "Introduction to ItemWriter",
          "Writing Data to a Flat File (CSV File)",
          "Writing Data to a Relational Database - Part 1",
          "Writing Data to a Relational Database - Part 2"
        ],
        "Processing Data": [
          "Introduction to ItemProcessor",
          "Transforming Data - Part 1",
          "Transforming Data - Part 2",
          "Filtering Data",
          "Validating Data - Part 1",
          "Validating Data - Part 2",
          "Chaining ItemProcessors"
        ],
        "Upgrading to Spring Batch 5": [
          "Upgrading to Spring Batch 5 - Part 1 (chunk-processing project)",
          "Upgrading to Spring Batch 5 - Part 2 (demo project)"
        ],
        "Advanced Job Flow": [
          "Introduction to Flows - Part 1",
          "Introduction to Flows - Part 2",
          "Nested Jobs",
          "Parallel Flows using Split - Part 1",
          "Parallel Flows using Split - Part 2",
          "JobExecutionListener",
          "StepExecutionListener",
          "ChunkListener",
          "ItemReadListener, ItemProcessListener and ItemWriteListener",
          "Sharing Data between Steps - Part 1",
          "Sharing Data between Steps - Part 2",
          "JobExecutionDecider"
        ],
        "Error Handling": [
          "Introduction to Error Handling",
          "Skipping Invalid Records",
          "Storing Invalid Records using a SkipListener - Part 1",
          "Storing Invalid Records using a SkipListener - Part 2",
          "Custom Skip Policy - Part 1",
          "Custom Skip Policy - Part 2",
          "Implementing Retry Logic - Part 1",
          "Implementing Retry Logic - Part 2"
        ]
      },
      "requirements": [
        "Basic knowledge of Java",
        "Basic knowledge of Spring Framework and Spring Boot"
      ],
      "description": "Spring Batch is a lightweight, open source framework for building java-based batch applications. It is a framework that makes it easier to write Batch Applications. Spring Batch is built on top of the Spring Framework. This course is designed for software developers who want to build their own Batch Applications in Java.\n\n\nFollowing are some of the important topics which we are going to cover in this course:-\nAll Basic Fundamentals of Spring Batch\nImplement different Job Flows like Sequential Flow, Conditional Flow etc\nImplement different built-in ItemReaders like FlatFileItemReader, JdbcCursorItemReader, JsonItemReader etc\nImplement different built-in ItemWriters like FlatFileItemWriter, JdbcBatchItemWriter, JsonFileItemWriter etc\nTransforming, Validating and Filtering data using an ItemProcessor\nImplement different Spring Batch Listeners\nError Handling in Spring Batch\nBuild a complete Project in Spring Batch\n\n\nThe tutorials in this course will teach you all the basic fundamentals of Spring Batch. After completing this course, you will be able to build your own Batch Applications using Spring Batch. It will be a good starting point if you want to dive into the batch processing world. With this course, you will understand how a batch application works, what are the common problems it solves and how can we make our Batch Application robust.  All the concepts are explained in a very simple language.\n\n\nSome of the highlights of this course:-\nA complete hands-on development course\nAll basic fundamentals of Spring Batch will be covered\nAll concepts explained with practical examples\nVery simple language used while explaining so that it’s easily understood\nCourse updated with the latest version of Spring Batch as of now\nBuild a complete Spring Batch project from scratch\n\n\nI believe you will enjoy this course. Happy coding :)",
      "target_audience": [
        "Software Developers who want to build Batch Applications in Java",
        "Anyone who wants to understand the working a Batch Application"
      ]
    },
    {
      "title": "Learn Micronaut - cloud native microservices with Java",
      "url": "https://www.udemy.com/course/learn-micronaut/",
      "bio": "Micronaut is a modern, full-stack framework for the cloud which can run natively on GraalVM",
      "objectives": [
        "Learn how to use the Micronaut Framework",
        "Build a REST API",
        "Micronaut Data Hibernate & JDBC",
        "Integrate OpenAPI and Swagger",
        "Messaging with Micronaut and Kafka",
        "Using Web Sockets with Micronaut",
        "Micronaut Security with JSON Web Tokens",
        "Integration Testing with TestContainers",
        "Run your Micronaut application on GraalVM",
        "Unit Testing with Micronaut"
      ],
      "course_content": {
        "Introduction": [
          "Course outline",
          "Micronaut introduction",
          "Framework comparison: Spring / Micronaut / Quarkus",
          "About your instructor",
          "Code examples & setup"
        ],
        "Getting started": [
          "Generate your first Micronaut application",
          "Inspect your first Micronaut application",
          "Hello world!",
          "Your first Micronaut test experience",
          "Setup IDE - annotation processing",
          "Packaging as Jar",
          "Packaging as Docker container",
          "Upgrading a Micronaut application using Gradle",
          "Upgrading a Micronaut application using Maven",
          "Java 21 Support"
        ],
        "Micronaut core": [
          "Overview",
          "Dependency injection - Overview",
          "Dependency injection - Field",
          "Dependency injection - Constructor",
          "Dependency injection - Interface",
          "Micronaut application context",
          "Logging",
          "Logging in tests"
        ],
        "Micronaut Web": [
          "Overview",
          "New Micronaut Web Project",
          "HTTP Routing - GET requests",
          "Using HTTP Clients and @Serdeable",
          "HTTP Routing - GET requests JUnit",
          "Path Variables",
          "Query Parameters",
          "Query Parameters - JUnit",
          "HTTP Routing - Annotations",
          "HTTP Routing - POST requests",
          "HTTP Routing - Custom Status Code",
          "HTTP Routing - POST requests JUnit",
          "HTTP Routing - PUT requests",
          "HTTP Routing - PUT requests JUnit",
          "Assignment: HTTP Routing - DELETE requests",
          "Solution: HTTP Routing - DELETE requests",
          "OpenAPI",
          "OpenAPI Configuration",
          "Local Error Handling",
          "Micronaut Versions"
        ],
        "Micronaut 3 - Quickstart": [
          "Your first Micronaut Application",
          "Hello World!",
          "Your first Micronaut Test Experience",
          "Setup IDE",
          "Micronaut Core",
          "Dependency Injection - Overview",
          "Using Dependency Injection",
          "Dependency Injection - Interface",
          "Logging",
          "Application Configuration",
          "Configuration Injection",
          "Immutable Configuration Injection"
        ],
        "Micronaut 3 - Micronaut Web": [
          "Overview",
          "New Micronaut Web Project",
          "Http Routing - GET requests",
          "Http Routing - GET requests JUnit",
          "Path Variables",
          "Query Parameters",
          "Query Parameters - JUnit",
          "Http Routing - PUT requests",
          "Assignment: Http Routing - DELETE requests",
          "Custom HttpResponse",
          "Error Handling - Code Preparation",
          "Error Handling - Custom HttpResponse",
          "HttpResponse - RestApiResponse",
          "Error Handling - Custom Exception Handler",
          "Error Handling - Error Response Processor",
          "Assignment: Finalise Controller Implementation"
        ],
        "Micronaut 2 - Quickstart": [
          "Micronaut 2",
          "Your first Micronaut Application",
          "Your first Micronaut Test Experience",
          "Setup IDE",
          "Micronaut Core",
          "Using Dependency Injection",
          "Application Configuration",
          "Immutable Configuration",
          "Logging",
          "Integrate Lombok"
        ],
        "Micronaut 2 - Micronaut Web": [
          "Overview",
          "Creating a new Micronaut Application",
          "Http Routing - GET requests",
          "Path Variables",
          "Custom HttpResponse",
          "HTTP Routing - PUT, DELETE",
          "Reactive HTTP Request Processing",
          "Open API and Swagger",
          "Json Settings"
        ],
        "Micronaut Security": [
          "JSON Web Token Authentication",
          "Authorization Header",
          "Custom REST Client",
          "JDBC Authentication Provider",
          "Custom JWT"
        ],
        "Micronaut Data": [
          "What is Micronaut Data?",
          "Setup a PostgreSQL Database",
          "Schema migration with Flyway",
          "Micronaut Data JPA - Repository",
          "Micronaut Data JPA - ManyToOne, Custom Query",
          "Micronaut Data JPA - Outlook and Break",
          "Micronaut Data JPA - Ordering",
          "Micronaut Data JPA - Data Transfer Objects (DTO)",
          "Micronaut Data JPA - Filter",
          "Micronaut Data JPA - Pagination",
          "New Project for Micronaut JDBC",
          "Setup a MySQL Database",
          "Schema migration with Liquibase",
          "Micronaut Data JDBC - Repository"
        ]
      },
      "requirements": [
        "Be able to read and understand Java",
        "Know how to work with Docker",
        "Beneficial: Know how annotation processing works",
        "Desire to learn while having fun!"
      ],
      "description": "--- ! Course REVAMP: Micronaut Version 4 ---\nRight now I am recording a full revamp of the course using the latest Micronaut Version and Java 25. I am super sorry for the big delay and was looking for help to get the course updated.\nPlease do not purchase the course if you want to rely on the latest version. It is better to wait until the revamp is done. Thank you very much.\nA lot of the core concepts stay the same, so there is still value to watch the current sections and build projects with Micronaut 3.\n---\nMost of the web applications operate in the cloud. Popular frameworks adapted and tried to make it easy. Micronaut was built to be cloud-native and offers:\nLauncher to get easily started\nImproved startup times & Minimal memory footprint\nNo Reflection Usage -> GraalVM support\nReactive non-blocking Http Server\nFast and easy testing\nMessaging Integrations\nDatabase Access made easy with Micronaut Data\nMicronaut Integrations with MongoDB, Redis, ElasticSearch ...\nMicronaut is a modern, JVM-based, full-stack framework for building modular, easily testable microservice and serverless applications.\nYou will be surprise how fast cloud-native applications can be built with Micronaut. The course starts with the basics and moves on to more and more details from section to section.\nUpcoming lectures:\nMore content on using GraalVM\nThe course covers currently:\nDependency Injection\nApplication Configuration\nLombok Integration\nCreating REST APIs & using Open API / Swagger\nCustom REST API Clients\nJWT Auth, JDBC Auth\nMicronaut Data Access using PostgreSQL & MySQL\nMessaging with Apache Kafka\nUsing Web Sockets\nBuilding GraalVM native Images\nHow to use Integrations like Redis, MongoDB, ElasticSearch\nand a lot more to come!\nIf you want to see specific content please drop me a message to prioritise it. My goal is to make the course a place where you have all you need to know to become a Micronaut Expert!\n\n\nAbout the instructor:\nDaniel is a senior software engineer and developed multiple web applications serving millions of users. He started as full stack developer and was able to gain experience for frontend and backend development.\nHe found his passion in developing highly scalable applications. Currently he works as a senior software engineer on a fin-tech platform that is used by more than seven million users (2025). He advanced into a role as Technical Lead & Principal Engineer. Now he offers his knowledge to his colleagues. The fin-tech platform utilises Technologies such as Apache Kafka, Java (Spring & Micronaut), PostgreSQL and AWS and consists of many Microservices.",
      "target_audience": [
        "Software Engineers looking for the next generation java framework",
        "Software Engineers building microservices with Java",
        "Software Engineers building services for the Cloud"
      ]
    },
    {
      "title": "Master Generative AI with Java and Spring Boot | Spring AI",
      "url": "https://www.udemy.com/course/gen-ai-spring/",
      "bio": "Use JAVA and Spring to Build Artificial Intelligence (AI) driven Applications and its lifecycle - Generative AI",
      "objectives": [
        "Integrate AI models into Spring Boot applications.",
        "Develop AI-driven features using Spring AI, DALL-E, and audio models.",
        "Implement advanced AI concepts like Retrieval-Augmented Generation.",
        "Deploy and optimize AI-powered applications for production.",
        "Build complete AI-powered web applications using Spring technologies."
      ],
      "course_content": {
        "Introduction to Spring AI": [
          "Introduction",
          "Role of AI in Spring Ecosystem",
          "Spring AI Capabilities"
        ],
        "Working with AI Models in Spring": [
          "Git Repo details",
          "What is LLM",
          "Spring AI Documentation",
          "OpenAI ChatGPT Walkthrough",
          "Generating Spring AI Project",
          "OpenAI API Key and Walkthrough",
          "Setting Application with API Key",
          "Calling ChatClient with Controller",
          "API Call with ChatResponse Object",
          "API with PromptTemplate",
          "API with String Template of Prompts",
          "Roles in Prompts for API",
          "API with Prompt and data",
          "OutputConverters and BeanOutputConverter example with API",
          "ListOutputConverter and Entity handling in API",
          "Quiz: Working with AI Models in Spring"
        ],
        "Prompt Engineering": [
          "Introduction to Prompt Engineering",
          "What is Prompt Engineering ?",
          "Importance of Prompt Engineering",
          "Instruction Prompts",
          "Completion Prompts",
          "Zero-Shot Prompts",
          "Few-Shot Prompts",
          "Role based Prompts",
          "Conversartional Prompts",
          "Chain of Thought Prompts",
          "Creative Prompts",
          "Creative Story from Prompt",
          "Comparison Prompts",
          "Debugging Prompts",
          "Best Practices in Prompt Engineering",
          "Challenges and Application of Prompt Engineering"
        ],
        "Spring AI with DALL-E and Audio Models (MultiModality)": [
          "Git Repo details",
          "Spring AI Multimodal Introduction",
          "Image to Text generation API",
          "Image Generation API",
          "Audio Transcription API",
          "Text to Speech API"
        ],
        "Retrieval-Augmented Generation (RAG) with Spring AI": [
          "Git Repo details",
          "What is RAG",
          "Introduction to Vector and Vector Database",
          "RAG Implementation Overview",
          "SimpleVector Store Imlementation for RAG",
          "Understanding Tokens for LLM Models",
          "Loading Simple Vector Store in App",
          "Implementing API to use Simple Vector Store for RAG",
          "Adding PGVector Store in Application",
          "Loading Data to PGVector Store for RAG",
          "Implementing SimilaritySearch with PGVector Store for RAG"
        ],
        "Building AI driven Application": [
          "Git Repo details",
          "Application Overview",
          "Commands for Creating FE App",
          "Creating Frontend App and setting up config",
          "Adding Feedback Form in UI",
          "Adding Feedback History in UI",
          "Creating AI driven Spring Boot Application",
          "Fetching Feedbcak API",
          "Save Feedback API",
          "Implement Save Feedback in UI",
          "Implement Feedback History in UI",
          "Enhancing UI of Application"
        ]
      },
      "requirements": [
        "Basic knowledge of Spring Framework and Spring Boot.",
        "Familiarity with RESTful APIs.",
        "Understanding of core Java programming concepts.",
        "Basic understanding of AI/ML concepts (optional but beneficial)."
      ],
      "description": "Welcome to Master Generative AI with Java and Spring Boot | Spring AI, the ultimate course for Java and Spring developers looking to harness the power of Artificial Intelligence (AI) in their applications. This comprehensive course is tailored to empower you with the skills and knowledge to build intelligent, feature-rich applications using Spring AI and the Spring ecosystem.\nWhy This Course?\nAI transforms industries by automating complex tasks, personalizing user experiences, and driving innovation. As a Java/Spring developer, integrating AI into your applications is no longer optional—it's the future. This course bridges the gap between AI and Spring development, enabling you to create AI-powered applications seamlessly.\nWhat You’ll Learn:\nModule 1: Introduction to Spring AI\nExplore how AI is shaping modern applications across industries, including healthcare, e-commerce, automation, and security.\nUnderstand the role of AI in the Spring ecosystem, including AI model integration, natural language processing (NLP), and machine learning (ML).\nLearn the core capabilities of Spring AI, such as natural language understanding, image generation, voice synthesis, and enhanced search.\nSet up your development environment and create your first Spring Boot application with AI capabilities.\nModule 2: Working with AI Models in Spring\nIntegrate pre-trained AI models into your Spring applications.\nBuild APIs using advanced tools like ChatModel, ChatClient, and PromptTemplate.\nExplore various prompt types and their use cases in AI-driven interactions.\nLearn low-level and high-level API integrations, including Entity-based and BeanConverter implementations.\nModule 3: Prompt Engineering\nMaster the art of prompt engineering to optimize AI model interactions.\nLearn techniques to craft precise prompts for language models.\nDiscover real-world applications and case studies for effective prompt engineering.\nModule 4: Spring AI with DALL-E and Audio Models (Multimodality)\nWork with DALL-E to generate and manipulate images.\nCreate APIs for text-to-image, image-to-text, and audio processing tasks.\nImplement translation and text-to-speech features for voice-enabled applications.\nModule 5: Retrieval-Augmented Generation (RAG) with Spring AI\nGain a deep understanding of Retrieval-Augmented Generation (RAG) and its significance in AI-driven applications.\nImplement RAG with Spring AI and Vector Stores for enhanced search and contextual responses.\nExplore use cases like document summarization, personalized recommendations, and knowledge retrieval.\nModule 6: Building Projects\nApply your knowledge to build practical, end-to-end AI-powered applications.\nWork on hands-on projects integrating AI models with real-world datasets and use cases.\nModule 7: Real-World Projects\nDive into real-world projects to solidify your skills and gain experience in building industry-grade AI applications.\nKey Features of This Course:\nStep-by-step tutorials with practical examples.\nReal-world use cases, hands-on projects, and coding exercises.\nDetailed insights into integrating AI technologies like NLP, DALL-E, and RAG with Spring Boot.\nGuidance on deploying scalable AI solutions in production.\nWho Should Enroll?\nJava and Spring developers eager to integrate AI into their applications.\nAI enthusiasts who want to learn how to work with advanced AI models in a Spring ecosystem.\nSoftware engineers looking to stay ahead in the evolving tech landscape by mastering AI-powered application development.\nPrerequisites:\nBasic knowledge of Java and Spring Framework.\nFamiliarity with REST APIs and Spring Boot.\nCuriosity to explore AI technologies and their applications.\nWhat You’ll Gain:\nBy the end of this course, you’ll have the expertise to build, deploy, and maintain AI-powered applications using Spring AI. You’ll be equipped to solve real-world problems and create innovative solutions, opening up exciting opportunities in your career as a software developer.\nJoin now and unlock the power of AI in your Spring applications!",
      "target_audience": [
        "Java/Spring Developers looking to integrate AI into their applications.",
        "AI enthusiasts who want to learn how to use AI within the Spring framework.",
        "Software Engineers interested in enhancing their applications with AI-driven functionalities.",
        "Professionals looking to upskill in AI and Spring technologies."
      ]
    },
    {
      "title": "Learn Blockchain Programming with Hyperledger Fabric",
      "url": "https://www.udemy.com/course/learn-blockchain-programming-with-hyperledger-fabric/",
      "bio": "Learn blockchain programming using Hyperledger Fabric. Develop a Letter of Credit Blockchain Network with Hyperledger.",
      "objectives": [
        "You will have a strong understanding about how to develop Hyperledger Fabric Networks",
        "You will have a strong understanding on how to deploy Smart Contracts on Hyperledger Fabric",
        "You will learn how to use Hyperledger Docker Images and work with Hyperledger Fabric Tools and Utilities",
        "You will learn how to deploy applications over Hyperledger Fabric networks.",
        "You will learn how to develop Chaincode and provision the same over Peers"
      ],
      "course_content": {
        "Introduction to the Course": [
          "Course Outline",
          "Prerequisites for the Course",
          "Getting Started: Instant Support"
        ],
        "Introduction to Distributed Ledgers": [
          "Section Overview",
          "Distributed Ledger Technology",
          "Cryptography, Transactions and Smart Contracts"
        ],
        "Introduction to Hyperledger Fabric": [
          "Introduction to Hyperledger",
          "Getting to know Hyperledger Fabric",
          "Hyperledger Fabric Functionalities",
          "Hyperledger Fabric Key Features"
        ],
        "Deep Dive into Hyperledger Fabric Architecture": [
          "Hyperledger Fabric Architecture"
        ],
        "Overview of Hyperledger Fabric Transaction Flow": [
          "Transaction Flow Overview",
          "Steps involved in Transaction Flow"
        ],
        "Prerequisites for setting up Hyperledger Fabric": [
          "Prerequisites Guidelines",
          "Prerequisites which are required for the development environment",
          "Prerequisites (Only Windows): Enabling Windows Features and Linux Subsystem",
          "Text: Enabling Windows Features and Linux Subsystem",
          "Prerequisites: Installing Docker and Docker Compose",
          "Text: Installing Docker and Docker Compose",
          "Prerequisites: Connecting Docker(Only Windows) and Go Installation",
          "Text: Connecting Docker and Go Installation",
          "Prerequisites: Installing NodeJS and NPM",
          "Text: Installing NodeJS and NPM",
          "Prerequisites: Sharing Folders and Running a sample network",
          "Text: Sharing Folders and Running a sample network"
        ],
        "Introduction to the Capstone Project": [
          "Introduction to the Capstone Project",
          "Glossary terms for Capstone Project",
          "Capstone Network: Development Walkthorugh",
          "Tools which we are going to use with Capstone Project"
        ],
        "Additional: Getting familiar with YAML Language": [
          "Introduction to YAML Language",
          "Working with YAML Language"
        ],
        "Additional: Getting familiar with Docker": [
          "What is Docker?",
          "How Docker Works?",
          "Docker and Hyperledger"
        ],
        "Capstone Project: Generating Cryptographic Material (Crypto Config)": [
          "Generating Cryptographic Material: Orderer Organization",
          "Generating Cryptographic Material: Peer Organizations",
          "Code: Generating Cryptographic Material",
          "Generating Cryptographic Material: Running Cryptogen",
          "Text: Running Cryptogen"
        ]
      },
      "requirements": [
        "Prior experience with any programming language is preferred (Recommended: Go, NodeJS or Java). This course is specifically a Developer's course.",
        "Prior experience with containerization and virtual machines is also preferred (Recommended: Docker).",
        "Anyone who wishes to learn development with Hyperledger Fabric or has a passion to learn about Blockchain programming is welcome to take up this course."
      ],
      "description": "Prerequisites for this course\nClear grasp on Blockchain concepts.\nKnowledge about Hyperledger Fabric.\nFamiliarity with any one of the programming languages.\nFamiliarity with Certificates and Identity Management.\nBasic understanding of Containerization like Docker.\nBasic understanding of Certificate Authorities and How they work?\n\n\nLearn from the industry experts!\n\n\nLearn how to use Hyperledger Fabric and create extensive private Blockchain applications in the simplest terms.\n\n\nWelcome to the Blockchain Development with Hyperledger Fabric Course. Hyperledger Fabric is a blockchain framework implementation and one of the Hyperledger projects hosted by The Linux Foundation. Hyperledger Fabric consists of a set of collaboration tools that help in the development of the private Blockchain networks. Hyperledger Fabric provides you a modular framework that can be utilized to build applications for multiple domains. This course has been designed in such a way that you will get a thorough understanding of how the build Blockchain network and applications using Hyperledger Fabric. This course will also take you through the development walk-through for chaincode over the Hyperledger Fabric Blockchain. This is a particular course that explains how to use Hyperledger Fabric tools to build up a Private Blockchain solution with the help of a Capstone Project.\n\n\nThis is a Developer's course, and this course is created to give a clear understanding of how to create Blockchain applications using Hyperledger Fabric.\n\n\nIn 2018, the rise in jobs in the Blockchain sector had been 7000%. For every 14 jobs in the USA, there is only one person who is available to take up a position in Blockchain Technology. Hyperledger Fabric is a solution that is at the top of the curve for governments and enterprises. Industries like Walmart, McDonald's, Nestle, Dole, etc. have already implemented Hyperledger Fabric, and many more are seeking the help of the Hyperledger Platform to solve their problems and get an efficient solution.\nWhat you will get with this course:\nTo make this course more interactive, we have provided various quizzes as a part of the modules. You will get more clarity and will be able to master all the essential topics related to the usage of Hyperledger Fabric and it's key concepts.\n\n\nWhat we cover in this course:\nIntroduction to Distributed Ledger Technology\nOverview of different projects under the Hyperledger Umbrella\nIntroduction to Hyperledger Fabric\nKey Functionalities offered by Hyperledger Fabric\nKey Concepts of Hyperledger Fabric\nTransaction Flow\nSetting up Hyperledger Fabric Development Environment\nOverview of YAML Language\nOverview of Docker and Docker Compose\nLearning to work with Cryptogen tool\nGenerating Cryptographic Material for Peers and Orderers.\nLearning to work with Configtxgen tool\nDefining Genesis Block and Channel Configurations\nSetting up Kafka and EtcdRaft Ordering Service Nodes.\nLearning to work with Docker Compose to compose containers for Blockchain networks.\nSetting up CLI and Chaincode Bash for Chaincode Development\nChaincode Libraries and Development Suite.\nLearning to Develop Chaincode using Go Language\nHyperledger API and Command Line Tools\nYou will learn to Interact with Hyperledger Fabric Network.\nYou will learn to set up Kafka and EtcdRaft Ordering Nodes.\nWe2Blocks is a Blockchain Consultation and Training Company having a global presence. With this course, we aim to promote Blockchain and create an environment for people interested in Blockchain to learn and expand their knowledge.",
      "target_audience": [
        "Professionals curious to learn how to use Hyperledger Fabric for developing Hyperledger Blockchain applications.",
        "Software Developers curious to learn about Hyperledger Fabric.",
        "Blockchain Consultants curious to learn about Hyperledger Fabric.",
        "Students curious to learn about Hyperledger Fabric and how it is being used in the industry.",
        "People curious to start their career in Hyperledger Fabric Blockchain.",
        "Managers curious to learn how to use Hyperledger in real world projects."
      ]
    },
    {
      "title": "Complete guide to AWS Step Functions",
      "url": "https://www.udemy.com/course/complete-guide-to-aws-step-functions/",
      "bio": "Master the art of serverless workflow orchestrate in AWS.",
      "objectives": [
        "Becoming familiar with the Step Functions service and when you should use it.",
        "Understand how to build business workflows using Lambda and Step Functions.",
        "Understand how to trigger Step Functions using API Gateway and CloudWatch Events.",
        "Understand how to wait for human input using activities and callbacks.",
        "Know how to monitor and debug Step Function executions.",
        "Get up-to-date on the latest features for the Step Functions service.",
        "Understand advanced concepts such as blue-green deployments and nested workflows.",
        "Understand best practices for using Step Functions.",
        "Learn common design patterns."
      ],
      "course_content": {
        "Introduction": [
          "Welcome",
          "About the instructor"
        ],
        "Step Functions 101": [
          "What is Step Functions?",
          "A tour of the Step Functions console",
          "When to use Step Functions",
          "The 7 types of states",
          "Managing execution state",
          "Error handling",
          "Service limits",
          "Monitoring and debugging",
          "Express workflows",
          "AWS PrivateLink"
        ],
        "Building state machines": [
          "Serverless framework and Step Functions",
          "Chaining function calls",
          "Retry",
          "Catch",
          "Branching",
          "Parallel tasks",
          "Waiting",
          "Using Pass state to modify execution state",
          "Map",
          "Express workflows"
        ],
        "Triggers": [
          "API Gateway",
          "CloudWatch Event"
        ],
        "Activities": [
          "What are activities?",
          "Using activities in Step Functions",
          "Configuring activities in serverless.yml"
        ],
        "Other AWS services": [
          "SNS",
          "SQS",
          "DynamoDB"
        ],
        "Callbacks": [
          "What are callbacks?",
          "Configuring callbacks in serverless.yml"
        ],
        "Nested workflows": [
          "What are nested workflows?",
          "Configuring nested workflows in serverless.yml"
        ],
        "Blue-green deployments": [
          "Why do we need blue-green deployments?",
          "Implementing blue-green deployments in serverless.yml"
        ],
        "Best practices": [
          "Best practices"
        ]
      },
      "requirements": [
        "Know the basics of AWS"
      ],
      "description": "Master the art of serverless workflow orchestrate in AWS.\nYou will learn everything you need to make effective use of the AWS Step Functions service. At the end of the course, you should have a good grasp of how it works, when to use it, and design patterns and best practices to help you make the best use of the Step Functions service.\nYou will follow along with our hands-on demos to see how you can build business workflows and orchestrate Lambda functions using Step Functions. You will also learn how to trigger state machine executions using API Gateway and CloudWatch Events, as well as how to wait for human input using activities and callbacks.\nFurthermore, Step Functions can integrate with far more than just Lambda functions. You will see how to integrate your state machines with other AWS services such as SNS, SQS and DynamoDB. You'll learn about best practices and see some common design patterns you can apply with Step Functions such as the Saga pattern.",
      "target_audience": [
        "Software developers interested in serverless."
      ]
    },
    {
      "title": "TCP/IP Socket Programming in C# .Net For Coders & Students",
      "url": "https://www.udemy.com/course/tcpip-socket-programming-for-coders-using-csharp-net/",
      "bio": "C# Networking in TCP IP Socket Library - Examples in WinForms With async/await Tutorial, Client Server Example Code",
      "objectives": [
        "TCP/IP Socket programming basics and advanced level with async/await in C# .Net",
        "Develop a sound understanding of how networking applications communicate in C# .Net",
        "Network Programming using .Net Framework networking Namespaces in C#",
        "C# Networking"
      ],
      "course_content": {
        "Essential Networking Theory For Socket Programming": [
          "Introduction to TCP/IP socket programming in C# .Net using Visual Studio",
          "Downloading Source Code",
          "The Host In Computer Network - Networking Essentials",
          "IP Address In Computer Network - Networking Essentials",
          "Port Numbers In Computer Network Socket Programming- Networking Essentials",
          "Client/Server Model as used in TCP/IP Stream Sockets - Networking Essentials",
          "Enable the Telnet client utility - Networking Essentials",
          "Test your Networking Essentials knowledge"
        ],
        "Socket Programming in C# For Beginners": [
          "Server Side TCP/IP Socket Programming C# .Net Project Setup in Visual Studio",
          "Demo - Accept Incoming Connections on Socket in C# .Net Using Telnet Client",
          "Receive Data on a TCP/IP Socket in C# .Net",
          "Using Encoding.ASCII.GetString to Convert Bytes To String for socket transfer",
          "Socket Programming: Send Data on a TCP/IP Socket in C# .Net",
          "Socket Programming Example Demo - Send and Receive Data on TCP/IP Sockets in C#",
          "Demo - Communicate between C# desktop & Android app, configure Windows Firewall",
          "Introduction to Client Side TCP/IP Socket Programming in C# .Net",
          "Client Side Socket Programming VS Project Setup, using methods Connect, TryParse",
          "Socket.Send() & Socket.Receive() Calls On Client Side TCP/IP Socket in C#.Net",
          "Demo - Run TCP/IP Client & Server network programs, improve Server",
          "How to cleanup a console application for properly closing the TCP/IP Socket",
          "Section Summary",
          "Introduction to socket programming in C# .Net"
        ],
        "TCP/IP Server Asynchronous Socket Programming With async & await Keywords in C#": [
          "Section Intro: Asynchronous socket programming with async await in C# .Net",
          "Example: Disadvantage of synchronous I/O in C# .Net",
          "Accepting a TCPClient Connection Asynchronously with await keyword in C#",
          "Demo: Accept TCPClient Asynchronously",
          "Continuously Accept Client Connections, Exception Handling in C# async Method",
          "Use System.Net.Socket.NetworkStream & StreamReader to read data from client",
          "Demo: Read Data On Network Stream and Endless Accept async in C#.Net",
          "How to Handle Multiple Network Clients on Server in C# .Net",
          "Demo: Send Data to Multiple Network Clients from List at Once, SendAll Method",
          "How to Stop Listening for New Connections and Disconnect Client Sockets Properly",
          "Demo: TcpListener.Stop and TcpClient.Close Calls to Stop Server",
          "Section Summary: TCP/IP Server Side Asynchronous Socket Programming in C# .Net"
        ],
        "Async Client Side Socket Programming": [
          "Client side async socket Visual Studio C# project setup",
          "Client Socket Programming using async keyword in C#.Net",
          "Creating a console application and adding C# socket library reference",
          "Reading data from TcpClient socket network stream with ReadAsync in C# .Net",
          "Demo: Async Client side TCP/IP socket programming in C# .Net",
          "Writing data on the a client socket with StreamWriter in C# .Net",
          "Demo: Write data on TcpClient network stream with StreamWriter in C#.Net",
          "Close Connection on TCPClient for socket programming in C# .Net",
          "Demo: Closing connection on TcpClient for socket programming in C# .Net",
          "Section Summary: Async client socket programming in C# .Net with async/await"
        ],
        "Using Publisher Subscriber Model To Add Events for socket library in C# .Net": [
          "Introduction to pub/sub model and events/delegates in C#.Net",
          "Adding a ClientConnected event to the server socket library in C# .Net",
          "Adding a TextReceived event on the server to socket library in C# .Net",
          "Publishing event TextReceived on client to socket library in C# .Net",
          "Additional Events C# Source Code"
        ],
        "Socket Programming: Additional Helpful Topics in C# .Net": [
          "Finding IP Address & Hostname of Your Windows PC from Command Prompt",
          "Role of DHCP and DNS in a Computer Network",
          "Resolving Hostname to IP Address Using System.Net.DNS for socket programming C#",
          "Demo: Resolving Hostname with System.Net.DNS Class in C# .Net",
          "How to use StreamReader.ReadLineAsync and StreamWriter.WriteLineAsync in C# .Net",
          "Bonus: UDP Socket Programming in C# .Net"
        ],
        "Deprecated Section: Creating a TCP/IP socket server": [
          "Setting up the project in Visual Studio",
          "Preparing a TCPListener",
          "Listening for incoming connection requests",
          "Demo, incoming connection requests",
          "Getting hold of a TCPClient object",
          "Reading data from a TCPClient network stream",
          "Demo, reading data",
          "Writing data to a TCPClient network stream",
          "Demo, writing data",
          "Creating a TCP/IP Server"
        ],
        "Deprecated Section: Creating a TCP/IP socket client": [
          "Setting up the project for socket client in Visual Studio",
          "Connect to a TCP/IP socket server in C# .Net",
          "Send data to a TCP/IP socket server",
          "Demo, connect to TCP/IP socket server and send data",
          "Receiving data from a server",
          "Demo, receiving data from server"
        ],
        "Deprecated Section: Common Network Programming Topics": [
          "Understanding and Using Loop-back Address",
          "Finding IPv4 Address using Code",
          "Handling more than one clients connection requests on server",
          "Bonus: Maintaining a list of clients to handle multiple clients on your server",
          "Bonus: Demo - Handling multiple clients on TCP/IP server",
          "Listen for incoming connections on \"Any\" IP Address"
        ]
      },
      "requirements": [
        "C# .Net programming language, basic skills",
        "Microsoft Visual Studio 2015, 2017 or above will be needed to write C# .Net async code shown in this course",
        "A PC which is connected to a network using Ethernet or WiFi capable of running .Net"
      ],
      "description": "Network and socket programming tutorial in C# .Net using TCP\nGet proficient in computer network socket programming using TCP/IP streaming sockets and become a better professional programmer. This course will start you with TCP IP network programming with C# dotnet socket library and Dotnet fast.\nEach video in this course covers an essential concept of client-server socket programming & network communication. The ready-to-use C# code examples are supplied in the Visual Studio solution form to download. After every few lectures, a demo will show you the practical implementation of the concepts described earlier.\nBy the end of this course, you will be able to create C# (Sharp) .Net software capable of sending and receiving data over TCP/IP sockets on a peer-to-peer basis with async and await keywords. You will learn not only socket programming but async/await keywords as well. The course will make you a better programmer.\nTCP/IP is a protocol suite that provides reliable, end-to-end communication over the Internet. It is not a layer in the OSI model but spans multiple layers, including the network layer (layer 3) and transport layer (layer 4). The TCP/IP protocol suite is designed to work on top of the underlying network infrastructure, allowing different network technologies to communicate with each other. While it doesn't fit neatly into the OSI model, TCP/IP is widely used and is critical in modern networking.\n\n\nWhy take this course?\nYou should take this course if you're a professional(or student) with some coding experience in the past but lack an understanding of how computer networks work on a software level(either in C#, Java, or C++).\nYou will learn valuable techniques in real-life scenarios commonly faced by programmers.\nMany students of distributed application programming university courses have taken this course in the past and posted positive comments in reviews. They could quickly complete their assignments on their own after watching this course.                        This is the best socket programming course on Udemy.\nSection 1 is free; it contains useful information anybody can benefit from, whether they're familiar with C#.Net.\nMinimum upfront theory\nMany courses tend to pile up theory ahead of the actual code. This course is going to take a minimum theory-first approach.\nYou will learn the essentials of network programming and start writing C# code in under 15 minutes.\n\n\nUse of Windows Forms and class library\nTCP IP socket programming in C Sharp on Windows is the focus of this course. For example, this course will use a class library project in C# to show client/server applications in WinForms. This is an approach different from many other courses that use command-line projects. My teaching methodology makes the course much less boring, non-classroom-like, practically advantageous, and suitable for professionals.\nShort, sweet, to the point\nThe entire course is designed with busy professionals in mind, and the videos were created to make your online learning experience fruitful and easy. It is project-based training.\nAsynchronous programming with async/await keywords, a modern real-world solution\nasync/await keywords were introduced in C# 5.0. In traditional socket programming scenarios, (multi) threading creates a responsive server or client. I have bypassed that route and shown you how to use asynchronous sockets directly. I first explain to you what async/await keywords are. Then I show how to use these for non-blocking network I/O. This part of the puzzle is the key to high-traffic enterprise applications.\nReinforced learning\nEach section contains a quiz at the end, which is very helpful to ensure that you review and retain essential bits of information imparted in a relevant course section.\nJoin an active community.\nBecome a part of the programmer community who has already taken this course. Your fellow students will answer your questions, and the course instructor as well. A wonderful place to start learning!\nLearn something new\nSockets are considered an advanced topic, a danger zone in programming parlance. However, knowing it means you take your trade seriously.\nObject Oriented Programming\nThis course teaches you how to create a distributed application using the principles of OOP. You will bridge the gap between the back-end C#.Net class library and the front-end WinForms application by implementing the Publisher/Subscriber model based on EventHandler classes. This course also shows you what event handlers are and how to create your event.\nBonus\nYou will also learn how to resolve a hostname to an IP Address using System.Net.DNS class. You'll also implement various sanity checks using tryparse and try/catch.\nYou don't need to learn C to work on this course.\n\n\nThere are a few key things to remember regarding TCP/IP socket programming in C#. First and foremost, it's important to understand the basics of how sockets work and how they can be used to establish network connections between applications. In C#, you can use the Socket class to perform socket programming tasks and interact with network sockets. This class provides a range of methods and properties that allow you to create, connect, send, and receive data from sockets. With a solid understanding of the Socket class and its functionality, you can create robust and reliable network applications that communicate seamlessly with other applications over the internet.\nTCP/IP, or Transmission Control Protocol/Internet Protocol, is the primary protocol used for communication on the Internet. Here are some pros and cons of using TCP/IP:\n\n\nPros of TCP/IP Sockets:\n- TCP/IP is a widely adopted protocol, meaning that it is compatible with many different devices and networks.\n- It is a reliable protocol that ensures data is transmitted accurately and in the correct order.\n- TCP/IP can handle large amounts of data, making it suitable for use with high-bandwidth applications like video streaming.\n\n\nCons of TCP/IP Sockets:\n- TCP/IP can be slow, particularly when compared to other protocols like UDP.\n- The protocol is not particularly secure, meaning that data transmitted using TCP/IP is susceptible to interception and tampering.\n- TCP/IP is relatively complex, meaning that it can be difficult to implement and maintain.\n\n\nThis course is related to Socket Java, Python socket, and UDP.",
      "target_audience": [
        "Take this course if you have some C# or Java programming experience",
        "Network programming is a very interesting topic, if you're looking to study something off-beat in C# go for this course",
        "Take this course only if you have never written code in any language (C#, C++, Java)"
      ]
    },
    {
      "title": "Cloud-Native: Microservices, Kubernetes, Service Mesh, CI/CD",
      "url": "https://www.udemy.com/course/cloud-native-microservices-kubernetes-service-mesh-cicd/",
      "bio": "Master Cloud-Native: Microservices, Containers, Kubernetes, Service Mesh, gRPC, Helm, Redis, Kafka, CI/CD, GitOps, ELK..",
      "objectives": [
        "Cloud-Native Pillars: Microservices, Containers, Orchestrators, Communications, Backing Services, Scalability, Devops CI/CD, Monitoring",
        "Design and Develop Microservices Architecture using aspnet web minimal apis.",
        "Containerize microservices using cloud-native tools such as Docker and containerd.",
        "Orchestrate containers using Container Orchestrators like Kubernetes, docker swarm.",
        "Deploy and manage microservices on Kubernetes.",
        "Discover service mesh and Kubernetes-native solutions for microservices orchestration.",
        "Communicate between Kubernetes pods using Service Meshes like Istio.",
        "Implement Backing Services in Cloud-Native: Databases, Distributed Caches, Message Brokers",
        "Auto-scaling applications in Kubernetes using Horizontal Pod Autoscaler (HPA) and Kubernetes Event-driven Autoscaling (KEDA).",
        "Implement DevOps, CI/CD pipelines, IaC, GitOps principles into architecture using Cloud-native tools like Github Actions, Terraform, ArgoCD.",
        "Monitoring and Observability with Prometheus, Grafana, ELK stack into Kubernetes cluster",
        "Learn cutting-edge Kubernetes patterns and serverless",
        "Deploy Redis and Kafka nodes on Kubernetes cluster using Minikube",
        "Develop 10+ Hands-on lab using Cloud-native Landscape tools",
        "Develop Serverless Architecture using AWS Cloud services"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Evolution of Cloud Platforms: Cloud Hosting Models: IaaS - CaaS - PaaS - FaaS",
          "Cloud-Native Application Architecture",
          "Hands-on Projects",
          "How to Follow the Course & Course Slides"
        ],
        "Introduction to Cloud-Native - What is Cloud-Native Architecture ?": [
          "What is Cloud-Native ?",
          "Cloud Native Architecture Design Principles and Key Characteristics",
          "Benefits of Cloud-Native Architectures",
          "Challenges of Cloud-Native Architectures",
          "The Cloud Path of Legacy Applications - Modernization of Legacy Apps with Cloud",
          "Cloud-Native Quiz"
        ],
        "Cloud-Native Deep Dive - Landscape, Trial Map and Pillars": [
          "Introduction - Cloud-Native Deep Dive - Landscape, TrialMap and Pillars",
          "Cloud Native Computing Foundation (CNCF)",
          "Quick Tour on Cloud Native Computing Foundation (CNCF)",
          "What Is the CNCF Landscape ?",
          "Deep Dive into CNCF Landscape Categories",
          "Complicated with CNCF Projects ? - Funny Break",
          "CNCF Cloud Native Trail Map",
          "All Cloud Native Pillars - Extended for Course Structure",
          "Cloud-Native Landscape, TrialMap and Pillars Quiz"
        ],
        "Pillar1: Microservices": [
          "Introduction to Pillar1: Microservices",
          "12-Factor App and Cloud-native Trial Map - Microservices",
          "Evolution of Architectures; Monolithic, Microservices, Serverless",
          "What are Microservices ?",
          "What is Microservices Architecture ?",
          "When to Use Microservices Architecture - Best Practices",
          "When Not to Use Microservices - Anti-Patterns of Microservices",
          "Monolithic vs Microservices Architecture Comparison",
          "The Database-per-Service Pattern - Polygot Persistence",
          "Explore: Languages and Frameworks for Microservices",
          "Explore: Cloud-Native Microservices Frameworks",
          "Explore: Cloud Managed and Serverless Microservices Frameworks",
          "Design: Cloud-Native Microservices Architecture - Way of Learning",
          "Understand E-Commerce Domain: Analysis and Decompose E-Commerce Microservices",
          "Identifying and Decomposing Microservices for E-Commerce Domain",
          "Design: Cloud-Native E-commerce Microservices Architecture",
          "Choose Microservices Language and Frameworks for Cloud-Native Microservices",
          "Reference Project: .Net Microservices - Cloud-Native E-commerce App",
          "Reference Project: AWS Serverless Microservices - Cloud-Native E-commerce App",
          "The Greenfield Project: Justifying a Microservices Architecture",
          "Pillar1: Microservices Quiz"
        ],
        "Hands-on: Develop a RESTful Microservices with CRUD endpoints": [
          "Introduction - Hands-on: Develop a RESTful Microservices with CRUD endpoints",
          "Primary Programming Languages and Frameworks among Microservices Developers",
          "Why .Net for Microservices Development ?",
          "Install Prerequisites",
          "Developing Product Microservices",
          "Run the Application - Product Microservices",
          "Create Product Microservices with AWS Serverless Services: AWS Lambda, API Gw",
          "Hands-on: Create Product Microservices with AWS Lambda, API Gateway and DynamoDB"
        ],
        "Pillar2: Containers": [
          "Introduction to Pillar2: Containers",
          "12-Factor App and Cloud-native Trial Map - Containers",
          "Evolution of Cloud Platforms: Cloud Hosting Models: IaaS - CaaS - PaaS - FaaS",
          "What are Container ?",
          "Best Practices of using Containers",
          "How Containers Works ?",
          "What is Container Runtimes ?",
          "What is a Container Registry ?",
          "Containerization: Running Microservices in Containers",
          "What is Docker ?",
          "Docker Containers, Images, and Registries",
          "Docker Architecture",
          "Explore Container tools: Container Runtimes, Registries, Deployments",
          "Explore: Container Registries",
          "Explore: Container Deployment Options",
          "Explore: Cloud Container Services: Abstraction Level of Container Deployments",
          "Explore The Most Popular Container Images: Redis, Postgres, ElasticSearch, Kafka",
          "Design: Cloud-Native E-commerce Microservices Architecture with Containers",
          "Reference Project: .Net Microservices - Cloud-Native E-commerce App",
          "Build and Run Microservices with Docker Compose",
          "Packaging Our Microservices: A Containerization Strategy Interview",
          "Pillar2: Containers Quiz"
        ],
        "Hands-on: Containerize .Net Microservices with Docker": [
          "Introduction - Hands-on: Containerize .Net Microservices with Docker",
          "Install Prerequisites",
          "Write Dockerfile for Product Microservices",
          "Create Docker Image for Product Microservices",
          "Run Docker Image for Product Microservices",
          "Push Docker Image to Docker Hub for Product Microservices",
          "Deploy Container to Cloud: AWS Apprunner, Google Cloud Run, Azure Container Inst",
          "Prepare your AWS Environment: AWS Account, IAM User, Programmatic Access Key",
          "Download and Configure AWS CLI for Programmatic Access",
          "Hands-on: Pushing Docker Image to Amazon Elastic Container Registry (ECR)",
          "Deploy ProductService Container to AWS AppRunner",
          "IMPORTANT - CLEAR AWS RESOURCES"
        ],
        "Pillar3: Container Orchestrators": [
          "Introduction to Container Orchestrators",
          "12-Factor App and Cloud-native Trial Map - Container Orchestrators",
          "Cloud-native Trial Map - Container Orchestrators",
          "Why need Orchestrator for Containers ?",
          "What are Container Orchestrators ?",
          "Container Orchestrators Usage for Cloud-native Microservices",
          "Best Practices of using Container Orchestrators",
          "How Container Orchestrators works ?",
          "Explore: Container Orchestrator tools: Kubernetes, Docker Swarm, Apache Mesos",
          "Explore: Cloud Container Orchestrator tools: EKS, GKS, AKS, Red Hat OpenShift",
          "Datadog Container Reports: Kubernetes is defacto standard for Containers",
          "Design: Cloud-Native E-commerce Microservices Architecture with Container Orch",
          "Design with Managed Kubernetes Services - Cloud-Native E-commerce Microservices",
          "A Container Orchestration Interview",
          "Container Orchestrators Quiz"
        ],
        "Deep Dive into Kubernetes - Defacto Standart for Containers": [
          "Introduction - Deep Dive into Kubernetes - Defacto Standart for Containers",
          "CNCF 2022 Annual Survey - The year cloud native became the new normal",
          "Kubernetes is Emerging as the 'Operating System' of the Cloud",
          "Cloud-Native Landscape and Trial Map - Kubernetes: Container Orchestrator",
          "What Is Kubernetes and why we use them for microservices deployments ?",
          "Uses Cases of Kubernetes",
          "Kubernetes Architecture",
          "Kubernetes Components: Pods, ReplicaSet, Deployments, Service",
          "How Kubernetes Works",
          "Declarative and Imperative way of Kubernetes",
          "Defining Our Application in Kubernetes: A Deep Dive Interview",
          "Kubernetes Quiz"
        ],
        "Hands-on: Deploy Microservices to Kubernetes": [
          "Introduction - Hands-on: Deploy Microservices to Kubernetes",
          "Install Minikube and kubectl",
          "Getting Started with Minikube",
          "ASP.NET Container Expose Port - CONFIGURE TO LISTEN - 0.0.0.0:8080",
          "Create a Pod",
          "Apply a Pod in K8s",
          "Why Should not Create Pod on Kubernetes ?",
          "Create a Deployment on Kubernetes",
          "Apply a Deployment in K8s",
          "Create a Service on K8s",
          "Apply a Service in K8s",
          "Best Practice of Creating Deployment and Services for Microservices",
          "Create Ingress for External Access of Product Microservice",
          "Create ConfigMaps and Secrets for Product Microservice",
          "Scale a Container Instance in Kubernetes",
          "Kubernetes Deploy and Service with Minikube",
          "Clean up resources"
        ]
      },
      "requirements": [
        "Basics of Software Architecture"
      ],
      "description": "In this course, we’re going to learn how to Design and Build Cloud-Native Apps with Microservices Architecture, Kubernetes Deployments, Communications, Backing Services, CI/CD pipelines and Monitoring Patterns and Best Practices.\nCloud-native is a huge topic that need to organize how to digest all topics well. We will follow Cloud-Native Trial Map that starts with Containerization and Orchestrations, and continues with CI/CD, Service Meshes, Scalability, Distributed Databases.. In every step, we will follow Cloud-native Pillars, with learning Cloud-Native architecture and visit Cloud-Native tools, explore and understand these tools, design architecture with these tools and finally develop +20 Hands-on real-world project on Kubernetes clusters.\nCloud-Native Pillars Map – The Course Map\nHere you can find our course map about the \"Cloud-Native Pillars\":\nMicroservices\nContainers\nOrchestrators\nCommunications (Services Mesh)\nBacking Services (K8s Distributed Databases, Caches, Message Brokers)\nScalability (HPA, KEDA)\nDevops CI/CD IaC GitOps\nMonitoring & Observability\nDuring the whole course we will follow these Cloud-Native Pillars with design and implementation of architectures.\nMicroservices:\nUnderstand the basics of microservices architecture, its benefits, and how to design and develop sample microservices applications. We will learn, explore, design and develop sample microservice applications.\nContainers:\nWe will containerize the microservices. We will learn to containerize our microservices using cloud-native tools such as Docker and containerd.\nOrchestrators:\nWe will orchestrate these containers with learning and using Container Orchestrators like Kubernetes, docker swarm and so on. We will gain hands-on experience with container orchestration platforms like Kubernetes and Docker Swarm to manage your containerized applications.\nCommunications:\nAfter that we will see how to communicate between Kubernetes pods using Service Meshes like istio. We will Discover how to use service meshes like Istio to facilitate communication between Kubernetes pods.\nBacking Services:\nWe will implement Backing Services for our architecture, will examine Backing Services in 3 sub categories: Databases, Distributed Caches, Message Brokers. We will learn how to deploy and integrate backing services such as databases, caches, and message brokers into your Kubernetes cluster.\nScalability:\nWe will auto-scale our applications into Kubernetes using HPA and KEDA. We will Implement auto-scaling for our applications in Kubernetes using Horizontal Pod Autoscaler (HPA) and Kubernetes Event-driven Autoscaling (KEDA).\nDevops CI/CD:\nWe will implement DevOps, CI/CD pipelines, IaC, GitOps principles into our architecture using cloud-native tools like GitHub Actions, Terraform, ArgoCD and so on.\nMonitoring:\nWe will implement Monitoring and Observability tools like Prometheus, Grafana, ELK stack into our Kubernetes cluster and perform best practices for cloud-native observability.\nAll these steps we will not only explore cloud-native tools but also explore Cloud Serverless services like AWS Lambda in microservices, AWS Fargate in orchestrators, Backing Services like Amazon DynamoDB, Azure CosmosDB, Service Buses - Azure Service Bus, Amazon Eventbridge and so on.\nWay of Learning – The Course Flow\nThe learning methodology will be;\nLearn -> Explore -> Design -> Hands-on\nWe will learn Cloud-Native architectures and visit Cloud-Native tools, explore and understand these tools. And design architecture with using these tools and lastly we will perform hands-on labs to practice tools and cloud-native architectures.\nHands-on Projects\nDuring the course, we'll have a series of hands-on labs for each Cloud-Native Pillar to reinforce your understanding and provide practical experience.\nHands-on: Develop a RESTful Microservices with CRUD\nHands-on: Containerize .Net Microservices with Docker\nHands-on: Deploy Microservices to Kubernetes\nHands-on: Deploy Microservices to Kubernetes with Helm Charts\nHands-on: Deploy Microservices to Kubernetes with Service Mesh Istio and Envoy\nHands-on: Deploy CockroachDB in a Single Kubernetes Cluster with Minikube\nHands-on: Deploy Cloud-Native Redis Cache on a Kubernetes Cluster with Minikube\nHands-on: Deploy Cloud-Native Kafka Message Brokers on a Kubernetes Cluster with Minikube\nHands-on: Auto-scaling Kubernetes Pods (VPA,HPA,KEDA) with Minikube\nHands-on: Deploy Microservices on Amazon EKS Fargate\nHands-on: Terraform IaC provision AWS EC2 instance\nHands-on: GitHub Actions CI/CD for Build & Push Docker Images to DockerHub\nHands-on: Kubernetes Monitoring with Prometheus and Grafana\nAlso we will see AWS Serverless Labs to show how cloud-native architectures works on fully cloud serverless services, especially for AWS services:\nHands-on: Deploy ProductService Container to AWS Apprunner\nHands-on: Building RESTful Microservices with AWS Lambda, API Gateway and DynamoDB\nHands-on: Amazon SNS Notifications Topic Subscribe From AWS Lambda\nThese hands-on labs will provide you with practical experience in applying the concepts, tools, and best practices you've learned throughout the course.\nCourse Target\nThis course has 1 main target:\nto be a decision-maker as a software developer/architect in cloud-native architecture boards.\nThis course is designed for software developers and architects who are interested in learning about cloud-native technologies  and how to apply them in real-world scenarios.\nHands-on Design and Development Activities\nApply best practices with cloud-native microservices design patterns and principles\nExplore and Practice with cloud-native tools, understand when and where to use these tools\nPrepare for Software Architecture Interviews\nPrepare for System Design Architecture Interview exams.\nBy the end of this course, you will gain real-world experience, you will have a solid understanding of the cloud-native ecosystem and will be ready to design, build, and deploy your own cloud-native applications using microservices, Kubernetes, service meshes, CI/CD pipelines, and more.",
      "target_audience": [
        "This course is for developers, architects, cloud engineers, DevOps consultants who have willing to learn cloud-native landscape in enterprise applications"
      ]
    },
    {
      "title": "Microservices: Designing Highly Scalable Systems",
      "url": "https://www.udemy.com/course/introduction-to-microservices/",
      "bio": "Microservices with a Purpose: Exploring the Bigger Picture",
      "objectives": [
        "The core principles of microservices",
        "Microservices benefits and anti-patterns",
        "The building blocks of a microservices architecture",
        "Client-to-microservice communication through an API gateway",
        "Event-driven communication using an event-bus",
        "How to secure microservices",
        "How to manage data in a microservices-based system",
        "How distributed transactions work with microservices",
        "Microservices success factors",
        "Containerization of microservices",
        "Tools and technologies to build and manage microservices",
        "How to convert a monolithic application into microservices",
        "CQRS",
        "Saga Pattern"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Principles of Microservices",
          "Quiz: Principles of Microservices",
          "Microservices Benefits",
          "Anti-Patterns",
          "Quiz: Benefits and Anti-Patterns",
          "Convincing Leadership to Adopt Microservices"
        ],
        "Building Blocks": [
          "Building Blocks",
          "Microservices Architecture",
          "Microservices as RESTful APIs",
          "Quiz: RESTful APIs",
          "Client-to-Microservice Communication Through an API Gateway",
          "Quiz: API Gateways",
          "Event-Driven Communication Using an Event Bus",
          "Quiz: Event-Driven Communication",
          "Securing Microservices",
          "Quiz: Securing Microservices"
        ],
        "Data Management": [
          "Data Management Patterns",
          "CQRS & Event Sourcing",
          "Quiz: CQRS and Event Sourcing",
          "Saga Pattern",
          "Quiz: Saga Pattern"
        ],
        "Success Factors": [
          "Success Factors",
          "Logging",
          "Monitoring & Alerting",
          "Documentation",
          "Practice Test: Success Factors",
          "Readiness Review: Operational Planning for Microservices"
        ],
        "Deployment and Infrastructure": [
          "Deployment and Infrastructure",
          "Containerization of Microservices",
          "Quiz: Containerization of Microservices",
          "Tools and Technologies",
          "Quiz: Tools and Technologies"
        ],
        "Recommendations": [
          "Recommendations",
          "Converting a Monolithic Application Into Microservices",
          "Further Reading",
          "Congratulations"
        ]
      },
      "requirements": [
        "Be interested in software architecture",
        "A desire to build robust, highly scalable applications"
      ],
      "description": "The goal of this course it to equip you with all the knowledge required to design a robust, highly scalable microservices architecture.\nIf you know nothing about Microservices, this course is ideal for you! You will get a fast, yet comprehensive introduction into the world of microservices!\nUpon completion of this course, you will know how to manage data and distributed transactions in a microservices-based system. You will also learn how to secure microservices, and how microservices interact with each other through asynchronous event-driven communication while maintaining autonomy and independence.\nAt the conclusion of this course, you will learn how to convert a monolithic application into microservices.\n\n\nWhat students are saying about this course?\n5-Stars: By far one of the most concise explanations of microservices that I've heard so far. This was a great introduction and the sections helped to fill in some knowledge gaps about the tools that I've been using. A great breakdown of the \"what\" and \"why\" of microservices - Miguel Malcolm\n5-Stars: Simple and easy to understand introduction but high level approach to microservices architecture. I will recommend this to any one who wants to get into microservices architecture. - Michael Gyekye\n5-Stars: Brilliant course. Great overview of what constitutes a microservices architecture. Well done Sean. - Akoni Tee\n5-Stars: Concentrated information about all aspects of microservice architerture - Vyacheslav Kolotiy\n5-Stars: Great course for understanding Microservices principles. - Andrew Rosenbaum\n5-Stars: Excellent starter course. Great overview of microservice. - Ann\n5-Stars: Exactly at the level of detail I was looking for. It kept it high level at the architectural level, while going into enough detail to touch on the key architectural concepts. It's a great class to get oriented in the space and the reading list at the end is very helpful. Thank you for making this class. - Peter Cordone\n5-Stars: Very Simple, to the point. A full meal of microservices explained very neatly in a short time. Highly recommend for any who wants to start working on microservice or already working on microservice to learn some new patterns and technologies. - Raghavendra Shapur Chandraiah Setty",
      "target_audience": [
        "Software Architects",
        "Software Engineers",
        "Product Managers",
        "Systems Analysts",
        "Business Analysts",
        "IT Managers",
        "Development Managers",
        "Engineering Managers",
        "Project Managers",
        "Engineering Directors",
        "Managers"
      ]
    },
    {
      "title": "Apache Airflow on AWS EKS: The Hands-On Guide",
      "url": "https://www.udemy.com/course/apache-airflow-on-aws-eks-the-hands-on-guide/",
      "bio": "How to set up Apache Airflow on AWS EKS with the Kubernetes Executor and be production-ready!",
      "objectives": [
        "How to Set Up a Production Ready Architecture for Airflow on AWS EKS From A-Z",
        "How to deploy DAGs from Git (public and private)",
        "How to Create CI/CD Pipelines with AWS CodePipeline Deploy DAGs",
        "How to Share DAGs and Store Logs with AWS EFS",
        "How to Enable Remote Logging with AWS S3 in EKS",
        "How to Test your DAGs in CI/CD pipelines",
        "How to Store Sensitive Data in AWS Secret Manager"
      ],
      "course_content": {
        "Introduction": [
          "Important Prerequisites",
          "Who I am?",
          "Your Airflow Journey",
          "Overview of the architecture",
          "The Checklist"
        ],
        "Configuring AWS": [
          "[Practice] Defining a budget",
          "[Practice] Creating the IAM admin group",
          "[Practice] Creating the IAM admin user",
          "[Practice] Using the Admin user"
        ],
        "Exploring the DevOps world": [
          "Why is knowing DevOps concepts important?",
          "Reminder about Kubernetes",
          "Kubernetes Quiz",
          "What is IaC or Infrastructure as code?",
          "IaC Quiz",
          "Deployments with GitOps",
          "GitOps made simple with Flux",
          "GitOps Quiz"
        ],
        "Creating the EKS cluster with GitOps": [
          "[Practice] Creating the cloud9 environment for the workstation",
          "[Practice] Configuring the workstation",
          "[Practice] Configuring Cloud9 with the Admin account",
          "AZs, VPCs and Subnets in AWS",
          "What is AWS EKS?",
          "[Practice] Creating and configuring the Git repository for GitOps",
          "Architecture Overview EKS",
          "[Practice] Creating the Cluster with eksctl",
          "[Practice] Installing and Configuring Flux",
          "[Practice] Add a bit of structure",
          "Namespaces in Kubernetes",
          "[Practice] Creating dev, staging and prod namespaces"
        ],
        "Deploying Airflow with DAGs": [
          "What's Helm?",
          "[Practice] Overview of the Airflow Helm chart",
          "Scaling with the Kubernetes Executor",
          "[Practice] Installing the EBS Driver",
          "[Practice] Setting up the HelmRepo",
          "[Practice] Deploying Airflow with Flux",
          "Troubleshooting deployments with Flux",
          "Synchronizing DAGs in Kubernetes",
          "[Practice] Fetching DAGs with Git-Sync",
          "[Practice] Running DAGs with Git-Sync",
          "Secrets in Kubernetes",
          "[Practice] Fetching DAGs with Git-Sync from a private repository"
        ],
        "Building CI/CD pipelines to deploy Airflow": [
          "Set Up",
          "What is AWS CodePipeline?",
          "[Practice] Building a CI/CD pipeline with CodePipeline and ECR",
          "[Practice] Deploying Airflow in EKS with CodePipeline and Flux",
          "Unit testing in Airflow",
          "[Practice] Unit testing your DAGs",
          "[Practice] Building the CI/CD pipeline in dev with unit tests",
          "[Practice] Integration tests for testing tasks in DAGs",
          "[Practice] Building the CI/CD pipeline in staging with integration tests",
          "[Practice] Clean up"
        ],
        "Exposing the Airflow UI": [
          "[Practice] Set up",
          "Services in Kubernetes",
          "Architecture with the Elastic Load Balancer",
          "[Practice] Exposing the Airflow UI with AWS Elastic Load Balancer",
          "What is an Ingress?",
          "Architecture with the AWS ALB Ingress controller",
          "[Practice] Exposing the Airflow UI with AWS ALB Ingress",
          "[Practice] Exposing the staging environment with AWS ALB",
          "Quick reminder about SSL",
          "[Practice] Creating a Domain for Airflow with ExternalDNS and AWS Route53",
          "[Practice] Activating SSL on the Airflow UI",
          "[Practice] Fix the AWS ALB's health checks",
          "[Practice] Exporting the SSL secret object",
          "[Practice] Upgrading the staging environment",
          "[Exercise] Enabling DNS and SSL for staging",
          "[Practice] Creating subdomains to access the UIs of Airflow",
          "Clean Up"
        ],
        "Logging with Airflow in AWS EKS": [
          "Set Up",
          "RBAC in Kubernetes",
          "Permission issues for accessing pod's logs",
          "[Practice] Storing logs in AWS EFS",
          "[Practice] Remote logging with AWS S3",
          "Limitations of remote logging in AWS S3",
          "Remote logging with AWS CloudWatch",
          "Sensitive data with Secret Backends",
          "[Practice] Managing connections with AWS Secret Manager",
          "[Creating] Storing the secret object of AWS Secret Manager for Flux",
          "Clean Up"
        ],
        "Configuring the production environment": [
          "Set up",
          "[Practice] Creating the production environment",
          "Identifying single point of failures",
          "[Practice] Making the Airflow UI highly available",
          "AWS Relational Database Service",
          "[Practice] Airflow with AWS RDS",
          "DAG Serialization",
          "[Practice] Making the web server stateless with DAG Serialization",
          "Clean Up",
          "Congratulations!"
        ],
        "Appendix": [
          "[BLOG POST] The PostgresOperator: All you need to know",
          "[VIDEO] The New TriggerDagRunOperator!",
          "[VIDEO] Running Airflow with the Official Helm Chart"
        ]
      },
      "requirements": [
        "A good knowledge of Apache Airflow",
        "A intermediate knowledge of AWS",
        "A intermediate knowledge of Docker and Kubernetes",
        "AWS SERVICES USED ARE NOT FREE TIER ELIGIBLE"
      ],
      "description": "Struggling to set up Airflow on AWS EKS?\nYou are at the right place!\nWith more than 15,000 students, I got many feedbacks about how difficult it is to configure Airflow on AWS with the official Helm chart.\nGuess what? You are about to learn everything you need to set up a production-ready architecture for Apache Airflow on AWS EKS\nThis course is designed to guide you through the different steps of creating a real world architecture:\nConfiguring the EKS cluster following best practices\nDeploying automatically changes with GitOps\nUsing Helm to configure and set up Airflow on Kubernetes\nConfiguring the official Helm chart of Airflow to use the Kubernetes Executor and many different features\nDeploying DAGs in Airflow with Git-Sync and AWS EFS\nDeploying DAGs/Airflow through CI/CD pipelines with AWS CodePipeline\nTesting your DAGs automatically\nSecuring your credentials and sensitive data in a Secret Backend\nEnabling remote logging with AWS S3\nCreating 3 different environments dev/staging and prod\nMaking the production environment scalable and highly available\nand more!\nWARNING:\nThe course is not meant to learn the basic of Airflow, you must be already familiar with it.\nIf you already know Kubernetes/Docker/AWS your learning will be easier, but no worries I explain everything you need.\nYOU WON'T learn how to interact with AWS in your DAGs. This course is about designing an architecture not about DAGs.\nThe course is NOT free-tier eligible as we are going to use many AWS services and set up a real world architecture.",
      "target_audience": [
        "Data engineers",
        "Software Engineers",
        "DevOps"
      ]
    },
    {
      "title": "Coding Interview Preparation - The Softer Skills",
      "url": "https://www.udemy.com/course/software-engineer-interview-preparation/",
      "bio": "Crush your next coding interview by mastering the much needed soft skills first!",
      "objectives": [
        "Differentiate between different types of interviews and how to approach them (i.e. behavioral, white board/coding questions, take home challenges, refactoring, system design, etc.)",
        "Easily answer behavioral questions when asked “Tell me about a time when you…”",
        "Build a step-by-step list to approaching coding questions",
        "Create of list of key questions to ASK the hiring manager and the interviewer specific to a particular role and company",
        "Develop a prep system you will use on all future interviews"
      ],
      "course_content": {},
      "requirements": [
        "Some Coding Skills",
        "Notebook or note taking app"
      ],
      "description": "40-50% of interviewees fail their software engineering interviews for non technical reasons. Don't let yourself be one of them!\nThis course will teach you about each step of the process and how to prepare for each of them along with the soft skills needed to impress your interviewer and crush every coding interview.\nYou will\nLearn to differentiate between different types of interviews and how to approach them (i.e. behavioral, white board/coding questions, take home challenges, refactoring, system design, etc.)\nLearn how to organize your interview prep material and company communication\nLearn what you should research when preparing for a specific job\nComplete a self analysis activity to prepare yourself to answer popular traditional and culture fit interview questions\nDevelop stories so you have a response to any type of behavioral question\nBe given the steps you should take anytime you get asked a white boarding question\nCreate a list of questions to bring to your interview\nIf your ready to feel confident going into each and every interview and land you dream job, this course is for you!\nHere is a review from the first student to complete my course:\n\"WOW. For how relatively short this course is (a few hours), it has everything I was looking for and much more. Katelyn explains everything with clear, concise real-world examples. There are a lot of great pdf's to download with each section of the course that are super useful; checklists, exercises, common questions, etc. Just fantastic. What's even more awesome is there's a whole section of the course devoted to the technical part of the interview. I liked how there were exercises to do along the way that can be used and stored for your own interviews/interview prep. In addition I really liked how there were some hints/examples of things you could say in response to some of the questions in the exercises to help get your creative juices going, extremely helpful. Overall a fantastic and invaluable course I would recommend to anyone.\" - Justin H.",
      "target_audience": [
        "Interns and New Grads who want to learn about the ins and outs of the software engineering interview process.",
        "Junior/Mid Level Engineers who are looking for pro-tips to help them feel more confident through interviews.",
        "Engineers who have been practicing coding questions, but can’t seem to land the job.",
        "Engineers looking to land their dream job!"
      ]
    },
    {
      "title": "Node js with Test Driven Development",
      "url": "https://www.udemy.com/course/test-driven-development-with-nodejs/",
      "bio": "Learn Node js by building a complete fully functional backend rest application with express.js an testing it with jest",
      "objectives": [
        "Practice Test Driven Development in a real project from beginning to the end",
        "Learn the test runner, Jest and understand how to structure test modules",
        "Create a fully functional application with Express js",
        "Learn how to build a RestFul API",
        "Make your application configurable to work in different environments",
        "Make your application aware of user locale, and support internationalization, i18n",
        "Use Sequelize to connect the application to RDBMS like PostgreSQL and handle all database related operations",
        "Secure your application with common practices. Basic authentication, JWT and your custom token implementation",
        "Use javascript on server side with Node js",
        "Deploy the application to a VM in cloud",
        "Experience automated deployment by pushing a commit from your machine to Github. Github Actions will do the rest.",
        "Feel how the test driven development is giving confidence when refactoring, and deploying your application.",
        "User Registration with email verification flow, account activation",
        "Password Reset flow"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Tools",
          "Methodology",
          "Creating Project",
          "Development Environment Dependencies",
          "Web Client",
          "Project Source Code"
        ],
        "First Rest Endpoint: Sign Up": [
          "First Test: Sign Up Request",
          "Saving User to Database",
          "Password Hashing",
          "Refactor"
        ],
        "Configuration and Environment": [
          "Configuration and Environment"
        ],
        "Validation": [
          "Validation",
          "Validatior Middleware",
          "Express Validator",
          "Dynamic Tests",
          "Remaining Validations",
          "Custom Validation: Unique Email Validation"
        ],
        "Internationalization - i18n": [
          "Internationalization - i18n"
        ],
        "Account Activation": [
          "Account Activation Intro",
          "Activation Email",
          "Email Transport Failures",
          "Refactoring Tests",
          "Activating Account",
          "Testing on Web Client"
        ],
        "Error Handler": [
          "Error Handler",
          "Error Body"
        ],
        "Loading Users": [
          "User Page Response",
          "Page Content",
          "Total Page Info",
          "Changing Page",
          "Changing Page Size",
          "Get User"
        ],
        "Authentication - Part 1": [
          "Authentication",
          "Authentication Failure",
          "Refactoring Tests"
        ],
        "User Update - Part 1": [
          "Update User - Authentication Failure",
          "Update User Success",
          "Authorization Aware User List"
        ]
      },
      "requirements": [
        "Experience with JavaScript required"
      ],
      "description": "In this course we will be building a fully functional backend service with express of node js. we will call our application as hoaxify.\nwhile building this application, we will learn\nhow we can build a restful web service with express js, with all necessary functionalities like validation, internationalization, static resource serving, caching, json manipulation, interacting with external services\nhow we can handle database operations with orm package, sequelize.\nhow we can manage database version history and migrations\nand we will see\nhow test driven development works.\nhow it's affecting our code quality, reusability\nhow it's giving us the confidence about refactoring our implementation\nhow we can deploy the application to heroku\nhow we can create an instance in google cloud and deploy our application to it\nand how we can automate the deployment with github actions.\nThis course is purely built on practice. Each code piece we write, will be for our actual application implementation.\nIn each section we will gradually build our application. We will not jump ahead and add functionality not needed for that moment. We will implement one requirement at a time. Each implementation will bring the next requirement to us.\nAnd following this practice, will help you to get a solid foundation about overall rest web services requirements and how to implement one of them with node js by following test driven development methodology.",
      "target_audience": [
        "Developer who wants to see Test Driven Development in action",
        "Developers who are interested in with Node's Express framework",
        "Developers who want deploy node js application to cloud"
      ]
    },
    {
      "title": "Apache Kylin : Implementing OLAP on the Hadoop platform",
      "url": "https://www.udemy.com/course/apache-kylin-implementing-olap-on-the-hadoop-platform/",
      "bio": "Building and querying online analytical processing data (OLAP) big data structures in your hadoop platform",
      "objectives": [
        "Understand how OLAP Cube structures are created",
        "Build and query OLAP Cubes on Hadoop Big Data Platform",
        "Perform analytical queries on streaming data",
        "Integrate your big data cube with external tools or application",
        "Secure your OLAP Cube on the cluster"
      ],
      "course_content": {
        "Course Introduction": [
          "Introduction",
          "What is Kylin?",
          "How Kylin Works. I",
          "How Kylin Works. II",
          "How Kylin Works. III",
          "Installing Kylin in Hortonworks HDP Sandbox",
          "Installing Kylin in Cloudera CDH Sandbox",
          "Installing Kylin in a Custom Hadoop Environment",
          "Our First Taste of a Kylin Cube",
          "Exploring the web console",
          "Resources"
        ],
        "Use Case 1: AdventureWorks DW": [
          "Introduction to AdventureWorks DW Dataset",
          "AdventureWorks Dataset Preparation",
          "Create Your Data Sources",
          "Implementing The Data Model",
          "Create The Cube",
          "Building The Cube",
          "Querying the Cube",
          "Troubleshooting tips"
        ],
        "Use Case 2: Analyzing Flight Delays": [
          "Introduction to Airline on-time performance Dataset",
          "Dataset Preparation",
          "Incremental Build",
          "Running Incremental Cube Building",
          "Single Fact/Dimension Table Model",
          "Cube Optimization/Tuning I",
          "Cube Optimization/Tuning II",
          "Summary"
        ],
        "Use Case 3: Access Log Files": [
          "Introduction the Use case",
          "How Kylin with Streaming Tables work?",
          "Data Preparation & Kafka Setup",
          "Implementing OLAP Cube Over Streaming Dataset in Kafka",
          "Building The Cube With Streaming Logs",
          "Query the Cube",
          "Troubleshooting"
        ],
        "Kylin Client Integration": [
          "Introduction to Kylin Client Integration",
          "Rest API Integration",
          "ODBC Integration (MS Excel)",
          "JDBC Integration (Sample Java application)",
          "Integrate with Apache Zeppelin"
        ],
        "Other Features": [
          "Query Routing",
          "Security",
          "Storage Cleanup"
        ],
        "Conclusion": [
          "Final Words"
        ]
      },
      "requirements": [
        "Ability to write a SQL query or use SQL query tool is required to be a Kylin User.",
        "A good understanding of the hadoop big data platform is required to be a Kylin developer or adminstrator",
        "Knowledge of hadoop technologies like MapReduce, Hive and HBase is necessary but not mandatory"
      ],
      "description": "A Comprehensive Course for Learning How to Build and Query Big Data OLAP Cubes Using Apache Kylin.\nApache Kylin is an Apache top-level project that bring OLAP to Big data. This simply means that we can now write complex aggregation queries with different levels of aggregation and expect to get a second or micro-seconds response to our query.\nOnline analytical processing (OLAP) has been a common word in traditional business intelligence for years but has not been easy with hadoop platform that has become a data lake solution for many.  These data lake often have hundreds of millions and even billions of records that organizations want to slice and dice for insights. However, the high latency of query execution in SQL on Hadoop technologies like Apache Hive or Apache Drill often meant that data architect opted to transfer their data back to traditional systems that allow for real time response to query.\nKylin solves all of this.\nWith Apache Kylin, anyone with the skills can now build OLAP, ROLAP or MOLAP structures using a web UI, deploy it and expect to query these structure with second of response time in mind. Also, one can connect their applications or favorite visualization tools to Kylin to integrate data either for system processing or for visualization.\nIn this course, we are going to review\nWhat Kylin is\nHow it works\nHow to build OLAP cubes in batch and streaming model\nHow to deploy the cubes\nHow to query cubes\nHow to connect external tools and applications to Kylin\n.. and many more\n\nWhat is the target audience?\nBig Data Engineers/Developers\nData Architects\nData Analysts.\nAnyone who wishes to be able to write simple to complex aggregation queries of large dataset and wants a low latency response time.\n\n\nWhat are the requirements?\nYou need access to a Big Data Sandbox like Cloudera quickstart VM, Hortonworks HDP sandbox or a cloud-based Hadoop environment with a least 10GB of Ram.\nYou should have some familiarity SQL and be able to use ODBC or JDBC based tools.\nSome familiarity with Linux will be helpful\n\n\nWhat do I need to know to get the best out of this course?\nBecause Kylin uses other hadoop projects to achieve its design a fair understanding of projects like Apache Hive, Apache Kafka, Apache HBase, MapReduce is great for this course. However, one can still use Kylin without any knowledge of these technologies.\nIt is also worth knowing that no prior knowledge of any big data technology is required to query Kylin or use data integration in running report or data visualizations.",
      "target_audience": [
        "Data Analysts",
        "Big Data/Hadoop Data Engineers",
        "Data Architects",
        "Anyone who wants to be able to perform a complex aggregate/OLAP queries on large dataset."
      ]
    },
    {
      "title": "Microservices Software Architecture: Patterns and Techniques",
      "url": "https://www.udemy.com/course/microservices-software-architecture-patterns-and-techniques/",
      "bio": "Learn how to design and implement microservice systems using the right architecture design patterns and techniques",
      "objectives": [
        "Learn about microservices architecture",
        "Learn how to implement software architecture patterns for a distributed system to allow scalability whilst maintaining consistency",
        "Learn techniques to help you in the design, development, deployment and monitoring of your microservice based system",
        "Identify technical challenges and common pitfalls"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "What are microservices, and when should I use them?",
          "Microservice Applicability",
          "Why many microservices projects fail"
        ],
        "Codebase Practices": [
          "Microservice template",
          "Microservice Templates - Getting Started",
          "Code Repository Setup",
          "Microservice Decomposition",
          "Microservice Decomposition"
        ],
        "Communication": [
          "Inter-Service Communication",
          "Synchronous vs Asynchronous flows",
          "Service Registration",
          "Service Discovery",
          "Service Registration & Discovery - Getting Started"
        ],
        "Data": [
          "Databases",
          "API Composition",
          "Event Sourcing",
          "Event Sourcing - Getting Started!",
          "Two Phase Commit",
          "Saga",
          "Choosing the right data pattern"
        ],
        "Fault tolerance & Monitoring": [
          "Failover Mechanism",
          "Circuit breakers",
          "Circuit breakers - Getting Started",
          "Health API",
          "Logging Techniques",
          "Troubleshooting Microservices",
          "Next Steps"
        ]
      },
      "requirements": [
        "Basic software development knowledge",
        "Experience developing software in the industry would be a plus as it would help you appreciate some technical challenges better, but is completely optional"
      ],
      "description": "In this course you will learn in detail the software architecture patterns and techniques to develop robust and scalable microservices\nWe will go through techniques and design patterns that are required in enterprise architecture including :\nEvent Sourcing pattern\nSaga pattern\nMicroservice Registration\nCircuitbreaker pattern\nAPI compostion\nTwo Phase Commit\nMicroservice Discovery\nand more !\nThe course is structured around both video tutorials explaining different techniques and architecture patterns, and (optional) assignments to help make sure you're understanding what we're learning.\nI'm also available to answer any queries you may have regarding any course material which you didn't understand or would like further detail on.\n_______\nJust in case you're still not convinced if you should take this course, here are a couple of positive reviews from the hundreds I have received on my bestselling, top rated Udemy courses:\n\"The course is comprehensive and well explained through clear and concise examples, and shows that the instructor is highly experienced in their field. Overall this course is excellent and highly appropriate for software developers looking to improve their architectural and programming skills, both beginners as well as more advanced programmers. I will be looking forward to more courses by the author in the future.\" - J. Fusselberg\n\"High quality videos, lectures are clear and to the point. This course is highly recommended for any developer who wants to move on to a senior position or software architect role. However, it will also be a good start for beginner to introduce them to proper coding practices early on.\" -  Roberto de Souza\nI look forward to seeing you in my course and hearing how the course has helped you progress in your career !",
      "target_audience": [
        "Software developers who are developing microservices",
        "Software developers who are thinking of refactoring their current system to microservices",
        "Software architects who want to improve their skills in designing microservices",
        "Anyone who wants to learn about microservices and gain in-depth technical knowledge on how to design, structure and develop microservice based systems"
      ]
    },
    {
      "title": "Java Streams API Developer Guide",
      "url": "https://www.udemy.com/course/java-streams/",
      "bio": "Functional Programming with Java 8",
      "objectives": [
        "Functional Programming",
        "Know how to use Java Streams API",
        "Understand the benefits Streams have to offer",
        "Know how to use concrete > abstraction > concrete pattern",
        "Gather stats from datasets",
        "Deliver more features instead of focusing how to make code that works right.",
        "Use streams to perform transformations using stream().map(...)",
        "Learn awesome IDEA features"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Environment Setup": [
          "Lets install Java Development Kit (JDK)",
          "Lets install IntelliJ IDEA",
          "Setting up JDK with IntelliJ and running all tests cases",
          "Codebase walkthrough and branches"
        ],
        "Lets get started": [
          "Intro to Java Stream API (KEYNOTE)",
          "Imperative Approach Exercise",
          "Imperative Approach Solution",
          "Declarative / Functional Style Approach",
          "Understanding Stream Pipeline. Concrete > Abstraction > Concrete"
        ],
        "Iterating with Streams": [
          "Iterating with IntStream (range and rangeClosed)",
          "Exercise",
          "Iterating through lists with IntStream (Exercise Solution)",
          "IntStream.iterate"
        ],
        "Max, Min & Comparators": [
          "Finding min number",
          "Exercise",
          "Finding max (Exercise Solution)"
        ],
        "Distinct and Collectors.toSet()": [
          "Removing duplicates in a List",
          "Removing duplicates in a List with Collectors."
        ],
        "Filtering and Transformations": [
          "Filtering",
          "Transformations with stream.map",
          "Exercise",
          "stream.mapToDouble (exercise solution)"
        ],
        "Find Any vs Find First": [
          "stream.findAny",
          "stream.findFirst",
          "Understanding core difference between stream.findAny and stream.findFirst"
        ],
        "Pulling out statistics from Collections": [
          "Counting",
          "Min & Max without comparators",
          "Calculating Averages",
          "Exercise",
          "Summing up numbers (Exercise Solution)",
          "Gathering Statistics with Streams"
        ],
        "Grouping data with streams like SQL": [
          "Grouping data",
          "Grouping & Counting data"
        ]
      },
      "requirements": [
        "You should be able to use PC or MAC",
        "You should be familiar with some Java syntax"
      ],
      "description": "Java 8 brought a lot great new features to the table. A lot people say, the community was late in bringing these features, but what often people dont realise is that brought these new features late but what they did exceptionally well was to implement them better than anyone and give us developers a wonder API to use, and one of the them was the Stream API.\nBefore Java we wrote a lot code for simple logic and yet we could get it wrong very easily. Well this is not the case with Java 8 in particulate with Streams. With Streams we focus on coding and deliver what we indent rather than thinking of how we are going to code the logic to do what we intend. Streams focuses on the ALL instead of the PARTS. Streams not only focuses on the ALL but it also allows us to write functional style programming, and this is what makes Streams and the  Java programming language very attractive to developers.\nThis course is packed with awesome sections that will take you the journey from from zero to hero. You will learn and understand what I call the\nconcrete > abstraction > concrete phase\nand once you grasp this concept we will dive into the abstraction phase and learn awesome features such as\nMap\nFilter\nFlatmap\nReduce\nAverage\nSum\nMin\nDifference between intermediate & terminal operations\nAnd much more\nFinally at the end of this course I will teach how streams work internally, their order of execution and the performance benefits they have to offer.\n\nThe best way to learn any concept is to learn and practice as you go along. So, I packed this course with plenty of exercise for you to challenge your to ensure you learn and start using functional programming with stream moving forward in you career as a Java software engineer.\nI cant wait to see you inside.\nThaks",
      "target_audience": [
        "Anyone who wants to learn Java Streams",
        "Anyone who wants to learn Functional Programming",
        "Anyone who wants to write less code and deliver more",
        "Anyone who knows some Java. Beginners are very welcome",
        "Any want who wants to improve their Java skills"
      ]
    },
    {
      "title": "Master the Coding Interview: Data Structures + Algorithms",
      "url": "https://www.udemy.com/course/master-the-coding-interview-data-structures-algorithms/",
      "bio": "Ultimate coding interview bootcamp. Get more job offers, negotiate a raise: Everything you need to get the job you want!",
      "objectives": [
        "Ace coding interviews given by some of the top tech companies",
        "Become more confident and prepared for your next coding interview",
        "Learn, implement, and use different Data Structures",
        "Learn, implement and use different Algorithms",
        "Get more interviews",
        "Professionally handle offers and negotiate raises",
        "Become a better developer by mastering computer science fundamentals",
        "Github code provided in: JavaScript, Python, Java, C/C++, C#, Golang, Swift, Kotlin, TypeScript, Scala, Rust, Perl, PHP"
      ],
      "course_content": {
        "Introduction": [
          "How To Succeed In This Course",
          "Join Our Online Classroom!",
          "Exercise: Meet Your Classmates & Instructor",
          "ZTM Resources",
          "Monthly Coding Challenges, Free Resources and Guides"
        ],
        "Getting More Interviews": [
          "Section Overview",
          "Resume",
          "Exercise: Resume Walkthrough",
          "Resources: Resume Templates",
          "Resume Review",
          "What If I Don't Have Enough Experience?",
          "Optional Exercise: Github Master",
          "Optional: Exercise: Github README",
          "LinkedIn",
          "Exercise: LinkedIn Endorsements",
          "Portfolio",
          "Resources: Free Portfolio Templates",
          "Quick Note: Upcoming Video",
          "Portfolio with A.I.",
          "Email",
          "Resources: Email",
          "Where To Find Jobs?",
          "Resources: Where To Find Jobs?",
          "When Should You Start Applying?",
          "Section Summary",
          "Monthly Industry Updates"
        ],
        "Big O": [
          "Python, Java, C/C++, C#, Go, Swift, Kotlin, TypeScript, Scala, Perl, Rust, PHP",
          "Section Overview",
          "Big O Cheatsheet",
          "Setting Up Your Environment",
          "IMPORTANT: Repl Code",
          "What Is Good Code?",
          "Big O and Scalability",
          "O(n)",
          "O(1)",
          "Exercise: Big O Calculation",
          "Solution: Big O Calculation",
          "Exercise: Big O Calculation 2",
          "Solution: Big O Calculation 2",
          "Simplifying Big O",
          "Big O Rule 1",
          "Big O Rule 2",
          "Big O Rule 3",
          "O(n^2)",
          "Big O Rule 4",
          "Big O Cheat Sheet",
          "What Does This All Mean?",
          "O(n!)",
          "3 Pillars Of Programming",
          "Space Complexity",
          "Exercise: Space Complexity",
          "Exercise: Twitter",
          "Optional: Javascript Loops",
          "Section Summary"
        ],
        "How To Solve Coding Problems": [
          "Section Overview",
          "What Are Companies Looking For?",
          "What We Need For Coding Interviews",
          "Exercise: Google Interview",
          "Exercise: Interview Question",
          "Exercise: Interview Question 2",
          "Review Google Interview",
          "Optional Exercise: Google Interview On Your Own",
          "Section Summary"
        ],
        "Data Structures: Introduction": [
          "Section Overview",
          "What Is A Data Structure?",
          "How Computers Store Data",
          "Data Structures In Different Languages",
          "Operations On Data Structures"
        ],
        "Data Structures: Arrays": [
          "Arrays Introduction",
          "Static vs Dynamic Arrays",
          "Quick Note: Upcoming Video",
          "Optional: Classes In Javascript",
          "Implementing An Array",
          "Strings and Arrays",
          "Exercise: Reverse A String",
          "Solution: Reverse A String",
          "Exercise: Merge Sorted Arrays",
          "Solution: Merge Sorted Arrays",
          "Interview Questions: Arrays",
          "Arrays Review"
        ],
        "Data Structures: Hash Tables": [
          "Hash Tables Introduction",
          "Hash Function",
          "Hash Collisions",
          "Hash Tables In Different Languages",
          "Exercise: Implement A Hash Table",
          "Solution: Implement A Hash Table",
          "keys()",
          "Extra: keys() Without Collision",
          "Hash Tables VS Arrays",
          "Exercise: First Recurring Character",
          "Solution: First Recurring Character",
          "Interesting Tidbit: Python Dictionaries",
          "Hash Tables Review"
        ],
        "Data Structures: Linked Lists": [
          "Linked Lists Introduction",
          "What Is A Linked List?",
          "Exercise: Imposter Syndrome",
          "Exercise: Why Linked Lists?",
          "Solution: Why Linked Lists?",
          "What Is A Pointer?",
          "Our First Linked List",
          "Solution: append()",
          "Solution: prepend()",
          "Node Class",
          "insert()",
          "Quick Note: Upcoming Video",
          "Solution: insert()",
          "Solution: remove()",
          "Doubly Linked Lists",
          "Exercise: Doubly Linked Lists",
          "Solution: Doubly Linked Lists",
          "Singly VS Doubly Linked Lists",
          "Exercise: reverse()",
          "Solution: reverse()",
          "Linked Lists Review"
        ],
        "Data Structures: Stacks + Queues": [
          "Stacks + Queues Introduction",
          "Stacks",
          "Queues",
          "Exercise: Stacks VS Queues",
          "Solution: Stacks VS Queues",
          "Quick Note: Upcoming Video",
          "Optional: How Javascript Works",
          "Exercise: Stack Implementation (Linked Lists)",
          "Solution: Stack Implementation (Linked Lists)",
          "Exercise: Stack Implementation (Array)",
          "Solution: Stack Implementation (Array)",
          "Exercise: Queue Implementation",
          "Solution: Queue Implementation",
          "Queues Using Stacks",
          "Stacks + Queues Review"
        ],
        "Data Structures: Trees": [
          "Trees Introduction",
          "Binary Trees",
          "O(log n)",
          "Binary Search Trees",
          "Balanced VS Unbalanced BST",
          "BST Pros and Cons",
          "Exercise: Binary Search Tree",
          "Solution: insert()",
          "Solution: lookup()",
          "Extra Exercise: remove()",
          "Solution: remove()",
          "AVL Trees + Red Black Trees",
          "Resources: AVL Trees + Red Black Trees",
          "Binary Heaps",
          "Quick Note on Heaps",
          "Priority Queue",
          "Trie",
          "Tree Review"
        ]
      },
      "requirements": [
        "No experience with data structures or algorithms needed",
        "Basic understanding of one programming language",
        "No previous computer science knowledge necessary"
      ],
      "description": "Updated for the 2023 hiring season! Join a live online community of over 900,000+ developers and a course taught by an industry expert that has actually worked both in Silicon Valley and Toronto as a senior developer. Graduates of this course are now working at Google, Tesla, Amazon, Apple, IBM, JP Morgan, Meta + other top tech companies.\nWant to land a job at a great tech company like Google, Microsoft, Meta, Netflix, Amazon, or other companies but you are intimidated by the interview process and the coding questions? Do you find yourself feeling like you get \"stuck\" every time you get asked a coding question? This course is your answer. Using the strategies, lessons, and exercises in this course, you will learn how to land offers from all sorts of companies.\nMany developers who are \"self taught\", feel that one of the main disadvantages they face compared to college educated graduates in computer science is the fact that they don't have knowledge about algorithms, data structures and the notorious Big-O Notation. Get on the same level as someone with computer science degree by learning the fundamental building blocks of computer science which will give you a big boost during interviews. You will also get access to our private online chat community with thousands of developers online to help you get through the course.\n\nHere is what you will learn in this course:\nTechnical:\n1. Big O notation\n\n2. Data structures:\n\n* Arrays\n* Hash Tables\n* Singly Linked Lists\n* Doubly Linked Lists\n* Queues\n* Stacks\n* Trees (BST, AVL Trees, Red Black Trees, Binary Heaps)\n* Tries\n* Graphs\n\n3. Algorithms:\n\n* Recursion\n* Sorting\n* Searching\n* Tree Traversal\n* Breadth First Search\n* Depth First Search\n* Dynamic Programming\n\nNon Technical:\n- How to get more interviews\n- What to do during interviews\n- What do do after the interview\n- How to answer interview questions\n- How to handle offers\n- How to negotiate your salary\n- How to get a raise\nUnlike most instructors, I am not a marketer or a salesperson. I am a senior developer and programmer who has worked and managed teams of engineers and have been in these interviews both as an interviewee as well as the interviewer.\n\nMy job as an instructor will be successful if I am able to help you become better at interviewing and land more jobs. This one skill can really change the course of your career and I hope you sign up today to see what it can do for your career!\n\n\nTaught by:\n\nAndrei is the instructor of the highest rated Web Development course on Udemy as well as one of the fastest growing. His graduates have moved on to work for some of the biggest tech companies around the world like Apple, Google, JP Morgan, IBM, etc... He has been working as a senior software developer in Silicon Valley and Toronto for many years, and is now taking all that he has learned, to teach programming skills and to help you discover the amazing career opportunities that being a developer allows in life.\nHaving been a self taught programmer, he understands that there is an overwhelming number of online courses, tutorials and books that are overly verbose and inadequate at teaching proper skills. Most people feel paralyzed and don't know where to start when learning a complex subject matter, or even worse, most people don't have $20,000 to spend on a coding bootcamp. Programming skills should be affordable and open to all. An education material should teach real life skills that are current and they should not waste a student's valuable time.   Having learned important lessons from working for Fortune 500 companies, tech startups, to even founding his own business, he is now dedicating 100% of his time to teaching others valuable software development skills in order to take control of their life and work in an exciting industry with infinite possibilities.\nAndrei promises you that there are no other courses out there as comprehensive and as well explained. He believes that in order to learn anything of value, you need to start with the foundation and develop the roots of the tree. Only from there will you be able to learn concepts and specific skills(leaves) that connect to the foundation. Learning becomes exponential when structured in this way.\nTaking his experience in educational psychology and coding, Andrei's courses will take you on an understanding of complex subjects that you never thought would be possible.\nSee you inside the courses!",
      "target_audience": [
        "Any engineer, developer, programmer, who wants to improve their interviewing skills",
        "Anyone interested in improving their whiteboard coding skills",
        "Anyone who wants to become a better developer",
        "Any self taught programmer who missed out on a computer science degree"
      ]
    },
    {
      "title": "Reactive Microservices Architecture & Design Patterns",
      "url": "https://www.udemy.com/course/spring-webflux-patterns/",
      "bio": "API Composition, Scatter Gather, Orchestrator, Circuit Breaker, Bulkhead, Rate Limiter, Resilient Patterns etc",
      "objectives": [
        "Master Reactive Microservices Design Patterns: Learn how to apply design patterns to build scalable and resilient reactive microservices.",
        "Enhance Microservices Communication: Explore integration patterns for efficient communication between microservices.",
        "Build Robust and Resilient Microservices: Implement resilient patterns to ensure the robustness of your services.",
        "Handle Complex Workflows: Learn how to handle complex workflows using design patterns.",
        "Optimize Microservices Performance: Improve the scalability and performance of your microservices.",
        "Gain a Competitive Edge: Acquire in-demand skills that are highly sought after in the modern software development landscape.",
        "Integration Patterns: Explore various integration patterns for efficient microservices communication.",
        "Resilient Patterns: Learn how to build robust and resilient microservices using resilient patterns.",
        "Spring WebFlux Integration: Apply design patterns to Spring WebFlux for reactive microservices development.",
        "Practical Examples: Learn through hands-on examples and demonstrations.",
        "Real-World Scenarios: Apply design patterns to real-world microservices challenges.",
        "Expert Guidance: Learn from a seasoned instructor who specializes in reactive microservices design patterns."
      ],
      "course_content": {
        "Introduction": [
          "[MUST WATCH]: What will you learn from this course?",
          "[Optional] - Reactive Series",
          "*** Resource ***"
        ],
        "Gateway Aggregator Pattern": [
          "Gateway Aggregator Pattern - Intro",
          "Jar Download",
          "External Services",
          "Project Setup",
          "Creating DTO",
          "Creating External Service Clients",
          "Aggregator Service",
          "Aggregator Controller",
          "Gateway Aggregator Pattern Demo",
          "Is our Aggregator resilient?",
          "Making Aggregator more resilient!",
          "Are we making parallel calls?",
          "Product Service error handling",
          "Summary"
        ],
        "Scatter Gather Pattern": [
          "Scatter Gather Pattern - Intro",
          "External Services",
          "Creating DTO",
          "Creating Delta Service Client",
          "Creating JetBlue / Frontier Service Client",
          "Creating Service",
          "Creating Controller",
          "Scatter Gather Demo",
          "Summary"
        ],
        "Orchestrator Pattern (For Parallel Workflow)": [
          "Orchestrator Pattern - Intro",
          "Orchestrator Scope",
          "External Services",
          "Creating DTO - Part 1",
          "Creating DTO - Part 2",
          "Creating Service Clients - Part 1",
          "Creating Service Clients - Part 2",
          "Orchestrator Request Context",
          "Util Class",
          "Orchestrator Pattern Implementation - High Level Architecture",
          "Payment Handler",
          "Inventory and Shipping Handlers",
          "Order Fulfillment Service",
          "Order Cancellation Service",
          "Order Orchestrator Service",
          "Debug Util",
          "Controller",
          "Orchestrator Demo",
          "Bug Fix",
          "Quick Note",
          "Summary"
        ],
        "Orchestrator Pattern (For Sequential Workflow)": [
          "Sequential Workfkow - Intro",
          "External Services",
          "Project Setup",
          "Creating DTO",
          "Creating Service Clients",
          "Util Class",
          "Sequential Workflow - Architecture",
          "Sequential Workflow - Implementation - Part 1",
          "Sequential Workflow - Implementation - Part 2",
          "Sequential Workflow - Implementation - Part 3",
          "Sequential Workflow - Demo"
        ],
        "Splitter Pattern": [
          "Splitter Pattern - Intro",
          "External Services",
          "Creating DTO - Part 1",
          "Creating DTO - Part 2",
          "Creating Service Clients",
          "Quick Note On Flux Requests",
          "[Courses] - For Streaming Requests and Responses",
          "Abstract Reservation Handler",
          "Car Reservation Handler",
          "Room Reservation Handler",
          "Reservation Service",
          "Controller",
          "Splittern Pattern - Demo"
        ],
        "Timeout Pattern": [
          "Resiliency Pattern - Intro",
          "Timeout Pattern",
          "Project Setup",
          "Timeout Pattern Implementation",
          "Timeout Pattern Demo",
          "Summary"
        ],
        "Retry Pattern": [
          "Retry Pattern - Intro",
          "External Services",
          "Project Setup",
          "Retry Pattern Implementation Demo",
          "4XX Issue Fix",
          "Quick Note On Retry Spec",
          "Summary"
        ],
        "Circuit Breaker Pattern": [
          "Circuit Breaker Pattern - Intro",
          "Circuit Breaker Terminologies",
          "External Services",
          "Project Setup",
          "Maven Dependencies",
          "Resilience4j - Config",
          "Circuit Breaker Pattern Implementation",
          "Circuit Breaker Pattern Demo",
          "Overriding Configuration",
          "Summary"
        ],
        "Rate Limiter Pattern": [
          "Rate Limiter Pattern - Intro",
          "Server Side Rate Limiter - Implementation",
          "Server Side Rate Limiter - Demo",
          "Client Side Rate Limiter - Implementation",
          "Summary"
        ]
      },
      "requirements": [
        "Knowledge on Reactive Programming",
        "Knowledge on Spring WebFlux",
        "Comfortable with Indian Accent :)"
      ],
      "description": "In this comprehensive course, you will dive into the world of design patterns and learn how to leverage them to build highly scalable and resilient reactive microservices using Spring WebFlux. You will explore various Integration Patterns that enable efficient communication between microservices, as well as Resilient Patterns that enhance the robustness of your services.\nBy the end of this course, you will have a solid understanding of how to apply design patterns effectively and create reactive microservices that can handle complex workflows and withstand failures.\nCourse Content:\nIntegration Patterns:\nHandling multiple reactive microservices communication efficiently\nGateway Aggregator Pattern: Reducing network latency and acting as a facade for complex backend services\nScatter Gather Pattern: Routing requests to multiple backend services and aggregating their responses\nOrchestrator Pattern (Saga - for parallel workflow): Coordinating multiple backend services in complex workflows\nOrchestrator Pattern (Saga - for sequential workflow): Managing sequential workflows by replacing chained microservice calls\nSplitter Pattern: Processing individual elements in a list of repeating elements\nResilient Patterns:\nBuilding robust and resilient reactive microservices\nTimeout Pattern: Handling unresponsive remote services by setting appropriate timeouts\nRetry Pattern: Dealing with intermittent network or remote service issues by retrying failed requests\nCircuit Breaker Pattern: Protecting services and meeting SLAs when dependent remote services are unhealthy or unreachable\nRate Limiter Pattern: Safeguarding services from DDoS attacks and controlling network call limits\nBulkhead Pattern: Allocating resources based on priority to prevent one feature's failure from affecting the entire application\nJoin this course to unlock the power of design patterns and learn how to build scalable, resilient, and highly performant reactive microservices with Spring WebFlux. Gain the skills necessary to tackle complex workflows, optimize communication between microservices, and ensure the robustness of your applications in the face of failures.",
      "target_audience": [
        "Any Developer / Architect who is interested in Microservice Development / Architecture with WebFlux"
      ]
    },
    {
      "title": "JavaScript & LeetCode | The Interview Bootcamp",
      "url": "https://www.udemy.com/course/ultimate-javascript-leetcode-interview-bootcamp/",
      "bio": "Learn *all* the best practical tricks/techniques to solve those pesky interview problems so you can land that dream job!",
      "objectives": [
        "Tricks, Tips, and Skills needed to master your next software engineering technical interview",
        "Practical application of Algorithms and Data Structures in an interview setting",
        "Optimal approaches to solving difficult coding questions",
        "How to successfully land your dream job"
      ],
      "course_content": {
        "Introduction": [
          "Welcome to the Course!",
          "Optional JavaScript Crash-Course (Skip ahead if you already know JavaScript!)",
          "Environment Setup - Windows",
          "Environment Setup - macOS",
          "Obtaining a copy of the course code",
          "How to run tests",
          "How to get the most value from this course"
        ],
        "Strings": [
          "Strings Introduction",
          "Valid Palindrome (LC #125)",
          "Longest Palindromic Substring (LC #5)",
          "Longest Substring Without Repeating Characters - Part 1 (LC #3)",
          "Longest Substring Without Repeating Characters - Part 2 (LC #3)",
          "Valid Anagram (LC #242)",
          "Group Anagrams (LC #49)",
          "Valid Parentheses (LC #20)"
        ],
        "Dynamic Programming": [
          "Dynamic Programming Introduction",
          "Climbing Stairs (LC #70)",
          "House Robber (LC #198)",
          "Jump Game - Part 1 (LC #55)",
          "Jump Game - Part 2 (LC #55)",
          "Longest Increasing Subsequence - Part 1 (LC #300)",
          "Longest Increasing Subsequence - Part 2 (LC #300)",
          "Coin Change - Part 1 (LC #322)",
          "Coin Change - Part 2 (LC #322)",
          "Unique Paths (LC #62)"
        ],
        "Arrays": [
          "Arrays Introduction",
          "Contains Duplicate (LC #217)",
          "Product of Array Except Self (LC #238)",
          "Container With Most Water (LC #11)",
          "Best Time to Buy and Sell Stock (LC #121)",
          "Two Sum (LC #1)",
          "3Sum - Part 1 (LC #15)",
          "3Sum - Part 2 (LC #15)",
          "Maximum Subarray - Part 1 (LC #53)",
          "Maximum Subarray - Part 2 (LC #53)",
          "Maximum Product Subarray - Part 1 (LC #152)",
          "Maximum Product Subarray - Part 2 (LC #152)",
          "Find Minimum in Rotated Sorted Array - Part 1 (LC #153)",
          "Find Minimum in Rotated Sorted Array - Part 2 (LC #153)",
          "Search in Rotated Sorted Array - Part 1 (LC #33)",
          "Search in Rotated Sorted Array - Part 2 (LC #33)"
        ],
        "Interval": [
          "Interval Introduction",
          "Meeting Rooms (LC #252)",
          "Non-overlapping Intervals (LC #435)",
          "Merge Intervals (LC #56)"
        ],
        "Matrix": [
          "Spiral Matrix - Part 1 (LC #54)",
          "Spiral Matrix - Part 2 (LC #54)",
          "Set Matrix Zeroes - Part 1 (LC #73)",
          "Set Matrix Zeroes - Part 2 (LC #73)",
          "Word Search (LC #79)"
        ],
        "Linked List": [
          "Linked List Introduction",
          "Reverse Linked List (LC #206)",
          "Linked List Cycle (LC #141)",
          "Remove Nth Node From End of List (LC #19)",
          "Merge Two Sorted Lists (LC #21)"
        ],
        "Trees": [
          "Trees Introduction",
          "Number of Islands (LC #200)",
          "Invert Binary Tree (LC #226)",
          "Maximum Depth of Binary Tree (LC #104)",
          "Binary Tree Level Order Traversal (LC #102)",
          "Same Tree (LC #100)",
          "Validate Binary Search Tree (LC #98)",
          "Lowest Common Ancestor of a Binary Search Tree - Part 1 (LC #235)",
          "Lowest Common Ancestor of a Binary Search Tree - Part 2 (LC #235)"
        ],
        "Additional Resources": [
          "Congratulations!",
          "Additional Resources & YouTube Channel"
        ]
      },
      "requirements": [
        "Basic Code Literacy (any language is OK!)",
        "Enthusiasm and Willingness to learn"
      ],
      "description": "Are you studying for that next coding interview but don’t know where to start? Or are you looking for a concise, easy-to-understand study guide with everything you need to know? Or are you looking for a powerful advantage over the competition to guarantee you that awesome job you’ve always wanted at your dream company?\n\n\nTHEN THIS IS THE COURSE FOR YOU!\n\n\nIn my LeetCode course, I will walk you through, step-by-step, all the different types of questions that appear during interviews!  I am a self-taught programmer so I know what it feels like to really struggle during those technical interviews.  Let me put it this way: I created the course I wish I had when I was studying for my technical interviews!\n\n\nWhat is LeetCode?\nLeetCode is a massive collection (1,050 and counting) of challenging coding problems.  It has just about every problem you can imagine.  In fact, many companies (including the Big 5 tech giants) use interview questions they find on LeetCode!\n\n\nI have some good news for you: spending countless hours studying and solving every single problem is unnecessary.  This course was designed to help you massively optimize your study time and put you on the quickest path to successfully achieving that dream job.\n\n\nContents and Overview\nI know LeetCode questions are meant to be difficult, but do not worry!  I made it a priority to present each problem in the most simplistic and direct way possible.  You will benefit from my painless and easy-to-understand format, as I walk you through each problem, step-by-step.  I cover everything from practical application of algorithms, to data structures, to time and space complexity.\n\n\nI do not believe in wasting your time or my time. This means that unlike most \"interview preparation courses\" out there, I will not waste time going over obscure computer science theory or elementary programming concepts. Let me let you in on a little secret: obscure theory is almost always useless in an interview setting. On the other hand, my lectures are MASSIVELY practical, as in — they are exclusively about problem solving tricks/techniques and pattern recognition. REMEMBER: Your interviewer won't know (or care) about whether you've spent WEEKS memorizing theory prior to an interview, he or she will ONLY care about whether you can solve the coding challenge or not.\n\n\nBy the time you complete this course, you will be an expert in all the tricks, techniques, and patterns needed to solve even the most challenging of interview problems.  Are you ready to supercharge your next technical interview and land that awesome dream job?!\n\n\nWe use basic JavaScript in this course, and even if you are new to JavaScript, do not worry!  I have included a bonus crash-course in JavaScript at the start of the course.  No prior JavaScript experience is required!\n\n\nCourse material is regularly refreshed to include all of the newest updates and information, and since you are granted lifetime access upon registering, you can rely on this course to keep your technical interviewing skills on the cutting edge.\n\n\nThere is no need to waste your time scouring the internet, frantically trying to piece together ways to solve coding challenges the night before a big, important interview.  Invest in yourself, and allow me to show you the easiest ways to ace it!\n\n\nFeel free to take a preview of this course to see if it is a good fit for you.  I am so confident that you will love my course that I even offer a 100% 30-day money-back guarantee.  You have absolutely nothing to lose, so come on in, and let's get started!",
      "target_audience": [
        "Anyone looking to master their next technical interview",
        "Beginner, intermediate, and advanced JavaScript developers",
        "Anyone seeking their dream software engineering job"
      ]
    },
    {
      "title": "Mastering critical SKILLS in Data Structures using Python",
      "url": "https://www.udemy.com/course/python-ds-skills/",
      "bio": "Understand DS inner details & design decisions effects + Solve 123 problems to enhance your problem-solving skills",
      "objectives": [
        "Learn from basic to advanced datastructures",
        "MANY explained problems from Easy to Medium to Hard + quizzes",
        "Well-written and modular short codes",
        "Short but very informative and deep material",
        "A fundamental step toward improving problem solving skills",
        "A fundamental step toward interviews preparation",
        "Algorithms course should be an easier learning experience"
      ],
      "course_content": {
        "Getting Started": [
          "Data Structure: What and Why",
          "Effective usage of the course",
          "Online Judge",
          "LeetCode OJ",
          "Resources and Students Community",
          "Important Note"
        ],
        "Arrays": [
          "The Array",
          "Appending Operation",
          "Capacity Trick",
          "Insertion",
          "Abstract Data Type",
          "Arrays Homework - 7 Easy to Medium Challenges",
          "Arrays Homework - Solutions"
        ],
        "Asymptotic Complexity": [
          "Asymptotic Complexity (1)",
          "Asymptotic Complexity (2)",
          "Asymptotic Complexity (3)",
          "Quiz",
          "Asymptotic Complexity (4)",
          "Asymptotic Complexity (5)",
          "Quiz"
        ],
        "Singly Linked List": [
          "The Node",
          "Displaying nodes",
          "Singly Linked List",
          "Linked List Traversal",
          "Effective Coding and Debugging for linked list 1",
          "Effective Coding and Debugging for linked list 2",
          "SLL Homework 1 - 5 Easy Challenges",
          "SLL Homework 1 - Solutions",
          "Deletion",
          "Logical and physical Data Structures",
          "Quiz",
          "SLL Homework 2 - 5 Easy Challenges",
          "SLL Homework 2 - 5 Easy Challenges NOTE",
          "SLL Homework 2 - Solution p1",
          "SLL Homework 2 - Solution p2 p3",
          "SLL Homework 2 - Solution p4 p5",
          "SLL Homework 3 - 5 Medium Challenges",
          "SLL Homework 3 - Solutions p1 p2",
          "SLL Homework 3 - Solutions p3 p4 p5",
          "SLL Homework 4 - 6 Medium to Hard Challenges",
          "SLL Homework 4 - Solution p1",
          "SLL Homework 4 - Solution p2",
          "SLL Homework 4 - Solution p3",
          "SLL Homework 4 - Solution p4 p5",
          "SLL Homework 4 - Solution p6"
        ],
        "Doubly Linked List": [
          "Doubly Linked List",
          "DLL Insertion",
          "DLL Deletion",
          "Quiz",
          "DLL Homework 1 - 4 Easy to Medium Challenges",
          "DLL Homework 1 - Solutions",
          "DLL Homework 2 - 4 Medium to Hard Challenges",
          "DLL Homework 2 - Solution p1",
          "DLL Homework 2 - Solution p2",
          "DLL Homework 2 - Solution p3",
          "DLL Homework 2 - Solution p4"
        ],
        "Project: Sparse Array and Matrix": [
          "Part 1 - Sparse Array",
          "Part 1 - Sparse Array Solution",
          "Part 2 - Sparse Matrix",
          "Part 2 - Sparse Matrix Solution"
        ],
        "Stack": [
          "Important Note",
          "Stack",
          "Array-based Stack",
          "Stack Homework 1 - 4 Easy to Medium Challenges",
          "Stack Homework 1 - Solution p1 p2",
          "Stack Homework 1 - Solution p3 p4",
          "Stack Homework 2 - 3 Hard Challenges",
          "Stack Homework 2 - Solution p1",
          "Stack Homework 2 - Solution p2",
          "Stack Homework 2 - Solution p3",
          "Linked-list-based Stack",
          "Infix, Postfix and Prefix Notation",
          "Infix to Postfix",
          "Infix to Postfix Code",
          "Infix to Postfix with Parentheses",
          "Quiz",
          "Stack Homework 3 - 2 Medium Challenges",
          "Stack Homework 3 - Solution p1",
          "Stack Homework 3 - Solution p2",
          "Stack Homework 4 - 3 Hard Challenges",
          "Stack Homework 4 - Solution p1",
          "Stack Homework 4 - Solution p2",
          "Stack Homework 4 - Solution p3"
        ],
        "Queue": [
          "Queue",
          "Queue using list",
          "Circular Queue",
          "Circular Queue Code",
          "Linked-list-based Queue",
          "Queue Homework 1 - 2 Easy Challenges",
          "Queue Homework 2 - 2 Medium Challenges",
          "Queue Homework 3 - 3 Hard Challenges",
          "Quiz"
        ],
        "Binary Tree": [
          "Trees",
          "Binary Tree Node",
          "Binary Tree Traversal 1",
          "Binary Tree Traversal 2",
          "Binary Tree Traversal 3",
          "Binary Tree Types",
          "Binary Tree Formulas",
          "Quiz",
          "Binary Tree Creation",
          "BT Homework 1 - 5 Easy Challenges",
          "BT Homework 1 - Solutions",
          "BT Homework 2 - 5 Medium to Hard Challenges",
          "BT Homework 2 - Solution p1",
          "BT Homework 2 - Solution p2",
          "BT Homework 2 - Solution p3",
          "BT Homework 2 - Solution p4 p5",
          "Level Order Traversal 1",
          "Level Order Traversal 2",
          "BT Homework 3 - 3 Medium to Hard Challenges",
          "BT Homework 3 - Solution p1",
          "BT Homework 3 - Solution p2",
          "BT Homework 3 - Solution p3",
          "Binary Tree Generation",
          "BT Homework 4 - 2 Medium Challenges",
          "BT Homework 4 - Solutions",
          "Binary Tree Serialization",
          "BT Homework 5 - 3 Medium Challenges",
          "BT Homework 5 - Solution p1",
          "BT Homework 5 - Solution p2 p3"
        ],
        "Binary Search Tree": [
          "Binary Search Tree",
          "BST Insertion",
          "BST Homework 1 - 5 Easy to Medium Challenges",
          "BST Homework 1 - Solutions p1 p2",
          "BST Homework 1 - Solutions p3",
          "BST Homework 1 - Solutions p4",
          "BST Homework 1 - Solutions p5",
          "BST Min & Successor 1",
          "BST Min & Successor 2",
          "BST Min & Successor 3",
          "Quiz",
          "Homework 2 - 3 Medium Challenges",
          "Homework 2 - Solution p1",
          "Homework 2 - Solution p2",
          "Homework 2 - Solution p3",
          "Homework 3 - 2 Medium to Hard Challenges",
          "07 BST Homework 3 - Solutions",
          "BST Deletion 1",
          "BST Deletion 2",
          "Quiz",
          "Homework 4 - 2 Medium Challenges",
          "BST Homework 4 - Solutions"
        ]
      },
      "requirements": [
        "Programming skills",
        "Built-in Data Structures: list, tuple, set, dictionary",
        "Comfortable with recursive functions"
      ],
      "description": "Almost all other courses focus on knowledge. In this course, we focus on gaining real skills.\nOverall:\nThe course covers basic to advanced data structures\nLearn the inner details of the data structures and their time & memory complexity analysis\nLearn how to code line-by-line\nSource code and Slides and provided for all content\nAn extensive amount of practice to master the taught data structures (where most other content fails!)\n\n\nContent:\nAsymptotic Complexity\nArrays\nSingly Linked List\nDoubly Linked List\nProject: Sparse Array and Matrix\nStack\nQueue\nBinary Tree\nBinary Search Tree\nBinary Heap\nAVL Tree\nLetter Tree (Trie)\nHash Table\nExtensive Homework sets with video solutions\n\n\nTeaching Style:\nInstead of long theory then coding style, we follow a unique style\nI parallelize the concepts with the codes as much as possible\nGo Concrete as possible\nUse Clear Visualization\n\n\nBy the end of the journey\nSolid understanding of Data Structures topics in Python\nMastering different skills\nAnalytical and Problem-Solving skills\nClean coding for data structures\nBlack-box applying on DS\nWith the administered problem-solving skills\nYou can start competitive programming smoothly [DS type]\nSmooth start in Algorithms course\nOne more step toward interviews preparation\n\n\nPrerequisites\nStrong Programming Skills:\nBuilt-in Data Structures: list, tuple, set, dictionary\nComfortable with recursive functions\nBasic Programming Problem-Solving Skills\nThat is; solved a lot on the basic topics\nUse IDE Debugger\nPreferred:\nProject Building Skills\n\n\nDon't miss such a unique learning experience!\n\n\nAcknowledgement: “I’d like to extend my gratitude towards Robert Bogan for his help with proofreading the slides for this course”",
      "target_audience": [
        "Mastering inner details of several important data structures",
        "Not just learn, but strongly apply & alter data structures",
        "whoever want to master more of computer science fundamentals"
      ]
    },
    {
      "title": "Emotional Intelligence for Software Engineers and Developers",
      "url": "https://www.udemy.com/course/emotional-intelligence-for-software-engineers-and-developers/",
      "bio": "Improve your Emotional Intelligence & Boost your career growth using Success@Work model with effective Practical Tips !",
      "objectives": [
        "Understand Why Emotional Intelligence is Important for Software Engineers",
        "The Components & Model of EI",
        "Role of Emotional Intelligence in complete Software Engineering Team : From Developers to Project Managers.",
        "Difference in IQ & EQ",
        "EI in Web Development, Software Testing, Project Management, Digital Transformations etc",
        "Why Developers need to improve EI",
        "Effective Tips for raising EI in Software Development Teams",
        "How to Demonstrate Your EQ During Interviews"
      ],
      "course_content": {
        "Introduction": [
          "What is Emotional Intelligence?",
          "Understanding EI (Emotional Intelligence)",
          "History of EI",
          "Some EI Facts",
          "What is the Difference Between IQ and EQ?",
          "5 Components of EI"
        ],
        "Model for Emotional Intelligence": [
          "Model for Emotional Intelligence",
          "Model for Emotional Intelligence #1",
          "Model for Emotional Intelligence #2",
          "Model for Emotional Intelligence #3",
          "Model for Emotional Intelligence #4",
          "Model for Emotional Intelligence #5",
          "Model for Emotional Intelligence #6"
        ],
        "Emotional Intelligence in Software Engineering Teams": [
          "Why EI is a must in Tech Companies",
          "How to Identify Software Engineers with High Emotional Intelligence",
          "People in Software Teams that should focus on EI",
          "Why as a Developer I should improve my EI?",
          "How to show EI with Non-Tech people?",
          "Tips for Raising EI in Your Project Environment",
          "How to Demonstrate Your EQ During Interviews?"
        ],
        "Industry Wise need for Emotional Intelligence": [
          "EI in Project Management",
          "EI in Software Testing",
          "EI in Web Development",
          "EI in Digital Transformation"
        ],
        "Practical Tips to get Better at Emotional Intelligence": [
          "Tips to get better at EI 1",
          "Tips to get better at EI 2",
          "Tips to get better at EI 3",
          "Tips to get better at EI 4"
        ],
        "End Notes": [
          "Congratulations & Next Steps"
        ]
      },
      "requirements": [
        "No Experience needed, you will learn everything from basic.",
        "The Zeal to become more efficient at Software Development"
      ],
      "description": "As software developers, we have our image of what it means to be a good developer, and we also have a mental model of the road we started walking when we first entered the field as interns or as junior developers. Most of the time, we research what technical books to read, what courses to watch, which field to go into, web development, mobile development, or something else. The Technology, the tool - we get so involved in this wide array of choices, and so there is something very foundational that we might miss if we don’t pay enough attention and get lost in the technicality.\n\n\nThere is a set of skills known as “soft” skills, and that forms the 'EI' or 'Emotional Intelligence'.\n\n\nEmotional intelligence is something everyone has, but which few of us really know how to channel or develop. Many Software Developers wrongly believe it to be a quality they simply don’t possess – and that if they weren’t born with it, it’s something there’s no hope of attaining later in life. But the good news for all of us is that emotional intelligence in general, and empathy in particular, are things we can train ourselves to have more of.\n\n\nMore and more employers are looking for coders and Software Developers who have the right set of “soft skills”, such as the ability to work well with a team, to empathize with coworkers and customers, and to de-escalate emotional situations. All of these skills require a high degree of emotional intelligence. What is emotional intelligence, and why is it important? And how can software engineers, coders and programmers develop emotional intelligence before or during their career? You’ll learn the answers to those questions in this course.\n\n\nI assure you that after taking this course you'll say :\n\n\nI’ve come to understand why I previously avoided certain situations, the roots this had in particular emotions, and the impact all that had on my sense of self-worth.\nGetting an insight into what people around me want, and why they do what they do, has become dramatically easier for me.\nBecause I can now understand them better, knowing how other people are probably going to act has become much easier.\nI’ve begun to find it much simpler to identify and engage in the small pleasures that brighten up my life and make me more productive.\nDifficult tasks like engaging in negotiation have come to be things I can take pleasure in.\nMy Development efficiency has increased well, and I am now able to respond well to negative situations like downtime, outages etc.\n\n\nTop Reasons why you should choose this Course :\n\n\nThis course is designed keeping in mind the students from all backgrounds - hence we cover everything from basics like EI fundamentals, and gradually progress towards more important topics around EI, seeing some practical tips to improve.\nThis course can be completed over a Weekend.\nThis course covers end to end introduction to EI and guide to be better at it.\nUseful resources will be shared time and again in the course to keep it updated with new ideas.\nAll Doubts will be answered.\n\n\nMost Importantly, Guidance is offered in detail regarding the smallest of things that matters ! You will not only learn the process to improve your EI, but important principles - that will help you understand this crucial skill and help become more efficient in your current role, and grow faster !\n\n\nA Verifiable Certificate of Completion is presented to all students who undertake this course.",
      "target_audience": [
        "Students studying Software Engineering",
        "Professionals in any domain of Software Engineering - Development, Testing, Management etc",
        "Professionals in Higher Management in Development Teams looking for ways to improve Team's Productivity",
        "Any professional looking to increase their productivity and efficiency at work",
        "Hiring Professionals looking for perfect candidate in Software Development team that has good soft skills",
        "Software professionals looking for promotion at work and increase in pay.",
        "Anybody in any domain or department in Engineering Teams."
      ]
    },
    {
      "title": "Making Sense of User Stories",
      "url": "https://www.udemy.com/course/making-sense-of-user-stories/",
      "bio": "An in-depth look at writing, understanding, and working with user stories",
      "objectives": [
        "A practical (not theoretical) understanding of user stories and how to use them out there in the real world",
        "A chance to practice these skills through exercises and solutions",
        "The knowledge you’ll need to apply user stories to your projects and use them effectively",
        "The ability to use personas to help you find and focus your user stories",
        "A deep understanding of the 3 C’s model, and the knowledge to apply that model to your stories",
        "The knowledge you need to build high quality stories, using the INVEST criteria",
        "Techniques to split large stories into smaller, more manageable ones",
        "A fun learning experience, complete with examples, exercises, and solutions"
      ],
      "course_content": {
        "Introduction": [
          "Overview of the Course",
          "Introduction to the Example"
        ],
        "Overview of User Stories": [
          "What is a User Story?",
          "User Stories and Video Games",
          "Why User Stories?",
          "Roles and Responsibilities"
        ],
        "Personas": [
          "Introduction to Personas and Part 1 of the Persona Definition Process",
          "Part 2 of the Persona Definition Process",
          "Part 3 of the Persona Definition Process",
          "Exercise: Personas",
          "Exercise Solution: Personas"
        ],
        "Building User Stories with the 3 C's": [
          "Overview of the 3 C's Model",
          "Card",
          "Exercise: Define User Stories",
          "Exercise Solution: Define User Stories",
          "Conversation",
          "Confirmation (Acceptance Criteria)",
          "Exercise: Define Acceptance Criteria",
          "Exercise Solution: Define Acceptance Criteria",
          "Epics and Themes"
        ],
        "Building Quality into the Stories with INVEST": [
          "Overview of INVEST and the First 2 Criteria (Independent, Negotiable)",
          "INVEST Part 2 (Valuable)",
          "INVEST Part 3 (Estimable, Small, Testable)",
          "Exercise: INVEST Criteria",
          "Exercise Solution: INVEST Criteria"
        ],
        "Splitting Stories": [
          "Splitting Stories Overview",
          "Splitting Stories - More Techniques",
          "Exercise: Splitting Stories",
          "Exercise Solution: Splitting Stories"
        ],
        "Summary of the Course": [
          "Course Summary",
          "Course Summary - Downloadable PDF"
        ]
      },
      "requirements": [
        "No specialized knowledge or prior experience needed – we’ll go through everything you need to know"
      ],
      "description": "Discover the cure for the common course as we take you on a tour through the world of user stories. We’ll have fun along the way (did you know user stories are like video games?), and we’ll dive into the essential terms and concepts you’ll need to effectively apply user stories to your projects.\nIn this course, you’ll learn:\nWhat a user story is and how they can make projects more successful\nBenefits of user stories\nRoles and responsibilities in user stories\nHow to identify, analyze, and build personas\nHow to use those personas to write stories that will really meet your users’ needs\nThe 3 C's of a good user story (Card, Conversation, and Confirmation)\nHow to use the 3 C's to write your stories\nAll about epics and themes\nHow to use themes to organize your stories\nHow to use INVEST to make sure your stories are of good quality\nTechniques to effectively break down epics into smaller stories\n\n\nAnd through the whole class, we’ll use real world examples and exercises to help reinforce the ideas and give you the chance to practice. In this short course, you’ll get the skills you need to start applying user stories to your projects right away.",
      "target_audience": [
        "Business Analysts",
        "Product Owners",
        "Project Managers",
        "Anyone who wants an in-depth understanding of user stories and how they can help projects succeed"
      ]
    },
    {
      "title": "Docker - Introducing Docker Essentials, Containers, and more",
      "url": "https://www.udemy.com/course/docker-containers/",
      "bio": "[Docker-Endorsed] Create Docker containers and multi-container apps. Learn Compose, Networking, Swarm, and more!",
      "objectives": [
        "Updated for 2026: Learn how to use Docker and code Dockerized applications from an engineer with 5+ years of industry experience.",
        "Use Docker compose to create multi-container applications.",
        "Create and run Docker containers.",
        "Build your own custom Docker images.",
        "Run Docker Commands on the command line.",
        "Understand best practices of Dockerfiles and Image building.",
        "Set up a continuous deployment workflow using tools like Dockehub, Github Actions, and Amazon ECR.",
        "Create a cluster with Docker Swarm.",
        "Publish and host Docker images on Dockerhub and Amazon ECR.",
        "And more!"
      ],
      "course_content": {},
      "requirements": [
        "Access to a Mac, Windows, or Linux machine.",
        "Basics of Linux and operating systems, but includes explanations for beginners.",
        "Understanding of basics of web development, but includes explanations for beginners.",
        "Some github experience will help, but all git commands are explained."
      ],
      "description": "[Docker-Endorsed]\nThis course has been updated for 2026. So when you take this course, you can be 100% confident that your experience will be modern and full of relevant material.\nSince this course launched, many students have had 5-star experiences:\n\"Love Love Love David's courses. I'm a seasoned programmer just looking to refresh my skills and he does such a great job. Easy to listen to and keeps his courses moving along and focused! Great job!!!\"\n\"Highly recommended course. It covers all basic fundamentals to high level of project requirements based on Docker container technology.\"\n\"Thank you teacher, I learned not only about docker but also many useful command and development tips. I recommend this lecture to every developer who are interested in virtualization, CI/CD, networking, linux system, etc.\"\n\"The course was thorough and was easy to follow. I was able to complete the projects and it was exciting to see the results. Thank you!!\"\n\"Great course!! Instructor was very engaging and made the concepts interesting by giving apt examples. THANK YOU\"\nWhy should you take this course?\nDocker is a revolutionary technology in the world of software and dev ops engineering. For developers, Docker is a must-know. For enterprises, Docker is a must-use.\nWhat is Docker?\nDocker is an open platform that lets you package, develop, run, and ship applications in environments called containers.\nWhy should I learn Docker from you?\nAs a software engineer with 6+ years of industry experience, I designed this course to teach you the same docker and container-related concepts that I apply when working on million dollar applications.\nThis is a project-based course. So, you will become familiar with the main Docker commands as you build various applications with containers and images.\nThroughout this course, you will achieve the following (and more):\nRun your own containers on the command line with Docker.\nBuild your own container images with Dockerfiles.\nPersist data across containers with mounts.\nCompose multi-container applications with Docker Compose.\nUpdate containers dynamically with volumes.\nCreate private networks for Docker containers.\nCreate a multi-node cluster with Docker Swarm.\nSet up a continuous deployment workflow with the automatic building of Docker Images with Github Actions and Amazon ECR. Expand your software engineering skills to also include dev ops engineering skills.\nAdditional highlights include:\nExtra videos for Windows students in particular. A lot of the course happens on the command line. Most of the course is recorded on MacOS which works well for MacOS or Linux-based students. But wherever necessary, I also recorded videos on a Windows machine for anyone on Windows!\nAn extra reference content section, helpful for anyone wanting to go in depth on some of the technologies that appear in the course, such as JavaScript. These topics are worth discussing, but don't fit naturally within a Docker-focused section.\n100% up-to-date material - the journey you follow will not have any bugs or errors. I will also be available to help answer questions, or re-record/edit/update content if necessary.\nOverall, Docker and containers are technologies that every software engineer should be familiar with.\nSo what are you waiting for? See you in the course!\n***\nNote:\nThis course requires you to download Docker Desktop from the official docker website. If you are a Udemy Business user, please check with your employer before downloading software.",
      "target_audience": [
        "Anyone interested in exploring development operations.",
        "Anyone hoping to learn about containerization and Docker.",
        "Software developers wanting to explore Docker.",
        "Informational technicians wanting a refresher on Docker."
      ]
    },
    {
      "title": "Develop Opencv based Facial recognition system using c#",
      "url": "https://www.udemy.com/course/develop-opencv-based-facial-recognition-system-using-c/",
      "bio": "This course is specially designed for face detection and recognition by capturing faces in real time and display result",
      "objectives": [
        "At the end of course student will able to develop complete facial recognition based applications",
        "Camera initialization and capturing using opencv",
        "Eigen Face Concept",
        "Face Detection",
        "Training Database by giving name to detected faces",
        "Face Recognition and display name",
        "Face Recognition SDK will be provided",
        "Complete coding of detection and recognition will be provided",
        "Student can use this sdk to create other projects also"
      ],
      "course_content": {
        "Face Detection and Recognition": [
          "Introduction",
          "Introduction to openCv",
          "Import OpenCv in Project",
          "Camera initialization",
          "what is Emgu cv image box and how to import in project",
          "importing Emgucv image box visualization",
          "View camera Capture in image box",
          "Haar cascade for Face Detection",
          "Face Detection(Part 1)",
          "Face Detection(Part 2) Run and Test",
          "Train Database from detected faces(Part 1: show detected image and resize it)",
          "Train Database from detected faces(Part 2: save image with name setup)",
          "Train Database from detected faces(Part 3: save image with name coding)",
          "Train Database from detected faces(Part 4: continuation with testing and runnin)",
          "Train multiple faces",
          "Face Recognition(Part1 creating module for face recognition)",
          "Face Recognition(Part2 coding)",
          "Eigen Faces",
          "Face Recognition(Part3 Recognition using Eigen Faces)",
          "Face Recognition(Part4: test and Run)",
          "FaceRecognitionSDK",
          "Demo(Running of whole Program)"
        ]
      },
      "requirements": [
        "You should have window operating system",
        "For coding visual studio is needed"
      ],
      "description": "This course is designed in a way to learn opencv face recognition by real time implementation. Student can get concept and experience in building application by step by step implementation. coding files and all other resources will be provided to students so that along with learning they will also implement face detection and face recognition in c#. At the end of this course student will able to build facial recognition based industrial level application. Instead of paying thousand of dollar for these application you can develop your own applications in few dollars. Learning Opencv was never so easy before.",
      "target_audience": [
        "Any one have interest in learning opencv",
        "Any one want to develop facial recognition based applications",
        "Any one want to earn big from computer vision applications",
        "code lovers"
      ]
    },
    {
      "title": "Blockchain & Bitcoin Basics",
      "url": "https://www.udemy.com/course/create-your-own-blockchain/",
      "bio": "Learn blockchain by forking your own coin",
      "objectives": [
        "How Bitcoin works",
        "How blockchain technology works",
        "How to create a cryptocurrency"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "What is blockchain?",
          "Setting up your development environment",
          "Bitcoin Core Software"
        ],
        "Blockchain Fundamentals": [
          "Blocks",
          "Transactions",
          "Bitcoin Script",
          "Addresses",
          "Mining"
        ],
        "Creating your own blockchain": [
          "Fork Bitcoin",
          "Design your blockchain - Intro",
          "Design your blockchain",
          "Test your blockchain"
        ],
        "Conclusion": [
          "Additional Resources"
        ]
      },
      "requirements": [
        "Interest in Bitcoin and blockchain technology",
        "Basic programming, command line usage"
      ],
      "description": "Understand blockchain concepts\nYou will be able to explain blockchain technology to your friends, the problem blockchain solves, and the different types of blockchains.\nData structures\nDistributed consensus\nHow to make a blockchain\nYou will learn the components that make up blockchain technology and how do they work.\nBlocks\nTransactions\nWallets\nAddresses\nMining\nFork your own coin\nUsing the Bitcoin source code you will learn how to fork it to create your own coin.\n\n\nThis is the course you've been looking for\nThis is the best course for gaining a solid understanding of blockchain and the only one that helps you create your own cryptocurrency based on the original blockchain application, Bitcoin. The instructor is very responsive and open to one-on-one consultation during and after the course to help you understand and use blockchain in your career. Blockchain is going to change the way the world does business, you don't want to miss this great opportunity to dive deep and invest in your future. Don't skip out on understanding Bitcoin from the ground up using free blockchain development tools that are included with the purchase of the course. This is 6 courses for the price of 1 covering topics from blocks and mining to addresses and transactions. This covers all the basics you need to know, sign up today!\nWho is the Instructor?\nJordan Baczuk, software engineer with over 10 years experience\nCreated cryptocurrencies\nContributor on Bitcoin Stack Exchange (jbaczuk)\nQ&A and one-on-one consultation at course signup\nWhy choose this course?\nSimple, concise and straight to the point\nPractical, hands on\nTechnology is the focus rather than the hype around price speculation\nFoundational concepts using Bitcoin as a practical application\nProfessional application to help you become a blockchain developer whether you work on a blockchain itself, or supporting applications like explorers and wallets.\nWhy focus on Bitcoin?\nThe original blockchain\nNo premine/ICO or risk of being a scam and going away\nMost dominant blockchain and cryptocurrency application by far. Volume-adjusted market cap is around 90% of all cryptocurrencies.\nYou can be sure your time invested will not be outdated or obsolete years into the future.\nHas had over a decade of the worlds brightest developers refining and making improvements\nCan I really make my own cryptocurrency?\nAbsolutely, but this will only get you started. Because this is the original Udemy course on forking Bitcoin, it is set up to help you make a cryptocurrency that is production-ready. This course does not focus on developing a blockchain from scratch, rather, it focuses on making one ready for production.\nThis course will help you understand design tradeoffs and common pitfalls of cryptocurrency development. It focuses on designing the coin distribution schedule, customizing the network parameters, and mining your own genesis block. Your actual coin design is up to you, but the instructor is here to help you decide how you want to do it. Finally, the course doesn't show you how to get users, do marketing, or get listed on an exchange, that is up to you.",
      "target_audience": [
        "Tech enthusiasts interested in digital currency",
        "Developers looking to understand how to use blockchain for their careers"
      ]
    },
    {
      "title": "Beat the Codility Coding Interview in Python",
      "url": "https://www.udemy.com/course/beat-the-codility-coding-interview-in-python/",
      "bio": "Learn and practice how to solve many coding puzzles from Codility using Python.",
      "objectives": [
        "Experience solving many of codility's coding interview puzzles, with problem descriptions, hints and solutions",
        "Learn common problem solving tips ideal for coding interviews in python",
        "Have a greater chance of passing the coding interview with codility, hackerrank and others"
      ],
      "course_content": {
        "Introduction": [
          "Make most of this course",
          "Useful links and resources"
        ],
        "Time Complexity": [
          "Quick recap on Complexity Theory",
          "Perm Missing Element Problem",
          "Perm Missing Element Hint 1",
          "Perm Missing Element Hint 2",
          "Perm Missing Element Solution",
          "Perm Missing Element Code Walkthrough",
          "Equilibrium Problem",
          "Equilibrium Hint 1",
          "Equilibrium Hint 2",
          "Equilibrium Solution",
          "Equilibrium Code Walkthrough"
        ],
        "Arrays": [
          "Refresh your knowledge on Arrays",
          "Cyclic Rotation Problem",
          "Cyclic Rotation Hint",
          "Cyclic Rotation Solution",
          "Cyclic Rotation Code Walkthrough"
        ],
        "Counting Elements": [
          "What do we mean by Counting Elements?",
          "Frog River One Problem",
          "Frog River One Hint",
          "Frog River One Solution",
          "Frog River One Code Walkthrough",
          "Max Counters Problem",
          "Max Counters Hint 1",
          "Max Counters Hint 2",
          "Max Counters Solution",
          "Max Counters Code Walkthrough"
        ],
        "Stacks and Queues": [
          "The basics around Stacks and Queues",
          "Brackets Problem",
          "Brackets Hint",
          "Brackets Solution",
          "Brackets Code Walkthrough",
          "Fish Problem",
          "Fish Hint",
          "Fish Solution",
          "Fish Code Walkthrough"
        ],
        "Leader": [
          "Leader definition and the Dominator Problem",
          "Dominator Hint",
          "Dominator Solution",
          "Dominator Code Walkthrough"
        ],
        "Maximum Slice Problem": [
          "Introduction to the Maximum Sub Array problem",
          "Max Profit Problem",
          "Max Profit Hint",
          "Max Profit Solution",
          "Max Profit Code Walkthrough"
        ],
        "Sorting": [
          "Overview of different Sorting Algorithms",
          "Disc Intersection Problem",
          "Disc Intersection Hint",
          "Disc Intersection Solution",
          "Disc Intersection Code Walkthrough"
        ],
        "Prefix Sums": [
          "How to generate prefix sums",
          "Passing Cars Problem",
          "Passing Cars Hint",
          "Passing Cars Solution",
          "Passing Cars Code Walkthrough",
          "Div Count Problem",
          "Div Count Hint",
          "Div Count Solution",
          "Div Count Code Walkthrough"
        ],
        "Primes and Composites": [
          "Understanding Primes and Composites",
          "Flags Problem",
          "Flags Hint 1",
          "Flags Hint 2",
          "Flags Solution",
          "Flags Code Walkthrough"
        ]
      },
      "requirements": [
        "Python programming language",
        "Basic understanding of data structures and algorithms"
      ],
      "description": "This course has been designed to help you pass your next coding interview. It focuses on puzzles from Codility's training lessons, so if you have an online coding test coming up, this course is perfect for you.\nThe key to passing coding interviews is to practice as much as possible by solving various types of coding puzzles. In doing so you sharpen your problem solving skills and eventually you will start to see patterns amongst the different coding solutions. You also increase your chances of being asked a problem you’ve already solved.\nIn this course you’ll get to practice many of these coding puzzles. In every section we introduce the topic, explain the problem and later provide you with a few hints that help solve the puzzle. In the end we arrive at the solution together.\nAlong the way you'll learn how to ride a motorbike, surf, scuba dive and fly an aeroplane. *\nJoin me on this course, and let’s get you to pass this interview!\n\n\n*Not really, however this course is pretty fun regardless.\nAll code in this course can be found on github, username/project: cutajarj/CodilityInPython",
      "target_audience": [
        "Python Developers about to take the codility coding interview",
        "Python Developers about to take another coding interview, such as hackerrank or others",
        "Python Developers about to take a face to face or phone coding interview"
      ]
    },
    {
      "title": "GitOps with Kubernetes (K8S), Terraform, Azure and AWS",
      "url": "https://www.udemy.com/course/gitops-with-kubernetes-terraform-azure-and-aws/",
      "bio": "Implement GitOps principles (pull based) with Azure Cloud (AKS), AWS and create project infrastructure using Terraform",
      "objectives": [
        "Learn to create Azure Cloud and AWS Cloud Infrastructure using Terraform",
        "Learn to implement an End to End DevSecOps pipeline for a dockerized project with GitOps Deployement",
        "Learn to create a DevOps pipeline using Github Actions and Deploy using ArgoCD",
        "Learn to use GitOps principles along with GitHub Actions",
        "Learn to Deploy on Azure Kubernetes Service using GitOps pipeline",
        "Learn to Dockerize and build the project",
        "Learn to relate GitOps with DevOps and DevSecOps"
      ],
      "course_content": {
        "Introduction": [
          "Introduction and Agenda"
        ],
        "Basics of GitOps, DevOps and DevSecOps": [
          "What is GitOps?",
          "How GitOps is different from DevOps and DevSecOps?",
          "What is Terraform?"
        ],
        "GitOps Case Study and Prerequisites": [
          "Let's understand different parts of GitOps Case Study",
          "Hands On: Let's Create a Azure Cloud account",
          "Hands On: Let's Create a AWS account",
          "Hands On: Let's install Azure CLI on local system",
          "Hands On: Install Terraform on local system"
        ],
        "Create Azure Cloud Infrastructure using Terraform": [
          "Hands On: Clone Azure Cloud Terraform Repo on local system",
          "Hands On: Understand Azure Cloud Terraform Code",
          "Hands On: Run Azure Cloud Terraform Code to create Azure Kubernetes Cluster"
        ],
        "Deploy ArgoCD on AKS Cluster using Terraform": [
          "Hands On: Clone ArgoCD Terraform Repo on local system",
          "Hands On: Understand ArgoCD Terraform Code",
          "Hands On: Complete the Prerequisites for running ArgoCD Terraform Code",
          "Hands On: Run ArgoCD Terraform Code to install ArgoCD on AKS"
        ],
        "Create AWS Cloud Infrastructure using Terraform": [
          "Hands On: Clone AWS Terraform Repo on local system",
          "Hands On: Understand AWS Terraform Code",
          "Hands On: Understand Shell Script used in AWS Terraform Code",
          "Hands On: Generate Key Pair and gather VPC details before running Terraform Code",
          "Hands On: Run AWS Terraform Code to Create AWS Infrastructure"
        ],
        "Integrate Static Application Code Analysis for Game Project in GitOps Pipeline": [
          "Hands On: Let's Clone Game's GitHub repo on local system",
          "Hands On: Part 1 - Integrate SonarQube for Code Analysis in GitOps Pipeline",
          "Hands On: Part 2 - Integrate SonarQube for Code Analysis in GitOps Pipeline",
          "Hands On: Part 3 - Integrate SonarQube for Code Analysis in GitOps Pipeline",
          "Hands On: Part 4 - Integrate SonarQube for Code Analysis in GitOps Pipeline",
          "Hands On: Implement Quality Gates using SonarQube in GitOps pipeline"
        ],
        "Let's Dockerize Game Project and store Game's Docker image in DockerHub": [
          "Hands On: Write a Dockerfile for Game Project",
          "Hands On: Create a DockerHub account and DockerHub repository",
          "Hands On: Part 1 - Build and Push Game's Docker Image to DockerHub Repo",
          "Hands On: Part 2 - Build and Push Game's Docker Image to DockerHub Repo",
          "Hands On: Implement Dynamic Tagging for Game's Docker Image"
        ],
        "Let's implement Container Scan for Game Project": [
          "Hands On: Part 1 - Implement Container Scan for Game Project",
          "Hands On: Part 2 - Implement Container Scan for Game Project"
        ],
        "Let's Deploy Docker Game on Azure Kubernetes Cluster": [
          "Hands On: Part 1 - Deploy Game Project on Azure Kubernetes Cluster using ArgoCD",
          "Hands On: Part 2 - Deploy Game Project on Azure Kubernetes Cluster using ArgoCD"
        ]
      },
      "requirements": [
        "Basic Git Commands",
        "Basic Cloud Knowledge",
        "Interested to learn GitOps"
      ],
      "description": "Overview\nDive into the world of GitOps, an operational framework that takes DevOps best practices used for application development such as version control, collaboration, compliance, and CI/CD, and applies them to infrastructure automation. This comprehensive course is designed to equip professionals with the knowledge and skills needed to implement GitOps strategies using Terraform, Kubernetes, Azure, and AWS.\nWhat You Will Learn\nFoundations of GitOps: Understand the principles behind GitOps, including version control, CI/CD, and IaC, to manage and automate your infrastructure efficiently.\nTerraform Mastery: Dive deep into Terraform to manage infrastructure as code across both AWS and Azure platforms. Master the Terraform CLI, workflows, and best practices for writing, planning, and creating reproducible infrastructure states.\nKubernetes in Action: Explore how to manage and scale containerized applications using Kubernetes. Learn how to deploy, manage, and scale your applications dynamically with Kubernetes on Azure (AKS).\nMulti-Cloud Strategies: Gain proficiency in using both AWS and Azure. Understand the unique features and management tools offered by each cloud provider.\nGitOps Workflow Implementation: Learn how to integrate GitOps workflows into your CI/CD pipeline, leveraging tools like ArgoCD to automate deployments in a Kubernetes environment.\nSecurity Best Practices: Understand security practices related to managing secrets, compliance standards, and access controls in a GitOps workflow.\nReal-World Scenarios: Engage with hands-on labs and projects that simulate real-world scenarios to apply what you've learned in a practical setting.\nWho Should Enroll\nThis course is ideal for DevOps engineers, cloud architects, system administrators, and software developers who wish to enhance their skills in infrastructure automation and management using cutting-edge technologies and practices.\nWhy Enroll in This Course\nIn this course, you'll move from theoretical understanding to practical application, ensuring you are job-ready to implement GitOps practices across multiple cloud environments using Terraform and Kubernetes. You'll emerge from this course with the confidence to tackle complex deployments and manage infrastructure at scale using modern DevOps and GitOps principles.",
      "target_audience": [
        "Developers",
        "DevOps Engineers",
        "QA Engineers"
      ]
    },
    {
      "title": "Intro to Embedded Machine Learning",
      "url": "https://www.udemy.com/course/intro-to-embedded-ml/",
      "bio": "Embedded Systems, Machine Learning, and Tiny ML",
      "objectives": [
        "Embedded Systems",
        "Machine Learning",
        "TinyML",
        "Embedded Machine Learning",
        "IoT"
      ],
      "course_content": {},
      "requirements": [
        "Access to Silicon Labs EFR32xG24 Development Kit"
      ],
      "description": "In this course, you will learn more about the field of embedded machine learning. In recent years, technological advances in embedded systems have enabled microcontrollers to run complicated machine learning models. Embedded devices for machine learning applications can fulfill many tasks in the industry. One typical example: sensor devices that detect acoustic or optical anomalies and discrepancies and, in this way, support quality assurance in production or system condition monitoring. In addition to cameras for monitoring visual parameters and microphones for recording soundwaves, these devices also use sensors for, for instance, vibration, contact, voltage, current, speed, pressure, and temperature.\nEven though there is plenty of educational content on embedded systems and machine learning individually, educational content on embedded ML has yet to catch up. This course attempts to fill that void by providing fundamentals of embedded systems, machine learning, and Tiny ML. This course will conclude with an interactive project where the learner will get to create their own specialized embedded ML project. This project will be based on acoustic event detection using a microcontroller or your own mobile device. By the end of the course, you will be able to pick your own classifications and audio and train and deploy a machine learning model yourself. This is a great way to introduce yourself to and gain valuable experience in the field of embedded machine learning.",
      "target_audience": [
        "Beginner students curious about embedded machine learning"
      ]
    },
    {
      "title": "Learn GIT In depth with BitBucket- Practical work flows",
      "url": "https://www.udemy.com/course/learn-git-tutorial-bitbucket/",
      "bio": "Learn smart ways of using GIT & Bitbucket with many advanced Commands - commit,merge,squash,rebase,bisect,cherrypick etc",
      "objectives": [
        "Understand GIT Core concepts& Commands in depth",
        "Understand how GIT and Bit bucket works together to create Strong Version control System",
        "Deep dive into GIT Advanced workflows with real time examples from Clone to push with merge conflicts",
        "Learn Tricky GIT commands like, rebase, Squash, Cherry pick, amend, bisect, revert , reset etc",
        "Understand How to Integrate GIT Bitbucket with Jira to have all Project management at one place",
        "Implement Bitbucket pipelines to check the Code after every GIT Commits and Pull requests"
      ],
      "course_content": {},
      "requirements": [
        "No Prior GIT experience is needed"
      ],
      "description": "This is the one Single Course where you will learn everything about GIT from basics to advanced with many complex workflows\nBitbucket is most used remote GIT repository in many companies and this course will give you complete knowledge on building pipelines, creating Pull requests and Jira integration.\nEvery command in GIT has in depth explanation with real time usage so that you know when to use what command while  managing the code in you GIT repositories.\nIn this course we'll find answers to many advance Work flow questions like:\n\"How can I edit/delete my last commit?\"\n\"What is the difference between a merge and a rebase ?\"\n\"How to squash multiple commits to one commit\"?\n\"How to time travel to past commit and make changes\"\n\"How to find the Error commit from the bunch of commits\"?\n\"What is the Stash?\"\n\"How to reset the changes made in Staging, working directories\"?\n\"How to add commit from one branch to another?\n\"How to bring back a deleted commit?\"\n\"What is the difference between a local tracking branch and a remote tracking branch?\"\nBelow are the commands on high level we use in this course.\nClone\nFork\nFetch\nPull\nCommit\nPush\nStash\nStatus\nStash Pop\nMerge\nbranch\nlog\nSquash\nReset Hard\nReset Soft\nRebase\nMerge squash\nCherry-pick\nrevert\nbisect\nreflog\namend-commit\nInteractive rebase\nblame\n\n\nApart from above commands, this course also covers how to create/review/approve/decline Pull requests in the Bit Bucket so that one can understand end to end flow of working with GIT in the projects.\nUnderstand Bitbucket Jira Integration\n· Understand creating Build Pipelines in Bitbucket for every code commit\n\nThere are lot of quizzes included for knowledge check so that you can emerge as GIT Pro after the successful course completion",
      "target_audience": [
        "Software Engineers",
        "Any Engineer who writes the code"
      ]
    },
    {
      "title": "Concurrent and Parallel Programming in Python",
      "url": "https://www.udemy.com/course/concurrent-and-parallel-programming-in-python/",
      "bio": "Speed up your programs with concurrency",
      "objectives": [
        "How to use concurrency and parallelism in Python",
        "How to write multi-threaded programs",
        "How to write multi-process programs",
        "How to write asynchronous programs"
      ],
      "course_content": {
        "Threading": [
          "Threading, Multiprocessing, Async Intro",
          "Threading in Python",
          "Creating a Threading Class",
          "Creating a Wikipedia Reader",
          "Creating a Yahoo Finance Reader",
          "Queues and Master Scheduler",
          "Creating a Postgres Worker",
          "Integrating the Postgres Worker",
          "Yaml File Intro",
          "Creating a Yaml Reader",
          "Improving Our Wiki Worker",
          "Improving All Workers and Adding Monitoring",
          "Final Program Cleanup",
          "Locking"
        ],
        "Multiprocessing": [
          "Multiprocessing Intro",
          "Multiprocessing Queues",
          "Multiprocessing Pool",
          "Multiprocessing Pool Map Multiple Arguments",
          "Multiprocessing Multiple Varying Arguments",
          "Multiprocessing Checking Elements in List in Certain Ranges"
        ],
        "Asynchronous": [
          "Intro to Writing Asynchronous Programs",
          "Asynchronous Tasks",
          "Async Gather Method",
          "Using Async Timeouts",
          "Creating Asynchronous For Loops",
          "Using Asynchronous Libraries",
          "The Async Wait Statement",
          "Combining Async and Multiprocessing"
        ]
      },
      "requirements": [
        "Basic familiarity with Python"
      ],
      "description": "In this course you'll learn how to create multi-threaded, asynchronous, and multi-process programs in Python, so that you can make your programs run even faster.\n\n\nIn applications communicating with other resources, a lot of time is spent just waiting for information to be passed from one place to another. You'll learn how to use multi-threading as well as asynchronous programming to speed up programs that are heavily bottlenecked by IO operations.\n\n\nWe'll go through an introduction first of where potential speed bottlenecks come from as well as how we could solve these issues, and then we'll dive directly into the technical content and build out a multi-threaded program together that grabs data from the internet, parses, and saves it into a local database.\n\n\nOther programs may be more heavily affected by CPU limitations. We'll also learn how to implement multiprocessing in Python, the library that lets us use multiple CPUs in our Python code. With this we'll be able to spread our workload over all the cores available on the machine we're using.\n\n\nFinally, we'll also look to combine both elements, taking a look at how we can use multiprocessing together with asynchronous programming to get the most benefit for yourself, maximizing your use of CPU resources and minimizing time spent siting idle waiting for IO response.\n\n\nYou can find the lecture code in the GitHub repository linked in the first lesson.",
      "target_audience": [
        "Python developers that want to make their programs faster by adding concurrency"
      ]
    },
    {
      "title": "Refactoring Java with IntelliJ IDEA",
      "url": "https://www.udemy.com/course/refactoring-java-with-intellij-idea/",
      "bio": "Learn to refactor like you mean it, stress-free, using IntelliJ IDEA's built-in refactorings",
      "objectives": [
        "Navigate code seamlessly",
        "Refactor Java code like a pro",
        "Put away that mouse, and avoid RSI",
        "Understand design decisions made when refactoring"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Cloning the tutorial code",
          "Don't use the mouse"
        ],
        "Getting Ready": [
          "Overview of the codebase",
          "Import inspection settings"
        ],
        "Getting started with refactoring": [
          "Updating the version of JUnit",
          "Interlude: What is refactoring?",
          "Let IDEA refactor for you"
        ],
        "Refactoring": [
          "Extract variable and method",
          "Rename",
          "Extracting and modifying methods",
          "Moving classes and methods",
          "Introducing parameters"
        ],
        "Finding and fixing bugs": [
          "Writing tests, fixing bugs"
        ],
        "More Refactoring": [
          "Extract interface",
          "Adding new functionality"
        ],
        "Wrap Up": [
          "Wrap Up & Conclusion"
        ]
      },
      "requirements": [
        "Knowledge of the Java language is required",
        "A copy of IntelliJ IDEA either Community (free) or Ultimate"
      ],
      "description": "Everybody knows that they should refactor their code to make sure that it is as easy as possible to maintain and understand.\nRefactoring by editing text introduces errors, and there can be long times when the code won't even compile, because a refactoring is part way through. Using automated refactoring tools means that your code will compile all the time, allowing tests to be run after every change.\n\nIntelliJ IDEA provides a huge number of tools to make refactoring of even very large codebases pain-free.\nThis course starts at the beginning, showing how to refactor a small codebase using IntelliJ IDEA's automated tools, building up skills that can be applied to huge source trees without breaking a sweat.\nIt demonstrates that, often, code can be refactored without actually typing any code at all!\nIt also helps the student understand that refactoring is also about making design decisions.\nEach lesson is easily digested in under 15 minutes, teaching techniques that are immediately useful in the real world.\nThis course requires a copy of IntelliJ IDEA, which is a free download.\nThe author and the course content is not affiliated with Jetbrains s.r.o  - although is a long time user and fan of their products!",
      "target_audience": [
        "Anybody writing Java software"
      ]
    },
    {
      "title": "Understanding Node.js: Core Concepts",
      "url": "https://www.udemy.com/course/understanding-nodejs-core-concepts/",
      "bio": "Understanding Node.js without any other NPM packages. Let's take your back-end engineering skills to the next level!",
      "objectives": [
        "Learn some of the vital concepts of back-end engineering",
        "Get to a level capable of easily learning various NodeJS frameworks and libraries",
        "Truly and deeply understand what exactly NodeJS is and see its full potentials far beyond just creating web servers",
        "Understand and master NodeJS as it is without using any other NPM packages",
        "Understand some of the most important operating systems concepts that every back-end developer needs to understand",
        "Be able to easily learn and understand the NodeJS documentation",
        "Learn how to directly deal with binary data and manipulate the 0s and 1s however you want",
        "Learn the most important Networking concepts and understand where NodeJS exactly comes into play",
        "Learn exactly what happens when you deploy your back-end applications rather than focusing on a few tools",
        "Learn how to create low-level network applications directly on top of TCP or UDP and develop your own protocols",
        "Deeply understand what HTTP really is and how it works",
        "Get a deep understanding of the File System",
        "Master Streams to develop highly performant and memory-efficient applications capable of dealing with terabytes of data with ease",
        "Learn how to incorporate compression to enhance the speed of your network applications",
        "Understand Unix and open up a world of new possibilities",
        "Understand the EventEmitter object",
        "Master Multi-Threading in NodeJS & achieve significant performance improvements",
        "Learn about some of the same cutting-edge cryptographic tools that governments and top companies rely on to protect their top-secret data and users online"
      ],
      "course_content": {
        "Introduction": [
          "Course Overview",
          "Setting Up - For Windows Users Only",
          "Setting Up - For Mac Users Only",
          "Setting Up - For Linux Users Only",
          "Introduction to the Command Line",
          "Learning NVM & Node.js Versions",
          "Node.js Under the Hood"
        ],
        "Understanding EventEmitter": [
          "Understanding EventEmitter",
          "EventEmitter Object"
        ],
        "Understanding Buffers": [
          "Introdcution",
          "Understanding Binary Numbers",
          "Understanding Hexadecimal Numbers",
          "Using a Programming Calculator",
          "Understanding Character Encodings",
          "The Concept of Buffers",
          "Buffers in Action",
          "Allocating Huge Buffers",
          "Fastest Way of Allocating Buffers",
          "Reading the Node.js Docs",
          "Outro"
        ],
        "Understanding File System": [
          "Introduction",
          "What Exactly Is a File?",
          "How Node.js Deals with Files",
          "Three Different Ways of Doing the Same Thing",
          "Starting Point for Building Our Application",
          "Watching the Command File for Changes",
          "Reading the Content of the Command File",
          "Cleaning Up the Code using EventEmitter",
          "Making Sense Out of the Read Data",
          "Implementing the Create File Command",
          "Defining the Rest of the Commands",
          "Solution - Implementing the deleteFile Function",
          "Solution - Implementing the renameFile Function",
          "Solution - Implementing the addToFile Function",
          "Outro"
        ],
        "Understanding Streams": [
          "Introduction",
          "Benchmarking Writing a Million Times to a File",
          "Using Streams Naively in Our Solution",
          "So What Exactly Are Streams?",
          "Understanding Different Types of Streams",
          "Fixing the Memory Issue in Our Program",
          "Reading Writable Streams Node.js Docs and Recap",
          "Readable Streams in Action",
          "Selectively Writing Our Data from the Readable Stream",
          "Understanding the Splitting Issue",
          "Implementing the Solution and Resolving the Splitting Issue",
          "Reading Node.js Docs and Recap",
          "Building Our Own Streaming Solution Using Buffers",
          "Understanding Piping",
          "Implementing Our Own Writable Stream",
          "Implementing Our Own Readable Stream",
          "Understanding Duplex and Transform Streams",
          "Creating an Encryption/Decryption Application",
          "Final Notes"
        ],
        "Understanding Networking": [
          "Introduction",
          "Understanding MAC Addresses and Switches",
          "Understanding Routers and How the Internet Works",
          "Understanding Networking Layers",
          "A Quick Tip About Filtering in Wireshark",
          "Creating a Simple TCP Application in Node.js",
          "Understanding the Transport Layer - TCP/UDP",
          "A Networking Scenario in Action",
          "Understanding Port Numbers",
          "Starting Point for Building Our Chat App",
          "Creating a Chat Application PART 1",
          "Creating a Chat Application PART 2",
          "Improving the UI of our Chat App",
          "Identifying Users in the Chat App",
          "Notifying Everyone When Somebody Joins/Leaves the Chat",
          "A Note About the 'end' Event on Windows",
          "Some Final Notes About the Chat App",
          "Deploying our Chat App to AWS",
          "Commands Used for Installing NVM",
          "Understanding IPv4 Addresses",
          "Understanding DNS",
          "Understanding IPv6 Addresses",
          "Starting Point for Building Our Uploader App",
          "Creating an Uploader Application",
          "Taking Care of Backpressures in the Uploader App",
          "Getting the File Names Dynamically in the Uploader App",
          "Displaying the Upload Progress in Our Uploader App",
          "Deploying our Uploader App",
          "AWS Cost Warning - Server Termination Reminder",
          "Understanding UDP and the Dgram Module",
          "Outro"
        ],
        "Understanding HTTP": [
          "Introduction",
          "The Idea of HTTP",
          "Creating a Simple HTTP Server in Node",
          "Understanding HTTP Messages, Requests & Responses",
          "Understanding Connection Types",
          "Building our Client and Sending a Request",
          "Sending a Response to the Client",
          "Learning Postman & Testing Our Server with It",
          "Reading Some Docs",
          "Sending an HTTP Request Directly on Top of TCP! PART 1",
          "Sending an HTTP Request Directly on Top of TCP! PART 2",
          "Emulating our HTTP Server Using the Net Module",
          "Understanding Media Types (MIME Types)",
          "Understanding HTTP Methods",
          "Understanding HTTP status codes",
          "Creating a Simple Web Server in Node",
          "Serving a CSS and JavaScript File",
          "Adding Some JSON Routes",
          "Adding a File Upload Route",
          "Creating our Own Little Mini-Express Framework!",
          "Making our Framework More Robust",
          "Getting Ready for Our Next Project",
          "Using Our Framework to Create a Web App",
          "Adding the Login Route",
          "Understanding HTTP Proxies",
          "HTTP is Stateless",
          "Understanding Cookies",
          "Recognizing Users for Future Requests after Logging In",
          "Sending the User’s Info in Profile",
          "Enhancing Our Framework with Middleware Support",
          "Defining the Middleware Functions",
          "Implementing the Create Post, Update User, and Logout Routes",
          "Outro"
        ],
        "Understanding Unix": [
          "Introduction",
          "What Is Unix?",
          "Why Should We Care About Unix?",
          "Setting Up Unix on Windows (WSL) - For Windows Users Only",
          "A First Look at the Child Process Module",
          "Understanding Unix Shells",
          "Demystifying Bash Execution Order: Aliases, Functions, Built-ins, and Path",
          "A Few Notes about Unix File Permissions",
          "Sourcing in Bash",
          "Understanding Shell Config Files",
          "What Exactly is a Child Process?",
          "Understanding Environment Variables",
          "Understanding Unix File System, Paths & CWD",
          "Understanding Stdout, Stdin, and Stderr",
          "Understanding Pipes and Output Redirection in Bash",
          "Building a Command Line Utility with Node.js",
          "Building Massive Communication App - Node Part",
          "Intro to the C Part",
          "Learning C - Our First App",
          "Learning C - Static Types & Our Memory",
          "Learning C - Memory Allocation",
          "Learning C - Reading the Arguments",
          "Building Massive Communication App - C Part",
          "Only Watch if You Skipped the C Part",
          "Another Way of IPC - Unix Domain Sockets",
          "Understanding Clustering",
          "Clustering in Action",
          "Installing & Building FFmpeg from Source Code",
          "Video Editor App - Setup & Walkthrough",
          "Adding the Upload Route",
          "Quick Intro to FFmpeg and Video Files",
          "Making a Thumbnail and Getting the Dimensions After an Upload",
          "Returning the List of Uploaded Videos",
          "Adding a Route for Returning the Video Assets",
          "Adding a Route to Extract the Audio of a Video File",
          "Adding the Resize Route",
          "Scheduling the Resizes",
          "More on Queue-based Processing",
          "Resuming Scheduled Resize Operations Upon App Restart",
          "Running Our Application in Cluster Mode",
          "Refactor from Cpeak to Express in Less than 20 Minutes!",
          "Outro"
        ],
        "Understanding Compression": [
          "Introduction",
          "How Does a Lossless Compression Work?",
          "Lossy Compression",
          "Gzip, Brotli and Deflate",
          "Compression in HTTP",
          "Compression vs. Minification",
          "Deploying Compression onto Our Apps",
          "Final Notes"
        ],
        "Understanding Multi-Threading": [
          "Introduction",
          "Guide for Skilled Multi-Threaded Developers",
          "What Exactly Is a Thread?",
          "How to Monitor Threads on Your Operating System",
          "Understanding CPU Usage",
          "Spawning Threads",
          "Thread Communication through Message-Passing",
          "Introduction to Our CPU-Intensive Program",
          "Enhancing Performance with Multi-Threading",
          "Handling CPU-Intensive Operations in an HTTP Server",
          "isMainThread",
          "CPU-Intensive vs. I/O-Intensive",
          "Examining a Crypto-Heavy Multi-Threaded App",
          "Node.js Thread Pool",
          "Developing a Thread Pool From Scratch",
          "Event Loop Utilization and Main Thread",
          "Keep the Main Thread Light with Batch Processing",
          "Effortlessly Expanding Our Thread Pool Capabilities",
          "Don’t Block the Worker Pool!",
          "Handling Billions of HTTP Requests",
          "Communication Through Shared Memory",
          "ArrayBuffers, SharedArrayBuffers, and TypedArrays",
          "Race Conditions",
          "Understanding Atomic Operations",
          "Understanding Mutual Exclusion",
          "Deadlocks",
          "Enhancing Performance Through Shared Memory",
          "Native Multi-Threading with C/C++ Addons",
          "A Deeper Look at the Event Loop PART 1",
          "A Deeper Look at the Event Loop PART 2",
          "Outro"
        ]
      },
      "requirements": [
        "At least one year of programming experience",
        "A good knowledge of JavaScript",
        "While not mandatory, a little bit of experience with ExpressJS and HTML could be helpful",
        "Not a strict requirement, but for the Multi-Threading section, it is recommended to be on a machine with a CPU that has at least 4 cores",
        "For the Cryptography section, some basic discrete math is needed; more info on the section’s introduction video"
      ],
      "description": "Welcome to the most comprehensive Node.js course on the internet!\nIn this course, we're going to do a deep dive into Node.js itself without cluttering our minds with other tools and NPM packages and truly master this powerful technology.\nThis course is heavily focused on computer science topics and fundamentals that are crucial to understand for becoming a great back-end engineer. You can only properly understand Node.js and unlock its full power if you understand these other computer science topics. So that's why we will also learn these other vital topics so that you can truly master Node.js and take your back-end engineering skills to a whole new level.\nWe will also use all these vital concepts that we'll learn in practice by building various exciting projects just using Node.js.\nThis is an intense course for people who want to get to the top of the field and get to a level of driving innovation and making an impact within the industry instead of just scratching the surface and following a few software trends and tools.\nEach section of the course is like its own mini-course, and by completing each section, you'll learn some essential Node.js, computer science and back-end engineering concepts that will help you not just if you want to use Node.js but throughout your whole career as a software engineer. These things will stay with you for years and decades to come.\n\n\nLet's do a quick walkthrough about what you will accomplish after completing some of the sections:\nUnderstanding Buffers: Here, we will deeply understand buffers and how to work directly with binary data, which is essential for all the other sections.\nUnderstanding File System: As a back-end developer, you'll work with files a lot, be it saving some data to disk, handling file uploads and many other examples, so it's essential to have a good understanding of them, which you'll gain after completing this section. We'll also learn how Node.js deals with files and master the \"fs\" module.\nUnderstanding Streams: In this section, we're going to master Streams, which will allow us to develop highly-performant apps capable of handling terabytes of data with ease while having great memory usage. We'll build many mini-projects throughout the section, including an encryption-decryption app from scratch that could encrypt terabytes of data by directly modifying the binary data. This section lays the foundation for future sections where we'll utilize Streams heavily to create powerful and efficient network applications.\nUnderstanding Networking: Node.js was primarily designed to create network applications, so it's of utmost importance that we gain a decent understanding of networking, which we will do after completing this section. Here's a list of items we'll learn in this section:\nWhat exactly a network is\nHow the internet works\nMac Addresses\nIPV4 & IPv6 Addresses\nTCP\nUDP\nDNS\nFundamentals of deployment\nWe'll build 2 low-level apps using only Node.js, a chat and a file uploader app directly on top of TCP! And then, we'll deploy them to a Linux server in the most basic way without using unnecessary tools.\nWe'll see exactly what happens in our network card, every single 0s and 1s exchanged for a particular thing using Wireshark, and gain a much better understanding of networking and how most of the well-known protocols like HTTP, FTP, Email protocols, SSH, DNS and many others work. This section will broaden your horizons, and you'll realize that there are far more things that you can do with Node.js than just creating web servers.\nUnderstanding HTTP: In this section, we'll utilize and combine all that we've learned from previous sections and finally deeply understand HTTP once and for all! We won't be learning how to use Express; instead, we will build something similar ourselves!\nWe'll start by understanding the most important HTTP concepts, such as connection types, client-server model, messages, requests, responses, HTTP Methods, status codes, mime types, necessary headers and so much more. And then emulate an HTTP protocol directly on top of TCP using the net module and see precisely every single 0s and 1s that get exchanged for an HTTP request and response interaction!\nOnce we understand the fundamentals of HTTP and the \"http\" module, we'll take things to the next level and start building our framework. And then, using our framework, we'll make a fully functional web application.\nThis section will take your web development skills to the next level. You'll have a much better understanding of how all these popular NPM packages, like Express, body-parser, Multer, cors, etc., that are built on top of the \"http\" module work. Well, you'll learn how to make them from scratch, just using them will not be that much of a problem!\nUpdate February 2024 - New Module Is Out! Understanding Unix:\nWith over 15 hours of comprehensive new content, get ready to learn how you can harness the power of multiple technologies and programming languages together with Node.js to create extraordinarily powerful applications!\nUnix, one of the most influential inventions ever in the software industry, is crucial for software engineers to understand. In this module, we'll delve deep into some of the key concepts such as Bash, Shells, IPC, Data Streams, Process Management, Clustering, even some C and much more.\nWe will also understand these Node.js modules:\nChild Processes\nCluster\nProcess\nPath\nConsole\nOS\nAll these Unix concepts that you'll learn in this section instantly apply to many other programming languages. You'll gain a foundation that you can keep building on to create much higher-quality applications than ever before.\nAt the end of the section, we'll develop a video editing web application with Node.js without using other NPM packages. And this is just the beginning! You'll be able to do much more than this once you're done with the section and see many new possibilities that you never thought about before.\nUpdate May 2024 - New Module Is Out! Understanding Compression:\nIn this section, we will explore the fascinating world of compression. Understanding compression is crucial for reducing the size of your data, and one important use case is to enhance the speed of your network applications. We'll dive into the Node.js Zlib module and see how it is possible to reduce the number of bits needed to store and transfer your data without losing any information!\nUpdate July 2024 - New Module Is Out! Understanding Multi-Threading:\nGet ready for the most advanced section of the course, where we're going to utilize the full power of Node.js to see how extreme we can get.\nWe'll learn what exactly threads are and how to utilize them to achieve performance boosts up to many times, depending on how many CPU cores we have. We'll learn when we should use multi-threading and when we shouldn't. We'll learn how to set up communication channels between our threads, both with message passing and shared memory. We'll explore the Node.js thread pool and even develop one ourselves from scratch. We'll see how multi-threading differs in Node.js from some of the other languages. We'll cover synchronization, race conditions, deadlocks, semaphores, mutual exclusion and more.\nYou'll learn how to keep the event loop light and not end up doing operations that will mysteriously block your main thread and cause your app to be way slower.\nThis section will take your Node.js skills to the next level by teaching you how to run things in parallel, handle multiple event loops, and understand the complications that arise with that.\nUpdate March & August 2025 - New Module Is Out! Understanding Cryptography:\nIn this section you’ll learn about one of the most fascinating topics in computer science, without which the digital world and the internet would be in absolute chaos, and almost anyone could access everything you have online or stored digitally offline.\nYou’ll learn about some of the same cutting-edge cryptographic tools that governments and top companies rely on to protect their top-secret data and users online. You'll learn about AES, RSA, Diffie-Hellman, Elliptic-Curve Cryptography, HTTPS, TLS, Digital Signatures, Hashing algorithms, and more!\nThis section will give you a strong foundation to start your journey of learning about cybersecurity. Learning cryptography is extremely important in today’s world, not only to be able to create secure software and protect your business and users, but also to help protect yourself in the digital world.\nJump right in, and let’s explore the principles and techniques that are protecting our privacy, freedom of speech, and security in today’s massive digital world.\n\n\nSign up today, and let's master Node.js and take your back-end engineering skills to a whole new level!",
      "target_audience": [
        "Developers who are tired of jumping from one framework to another, tired of learning many different useless patterns, who want to step up their skills and get to an innovative point",
        "Self-taught software developers who haven't focused on computer science concepts",
        "NodeJS developers who still feel like they don't understand NodeJS even after using it for years",
        "Back-end developers aspiring to take things to the next level and lead change in the industry instead of following trends",
        "Developers who want to understand things at a much deeper level",
        "Computer science students eager to apply their academic knowledge in real-world scenarios",
        "Beginner and intermediate developers who want to learn how to make more informed and effective decisions in their learning journey for years ahead"
      ]
    },
    {
      "title": "gRPC [Node.js] MasterClass: Build Modern API & Microservices",
      "url": "https://www.udemy.com/course/grpc-nodejs/",
      "bio": "Better than REST API! Build a JavaScript HTTP/2 API for a NodeJS micro service with gRPC, Protocol Buffers (protobuf)",
      "objectives": [
        "Learn the gRPC theory to understand how gRPC works",
        "Compare gRPC and REST API paradigm",
        "Write your gRPC service definition in .proto files",
        "Generate Server & Client Code in NodeJS using the protoc gRPC Plugin",
        "Implement Unary, Server Streaming, Client Streaming & Bi-Directional Streaming API",
        "Practice your learning with Exercises & Solutions",
        "Implement advanced concepts such as Error Handling, Deadlines & SSL Security",
        "Implement a full CRUD API on top of MongoDB",
        "Get pointers to expand your learning journey and get inspired by real world gRPC services"
      ],
      "course_content": {
        "gRPC Course Overview": [
          "gRPC Introduction",
          "Course Structure",
          "About your instructor",
          "Important Message",
          "Prerequisites"
        ],
        "Code Download": [
          "Code Download"
        ],
        "[Theory] gRPC Internals Deep Dive": [
          "Why this section?",
          "Protocol Buffers & Language Interoperability",
          "HTTP/2",
          "4 Types of gRPC APIs",
          "Scalability in gRPC",
          "Security in gRPC (SSL)",
          "gRPC vs REST",
          "Section Summary - why use gRPC",
          "Quiz on gRPC"
        ],
        "[Hands-On] gRPC Project Overview & Setup": [
          "Install Node.js and VS Code",
          "NPM Init",
          "NPM Scripts",
          "Server Setup - Boilerplate Code",
          "Client Setup - Boilerplate Code"
        ],
        "[Hands-On] gRPC Unary": [
          "Greet API Definition",
          "Unary API Server Implementation",
          "Unary API Client Implementation",
          "[Exercise] Sum API",
          "[Solution] Sum API"
        ],
        "[Hands-On] gRPC Server Streaming": [
          "GreetManyTimes API Definition",
          "Server Streaming API Server Implementation",
          "Server Streaming API Client Implementation",
          "[Exercise] Primes API",
          "[Solution] Primes API"
        ],
        "[Hands-On] gRPC Client Streaming": [
          "LongGreet API Definition",
          "Client Streaming API Server Implementation",
          "Client Streaming API Client Implementation",
          "[Exercise] Avg API",
          "[Solution] Avg API"
        ],
        "[Hands-On] gRPC Bi-Directional Streaming": [
          "GreetEveryone API Definition",
          "Bi-Directional Streaming API Server Implementation",
          "Bi-Directional Streaming API Client Implementation",
          "[Exercise] Max API",
          "[Solution] Max API"
        ],
        "[Hands-On] gRPC Advanced Features Deep Dive": [
          "[Hands-On] Error Handling",
          "[Hands-On] Deadlines",
          "[Hands-On] SSL Security"
        ],
        "[Hands-On] CRUD API with MongoDB": [
          "Install Docker",
          "Boilerplate",
          "MongoDB Setup",
          "Blog Proto File",
          "CreateBlog Server",
          "CreateBlog Client",
          "ReadBlog Server",
          "ReadBlog Client",
          "UpdateBlog Server",
          "UpdateBlog Client",
          "ListBlog Server",
          "ListBlog Client",
          "DeleteBlog Server",
          "DeleteBlog Client"
        ]
      },
      "requirements": [
        "Good Understanding of Javascript & NodeJS",
        "Good Understanding of Protocol Buffers"
      ],
      "description": "gRPC is a new and modern framework for building scalable, modern and fast API. It is leveraged by many top tech companies such as Google, Square and Netflix and enables programmers to write microservices in any language they want while keeping the ability to easily create communications between these services. It relies on Protocol Buffers for the transport mechanism and Service Definition language.\nIn this course, we are going to explore in-depth, with hands-on lectures, all the aspects to get started with gRPC.\nThis course is hands-on and you will implement two services: Greet and a Calculator Service\nIn just a few hours, you will know everything you need to know to write your .proto files, generate code in your Favourite Programming, and implement your services, servers, and client in NodeJS. There will be plenty of hands-on lectures and exercises for you to practice your newly acquired skills.\n\n\nIt's time to say goodbye to slow and clunky REST API, and opt-in for a better API framework.\n\n\ngRPC Node.JS Master Class is the best way to get a great overview of all the possibilities offered by gRPC with your favorite language\n> Learn the gRPC theory to understand how gRPC works\n> Compare gRPC and REST API paradigm\n> Write your gRPC service definition in .proto files\n> Generate Server and Client Code in JavaScript\n> Implement Unary, Server Streaming, Client Streaming and Bi-Directional Streaming API\n> Practice your learning with Exercises and Solutions\n> Implement advanced concepts such as Error Handling, Deadlines and SSL Security\n> Implement a full CRUD API on top of MongoDB\n> Get pointers to expand your learning journey and get inspired by real-world gRPC services\nNote: This course expects you have some preliminary knowledge about Protocol Buffers and NodeJS.\n\n\nSection outline:\ngRPC Course Overview: Get an understand of the course objectives, how the course is structured, download the course code and get ready!\n[Theory] gRPC Internals Deep Dive: Learn how gRPC works behind the scenes. Learn about HTTP/2, Protocol Buffers efficiencies, and the differences of gRPC and REST.\n[Hands-On] gRPC Project Overview & Setup: Setup your project using NPM and learn how to trigger code generation\n[Hands-On] gRPC Unary: API description and implementation\n[Hands-On] gRPC Server Streaming: API description and implementation\n[Hands-On] gRPC Client Streaming: API description and implementation\n[Hands-On] gRPC Bi-Directional Streaming: API description and implementation\n[Hands-On] gRPC Advanced Features Deep Dive: Advanced features such as Error Handling, Deadlines, SSL Security.\nNext Steps: Some useful real-world links and where to take your learning from here\n\n\nInstructor\nMy name is Clément Jean, and I'll be your instructor in this course. I teach about Protocol Buffers and gRPC with my focus always on helping my students improve their professional proficiencies. I am also the author of some of the most highly-rated and best-selling courses.\nWith development being a widely accepted and pursued career, I've decided it's time for students to properly learn about gRPC. So, let’s kick start the course! You are in good hands!\n\n\nThis Course Also Comes With:\nLifetime Access to All Future Updates\nA responsive instructor in the Q&A Section\nLinks to interesting articles, and lots of good code to base your next template onto\nUdemy Certificate of Completion Ready for Download\nA 30 Day \"No Questions Asked\" Money Back Guarantee!\nI hope to see you inside the course!",
      "target_audience": [
        "Developers who want to understand how to write gRPC Services and Clients in NodeJS",
        "Architects who want to understand how gRPC works and the concepts behind the different types of API"
      ]
    },
    {
      "title": "Apache Camel with Springboot Masterclass",
      "url": "https://www.udemy.com/course/apache-camel-with-springboot-masterclass/",
      "bio": "Learn Apache Camel using Spring boot",
      "objectives": [
        "Learn the basics of Apache Camel",
        "Use Apache Camel to build and test integrations by mocking endpoints",
        "Persist Data by using Apache Camel JPA with Hibernate",
        "Learn to use multiple Camel components for different integrations",
        "Learn how Camel works internally, what are routes, endpoints, exchanges etc",
        "Exception Handling in Apache Camel",
        "Camel Components covered - Timer, File, REST, JPA, ActiveMQ etc",
        "Camel Data Formats covered - CSV, JSON",
        "Camel Languages - Bean, File, Simple, Headers, Tokenize",
        "Camel Spring Junit 5",
        "EIP - Messages, router, dynamic router, endpoints, converter, pub-sub, splitter, multicast, choice, mapper, Log, wireTap"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Lecture 2: Course Coverage",
          "Use-Case Overview",
          "Git Repository"
        ],
        "Simple Apache Camel Route and JUnit": [
          "Camel Basics and Springboot boilerplate",
          "Simple Timer Route",
          "Simple Time Route Junit"
        ],
        "Legacy File Transfer Route": [
          "Simple File Poller",
          "Simple File Poller JUnits - Mocking to endpoints",
          "Simple File Poller JUnits(contd.) - Mocking From endpoint"
        ],
        "Camel Patterns and Components": [
          "Introduction to Inline Processors",
          "Using the Splitter EIP",
          "Convert CSV data to POJO using BeanIO Mapping",
          "Externalizing Processors to Java Classes",
          "Section recap - File Poller Legacy Use Case"
        ],
        "Replace Source System Integration with REST endpoint and Persistence": [
          "Solution to Section 4 exercise",
          "System Setup - Postman and MySQL installation",
          "Build simple REST endpoint using Apache Camel",
          "Insert Data Records to MySQL DB using JPA and Hibernate",
          "Batch Route to read data records from DB and writing to File using Named Query",
          "Named Query (contd)",
          "Deleting records from DB using Native Parameterized Query and Dynamic Routing"
        ],
        "Replace destination system integration with Messaging Bus": [
          "Active MQ Installation and Setup",
          "Publishing to ActiveMQ",
          "Subscribing to ActiveMQ messages",
          "Use Case Recap - Rest Endpoint to Active MQ Pub-Sub"
        ],
        "Understanding the Camel Toolkit and Using camel in an enterprise": [
          "Managing Camel Routes and reusing routes",
          "Understanding flow of Camel Exchange - using direct vs seda and wireTap",
          "Tracing Apache Camel",
          "Exception Handling and graceful error handling",
          "Overriding default REST response; managing rest contracts",
          "Using Headers, choice, when using Simple and Predicates"
        ],
        "(Optional) Bonus: Browsing Apache Camel Website and using DrawIO": [
          "Understanding and using Apache Camel Website",
          "Setting up DrawIO and using for Camel Integrations"
        ],
        "Course Closure": [
          "Thank you"
        ]
      },
      "requirements": [
        "This course is mainly intended for programmers who are well versed in using Core Java, Spring boot and understanding basic principles of REST, JPA, Hibernate, Messaging, Junits and Exception Handling"
      ],
      "description": "Apache camel is genuinely an excellent technology within the integration domain, and by the end of this course, I genuinely believe you will be amazed at everything Apache Camel has to offer\n\n\nApache Camel is an open-source enterprise integration patterns platform built on the book of the same name by Gregor Hohpe and Bobby Woolf.\nIt has been around for more than a decade now, with active development still in the works.\n\n\nThis course is by no means attempting to provide a full-scope coverage of what Apache Camel has to offer\nBut we cover a lot of ground here. By the end of this course, you would have looked at all significant aspects of Enterprise Application development like design, legacy-system migration, exception handling, logging, database management, etc.\n\n\nThis course is designed as a hands-on exercise where the expectation is for you to build along to understand property-based behaviour changes with Camel better.\n\n\nWe will be starting by building a legacy file-based data transfer application and then migrating this to a REST-based API to collect data. Distribution of this data would then be done using messaging buses like ActiveMQ.\n\n\nThe course is structured so that almost all lectures start with theoretical concepts followed by hands-on development.\nA couple of mid-section exercises will firm your understanding of the concepts.",
      "target_audience": [
        "For developers working in the Integration Domain",
        "For developers and teams interested in migrating legacy applications to modern stack",
        "For developers and architects to understand the basics of Apache Camel"
      ]
    },
    {
      "title": "Build A Photoshop Like App With TKinter and Python GUI Apps",
      "url": "https://www.udemy.com/course/build-a-paint-program-with-tkinter-and-python/",
      "bio": "Build Graphical User Interface Apps with Python and TKinter The Fast and Easy Way!",
      "objectives": [
        "Intermediate TKinter",
        "How to Build A Paint App With TKinter and Python",
        "Download and Install Python and Tkinter",
        "Create Executable .exe Apps"
      ],
      "course_content": {},
      "requirements": [
        "No special tools are necessary to take this course",
        "A Basic Understanding of Python and TKinter Is Helpful"
      ],
      "description": "In this course I'll teach you how  to make graphical user interfaces for Python using TKinter.  You'll be surprised just how quickly you can create some pretty cool looking apps!\nI'll show you the ins and outs of tKinter, and then I'll show you how to package your app as an .exe file that you can share with others!\nWe'll be building out a Paint/Drawing program throughout the course!  You'll be able to draw on a canvas, choose from three different brush types, change the color of the brush and canvas, and change the size of the brush.  You'll also be able to save the images.\nIf you've ever wanted to create GUI apps with Python, this is the course for you!\nThe app we build won't be as sophisticated as PhotoShop or any other professional drawing program, that's not the point of the course.  The point is to show you how easy it can be to utilize some drawing features in a graphical user interface app with Python and Tkinter.\nDon't worry, if you don't have any prior experience with Python or Tkinter, you should be perfectly comfortable taking this class.  If you do have some experience with Python, and especially Tkinter, then you should enjoy this course even more!",
      "target_audience": [
        "This course is aimed at beginner to intermediate coders who want to learn the to build Apps With TKinter and Python",
        "Anyone wanting to learn to build apps"
      ]
    },
    {
      "title": "Data Processing with Logstash (and Filebeat)",
      "url": "https://www.udemy.com/course/processing-events-with-logstash/",
      "bio": "Process data with Logstash, which is a key part of the ELK stack (Elasticsearch, Logstash, Kibana) and Elastic Stack.",
      "objectives": [
        "Understand the fundamental concepts of Logstash",
        "Build pipelines that process and manipulates thousands of events",
        "Send data to Logstash from numerous sources and to several destinations",
        "Build a fully functional pipeline that handles Apache web server logs",
        "Process Filebeat events with Logstash"
      ],
      "course_content": {
        "Getting Started": [
          "Introduction to the course",
          "Introduction to Logstash",
          "Installing Logstash on Mac/Linux",
          "Installing Logstash on Windows"
        ],
        "Basics of Logstash": [
          "Processing our first event",
          "Handling JSON input",
          "Outputting events to file",
          "Working with HTTP input",
          "Filtering events",
          "Common filter options",
          "Understanding the Logstash execution model",
          "Section wrap up"
        ],
        "Project Apache": [
          "Introduction to this section",
          "Automatic config reload & file input",
          "Parsing requests with Grok",
          "Finishing the Grok pattern",
          "Accessing field values",
          "Formatting dates",
          "Setting the time of the event",
          "Introduction to conditional statements",
          "Working with conditional statements",
          "Geographical data enrichment",
          "Parsing user agents",
          "Finishing up the pipeline",
          "Sending processed events to Elasticsearch",
          "Handling multiline events",
          "Handling multiline events - the easy way",
          "Parsing stack traces with Grok",
          "Working with @metadata",
          "Running multiple pipelines"
        ],
        "Collecting Logs with Filebeat": [
          "Introduction to Beats",
          "What we will build",
          "Installing Filebeat",
          "Configuring Filebeat to use Logstash",
          "Enabling the apache module",
          "Preparing a simple Logstash pipeline",
          "Starting up Filebeat and processing logs",
          "Adding the Elasticsearch index template",
          "Adding Kibana dashboards",
          "Finishing up the pipeline",
          "How Filebeat works",
          "Clearing the registry",
          "Processing more access logs",
          "Manual input configuration",
          "Evaluation of modules",
          "Tagging events",
          "Approaches for handling multiple log types",
          "Processing Apache error logs",
          "Handling multiline logs - approach #1",
          "More multiline options",
          "Handling multiline logs - approach #2",
          "Wrap up"
        ],
        "Conclusion": [
          "You have reached the end!"
        ]
      },
      "requirements": [
        "Familiarity with basic terminal/command prompt usage is a plus"
      ],
      "description": "Want to learn how to process events with Logstash? Then you have come to the right place; this course is by far the most comprehensive course on Logstash here at Udemy! This course specifically covers Logstash, meaning than we can go into much more detail than if this course covered the entire Elastic Stack. So if you want to learn Logstash specifically, then this course is for you!\nThis course assumes no prior knowledge of or experience with Logstash. We start from the very basics and gradually transition into more advanced topics. The course is designed so that you can follow along the whole time step by step, and you can find all of the configuration files within a GitHub repository. The course covers topics such as handling Apache web server logs (both access and error logs), data enrichment, sending data to Elasticsearch, visualizing data with Kibana, along with covering a number of popular use cases that you are likely to come across. Upon completing this course, you will know all of the most important aspects of Logstash, and will be able to build complex pipeline configurations and process many different kinds of events and data.\nWhat is Logstash?\nIn case you don't know what Logstash is all about, it is an event processing engine developed by the company behind Elasticsearch, Kibana, and more. Logstash is often used as a key part of the ELK stack or Elastic Stack, so it offers a strong synergy with these technologies. You can use Logstash for processing many different kinds of events, and an event can be many things. You can process access or error logs from a web server, or you can send events to Logstash from an e-commerce application, such as when an order was received or a payment was processed. You can ingest data from files (flat files, JSON, XML, CSV, etc.), receive data over HTTP or TCP, retrieve data from databases, and more. Logstash then enables you to process and manipulate the events before sending them to a destination of your choice, such as Elasticsearch, OpenSearch, e-mail, or Slack.\nWhy do we need Logstash?\nBecause by sending events to Logstash, you decouple things. You effectively move event processing out of the web application and into Logstash, representing the entire data pipeline, or perhaps just a part of it. This means that if you need to change how events are processed, you don’t need to deploy a new version of a web application, for instance. The event processing and its configuration is centralized within Logstash instead of every place you trigger events. This means that all the web application needs to do, is to send an event to Logstash; it doesn’t need to know anything about what happens to the event afterwards and where it ends up. This improves your architecture and lets Logstash do what it does best; process events.\nLet's get started!\nI hope that you are ready to begin learning Logstash. Have a look around the curriculum if you want to check out the course content in more details. I look forward to seeing you inside the course!",
      "target_audience": [
        "Developers who want to learn Logstash"
      ]
    },
    {
      "title": "Software Architecture: Meta and SOLID Principles in C#",
      "url": "https://www.udemy.com/course/solid-principles/",
      "bio": "Learn how to develop maintainable software systems applying Design Patterns based on Meta and SOLID Principles",
      "objectives": [
        "Determine if a class has too many responsibilities",
        "Apply SRP to make classes more granular",
        "Determine the smell of duplication caused by OCP violation",
        "Apply OCP to remove or prevent duplications",
        "Make client's lives more enjoyable by applying ISP, making interfaces more granular",
        "Determine LSP violations which break client's code",
        "Apply LSP to come up with proper inheritance",
        "Apply DIP to develop plugin architecture",
        "Build your own simple IoC-Container",
        "Build clean API in C#",
        "I'm tired to list all the stuff you'll be able to do after this course )))"
      ],
      "course_content": {
        "Single Responsibility Principle (SRP)": [
          "How to Ask Questions",
          "Download Source Code and Slides",
          "Join .NET Community of Students",
          "Outline",
          "SOLID Intro",
          "SRP Definition. Problem Statement",
          "Demo of the Problem",
          "Refactoring to a Better Design",
          "More Examples of SRP Violations",
          "SRP Related Patterns",
          "Conclusion"
        ],
        "Open/Closed Principle (OCP)": [
          "Outline",
          "OCP Definition. Problem Statement",
          "Demo of the Problem",
          "Refactoring to a Better Design",
          "OCP Related Patterns",
          "Common Smells of OCP Violation",
          "Conclusion"
        ],
        "Liskov Substitution Principle (LSP)": [
          "Outline",
          "LSP Definition. Problem Statement",
          "Contracts",
          "Demo of the Problem",
          "Refactoring to a Better Design",
          "More Examples of LSP Violations",
          "Common Smells of LSP Violation",
          "Conclusion"
        ],
        "Interface Segregation Principle (ISP)": [
          "Outline",
          "ISP Definition. Problem Statement",
          "Demo of the Problem",
          "Refactoring to a Better Design",
          "Demo of the Problem. Example 2",
          "Refactoring to a Better Design. Example 2",
          "Common Smells, Fixes and Related Patterns",
          "Conclusion"
        ],
        "Dependency Inversion Principle (DIP)": [
          "Outline",
          "DIP Definition. Problem Statement",
          "Dependencies",
          "Volatile and Stable Dependencies",
          "IoC and DI Definitions",
          "DIP Violation Demo",
          "Refactoring to a Better Design Applying Dependency Injection (DI)",
          "DI Techniques",
          "Architectural Implications",
          "Pure DI and IoC-Containers",
          "Building a Simple IoC-Container",
          "Demo of a Real-World App Built with an IoC-Container",
          "Common Smells of DIP Violations",
          "Conclusion"
        ],
        "Metaprinciples and SOLID": [
          "Outline",
          "DRY - Don't Repeat Yourself",
          "KISS - Keep it Simple, Stupid",
          "YAGNI - You Ain't Gonna Need It",
          "SoC - Separation of Concerns",
          "CQS - Command Query Separation Principle",
          "Violation of Law of Demeter",
          "Principle of Least Astonishment",
          "Encapsulation and Information Hiding",
          "General Principles of Building APIs",
          "SOLID VS YAGNI",
          "OCP VS YAGNI",
          "SRP and ISP. What's the Difference?",
          "Architecture and Design",
          "Conclusion",
          "Final Quiz",
          "BONUS Lecture"
        ]
      },
      "requirements": [
        "Solid C# Background",
        "At least half of a year of experience in a real-world project"
      ],
      "description": "SOLID is an acronym which stands for SRP, OCP, LSP, ISP and DIP. These five acronyms in their turn stand for:\nSingle Responsibility Principle\nOpen/Closed Principle\nLiskov Substitution Principle\nInterface Segregation Principle\nDependency Inversion Principle\nIn this course, you’ll learn how to apply meta and SOLID principles so that your application will live a long healthy life. It means you are going to learn how to write code of the high quality: readable, understandable and reliable.\nImprove your knowledge in object-oriented programming\nUnderstand the meta principles on which all the other development principles are based\nUnderstand the symptoms of code defects\nLearn the foundations of SOLID principles\nLearn how to detect the violations of SOLID principles and how to fix the problems\nLearn how meta principles and SOLID principles are related to each other and how to find the balance between them\nFoundations of writing object-oriented code\nDespite the fact that C# is a very rich on features language, it's very common to see poorly designed and implemented applications in a real world. Language by itself does not guarantee that the architecture of an application will be great. In order to design and build maintainable software, we need to understand the principles of software development. This video course is exactly about how to achieve clean and maintainable software.\nYou probably have already heard the following well-known statement: most code sucks. Well, this course is all about how to produce code which doesn't suck.\nOwning skills of producing a well-designed and well-implemented types is the prerequisite for the other developers to treat you as a decent professional.\nContent and Overview\nThis course is aimed at middle and senior developers. Solid experience in C# is required.\nThere are plenty of code examples throughout this course so that you will learn both theoretical and practical material.\nStarting with SOLID principles we will go further to the meta-principles. Going through the SOLID principles, you’ll also learn about the related patterns. Then we will get to the problem of contradictions between different principles. You’ll learn about the relationships between SOLID principles and meta principles.\nIn general, you’ll learn in this course:\nSRP\nOCP\nLSP\nISP\nDIP\nThese are the SOLID principles. You’ll learn the background problems that can be solved by particular principle, you’ll see the demonstrations in code, you’ll learn the related patterns to every principle.\nLearning DIP you’ll in addition learn what is Dependency Injection, Inversion of Control, IoC-Containers and what are the architectural implications of DI.\nHere are other topics you’ll learn in the course:\nDRY – don’t repeat yourself\nKISS – keep it simple stupid\nYAGNI – You Ain’t Gonna Need It\nSoC – separation of concerns\nCQS – command query separation\nLaw of Demeter\nPrinciple of Least Astonishment\nInformation Hiding and Encapsulation\nAPI Development Principles\nContradiction between SOLID and YAGNI\nContradiction between OCP and YAGNI\nWhat is Architecture and Design\nTeaching Approach\nNo fluff, no ranting, no beating the air. I respect your time. The course material is succinct, yet comprehensive. All important concepts are covered. Particularly important topics are covered in-depth.\nTake this course, and you will be satisfied!\n------------------------------------------------------------\nKeywords related to the course:\nSoftware Architecture\nSOLID Principles Tutorial C#\nSOLID Tutorial C#\nSoftware Design\nSOLID Principles\nSRP, OCP, LSP, ISP, DIP",
      "target_audience": [
        "Juniors with a solid C# background",
        "Middle developers who want learn or enhance their knowledge about SOLID principles and Architecture",
        "Seniors who want to have a good reminder of what they already know"
      ]
    },
    {
      "title": "Design Patterns in Python",
      "url": "https://www.udemy.com/course/design-patterns-in-python/",
      "bio": "Implement and Learn All 23 GoF (Gang of Four) Design Patterns In Python.",
      "objectives": [
        "Design Patterns in Python",
        "Learn All 23 GoF Design Patterns",
        "Creational Patterns : Factory, Abstract Factory, Builder, Prototype, Singleton",
        "Structural Patterns : Decorator, Adapter, Facade, Bridge, Composite, Flyweight, Proxy",
        "Behavioral Patterns : Command, Chain of Responsibility, Observer, Interpreter, Iterator, Mediator, Memento, State, Strategy, Template, Visitor",
        "Learn Many Python Concepts : ABCMeta, Exception Handling, Lists, Dictionaries, Tuples, Sets, id, Dunder Attributes and Methods, Time, Decimal, *Args and more.",
        "Learn Quality Software Design Standards using Pep8, Pylint and MyPy",
        "UML Diagramming : Inherits, Implements, Composition, Aggregates, Association",
        "Learn Each Pattern from Conceptual and Use Case Points of View",
        "Develop Your Software Engineering Vocabulary"
      ],
      "course_content": {
        "Introduction": [
          "Environment Setup",
          "Coding Conventions",
          "UML Diagrams"
        ],
        "Creational Design Patterns": [
          "Factory",
          "Factory Pattern Use Case",
          "ABCMeta",
          "Abstract Factory",
          "Abstract Factory Use Case",
          "Exception Handling",
          "Builder",
          "Builder Pattern Use Case",
          "Python List",
          "Prototype",
          "Prototype Pattern Use Case",
          "Python id() Function",
          "Singleton",
          "Singleton Use Case",
          "Python Dictionary"
        ],
        "Structural Design Patterns": [
          "Decorator",
          "Decorator Use Case",
          "__str__ Dunder Method",
          "getattr() Method",
          "Adapter",
          "Adapter Use Case",
          "Python isinstance() Function",
          "Python time Module",
          "Facade",
          "Facade Use Case",
          "Python Decimal",
          "Python Type Hints",
          "Bridge Pattern",
          "Bridge Use Case",
          "Python Tuple",
          "Python *args",
          "Composite Pattern",
          "Composite Use Case",
          "Conditional Expressions (Ternary Operators)",
          "Flyweight Pattern",
          "Flyweight Use Case",
          "Python String Justification",
          "Proxy Pattern",
          "Proxy Use Case",
          "Python __class__ Attribute",
          "Avoiding Circular Imports"
        ],
        "Behavioural Design Patterns": [
          "Command",
          "Command Use Case",
          "Single Leading Underscore",
          "Chain of Responsibility Pattern",
          "Chain of Responsibility Use Case",
          "Python Floor Division",
          "Accepting User Input",
          "Observer Pattern",
          "Observer Use Case",
          "Python Set",
          "Interpreter Pattern",
          "Interpreter Use Case",
          "String Slicing",
          "Python __repr__ Dunder Method",
          "Iterator Pattern",
          "Iterator Use Case",
          "Python iter() Function",
          "Mediator Pattern",
          "Mediator Use Case",
          "Memento Pattern",
          "Memento Use Case",
          "Python Getters/Setters",
          "State Pattern",
          "State Use Case",
          "Dunder __call__ Attribute",
          "Strategy Pattern",
          "Strategy Use Case",
          "Template Method Pattern",
          "Template Method Use Case",
          "Visitor Pattern",
          "Visitor Use Case",
          "Python hasattr() Method",
          "Python expandtabs() Method"
        ],
        "Summary": [
          "Summary"
        ]
      },
      "requirements": [
        "An OS such as Windows 11, Mac OSX or Linux",
        "An IDE such as VSCode, PyCharm Community, Vim, Notepad or Just the command line.",
        "A Desire to Understand the 23 Gof Design Patterns"
      ],
      "description": "Learn All of the 23 GoF (Gang of Four) Design Patterns and Implemented them in Python.\nDesign Patterns are descriptions or templates that can be repeatedly applied to commonly recurring problems during in software design.\nA familiarity of Design Patterns is very useful when planning, discussing, managing and documenting your applications from now and into the future.\nAlso, throughout the course, as each design pattern is discussed and demonstrated using example code, I introduce new Python coding concepts along with each new design pattern. So that as you progress through the course and try out the examples, you will also get experience and familiarity with some of the finer details of the Python programming language.\nIn this course, you will learn about these 23 Design Patterns,\nCreational\nFactory\nAbstract Factory\nBuilder\nPrototype\nSingleton\nStructural\nDecorator\nAdapter\nFacade\nBridge\nComposite\nFlyweight\nProxy\nBehavioral\nCommand\nChain of Responsibility\nObserver Pattern\nInterpreter\nIterator\nMediator\nMemento\nState\nStrategy\nTemplate\nVisitor\nIn the list of patterns above, there are Creational, Structural and Behavioral patterns.\nCreational : Abstracts the instantiation process so that there is a logical separation between how objects are composed and finally represented.\nStructural : Focuses more on how classes and objects are composed using the different structural techniques, and to form structures with more or altered flexibility.\nBehavioral : Are concerned with the inner algorithms, process flow, the assignment of responsibilities and the intercommunication between objects.\nDesign patterns will give you a useful and common vocabulary for when designing, documenting, analyzing, restructuring new and existing software development projects from now and into the future.\nI look forward to having you take part in my course.\nSean Bradley",
      "target_audience": [
        "Python Developers",
        "Software Architects",
        "Software Engineers"
      ]
    },
    {
      "title": "Introduction to Web Development [HTML, CSS, JAVASCRIPT]",
      "url": "https://www.udemy.com/course/introduction-to-web-development-h/",
      "bio": "Learn the basics HTML,CSS and JavaScript to create a simple web page within 5.5 hours.",
      "objectives": [
        "HTML (Lecture and code demonstration)",
        "CSS (Lecture and code demonstration)",
        "JavaScript (Lecture and code demonstration)",
        "Integrating HTML,CSS and JavaScript to make a simple website"
      ],
      "course_content": {
        "HTML": [
          "Introduction to HTML (HTML Basics) Part 1",
          "Introduction to HTML (HTML Basics) Part 2",
          "Introduction to HTML (HTML Basics) Part 3",
          "Introduction to HTML (HTML Basics) Part 4",
          "HTML Tables - (HTML Basics) Part 5"
        ],
        "Cascading Style Sheets [ CSS ]": [
          "CSS - Introduction",
          "CSS - Video 2",
          "CSS - Video 3",
          "CSS- Selectors Pt.1",
          "CSS - Selectors Pt.2",
          "CSS - Colours",
          "CSS - Backgroud Colour",
          "CSS - Padding",
          "CSS - Rounded Corners",
          "CSS- bg & animations"
        ],
        "JavaScript": [
          "Javascript - Introduction",
          "JavaScript - Setup",
          "JavaScript - Live IDE",
          "JavaScript - Arithmetic Operators",
          "JavaScript - Strings and JavaScript Methods",
          "JavaScript - Variables",
          "JavaScript - Operators"
        ],
        "Web Development Sample Project [Step by step guidance]": [
          "Starting the project",
          "Adding the CSS Pt.1",
          "Adding the CSS Pt.2",
          "Adding the CSS Pt.3",
          "Adding the CSS Pt.4",
          "Adding the JS Pt.1",
          "Adding the JS Pt.2",
          "Connection JS with HTML",
          "Final touches to the project"
        ]
      },
      "requirements": [
        "Laptop",
        "Stable Internet Connection"
      ],
      "description": "After analyzing the current market of Profitable Skills we were able to conclude that web development is a profitable that is easy to learn and will benefit the majority of students. Hence, we came up with this course to benefit the students who are curious about web development and want to improve themselves by learning more profitable skills. This course will provide the basic knowledge & understanding  of HTML, CSS, JavaScript. Furthermore for the benefit of the students we have included a simple web development project where you can apply the HTML,CSS and JavaScript knowledge that you learnt to create a simple rock paper scissors game. This course is for anyone who are curious about web development but have no idea about it. Also note that this course is for beginners.\nYou will learn following under each topic -\n\n\nHTML\n• HTML Headings\n• HTML paragraph tag\n• HTML Line Breaks\n• HTML Text Formatting\n• HTML Links\n• HTML Target attribute\n• HTML Images\n• HTML Tables\n\n\nCSS\n• Introduction to CSS\n• CSS Syntax\n• Internal CSS\n• External CSS Introduction demo\n• Inline CSS Introduction demo\n• Order for multiple style sheets\n• CSS Selectors\n• CSS Class Selectors\n• Colors in CSS\n• Background Colors in CSS\n• Padding in CSS\n• CSS Rounded Corners\n• Using multiple background images with CSS\n• Using Animations with CSS\n\n\nJavaScript\n• Introduction to JavaScript\n• Setting up the environment to run JavaScript\n• Live Server Demo\n• JavaScript integration with HTML\n• Arithmetic Operators\n• Strings in JavaScript\n• JavaScript Methods\n•  JavaScript Built-in objects\n• JavaScript Variables\n\n\nBonus - A final capstone project is available where we demonstrate how you could apply the knowledge gained to create a simple website.",
      "target_audience": [
        "Anyone who wants to learn web development",
        "Anyone who is curious about HTML",
        "Anyone who is curious about CSS",
        "Anyone who is curious about JavaScript"
      ]
    },
    {
      "title": "Apache Airflow using Google Cloud Composer: Introduction",
      "url": "https://www.udemy.com/course/apache-airflow-using-google-cloud-composer-introduction/",
      "bio": "With Google Cloud composer learn Apache Airflow without making any local install. Ensures focus is on Airflow topics.",
      "objectives": [
        "Understand automation of Task workflows through Airflow",
        "Airflow Architecture - On Premise (local install), Cloud, single node, multiple node",
        "How to use connection functionality to connect to different systems to automate data pipelines",
        "What is Google cloud Big query and briefly how it can be used in Dataware housing as well as in Airflow DAG",
        "Master core functionalities such as DAGs, Operators, Tasks through hands on demonstrations",
        "Understand advanced functionalities like XCOM, Branching, Subdags through hands on demonstrations",
        "Get an overview understanding on SLAs, Kubernetes executor functionality in Apache Airflow",
        "The source files of Python DAG programs (9 .py files) used in demonstration are available for download towards practice for students"
      ],
      "course_content": {
        "Course Overview": [
          "Course Overview - Topics of coverage"
        ],
        "Introduction": [
          "Data pipe lines & Uses cases for Apache Airflow",
          "What is Task and why Orchestration needed?",
          "What is Apache Airflow & environment options?"
        ],
        "What is Airflow - Directed Acyclic Graph (DAG) & operators?": [
          "What is Airflow - Directed Acyclic Graph"
        ],
        "Apache Airflow architecture": [
          "Apache Airflow architecture",
          "Apache Airflow - Single Node vs Multinode"
        ],
        "Google Cloud Platform: Cloud composer used as Apache Airflow": [
          "Provisioning Google Composer - Apache Airflow environment - Part 1",
          "Provisoning Google Composer - Apache Airflow environment - Part 2",
          "Navigation - Cloud composer(Apache airflow) Web UI navigation",
          "Quiz time 1"
        ],
        "Understanding Apache Airflow program structure": [
          "Understanding Apache Airflow program structure"
        ],
        "Activity 1 : Create and submit Apache airflow DAG program": [
          "Activity 1 : Create and submit Apache airflow DAG program",
          "Quiz time 2"
        ],
        "Activity 2: Using Template functionality in Apache Airflow program": [
          "Activity 2: Using Templating functionality in Apache Airflow program",
          "Activity 2: Using Templating functionality in Apache Airflow program - Part 2"
        ],
        "Using Variables in Apache Airflow": [
          "What is variable in Apache Airflow and when to use them?",
          "Activity 3: Variables usage in DAG python program"
        ],
        "Activity 4: Calling Bash script in different folder / different machine.": [
          "Activity 4: Calling Bash script in different folder / different machine - Part1",
          "Activity 4: Calling Bash script in different folder / different machine - Part 2"
        ]
      },
      "requirements": [
        "Google Cloud Platform Account OR even Free Trial account - NO Install required",
        "Good understanding on Python code and some exposure to bash shell scripting will help."
      ],
      "description": "Apache Airflow is an open-source  platform to programmatically author, schedule and monitor workflows.\nCloud Composer  is a fully managed workflow orchestration service that empowers you to author, schedule, and monitor pipelines that span across clouds and on-premises data centers. Built on the popular Apache Airflow open source project and operated using the Python programming language, Cloud Composer is free from lock-in and easy to use.\nWith Apache Airflow hosted on cloud ('Google' Cloud composer) and hence,this will assist learner to focus on Apache Airflow product functionality and thereby learn quickly, without any hassles of having Apache Airflow installed locally on a machine.\nCloud Composer pipelines are configured as directed acyclic graphs (DAGs) using Python, making it easy for users of any experience level to author and schedule a workflow. One-click deployment yields instant access to a rich library of connectors and multiple graphical representations of your workflow in action, increasing pipeline reliability by making troubleshooting easy.\nThis course is designed with beginner in mind, that is first time users of cloud composer / Apache airflow. The course is structured in such a way that it has presentation to discuss the concepts initially and then  provides with hands on demonstration to make the understanding better.\nThe python DAG programs used in demonstration source file (9 Python files) are available for download toward further practice by students.\nHappy learning!!!",
      "target_audience": [
        "People interested in Data warehousing, Big data, Data engineering",
        "People interested in Automated tools for task workflow scheduling",
        "Student interested to know about Airflow",
        "Professional to wish to explore as how Apache Airflow can be used in Task scheduling and building Data pipelines"
      ]
    },
    {
      "title": "Fast, Good & Cheap",
      "url": "https://www.udemy.com/course/developing-and-measuring-training-the-agile-way/",
      "bio": "An Agile Approach to Training Development",
      "objectives": [
        "By the end of this course you will be able to successfully implement agile in your training organization",
        "You will learn how to identify and prioritize your business partners learning requirements",
        "You will learn how to decompose large learning solutions into smaller deliverables that can be delivered within two weeks",
        "You will learn how to develop learning solutions using the scrum process",
        "You will learn how to successfully facilitate the various agile events"
      ],
      "course_content": {
        "An Introduction To Agile": [
          "Introduction To Section 1",
          "Before You Begin",
          "Understanding the Importance of Agile",
          "What is Agile",
          "What is The Agile Manifesto?",
          "What Are Some Different Agile Methodologies?",
          "The Agile Ecosystem",
          "What is the Agile Process?",
          "What We Covered In Section 1"
        ],
        "Assessing Your Organization (How to Determine if Your Team is Ready For Agile)": [
          "Introduction to Section 2",
          "Why Assess Readiness?",
          "How To Assess Your Team's Readiness (Part 1)",
          "How To Assess Your Team's Readiness (Part 2)",
          "What We Covered in Section 2"
        ],
        "Using Agile To Develop Fast, Good & Cheap Learning Content": [
          "Introduction to Section 3",
          "How to Identify What Customers Want? (Establishing a Backlog)",
          "How to Determine the Most Important Projects? (Prioritization)",
          "How to Gain a Deeper Understanding?",
          "How to Determine the Size of Your Project",
          "How to Determine What to Work on Right Now?",
          "How to Keep Track of the Work and Hold Individuals Accountable",
          "What do Training Professionals Who Use Age;e Have to Say?",
          "What We Covered in Section 3"
        ],
        "How To Determine if Agile is Working?": [
          "Section 4 Introduction",
          "Thoughts on Training Evaluation",
          "How to Evaluate the Efficiency of Your Training Team?",
          "How to Evaluate the Organizational Impact of Your Programs",
          "What We Covered in Section 4"
        ],
        "Agile Leadership for Trainers": [
          "Introduction to Section 5",
          "What to Consider When Organizing Your Team to Support Agile",
          "What do Learning Leaders Say About Agile?",
          "What We Covered in Section 5"
        ]
      },
      "requirements": [
        "Students interested in this course should have a basic understanding of instructional system design (ISD)"
      ],
      "description": "In this course we’ll teach you how to use some of the same techniques that companies like Apple use to deliver high quality software, to quickly design and deliver high quality learning solutions.\nThe techniques that we’ll cover in this class are not just theoretical. They are based on the real life experiences of training professionals and learning organizations that have made the switch from ISD to Agile.\nThese organizations and individuals were able to reduce the time required to develop and deliver training solutions, achieve world class customer satisfaction scores, and enjoy increased employee engagement scores. More importantly, agile allowed these organizations to align learning outputs with business strategy and gain the trust and admiration of their business stakeholders.\nWe’ve divided this course into 5 sections.\nIn section 1 we provide you with a background of agile so that you can become familiar with its philosophy and terminology\nIn Section 2 we teach you how to assess your organization to determine if your team is ready for agile.\nIn Section 3 we teach you step by step how to design and develop your training programs using agile.\nIn Section 4 we cover how to determine if Agile is working and how to report the results to your business stakeholders, finally\nIn Section 5 we focus on leadership. In this section we’ll teach you how to lead an agile learning team.\nAs a learning development professional who’s spent more years than I’d like to count trying to find ways of demonstrate the value of my teams learning solutions to business stakeholders, I can tell you first hand that Agile is a game changer.\nI’m sure that this course will help you learn new ways to develop fast, good, and cheap learning content.",
      "target_audience": [
        "Training Professionals",
        "Training Managers",
        "Instructional Designers",
        "Human Resource Professionals",
        "Training Executives"
      ]
    },
    {
      "title": "Visual C# and ADO.NET Programming",
      "url": "https://www.udemy.com/course/visual-c-and-adonet-programming/",
      "bio": "Case Study - Payroll System",
      "objectives": [
        "By the end of the course, you should be comfortable developing and deploying basic business applications from Problem domain to Business Solutions using C# and ADO (dot) NET."
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Payroll System Requirement",
          "Installation Guide"
        ],
        "Database Design": [
          "Create Database, Tables and Relationship"
        ],
        "Employee Form Module": [
          "Employee Form Design",
          "Implicit Validation",
          "Explicit Validation",
          "Regular Expression - Part 1",
          "Regular Expression - Part 2",
          "Clear Controls",
          "PreviewForm - Parameter vs Argument - Part 1",
          "PreviewForm - Parameter vs Argument - Part 2",
          "Introduction to ADO.Net",
          "Add Functionality",
          "Update Functionality Part 1",
          "Update Functionality Part 2",
          "Delete Employee Records",
          "Code Review"
        ],
        "Payroll Calculator Module": [
          "Payroll Calculator Form Design Part 1",
          "Payroll Calculator Form Design Part 2",
          "Retrieve Employee - DataReader",
          "Array Vs List Collection",
          "For Loop vs Foreach Loop vs ForEach Method",
          "Payroll Computation - Part 1",
          "Payroll Computation - Part 2",
          "Saving PayRecords - using Parameterised Command",
          "Pass-By-Value vs Pass-By-Reference",
          "Out vs Ref Keywords",
          "Time to Decimal Conversion",
          "Linked Label and Digital Timer",
          "String vs StringBuider Class"
        ],
        "Search Functionality": [
          "Search Functionality"
        ],
        "Printing Functionality": [
          "Printing Functionality - Payslip"
        ],
        "AboutBox, MDI and MenuStrip": [
          "AboutBox - Product Information",
          "Multiple Document Interface(MDI) and MenuStrip"
        ],
        "Reporting Facilities": [
          "Reporting facilities - Part 1",
          "Reporting Facilities - Part 2"
        ],
        "Log In and Registration Module - User's Class": [
          "LogIn and RegisterUser Form Design",
          "Registered User's Table",
          "Complex Password Validation",
          "Class, Object and Member Variables",
          "Constructors",
          "Properties & Methods - Class Member"
        ],
        "Using Stored Procedure": [
          "Stored Procedure - spInsertCommand",
          "Stored Procedure - spUpdateCommand",
          "Stored Procedure - spDeleteCommand",
          "Stored Procedure - DataReader",
          "Stored Procedure - spAuthorisedUsers"
        ]
      },
      "requirements": [
        "Little or no programming experience is assume at a beginner level"
      ],
      "description": "This is a 9-hours comprehensive project-based course that covers everything required to develop and deploy a fully-functional, data-driven application from Business Needs, Graphic User Interface Design, Complex User Input Validations, ADO.NET Secure Database Programming, Searching Mechanism, Printing Functionality, Payroll Computation, Reporting Facilities, Multiple Document Interface & MenuStrip, Registration & Log In functionality, System Implementation and Deployment.\nThis is a Beginner's-Level course, and the goal here is to learn some basic C# and ADO.NET programming concepts, using a project-based approach.\nBy the end of the course, you should be comfortable developing and deploying a basic business applications from Problem domain to Business Solutions.",
      "target_audience": [
        "Any one interested in developing lightweight data-driven application development using C# programming language."
      ]
    },
    {
      "title": "Spring Boot and React with Test Driven Development",
      "url": "https://www.udemy.com/course/test-driven-web-application-development-with-spring-react/",
      "bio": "Learn Spring Boot & React by building a complete application with TDD (JUnit, Jest, React Testing Library)",
      "objectives": [
        "Practice Test Driven Development in a complete project from beginning to the end.",
        "How to test your java projects with JUnit.",
        "How to test your javascript projects with Jest.",
        "How to use React Testing Library with React tests. Handling user actions and querying the tree items.",
        "How to mock external dependencies in testing.",
        "Create a fully functional application with Spring Boot.",
        "Learn how to build a RestFul API.",
        "Secure Spring application with Spring Security. Practice method level security.",
        "Practice Spring Data with custom query methods, pagination and specification.",
        "Learn how to run application in different environment profiles with different configurations.",
        "Serve static files.",
        "How to handle exceptions and create default custom error object model in spring application.",
        "JPA Entity relationships, @OneToOne, @OneToMany..",
        "Built in Validation and custom validations. Validating file type.",
        "Supporting internationalization, i18n, and responding user based on their locale when validation errors are occuring.",
        "Scheduled tasks with spring.",
        "Create a fully functional frontend application with React.",
        "Learn all the different component types in React. Class, functional.",
        "Practice lifecycle methods of class components.",
        "Convert class components to functionals and using Hooks.",
        "Create our own hook.",
        "Use React Router for building single page application.",
        "Global state management with Redux.",
        "Create reusable components",
        "Feel how the test driven development is giving confidence when refactoring our application.",
        "You will feel the freedom to apply any implementation you want when you cover your application behavior with tests."
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Technology",
          "Methodology"
        ],
        "Creating Projects": [
          "Backend",
          "Backend Project Creation Warning",
          "Frontend",
          "Frontend Test Dependencies Reminder",
          "Frontend Test Configuration",
          "Project Source Code"
        ],
        "User Signup": [
          "User Signup Page",
          "Post User (Backend)",
          "Warning about H2",
          "Package name warning - Javax to Jakarta",
          "Saving User to Database (Backend)",
          "Response Body (Backend)",
          "Password Hashing (Backend)",
          "User Signup Page (Frontend)",
          "Form Layout (Frontend)",
          "Handling Input Change (Frontend)",
          "Click Handling (Frontend)",
          "Styling (Frontend)",
          "Sending Requests to Backend (Frontend)",
          "Progress Indicator (Frontend)"
        ],
        "Validation": [
          "Validation",
          "User Validation (Backend)",
          "Error Modelling (Backend)",
          "Error Messages Internationalization (Backend)",
          "Custom Constraint (Backend)",
          "Displaying Validation Errors (Frontend)",
          "Form Input Component (Frontend)",
          "Clientside Validation (Frontend)"
        ],
        "Login": [
          "Login",
          "Latest SecurityConfiguration",
          "Login (Backend)",
          "Login Errors (Backend)",
          "Authentication (Backend)",
          "Authenticated User (Backend)",
          "User View Model (Backend)",
          "Login Page (Frontend)",
          "Handling Input Change (Frontend)",
          "Click Handling (Frontend)",
          "Sending Request to Backend (Frontend)",
          "Progress Indicator (Frontend)"
        ],
        "Client Internal Routing": [
          "Client Internal Routing",
          "New Pages (Frontend)",
          "React Router Version Warning",
          "React Router (Frontend)",
          "Login Success Routing (Frontend)",
          "Signup Success Routing (Frontend)",
          "TopBar (Frontend)"
        ],
        "Client State Management": [
          "Client State Management",
          "Redux (Frontend)",
          "Redux Initial Configuration (Frontend)",
          "Connecting to Redux (Frontend)",
          "Dispatching Action (Frontend)",
          "Connecting LoginPage to Redux (Frontend)",
          "Connecting UserSignupPage to Redux (Frontend)",
          "Redux Middleware (Frontend)",
          "Combining Signup And Login Actions (Frontend)",
          "Storing State in LocalStorage (Frontend)",
          "Axios Authorization Configuration (Frontend)"
        ],
        "Listing Users": [
          "Listing Users",
          "Get Users (Backend)",
          "User Modelling JsonView (Backend)",
          "User Modelling Projection (Backend)",
          "User Modelling UserVM (Backend)",
          "Pagination (Backend)",
          "Excluding Logged in User (Backend)",
          "Creating Random Users (Backend)",
          "User List Api (Frontend)",
          "User List (Frontend)",
          "User List Item (Frontend)",
          "User List Page (Frontend)",
          "Load Errors (Frontend)",
          "Navigation (Frontend)"
        ],
        "User Profile": [
          "User Profile",
          "Get User By Name (Backend)",
          "User Get Api (Frontend)",
          "Load User Success (Frontend)",
          "Load User Failure (Frontend)",
          "Navigating From User To My Profile (Frontend)",
          "Profile Card (Frontend)",
          "Profile Image With Default (Frontend)",
          "Profile Loading (Frontend)"
        ],
        "User Update": [
          "User Update",
          "Spring Boot 3 Warning",
          "Security (Backend)",
          "Update Model (Backend)",
          "User Update Api (Frontend)",
          "Edit Button (Frontend)",
          "User Edit Layout (Frontend)",
          "User Interactions (Frontend)",
          "Sending Update Request (Frontend)",
          "Cancelling Update (Frontend)",
          "Progress Indicator (Frontend)"
        ]
      },
      "requirements": [
        "Experience with Java or JavaScript required"
      ],
      "description": "This course is purely built on practice. And it's built on three main topic. Spring Boot, React and Test Driven Development.\n\n\nAfter completing this course you'll be able to see the use cases of these frameworks and why they are so popular, and also you'll experience the power of test driven development methodology. We will do refactoring a lot, and nothing will be broken. Because our tests will be confirming the application is behaving as it's supposed to be.\n\n\nWe will be building a real life application. Each code piece we write, will be for our actual application implementation.\n\n\nIn each section we will gradually build our application. We will not jump ahead and add functionality not needed for that moment. We will implement one requirement at a time. Each implementation will bring the next requirement to us. And following this path will help us to feel and understand what are the frameworks doing and how they are easing application development.\n\n\nWe will see various practices about\nhow we can build a restful web service with spring boot with all necessary functionalities like validation, internationalization (i18n), static resource serving, caching, json manipulation\nhow we can handle database operations with spring data\nhow we can secure our application with spring security\nhow we can build a single page application (spa) with react\nwhat is redux and how we can use it\nhow we can use react router\nhow we can replace class components with functional components by using hooks\nand we will see\nhow test driven development (tdd) works.\nhow it's affecting our code quality, reusability\nhow it's giving us the confidence about refactoring our implementation\nbecause of the tests we have for our components, we will easily convert our components from class to function. And we will use hooks and tests will make sure nothing will be broken after that changes.\n\n\nThe course is up to date with the latest Spring Boot version 2.5 and React 17",
      "target_audience": [
        "Developers who are interested in Fullstack Web Application Development with Spring and React",
        "Developer who wants to see Test Driven Development in action"
      ]
    },
    {
      "title": "Collaboration and Crawling W/ Golang - Google's Go Language",
      "url": "https://www.udemy.com/course/golang-tutorial/",
      "bio": "Mastering Go Modules, gRPC, Crawling, and Collaboration with Git",
      "objectives": [
        "Advance your skills with Google's Go (golang) programming language",
        "Learn the fundamentals of gRPC building a chat-server using gRPC and Go",
        "Master all of the nuances of dependency management with Go's modules",
        "Enhance your ability to use git in collaborative environments",
        "Taught by a university professor",
        "From intermediate to advanced concepts",
        "Hands-on exercises with solutions",
        "Over 2.65 Million students taught",
        "Lifetime course access",
        "Learn at your own pace",
        "100% satisfaction guaranteed",
        "Never expires - lifetime access - forever!",
        "This course is tried, tested, and proven",
        "Mobile friendly"
      ],
      "course_content": {
        "Getting started": [
          "Welcome",
          "Course outline"
        ],
        "Git essentials": [
          "Introduction",
          "Understanding ssh encryption",
          "Creating our github repo",
          "Adding a collaborator to github",
          "Cloning a public project"
        ],
        "Git branches in action": [
          "Working with merge conflicts",
          "Creating a branch",
          "Working with branches",
          "Merging branches",
          "Deleting branches",
          "Workflow summary"
        ],
        "Hands-on Exercises - Ninja level 1": [
          "Hands-on exercise #1",
          "Hands-on exercise #2",
          "Exploring git rebase",
          "Hands-on exercise #2 - todd’s solution",
          "Hands-on exercise #3",
          "Hands-on exercise #3 - todd’s solution",
          "Hands-on exercise #4"
        ],
        "Go modules - intro": [
          "Overview",
          "Package management",
          "Reading Documentation",
          "Creating a new module",
          "Adding a dependency",
          "Security assurance with go.sum"
        ],
        "Go modules - deeper dive": [
          "Understanding versioning",
          "Upgrading a minor dependency",
          "Specifying dependency version",
          "Adding a new major dependency",
          "Upgrading a major dependency",
          "Removing unused dependencies"
        ],
        "Go modules - good to know": [
          "Automatic conversion",
          "The module mirror & privacy",
          "Modules and git commit versioning",
          "Releasing major versions in go modules",
          "Git forks and module path replacement",
          "Review commands"
        ],
        "Hands-on Exercises - Ninja level 2": [
          "Hands-on exercise #1",
          "Hands-on exercise #2",
          "Hands-on exercise #3",
          "Hands-on exercise #4",
          "Summary"
        ],
        "Git head": [
          "Git syncing code",
          "Understanding git head",
          "Using git head"
        ],
        "Crawl #1": [
          "Approaching crawling",
          "How to approach a package",
          "Question and answer",
          "Reflections"
        ]
      },
      "requirements": [
        "Prerequisite knowledge recommended for this course: familiarity with Google's Go (golang) programming language, and basic skills with git"
      ],
      "description": "Google's Go Programming Language is one of the fastest growing, highest paying programming languages in the world.\nThere is a reason for Go's popularity: Go was created by geniuses and is the next step in the evolution of programming languages. Knowing how to use Go well will increase your power, and productivity, as a programmer.\nThis course will give you the skills you need to advance your Go Programming Language skills. This course is very practical and applicable. It focuses on teaching you skills you can use.\nIn addition, this course will build your skills with collaboration, crawling, Go modules, git, github, and gRPC.\nPresented with high-quality video lectures, this course will visually show you many great things about Google's Go (golang) Programming Language and collaboration. Taught by a tenured professor in California, this is just some of what you will learn in this course:\nLearn to succeed as a student\nMaster intermediate skills using git\nEstablish ssh encryption for github authentication\nLearn how to add collaborators to your github repos\nUnderstand the differences between cloning and forking repos\nAcquire the ability to handle merge conflicts\nGain the skills to work well with git branches\nMaster creating, merging, and deleting branches\nLearn to create pull requests, and merge pull requests\nAcquire a thorough understanding of dependency management\nGain a comprehensive understanding of Go modules\nUnderstand the semantic versioning of software\nAcquire precise control over project dependencies\nLearn to upgrade from other dependency management software\nMaster the essentials of crawling websites with Go\nUnderstand the importance of robots.txt\nLearn to crawl sites with infinite scroll\nGain insight into running analysis on crawl results\nAcquire an understanding of the essentials of gRPC\nLearn to setup a gRPC server and client\nGain the ability to build a gRPC chat server\nThis is an amazing course! This course will change your life. Being skilled at using the Go Programming Language will serve you and your career well. This course will increase your proficiency, productivity, and power as a programmer. You are going to love this course and it will forever change your life.\nYour satisfaction is guaranteed with this course.\nJoin me and enroll now.\n-\nThe art used in the course image was designed by Renee French.\nlicense: Creative Commons 3.0 Attributions license",
      "target_audience": [
        "This course is perfect for individuals who want to build their skills with the Go programming language."
      ]
    },
    {
      "title": "CI/CD with TeamCity From Beginner to Advanced",
      "url": "https://www.udemy.com/course/teamcity-2017-build-and-deploy-the-modern-way/",
      "bio": "Continuous Integration and Delivery (CI/CD) with TeamCity for Developers and DevOps",
      "objectives": [
        "Learn how an efficient and scalable CI/CD system is implemented.",
        "Install TeamCity 2018 on a local machine or on a server farm",
        "Setup static build agents as well as Cloud build agents",
        "Connect to Source Controls via HTTPS or SSH",
        "Setup a project template to save time and effort",
        "Parametrize Build Configurations",
        "Add dynamics to your builds using System, Environmental, and Configuration Parameters",
        "Build and package your code into a TeamCity Artifact",
        "Produce environment-specific configurations e.g. \"Web Config Transform\" of ASP .NET projects (with Visual Studio or PowerShell)",
        "Run Unit Tests and produce Code Coverage R`````eports",
        "Run code analysis and Code Quality Insection",
        "Checking GitHub Merge Pull Requests automatically",
        "Deploy your applications with AWS Code Deploy",
        "Manage and subscribe to notifications and alerts",
        "Administer TeamCity (e.g. manage users and groups)",
        "Produce Docker Images and Deploy to Amazon Elastic Container Services"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Common UseCaes of TeamCity"
        ],
        "Installing and configuring TeamCity": [
          "Deployment Architecture of TeamCity",
          "Installing TeamCity on Windows",
          "Installing TeamCity on Linux (Ubuntu)",
          "Installing TeamCity on Mac",
          "About TeamCity Build Agents",
          "Types of Build Agents in TeamcCity",
          "Installing TeamCity Build Agent on Windows",
          "Installing TeamCity Build Agent on Ubuntu (Linux)"
        ],
        "Working with Projects and Build Configurations": [
          "Projects in TeamCity",
          "Build Configurations in TeamCity",
          "Build Steps in TeamCity",
          "Build Artefacts in TeamCity",
          "Parametrising Build Configurations Part 1",
          "Parametrising Build Configurations Part 2"
        ],
        "Deployment Use Cases": [
          "Continues Deployment Use Cases - Introduction"
        ],
        "Use Case A: Deploying Your Build Artifact with AWS CodeDeploy": [
          "Deployment Architecture and Strategy",
          "Uploading TeamCity Artifacts to AWS S3",
          "Installing the AWS Code Deploy Agent",
          "Creating the IAM Role for AWS Code Deploy Agent",
          "Creting the AppSpec and Deployment Scripts",
          "Including the Deployment Scripts in Artifact",
          "Creating AWS Code Deploy Applications",
          "Deploying the Artifact Using Code Deploy + Build Plan Dependencies"
        ],
        "Use Case B: Continuous Deployment via Octopus Deploy": [
          "About Octopus Deploy",
          "Installing Octopus Deploy on Windows Server",
          "Working with Environments in Ocropus Deploy",
          "Installing Octopus Deploy Tentacles on Windows",
          "Installing Octopus Deploy Tentacles on Linux (Ubuntu)",
          "Working with Packages in Octopus Deploy",
          "Preparing TeamCity Artefact for Octopus Deploy",
          "Publishing TeamCity Artefacts to Octopus Deploy",
          "Defining the Deployment Process",
          "Deploying Projects"
        ],
        "TeamCity Level 2": [
          "Cloud Build Agents in TeamCity",
          "Build Triggers in TeamCity",
          "Failure Conditions",
          "Working with Build Features in TeamCity",
          "Connecting to GitHub via SSH Keys",
          "Users, Groups and Roles in TeamCity",
          "Notifications in TeamCity",
          "Logging to TeamCity using Google (Open Authentication)"
        ]
      },
      "requirements": [
        "Some experience as a Developer or as a DevOps Engineer"
      ],
      "description": "Are you looking to master Continuous Integration and Delivery (CI/CD) with TeamCity from beginner to advanced level? Then, look no further than this comprehensive online course!\nDesigned to equip developers and DevOps engineers with the essential skills and knowledge required for implementing an efficient CI/CD system, this course covers everything from setting up TeamCity in a highly available and scalable manner to deploying software automatically with one click.\nWith a focus on modern, feature-rich tools, this course deep dives into various secure ways of connecting to your source control system(s), such as \"git\" (e.g. GitHub). You'll learn how to automatically validate pull requests and ensure they are ready to be merged.\nYou'll also discover how to compile your code, run its unit tests, measure code quality, and package build artifacts. But that's not all! The course also covers deploying the artifacts to target servers, which can be tricky and complicated. However, various use cases for deploying the final software product are provided to familiarise you with deploying in different ways, whether using Docker, AWS Code Deploy or a third-party tool such as Octopus Deploy.\nNo prior knowledge about TeamCity, CI/CD, or AWS is required to complete the course. Whether you're a beginner or an experienced professional, you'll gain valuable insights and skills that will enable you to optimize your software development processes.\nEnrol now and take the first step towards becoming an expert in Continuous Integration and Delivery with TeamCity!",
      "target_audience": [
        "Developers",
        "DevOps Engineers",
        "Technical Managers",
        "IT Administrators",
        "Solution Architects",
        "University Students of IT and/or Computer Science",
        "Testers"
      ]
    },
    {
      "title": "Beat the Codility Coding Interview in JavaScript",
      "url": "https://www.udemy.com/course/beat-the-codility-coding-interview-in-javascript/",
      "bio": "Learn and practice how to solve many coding puzzles from Codility using JavaScript",
      "objectives": [
        "Experience solving many of codility's coding interview puzzles, with problem descriptions, hints and solutions",
        "Learn common problem solving tips ideal for coding interviews",
        "Have a greater chance of passing the coding interview with codility, hackerrank and others",
        "Have a better chance of doing well in a face to face or phone coding interview"
      ],
      "course_content": {
        "Introduction": [
          "Make most of this course",
          "Useful links and resources"
        ],
        "Time Complexity": [
          "Quick recap on Complexity Theory",
          "Perm Missing Element Problem",
          "Perm Missing Element Hint 1",
          "Perm Missing Element Hint 2",
          "Perm Missing Element Solution",
          "Perm Missing Element Code Walkthrough",
          "Equilibrium Problem",
          "Equilibrium Hint 1",
          "Equilibrium Hint 2",
          "Equilibrium Solution",
          "Equilibrium Code Walkthrough"
        ],
        "Arrays": [
          "Refresh your knowledge on Arrays",
          "Cyclic Rotation Problem",
          "Cyclic Rotation Hint",
          "Cyclic Rotation Solution",
          "Cyclic Rotation Code Walkthrough"
        ],
        "Counting Elements": [
          "What do we mean by Counting Elements?",
          "Frog River One Problem",
          "Frog River One Hint",
          "Frog River One Solution",
          "Frog River One Code Walkthrough",
          "Max Counters Problem",
          "Max Counters Hint 1",
          "Max Counters Hint 2",
          "Max Counters Solution",
          "Max Counters Code Walkthrough"
        ],
        "Stacks and Queues": [
          "The basics around Stacks and Queues",
          "Brackets Problem",
          "Brackets Hint",
          "Brackets Solution",
          "Brackets Code Walkthrough",
          "Fish Problem",
          "Fish Hint",
          "Fish Solution",
          "Fish Code Walkthrough"
        ],
        "Leader": [
          "Leader definition and the Dominator Problem",
          "Dominator Hint",
          "Dominator Solution",
          "Dominator Code Walkthrough"
        ],
        "Maximum Slice Problem": [
          "Introduction to the Maximum Sub Array problem",
          "Max Profit Problem",
          "Max Profit Hint",
          "Max Profit Solution",
          "Max Profit Code Walkthrough"
        ],
        "Sorting": [
          "Overview of different Sorting Algorithms",
          "Disc Intersection Problem",
          "Disc Intersection Hint",
          "Disc Intersection Solution",
          "Disc Intersection Code Walkthrough Part 1",
          "Disc Intersection Code Walkthrough Part 2"
        ],
        "Prefix Sums": [
          "How to generate prefix sums",
          "Passing Cars Problem",
          "Passing Cars Hint",
          "Passing Cars Solution",
          "Passing Cars Code Walkthrough",
          "Div Count Problem",
          "Div Count Hint",
          "Div Count Solution",
          "Div Count Code Walkthrough"
        ],
        "Primes and Composites": [
          "Understanding Primes and Composites",
          "Flags Problem",
          "Flags Hint 1",
          "Flags Hint 2",
          "Flags Solution",
          "Flags Code Walkthrough"
        ]
      },
      "requirements": [
        "JavaScript programming language",
        "Basic understanding of data structures and algorithms"
      ],
      "description": "This course has been designed to help you pass your next coding interview. It focuses on puzzles from Codility's training lessons, so if you have an online coding test coming up, this course is perfect for you. The course will also help you for onsite and phone coding interviews.\nThe key to passing these coding interviews is to practice as much as possible by solving various types of coding puzzles. In doing so you sharpen your problem solving skills and eventually you will start to see patterns amongst the different coding solutions. You will also increase your chances of being asked a problem you’ve already solved.\nIn this course you’ll get to practice many of these coding puzzles. In every section we introduce the topic, explain the problem and later provide you with a few hints that help solve the puzzle. In the end we arrive at the solution together. There is a good mixture of puzzles with different levels of difficulty.\nAlong the way you'll learn how to ride a motorbike, surf, scuba dive and fly an aeroplane. *\nJoin me on this course, and let’s get you to pass this interview!\n\n\n*Not really, however this course is pretty fun regardless.\nAll code in this course can be found on github, username/project: cutajarj/CodilityInJavaScript",
      "target_audience": [
        "JavaScript Developers about to take the codility coding interview",
        "JavaScript Developers about to take another coding interview, such as hackerrank or others",
        "JavaScript Developers about to take a face to face or phone coding interview"
      ]
    },
    {
      "title": "Software Design Principles for Energy Software Development",
      "url": "https://www.udemy.com/course/software-design-principles-for-building-economic-models/",
      "bio": "From Prototype to Production: Software Engineering for Energy Applications",
      "objectives": [
        "Master the Divide and Conquer principle through a complete smart energy system implementation",
        "Apply all 5 SOLID principles to build flexible, maintainable energy software architectures",
        "Optimize Cohesion across 7 different types (functional, layer, communication, sequential, procedural, temporal, utility)",
        "Minimize Coupling using 5 key strategies (content, stamp, routine, type use, import coupling)",
        "Design reusable components that can be shared across multiple energy projects",
        "Refactor existing energy system code to follow professional design patterns",
        "Evaluate software quality using industry-standard metrics and best practices",
        "Build a complete energy application architecture from requirements to implementation"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Resources"
        ],
        "Divide and Conquer": [
          "A Smart Energy System - No Divide and Conquer approach",
          "A Smart Energy System - With the Divide and Conquer approach",
          "Resources"
        ],
        "Cohesion": [
          "Functional cohesion",
          "Layer cohesion",
          "Communication cohesion",
          "Sequential cohesion",
          "Procedural cohesion",
          "Temporal cohesion",
          "Utility cohesion"
        ],
        "Coupling": [
          "Content coupling",
          "Stamp coupling",
          "Routine coupling",
          "Type use coupling",
          "Import inclusion coupling"
        ],
        "Reusability": [
          "Analysis of the Reusability principle"
        ],
        "SOLID Design Principles": [
          "The Single Responsibility Principles",
          "Open Closed Principle",
          "The LSP principle",
          "ISP",
          "Interfaces vs No Interfaces",
          "DIP"
        ],
        "Conclusions": [
          "Overview",
          "Resources"
        ]
      },
      "requirements": [
        "Absolute beginners to software design welcome!",
        "Basic programming knowledge helpful but not required",
        "No formal computer science background needed",
        "Just need a computer and enthusiasm"
      ],
      "description": "SPECIAL OFFER:\nSave today! Copy this code at checkout (remove the middle space):   E9F68C41C 2247CB43147\n\n\n\nWHO I AM:\nResearcher and educator specializing in energy data science (PhD in Energy, Imperial College London, 40+ publications)\n\n\n\nREGULAR ENHANCEMENTS:\nCourse reviewed periodically with updates.\n\n\n\nWhat You'll Learn:\nHow to apply the Divide and Conquer principle to break down complex models into manageable components\nHow to implement SOLID principles (Single Responsibility, Open/Closed, Liskov Substitution, Interface Segregation, Dependency Inversion) in software engineering projects for energy\nHow to optimize Cohesion and Coupling for building maintainable and scalable energy software solutions\nHow to design reusable code components that reduce development time and costs\nHow to apply these principles to real-world smart energy system applications\n\n\n\nPerfect For:\nEnergy software developers and engineers\nData scientists transitioning to software engineering roles, with a focus on energy/economics\nEnergy system architects and technical leads\nFull-stack developers in the energy/utility sector\nTechnical consultants in energy digitalization\nGraduate students in energy informatics or computer science\nEnergy professionals learning to build production-ready code\n\n\n\nWhy This Matters:\nThe energy transition demands software that can handle massive data flows, integrate renewable sources, manage smart grids, and optimize energy trading - all while remaining maintainable and scalable. Poor software design costs the energy sector billions in technical debt and failed digital transformation projects. Companies desperately need developers who understand both energy systems AND professional software architecture. Whether you're building energy management platforms, trading algorithms, or grid optimization tools, these design principles are the difference between prototype code and production systems. Master the skills that transform you from a coder to a software architect, opening doors to senior engineering roles paying $180,000-300,000+ in the booming energy tech sector.",
      "target_audience": [
        "Energy Software Developers seeking to write cleaner, more maintainable code",
        "Data Scientists in Energy transitioning from scripts to production-ready software",
        "Energy System Engineers building smart grid and renewable integration platforms",
        "Graduate Students & Researchers developing energy modeling and simulation tools",
        "Technical Consultants designing enterprise energy management systems",
        "Full-Stack Developers moving into energy tech and utility applications",
        "Energy Analysts & Modelers who want their code to meet professional standards",
        "Anyone building energy software who needs solid architectural foundations"
      ]
    },
    {
      "title": "TDD in C# From A to Z",
      "url": "https://www.udemy.com/course/tdd-csharp/",
      "bio": "Grow software by TDD with SpecFlow + TestStack White. Learn test-driven development and improve unit testing skills!",
      "objectives": [
        "Practice TDD in your daily job",
        "Practice katas to improve TDD and understanding of the programming fundamentals",
        "Write acceptance tests with SpecFlow in Gherkin",
        "Develop software in a \"true\" agile, iterative process",
        "Apply best practices of unit testing and TDD"
      ],
      "course_content": {},
      "requirements": [
        "You should already be familiar with the basics of C#",
        "You should already be familiar with the basics of unit testing",
        "You should already be familiar with the basics of dependency injection"
      ],
      "description": "Today unit testing is the absolutely required skill which is required from any professional developer. Companies expect from developers to know how to write unit tests including all the most important topics such as mocking and test driven development (TDD in short).\n\nThis course is all about practicing TDD using C# programming language and NUnit as a unit testing framework. Along the way, we will learn the concepts related to unit testing. This course does not cover all the features of NUnit. This course is way more interesting.\nLearning unit testing and TDD puts a powerful and very useful tool at your fingertips. Being familiar with unit testing and TDD you can write reliable and maintainable applications. It is very hard to lead a project which is not covered by unit tests.\nContent and Overview\nThis course is primarily aimed at developers who’re already familiar with the basics of unit testing and dependency injection. Some experience in C# programming is required. The course provides solid theoretical base reinforced by tons of practical material.\nWe start with basics of test-driven development. Why we need TDD? What is TDD? When TDD fails, three laws of TDD, different types of tests, tooling and other fundamental topics. This section is mostly theoretical.\nTheory is dead without practice, so starting from the second section, you’ll see tons of programming sessions where I’ll demonstrate how to implement generating of Fibonacci numbers, FizzBuzz, parsing of roman numerals, updateable spin synchronization primitives, tic-tac-toe or crosses and noughts game and game in sticks. You’ll also learn:\nHow a regular agile development process looks like\nThat you need to learn shortcuts to practice TDD more smoothly\nThree Main TDD techniques: faking, triangulation and obvious implementation\nWhich tests to write first\nHow to start writing a test in a TDD manner\nStack kata\nImmutable stack kata\nAnd list kata\nWhat is acceptance testing\nAbout the SpecFlow acceptance testing framework\nHow to write acceptance tests with SpecFlow in Gherkin language\nWhat are UI tests\nWhat tools for writing UI Tests exist\nHow to access UI through the TestStack.White framework\nHave you heard about katas? No, I’m talking about programming. In the third section, you’ll learn what is a code kata and I’ll demonstrate three code katas:\nGrowing an application by writing tests first, we’re not only writing unit tests first. So, in the next section, you’ll learn what is acceptance testing and integration testing. You’ll learn:\nYou’ll need to see how to apply all the material learned by this moment. Practice helps very much with understanding especially when we uncover highly practical topics such as TDD. That’s why I decided to show you how all the things work in practice altogether. So, in the next section, you’ll see a real enterprise approach for working on a software project in action.\nI’ll build a bridge to UI through TestStack.White applying the Page Object design pattern\nI’ll write acceptance tests using the bridge built for accessing UI\nI’ll implement ViewModels and all the corresponding business-logic\nWhat is TDD in the end? Is it possible to live without it?\nThe relationships between TDD and Agile development process\nShould we design architecture upfront or not?\nDo unit tests guarantee the success?\nQuality of tests, some criterions\nHow to express data for writing unit tests\nShouldly for writing more readable assertions\nSingletons, Static classes and testability, Builder design pattern\nAnd some other important topics\nThe last two sections are rather philosophical. We will discuss:\nWhat is TDD in the end? Is it possible to live without it?\nThe relationships between TDD and Agile development process\nShould we design architecture upfront or not?\nDo unit tests guarantee the success?\nQuality of tests, some criterions\nHow to express data for writing unit tests\nShouldly for writing more readable assertions\nSingletons, Static classes and testability, Builder design pattern\nand some other important topics\nHere is my Teaching Approach -\nNo fluff, no ranting, no beating the air. I respect your time. The course material is succinct, yet comprehensive. All important concepts are covered. Particularly important topics are covered in-depth.\nTake this course, and you will be satisfied.",
      "target_audience": [
        "Any developer who wants to improve professional programming skills"
      ]
    },
    {
      "title": "Data Structures and Algorithms Python: The Complete Bootcamp",
      "url": "https://www.udemy.com/course/data-structures-and-algorithms-masterclass/",
      "bio": "Comprehensive Data Structures and Algorithms Guide: Learn, Visualize and Implement DSA Concepts from Basics to Advanced",
      "objectives": [
        "Understand the fundamentals of the Data Structures and Algorithms",
        "Understand each and every concept from scratch with proper knowledge of their complexities and implementations in Python",
        "Understand concept behind Arrays, Linked Lists, Stacks & Queues, Hash tables, Trees and Graphs",
        "Understand popular algorithms, and how to use them (Searching, Sorting and Traversal)",
        "Improve your problem solving skills and become a confident developer for your next coding interview",
        "Code an implementation of each data structure, so you understand how they work behind the scene"
      ],
      "course_content": {},
      "requirements": [
        "Basic Knowledge of Python Programming"
      ],
      "description": "Welcome to Data Structures and Algorithms - Coding Interview Bootcamp, One single course to start your DSA journey as a beginner step-by-step. This course touches on each and every important topic through concept, visualization, and implementation. The entire course is designed for beginners with one goal in mind, to understand each and every concept from scratch with proper knowledge of their complexities and implementations in Python.\n\nThroughout the course, we will explore the most important Data Structures and Algorithms topics step-by-step:\n1. Essential Concepts\nBig O Notation\nMemory\nLogarithms\nRecursion\n\n2. Data structures:\nArrays\nLinked Lists (Singly Linked List, Doubly Linked List, Circular Linked List)\nStacks\nQueues\nHash Tables\nTrees (Binary Tree, Binary Search Tree, AVL Trees, Red-Black Trees)\nHeaps (Binary Heaps)\nTries\nGraphs\n\n3. Algorithms:\nElementary Sorting Algorithms\n(Bubble Sort, Insertion Sort, Selection Sort)\n\nAdvance Searching Algorithms\n(Quick Sort, Merge Sort)\n\nTree Traversal\nBreadth-First Search: Level Order Traversal,\nDepth First Search: PreOrder, InOrder, PostOrder\n\nGraph Traversal\n(Breadth-First Search, Depth-First Search)\n\n4. Interview Questions\nTwo Sum\nMinMax Stack\nDesign Linked List\nReverse Linked List\nConstruct Binary Tree\nInvert Binary Tree\nConstruct Binary Search Tree\nDetect Capital\nReverse String\nLongest Palindromic Substring\n\n\nWhy this course\nComplete course is focused on concept learning approach, you learn every concept through a logical and visual learning approach.\nLearn all important concepts in the simplest possible way with tons of examples and quizzes.\nYou just need basic Python knowledge, we will cover everything step-by-step from scratch.\n\nAfter completing this course you will be ready to work as an Intern, Fresher, or Freelancer and you will also be able to implement everything yourself. Most importantly you will be ready to divide deep with future practice and hard-level questions of Data Structures.\nEnroll now, I will make sure you learn best about Data Structures and Algorithms.",
      "target_audience": [
        "Students (Computer Science / Non-Computer Science) who wants to learn Data Structures and Algorithms concepts from the scratch",
        "Anyone who wants to strengthen their problem-solving skills",
        "Students who are preparing for the interviews",
        "Anybody who wants to switch to a product based company",
        "Anyone who wants to refresh their Data Structures and Algorithms concepts"
      ]
    },
    {
      "title": "Azure Functions Masterclass",
      "url": "https://www.udemy.com/course/azure-functions-masterclass/",
      "bio": "Learn all about Serverless Computing with Azure Functions by developing 7 real-world applications from scratch.",
      "objectives": [
        "Fundamental understanding of Azure Functions",
        "Hands on knowledge of Azure Functions by implementing 7 real world use cases",
        "Understand and use the concepts of triggers and bindings",
        "Learn to develop and test Azure Functions in-portal",
        "Develop, debug and test Azure Functions locally and deploy to Azure using Visual Studio Code",
        "Monitor the performance and cost of running functions",
        "And much more…"
      ],
      "course_content": {
        "Getting Started": [
          "Course Structure",
          "How to get most out of the course?",
          "Azure Account",
          "Sign Up for Azure Account (Optional)"
        ],
        "Azure Serverless": [
          "Module Overview",
          "What is Serverless?",
          "Azure Serverless Services",
          "Azure Functions Documentation",
          "Serverless Use Case: ETL",
          "Serverless Use Case: Image Analysis",
          "Module Summary"
        ],
        "Introducing Azure Functions": [
          "Module Overview",
          "What are Azure Functions?",
          "Azure Functions Useful Resources",
          "Triggers and Bindings",
          "Triggers and Bindings Useful Resources",
          "Azure Functions Pricing",
          "Supported Languages in Azure Functions",
          "Benefits of Azure Functions",
          "When to use Azure Functions",
          "Development Environments",
          "Module Summary"
        ],
        "Creating Azure Functions in Portal": [
          "Module Overview",
          "Creating a Function App",
          "Creating Your First Azure Function",
          "Configure Azure Function",
          "Testing Azure Function",
          "Function Authorization Levels",
          "Function Invocation History",
          "Exploring Storage Account",
          "Module Summary"
        ],
        "Creating Azure Functions Locally": [
          "Module Overview",
          "Local Development Options",
          "Local Development Options Useful Resources",
          "Installing and Using Azure Functions Core Tools",
          "Setting Up Development Environment Using Visual Studio Code",
          "Test and Debug Azure Functions",
          "Deploy Function App to Azure",
          "Module Summary"
        ],
        "Create Azure Functions in Different Languages": [
          "Module Overview",
          "Create Azure Functions in C#",
          "Create Azure Functions in C#: Useful Resources",
          "Create Azure Functions in Python",
          "Create Azure Functions in Python: Useful Resources",
          "Module Summary"
        ],
        "Real World Use Cases": [
          "Module Overview",
          "Triggers and Bindings",
          "Quick Note",
          "Demo 1: Useful Resources",
          "Demo 1: Image Thumbnail (Blob Trigger - Blob Output)",
          "Demo 2: Useful Resources",
          "Demo 2: Analyze Images with Computer Vision API (Blob Trigger-Cosmos DB Output)",
          "Demo 3: Useful Resources",
          "Demo 3: Notify User of Image Analysis Result (Cosmos Trigger - Sendgrid Email)",
          "Demo 4: Useful Resources",
          "Demo 4: Delete Old Blob Files (Timer Trigger - Azure Storage Queue Output)",
          "Demo 5: Useful Resources",
          "Demo 5: Notify User of Deleted File (Azure Queue Trigger - Sendgrid Email Out)",
          "Demo 6: Useful Resources",
          "Demo 6: Creating a REST api with HTTP triggers",
          "Demo 7: Useful Resources",
          "Demo 7: Analyze Tweets with Azure Cognitive Analytics (HTTP Trigger-HTTP Output)",
          "Module Summary"
        ],
        "Deploy Functions to Azure": [
          "Module Overview",
          "Ways to Deploy Azure Functions",
          "Deploying Function App from Visual Studio Code",
          "Deploying Function App from Local Git",
          "Deploying Function App from GitHub",
          "Function App Deployment: Useful Resources",
          "Module Summary"
        ],
        "Working in Production": [
          "Module Overview",
          "Monitoring Azure Functions",
          "Monitoring Azure Functions Cost",
          "Securing Azure Functions",
          "Azure Functions Proxies",
          "Testing Azure Functions",
          "Durable Functions",
          "Module Summary"
        ],
        "Wrap Up": [
          "Thank You!",
          "What's Next? (And a BONUS!!!)"
        ]
      },
      "requirements": [
        "Very basic understanding of the Microsoft Azure would be advantageous",
        "A free or paid subscription to Microsoft Azure",
        "Excitement to learn Microsoft's constantly growing cloud platform!!!"
      ],
      "description": "Serverless computing is the future of Cloud Computing!!!\n\n\nMastering Azure Functions can get you a position as a cloud developer or help you build that personal project you've been dreaming of. It's a skill that will put you more in demand in the modern software development industry, especially with the rise of serverless cloud computing.\nThis course will get you up and running quickly, and teach you the core knowledge you need to deeply understand and build serverless applications using Azure Functions.\nYou will learn about Azure Functions with this hands-on, projects based course (5+ hours of video content and numerous articles) and truly internalize some highly valuable skills in the world of technology.\n\n\nWe'll start by mastering the fundamentals of Azure Functions. We will build several (more than 7) real world serverless applications from scratch and deploy on the web using Azure Functions (with no standalone services or server instances at all)! Azure will add more server power when your application needs it, and will take care of scaling back down when you don't. And you only pay when your code runs.\nSource code is provided for each demo, so you will always stay up-to-date with the course pacing.\n\n\nAfter an introduction to Azure Function, we'll dive right in to the details including:\nTriggers and Bindings\nDevelop and test Azure Functions using in-portal editor\nSetup local development environment. Develop and test Azure Functions locally and deploy to Azure\nPractice with real world demos like 'Analyze Images with Computer Vision API', 'Delete Old Blob Files', 'Creating a REST api with HTTP triggers', 'Analyze Tweets with Azure Cognitive Text Analytics' and more\nDeploy your locally develop function to Azure and integrate with GitHub and other services\nMonitor the performance and cost of running functions\nAnd more…\n\n\nBy the end of this course, you will gain a solid foundation for building real-world serverless applications in Azure Functions following best practices and the serverless guide.\n\n\nAlthough this course isn't targeting any specific Azure certification exam, you'll leave it with a great foundation of Azure knowledge that will begin to prepare you for them. This course combines theory and projects in a clear and engaging way to guide you through the core concepts of Azure Functions\n\n\nServerless is the way of future and you can get started today and become an expert. Let's have some fun and build some awesome stuff in cloud together!",
      "target_audience": [
        "Anyone who wants to learn about highly scalable and cost-efficient serverless applications",
        "Developers who want to learn hands on about Azure's serverless compute offering",
        "Solutions architect who want to understand how serverless apps are architected, built and deployed using the best practices on Azure"
      ]
    },
    {
      "title": "Django with Data Science",
      "url": "https://www.udemy.com/course/django-with-data-science/",
      "bio": "Learn how to integrate Django with Pandas, Numpy, Matplotlib, Seaborn",
      "objectives": [
        "Integration of Django and Python data science libraries: Pandas, Matplotlib, Seaborn, Numpy",
        "Basics of data science",
        "Populate the database from CSV files",
        "Function views",
        "Semantic UI Framework",
        "Django forms & model forms"
      ],
      "course_content": {
        "Django Project": [
          "How to get visual studio code and anaconda",
          "Setting up the django project part 1",
          "Setting up the django project part 2",
          "Source code",
          "Course files",
          "Creating the first model",
          "Creating another model",
          "Creating our first view (with pandas data frame)",
          "Merging two dataframes",
          "Adding static files",
          "Creating chart selection form",
          "Adding js to the form",
          "Sending the data to the view",
          "Displaying error message",
          "Adding objects",
          "Working with the date",
          "Performing group by",
          "Adding additional logic to the view",
          "Chart function part 1",
          "Chart function part 2",
          "Chart function part 3",
          "Displaying the chart",
          "Styling the error message",
          "Closing the error message",
          "Creating modal with price statistics",
          "Adding styling",
          "Applying a fix to the chart & button creation",
          "Creating purchase view",
          "Creating django model form",
          "Finishing django model form",
          "Testing the model form",
          "Adding send confirmation",
          "Navigation to the purchase view",
          "Remarks on the chart view",
          "Adding navbar",
          "Creating the Csv model",
          "Setting up the upload view",
          "Creating the django form for file upload",
          "Reseting the database",
          "Chart view fix",
          "Exploring the csv file - sales data",
          "Saving csv file via form",
          "Opening the csv file - sales data",
          "Transforming rows of the csv file - sales data",
          "Populating the database from csv file - sales data",
          "Creating customers app and model",
          "Creating customer view",
          "Setting up customer view",
          "Finishing the customer view",
          "Working on the sales view part 1",
          "Working on the sales view part 2",
          "Styling the graphs",
          "Styling the graphs",
          "Creating the home view",
          "Creating login form and login view",
          "Working on the login",
          "Continue working on the login",
          "Final touches for the login",
          "logout view",
          "Outro"
        ],
        "Python data science libraries [OPTIONAL]": [
          "Intro to data science"
        ],
        "Field types in django [OPTIONAL]": [
          "Field types"
        ]
      },
      "requirements": [
        "Basic knowledge of html and python strongly recommended but not mandatory"
      ],
      "description": "Create professional and nicely looking User Interface in Django for Data Science with the use of Semantic UI framework. Understand the core concepts behind Pandas, Numpy, Matplotlib & Seaborn in order to create custom analytic tool i the browser for people who don't know anything about programming. This unique course will introduce new concepts step by step and at the end the Student will have a very interesting position in the portfolio.",
      "target_audience": [
        "Beginner Python Developers"
      ]
    },
    {
      "title": "Learn DataDog Monitoring",
      "url": "https://www.udemy.com/course/learn-datadog-monitoring/",
      "bio": "Ready yourself! Graduate with real skills in DataDog Monitoring!",
      "objectives": [
        "Download, Install and Run DataDog Agents",
        "Start and Stop the Agent",
        "Basics of DataDog DashBoards",
        "Learn how to use different Widgets with your DashBoard (Query Widget, Change Widget, Group and Notes Widgets)",
        "Apply Functions (Arithmetic, Rates and Interpolation)",
        "Integrate with a messaging platform like Slack and send alerts when things go wrong",
        "Use different monitors to continuously check metrics - Metric Monitors, Anomaly Monitors, ForeCast Monitors",
        "Understand the algorithms behind Anomaly and ForeCast Monitors"
      ],
      "course_content": {
        "The Setup": [
          "Setup Agent on the Mac",
          "Start and Stop Service on the Mac",
          "Integrate with Prometheus",
          "Cool Trick",
          "Running Linux Commands on Windows",
          "Setup for Windows",
          "Reviews",
          "Why DataDog?",
          "Get Set and Go!"
        ],
        "Optional Section : Setting up Prometheus": [
          "Intro to the section",
          "Setup Prometheus",
          "Setup Prometheus Part 2",
          "Prometheus for Windows",
          "Start Prometheus",
          "Understanding the architecture of an Agent"
        ],
        "DashBoard": [
          "Learn the UI",
          "UI Part 2",
          "Intro to DashBoards",
          "Basic Graphs",
          "Combining Graphs"
        ],
        "Widgets": [
          "Query Widget",
          "Change Widget",
          "Group and Notes Widget",
          "Dashboards and Widgets: Test yourself"
        ],
        "Functions": [
          "Arithmetic Functions",
          "Rates and Interpolation",
          "Interpolation? What's that!"
        ],
        "Integrations": [
          "Integrate with Slack",
          "Make use of the Integration with Slack"
        ],
        "Monitors": [
          "Basic Metric Monitor",
          "Metric Monitor Alerts",
          "Anomaly Monitor Part 1",
          "Anomaly Part 2",
          "Anomaly Part 3",
          "Anomaly Part 4",
          "Anomaly Part 5",
          "Is that an anomaly?",
          "Future ForeCast",
          "Future ForeCast (Linear)",
          "Future ForeCast (Seasonal)"
        ],
        "API Testing": [
          "Setting up PostMan",
          "Set up DataDog API for Testing on PostMan",
          "Testing the DataDog API",
          "Using the API for comments",
          "Done commenting?",
          "API for events"
        ],
        "Setting up Logging": [
          "Setting things up",
          "Configuring the Agent",
          "See the logs in DataDog"
        ],
        "Processing your Logs": [
          "Why do this",
          "Concepts",
          "Grok Parser Part 1",
          "Grok Parses Part 2",
          "Status Remapper Part 1",
          "Status Remapper Part 2",
          "Remapper",
          "Arithmetic",
          "Live Tail",
          "Indexing"
        ]
      },
      "requirements": [
        "An Internet connection",
        "A working Computer with either Windows/MacOS or Linux",
        "A desire to learn and Crush It!"
      ],
      "description": "Always have a hard time finding your error in the host of different servers? Having a hard time configuring alerts for when things go wrong?\nNeed to manually investigate issues when a server/database runs out of space? DataDog will actually forecast these issues and tell you in advance. It is no wonder that DataDog's usage and acceptance grows day by day.\nWhether you are a Software Architect looking for a way to switch over your conventional logging mechanism to the next generation of tools or a developer looking for a one stop shop to manage your entire data/monitoring storage and computation framework, DataDog is the solution for you. DataDog is especially good for monitoring your Cloud based architecture.\nYou will get a quick grasp on DataDog. It is one of the best data monitoring tools out there, with the ability to design and develop dashboards and it will let you add widgets to provide great visual representation into your entire ecosystem.\nEverything is well documented and separated, so you can find what you need. Assignments and Quizzes will make sure you stay on track and test your knowledge. The course will have a combination of theory and practical examples.\nThe Setup\nSetup Datadog Agents on the Mac as well as Windows. Learn how to start and stop the agents as well. Then move on to integrating DataDog  with another tool like Prometheus. Learn efficient ways to edit your DataDog config files.\nDashBoards and Widgets\nCreate simple TimeBoard Dashboards with different types of Widgets. Start with the timeseries widgets, where will see how to use one or multiple widgets. Use different display styles like Bars, lines, colors etc. Then use some more advance Widgets like the Change Widget, query widgets, group widget and notes widget.\nFunctions\nLearn how to use different functions that comes with single or multiple metrics inside the widget. Use simple arithmetic functions like cumulative sum or calculate the rates of different metrics per second or per minute. Even learn to use Interpolation with a variety of metrics.\nIntegrations\nTwo points here. The first is that you must integrate with other systems like Slack. Slack is a messaging platform. When things go wrong we can send alerts here. Configure alerts so they can be used later on in Monitors as well.\nMonitors\nDon't want to manually check if there is an issue? In come Monitors. Different types of monitors are appropriate for different types and combinations of metrics. For simple metrics with stable values you could just set a threshold. And send a slack alert when it is crossed.\nBut this does not always work. For metrics that have patterns you want your monitor to predict the pattern and not just send spam alerts when a threshold gets crossed. For this we have other types of monitors with in built algorithms to detect seasonal patterns. Anomaly and forecast widgets help you here.",
      "target_audience": [
        "Students trying to get a quick grasp of DataDog",
        "Developers looking to monitor and Visualize their apps/machines/servers with DataDog",
        "Developers and Software Architects who have used another tool to monitor their apps and are now looking to move over to DataDog",
        "Devs looking to run analysis on the the data from their Apps",
        "Those who like their data good looking :)"
      ]
    },
    {
      "title": ".NET Microservices: CQRS & Event Sourcing with Kafka",
      "url": "https://www.udemy.com/course/net-microservices-cqrs-event-sourcing-with-kafka/",
      "bio": "Learn how to create microservices in C# that are based on CQRS and Event Sourcing. Powered by .NET and Apache Kafka.",
      "objectives": [
        "CQRS",
        "Event Sourcing",
        "How to Create Microservices in C# with .NET",
        "Creating DDD-Oriented Microservices",
        "Using Apache Kafka as a Message Bus",
        "Creating an Event Store with MongoDB",
        "Optimistic Concurrency Control",
        "Event Versioning",
        "Using Microsoft SQL to Implement the Read Database",
        "Replay the Event Store and Recreate the State of the Aggregate",
        "Replay the Event Store and Recreate the Entire Read Database",
        "Replay the Event Store and Recreate the Read Database in a Different Database Type - PostgreSQL",
        "Implementing the Database-Per-Service Pattern",
        "Entity Framework Core (MS SQL and PostgreSQL)",
        "Dependency Injection",
        "Docker"
      ],
      "course_content": {
        "Introduction": [
          "Microservices Basics",
          "CQRS",
          "Event Sourcing",
          "Architecture Overview",
          "Apache Kafka",
          "Important Concepts Quiz",
          "Making the Case for CQRS & Event Sourcing"
        ],
        "Setup & Structure": [
          "Setup & Structure Section Intro",
          "Prerequisites",
          "Run Kafka in Docker",
          "Run MongoDB in Docker",
          "Run Microsoft SQL in Docker.",
          "Basic Project Setup",
          "Adding Project References",
          "Adding NuGet Packages",
          "Setup Debug Configurations (VS Code Only)",
          "Setup & Structure Quiz"
        ],
        "Messages": [
          "What is a Command?",
          "Commands",
          "What is an Event?",
          "Events",
          "Messages"
        ],
        "Command Dispatching": [
          "The Mediator Pattern",
          "ICommandDispatcher Interface (The Mediator)",
          "CommandDispatcher (The Concrete Mediator)",
          "Command Dispatching Quiz"
        ],
        "Aggregate": [
          "What is an Aggregate?",
          "AggregateRoot",
          "PostAggregate Part 1",
          "PostAggregate Part 2",
          "Aggregates Quiz"
        ],
        "Event Store": [
          "What is an Event Store?",
          "EventModel",
          "IEventStoreRepository Interface",
          "EventStoreRepository",
          "IEventStore Interface",
          "EventStore",
          "IEventSourcingHandler Interface",
          "EventSourcingHandler",
          "Event Store Quiz"
        ],
        "Command Handling": [
          "The Mediator Pattern Continued",
          "ICommandHandler Interface (The Abstract Colleague)",
          "CommandHandler (The Concrete Colleague)",
          "Register Command Handlers",
          "Command Handling Quiz"
        ],
        "Event Producer": [
          "Kafka Producer",
          "EventProducer Interface & Implementation",
          "Producing an Event",
          "Event Producer Quiz"
        ],
        "Domain Layer": [
          "Important DDD Concepts",
          "Domain Entities",
          "IPostRepository Interface",
          "ICommentRepository Interface",
          "Domain Layer Quiz"
        ],
        "Read Database": [
          "The Read Database",
          "DatabaseContext",
          "Programmatically Create DB & Tables on Startup",
          "PostRepository",
          "CommentRepository",
          "Read Database Quiz"
        ]
      },
      "requirements": [
        "Some experience with C# is essential"
      ],
      "description": "In this course, you will learn how to create .NET microservices that comply with the CQRS and Event Sourcing patterns.\nYou will not use any CQRS framework, but you will write every line of code that is required to effectively create your own CQRS and Event Sourcing framework using C# and Apache Kafka. While this might sound a little daunting, you will be carefully guided step by step, and gain all the know-how and confidence to become an expert in CQRS and Event Sourcing.\nBy the end of this course, you will know how to:\nHandle commands and raise events.\nUse the mediator pattern to implement command and query dispatchers.\nCreate and change the state of an aggregate with event messages.\nImplement an event store / write database in MongoDB.\nCreate a read database in MS SQL.\nApply event versioning.\nImplement optimistic concurrency control.\nProduce events to Apache Kafka.\nConsume events from Apache Kafka to populate and alter records in the read database.\nReplay the event store and recreate the state of the aggregate.\nSeparate read and write concerns.\nStructure your code using Domain-Driven-Design best practices.\nReplay the event store to recreate the entire read database.\nReplay the event store to recreate the entire read database into a different database type - PostgreSQL.\nThe ultimate goal of this course is to take a deep-dive into the world of CQRS and Event Sourcing to enable you to create microservices that are super decoupled and extremely scalable.",
      "target_audience": [
        "Software Engineers",
        "Software Developers",
        "Software Architects",
        "Cloud Engineers",
        "Solution Architects"
      ]
    },
    {
      "title": "gRPC [C#] Master Class: Build Modern API & Microservices",
      "url": "https://www.udemy.com/course/grpc-csharp/",
      "bio": "Better than REST API! Build a fast scalable HTTP/2 API for a .NET microservice with gRPC, Protocol Buffers (protobuf)",
      "objectives": [
        "Learn the gRPC theory to understand how gRPC works",
        "Compare gRPC and REST API paradigm",
        "Write your gRPC service definition in .proto files",
        "Generate Server & Client Code in C# using the protoc gRPC Plugin",
        "Implement Unary, Server Streaming, Client Streaming & Bi-Directional Streaming API",
        "Practice your learning with Exercises & Solutions",
        "Implement advanced concepts such as Error Handling, Deadlines & SSL Security",
        "Implement a full CRUD API on top of MongoDB",
        "Get pointers to expand your learning journey and get inspired by real world gRPC services"
      ],
      "course_content": {
        "gRPC Course Overview": [
          "gRPC Introduction",
          "Course Objective",
          "About your instructor",
          "Important Message",
          "Prerequisites"
        ],
        "Code Download": [
          "Code Download"
        ],
        "[Theory] gRPC Internals Deep Dive": [
          "Why this section?",
          "Protocol Buffers & Language Interoperability",
          "HTTP/2",
          "4 Types of gRPC APIs",
          "Scalability in gRPC",
          "Security in gRPC (SSL)",
          "gRPC vs REST",
          "Section Summary - why use gRPC",
          "Quiz on gRPC"
        ],
        "[Hands-On] gRPC Project Overview & Setup": [
          "Visual studio project setup",
          "Dummy service code generation",
          "GreetServer BoilerPlate Code",
          "GreetClient Boilerplate Code"
        ],
        "[Hands-On] gRPC Unary": [
          "What's an Unary API?",
          "Greet API Definition",
          "Unary API Server Implementation",
          "Unary API Client Implementation",
          "[Exercise] Sum API",
          "[Solution] Sum API"
        ],
        "[Hands-On] gRPC Server Streaming": [
          "What's a Server Streaming API?",
          "GreetManyTimes API Definition",
          "Server Streaming API Server Implementation",
          "Server Streaming API Client Implementation",
          "[Exercise] PrimeNumberDecomposition API",
          "[Solution] PrimeNumberDecomposition API"
        ],
        "[Hands-On] gRPC Client Streaming": [
          "What's a Client Streaming API?",
          "LongGreet API Definition",
          "Client Streaming API Server Implementation",
          "Client Streaming API Client Implementation",
          "[Exercise] ComputeAverage API",
          "[Solution] ComputeAverage API"
        ],
        "[Hands-On] gRPC Bi-Directional Streaming": [
          "What's a Bi-Directional Streaming API?",
          "GreetEveryone API Definition",
          "Bi-Directional Streaming API Server Implementation",
          "Bi-Directional Streaming API Client Implementation",
          "[Exercise] FindMaximum API",
          "[Solution] FindMaximum API"
        ],
        "[Hands-On] gRPC Advanced Features Deep Dive": [
          "[Theory] Errors in gRPC",
          "[Hands-On] Errors implementation",
          "[Theory] Deadlines",
          "[Hands-On] Deadlines",
          "[Theory] SSL Security",
          "[Hands-On] SSL Security",
          "[Demo] Language Interoperability",
          "gRPC Reflection & Evans CLI"
        ],
        "[Hands-On] CRUD API with MongoDB": [
          "Install MongoDB",
          "Install MongoDB - Windows Instructions",
          "Install MongoDB UI - Robo 3T",
          "Blog Service Setup",
          "CreateBlog Server",
          "CreateBlog Client",
          "ReadBlog Server",
          "ReadBlog Client",
          "UpdateBlog Server",
          "UpdateBlog Client",
          "DeleteBlog Server",
          "DeleteBlog Client",
          "ListBlog Server",
          "ListBlog Client",
          "Evans CLI test with CRUD"
        ]
      },
      "requirements": [
        "Good Understanding of C# Programming Language",
        "Good Understanding of Protocol Buffers"
      ],
      "description": "gRPC is a new and modern framework for building scalable, modern and fast API. It is leveraged by many top tech companies such as Google, Square & Netflix and enables programmers to write micro-services in any language they want while keeping the ability to easily create communications between these services. It relies on Protocol Buffers for the transport mechanism and Service Definition language.\nIn this course, we are going to explore in-depth, with hands-on lectures, all the aspects to get started with gRPC\nThis course is hands-on and you will implement two services: Greet and a Calculator Service\nIn just a few hours, you will know everything you need to know to write your .proto files, generate code in your Favourite Programming, and implement your services, servers, and client in .NET. There will be plenty of hands-on lectures and exercises for you to practice your newly acquired skills.\nIt's time to say goodbye to slow and clunky REST API, and opt-in for a better API framework\n\n\ngRPC C# Master Class is the best way to get a great overview of all the possibilities offered by gRPC with your favorite language\n> Learn the gRPC theory to understand how gRPC works\n> Compare gRPC and REST API paradigm\n> Write your gRPC service definition in .proto files\n> Generate Server & Client Code in C#\n> Implement Unary, Server Streaming, Client Streaming & Bi-Directional Streaming API\n> Practice your learning with Exercises & Solutions\n> Implement advanced concepts such as Error Handling, Deadlines & SSL Security\n> Implement a full CRUD API on top of MongoDB\n> Get pointers to expand your learning journey and get inspired by real-world gRPC services\nNote: This course expects you have some preliminary knowledge about Protocol Buffers and C# and .NET .\n\n\nSection outline:\ngRPC Course Overview: Get an understand of the course objectives, how the course is structured, download the course code and get ready!\n[Theory] gRPC Internals Deep Dive: Learn how gRPC works behind the scenes. Learn about HTTP/2, Protocol Buffers efficiencies, and the differences of gRPC and REST.\n[Hands-On] gRPC Project Overview & Setup: Setup your project and learn how to trigger code generation\n[Hands-On] gRPC Unary: API description & implementation\n[Hands-On] gRPC Server Streaming: API description & implementation\n[Hands-On] gRPC Client Streaming: API description & implementation\n[Hands-On] gRPC Bi-Directional Streaming: API description & implementation\n[Hands-On] gRPC Advanced Features Deep Dive: Advanced features such as Error Handling, Deadlines, SSL Security.\nNext Steps: Some useful real-world links & where to take your learning from here\n\n\nInstructor\nMy name is Clément Jean, and I'll be your instructor in this course. I teach about gRPC and Protocol Buffers with my focus always on helping my students improve their professional proficiencies.\nWith development being a widely accepted and pursued career, I've decided it's time for students to properly learn about gRPC. So, let’s kick start the course! You are in good hands!\n\n\nThis Course Also Comes With:\nLifetime Access to All Future Updates\nA responsive instructor in the Q&A Section\nLinks to interesting articles, and lots of good code to base your next template onto\nUdemy Certificate of Completion Ready for Download\nA 30 Day \"No Questions Asked\" Money Back Guarantee!\nI hope to see you inside the course!",
      "target_audience": [
        "Developers who want to understand how to write gRPC Services and Clients in C#",
        "Architects who want to understand how gRPC works and the concepts behind the different types of API"
      ]
    },
    {
      "title": "Algorithms in Java :Live problem solving & Design Techniques",
      "url": "https://www.udemy.com/course/algorithm-design-techniques-live-problem-solving-in-java/",
      "bio": "Recursion,BackTracking,Divide & Conquer,Dynamic Programming,Greedy Algorithms via Data Structures and Algorithms in Java",
      "objectives": [
        "Algorithm Design in Computer Systems",
        "Algorithm Design Techniques",
        "How to Code a Algo in Java",
        "Calculate time and space complexity",
        "Dynamic Programming, Greedy, D&C and Much more"
      ],
      "course_content": {
        "Course Introduction": [
          "Course Introduction",
          "Course Resources"
        ],
        "Introduction to Algorithms": [
          "Introduction to Algorithms"
        ],
        "Complexity Analysis": [
          "Section Introduction",
          "Complexity Analysis 1",
          "Complexity Analysis 2",
          "Section Summary"
        ],
        "Recurrence Relation": [
          "Section Introduction",
          "Recurrence Relation",
          "Solving Recurrence Relation",
          "Master's Theorem",
          "Section Summary"
        ],
        "Thinking Recursively": [
          "Section Introduction",
          "Recursion",
          "Identification",
          "Approaching",
          "Problem 01 : FindingSubsequences - Logic",
          "Problem 01 : FindingSubsequences - Live Code Java",
          "Problem 01 : FindingSubsequences - Complexity Analysis",
          "Problem 02: Tower of Hanoi - Logic",
          "Problem 02 : Tower of Hanoi - Live Code Java",
          "Problem 02 : Tower of Hanoi - Complexity Analysis",
          "Problem 03 : 7.Array Product Sum - Logic",
          "Problem 03 : 7.Array Product Sum - Live Code Java",
          "Problem 03 : Array Product Sum - Complexity Analysis",
          "Problem 04 : Binary Subtree - Logic",
          "Problem 04 : Binary Subtree - Live Code Java",
          "Problem 04 : Binary Subtree - Complexity Analysis",
          "Why and Why not Recursion",
          "Types Of Recursion",
          "Tail Recursion",
          "Section Summary"
        ],
        "Backtracking": [
          "Section Introduction",
          "Introduction to Backtracking",
          "Identify Backtracking",
          "Approching the Solution",
          "Problem 01 : Rat In Maze - Logic",
          "Problem 01 : Rat In Maze - Code",
          "Problem 01 : Rat In Maze - Complexity Analysis",
          "Problem 02 : NQueen - Logic",
          "Problem 02 : NQueen - Live Code in Java",
          "Problem 02 : NQueen - Complexity Analysis",
          "Problem 03 : Knights Tour Problem - Logic",
          "Problem 03 : Knights Tour Problem - Live Code in Java",
          "Problem 03 : Knight Tour Problem - Complexity Analysis",
          "Problem 04 : Boggle | Word Search - Logic",
          "Problem 04 : Boggle | Word Search - Live Code in Java",
          "Problem 04 : Boggle | Word Search - Complexity Analysis",
          "Section Summary"
        ],
        "Divide and Conquer": [
          "Section Introduction",
          "Introduction To Divide And Conquer",
          "Identification and Approaching",
          "Problem 01 : MergeSort - Logic",
          "Problem 01 : MergeSort - Live Java Code",
          "Problem 01 : MergeSort - Complexity Analysis",
          "Problem 02 : QuickSort - Logic",
          "Problem 02 : QuickSort - Live Java Code",
          "Problem 02 : QuickSort - Complexity Analysis",
          "Problem 03 : Median Of Medians - Logic",
          "Problem 03 : Median Of Medians - Live Java Code",
          "Section Summary"
        ],
        "Greedy Technique": [
          "Section Introduction",
          "Introduction to Greedy",
          "Identification & Approaching the Solution",
          "Problem 01 : Fractional Knapsack - Logic",
          "Problem 01 : Fractional Knapsack - Live Code Java",
          "Problem 01 : Fractional Knapsack - Complexity Analysis",
          "Problem 02 : IntervalScheduling - Logic",
          "Problem 02 : IntervalScheduling - Live Code Java",
          "Problem 02 : IntervalScheduling - Complexity Analysis",
          "Problem 03 : Huffman Code - Logic",
          "Problem 03 : Huffman Code - Live Code Java",
          "Problem 03 : Huffman Code - Complexity Analysis",
          "Problem 04 : Dijkstra - Logic",
          "Problem 04 : Dijkstra Logic - Live Code",
          "Problem 04 : Dijkstra - Complexity Analysis",
          "Summary"
        ],
        "Dynamic Programming": [
          "Section Introduction",
          "Introduction to Dynamic Programming",
          "Identification",
          "Compare DP D&C and Greedy",
          "Approaching the Solution",
          "Example 01 : Staircase Problem Theory & Live Code",
          "Example 01 : Staircase Problem Complexity Analysis",
          "Example 02 - 0/1 Knapsack Theory & Live code",
          "Example 02 - 0/1 Knapsack Complexity Analysis",
          "Example 03 - Coin Change Problem Theory and Code",
          "Example 03 - Coin Change Problem Complexity Analysis",
          "Example 04 : Longest Decreasing Subsequence Explanation And Code",
          "Example 04 : Longest Decreasing Subsequence | Complexity Analysis",
          "Example 05 : Levenshtein problem",
          "Example 05 : Levenshtein Complexity Analysis",
          "Example 06 : Rod Cutting",
          "Example 06 : Rod Cutting - Complexity Analysis",
          "Example 07 : Matrix Chain Multiplication",
          "Example 07 : Matrix Chain Multiplication | Complexity Analysis",
          "Summary"
        ],
        "Famous Algorithms": [
          "Kadane's Algo",
          "Kadane's Algo Live Code Java",
          "Kadane's Algo Complexity Analysis",
          "BellmanFord's Algo",
          "BellmanFord's Algo Live Code Java",
          "BellmanFord's Algo Complexity Analysis",
          "Topological Sort : Kahn's Algo",
          "Topological Sort Live Code Java",
          "Topological Sort Complexity Analysis",
          "Edmond's Karp/Ford-Fulkerson Algorithm",
          "Ford-Fulkerson Algorithm - Edmond's Karp Implementation"
        ]
      },
      "requirements": [
        "Basic Java - Loops and Conditions"
      ],
      "description": "Algorithm Design Techniques: Live problem-solving in Java\nAlgorithms are everywhere. One great algorithm applied sensibly can result in a System like GOOGLE!\nCompleter scientists have worked from 100s of years and derived some of the techniques that can be applied to write and design algorithms.\nSo Why to reinvent the wheel ??\nLet’s go through some of the most famous algorithm design techniques in this course.\nOnce you will come to know these design techniques It will become very easy for you to approach a problem by identifying which technique to apply to solve that correctly and efficiently.\n\n\n0. Complexity analysis\n1. Recursion is the base of any algorithm design\n2. Backtracking\n3. Divide and Conquer\n4. Greedy algorithms\n5. Dynamic programming\nAnd WE WILL WRITE THE CODE LINE BY LINE IN JAVA !!\nBy the end of this course -\n1. You will understand how to design algorithms\n2. A lot of coding practice and design live problems in Java\n3. Algorithm Complexity analysis\nAND\nIf you are preparing for your coding Interview or doing competitive programming This course will be a big help for you.\nTHRILLED? I welcome you to the course and I am sure this will be fun!!\nIf it does not - It comes with a 30 Days money-back guarantee so don’t think twice to give it a shot.\nHappy Learning\nBasics>Strong;",
      "target_audience": [
        "Looking to learn to design algorithms",
        "Want to develop how to think solve algo problems",
        "Code Famous Algorithms in Java"
      ]
    },
    {
      "title": "Deploy Infra in the Cloud using Terraform",
      "url": "https://www.udemy.com/course/deploy-infra-in-the-cloud-using-terraform/",
      "bio": "Learn how to apply Infrastructure as Code (IaC) with Terraform. Covers Web Apps, Database, VM, Kubernetes and Azure.",
      "objectives": [
        "Automate infrastructure deployment to the cloud",
        "Create Terraform templates",
        "Working with the \"Execution Plan\"",
        "Sharing and locking the State file",
        "Deploy into dev/test and production",
        "DevOps CI/CD pipelines for Terraform",
        "GitOps with Atlantis",
        "Creating and deploying Web Apps, Databases, VMs, Storage, Kubernetes clusters",
        "Deploy to multiple cloud platforms using Modules",
        "Troubleshooting Terraform",
        "Applying Infrastructure as Code (IaC)"
      ],
      "course_content": {
        "Introduction": [
          "Course requirements",
          "Connect with the author"
        ],
        "Terraform basics": [
          "Terraform overview",
          "Create the first terraform template",
          "Get the source code for the demo",
          "Moving to Terraform version 0.14",
          "Terraform init, plan and apply",
          "Recreating resources",
          "Validation and formatting a template",
          "Terraform commands"
        ],
        "Input & output variables": [
          "Creating a template for Azure Web App",
          "Source code for the demo",
          "Deploying Web App",
          "Terraform Variables",
          "Overriding variables with .tfvars",
          "Overriding variables with command line",
          "Output variables",
          "Input & output variables"
        ],
        "Terraform execution plan": [
          "Execution plan overview",
          "Execution plan demo",
          "Terraform plan command"
        ],
        "Terraform state": [
          "Terraform state overview",
          "Terraform state demo",
          "Terraform state management."
        ],
        "How Terraform work with plan and state": [
          "How Terraform work with plan and state",
          "Quiz"
        ],
        "Terraform Workspace": [
          "Dev/Test/Prod Environments",
          "[Demo] Dev/Test/Prod Environments",
          "Deploy Web App and SQL Database",
          "Terraform Workspace",
          "[Demo] Terraform Workspace",
          "Terraform workspace could be used to manage DEV/TEST/PROD environments ?"
        ],
        "Deploy container services": [
          "Deploy AKS cluster",
          "[Demo] Deploy AKS cluster",
          "Deploy AKS, ACR and Permissions",
          "[Demo] Deploy AKS, ACR and Permissions",
          "Quiz"
        ],
        "Deploying Azure Container Apps": [
          "Introduction to Container Apps resource",
          "[Demo] Deploying the Terraform template for Container Apps",
          "Quiz"
        ],
        "Deploying PaaS services": [
          "Deploy Key Vault and Secrets",
          "[Demo] Deploy Key Vault and Secrets",
          "Key Vault with RBAC for Secrets",
          "[Demo] Key Vault with RBAC for Secrets",
          "Deploy Storage Account, Container and Blob",
          "[Demo] Deploy Storage Account, Container and Blob",
          "Quiz"
        ]
      },
      "requirements": [
        "Basic cloud services"
      ],
      "description": "Terraform is becoming the standard when it comes to deploying infrastructure into the cloud or on premise.\nIn this course you will learn how to create and deploy Terraform templates.\nWe will work with the different Terraform commands like init, plan, apply and destroy.\nWe'll explore terraform features like input and output parameters, the execution plan and the remote backend state.\nWe'll write templates for Web Apps, SQL Database, VMs, Storage, Kubernetes clusters and many more.\nWe'll create the DevOps CI/CD pipelines using Azure DevOps and Github Actions to deploy into multiple environments: dev, test and prod.\nThen we'll implement GitOps for Terraform using Atlantis.\nAlong all these demonstrations you'll also learn the Best practices in terms of security, configuration and scalability.\n\n\nI hope you are ready and excited for this journey!\nBring a coffee and lets get started.\n\n\nCurrent plan:\nIntro\nIntro to Terraform (Init, Plan, Apply, Delete)\nRequirements (Terraform, Azure subscription, Azure CLI, VS Code+TF plugin, any OS)\nResourceGroup\nDeploying Resource Group into Azure\nPay Attention to Resource Recreation\nValidate and Format Templates\nWebApp\nDeploying Web App\nAdding Variables File\nCreating Variables in .tfvars Files\nOverriding Variables in the command line\nCreating Output Variables\nExecution Plan\nOverview of Terraform Plan\nDemo\nTF_State\nWorking with Remote Backend State\nInfra Deployments\nDeploying SQL Server with a Database\nDeploying and configuring Web App and SQL Server\nDeploying Linux VM\nDeploying Windows VM with Azure Bastion\nDeploying AKS cluster\nDeploying AKS with Managed Identity and ACR\nTerraform features\nFunctions (for each, for, count, if/else, random, lower, upper, min, max…)\nDevOps with Terraform\nDeploy Terraform templates using Azure DevOps\nConfiguring the CI/CD pipelines\nUpcoming lectures:\nData Source\nWorkspaces/Environments\nTesting TF with Terratest\nMulticloud\nDeploy to AWS and GCP\nGitOps with TF (Atlantis…)\nTF with ARM\nTF competitors: Ansible, Pulumi, ARM, Cloud Formation\nTF Providers for Kubernetes, Helm, Docker, GIT…",
      "target_audience": [
        "Beginner to cloud automation",
        "Software developers switching to Ops or DevOps",
        "Students looking for more in depth course for IaC"
      ]
    },
    {
      "title": "Fundamentals of Backend Engineering",
      "url": "https://www.udemy.com/course/fundamentals-of-backend-communications-and-protocols/",
      "bio": "Understand backend communication design patterns, protocols, execution and proxying",
      "objectives": [
        "Learn the fundamentals of backend engineering",
        "Backend communication design patterns",
        "Understand how backend communication protocols work",
        "Comprehend how OS Kernel communicate with Backend Applications",
        "Operating System fundamentals (Thread, Process, async IO in linux)",
        "Learn HTTP/1.1, HTTP/2, HTTP/3",
        "Learn gRPC, WebRTC, WebSockets",
        "Learn TLS 1.2, TLS 1.3, QUIC 0RTT"
      ],
      "course_content": {
        "Introduction": [
          "Welcome",
          "Who is this course for?",
          "Course Outline",
          "Course Notes",
          "Download all slides, source code and references"
        ],
        "Backend Communication Design Patterns": [
          "Backend Communication Design Patterns Intro",
          "Request Response",
          "Synchronous vs Asynchronous workloads",
          "Push",
          "Polling",
          "Long Polling",
          "Server Sent Events",
          "Publish Subscribe (Pub/Sub)",
          "Multiplexing vs Demultiplexing (h2 proxying vs Connection Pooling)",
          "Stateful vs Stateless",
          "Sidecar Pattern"
        ],
        "Protocols": [
          "Protocols Intro",
          "Protocol Properties",
          "OSI Model",
          "Internet Protocol",
          "UDP",
          "TCP",
          "TLS",
          "HTTP/1.1",
          "HTTPS, TLS, Keys and Certificates",
          "WebSockets",
          "HTTP/2",
          "HTTP/3",
          "gRPC",
          "WebRTC"
        ],
        "Many ways to HTTPS": [
          "HTTPS Communication Basics Intro",
          "HTTPS over TCP with TLS 1.2",
          "HTTPS over TCP with TLS 1.3",
          "HTTPS over QUIC (HTTP/3)",
          "HTTPS over TFO with TLS 1.3",
          "HTTPS over TCP with TLS 1.3 and 0RTT",
          "HTTPS over QUIC with 0RTT"
        ],
        "Backend Execution Patterns": [
          "Backend Execution Patterns Intro",
          "The Process and The Thread and how they compete for CPU time",
          "How The Backend Accepts Connections",
          "Reading and Sending Socket Data",
          "The Listener, The Acceptor and the Reader",
          "Single Listener, Acceptor and Reader Thread Execution Pattern",
          "Single Listener, Acceptor and Multiple Readers Thread Execution Pattern",
          "Single Listener, Acceptor, Reader with Message Load Balancing Execution Pattern",
          "Multiple Accepter Threads on a Single Socket Execution Pattern",
          "Multiple Listeners, Acceptors and Readers with Socket Sharding Execution Pattern",
          "Backend Idempotency",
          "Nagle's Algorithm",
          "When do you use threads?"
        ],
        "Proxying and Load Balancing": [
          "Proxy vs Reverse Proxy",
          "Layer 4 vs Layer 7 Load Balancers",
          "WebSocket Proxying"
        ],
        "Extras": [
          "How ChatGPT uses Server Sent Events",
          "How I design software",
          "The Journey of a Request to the Backend",
          "The Journey of a Request to the Backend (Video)",
          "JSON Web Token (JWT), its Pros and Cons",
          "SELECT COUNT (*) can impact your Backend Application performance, here is why"
        ],
        "Bonus Content": [
          "How does the Kernel manage backend connections?",
          "Running out of TCP Ports",
          "Postgres failure caused by a Cisco router (TCP issue)"
        ]
      },
      "requirements": [
        "Intermediate programming skills (1-2 years)",
        "Having built a backend application",
        "Basic network fundamentals"
      ],
      "description": "Backend engineering is an art. During my 18 years career working with and building backend applications, I discovered that certain communication design patterns keep emerging. There are only handful of ways clients communicate with backend applications, although they might be more, I believe the patterns I discuss in this course are the most common. Examples of these patterns are request-response, publish-subscribe, short and long and push.\nBased on these communication design patterns, engineers may use a number of protocols for concrete communication. While core transport vehicles are limited to either TCP or UDP, tons of industry specific protocols are built on top of these two to address certain problems and use cases. Examples of these high level protocols are HTTP/1.1, HTTP/2, HTTP/3, gRPC, WebRTC and many more. Other transport protocols like QUIC was built on top of UDP to bring HTTP/2 streaming down at the transport level. Each protocol has its pros and cons and fits certain use cases. In the course, I discuss the top common protocols and provide examples and demos where applicable.\nBefore the client can send a request, it has to establish a connection to the backend. Understanding how the connection is established, and what parts of connection establishment is done at kernel and what parts are done at the backend application process is critical. How the connection is then accepted by the backend application and how it can accept connections as fast as possible so the kernel queue doesn’t get full otherwise clients can no longer connect.\nAfter the connection is established the client sends the request, but what happens exactly in the backend application to read the request? What exactly is a request? Understanding the cost of parsing a request based on the protocol makes the engineer appreciate the work done and equip her with better tools to troubleshoot performance problems or bugs.\nOnce the request reaches the backend, the application has to execute the request. The backend has a buffet of design choices when it comes to the style of execution it can choose. Understanding the difference between a process and a thread, multi-process, multi-threaded and the correlation to the number of CPU cores or hardware threads is crucial to pick the right execution pattern. One does not have to stick with these patterns but can invent new ones that suits their needs.\nThis course is designed for engineers who have built backend applications, it is an intermediate — advance level course, certain programming and networking knowledge is required so I recommend taking my fundamentals of network engineering course before taking this course if you don’t have the networking skills. I hope you enjoy this course, and thank you so much for considering it.",
      "target_audience": [
        "Backend Engineers",
        "FullStack Engineers",
        "Frontend Engineers interested in the Backend (must have built a backend app)",
        "Network engineers who want to get better at backend design",
        "Site reliability engineers"
      ]
    },
    {
      "title": "Java Data Structures & Algorithms: Ace Coding Interviews!",
      "url": "https://www.udemy.com/course/java-data-structures-algorithms-ace-coding-interviews/",
      "bio": "Data Structures and Algorithms in Java | Leetcode Java DSA | Animated Explanation | DSA Real World Use Cases in Java",
      "objectives": [
        "Understand Data Structures and Algorithms & How to Implement and Use them in Java",
        "Understand Big O Notation and How to Calculate Space & Time Complexities",
        "Improve your Problem Solving Skills",
        "Enhance your Programming Skills",
        "Leetcode Challenges with Video Solutions",
        "Understand How to Decide When to Use a Specific Algorithm or Data Structure for Different Use Cases",
        "Ace Coding Interviews"
      ],
      "course_content": {
        "Introduction": [
          "Why Should You Learn Data Structures and Algorithms ?",
          "What are Data Structures ?",
          "What are Algorithms ?",
          "IMPORTANT: Course Source Code"
        ],
        "Big O Notation": [
          "Introduction to Big O Notation",
          "Linear Complexity - O(n)",
          "Constant Complexity - O(1)",
          "Quadratic Complexity - O(n^2)",
          "Logarithmic Complexity - O(logn)",
          "Constants in Big O",
          "Dominant and Non-Dominant Factors in Big O",
          "Complexities Comparison"
        ],
        "Big O Notation: Practical": [
          "Big O Notation's Quiz",
          "Big O Calculation"
        ],
        "Linked Lists": [
          "Introduction to Linked Lists",
          "Linked List Class Implementation",
          "Linked List: Add Element",
          "Linked List: Append Implementation",
          "Linked List: Prepend Implementation",
          "Linked List: Iterating",
          "Linked List: Iterating Implementation",
          "Linked List: Removing Elements",
          "Linked List: Removing Elements Implementation",
          "Time Complexity of Linked Lists Operations",
          "When to Use Linked Lists",
          "Linked List Use Case: Shopping Cart",
          "Java Built-In LinkedList Class"
        ],
        "Linked Lists: Practical": [
          "Linked List's Quiz",
          "Music Playlist",
          "(Video Solution) Music Playlist",
          "Leetcode Challenge - Reverse Linked List",
          "(Video Solution) Leetcode Challenge - Reverse Linked List",
          "Leetcode Challenge - Middle of Linked List",
          "Leetcode Challenge - Kids With the Greatest Number of Candies",
          "Leetcode Challenge - Merge Two Sorted Lists",
          "Leetcode Challenge - Remove Nth Node from End of List",
          "Leetcode Challenge - Palindrome Linked List"
        ],
        "Doubly Linked Lists": [
          "Introduction to Doubly Linked Lists",
          "Doubly Linked List Class Implementation",
          "Doubly Linked List: Append Implementation",
          "Doubly Linked List: Prepend Implementation",
          "Doubly Linked List: Delete Implementation",
          "Doubly Linked List: Print Implementation",
          "Time Complexity of Doubly Linked Lists Operations",
          "Doubly Linked List Use Case: Text Cursor"
        ],
        "Doubly Linked Lists: Practical": [
          "Doubly Linked Lists Quiz"
        ],
        "Stacks": [
          "Introduction to Stacks",
          "Stack Implementation: Stack and Node Classes",
          "Stack Implementation: Push",
          "Stack Implementation: Pop & isEmpty",
          "Stack Use Case: Text Editor Undo Functionality",
          "Java Built-In Stack Class"
        ],
        "Stacks: Practical": [
          "Stack's Quiz",
          "Leetcode Challenge - Valid Parentheses",
          "(Solution) Leetcode Challenge - Valid Parentheses",
          "Leetcode Challenge - Removing Stars from String",
          "Leetcode Challenge - Remove Adjacent Duplicate Characters from String"
        ],
        "Queues": [
          "Introduction to Queues",
          "Queue Implementation: Queue and Node Classes",
          "Queue Implementation: Enqueue",
          "Queue Imeplementation: Dequeue",
          "Queue Use Case: Print Service",
          "Queue Interface in Java"
        ]
      },
      "requirements": [
        "Basic Java programming"
      ],
      "description": "Welcome to the Data Structures and Algorithms in Java Course!\n\n\nAre you a Java programmer who wants to write efficient code and improve your programming and problem solving skills ?\nDo you have an upcoming coding interview and you want to ace it with confidence ?\n\n\nIf the answer is yes, then this course is the right choice for you!\nIn this course you will learn everything about Data Structures and Algorithms and how to implement and use them in Java.\nThe concepts are explained with animations which makes it much more easier to understand and memorize.\n\n\nYou will also apply your knowledge throughout the course via coding exercises, real world use cases and Leetcode coding challenges with video solutions.\n\n\n\n\nThe course covers the following topics:\n\n\nGeneral\nWhy Should You Learn Data Structures and Algorithms ?\nWhat are Data Structures ?\nWhat are Algorithms ?\n\n\nBig O Notation\nLinear Complexity - O(n)\nConstant Complexity - O(1)\nQuadratic Complexity - O(n^2)\nLogarithmic Complexity - O(logn)\nConstants in Big O\nDominant and Non-Dominant Factors in Big O\nComplexities Comparison\n\n\nData Structures\nLinked Lists\nDoubly Linked Lists\nStacks\nQueues\nSets\nTrees\nTries\nHeaps\nHash Tables\nGraphs\n\n\nAlgorithms\nLinear Search\nBinary Search\nBubble Sort\nInsertion Sort\nSelection Sort\nMerge Sort\nRecursion\nTree Traversal\nGraph Traversal\n\n\nI'm confident that you will enjoy this course, but if you for some reason are not happy with the course it's backed by Udemy's 30 day money back guarantee, so nothing to lose!\n\nI'm excited to see you in the course, hit that enroll button and start your mastering Data Structures & Algorithms journey :)",
      "target_audience": [
        "Java Programmers Who Want to Master Data Structures and Algorithms",
        "Java Programmers Preparing for Coding Interviews",
        "Java Programmers Who Want to Write More Efficient Code and Improve Their Problem-Solving Skills"
      ]
    },
    {
      "title": "Testing In Agile",
      "url": "https://www.udemy.com/course/testing-in-agile/",
      "bio": "Learn the new testing activity approach in Agile.",
      "objectives": [
        "Get to know about traditional models and the need for Agile model to meet the needs of software development in the current competitive software market.",
        "The course will give a good grounding in Agile and one of the methodologies of implementing it, that is, Scrum.",
        "You will get to know about Scrum framework, Scrum Team, Product backlog, Sprint backlog, Sprint planning, Sprint review, Sprint retrospective, User story, story points, burndown charts and much more.",
        "As a tester or test manager you will get to know what it will mean for you to be in the Agile team and how you should prepare yourself. In fact, this course will prepare you for that.",
        "It is important to understand the role of testing in Agile and you will as tester get a complete picture about that and get trained to be effective in an Agile team.",
        "For experienced testers who are not in Agile model you will learn completely about testing in Agile and will be well prepared to move in such teams with ease and confidence.",
        "For experienced testers who are already in Agile but never had a formal training about Agile and testing in Agile, this course will train you and make you well prepared to be an effective Agile team member. It will also help you correct the wrong implementation of Agile if happening, in your team. Well, one way will be to have the whole team do this course.",
        "For Freshers, since the world of software development has moved on to Agile, hence, it is important that you be prepared for it. This course will prepare you for that and move you an edge above the others who are still not trained in it.",
        "There tools which are specifically targeted for Agile teams. Get to know about tools used for scrum management, TDD (test driven development), BDD (behaviour driven development) and automations frameworks.",
        "Go ahead, be proactive and take the next leap for your professional development and better career growth, and take the course."
      ],
      "course_content": {
        "Introduction to Agile": [
          "Welcome",
          "Typical Testing Challenges in Agile",
          "Case Study : BookWorm : Team, Kick-Off, Training",
          "Introduction To Agile",
          "Traditional Models",
          "Different Models",
          "Agile Approach and Agile Manifesto",
          "Principles in Agile",
          "Agile Manifesto",
          "Positioning Agile Testing",
          "Agile Team and Testing",
          "Agile vs Traditional",
          "Team One Approach",
          "Case Study : BookWorm : First Project Meeting"
        ],
        "Introduction to SCRUM": [
          "Getting Started",
          "What is Scrum",
          "Scrum Framework",
          "Scrum Team",
          "Scrum Events",
          "Scrum Artifacts",
          "Product \"Increment\" and \"Done\"",
          "Case Study : BookWorm : Sprint-0, Release Planning"
        ],
        "ATM : Agile Testing Matrix/Quadrants": [
          "Getting Started with ATM",
          "Quadrants",
          "Q1",
          "Q2",
          "Q3",
          "Q4"
        ],
        "Test Positioning in Scrum": [
          "Agile Manifesto and Testing Aspects",
          "Tester in Scrum Framework",
          "Tester in Scrum Team and Sprint Planning",
          "Tester in Daily Scrum",
          "Tester in Sprint Review and Retrospective",
          "Tester Input in Product Backlog",
          "Tester role in Burndown Charts and \"Done\"",
          "Assignments"
        ],
        "Role of Testers and Test Managers in Agile": [
          "Role of Tester in Agile",
          "Role of Test Manager in Agile",
          "Assignments"
        ],
        "Test Strategy and Planning in Agile": [
          "Test Strategy in Agile",
          "Test Planning in Agile",
          "Assignments"
        ],
        "Test Automation in Agile": [
          "Issues with Manual Testing",
          "Advantages of Automation",
          "Challenges in Automating",
          "Automation in ATM and Automation Pyramid",
          "Risks and ROI of Automation",
          "What not to Automate?",
          "Tool Choice",
          "Getting Started with Automation"
        ],
        "Regression Testing in Agile": [
          "Defining Scope",
          "Versioning and Resources",
          "Tools for Managing Regression Testing",
          "Using Automated Suite for Regression Testing",
          "Frequency of Regression Testing and Assignments"
        ],
        "Defect/Bug Management in Agile": [
          "Getting Started",
          "Deciding on bugs to log",
          "Using Tools for Bug Management",
          "Using Tools to Capture Defects Found During Reviews",
          "Advantages and Disadvantages of Using Tools",
          "Applying Agile Principles to Defect Management",
          "Approach for fixing bugs"
        ],
        "Test Reporting in Agile": [
          "Identifying Stakeholders",
          "Various Kinds of Reports",
          "Forms of Reports",
          "Test Results as Report in Themselves",
          "Automated Dashboard",
          "Assignment"
        ]
      },
      "requirements": [
        "part of software team"
      ],
      "description": "If we look around us the software is becoming main-stream in each and every walk of our lives. It is like being part of our blood and we live with it in each every moment of our life. Given this the traditional ways of software development are getting replaced with new ones which will cater to the increasing demands of market. The new ways will cater well to the needs of the users and customers. One of such new model which has become very popular and well suited to this new paradigm is Agile model. Now, given there was a way testing was done in traditional model, the natural question is how is testing placed and done in Agile. This course, “Testing in Agile” is designed keeping this in mind. Even for those who are not yet exposed to Agile this course will fit well as the course has been designed keeping that in mind. This course applies to all (programmer, tester, business analyst, managers etc. ) in the team.",
      "target_audience": [
        "Software professionals"
      ]
    },
    {
      "title": "Automate with Python",
      "url": "https://www.udemy.com/course/automate-with-python/",
      "bio": "Learn to Create Automation Scripts with Python",
      "objectives": [
        "Automate your Desktop",
        "Use APIs",
        "Access a Database",
        "Scrape Data from the Web",
        "Read/Write Files",
        "Run System Commands"
      ],
      "course_content": {},
      "requirements": [
        "Basic Python knowledge"
      ],
      "description": "This course is designed for those who want to learn how to automate tasks and processes with Python. You will learn how to write scripts that automate daily tasks.  This course will cover topics such as Desktop Automation, Databases,  Working with APIs.  By the end of this course, you will have the skills to create automated solutions and develop programs that can be used in a variety of applications.\nYou will learn how to create scripts to automate mundane tasks, and use the powerful libraries available in Python to get the most out of your code. This course is perfect for anyone looking to learn how to use Python to automate their daily tasks and make their workload easier.\nThis course requires basic Python knowledge. Python is a powerful and popular programming language that is easy to learn and use. It is an interpreted language, meaning that it is read and executed line by line, making it easy to debug and modify. Python is also versatile and can be used for web development, data analysis, artificial intelligence, game development, and more. It has a large library of tools and modules that allow developers to quickly and easily build complex applications. Python is also open source and free, meaning that anyone can use it without having to pay for a license.",
      "target_audience": [
        "Beginner Python developers"
      ]
    },
    {
      "title": "TDD Fundamentals in TypeScript",
      "url": "https://www.udemy.com/course/tdd-fundamentals-in-typescript/",
      "bio": "This course covers the fundamentals of Test Driven Development using TypeScript as the language of practice",
      "objectives": [
        "Structure a unit test (Understand the anatomy of a good test)",
        "Structure Test Classes and Projects",
        "Understand Testing Strategies and Approaches",
        "Identify Boundaries and Equivalence Partitions",
        "Name a Test",
        "Break Dependencies with Test Doubles",
        "Grow a Requirement using TDD",
        "Balance High Level Design with TDD Practice",
        "Recognize the Flow/Cadence/Rhythm of TDD",
        "Understand how Bad Tests Show High Code Coupling and how Good Tests Show Low coupling"
      ],
      "course_content": {
        "The What and Why of TDD": [
          "Introduction and Course Structure",
          "What is TDD",
          "Why TDD",
          "Course Notes and Exercises",
          "A Brief Note about Extension Exercises"
        ],
        "Introduction to Unit Testing": [
          "Getting set up with TypeScript and Jest",
          "Test Frameworks and Runners",
          "The Anatomy of a Test: Naming",
          "The Anatomy of a Test: Arranging",
          "The Anatomy of a Test: Structure",
          "The FIRST Principles: Introduction",
          "The FIRST Principles: Fast",
          "The FIRST Principles: Isolated/Independent",
          "The FIRST Principles: Repeatable",
          "The FIRST Principles: Self-validating",
          "The FIRST Principles: Thorough",
          "The FIRST Principles: Summary"
        ],
        "The Test Driven Development Cycle": [
          "The Structure of Each Section",
          "Kata Intro: Rock, Paper, Scissors",
          "The 3 Laws of TDD",
          "The Red Green Refactor Cycle",
          "The Fake It Green Bar Pattern",
          "Getting Started on the Rock, Paper, Scissors Kata",
          "Worked Example: Rock, Paper, Scissors",
          "Worked Example: Rock, Paper, Scissors Extension",
          "Rock, Paper, Scissors Solutions Downloadable"
        ],
        "Boundaries, Equivalence Partitions and the Triangulation Patter": [
          "Kata Intro: Fizz Buzz",
          "Boundaries and Equivalence Partitions",
          "The Triangulation Green Bar Pattern",
          "Using Test Cases in Jest (test.each())",
          "Getting Started on the Fizz Buzz Kata",
          "Worked Example: Fizz Buzz",
          "Worked Example: Fizz Buzz Extension",
          "Fizz Buzz Solution Downloadable"
        ],
        "Naming Tests (and other things)": [
          "Kata Intro: The Age Calculator",
          "The (Many) Stages of Naming",
          "Getting Started on the Age Calculator Kata",
          "Worked Example: The Age Calculator",
          "The Age Calculator Solution Downloadable"
        ],
        "Green Bar Patterns and TDD Gears": [
          "Kata Intro: The String Calculator",
          "The One-to-Many Green Bar Pattern",
          "The Obvious Green Bar Pattern",
          "The Backout Green Bar Pattern",
          "The Learning Test Green Bar Pattern",
          "The TDD Gears Model",
          "Getting Started on the String Calculator Kata",
          "Worked Example: The String Calculator",
          "The String Calculator Solution Downloadable"
        ],
        "Using Test Doubles": [
          "Kata Intro: The Character Copy Kata",
          "What are Test Doubles?",
          "Fakes, Stubs and Mocks",
          "Test Doubles: A Code Example",
          "The Leaking Implementation Trap",
          "Getting Started on the Character Copy Kata",
          "Worked Example: The Character Copy Kata",
          "The Character Copy Kata Solution Downloadable"
        ],
        "SOLID and Putting it all Together": [
          "Kata Intro: The CSV File Kata Requirement 1",
          "The Single Responsibility Principle (S of SOLID)",
          "The Open/Closed Principle (O of SOLID)",
          "The Liskov Substitution Principle (L of SOLID)",
          "The Interface Segregation Principle (I of SOLID)",
          "The Dependency Inversion Principle (D of SOLID)",
          "Getting Started on the CSV File Kata: Requirement 1",
          "The CSV File Kata Requirement 1 Solution Downloadable",
          "The CSV File Kata Requirement 2 Intro",
          "The CSV File Kata Requirement 3 Intro",
          "The CSV File Kata Requirement 4 Intro",
          "The CSV File Kata Requirement 5 Intro",
          "Worked Example: CSV File Kata Requirement 1",
          "Worked Example: CSV File Kata Requirement 2",
          "Worked Example: CSV File Kata Requirement 3",
          "Worked Example: CSV File Kata Requirement 4",
          "Worked Example: CSV File Kata Requirement 5"
        ],
        "Closing and What Next?": [
          "Thanks for Doing the Course!"
        ]
      },
      "requirements": [
        "Developers must be able to code in Typescript",
        "Visual Studio"
      ],
      "description": "TDD stands for Test-Driven Development. It is a software development process for developing an application by using automated tests as the primary tool for development. These tests are written before coding and are the primary unit of quality ensuring that coding is correct, reliable and bug-free.\nTDD has become widely accepted by the TypeScript developer community as an essential skill in today's world of web applications, service-oriented architectures and desktop application development. The TDD Fundamentals in TypeScript course is a step-by-step TypeScript programme designed to make you a more proficient TypeScript Developer by teaching you the skill of TDD. It covers the fundamentals of Test-Driven Development enabling you to get up to speed quickly within the practice of TDD in TypeScript.\nThe TDD Fundamentals in TypeScript course is very hands-on: you will spend your time learning the practice of Test Driven Development through a sequence of coding exercises interspersed with theory. This course has been run in person dozens of times with a variety of groups, and through this process we have honed the process of teaching and learning TDD.\nTarget outcomes:\nUnderstand what TDD is and why you would want to practice it\nUnderstand the anatomy of a test, and how to write good unit tests\nUnderstand and use the flow of Test-Driven Development and to use a toolbox of tools and techniques on what to do if they are not experiencing this rhythm.\nUnderstand how high-level design and TDD work together to achieve great designs\nWrite Unit Tests for a reasonably complex solution that are maintainable into the future.\nTake a requirement (User Story/Use Case) and implement the relevant tests and code.\nWrite far more loosely coupled code by using the appropriate Test Doubles.\nUse the appropriate mocking framework for dynamically creating the appropriate test doubles",
      "target_audience": [
        "Software Developers who have at least two years production programming experience with Typescript"
      ]
    },
    {
      "title": "Build Microservices with .NET & Amazon Web Services",
      "url": "https://www.udemy.com/course/build-microservices-with-aspnet-core-amazon-web-services/",
      "bio": "Event-Driven Microservices with Dotnet and AWS, Lambda, Docker, Kafka, RabbitMQ, etc.",
      "objectives": [
        "Solution Architecture of Microservices-based Systems",
        "Microservices and API Security with AWS Cognito",
        "API Gateway pattern and the AWS API Gateway service",
        "The Microservice Chassis: Serverless and Containerised",
        "Build, Deploy and Secure Serverless Microservices",
        "Mocking Techniques for Rapid Microservices Development",
        "Domain Driven Design and Its Relevance to Microservices",
        "Command and Query Segregation Pattern (CQRS)",
        "Event Bus and the Fan Out Pattern",
        "The Idempotent Consumer Pattern with AWS SNS and DynamoDB",
        "Using API Gateway pattern as a reverse proxy for private APIs",
        "Docker and Containerization",
        "Deploying Microservices to AWS ECS with Fargate Launch Type",
        "Deploying Microservices to AWS ECS with EC2 Launch Type",
        "System Resiliancy and the Event Sourcing Pattern",
        "The Service Discovery Pattern and AWS CloudMap",
        "The Sidecar Pattern",
        "Logging and Monitoring for Microservices in AWS",
        "Apache Kafka",
        "RabbitMQ"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Introduction to Microservices": [
          "Microservices vs. Monolithic",
          "Anatomy of a microservices-based application"
        ],
        "The Hotel Booking Project": [
          "Hotel Booking System",
          "Preparing the Development Environment"
        ],
        "Identity and Access Management :: AWS Cognito": [
          "Introduction to AWS Cognito",
          "Setting up AWS Cognito for Hotel Booking system",
          "Sign in with AWS Cognito",
          "Adding a Page for Creating Hotels"
        ],
        "API Gateway": [
          "API Gateway Pattern and Tools",
          "Creating a Mock API with AWS API Gateway",
          "Authenticating API Requests",
          "Adding CORS Headers to APIs"
        ],
        "Building Serverless Microservices": [
          "The concept of a Microservice Chassis :: Serverless & Containrisation",
          "Creating and Deploying an AWS Lambda Microservice",
          "Capturing the Request Body in AWS Lambda as an API Backend",
          "Performing Authorization in a Backend-Lambda",
          "Storing Data and Files in AWS",
          "Creating an Execution IAM Role for Lambda",
          "Create and Configure S3 Buckets",
          "Uploading Files and Images to AWS S3",
          "Creating and Configuring a DynamoDB Table",
          "Storing Information in DynamoDB",
          "Connecting API Gateway to Lambda via a Proxy Resource",
          "Testing Proxy API with Lambda",
          "Domains and Boundaries",
          "Creating a RestFul GET API in API Gateway with a Lambda Microservice",
          "Practice Creating and Configuring an AWS Lambda Function",
          "Practice Creating a Proxy REST API in AWS API Gateway",
          "Review Your Practice Results",
          "Exploring Jason Web Tokens (JWT) and JSON Web Key Sets (JWKS)",
          "Protecting a GET API with Lambda Authorizers - Part 1",
          "Protecting a GET API with Lambda Authorizers - Part 2",
          "Protecting APIs with API Gateway Lambda Authorizers - Policy Documents",
          "The CQRS Pattern",
          "The \"Fan Out\" and \"Idempotent Consumer\" Patterns",
          "Publishing Events to AWS SNS",
          "Setting up Elasticsearch for Search Microservice",
          "Implementing the Idempotent Consumer Pattern",
          "Working with ElasticSearch & Testing an AWS Lambda Locally",
          "Practice: Deploy the Updater Service",
          "Subsciring a Microservice to Event Bus"
        ],
        "Building Containerised Microservices": [
          "Introdutction to Containerized Microservices",
          "The Search Microservice",
          "Creating a Docker Image",
          "Pushing a Docker Image to Amazon Elastic Container Registry (ECR)",
          "Deploying a Microservice to AWS ECS with Fargate Launch Type",
          "Creating a Proxy API for a Containerised Microservice",
          "Creating a an API for a Containerised Microsrevice with a Private IP",
          "Search Microserice in Action",
          "The Circuit Breaker Pattern",
          "The Event Sourcing Pattern for Ultimate System Resiliancy",
          "Event Sourcing Microservice",
          "Booking Microservice - Command",
          "Deploying a Containerized Microservice with AWS Fargate Service Model",
          "Creating and Securing an HTTP API in AWS API Gateway",
          "CQRS: Building a Query Microservice with Docker and ECS"
        ],
        "Service Discovery": [
          "The Service Discovery Pattern and AWS Cloud Map",
          "Deploying a Microservice to AWS ECS and AWS CloudMap",
          "Creating an HTTP API in AWS Api Gateway and AWS Cloud Map",
          "View and Confirm Hotel Bookings",
          "Creating the Review Booking Microservice",
          "Deploying a Docker Microservice to AWS ECS with EC2 Launch Type",
          "Creating an HTTP API for ECS Miroservice with EC2 Launch Type",
          "The Sidecar Pattern",
          "Booking Review Sidecar Microservice",
          "Booking Review - Website Demo"
        ],
        "Logging for Microservices": [
          "Introduction to Logging and Microservices",
          "Logging Solutions in AWS",
          "AWS CloudWatch",
          "Setting up AWS Cognito Identity Pool for Kibana",
          "Creating ELK Stack with AWS OpenSearch",
          "Shipping Logs from AWS Cloudwatch to ELK (Elasticsearch and Kibana)"
        ],
        "The Saga Pattern": [
          "Events vs. Messages",
          "Introduction to Saga Pattern",
          "Deep Dive into Choreography Pattern",
          "Deep Dive into Orchestration Pattern",
          "Orchestration and Choreography Patterns Comparison"
        ]
      },
      "requirements": [
        "Some C# Programming Skills",
        "Basic knowledge of Amazon Web Services"
      ],
      "description": "Are you ready to take your software development or architecture career to new heights and stay at the forefront of the ever-evolving industry? Look no further.\n\n\nIn today's digital landscape, where online services reign supreme, traditional software design and development approaches can no longer meet the demands of modern systems handling massive user bases and rapid scalability requirements.\n\n\nEnter microservices architecture, the game-changer you've been waiting for. By breaking down intricate software systems into more minor, autonomous services, development teams gain the power to create and enhance products with unmatched speed and agility, seamlessly adapting to dynamic environments and technological advancements. With the widespread availability of cloud computing platforms such as Amazon Web Services (AWS), constructing distributed, microservice-based applications has never been more accessible.\n\n\nA comprehensive understanding of microservices and their design patterns is essential to position yourself as a highly sought-after engineer or architect in the technology industry. This is where our groundbreaking microservices course comes in.\n\n\nThis course empowers you to build various microservices using .Net  (8 and 9 or above) and AWS, delving into serverless and containerized options. You won't just learn theory; you'll gain hands-on experience by coding the microservices alongside our expert instructors, fostering a deep understanding and practical expertise. As you progress, you'll even tackle a real-world Hotel Management project, honing your skills in vital design patterns like CQRS, Service Discovery, and Saga.\n\n\nEnrol in our microservices course today and propel yourself to the next level of professional success. The future of software development and architecture awaits.",
      "target_audience": [
        "Developers and Engineers",
        "DevOps Engineers",
        "Solutions Architects",
        "Technical Managers"
      ]
    },
    {
      "title": "Dynamic programming",
      "url": "https://www.udemy.com/course/dynamic-programming-x/",
      "bio": "Learn how to solve almost any dynamic programming problem with both its approaches (memoization and tabulation)",
      "objectives": [
        "Importance of dynamic programming",
        "How to use the top-down approach of dynamic programming (memoization)",
        "How to use the bottom-up approach of dynamic programming (tabulation)",
        "How to solve almost any dynamic programming problem"
      ],
      "course_content": {
        "Introduction": [
          "What is dynamic programming",
          "Reminder on recursion"
        ],
        "Top-down approach (memoization) and bottom-up approach (tabulation)": [
          "Top-down approach (memoization)",
          "Bottom-up approach (tabulation)",
          "Top-down vs Bottom-up"
        ],
        "How to solve almost any dynamic programming problem": [
          "Directed acyclic graphs in dynamic programming"
        ],
        "Full example: minimum cost path": [
          "Minimum cost path problem",
          "How to solve almost any dynamic programming problem",
          "Minimum cost path problem (code)"
        ],
        "Practice: Paths in matrix problem": [
          "Paths in matrix (problem)",
          "Paths in matrix (solution)",
          "Paths in matrix (code)"
        ],
        "Practice: House robber problem": [
          "House robber (problem)",
          "House robber (solution)",
          "House robber (code)"
        ],
        "Practice: Longest common subsequence problem": [
          "Longest common subsequence (problem)",
          "Longest common subsequence (solution)",
          "Longest common subsequence (code)"
        ],
        "Practice: Gold mine problem": [
          "Gold mine (problem)",
          "Gold mine (solution)",
          "Gold mine (code)"
        ],
        "Practice: Edit distance problem": [
          "Edit distance (problem)",
          "Edit distance (solution)",
          "Edit distance (code)"
        ],
        "Practice: Ways to climb problem": [
          "Ways to climb (problem)",
          "Ways to climb (solution)",
          "Ways to climb (code)"
        ]
      },
      "requirements": [
        "Programming basics",
        "Algorithms and data structures basics"
      ],
      "description": "WARNING: The instructor is not currently available to answer questions regarding this course\n\n\nDynamic programming is one of the most important and powerful algorithmic techniques that can be used to solve a lot of computational problems, it's a fundamental technique to learn to strengthen your algorithms and problem solving skills\nBut, a lot of students find hard times understanding dynamic programming and being able to apply it to solve problems, if you are in this situation, this course is made for you!\n\n\nWhy you should take this course:\nCovers all what you need to know to start using dynamic programming to solve problems (introduction, recursion, how to recognize a dynamic programming problem, memoization, tabulation...)\nShows you a technique to solve almost any dynamic programming problem\nHas an active instructor that is ready to answer to your questions and doubts in case you don't understand something\nExplains the time and space complexity analysis of each solved problem\nIncludes 20 different interesting dynamic programming problems to practice on with the ability to test your Python solution on different test cases before watching the solution\n\n\nPractice problems are:\nPaths in matrix\nHouse robber\nLongest common subsequence\nGold mine\nEdit distance\nWays to climb\nShortest common supersequence\nCoin change\n0-1 Knapsack\nSubset sum\nLongest increasing subsequence\nWays to decode\nRod cutting\nInterleaving string\nSquare matrix of ones\nPartition problem\nSorted vowel strings\nMinimum cost for tickets\nWord break\nMatrix chain multiplication\n\n\nIf you have any other question concerning this course that you want to ask before enrolling, you can send me a message on Instagram at @inside.code\n\n\nEnjoy!",
      "target_audience": [
        "Computer science students",
        "Software engineering students",
        "Programmers",
        "Competitive programmers"
      ]
    },
    {
      "title": "Python Performance Optimization",
      "url": "https://www.udemy.com/course/python-performance-optimization/",
      "bio": "Increase Execution Time",
      "objectives": [
        "Make Python run faster",
        "Tricks to speed up your code",
        "How to call C code from Python",
        "Best practices"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Measure Execution Time",
          "Cprofile",
          "More on profiling",
          "Quiz"
        ],
        "Quick Tips": [
          "Tip 1",
          "Tip 2",
          "Quiz"
        ],
        "Optimizing code": [
          "Introduction",
          "Builtin Functions",
          "Additional Info",
          "Functions",
          "Lists",
          "Additional info",
          "Modules",
          "Concat",
          "Quiz"
        ],
        "Speed Trick": [
          "Introduction",
          "Speed Trick",
          "Speed Trick: Additional"
        ]
      },
      "requirements": [
        "Basic Python knowledge required"
      ],
      "description": "Python is an interpreted, object-oriented programming language. it incorporates modules, exceptions, dynamic typing, very high level dynamic data types, and classes. python combines remarkable power with very clear syntax.\nDespite it's popularity, it's often accused of being slow. In this course you will learn how to optimize the performance of your Python code. You will learn various tricks to reduce execution time.\nA lot of people have different definitions of performance. When I say “performance”, I’m talking about:\nHow quickly does the code execute? Meaning how long until the output is returned?\nOf course, there are other metrics for measuring the performance of a system, but this code has a focus on speed.\nThe faster your code executes, the better it is. Who has time to wait for computer execution? Especially when it's not necessary. If you come from another programming language, you may not know about some ways to speed up your Python code. If you are a Python coder, you may not know about these tricks either.\nIf you already know Python and want to optimize your code or increase your Python skills, this course is for you. This is an intermediate course, you should already know how to write Python code. But if you are a beginner with prior programming experience, you might be able to follow along with all the concepts explained in this course.",
      "target_audience": [
        "Python developers interested in Performance Optimization"
      ]
    },
    {
      "title": "Office365 and AzureAD for Developers",
      "url": "https://www.udemy.com/course/office365dev/",
      "bio": "Understand the fundamental AzureAD concepts necessary for calling Office365 APIs, 3rd party APIs, and custom APIs",
      "objectives": [
        "Write apps for AzureAD",
        "Write apps for Office 365",
        "Understand all auth related concepts and scenarios"
      ],
      "course_content": {
        "Introduction": [
          "History of SharePoint",
          "Developer Choices for the Office365 developer",
          "Structure of this course"
        ],
        "WSPs or Solution Packages": [
          "What are solution packages?",
          "Writing and Deploying a solution package"
        ],
        "SharePoint Add-ins also known as Apps": [
          "An introduction to Apps",
          "Advantages of the App Model",
          "What am I going to talk about",
          "SharePoint Apps - Golden Rules",
          "Kinds of Apps",
          "Setting up your environment for Apps",
          "What I will and wont cover as Demos",
          "Writing a SharePoint hosted app",
          "Writing an AppPart",
          "An introduction to Provider Hosted Apps",
          "Writing a Provider Hosted App"
        ],
        "Introduction to Azure AD and Office 365 APIs": [
          "Office 365 APIs and Microsoft Graph",
          "What is Azure AD",
          "Why not just use on-prem AD?",
          "Different ways to setup Azure AD",
          "Azure AD for Developers",
          "ADAL or Active Directory Authentication Libraries",
          "Registering your Apps",
          "Single Tenant vs Multi Tenant",
          "Various dev. scenarios to learn"
        ],
        "Setting up AzureAD": [
          "Setting up Azure AD without Office 365",
          "A royal tour of AzureAD features",
          "Adding a user in Azure AD",
          "Managing Azure AD using PowerShell",
          "Using AzureAD with Office365"
        ],
        "Web Browsers accessing Web Applications secured by AzureAD": [
          "Description of Scenario",
          "Authentication Protocol Flow",
          "Token Expiration",
          "Demo: A sample MVC application",
          "Demo: Nuget packages for adding AzureAD Authentication",
          "Demo: Setting up Auth using OWIN startup",
          "Demo: Adding OpenIDConnect sign in and sign out",
          "Demo: Register your web app in AzureAD",
          "Demo: Running our App",
          "Examining OpenID connect parameters"
        ],
        "JavaScript SPA (single page app) accessing AzureAD protected APIs": [
          "Description of scenario",
          "Authentication Protocol Flow",
          "ADAL.js",
          "OAuth2 Implicit Grant Protocol",
          "Session management without refresh tokens",
          "Renewing access tokens",
          "Single Tenant vs. Multi Tenant",
          "Demo: Creating our API without authentication",
          "Demo: Creating the SPA, without any authentication",
          "Demo: Adding support for CORS",
          "Demo: Securing our API using AzureAD",
          "Demo: Registering our WebAPI in AzureAD",
          "Demo: Securing the JavaScript SPA using ADAL.js",
          "Demo: Registering the SPA in AzureAD",
          "Demo: Setting permissions for our SPA",
          "Demo: Enhancing the application using ADAL.js",
          "Demo: Running the application",
          "Demo: Decrypting JWT tokens",
          "Demo: ADAL local resources"
        ],
        "JavaScript SPA (single page app) accessing Microsoft Graph": [
          "An overview of Microsoft Graph",
          "Demo: Creating a Microsoft Graph SPA",
          "Demo: Registering your SPA in Office365 AzureAD",
          "Demo: Enabling OAuth2 Implicit Flow",
          "Demo: Granting Permissions to access Microsoft Graph",
          "Demo: Running and Debugging your SPA",
          "Demo: Office 365 SharePoint pages as Microsoft Graph SPAs"
        ],
        "Native apps accessing AzureAD protected APIs": [
          "Description of scenario",
          "OAuth 2.0 Authorization Code Grant",
          "Authentication Protocol Flow",
          "Single Tenant vs. Multi Tenant",
          "Demo: Setting up the Web API",
          "Demo: Writing the Native App",
          "Demo: Nuget packages for the native app",
          "Demo: Adding references",
          "Demo: Adding authentication logic",
          "Demo: Redirect URIs for native apps",
          "Demo: Managing and Securing tokens in native apps",
          "Demo: Adding sign in and sign out logic",
          "Demo: Making an authenticated call to the service",
          "Demo: Running and debugging the application"
        ],
        "Native apps calling Office 365 Mail API": [
          "Description of the scenario",
          "Demo: dev.office.com your source for APIs",
          "Demo: Registering your app on dev.office.com",
          "Demo: Registering your app in Office365",
          "Demo: Giving permissions to read mail and native app reading mail"
        ]
      },
      "requirements": [
        "You should have a good grasp on ASP.NET",
        "Some understanding of AngularJS is desirable",
        "Some understanding of WPF is desirable"
      ],
      "description": "Developing for Office365 is figuring out Azure AD, and mostly REST queries. The REST queries are the easy part. But a proper understanding of how Azure AD works from a developer’s perspective is the more important part. Whether you are developing for Office 365 or not, as your organization embraces the cloud, a solid understanding of developer concepts in Azure AD is necessary. This course provides hands on explanations of all the AzureAD scenarios you need to know as a developer, followed by tying that knowledge in Office 365 APIs and the Microsoft Graph. Lots of hands on examples and code in this course.",
      "target_audience": [
        "Microsoft developers intending to target Office 365",
        "Microsoft developers intending to target Azure AD",
        "Microsoft developers who want to learn about security in the cloud"
      ]
    },
    {
      "title": "SwiftUI Covid19 Statistics tracking with REST API & Swift 5",
      "url": "https://www.udemy.com/course/swiftui-covid19-statistics-tracking-with-rest-api-swift-5/",
      "bio": "Build COVID-19 statistics tracking app for iOS13, using SwiftUI and Swift 5.1, REST API and JSON Parsing",
      "objectives": [
        "Building application in SWIFTUI",
        "Working with 3rd party libraries",
        "Working with REST APIs",
        "Parsing JSON data",
        "Creating Custom User Interface",
        "Working with classes"
      ],
      "course_content": {
        "iOS 15 course (new, different from iOS 13)": [
          "Part 1",
          "Part 2",
          "Part 3",
          "Part 4",
          "Part 5",
          "Part 6",
          "Part 7",
          "Part 8",
          "Part 9",
          "Part 10",
          "Part 11",
          "Part 12",
          "Part 13",
          "Source files",
          "iOS15 Course completed",
          "Source code to the new app"
        ],
        "iOS13 Course Introduction (OLD)": [
          "Introduction"
        ],
        "Setup Project": [
          "Setting up the project and registering for API"
        ],
        "Building The Application": [
          "Creating model and data listeners",
          "Creating model and data listeners part 2",
          "Finishing Fetching Data from REST API",
          "Creating Tab View and custom headers",
          "Creating Tab View and custom headers part 2",
          "Creating Total Data View",
          "Adding Search Bart",
          "Presenting country details view",
          "Creating map View",
          "Adding map view to map view controller",
          "Adding new API to the project",
          "Creating DetailDataObject from API",
          "Showing new results in detail view",
          "Showing new results in detail view part 2",
          "Fixing country name bug",
          "Source code"
        ]
      },
      "requirements": [
        "You will need xCode",
        "Basic knowledge of SwiftUI and Swift"
      ],
      "description": "The course has been updated to iOS 15, now it includes 2 different applications with different API as source.\nP.S. One of APIs used in the old, iOS13 course has stopped working, but you still can follow the videos.\n\n\nIn SwiftUI Covid19 Statistics tracking with REST API & Swift 5, we are going to build COVID-19 Statistics tracking application.\n\n\nUnlike any other courses found on Udemy, I always teach full real-world apps, when we finish with the course, we are going to have an app ready to post to AppStore.\nWhat our app will include:\nMake the beautiful user interface with the new SWIFTUI\nCreating custom objects in SwiftUI\nWorking with REST APIs\nIntegrating 3rd party libraries to SWIFTUI project\nDark mode integration\nThis SwiftUI Covid19 Statistics tracking with REST API & Swift 5 is NOT a beginner-level course. You need to know your way around the xCode, be familiar with it, you have to have basic knowledge in Swift, SwiftUI, and application building. We are going to start from scratch and build the application together. All assets will be provided by me. I will type and explain every line of code. By the time we finish, you will learn a lot of new things even if you are an experienced iOS developer.\nThe course will teach you how to write clean and readable code, structure your app development, so even if you get back to your code in a few years, you can read and understand it clearly.\nWe are also proud to say that we have one of the best Support available on Udemy! Our Q/A Section is constantly monitored and all questions are answered within a few hours, Sometimes we even chat with students in real-time to help them with the issues they may face during the study.\nDon’t waste your time on low-quality courses where you don't even get the support of the instructor\nYour time is precious. We offer the best video courses with carefully crafted content, we are learning by coding!\nDon't just take our word for it, check out our other courses and what other students have to say about our courses!\n\"This course is so far the best course I took in UDEMY. I really learned something. Totally worth the time. Won't regret it. The instructor was responsive too and the course is new and knowledgeable.\" J Nima\n\"An excellent Tutorial by David. Very good explanation\" Tapan Kumar Raut\n\"There is nothing on Udemy like David's courses! I cannot recommend his courses enough. Best teacher out there, very responsive as well. \" Kris\n\"I really do love the approach, the structure of the course gives you the ability to move forward smoothly, and efficiently gain as much knowledge as possible, the instructor really goes in-depth, it's incredibly comprehensive, not to forget that this is a real-world project, and the advanced concepts gained here make me all confident that I'll be able to build my own apps in a very effective way. the course is well taught, and it really deserves the 5 stars, the instructor as well, explains things in a very clear, clean way. Definitely enjoyed the Course. and definitely, Thumbs Up.\" Yen Loo\n\"This is one of the most complete and comprehensive iOS projects on Udemy! Everything works! No broken code! You learn Firebase, Onesignal, and Backendless in one project. The instructor is always accessible, he goes for quality, not quantity. I still have a way to go, but so far it has kept me completely engaged and focused! I wish there were more courses like this! I will definitely purchase another from David.\" antr8tr\nWe are so confident that you'll love this course that we're offering a FULL money-back guarantee for 30 days, No Questions Asked! So it's a complete no-brainer, sign up today with ZERO risks and EVERYTHING to gain.\nSo what are you waiting for? Click the Buy Now button and join the best SwiftUI Covid19 Statistics tracking with REST API & Swift 5 development course and let's get started.",
      "target_audience": [
        "Any one who would like to learn iOS development and build beautiful iOS applications"
      ]
    },
    {
      "title": "The Complete MacOS Developer Course - Apps for the Desktop!",
      "url": "https://www.udemy.com/course/macos-programming-for-ios-developers-mac-apps-os-x-cocoa/",
      "bio": "Using your iPhone development background, create Mac apps with Cocoa using the latest Swift 3 and Xcode 8 OS X",
      "objectives": [
        "Learn how to create fully functional MacOS apps",
        "Work with Parse's Open Source Code to make a back-end",
        "Create status bar Mac apps",
        "Create command line Mac apps",
        "Work with the Twitter API",
        "Create games with SpriteKit"
      ],
      "course_content": {
        "Welcome": [
          "Introduction"
        ],
        "ToDo List": [
          "Intro",
          "Sketch",
          "Storyboards and the UI",
          "CoreData",
          "Saving",
          "Pulling from CoreData",
          "TableViews for MacOS",
          "NSTableCellView",
          "Delete",
          "Outro"
        ],
        "Link It": [
          "Intro",
          "Sketch",
          "Status Bar",
          "Icon",
          "Pasteboards",
          "Get the URL",
          "Clear Pasteboard",
          "Fix the URL",
          "Export Your App",
          "Outro"
        ],
        "Pod Player": [
          "Intro",
          "Sketch",
          "SplitViewController",
          "Podcasts",
          "Downloading XML",
          "XML Parsing",
          "MetaData Parsing",
          "Save Into CoreData",
          "Show All the Podcasts",
          "Confirm Data",
          "Podcast Details Design",
          "Passing Data",
          "Details and Deleting",
          "Getting Episodes",
          "Parsing Episodes",
          "Play Audio",
          "Play and Pause",
          "Custom Table Cell Views",
          "Polish!",
          "Outro"
        ],
        "Weather": [
          "Intro",
          "Sketch...kinda",
          "Command Line Basics",
          "Yahoo Weather API",
          "While Loop to Stay Alive",
          "SwiftyJSON",
          "URL Encoding",
          "Installing",
          "Outro"
        ],
        "Touch Bar Tutorial": [
          "Touch Bar Tutorial"
        ],
        "TweetGram": [
          "Intro",
          "Sketch",
          "Creating a Twitter Application",
          "Cocoapods",
          "Setting Up OAuthSwift",
          "Twitter API",
          "Tweet Mode Extended",
          "Drilling Down to the Image",
          "Storyboard Time",
          "UserDefaults",
          "Login and Logout Logic",
          "CollectionViews",
          "Downloading Images",
          "Opening Tweet for More Deets",
          "Polish",
          "Outro"
        ],
        "Slack Clone": [
          "Intro",
          "Sketch",
          "Why Use Parse?",
          "Parse Server and Heroku",
          "Parse Server Create An Object",
          "Parse Dashboard",
          "Starting Our App",
          "Window Controllers",
          "Switching View Controllers",
          "Parse SDK",
          "Creating A User",
          "Choosing A Picture",
          "Profile Pic",
          "Login",
          "Chat SplitViewController",
          "Logout",
          "Managing Window Controllers",
          "Adding Channels",
          "Queries",
          "Chat Design",
          "Setting Up A Channel",
          "Sending A Chat",
          "Getting Chats to Show Up",
          "Styling Cells",
          "Filling in the Cells",
          "Scroll to the Bottom",
          "Polish",
          "Auto Update",
          "Outro"
        ],
        "Handoff": [
          "Intro",
          "Sketch",
          "iOS Design",
          "User Activity",
          "Handoff Template",
          "NeedsSave()",
          "Restoring the User Activity",
          "Outro"
        ],
        "JETWOMAN - SpriteKit": [
          "Intro",
          "Sketch",
          "SpriteKit Tour and NSMenuItem",
          "Physics",
          "Jumping JETWOMAN",
          "Contact",
          "Start Button",
          "Updating the Score",
          "Random Keys",
          "High Score",
          "Images and Fire",
          "Clicking",
          "Outro"
        ]
      },
      "requirements": [
        "No coding experience required!",
        "You Will Need a Mac Computer"
      ],
      "description": "Thank you for checking out my course :) \"The Complete MacOS Developer Course\" will help you conquer the programming world of the Mac. This course is for both those with an iOS background and those who are complete beginners. This course dives right into the specific tools you need to make MacOS apps.\n\nTopics we cover include:\nTables in MacOS (no sections but we do have columns!)\nExporting a Mac App\nStatus Bar Apps\nCommand Line Apps\nWorking with the clipboard\nDesign Techniques Specific to Mac\nSpriteKit\nUsing Parse Open Source as a Back-End\nHandoff\nTouch Bar Functionality\nTwitter Integration\nCollection Views\nIn this course, we'll be creating 9 complete projects that you can run on your computer or upload to the App Store. After we make each project, I will also supply you with the completed source code so you can always check your work against mine as a reference.\nI would love to have you in the course. Take a look at the promo video and see you inside!",
      "target_audience": [
        "Anyone who wants to learn how to code and build apps for Mac",
        "Students with no programming background will be well taken care of with the iOS Blitz",
        "Students with a iOS deveopement background will be a great fit for this course. I'll show you everything you need to start making Mac apps."
      ]
    },
    {
      "title": "Microservices Interview Questions Preparation Course",
      "url": "https://www.udemy.com/course/microservices-interview-questions/",
      "bio": "Learn everything about Microservices. Save time in Interview preparation.",
      "objectives": [
        "Understand Microservices Architecture",
        "Learn important concepts of Microservices",
        "Understand benefits of Microservices",
        "Answer questions on Microservices development",
        "Best practices of Microservices",
        "Understand Software Architecture level concepts",
        "Demand higher salary or promotion based on the knowledge gained"
      ],
      "course_content": {
        "Why should you learn Microservices?": [
          "Introduction",
          "How to master Microservices interview questions?",
          "Disclaimer"
        ],
        "Microservices Questions - Part 1": [
          "What is a Microservice?",
          "What are the benefits of Microservices architecture?",
          "What are the major principles of Microservices?",
          "What is the role of architect in Microservices architecture?",
          "What is the advantage of Microservices architecture over SOA?",
          "Quiz 1"
        ],
        "Microservices Questions - Part 2": [
          "Tailored Service Template for Microservices development in an organization",
          "Disadvantages of using Shared libraries",
          "What are the characteristics of a Good Microservice?",
          "What is Bounded Context?",
          "What are the points to remember during integration of Microservices?"
        ],
        "Microservices Questions - Part 3": [
          "Is it a good idea for Microservices to share a common database?",
          "What is the preferred type of communication between Microservices?",
          "Difference between Orchestration and Choreography",
          "What are the issues in using REST over HTTP for Microservices?",
          "Can we create Microservices as State Machines?"
        ],
        "Microservices Questions - Part 4": [
          "What is Reactive Extensions?",
          "What is DRY?",
          "What is Semantic Versioning?",
          "Build vs Buy a Microservice",
          "Why do we break the Monolith software into Microservices?",
          "Quiz 2"
        ],
        "Microservices Questions - Part 5": [
          "What is Continuous Integration?",
          "What is Continuous Delivery?",
          "What is Ubiquitous language?",
          "What is the benefit of Single Service per Host model in Microservices?",
          "What are different types of Tests for Microservices?"
        ],
        "Microservices Questions - Part 6": [
          "What is Mike Cohn’s Test Pyramid?",
          "What is the difference between Mock or Stub for Microservice tests?",
          "How can we eradicate non-determinism in tests?",
          "What is a Consumer Driven Contract (CDC)?",
          "What is PACT?",
          "Quiz 3"
        ],
        "Microservices Questions - Part 7": [
          "How can we separate Deployment from Release of Microservices?",
          "What is Canary Releasing?",
          "Mean Time to Repair (MTTR) vs. Mean Time between failures (MTBF)",
          "How can we do cross-functional testing?",
          "What is a good tool for monitoring multiple services at a time?"
        ],
        "Microservices Questions - Part 8": [
          "What is Semantic Monitoring?",
          "Why do we use Correlation IDs in Microservices architecture?",
          "What is the difference between Authentication and Authorization?",
          "How does HTTPS authentication work in Microservices?",
          "What are Client certificates?",
          "Quiz 4"
        ],
        "Microservices Questions - Part 9": [
          "Why some big companies use API keys for providing access to public APIs?",
          "What is Confused Deputy Problem in security context?",
          "How can we secure Data at Rest in an organization?",
          "What are the different points to consider for security in Microservices?",
          "What is Conway’s law?"
        ]
      },
      "requirements": [
        "Software Development Experience",
        "Familiar with Programming"
      ],
      "description": "Microservices Architecture is one of the fastest growing software in technology world. Big companies like Amazon, Netflix, Google etc use Microservices based architecture. This course is designed to help you achieve your goals in Microservices field. Software Engineers with Microservices knowledge may get more salary than others with similar qualifications without Microservices knowledge.\nIn this course, you will learn how to handle interview questions on Microservices technology in Software Design and Development. I will explain you the important concepts of Microservices architecture.\nYou will also learn the benefits and use cases of Microservices in this course.\nWhat is the biggest benefit of this course to me?\nFinally, the biggest benefit of this course is that you will be able to demand higher salary in your next job interview.\nIt is good to learn Microservices for theoretical benefits. But if you do not know how to handle interview questions on Microservices, you can not convert your Microservices knowledge into higher salary.\nWhat are the topics covered in this course?\nWe cover a wide range of topics in this course. We have questions on Microservices best practices, Security, Pact, Bulkhead Design Pattern etc.\nHow will this course help me?\nBy attending this course, you do not have to spend time searching the Internet for Microservices interview questions. We have already compiled the list of the most popular and the latest Microservices Interview questions.\nAre there answers in this course?\nYes, in this course each question is followed by an answer. So you can save time in interview preparation.\nWhat is the best way of viewing this course?\nYou have to just watch the course from beginning to end. Once you go through all the videos, try to answer the questions in your own words. Also mark the questions that you could not answer by yourself. Then, in second pass go through only the difficult questions. After going through this course 2-3 times, you will be well prepared to face a technical interview in Microservices architecture.\nWhat is the level of questions in this course?\nThis course contains questions that are good for a Fresher to an Architect level. The difficulty level of question varies in the course from a Fresher to an Experienced professional.\nWhat happens if Microservices technology changes in future?\n\n\nFrom time to time, we keep adding more questions to this course. Our aim is to keep you always updated with the latest interview questions on Microservices.\nWhat are the sample questions covered in this course?\nSample questions covered in this course are as follows:\nWhat is a Microservice?\nWhat are the benefits of Microservices architecture?\nWhat is the role of architect in Microservices architecture?\nWhat is the advantage of Microservices architecture over Service Oriented Architecture (SOA)?\nIs it a good idea to provide a Tailored Service Template for Microservices development in an organization?\nWhat are the disadvantages of using Shared libraries approach to decompose a monolith application?\nWhat are the characteristics of a Good Microservice?\nWhat is Bounded Context?\nWhat are the points to remember during integration of Microservices?\nIs it a good idea for Microservices to share a common database?\nWhat is the preferred type of communication between Microservices? Synchronous or Asynchronous?\nWhat is the difference between Orchestration and Choreography in Microservices architecture?\nWhat are the issues in using REST over HTTP for Microservices?\nCan we create Microservices as State Machines?\nWhat is Reactive Extensions?\nWhat is DRY?\nWhat is Semantic Versioning?\nIs it a good idea to build a Microservice or buy a commercial off the shelf software?\nWhy do we break the Monolith software into Microservices?\nWhat is Continuous Integration?\nWhat is Continuous Delivery?\nWhat is Ubiquitous language?\nWhat is the benefit of Single Service per Host model in Microservices?\nWhat are different types of Tests for Microservices?\nWhat is Mike Cohn’s Test Pyramid?\nWhat is the difference between Mock or Stub for Microservice tests?\nHow can we eradicate non-determinism in tests?\nWhat is a Consumer Driven Contract (CDC)?\nWhat is PACT?\nHow can we separate Deployment from Release of Microservices?\nWhat is Canary Releasing?\nWhat is the difference between Mean Time to Repair (MTTR) and Mean Time between failures (MTBF)?\nHow can we do cross-functional testing?\nWhat is a good tool for monitoring multiple services at a time?\nWhat is Semantic Monitoring?\nWhy do we use Correlation IDs in Microservices architecture?\nWhat is the difference between Authentication and Authorization?\nHow does HTTPS authentication works in Microservices?\nWhat are Client certificates?\nWhy some big companies use API keys for providing access to public APIs?\nWhat is Confused Deputy Problem in security context?\nHow can we secure Data at Rest in an organization?\nWhat are the different points to consider for security in Microservices architecture?\nWhat is Conway’s law?\nWhat are the important Cross-Functional Requirements to consider during the design of a Microservice?\nWhat is a Circuit Breaker pattern in the context of Microservice?\nWhat is Bulkhead design pattern?\nWhat is Idempotency of a Microservice operation?\nHow can you scale a Database?\nWhat is Command Query Responsibility Segregation (CQRS) design pattern?\nHow will you implement Caching in Microservice?\nWhat is CAP theorem?\nHow will you implement Service Discovery in Microservices architecture?\nWhat is a good tool for documenting the Microservices?\nIn which scenarios, implementing Microservices architecture is not a good idea?\nWhat are the major principles of Microservices?",
      "target_audience": [
        "Software Engineer, Sr. Software Engineer, Member Technical Staff, Expert",
        "Software Architect, Development Manager, Director",
        "Anyone who wants to learn Microservices architecture",
        "People interested in going up in career!!"
      ]
    },
    {
      "title": "Learn Flowcharting. Be a Professional programmer!",
      "url": "https://www.udemy.com/course/flowcharting-flowchart-learn-flowcharting-be-a-professional-programmer/",
      "bio": "Learn the most important skills for programmers",
      "objectives": [
        "Learn to effectively turn Your Programming ideas or Problems to a flowchart",
        "Save Time, Money and effort by drawing the problem solution before moving to the Application Part",
        "Know the missing pieces by drawing before coding strategy"
      ],
      "course_content": {
        "Introduction and Getting Started": [
          "Introduction",
          "Understanding the Role of Flowcharts in Programming Logic",
          "What is a Flowchart",
          "Note",
          "Understanding the Basics of Flowcharting"
        ],
        "Flowchart Components": [
          "Main Components of any flowchart",
          "Understanding Flowcharts and Their Components"
        ],
        "The Importance of a flowchart": [
          "The Importance of a flowchart",
          "The Role of Flowcharts in Problem Solving"
        ],
        "Different Ways to Draw a Flowchart": [
          "Different Ways to Draw a Flowchart",
          "Download and Install Flowcharting Software",
          "Importance and Creation of Flowcharts",
          "Drawing Flowcharts Using Different Methods"
        ],
        "Practical Examples": [
          "Student Mark Check Example",
          "Salary Calculation Example",
          "Building Flowcharts for Real-World Applications"
        ],
        "Practice Test": [
          "Flowchart Basics Practice Test"
        ],
        "Who we are?": [
          "Who We Are?"
        ],
        "Gifts and Bonuses": [
          "Gifts and Bonuses"
        ],
        "Course Project": [
          "Course Project",
          "Reviewing Your Flowchart-Based Problem Solving Approach"
        ],
        "Course Wrap-Up": [
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "No prerequisite knowledge is required.",
        "Download and Install the Free Flowcharting Software (Explained inside the Course)",
        "Flowcharting software is suggested but not required. Microsoft Visio is an excellent applications if you have it. If not, I will recommend a number of FREE Alternatives."
      ],
      "description": "This Course is Best for You:\nIf you want to learn programming\nIf you are new to programming\nIf you can program, but are not familiar with flowcharting techniques\nIf you can program, but you are looking for a way to program more efficiently and effectively in less time\nIf you want to start programming like professionals\nYou will learn to use flowcharts, a tool that all programmers can use in any programming language. Flowcharts create a visual representation of the process flow and the specific steps needed to accomplish the final goal. Specific shapes are used to represent different types of actions. By applying flowcharting before the programming phase, you will quickly start programming like a professional.\nTeaching Methods:\nVideo Lectures\nPractical Examples\nHandouts\nExercises\nQ&A (I will answer all of your questions within 24 hours)\nThis course requires no prerequisite knowledge. Everything is explained in a simple, easy-to-follow manner.\nUser Testimonials: \"This course made understanding flowcharting so simple and practical. A great foundation for any programmer!\" - Jane D.\n\"I now use flowcharting in all my projects. It has made my programming more efficient and organized. Highly recommend!\" - Tom S.\nCall to Action: Enroll now to master flowcharting and elevate your programming skills to a professional level!\nFAQ: Q: Do I need prior experience in programming to take this course? A: No, this course is designed for all levels.\nQ: Will I need to buy additional software? A: No, the course will provide information on free flowcharting tools.\nWhat You Will Learn\nUnderstand the basics of flowcharting\nUse flowcharts to plan programming projects\nImprove programming efficiency and organization\nApply flowcharting techniques to any programming language\nWho Is This Course For\nAspiring programmers\nBeginners in programming\nExperienced programmers looking to enhance their skills\nAnyone interested in learning flowcharting techniques\nRequirements\nA computer with internet access\nBasic understanding of using a computer\nNo prior programming experience needed\nAbout the Instructor:\nProTech Academy\nProTech Academy is dedicated to providing high-quality training and resources for professionals and individuals looking to enhance their skills and productivity. Our experienced instructors are passionate about helping students achieve their goals through practical, hands-on learning.\nInstructor Bio: Our instructors at ProTech Academy have extensive experience in project management, productivity tools, and team collaboration. They bring real-world knowledge and expertise to the courses, ensuring that students receive practical, actionable insights. Join us to learn from the best and take your productivity to the next level!",
      "target_audience": [
        "Students who are new to programming",
        "Students who are learning different programming languages",
        "Programmers in General",
        "Anyone looking for an easy way to visualize his solution before moving to the coding or solving part"
      ]
    },
    {
      "title": "Microservices with Java Spring Boot and Spring Cloud",
      "url": "https://www.udemy.com/course/microservices-with-java-spring-boot-spring-cloud-eureka-api-gateway/",
      "bio": "Learn OpenFeign REST Client, Spring Cloud Eureka, API Gateway, Circuit Breaker, Resilience4j, Config Server,LoadBalancer",
      "objectives": [
        "What is Microservice & Why we need it ?",
        "Monolithic Vs Microservice",
        "What is Spring Cloud ?",
        "Practical Implementation Of OpenFeign REST Client",
        "Service Discovery & Registry using Spring Cloud Eureka",
        "Client Side Load Balancing with Spring Cloud LoadBalancer",
        "Spring Cloud API Gateway to have your cross cutting concerns at one place",
        "Fault Tolerance & Circuit Breaker with Resilience4j",
        "Tracing with Sleuth and Zipkin",
        "Spring Cloud Config Server To Centralize Properties for Your Spring Boot Apps"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Setting Up Environment": [
          "JDK, Maven and STS Installation",
          "Postman (REST Client) Installation",
          "MySQL Installation"
        ],
        "Introduction To Microservice": [
          "What is Monolithic Application ?",
          "What is Microservice ?"
        ],
        "Introduction To Spring Cloud": [
          "What is Spring Cloud ?",
          "Spring Cloud Projects and Its Usage"
        ],
        "Getting Ready with Microservices": [
          "Database Tables and Structure",
          "Monolithic Application"
        ],
        "Address Microservice": [
          "Create Address Microservice",
          "Configure Address Microservice",
          "Add REST APIs To Address Microservice",
          "Address Microservice In Action"
        ],
        "Student Microservice": [
          "Create Student Microservice",
          "Configure WebClient",
          "Calling Address Microservice From Student",
          "Student Microservice In Action"
        ],
        "Spring Cloud OpenFeign REST Client": [
          "What is Open Feign and Why we need it ?",
          "Configure Open Feign In Microservice",
          "Creating First Feign Client",
          "Feign Client In Action",
          "Knowledge Brush Up"
        ],
        "Spring Cloud Netflix Eureka - Service Discovery & Registry": [
          "What is Eureka and Why we need it ?",
          "Creating Eureka Server",
          "Microservices with Eureka Client",
          "Eureka Server In Action",
          "Feign Client with Eureka",
          "Knowledge Brush Up"
        ],
        "Client Side Load Balancing with Spring Cloud LoadBalancer": [
          "Why Client Side Load Balancing ?",
          "Configure Spring Cloud LoadBalancer",
          "Client Side Load Balancing In Action",
          "FYI - Spring Cloud Netflix Ribbon - Deprecated"
        ]
      },
      "requirements": [
        "Need to have knowledge Java Programming Language.",
        "Need to have knowledge of Spring Boot"
      ],
      "description": "***** Some Reviews From Students *****\nReally its worth for me, he is explained very well and given examples for understanding.\nIt's a great course for Microservices with Spring Cloud.\nyes it is good matching for me.\nVery amazing course, whatever topics are covered by the instructor that is very easy to understand. Finally this course deserve 5 ratings.\n\n\nThis course is all about Microservices with Spring Boot and Spring Cloud.\nIf you are working with Spring Boot and building REST APIs then this course is for you. Having microservices is the new trend.\nIn this course before jumping to microservices first you will understand what is monolithic application ?\nWe will create microservices out of monolithic application so that you have better idea how to break your application and create microservices out of it.\nAfter that you will learn to use WebClient to make REST calls between your microservices. You might have used Rest Template but that is now deprecated and Spring 5 onwards it is not recommended to use.\n\n\nThere is another better open to make REST calls from Spring Boot Apps and that is Spring Cloud OpenFeign REST Client. It provides decalrative way to make REST calls from Spring Boot Apps.\nService Discovery & Registry is very important while working with microservices. This course covers Spring Cloud Eureka to register microservices so that we do not need to worry about URLs of different microservices.\nLoad Balancing is key when you have huge traffic and multiple instances for microservices. In this course we will achieve Client Side Load Balancing with Spring Cloud LoadBalancer.\nEarlier Spring was providing Spring Cloud Netflix Ribbon to achieve client side load balancing but now its been deprecated and Spring Cloud Load Balancer is being used.\n\n\nWhile working with microservices how to handle cross cutting concerns like Authentication, logging request and response ?\nThis can be achieved by Spring Cloud API Gateway. API Gateway is entry point for all microservices that you have. You will learn to have Pre and Post filters in API Gateway.\nEarlier Spring was providing Zuul API Gateway but now its been deprecated and Spring Cloud API Gateway is being used.\n\n\nWhat if one of your microservices is down ?\nHere comes the importance of Fault Tolerance. This course covers practical implementation of Fault Tolerance & Circuit Breaker using Resilience4j. It also covers real world example of Circuit Breaker. Resilience4j internally uses Spring AOP ( Aspect Oriented Programming )\nEarlier Spring was providing Spring Cloud Hystrix but now its been deprecated and Resilience4j is being used.\n\n\nHow to trace down a particular request ?\nWhen your microservices are calling each other it becomes hard to identity where is the issue. But do not worry here comes Sleuth and Zipkin for that purpose. We can have Distributed Tracing with Sleuth and Zipkin. Zipkin Server provides UI to trace down the request.\n\n\nCentralizing property files and having environment specific property file is needed for each microservice. This can be achieved using Spring Cloud Config Server. This course covers practical implementation of Spring Cloud Config Server using Git.\n\n\nBelow are the topics that this course covers -\nMonolithic Vs Microservice\nWebClient To Make REST Calls\nSpring Cloud OpenFeign REST Client\nSpring Cloud Eureka - Service Discovery & Registry\nClient Side Load Balancing with Spring Cloud LoadBalancer\nSpring Cloud API Gateway with Pre and Post Filters\nFault Tolerance & Circuit Breaker with Resilience4j\nDistributed Tracing with Sleuth and Zipkin\nSpring Cloud Config Server\n\n\nFor this course you can use any database and any method to connect your database from your Spring Boot App. For example I will use MySQL database using Spring Data JPA in this course.\n\n\nCourse Topics & Lectures :-\nIntroduction\nIntroduction\nSetting Up Environment\nJDK, Maven and STS Installation\nPostman (REST Client) Installation\nMySQL Installation\nIntroduction To Microservice\nWhat is Monolithic Application ?\nWhat is Microservice ?\nIntroduction To Spring Cloud\nWhat is Spring Cloud ?\nSpring Cloud Projects and Its Usage\nDefault Ports\nGetting Ready with Microservices\nDatabase Tables and Structure\nMonolithic Application\nAddress Microservice\nCreate Address Microservice\nConfigure Address Microservice\nAdd REST APIs To Address Microservice\nAddress Microservice In Action\nStudent Microservice\nCreate Student Microservice\nConfigure WebClient\nCalling Address Microservice From Student\nStudent Microservice In Action\nSpring Cloud OpenFeign REST Client\nWhat is Open Feign and Why we need it ?\nConfigure Open Feign In Microservice\nCreating First Feign Client\nFeign Client In Action",
      "target_audience": [
        "Any Java Developer who wants to learn Microservices with Spring Boot"
      ]
    },
    {
      "title": "Kafka Event Driven Microservices With Java + Spring [Part-1]",
      "url": "https://www.udemy.com/course/spring-kafka-reactive/",
      "bio": "Apache Kafka with Spring Boot: Fundamentals, Producer, Consumer, Error Handling, Testing, Security, Best Practices",
      "objectives": [
        "Comprehensive Kafka Fundamentals: Learn the basics of Kafka, including setup, message flow, and serialization/deserialization.",
        "Reactive Kafka Programming: Develop Kafka applications using reactive programming paradigms.",
        "Advanced Kafka Techniques: Master configuration options, offset management, message delivery guarantees, and performance optimization.",
        "Kafka Cluster Management: Understand cluster architecture, fault tolerance, and best practices.",
        "Real-World Applications: Build event driven microservices that leverage Kafka for real-time data processing.",
        "Batch and Parallel Processing: Optimize message consumption for efficient resource utilization.",
        "Kafka Security: Learn how to secure your Kafka environment.",
        "Integration Testing: Develop robust integration tests for your Kafka applications.",
        "Hands-On Exercises: Practice building Kafka applications through practical exercises."
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Need For Event Driven Architecture / Kafka",
          "*** Humble Request & Resources ***"
        ],
        "Kafka Setup": [
          "Introduction",
          "Custom Docker Image",
          "Docker Compose Setup"
        ],
        "Kafka Crash Course": [
          "Introduction",
          "Cluster",
          "Bootstrap Server",
          "Topic Command",
          "Exploring Data Directory",
          "Documenting Commands",
          "Console Producer",
          "Console Consumer",
          "Producer & Consumer Side By Side",
          "[Properties] linger.ms vs batch.size",
          "Consumer Push vs Pull",
          "Serialization vs Deserialization",
          "[Properties] Log Retention",
          "Offset",
          "Message Timestamp",
          "2 Consumers Demo",
          "Consumer Group",
          "Consumer Group - Demo",
          "Need For Message Ordering",
          "Partition & Key",
          "Who is calculating the Partition?",
          "Topic With 2 Partitions",
          "Consumer Group Demo with Partitions - Part 1",
          "Consumer Group Demo with Partitions - Part 2",
          "Consumer Group Scaling - Scenarios",
          "Consumer Group - LAG",
          "Multiple Consumer Group - LAG",
          "Resetting Offset",
          "Resetting Offset - Demo",
          "Message Format",
          "Summary",
          "Quiz"
        ],
        "Reactor Kafka": [
          "Maven Dependencies",
          "Project Setup",
          "Consumer Config",
          "Creating Kafka Receiver",
          "Kafka Receiver Demo",
          "Auto Offset Reset",
          "Session Timeout Config",
          "Acknowledging Message",
          "Enabling Auto Commit",
          "Will Messages Be Redelivered?",
          "Out Of Order Commit",
          "Consume From Multiple Topics",
          "Kafka Producer Config",
          "Creating Sender Record",
          "Kafka Producer Demo",
          "Sender Close",
          "Receiver Close",
          "Emitting 1 Million Events",
          "Max In Flight",
          "Message Headers",
          "Consumer Group Demo - Part 1",
          "Consumer Group Demo - Part 2",
          "Cooperative Sticky Assignor",
          "Range Assignor",
          "Seeking Offset",
          "Summary"
        ],
        "Kafka Cluster": [
          "Introduction",
          "Quick Note On Listeners",
          "Cluster Properties",
          "Cluster Demo",
          "Kafka Fault Tolerance Demo",
          "Summary"
        ],
        "Best Practices": [
          "Producer acks",
          "min.insync.replica",
          "Idempotent Producer",
          "Producing Duplicate Messages",
          "Idempotent Consumer",
          "Compression",
          "How Many Topics Should I Create?",
          "How Many Partitions Should I Create?",
          "How Many Replication Factor Should I Have?",
          "Summary"
        ],
        "Batch / Parallel Processing": [
          "Introduction",
          "Batch - Receiver Auto Ack / concatMap",
          "Parallel - flatMap",
          "Schedulers with FlatMap",
          "Message Ordering Issue With FlatMap",
          "GroupedFlux - Parallel and Message Ordering - Part 1",
          "GroupedFlux - Parallel and Message Ordering - Part 2",
          "Summary"
        ],
        "Error Handling": [
          "Introduction",
          "Simple Retry",
          "Separating Receiver & Processor - Theory",
          "Separating Receiver & Processor - Implementation - Part 1",
          "Separating Receiver & Processor - Implementation - Part 2",
          "Separating Receiver & Processor - Implementation - Part 3",
          "Retry Depending On Error",
          "Dead Letter Topic - Introduction",
          "Reactive Dead Letter Topic Producer - Part 1",
          "Reactive Dead Letter Topic Producer - Part 2",
          "Order Event Processor",
          "Code Cleanup",
          "Dead Letter Topic Demo",
          "Poison Pill Messages",
          "Poison Pill Messages - Fix",
          "Error Handling At Producer Side",
          "Summary"
        ],
        "Kafka Transaction": [
          "Introduction",
          "Demo App Walkthrough",
          "Transfer Event Consumer",
          "Transfer Event Processor - Part 1",
          "Transfer Event Processor - Part 2",
          "Transfer Config",
          "Adding Delay",
          "Kafka Commands",
          "Kafka Transaction Demo",
          "How Kafka Transaction Works",
          "read_committed vs read_uncommitted",
          "Send Transactionally",
          "Producer Fenced Exception",
          "Delivery Semantics"
        ],
        "Reactive Kafka With Spring": [
          "Introduction",
          "Simple Spring Kafka Consumer",
          "Order Event DTO",
          "Spring Kafka Producer Config",
          "Order Event Decoding Issue",
          "Importance Of Type ID",
          "Order Event Demo",
          "Printing Type ID Header",
          "Decoding As Custom Object",
          "Summary"
        ]
      },
      "requirements": [
        "Java Reactive Programming",
        "Spring",
        "Comfortable with Indian Accent"
      ],
      "description": "***Note***\nThis course has 2 parts. This is Part-1.\n\n\nThis in-depth course empowers senior and staff-level engineers to harness the power of Apache Kafka for real-time data processing. Whether you're new to Kafka or looking to hone your reactive programming skills, this course equips you with the knowledge and practical experience to build robust data pipelines.\nKey Takeaways:\nSolid Kafka Foundation: Grasp Kafka fundamentals, including setting up a cluster with Docker, managing topics, and message consumption/production.\nReactive Programming Expertise: Master reactive programming concepts to develop scalable and responsive Kafka applications in Java.\nAdvanced Producer & Consumer Strategies: Dive deep into configuration options, offset management, message delivery guarantees, and performance optimization.\nKafka Cluster Management: Understand cluster architecture, fault tolerance, and best practices for reliable operation.\nReal-World Techniques: Implement producer acknowledgment, idempotency, compression, and error handling strategies to build production-ready Kafka applications.\nMaster Batch & Parallel Processing: Optimize message consumption for efficient resource utilization and handling large data volumes.\nKafka Security: Secure your Kafka environment with credential and SSL encryption methods.\nIntegration Testing Expertise: Develop robust integration tests using Embedded Kafka.\nPractical Application: Build microservices that leverage Kafka topics to analyze user behavior and generate insightful business metrics.\nElevate Your Career with In-Demand Kafka Skills:\nBecome a valuable asset to your team by building high-performance data pipelines.\nStay ahead of the curve in the rapidly growing field of real-time data processing.\nCommand a competitive salary in the high-demand Kafka job market.\nCourse Curriculum:\nApache Kafka Fundamentals: Set up Kafka using Docker, manage topics, understand message flow, and explore serialization/deserialization.\nReactive Kafka Programming: Develop Java producers and consumers using reactive programming paradigms.\nAdvanced Kafka Techniques: Master configuration options, offset management, message delivery guarantees, and performance optimization.\nKafka Cluster Deep Dive: Understand cluster architecture, fault tolerance, and best practices for reliable operation.\nKafka for Developers: Implement producer acknowledgment, idempotency, compression, error handling, and security measures.\nBatch & Parallel Processing: Optimize message consumption for efficient resource utilization and handling large datasets.\nKafka Transaction Management: Learn to perform transactional message production and consumption.\nKafka Testing with Embedded Kafka: Develop robust integration tests for your Kafka applications.\nBuilding Real-World Microservices with Kafka: Apply your skills to build microservices that analyze user behavior and generate business metrics.\nUnlock the Power of Kafka and Build Real-Time Data Pipelines with Confidence!\nEnroll now and gain the expertise to build scalable, reliable, and efficient data pipelines with Apache Kafka and reactive programming. This course equips you with the skills and practical experience to excel in the world of real-time data processing.",
      "target_audience": [
        "Any senior / staff level engineer"
      ]
    },
    {
      "title": "Master Backend Development: Node, Docker, and MongoDB 2025",
      "url": "https://www.udemy.com/course/learn-nodejs-docker-mongodb-express-setup/",
      "bio": "Step-by-step guide on how to setup a Node.js REST API using Express with Docker and MongoDB",
      "objectives": [
        "Structure your Node API project like a pro",
        "Understand why and how to containerise your app using Docker",
        "Setup a local instance of MongoDB and connect it to your API",
        "Make use of Docker Compose to orchestrate multiple services",
        "Dive deep into Express routing and create modularised express routes for your API",
        "Extensible error handling and model request validation"
      ],
      "course_content": {},
      "requirements": [
        "Familiar with writing code in JavaScript, be comfortable with es6 syntax",
        "Familiar with Node and NPM",
        "Basic understanding of what Restful API's are",
        "Basic understanding of MongoDB",
        "Computer or laptop with a decent internet connection"
      ],
      "description": "What You'll Learn\n\n\nMaster the art of building scalable and efficient backend servers with Node.js\nConfigure a sophisticated Express server like a pro\nContainerise and orchestrate your backend stack using Docker and Docker Compose\nHandle MongoDB for database management with ease and confidence\nLearn best practices for managing environment variables securely\nEnhance your development process using nodemon\nDevelop REST APIs that are robust, secure, and scalable\nBuild production-ready backend systems\nAnd much more to help you become the backend maestro you’re meant to be!\n\n\nRequirements\n\n\nA computer with internet access\nBasic understanding of JavaScript (ES6+) and REST APIs\nFamiliarity with Node.js package management (NPM)\nWillingness to learn and apply new concepts with confidence\nNo need for prior Docker or MongoDB experience – we’ll cover it step by step!\nNeed help? Ask questions anytime via the Q&A section or reach out directly for support.\n\n\nDescription\n\n\nAre you ready to step up your backend development skills and take them to the next level?\n\n\nIn Master Backend Development, we will be exploring the popular trio of Node.js, Docker, and MongoDB, combining theory and practical application in an engaging, step-by-step format.\n\n\nWe’ll start by setting up a robust Node.js Express server, dive deep into Docker for seamless containerization, and conquer MongoDB for database management. Together, we’ll tackle real-world challenges, so you’ll leave with hands-on experience and confidence to build scalable, efficient backend systems.\n\n\nBy enrolling today, you’ll gain access to HD video lessons breaking down complex concepts into easy-to-follow steps. Plus, you’ll learn valuable skills that will benefit you for the rest of your career.\n\n\nWhat Exactly Will You Learn?\n\n\nSet up an advanced Node.js Express server from scratch\nDeep dive into how Express works under the hood.\nUse Docker to create a containerised application and enhance the development experience\nImplement Docker Compose for orchestrating your Docker containers\nConfigure MongoDB inside a Docker container\nConnecting your server to MongoDB using Mongoose\nImplement validation using validate.js\nHandle environment variables securely and efficiently\nDebug backend issues with confidence using best practices\nCreate and manage REST APIs like a professional developer\nOptimise your development workflow with tools like nodemon\nDevelop scalable, production-ready backend applications\n\n\nCourse Structure\n\n\nThis course is a hands-on, practical guide to building an Express server from the ground up. Each chapter builds on the previous one, and balances just the right amount of theory and knowledge, with majority of the lessons being practical coding.\n\n\nBuild and configure an Express server from the ground up\nExplore Docker’s power to containerise and streamline your applications\nConfigure MongoDB and learn advanced database management techniques\nUse Docker Compose to create multi-service applications effortlessly\nDevelop REST APIs that are secure, efficient, and scalable\n\n\nYou’ll follow along with live demonstrations, and by the end, you’ll have a system you can replicate and expand upon for your own projects.\n\n\nLet’s embark on this journey together—step by step—to achieve backend mastery!\n\n\nWho This Course is For\n\n\nDevelopers transitioning from beginner to intermediate levels\nAnyone who knows JavaScript fundamentals and is eager to master backend development\nEmployees seeking to upskill for a career in backend programming\nFreelancers and aspiring developers who want to build scalable, professional-grade systems\n\n\nNo matter your background, this course will guide you through every step of becoming a confident backend developer.\nGet started now and transform your skills today!",
      "target_audience": [
        "Beginner to intermediate JavaScript developers who want to level up their backend skills using Node"
      ]
    },
    {
      "title": "11 Essential Coding Interview Questions + Coding Exercises!",
      "url": "https://www.udemy.com/course/11-essential-coding-interview-questions/",
      "bio": "Learn 3 handy problem solving techniques. Get 11 hand-picked problems. Get ready for your next coding interview!",
      "objectives": [
        "Learn what a coding interview is like",
        "Learn 3 problem solving techniques you'll be able to use in your next coding interview!",
        "Go through 11 of the most essential coding interview questions, coding exercises and answers!",
        "Overall, feel more confident and be ready for your next coding interview"
      ],
      "course_content": {
        "Introduction and Problem Solving Tips": [
          "Introduction",
          "What Is a Typical Coding Interview Like?",
          "Problem Solving Technique #1 for Coding Interviews",
          "Problem Solving Technique #2 for Coding Interviews",
          "Problem Solving Technique #3 for Coding Interviews"
        ],
        "Arrays": [
          "Most Frequently Occurring Item in an Array (Difficulty = *)",
          "Most Frequently Occurring Item in an Array (Python)",
          "Most Frequently Occurring Item in an Array (Java)",
          "Most Frequently Occurring Item in an Array (Solution)",
          "Common Elements in Two Sorted Arrays (Difficulty = **)",
          "Common Elements in Two Sorted Arrays (Python)",
          "Common Elements in Two Sorted Arrays (Java)",
          "Common Elements in Two Sorted Arrays (Solution)",
          "Is One Array a Rotation of Another? (Difficulty = **)",
          "Is One Array a Rotation of Another? (Python)",
          "Is One Array a Rotation of Another? (Java)",
          "Is One Array a Rotation of Another? (Solution)"
        ],
        "Strings": [
          "Non-Repeating Character (Difficulty = **)",
          "Non-Repeating Character (Python)",
          "Non-Repeating Character (Java)",
          "Non-Repeating Character (Solution)",
          "One Away Strings (Difficulty = ***)",
          "One Away Strings (Python)",
          "One Away Strings (Java)",
          "One Away Strings (Solution)",
          "One Away Strings (Solution in Pseudocode)"
        ],
        "Two-Dimensional Arrays": [
          "Assign Numbers in Minesweeper (Difficulty = **)",
          "Assign Numbers in Minesweeper (Python)",
          "Assign Numbers in Minesweeper (Java)",
          "Assign Numbers in Minesweeper (Solution)",
          "Find Where to Expand in Minesweeper (Difficulty = ***)",
          "Find Where to Expand in Minesweeper (Python)",
          "Find Where to Expand in Minesweeper (Java)",
          "Find Where to Expand in Minesweeper (Solution)",
          "Find Where to Expand in Minesweeper (Solution in Pseudocode)",
          "Rotating 2D Array (Difficulty = ***)",
          "Rotating a 2D Array by 90 Degrees (Python)",
          "Rotating a 2D Array by 90 Degrees (Java)",
          "Rotating 2D Array (Out-of-Place Solution)",
          "Rotating 2D Array (In-Place Solution)",
          "Rotating 2D Array (In-Place Solution in Pseudocode)"
        ],
        "Linked Lists and Trees": [
          "N-th Element of a Linked List (Difficulty = **)",
          "N-th Element of a Linked List (Python)",
          "N-th Element of a Linked List (Java)",
          "N-th Element of a Linked List (Solution)",
          "Is This a Binary Search Tree? (Difficulty = **)",
          "Is This a Binary Search Tree? (Python)",
          "Is This a Binary Search Tree? (Java)",
          "Is This a Binary Search Tree? (Solution)",
          "Is This a Binary Search Tree? (Solution in Pseudocode)",
          "Lowest Common Ancestor (Difficulty = ***)",
          "Lowest Common Ancestor (Python)",
          "Lowest Common Ancestor (Java)",
          "Lowest Common Ancestor (Solution)",
          "Lowest Common Ancestor (Solution in Pseudocode)"
        ],
        "Conclusion": [
          "Conclusion",
          "Have any extra problems I should solve?"
        ]
      },
      "requirements": [
        "You should be familiar with at least one C-like programming language (could be Java, Python, C++, Ruby, JavaScript, etc.)",
        "You should be familiar with basic data structures such as arrays, hash tables, linked lists, trees, and graphs",
        "You should be familiar with the Big O notation"
      ],
      "description": "As you prepare for your next coding interview, have you ever thought:\n\"I wish someone could just walk me through these problems and explain what’s going on.\"\n\"I wish there was a preselected set of the most important coding interview problems so I can practice them easily.\"\nIf so, this course is for you!\n\n\nIn this course:\nFirst, I’m going to give you a few problem solving techniques you’ll be able to use right away in your next coding interview.\nThen, I’m going to walk you through the 11 essential coding interview questions and their answers.\nI’ve picked these particular questions because they are the types of questions that are asked most often in programming interviews.\nI’m going to cover problems that use concepts such as arrays, strings, two-dimensional arrays, linked lists and trees.\nYou’ll get a coding exercise in Python and Java for each problem, so you can get feedback on your solution right away.\nIf you want to use any other language to follow this course, that’s fine too! Just remember to run your solution on your computer to make sure it works.\nThis course is intended for intermediate to advanced learners who are preparing for their software engineer programming interviews.\nSo, I’m going to assume that you’re already familiar with concepts such as:\nTwo dimensional arrays (which are simply arrays of arrays)\nBreadth first search and depth first search\nLinked lists and trees\nIf you think you’re ready for this course, watch the preview videos and see if you can solve those problems!",
      "target_audience": [
        "Anyone who is currently preparing for coding interviews / programming interviews",
        "Anyone who wants to improve their problem solving / coding skills in general (coding interviews are a good way to practice these skills)"
      ]
    },
    {
      "title": "Software development in Python: A practical approach",
      "url": "https://www.udemy.com/course/software-development-in-python-a-practical-approach/",
      "bio": "Build with the new Qml 3 | Learn how to build a python bundled app (.exe, .dmg, .sh, etc) and a wheel (.whl)",
      "objectives": [
        "Learn the new Qml 3",
        "Learn Python native threading",
        "Qt Signals and Slots in Qml 3",
        "Learn how to build a wheel (.whl) for PyPi",
        "Design an app according to a UI/UX design prototype",
        "Build GUI Applications with Python",
        "Bundle an app into a .exe, .dmg, etc file"
      ],
      "course_content": {
        "Introduction": [
          "Qt's Official Video",
          "Introduction",
          "Qt's preference of Qml",
          "Comparisons between QtWidgets and Qml"
        ],
        "The Path": [
          "Front end first",
          "Which should you use, PyQt5 | PyQt6"
        ],
        "Installation": [
          "Anaconda",
          "Fix, if python is not on path",
          "Config Pip if need be",
          "PyQt5",
          "PyQt6",
          "Ninja-Preview",
          "Ninja-Preview via pip",
          "Download VSCode",
          "Install PyInstaller",
          "Install Twine",
          "Install an ico converter",
          "Exercise Files"
        ],
        "Transition to intermediate": [
          "Declaring star(*) function parameters",
          "Decorators"
        ],
        "Hands on PyQt": [
          "Create project files",
          "Script the python file",
          "Time for Quiz",
          "Script the qml file",
          "Run the python file",
          "Add text \"Hello World\"",
          "Lets get started",
          "The path"
        ],
        "The basics": [
          "Importing QML the PyQt6 way",
          "First Window",
          "First Window",
          "Window flags",
          "Window Flags",
          "Rectangle",
          "Rectangle",
          "Property",
          "Property",
          "Id",
          "ID",
          "Anchors",
          "Anchors",
          "Text",
          "Text",
          "FontLoader",
          "Label",
          "Label",
          "Image",
          "Image",
          "Component",
          "Component"
        ],
        "The Layouts": [
          "Layouts Introduction",
          "Download Layouts pdf",
          "RowLayouts",
          "Column Layouts",
          "Grid Layout",
          "Stack Layout",
          "Custom type"
        ],
        "The views": [
          "List View",
          "List Model",
          "Grid View",
          "Stack View",
          "Swipe View"
        ],
        "The control types": [
          "Buttons",
          "Text Field",
          "Dial",
          "How to customize controls",
          "How to customise controls"
        ],
        "Communicate": [
          "Connection (Qml 3)",
          "Slots (Qml 3)",
          "Signals (Qml 3)",
          "Signals and Slots (Qml 2)",
          "Signals and Slots 2 (Qml 2)",
          "Threading"
        ]
      },
      "requirements": [
        "Knowledge in basic python programming"
      ],
      "description": "NB: CERTAIN VIDEOS MAY HAVE BAD SOUND\n\n\n\n\nThe reason I got into python, I wanted to be a software engineer, I had just built a chat app in PHP and JQuery and a girl asked me if it could run on phone. I responded yes, but I knew that would only be possible using help using non-native means. I wanted native builds, not some complex framework which will only allow me to make a web app whiles I could use the time to study a full fledge programming language. There were others like making a web view app, I didn't like the Idea because there would definetely be setbacks. And I also wanted to be a software engineer or developer, I had built two almost identical CMSs with PHP and I felt I was ready to move into the software development space.\nSo I made up my mind to go straight into software development, what language should I use? I turned to Google, and Google made it clear that I should turn to python.\nThe exact thing they did was, they mentioned two things:\n1. It is easier to learn and,\n2. Some modern applications are built with it. What application? Blender3d. I knew blender, it is a beautiful 3d software.\nSo I got into python because I wanted to build softwares with it.\n\n\nToday most python programmers actually want to build web apps, python has been so popular, its power is been used to almost overthrow PHP. Personally I don't like it for two reasons:\n1. I love PHP, it made me feel like a programmer, more than JavaScript ever did.\n2. Python is capable of a lot more, that is not its preserve. Its domain is in the software development world.\nThe many python developers should be building softwares with it, not web apps. Web apps has many alternatives, but in the software developement space python is almost alone when it comes to learnability, readability and availability. Even on Android we are leaking there soon we will be so there.\n\n\nI hope you take my humble advice and study software development with python. It is awesome. This course is focused on that. Enjoy lets go.",
      "target_audience": [
        "Python developers"
      ]
    },
    {
      "title": "Python Data Structures A to Z",
      "url": "https://www.udemy.com/course/python-data-structures-a-to-z/",
      "bio": "Learn the essentials of data structures in Python.",
      "objectives": [
        "An in-depth look at native Python data structures: Strings, Lists, Tuples, Sets and Dictionaries",
        "Intro to Queues, Stacks, Heaps, Linked Lists, Binary Search Trees and Graphs",
        "How each Data Structure works and how to Implement and use them in Python",
        "Pros and Cons of each Data Structure"
      ],
      "course_content": {
        "Native Python Data Structures": [
          "Introduction",
          "Operations for Sequence Types (String, List, Tuple)",
          "Using Lists, Tuples, Sets and Dictionaries",
          "List Functions Coding Exercise",
          "List Comprehensions",
          "Write a list comprehension to create the following list: [5, 10, 15, 20]",
          "Section 1 Quiz"
        ],
        "Queues, Stacks and Heaps": [
          "Stacks in Python",
          "Queues in Python",
          "Write a wrapper class for the Queue class, similar to what we did for Stack, but using Python deque.",
          "Heaps in Python",
          "Section 2 Quiz"
        ],
        "Linked Lists": [
          "Introduction to Linked Lists",
          "Circular Linked Lists",
          "Doubly Linked Lists",
          "Section 3 Quiz"
        ],
        "Introduction to Binary Search Trees": [
          "Intro to Binary Search Trees",
          "Implementing a Binary Search Tree in Python",
          "Section 4 Quiz"
        ],
        "Introduction to Graphs": [
          "Graphs Overview",
          "Graph Implementation Using Adjacency Lists",
          "Graph Implementation Using an Adjacency Matrix",
          "Section 5 Quiz"
        ]
      },
      "requirements": [
        "Should be familiar with Python programming fundamentals such as how to use variables and functions.",
        "Alternatively, if you are already proficient with another language and are just starting to learn Python as a second language you could probably keep up with this course."
      ],
      "description": "This course combines conceptual lectures to explain how a data structure works, and code lectures that walk through how to implement a data structure in Python code. All the code lectures are based on Python 3 code in a Jupyter notebook. All the code and presentations are available for download on Github.\nData structures covered in this course include native Python data structures String, List, Tuple, Set, and Dictionary, as well as Stacks, Queues, Heaps, Linked Lists, Binary Search Trees, and Graphs.",
      "target_audience": [
        "Beginner or intermediate Python programmers who want to gain a solid understanding of data structures.",
        "Anyone who already knows another programming language and wants to learn general data structures used in programming, while learning Python.",
        "This course will prepare students for an algorithms course."
      ]
    },
    {
      "title": "Let's develop a message-driven microservices application",
      "url": "https://www.udemy.com/course/fullstack-microservices-course/",
      "bio": "Learn how to build scalable applications using multiple frameworks and languages in one knowledge-packed crash course",
      "objectives": [
        "How to combine several current technologies and frameworks into one multifaceted app",
        "The essentials of front- and backend development, microservices, messaging and more",
        "Each step of the development cycle that goes from an idea to a plan to implementation",
        "How to implement your own solutions during many coding exercises",
        "Without the need to install or configure anything except git and vagrant"
      ],
      "course_content": {
        "Introduction": [
          "Welcome",
          "Installation",
          "Summary: installation",
          "How to use this course & Vagrant essentials",
          "Summary: how to use this course"
        ],
        "Planning BookieMarker": [
          "Requirements, design and architecture"
        ],
        "The frontend - HTML design": [
          "Introduction: from sketch to HTML page",
          "Bootstrap essentials",
          "Let's code: bootstrap grid system",
          "Summary: let's code bootstrap's grid system",
          "Solution: bootstrap grid system",
          "Let's code: navbar, forms & buttons",
          "Solution: navbar, forms & buttons"
        ],
        "The frontend - interactive websites": [
          "Introduction: interactive websites",
          "Knockout.js essentials 1: MVVM",
          "Knockout.js essentials 2: data binding",
          "Let's code: list & search bookmarks",
          "Summary: let's code list & search of bookmarks",
          "Solution: list & search bookmarks",
          "Let's code: add & remove bookmarks",
          "Solution: add & remove bookmarks",
          "Let's code: edit summary",
          "Solution: edit summary"
        ],
        "The backend": [
          "Introduction",
          "REST essentials",
          "Spring essentials",
          "Let's code: domain model & REST",
          "Summary: let's code domain model & REST API",
          "Solution: domain & REST API",
          "Let's code: search for URL",
          "Solution: search for URL",
          "Let's code: integrate frontend",
          "Solution: integrate frontend",
          "Let's code: sorting",
          "Summary: let's code sorting",
          "Solution: sorting"
        ],
        "The scraping service": [
          "Introduction",
          "Microservices essentials",
          "RabbitMQ essentials",
          "Let's code: webscraper",
          "Summary: let's code web scraper",
          "Solution: webscraper",
          "Let's code: python RabbitMQ",
          "Summary: let's code python RabbitMQ",
          "Solution: python RabbitMQ",
          "Let's code: integrate the backend",
          "Summary: let's code integrate the backend",
          "Solution: integrate the backend",
          "Let's code: integrate the frontend",
          "Summary: let's code integrate frontend",
          "Solution: integrate the frontend"
        ],
        "Where to go from here": [
          "Congratulations"
        ]
      },
      "requirements": [
        "You should have some programming experience",
        "You need Git, Vagrant and Virtualbox installed to follow the lessons"
      ],
      "description": "Dive into modern application development while you build a web scraping service from scratch. Understand the whole development process that goes from an idea to a plan to the implementation of a multifaceted application.\n\nGet a profound understanding of many important frameworks and tools in one single crash course.\nWeb design using Bootstrap\nJavascript frontend development using the elegant Knockout.js library\nREST API design and hypermedia-driven APIs\nSpring & Java backend development\nRapid prototyping with Spring Boot\nMicroservices architecture\nMessaging with RabbitMQ\nWeb scraping with Python\nThis class offers a unique distraction-free learning experience that allows you to start coding anytime just by clicking a link\n\nIt ships with a virtual machine image that has all requirements installed and a tutoring application that guides you through the course.\nInstead of wasting your time with installation or configuration issues that regular courses require, you just open your console and type in \"vagrant up\". I developed a tutoring application that guides you through the lectures and manages your source code and exercises. You start coding just by clicking a link and having the tutor taking care of the rest.\nMost courses either focus on too much theory without practice or are not more than a guided hacking tutorial ignoring deeper concepts. My class delivers the material in a concise form by teaching just enough essentials so you can start coding on your own.\n\nWhy watch hours of videos and forget most of it when I can get the same knowledge in a fraction of the time?\n\nContents and Overview\nThis course will take you from an idea to a plan to the complete application. We start with the requirements of our application that we have gathered with our fictive client. We plan the development as we would do in a real life software company.  Then we develop each part of the application.\nWe start with the frontend that we implement in two steps. First, we use Bootstrap to layout the website. Second, we make the website interactive using Knockout.js.\nNext we move to the backend side and talk about REST API development. Using Spring Boot and Java we demonstrate how to create an API quickly that clients consume.\nIn the final part of this course, we add a web scraping service to our application. We gain an understanding of the microservices architecture and learn how to increase modularity by taking advantage of messaging with RabbitMQ.\nThe reason I created this class is that I feel there are not enough offers available for developers who want to maximise the time spent on their education. As software developers, we constantly need to learn something new. Our time is precious. That's why my lectures focus on active coding and teaching what is most important.\nAs a bonus for my students I personally answer every open question you may have in the forum regarding the course material. My motivation is to help you succeed!",
      "target_audience": [
        "Intermediate programmer",
        "Anyone interested in developing an application from scratch",
        "Anyone who wants to build an application and have a base to build upon"
      ]
    },
    {
      "title": "Application Programming Interface: API and Web Services",
      "url": "https://www.udemy.com/course/application-programming-interface/",
      "bio": "Learn APIs and Web Services using REST, SOAP, JSON, XML, HTTP, Authorization, Authentication, JWT, Postman and Python",
      "objectives": [
        "Overview of APIs and Web Services",
        "Work with RESTful and SOAP APIs",
        "Learn different types of API Authentication",
        "Understand HTTP Overview",
        "Learn GET, POST, PUT DELETE request methods",
        "Create your own APIs using Python",
        "Create your own Basic Authentication API",
        "Learn XML and JSON data formats for APIs"
      ],
      "course_content": {},
      "requirements": [
        "A desire to learn all about APIs and Web Services",
        "Understanding the basics of Python will help when we create our own APIs"
      ],
      "description": "Welcome to the Application Programming Interface: API and Web Services course!\nAPIs and Web Services are some of the hottest technologies in the market for building scalable applications!\nUnderstanding and knowing how to build APIs and Web Services can improve the job you have, get you a new job or even create multiple contract roles in the future! These skills are are needed everywhere, and some of the highest paying job postings are asking for developers or IT professionals with API and Web Service experience.\nIn this Application Programming Interface course I will quickly get you up to speed, by walking you through APIs and Web Services from the beginning to the end! Whether you are interested in expanding your current craft, want to change careers or simply wanting to learn a very popular topic, then this course is for you! You will be learning modern technologies including: HTTP, RESTful & SOAP APIs, Authentication, Authorization, JSON Web Tokens (JWT) and more!\nWhy are APIs and Web Services taking over the market?\nTo make it simple, APIs and Web Services covers many aspects of modern development and architectures. Modern architectures that consume APIs include Microservices, SOA and many others, so if you want to get into creating modern applications, APIs are a must. APIs and Web Services allow you to not have to reinvent the wheel. With applications now consuming data over HTTP, this is the perfect time to learn about APIs.\nThis course is designed with beginners in mind! This means no matter what kind of background you come from, you will be able to learn one of the hottest technologies in the market. All you need is basic Python skills, and you are off to create your own APIs protected with authentication!\n---\nIn this course, you will get:\n- Knowledge on:\nREST, SOAP, JSON, XML, HTTP, Authorization, Authentication, JWT, Postman and Python\n- Responsive Instructor: All questions answered within 24 hours\n- Professional video and audio recordings (check the free previews)\n---\nContent and Overview:\nAPIs\nWeb Services\nAPI Protocols\nHTTP and HTTPS\nSOAP\nXML\nREST\nJSON\nPostman\nAuthentication\nAuthorization\nBasic Authentication\nDigest Authentication\nJSON Web Token (JWT)\nOAuth\nMany Exercises - To retain the information!\nand more!\nCourse videos are regularly updated to keep up with the newest updates and information. The codingwithroby community is very active, so always know that if you have a question you will receive an answer within 24 hours!\n---\nSee what other students are saying about my courses!\n\"Eric is a great instructor and broke down everything about Django to get me started with building my first web application. I highly recommend this course. I have learned more than I was expecting and easier than I thought!\"\n\"The instructor makes the concept easy to understand and learn.\"\n\"I learnt a lot and assignments helped me a lot and instant solution to it was amazing .It was good experienced explained in detail everything .\"\n\"Eric has done a great job explaining core concepts and how they relate with Django and Python.\"\n\"Clear, crisp and covered a wide array of topics on python. Thanks Eric for the course.\"\n\"I liked the step-by-step guide. Great real world examples. Thank you!\"\n---\n\n\nNo Risk – Money-Back Guarantee\nFinally, there is no risk. Once you purchase the course, if for some reason you are not happy with the course, Udemy offers a 30-day money back guarantee.\nSo you have nothing to lose, sign up for this course and learn all about Application Programming Interfaces and Web Services from scratch!\nIt is time to level up your career and learn about APIs and Web Services!\n\n\nTarget Audience\nStudents with a desire to learn about APIs and Web Services\nPython basic experience may be helpful when creating your own APIs",
      "target_audience": [
        "Anyone who wants to extend their knowledge learning about APIs and Web Services",
        "Students who wants to learn in depth knowledge on RESTful, SOAP, JSON, XML, HTTP, HTTPS, Authentication, Authorization, Postman and Python",
        "Developers who want to learn how to develop APIs"
      ]
    },
    {
      "title": "Spring Boot + Apache Kafka Course - The Practical Guide",
      "url": "https://www.udemy.com/course/spring-boot-and-apache-kafka/",
      "bio": "Learn to Use Apache Kafka to Exchange Messages Between Producer and Consumer in Spring Boot Applications & Microservices",
      "objectives": [
        "Learn Apache Kafka Core Concepts",
        "Learn how to integrate Apache Kafka in Spring boot application",
        "Learn how to create Kafka Topic, Producer and Consumer",
        "Learn how to exchange string messages between Producer and Consumer using Kafka broker",
        "Learn how to exchange JSON messages between Producer and Consumer using Kafka broker",
        "Learn real world use case (wikimedia real-time stream data) implementation using Apache Kafka",
        "Learn how to create real world project using Spring boot and Apache Kafka",
        "Learn what is Event-Driven Architecture, how it works and it's advantages",
        "Learn building Event-Driven Microservices using Spring Boot and Apache Kafka"
      ],
      "course_content": {
        "Getting Started with Apache Kafka": [
          "Apache Kafka overview",
          "Apache Kafka Core Concepts",
          "My Other Top and Bestseller Udemy Courses - Don't Skip",
          "Download Source Code"
        ],
        "Apache Kafka Installation": [
          "Install and Setup Kafka for Mac",
          "Install and Setup Kafka for Windows (Hands on using CLI)",
          "Note on When to use Kafka, and when to use RabbitMQ?"
        ],
        "Spring Boot + Kafka Producer and Consumer for String Message": [
          "Create and Setup Spring Boot Project in IntelliJ",
          "Configure Kafka Producer and Consumer",
          "Create Kafka Topic",
          "Create Kafka Producer",
          "Create REST API to Send Message",
          "Create Kafka Consumer",
          "Download Source Code of this Section"
        ],
        "Spring Boot + Kafka Producer and Consumer for JSON Message": [
          "Spring Kafka – JSON Serializer and Deserializer Overview",
          "Configure Kafka Producer and Consumer for JSON Serializer and Deserializer",
          "Create Simple POJO to Serialize/Deserialize",
          "Create Kafka Producer to Produce JSON Message",
          "Create REST API to Send JSON Object",
          "Create Kafka Consumer to Consume JSON Message",
          "Refactor Code to Externalize The Topic Name - Remove Hard Coded Values",
          "Download Source Code of this Section"
        ],
        "Spring Boot + Kafka Real World Project - Kafka Producer Wikimedia": [
          "Real World Project Overview",
          "Spring Boot Kafka Project Setup - Create Two Microservices",
          "Wikimedia Producer Spring Boot Project Setup",
          "Configure Wikimedia Producer and Create a Topic",
          "Wikimedia Producer and Event Handler Implementation",
          "Run Wikimedia Producer and Have a Demo",
          "Download Source Code of this Section"
        ],
        "Spring Boot + Kafka Real World Project - Kafka Consumer Database": [
          "Kafka Consumer Project Setup",
          "Configure Kafka Consumer in application.properties File",
          "Kafka Consumer Implementation",
          "Configure MySQL Database",
          "Save Wikimedia Data into MySQL Database",
          "Refactor Code to Remove the Hard Coded Values",
          "Download Source Code of this Section"
        ],
        "Event Driven Architecture": [
          "What is Event Driven Architecture?",
          "How Event Driven Architecture Works and It's Advantages"
        ],
        "Event-Driven Microservices using Spring Boot and Apache Kafka": [
          "Event-Driven Microservices Project Architecture Overview",
          "Create 4 Microservices - OrderService, StockService, EmailService & Base-Domains",
          "Import and Setup 4 Microservices in IntelliJ IDEA",
          "Base-Domains Microservice - Create DTO Classes - Order and OrderEvent",
          "OrderService Microservice - Configure Kafka Producer",
          "OrderService Microservice - Configure Kafka Topic",
          "OrderService Microservice - Create Kafka Producer",
          "OrderService Microservice - Create REST API to Send Order & Test Kafka Producer",
          "StockService Microservice - Configure Kafka Consumer",
          "StockService Microservice - Create Kafka Consumer",
          "EmailService Microservice - Configure and Create Kafka Consumer",
          "Run 3 Microservices Together and Have a Demo",
          "Download Source Code of this Section"
        ],
        "What's Next?": [
          "My Other Top and Bestseller Udemy Courses",
          "Thank You Note and Feedback About This Course"
        ]
      },
      "requirements": [
        "- Java",
        "- Spring boot"
      ],
      "description": "Sample of the reviews:\n\"Awesome. I enjoyed every bit of the lecture. Ramesh is a great tutor and I always purchase his courses.\"\n\n\n\"A much-needed course today, Kafka is a required topic for Java devs who want to work with microservices. The instructor is excellent, he knows Kafka perfectly.\"\n\n\n\"This course has really helped me understand Kafka. I like the style of teaching. The hands-on experience has given me much-needed confidence. I would be recommended this course to my friends and colleagues.\"\n\n\n\"Great opportunity to learn this new concept and thanks a lot for this course, Happy to learn and gain this awesome knowledge.\"\n\n\n\"great course as ever by Mr.RameshFadatare. Have been great at tutorials in Youtube from years. The same legacy continuing on Udemy. need more content & detailed Kafka course keep updating this @RameshFadatare\"\n\n\n------------------------------------------------------------------------------------------------------------------------\nIn this course, you will learn how to build Kafka Producer and Consumer to exchange different formats of data - String, JSON, and real-time Wikimedia stream data using Spring boot and Apache Kafka.\n\n\nIf you want to use Apache Kafka in Spring boot event-driven microservices then this course is useful to you.\n\n\nWhat is the Spring Boot?\nSpring Boot is an extension of the Spring framework that eliminated the boilerplate configurations required for setting up a Spring application.\n\nSpring Boot is an opinionated framework that helps developers build Spring-based applications quickly and easily. The main goal of Spring Boot is to quickly create Spring-based applications without requiring developers to write the same boilerplate configuration again and again.\n\n\nWhat is Apache Kafka?\nApache Kafka is an open-source distributed event streaming platform used by thousands of companies for high-performance data pipelines, streaming analytics, data integration, and mission-critical applications.\n\n\nWhat will you learn?\nLearn Apache Kafka Core Concepts\nLearn how to integrate Apache Kafka in the Spring boot application\nLearn how to create Kafka Topic, Producer, and Consumer\nLearn how to exchange string messages between Producer and Consumer using Kafka broker\nLearn how to exchange JSON messages between Producer and Consumer using Kafka broker\nLearn real-world use case (Wikimedia real-time stream data) implementation using Apache Kafka\nLearn how to create real-world projects using Spring boot and Apache Kafka\nLearn what is Event-Driven Architecture, how it works, and its advantages\nLearn building Event-Driven Microservices using Spring Boot and Kafka\n\n\nTools and Technologies used in this course:\nTechnologies:\nJava 8+\nSpring Boot\nSpring MVC\nSpring Data JPA ( Hibernate)\nTomcat\nMessaging Broker:\nApache Kafka\nIDE:\nIntellij IDEA\nDatabase:\nMySQL database\nTools:\nPostman - Test REST APIs\nMaven - Build Tool",
      "target_audience": [
        "This is course is for beginners as well as professional who want quickly start using Kafka in his/her Spring boot project",
        "This is course for someone who want use Kafka in even-driven microservices architecture."
      ]
    },
    {
      "title": "Introduction to Structured Text Programming in TwinCAT 3",
      "url": "https://www.udemy.com/course/introduction-to-beckhoff-twincat-3/",
      "bio": "Learn how to use and program in structured text language using TwinCAT 3 Automation Software",
      "objectives": [
        "How to use Beckhoff TwinCAT 3 Automation Software.",
        "Learn how to implement Conditional Statements in Structured Text programming language.",
        "Learn how to use and implement Programming Objects in TwinCAT Automation Software.",
        "Learn how to connect and link variables with a Beckhoff PLC on TwinCAT Automation Software.",
        "Learn how to program using Structured Text programming langauge"
      ],
      "course_content": {},
      "requirements": [
        "No prior programming or experience with Structured Text programming language, or TwinCAT needed, You will learn the basics in this course."
      ],
      "description": "This course will teach you the fundamentals of Structured Text programming language using TwinCAT 3 automation software. The TwinCAT software system turns almost any PC-based system into a real-time control with multiple PLC, NC, CNC, and/or robotics runtime systems in a single package. TwinCAT is a future-oriented software platform for machine builders and system integrators.\n\n\nBy the end of this course, you will learn all the basics on how to start developing your own application in structured text using TwinCAT 3 software, we will first go through the user interface and system configuration of TwinCAT. Then we will move on to variable declarations, standard data types, and user-defined data types such as Arrays, Structures, and Enumerations. We will also go through some conditional statements like IF and CASE instructions, FOR loops, While loops, and Repeat-Until loops. Additionally, we will go through Programming objects and some standard libraries, and finally how to communicate with a Beckhoff PLC. Along the way, you'll get hands-on experience with programming concepts through examples, assignments, and some quizzes.\nThe course is for you if you're a newcomer interested in TwinCAT 3 PLC programming, Beckhoff Automation PLCs or if you may have had some exposure to TwinCAT 2 the previous automation software from Beckhoff, and want to learn how to use the new generation of TwinCAT. Happy learning.",
      "target_audience": [
        "Application Engineers",
        "Automation Engineers",
        "Software Developers",
        "Engineers interested in PLC Programming"
      ]
    },
    {
      "title": "Computer Vision Fundamentals with OpenCV and C#",
      "url": "https://www.udemy.com/course/image-processing-fundamentals-with-opencv-and-csharp/",
      "bio": "Using OpenCVSharp Wrapper Library",
      "objectives": [
        "They will be able to develop applications such as barcode reading , text segmentation, object tracking, OCR techniques, document control"
      ],
      "course_content": {},
      "requirements": [
        "Some C# Programming Language Experience and a laptop"
      ],
      "description": "Hi,\n\n\nPlease meet  the  first video course ever   in Computer Vision Fundamentals covered using C# programming language and OpenCV wrapper OpenCVSharp .\n\n\nThis course  will teach you how to enter the wonderful world of computer vision using C# programming language and one of the most  widely used open source Computer Vision Library, namely the OpenCV. You will learn in particular, how to utilize a popular C# wrapper of OpenCV, which is  the OpenCVSharp.\nOnce you grasp the fundamentals of Computer Vision following this course, you will then be able to follow the  more advanced future courses in Computer Vision and Deep Learning field  that I will be recording.\nIn this course, you will learn the fundamentals of image processing which will open the way for you to tackle problems such as Barcode Recognition,  Webcam programming, Text Segmentation and OCR techniques  to read text from scanned documents.\n\n\nYou will learn in particular:\nHow to read images from disk and display them and save images to disk\nLearn about Mat type object of OpenCV\nImage pixel manipulations\nDrawing on images\nLocating a Region of Interest area and Cropping\nGray Scale Image conversion\nImage Thresholding Techniques\nImage Binarization\nImage Bitwise operations\nImage Filters- Image Convolution\nGaussian Blur\nMedian Blur\nHighPass filters\nSobel, Scharr Edge Detection methods\nCanny Edge Detection\nOpenCV Trackbar Programming for changing input parameters by a user control\nShape Contour detection\nContour Repair\nImage Resizing\nImage Rotation\nImage Flipping\nMorphological Operations (Erosion, Dilation, Opening, Closing, TopHat, BlackHat)\nContour Smoothing\nConvex Hull, Non-Convex defects\nShape Matching\nImage Masking\nImage Histograms, Histogram Plotting\nReal-life Applications (step by step explanations and coding ) : Barcode detection and decoding from a food package, Object Tracking via its color using  a webcam,  text OCR with  tesseract plus OpenCV)\nPlus the \"Assignments\" designed to help you get advanced skills in computer vision ( Hand Gesture Detection, Color image channel histograms, Coin counting, Textile Defect Detection)\nSoon you will find the source code updated to the latest version of OpenCVSharp, which is OpenCVSharp4(8/2/2024)\nI have already updated and then uploaded  the source code of the Barcode reading section(8/2/2024)\nWith my best regards,\nFrank Ozz",
      "target_audience": [
        "Software developers wanting to develop computer vision applications"
      ]
    },
    {
      "title": "Serverless Framework Bootcamp: Node.js, AWS & Microservices",
      "url": "https://www.udemy.com/course/serverless-framework/",
      "bio": "Learn how to develop reliable and scalable back-end applications effortlessly using Serverless Framework",
      "objectives": [
        "Becoming familiar with Serverless Framework",
        "Microservices Architecture",
        "Authentication and Authorization in Microservices",
        "Hands-on experience with Amazon Web Services",
        "Developing applications that can effortlessly handle an extreme scale",
        "Software Development with NodeJS",
        "REST API Development",
        "Data Persistence (DynamoDB)",
        "Microservices loose communication using Message Queues (SQS)"
      ],
      "course_content": {
        "Course Introduction": [
          "Project Overview",
          "Serverless Architecture in a Nutshell",
          "Introduction to Serverless Framework",
          "Real-world Serverless Use Cases",
          "More Valuable Content",
          "Introduction to Microservices Architecture",
          "AWS Free Tier"
        ],
        "Requirements and Prerequisites": [
          "Installing Node.js and NPM",
          "Installing the AWS CLI",
          "Installing the Serverless Framework CLI",
          "Configuring the AWS CLI + IAM",
          "(Optional) AWS Budgets and Alerts",
          "My Postman Setup"
        ],
        "Auction Service: Part 1": [
          "Let's Connect!",
          "Creating a Serverless Framework Project",
          "The Anatomy of a Serverless Project",
          "TIP: Serverless IDE VSCode Plugin",
          "Deploying Our Application for the First Time",
          "(Tip) Stack Removal",
          "Creating an Auction (Part 1)",
          "Creating an Auction (Part 2)",
          "NOTE: Introduction to DynamoDB",
          "Introduction to DynamoDB",
          "Creating our DynamoDB Table (IaaC)",
          "Using the DynamoDB DocumentClient to Insert an Auction",
          "Defining IAM Role Statements (Permissions)",
          "Optimising serverless.yml (Part 1): Roles and IAM Statements",
          "Optimising serverless.yml (Part 2): Intrinsic Functions and Custom Variables",
          "Serverless Offline - Is It Worth It?"
        ],
        "Auctions Service: Part 2 (CRUD Operations)": [
          "Introduction to Middy and Middleware",
          "CRUD Operation: Get Auctions",
          "CRUD Operation: Get Auction by ID",
          "Creating a Common Middleware",
          "CRUD Operation: Placing a Bid",
          "Validation: Placing a Bid"
        ],
        "Auction Service: Part 3 (Processing Auctions)": [
          "Using Scheduled Events to Process Our Auctions",
          "Creating a Global Secondary Index (status, endingAt)",
          "Identifying Ended Auctions",
          "Closing Auctions",
          "Validation: Bidding on Closed Auctions",
          "(Challenge) Getting Auctions - Filter by Status",
          "IMPORTANT: Schema Validation",
          "JSON Schema Validation - Get Auctions Status",
          "(Optional) Detailed Error Messages",
          "(Challenge) Create Auction Schema Validation",
          "(Challenge) Place Bid Schema Validation"
        ],
        "Auth Service": [
          "Section Introduction",
          "Introduction to Auth0",
          "Creating an Auth0 Application",
          "Getting Test Tokens",
          "Deploying Auth Service",
          "Protecting Auction Service Endpoints",
          "Specifying Seller Identity",
          "Specifying Bidder Identity (+Validation)"
        ],
        "Notification Service": [
          "Notification Service Setup",
          "Reminder: Linting Disabled",
          "Verify Email Address (AWS SES)",
          "Defining the sendMail Lambda Function",
          "Sending Our First (Test) Email",
          "Introduction to SQS and Message Queues",
          "Provisioning AWS SQS Message Queue (MailQueue)",
          "Manually Sending SQS Messages",
          "Exporting MailQueue Variables (CloudFormation)",
          "Importing Outputs in Auction Service",
          "Notifying Bidder and Seller",
          "(Challenge) Handling No Bids Case",
          "(Optional) Uncommenting EventBridge Trigger"
        ],
        "Auction Picture (Amazon S3)": [
          "Setting up an S3 Bucket and Lambda Function",
          "(Optional) Amazon S3 Picture Expiry",
          "Uploading Picture to S3",
          "Quick Error Handling Fix",
          "Setting Picture URL in DynamoDB",
          "(Challenge) Validate Auction Ownership",
          "(Challenge) Validate Request Body (base64)",
          "Moving Forward & Future Content"
        ],
        "(Bonus) Front-end Application": [
          "Front-end Demo",
          "Enabling CORS on Auction Service",
          "Setting up the Auctions Front-end"
        ]
      },
      "requirements": [
        "Basic understanding of JavaScript and/or NodeJS is recommended, but not required",
        "Basic knowledge in back-end development is recommended, but not required"
      ],
      "description": "Ever felt like you would like to build a back-end application that can handle millions of users, but you were terrified by the idea of managing (or learning how to manage) the infrastructure behind it?\nEver felt like you would like to focus on delivering valuable features, rather than making sure your services are up and running?\nEver felt like you are paying more than you should be?\n\n\nGood news!\nServerless Architecture takes the pain of site reliability off your shoulders. With Serverless Architecture, you and your team can focus on feature development. Your application will scale effortlessly, serving users reliably. You do not need to be an infrastructure expert to serve an application at scale. With Serverless, you only pay for what you use.\nServerless Framework revolutionizes the way we develop Serverless applications, by providing a developer-friendly API that supports dozens of cloud providers including Amazon Web Services, Google Cloud Platform, Microsoft Azure, and more.\nMore than that, Serverless Framework intelligently helps you manage your infrastructure as code (IaC), which eliminates the chance of paying for services that are not in use.\nWith an active community and a rich ecosystem of plugins, you can get things done at lightspeed and without boilerplate code.\nServerless Framework is language-agnostic, which means you can use the language and runtime of your choice (Node.js, Ruby, Python, Go, C#, Java, etc).\nWith over 450,000 downloads per week and x5 growth over the past two years, demand for Serverless experts is on the rise. It is one of the most in-demand skills in the market.\n___\nIn this course, you will learn how to develop reliable and scalable Serverless applications, following the microservices architecture. This course will be 100% hands-on, and you will be developing a real-world application;\nREST API and CRUD endpoints (AWS Lambda, API Gateway)\nData persistence (AWS DynamoDB)\nMessage Queues for cross-service communication (AWS SQS)\nScheduled event triggers (AWS EventBridge)\nCloud stack management (AWS CloudFormation)\nObject storage on the cloud (AWS S3)\nEmail notifications (AWS SES)\nMiddleware\nAuthentication and Authorization (Lambda Authorizer)\nData validation and error handling\n... much more\nBesides that, you will get hands-on experience with some of the most popular and useful services on the AWS platform. Demand for AWS experts is continuously on the rise, as AWS holds the biggest stake amongst all cloud providers.\nIf you are a hobbyist or professional developer with basic back-end development knowledge and want to dive into Serverless or Microservices architecture, this course is for you. Basic JavasScript/Node.js background is recommended, but not mandatory.\nJoin me today to learn one of the hottest skills in 2020.",
      "target_audience": [
        "Developers who want to learn more about Serverless Architecture and Serverless Framework",
        "Developers who want to learn how to work with the Amazon Web Services (AWS) cloud",
        "Developers who want to develop a real-world, reliable and scalable, application from zero to production",
        "Intermediate JavaScript developers who want to dive into back-end development",
        "Developers who want to learn best-practices when developing Lambda functions"
      ]
    },
    {
      "title": "Spring Boot For Software Engineers",
      "url": "https://www.udemy.com/course/spring-boot-for-software-engineers/",
      "bio": "Build enterprise restful API's",
      "objectives": [
        "Build enterprise applications",
        "Write great APIs with Spring MVC",
        "Write great APIs with RestEasy / JaxRS",
        "Use Resteasy Client API",
        "Use Java Bean Validation API to validate properties sent from client to server",
        "Write unit tests and mocking services",
        "Write integration tests",
        "Use Dependency Injection",
        "Serialise and Deserialise java objects as JSON",
        "Use Intellij IDEA like a real software engineer"
      ],
      "course_content": {
        "Intro & Understanding few key concepts": [
          "Hi",
          "Spring Boot Overview",
          "The N-Tier Architecture",
          "Dependency Injection Explained"
        ],
        "Spring Boot Initialiser & Bootstrapping": [
          "Bootstrap project from scratch",
          "Understand project structure",
          "Creating restful api Hello World with Spring Boot"
        ],
        "N-Tier (Data Access - DAO Layer)": [
          "Creating User model",
          "DAO interface",
          "Creating fake DAO and database using a Map",
          "Implementing DAO interface"
        ],
        "N-Tier (Service Layer)": [
          "Creating Service layer and refactor DAO interface",
          "Dependency Injection with Spring",
          "Lets Implement the business logic"
        ],
        "Unit Tests & Mocking with Mockito": [
          "Your first Unit Test",
          "Test select user by id",
          "Finish up writing tests for DAO",
          "Mocking Objects with Mockito",
          "Mockito BDD - Given, When and Argument Captor",
          "Wrapping up remaining unit tests"
        ],
        "N-Tier (Restful Api Layer)": [
          "Spring Boot and Web Servers overview",
          "HTTP GET Requets",
          "Configuring REST end point paths",
          "Path Variables",
          "Response Entity & HTTP Response Codes",
          "HTTP POST Requests",
          "Postman Overview",
          "HTTP POST, @RequestMapping & Consuming JSON",
          "HTTP PUT Requests",
          "HTTP Delete Requests",
          "Query Params",
          "Query Params & Filtering",
          "Improve Test Code Coverage",
          "@Consumes and @Produces",
          "Configuring what server Consumes from clients and Produces to clients"
        ],
        "Jackson Fasterxml": [
          "Jackson overview",
          "Immutable Objects and @JsonProperty",
          "Changing JSON property names with getters & @JsonProperty",
          "Computed JSON properties",
          "@JsonIgnore"
        ],
        "JAX-RS & Resteasy": [
          "Spring MVC Alternatives",
          "Resteasy starter pom",
          "Your first endpoint using Reasteasy",
          "Exercise",
          "Exercise Sol - Fully Switch User resource to user JaxRS annotations",
          "Testing UserResourseResteasy enpoint",
          "Jersey support with spring-boot-starter-jersey"
        ],
        "Resteasy Client API": [
          "Understanding Integration tests",
          "Reateasy Client API",
          "Creating proxy interface",
          "Creating proxy using @Bean",
          "Spring Boot property files and @Value",
          "Section recap"
        ],
        "Integration Tests": [
          "Intro to Spring Boot Integration tests",
          "Web Enviroment",
          "Your first Integration Test",
          "Create user Integration Test",
          "Delete User Integration Test",
          "Update user Integration Test",
          "Get users by gender Integration test",
          "Running all Integration tests"
        ]
      },
      "requirements": [
        "You should be familiar with Java",
        "You should be able to use an IDE"
      ],
      "description": "After receiving more than 150 thousands on youtube. My video on is the most popular video for learning Spring Boot in under 50 minutes. A lot viewers asked for a course and here it is.\nThis course is packed with over 6 hours of awesome content where you will learn the following\nN Tier Architecture\nIf you not sure how to structure applications. This course will teach you how to your classes in the right place.\nRestful API with Spring MVC and the most know HTTP Methods. i.e GET, POST, PUT, DELETE\nUnit testing\nWriting software is not just writing code with proving that it actually works.\nYou will learn how to unit test classes using JUnit, Mockito BDD style and Assertj.\nHow serialise and deserialise java class to JSON objects using Jackson FasterXml\nSpring Depedency Injection\nRemoving the new keyword for services and data access class has great advantages and its something that you must know.\nJaxRS and RestEasy\nSpring MVC is great but it does not implement JaxRS specification.\nYou will learn how to create Restful APIs with RestEasy\nRestEasy Client API\nChoosing the perfect rest client is difficult.\nRestEasy makes it easy to create proxy to any API.\nIntegration Tests\nIn this course you will learn how to write integration tests to ensure all components and classes work together.\nJava Bean Validation API\nThis API allows us to have annotations in Java POJOS to define allowed values for properties and required properties\nRefactoring\nHow to package and spin up the application as .JAR file\nPerhaps you want to learn how to build enterprise applications, or want to improve your skills in the Java world or even hunting for your next job as a software engineer. Well this course prepares you for all scenarios and I can guarantee you that will become a better software engineer after taking this course.\nBecome part of the 150 thousand people that have benefited from learning Spring Boot with me.\nEnrol now and I will see you inside.",
      "target_audience": [
        "Anyone who wants to learn how to build enterprise applications",
        "Anyone who wants to lean HTTP methods to consume data from clients",
        "Anyone who wants to learn Spring Boot",
        "Anyone who wants to learn how to build applications fast",
        "Anyone who wants to learn how to test applications",
        "Anyone who wants to learn how to write integration tests"
      ]
    },
    {
      "title": "Level Up Discord Bot Nodejs Development 2023",
      "url": "https://www.udemy.com/course/how-to-quickly-create-a-discord-bot/",
      "bio": "Level Up Feature For Your Server Members",
      "objectives": [
        "Creating a Discord bot.",
        "Programming language nodejs. (javascript)",
        "Level Up Discord Bot.",
        "Object data within programming.",
        "Using Discord API.",
        "You will learn a skill so you can express your creativity in code.",
        "You will be able to continue developing more advanced Discord bots after finishing this course.",
        "You will learn some IT safety.",
        "How to start and stop a node server.",
        "Using npm to install packages."
      ],
      "course_content": {
        "Introduction & Course Software 2023": [
          "Course Introduction Update 2023",
          "Correct Links to Software Required",
          "Nodejs Programming Language",
          "Visual Studio Code",
          "Discord Server 2023",
          "Discord Bot Application 2023"
        ],
        "Discord Bot Fundamentals 2023": [
          "Section Objective 2023",
          "Basics & Documentation",
          "Installation & Intents",
          "Login & Reply",
          "guildMemberAdd Event",
          "Fetch Channels ID",
          "Admin Message",
          "Coding Quiz"
        ],
        "Level Up Feature Bot 2023": [
          "Section Objective",
          "Concepts",
          "Read Data",
          "Save Data",
          "Increase Experience",
          "Check Level Command",
          "Experience To Next Level",
          "Small Program Adjustments",
          "Code Refactoring Process",
          "Server ID Expansion",
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "A Discord account and Discord installed.",
        "No programming experience needed. You will learn everything you need to know.",
        "Any OS. Mac, windows, linux. The code is the same."
      ],
      "description": "In this course you're going to develop a Level up bot using Nodejs programming language. This course is designed for absolute beginners to teach you how to code an interactive Discord bot for your Discord server. That is the level up which awards server members with 1 experience each time the member writes a message in the server.\nWithin this course you will learn and create the following.\nA Level up bot for your server that gives members experience when a message is written.\nA welcome to the server bot that welcomes new users to the server.\nNodejs installation.\nDevelop Discord bots using nodejs.\nVisual Studio Code Editor.\nNodejs is powerful skill to learn\nNodejs is a free programming language that is easy to learn. With nodejs you can create apps, APIs, web applications, connect to databases, Discord bots and much more. By learning nodejs you will have the knowledge to continue with other languages that are similar such as Java, C#, C, C++. The programming concepts in these programming languages are similar to those in nodejs with some differences.\nWhat are Discord bots used for?\nWhy are Discord bots useful? Discord bots can do a lot for you, such as gathering advanced API data from ex Blizzard websites displaying character information in World of Warcraft. Or down to a simple feature that welcomes a new user to the Discord server. Or keeping track of when a user edits or deletes a message.\nYour Instructor\nMy name is Erik Petersson and I have years of experience within various programming languages. My core skill lies within nodejs and full stack web development. I started my journey by studying to become a certified .net developer for 2 years in Kalmar and I used C# to develop the back end for web applications. With my skills in C# I've built 3D games in Unity. I have over 2 years experience in online teaching and I teach on multiple platforms.\n\nWhy this course?\n• You will develop a cool Discord bot for your server that has a level up feature for your server members.\n• You have lifetime access, and you will get new content for free.\n• At a fair price.\n• Downloadable code so you can use my code for free.\n• 1080p HD videos.",
      "target_audience": [
        "Beginner Programmers",
        "Beginners software development",
        "Beginners data analysing",
        "Nodejs developers any level",
        "Software engineers",
        "Beginners",
        "Anyone",
        "Curious about software",
        "Curious about development",
        "Curious about programming"
      ]
    },
    {
      "title": "Embedded Ethernet on STM32 Using W5500 for IoT Applications",
      "url": "https://www.udemy.com/course/ethernet-on-stm32-using-w5500/",
      "bio": "Start making Internet of Things Applications using STM32, TCP/IP, HTTP, REST API and MQTT",
      "objectives": [
        "Interface W5500 with STM32 to add Ethernet Connectivity",
        "Learn about basics of network programming (sockets and their use)",
        "Understand the Network Software Stack (layered architecture, OSI Model)",
        "Master Basics of TCP and UDP Communication",
        "Write TCP/UDP Clients and Server",
        "Write HTTP Clients and Servers",
        "Send Data to Web Application using HTTP/REST APIs",
        "MQTT Protocol and IoT Applications",
        "Publish messages to MQTT topics",
        "Subscribe to MQTT topics and receive MQTT messages",
        "Implement DHCP to enhance your device",
        "Use DNS protocol to get IP from domain names"
      ],
      "course_content": {
        "Introduction": [
          "Introduction to W5500",
          "Comparing Different Solutions for Ethernet Connectivity",
          "Getting Support from Us.",
          "Join our WhatsApp group for instant support",
          "Microcontroller and Board Selection",
          "Connections of W5500 with STM32",
          "Connect your W5500 Module with your Dev board.",
          "Downloading the Drivers",
          "Creating a Project in STM32CubeIDE",
          "Architecture of the Driver",
          "Integrating the Driver with STM32",
          "Writing the Initialization Code",
          "Static Host Configuration",
          "Creating a Small Network for Testing",
          "Redirecting printf() to USART",
          "Obtaining MAC Addresses",
          "Debugging using the STM32CubeIDE"
        ],
        "Writing our Application Code (main.c)": [
          "Writing our Application Code",
          "Direct Cable Connection",
          "A Simple TCP Client",
          "Client & Server Model",
          "A TCP Server Application (Concepts)",
          "Writing a Simple TCP ECHO Server"
        ],
        "User Datagram Protocol - UDP": [
          "Introduction to the UDP Protocol",
          "Writing a UDP Client",
          "Writing a UDP Client Part 2"
        ],
        "MQTT Protocol for IoT Applications": [
          "Our MQTT Test Setup",
          "Installing the MQTT Broker (Mosquitto)",
          "MQTT Client for PC (MQTTX)",
          "Installing Android MQTT Client on your Smart-Phone",
          "Downloading Eclipse Paho MQTT Client Library",
          "Architecture of the Paho Library",
          "Adding MQTT Support Files in STM32CubeIDE Project",
          "Network Abstraction Layer - Introduction",
          "Network Abstraction Layer - Implementation",
          "Paho's Timer Framework",
          "MQTTClient Data Structure (central point of an MQTT Client)",
          "Testing our MQTT Publish Example Code",
          "MQTT Subscriptions - Intro",
          "MQTT Subscriptions - Coding Part 1"
        ],
        "Dynamic Host Configuration Protocol (DHCP)": [
          "Implementing DHCP in a W5500 project",
          "Testing our DHCP Example Code"
        ],
        "Hyper Text Transfer Protocol (HTTP(S))": [
          "Simple HTTP Server Example"
        ],
        "DNS Protocol": [
          "DNS Example"
        ],
        "Creating our own Web based Datalogger": [
          "Introduction to Data Loggers",
          "iotence.com, our IoT Platform Web App",
          "Installing and using POSTMAN App for API Testing",
          "Introduction to the HTTP Protocol",
          "Quiz on HTTP Protocol",
          "Understanding the HTTP Responses",
          "Quiz about HTTP Response Message"
        ]
      },
      "requirements": [
        "Basic Knowledge of 'C' Programming",
        "Basic Experience of Microcontrollers",
        "Familiarity with STM32CubeIDE/CubeMX and HAL Drivers",
        "ST Development Boards Like Nucleo or Discovery",
        "A PC (Windows), no additional PAID software required."
      ],
      "description": "W5500 is a great chip to add Internet Connectivity to Embedded Systems over Ethernet. Ethernet is a preferred communication method in Industrial Automation because it is more reliable and secure than WiFi. No long-waiting time for connection establishments to access points or frequent disconnections.\n\n\nThe W5500 from WizNet has inbuilt TCP/IP stack that means we can use a MCU which has very limited computing power and RAM. You don't need to integrate complex TCP/IP stacks on your MCU's firmware. Many TCP/IP Stacks like lwIP requires a real time operating system in order to work. Which makes writing software a bit complex because the developer needs to be familiar with RTOS programming.\n\n\nYou only need to download a simple driver from WizNet's website and port it to STM32 and then start your development. It provides BSD socket like API for TCP and UDP communication.\n\n\nWe will write a simple TCP client and send text message to a server using our client.  After this you are sure that your hardware and software setup is perfect and can move on to create advance projects using HTTP, REST and MQTT.\n\n\nFor MQTT we will use the Paho MQTT client. Which is a free and open-source MQTT client. We will integrate Paho in our STM32 platform.\n\n\nSo what are you waiting for? Lets get started! Enroll Now!",
      "target_audience": [
        "Any one who wants to be a great embedded developer but has still NOT started with Ethernet Communication! A must have skill!"
      ]
    },
    {
      "title": "Learn By Example : Apache Storm",
      "url": "https://www.udemy.com/course/learn-by-example-apache-storm/",
      "bio": "25 Solved examples on Real Time Stream Processing",
      "objectives": [
        "Build a Storm Topology for processing data",
        "Manage reliability and fault tolerance of the topology",
        "Control parallelism using different grouping strategies",
        "Perform complex transformations using Trident",
        "Apply Machine Learning algorithms on the fly in Storm applications"
      ],
      "course_content": {
        "Start Here": [
          "You, This Course and Us"
        ],
        "Stream Processing with Storm": [
          "How does Twitter compute Trends?",
          "Improving Performance using Distributed Processing",
          "Building blocks of Storm Topologies",
          "Adding Parallelism in a Storm Topology",
          "Components of a Storm Cluster"
        ],
        "Implementing a Hello World Topology": [
          "A Simple Hello World Topology",
          "Ex 1: Implementing a Spout",
          "Ex 1: Implementing a Bolt",
          "Ex 1: Submitting the Topology"
        ],
        "Processing Data using Files": [
          "Ex 2: Reading Data from a File",
          "Representing Data using Tuples",
          "Ex 3: Accessing data from Tuples",
          "Ex 4: Writing Data to a File"
        ],
        "Running a Topology in the Remote Mode": [
          "Setting up a Storm Cluster",
          "Ex 5: Submitting a topology to the Storm Cluster"
        ],
        "Adding Parallelism to a Storm Topology": [
          "Ex 6 : Shuffle Grouping",
          "Ex 7: Fields Grouping",
          "Ex 8: All Grouping",
          "Ex 9: Custom Grouping",
          "Ex 10: Direct Grouping"
        ],
        "Section 7: Building a Word Count Topology": [
          "Ex 11: Building a Word Count Topology"
        ],
        "Remote Procedure Calls Using Storm": [
          "Ex 12: A Storm Topology for DRPC calls"
        ],
        "Managing Reliability of Topologies": [
          "Ex 13: Managing Failures in Spouts"
        ],
        "Integrating Storm with Different Sources/Sinks": [
          "Ex 14: Implementing a Twitter Spout",
          "Ex 15: Using a HDFS Bolt"
        ]
      },
      "requirements": [
        "Experience in Java programming and familiarity with using Java frameworks",
        "A Java IDE such as IntelliJ Idea should be installed"
      ],
      "description": "Storm is to real-time stream processing what Hadoop is to batch processing.  Using Storm you can build applications which need you to be highly responsive to the latest data and react within seconds and minutes, such as finding the latest trending topics on twitter, or monitoring  spikes in payment gateway failures. From simple data transformations to applying machine learning algorithms on the fly, Storm can do it all.\nThis course has 25 Solved Examples on building Storm Applications.\nWhat's covered?\n1) Understanding Spouts and Bolts which are the building blocks of every Storm topology.\n2) Running a Storm topology in the local mode and in the remote mode\n3) Parallelizing data processing within a topology using different grouping strategies : Shuffle grouping, fields grouping, Direct grouping, All grouping, Custom Grouping\n4) Managing reliability and fault-tolerance within Spouts and Bolts\n5) Performing complex transformations on the fly using the Trident topology : Map, Filter, Windowing and Partitioning operations\n6) Applying ML algorithms on the fly using libraries like Trident-ML and Storm-R.",
      "target_audience": [
        "Yep! Engineers looking to set up end-to-end data processing pipelines that react to changes in real time",
        "Yep! Folks familiar with Batch processing technologies like Hadoop who want to learn more about Stream processing"
      ]
    },
    {
      "title": "Hacking with tvOS 12 - Build Apple TV Apps",
      "url": "https://www.udemy.com/course/hackingwithtvos/",
      "bio": "The Complete course for tvOS App Developers - All finished projects and source code updated to Swift 5",
      "objectives": [
        "Build beautiful apps for Apple's tvOS platform"
      ],
      "course_content": {
        "Marks Awesome Animated SwiftUI Books & Other Great SwiftUI Resources": [
          "Marks Awesome Animated SwiftUI Books & Other Great SwiftUI Resources"
        ],
        "Introduction": [
          "Introduction - Welcome"
        ],
        "Whats it like to build for tvOS?": [
          "Whats it like to build for tvOS?"
        ],
        "Project 1 - Randomly Beautiful": [
          "Project 1 Intro",
          "Part 1A - Setting up - Designing a menu",
          "Part 1B - Setting up - Designing a menu",
          "Part 2 - Creating a second view controller",
          "Part 3A- Fetching and parsing JSON",
          "Part 3B- Fetching and parsing JSON",
          "Part 4 - Animating images"
        ],
        "Project 2 - Flashlight": [
          "Project 2 Intro",
          "Part 1 - Setting up - Rows and columns with collection views",
          "Part 2 - Creating levels",
          "Part 3 - There are four lights"
        ],
        "Project 3 - Focus": [
          "Project 3 Intro",
          "Part 1 - Setting up - Moving diagonally",
          "Part 2 - Handling preferred focus",
          "Part 3 - Animating and debugging"
        ],
        "Project 4 - TV News": [
          "Project 4 Intro",
          "Part 1 - Setting up - Designing a custom collection view",
          "Part 2 - Adding a tab bar controller",
          "Part 3 - Loading remote images",
          "Part 4 - Formatted strings",
          "Part 5 - Searching for stories"
        ],
        "Project 5 - Language Pairs": [
          "Project 5 Intro",
          "Part 1 - Setting up - Designing our user interface",
          "Part 2 - Shuffling the deck",
          "Part 3 - Winning the game"
        ],
        "Project 6 - Dark mode": [
          "Project 6 Intro",
          "Part 1 - Setting up - Theme customization in IB",
          "Part 2 - Theme customization in code"
        ],
        "Project 7 - Wikimaps": [
          "Project 7 Intro",
          "Part 1 - Setting up - Introducing MapKit",
          "Part 2 - Structs vs classes",
          "Part 3 - Searching and sorting",
          "Part 4 - Droppint wikipedia pins"
        ]
      },
      "requirements": [
        "Xcode 10 is needed - Which is a free download from the App Store"
      ],
      "description": "Note: All finished projects and source code have been update to swift 5.0. So even though some lectures are shown using Swift 4.2, just reference the source code for any update you might need.\nBuild 12 complete projects that teach you all the ins and outs of tvOS as well as 4 technique projects that reinforce your tvOS skills and knowledge by introducing the latest techniques, for building better apps.\nThis course is written by the award winning Swift programmer, Paul Hudson, it is from his best selling book, \"Hacking with tvOS\", made into a lecture style course, and these videos were made with his permission and support. Paul is the author of the Hacking With Swift series of tutorials, which is one of the most popular Swift coding sites online. Paul also has received high praise from the creator of the Swift language, Chris Lattner, for his outstanding method of teaching, and series of Swift tutorials. And working together with iOS developer Steve DeStefano, the Hacking with Swift series of programming training videos are simply the fastest way to learn how to code in the Apple eco-system.\nThis course incorporates the use of annotations, callouts, diagrams, highlighting, and deep explanations that help make complex subject matter, much easier to grasp, and serve to reinforce key concepts, as well as guide you along the path of the code, each step of the way. This course also makes the perfect reference tool kit, to be used in conjunction with the Apple docs, so that you can go back and scrub through any of the lectures very quickly to pull out relevant code or instruction that you need, as there's no wasted chatter here, it's strictly on point with tvOS.\nPlease note: These are intermediate to advanced projects, and this course will not teach you the Swift language, or how to code, you should already have completed Paul Hudson's Swift tutorials at HackingWithSwift dot com, or gone through the Hacking With Swift beginner to pro course here on Udemy.\nWork with table views, custom collection views, rows and columns\nLearn how to add animations to your apps\nBuild SpriteKit games\nFetch and parse JSON data\nLearn how to work with the tvOS \"Focus engine\"\nUse GCD (Grand Central Dispatch) to move to and from the main thread\nWork with the \"Tab Bar Controller\"\nLearn all about formatting strings\nLearn the API's for working with \"Dark Mode\", which adjusts the dark and light mode of your apps\nBuild a wiki map app using \"MapKit\"\nMake top shelf extensions, which are mini apps that occupy the top two thirds of the tvOS home screen\nUse TVMLKit, JavaScript, and XML to create a \"Movie Shopper app\"\nLearn how to save and store files using \"UserDefaults\", the \"iCloud key value store\", and \"on demand resources\"\nAnd much more!",
      "target_audience": [
        "This course is meant for intermediate and advanced programmers as it does not teach the Swift language, or how to code"
      ]
    },
    {
      "title": "Programming the Arduino - Getting Started",
      "url": "https://www.udemy.com/course/arduino-programming-for-beginners/",
      "bio": "Learn Arduino Programming step by step, and become more confident to write Arduino programs that rock !",
      "objectives": [
        "Create structured and efficient Arduino programs",
        "C and Arduino programming (+best practices)",
        "Become more autonomous when programming on Arduino, and rely less on copying/pasting",
        "Write code and practice instead of just sitting and watching",
        "Build a very basic Arduino circuit",
        "Get more confidence for your next Arduino projects"
      ],
      "course_content": {
        "Course Introduction": [
          "Welcome !",
          "Hardware components used in this course",
          "How to get the most out of this course"
        ],
        "Your First Steps with Arduino Programming": [
          "Intro",
          "Install the Arduino IDE",
          "Connect your Arduino board",
          "Arduino Program Architecture",
          "Upload Your First Program !",
          "First Activity : It's Time to Practice",
          "First Activity - Solution",
          "Debug Your Program",
          "Reset the Arduino Program Without Uploading it Again",
          "Section Conclusion"
        ],
        "C Programming for Arduino - Part 1": [
          "Intro",
          "Variables",
          "Variables - Data Types",
          "Functions",
          "Scope",
          "Activity 2 : Write a New Function and Print the Result on the Serial Monitor",
          "Activity 2 - Solution"
        ],
        "C Programming for Arduino - Part 2": [
          "Comments",
          "Conditions",
          "Conditional Operators",
          "Switch Statement",
          "Activity 3 : Practice on Conditions",
          "Activity 3 - Solution"
        ],
        "C Programming for Arduino - Part 3": [
          "Loops",
          "Arrays",
          "Constants",
          "Activity 4 : Compute the Max Value From an Array of Numbers",
          "Activity 4 - Solution",
          "C programming for Arduino - Conclusion"
        ],
        "Build a Simple Arduino Circuit Step by Step": [
          "Intro",
          "Understand How a Breadboard Works",
          "Pick the Right Resistors",
          "Build Your First Small Circuit"
        ],
        "Use Digital Pins to Control Hardware Components": [
          "Intro",
          "Hardware Setup : Add 3 LEDs",
          "pinMode() function",
          "digitalWrite() function",
          "Activity 5 : Blink 4 LEDs for your next Christmas Tree",
          "Activity 5 - Solution",
          "Activity 6 - Optimize Your Code With Arrays",
          "Activity 6 - Solution",
          "Hardware Setup : Add a Push Button",
          "digitalRead() function",
          "Activity 7 : Stop Blinking the LEDs When You Press the Button",
          "Activity 7 - Solution",
          "analogWrite() function",
          "Section Conclusion"
        ],
        "Communicate With The User - Make Your Programs More Dynamic": [
          "Intro",
          "Read Data From Serial",
          "Activity 8 : Let The User Choose Which LED to Power ON",
          "Activity 8 - Solution",
          "Use the EEPROM memory",
          "Activity 9 : Keep the User Choice For The Next Boot",
          "Activity 9 - Solution",
          "Section Conclusion"
        ],
        "Use Analog Pins": [
          "Intro",
          "Hardware Setup : Add a Potentiometer",
          "analogRead() function",
          "Activity 10 : Choose Which LED to Power ON With The Potentiometer",
          "Activity 10 - Solution",
          "Use an Analog Pin as a Digital Pin",
          "Section Conclusion"
        ],
        "Create Multitask Programs": [
          "Intro",
          "Get the Current Time with millis()",
          "Blink a LED Without delay()",
          "Blink 2 LEDs With a Different Blink Rate",
          "Activity 11 : Blink 4 LEDS With 4 Different Rates, Using Arrays and Functions",
          "Activity 11 - Solution",
          "micros() and delayMicroseconds() functions",
          "Activity 12 : Create a Complete Multitask Program !",
          "Activity 12 - Solution",
          "Section Conclusion"
        ]
      },
      "requirements": [
        "An Arduino board",
        "Some basic hardware components (detailed list in the first section) if you plan to program with a real circuit"
      ],
      "description": "You want to learn Arduino programming from the beginning ?\nYou want to write Arduino code that works, and that you can understand ?\nYou want to really do things by yourself, instead of reading theory and copying/pasting some code ?\nThen you are in the right place!\nThe goal of this course is to give you, step by step, the Arduino programming foundation that you need, along with a ton of practice, so you will be more confident to create much more complex and nice Arduino programs in the future.\nYou don’t need any special knowledge or programming experience to start this course, I will explain everything in details.\nEvery line of code that you see in this course will be written in front of you. I will write code, and you will also write code. No copy and paste.\nFor every important step on this course, you will do a programming activity to practice and get a better understanding.\nAlong the different activities, I’ll also give you some programming best practices that I’ve learned myself, so you’ll improve much faster than if you were just alone.\n\n\nWhy this course ?\nBecause I found that it’s hard to find a tutorial or course online that is mainly focused on Arduino programming.\nI recognize that plugging out-of-the-box components can be cool, because you feel that you are making complex things, but for real, you are just using easy-to-plug blocks that work by themselves. And now, when you need to make something more complex by yourself, or even a basic thing that has no “fancy” component doing it for you, then at this point, you feel lost, and need to go back to the basics. Or you find some random code from the Internet that you can copy and paste, and hope that this code will just work out of the box.\nI personally come from a programming background. So, when I first started to program on Arduino, I quickly noticed how limited most people are, just because they don’t have the required programming basics.\nWhat I found is that most people are limited by the programming side. When you use Arduino, OK this is a hardware board, but the true value you add to your circuit, robot, or anything else, comes from the programming side. You can’t skip that if you want to become an advanced Arduino Maker.\nSo… Start your learning today and unleash your programming creativity !\nHere is an overview of what you will learn through the course:\nInstall the Arduino IDE and upload a program to your Arduino board\nC programming in the Arduino environment\nSetup a basic Arduino circuit\nUse digital and analog pins to control external hardware components\nCommunicate with the outside\nStore values on your Arduino board\nCreate a multitask program\nSeparate your program into reusable blocks of code\n… and much more !\nPlease make sure to read the following. This course is NOT for you if :\nYou want an Arduino course specialized in hardware\nYou just want to quickly plug components, copy and paste some code\nYou are not interested in software development\nYou already have strong basics in Arduino programming",
      "target_audience": [
        "Beginners who want to learn the Arduino through programming and practising",
        "People who are tired of copying/pasting from the Internet because they don’t understand the code",
        "Makers who already have a running project, but feel that they lack the programming foundation they need",
        "Developers who already have some basic programming experience, and want to dive in Arduino programming"
      ]
    },
    {
      "title": "Data Structures and Algorithms in C++ For Coding Interview",
      "url": "https://www.udemy.com/course/data-structures-and-algorithms-cplusplus-for-interviews/",
      "bio": "Covers Algorithmic Problems in C++ That range a variety of data structures which often pop up during a coding interview.",
      "objectives": [
        "Solve Easy to Medium Difficulty problems that address different data strutures",
        "Have an understanding of how to systematically approach coding problems in a step by step manner"
      ],
      "course_content": {
        "Introduction": [
          "Introduction to Course",
          "What is LeetCode, and How will we use it?"
        ],
        "----------------------ARRAYS AND STRINGS DATA STRUCTURES------------------------": [
          "Start of Arrays And Strings Data Structure"
        ],
        "Arrays Data Structures: Two Sum": [
          "Two Sum problem Statement and O(n^2) Solution",
          "Implementation of O(n^2) naive solution",
          "Optimizing Further for O(nlogn) Solution",
          "Implementing the O(nlogn) Solution"
        ],
        "Arrays Data Structures Maximum Consecutive Ones": [
          "Problem Statement",
          "O(n^2) Naive Solution",
          "O(n^2) Naive Solution Implementation",
          "O(n) Solution idea and optimizations",
          "O(n) Solution Implementation"
        ],
        "Arrays Data Structures: Finding Maximum of three numbers": [
          "Problem Statement",
          "O(n^3) Naive Solution",
          "O(nlogn) Improved Solution",
          "Implementation of O(nlogn) solution",
          "Optimizing further and reaching O(n) Solution",
          "Implementation of O(n) Solution"
        ],
        "------------------------------STACK DATA STRUCTURE------------------------------": [
          "Start of Stack Section"
        ],
        "Stack Data Structure: Valid Parenthesis": [
          "Problem Statement",
          "Incorrect Approaches/Algorithms to the Problem",
          "Recursive Algorithm Solution That runs in O(n^2) Time",
          "Implementation of O(n^2) Recursive Algorithm",
          "Optimizing further With Stacks to get O(n) Solution Idea",
          "O(n) Solution Implementation"
        ],
        "Stack Data Structure: Baseball Game": [
          "Problem Statement and Example",
          "Naive O(n^2) Solution with additional boolean array",
          "Implementation of O(n^2) Solution",
          "Optimizing on the last algorithm to an O(n) Solution",
          "Implementation of O(n) Solution"
        ],
        "----------------------------HASH MAP DATA STRUCTURE----------------------------": [
          "Start of Hash Map Data Structure"
        ],
        "Hashmap and Hash Set Datastructure: Contains Duplicate II": [
          "Problem Statement",
          "Bruteforce Algorithm Idea: O(nk) Solution",
          "Bruteforce Implementation and Time Limit Exceeded",
          "Optimizing Using Hashmaps to get O(n) Solution on average",
          "Implementing the O(n) Solution"
        ]
      },
      "requirements": [
        "C++ Beginner to Intermediate Level (Loops/If Statements/Templates)",
        "Basic Understanding of BIg Oh Notation (What does O(n) mean, what does O(nlogn) mean, etc)",
        "Very Basic Understanding of Recursion (Factorial example suffices)"
      ],
      "description": "Welcome to Data Structures and Algorithms in C++ For Coding Interview!\n\nThis is the most comprehensive online course to help you with your coding interviews and solving algorithmic problems with Data Structures! This course utilizes C++'s strong standard library to efficiently teach you what you need to know to solve basic algorithmic and data structures interview problems in the coding interview!\nThis course will teach you everything you need to know about utilizing data structures in your algorithms. We discuss data structures and algorithmic techniques such as:\nArray/Strings Sequences\nStacks\nRecursion\nHash Maps\nBinary Trees\nSearching and Sorting Algorithms\nHeaps\nSeveral Assignments to solidify your understanding\nPLEASE NOTE:\nIf You're a complete beginner to C++, this course is not for you. Please make sure you satisfy the requirements before joining the course.",
      "target_audience": [
        "Any one interested in learning more about Data Structures and Algorithms",
        "Any one who wants to know how to implement solutions to algorithmic problems in C++ using data structures",
        "Any one who is preparing for a coding interview",
        "Any one who is thinking to become a software engineer and interviewing with Large companies"
      ]
    },
    {
      "title": "QC101 Quantum Computing & Intro to Quantum Machine Learning",
      "url": "https://www.udemy.com/course/qc101-introduction-to-quantum-computing-quantum-physics-for-beginners/",
      "bio": "Math-Based Introduction to Quantum Computing, Cryptography & Quantum Machine Learning. Code with Python, Q#, & Qiskit",
      "objectives": [
        "Use quantum cryptography to communicate securely",
        "Develop, simulate, and debug quantum programs on IBM Qiskit and Microsoft Q#",
        "Run quantum programs on a real quantum computer through IBM Quantum Experience",
        "Use Dirac's notation and quantum physics models to analyze quantum circuits",
        "Train a Quantum Support Vector Machine (Quantum Machine Learning) on real-world data and use it to make predictions",
        "Learn Data science and how quantum computing can help in artificial intelligence / machine learning",
        "Learn why machine learning will be the killer-app for quantum computing"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "How is Quantum Computing Different?"
        ],
        "Quantum Physics Through Photon Polarization": [
          "Introduction to Quantum Physics",
          "Quantum Physics Through Photon Polarization 1",
          "Quantum Physics Through Photon Polarization 2",
          "Quantum Physics Through Photon Polarization 3",
          "Quantum Physics Through Photon Polarization 4",
          "Quantum Physics Through Photon Polarization 5",
          "Quantum Physics Through Photon Polarization 6",
          "Quantum Physics Through Photon Polarization 7",
          "Quantum Physics Through Photon Polarization 8",
          "Quantum Physics Through Photon Polarization 9",
          "Quantum Physics Through Photon Polarization 10",
          "Quantum Physics Through Photon Polarization 11",
          "Quantum Physics Through Photon Polarization 12",
          "Quantum Physics Through Photon Polarization 13",
          "Quantum Physics Through Photon Polarization 14"
        ],
        "Math Foundation: Complex Numbers, Probability, Linear Algebra & Logic": [
          "Quantum Computing Through Math",
          "Boolean Algebra",
          "Boolean Variables and Operators",
          "Truth Tables",
          "Logic Gates",
          "Logic Circuits",
          "AND Gate",
          "OR Gate",
          "NOT Gate",
          "Multiple Input Gates",
          "Equivalent Circuits 1",
          "Equivalent Circuits 2",
          "Universal Gate NAND",
          "Exclusive OR",
          "XOR for Assignment",
          "XOR of Bit Sequences 1",
          "XOR of Bit Sequences 2",
          "Introduction to Cryptography",
          "Cryptography with XOR",
          "Shared Secret",
          "Importance of Randomness",
          "Breaking the Code",
          "Introduction to Probability",
          "Probability of a Boolean Expression",
          "Mutually Exclusive Events",
          "Independent Events",
          "Manipulating Probabilities With Algebra",
          "P (Mutually Exclusive Events)",
          "P (Independent Events)",
          "Complete Set of MutEx Events",
          "P ( A OR B )",
          "Examples",
          "Examples",
          "P ( Bit Values )",
          "Analysis With Venn Diagrams",
          "Venn Diagram : P (A AND B)",
          "Venn Diagram : P (A OR B)",
          "Venn Diagram : P ( NOT A )",
          "Examples",
          "Examples",
          "Conditional Probability",
          "Examples",
          "Introduction to Statistics",
          "Random Variables",
          "Mapping Random Variables",
          "Mean, Average, Expected Value, ...",
          "Example",
          "Example",
          "Beyond Mean",
          "Standard Deviation",
          "Examples",
          "Combinations of Random Variables",
          "Correlation",
          "Analysis of Correlation",
          "Introduction to Complex Numbers",
          "Imaginary i",
          "Addition",
          "Subtraction",
          "Multiplication by a Real",
          "Division by a Real",
          "Complex Multiplication",
          "Examples",
          "Complex Conjugates",
          "Squared Magnitude",
          "Complex Division",
          "Examples",
          "Euler's Formula",
          "Polar Form",
          "Examples",
          "Fractional Powers",
          "Complex Cube Roots of 1",
          "Square Root of i",
          "2D Coordinates",
          "Matrices",
          "Matrix Dimensions",
          "Matrix Addition",
          "Matrix Subtraction",
          "Scalar Multiplication",
          "Matrix Multiplication",
          "Examples",
          "Examples",
          "3x3 Example",
          "Exercises",
          "More Multiplications",
          "When is Multiplication Possible?",
          "Example",
          "Not Commutative",
          "Associative and Distributive",
          "Dimension of Result",
          "Odd Shaped Matrices",
          "Examples",
          "Outer Product",
          "Exercise",
          "Inner Product",
          "Exercises",
          "Identity Matrix",
          "Matrix Inverse",
          "Transpose",
          "Transpose Examples",
          "Transpose of Product",
          "Complex Conjugate of Matrices",
          "Adjoint",
          "Unitary",
          "Hermitian",
          "Hermitian and Unitary",
          "Why Hermitian or Unitary ?",
          "Vectors and Transformations",
          "Rotation in 2D",
          "Special Directions",
          "Eigen Vectors and Eigen Values",
          "More Eigen Vectors",
          "Computing Eigen Values"
        ],
        "Quantum Cryptography": [
          "Photons",
          "Photon Polarization",
          "Experiments with Photon Polarization",
          "No-Cloning Theorem",
          "Encoding with XOR",
          "Encryption with Single-Use Shared-Secrets",
          "Encoding Data in Photon Polarization",
          "Making the Protocol Secure",
          "Exchanging Polarization Angles",
          "Why is the BB84 protocol secure?",
          "Analysis"
        ],
        "Developing a Math Model for Quantum Physics": [
          "Modeling Physics with Math",
          "Subtractive Probabilities Through Complex Numbers",
          "Modeling Superposition Through Matrices",
          "Overview of Math Model"
        ],
        "Quantum Physics of Spin States": [
          "Introduction to Spin States",
          "Basis",
          "Column Matrix Representation of Quantum State",
          "State Vector",
          "Experiments with Spin 1",
          "Experiments with Spin 2",
          "Experiments with Spin 3"
        ],
        "Modeling Quantum Spin States with Math": [
          "Analysis of Experiments 1",
          "Analysis of Experiments 2",
          "Analysis of Experiments 3",
          "Dirac Bra-Ket Notation 1",
          "Dirac Bra-Ket Notation 2",
          "More Experiment Analysis 1",
          "More Experiment Analysis 2",
          "On Random Behavior"
        ],
        "Reversible and Irreversible State Transformations": [
          "Irreversible Transformations: Measurement",
          "Reversible State Transformations"
        ],
        "Multi-Qubit Systems": [
          "Analyzing Multi-Qubit Systems"
        ],
        "Entanglement": [
          "Entanglement"
        ]
      },
      "requirements": [
        "12th grade level high-school Math and Physics",
        "You must have studied Math and Physics upt o 12th grade level and *enjoyed* it. Quantum Computing is primarily about Math & Physics. There is very little coding involved.",
        "12th grade level, high school Math: Complex numbers, linear algebra, probability, statistics, & boolean logic"
      ],
      "description": "Welcome to the bestselling quantum computing course on Udemy!\nQuantum Computing is the next wave of the software industry. Quantum computers are exponentially faster than classical computers of today. Problems that were considered too difficult for computers to solve, such as simulation of protein folding in biological systems, and cracking RSA encryption, are now possible through quantum computers.\nHow fast are Quantum Computers? A 64-bit quantum computer can process 36 billion billion bytes of information in each step of computation. Compare that to the 8 bytes that your home computer can process in each step of computation!\nCompanies like Google, Intel, IBM, and Microsoft are investing billions in their quest to build quantum computers. If you master quantum computing now, you will be ready to profit from this technology revolution.\nThis course teaches quantum computing from the ground up. The only background you need is 12th grade level high-school Math and Physics.\nIMPORTANT: You must enjoy Physics and Math to get the most out of this course. This course is primarily about analyzing the behavior of quantum circuits using Math and Quantum Physics. While everything you need to know beyond 12th grade high school science is explained here, you must be aware that Quantum Physics is an extremely difficult subject. You might frequently need to stop the video and replay the lesson to understand it.\n\n\nQUANTUM MACHINE LEARNING\nIt appears that the killer-app for quantum computing will be machine learning and artificial intelligence.\nQuantum machine learning algorithms provide a significant speed-up in training. This speed-up can result in more accurate predictions.\nWhile understanding quantum algorithms requires mastery of complex math, using  quantum machine learning is relatively simple. Qiskit encapsulates machine learning algorithms inside an API that mimics the popular Scikit-Learn machine-learning toolkit. So you can use quantum machine learning almost as easily as you would traditional ML!\nQuantum machine learning can be applied in the back-end to train models, and those trained models can be used in consumer gadgets. This means that quantum machine learning might enhance your everyday life even if quantum computers remain expensive!\n\n\nCOURSE OUTLINE\nWe begin by learning about basic math. You might have forgotten the math you learned in high-school. I will review linear algebra, probability, Boolean algebra, and complex numbers.\nQuantum physics is usually considered unapproachable because it deals with the behavior of extremely tiny particles. But in this course, I will explain quantum physics through the behavior of polarized light. Light is an everyday phenomenon and you will be able to understand it easily.\nNext we learn about quantum cryptography. Quantum cryptography is provably unbreakable. I will explain the BB84 quantum protocol for secure key sharing.\nThen we will learn about the building-blocks of quantum programs which are quantum gates.\nTo understand how quantum gates work, we will study quantum superposition and quantum entanglement in depth.\nWe will apply what we have learned by constructing quantum circuits using Microsoft Q# (QSharp) and IBM Qiskit. For those of you who don't know the Python programming language, I will provide a crisp introduction of what you need to know.\nWe will begin with simple circuits and then progress to a full implementation of the BB84 quantum cryptography protocol in Qiskit.\nThe killer-app for quantum computing is quantum machine learning.\nTo understand quantum machine learning, we must first learn how classical machine learning works. I provide a crisp introduction to classical machine learning and neural networks (deep learning).\nFinally, we will train a Quantum Support Vector Machine on real-world data and use it to make predictions.\n\n\nFor a better learning experience, open the transcript panel.\nYou will see a small \"transcript\" button at the bottom-right of the video player on Udemy's website. If you click this button, the transcript of the narration will be displayed. The transcripts for all the videos have been hand-edited for accuracy. Opening the transcript panel will help you understand the concepts better.\nIf you missed an important concept, then you can click on text in the transcript panel to return directly to the part you want to repeat. Conversely, if you already understand the concept being presented, you can click on text in the transcript panel to skip ahead in the video.\n\n\nPacing : This course is designed to be slow with a lot of repetition.\nQuantum physics is easier for beginners to understand when concepts are repeated. If you want to learn at a faster pace, then open the transcripts panel (as explained in the previous paragraph above) and click the transcript-text to skip ahead to the next concept.\n\n\nEnroll today and join the quantum revolution!",
      "target_audience": [
        "Software professionals and technical managers who want to learn quantum computing and enjoy Math & Physics",
        "Machine Learning and AI professionals who want to learn how quantum computing can be used in data science"
      ]
    },
    {
      "title": "Learn the Agile Methodology",
      "url": "https://www.udemy.com/course/introduction-to-agile/",
      "bio": "Learn the Agile Methodology : PMI : Project Management 101 :Project Management Process : Tutorial",
      "objectives": [
        "Define what Agile software development is",
        "Understand the 4 value statements of the Agile manifesto",
        "Identify the 12 Agile Manifesto Principles",
        "Compare Agile to Traditional (Waterfall) development processes",
        "Deeper dive into the Agile approach - look at Scrum and XP",
        "Describe how Agile and Traditional methodologies evolve",
        "Explain the Program Du Jour Effect",
        "Learn the trade-offs of using Agile versus not using Agile",
        "Common Misconceptions of Agile"
      ],
      "course_content": {
        "Agile - Welcome": [
          "Welcome Intro Video",
          "Explanation of the Agile Development Life Cycle"
        ],
        "Lectures": [
          "Define Agile, Scrum and XP",
          "Agile Methodologies and the Agile Manifesto",
          "The Agile Manifesto 12 Principles",
          "Agile Approaches, Waterfall and Questions to Consider",
          "Assessment 1",
          "Agile and Waterfall and Program Du Jour Effects",
          "Assessment 2",
          "Common Misconceptions of Agile",
          "Assessment 3",
          "Trade-offs and Key Lessons Learned"
        ]
      },
      "requirements": [
        "Internet connection"
      ],
      "description": "In this course, you will learn the Basics of what Agile development is, whether you are a software developer or a project manager in charge of keeping development projects on track in an agile environment. This course offers an overview and history to get a basic understanding of all of the following:\nThe definition of Agile (as it applies to projects and software development)\nThe 4 Value Statements of the Agile Manifesto\nIdentify the 12 Agile Manifesto Principles\nCompare Agile to Traditional (Waterfall) Development Processes\nThe Agile Approaches - Scrum and XP (Extreme Programming)\nDescription of how Agile and Traditional Methodologies Evolve\nExplain the Program Du Jour Effect\nTrade-Offs of Using Agile versus not Using Agile\nCommon Misconceptions of Agile\nThis course will NOT teach any type of code and is not meant to be technical in nature. Having a basic understanding of the software development life cycle is important.\n#agile #projectmanagement #manager #pmp #pmi #process #certification #basics",
      "target_audience": [
        "Software Developers",
        "Project Managers"
      ]
    },
    {
      "title": "Learn Google's Gemini and Anthropic's Claude API with Python",
      "url": "https://www.udemy.com/course/google-gemini-pro-vision-api-with-python/",
      "bio": "Harness the Power of Google's Gemini 1.5 and Anthropic's Claude 3 LLMs for Cutting-edge Applications. Hands-On Learning",
      "objectives": [
        "Gain a deep understanding of the Google's Gemini and Anthropic's Claude 3 API with Python",
        "Install Python SDK for Gemini and Claude 3 API and authenticate to Gemini",
        "Create freeform prompts with Gemini Pro Vision in Google AI Studio",
        "Use variables and parameters in Gemini prompts in Google AI Studio",
        "Generate text from text inputs using Gemini Pro API and Python",
        "Stream model responses from Gemini and Claude",
        "Generate text from image and text inputs using Gemini Pro Vision and Claude 3 API and Python",
        "Control how the model generates responses using Gemini API generation parameters: temperature, top_k, top_p, stop sequences and more",
        "Build custom chat conversational agents",
        "Master prompt-engineering techniques for LLMs",
        "You'll learn how to create web interfaces (front-ends) for you LLM apps using Streamlit",
        "Streamlit: main concepts, widgets, session state, callbacks",
        "Learn how to use Jupyter AI efficiently"
      ],
      "course_content": {
        "Getting Started": [
          "How to Get the Most Out of This Course",
          "Python IDEs For This Course",
          "Setting Up the Environment: Jupyter Notebook",
          "Setting Up the Environment: Google Colab",
          "Join Our Online Community!",
          "Course Resources"
        ],
        "Deep Dive into Google Gemini Pro API": [
          "Getting a Gemini API Key",
          "Quiz for Getting a Gemini API Key",
          "Installing the Python SDK for Gemini Pro API and Authenticating to Gemini",
          "Quiz for Installing the Python SDK",
          "Gemini Multimodal Models: Nano, Pro and Ultra",
          "Quiz for Gemini Models",
          "Google AI Studio: Freeform Prompts With Gemini Pro Vision",
          "Google AI Studio: Using Variables and Parameters in the Prompt",
          "Generating Text From Text Inputs: Gemini Pro",
          "Streaming Model Responses",
          "Quiz for Generating Text from Text Inputs",
          "Generating Text From Image and Text Inputs: Gemini Pro Vision",
          "Gemini API Generation Parameters: Controlling How the Model Generates Responses",
          "Gemini API Generation Parameters Explained",
          "Quiz for Gemini API Generation Parameters",
          "Building a Chat Conversation",
          "Quiz for Building a Chat Conversation",
          "Project: Building a Conversational Agent Using Gemini Pro"
        ],
        "Unlocking the Power of Gemini 1.5 Pro API": [
          "Introduction to Gemini 1.5 Pro",
          "System Instructions",
          "The File API: Prompting with Media Files",
          "Tokens in Gemini API",
          "The File API: Prompting with Audio"
        ],
        "Jupyter AI": [
          "Jupyter AI",
          "Python Version",
          "Introduction to Jupyter AI and Other Coding Companions",
          "Installing Jupyter AI",
          "Using Jupyter AI in JupyterLab",
          "Setting Up Jupyter AI in Jupyter Notebook",
          "Using Jupyter AI in Jupyter Notebook",
          "Using Interpolation for More Advanced Use Cases",
          "Using Jupyter AI with Other Providers and Models"
        ],
        "Project: Talking With an Image": [
          "Project Requirements",
          "Building the Application",
          "Testing the Application",
          "Streamlit: Transform Your Jupyter Notebooks into Interactive Web Apps",
          "Creating the Web App Layout With Streamlit",
          "Saving and Displaying the History Using the Streamlit Session State"
        ],
        "Project: Building an AI-Powered Image Renaming Tool": [
          "Project Introduction",
          "Getting Images Using a Generator",
          "Renaming Images Using Gemini"
        ],
        "Prompt Engineering for Gemini API": [
          "Intro to Prompt Engineering",
          "Tactic #1 - Position Instructions Clearly With Delimiters",
          "Tactic #2 - Provide Detailed Instructions for the Context, Outcome, or Length",
          "Tactic #3 - Specify the Response Format",
          "Tactic #4 - Few-Shot Prompting",
          "Tactic #5 - Specify the Steps Required to Complete a Task",
          "Tactic #6 - Give Models Time to \"Think\"",
          "Other Tactics for Better Prompting and Avoiding Hallucinations",
          "Prompt Engineering Summary"
        ],
        "Deep Dive into Anthropic's Claude 3 API": [
          "Claude 3 Models: Haiku, Sonnet, Opus",
          "Anthropic API Setup",
          "Generating Text from Text Prompts",
          "Understanding the Assistant Role",
          "The System Prompt",
          "Streaming Responses from Claude",
          "Exploring Multimodal AI: Vision Capabilities",
          "Using Online Images as Input",
          "Vision Testing: Handwriting, Charts, and Visual Prompting",
          "Combining Multiple Images"
        ],
        "[Appendix] Python Programming": [
          "README",
          "While and continue Statements",
          "While and break Statements",
          "List Slicing and Iteration",
          "List Comprehension - Part 1",
          "List Comprehension - Part 2",
          "Working with Dictionaries",
          "JSON Data Serialization",
          "JSON Data Deserialization",
          "Assignment: JSON and Requests/REST API",
          "Assignment Answer: JSON and Requests/REST API"
        ],
        "[Appendix] Building Front-ends for AI Apps With Streamlit": [
          "Introduction to Streamlit",
          "Streamlit Main Concepts",
          "Displaying Data on the Screen: st.write() and Magic",
          "Widgets, Part 1: text_input, number_input, button",
          "Widgets, Part 2: checkbox, radio, select",
          "Widgets, Part 3: slider, file_uploader, camera_input, image",
          "Layout: Sidebar",
          "Layout: Columns",
          "Layout: Expander",
          "Displaying a Progress Bar",
          "Session State",
          "Callbacks"
        ]
      },
      "requirements": [
        "Basic Python programming experience is required.",
        "The Gemini API is only available in certain regions worldwide. Before enrolling, please verify that Gemini supports your region.",
        "A valid phone number for Claude 3 API free credits."
      ],
      "description": "In this course, you'll learn about both Google's Gemini and Anthropic's Claude 3 API with Python.\n**Fully updated for Gemini 1.5 Pro API!**\n\n\nWelcome to the Gemini Era. Embrace the Gemini Pro Vision API with Python and Become a Pioneer in Multimodal AI\nPrepare to master Google's Gemini Pro Vision API with Python and unleash the power of Google's most capable AI family into your applications.\nBy the end of this journey, you'll master the Gemini Pro API (1.5 included) and become a pro in LLM prompt engineering, equipped to create groundbreaking and intelligent Python applications using the Gemini API.\nGet ready to join the forefront of multimodal AI innovation as we constantly update this course with the latest advancements, equipping you with the skills to thrive in the future.\n\n\nThis course on Google's Gemini Pro Vision API with Python covers everything you need to know about the Gemini family of models and about effective prompt engineering for LLMs.\n\n\nYou'll also learn how to use the Python API for the Anthropic's Claude 3 family of models: Opus, Sonnet and Haiku.\n\n\nBecome a pioneer shaping the technological landscape and reap the benefits of being an early adopter.\n\n\nIn today's world, AI is the key to unlock unprecedented productivity.\nEmbrace the Gemini Pro Vision API with Python, Google AI Studio, and advanced prompting tactics to stay ahead of the curve.\n\n\nIn this course, you'll learn by doing, with practical projects that will guide you in applying what you learn.\nYou'll also discover the best practices and tips for effective prompting for LLMs, such as using few examples, finding relevant context information, and exploring different prompt engineering techniques.\n\n\nBy the end of this course, you'll be able to:\nLearn how to use Google's Gemini Pro [Vision] API with Python, the most advanced and versatile AI tool from Google\nCreate freeform and dynamic prompts with Gemini Pro Vision in Google AI Studio\nUnlock the Power of Gemini 1.5 Pro API\nUse the File API for prompting with media files (audio, video and more)\nGenerate text from text inputs using Gemini Pro API and Python\nStream model responses\nGenerate text from image and text inputs using Gemini Pro Vision API and Python\nControl how the model generates responses using Gemini API generation parameters: temperature, top_k, top_p, stop sequences and more\nBuild custom chat conversational agents\nMaster the art of prompt engineering for LLMs and create effective and natural language queries for any task\nYou'll learn how to create web interfaces (front-ends) for your LLM apps using Streamlit\nLearn how to use Anthropic's Claude 3 API with Python: API setup, generating text, streaming, Claude 3 vision capabilities, and more\nLearn how to use Jupyter AI efficiently\nThis course is suitable for anyone who wants to learn how to use the Gemini Pro Vision API,  Google AI Studio, Claude 3 API, and how to leverage the power of multimodal AI for various applications.\nIf you are ready to take your skills to the next level and master one of the most cutting-edge technologies in AI, enroll in this course today and start your journey to multimodal AI mastery!",
      "target_audience": [
        "Python programmers who want to integrate the Google's Gemini and Anthropic's Claude models into their applications.",
        "Programmers looking to develop AI apps with cutting-edge AI (Google's Gemini and Anthropic's Claude 3) for free.",
        "Any technical person interested in the most disruptive technology of this decade."
      ]
    },
    {
      "title": "Reactive Applications with Spring WebFlux Framework",
      "url": "https://www.udemy.com/course/reactive-applications-with-spring-webflux-framework/",
      "bio": "Creating a Secure, Reactive and non-blocking REST API with Spring WebFlux",
      "objectives": [
        "What Reactive Programming is",
        "Architecture of Reactive Spring Boot application",
        "Create Reactive Spring Boot application",
        "Write and read from a database in reactive/non-blocking way",
        "Use Spring Security in reactive Spring WebFlux application",
        "Implement user authentication in reactive application",
        "Implement JWT authentication in reactive application",
        "Create and validate JSON Web Tokens(JWT)",
        "Use method-level security annotations",
        "Write Spring Security Expressions(SpEL)"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Introduction to traditional(Blocking) Applications": [
          "Traditional(Blocking) applications",
          "Traditional(Blocking) Thread per Request Architecture",
          "Solutions to Thread per Request Problem",
          "Quiz: Traditional Spring WebMVC applications"
        ],
        "Introduction to Reactive Programming": [
          "Spring Framework and Reactive Streams Specification",
          "Introduction to Reactive programming",
          "Introduction to Data Streams",
          "Back pressure",
          "Data Streams - A quick demo",
          "Reactive Application Overview",
          "Introduction to Spring WebFlux",
          "Quiz: Introduction to Reactive Programming"
        ],
        "Creating a Reactive Spring Boot application project": [
          "Java Development Environment & IntelliJ IDEA Ultimate Edition Licence",
          "Creating a new Reactive Spring Boot project",
          "Configure H2 database support in Reactive Spring Boot application",
          "Creating a Database schema",
          "Configuration class to start and stop H2 console web server",
          "Login to H2 database"
        ],
        "Presentation layer: Accept HTTP request and return HTTP response": [
          "Introduction to presentation layer",
          "@RestController: Creating and configure the RestController class",
          "@PostMapping: Handle HTTP Post request",
          "@RequestBody: Reading HTTP Request Body",
          "@Validated: Validating HTTP Request body",
          "Trying if validation works",
          "Mono: Returning a single String value in HTTP Response body",
          "Mono: Returning a User object in HTTP Response body",
          "ResponseEntity: Returning custom HTTP status code",
          "@GetMapping: Handle HTTP GET Request",
          "Flux: Returning multiple objects in HTTP Response body",
          "@RequestParam: Reading URL Query String Parameters"
        ],
        "Data layer: Working with a database": [
          "Introduction to data layer",
          "Creating database schema for Users table",
          "Creating User Entity class",
          "Spring Data R2DBC: Creating ReactiveCrudRepository"
        ],
        "Service layer: Business logic": [
          "Introduction to Service layer in Reactive Spring WebFlux application",
          "Creating a Service class",
          "Implementing the createUser() method",
          "Invoke createUser() method from a method in the Rest Controller class",
          "Create User: Trying how it works",
          "Returning Details of a Single User",
          "Get User: Trying how it works"
        ],
        "List all users. Pagination in Reactive Spring WebFlux REST application.": [
          "Data layer: Find all records + pagination.",
          "Service layer: Find all records + pagination.",
          "Presentation layer: Find all records + pagination.",
          "Trying how it works",
          "Enabling SQL Query Logging in reactive Spring WebFlux application"
        ],
        "Error Handling in Reactive Spring WebFlux applications": [
          "Handling one specific exception with onErrorMap() in Spring WebFlux",
          "Handling multiple exceptions with onErrorMap() in Spring WebFlux",
          "Introduction to Global Exception Handling in Spring",
          "@RestControllerAdvice and @ExceptionHandler in reactive application",
          "Trying how Controller Advice works",
          "Formatting Bean validation errors in Spring WebFlux application",
          "Trying how custom bean validation error responses work in Spring WebFlux"
        ],
        "Unprotected API endpoints - Security Security in Reactive WebFlux.": [
          "Adding Spring Security to reactive Spring WebFlux application",
          "@EnableWebFluxSecurity and Spring Security configuration class",
          "Granting access to public API endpoints in reactive Spring WebFlux application",
          "Trying how it works"
        ]
      },
      "requirements": [
        "Basic knowledge of Java",
        "Basic familiarity with Spring Framework"
      ],
      "description": "In this video course you will learn how to create Reactive and Non-blocking applications with Spring WebFlux framework.\n\n\nThis course is perfect for beginners and will start with the basics of Spring WebFlux.\n\n\nYou will learn:\n- What Reactive programming is and how it is different from an imperative programming style,\n- The key differences between the traditional, blocking Spring WebMVC and the non-blocking, Reactive Spring WebFlux applications,\n- To create reactive RESTful Web Service application that handles different types of HTTP requests,\n- Write and read information from a database in a reactive, non-blocking way.\n\nAs you progress through the course, you will learn how to:\n- Use Spring Security to protect your Spring WebFlux application,\n- Implement user login(authentication),\n- Generate and use JSON Web Tokens (JWT) for secure communication\n- Validate JWT and read token claims,\n- Use method-level security annotations to perform authorization.\n\n\nYou will also learn how to add pagination and read database records in smaller chunks to improve performance.\n\n\nAll important concepts are explained using simple, easy-to-follow slides. The source code is provided, so you can download it and follow along with each lesson.\n\n\nThis course also includes helpful quiz questions to test your knowledge as you go. Plus, there is an active Q&A section where you can get answers to all your questions\n\n\nBy the end of this course, you’ll be able to create fast, secure, and scalable Reactive applications with Spring WebFlux.",
      "target_audience": [
        "Java developers interested in learning how to create reactive applications with Spring Framework"
      ]
    },
    {
      "title": "Backend Engineering with Go",
      "url": "https://www.udemy.com/course/backend-engineering-with-go/",
      "bio": "The complete guide for building and deploying production web APIs in Golang (PostgreSQL, Docker and Google Cloud)",
      "objectives": [
        "Learn the Fundamentals of Web Development with Go",
        "Build Production Grade Applications with Go",
        "Learn to Weight and Think about Software Design Decisions",
        "Learn to Build and Deploy Go APIs to the Cloud",
        "Learn How to Scale and manage Traffic",
        "Learn How to Connect a Postgres Database with a Go Server"
      ],
      "course_content": {
        "Introduction": [
          "Project Overview",
          "Why Go with Go?",
          "Preface for Udemy Students",
          "Course Resources",
          "Getting your Tools Ready"
        ],
        "Project Architecture": [
          "Design Principles for a REST API"
        ],
        "Mini Course: Advanced Go": [
          "Introduction",
          "Effective Error Handling",
          "Interfaces",
          "Testing",
          "Pointers",
          "Goroutines",
          "Context and Timeouts",
          "Concurrency with Channels",
          "Maps",
          "Capstone Project (Exercise)",
          "Capstone Project Solution",
          "Map Concurrency & Mutexes",
          "Final word"
        ],
        "Building a server from TCP to HTTP": [
          "TCP Server - net package",
          "Understanding Routing",
          "HTTP Server - The net/http package",
          "Encoding & Decoding JSON Requests"
        ],
        "Scaffolding our API Server": [
          "Setting up your Development Environment",
          "Clean Layered Architecture",
          "Setting up the HTTP server and API",
          "Hot Reloading in Go",
          "Environment Variables"
        ],
        "Databases": [
          "The Repository Pattern",
          "Implementing the Repository Pattern",
          "Persisting data with SQL",
          "Configuring the DB Connection Pool",
          "SQL Migrations"
        ],
        "Posts CRUD": [
          "Marshalling JSON responses",
          "Creating a User Feed Post",
          "Getting a Post From a User",
          "Internal Errors Package",
          "HTTP Payload Validation",
          "DB Relationships & SQL Joins",
          "Adding Comments to Posts",
          "Updating and Deleting Posts",
          "Standardising JSON Responses",
          "Optimistic Concurrency Control",
          "Managing SQL Query Timeouts",
          "Database Seeding",
          "Database Seeding: \"SSL not enabled\" problem",
          "Challenge: Create Comments for Posts"
        ],
        "User Feed": [
          "Creating the User Profile",
          "Adding Followers",
          "SQL Indexes",
          "User Feed Algorithm"
        ],
        "Filtering, Sorting, and Pagination": [
          "Pagination and Sorting",
          "Feed Filtering"
        ],
        "Documentation": [
          "Windows problems when generating swagger docs",
          "Auto Generating Docs for the API",
          "Documenting the Handlers"
        ]
      },
      "requirements": [
        "Basic Go Knowledge"
      ],
      "description": "In this project-based course, we will build a complete REST API in Go from scratch and deploy it to the cloud, ready to handle real traffic and scale affordably.\n\n\nOur journey begins by creating a simple TCP server, which will help us explore the net/http package in Go and understand the basics of handling network communication.\n\n\nNext, we’ll dive into the theory behind building reliable and composable Go web applications. From there, we’ll develop our project step-by-step, covering carefully curated topics such as request handling, middleware creation, database integration, request and database optimisations and rate limiting to equip you with the skills needed to ship real backend services to the cloud and manage real-world traffic efficiently.\n\n\nThis course aims to provide you with the foundational knowledge required to build and understand backend systems, implement industry best practices, and create production-ready APIs that are secure, scalable, and maintainable. It is not just a step-by-step tutorial, but a comprehensive learning experience that prepares you for real-world scenarios.\n\nLegal Notice:\nAll product and company names, logos, and trademarks featured on this thumbnail are the property of their respective owners. Their use in this course does not imply any affiliation, sponsorship, or endorsement by these companies.",
      "target_audience": [
        "Beginners and Intermediate Developers",
        "Advanced Software Engineers from Another Stack"
      ]
    },
    {
      "title": "Generative AI for Software Engineers & Developers",
      "url": "https://www.udemy.com/course/generative-ai-for-software-engineers-developers/",
      "bio": "1000+ GenAI Prompts to Accelerate Your Software Engineering Journey",
      "objectives": [
        "Understand the fundamentals of Generative AI, including Transformers, Diffusion Models, and their relevance to software engineering.",
        "Access a curated 1000+ expert prompts tailored to accelerate software engineering tasks across coding, testing, DevOps, architecture, and security.",
        "Differentiate clearly between Predictive AI and Generative AI in the context of software development workflows.",
        "Explore real-world use cases of GenAI for code generation, bug fixing, documentation, DevOps automation, and architecture design.",
        "Master Prompt Engineering techniques: Zero-shot, Few-shot, Chain of Thought (CoT), Tree of Thought (ToT), and reusable prompt templates.",
        "Generate high-level software architectures, including ER diagrams, sequence diagrams, and make architectural trade-off analyses using GenAI.",
        "Auto-generate multi-file codebases, classes, modules, and functions while adhering to SOLID and DRY principles.",
        "Perform code refactoring, enhance readability, optimize performance, and add professional-grade documentation using AI assistance.",
        "Automate static code analysis, bug detection, anti-pattern recognition, and pull request reviews via Generative AI prompts.",
        "Learn how to generate Unit Tests, Integration Tests, E2E Tests, API Tests, Fuzz Tests, and achieve better code coverage.",
        "Build Dockerfiles, Kubernetes manifests, Terraform scripts, and automate GitHub Actions/GitLab CI/CD pipelines using GenAI.",
        "Design robust Infrastructure as Code (IaC) systems and automate monitoring setups with Prometheus and Grafana using prompt-driven workflows.",
        "Define and monitor Service Level Objectives (SLOs) and Service Level Indicators (SLIs) to maintain operational excellence.",
        "Create automated runbooks and disaster recovery playbooks driven by AI to boost reliability engineering practices.",
        "Implement Secure Code Generation, threat modeling, vulnerability detection, and automate SOC2, HIPAA, GDPR compliance drafts.",
        "Apply AI-based tools for Static Application Security Testing (SAST) and Dynamic Application Security Testing (DAST)."
      ],
      "course_content": {
        "Introduction": [
          "What is Generative AI?",
          "How Generative AI works: Transformer models, Diffusion models",
          "Difference between predictive AI vs generative AI in software development",
          "Use cases: code generation, bug fixing, documentation, DevOps, architecture",
          "Examples: GPT-4, Claude 3, Codex, Gemini 1.5, CodeLlama"
        ],
        "Deep Dive into Large Language Models (LLMs) for Software Engineering": [
          "Architecture of LLMs: Transformer Networks, Self-Attention Mechanism",
          "Tokenization, context window, and limitations",
          "Fine-tuning vs In-context Learning",
          "Specialized Code LLMs: Codex, StarCoder, CodeGen, AlphaCode",
          "Introduction to model APIs (OpenAI, Hugging Face, Anthropic)"
        ],
        "Mastering Prompt Engineering for Software Development": [
          "Principles of Effective Prompt Design",
          "Zero-shot, One-shot, Few-shot prompting",
          "Chain of Thought (CoT) and Tree of Thought (ToT) prompting",
          "Creating reusable prompt templates",
          "Auto-suggesting patterns, snippets, or microservices architectures"
        ],
        "AI-Powered Software Architecture and Design": [
          "High-level architecture generation from prompts",
          "Microservices vs Monolithic: AI design recommendations",
          "Generating ER diagrams, sequence diagrams, component diagrams",
          "Architectural trade-off analysis by GenAI",
          "Technology Stack evaluation prompts"
        ],
        "Code Generation, Refactoring, and Enhancement": [
          "Multi-file code generation and folder structures",
          "Auto-generation of classes, modules, functions",
          "Code refactoring: improving readability, performance, and maintainability",
          "Adhering to SOLID principles, DRY principles",
          "Adding comments and documentation with GenAI"
        ],
        "Automated Code Review and Static Analysis Using GenAI": [
          "Prompting GenAI to review PRs (Pull Requests)",
          "Static Code Analysis with GenAI (security, performance, maintainability)",
          "Bug detection, anti-pattern recognition",
          "Auto-suggesting improvements and refactorings"
        ],
        "AI-Generated Software Testing": [
          "Generating Unit Tests, Integration Tests, and E2E Tests",
          "Writing test cases from function signatures",
          "Creating API tests (example: Postman collections via AI)",
          "Building fuzz tests and boundary tests using AI",
          "Code coverage analysis with GenAI-generated tests"
        ],
        "DevOps and Infrastructure Automation with Generative AI": [
          "Generating Dockerfiles, Kubernetes manifests, Terraform scripts",
          "Automating GitHub Actions, GitLab CI/CD pipelines",
          "Infrastructure as Code (IaC) prompts",
          "Monitoring setup: Prometheus, Grafana dashboards using prompts"
        ],
        "System Reliability, Observability, and Incident Management with GenAI": [
          "Generating Service Level Objectives (SLOs) and Service Level Indicators (SLIs)",
          "Designing Observability dashboards",
          "Creating automated runbooks for incidents",
          "Simulating failure modes and generating disaster recovery guides"
        ],
        "Secure Software Development and Compliance Using GenAI": [
          "Secure Code Generation practices",
          "Threat modeling and vulnerability detection with prompts",
          "Compliance automation: SOC2, HIPAA, GDPR document drafts",
          "AI in Static Application Security Testing (SAST) and Dynamic Application Securit"
        ]
      },
      "requirements": [
        "Basic understanding of software development concepts",
        "No prior experience with AI or Machine Learning is required",
        "A curious mindset ready to explore Prompt Engineering, Generative AI APIs, and new coding techniques powered by AI tools.",
        "Access to a laptop or computer with Internet connectivity"
      ],
      "description": "The \"Generative AI for Software Engineers & Developers\" course is designed to empower modern developers with the skills to integrate cutting-edge AI tools into the software development lifecycle. Beginning with a solid foundation, the course explains What is Generative AI through real-world examples, followed by an exploration of how GenAI works, covering Transformer and Diffusion models. Learners will clearly differentiate predictive AI from generative AI in software contexts, understanding how GenAI transforms tasks like code generation, bug fixing, documentation, DevOps automation, and architecture design. Practical examples include working with GPT-4, Claude 3, Codex, Gemini 1.5, and CodeLlama.\nA deep dive into the architecture of LLMs explains Transformer Networks and Self-Attention, alongside concepts like tokenization, context windows, and model limitations. Learners will compare fine-tuning vs in-context learning and study specialized code LLMs like Codex, StarCoder, CodeGen, and AlphaCode. Hands-on sessions introduce accessing model APIs via OpenAI, Hugging Face, and Anthropic. The course also builds expertise in prompt engineering covering effective principles, zero-shot, one-shot, few-shot prompting, Chain of Thought (CoT) and Tree of Thought (ToT) techniques, and creating reusable prompt templates.\nMoving into application design, learners will explore AI-suggested architecture patterns, generate ER diagrams, sequence diagrams, conduct architectural trade-off analyses, and evaluate technology stacks. Practical coding modules teach multi-file code generation, class/module/function creation, code refactoring using SOLID/DRY principles, adding documentation, and GenAI-driven PR reviews. Further sections focus on static analysis, bug detection, unit/integration testing, Dockerfile/Kubernetes manifest generation, IaC scripting, and monitoring setup using Prometheus and Grafana.\nSecurity is integrated through secure code generation, threat modeling prompts, compliance automation (SOC2, HIPAA, GDPR), and AI in SAST/DAST. Finally, learners receive access to a curated 1000+ prompts specifically designed for boosting software engineering productivity with Generative AI.",
      "target_audience": [
        "Software Engineers aiming to leverage Generative AI tools for faster and smarter coding, architecture, and DevOps workflows.",
        "Backend Developers who want to auto-generate APIs, improve system designs, automate deployments, and optimize application performance using AI.",
        "Frontend Developers interested in using AI to boost UI/UX workflows, auto-generate React/Vue components, and optimize frontend performance.",
        "DevOps Engineers looking to automate infrastructure creation, monitoring setups, and CI/CD pipelines with Generative AI prompts.",
        "Solution Architects wanting to use AI for generating architecture diagrams, conducting trade-off analysis, and suggesting technology stacks.",
        "Quality Assurance (QA) Engineers and Test Automation Engineers who wish to auto-generate unit tests, API tests, E2E tests, and fuzz tests using GenAI.",
        "Security Engineers aiming to integrate secure code generation, vulnerability scanning, and compliance automation into the software lifecycle.",
        "Technical Leads and Engineering Managers seeking to empower their teams with AI-driven development accelerators and best practices.",
        "Students, Learners, and Fresh Graduates in Computer Science or related fields aspiring to learn the future of AI-driven software engineering.",
        "Anyone curious about applying Generative AI in practical, real-world coding, testing, architecture, and DevOps workflows."
      ]
    },
    {
      "title": "Work with RDS and DynamoDB: AWS with Python and Boto3 Series",
      "url": "https://www.udemy.com/course/aws-with-python-and-boto3-working-with-rds-and-dynamodb/",
      "bio": "Learn how to implement RDS and DynamoDB on AWS using Python API - Boto3! Implement your infrastructure with code!",
      "objectives": [
        "You'll be able to implement any sort of infrastructure on AWS with Python using RDS and DynamoDB!",
        "You'll learn how to code against AWS API using Python and Boto3!",
        "You'll learn how to launch Relational Database Instances (RDS) on AWS using Python and Boto3!",
        "You'll learn how to launch NoSQL DynamoDB Tables on AWS using Python and Boto3!",
        "You'll be confident to work with AWS APIs using Python for any kind of AWS Resource on RDS and DynamoDB!"
      ],
      "course_content": {
        "Introduction": [
          "Welcome",
          "About This Course",
          "What We Will Build in This Course",
          "What Do You Need For This Course"
        ],
        "Preparing The Environment for Development": [
          "Section Overview",
          "About Tools and Environment",
          "Create an AWS Account If You Don't Already Have It!",
          "Logging in to AWS Console and A Walkthrough",
          "Let's Create Our AWS Credentials!"
        ],
        "Windows Environment Setup": [
          "Installing Python 3 and Pip",
          "Installing AWS SDK (CLI)",
          "Preparing CLI with AWS Credentials",
          "Installing Boto3",
          "Verifying The Setup"
        ],
        "MacOS Environment Setup": [
          "Installing Python 3 and Pip",
          "Installing AWS SDK (CLI)",
          "Preparing CLI with AWS Credentials",
          "Installing Boto3",
          "Verifying The Setup"
        ],
        "Relational Database Service (RDS) with Boto3": [
          "Section Overview",
          "Scenario: AWS Console Perspective of What We'll Build",
          "Setting Up Our Project with PyCharm IDE",
          "Let's Check Out Boto3 API Docs!",
          "[Tip] Auto-Complete Magic with Pyboto on PyCharm IDE!",
          "Creating an RDS PostgreSQL DB Instance - Part 1",
          "Creating an RDS MySQL PostgreSQL DB Instance - Part 2",
          "AWS Console Checkpoint: RDS Instance",
          "Connecting to PostgreSQL RDS Instance with Postico",
          "Describing RDS Instance",
          "Modifying RDS Instance",
          "Backing Up RDS Instance",
          "Restoring RDS Instance",
          "Deleting RDS Instance",
          "Section Summary"
        ],
        "DynamoDB with Boto3": [
          "Section Overview",
          "Scenario: AWS Console Perspective of What We'll Build",
          "Setting Up Our Project with PyCharm IDE",
          "Let's Check Out Boto3 API Docs!",
          "Creating Table",
          "AWS Console Checkpoint: DynamoDB Table",
          "Describing Table",
          "Updating Table",
          "Deleting Table",
          "Section Summary"
        ],
        "Wrapping Up": [
          "What Have We Learned?",
          "What Comes Next?",
          "Thank You!"
        ]
      },
      "requirements": [
        "Beginner level of Python",
        "Any Python Interpreter. Default is fine but I recommend PyCharm",
        "An AWS Account - Free Tier Available!",
        "General Knowledge on AWS Model would be nice",
        "Theoretical Knowledge on RDS and DynamoDB Concepts would be nice but not necessary!"
      ],
      "description": "Do you want to learn how to launch managed Relational Databases or RDS on AWS? Do you want to learn how to take snaphots, restore your DB instances and implement all of those with your Python code without even logging into AWS Console? Or Do you want to learn how to implement NoSQL DynamoDB Tables on AWS?\nThen this is the course you need on RDS and DynamoDB on AWS!\nIn this course, we’ll start by taking a look at the tools and the environment that we need to work with AWS resources. We’ll be using Python 3 and as per the IDE I recommend you to use PyCharm from Jetbrains. It has a free community edition even!\nAfter I teach you how you can set up your environment on both MacOS and Windows, we’ll create our credentials for AWS as being the AWS Access Key and AWS Secret Access Key for programmatic access to AWS resources. You’ll learn how you can set your AWS credentials globally on your computers using AWS CLI. Before jumping into the implementation, for one last tip, I’ll show you how you can have auto-complete capabilities on your PyCharm IDE with PyBoto3!\nOnce we’re ready with our environment setup, we’ll start implementing our solution on AWS! And remember we’ll do everything with Python code; not a single thing manually or by hand!\nWe’ll start off with RDS or Relational Database Service from AWS. I’ll teach you how to launch your own Amazon RDS Instances purely with your Python code! Then we’ll learn how to Take a Snapshot or namely backup our complete database instance. After that, I’ll teach you how to restore that snapshot you have created earlier so you can recover your database from failures!\nNext up is DynamoDB! With this very-popular NoSQL service from AWS, I’ll teach you how to create your own DynamoDB Tables on AWS with Python! You’ll learn how to provide a key schema, attribute definitions and apply throughput to your tables.\nLots of information, hands-on practice and experience is waiting for you in this course on AWS. So, don't miss any more time and join me in this course to sharpen your skills on AWS using Python and Boto3!",
      "target_audience": [
        "Beginners on AWS who wants to put their theory in practice",
        "AWS Cloud Architect Associate Exam Preppers who wants to practice their theories with real projects",
        "Who wants to learn how to implement Infrastructure-as-a-Code or IaaS on AWS",
        "Who wants to learn how to develop infrastructures on AWS using Python",
        "Who wants to learn AWS Python API or namely Boto3"
      ]
    },
    {
      "title": "Master Multithreading & Asynchronous Programming in C#/.NET",
      "url": "https://www.udemy.com/course/master-multithreading-asynchronous-programming-in-csharp-dotnet/",
      "bio": "Multithreading, task based asynchronous programming, async/await, thread synchronization, P-Loops, PLINQ in .NET 8",
      "objectives": [
        "How threads run within the OS",
        "Start multiple threads",
        "Threads synchronization techniqueues",
        "Thread safety",
        "Thread affinity",
        "Thread pool",
        "Exception handling and cancellation",
        "Task vs Thread",
        "Running tasks",
        "Waiting for tasks",
        "Task continuations",
        "Exception and cancelation handlings",
        "async & await basics",
        "How async and await works under the hood",
        "Harness the power of parallel loops",
        "Stop, break and throw exceptions from parallel loops",
        "Understand the states of the running results",
        "Performance considerations of parallel loops",
        "Harness the power of PLINQ (parallel LINQ)",
        "Understand the usage of concurrent collecitons"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "CPU, Thread and Thread Scheduler",
          "Basic syntax to start a thread",
          "Why threading: Divide and Conquer",
          "Why threading: Offload long running tasks",
          "Reasons of using multiple threads",
          "Assignment 1: Web Server Simulation",
          "Assignment 1 (Answer): Create a Web Server"
        ],
        "Threads Synchronization": [
          "Threads Synchronization Overview",
          "Critical Section and Atomic Operation",
          "Exclusive Lock",
          "Assignment 2: Airplane seats booking system",
          "Assignment 2 (Answer): - Airplane seats booking system",
          "Use Monitor to add timeout for locks",
          "Use Mutex to synchronize across processes",
          "Reader and Writer Lock",
          "Use semaphore to limit number of threads",
          "Use AutoResetEvent for signaling",
          "Use ManualResetEvent to release multiple threads",
          "Assignment 3 - Two way signaling in Producer - Consumer scenario",
          "Assignment 3 (Answer): Two way signaling in Producer - Consumer scenario",
          "Thread Affinity",
          "Thread Safety",
          "Nested locks and deadlock"
        ],
        "Multithreading MISC": [
          "Debug programs with multiple threads",
          "States of a thread",
          "Make thread wait for some time",
          "Returning results from a thread",
          "Canceling a thread",
          "Thread Pool",
          "Exception handling in threads"
        ],
        "Task based Asynchronous Programming": [
          "Multithreading vs Asynchronous Programming",
          "Basic Syntax of using Task",
          "Task vs Thread",
          "Task uses thread pool by default",
          "Returning result from Task",
          "Assignment 4 (Question) - Returning results from Task",
          "Assignment 4 (Answer) - Returning results from Task",
          "Task Continuation - Wait, WaitAll, Result",
          "Task Continuation ContinueWith",
          "Task Continuation WhenAll, WhenAny",
          "Task Continuation - Continuation Chain & Unwrap",
          "Exception Handling in Tasks",
          "Tasks synchronization",
          "Task Cancelation"
        ],
        "Async & Await": [
          "Overview of Async & Await",
          "Basic syntax of Async and Await",
          "Which thread is used",
          "Continuation after returning value",
          "Exception handling with async and await",
          "Await and Synchronization context",
          "What does await do"
        ],
        "Parallel Loops": [
          "Parallel Loops Overview and Basic Syntax",
          "What happens behind the scene",
          "Exception handling in parallel loops",
          "Stop",
          "Break",
          "ParallelLoopResult",
          "Cancelation in Parallel Loops",
          "Thread local storage",
          "Performance considerations"
        ],
        "PLINQ": [
          "Basics of PLINQ",
          "Producer, consumer and buffer",
          "foreach vs ForAll",
          "Exception handling in PLINQ",
          "Cancelation in PLINQ"
        ],
        "Concurrent Collections": [
          "ConcurrentQueue",
          "ConcurrentStack",
          "BlockingCollection and Producer & Consumer scenario"
        ],
        "BONUS SECTION": [
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "Intermediate level in C# and .NET",
        "Visual Studio 2022 or later installed",
        "A strong desire to learn"
      ],
      "description": "Welcome to “Master Multithreading and Asynchronous Programming in C# & .NET 8”! Learning multithreading and asynchronous programming is crucial for developing high-performance, responsive, and scalable applications. These skills enable efficient use of CPU resources, keeping applications responsive by offloading long-running tasks. They are essential for handling real-world scenarios like web servers and complex simulations, and they future-proof your skills for modern multi-core hardware. Mastering these techniques not only enhances problem-solving abilities but also opens up valuable career opportunities in the tech industry.\n\n\nThis comprehensive course is designed to equip you with the skills and knowledge needed to harness the full power of multithreading and asynchronous programming in C# and .NET. Whether you’re a seasoned developer looking to deepen your expertise or a newcomer eager to learn, this course has something for everyone.\n\n\nCourse Overview\nIn this course, you’ll\nExplore the intricacies of CPU, threads, and thread schedulers in .NET, and learn the basic syntax to start a thread.\nYou’ll discover the benefits of threading, such as dividing and conquering tasks and offloading long-running processes. Through hands-on assignments, like creating a web server and an airplane seats booking system,\nYou’ll gain practical experience in thread synchronization, thread safety, and more. These are very important topics for multithreading / parallel programming.\nWe’ll delve into advanced topics like task-based asynchronous programming, async and await, parallel loops, and PLINQ in .NET.\nYou’ll also learn about concurrent collections and how to handle exceptions and cancellations in multithreaded environments.\nBy the end of this course, you’ll be well-versed in creating efficient, responsive, and robust applications using C# in .NET.\n\n\nWhy Choose This Course?\nComprehensive Curriculum: Covering everything from the basics to advanced concepts, this course ensures you have a thorough understanding of multithreading and asynchronous programming.\nHands-On Assignments: Practical assignments help you apply what you’ve learned and gain real-world experience.\nExpertly Curated Content: Each module is carefully crafted to build upon the previous one, ensuring a seamless learning curve.\nFlexible Learning: Access the course materials anytime, anywhere, and learn at your own pace.\n\n\nWho Is This Course For?\nIntermediate and experienced .NET / C# developers: Looking to enhance their skills in multithreading and asynchronous programming.\nStudents: Pursuing a degree in computer science or a related field.\nProfessionals: Working in industries where efficient and responsive applications are crucial.\nHobbyists: Interested in expanding their programming knowledge and tackling more complex projects.\nPrerequisites\nIntermediate knowledge of C# and .NET\nVisual Studio 2022 or later installed\nHave a desire to learn",
      "target_audience": [
        "Intermediate and experienced .NET / C# developers who are looking to enhance their skills in multithreading and asynchronous programming.",
        "Students who are pursuing a degree in computer science or a related field.",
        "Professionals who are working in industries where efficient and responsive applications are crucial.",
        "Hobbyists who are interested in expanding their programming knowledge and tackling more complex projects."
      ]
    },
    {
      "title": "[NEW] Amazon ECS & Fargate Master Class - Docker on AWS",
      "url": "https://www.udemy.com/course/aws-ecs-fargate/",
      "bio": "Learn ECS & Fargate, Load Balancing, Auto Scaling, ECR, CICD for ECS, Blue/Green, X-Ray, Service Discovery, App Mesh",
      "objectives": [
        "Deploy ECS Clusters using the AWS Management Console, CloudFormation and the ECS CLI",
        "Setup ECS and Fargate services, alongside ECS Task Definitions",
        "Learn about Task Placement Strategies and Constraints",
        "Learn the ECS Networking Modes",
        "ECS Service Auto Scaling and Load Balancing",
        "EC2 Instance Scaling through ECS Cluster Capacity Providers",
        "Amazon ECR: Elastic Container Registry",
        "Perform CICD on ECS with CodeCommit, CodeBuild, CodeDeploy, CodePipeline",
        "Blue / Green Deployments with ECS and CodeDeploy",
        "Environment Variables from ECS (hardcoded, SSM, Secrets Manager, S3)",
        "Connecting ECS to a Private Docker Repository such as Docker Hub",
        "ECS Persistent Storage Options with EFS",
        "Microservices with ECS: ECS Service Discovery, App Mesh"
      ],
      "course_content": {
        "Course Introduction": [
          "Course Introduction",
          "About Instructor"
        ],
        "Code Download": [
          "Code Download"
        ],
        "ECS Quickstart": [
          "ECS Quickstart Introduction",
          "Docker Introduction - Docker vs Virtual Machine",
          "ECS and Fargate Introduction",
          "ECS Quickstart - Creating IAM User",
          "ECS Quickstart - First Container Launch",
          "ECS & Course Pricing",
          "ECS vs EKS vs Beanstalk"
        ],
        "Docker Basics": [
          "Docker Basics",
          "Installing Docker",
          "Docker Basic Commands",
          "Docker Basics - Creating Containers"
        ],
        "ECS Cluster Setup": [
          "ECS Cluster Setup & Architectures",
          "ECS Setup - IAM Roles",
          "ECS Setup - Core Infrastructure",
          "ECS Clusters ECS & Fargate Setup via AWS Management Console",
          "ECS Cluster Setup via CloudFormation",
          "ECS Cluster SEtup via ECS CLI"
        ],
        "ECS Deep Dive": [
          "ECS Task Definition ECS Service and IAM Roles",
          "Fargate Task Definition Hands on",
          "ECS Service Hands on",
          "ECS Task Definition Hands on - EC2 Launch Type",
          "ECS Services Hands on - EC2 Launch Type - Running a Task",
          "ECS Service Hands On EC2 Launch Type - Creating a Service",
          "ECS Task Placement and Constraints",
          "ECS Network Modes",
          "ECS Setup - Sample Real World Architecture"
        ],
        "ECS Load Balancing & Auto Scaling": [
          "Load Balancing for ECS & Fargate",
          "Creating simplehttp Task Defintion",
          "ECS with ALB Setup - Fargate Launch Type",
          "ECS - Service Auto Scaling & Cluster Capacity Providers",
          "Spin up an AWS EC2 Instance Running a Linux AMI",
          "ECS Task Auto Scaling",
          "ECS Instance Auto Scaling with Cluster Capacity Provider"
        ],
        "Amazon ECR - Elastic Container Registry": [
          "Amazon ECR Overview",
          "Amazon ECR - Creating a Repository",
          "Amazon ECR - Working with Images"
        ],
        "CICD on ECS": [
          "CICD Overview for ECS",
          "ECS Rolling Updates",
          "ECS CodeCommit",
          "CodeBuild with ECS",
          "Codepipeline with ECS",
          "Blue/Green Deployment on ECS with CodeDeploy Overview",
          "Blue/Green Deployment on ECS Hands on Part 1",
          "Blue/Green Deployment on ECS Hands on Part 2"
        ],
        "Environment Variables with ECS": [
          "Secrets Manager and Parameter Store Overview",
          "Environment Variables with ECS",
          "Environment Variables Prerequisites",
          "SM Parameter Store with ECS",
          "Secrets Manager with ECS",
          "Loading Environment Variables from S3 with ECS",
          "Connecting ECS to a Private Docker Repository Securely"
        ]
      },
      "requirements": [
        "Previous knowledge of AWS is needed",
        "AWS Certified Developer or AWS Certified Solutions Architect Associate recommended"
      ],
      "description": "This course requires you to download Docker from the docker website.  If you are a Udemy Business user, please check with your employer before downloading software.\n\n\nIf you'd like to run Docker containers on AWS the right way, look no further than ECS!\nECS is the most integrated way to run your Docker services.\nIn this course, we will learn all the various options which will allow you to deploy any application onto your ECS Clusters.\nEC2 Launch Mode? Covered. Fargate Launch Mode? Covered too\n\n\nWHAT YOU WILL LEARN\nDeploy ECS Clusters using the AWS Management Console, CloudFormation, and the ECS CLI\nSetup ECS and Fargate services, alongside ECS Task Definitions\nLearn about Task Placement Strategies and Constraints\nLearn the ECS Networking Modes\nECS Service Auto Scaling and Load Balancing\nEC2 Instance Scaling through ECS Cluster Capacity Providers\nAmazon ECR: Elastic Container Registry\nPerform CICD on ECS with CodeCommit, CodeBuild, CodeDeploy, CodePipeline\nBlue / Green Deployments with ECS and CodeDeploy\nEnvironment Variables from ECS (hardcoded, SSM, Secrets Manager, S3)\nConnecting ECS to a Private Docker Repository such as Docker Hub\nECS Persistent Storage Options with EFS\nMicroservices with ECS: ECS Service Discovery, App Mesh\nAnd that's just a sneak peek.\nWith over 8 hours of video, you will be mastering the ECS Service.\n\n\n\n\nPre-requisites:\nIn this course, we do not cover the basics of AWS and lightly cover Docker to focus entirely on the usage of Amazon ECS.\n\n\nWith AWS becoming much more than a buzzword, I've decided it's time for students to properly learn how to become an Amazon ECS & Fargate Professional. So, let's kick start the course! You are in good hands!\n\n\n\n\nThis Course Also Comes With:\nLifetime Access to All Future Updates\nA responsive instructor in the Q&A Section\nFull downloadable code to reproduce the hands-on on your machine\nUdemy Certificate of Completion Ready for Download\nA 30 Day \"No Questions Asked\" Money Back Guarantee!\nThis course could change how you use ECS and Fargate in the AWS Cloud.\nLearning and getting hands-on on AWS ECS helps you enhance your career opportunities and helps to boost your income. An investment in your career is an investment in yourself. Don't procrastinate. There is no time like the present to take charge of your job. Take your career to the next level by learning AWS ECS today!\nTake the course now, completely risk-free!",
      "target_audience": [
        "Anyone wanting to maximise the potential of the ECS Service"
      ]
    },
    {
      "title": "SOLID Principles in C# for Software Architecture & Design",
      "url": "https://www.udemy.com/course/solid-principles-of-oop-for-software-architecture-design/",
      "bio": "Gain Mastery over SOLID Principles and write solid clean code using object-oriented languages like C#",
      "objectives": [
        "Solid principle of OOP object oriented programming for software design and architecture",
        "Identify Bad design in the software's code with Solid Principles knowledge",
        "Implement Software Practices using Solid Principles",
        "Solid design principles implementation in C#",
        "Learn Single responsibility principle SRP",
        "Learn Open Closed Principle OCP",
        "Learn Liskov substitution principle LSP",
        "Learn Interface segregation principle ISP",
        "Learn Dependency inversion principle DIP",
        "Learn Inversion of Control IOC",
        "Learn Dependency Injection DI",
        "Commonly used Software design Principles like DRY ,KISS ,GRASP, single source of truth etc"
      ],
      "course_content": {
        "Introduction": [
          "Introduction to Solid Principle Course",
          "Why this Course & Why you should take this Course | Solid Principle ?",
          "What is SOLID Principles",
          "Design Smells | Signs of bad design"
        ],
        "Case Study": [
          "Solid Principle Case Study Project Overview",
          "Case Study Code Setup for Learning Solid Principles"
        ],
        "Single Responsibility Principle SRP | SOLID principles": [
          "Single Responsibility Principle SRP | SOLID principles",
          "Define Single Responsibility or Single Reason to change",
          "Case Study Changes for Defining Responsibility",
          "Information Expert Principle-GRASP",
          "Decomposition",
          "Cohesion",
          "Coupling",
          "SRP Final Checklist for Implementation",
          "SRP Quiz"
        ],
        "Open Closed Principle OCP | SOLID principles": [
          "Open Closed Principle OCP",
          "OCP Checklist | Open close principle checklist",
          "OCP quiz"
        ],
        "Liskov Substitution Principle LSP | SOLID principles": [
          "Liskov Substitution Principle LSP",
          "LSP in Real Life",
          "LSP Checklist",
          "LSP Quiz"
        ],
        "Interface Segregation Principle ISP | SOLID principles": [
          "Interfaces and Abstraction Concepts",
          "Implement Abstraction using Interfaces Part-2",
          "Interface Segregation Principle ISP",
          "ISP Checklist for implementation",
          "ISP Quiz"
        ],
        "Dependency Inversion Principle DIP | SOLID principles": [
          "Dependency Inversion Principle DIP",
          "Dependency Injection DI",
          "Inversion of Control IOC",
          "IOC-Case Study Changes",
          "DIP Implementation Checklist",
          "DIP Quiz"
        ],
        "Common Software Application Design and Architectural Principles": [
          "DRY Principle",
          "KISS Keep it Simple Stupid Principle",
          "YAGNI - You ain’t gonna need it",
          "Opportunity Cost Principle",
          "Occam’s Razor Principle",
          "Principle Of Least Astonishment",
          "Avoid Premature Optimization",
          "Rough Design Up Front - RDUF"
        ],
        "Conclusion of SOLID principles Course": [
          "Summary of Solid Principles",
          "Interview Questions Solid Principle",
          "Conclusion"
        ]
      },
      "requirements": [
        "Basic knowledge of C# or java or any object oriented programming languages"
      ],
      "description": "Master SOLID Principles of software design and  software Architecture and write clean code in C# object oriented design\n\n\nIn this course we are going to learn the SOLID Principles of Object Oriented Programming OOP  Software design and Software architecture, where we will first try to understand :\n\n\nSOLID Principle was first formulated and motioned by Robert martin in this book  Agile Software Development, Principles, Patterns, and Practices .\n\n\nSOLID\nWhat are SOLID Principle S.O.L.I.D\nHow SOLID principle works in object oriented programming language like  C# and Java with examples\nwhy are solid principles important\nHow to apply use implement  SOLID principle in real life project and examples.\nhow to design clean code  using SOLID\nCoding of solid principle.\nWe will also cover all the interview questions getting asked on the SOLID principle\n\n\nTOPICS covered :\nSingle responsibility Principle  SRP\nWhat is single responsibility principle SRP  in object oriented programming language like C# .net and Java with examples.\nWhy single responsibility principle SRP  are important\nWhy to use , need of  single responsibility principle SRP\nHow to use  implement single responsibility principle SRP\n\n\nOpen Closed Principle OCP\nWhat are Open Closed Principle OCP  in object oriented programming language like C# .net and Java with examples.\nWhy Open Closed Principle OCP  are important\nWhy to use , need of  Open Closed Principle OCP\nHow to use  implement Open Closed Principle OCP\n\n\nLiskov Substitution Principle LSP\nWhat is LisKov Substitution Principle LSP  in object oriented programming language like C# .net and Java with examples.\nWhy LisKov Substitution Principle LSP   are important\nWhy to use , need of  LisKov Substitution Principle LSP\nHow to use implement LisKov Substitution Principle LSP\n\n\n\n\nInterface Segregation Principle ISP\nWhat is Interface Segregation Principle ISP  in object oriented programming language like C# .net and Java with examples.\nWhy Interface Segregation Principle ISP   are important\nWhy to use , need of  Interface Segregation Principle ISP\nHow to use implement Interface Segregation Principle ISP\n\n\nDependency Inversion Principle DIP\n\n\nWhat is Dependency Inversion Principle DIP  in object oriented programming language like C# .net and Java with examples.\nWhy Dependency Inversion Principle DIP  are important\nWhy to use , need of  Dependency Inversion Principle DIP\nHow to use implement Dependency Inversion Principle DIP.\n\n\nDependency Injection DI\nWhat is Dependency Injection DI\nTo use and implement Dependency Injection.\nDependency injection using DI IOC container like unity container\n\n\nInversion of Control IOC\nwhat is Inversion of control.\nHow to use and implement  inversion of control\nDifference between Dependency Injection and inversion of control  DI vs IOC\nDifference between Dependency Inversion Principle DIP vs Dependency Injection DI  vs inversion of control IOC\n\n\nAlong with above SOLID principle ,we  are also going to see the other most commonly used principles in software engineering/ Information Technology / Computer Science field and  those are :\nDRY Do Not Repeat Yourself  principle\nKISS Principle  Keep it simple Stupid\nGRASP ( General Responsibility Assignment Software Patterns ) to some extent in that we will understand Information Expert\n\nYagni  You ain’t gonna need it.\nOpportunity Cost Principle\nBig Design Up Front\nRough Design Up Front\nSingle Source of Truth\nPrinciple of Least Astonishment\n\n\nAll these principle we are going to learn from scratch and learn in the real time project case study example ,we will develop the real life project called Employee Management Portal and we will understand each principle in great detail during coding this Case study.\nThis case study will help you to develop the design thinking. Our main goal of this case study to make you understand the SOLID principle ,this Case study we will code in oop object oriented programming language like C# ,if you are not aware of C# then also fine ,because we are going to use the concepts which are very common in all programming language, if you know JAVA , JAVASCRIPT , ANGULAR ,REACT , TYPESCRIPT,SWIFT ,PYTHON  then also you can easily follow this course.",
      "target_audience": [
        "Software Developers",
        "People who are starting career in IT industry",
        "People who are involved in Design and architecting softwares",
        "Information Technology Engineer",
        "Computer Science Engineer"
      ]
    },
    {
      "title": "Dynamic Programming Algorithms Master Course",
      "url": "https://www.udemy.com/course/dynamic-programming-master-course-coding-minutes/",
      "bio": "Ultimate Specialisation on Recursion, Backtracking and Dynamic Programming for Competitive Coding & Interviews.",
      "objectives": [
        "Identify what type of problems can be solved using DP",
        "Come with recurrence for most DP Problems",
        "Master the advance DP techniques",
        "Face interviews and online challenges more confidently"
      ],
      "course_content": {},
      "requirements": [
        "Basic understanding of algorithms",
        "Ability to write/understand code in programming language",
        "Familiarity with Arrays, 2D Arrays, Data Structures"
      ],
      "description": "Are you feeling brushed-up with data structures and algorithms but often feel stuck when it comes to DP! But no more, we are super happy to present the Dynamic Programming Specialisation Course for everyone, to help you master the important Dynamic Programming Concepts and level up for Competitive Coding & Interviews.\n\nThe Dynamic Programming Master Course is taught by Apaar Kamal, software engineer at Google & Master on Codeforces along with Prateek Narang, an ex-Google engineer and founder of Coding Minutes. This highly detailed & rigorous curriculum has been designed to ensure your success in online competitions where Dynamic Programming problems are very common these days.\nMany top companies like Google, Facebook, Amazon, Directi, CodeNation, Goldman Sachs etc encourage Competitive Programming and conduct coding competitions to hire smart people who can solve problems.\n\nDynamic Programming is a popular algorithmic technique in computer programming that helps to efficiently solve a class of problems that have overlapping subproblems and optimal substructure property.\nIf any problem can be divided into subproblems, which in turn are divided into smaller subproblems, and if there are overlapping among these subproblems, then the solutions to these subproblems can be saved for future reference. In this way, algorithm can be improved, and lot of problems can be optimised using Dynamic Programming.\n\nThe 40+ hours course covers the breadth & depth of dynamic programming starting from a recap of recursion, backtracking, and diving deep into Dynamic Programming techniques like  -\n\n1D, 2D, Multi-dimensional DP\nDP and Partition Problems\nDP for Combinatorics & Subsequences\nDP on Strings\nDigit DP\nDP on Trees & Graphs\nSOS DP and\nDP with Bitmasks\nDP and Matrix Exponentiation\nDP in Game Theory\nDP with advanced data structures\n\n[Extra] You will also get Full Solved Atcoder Educational DP Contest as part of the course.\n\nCourse Highlights\n\n* Detailed video explanations\n* Deep dive into advanced DP Concepts\n* Carefully curated practice problem sheets\n* Full Life Time Access\n* All variants of DP Covered\n\nSo, what are you waiting for - join the course now and level-up your DP Skills! *",
      "target_audience": [
        "Programmers looking forward to level up in algorithms",
        "Students preparing for online competitions like ACM-ICPC, Google CodeJam etc",
        "Tech aspirants preparing for Interviews and online coding rounds",
        "Programming enthusiasts who want to deep dive into Competitive Programming"
      ]
    },
    {
      "title": "VPC Solutions with EC2 for Production: AWS with Terraform",
      "url": "https://www.udemy.com/course/vpc-solutions-with-ec2-for-production-aws-with-terraform/",
      "bio": "Learn Terraform with AWS, infrastructure-as-code! Develop Scalable, Highly-Available Architecture with an AWS Architect!",
      "objectives": [
        "You'll learn how to code against AWS using Terraform!",
        "You'll learn the AWS Well-Architected Framework Best-Practices while implementing!",
        "You'll learn how to isolate and control your own infrastructure with Terraform using Route Tables, Internet Gateways, Security Groups and Rules!",
        "You'll learn how to launch Highly-Available, Scalable, Fault-Tolerant and Resilient EC2 Instances on AWS using Terraform!",
        "You'll have very good understanding of VPC concepts like Subnets, Route Tables and Internet Gateways by putting all into real-world practice with Terraform code",
        "You'll be confident to work with AWS using Terraform for any kind of AWS Resource on VPC and EC2 Instances!",
        "You'll learn how to read and code against an Terraform HCL language!",
        "You'll be able to launch your own infrastructure on AWS without even signing-in to AWS!"
      ],
      "course_content": {
        "Introduction": [
          "Welcome",
          "About This Course",
          "What We Will Build in This Course",
          "What Do You Need For This Course"
        ],
        "Preparing The Environment for Development": [
          "Create an AWS Account If You Don't Already Have It!",
          "Logging in to AWS Console and A Walkthrough",
          "Let's Create Our AWS Credentials!"
        ],
        "Windows Environment Setup": [
          "Installing Terraform and IntelliJ Plugin",
          "Installing AWS SDK (CLI)",
          "Preparing AWS Credentials for Environment"
        ],
        "MacOS Environment Setup": [
          "Installing Terraform and IntelliJ Plugin",
          "Installing AWS SDK (CLI)",
          "Preparing AWS Credentials for Environment"
        ],
        "Terraform Refresher": [
          "Terraform Crash Course"
        ],
        "Virtual Private Cloud (VPC) Network Infrastructure with Terraform - Part 1": [
          "Creating a Key Pair for EC2 Instances",
          "Creating a S3 Bucket for Terraform Remote State",
          "Creating Our Project",
          "Defining Our Remote State Configuration",
          "Creating a Virtual Private Cloud (VPC)",
          "Creating Public Subnets",
          "Creating Private Subnets"
        ],
        "Virtual Private Cloud (VPC) Network Infrastructure with Terraform - Part 2": [
          "Creating a Route Table for Public Routes",
          "Creating a Route Table for Private Routes",
          "Associating Route Tables with Subnets",
          "Creating an Elastic IP for NAT Gateway",
          "Creating the NAT Gateway and Adding to Route Table",
          "Create an Internet Gateway (IGW) and Adding to Route Table",
          "Executing Terraform and Outputting Variables for Remote State Reading"
        ],
        "Elastic Compute Cloud (EC2) with Terraform - Part 1": [
          "Defining Backend and Reading Remote State for Layer 1 Infrastructure",
          "Creating Security Groups for EC2 Instances and ELB",
          "AWS Networking Basics",
          "Creating an IAM Role for EC2 Instances",
          "Creating an IAM Role Policy for EC2 Instances",
          "Creating an IAM Instance Profile",
          "Dynamically Using Latest AMI for EC2 Instances",
          "Launch Configuration for Private EC2 Instances",
          "Launch Configuration for Public EC2 Instances"
        ],
        "EC2 High Availability, Scalability and Fault Tolerance with Terraform": [
          "Creating a Load Balancer for Public Web App Tier",
          "Creating a Load Balancer for Private Backend App Tier",
          "Creating an Auto-Scaling Group for Private EC2 Instances",
          "Creating an Auto-Scaling Group for Public EC2 Instances",
          "Creating an Auto-Scaling Policy for Public EC2 Instances",
          "Creating an Auto-Scaling Policy for Private EC2 Instances",
          "Creating a SNS Topic for Auto-Scaling Notifications",
          "Creating a SNS Subscription for SMS to Receive Auto-Scaling Notifications",
          "Defining Auto-Scaling Notifications for Triggering on Certain Events",
          "Reviewing Our Code and Infrastructure Before Execution",
          "Providing Tfvars, Planning and Executing Everything",
          "Testing Out The Whole Architecture and Verifying Our Setup",
          "Add More Security to EC2 Instances with Management Subnets"
        ],
        "Wrapping Up": [
          "Thank You!"
        ]
      },
      "requirements": [
        "An AWS Account - Free Tier Available!",
        "General Knowledge on AWS Model would be nice",
        "Theoretical Knowledge on VPC and EC2 Concepts would be nice but not necessary!",
        "Any IDE or even a text-editor, recommend with a Terraform Plugin"
      ],
      "description": "Up-to-date with Terraform 0.14+!\nLearn to implement production-ready infrastructure with AWS and Terraform today with an AWS Certified Solutions Architect!\nDo you want to implement your complete infrastructure as code? Do you want to learn the coolest and most popular infrastructure configuration management tool on the market, Terraform and make a huge contribution to your skillset?\nThen this course is what you need! You will not only learn how to implement Terraform code but also implement an AWS Well-Architected Framework recommended deployment model which will be Highly-Available, Scalable, Fault-Tolerant and Resilient!\nIn this course, we will start by exploring the tools we need throughout the course. Just to note here too, we will need an IDE with a proper Terraform plugin available. An AWS account is also necessary so I will show you how to get one if you do not already have it. Sure we will set up our environment variables for Terraform deployments and also configure our IDE to use Terraform efficiently by installing a Terraform Plugin which will highlight the syntax and auto-complete everything we intend to do.\nIn between all these, I will also give you a crash course on Terraform where you will gain all the information you need to implement this infrastructure!\nOnce we have everything set up, now is time to get our hands dirty and write some Terraform code to implement our cool, shiny architecture!\nWe will start off with implementing our remote state and obtaining a key pair which we will use to connect to the instances we will launch. Once we get these done, we will first create the Virtual Private Cloud (VPC) environment. To meet the demands of high-availability, we will spread our private and public subnets to three different availability zones inside a region. We will also create our Private and Public Route Tables to manage the routing between our resources inside VPC.\nWe’ll also make sure to attach an Internet Gateway (IGW) to our VPC to use with public subnets so the resources in those will be able to access and receive public internet traffic. Our private subnet also need some form of internet connection but not both ways; we want only internet access for outgoing connections from our resources in private subnets! To satisfy this requirement, we will launch and attach a NAT Gateway to our private route table.\nAfter configuring the low-level networking infrastructure, we will proceed to implement our Launch Configurations for both public and private EC2 instances we will launch through Auto-Scaling Groups. Once we implement the instance launching configurations, we will move on to implement our Auto-Scaling Groups using these launch configurations. We will configure the subnets, machine images, startup scripts and simply everything we need to launch instances successfully.\nAuto-Scaling doesn’t come out of the box; we will need to configure it regarding our demands and how we want to scale our instances. For our implementation, we will use Target Tracking Scaling which will help use scale and manage our EC2 instances all by itself; we don’t have to do a single thing!\nWe do not do anything for Auto-Scaling once we set it up but for sure we want to know what’s going on with our instances. That’s why we will create a SNS Topic and subscribe to it to get real-time notifications on what’s happening with our instances and infrastructure.\nThere are much more to come in this course and I cannot wait for you to come and learn the best practices from an AWS Certified Solutions Architect!",
      "target_audience": [
        "Beginners on AWS who wants to put their theory in practice",
        "AWS Cloud Architect Associate Exam Preppers who wants to practice their theories with real projects",
        "Who wants to learn how to implement Infrastructure-as-a-Code or IaaS on AWS",
        "Who wants to learn Terraform, infrastructure configuration language from Terraform",
        "Who wants to learn and launch Highly-Available, Scalable, Fault-Tolerant and Resilient architectures on AWS!",
        "Who wants to learn how to develop infrastructures on AWS using Terraform",
        "Who wants to learn how to launch Virtual Private Clouds, Public-Private Subnets and more with Terraform code on AWS",
        "Who wants to learn how to launch EC2 Instances publicly and privately using Terraform on AWS",
        "Who wants to learn AWS provider of Terraform"
      ]
    },
    {
      "title": "Technical Writing: How to Write API Software Documentation",
      "url": "https://www.udemy.com/course/technical-writing-how-to-write-api-software-documentation/",
      "bio": "A framework for writing software documentation for an API as a technical writer, using Postman or Swagger UI",
      "objectives": [
        "What is API?",
        "What is API documentation?",
        "Which steps to follow to create API documentation?",
        "How to use Swagger UI to write API documentation?",
        "How to use Postman to check the functionality provided with an API",
        "How to put your API documentation together in a GitHub wiki page!"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Slides Used in This Section",
          "What will you learn?",
          "What is an API?",
          "Benefits from using an API",
          "How does an API work?",
          "Who creates API and API documentation?",
          "What is an API documentation?",
          "Types of APIs",
          "Who reads API documentation?",
          "API documentation - examples",
          "API documentation framework",
          "API documentation - structure",
          "Step 1",
          "Step 2",
          "Step 3",
          "Testing an API call"
        ],
        "Writing API Documentation Using Swagger UI": [
          "Writing API documentation using Swagger UI",
          "Slides Used in This Section",
          "Agenda",
          "What is Swagger?",
          "Benefits from using Swagger for writing API documentation",
          "Step 1: create new API",
          "Demo",
          "Step 2: create the API introductory page",
          "Step 2.1: edit the API info",
          "Sample introductory info",
          "Demo",
          "Step 2.2: edit the API contacts and links to further documentation",
          "Sample contacts and documentation link",
          "Step 3: define the tags of your API",
          "Step 4: define the API operations and paths",
          "Sample API operation and path",
          "Demo",
          "Step 5: document the API parameters",
          "Sample parameters",
          "Step 6: document the API responses",
          "Sample response",
          "Step 7: export the API documentation"
        ],
        "Writing API Documentation Using Postman and GitHub Wiki Pages": [
          "Section introduction",
          "What will you learn in this section?",
          "Tools we will use",
          "What's the story?",
          "What is Postman?",
          "Downloading and getting to know Postman",
          "Using Postman, document the usage of the Stripe API",
          "Step 1",
          "Step 2 - part 1",
          "Step 2 - part 2",
          "Step 3",
          "Step 4",
          "Step 5"
        ],
        "Bonus Section": [
          "A Recap"
        ]
      },
      "requirements": [
        "No programming knowledge is required"
      ],
      "description": "Are you a technical writer who must write API software documentation? Do you wonder what you need to prepare and deliver to have high-quality API documentation and do not know where to start?\nIf yes, then this course is for you!\n\n\nFor Technical Writers, by Technical Writers: Navigate the world of API software documentation effortlessly with our hands-on course designed for aspiring technical writers.\nGlobal Impact: Trusted by universities across Europe and top software companies for onboarding new technical writers. Join a community shaping the future of technical writing.\nSimplified Learning: Technical writing made easy! No programming jargon—just straightforward explanations to help you understand API and API documentation.\nPractical Steps: Unlock our unique framework, guiding you through the process of preparing and delivering high-quality API documentation. From concept to creation, we've got you covered.\nTools of the Trade: Master Swagger UI for automatic documentation generation and learn Postman to validate API functionality. Bring it all together on a GitHub wiki page with confidence.\n\n\nImportant Notice for Students in India:\nIn this course, we frequently use Stripe's API as an example. However, please note that Stripe services are invite-only in India. Due to this limitation, students located in India may not be able to fully experiment with the course examples involving Stripe and may be limited to observing the instructor's demonstrations.\nPlease consider this restriction before enrolling in the course.\n\n\nTransform into a proficient API documentation writer:\nAcquire practical skills for your writer's portfolio.\nImpress managers and collaborate seamlessly with developers.\nElevate your technical writing career.\nAPI stands for Application Programming Interface. An interface is a software abstraction, which allows two software applications to communicate with each other seamlessly.\nThere are two roles you need to consider when you write documentation about an API:\nThe role of the developer who created the API. This developer needs to provide information about the way the API is supposed to work; what requests can it receive and what responses does is provide.\nThe role of the developer who uses the API. This developer needs to read through the API documentation to understand the ways to connect to the API, the requests that he or she can send to the API, and the responses that the API shall return for these requests.\nIn this course, you will learn:\nWhat is API and API documentation - explained in a way so that you can understand. No special programming knowledge is required!\nThe steps you need to follow to prepare and provide documentation about your API - our unique framework to make sure you have steps to follow while preparing the API documentation.\nHow to use Swagger UI to write and generate API documentation automatically.\nHow to use Postman to check the functionality provided with an API, and\nHow to put it all together on a GitHub wiki page!\nTransform into a proficient API documentation writer with our course!\nAcquire hands-on skills to craft compelling API documentation, a valuable addition to your writer's portfolio.\nImpress not only your manager but also developers with your newfound ability to confidently create documentation for diverse software development projects.\nElevate your technical writing career by enrolling today! Try it now, and see how easy it is to write API documentation, once you know which are the basic steps to follow!",
      "target_audience": [
        "Technical Writers",
        "Information Developers",
        "Software Developers",
        "UX Writers"
      ]
    },
    {
      "title": "Software Developer - C#/OOP/ASP.NET MVC/MS SQL/SQL Server",
      "url": "https://www.udemy.com/course/software-developer-coopaspnet-mvcms-sqlsql-server/",
      "bio": "Build Applications with C#/OOP/ASP.NET MVC/MS SQL/SQL Server",
      "objectives": [
        "Create Console Apps",
        "Create Windows Forms Apps",
        "Create ASP DOT NET Core App",
        "Create your own classes",
        "Learn Object Oriented Programming Concepts with C#",
        "Learn C# Fundamentals",
        "Create database driven apps",
        "Learn MS SQL",
        "Setup SQL Server",
        "Setup Visual Studio",
        "Create ASP DOT NET MVC APP"
      ],
      "course_content": {
        "Microsoft Visual Studio Setup": [
          "Introduction",
          "What is a software developer",
          "What is C#",
          "What is Visual Studio",
          "Minimum Installation Requirements",
          "Installing Visual Studio",
          "Visual studio workloads",
          "Create a basic console app",
          "Create a basic ASP.NET App",
          "Creating a Windows Forms App",
          "Running projects outside visual studio",
          "Code comments"
        ],
        "C# Essentials": [
          "Basic Data Types",
          "What is a string",
          "Data Type Conversion: Part 1",
          "Data Type Conversion: Part 2",
          "Converting to string and truncating",
          "What are Variables",
          "Guideline to naming variables",
          "Arrays",
          "Code Challenge - Arrays",
          "Conditional statements",
          "Lists",
          "List Concatenation",
          "Dictionaries",
          "Removing items from dictionaries",
          "Using conditional statements with dictionaries",
          "While Loops",
          "Do While Loops",
          "For Loops",
          "Foreach Loops",
          "Switch Statements",
          "Basic Arithmetic Operators",
          "Operator precedence",
          "Concatenation"
        ],
        "C# Object Oriented Programming -OOP": [
          "What is OOP",
          "Creating console app",
          "Creating your own classes",
          "Adding fields to classes & encapsulation",
          "Adding properties to fields",
          "Auto-implemented properties",
          "Adding methods to classes",
          "Overloading",
          "Overriding ToString() method",
          "Constructors",
          "Instantiating objects",
          "Static Keywords",
          "Inheritance: Creating Parent Class",
          "Inheritance: Creating Child Class",
          "Inheritance: Logic for main method",
          "Polymorphism",
          "GetType() and typeOf() method",
          "Abstract Classes and Methods"
        ],
        "ASP.NET CORE": [
          "What is ASP.NET",
          "ASP Development Models",
          "What is ASP.NET Core",
          "What is .NET",
          "What is MVC",
          "Create a new ASP.NET Core Web Project",
          "ASP.NET Core web project structure",
          "How to run ASP.NET Core Web App project",
          "Editing a Razor page"
        ],
        "Building an ASP.NET CORE MVC Web App": [
          "Creating a new ASP.NET Core MVC Project",
          "Editing auto-generated web pages",
          "Creating a model class",
          "What is Entity Framework",
          "Creating Dynamic Pages",
          "Using Migrations to create database and tables",
          "Adding items to Nav Bar",
          "Adding search item to Nav Bar",
          "Adding Search Form view",
          "Adding ShowSearchResults Method",
          "Implementing Security",
          "Tips to improve app",
          "Project Code"
        ],
        "Build a Volume Converter": [
          "Project Design",
          "Create a new windows form project",
          "Add some controls",
          "Rename text property controls",
          "Rename Name Property Controls",
          "Add logic for event handlers",
          "Test application",
          "Customize application",
          "Run application"
        ],
        "Build a Paint drawing app": [
          "Create a new windows forms project",
          "Designing the interface : Part 1",
          "Designing the interface : Part 2",
          "Create variables and event handlers",
          "Rename event handler method",
          "Add logic to enable drawing",
          "Add logic to enable saving"
        ],
        "Build a music layer": [
          "Create a new windows forms project",
          "Customizing form and controls",
          "Add windows media player",
          "Add button controls",
          "Add the logic",
          "Build and run project",
          "Tip to improve project"
        ],
        "SQL Server Setup": [
          "What is SQL Server",
          "SQL Server Hardware and software requirements",
          "SQL Server Editions",
          "Download SQL Server",
          "Install SQL Server",
          "Installing SSMS",
          "Connecting SQL Server with SSMS",
          "Install sample database",
          "Basic database concepts"
        ],
        "Microsoft SQL (MS SQL (T-SQL) )": [
          "What is SQL",
          "What is MS SQL (T-SQL)",
          "Create new database",
          "Create a new table",
          "Inserting records into table",
          "Reading data from table",
          "Views",
          "Stored procedures",
          "Updating records",
          "Backing up database",
          "Deleting records",
          "Truncating Table",
          "Dropping Table",
          "Dropping Database",
          "Restore database from backup"
        ]
      },
      "requirements": [
        "No programming experience required."
      ],
      "description": "C# (pronounced \"See Sharp\") is a modern, object-oriented, and type-safe programming language. C# enables developers to build many types of secure and robust applications that run in .NET. C# has its roots in the C family of languages and will be immediately familiar to C, C++, Java, and JavaScript programmers.\nC# is an object-oriented, component-oriented programming language. C# provides language constructs to directly support these concepts, making C# a natural language in which to create and use software components. Since its origin, C# has added features to support new workloads and emerging software design practices. At its core, C# is an object-oriented language. You define types and their behaviour.\nC# programs run on .NET, a virtual execution system called the common language runtime (CLR) and a set of class libraries. The CLR is the implementation by Microsoft of the common language infrastructure (CLI), an international standard. The CLI is the basis for creating execution and development environments in which languages and libraries work together seamlessly.\n\n\nObject-oriented programming (OOP) is the core ingredient of the .NET framework. OOP is so important that, before embarking on the road to .NET, you must understand its basic principles and terminology to write even a simple program. The fundamental idea behind OOP is to combine into a single unit both data and the methods that operate on that data; such units are called an object. All OOP languages provide mechanisms that help you implement the object-oriented model. They are encapsulation, inheritance, polymorphism and reusability.\nEncapsulation\nEncapsulation binds together code and the data it manipulates and keeps them both safe from outside interference and misuse. Encapsulation is a protective container that prevents code and data from being accessed by other code defined outside the container.\nInheritance\nInheritance is the process by which one object acquires the properties of another object. A type derives from a base type, taking all the base type members fields and functions. Inheritance is most useful when you need to add functionality to an existing type. For example all .NET classes inherit from the System Object class, so a class can include new functionality as well as use the existing object's class functions and properties as well.\nPolymorphism\nPolymorphism is a feature that allows one interface to be used for a general class of action. This concept is often expressed as \"one interface, multiple actions\". The specific action is determined by the exact nature of circumstances.\nReusability\nOnce a class has been written, created and debugged, it can be distributed to other programmers for use in their own program. This is called reusability, or in .NET terminology this concept is called a component or a DLL. In OOP, however, inheritance provides an important extension to the idea of reusability. A programmer can use an existing class and without modifying it, add additional features to it.\n\n\nASP DOT NET is a popular web-development framework for building web apps on the .NET platform.\nASP DOT NET is the open-source version of ASP DOT NET , that runs on macOS, Linux, and Windows. ASP DOT NET  Core was first released in 2016 and is a re-design of earlier Windows-only versions of ASP DOT NET  .\nDOT NET  is a developer platform made up of tools, programming languages, and libraries for building many different types of applications.\nThe base platform provides components that apply to all different types of apps. Additional frameworks, such as ASP DOT NET , extend  DOT NET with components for building specific types of apps.\nHere are some things included in the  DOT NET  platform:\nThe C#, F#, and Visual Basic programming languages\nBase libraries for working with strings, dates, files/IO, and more\nEditors and tools for Windows, Linux, macOS, and Docker\nASP DOT NET  extends the DOT NET   platform with tools and libraries specifically for building web apps.\nThese are some things that ASP DOT NET  adds to the  DOT NET  platform:\nBase framework for processing web requests in C# or F#\nWeb-page templating syntax, known as Razor, for building dynamic web pages using C#\nLibraries for common web patterns, such as Model View Controller (MVC)\nAuthentication system that includes libraries, a database, and template pages for handling logins, including multi-factor authentication and external authentication with Google, Twitter, and more.\nEditor extensions to provide syntax highlighting, code completion, and other functionality specifically for developing web pages\nWhen using ASP DOT NET  your back-end code, such as business logic and data access, is written using C#, F#, or Visual Basic.\nThe SQL Server is a relational database management system from Microsoft. The system is designed and built is to manage and store information. The system supports various business intelligence operations, analytics operations, and transaction processing\nSQL stands for Structured Query Language. A query language is a kind of programming language that's designed to facilitate retrieving specific information from databases, and that's exactly what SQL does. To put it simply, SQL is the language of databases.\nT-SQL, which stands for Transact-SQL and is sometimes referred to as TSQL, is an extension of the SQL language used primarily within Microsoft SQL Server. This means that it provides all the functionality of SQL but with some added extras.",
      "target_audience": [
        "Beginner C# Developers",
        "Beginners to SQL | MS SQL",
        "Beginners to SQL Server"
      ]
    },
    {
      "title": "Software Architecture & Design of Modern Large Scale Systems",
      "url": "https://www.udemy.com/course/software-architecture-design-of-modern-large-scale-systems/",
      "bio": "Become a Software Architect or Technical Lead by Mastering Software Architecture, System Design & Big Data Processing.",
      "objectives": [
        "Software Architecture of large scale systems, capable of handling millions of requests/day",
        "Design highly scalable, highly available and performant software systems",
        "Apply industry proven software architectural patterns, building blocks and best practices",
        "Define the system's technical requirements, high level components and API",
        "Gain confidence for an upcoming System Design Interview"
      ],
      "course_content": {
        "Introduction": [
          "Introduction to Software Architecture",
          "Download the Course Workbook"
        ],
        "System Requirements & Architectural Drivers": [
          "Introduction to System Design & Architectural Drivers",
          "Introduction to System Design & Requirement Types - Quiz",
          "Feature Requirements - Step by Step Process",
          "Feature Requirements Gathering Process - Quiz",
          "System Quality Attributes Requirements",
          "Quality Attribute Requirements - Quiz",
          "System Constraints in Software Architecture",
          "System Constraints - Quiz",
          "Additional Resources for Becoming a Software Architect"
        ],
        "Most Important Quality Attributes in Large Scale Systems": [
          "Performance",
          "Performance - Quiz",
          "Scalability",
          "Scalability - Quiz",
          "Availability - Introduction & Measurement",
          "Availability - Quiz",
          "Fault Tolerance & High Availability",
          "SLA, SLO, SLI",
          "Real World SLA Examples from the Industry"
        ],
        "API Design": [
          "Introduction to API Design for Software Architects",
          "API Design - Quiz",
          "RPC",
          "Popular RPC Frameworks and Technologies",
          "REST API",
          "REST API - Quiz"
        ],
        "Large Scale Systems Architectural Building Blocks": [
          "DNS, Load Balancing & GSLB",
          "Load Balancing Solutions & Cloud Technologies",
          "Message Brokers",
          "Message Brokers Solutions & Cloud Technologies",
          "API Gateway",
          "API Gateway Solutions & Cloud Technologies",
          "Content Delivery Network - CDN",
          "CDN Solutions & Cloud Technologies",
          "Software Architecture Building Blocks - Quiz"
        ],
        "Data Storage at Global Scale": [
          "Relational Databases & ACID Transactions",
          "ACID Transactions",
          "Non-Relational Databases",
          "Non-Relational Databases - Solutions",
          "Techniques to Improve Performance, Availability & Scalability Of Databases",
          "Techniques to Improve Performance, Availability & Scalability Of Databases-Quiz",
          "Brewer’s (CAP) Theorem",
          "CAP Theorem - Quiz",
          "Scalable Unstructured Data Storage",
          "Scalable Unstructured Data Storage - Cloud and Open Source Solutions"
        ],
        "Software Architecture Patterns and Styles": [
          "Introduction to Software Architecture Patterns & Styles",
          "Multi-Tier Architecture",
          "Multi-Tier Architecture - Quiz",
          "Microservices Architecture",
          "Microservices Architecture - Quiz",
          "Event Driven Architecture",
          "Event-Driven Architecture - Quiz"
        ],
        "Strategies for Processing Infinite Streams of Events": [
          "Introduction to Event-Stream Processing and Tumbling Window Strategy",
          "Hopping Window Event-Stream Processing Strategy",
          "Sliding Window Event-Stream Processing Strategy",
          "Session Window Event-Stream Processing Strategy",
          "Time in Stream Processing and Handling Late Arrival of Events",
          "Infinite Event-Stream Processing Strategies - Quiz",
          "Event Stream Processing Technologies"
        ],
        "Big Data Architecture Patterns": [
          "Introduction to Big Data",
          "Big Data Processing Strategies",
          "Lambda Architecture"
        ],
        "Software Architecture & System Design Practice": [
          "Design a Highly Scalable Discussion Forum 1 - Requirements & API",
          "Design a Highly Scalable Discussion Forum 2 - Functional Architecture Diagram",
          "Design a Highly Scalable Discussion Forum 3 - Final Software Architecture",
          "Design an E-Commerce Marketplace Platform 1 - Requirements & Sequence Diagram",
          "Design an E-Commerce Marketplace Platform 2 - Functional Diagram",
          "Design an E-Commerce Marketplace Platform 3 - Final Software Architecture"
        ]
      },
      "requirements": [
        "Basic knowledge of programming and software engineering"
      ],
      "description": "Are you ready to take your career to the next level?\nDo you want to master Software Architecture and System Design?\nYou came to the right place!\nIn this practical course, you will learn how to architect real-life systems that scale to millions of daily users, as well as process and store petabytes of data.\nIf you aspire to become a Software Architect or are already a Software Architect and need a good refresher, this is your best resource.\nThis is also the perfect place for you to prepare and gain confidence for an upcoming System Design Interview.\nSome of the things you will learn include:\nIdentifying the technical requirements of the systems without missing any details\nDefining easy-to-use and robust APIs\nApplying modern architecture building blocks & techniques for High Scalability, Availability, and Performance\nFollowing industry-proven Software Architecture Patterns & best practices\nArchitecting highly scalable systems for massive internet traffic and Big Data Processing\nThinking and making trade-offs like a true professional Software Architect\nBy the end of the course, you will have all the skills you need to take on an ambiguous and high-level requirement and go through all the stages of a system design, all the way to its final Software Architecture.\nAlthough this course does not involve coding, it is highly practical and will give you the fundamental knowledge for building real-world systems, web applications, and enterprise-level solutions.\nAll the techniques and patterns covered in the course are used by top software companies.\nThis is the best software architecture course for mastering the design of modern web applications, microservices, big data systems, and cloud-based or on-premise enterprise-level solutions.\nIn addition to the video lectures, you will also find\nMany resources related to the topics covered in the course.\nQuizzes that will help you validate your progress and review the course material\nExternal links to relevant articles and videos to enhance your learning experience\nThis course is perfect for you if:\nYou want to master Software Architecture, a topic that is not usually taught in colleges or coding boot camps\nYou want to become a Software Architect or a senior member of technical staff, such as a Senior / Principal Software Engineer or Technical Lead.\nYou are preparing for a System Design Interview and want to increase your chances of success and stand out from the crowd of candidates.\nSo what are you waiting for? :)\nLet's get started!\n\n\nFAQ\n- Do I need to be a Software Architect to take this course?\nAbsolutely not! A Software Architect is just a title. In fact, many companies don't give this official title to anyone. Most Software Architecture and System Design is done by trusted engineers within the organization. To get this trust from your managers, you need to demonstrate a solid knowledge of Software Architecture and System Design. This is exactly what you will learn in this course.\n\n\n- What is the importance of Software Architecture, and why do I need to learn it?\nModern software development of large-scale systems is very complex. Typically, it involves many months of work by multiple software engineers. Just like no one would attempt to build a skyscraper without a solid plan and architecture, taking on a big software project without proper design and an approved Software Architecture is inconceivable. If the Software Architecture of a system is done poorly, the project will likely fail. However, if the software architecture is done correctly, it can greatly impact many lives and help your organization grow and thrive.\n\n\n- Is there any coding involved in the course?\nNo. Software Architecture is part of the design phase of a large-scale system. Coding is done only when the Software Architecture is finalized. It definitely takes a certain mental leap to realize that coding is only a small part of software engineering. And if the Software Architecture and the design is done correctly, the coding task and everything that comes after it can be very easy and straightforward. On the other hand, if the Software Architecture is not done correctly, the implementation phase can become a big challenge.\n\n\n- Should any Software Engineer aspire to become a Software Architect?\nYes and No. As you gain more experience, you will be expected to do more Software Architecture and Design. The role of a Senior Software Engineer in most organizations requires Software Architecture skills, even if your role does not have the \"Software Architect\" in it. Additionally, even if you want to keep coding, your code will always have to take the overall Software Architecture into account. Otherwise, it will not be as effective. However, if you do decide to pursue the role of a Software Architect,  you will be rewarded with greater responsibility and impact, which generally comes with higher job satisfaction, job security, and higher pay.",
      "target_audience": [
        "Any student who wants to take their career to the next level, towards Senior, Principal or Software Architect position",
        "Any student who wants to learn Software Architecture and System Design",
        "Any student who is preparing for a System Design Interview"
      ]
    },
    {
      "title": "Master CI/CD for Android Developers",
      "url": "https://www.udemy.com/course/continuous-integration-and-continuous-delivery-for-android-developers/",
      "bio": "Learn Continuous Integration and Continuous Deployment / Delivery to increase your employability in 2019 and beyond!",
      "objectives": [
        "Apply complete CI/CD flows in their app development process.",
        "Use GitHub to trigger code checks and app distribution to users.",
        "Use App Center to automate checks and protect important branches.",
        "Leverage App Center to automatically create builds on every merge.",
        "Automate the distribution of a new build to beta testers.",
        "A full list of other features are on this page."
      ],
      "course_content": {
        "DevOps": [
          "Course Structure",
          "What is DevOps",
          "Why use DevOps",
          "What You Will Accomplish by The End"
        ],
        "Source Control and GitHub": [
          "Source Control And Branch Structure",
          "Initialize Version Control",
          "Commiting Changes",
          "Creating Branches",
          "Working with Branches",
          "Creating a GitHub Repo",
          "Pushing to GitHub",
          "Working in Teams",
          "Making Pull Requests",
          "A Simulated CI/CD Rundown"
        ],
        "Intro to App Center": [
          "Intro to App Center",
          "Creating an App Center Account",
          "Connecting App Center",
          "Source Code and GitHub Repo",
          "Crashing the Application",
          "Tracking All Kinds of Events",
          "Tracking Events with Better Context"
        ],
        "Continuous Integration": [
          "Why Use Continuous Integration?",
          "Working with Feature Branches",
          "A First CI Build - Android",
          "Cleaning Up the Connections",
          "Using Checks to Protect Branches",
          "Adding Checks to Pull Requests",
          "A Complete CI Flow"
        ],
        "Continuous Quality": [
          "Intro to Continuous Quality",
          "Prepare Solution for Tests",
          "Installing the App Center CLI",
          "Uploading the Android Tests",
          "Running Automatic Tests"
        ],
        "Continuous Delivery": [
          "Intro to Continuous Delivery",
          "Creating an Android Distribution Group",
          "Configuring Android Continuous Delivery",
          "Installing from App Center",
          "Creating a First Manual Store Release",
          "Continuous Delivery to the Play Store",
          "Continuous Integration / Continuous Delivery",
          "Environment Variables"
        ],
        "Extra Information - Source code, and other stuff": [
          "Source Codes",
          "Bonus Lecture and Information"
        ]
      },
      "requirements": [
        "The course does not require any previous CI/CD or DevOps experience",
        "Some basic Git & GitHub experience is desirable",
        "While this is a CI/CD course, it is oriented to Android developers, so some basic Android development experience is required."
      ],
      "description": "What you will learn in this course?\nIn this course, you will learn the fundamentals of CI/CD which is short for Continuous Integration/Continuous Delivery and be able to apply these fundamentals in your Android app development process.\n\nThe word Deployment is often used in place of Delivery but effectively means the same thing.\n\nThese skills are essential to maximize your career potential in 2019 and beyond, because more and more companies are adopting these development practices requiring new employees or freelancers to be well versed in these concepts.\nWhat is Continuous Integration (CI) ?\nCI is the practice of merging all programmers current working copies to a shared mainline on a regular basis (usually several times a day).\nA developer checks out a working copy of the code base prior to making a change.  Over time as other developers check out and make changes, this checked out working copy of the source code base gets out of date, potentially requiring more and more work by developers to actually  check their completed changes back in to the main repository.\nWithout using CI it can become really difficult to merge all these changes and can lead to it taking more time to  merge changes back into the main source code base than it took to make the the change itself.\nCI seeks to eliminate this problem by making sure all developers integrate early and often with the goal to reduce rework and ultimately save cost and time.  This involves all developers merging their code back into the main repository multiple times a day.\nAn added bonus is that each programmer who is merging changes needs to build and run (and pass) all unit tests which usually run automatically meaning the code base is easier to work with and merge changes into and is potentially more stable as a result.\nWhat is Continuous Delivery or Deployment (CD) ?\nThis extends CI to ensure that new changes to software can be released to clients quicker, but in a more sustainable way.  It takes the advantages of CI from a development perspective (automated testing, on code check-in, etc) allowing the actual code base to be built and new releases to be automatically released to the client, effectively meaning a new version can be deployed to the client by a click of a button.\nCI/CD concepts.\nBy adhering to a CI/CD development process, the code base can be built and released more quickly, and is in a more stable state overall.  These are some of the reasons why more and more companies are adopting a CI/CD development process in 2019 and beyond.\nKey topics in this course.\n1. Continuous Integration\n2. Continuous Delivery\n3. App Center\n4. GitHub Pull Requests\n5. Branch protection\n6. UI Tests\n7. App Diagnostics\n8. App Analytics\nWhat will you learn?\n• Learn how to track errors and crashes in your apps.\n• Learn how to track any event triggered within your apps.\n• Apply complete CI/CD flows in your app development process.\n• Use GitHub to trigger code checks and app distribution to users.\n• Use App Center to automate checks and protect important branches.\n• Leverage App Center to automatically create builds on every merge.\n• Automate the distribution of a new build to beta testers.\n• Automate the distribution of new releases to the Google app store.\n• Focus on the development of features, leave the build and distribution to App Center.\n• Improve teamwork with automatic builds and checks that improve the quality of your merges.\n• Enable product discovery with the help of Analytics in the App Center.\n• Test your app in a wide array of cloud-hosted physical devices.\nDifferences with other CI/CD courses.\nWhile there are other CI/CD courses out there, most of them are too general. This course is completely tailored to Android developers, this way you can immediately start applying what you learn in your app development process. Because of this, the course also covers topics not normally found on other CI/CD courses, such as UI Testing for Android app development.\nWho is the course aimed at?\n\nThe course does not require any previous CI/CD or DevOps experience, although some basic Git & GitHub experience is desirable.\n\nWhile this is a CI/CD course, it is oriented to Android app developers, so some basic Android app development experience is required.\nGetting started\nIf you are ready to get started, click on the Enroll or Add to Cart button on this page and start taking your CI/CD skills with\nAndroid to the next level.",
      "target_audience": [
        "Android developers looking to become skilled in the CI/CD process"
      ]
    },
    {
      "title": "QC151 Quantum Physics for QC - Content moved to QC101",
      "url": "https://www.udemy.com/course/quantum-physics-for-quantum-computing-superposition-and-entanglement/",
      "bio": "This course has become part of QC101. Buy this course if you want only the physics lessons without the rest of QC101",
      "objectives": [
        "Build a strong foundation in Quantum Physics to help you learn advanced topics in Quantum Computing",
        "Develop an intuitive understanding of Superposition and Entanglement using Simulators"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "About this Course"
        ],
        "Polarization of Light": [
          "Polarized Photons of Light",
          "Photons & Polarizing Filters",
          "More on Photons & Polarizing Filters"
        ],
        "Quantum Behavior of Polarizers": [
          "Filters Change Polarization",
          "Quantum Behavior of Polarizers",
          "More on Quantum Behavior of Polarizers",
          "Using Calcite"
        ],
        "Information in Quantum Systems": [
          "Loss of Information",
          "Finding Angle of Polarization",
          "Finding Polarization of a Single Photon",
          "Physical Impossibility"
        ],
        "Quantum Measurement": [
          "Measurement with Calcite",
          "More Measurement with Calcite",
          "Measurement with Filters"
        ],
        "Single Particle Systems - Superposition & Measurement": [
          "Download Simulator Code",
          "Running Simulations",
          "Simulating Limitations of Measurements",
          "More on Limitations of Measurements",
          "Simulation of No-Cloning",
          "More on the No-Cloning Theorem",
          "Measurement is Irreversible",
          "Deterministic vs Probabilistic",
          "Simulation of Deterministic Behavior",
          "Simulating Superposition",
          "Collapse of Superposition",
          "Measurement & Superposition"
        ],
        "Two Particle Systems - Entanglement & Bell States": [
          "Two Photon Systems",
          "Dependent Behavior",
          "Simulating Entanglement",
          "Systems Without Preferred Direction - The Bell State",
          "Changing Angles of Measurement",
          "More on Bell States",
          "Independent Photons",
          "Recap"
        ],
        "Conclusion": [
          "Conclusion"
        ]
      },
      "requirements": [
        "All the Math covered in QC051 Math Foundation for Quantum Computing",
        "12th grade level high school Math and Physics",
        "Fundamentals of Quantum Computing as covered in QC101",
        "You must know how to compile and run simple Java programs. Elementary knowledge of Java is enough."
      ],
      "description": "THE CONTENTS OF THIS COURSE HAVE BEEN ADDED TO QC101.\nPurchase this course if you want only the physics lessons without the rest of QC101.\n-------------------------------------------------\nThis is a follow-on course to QC101. It helps you gain an intuitive and qualitative understanding of basic quantum physics to help you understand more advanced quantum computing courses.\nUnlike the earlier QC101 course, this course has very little Math. The aim is to help you understand qualitatively how the physics of quantum mechanics works.\n\n\nWhy do you need a Qualitative Understanding of Quantum Physics?\nThe Math of quantum physics is different, but it is not complicated. In many ways it is simpler than the engineering calculus that many of you studied in college. Although quantum math is simple, its mathematical simplicity hides many strange, yet important behaviors.\nFor instance, the mathematical representation of a Bell State is very simple. But the physical implications of a Bell State are weird. A photon has an angle of polarization, a property that is like a direction. But strangely, photons that are entangled in the Bell State behave as though they have no preferred angle or direction.\nAn intuitive appreciation of such weird behavior will be useful when I present more advanced topics on quantum algorithms in later courses.\nTo help you understand quantum physics qualitatively, I have provided simulators written in Java. Running the simulators and studying the Java source-code will help you gain a qualitative understanding that goes beyond merely knowing how to do the Math.\n\n\nHow can you get the most from this course?\nUnlike the earlier QC101, this course is light on Math. The primary aim of this course is to ensure that you are completely comfortable with the implications of superposition and entanglement. I spend a lot of time reinforcing basic concepts that were already introduced in QC101. Later in the course, I highlight some weird implications of entanglement.\nThe content is not challenging. But don't stop with viewing the videos. To get the most from this course, I encourage you to run my simulators with your own virtual experiments.\n\n\nThe first 16 lessons can be previewed for free. Watch the free preview lessons and enroll today.",
      "target_audience": [
        "Students who want to learn advanced quantum computing concepts"
      ]
    },
    {
      "title": "Getting Started with .NET Core Clean Architecture",
      "url": "https://www.udemy.com/course/getting-started-with-net-core-clean-architecture/",
      "bio": ".NET Core Clean Architecture",
      "objectives": [
        ".Net Core MVC",
        "Clean Architecture",
        "Full Stack Development"
      ],
      "course_content": {
        "Introduction": [
          "Clean Architecture Overview"
        ],
        "Clean Architecture Structure": [
          "GitHub For Visual Studio",
          "Commit Initial Solution",
          "Initial Folder Structure"
        ],
        "Presentation Layer": [
          "Presentation Layer Project",
          "Identity Migration",
          "Launch MVC",
          "Commit MVC",
          "Rename Folders"
        ],
        ".NET Core Versioning": [
          "Upgrade .Net Core for VS 2017"
        ],
        "Domain Layer": [
          "Domain Layer Project",
          "Domain Models"
        ],
        "Infrastructure Data Layer": [
          "Infrastructure Data Project",
          "Database Context",
          "Configure MVC for Data Context",
          "Commit Infrastructure Data Layer"
        ],
        "Application Layer": [
          "Application Layer Project",
          "View Models",
          "Service Interfaces",
          "Repository Interfaces",
          "Commit Application Layer"
        ],
        "Implementation": [
          "Service Implementation",
          "Repository Implementation",
          "Method Implementation"
        ],
        "Inversion of Control": [
          "Infrastructure IOC Project",
          "Dependency Container",
          "Register Services"
        ],
        "Presentation Layer Implementation": [
          "Seed Initial Data",
          "Add Images",
          "Controller",
          "ViewModel from Service",
          "Define Views",
          "Custom CSS",
          "Adjust Layout and Launch MVC"
        ]
      },
      "requirements": [
        "Visual Studio",
        "SQL Server",
        "Basic Technical Background"
      ],
      "description": "Get Started with .NET Core Clean Architecture!\nAre you a student or professional in the field of software engineering or maybe contemplating an educational or career move to the software engineering world? Have you been looking for a quick and easy way to get up and running with .NET Core coupled with Clean Architecture and don't want to go through an overwhelming amount of material just to get your environment setup and ready for building your own apps that interact with data? Don't worry as THIS IS THE COURSE FOR YOU!\nIn my course, I will teach you how to get your environment setup for .NET Core MVC, SQL Server 2017, Dependency Injection, MediatR, AutoMapper and help you to build your first set of apps that apply a Clean Architecture design pattern through a step-by-step guided approach.\n\nTake this course and feel proud of the fact that you will be one step closer towards the rewarding field of Software Engineering using .NET technologies!",
      "target_audience": [
        "Students and Professionals who want to master MVC using a clean architecture approach"
      ]
    },
    {
      "title": "The complete guide to running Java in Docker and Kubernetes",
      "url": "https://www.udemy.com/course/the-complete-guide-to-running-java-in-docker-and-kubernetes/",
      "bio": "Running JVMs in containers, the hard bits explained! Everything you need to know to run containers in production",
      "objectives": [
        "In depth knowledge of how Java works in a Container",
        "Kubernetes & Docker",
        "Containers in depth: Linux cgroups & namespaces",
        "How to build a production-quality Docker image for JVM applications"
      ],
      "course_content": {},
      "requirements": [
        "Basic Java is helpful but not mandatory. This course is applicable to any JVM language (Scala, Kotlin, Groovy, Clojure) though the samples are in Java."
      ],
      "description": "If you need to learn how to run, tune, and maintain JVM applications that run in Docker and/or Kubernetes then this is the course for you.\nThis course is very different from other Java/Docker/Kubernetes courses. It focuses on all the skills that you need to succeed in production.\nAll of the examples are in Java but the content is applicable for any JVM language including Scala, Groovy, and Kotlin.\nWe'll start with introductions for Docker and Kubernetes then we'll get into the fun stuff. We'll learn:\nWhat a container is under the covers\nLinux cgroups\nLinux namespaces\nThen we will go into how the JVM and your Java application behave differently in Kubernetes when running inside cgroups and namespaces. We'll cover:\nJVM ergonomics\nHow CPU Shares and Quota work\nHow Kubernetes manages CPU and Memory\nThen we will teach you all the techniques needed to build production-ready images:\nSelecting a base image\nJDK vs JRE based images\nMulti-stage Docker builds\nGraalVM\nClass data sharing\nAhead of time compilation\nWe will experiment with different JVM versions and settings.\nBy the end of this course you'll know how to:\nBuild a production-ready image\nSelect between using CPU limits, quotas, or both in Kubernetes\nSelect memory limits and tune the JVM for running in Kubernetes\nUnderstand CPU usage in Kubernetes and know why it is different to VMs and physical machines.",
      "target_audience": [
        "JVM developers interested in understanding how the JVM behaves in a container",
        "Java developers using Docker",
        "Java developers using Kubernetes",
        "JVM developers using containers"
      ]
    },
    {
      "title": "Build An MP3 Player With Python And TKinter GUI Apps",
      "url": "https://www.udemy.com/course/build-an-mp3-player-with-python-and-tkinter-gui-apps/",
      "bio": "Build Graphical User Interface Apps with Python and TKinter The Fast and Easy Way!",
      "objectives": [
        "Introductory To Intermediate TKinter",
        "How to Build an MP3 Player App With TKinter and Python",
        "Download and Install Python",
        "How To Use The Pygame Music Mixer"
      ],
      "course_content": {
        "Introduction": [
          "Course Introduction",
          "First Things First: How To Get Support Fast!",
          "Install Python",
          "Install Sublime Text And Git Bash Terminal",
          "Set Up Virtual Environment",
          "First TKinter Program"
        ],
        "Set Up The Basic TKinter App": [
          "Playlist Box",
          "Button Images Part 1",
          "Button Images Part 2 - Make Buttons",
          "Button Images Part 3 - Add Images",
          "Add Song Menubar",
          "FileDialog Box",
          "Get Song Title",
          "Strip Directory Structure From Song Title",
          "Change Playlist Colors",
          "Add Many Songs To The Playlist At Once",
          "Delete Songs Menu",
          "Delete Songs Function"
        ],
        "Play Songs With PyGame and TKinter": [
          "Install Pygame",
          "Play A Song Button",
          "Stop A Song Button",
          "Pause A Song Button",
          "Forward Button Part 1",
          "Forward Button Part 2",
          "Back Button",
          "Status Bar",
          "Get Current Song Time",
          "Convert To Time Format",
          "Mutagen Song Length",
          "Stop Function Status Bar"
        ],
        "Sliders": [
          "Volume Slider Intro",
          "Set Volume",
          "Create Song Slider",
          "Set Slider To Song Length",
          "Move Slider In Time",
          "Slider Pause",
          "Slider Stop",
          "Slider Forward and Back",
          "Slider Move Song Position",
          "Slider Status Bar Update",
          "Slider End Of Song"
        ],
        "Conclusion": [
          "Thank you for Watching!",
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "No special tools are necessary to take this course",
        "A Basic Understanding of Python and TKinter Is Helpful"
      ],
      "description": "In this course I'll teach you how  to make graphical user interfaces for Python using TKinter.  You'll be surprised just how quickly you can create some pretty cool looking apps!\n\n\nWe'll be building an MP3 player in this course that will have a song playlist, be able to play a song, stop a song, pause a song and move forward and backwards in the playlist.\n\n\nWe'll also create a volume slider so that users can adjust the volume of the music.\n\n\nFinally, we'll create a slider that will allow the user to fast forward or rewind within a song to a specific position in the song.\n\n\nIf you've ever wanted to create GUI apps with Python, this is the course for you!",
      "target_audience": [
        "This course is aimed towards beginers through intermediate Coders who want to learn the to build Apps With TKinter and Python",
        "Anyone wanting to learn to build apps"
      ]
    },
    {
      "title": "Spring Boot Microservices and Spring Cloud. Build & Deploy.",
      "url": "https://www.udemy.com/course/spring-boot-microservices-and-spring-cloud/",
      "bio": "Spring Cloud Config Server, API Gateway, Eureka, Feign, Resilience4J, Load Balancing, Spring Security, ELK, Docker, AWS.",
      "objectives": [
        "Build and run RESTful Microservices",
        "Implement User Authentication",
        "Eureka Discovery Service",
        "Implement User Authorization with Spring Security and JWT",
        "Spring Cloud API Gateway",
        "Learn to use JPA to persist data into a Database",
        "Use Cloud Cloud Config Server. Learn to Encrypt Sensitive Data.",
        "Learn to install MySQL Server and persist data into MySQL",
        "Spring Cloud Bus and Rabbit MQ",
        "H2 in-memory database and H2 Console",
        "Spring Boot Actuator",
        "Learn to use HTTP Postman",
        "Use Spring Security",
        "Learn to use Spring Initializer",
        "Distributed Tracing with Sleuth and Zipkin",
        "Learn to use Spring Tool Suite",
        "Centralized Logging with ELK Stack(Logstash, Elasticsearch, Kibana)",
        "Run Microservices in Docker Containers",
        "Use Method Level Security to protect API Endpoints",
        "Deploy Microservices to AWS"
      ],
      "course_content": {},
      "requirements": [
        "Know Java",
        "Mac computer"
      ],
      "description": "This course requires you to download Docker Desktop. If you are a Udemy Business user, please check with your employer before downloading software.\nThis video course is for Beginners who have never build RESTful Web Services and Microservices before. It will guide you step-by-step through basics and will help you create and run RESTful Microservices from scratch. You will learn how to run Microservices on your own developer's machine as well as in Docker Containers on AWS EC2 Linux machines.\nBy the end of this course, you will have your own RESTful Spring Boot Microservices built and running in Spring Cloud.\nYou will learn how to create and run your own:\nRESTful Microservices,\nEureka Discovery Standalone Server,\nEureka Discovery Server Cluster,\nZuul API Gateway,\nSpring Cloud API Gateway,\nLoad Balancer,\nSpring Cloud Config Server,\nYou will learn to use:\nSpring Cloud Bus and Rabbit MQ,\nSpring Boot Actuator\nYou will also learn how to implement for your REST API features like:\nUser Authentication(Login) and,\nUser Authorization(Registration),\nRole-based access control(RBAC)\nYou will learn to use:\nSpring Security and JWT\nYou will learn how to use:\nSpring Data JPA to store user details in a database,\nH2 in-memory database and a database console,\nMySQL database server,\nPostman HTTP Client,\nSpring Tool Suite,\nSpring Initializer\nThis course also covers how to:\nTrace HTTP Requests with Spring Cloud Sleuth and Zipkin(Distributed tracing)\nAggregate log files in one place(Centralized logging) with ELK stack(Logstash, Elasticsearch, Kibana).\nYou will also learn how to:\nStart up AWS EC2 Linux machine,\nInstall Docker,\nCreate Docker images,\nRun Microservices in Docker containers on multiple EC2 Linux machines in Amazon AWS Cloud.",
      "target_audience": [
        "Beginner Java developers",
        "Java developers interested in learning how to build Spring Boot Microservices"
      ]
    },
    {
      "title": "Introduction to Kafka with Spring Boot",
      "url": "https://www.udemy.com/course/introduction-to-kafka-with-spring-boot/",
      "bio": "Learn how to create robust Kafka implementations using Spring Boot 3 and Apache Kafka",
      "objectives": [
        "Learn what Kafka is and how it works",
        "How to install and run Kafka locally",
        "Create a Spring Boot application that integrates with Kafka",
        "Unit testing and Integration testing for Kafka",
        "Consuming and Producing messages with Spring Kafka",
        "Learn how to retry failed Kafka messages",
        "Spring Boot integration tests with the embedded Kafka broker",
        "Serialization and the different formats, including Strings and JSON",
        "Dead letter topics",
        "Learn all the core Kafka messaging concepts including messages, topics, partitions and keys",
        "Message ordering - ensuring your messages are consumed in the correct sequence",
        "Cover the important Spring and Spring Kafka annotations",
        "How to configure your Kafka Spring Beans",
        "How to use Wiremock to trigger failure scenarios that we can test",
        "Consumer groups, rebalancing, and consumer failover",
        "Understand the role of consumer offsets",
        "Use command line tools to send and receive messages and query the broker state",
        "Understand why Zookeeper is being replaced with KRaft",
        "Learn the key differences between other popular messaging brokers"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Instructor Introduction",
          "Getting the Most out of this Course",
          "Is Your IDE Free Like a Puppy?",
          "Free 120 Day Trial for IntelliJ IDEA Ultimate",
          "Course Slack Channel",
          "Using GitHub"
        ],
        "Message Driven Architectures": [
          "Message Driven Architectures",
          "Reactive Manifesto",
          "EIP"
        ],
        "Messaging with Kafka": [
          "Section Introduction",
          "Synchronous & Asynchronous Communication",
          "Kafka vs ActiveMQ (JMS) vs Rabbit (AMQP)",
          "Messaging With Kafka - Part 1",
          "What is Kafka?",
          "Message vs Event",
          "What is a Kafka Message?",
          "KRaft & Zookeeper",
          "Messaging With Kafka - Part 2"
        ],
        "Installing and Running Kafka": [
          "Section Introduction",
          "Install Kafka Locally, and Running the Broker",
          "Install Kafka Locally on Windows",
          "Sending and Receiving",
          "CLI tools - Introduction",
          "CLI tools - Start / Stop Server Tool",
          "CLI tools - Topic Tool",
          "CLI tools - Consumer Group Tool",
          "Installing and Running Kafka - Part 1",
          "Installing and Running Kafka - Part 2",
          "Section Recap"
        ],
        "Coding Kafka with Spring Boot": [
          "Section Introduction",
          "Creating The Project - Spring Initializr",
          "Lombok Annotations",
          "The Consumer",
          "JSON Deserializer",
          "Deserializer Error Handling",
          "Spring Bean Configuration",
          "Coding Kafka with Spring Boot - Part 1",
          "Create The Topics",
          "Produce",
          "Consume Using CLI",
          "Coding Kafka with Spring Boot - Part 2",
          "Section Recap"
        ],
        "Assignment - Tracking Service": [
          "Consume and Produce Events using Spring Kafka"
        ],
        "Spring Boot Integration Test": [
          "Section Introduction",
          "Integration Test",
          "Integration Test Assignment"
        ],
        "Multiple Instances & Consumer Groups": [
          "Section Introduction",
          "Introduction to Consumer Group Exercises",
          "Shared Consumer Group",
          "Demo Consumer Failover",
          "Duplicate Consumption",
          "Multiple Instances & Consumer Groups",
          "Section Recap"
        ],
        "Keys and Partitions": [
          "Section Introduction",
          "Message Keys",
          "Consuming Keyed Messages",
          "Keys and Partitions",
          "Section Recap"
        ],
        "Consuming Multiple Event Types": [
          "Section Introduction",
          "Kafka Handler",
          "Trusted Packages",
          "Consuming Multiple Event Types",
          "Section Recap"
        ]
      },
      "requirements": [
        "Basic Java knowledge",
        "Basic Spring knowledge",
        "Java 17 (required for Spring Boot 3)",
        "Maven"
      ],
      "description": "This is the course for learning Kafka, Java, with Spring and Spring Boot!\nOur hands-on course is designed to teach you the concepts of Apache Kafka and demonstrates the advantages to be gained by using Spring Boot and the Spring framework.\nBy the end of the course you will have learned and used the techniques required of a production quality system that uses Apache Kafka.\nOn your learning journey you will cover:\nKafka Fundamentals\nUnit Tests and Integration Testing using Embedded brokers\nFailure concepts and how to handle them - Retries, Poison Pills, and Dead Letter Topics\nCoding your own event driven services that communicate using Kafka.\nAnd much more!\n\n\nThis course will take you as a developer who knows just the basics on Spring Boot and Java to being able to develop a fully functional, fully tested, application that connects with the Kafka messaging broker in order to send and receive messages.\nIn fact with our comprehensive code walkthroughs that start from scratch in writing our Spring Boot application you will be able to put together the application with no previous Spring Boot experience!\nThis course has been developed by a team of highly experienced Java Software Engineers and Kafka consultants working closely with John Thompson, the Spring Framework Guru - we understand what a developer needs from such a course - we have designed and implemented many Kafka systems that are in production today.\n\nCode Samples\nAll the code that we walk through is available in the included git repositories for you to use as a starting point for your work, or for you to fork and extend as you begin to explore Kafka further.  Along the way there are assignments enabling you to put in practice what you have been learning, to build out a fully rounded microservices architecture.  We have accompanying articles on many of the Kafka concepts covered in the course - these go into greater depth providing you the opportunity to continue your learning and gain an advanced understanding on these areas.\n** What real Students are saying about this course **\n5 STARS - Fantastic course by Lydtech. I have learned Kafka and Spring boot from beginner to details.\n5 STARS - This is a great course. I like the challenging quizzes and assignments. It is very focus on the characteristics of topics. The instructors usually respond to questions very quickly.\n5 STARS - Very good course. I liked the structure a lot and how the topics build up on each other.\n5 STARS - This was a really nice course, with a perfect mix of theory, code-along sections and individual assignments. I really enjoyed it!\n5 STARS - Great introduction to Kafka Messaging, gives a lot of valuable insights and practical examples.\n5 STARS - The course introduction has been clear and focused. It has set a good foundation on what I can expect in the course.\n5 STARS - Great course to get introduced to Kafka with Spring boot. Loved that it reiterates on the concepts taught in the videos with quiz & hands-on exercises. I am pretty sure I will be revisiting the course again and will learn something new out of it.\n5 STARS - Presentation and content is superbly done.\nInside this course you will learn about:\nKafka Background and Concepts:\nThe Kafka messaging broker\nKey Kafka concepts including messages, keys, topics, partitions and offsets\nThe need for asynchronous communication\nComparison with other popular messaging brokers\nZookeeper vs KRaft\nConsumer groups and rebalancing\nMessage Keys and Message ordering\nInstalling and Running Kafka:\nInstalling and running the broker locally (Linux/Mac)\nInstalling and running the broker locally on Windows using WSL\nUsing the Kafka command line tools\nSending and receiving messages\nSpring Boot Application Development with Spring Kafka:\nCreating the Spring Boot application with Spring Initializr\nSpring Kafka APIs\nConsuming messages using the KafkaListener, KafkaListenerContainerFactory and ConsumerFactory\nProducing messages using the KafkaTemplate and ProducerFactory\nUtilising Spring Kafka annotations leaving Spring to do the heavy lifting\nUnit testing the Kafka consumer and producer with JUnit and Mockito\nIntegration testing with Spring Boot Test, Spring Kafka Test, and the embedded Kafka broker\nSerializing and deserializing String and JSON messages\nAvoiding poison pills with the correct error handling\nConfiguring Kafka Spring Beans programmatically vs in the application properties\nManual and automatic topic creation\nConsumer group membership with shared vs duplicated message consumption\nConsumer failover with multiple Spring Boot instances\nSending and receiving message keys\nEnsuring related messages are ordered\nConsuming multiple event types from the same topic\nConfiguring trusted packages\nRetrying failed messages\nRouting messages to the dead letter topic\nUsing Wiremock to trigger error scenarios\nCourse Extra - IntelliJ IDEA Ultimate\nStudents enrolling in the course can receive a free 4 month trial license to IntelliJ IDEA Ultimate! Get hands on experience using the Java IDE preferred by Spring Framework professionals!\nCourse Extra - Access to a Private Slack Community\nYou’re not just enrolling in a course --> You are joining a community learning Spring.\nWith your enrolment to the course, you can access an exclusive Slack community. Get help from the instructor and other Spring Framework Gurus from around the world - in real time! This community is only available to students enrolled in this course.\nThis is a very active Slack community with over 18,700 Spring Framework Gurus!\nThis is the largest online community of people learning Spring in the world.\nWith your enrolment, you can join this community of awesome gurus!\nClosed Captioning / Subtitles\nClosed captioning in English is available for all course videos!\nPDF Downloads\nAll keynote presentations are available for you to download as PDFs.\nAssociated articles offering further detail on the topics covered throughout the course are available to download as PDFs.  These include:\nWriting and testing a Kafka Spring Boot application\nKeys, partitions and message ordering\nConsumer Group Rebalance\nConsumer retry and Spring retry topics\nConsuming message batches\nKafka JSON serialization\nManaging poison pill messages\nSingle vs discrete Kafka topics\nLifetime Access\nWhen you purchase this course, you will receive lifetime access! You can login anytime from anywhere to access the course content.\nNo Risk - Money Back Guarantee\nYou can buy this course with no risk. If you are unhappy with the course, for any reason, you can get a complete refund. The course has a 30 day Money Back Guarantee.",
      "target_audience": [
        "This course is ideal for Java developers who wish to use Spring Boot to develop enterprise applications that use Kafka as the messaging broker for asynchronous event driven communication."
      ]
    },
    {
      "title": "Ultimate YAML Course : YAML JSON JSONPath Zero - Master",
      "url": "https://www.udemy.com/course/ultimate-yaml-json-jsonpath-tutorial/",
      "bio": "YAML, JSON, JSONPath tutorial for working with OpenAPI Specification, Swagger Tools, DevOps, Kubernetes - the list goes",
      "objectives": [
        "Understand YAML and how it is different from JSON in usage.",
        "Understanding the Basics of JSON, YAML and JSONPath",
        "Getting Comfortable with Writing Manifest files in JSON and YAML And writing JSONPath Expressions",
        "YAML advance concepts that covers Anchors, Alias, Overriding, Multi documents support, Writing Complex keys",
        "Learning How to Convert XML to JSON, JSON to YAML and Vice Versa."
      ],
      "course_content": {
        "Course Introduction": [
          "Welcome and About this Course"
        ],
        "YAML - Getting Started": [
          "What is YAML",
          "YAML vs JSON vs XML",
          "My Motivation Factor",
          "Why Use YAML"
        ],
        "YAML - Getting Familiar with YAML": [
          "YAML Tools",
          "Comments in YAML",
          "Key-Value Pairs in YAML",
          "Writing YAML File And Validate YAML",
          "Getting Started with YAML"
        ],
        "YAML Basic Building Blocks": [
          "DataTypes in YAML",
          "Scalar In YAMLs",
          "YAML Objects and Arrays (Map & List)",
          "String Style in YAML",
          "Sequence in YAML",
          "Dictionaries in YAML",
          "YAML Basic Building Blocks"
        ],
        "More Deep in YAML": [
          "Anchors in YAML",
          "Inherit Properties or Merge Key in YAML",
          "Complex Keys in YAML",
          "More Deep in YAML"
        ],
        "YAML Practical Real Examples": [
          "YAML Example | AWS Cloud Formation",
          "YAML Example | Kubernetes",
          "YAML Example | Azure Pipeline"
        ],
        "JSON : Getting Started": [
          "Things You Should Know About JSON",
          "JSON Syntax",
          "JSON Array",
          "JSON Data Types"
        ],
        "JSONPath : Getting Started": [
          "JSONPath Overview",
          "JSONPath Object",
          "JSONPath JSON Array",
          "JSONPath ArrayRange",
          "JSONPath Conditional Operations"
        ],
        "Course Wrap-Up & Community Access": [
          "Congratulations & Join Our Community"
        ]
      },
      "requirements": [
        "None. YAML can be learned easily by anyone."
      ],
      "description": "YAML is one of the languages that has gained popularity in recent times. Applications such as OpenAPI, Swagger, DevOps, and Kubernetes use YAML to create human-readable configurations at a large scale. What is the key element in such integrations? You need to write YAML code so that it can be understood easily by developers. You will be learning about YAML language constructs from scratch in this course.\nIn this course, you will learn about JSON, YAML, and JSONPath.\nIn the first part, you will learn about JSON. JSON is primarily used in web development, where the data is being stored and transmitted. This is slowly replacing the XML.\nOnce you get comfortable with it, we will move on to the second part, which is YAML. YAML is primarily used in Tools such as Ansible and Kubernetes.\nFinally, in part-3, you will learn about JSONPath. JSONPath is used to extract a subset of data from JSON files. This is similar to SQL for relational Databases.\nTopics Covered In This Course\nUnderstand YAML and how it is different from JSON in usage.\nLearn the various data types available including scalar and collection types.\nUnderstand the different YAML styles namely Block Style and Flow Style.\nUse advanced YAML features like Anchors, Sets, and Documents that help to create a rich YAML file.\nUse Directives to provide presentation details to YAML tools.\nUse Tags to avoid ambiguity and define custom types in a namespace.\nCreate an OpenAPI document using YAML in Swagger Editor.\nLots of activities to apply the learnings.\nand Many More!\nMore Reasons To Take This Course\nThe scope of YAML usage is increasing in the computing field.\nYAML is the 1st choice among API developers while working with OpenAPIs.\nGet ahead of the curve and learn to configure applications using YAML with ease.\n\n\nWho This Course Is For?\nWeb Developers who work with APIs and web services that are based on OpenAPI standards.\nSoftware Developers, who work with Kubernetes to enable cloud computing for their applications.\nEngineers, who use DevOps to configure the Pipeline for CI/CD.",
      "target_audience": [
        "Students, Developers, Architects who are looking to learn YAML.",
        "Software Developers, who work with Kubernetes to enable cloud computing for their applications."
      ]
    },
    {
      "title": "RSlogix/Studio5000 Ladder Logic Training. Basic",
      "url": "https://www.udemy.com/course/basic-introduction-and-programming-of-plcs-using-logix5000/",
      "bio": "The student will learn how to create a project, routines and ladder programming using RSlogix/Studio5000 software.",
      "objectives": [
        "Students will learn how to create a PLC project using the Studio 5000 platform. This will give beginners exposure using RSlogix/Studio 5000.",
        "You will learn how to create a project and set communications.",
        "You will learn the basic Logic instructions and their use.",
        "You will learn how to use other instructions such as timers, counters, comparison, program control, math's and much more."
      ],
      "course_content": {
        "What you Will Learn": [
          "Personal Introduction.",
          "Course Introduction and Overview"
        ],
        "The Different Platforms Using Studio5000.": [
          "Controllogix Platform",
          "Controllogix Platform",
          "Compactlogix Platform",
          "Compactlogix Platform",
          "Softlogix Platform",
          "Softlogix Platform",
          "Platforms Summary"
        ],
        "Creating a Studio5000 Project.": [
          "Creating and Naming a Project using Studio5000",
          "Demo. Creating and Naming a Project using Studio5000.",
          "Navigating the Toolbars and Controller Organizer using Studio5000",
          "Tasks, Programs and Routines.",
          "Creating a Periodic Task and Program.",
          "Creating a Ladder Logix Routine.",
          "Creating a Project. Summary.",
          "Creating a Studio 5000 Project."
        ],
        "Creating Tags and I/O": [
          "Creating Tags and Defining Memory Layout.",
          "Defining I/O Tags and Aliases.",
          "Tags and I/O Summary.",
          "Tag and I/O Creation and Definition."
        ],
        "Programming a Ladder Routine": [
          "Ladder Logic Bit Instructions.",
          "Numbering Systems Relationships.",
          "Program Flow Explanation in a Ladder Routine.",
          "Program Flow Demonstration in a Ladder Routine.",
          "Timers and Counters.",
          "Comparison Instructions.",
          "Maths Instructions.",
          "Programming Summary.",
          "Programming a ladder routine"
        ],
        "Communicating and going Online": [
          "Connecting the PLC to Computer.",
          "Connecting the PLC to the Computer 2",
          "Communications Summary.",
          "Connecting the PLC to Computer"
        ],
        "Documenting and Searching a Project": [
          "Adding and Editing Documentation Components.",
          "Searching and Replacing Project Components.",
          "Searching and Controller Fault finding Online.",
          "Documentation and Search Summary.",
          "Documentation and Searching."
        ],
        "Lab Exercises": [
          "Car Wash Exercise.",
          "Mixer Exercise.",
          "Furnace Exercise"
        ]
      },
      "requirements": [
        "Computer literacy, understanding of electrical and instrumentation drawings. A computer with internet connection."
      ],
      "description": "This course covering the RSlogix/Studio5000 ladder logic PLC Training Basic is for any of you who may have used or had exposure to a conventional PLC, but with little or no exposure to RSlogix/Studio5000 used in any of the 4 platforms where it is used. It is also for First Time Users with very basic knowledge of PLC's generally. This software, and the Rockwell Automation platforms that use it, is very powerful and for me is my PLC software and hardware of choice, Very user-friendly.\nI shall be your instructor during this training and I have had many years of practical experience creating projects and programming PLC's, HMI's, commissioning, and face-to-face training. I also possess a SAQA Further Education and Training Certificate: Measurement, Control and Instrumentation. This is South African but recognized in many countries internationally.\nThe course will start by introducing you to the 4 platforms using RSlogix/Studio5000 and explaining the differences.\nNext, I will cover with you, the steps taken to create a RSlogix/Studio5000 project and make it work.\nWho Should Take This Course?\nThis RSlogix/Studio5000 ladder logic PLC Training Basic course is designed as an introductory course for users who have had exposure to PLC ladder programming but limited or no exposure to Studio5000.\nThis course is also strongly recommended if you are a user of PLC5 or SLC500 and you are upgrading to Controllogix or Compactlogix and you will then be a new user.\nThis is a basic course, so if you are an experienced user of Studio5000 you might get bored.\nListed below are some of the topics I will cover with you in this course.\nAn explanation of all the different platforms using the Studio 5000 software.\nI will show you how to create an RSlogix/Studio5000 project from scratch.\nYou will learn the scheduling mechanism used by Studio5000 in the form of Tasks, Programs and Routines.\nSetting up and navigating the software will teach you the functions of the toolbars and setting up the colour scheme preferred by you.\nHow can the program flow within a project behave? I will show you using instructions such as JSR, MCR and others.\nYou will learn how to program a ladder routine using the most popular instructions such as Bits, Timers, Counters, and many others.\nI will show you how to create Tasks, Programs and Routines.\nYou will learn how to establish communication between the computer and PLC using RSlinx.\nThis is just a short description explaining what you will learn but there is a lot more that you will learn if you take  the\nRSlogix/Studio5000 Ladder Logic PLC Training. Basic.\nThere are a number of quizzes that you can complete after each section to help you reinforce your knowledge and gain confidence using the software. There are also some practical labs for you to complete with a solution attached where I will be demonstrating my solution.\nAt the end of the course, you will feel confident creating and running a project, interrogating an existing project and carrying out necessary changes to a running operation.\nThe majority of the course consists of video tutorials where I will explain all the different aspects of Studio5000 and demonstrate the use of the software for each of these aspects.\n\nThe more you can use the software, the better you will be, Then the next course which will cover advanced options of Studio5000, will be of real benefit to you.\nSo if you are Really Serious about learning Studio5000 using platforms such as Controllogix, Compactlogix or even Softlogix then this course is for you. Enroll on this course Now and you can be learning Today.",
      "target_audience": [
        "Electrical and instrumentation technicians and engineers, Control systems specialists. Anyone currently using a different PLC and is in the process of changing to RSlogix/Studio5000. This is not for computer programmers or web designers."
      ]
    },
    {
      "title": "Regular Expressions (Regex) with C# .NET - Easy and Fast!",
      "url": "https://www.udemy.com/course/learning-regular-expression-with-net/",
      "bio": "Regex Mastery: Hands-On Pattern Detection, Input Verification, Security Enhancement, and Data Cleanup",
      "objectives": [
        "Pattern Detection - Look for occurrences of a pattern using a concise language",
        "Data Preparation - Locate and transform data of interest",
        "Data Validation - Validate Input and Improve Security by Preventing Injection Attacks",
        "Learn Techniques to Write High-Performance Patterns",
        "Hands-on projects"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Increase the speed of learning",
          "Source Code Setup"
        ],
        ".NET Regex Language": [
          "Downloadable Resources",
          "Interactive Tool - Visually Observe and Build Regex",
          "Single Character Patterns",
          "Anchors",
          "Character Classes",
          "Quantifiers",
          "HTML input validation example",
          "Input Validation Example (Browser)",
          "Instructions for Quiz and Exercise",
          ".NET Regex Features",
          "Postal Codes"
        ],
        ".NET Regex Engine - Behind the scenes": [
          "Downloadable Resources",
          "One character at a time",
          "Left to Right",
          "Lab - Left to Right",
          "Greedy, Lazy and Backtracking Analogy",
          "Greedy, Lazy and Backtracking Examples",
          "Lab - Greedy, Lazy and Backtracking",
          "Groups, Backreference, Replacement",
          "Lab - Groups, Backreference, Replacement",
          "Look Ahead",
          "Look Behind",
          ".NET Regex - Five Key Points",
          "Exercise - Currency Symbol",
          "Solution - Currency Symbol",
          "Exercise - Match a number",
          "Solution - Match a number",
          "Exercise - List all cars not made by Honda",
          "Solution - List all cars not made by Honda",
          "Exercise - Webserver Log Parser",
          "Solution - Webserver Log Parser",
          "Exercise - Filter by price",
          "Solution - Filter by price",
          "Exercise - List cars that meet specified criteria",
          "Solution - List cars that meet specified criteria",
          "Exercise - Password Validation",
          "Solution - Password Validation"
        ],
        ".NET Regex Performance": [
          "Downloadable Resources",
          "Exponential degradation - example of bad patterns and performance implication",
          "How to correct performance issues and optimize pattern",
          "Static, Instance, and Compiled Directive",
          "Lab - Performance Test with Static, Instance and Compiled Directive"
        ],
        "Coding with .NET Regex Class": [
          "Introduction to Regex Features",
          "How to Define a Regular Expression Pattern in Code",
          "Regex IsMatch and Unit Testing",
          "Match, Matches, and Groups",
          "Find-Replace, Split",
          ".NET Regex Features"
        ],
        "Project 1 - Log Parser": [
          "Log Data Parser Objective",
          "Exercise 1 - Write a pattern to capture header information",
          "Exercise 2 - Write a pattern to capture error message",
          "Exercise 3 - Write a pattern to capture metrics",
          "Solution - How to write log parser regex patterns",
          "Solution - Log Data to JSON"
        ],
        "Project 2 - IoT Sensor Data": [
          "Sensor Data Parser Objective",
          "Exercise 1 - Capture Date Value",
          "Exercise 2 - Capture Temperature and Humidity Value",
          "Solution - How to write sensor data patterns",
          "Solution - Sensor Data to JSON"
        ],
        "Project 3 - Health Care Data": [
          "Health care Data Parser Objective",
          "Exercise 1- Cleanup pattern",
          "Exercise 2 - Write a pattern to capture a row",
          "Exercise 3 - Write a pattern to capture a cell",
          "Solution - How to write health care data patterns",
          "Solution - Health care data to CSV"
        ],
        "Project 4 - Network Configuration Parser": [
          "Network Configuration Parser",
          "Solution - Network Configuration Parser"
        ],
        "Interesting Question and Answers from the Discussion Forum": [
          "How to Remove Embedded Comma Inside Double Quotes",
          "How to Extract Unit Number from Postal Address",
          "How to split text that uses comma and/or newline as separators"
        ]
      },
      "requirements": [
        "Familiarity with C# and .NET"
      ],
      "description": "Hi, and welcome to the Regular Expressions (Regex) with C# .NET - Easy and Fast!\nRegular Expression (regex) is a pattern detection language – they are typically used to search patterns in text, extract matching values, and data validation.\nRegex is supported in many programming languages, including Python, C#, JavaScript, Perl, SQL, and more.\nThis course is designed to provide hands-on experience with regular expressions through various exercises and projects\nI am Chandra Lingam, and I am your instructor.\nHere are some typical uses of regular expression\nPattern Detection\nLook for occurrences of a pattern using a concise language\nData Preparation\nData clean-up and preparation is often one of the most time-consuming activities\nYou can define the structure of data as a regex pattern and parse data\nOne good application of this is AWS Glue and Athena.\nYou can use regex to define the structure of a record in a text file, and query the file using SQL\nInput Validation\nYou can implement a client-side check for input validation\nFor example, your app can guide the user to provide data in the correct format.\nAs part of the zero-trust architecture, you need to validate input to your microservice\nWith regex, you can verify and validate data payloads in your service\nCloud Services\nSeveral cloud services use regex for advanced configuration.\nWith the AWS web application firewall, you can allow or deny traffic based on a regex pattern\nIn Google Workspace, you can use regex for content filtering, Gmail route configuration, and to search for content in google docs\nIn Google Analytics, you can use regex to locate and transform matching data in your data set\nRegex is also supported by several products such as SAP, Oracle, and SQL Server\nCurriculum\nHere is a brief course outline:\nIn the Regex features section, you will get familiar with various regex methods, their purpose, and how-to unit test your pattern\nIn the regex language section, you will learn how to write patterns – starting from the simplest of patterns\nYou will also learn to incorporate regex in your HTML input types for validation\nRegex engine puts the onus on the developers, that is us, to write efficient patterns\nYou will gain knowledge of regular expression engine that will help you write optimal patterns\nThere are several exercises for you to apply your new skills\nWe then look at performance and how poorly written patterns can degrade exponentially\nHow to optimize the patterns and address performance issues\nIn .NET, there are a few different ways to interact with the regular expression class\nYou will gain insight into what method is appropriate for a given performance requirement\nThere are four hands-on projects in this course\nYou will learn how to apply the regex for distinctly different data sets – unstructured log data, IoT sensor data, and parsing medical test data in HTML format\nYou will get prompt support through the course Q&A forum and private messaging.\nI am looking forward to meeting you",
      "target_audience": [
        "System Administrators",
        "Developers",
        "Architects",
        "Database Administrators"
      ]
    },
    {
      "title": ".NET Core - Top 50 Interview Questions & Answers",
      "url": "https://www.udemy.com/course/net-core-30-most-important-interview-questions-in-30-mins/",
      "bio": "Dependency Injection, Kestrel, Startup/Program classes, Advantages, Service Life Time, Metapackage",
      "objectives": [
        "Top 50 .NET Core Interview Questions and Answers",
        "All important .NET Core questions from interview perspective",
        "Questions with Answers explained with Examples",
        "Learn .NET Core in Q&A format"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Part 1 - Dependency Injection": [
          "Part 1 - Dependency Injection"
        ],
        "Part 2 - Definition of .NET Core": [
          "Part 2 - Definition of .NET Core"
        ],
        "Part 3 - Program.cs & Startup.cs files": [
          "Part 3 - Program.cs & Startup.cs files"
        ],
        "Part 4 - Middleware in .NET Core": [
          "Part 4 - Middleware in .NET Core"
        ],
        "Part 5 - Service Lifetimes AddSingleton/ AddScoped/ AddTransient": [
          "Part 5 - Service Lifetimes AddSingleton/ AddScoped/ AddTransient"
        ],
        "Part 6 - Kestrel": [
          "Part 6 - Kestrel"
        ],
        "Part 7 - Main Files in ASP.NET Core": [
          "Part 7 - Main Files in ASP.NET Core"
        ],
        "Part 8 - Routing in ASP.NET Core": [
          "Part 8 - Routing in ASP.NET Core"
        ],
        "Part 9 - Caching in ASP.NET Core": [
          "Part 9 - Caching in ASP.NET Core"
        ]
      },
      "requirements": [
        "C#, .NET Framework"
      ],
      "description": "This course will help you in preparing for the most important questions asked in .NET core interviews.\nThis course contains 50 MOST IMPORTANT questions with answers in detail.\n\n\nThe topics covered in this course are\n1. .NET Core Advantages\n2. Program.cs file\n3. Startup.cs file\n4. ConfigureServices and Configure method in .NET Core\n5. Dependency Injection\n6. Middleware\n7. AddSingleton/ AddTransient/ AddScoped methods\n8. Kestrel\n9. Run, Use & Map method\n10. Request Processing Pipeline\n11. Metapackages\n12. Error Handling\n13. Routing\n14. .NET Standard\n\n\nSome Questions are listed here:\nWhat is .NETcore?\nWhat are the advantages of .NET core over .NET framework?\nExplain default project structure in asp.net core application?\nWhat is the role of Program.cs file?\nWhat is the role of Startup.cs file?\nWhat is the role of Configureservices and Configure method?\nWhat is Dependency Injection in asp.net core? Or\nhow can we inject the service dependency into the controller?\nDescribe the service lifetimes in asp.net core? Or\nWhat is the difference between AddSingleton, AddScoped & AddTransient?\nWhat is Middleware?\nWhat is Kestrel?\n\n\nDisclaimer.\nThis is a very specific course which will only have .NET core interview questions.\nNo questions of C#, MVC and asp.net will be covered in this course.\nBasic knowledge of C# is required for this course.",
      "target_audience": [
        "Those who are looking for .NET Core jobs"
      ]
    },
    {
      "title": "Working with SQS and SNS: AWS with Python and Boto3 Series",
      "url": "https://www.udemy.com/course/working-with-sqs-and-sns-aws-with-python-and-boto3-series/",
      "bio": "Learn to implement FIFO, Dead-Letter Queues, SMS, Email Subscriptions, publish messages to subscribers and much more!",
      "objectives": [
        "You'll be able to implement your own SQS Queues in any kind!",
        "You'll be able to implement Regular, FIFO and Dead-Letter Queues on SQS!",
        "You'll be able to implement SNS Topics and Subscriptions!",
        "You'll be able to implement SMS, Email and SQS Queue Subscriptions to SNS Topics!",
        "You'll learn how you can send any kind of messages to your SQS Queues and SNS Subscribers!",
        "You'll be able to implement any sort of infrastructure with SQS and SNS on AWS with Python!",
        "You'll learn how to code against AWS API using Python and Boto3!",
        "You'll be confident to work with AWS APIs using Python for any kind of AWS Resource on SQS and SNS!"
      ],
      "course_content": {
        "Introduction": [
          "Welcome",
          "About This Course",
          "What We Will Build in This Course",
          "What Do You Need For This Course"
        ],
        "Preparing The Environment for Development": [
          "Section Overview",
          "About Tools and Environment",
          "Create an AWS Account If You Don't Already Have It!",
          "Logging in to AWS Console and A Walkthrough",
          "Let's Create Our AWS Credentials!"
        ],
        "Windows Environment Setup": [
          "Installing Python 3 and Pip",
          "Installing AWS SDK (CLI)",
          "Preparing CLI with AWS Credentials",
          "Installing Boto3",
          "Verifying The Setup"
        ],
        "MacOS Environment Setup": [
          "Installing Python 3 and Pip",
          "Installing AWS SDK (CLI)",
          "Preparing CLI with AWS Credentials",
          "Installing Boto3",
          "Verifying The Setup"
        ],
        "Queue Operations: Simple Queue Service (SQS) with Boto3": [
          "Setting Up Our Project with PyCharm IDE",
          "Creating a Queue",
          "Creating a FIFO Queue",
          "Creating a Dead-Letter Queue and Binding to a Queue",
          "Getting and Listing Queues",
          "Getting Queue Properties",
          "Updating Queue Properties",
          "Deleting Queues"
        ],
        "Message Queueing: Simple Queue Service (SQS) with Boto3": [
          "Sending a Message to Queue",
          "Sending Batch Messages to Queue",
          "Receiving Messages (Polling)",
          "Processing and Deleting Messages from Queue",
          "Changing Message Visibility Timeouts",
          "Purging the Queue"
        ],
        "Topic Operations: Simple Notification Service (SNS) with Boto3": [
          "Creating Topics",
          "Getting and Listing Topics",
          "Getting Topic Attributes",
          "Updating Topic Attributes",
          "Deleting Topics"
        ],
        "Topic Subscriptions: Simple Notification Service (SNS) with Boto3": [
          "Creating Email Subscription",
          "Creating SMS Subscription",
          "Creating SQS Queue Subscription",
          "Getting and Listing Topic Subscriptions",
          "Checking If Phone Number Opted Out",
          "Listing Opted Out Phone Numbers",
          "Opting Out of Email Subscription",
          "Opting Out of SMS Subscription",
          "Opting In Phone Number Back",
          "Publishing and Receiving Subscripiton Messages"
        ],
        "Wrapping Up": [
          "Thank You!"
        ]
      },
      "requirements": [
        "Little to no experience with Python",
        "Any Python interpreter. Default is fine but I recommend PyCharm",
        "An AWS Account - Free Tier Available!",
        "General knowledge on AWS would be nice",
        "Not necessary but theoretical knowledge on SQS and SNS would be nice!"
      ],
      "description": "SQS is the very first service of AWS when it was launched in 2006.\nSNS is the best way to transmit notifications and messages to either SMS, Email, SQS Queue or even other applications on AWS!\nJoin me in this course to learn ins-and-outs of SQS Simple Queue Service and SNS Simple Notification Service from AWS!\nLet’s take a closer look at what we’re going to cover in this course step-by-step.\nIn this course, we’ll start of with what we’ll build throughout the course and what you need to have on your computer to follow along with me.\nDon’t worry; I’ll explain everything you need very clearly and I’ll show you what you need to install and setup on your computer to work with S3. There will be two different sections for Windows and MacOS users. These sections are basically identical and show how you can prepare your computer environment to be ready to work with S3! I’ll show you how to install Python, Boto3 and configure your environments for these tools. I’ll also show you how you can create your own AWS account step-by-step and you’ll be ready to work AWS in no time!\nWhen we’re done with preparing our environment to work AWS with Python and Boto3, we’ll start implementing our solutions for AWS.\nWe’ll first start off with SQS Simple Queue Service and create our very first Queue on AWS. After getting our feet wet with the API, we’ll learn how we can create FIFO or First-In-First-Out Queues on SQS! Next up is Dead-Letter Queues. Dead-Letter Queues add another layer of resiliency to your applications and helps you maintain them healthy even if your main queue is not available to process the messages. So we’ll learn how we can create ourselves a Dead-Letter Queue and then bind to our Main Queue to allow messages to keep coming in case of a failure. Then we’ll learn how to operate operations on SQS Queues like retrieving configurations updating them and so on.\nNext up is the message operations on SQS! We’ll learn from publishing single messages to batch messages to our SQS Queues! Once we learn how to send them, we’ll implement Polling solution for retrieving and reading the queued messages from AWS! Then we’ll learn how to process these messages and eventually learn how to delete them from SQS once we’re ready. After that, we’ll see how to update the visibility window of messages by manipulating message visibility timeouts. And lastly, we’ll learn how to completely wipe the queue by purging it and you’ll see how easy it is!\nNext stop is SNS Simple Notification Service! We’ll start by creating SNS Topics and build upon that by learning to implement operations on SNS Topics for managing them. For example, we’ll learn how to retrieve information about SNS Topics, update their configurations and eventually delete them.\nMost important part of SNS comes along and that is Subscriptions! With SNS Topic Subscriptions, you can literally subscribe anything to your Topic and publish notifications and messages to them.\nWe’ll start by implementing an Email Subscription to an SNS Topic. And we’ll learn to confirm the SNS Topic Subscription from the received email of AWS Notifications. Next is to learn SMS Subscriptions for SNS Topics. I’ll subscribe my number and show you how easy it is to subscribe anyone to your SNS Topic! We’ll also learn to implement how to subscribe an SQS Queue to an SNS Topic. Once we’ve done that, we’ll learn how we can check opted-out subscribers by filtering and listing them. Then we’ll learn the way to opt-in a SMS subscriber back into our SNS Topic Subscription!\nAnd when we implement all this, we’ll move on with learning to publish messages to our SNS Topic Subscribers! We’ll subscribe an Email, SMS number and a SQS Queue in the same time and then publish a message to our SNS Topic! Once we do that, we’ll verify that we receive the subscription notification from Email, SMS and SQS Queue! That’s a huge benefit of SNS Topic Subscriptions and I highly recommend you to make use of it in your applications and sevices!\nAgain, SQS and SNS are amazing services from AWS and there are hundreds of ways you can make use of them. Let’s not lose more time and jump right into the implementation with SQS and SNS so I’ll see you in the course!",
      "target_audience": [
        "Beginners on AWS who wants to put their theory in practice",
        "AWS Cloud Architect Associate Exam Preppers who wants to practice their theories with real projects",
        "Who wants to learn how to work with SQS using Python and Boto3!",
        "Who wants to learn how to implement Infrastructure-as-a-Code or IaaS on AWS",
        "Anyone who wants to learn how to queue messages with SQS",
        "Anyone who wants to learn how to architect resilient applications using SQS and SNS",
        "Who wants to learn how to develop infrastructures on AWS using Python",
        "Who wants to learn AWS Python API or namely Boto3",
        "Anyone who wants to learn how to implement SNS Subscriptions via Email, SMS or SQS Queue"
      ]
    },
    {
      "title": "Introduction to Quantum Computing",
      "url": "https://www.udemy.com/course/introduction-to-quantum-computing/",
      "bio": "Master Quantum Computing and Understand all the Basics of Quantum Computing in just one course",
      "objectives": [
        "The basics of quantum computing",
        "Understand the Basics of Microsoft Q",
        "Learn the basic Mathematics for quantum computing",
        "Understand the basic quantum algorithms",
        "Learn all the quantum computing theoritical concepts",
        "Create and perform basic quantum computing tasks with Microsoft Q"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "What is Quantum computing",
          "Characteristics of a computational system"
        ],
        "Mathematics for quantum computing": [
          "understanding complex numbers part 1",
          "understanding complex numbers part 2",
          "Mathematics for quantum computing Part 1",
          "Mathematics for quantum computing Part 2",
          "Mathematics for quantum computing Part 3",
          "Mathematics for quantum computing Part 4",
          "Mathematics for quantum computing Part 5",
          "The concept of Qubit part 1",
          "The concept of Qubit part 2"
        ],
        "Quantum computing algorithms": [
          "Introduction to different types of quantum computing algorithms",
          "Quantum computing algorithms part 1",
          "Quantum computing algorithms part 2",
          "Quantum computing algorithms part 3"
        ],
        "Programming Part": [
          "Introduction to Microsoft Q#",
          "Setting up everything",
          "Basic Microsoft Q# operations part 1",
          "Basic Microsoft Q# operations part 2",
          "Basic Microsoft Q# operations part 3",
          "Basic Microsoft Q# operations part 4",
          "Conclusion",
          "Thank you",
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "Have basic mathematic knowledge",
        "Want to learn more about quantum computing"
      ],
      "description": "Understanding what quantum computing is is definitely not an easy task. Indeed, since this is a new science there is a few places where you can find a quality introduction course about this topic. Indeed, usually all the course are either to advanced or simply does not cover properly the topic of quantum computing. But, this course is designed to give you all the basic knowledge about the topic. If you :\n- Are a student and want to learn about new technologies\n- Are interested about this topic but don't know were to find good resources about it\n- Want to know how to work with different tools used for quantum computing\n- Simply curious about the topic and you want to learn more about it\nThen this course is definitely for you and you will love it. Not only you will learn different theoretical concepts that are really useful in quantum computing but you will also use different tools to practice everything that you have learned. Finally, you will not only have an introduction to the topic but also to Microsoft Q the programming language used for quantum computing.\nThe structure of the course\nThe way this course is designed will help learn all the concepts that you need to be able to understand the basics of Quantum Computing. Indeed, you will at first learn all the basics of mathematics especially linear algebra. Once again, you will not become a specialist in this field but you will at least understand the basic concepts of it that can be useful for your understanding of quantum computing. Then, you will learn what exactly is an algorithm and what is the difference between a quantum algorithm and a classical mathematical algorithm. Also, we are going to cover different quantum algorithms that are also really popular in this field. Finally, you will have an introduction to Microsoft Q. In my opinion this is pretty important to learn because this is the programming language that is used to perform different quantum calculations as well as testing or running different quantum apps.\nAlso, it's really important to understand that I created this course on the Principe of learning by practice. This is why even if this course is mostly theoretical, I tried to implement as much practice as possible. This way, when you will have completed this course you will not only be able to understand the basics of what is quantum computing but you will also be able to write basic lines of code and have a basic understanding of different quantum algorithms.\nFor who is this course designed\nThis course is created for beginners who have no prior knowledge of what is quantum computing and are interested by the topic. Indeed, you don't need to be an expert in any field to take this course, everything that is presented in this course is done very simply to help you understand from scratch everything you need to know about this topic. You will be introduced to different quantum algorithms as well as different mathematical notions that will allow to understand a bit more about this topic. So, if you are a student that wishes to learn more about this topic for educational or professional purposes you will definitely enjoy this course. Also, if you are just someone that find this topic interesting and you want to have a basic introduction to it well this course has everything you need. Not only you will understand Quantum computing in a theoretical way but you will also learn to use it in a more practical way.\nWhy should I take this course\nThe main reason is that you will be able to understand what exactly is quantum computing and all the concepts linked to it. In other words, you will learn different concepts as well different element that are pretty useful in quantum computing if you want to get more advanced in this field. Also, the course is well structured and made simple this means that you don't necessary need advanced knowledge in many fields to understand it. So, if you are passionate about quantum computing and want to learn more don't wait anymore and join the course.\nThere is no risk involved in taking this course\nThis course comes with a 100% satisfaction guarantee, this means that if your are not happy with what you have learned, you have 30 days to get a complete refund with no questions asked. Also, if there is any concept that you find complicated or you are just not able to understand, you can directly contact me and it will be my pleasure to support you in your learning.\nThis means that you can either learn amazing skills that can be very useful in your professional or everyday life or you can simply try the course and if you don't like it for any reason ask for a refund.\nYou can't lose with this type of offer !!\n\n\nENROLL NOW and start learning today :)",
      "target_audience": [
        "People interested by Quantum Computing",
        "People curious about learning a new topic"
      ]
    },
    {
      "title": "Kubernetes from A to Z™",
      "url": "https://www.udemy.com/course/kubernetes-for-beginners/",
      "bio": "Master the best open-source system for automating deployment, scaling and managing containerized applications.",
      "objectives": [
        "Use kubernetes"
      ],
      "course_content": {
        "Introduction": [
          "Introduction And Overview",
          "What is Kubernetes?",
          "Why Kubenetes?",
          "Section Assessment"
        ],
        "Kubernetes Everywhere": [
          "Section Overview",
          "Up and running locally with minikube",
          "Windows Minikube Demo",
          "Linux Minikube",
          "Up and running cluster with kubeadm",
          "Kubeadm Demo",
          "Up and running remote management with kubectl",
          "Up and running section review"
        ],
        "Core objects and primitives: Pods": [
          "Core objects and primitives: Pods - Intro",
          "Core objects and primitives: Pods - The basics",
          "Core objects and primitives: Pods - Communications",
          "Core objects and primitives: Pods - First deployment",
          "Core objects and primitives: Pods - The right way",
          "Core objects and primitives: Pods - Section review"
        ],
        "Core objects and primitives: Deployments": [
          "Core objects and primitives: Deployments - Intro",
          "Core objects and primitives: Deployments - The basics",
          "Core objects and primitives: Deployments - Imperative way",
          "Core objects and primitives: Deployments - Declarative way",
          "Core objects and primitives: Deployments - Section review"
        ],
        "Core objects and primitives: Services": [
          "Core objects and primitives: Services - Intro",
          "Core objects and primitives: Services - The Basics",
          "Core objects and primitives: Services - Imperative way",
          "Core objects and primitives: Services - Types",
          "Core objects and primitives: Services - Declarative way"
        ]
      },
      "requirements": [
        "Basic understanding of docker and containers"
      ],
      "description": "This course is an excellent introduction to Kubernetes, helping you gain basic experience and an understanding of the vital components of the platform. Given its recent explosion in popularity, it is important to be on the frontier of this cutting-edge technology. Discover how to use Kubernetes to simplify your software development.\nAs an IT professional with 20+ years management, I want to share my experience in providing technical solutions for achieving business objectives.\nThis course is ideal for beginners to container technology or those new to Kubernetes engineering.\nThis course includes the following chapters:\nCourse Introduction and Overview\nWhat is Kubernetes?\nWhy Kubernetes?\nUp and Running: Basics\nCluster Architecture\nCore Objects and Primitives\nEnroll in the course and get started with Kubernetes today!",
      "target_audience": [
        "Everyone"
      ]
    },
    {
      "title": "Learn to Develop for Cloud with Pivotal Cloud Foundry",
      "url": "https://www.udemy.com/course/learn-to-develop-for-cloud-with-pivotal-cloud-foundry/",
      "bio": "Cloud computing is today and the future of software development.Learn to work and develop applications with Cloud now!",
      "objectives": [
        "Learn Cloud Computing from ground-up!",
        "Learn All The Cloud Offerings from SaaS, PaaS to IaaS",
        "Learn Everything You Should Know to Get Started with Cloud Foundry",
        "Learn Cloud Foundry CLI to Manage Your Applications and Services in Cloud",
        "Learn to Develop Cloud Applications Using Java and Spring Boot!",
        "Learn to Use PostgreSQL-as-a-Service in the Cloud with Cloud Foundry!",
        "Learn How to Work with Manifest Files to Deploy Applications to Cloud Very Easily!",
        "Learn How to Scale Applications in Cloud both Horizontally and Vertically!",
        "Learn How to Bind Service Instances and Manage Environment Variables for Applications in Cloud",
        "Learn to Bind Database-as-a-Service with a Spring Boot Application in Cloud"
      ],
      "course_content": {
        "Introduction": [
          "Welcome!",
          "About This Course"
        ],
        "Introducing Cloud Foundry": [
          "What is Cloud Foundry?",
          "Architecture of Cloud Foundry",
          "Before We Begin With Cloud Foundry",
          "Creating Your Cloud Foundry Account",
          "Downloading and Installing CF Command Line Interface (CLI)",
          "What are Spaces, Organizations and Roles?"
        ],
        "Getting Started with Cloud Foundry": [
          "Logging Into Your Space from CLI",
          "Logging Into Your Space from UI",
          "CF Commands",
          "Walking Through the Cloud Foundry Dashboard",
          "What are Application Services?",
          "Creating Service Instances",
          "Let's Push Our First Application to Cloud Foundry"
        ],
        "Cloud Computing": [
          "What is Cloud Computing?",
          "Essential Characteristics of Cloud Computing",
          "Why We Need Cloud Computing?",
          "Service Models in The Cloud",
          "Section Overview"
        ],
        "Deploying Applications to Cloud Foundry": [
          "Application Manifests with YAML",
          "Creating a YAML Manifest for Your Application",
          "Let's Re-Deploy Our Application Using manifest.yml",
          "What Happens When We Deploy an Application to Cloud Foundry?",
          "Developing a Spring + PostgreSQL Database App From Scratch for Cloud Foundry",
          "Deploying and Binding PostgreSQL Database to App Using Manifest with CLI",
          "What Comes After Deployment?"
        ],
        "Platform-as-a-Service - PaaS": [
          "What is a Platform?",
          "What is Platform-as-a-Service or PaaS?",
          "Goals of Platform-as-a-Service?",
          "PaaS Providers On The Market",
          "12-Factor Apps and Design Considerations for PaaS",
          "Anti-Patterns for PaaS"
        ],
        "Update, Scale and Monitor Applications with Cloud Foundry": [
          "Let's Take a Look at Our Running Application",
          "Updating and Scaling on a Running Application Instance",
          "Monitor Running Instance with Logs on UI and CLI"
        ],
        "Advanced Features of Cloud Foundry": [
          "What Options We Have to Manage Instances?",
          "Understanding and Using Environment Variables",
          "Service Offerings and Service Binding to Application Instances"
        ],
        "Conclusion": [
          "What Comes Next?",
          "Thank You!"
        ]
      },
      "requirements": [
        "Any Java IDE is fine for development but IntelliJ IDEA IDE would be nice to have",
        "Any Command Line Tool that you are comfortable with"
      ],
      "description": "Do you want to learn what is Cloud Computing from ground-up? Do you want to give yourself a competitive advantage on both your current and future jobs with Cloud Computing and increase your salary? This is the course you need!\n\n\nCloud computing is both today and the future of computing and it's changing the way we develop and deploy software! If you want to catch up on the immensely expanding universe of Cloud Computing and take your software development skills to the next-level, all you need to do is join me in this course!\nIn this course, we are going to start from scratch with Cloud Computing and how the evolving technology led us here.\nWe will discover the technology and the architecture behind the cloud technologies that we have today.\nWe'll learn what is Software-as-Service or SaaS, Platform-as-a-Service or PaaS and Infrastructure-as-a-Service or IaaS.\nThen we will  dive deep into Platform-as-a-Service; how it works, designed and architectured.\nWe will discover the way for today and the future of software with 12-Factor applications. 12-Factor of application development will teach us how to actually develop great software for cloud or even for your personal projects!\nWhen we understand how to develop a great software, we will focus on Pivotal Cloud Foundry. With Pivotal Cloud Foundry, we will not only learn how PaaS works in real life but also how to actually work with it in real environments and real applications!\nFor Pivotal Cloud Foundry, we will start by creating our account. Then we'll discover the world of Cloud Foundry Command Line Interface or CLI by logging into our account and targeting our development environment. We will learn to work with Cloud Foundry using both the Command Line Interface and Web UI.\nWe will develop applications using Spring and Spring Boot from scratch and we will learn how to deploy or \"push\"  them using Command Line Interface!. We will do everything from scratch and I'll show you every single step to develop and deploy your applications to Cloud!\nWe will learn service offerings in cloud and how to make use of Software-as-Service through binding our applications with databases and services with a single command!\nWe will learn to scale, update and deploy new versions of our applications in cloud both using the Command Line Interface and Web UI!\nWe will be deploying our applications in less than a minute and see the results in real-time by calling our applications and pulling data from our PostgreSQL database service!\n\n\nThere is much more than these inside the course so I highly recommend you to join me in this course to become a software developer for the cloud!",
      "target_audience": [
        "Anyone who wants to learn cloud computing and the architecture behind it",
        "Anyone who who want to learn application development for cloud"
      ]
    },
    {
      "title": "Using Microsoft Bot Framework v3, LUIS, Cognitive Services",
      "url": "https://www.udemy.com/course/using-microsoft-bot-framework-luis-and-cognitive-services/",
      "bio": "Learn to create Smart Bots for Skype, Slack, Facebook Messenger, Telegram",
      "objectives": [
        "Use Bot Framework to create Bots",
        "Publish your bots on various Platforms",
        "Use of LUIS to understood user's input",
        "Use Cognitive Services in Bots"
      ],
      "course_content": {},
      "requirements": [
        "Basic knowledge of what is Chatbots",
        "Basic knowledge of C#",
        "Accounts in Microsoft Azure"
      ],
      "description": "Note: In this series I will use Bot Framework version-3.\nAI is Artificial intelligence, Study of intelligent agents and takes actions. Bots are a Software application that runs automated tasks and Simulates how a human would behave.\nThis course includes 4 Core components. All listed items are Microsoft's product and have proper documentation so if you stuck anywhere you can find proper documentation.\nMicrosoft Bot Framework enables you to build bots that support different types of interactions with users. Microsoft Bot Framework allows us to create conversational chatbots. Every bot has some common functionalities. Such as each bot require basic I/O, they must have language and dialog skills, and they must connect to users, preferably in any conversation experience and language the user chooses. The Bot Framework is responsible for this.\nLUIS stands for Language Understanding Intelligent Service. LUIS uses machine learning to allow developers to build applications that can receive user input in natural language and extract meaning from it. It allows your application to understand what a person wants in their own words.\nAzure Bot Services provides an integrated environment purpose-built for bot development. You can write a bot, connect, test, deploy, and manage it from your web browser with no separate editor. We can publish it to various channels such as Skype, Cortana, Facebook Messenger, Telegram, Slack etc.\nAzure Cognitive Services is a collection of APIs that enables natural and contextual interaction. It has intelligent algorithms to see, hear, speak, understand and interpret user needs through natural methods of communication.\nThrough this series, we will learn\nHow to create Form using FormFlow and make Rich cards\nUse of Azure Bot Services\nPublish bot on Skype, Facebook Messenger, Slack, Telegram, and Cortana.\nUnderstood LUIS.AI and integrate it with Bot Framework.\nAdvance concepts of Bot Framework such as State management and Proactive messages.\nAnd use cognitive services such as Vision API, Language API, and Bing Search APIs.\nWe will learn all above things through this video series. If you have any doubts then you can contact me via mail, message, or Q & A.",
      "target_audience": [
        "This is for newbies who want to create Chatbots",
        "Developer who know basic C# and want to create",
        "Person who want to process user input in natural language",
        "Developer who want to create bots on popular platforms",
        "Developer who want to use Azure Cognitive Services"
      ]
    },
    {
      "title": "Build Interactive Plotly & Dash Dashboards with Data Science",
      "url": "https://www.udemy.com/course/plotly-dash/",
      "bio": "Learn how to build integrated interactive dashboards that focus on telling stories with data science.",
      "objectives": [
        "How to build interactive dashboards with Python that work with advanced interactive components",
        "How to build interactive data science solutions"
      ],
      "course_content": {},
      "requirements": [
        "Knowing some basic python before hand would help"
      ],
      "description": "This course is going to build off the creations of dashboard components, every lesson and dashboard developed is new & never before seen as you enforce the fundamentals to dashboard creation and build off them until you are a pro at telling a story with data. This isn't the basic static show a graph course as our main focus is interactivity and making out dashboards update with our client's parameters in real-time.",
      "target_audience": [
        "Python developers looking to expand their carrier, anyone interested in telling stories with data, or an interest with trading bots or time series focused data manipulation.",
        "Beginner Python developers interested in data science"
      ]
    },
    {
      "title": "Apache Airflow: The Hands-On Guide",
      "url": "https://www.udemy.com/course/the-ultimate-hands-on-course-to-master-apache-airflow/",
      "bio": "Master Apache Airflow from A to Z. Hands-on videos on Airflow with AWS, Kubernetes, Docker and more",
      "objectives": [
        "Coding Production Grade Data pipelines by Mastering Airflow through Hands-on Examples",
        "How to Follow Best Practices with Apache Airflow",
        "How to Scale Airflow with the Local, Celery and Kubernetes Wxecutors",
        "How to Set Up Monitoring with Elasticsearch and Grafana",
        "How to Secure Airflow with authentication, crypto and the RBAC UI",
        "Core and Advanced Concepts with Pros and Limitations",
        "Mastering DAGs with timezones, unit testing, backfill and catchup",
        "Organising the DAG folder and keep things clean"
      ],
      "course_content": {
        "Introduction": [
          "Important Prerequisites",
          "The Roadmap",
          "Who I am?",
          "Development Environment",
          "Learning Advice [Must Read]",
          "Stay up to date with Apache Airflow"
        ],
        "The basics of Apache Airflow": [
          "Why data orchestration?",
          "Why Airflow?",
          "The Core Components",
          "The Core Concepts",
          "How does Airflow work?",
          "Airflow limitations",
          "[Practice] Installing Airflow",
          "IMPORTANT",
          "[Practice] Quick tour of Airflow UI",
          "[Practice] Quick tour of Airflow CLI",
          "[Practice] The Rest API"
        ],
        "The Stock Market Pipeline": [
          "Introduction",
          "The Project! What you will build ?",
          "Project materials",
          "Running the new environment",
          "Important",
          "Import warnings are OK",
          "Create the DAG with the dag decorator",
          "The new way of authoring DAGs with Taskflow",
          "Playing with the Taskflow API",
          "Checking API availability with the Sensor decorator",
          "Fetching stock prices with the PythonOperator",
          "Storing stock prices in MinIO (AWS S3 like)",
          "Formatting stock prices with Spark and the DockerOperator",
          "Fetching formatted prices from MinIO (AWS S3 like)",
          "The best way to load files into data warehouses with Postgres and Astro SDK",
          "Creating the dashboard to track Apple stock with Metabase",
          "The pipeline in action!",
          "Getting alerts on Slack with the new Notifiers"
        ],
        "Mastering your DAGs": [
          "Set up the new Airflow environment",
          "The best way to create your DAGs",
          "The parameters your DAGs need",
          "DAG scheduling: the basics",
          "Backfill and Catchup",
          "The most important rule to follow when creating tasks",
          "Play by scheduling your DAGs",
          "Dealing with timezones in Airflow",
          "Scheduling DAGs based on data with Datasets",
          "Conditional Dataset scheduling",
          "Datasets in action!",
          "Sharing data between task with XComs",
          "Organize your DAGs folder and clean your DAGs",
          "Manage task and DAG failures",
          "Test your tasks and DAGs"
        ],
        "Improving your DAGs with advanced concepts": [
          "The right way of grouping tasks",
          "Choosing tasks with branching and conditions",
          "Changing execution behaviours with Trigger Rules",
          "Templating your tasks",
          "The smart way of storing data with Custom XCOM backends",
          "Using variables to avoid hardcoding values"
        ],
        "Scaling Airflow": [
          "Executing tasks sequentially with the SequentialExecutor and SQLite",
          "Executing tasks in parallel with the LocalExecutor and Postgres",
          "Concurrency settings to control how tasks and dags run in parallel",
          "Start scaling Airflow with the CeleryExecutor",
          "Track your tasks using Flower with the CeleryExecutor",
          "Add new workers and configure queues to distribute your tasks",
          "Quick introduction to Kubernetes",
          "Introduction to the KubernetesExecutor",
          "Installing Airflow on a Kubernetes cluster",
          "How to configure Airflow on Kubernetes",
          "Deploying DAGs with Airflow on Kubernetes using GitSync"
        ],
        "Deploying Airflow on AWS EKS with Kubernetes Executors and Rancher": [
          "Introduction",
          "Quick overview of AWS EKS",
          "[Practice] Set up an EC2 instance for Rancher",
          "[Practice] Create an IAM User with permissions",
          "[Practice] Create an ECR repository",
          "[Practice] Create an EKS cluster with Rancher",
          "How to access your applications from the outside",
          "[Practice] Deploy Nginx Ingress with Catalogs (Helm)",
          "[Practice] Deploy and run Airflow with the Kubernetes Executor on EKS",
          "[Practice] Cleaning your AWS services"
        ],
        "Monitoring Apache Airflow": [
          "Introduction",
          "How the logging system works in Airflow",
          "[Practice] Setting up custom logging",
          "[Practice] Storing your logs in AWS S3",
          "Elasticsearch Reminder",
          "[Practice] Configuring Airflow with Elasticsearch",
          "[Practice] Monitoring your DAGs with Elasticsearch",
          "Introduction to metrics",
          "[Practice] Monitoring Airflow with TIG stack",
          "[Practice] Triggering alerts for Airflow with Grafana",
          "Airflow maintenance DAGs"
        ],
        "Security in Apache Airflow": [
          "Introduction",
          "[Practice] Encrypting sensitive data with Fernet",
          "[Practice] Rotating the Fernet Key",
          "[Practice] Hiding variables",
          "[Practice] Password authentication and filter by owner",
          "[Practice] RBAC UI",
          "What to expect from Airflow 2.0?"
        ],
        "APPENDIX": [
          "Backfill your DAGs in Airflow like a PRO",
          "How to define variables through environment variables",
          "[BLOG POST] Running Apache Airflow on a multi-nodes Kubernetes cluster locally",
          "[BLOG POST] Best Practices in Apache Airflow (Part 1)",
          "[BLOG POST] The PostgresOperator: All you need to know",
          "[VIDEO] Running Airflow with the Official Helm Chart",
          "[VIDEO] The DockerOperator: The basics and more",
          "[VIDEO] Airflow with DBT: The best way!",
          "Surprise ?"
        ]
      },
      "requirements": [
        "Notions of Docker and Python",
        "Docker Desktop installed and running",
        "The course \"The Complete Hands-On Introduction to Apache Airflow\" can be a nice plus."
      ],
      "description": "Apache Airflow is a platform created by the community to programmatically author, schedule and monitor workflows.\nIt is scalable, dynamic, extensible, and modulable.\nWithout any doubt, mastering Airflow is becoming a must-have and an attractive skill for anyone working with data.\nWhat you will learn in the course:\nFundamentals of Airflow are explained such as what Airflow is, how the scheduler and the web server work\nThe Forex Data Pipeline project is an incredible way to discover many operators in Airflow and deal with Slack, Spark, Hadoop, and more\nMastering your DAGs is a top priority, and you can play with timezones, unit test your DAGs, structure your DAG folder, and much more.\nScaling Airflow through different executors such as the Local Executor, the Celery Executor, and the Kubernetes Executor will be explained in detail. You will discover how to specialize your workers, add new workers, and what happens when a node crashes.\nA Kubernetes cluster of 3 nodes will be set up with Rancher, Airflow, and the Kubernetes Executor local to run your data pipelines.\nAdvanced concepts will be shown through practical examples such as templating your DAGs, how to make your DAG dependent on another, what are Subdags and deadlocks, and more.\nYou will set up a Kubernetes cluster in the cloud with AWS EKS and Rancher to use Airflow and the Kubernetes Executor.\nMonitoring Airflow is extremely important! That's why you will know how to do it with Elasticsearch and Grafana.\nSecurity will also be addressed to make your Airflow instance compliant with your company. Specifying roles and permissions for your users with RBAC, preventing them from accessing the Airflow UI with authentication and password,  data encryption, and more.\nIn addition:\nMany practical exercises are given along the course so that you will have occasions to apply what you learn.\nBest practices are stated when needed to give you the best ways of using Airflow.\nQuiz are available to assess your comprehension at the end of each section.\nAnswering your questions fast is my top priority, and I will do my best for you.\nI put a lot of effort into giving you the best content, and I hope you will enjoy it as much as I wanted to do it.\nAt the end of the course, you will be more confident than ever in using Airflow.\nI wish you a great success!\nMarc Lamberti",
      "target_audience": [
        "Data Engineers",
        "Inspiring Data Engineers",
        "DevOps",
        "Software Engineers",
        "Data Scientists"
      ]
    },
    {
      "title": "GoF Design Patterns - Complete Course with Java Examples",
      "url": "https://www.udemy.com/course/gof-design-patterns-learnit/",
      "bio": "Software Design Patterns in OOP with Java examples. Architecture principles and clean code design in OOP applications",
      "objectives": [
        "23 GoF Design patterns",
        "Creational patterns",
        "Behavioral patterns",
        "Structural patterns",
        "Source code examples of each pattern in Java",
        "Understanding the issue that each pattern supposed to solve",
        "Checklist for implementation of each pattern"
      ],
      "course_content": {
        "Introduction": [
          "Communication plan",
          "Unlimited access to 'Learn IT' application for students",
          "Tips to Improve Your Course Taking Experience",
          "Free AI Bot for My Students Only – No Sign-Up, FREE, Just Practice"
        ],
        "GoF Patterns: Overview": [
          "GoF Patterns: Overview"
        ],
        "Creational Patterns": [
          "Creational Patterns"
        ],
        "Structural Patterns": [
          "Structural Patterns, p.1",
          "Structural Patterns, p.2"
        ],
        "Behavioral Patterns": [
          "Behevioral Patterns, p.1",
          "Behevioral Patterns, p.2",
          "Behevioral Patterns, p.3"
        ],
        "Bonus section": [
          "Bonus lesson"
        ]
      },
      "requirements": [
        "OOP Knowledge - Learning my OOP Course is enough to start with this course",
        "Understanding of basic Java Syntax"
      ],
      "description": "From this course, you can learn GoF Design Patterns with detailed Java examples.\nThere are a lot of other courses on this topic. So, why would you choose exactly this course?  Here are just a few reasons:\n\n- Coding examples\nTo learn to program is not enough just watching videos and reading books. You also need to have a lot of practice. In this training course, you will review multiple practical tasks and coding examples which will help you learn and understand Java better.\n\n- Open source code\nWe hide nothing from our students! Including the source code for the home task solutions and source code of examples that were shared during the lesson. Having the source code you can just copy and paste it to run it on your local computer to understand how things work better.\nYou are allowed to use all source code examples for learning purposes. This helps significantly to configure the environment and make tests work, especially in case students didn't work with any testing framework in the past.\n\n- Q&A support\nThe significant difference between the online and offline learning process is the instructor's availability. If you are in one room with a tutor he always can help you to get understand the specific concept or to help fix your code on your computer.\nIn this course, we are supporting students with answers to any questions flagged in the Q&A section. In case there will be recurring questions - separate video lessons will be created to show how to address the issue.\nSo with this course you are not just getting video materials, code exercises, source code, access to the free mobile application without limits (which is still pretty cool, huh? :) ), but you also get tutor support and answers to your questions along with this course.\n\n- Relevant knowledge\nAfter our team investigated other Java courses on Udemy we realized that most of them have nothing in common with real life. The information which is shared there is very old and significantly out of date. For example, the instructor teaches a framework which is not been used already for 15 years. Or instructors do stress on the programming design which is not used anymore at all!\nThe instructor of this course is a consultant in a top-rated IT outsourcing company and helps to bring cutting-edge solutions in IT for all his clients. Feel free to check the LinkedIn page of the instructor and check skills endorsement. More than 19 thousand people across all over the world (BTW most of them are from the top 100 companies of the world) evaluated the skills of Andrii Piatakha.\nWith this course, you can be sure that you will spend your time learning the right things from one of the best IT consultants in the world.\n\n- Free mobile App without limits for our students\nKnowing Java is one skill. Be able to pass interviews in the company - that is another skill :) Nowadays a lot of companies use tests to select candidates on the first level of interview. We developed applications to practice skills specifically for such purposes.\nIn this course, we will provide you link to download our FREE mobile app for android. (soon it will be also available for iOS platforms)\nThe instructor of this course comes up with hundreds of tests that are used to test the knowledge of candidates. With this application, you will be well-prepared for the interview.\nAlso, only for our students - there is no limit on attempts to pass certification. In the course, we will tell you how to set up a special bonus code that will remove restrictions for our students inside the app.\n\n- High concentration of useful material in each lesson\nSometimes you can notice that watching 5 minutes of our lesson is equivalent to watching another 30 minutes lesson.\nThis is because time spent for preparation for the lesson (script for the lesson, lesson structure) and video editing (to cut boring pieces of the lesson or time when the program loads) sometimes 10 times as much (sometimes even 20) as the final lesson duration after video editing.\nAlso, each topic is separated from another. In case some concept will be explained in the next lesson and you don't need to worry about understanding this in the scope of this lesson - the instructor will make an announcement when a specific topic will be covered.\nGo and try it yourself! We will appreciate your feedback.\n\n\n\n\nSo don't wait! Take a look at the lessons' preview if you still have doubts!\nBuy this course today, and you will get all updates for FREE!\nFor those who successfully passed this training course, or for students who were recognized for asking amazing questions, there is a special offer from the IT-Bulls company! The creator of this course is IT-Bulls company CEO and Founder. We are always in search of talents to run our amazing startups together with you. Probably you always dreamed about running your startup? In this course, you will be able to find the team who will teach you how to do that and (in particular cases) will be glad to help with implementation!\nHope you enjoy this course! And remember, we appreciate all your feedback! Your feedback will help us to become even better! Your feedback will help us to create to best Java course ever!\nSee you at the lessons! :)",
      "target_audience": [
        "Software Engineers in Java",
        "Software engineers who work with other programming languages with OOP approach"
      ]
    },
    {
      "title": "Event-Driven Microservices: Spring Boot, Kafka and Elastic",
      "url": "https://www.udemy.com/course/event-driven-microservices-spring-boot-kafka-and-elasticsearch/",
      "bio": "Master event-driven microservices architecture with patterns using Spring boot, Spring cloud, Kafka and Elasticsearch",
      "objectives": [
        "Master Microservices architecture with Spring boot and Spring cloud stack",
        "Develop Event-driven microservices with Apache Kafka",
        "Understand Containerization of microservices with Docker and Docker compose",
        "Learn Basics of Kafka brokers, topics, partitions, producers, consumers, admin client, avro messaging, zookeper and schema registry",
        "Learn Basics of Elasticsearch, index api and query api",
        "Implement Kafka based messaging applications with Spring Kafka",
        "Understand Elasticsearch indexing and queries with Spring Data Elasticsearch",
        "Implement CQRS pattern with Kafka and Elasticsearch",
        "Implement Externalize configuration pattern with Spring Cloud Config",
        "Develop Rest API",
        "Implement Api versioning for versioning of Rest APIs",
        "Implement Spring Data JPA with PostgreSQL",
        "Understand Service Registration and Discovery with Netflix Eureka and Spring cloud",
        "Implement Client side load balancing with Spring Cloud Load Balancer",
        "Understand Api Gateway pattern with Spring Cloud Gateway",
        "Implement Circuit Breaker pattern with Spring Cloud Gateway and Resilience4j",
        "Implement Rate Limiting with Spring Cloud Gateway and Redis",
        "Understand Authentication and Authorization with Spring Security Oauth 2.0 and OpenID connect protocols with Keycloak using JWT",
        "Implement Monitoring of microservices with Spring Boot Actuator, Micrometer, Prometheus and Grafana",
        "Understand Log aggregation patterns and visualization with ELK stack - Elasticsearch, Logstash and Kibana",
        "Understand using Hateoas in Rest APIs with Spring Hateoas",
        "Implement Open Api v3 for Restful API documentation with Swagger v3",
        "Use Thymeleaf and Bootstrap for a basic front-end",
        "Understand Reactive development and asynchronous flow by querying Elasticsearch reactively with Reactive Spring, WebFlux, WebClient and Reactive Thymeleaf",
        "Learn Distributed tracing with Slf4J MDC, Spring Cloud Sleuth and Zipkin",
        "Understand Database per Service pattern",
        "Understand using Kafka streams with state store",
        "Learn streaming tweets from Twitter using Twitter4J"
      ],
      "course_content": {
        "Introduction to microservices architecture": [
          "Introduction to microservices architecture",
          "Project overview & Introduction to Event-driven architecture",
          "Implementation details for each microservice",
          "Microservices description",
          "Understanding microservices"
        ],
        "Setting up the environment": [
          "Setting up the environment"
        ],
        "First service: twitter-to-kafka-service - How to use Twitter4j & Kafka producers": [
          "Introduction to Spring boot",
          "Creating the base Spring boot project",
          "spring-boot-maven-plugin usage",
          "The very first microservice",
          "Log levels",
          "Favoring constructor injection",
          "Streaming tweets with Twitter4j: The command component in CQRS & Event sourcing",
          "Streaming tweets with Twitter Api V2",
          "Spring bean annotations",
          "Adding mock twitter stream as an alternative",
          "Introducing Apache Kafka:Event sourcing, topics, partitions, producer & consumer",
          "Kafka consumers",
          "Adding common config module",
          "Running Apache Kafka cluster with docker: Kafka, Zookeeper and Schema Registry",
          "Creating kafka-model module",
          "Creating kafka-admin module - Part 1: Configuration and dependencies",
          "Creating kafka-admin module - Part 2: Creating Kafka topics programmatically",
          "Creating kafka-producer module: Configuration of Kafka producer",
          "Kafka producer configuration",
          "Creating kafka-producer module: Produce events to store in Kafka event store",
          "Kafka producer implementation",
          "Integrate Kafka modules with Microservice: Use Kafka as event store for service",
          "Containerization of microservice with docker image: Run all with docker compose",
          "Understanding Kafka Architecture and Kafka Producers"
        ],
        "Externalizing configuration with Spring Cloud Config Server": [
          "Creating Config Server Repository",
          "Creating Spring Cloud Config Server as a Microservice",
          "Enable Config Server",
          "Using a common logback file for all microservices",
          "Changing twitter-to-kafka-service to work with config server",
          "Using remote GitHub repository",
          "Adding security to config server and encrypt passwords",
          "Using Jasypt to encrypt sensitive data",
          "Using JCE to encrypt sensitive data",
          "JCE vs Jasypt",
          "JCE and PBKDF2",
          "Containerization of config server by creating the docker image",
          "Understanding externalizing configuration with spring cloud config server"
        ],
        "kafka-to-elastic-service: How to use Kafka consumers and Elastic Index API": [
          "Introduction to Kafka Consumer: Reading data events from Kafka using messaging",
          "Adding kafka-consumer module",
          "Kafka consumer properties",
          "Kafka consumer properties",
          "Creating the microservice: kafka-to-elastic-service",
          "Adding initialization check",
          "Introducing Elasticsearch",
          "Running elastic search with docker",
          "Creating elastic-model module",
          "Elasticsearch Field annotation",
          "Creating elastic-config module",
          "Creating elastic-index-client module",
          "Using Elasticsearch repositories for indexing",
          "ElasticsearchOperations vs ElasticsearchRepository",
          "Integrating elastic modules with microservice",
          "Containerization of microservice with docker image: Run all with docker compose"
        ],
        "Elastic query microservice:Rest API, versioning, Hateoas,Open Api, Elastic query": [
          "Introduction to Elastic Query Api",
          "Elasticsearch query types",
          "Creating elastic-query-client module",
          "Using spring data elasticsearch repository for querying",
          "Elasticsearch client",
          "Elastic query microservice: The query component in CQRS & Event sourcing",
          "Creating web controller",
          "Creating business layer to return elastic data in controller",
          "Creating validation and controller advice",
          "Introduction to Hateoas (Hypermedia as the Engine of Application State)",
          "Adding Hateoas capability to Rest API with Spring Hateoas",
          "Introduction to Api versioning of Rest API",
          "Api versioning",
          "Implementing Api versioning for elastic query service Rest API",
          "Enabling Open Api v3 for documentation of RESTful API with Swagger v3",
          "Containerization of microservice by creating the docker image"
        ],
        "Query web client microservice: Using REST Api, Webclient, Thymeleaf, Bootstrap": [
          "Introduction to Web clients",
          "Starting to implement elastic-query-web-client",
          "Creating Thymeleaf templates with Bootstrap",
          "Creating Rest API controller",
          "Controller with thymeleaf",
          "Creating configurations for web client and security",
          "Creating Webclient implementation",
          "Adding client side load balancer with Spring Cloud Load Balancer",
          "Client Side Load Balancer",
          "Containerization of microservice by creating the docker image"
        ],
        "Reactive version of elastic query service and web client: Using Reactive Spring": [
          "Creating common service and web client modules to re-use them with DRY principle",
          "Creating reactive elastic query service: Reactive Spring and Flux reactive type",
          "Reactive Rest API controller method",
          "Creating reactive elastic web client: Reactive Spring, WebFlux and WebClient"
        ],
        "Securing the services: Spring security OAuth2, OpenID connect, Keycloak and JWT": [
          "Introduction to Oauth and Keycloak authorization server",
          "Oauth 2.0 protocol flows",
          "Run and configure Keycloak authorization server with OIDC for authentication",
          "Understanding Spring security with Spring Security OAuth 2.0 resource server",
          "Configuring query service with Spring security Oauth 2.0, OpenId Connect and JWT",
          "Adding user permissions with Spring security by reading from database",
          "Configuring web client security with Spring boot security Oauth2, OIDC and JWT",
          "Implementing SSO with Keycloak"
        ],
        "Kafka streams with a new microservice: How to use Kafka streams state store": [
          "Introduction to Kafka streams",
          "Kafka streams microservice base project",
          "Completing the Kafka streams microservice",
          "Kafka streams",
          "Creating an endpoint for Kafka state store",
          "Calling the Kafka State Store from Query Service"
        ]
      },
      "requirements": [
        "Knowledge of Java",
        "Basic knowledge of Spring Framework",
        "Back-end development experience"
      ],
      "description": "Hi there! My name is Ali Gelenler. I'm here to help you learn event-driven microservices architecture by applying best practices for real-life challenges.\nImportant Update: This course uses Twitter api as the source data. Twitter is planning to change the twitter developer account to a paid subscription. However this will not effect the course because I have already added a Mock Tweet implementation so that you will not need to create a Twitter developer account if it is turned into a paid service.\nIn this course, you will focus on the development of microservices. With the help of microservices you can independently develop and deploy your application components . You can also easily scale services according to each service's own resource needs, for example you can scale better and create more instances of a service that requires more requests.\nYou can always use the latest versions for spring boot, spring cloud and other dependencies in this course. Please just follow the last section's lectures to see the required code and configuration changes for updated versions. Also if you would like to use subtitles during the course, you can turn on the captions on videos as all lectures are updated with hand-written subtitles. I suggest using subtitles to make it easier to follow the lectures.\nWhen moving from a monolith application to microservices architecture, some challenges will arise as a result of having a distributed application and system. In this course you will learn how to deal with these challenges using event-driven architecture (EDA) architecture with Apache Kafka.\nWith an event-driven architecture;\nYou will truly decouple the services and create resilient services because a service has no direct communication with other services\nYou will use asynchronous/non-blocking communication between services\nYou will use an event/state store (Kafka), and remove the state from the services for better scalability\n\n\nTanima: \"This is one of the best course i ever had in udemy, instructor is super responsive and always deals with complex problem during the course, Thank you so much Professor i will always be grateful to you for this course, and will keep eye on your next course release.\"\nYou will develop a microservice architecture from scratch using the most recent software platforms, technologies, libraries and tools, following best practices, applying microservices patterns and using Java, Spring boot, Spring cloud, Spring Security, Kafka and Elasticsearch. We will also cover Event sourcing and Event-driven services using Kafka as the event store.\nThe microservices patterns that you will be implementing are:\nExternalized configuration with Spring Cloud Config\nCQRS with Kafka and Elastic search\nApi versioning for versioning of Rest APIs\nService Registration and Discovery with Spring Cloud and Netflix Eureka\nApi Gateway with Spring Cloud Gateway\nCircuit breaker with Spring Cloud Gateway and Resilience4j\nRate limiting with Spring Cloud Gateway and Redis to use Redis as the Rate limiter\nDistributed tracing with SLF4J MDC, Spring Cloud Sleuth and Zipkin\nLog aggregation with ELK stack (Elasticsearch, Logstash and Kibana)\nClient side load balancing with Spring Cloud Load Balancer\nDatabase per Service\nMessaging between microservices using Kafka\nYou will also implement Spring Security Oauth 2.0 and OpenID connect protocols for Authentication and Authorization using Keycloak and JWT. The use of Oauth for authorization of services and OpenID connect for authentication is widely used in microservices archictecture with Spring boot security.\nOliver Michels: \"Amazing course that covers a lot of ground, i.e. Spring Boot, Kafka, Elastic, OAuth/Keycloak, etc. and shows how all those pieces fit together in a nice microservice architecture.\"\nAnother important topic that you will focus on is the monitoring of microservices. You will use Spring boot actuator and Prometheus with Micrometer which can be used to get metrics such as health, number of running threads, number of requests, response time and memory usage. You will also learn to use Grafana to create a nice dashboard to visualize the metrics that you obtained using Spring boot actuator and Prometheus.\nWhile introducing event-driven microservices, you will understand the basics of Apache Kafka by covering Kafka topics, Kafka partitions, Kafka consumer and producer APIs, Kafka admin client and Avro messaging.\nEmre Demir: \"This is not only a software tutorial. It is an advanced computer engineering course. The examples and descriptions are excellent. Full-stack and Back-end developers must take.\"\nTo communicate between microservices, apart from using Kafka messaging, I will also introduce Kafka Streams and show how to use Kafka Streams to create a temporary state store with the accumulated streaming data. This temporary data source will then be consumed by another microservice.\nTo communicate with the data stores in microservices I will use different Spring Data dependencies, such as Spring Data JPA with PostgreSQL, Spring Data Elasticsearch and Spring Kafka.\nFor the Api documentation, I will use Open Api 3 specification which implements Swagger 3.0. Open Api will create a RESTful interface for an API and help you to easily develop and consume a Rest API.\nYou will also learn how to use Hateoas (Hypermedia as the Engine of Application State) in a Rest Api with Spring Hateoas. Hateoas will provide  links to resources on the server, and update the REST API response with these links to interact with the client dynamically. This will enable developing level 3 Rest APIs.\nSidhartha Mallik: \"This course is to the point - and great one for every level, strongly recommend\"\nThere is also a reactive development section in this course which demonstrates querying elasticsearch reactively with Reactive Spring, WebFlux, WebClient and Reactive Thymeleaf. In this section you will learn how to use Spring Webflux and Spring reactive components to create an asynchronous flow between microservices.\nYou will use Spring boot and Spring cloud along with Docker for developing cloud ready microservices. Docker is a containerization platform and it enables to package applications into containers. These containers can later run in any environment that docker is running. In this course you will create the docker images of the microservices that you have developed. Then use docker compose to run all the containers of microservices together, along with the other dependencies such as Kafka, Elasticsearch, Keycloak, Redis, Prometheus, Grafana and Zipkin . In the end a single 'docker-compose up' command will be enough to run all microservices architecture together with the required dependencies. Having these docker images will enable you to deploy your application to any cloud vendor easily.\nMohammed O. Tillawy: \"amazing course, but prepare yourself, very intense, and tons of info, needs focus and patience.\"\nYou will be following a hands-on approach and be developing a project from scratch in which you will have multiple microservices surrounded with multiple modules to accomplish the specific tasks. So you will need to make your hands dirty in this course where I will be guiding you from start to finish. You will also find multiple choice quizes in each section to check your progress throughout the course.\nAt the end of the course you will not only understand the real life challenges of a distributed application with multiple services and components, but also you will be able to apply solutions to this challenges.\nYou can download the source code in each lecture separately and run them easily using your IDE or docker.\nIdo Charar: \"This course by Ali Gelenler is outstanding. It is not just about Spring Cloud with kafka and elastic. This course gives you much more knowledge around technologies related to Spring Cloud in particular and Cloud Computing in general. Among them are technologies like reactive programming, streaming, linux OS, security, Design Patterns and much much more. All the information is given in succinct but ingestable form, which allows you broaden your skills in shortest possible time. Very appreciate the investment in material, lecturer involvement, constant assistance and help to the students. Will recommend to take this course everyone who want to level up her/his skills.\"\nFor more detailed information on the progress of this course, you can check the introductory video and free lessons, and if you decide to enroll in this course, you are always welcome to ask and discuss the concepts and implementation details on Q/A and messages sections. I will guide you from start to finish to help you successfully complete the course and gain as much knowledge and experience as possible from this course.\nShantanu Srivastava: \"I brought this course specifically for learning Apache Kafka and after going through the Introduction video, I find out that this course will cover literally every single thing you need to know as a spring developer. From API gateways and Service Discovery, to log forwarding and resilience and so much more. Awesome!!\"\nRemember! There is a 30-day full money-back guarantee for this course! So you can safely press the 'Buy this course' button with zero risk and join this learning journey with me.",
      "target_audience": [
        "One that wants to master microservices architecture applying patterns with Spring boot and Spring cloud",
        "One that wants to learn event-driven microservices with Kafka",
        "One that likes to learn with a hands-on approach"
      ]
    },
    {
      "title": "Technical Writing: How to Write Software Documentation",
      "url": "https://www.udemy.com/course/start-your-career-as-user-assistance-developer/",
      "bio": "Learn a proven strategy for writing software docu in GitHub wiki based on the 12 main principles of technical writing!",
      "objectives": [
        "Learn what is required to start working on the software documentation for an app",
        "Learn how to write documentation in GitHub Wiki using Markdown",
        "Try out tools and infrastructure that helps you immediately get started writing your help content",
        "Learn how to prepare, structure and develop information that help users use your software",
        "Learn the basics of structured writing",
        "Understand the importance of metadata and taxonomies to improve for your user assistance assets findability",
        "Learn how to make graphics for your software documentation using Canva"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Introduction to Software Documentation": [
          "What is Technical Writing?",
          "Technical Communications",
          "Technical Writing as a Skill",
          "The Job of the Technical Writer",
          "Common Types of Documentation",
          "Functional Documentation",
          "Example - Functional Documentation",
          "Strategy for Writing Functional Documentation",
          "Exercise: Write Functional Documentation",
          "Task Oriented Documentation",
          "Strategy for Writing Task Oriented Documentation",
          "Exercise: Write Task Oriented Documentation",
          "Documentation Process Flow - Summary"
        ],
        "Writing Software Documentation Using Markdown in GitHub Wiki": [
          "Learn to Write Software Documentation Using Markdown in GitHub Wiki",
          "Technical Writers in the Software Development World",
          "Technical Writing Deliverables in the Software Development World",
          "What is GitHub?",
          "Why GitHub?",
          "Documentation in GitHub",
          "Markup Language",
          "Instructor Examples",
          "Exercises in This Course Section",
          "Create a New Repository in GitHub",
          "Demo: Creating a New Wiki Page and Basic Formatting",
          "Create a Table in GitHub",
          "Uploading Files and Images",
          "Create a Mail Link",
          "Create Table of Contents (TOC) in Wiki",
          "Create a Link to YouTube Video",
          "Demo",
          "Structured Writing in GitHub Wiki Environment",
          "What will you learn?",
          "Why do we Need Structure in Writing?",
          "Organize Content",
          "Consistent UX",
          "Intuitive Experience",
          "Completeness of Documentation",
          "Targeting Content",
          "Projects Coordination",
          "Efficiency",
          "Structured Writing - Definition",
          "Common Information Types",
          "DITA XML Standard",
          "How to Structure in an Unstructured Writing Environment?",
          "Structured Writing in GitHub Wiki",
          "Instructor Examples",
          "Templates - Explained - Task and Concept",
          "Templates - Explained - Reference",
          "Demo",
          "Ideas for Organizing Your Own Portfolio",
          "Example work from students: Melody",
          "Example work from students: Alice",
          "Example work from students: Marina",
          "Example work from students: Emily",
          "Example work from students: Marta"
        ],
        "Graphics in Software Documentation (New)": [
          "Before We Start...",
          "Graphics in Software Documentation",
          "When to Use Graphics?",
          "Types of Graphics in Software Documentation",
          "Tools for Creating Graphics",
          "Microsoft PowerPoint",
          "diagrams.net",
          "canva.com"
        ],
        "Information Architecture Basics (New)": [
          "Information Architecture for Technical Writers",
          "What Will You Learn in This Section?",
          "What is Information Architecture?",
          "User Experience (UX) and Information Architecture in Technical Writing",
          "User Research and Analysis",
          "Knowing the User",
          "Deliverables and Delivery Channels",
          "Research",
          "Delivery",
          "Content Modeling",
          "Using the Data",
          "Using Cards Sorting in User Research",
          "What is Card Sorting?",
          "Benefits of the Card Sorting Technique",
          "Open Card Sorting",
          "How to Set it Up?",
          "Demo: Open Card Sorting Using Mural",
          "Instructor's Second Example",
          "Closed Cards Sorting",
          "How to Set it up? Demo in Mural",
          "Instructor's Example",
          "Mural as a Tool for Cards Sorting"
        ],
        "Quality in Software Documentation": [
          "Defining the Meaning of Quality in Documentation",
          "What Will You Learn?",
          "A Definition of \"Quality\"",
          "What is \"Quality\" in Software Documentation?",
          "The Research",
          "The Results",
          "What Did People Answer?",
          "The Framework - Overview",
          "Helpful",
          "Comprehensive",
          "Searchable",
          "Visual",
          "Usable",
          "Reliable",
          "Grammatically Correct",
          "Translatable and Localization Friendly",
          "Accessible",
          "Using Appropriate Tone",
          "How to Use the Results from the Research?"
        ],
        "Bonus Lecture: Additional Materials": [
          "How to Use a Style Guide in Technical Writing",
          "What is Style Guide?",
          "Why do we Needs Standards for Writing?",
          "Sample Style Guides",
          "3 Sample Style Guides",
          "Who Else Needs Rules for Writing?",
          "Results from Using a Style Guide",
          "Structure in Writing",
          "Conciseness",
          "Simplicity",
          "Precision",
          "Verb Choice: Can or May?",
          "Verb Choice: Must/Must not/Should/Shouldn't/May",
          "Active Voice and Present Tense",
          "Terminology",
          "Consider in Addition",
          "Use Tools!",
          "UI Messages and Text on Screen",
          "Exercise",
          "Content Management Systems (CMS)",
          "Writing Standards and Guidelines",
          "Webinar Reply: Targeting Content for Users",
          "Webinar Reply: Targeting Content for Users - Part 2",
          "Webinar Replay: Basics of Structured Writing"
        ]
      },
      "requirements": [
        "You will need a PC or a laptop where you can develop content assignments or install particular software we will be using on trial basis in the course of the training"
      ],
      "description": "Is the ability to provide relevant information about using your software essential for your customers? Do you find yourself spending hours and hours trying to explain how to use the software? Or are you getting feedback from your clients that your documentation is hard to follow, inconsistent, or maybe even... confusing?\nIf you answered with \"Yes!\" to any of these questions and are willing to invest the time and energy needed to go through this practical course, then this course is for you!\n\n\nCNBC cited this course in the article \"The 20 hottest job skills companies are looking for right now\"\n\n\nBy the end of this course:\nYou will be able to perform the needed steps and start writing documentation as a technical writer.\nYou will be able to explain the process for preparing, organizing, and delivering software documentation for the users of software products.\nYou will be able to create instructional images and graphics needed in your documentation using Canva.\nYou learn and practice how to create software documentation in a GitHub wiki following the instructor's templates for writing in Markdown.\nYou will know how to perform user research using 2 Cards Sorting techniques in Mural.\nYou will be able to identify the different aspects that make documentation a high-quality deliverable.\nAlso:\nYou will find out also which are the core principles for writing software documentation that really helps.\nYou will have the chance to try out GitHub wiki editor for writing.\nYou will learn about the importance of graphics and which tools you can use to create instructional graphics with ease.\nIn the end, you will find out more about information architecture and its importance in software documentation.\nUltimately, you will have the chance to create your own documentation project even if you have never worked as a technical writer before and have no experience.\n\n\nOver the course of the years, the core activities of technical writing professionals have constantly been evolving.\nWe started as technical writers and focused solely on technical writing. We transformed into information developers who also consider the graphical aspects and design of the content.  Today, we need to bundle together writing skills, design and graphics, video creation, multimedia, metadata, and software development to meet the expectations of our users.\nAll these assets put together can be described together as user assistance.\n\n\nJPDocu School of Technical Writing is a training company passionate about technical writing, software documentation, APIs documentation, information architecture, and DITA XML, and helping our students get started and quickly advance in their Technical Writer career.\nOur Technical Writing courses are taught as a part of the University courses on Technical Communications at several universities in Europe, as well as a part of the onboarding for new technical writers for many of the best software development companies.\nWe shape the next generation of technical writers and information developers, by providing them with simple-to-follow and practical, hands-on experiences with technical writing.\nFor several years now, JPDocu School of Technical Writing has been designing and delivering training for all who want to get started with technical writing. Our students soon get started working as:\ntechnical writers (information developers)\ninformation architects\nsoftware developers\nand get ahead in their career!\nThe instructor, Jordan Stanchev, a User Assistance Development Architect has personally trained hundreds of people in the classroom, in online courses, in universities, and internally at a Fortune 100 company!\nJordan says: \"The goal for me has always been to deliver practical information, to make sure my students get ready for delivering real content right after the course is over!\nI am so proud of my students who come back to me and share how they have started their first job as technical writers or how they have advanced in their careers using what they have learned in my courses!\nThat's why I have started devoting my time to teaching technical writing skills, on top of my regular job as a User Assistance Development Architect.\"\n\n\nUnlike other courses out there,  this course is practically oriented. It will help you develop your portfolio and the work samples you need to apply as a technical writer in a software development company.\n\n\nWhat will you learn?\nThis course is designed for beginner technical writers, usually students in IT, and covers the following subjects:\nWhat is technical writing all about?\nWhat are the basics of technical writing?\nWhich are the common terms you will hear and use in the IT technical writing world?\nHow to write technical documentation using GitHub wiki? You will, later on, use this material for creating your portfolio that you will want to add to your CV when you apply for a technical writer job or promotion to a senior developer.\nWhat is information architecture from a technical writing point of view?\n\n\nBy the end of this course, you will know how to get started writing your user guides, which best practices and rules to consider, and which tools to use for writing.\n\n\nNote that for better accessibility, the course comes with English and Spanish language captions.\n\n\nBesides:\n\n\nYou will also find recorded webinars to give you the feeling you are in the university classroom together with other students doing the actual exercises of the course.\nYou will have access to a closed community group, where you can learn together with other students in technical writing.\nYou will have the chance to participate in live webinars with the instructor, to get guidance and answers to questions you may have.\nDownloadable materials in the sections to help you as you go through the content and practice what you have learned.\n\n\nWhat is NOT COVERED in this course?\nLearning technical writing as a beginner technical writer will take at least 2 semesters at the university and lots of writing practice. It is impossible to provide deep-dive information on all possible technical writing subjects in a 4-6 hours course. You will know the basics, though!\nThis is not a course on writing using MS Word! We are not going to write books! We are not going to write unstructured documentation!\nUnlike what other courses on technical writing will tell you MS Word is the worst choice for writing technical documentation!  It cannot scale, and it is not flexible enough for software documentation! If you believe that technical writing is about writing books, please choose another course! This course is for people who want to work in the software industry, where writing a book and calling it \"software documentation\" is not perceived well!\nTechnical writing is a skill and discipline that requires writing. Do not expect to become a technical writer by listening to a few lectures. You will have to write and communicate in this course. This is not a course for listening, but a listen and do it! type of course.\nThis is not an English language course. We will not provide you with details on how to write in English.\nThere are so many tools you can use for writing. In this course, we do not go into details on tools you can use for writing but directly suggest using only 1-2 of them to get you started.\nWe do not cover API documentation in this course. API documentation is a type of software documentation that you still have to deliver, but at present, this course does not talk about that. Look at our dedicated 'How to Write API Documentation\" course about this subject.\n\n\nHow much time will it take for you to go through this course?\nShort answer:\nSection 1: Getting Started with Technical Writing - 1 hour\nSection 2: Writing Software Documentation in GitHub using Markdown - 2+ hours\nSection 3: Graphics in Software Documentation - 40 min\nSection 4: Information Architecture Basics - 1+ hour\nSection 5: Quality in Software Documentation 40+ min\nBonus Section: Additional Webinars - 3+ hours\n\n\nDetailed answer with explanation:\nSection 1: Getting Started with Technical Writing (as a compliment to you, because you got to this part of our detailed course summary, this 1-hour long section comes for free - it's a mini-course by itself! Even if you decide not to purchase the entire course - you should definitely check it out.)\nWe start with a quick and direct overview of the end-to-end documentation creation processes.\nBasically, when you go through the introduction section, you should get a basic understanding of what technical writing in software documentation is all about, as well as the main assets (deliverables for your customers) that you create using technical writing skills and techniques. This is the software documentation, images as well as instructional videos, and multimedia.\n\n\nIt will take approximately 1-2 hours to go through this content and perform the exercises.\n\n\nSection 2:  Writing Software Documentation in GitHub using Markdown - 2+ hours\nHow to get started writing in a Wiki on GitHub? This section explains the setup steps, and the markup language used in the wiki and gives you hints on Markdown language usage (that is not well-known or documented in the wiki!), such as:\n- how to create a table\n- how to create images on Wiki\n- how to create a Table of Content (TOC) for your longer pages\n- how to link a YouTube video with ease\nThis section touches upon a very important subject - how to provide documentation for a GitHub project. Jordan talks about one of the possible options, and we would dare to say - the most simple one, to provide documentation in GitHub.\n\n\nIt will take approximately 2-4 hours to go through this content and perform the exercises.\n\n\nSection 3: Graphics in Software Documentation - 40 min\nHow important is the graphics creation skill for technical writers? I would say, A LOT! This section talks about the rules for creating graphics in software documentation. Also, I touch upon tools that make it easy to create graphics without having to become a graphic designer. Then we will do a hands-on exercise with Canva to prepare infographics to use in your documentation.\n\n\nIt will take approximately 1-2 hours to go through this content and perform the exercises.\n\n\nSection 4: Information Architecture Basics - 1+ hour\nThen comes the next section - on information architecture and user research for technical writers. It opens the door for you to take a look at the basic knowledge that an information architect (think about it as a very experienced technical writer) needs to have to begin doing his or her job. This section provides you with step-by-step instructions on how to prepare and perform card sorting workshops with end-users using a virtual whiteboard, such as Mural.\n\n\nIt will take approximately 1 hour to go through this content.\n\n\nSection 5: Quality in Software Documentation 40+ min\nIn 2021 we initiated research to define the meeting of quality in the documentation. Many participants joined and shared their feedback. After analyzing and aggregating the results, the research results are ready to be shared with JPDocu School of Technical Writing students!\nThe research recap is shared in this bonus section, giving you answers to:\nWhat is quality when we speak about documentation?\nWhat are the characteristics high-quality documentation has?\nWhat is the specific meaning of each of the quality aspects that you must strive to achieve in documentation?\nHow to develop practical ways to measure quality in your documentation and compare it against other documentation deliverables?\nThis will help you not only to create some documentation but instead, to build high-quality documentation that trills your customers!\n\n\nBonus Section: Additional Webinars - 3+ hours\nHere the really fun part begins. You will find several recordings of live seminars I do with JPDocu School of Technical Writing students. You can listen to these recorded sessions and participate as if you are really in the classroom together with me and the rest of the class. I think this can be a very cool experience. On top of that, we deep dive into subjects that were only briefly touched upon in the previous sections.\nEach recorded session takes 60-90 minutes, including the work on the exercises in each session. As part of the course here, I invite my students to participate in such live webinars, which you can see in our closed Facebook group.\n\n\n\n\nHere is what students say about this course:\n\n\nKarina Delcheva, Technical Writer\n\"I find Jordan's course perfectly structured (as you would expect of a specialist in the field) in a way that helps you grasp the concept of technical writing. It helped me quickly develop practical skills through exercises with easy-to-follow instructions and examples. The Facebook page of this course provided me with a supportive community and additional webinars held by the lecturer, which is a great asset for acquiring more diverse skills needed by a technical writer. Now I feel prepared to apply for my first technical writing job.\"\n\n\nGrace Tan, Technical Writer\n\"In my pursuit of moving to a technical communicator role, Jordan's beginner course Technical Writing: How to Write Software Documentation has put me in the right direction. The course is well-structured, and the instructor has shown expertise in this field. It is great to be in touch with the standard and best practices in technical writing as well as the common tools that are used nowadays. I also had fun working on hands-on activities and getting myself familiar with different tools.\"\n\n\nSo, enroll now and see how easy and simple it is to deliver the ultimate help to your customers!\n\n\nP.S. This course has a 30-day full refund policy - no questions asked!",
      "target_audience": [
        "Software developers who want to gain practical knowledge on how to offer help for the users of software products",
        "Students who work on their software development projects and now struggle to create the documentation delivery for their app",
        "If you pursue career as a technical writer, developer, architect, manager or product owner",
        "Business analysts who want to know the basics of technical writing",
        "Technical Writers and Information Developers"
      ]
    },
    {
      "title": "Learn AWS Identity Management with AWS IAM, SSO & Federation",
      "url": "https://www.udemy.com/course/aws-iam-aws-organizations-aws-sso-aws-directory-service-federation/",
      "bio": "[2025] Learn AWS Identity Access Management [AWS IAM], AWS Organizations, Directory Service, SSO and Federation",
      "objectives": [
        "Discover the fundamentals of AWS Identity and Access Management, including Users, Groups, Role and Policies",
        "Deep-dive into AWS Organizations and Service Control Policies (SCPs)",
        "Learn everything there is to know about Federation with AWS Directory Services, IAM, AWS Single Sign-On and Amazon Cognito",
        "Gain hands-on experience working with Identity Security on AWS with basic to advanced scenarios"
      ],
      "course_content": {
        "Introduction and Getting Started": [
          "Welcome & Introduction",
          "Hands-On Practice: Free Tier vs Sandbox",
          "Course Download (Slides + Code)"
        ],
        "Getting Started - AWS Accounts": [
          "Introduction",
          "AWS Account Overview",
          "[HOL] Create Management AWS Account",
          "[HOL] Configure Account and Create a Budget",
          "[HOL] Install Tools (AWS CLI and VS Code)"
        ],
        "AWS Identity and Access Management (IAM) Fundamentals": [
          "Introduction",
          "How IAM Works",
          "Overview of Users, Groups, Roles and Policies",
          "IAM Authentication Methods",
          "[HOL] Create User, Group, and Configure CLI",
          "AWS Security Token Service (STS)",
          "Multi-Factor Authentication (MFA)",
          "[HOL] Secure the AWS Account"
        ],
        "IAM Access Control": [
          "Introduction",
          "Identity-Based Policies and Resource-Based Policies",
          "Access Control Methods - RBAC & ABAC",
          "Permissions Boundaries",
          "IAM Policy Evaluation",
          "IAM Policy Structure",
          "[HOL] Using Role-Based Access Control (RBAC)",
          "[HOL] Using Attribute-Based Access Control (ABAC)",
          "[HOL] Apply Permissions Boundary",
          "[HOL] AWS Policy Generator",
          "[HOL] IAM Policy Simulator"
        ],
        "AWS Organizations": [
          "Introduction",
          "Overview of AWS Organizations",
          "Overview of AWS Account Setup",
          "[HOL] Create AWS Organization and Add Account",
          "Service Control Policies (SCPs)",
          "[HOL] Apply SCP to Restrict EC2 Instance Types",
          "[HOL] Apply SCP to Prevent S3 Bucket Deletion"
        ],
        "Working with IAM Roles": [
          "Introduction",
          "Use Cases for IAM Roles",
          "[HOL] Cross-Account Access to S3",
          "[HOL] Amazon EC2 Instance Profile"
        ],
        "Directory Services and Federation": [
          "Introduction",
          "AWS Directory Services",
          "[HOL] AWS Managed Microsoft AD - Part 1",
          "[HOL] AWS Managed Microsoft AD - Part 2",
          "Identity Federation",
          "IAM Identity Federation",
          "IAM Identity Center",
          "[HOL] Configure AWS SSO with AWS Managed AD",
          "[HOL] Cleanup the Hands-On Lab",
          "Amazon Cognito"
        ],
        "Additional Training Resources": [
          "Bonus Lesson"
        ]
      },
      "requirements": [
        "This course assumes a fundamental knowledge of IT and cloud computing concepts and builds on that understanding.",
        "The training is designed for students who have a basic understanding of AWS and core AWS services"
      ],
      "description": "This AWS Identity Management with AWS IAM, SSO & Federation course provides a comprehensive overview of identity management in the AWS Cloud, covering the fundamentals from beginner to advanced level. With expert instruction and engaging content, you'll gain in-depth knowledge of IAM Users, Groups, Roles and Policies as well as Federation Services.\n\n\nOur course takes a highly visual and effective approach to teaching cloud computing and AWS concepts, utilizing diagrams and animations rather than bullet-point slides to simplify complex ideas. In addition, we place a strong emphasis on hands-on learning, with a hands-on exercises that use multiple AWS free tier accounts to provide practical experience with complex scenarios.\n\n\nIdentity security can be a complex topic, and if you find it challenging, you're not alone. Our course is designed to help you master these concepts, providing expert instruction and hands-on learning to develop a strong, practical understanding that you can apply to your work in the cloud.\n\n\nThis course is also extremely useful if you are studying for AWS certifications such as the AWS Certified Solutions Architect Associate and AWS Certified Solutions Architect Professional.\n\n\nWatch the intro video to learn how this course will help you gain in-depth knowledge of AWS Identity Management.\n\n\nSNAPSHOT OF THE SKILLS YOU'LL LEARN\n\n\nAWS IAM User, Groups, Roles and Policies\nAWS Security Token Service (STS)\nMulti-Factor Authentication (MFA)\nIdentity-Based Policies and Resource-Based Policies\nAWS Organizations and Service Control Policies (SCPs)\nUse Cases for IAM Roles\nAWS Directory Services, Identity Federation, AWS Single Sign-On, Amazon Cognito\n\n\nCORE TOPICS WE WILL COVER IN THIS AWS IAM TRAINING\n\n\nGetting Started - AWS Accounts\nLearn about AWS Accounts and how to setup your AWS account\n\n\nAWS Identity and Access Management (IAM) Fundamentals\nLearn how AWS IAM works and the various components of IAM:\nHow IAM Works\nOverview of Users, Groups, Roles and Policies\nIAM Authentication Methods\nAWS Security Token Service (STS)\nMulti-Factor Authentication (MFA)\n\n\nIAM Access Control\nLearn how to implement access control using AWS IAM:\nIdentity-Based Policies and Resource-Based Policies\nAccess Control Methods - RBAC & ABAC\nPermissions Boundaries\nIAM Policy Evaluation Logic\nIAM Policy Structure\n\n\nAWS Organizations\nLearn how to use AWS Organizations for centralized management of AWS accounts and applying access controls:\nOverview of AWS Organizations\nHow to setup AWS Organizations\nService Control Policies (SCPs)\n\n\nWorking with IAM Roles\nLearn about the common use cases for using AWS IAM Roles and put your skills into practice:\nUse Cases for IAM Roles\nUsing IAM Roles for Cross-Account Access to S3\nUsing IAM Roles for delegating access to AWS services\n\n\nDirectory Services and Federation\nLearn how to configure Identity Federation using AWS Directory Services, AWS IAM, AWS SSO and Amazon Cognito:\nAWS Directory Services\nIdentity Federation\nIAM Identity Federation\nAWS Single Sign-on (SSO)\nAmazon Cognito\n\n\nWHAT DO OTHER STUDENTS SAY?\nIf you're keen to master Identity Management and Federation in the AWS Cloud, this course is for you! But don't just take our word for it – check out the excellent course reviews from thousands of happy students:\nCheck out the excellent course reviews from our thousands of happy students:\n\"Outstanding training course on IAM. Neal Davis has made me understood in depth how IAM works in AWS.\"\n\"Great course. I highly recommend, specially HOL and the use cases are very helpful to understand all the IAM topics. Thank you Neal!\"\n\"This course is great for understanding IAM and other identity services. Hats off to Neal for explaining it clearly with hand-on lessons.\"\n\n\nMEET YOUR INSTRUCTOR\nHi, I'm Neal Davis, and I'm delighted to be your instructor for this course. As the founder of Digital Cloud Training, I'm deeply committed to providing top-quality AWS certification training resources. I created this course to help you understand AWS IAM and Federation. With over 20 years of hands-on experience in the Cloud space, I'm excited to share my expertise with you on Udemy.\n\n\nOUR SUCCESS IN NUMBERS\nOver 750,000 students enrolled in our AWS courses on Udemy\n4.7-star instructor rating from over 150,000 reviews\nOur students pass the AWS exam with an average score of over 85%\n\n\nMONEY-BACK GUARANTEE\nWe are totally confident in the value of this course which comes with a 30-day unconditional money-back guarantee. Get lifetime access now - risk-free!",
      "target_audience": [
        "IT professionals who want to learn about identity and access management in the AWS cloud",
        "Anyone who wants to develop skills in applying identity security in AWS",
        "Developers who want to understand IAM concepts and best practices",
        "IT Professionals, including AWS Solutions Architects, Developers, SysOps Administrators and Security Specialists who want to expand their knowledge of cloud security best practices",
        "Anyone interested in learning how to manage and secure user access to AWS resources",
        "Students studying for the AWS Certifications at the Associate, Professional or Specialty level (additional training required)"
      ]
    },
    {
      "title": "Introduction to Microservices using .NET Core 3.1",
      "url": "https://www.udemy.com/course/introduction-to-asp-net-core-microservices/",
      "bio": "Learn Microservice architecture on .NET Core using ASP.NET Core, RabbitMQ, MongoDB, Redis, Masstransit and CQRS Pattern",
      "objectives": [
        "Fundamentals of Microservices architecture.",
        "Implement API Gateway using ASP .NET Core Application.",
        "Connect Microservice with NoSQL database MongoDB.",
        "How to Structure Microservice Project using ASP .Net Core Application",
        "Develop microservices with ASP .NET Core Web APIs",
        "Postman tool installation and Basics.",
        "Install RabbitMQ to implement event based communication in microservice architecture.",
        "Install Masstransit to communicate with RabbitMQ Message Broker from Application.",
        "Fundamentals of AMQP (Advanced Message Queuing Protocol) and RabbitMQ.",
        "Communicate between API Gateway and microservices using RabbitMQ with Masstransit.",
        "Create Masstransit Consumers to consume published messages.",
        "Fundamentals of CQRS (Command Query Segregation Principle).",
        "Refactor application as per CQRS Design (Physical layer Separation).",
        "Implement Authentication and Authorization Mechanism using JWT Token.",
        "Basics of Unit Testing.",
        "Unit testing Product Controller with nUnit.",
        "Unit Testing Login method using Masstransit In-Memory test harness.",
        "What is Benchmarking and Apache Bench Installation to micro-benchmark our application.",
        "What is Resiliency in microservices and need of Resilient Microservices.",
        "Basics of Polly (A transient fault handling library).",
        "Implementation of Fallback Policy.",
        "Implementation of Retry Policy.",
        "How to wrap multiple policies as one using Wrap Policy.",
        "What is Jittering and implementation of Wait Retry Policy.",
        "What is Circuit Breaker Pattern.",
        "Implementation of Circuit Breaker Pattern using Circuit Breaker Policy.",
        "Implementation of Advance Circuit Breaker Policy.",
        "What is Bulkhead Isolation.",
        "Implementation of Bulk Isolation Policy.",
        "Basics of Redis and its installation.",
        "Create Cart Service using In-memory database Redis.",
        "Swagger Implementation for Order service to document Order API endpoints.",
        "What is Distributed Transaction in microservices.",
        "Distributed Transaction Techniques. (2-Phase Commit & Saga) - Theory",
        "What is Routing Slip Pattern.",
        "Implementing Routing Slip pattern using Masstransit Courier to handle distributed transaction. (Long lived transactions are not covered).",
        "Monitoring Routing Slip Execution with help of Routing Slip Events.",
        "Implementation of idempotent services using Idempotent consumer pattern."
      ],
      "course_content": {
        "Introduction": [
          "Microservice Introduction.",
          "EShop Application Structure.",
          "Structuring EShop Solution.",
          "Introduction Module Quiz"
        ],
        "Creating First Microservice (Product API).": [
          "Command And Event - Theory",
          "Command Event in EShop App",
          "Introduction to Postman Tool.",
          "Connect EShop Application to MongoDB",
          "Connect Product API with MongoDB - Part 1",
          "Connect Product API with MongoDB - Part 2",
          "Saving Product to MongoDB",
          "Adding Mongo Convention to the application.",
          "Module 2 Quiz"
        ],
        "Implementing API Gateway": [
          "What is API Gateway.",
          "Basics of RabbitMQ and Masstransit.",
          "RabbitMQ Setup and Installation.",
          "Implementing RabbitMQ in EShop application using Masstransit.",
          "Connecting API Gateway with Product Service. Part-1",
          "Connecting API Gateway with Product Service. Part-2",
          "A Quick Note on RabbitMQ Queues.",
          "Module 3 Quiz"
        ],
        "CQRS (Command Query Segregation Principle)": [
          "What is CQRS?",
          "Refactoring Application to implement CQRS.",
          "Creating Queries (Part 1)",
          "Creating Queries (Part 2)",
          "Note: Command and Query - Separation of Concern",
          "Module 4 Quiz"
        ],
        "Creating Second Microservice (User API)": [
          "Building User Service",
          "Connecting API Gateway to User Service",
          "Saving User Credentials Encrypted",
          "Refactoring User Service",
          "User Login Functionality"
        ],
        "Authorizing API Endpoints with JWT Access Tokens.": [
          "Installing JWT Libraries from Nuget",
          "Implementing JWT Token",
          "Authorize Product API with JWT"
        ],
        "Unit Testing": [
          "Unit Testing Introduction",
          "Installing Nuget packages for NUnit",
          "Unit Testing AddProduct method",
          "Unit testing GetProduct method",
          "Refactoring Test cases and introducing Breaking Changes",
          "Unit Testing Masstransit Consumer (LoginUserhandler) with InMemoryTestHarness",
          "Module 7 Quiz."
        ],
        "Benchmarking": [
          "What is Benchmarking and Apache Bench",
          "Apache Bench Installation",
          "Benchmarking Workflow",
          "Apache Bench Commands",
          "Benchmarking GetProduct API",
          "Module 8 Quiz"
        ],
        "Fault Tolerant Microservices using Polly.": [
          "What is Resiliency in microservice.",
          "Implement Fallback Policy",
          "Implement Retry Policy",
          "Implement Circuit Breaker Pattern with Circuit Breaker Policy",
          "Implement Advance Circuit Breaking based on traffic request percentage.",
          "Implement Bulkhead Isolation Policy.",
          "Module 9 Quiz."
        ],
        "Creating Third Microservice (Cart API)": [
          "Redis DB Installation.",
          "Implementing Cart Service",
          "Connecting Cart API with Redis",
          "Validating Cart API with Redis and Postman"
        ]
      },
      "requirements": [
        "Good understanding of C#.",
        "Basic understanding of HTTP.",
        "Basic understanding of ASP .Net Core."
      ],
      "description": "Learn the basics of microservices and what problem it solves.\nLearn the basics of the components of the microservices (API Gateway, Message Brokers, Services, Database).\nImplement a microservice architecture with event-driven communication using ASP.NET Core, RabbitMQ, Masstranit, and MongoDB.\nLearn microservice by following step-by-step coding tutorials and implementations of key concepts.\nLearn Masstransit and its features to work with message brokers like RabbitMQ, ActiveMQ, or Azure Service Bus.\nConnect Microservice with MongoDB and use Robo3T for viewing MongoDB data.\nLearn Postman tool installation and its basics.\nLearn fundamentals of AMQP (Advanced Message Queuing Protocol) and RabbitMQ and its exchanges.\nLearn API Gateways and how to communicate between API Gateway and microservices over RabbitMQ Message Broker.\nLearn fundamentals of CQRS (Command Query Segregation Principle).\nImplement Authentication and  Authorization in microservices using JSON Web Tokens.\nLearn the necessary tools required in the microservice ecosystem.\nWhat is Benchmarking and Apache Bench Installation to micro-benchmark our application?\nLearn how to unit test APIs and Masstransit Events Consumers using NUnit.\nLearn to write resilient microservices using Polly (a fault-tolerant library ) by implementing Policies.\nLearn to integrate Swagger Documentation with microservice for API endpoint documentation and testing.\nLearn to integrate Redis (In Memory database) with Microservice and perform CRUD operation.\nLearn what are distributed transactions and how to implement distributed transactions in microservices.\nWhat is Routing Slip Pattern?\nImplementing Routing Slip pattern using Masstransit Courier to handle the distributed transaction.\nWhat is Idempotency in microservices and why is it necessary?\nImplementation of idempotent microservice using Idempotent Consumer Pattern.",
      "target_audience": [
        "ASP .Net Developer who want to learn microservices architecture using .Net Core."
      ]
    },
    {
      "title": "GitHub Ultimate: Master Git and GitHub - Beginner to Expert",
      "url": "https://www.udemy.com/course/github-ultimate/",
      "bio": "Go from complete novice to expert in Git and GitHub using step-by-step, no-assumptions learning",
      "objectives": [
        "Learn the key concepts of the Git source control system",
        "Step through the entire Git workflow",
        "Compare the different states in Git",
        "Manage files inside and outside the control of Git and GitHub",
        "Create and manage repositories on GitHub",
        "Create branches and resolve conflicts with confidence",
        "Save work in progress with Stashes",
        "Mark special events with Tags and Releases",
        "Even a bit of time travel within Git repositories and on GitHub",
        "Perform many of the same local Git operations directly on GitHub",
        "Join other GitHub projects by Forking and contribute back using Pull Requests",
        "Review and Accept Pull Requests from Others",
        "Share code with Gists",
        "Manage project defects or enhancement requests with GitHub Issues",
        "Group related repositories together with GitHub Organizations"
      ],
      "course_content": {
        "Introduction": [
          "Course Welcome",
          "Audience and Approach",
          "Using The Command Line"
        ],
        "Core Concepts": [
          "Core Concepts Overview",
          "What is Git",
          "The Repository",
          "Commits and Files",
          "What is GitHub"
        ],
        "Quick Installations": [
          "Quick Installation Overview",
          "Quick Install on Windows",
          "Quick Installation on Windows Notes",
          "Quick Install on Mac OS X",
          "Quick Install on Mac OS X Notes"
        ],
        "The Basics": [
          "The Basics Overview",
          "Initialization",
          "Git States",
          "First Commit",
          "Repository and the Git Folder",
          "Starting with Existing Project",
          "Commits and Messages",
          "Commit Details with Log and Show",
          "Express Commits",
          "Backing Out Changes",
          "History and Making New Commands with Alias",
          "Rename and Delete Files",
          "Managing Files Outside of Git",
          "Excluding Unwanted Files"
        ],
        "Advanced: Beyond the Basics": [
          "Advanced Overview",
          "Comparing Differences",
          "Branching and Merge Types",
          "Special Markers",
          "Simple Branching Example",
          "Conflict Resolution",
          "Marking Special Events with Tagging",
          "Saving Work in Progress with Stashing",
          "Time Travel with Reset and Reflog"
        ],
        "Welcome to GitHub": [
          "Welcome to GitHub Overview",
          "Signup for GitHub",
          "GitHub Profile",
          "GitHub Settings",
          "Creating a GitHub Repository",
          "Linking to our GitHub Repository",
          "Pushing Changes to GitHub",
          "Verifying our Changes on GitHub",
          "Update! GitHub Default Branch Change"
        ],
        "SSH Authentication": [
          "Authentication Overview",
          "SSH vs HTTPS",
          "Generating an SSH Key",
          "Verify SSH Authentication with GitHub"
        ],
        "GitHub Repository": [
          "GitHub Repository Overview",
          "Starting Remote with a Starter Repository",
          "Create a Local Copy with Clone",
          "Seeding the Repository with Sample Content",
          "Publish Back to GitHub",
          "Fetch and Pull",
          "Repository Features and Settings",
          "Updating Repository and Remote References",
          "Looking at Files and Folders on GitHub",
          "Directly Editing Files on GitHub",
          "Creating a New Files on GitHub",
          "Creating a New File on Master",
          "Renaming and Deleting Files on GitHub",
          "Synchronizing our Changes with our Local Repository",
          "Reviewing Commits with the Commit List",
          "Commit Details: Going Deeper",
          "GitHub Time Travel: Reviwing Your Repository as of a Particular Commit",
          "Using Commit IDs with the Local Repository"
        ],
        "GitHub Repository Branches": [
          "Repository Branches Overview",
          "Creating Branches on GitHub",
          "Local Branches",
          "Comparing and Pull Requests",
          "Merging Locally",
          "Locally Switch to a Branch on GitHub",
          "Cleaning Up By Deleting Branches and References",
          "Pull with Rebase",
          "GitHub Graphs",
          "Setting the Default Branch",
          "Dealing with a Conflict while Pulling"
        ],
        "GitHub Tags and Releases": [
          "Tags and Releases Overview",
          "Local Tags (a bit of Review)",
          "Pushing Local Tags to GitHub",
          "Tags on GitHub",
          "Deleting Tags on GitHub",
          "Updating Tags: Creating a Floating Tag",
          "Starting a Release on GitHub",
          "Deleting a Release",
          "Creating a Completely New Release"
        ]
      },
      "requirements": [
        "Basic computer skills",
        "Ability to install software on your computer",
        "Admin rights may be required for software installation"
      ],
      "description": "This course will comprehensively cover the GitHub hosting service as a companion to the Git source control tool, which means no prior knowledge or experience is required. Students will emerge at the end with a very solid understanding and hands-on experience with Git and GitHub.\n\nCourse Organization\nThe course is divided into four major components:\nIntroduction and Setup\nLearning Git Source Control\nAll About GitHub\nBonuses\nEach one of the above components spans multiple sections in this course.\nNew! Video explaining how to resolve Git breaking when upgrading macOS each year\nIntroduction\nThe Introduction provides a welcome to the course including some useful tips for getting the most out of taking the course and how the course is designed. That is followed by the Core Concepts which go over some critical theory before diving straight into Git.\nAfter the introduction and core concepts, the first thing we do is a Quick Installation for both Windows and Mac. The Bonus section has a more comprehensive, step-by-step process for those that prefer it.\nLearning Git Source Control\nIn The Basics, we walk through all the foundational commands needed to start a new project managed by Git (or enable Git for an existing project) all the way through making commits, including common file operations like moving and deleting files. We also cover how to exclude the wrong files from accidentally being committed and how to review your repository's history.\nWith a strong foundation in place, we explore some more Advanced Git topics like comparing differences, branching and merge resolution, tagging special events, saving work in progress, and even a bit of time travel.\nAll About GitHub\nThe main part of this course is all about GitHub. We will explore GitHub indepth from a source control hosting repository perspective.\nIn Welcome to GitHub we start off exploring some of the basic features of GitHub by creating a fresh repository and associate our local repository with it. Then, we prepare for the remainder of the course by setting up SSH Authentication, which we will use from this point forward. After that, we continue looking at the GitHub Repository, including many of the same operations we performed locally, but done directly within GitHub. Then in GitHub Repository Branches we dive into how Branches on GitHub and our local system work with each other.\nAfter we have comprehensively covered how GitHub repositories work, we focus on how GitHub Tags and Releases work and their relationship with local tags in Git. We can then use tags/releases while Comparing Differences on GitHub.\nWe start tying things together in Social Coding where we join other projects on GitHub by forking and then submitting our contributions back using pull requests.\nOnce part of a team, you might use GitHub Issues to track defects or enhancement requests.\nSometimes you just need to share small parts of a file or a set of files, but don't want to bother with a full Git repository. That where GitHub Gists help out -- share just a snip of code or entire files.\nFinally, group related GitHub repositories with GitHub Organizations and manage permissions and access using teams.\nBonuses\nThe bonuses sections and lectures provide additional information, more comprehensive instructions, or non-critical lectures.\nCourse Features\nAll tools have installation and configuration sections to ensure no one is left behind.\nPresentations provide audio/video training of conceptual ideas. Since few like slide-ware presentations, slide-presentations are kept to a minimum.\nScreencasts provide a video of the instructor's computer system with any actions, commands, or screens displayed and narrated. There is nearly 5 hours of screencast based video training in order to step through each command or action in sufficient detail.\nAll videos are available in high quality 1080p / Full HD resolution for sharp and clear viewing on modern desktops and tablets.\nSeveral attachments and document lectures throughout the course provide supplemental information, illustrations, or other reference material.\nMoving Forward\nThis course will expand periodically to include more topics, supporting materials and bonus content! Some content may be in direct response to student feedback or discussions -- so get engaged with the course discussions feature!",
      "target_audience": [
        "Anyone interested in using source control and specifically Git and GitHub",
        "Software engineers, developers, programmers new to Git or GitHub",
        "IT Managers or technical leads considering Git or GitHub for version control on their team",
        "Freelancers or other creative professionals"
      ]
    },
    {
      "title": "Kubernetes Masterclass For Beginners [Hands-On]",
      "url": "https://www.udemy.com/course/kubernetes-cloud-native/",
      "bio": "Pod, ReplicaSet, Deployment, StatefulSet, Service, Ingress, ConfigMap and Google Kubernetes Engine GKE.",
      "objectives": [
        "Master Kubernetes for Production: Gain a deep understanding of Kubernetes and apply it to real-world scenarios.",
        "Design and Deploy Scalable Applications: Learn how to design and deploy highly scalable and resilient applications.",
        "Implement Automated Workflows: Automate deployments and rollbacks for streamlined processes.",
        "Ensure High Availability: Implement strategies for application high availability and robust monitoring.",
        "Leverage Cloud Platforms: Deploy and manage Kubernetes clusters on cloud platforms like Google Cloud Platform (GCP).",
        "Boost Your Career: Become a valuable asset in the booming field of container orchestration.",
        "Stay Ahead of the Curve: Keep up with the latest trends in containerization.",
        "Command a Higher Salary: Increase your earning potential in the high-demand Kubernetes job market.",
        "In-Depth Kubernetes Architecture: Understand the core components and their roles.",
        "Hands-On Cluster Creation: Learn to create Kubernetes clusters using tools like kind.",
        "Comprehensive Pod Management: Explore deploying workloads, accessing logs, containers, APIs, and debugging techniques.",
        "Deployment Strategies: Master managing application revisions, rollbacks, and different deployment strategies.",
        "Service Discovery and Load Balancing: Understand different service types and their uses.",
        "Resource Management: Learn to logically separate workloads and resources using namespaces.",
        "Health Monitoring: Implement strategies for application health checks and monitoring.",
        "Configuration Management: Discover secure ways to manage configurations and secrets.",
        "Stateful Applications: Utilize persistent storage for stateful applications and explore running MongoDB in Kubernetes.",
        "Dynamic Scaling: Scale applications based on metrics using Horizontal Pod Autoscaler.",
        "Efficient Traffic Management: Create routing rules for efficient traffic management."
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "What is Kubernetes?",
          "*** Humble Request & Resources ***"
        ],
        "Kubernetes Cluster": [
          "Introduction",
          "Kubernetes Architecture - Master",
          "Kubernetes Architecture - Nodes",
          "Tools Install",
          "Kind Cluster - Part 1",
          "Kind Cluster - Part 2",
          "Kube Config",
          "Exploring Kind Cluster",
          "Summary"
        ],
        "Pod": [
          "Introduction",
          "Simple Pod Creation",
          "Creation & Deletion",
          "Describing Pod",
          "[Quick-Note] - apply Command",
          "Image Pull Backoff",
          "Crash Loop Backoff",
          "Pod Status",
          "Pod Labels - Part 1",
          "Pod Labels - Part 2",
          "Formatting Output",
          "Deleting A Pod",
          "Port Forward",
          "Restart Policy",
          "Docker - ENTRYPOINT vs CMD",
          "Pod Args - Exec Form",
          "Pod Container Logs",
          "Pod Args - Shell Form",
          "Termination Grace Period",
          "Pod Command",
          "Environment Variables",
          "Exploring Pod Container",
          "[Quick-note] - Can I Use Variables?",
          "Multi Container Pod - Part 1",
          "Multi Container Pod - Part 2",
          "Multi Container Pod - Part 3",
          "Multi Container Pod - Real Life Use Case",
          "[Quick-Note] - What about Volume Mapping?",
          "**** ASSIGNMENT ****",
          "Assignment Solution",
          "Summary"
        ],
        "ReplicaSet": [
          "Introduction",
          "How ReplicaSet Works",
          "Creating ReplicaSet",
          "ReplicaSet Demo",
          "ReplicaSet Labels",
          "ReplicaSet With Existing Pod",
          "Multiple ReplicaSet",
          "Describing ReplicaSet",
          "Match Expressions",
          "Summary"
        ],
        "Deployment": [
          "Introduction",
          "Deployment - Demo",
          "Create vs Apply",
          "Log & Port Forward",
          "Deployment Revisions",
          "Rollout History",
          "Rollback",
          "Checking Rollout Changes",
          "Min Ready Seconds",
          "Deployment Strategy",
          "Recreate Strategy",
          "Rolling Update - maxSurge",
          "Rolling Update - maxUnavailable",
          "**** ASSIGNMENT ****",
          "Assignment Solution",
          "Summary"
        ],
        "Service": [
          "Introduction",
          "Demo",
          "Kube Proxy",
          "LoadBalancing - Demo - Part 1",
          "LoadBalancing - Demo - Part 2",
          "Redis Assignment With Service",
          "Service Types",
          "[Quick-Note] - Ingress",
          "Kind Cluster With Extra Port Mapping",
          "Nodeport - Demo",
          "Script",
          "Rolling Update With Service",
          "Summary"
        ],
        "Namespace": [
          "Introduction",
          "Demo",
          "Kube System Namespace",
          "[Optional] - Cluster Components Revisit",
          "Namespace Deploy Demo",
          "Namespace via Metadata",
          "Summary"
        ],
        "Probes": [
          "Introduction",
          "Probe Types - Part 1",
          "Probe Types - Part 2",
          "Startup Probe - httpGet",
          "Startup Probe - tcpSocket",
          "Startup Probe - exec",
          "Quick Review",
          "Liveness Probe",
          "Readiness Probe",
          "Readiness Probe With Service",
          "Summary"
        ],
        "ConfigMap & Secret": [
          "Introduction",
          "ConfigMap - Demo",
          "ConfigMap - Injecting Environment Variables - Part 1",
          "ConfigMap - Injecting Environment Variables - Part 2",
          "ConfigMap - Injecting File - Part 1",
          "ConfigMap - Injecting File - Part 2",
          "[Quick Note] - etcd",
          "Secret",
          "Secret - Injecting Environment Variables - Part 1",
          "Secret - Injecting Environment Variables - Part 2",
          "Secret - Injecting File",
          "**** ASSIGNMENT RESOURCE ****",
          "**** ASSIGNMENT ****",
          "Assignment Solution - Part 1",
          "Assignment Solution - Part 2",
          "Assignment Solution - Part 3",
          "[Quick Note] - Express Restart",
          "Summary"
        ],
        "Persistent Volume & StatefulSet": [
          "Introduction",
          "Storage Class",
          "Access Modes",
          "Persistent Volume Claim - Part 1",
          "Persistent Volume Claim - Part 2",
          "Persistent Volume - Delete",
          "Deployment With Persistent Volume Claim - Part 1",
          "Deployment With Persistent Volume Claim - Part 2",
          "StatefulSet",
          "StatefulSet - Demo",
          "StatefulSet With Service",
          "Headless Service",
          "Dynamic Persistent Volume Claim - Part 1",
          "Dynamic Persistent Volume Claim - Part 2",
          "Mongo as StatefulSet - Part 1",
          "Mongo as StatefulSet - Part 2",
          "Summary"
        ]
      },
      "requirements": [
        "Docker",
        "A lot of interest to learn a complex subject",
        "Comfortable with Indian Accent"
      ],
      "description": "*** Cloud Native Application Development Series ***\nThis comprehensive course is designed for senior and staff-level engineers who want to elevate their Kubernetes expertise and confidently apply it to real-world production scenarios. Through a combination of in-depth lectures and hands-on exercises, you'll gain a masterful understanding of core Kubernetes concepts and develop the practical skills needed to:\nDesign and deploy highly scalable and resilient applications.\nOptimize resource utilization and manage production clusters efficiently.\nImplement automated deployments and rollbacks for streamlined workflows.\nEnsure application high availability and robust monitoring.\nLeverage cloud platforms like Google Cloud Platform for seamless Kubernetes deployment and management.\nBoost Your Career in the Booming Field of Container Orchestration:\nMastering Kubernetes is a significant asset in today's IT landscape. This course empowers you to:\nBecome a valuable asset to your team and organization.\nStay ahead of the curve in the rapidly evolving field of containerization.\nCommand a higher salary in the high-demand Kubernetes job market.\nCourse Curriculum:\nKubernetes Architecture: Deep dive into the core components and their roles (api-server, etcd, controller, scheduler).\nHands-on Cluster Creation: Learn to create Kubernetes clusters using tools like kind.\nPod Management: Explore deploying workloads, accessing logs, containers, APIs, and debugging techniques.\nDeployment Strategies: Master managing application revisions, rollbacks, and implementing different deployment strategies.\nService Discovery and Load Balancing: Understand different service types (ClusterIP, NodePort, LoadBalancer).\nResource Management with Namespaces: Learn to logically separate workloads and resources.\nHealth Monitoring and Liveness/Readiness Probes: Implement strategies for application health checks and monitoring.\nConfiguration Management with ConfigMaps and Secrets: Discover secure ways to manage configurations and secrets.\nStateful Applications with Persistent Volumes and StatefulSets: Utilize persistent storage for stateful applications and explore running MongoDB in Kubernetes.\nDynamic Scaling with Horizontal Pod Autoscaler: Scale applications based on CPU and memory metrics.\nEfficient Traffic Management with Ingress: Create routing rules for efficient traffic management.\nKubernetes on Cloud Platform (Google Kubernetes Engine / GKE): Explore deploying and managing clusters on a cloud platform.\nEnroll Now and Master Kubernetes for Production!\nTake the next step in your Kubernetes journey and unlock its power to build, deploy, and manage your applications with confidence. This course provides the hands-on experience and in-depth knowledge you need to become a Kubernetes powerhouse in your production environment.",
      "target_audience": [
        "Any senior / staff level engineer"
      ]
    },
    {
      "title": "DevSecOps: How to secure Web App with AWS WAF and CloudWatch",
      "url": "https://www.udemy.com/course/how-to-secure-web-application/",
      "bio": "Web application cyber security practical guidance. AWS DevSecOps WAF masterclass. AWS DevOps security tips and tricks.",
      "objectives": [
        "How to secure Web application at AWS",
        "How Web Application firewall works",
        "How to configure AWS WAF poperly",
        "How to configure WAF alarms",
        "How to use Athena to analyse WAF and Application logs",
        "How custom exceptions and custom logging can become a security defense tool",
        "How to use CloudWatch for working with Application Logs",
        "How to build custom CloudWatch filters and alerts upon it",
        "How to provide cyber threat analysis using Athena and Excel after a hacker's attack"
      ],
      "course_content": {
        "Introduction": [
          "Promo introduction video",
          "About me and cyber security experience",
          "Coarse road map"
        ],
        "Flask test API application": [
          "Flask app - local environment",
          "Flask app - code overview, how application works",
          "Flask app - custom exceptions",
          "Flask app - logging"
        ],
        "Application deployment at AWS using Terraform": [
          "Terraform installation with tfenv",
          "AWS profile and terrafrom configuration",
          "BucketAlreadyExists: The requested bucket name is not available.",
          "Running terraform scripts - essential introduction",
          "Applying terraform - Part 1: pre init and network terrafrom modules",
          "Applying terraform - Part 2: AWS ALB and AWS Certificate Manage",
          "Build docker image and push it to the AWS ECR",
          "Applying terraform - Part 3: flask application at EC2 using auto scaling group",
          "Applying terraform - Part 4: add EC2 to AWS ALB as target group",
          "REMEMBER TO DESTROY ENV IN THE END - BELOW IS THE ARTICLE HOW TO DO IT PROPERLY"
        ],
        "AWS WAF - deep inside": [
          "What is WAF and how it works",
          "AWS WAF managed rules as first step",
          "AWS WAF managed rules and count mode",
          "AWS WAF logs and test data set",
          "Initial Athena-WAF configuration",
          "Athena - running first query, WAF logs structure, Athena pricing",
          "How to analyse WAF log’s data with Athena queries - part 1",
          "How to analyse WAF log’s data with Athena queries - part 2",
          "AWS WAF managed rules configuration methodology and rules versions",
          "AWS WAF managed rules in action",
          "AWS WAF - custom white and black lists - part 1",
          "AWS WAF - custom white and black lists - part 2",
          "AWS WAF and custom regex pattern set",
          "AWS WAF rate rules introduction",
          "How to calculate rate thresholds for application using Athena and ALB logs",
          "AWS WAF rate rules in practice - part 1",
          "AWS WAF rate rules in practice - part 2",
          "AWS WAF metrics and alarms",
          "AWS WAF priority",
          "Why AWS WAF is not a silver bullet"
        ],
        "Application and CloudWatch as security monitoring tool": [
          "How to use CloudWatch logs",
          "Understanding Application logs with CloudWatch Logs Insights and Dashboards",
          "Custom CloudWatch metrics and alerts as sensitive detector of abnormal behavior"
        ],
        "Cyber threat analysis using Atena and Excel": [
          "Cyber threat analysis workflow - part 1",
          "Cyber threat analysis workflow - part 2",
          "Analyse data at Excel - part 1",
          "Analyse data at Excel - part 2"
        ],
        "Security defense framework": [
          "Security defense framework",
          "Cyber Security Questionnaire"
        ],
        "Additional Info": [
          "How to debug possible Flask app problems"
        ],
        "Bonus Section": [
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "Active AWS account, some active web domain, basic knowledge at using docker and web programming"
      ],
      "description": "What you'll learn:\nHow exceptions and logging should be organized at web application to become a security defensive tool\nHow to secure Web application at AWS Cloud\nHow to configure AWS WAF\nHow to use AWS WAF managed rules\nHow to use AWS WAF custom black and white list\nHow to use AWS WAF custom rate rules\nHow to configure WAF alarms\nHow to use CloudWatch as detector of abnormal hacker's behavior\nHow to build custom CloudWatch filters and alerts upon it\nHow to use Athena to analyse WAF and application logs\nCyber thread analysis basics using Athena and Excel\nRequirements:\nActive AWS account\nSome active web domain\nBasic knowledge at using docker and web programming\nShort description:\nCurrent course is about how to secure Web Application against hacker's attacks with AWS cloud solutions using application level, centralized log system and firewall protection. You will also learn a lot about how to provide effective cyber thread analysis during hacker's attack and after it.\n\n\nCOURSE STRUCTURE:\nThe course starts from creating a very small API application. For that purpose I will use the Python programming language and Flask framework.  If you are not aware of current technologies, don't worry, you should not. Believe me, the application would be extremely simple, so anyone, even a child, can understand how it works.\nWhile creating according application I will concentrate at next essential aspects:\nCustom exceptions\nLogging\nI will explain why it is so essential to have those both things at any application and how to make it properly in order it would be helpful from a security defense perspective.\n\n\nThe principles which I will show you are extremely simple and can be easily propagated at any existing web application. You will see the real power of properly done exceptions and logging at your own eyes when we will make real hacker’s attacks simulations at our application after deploying it at AWS cloud\n\n\nGenerally speaking, deploying - it is 2nd essential part of our learning. Together we will deploy our test API application at AWS using Terraform. And again, if you have never used current technology, don’t worry. I will show you step by step, how to run according terraform scripts.\n\n\nAt 1st we will prepare the AWS network, after that we will deploy AWS ALB with WAF, and finally, at the last step, we will deploy our application at EC2 using an auto scaling group. Current pattern of deployment can be easily used by you at production as it is rather cost effective and almost a HA solution. Though as every solution it also has some limitations, which I will discover during Terraform lectures\n\n\nAt deployment section I will speak a lot about different AWS Services, that would be used for creating security defense mechanisms\n\n\nIAM policies and Security groups as restriction mechanisms to our resources\nS3 as place for keeping our ALB and WAF logs\nCloudWath as centralized log storage and alarm system\nSNS - as mechanism for sending alarm notifications during security attacks detection\nI will also touch a little bit Route 53 and Certificate manager services\nThe deployed Falsk application and all AWS infrastructure around it would be intensively used as a lab environment for imitating different hacker’s attacks and providing a cyber security learning process. That will allow you to perform real practice training and try different security tools and tricks with your own hands. That is why, as for me, it is so essential to have it to be done.\n\n\nIn the third section we will speak about AWS WAF. We will discuss in details:\nWhat resources can we attach WAF at - ALB, API gateway, CloudFront\nHow properly to configure it\nWhy correct configurationof AWS WAF is so time consuming process\nHow to set up AWS WAF managed rules and custom blocking policies\nHow to analyse WAF and ALB logs using Athena\nWhy WAF is not silver bullet that can’t protect web app against all possible threats\nAt current section I will also show you some examples of real attacks that were blocked by WAF taken from my commercial experience, in order you could feel how powerful WAF is as a security defense tool\n\n\nAt 4th section we will discuss deeply AWS CloudWatch service, especially:\nhow to use our application logs as security detector\nhow to build custom CloudWatch filters\nhow to raise alerts in case web application is under the hacker’s attack\nhow you can be aware of attack even before WAF will detect it, or when WAF could not deal with the problem\n\n\nIn the 5th section we will speak about cyber threat analysis using Atena and Excel after a hacker's attack. We will discuss how to gather all required data using Athena and how to verify if the hacker's actions had any success.\n\n\nAt last section we will make a short summary of all passed practice materials, by creating effective security defense framework, that can be used at any cloud or even at on-premise solutions\n\n\nWho this course is for:\nAnyone who is interested at cyber security or who is responsible for Web resources:\nSoftware engineer\nDevOps\nAdmin\nCTO\nCEO",
      "target_audience": [
        "Anyone who is interested at cyber security or who is responsible for Web resources - software engineers, DevOps, admin, CTO, CEO"
      ]
    },
    {
      "title": "Spring Boot For Beginners",
      "url": "https://www.udemy.com/course/spring-boot-essentials/",
      "bio": "Build enterprise applications faster",
      "objectives": [
        "Build enterprise Restful API",
        "Be able to implement and distinguish diffrences between HTTP Get, Post, Put & Delete",
        "Understant Dependecy Injection",
        "Program to Interfaces",
        "Serve HTML with Spring Boot"
      ],
      "course_content": {
        "Spring Boot Essentials": [
          "Hi",
          "What you need to install",
          "Spring Boot Initializr",
          "App structure walkthrough",
          "Defining the Student model",
          "Defining database interface (DAO)",
          "Lets implement an in memory database",
          "Lets implement the Service Layer (Business Logic)",
          "Dependency Injection with @Autowire @Repository @Qualifier",
          "API / Controller / Resource layer & HTTP Get",
          "Running the Server",
          "Postman REST Client",
          "HTTP Post",
          "Path Variables",
          "Exercise",
          "Exercise solution. HTTP Put & Delete",
          "Running Jar file",
          "Switching DAO implementations",
          "Serving HTML with Spring Boot",
          "Thanks"
        ]
      },
      "requirements": [
        "You should be able to use computer",
        "You should have some understanding of Java",
        "You should be able to use an IDE"
      ],
      "description": "After receiving more than 160 thousands views on YouTube, my video is the most viewed video for learning Spring Boot. I decided to create a comprehensive course where you will learn Spring Boot essentials.\nSpring Boot allows you to create web and enterprise applications very fast with very little to configure or no configuration at all. It is used by most tech companies and it is a Java framework that you do not want to miss.\nIn this course you will learn how to create a N-TIER enterprise application where you will build a Restful API backed up with an in memory database. This course will teach you software development principles such as\nDependency Injection\nProgramming to an interface\nHow to structure you application\nHTTP Semantics. Get, Post, Delete & Put\nHow to serve HTML content with Spring Boot\nRunning the application as .jar file\nHow to switch between Database implementations\nSpring Boot is a framework that you do not want to miss.\nJoin me inside and level up your skills that will help you to apply for your next job as a spring boot software developer.",
      "target_audience": [
        "Anyone who wants to learn Spring Boot",
        "Anyone who wants to build entreprise and web applications fast",
        "Anyone who wants to learn Java"
      ]
    },
    {
      "title": "Build Your own Self Driving Car [Course -2]",
      "url": "https://www.udemy.com/course/selfdrivingcarpart2/",
      "bio": "Learn Raspberry Pi 3, Arduino UNO, Image Processing and Neural Networks (Machine Learning) for any Embedded IOT Project",
      "objectives": [
        "Learn How to Setup Raspberry Pi 3 for any IOT Projects",
        "Learn How to Setup Arduino UNO as a Slave micro-controller for any IOT Project",
        "Learn Image Processing using OpenCV4 for any Platform",
        "Learn Machine Learning & Train your own Image Classifier",
        "Learn How to Troubleshoot any Hardware & Software issues",
        "Most Important!! Learn to Design Embedded Product totally from scratch"
      ],
      "course_content": {
        "Introduction to Machine Learning": [
          "Basic Steps & Terminologies"
        ],
        "(Stop Sign) Neural Network Training": [
          "Creating Stop sign",
          "C++ code to Capture & Save Images",
          "Capturing Positive Samples for Stop sign",
          "Capturing Negative Samples",
          "Cascade Training Software and Image Cropping",
          "Training of Haar Cascade Model for Stop Sign"
        ],
        "Stop Sign Detection on Raspberry Pi3": [
          "Load (.xml) file in C++ Code",
          "Writing Image Classifier Program in C++",
          "Stop Sign Detection Testing",
          "Create Linear Equations to Calculate Distance",
          "Solve Linear Equations & Distance Testing"
        ],
        "Stop Sign Detection Testing": [
          "C++ Programming in Raspberry Pi",
          "C++ Programming in Arduino UNO",
          "Final Testing (Stop Sign)"
        ],
        "(Obstacle) Neural Network Training": [
          "Positive Sample for Object",
          "Extracting Positive samples for Object",
          "Cascade Training for Object Detection"
        ],
        "Obstacle Detection on Raspberry Pi3": [
          "C++ Code to Detect Object",
          "Create Linear Equations to Calculate Distance (for Object)",
          "Solve Linear Equations & Distance Testing (for object)"
        ],
        "Obstacle Detection Testing": [
          "Arduino Programming",
          "Lane Change Operation",
          "Final Testing (Object)"
        ],
        "Traffic Light Training": [
          "Traffic Light Model",
          "Positive Sample for Red Light",
          "Negative Sample for Red Light",
          "Training Data",
          "Cascade Model for Red Light"
        ],
        "Traffic Light Detection": [
          "Loading .XML File",
          "Linear Equations With Calibration",
          "Finding Actual Distance"
        ],
        "Traffic Light Testing": [
          "Arduino Programming & Final Testing"
        ]
      },
      "requirements": [
        "Basic Understanding of C or C++",
        "Basic Understanding of Digital Logic",
        "Basic Understanding of Soldering and Breadboard Prototyping"
      ],
      "description": "\"Machine Learning will change the lives of all of us. What is Machine Learning? It’s behind what makes self-driving cars a reality\"\nThis unique course is a complete walk-through process to Design, Build and Program a Embedded IOT Project (Self driving Car). Everything is discussed with details and clear explanation. Whole Project is divided into 2 parts.\n\n\n(Course - 2) Contents:\n1. Stop Sign Detection (Published)\n2. Object Detection (Published)\n3. Traffic Light Detection (Published)\n4. LED Dynamic Turn Indicator (Published)\n\n\n(Course - 1)  Previous Course\n1. Learn to design complete hardware for self driving car\na. Learn to setup Master device ( Raspberry Pi ) for any project\nb. Learn to setup Slave device ( Arduino UNO ) for any project\nc. Learn to Establish Communication link between Master and Slave device\n2. Learn Image Processing using OpenCV4\n3. Learn to driver robot on road lanes\n\n\n\"Machine Learning will change the lives of all of us. What is Machine Learning? It’s behind what makes self-driving cars a reality\"\nMachine learning is important because it gives enterprises a view of trends in customer behavior and business operational patterns, as well as supports the development of new products. Many of today's leading companies, such as Facebook, Google and Uber, make machine learning a central part of their operations. Machine learning has become a significant competitive differentiator for many companies",
      "target_audience": [
        "College or University student from Electronics/Electrical or Computer Engineering or relevant Diploma",
        "Hobbyist interested in Machine Learning & Image Processing",
        "Anybody Who wants to create Embedded IOT Project"
      ]
    },
    {
      "title": "Data Structures and OOP with C++ : CS104, CS105 Masterclass",
      "url": "https://www.udemy.com/course/data-structures-cpp/",
      "bio": "Master the art of OOP and data structures using C++. Enroll in CS104, C105 Masterclass now and boost your coding skills!",
      "objectives": [
        "Discover the principles of Data Structures and Object-Oriented Programming in C++.",
        "Gain a comprehensive understanding of the language's syntax and semantics.",
        "Learn the fundamentals of algorithms and how they are applied in C++.",
        "Understand the principles of data abstraction, inheritance, and polymorphism",
        "Build strong foundation for developing efficient and reliable software applications.",
        "Explore the differences between various data structures, such as arrays, linked lists, stacks, and queues.",
        "Develop a sound understanding of memory management in C++.",
        "Build algorithms that allow for efficient processing of data.",
        "Understand the concept of recursion and how to implement it in C++.",
        "Learn how to write and implement classes in C++.",
        "Master the principles of encapsulation and data hiding.",
        "Understand the power of inheritance and its application in OOP.",
        "Create and implement abstract data types.",
        "Develop programs that use advanced data structures such as trees and graphs.",
        "Gain a deep understanding of pointers and dynamic memory allocation in C++.",
        "Learn how to use templates to build generic classes and functions.",
        "Understand the principles of operator overloading in C++.",
        "Master the principles of exception handling in C++.",
        "Explore the principles of file input and output in C++.",
        "Build programs that use advanced algorithms such as sorting and searching.",
        "Create programs that use data structures and algorithms to solve real-world problems.",
        "Learn how to test and debug C++ programs effectively.",
        "Understand the principles of software engineering and how they apply to C++.",
        "Develop programs that interact with users through a graphical user interface.",
        "Understand the principles of multi-threaded programming in C++.",
        "Gain an appreciation for the role of C++ in modern software development.",
        "Learn how to build software that is efficient, scalable, and maintainable.",
        "Understand the principles of software design and how to apply them in C++.",
        "Develop the skills to work with large and complex codebases.",
        "Learn how to build software that is both functional and elegant."
      ],
      "course_content": {
        "D4 - Introduction to CPP Classes": [
          "POD Data Classes",
          "Unions in CPP",
          "Methods in Struct",
          "Access Controls in CPP",
          "Classes and Initializing Class Member",
          "Constructors",
          "Destructors in CPP",
          "Initializers in CPP"
        ],
        "Introduction to Pointers": [
          "Pointers in CPP",
          "C++ Beginning to Pointers",
          "Dereference Operator in CPP",
          "Pointers and Arrays",
          "nullptr",
          "Pointer arithmetic in CPP",
          "Arrays out of bounds and Deallocating Pointers",
          "Consts and Casts with Pointers",
          "Allocating Memory",
          "Allocating memory as arrays",
          "Lifetime of Memory"
        ],
        "STL": [
          "STL, Vectors and Arrays"
        ],
        "References in CPP": [
          "References",
          "Example Project With References",
          "Code Example with AUTO, TUPLE and FOR LOOP",
          "Range Based for Loop"
        ],
        "Pointers": [
          "Pointers in Practice",
          "Pointers in Practice - Part 2",
          "Pointers in Practice - Part 3",
          "Pointers in Practice - Part 4"
        ],
        "Functions": [
          "Introduction to Functions",
          "Functions - Part 1",
          "Functions - Part 2",
          "Functions - Part 3",
          "Functions - Part 4",
          "Functions - Part 5",
          "Functions - Part 6",
          "Functions - Part 7"
        ],
        "Data Structures in CPP": [
          "Introduction to Basic CPP Programming",
          "Creating Random Card Generator Using Enum and rand",
          "Developing main Function and using static_cast"
        ],
        "Data Structures - ADT": [
          "Introduction to ADT",
          "Creating ADT Class and using Constructors",
          "Virtual Methods and Overriding from Class",
          "Controlling Copy Operations with ADT"
        ],
        "Data Structures - Templates": [
          "Starting with Templates",
          "Class Templates in CPP"
        ],
        "Data Structures - STL and Asymptotic Analysis": [
          "Introduction to STL",
          "Algorithm Analysis",
          "Scenario Analysis",
          "Developing Main",
          "Factorial Method"
        ]
      },
      "requirements": [
        "Very BASIC C++ Programming"
      ],
      "description": "Welcome to our CS104, C105 Masterclass! In this class, we will dive into the world of Data Structures and Object-Oriented Programming (OOP) using the popular programming language, C++.\nData structures are an essential part of computer science, as they provide an organized way of storing and manipulating data. By using data structures, we can access and modify data more efficiently, which is essential for developing efficient and effective software.\nIn our class, we will cover various data structures, including arrays, linked lists, stacks, queues, and trees. We will explore how to implement these structures in C++ and how to perform basic operations like insertion, deletion, and searching. Additionally, we will discuss the advantages and disadvantages of each data structure and when to use them in different situations.\nLinked lists, for example, are a popular data structure used to store and manage data in a sequence. Linked lists are efficient because they can be dynamically allocated and are flexible in size. However, they can be more complicated to implement and use than other data structures like arrays.\nStacks and queues are also important data structures that are commonly used in software development. Stacks use the \"last in, first out\" (LIFO) principle, while queues use the \"first in, first out\" (FIFO) principle. These data structures are useful for managing data in a specific order, and we will learn how to implement and use them in our class.\nTrees are another popular data structure that we will cover in our class. Trees are useful for organizing data in a hierarchical structure and are often used in computer science applications like file systems, databases, and search engines.\nIn addition to data structures, we will also cover the basics of OOP in C++. Object-oriented programming focuses on encapsulation, inheritance, and polymorphism. With OOP, we can create reusable code, improve code organization and structure, and make code maintenance more manageable.\nIn our class, we will cover the basics of OOP in C++, including classes, objects, constructors, and destructors. We will also discuss inheritance, polymorphism, and encapsulation, and how they can be used to improve the functionality of our programs.\nC++ is a powerful programming language known for its speed and efficiency. It is widely used in developing operating systems, embedded systems, and gaming applications. With C++, we can take advantage of its powerful features to create complex programs with high performance.\nIn our class, we will explore the C++ syntax and how it can be used to implement data structures and OOP concepts. We will also learn how to optimize our code for performance and efficiency.\nTo wrap it up, our CS104, C105 Masterclass will provide you with a solid foundation in Data Structures and Object-Oriented Programming with C++. You will learn how to implement data structures, use OOP concepts to improve your code, and take advantage of the powerful features of C++.",
      "target_audience": [
        "This course is ideal for individuals who want to enhance their programming skills with C++ and learn the fundamentals of data structures and OOP.",
        "Aspiring computer science students who want to get a head start in their coursework or professionals who wish to expand their knowledge of programming will benefit from this course.",
        "Students who have a basic understanding of C++ but want to learn advanced techniques and concepts such as inheritance, polymorphism, and abstraction should take this course.",
        "Students who have a basic understanding of C++ but want to learn advanced techniques and concepts such as inheritance, polymorphism, and abstraction should take this course.",
        "Programmers who want to learn how to design efficient algorithms and optimize code will find this course valuable.",
        "This course is also suitable for individuals who are interested in pursuing a career in software development, particularly in industries such as gaming, mobile app development, and finance."
      ]
    },
    {
      "title": "ANSYS Fluent CFD Simulation Training Course for All Levels",
      "url": "https://www.udemy.com/course/ansys-fluent-training-course-beginner-intermediate/",
      "bio": "Comutational Fluid Dynamics: Practical ANSYS Fluent Techniques from Beginner to Advanced for Real-World Applications",
      "objectives": [
        "ANSYS Fluent Training Course for Beginner, intermediate and advance users",
        "Thermal Analysis in a Storage Tank CFD Simulation: Energy Equation is enabled to capture the temperature. The Mixing and Convection phenomena are involved.",
        "Conjugated Heat Transfer (CHT) in Plate Heat Exchanger CFD Simulation: Both Conduction and Convection happen in the domain",
        "Supersonic Flow over SR-71 Blackbird CFD Simulation: The air property is selected as the ideal gas to model compressibility.",
        "Compressible Flow in a Bent Pipe CFD Simulation: The solution has been solved Transiently. The solver is Density-Based to capture the compressibility.",
        "Fluidized Bed Reactor (Gas-Solid) CFD Simulation",
        "ANSYS FLUENT Training : Shell and Tube Heat Exchanger with a spiral Baffle",
        "ANSYS FLUENT training: Hydrocyclone with a Tangent-Circle Inlet CFD Simulation",
        "ANSYS FLUENT Training Self-Propelled Submarine Motion, Dynamic Mesh (6-DOF)",
        "ANSYS FLUENT Training Spillway Transient CFD Simulation",
        "ANSYS FLUENT Training Non Newtonian Blood Pulse Flow in a Vein in ansys fluent",
        "ANSYS FLUENT Training Airflow Around an Airfoil CFD Simulation by ansys fluent",
        "ansys fluent training Facade HVAC CFD Simulation training",
        "ANSYS FLUENT Training : Jet Ski CFD Simulation (Two-Phase Flow Study)",
        "ANSYS FLuent Training: HVAC of an Operating Room CFD Simulation",
        "Airflow Modeling over a Flying Bird",
        "Truck Aerodynamic Container Effect Study CFD Simulation ANSYS fluent",
        "Supersonic Flow Over SR-71 Blackbird Aircraft CFD Simulation, ANSYS Fluent Tutor",
        "Plate Heat Exchanger (Viscous Heating) CFD Simulation by ANSYS Fluent",
        "Airflow on the Dimpled Rotating Cylinder CFD Simulation, ANSYS Fluent Training",
        "Heat Transfer in Pipe with Twisted Tape Inserts, Paper CFD Validation, ANSYS Flu",
        "Single Reference Frame (SRF) Axial Pump CFD Simulation",
        "Zigzag Channel with Flow Pulsation, Paper CFD Validation, ANSYS Fluent",
        "Laminar Flow and Heat Transfer in U-Bend (Paper Validation), ANSYS Fluent",
        "Mountain External Airflow CFD Simulation, ANSYS Fluent Training",
        "Car (AUDI) External Flow CFD Simulation, ANSYS Fluent Training",
        "External Flow Passing Through a Flat Plate, ANSYS Fluent CFD Training",
        "ANSYS FLUENT Training air flow cfd simulation analysis Around a bird",
        "Fluid Flow Around a Wavy Tape in a Tube, ANSYS Fluent CFD Simulation Training",
        "ANSYS FLUENT TRAINING Golf ball Aerodynamics, CFD Simulation by ANSYS Fluent",
        "Moving Train External Airflow CFD Simulation, ANSYS Fluent Training",
        "Turbine Blade Cooling CFD Simulation, ANSYS Fluent Training",
        "UAV ExternalUAV External Airflow CFD Simulation, ANSYS Fluent Training",
        "Airflow Around a NACA 0008 Airfoil CFD Simulation, ANSYS Fluent Training",
        "Pollution of the Street between Buildings CFD Simulation",
        "Bullet (HPBT) movement CFD Simulation by Dynamic Mesh",
        "Broadband Noise Sources Acoustic Model CFD Simulation",
        "Jet Combustion CFD Simulation by ANSYS Fluent",
        "Surface injection using DPM CFD Simulation",
        "Labyrinth spillway CFD Simulation",
        "Perforated Plate (Porous Zone) Inside 3D Channel CFD Simulation",
        "Thermal Management by PCM in a Room Wall CFD Simulation",
        "Solar Radiation effect on a House CFD Simulation",
        "Conjugated Heat Transfer (CHT) in Plate Heat Exchanger CFD Simulation",
        "Theoretical and Computational Analysis of 2D Poiseuille Flow: A Comparative Study Using Navier-Stokes Equations and ANSYS Fluent",
        "Session 2: Axisymmetric Heat Transfer Analysis of Poiseuille Flow Using ANSYS Fluent",
        "Design, Meshing, and Aerodynamic Analysis of NACA 0015 Airfoil using ANSYS Fluent",
        "Pipe Flow Simulation with Heat Transfer and Nusselt Number Analysis using ANSYS Fluent",
        "Compressible Flow Simulation and Aerodynamic Analysis of NACA 0012 Airfoil with NASA Result Comparison using ANSYS Fluent"
      ],
      "course_content": {
        "ANSYS Workbench Main Steps for a CFD Simulation": [
          "ANSYS Workbench Main Steps for a CFD Simulation",
          "Supersonic Flow over SR-71 Blackbird CFD Simulation",
          "Perforated Plate (Porous Zone) Inside 3D Channel CFD Simulation",
          "Surface injection using DPM CFD Simulation",
          "Single Reference Frame (SRF) Axial Pump CFD Simulation",
          "Labyrinth spillway CFD Simulation"
        ],
        "intermediate": [
          "Plate Heat Exchanger Geometry and Mesh Training",
          "A Comparative Study Using Navier-Stokes Equations and ANSYS Fluent",
          "Session 2: Axisymmetric Heat Transfer Analysis of Poiseuille Flow, ANSYS Fluent",
          "Design, Meshing, and Aerodynamic Analysis of NACA 0015 Airfoil by ANSYS Fluent",
          "Pipe Flow Simulation with Heat Transfer and Nusselt Number Analysis using ANSYS",
          "Compressible Flow Analysis of NACA 0012 Airfoil using ANSYS Fluent",
          "Bent Pipe Geometry and Mesh Training",
          "Compressible Flow in a Bent Pipe CFD Simulation"
        ],
        "Advanced section": [
          "ANSYS FLUENT Training Spillway Transient CFD Simulation",
          "ANSYS FLUENT Training Airflow Around an Airfoil CFD Simulation by ansys fluent",
          "ANSYS FLUENT Training : Jet Ski CFD Simulation (Two-Phase Flow Study)",
          "Airflow Modeling over a Flying Bird",
          "Truck Aerodynamic Container Effect Study CFD Simulation ANSYS fluent",
          "Supersonic Flow Over SR-71 Blackbird Aircraft CFD Simulation, ANSYS Fluent Tutor",
          "Supersonic Flow over SR-71 Blackbird geometry and mesh training",
          "Plate Heat Exchanger (Viscous Heating) CFD Simulation by ANSYS Fluent",
          "Airflow on the Dimpled Rotating Cylinder CFD Simulation, ANSYS Fluent Training",
          "Heat Transfer in Pipe with Twisted Tape Inserts, Paper CFD Validation, ANSYS Flu",
          "Single Reference Frame (SRF) Axial Pump geometry and mesh training",
          "Single Reference Frame (SRF) Axial Pump CFD Simulation",
          "Zigzag Channel with Flow Pulsation, Paper CFD Validation, ANSYS Fluent",
          "Laminar Flow and Heat Transfer in U-Bend (Paper Validation), ANSYS Fluent",
          "Mountain External Airflow CFD Simulation, ANSYS Fluent Training",
          "Car (AUDI) External Flow CFD Simulation, ANSYS Fluent Training",
          "External Flow Passing Through a Flat Plate, ANSYS Fluent CFD Training",
          "ANSYS FLUENT Training air flow cfd simulation analysis Around a bird",
          "Fluid Flow Around a Wavy Tape in a Tube, ANSYS Fluent CFD Simulation Training",
          "ANSYS FLUENT TRAINING Golf ball Aerodynamics, CFD Simulation by ANSYS Fluent",
          "Moving Train External Airflow CFD Simulation, ANSYS Fluent Training",
          "Turbine Blade Cooling CFD Simulation, ANSYS Fluent Training",
          "UAV ExternalUAV External Airflow CFD Simulation, ANSYS Fluent Training",
          "Airflow Around a NACA 0008 Airfoil CFD Simulation, ANSYS Fluent Training",
          "Laminar Flow Heat Transfer in U-Bend, how to calculate Nusselt number"
        ],
        "geometry and mesh training": [
          "Corona Virus Spread due to a Cough in Open Air",
          "Covid 19 Airborne Risk Measuring in a Classroom",
          "Covid-19: Consideration for Wearing Shields, ANSYS Fluent Simulation Training",
          "Single Reference Frame (SRF) Axial Pump CFD Simulation",
          "Solar Chimney ANSYS Fluent CFD Simulation Training",
          "mixer tutorial, Ansys design modeler and meshin training",
          "draw and meshing of a ducted fan zone",
          "geometry & mesh training of Bent Pipe",
          "geometry and mesh training contact angle effect on friction",
          "Geometry and Mesh Training, Corona Virus Patient STEADY Breathining",
          "heat exchanger with segmented baffles",
          "Hydro Cyclone geometry drwaing and meshing",
          "Water infiltration into a porous concrete block geometry and mesh training",
          "COVID-19 Transient Breathing in the Operating Room, geometry and mesh training",
          "Pin and Plate Heat Sink geometry training",
          "Pin and Plate Heat Sink meshing training",
          "Plate Heat Exchanger, geometry and mesh training"
        ]
      },
      "requirements": [
        "No experience needed. You will learn n everything you need to know.",
        "Basic knowledge of fluid mechanics",
        "Knowledge of the fundamentals of numerical methods",
        "Familiarity with the Windows operating system"
      ],
      "description": "ANSYS Fluent Training Course\n\n\nWelcome to our comprehensive ANSYS Fluent Training Course, available on Udemy. This course is meticulously designed for both beginners and intermediate learners, providing an in-depth exploration of the functionalities of ANSYS Fluent, a powerful Computational Fluid Dynamics (CFD) software.\n\n\n## Course Overview\n\n\nIn this 16-hour course, you will embark on a journey that begins with the basics of Computational Fluid Dynamics and culminates in a thorough understanding of advanced CFD concepts. The course is structured to gradually build your knowledge, starting with fundamental principles and progressing to more complex topics.\n\n\n## Learning Objectives\n\n\nThe primary objective of this course is to equip you with a solid understanding of how to set up, solve, and post-process CFD problems using ANSYS Fluent. By the end of this course, you will be able to:\n\n\n- Understand the fundamental principles of CFD\n- Set up and solve CFD problems using ANSYS Fluent\n- Master advanced CFD techniques\n- Interpret and visualize CFD results using post-processing methods\n\n\n## Course Content\n\n\nThe course is divided into several sections, each focusing on a specific aspect of ANSYS Fluent. Here's a brief overview of what you can expect:\n\n\n1. **Introduction to CFD:** This section covers the basics of CFD, including its history, applications, and importance in today's industries.\n\n\n2. **Getting Started with ANSYS Fluent:** Here, you'll be introduced to the ANSYS Fluent interface, and you'll learn how to navigate it.\n\n\n3. **Problem Setup:** This section deals with setting up various types of CFD problems in ANSYS Fluent, including boundary conditions, meshing, and solver settings.\n\n\n4. **Solving CFD Problems:** Here, you'll learn how to solve different types of CFD problems using ANSYS Fluent, including steady-state and transient problems.\n\n\n5. **Advanced CFD Techniques:** This section delves into more complex CFD topics, such as multiphase flows, turbulence modeling, and heat transfer.\n\n\n6. **Post-processing:** In the final section, you'll learn how to interpret and visualize your CFD results using various post-processing techniques.\n\n\n## Teaching Methodology\n\n\nThe course employs a blend of theoretical explanations and practical examples to facilitate effective learning. Each concept is first explained theoretically, followed by a practical example or exercise to reinforce the learning. The course is self-paced, allowing you to learn at your own convenience.\n\n\n## Who Should Enroll?\n\n\nThis course is ideal for anyone interested in learning CFD using ANSYS Fluent. Whether you're a student, a researcher, or an engineer, this course will equip you with the skills needed to navigate and effectively use ANSYS Fluent.\n\n\n## Conclusion\n\n\nIn conclusion, this course offers a comprehensive insight into CFD using ANSYS Fluent. With a blend of theoretical knowledge and practical skills, you'll be well-equipped to tackle any CFD problem. So why wait? Start your CFD journey with us today!",
      "target_audience": [
        "Beginner, intermediate and Advanced ANSYS Fluent Users"
      ]
    },
    {
      "title": "Write clean code by using SOLID design principles in Python",
      "url": "https://www.udemy.com/course/solid-design-principles-with-python/",
      "bio": "Single Responsibility, Open-Closed, Liskov, Interface Segregation and Dependency Inversion to organise your code better",
      "objectives": [
        "List the 5 principles and their specific features with the help of many compact code examples",
        "Identify what aspects of your code should be combined or separated by applying the Single Responsibility Principle",
        "Modify existing code with minimal changes by using the Open-Closed Principle",
        "Detect inheritance problems with the Liskov Substitution Principle",
        "Prevent dummy methods by using the Interface Segregation Principle",
        "Prevent dependency problems by applying the Dependency Inversion Principle"
      ],
      "course_content": {
        "Introduction": [
          "Course Introduction"
        ],
        "S.O.L.I.D. Principles": [
          "Single Responsibility Principle",
          "Open-closed Principle",
          "Liskov Substitution Principle",
          "Interface Segregation Principle",
          "Dependency Inversion Principle"
        ],
        "Conclusion": [
          "Q&A #1: Can you give a practical example of dependency injection?",
          "Q&A #2: How do dependency injection and dependency inversion work together?",
          "Conclusion",
          "Bonus Section"
        ]
      },
      "requirements": [
        "Beginner or intermediate understanding of programming",
        "An understanding of the problems that are caused by growing, unstructured code"
      ],
      "description": "Master Clean Code with SOLID Principles. Write Code You’re Proud Of — Even as Requirements Change.\nAre you passionate about coding but struggle to keep your projects clean, modular, and maintainable? You’re not alone.\nBack in 1998, I was in the same position — a couple of years into my software development career, loving the craft but constantly frustrated by messy codebases and brittle architecture. I watched in awe as a colleague wrote elegant, well-structured systems. I thought he was a coding wizard.\nBut here’s the truth: It wasn’t magic — it was mastery of patterns and principles.\nOnce I recognized these principles in my own systems, I improved my code 10x! And so can you!\n\n\nIn this course you learn to structure your code with the help of the five S.O.L.I.D. principles. These principles allow you to maintain the quality of your code, despite of ever-changing requirements from the business.\n\n\nTarget audience\n\nDevelopers who especially benefit from this course, are:\nProgrammers who want to see compact code examples that show how SOLID design principles can improve their code\nPython programmers who want to know how to apply SOLID in Python\nProgrammers who want to know the relationship between SOLID and OOP\n\n\nChallenges\n\nStudents that are interested in this course are creative programmers but changes in their code start to cause nightmares and steal expensive time. This way, new requirements are the source of a lot of stress.\nBut there is a solution! Many problems are quite common and other developers have already solved them for you. These solutions are defined in patterns and principles. In this course you learn the 5 S.O.L.I.D. principles that provide you with tried and tested ways to structure your code better.\n\n\nWhat can you do after this course?\n\n\nRecognize which parts of you code can be improved by applying the SOLID principles\nList the 5 SOLID principles and describe their purposes\nUse the compact code examples from this course as blueprints to optimize your existing code\n\n\nTopics\n\n\nSingle Responsibility Principle: Things should have only one reason to change.\nOpen-Closed Principle: Modify your code with minimal changes to other parts of the code.\nLiskov Substitution Principle: Subclasses should not change the behavior of superclasses in unexpected ways.\nInterface Segregation Principle: No client should be forced to depend on methods it does not use.\nDependency Inversion Principle: High level modules should not depend on low level modules.\n\n\nDuration\n1 hour video time. This course has no exercises.\nThe teacher\nThis course is taught by Loek van den Ouweland, a senior software engineer with 25 years of professional experience. Loek is the creator of Wunderlist for windows, Microsoft To-do and Mahjong for Windows and loves to teach software engineering.\nStudents of this course tell me:\n* * * * * “Wonderful course! Now it's finally crystal clear what S.O.L.I.D. principles are.”\n* * * * * “Best course to learn about design principes.”\n* * * * * “Provides a good overview of each principle, and the problems they solve, with examples on how to use them. The course overall provided good food for thought on how I can improve my code.”",
      "target_audience": [
        "Programmers who want to see compact code examples that show how SOLID design principles can improve their code",
        "Python programmers who want to know how to apply SOLID in Python",
        "Programmers who want to know the relationship between SOLID and OOP"
      ]
    },
    {
      "title": "AI For JavaScript Developers (OpenAI, Embeddings, Vercel AI)",
      "url": "https://www.udemy.com/course/ai-for-js-devs/",
      "bio": "Learn how to build AI agents and chat bots using TypeScript, OpenAI, Vector Store, Functions, LlamaIndex and more.",
      "objectives": [
        "Building AI-powered apps and chatbots using OpenAI, Node and JavaScript/TypeScript.",
        "Building scalable AI apps that have a massive knowledge base, using Embeddings, Vector Stores and more.",
        "Fundamental AI concepts such as Tools, Agents, RAG, Vector Stores, Embeddings, Function Calling, Tokens and more",
        "Build AI-powered software that is able to fetch information from real-time data sources.",
        "Build a real chat application with a user interface that is capable of answering questions based on any PDF document"
      ],
      "course_content": {
        "Introduction": [
          "Introduction to Generative AI and LLMs",
          "More Valuable Content",
          "How to make the most out of this course",
          "Let's Connect"
        ],
        "Before We Begin": [
          "Signing up to OpenAI + Getting an API Key",
          "Installing Node.js",
          "Code Editor - VSCode (Optional)"
        ],
        "The Basics of Building With OpenAI": [
          "Project Structure",
          "First OpenAI Chat Completion",
          "Reminder: Feedback and Rating",
          "Conversation State & AI Chatbots",
          "Introduction to Tokens",
          "System Messages",
          "Providing Knowledge to the LLM",
          "Hallucinations",
          "Getting Structured JSON Output",
          "OpenAI Function Calling"
        ],
        "Vector Stores & Embeddings": [
          "Introduction to Vector Stores",
          "Storing PDFs in a Vector Store",
          "Querying the Vector Store"
        ],
        "Fetching Real-Time Data": [
          "Real-Time Data: Part 1",
          "Real-Time Data: Part 2"
        ],
        "Project: PDF Chat Bot": [
          "Project Intro - What We're Building",
          "Cloning The Repo",
          "Project Structure",
          "Upload And Parse PDF File",
          "Store PDF in Vector Store Index",
          "(Optional) How Vercel AI SDK Works",
          "Chat API Endpoint",
          "Knowledge From Vector Store",
          "Dealing With Token Limits - Part 1",
          "Dealing With Token Limits - Part 2"
        ]
      },
      "requirements": [
        "Prior JavaScript/TypeScript coding experience is needed."
      ],
      "description": "With Artificial Intelligence becoming more and more accessible, we developers have access to superpowers, just one API call away. AI allows you to analyze sentiment, recommend products, personalize communications, craft chat bots and much much more.\nIn this course, you'll learn how to take your experience as a JavaScript/TypeScript developer, and build real-world AI-powered applications. The goal is to turn you, a seasoned developer, into an AI engineer.\n\n\nHere's what you'll learn:\n\n\nWhat is Generative AI, LLM, and how it is different from traditional AI.\nHow to use the OpenAI API and SDK to easily create chat completions.\nBuild a real-world chat application that takes any PDF file and answers questions about it.\nBasic AI concepts such as the anatomy of Chat Completions, Tokens, System Prompts, Prompt Engineering and more.\nAdvanced concepts such as OpenAI Functions, Hallucinations, and how to provide external knowledge to the AI.\nHow to utilize Vector Stores (Embeddings) to store large amounts of data and provide additional context to the AI.\nHow to fetch real-time information as needed (e.g. get stock from a database).\nThe Vercel AI SDK and how it helps us to easily build robust AI chatbots with Next.js.\nToken limitation challenges and how to easily deal with them.",
      "target_audience": [
        "JavaScript/TypeScript developers who want to learn more about the fundamentals of the Generative AI landscape",
        "Developers looking to integrate AI into their side projects or work, and want to quickly get up to speed",
        "Existing AI developers who want to learn important concepts such as Agents, RAG, Function Calling, real-time data access, Vector Stores and more."
      ]
    },
    {
      "title": "Master System Design and Design Pattern",
      "url": "https://www.udemy.com/course/system-design-and-design-pattern-course/",
      "bio": "System Design and Architecture, HLD & LLD, Design Patterns for Distributed Systems, Object-Oriented Design",
      "objectives": [
        "Advance System Design Course",
        "Perform real-world industrial projects and use-cases.",
        "Best Interview Preparation Course trained by Top Experts",
        "Get Assured Interview Call from Top Recruiters"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Backend System techniques for distributed system : SQl/NoSQL",
          "System design component: Sharding techniques"
        ],
        "High Level Design (HLD) Problem": [
          "Design Facebook NewsFeed",
          "Design WhatsApp Chat Service",
          "Design Twitter like social networking service",
          "Design a ride sharing system like Uber",
          "Design Instagram",
          "Design Drop Box/Google Drive",
          "Design Hit Counter",
          "Design Tiny URL",
          "Design BookMyShow",
          "Design youtube/Netflix"
        ],
        "Low Level Design (LLD) Problem": [
          "Design a two Player Online Chess Game",
          "Design Airline Reservation System",
          "Design Online Shopping System Like Amazon, Flipkart",
          "Design Generic Deck of Cards",
          "Design Online Hotel Booking System",
          "Design a parking lot System",
          "Design Customs HashMap Implementation Internals",
          "Design Customs HashMap Implementation Internals - 2",
          "Design Cricinfo",
          "Design Online food delivery system like Swiggy, Zomato",
          "Design online Discussion forum (like stackoverflow,quora)"
        ],
        "Design Pattern": [
          "SOLID Principal - Part -1",
          "SOLID Principal - Part -2",
          "Singleton Design Pattern",
          "Factory Design Pattern",
          "Abstract Design Pattern",
          "Strategy Design Pattern",
          "Observer Design Pattern",
          "Builder Design Pattern",
          "Adapter Design Pattern",
          "Decorator Design Pattern",
          "Chain of Responsibility Design Pattern"
        ],
        "Distributed System & Microservice Architecture": [
          "How to choose best architecture for System Design interview problems",
          "Message Queue - ActiveMQ",
          "How to Handle Cascading failure in System Design Problems",
          "Handling and Managing the cluster of machine in Distributed Environment.",
          "Apache Kafka",
          "Concurrency and System failure issues in DB transaction in System Design",
          "Distributed Transaction of backend in Distributed System",
          "Complete steps of Building and Deploying App in Docker Container Cloud Platform"
        ],
        "Multithreading & Synchronization": [
          "Multithreading concepts with Examples and Code",
          "How to Achieve the synchronization between Multithreaded Environment",
          "How to Create Deadlock and Remove it in Multithreaded Environment",
          "Print sequence of Natural numbers using Three Threads",
          "Implementation of Multi Reader and Writer Problem using Multithreading"
        ],
        "BONUS SECTION": [
          "Learn More and Crack top product based companies interview (BONUS LECTURE)"
        ]
      },
      "requirements": [
        "Basic Programming Knowledge"
      ],
      "description": "This course explains all the deep concepts of scalable system design problems and design patterns. These problems are frequently asked during interviews. It also explains all core components of distributed system.\n\n\nThis course is for students in colleges preparing for campus placements and also for working professional who wants to crack interviews in top tech product-based companies.\n\n\nWhat is the System Design course?\n\n\nA System Design course typically covers the process of designing complex systems, including the techniques and methodologies used to gather and analyze system requirements, design system architecture, and evaluate and optimize system performance. The course may also cover topics such as system modeling and simulation, system testing and validation, and project management.\n\n\nHow system design course help to get placed in top tech companies?\n\n\nA System Design course can provide professionals with the knowledge and skills needed to succeed in roles related to designing and building large-scale systems. By learning about the techniques and methodologies used to gather and analyze system requirements, design system architecture, and evaluate and optimize system performance, students will be better equipped to design, build, and maintain complex systems. Additionally, by learning about system modeling and simulation, system testing and validation, and project management, students will be better equipped to manage and lead projects related to system design and development. These skills are in high demand in top tech companies and can help students stand out in the job market and increase their chances of getting hired by a top company.\nAlso, being familiar with industry standard tools like UML, design patterns, and software development methodologies like Agile, Scrum, etc. are highly valued by top tech companies as they are widely used in industry.\nIn summary, a System Design course will provide students with a strong foundation in the concepts and skills needed to design and build large-scale systems, which can make them more attractive to top tech companies looking for candidates with experience in this area.",
      "target_audience": [
        "Candidates curious to learn System Design",
        "Working professionals preparing for interviews of Top tech companies",
        "Candidate who want to crack System Design Interview"
      ]
    },
    {
      "title": "Making Sense of Use Cases",
      "url": "https://www.udemy.com/course/making-sense-of-use-cases/",
      "bio": "An in-depth look at use cases, actors, and use case modeling",
      "objectives": [
        "A deep dive into use case modeling",
        "An approach and discussion consistent with UML 2.5",
        "A detailed understanding of use cases and actors",
        "The ability to find use cases and actors in your projects",
        "The ability to model use cases and actors on a use case diagram, using associations, include and extend relationships, and generalizations",
        "Knowledge to avoid pitfalls and common mistakes in use case modeling",
        "The ability to write a complete and effective use case specification, with both basic and alternate flows",
        "The ability to model the flow of events through a UML activity diagram",
        "An understanding of how use cases fit into the SDLC",
        "An understanding of how to document non-functional requirements",
        "A fun learning experience, complete with examples, exercises, and solutions"
      ],
      "course_content": {
        "Introduction": [
          "Overview of the Course",
          "Introduction to the Example"
        ],
        "Overview of Use Cases": [
          "Introduction to Use Cases",
          "Finding Use Cases",
          "Actors",
          "Exercise: Identify Actors and Use Cases",
          "Exercise Solution: Identify Actors and Use Cases"
        ],
        "Use Case Diagrams": [
          "Diagramming Use Cases, Actors, and Associations",
          "Include and Extend Relationships",
          "Actor Generalization",
          "Things Not to Do",
          "Example of a Use Case Diagram",
          "Exercise: Build a Use Case Diagram",
          "Exercise Solution: Build a Use Case Diagram"
        ],
        "Use Case Specifications": [
          "Writing a Use Case Specification",
          "Exercise: Write a Use Case Specification",
          "Exercise Solution: Write a Use Case Specification",
          "Activity Diagrams",
          "Exercise: Activity Diagram",
          "Exercise Solution: Activity Diagram"
        ],
        "Use Cases in the SDLC": [
          "Use Cases in the SDLC",
          "What About Non-Functional Requirements?"
        ],
        "Summary of the Course": [
          "Course Summary",
          "Course Summary - Downloadable PDF"
        ]
      },
      "requirements": [
        "No prerequisites - we will give you all the information you need to know"
      ],
      "description": "Come join us as we explore the world of use cases and use case modeling. We'll take a deep dive into this part of the UML, looking at actors, use cases, use case diagrams, flows of events, and activity diagrams. With these powerful tools at your disposal, you'll be able to create requirements artifacts that are invaluable to your team.\nIn this course, you’ll learn:\nWhat a use case is, and how to effectively use them in a project\nWhat an actor is, and how they can help us understand our users' perspectives\nHow to find use cases and actors in your project\nHow to build an effective use case diagram\nHow to model reusable logic with Includes and Extends relationships\nHow to model actor inheritance using Generalization relationships\nWhat not to do when defining or modeling use cases and actors\nHow to write a use case specification, with a description, preconditions, basic and alternate flows of events, and post-conditions\nHow to build an activity diagram to give you a picture of the flow\nHow use cases fit into the SDLC\nWhat to do with non-functional requirements\n\n\nAnd through the whole class, we’ll use real world examples and exercises to help reinforce the ideas and give you the chance to practice. In this short course, you’ll get the skills you need to start applying use cases to your projects right away.",
      "target_audience": [
        "Business analysts",
        "Product owners",
        "Anyone working on a project with use cases who would like a deeper understanding of what use cases are and how to use them"
      ]
    },
    {
      "title": "Learn By Example: Hadoop, MapReduce for Big Data problems",
      "url": "https://www.udemy.com/course/learn-by-example-hadoop-mapreduce/",
      "bio": "A hands-on workout in Hadoop, MapReduce and the art of thinking \"parallel\"",
      "objectives": [
        "Develop advanced MapReduce applications to process BigData",
        "Master the art of \"thinking parallel\" - how to break up a task into Map/Reduce transformations",
        "Self-sufficiently set up their own mini-Hadoop cluster whether it's a single node, a physical cluster or in the cloud.",
        "Use Hadoop + MapReduce to solve a wide variety of problems : from NLP to Inverted Indices to Recommendations",
        "Understand HDFS, MapReduce and YARN and how they interact with each other",
        "Understand the basics of performance tuning and managing your own cluster"
      ],
      "course_content": {
        "Introduction": [
          "You, this course and Us"
        ],
        "Why is Big Data a Big Deal": [
          "The Big Data Paradigm",
          "Serial vs Distributed Computing",
          "What is Hadoop?",
          "HDFS or the Hadoop Distributed File System",
          "MapReduce Introduced",
          "YARN or Yet Another Resource Negotiator"
        ],
        "Installing Hadoop in a Local Environment": [
          "Hadoop Install Modes",
          "Hadoop Standalone mode Install",
          "Hadoop Pseudo-Distributed mode Install"
        ],
        "The MapReduce \"Hello World\"": [
          "The basic philosophy underlying MapReduce",
          "MapReduce - Visualized And Explained",
          "MapReduce - Digging a little deeper at every step",
          "\"Hello World\" in MapReduce",
          "The Mapper",
          "The Reducer",
          "The Job"
        ],
        "Run a MapReduce Job": [
          "Get comfortable with HDFS",
          "Run your first MapReduce Job"
        ],
        "Juicing your MapReduce - Combiners, Shuffle and Sort and The Streaming API": [
          "Parallelize the reduce phase - use the Combiner",
          "Not all Reducers are Combiners",
          "How many mappers and reducers does your MapReduce have?",
          "Parallelizing reduce using Shuffle And Sort",
          "MapReduce is not limited to the Java language - Introducing the Streaming API",
          "Python for MapReduce"
        ],
        "HDFS and Yarn": [
          "HDFS - Protecting against data loss using replication",
          "HDFS - Name nodes and why they're critical",
          "HDFS - Checkpointing to backup name node information",
          "Yarn - Basic components",
          "Yarn - Submitting a job to Yarn",
          "Yarn - Plug in scheduling policies",
          "Yarn - Configure the scheduler"
        ],
        "MapReduce Customizations For Finer Grained Control": [
          "Setting up your MapReduce to accept command line arguments",
          "The Tool, ToolRunner and GenericOptionsParser",
          "Configuring properties of the Job object",
          "Customizing the Partitioner, Sort Comparator, and Group Comparator"
        ],
        "The Inverted Index, Custom Data Types for Keys, Bigram Counts and Unit Tests!": [
          "The heart of search engines - The Inverted Index",
          "Generating the inverted index using MapReduce",
          "Custom data types for keys - The Writable Interface",
          "Represent a Bigram using a WritableComparable",
          "MapReduce to count the Bigrams in input text",
          "Setting up your Hadoop project",
          "Test your MapReduce job using MRUnit"
        ],
        "Input and Output Formats and Customized Partitioning": [
          "Introducing the File Input Format",
          "Text And Sequence File Formats",
          "Data partitioning using a custom partitioner",
          "Make the custom partitioner real in code",
          "Total Order Partitioning",
          "Input Sampling, Distribution, Partitioning and configuring these",
          "Secondary Sort"
        ]
      },
      "requirements": [
        "You'll need an IDE where you can write Java code or open the source code that's shared. IntelliJ and Eclipse are both great options.",
        "You'll need some background in Object-Oriented Programming, preferably in Java. All the source code is in Java and we dive right in without going into Objects, Classes etc",
        "A bit of exposure to Linux/Unix shells would be helpful, but it won't be a blocker"
      ],
      "description": "Taught by a 4 person team including 2 Stanford-educated, ex-Googlers  and 2 ex-Flipkart Lead Analysts. This team has decades of practical experience in working with Java and with billions of rows of data.\nThis course is a zoom-in, zoom-out, hands-on workout involving Hadoop, MapReduce and the art of thinking parallel.\nLet’s parse that.\nZoom-in, Zoom-Out:  This course is both broad and deep. It covers the individual components of Hadoop in great detail, and also gives you a higher level picture of how they interact with each other.\nHands-on workout involving Hadoop, MapReduce : This course will get you hands-on with Hadoop very early on.  You'll learn how to set up your own cluster using both VMs and the Cloud. All the major features of MapReduce are covered - including advanced topics like Total Sort and Secondary Sort.\nThe art of thinking parallel: MapReduce completely changed the way people thought about processing Big Data. Breaking down any problem into parallelizable units is an art. The examples in this course will train you to \"think parallel\".\nWhat's Covered:\nLot's of cool stuff ..\nUsing MapReduce to\n\n\nRecommend friends in a Social Networking site: Generate Top 10 friend recommendations using a Collaborative filtering algorithm.\nBuild an Inverted Index for Search Engines: Use MapReduce to parallelize the humongous task of building an inverted index for a search engine.\nGenerate Bigrams from text: Generate bigrams and compute their frequency distribution in a corpus of text.\n\n\nBuild your Hadoop cluster:\n\n\nInstall Hadoop in Standalone, Pseudo-Distributed and Fully Distributed modes\nSet up a hadoop cluster using Linux VMs.\nSet up a cloud Hadoop cluster on AWS with Cloudera Manager.\nUnderstand HDFS, MapReduce and YARN and their interaction\n\n\nCustomize your MapReduce Jobs:\n\n\nChain multiple MR jobs together\nWrite your own Customized Partitioner\nTotal Sort : Globally sort a large amount of data by sampling input files\nSecondary sorting\nUnit tests with MR Unit\nIntegrate with Python using the Hadoop Streaming API\n\n\n.. and of course all the basics:\n\nMapReduce : Mapper, Reducer, Sort/Merge, Partitioning, Shuffle and Sort\nHDFS & YARN: Namenode, Datanode, Resource manager, Node manager, the anatomy of a MapReduce application, YARN Scheduling, Configuring HDFS and YARN to performance tune your cluster.",
      "target_audience": [
        "Yep! Analysts who want to leverage the power of HDFS where traditional databases don't cut it anymore",
        "Yep! Engineers who want to develop complex distributed computing applications to process lot's of data",
        "Yep! Data Scientists who want to add MapReduce to their bag of tricks for processing data"
      ]
    },
    {
      "title": "Begin Programming in Microsoft Dynamics 365 Business Central",
      "url": "https://www.udemy.com/course/start-programming-in-dynamics-business-central/",
      "bio": "A programming course for beginners interested in exploring Microsoft Dynamics 365 Business Central.",
      "objectives": [
        "Learn to configure Visual Studio Code and install Business Central.",
        "Develop skills to create and modify or extend Business Central objects such as tables and pages.",
        "Learn to create basic reports using RDLC and Word for effective data presentation.",
        "Explore more complex topics like implementing page background tasks and creating API pages.",
        "Discover how to integrate Business Central with Azure Functions to enhance functionality."
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Getting Started": [
          "Installing Business Central on Docker Desktop",
          "Creating a Business Central Docker Container with an artifact timeout download",
          "Installing Visual Studio Code and publish a Hello World project",
          "(Alternative) Install Business Central On-Premise from the Microsoft Install Kit",
          "Publishing your App to a Business Central Sandbox",
          "Upload Extension to an Online Production Environment",
          "Introduction to the app.json file",
          "The Object Browser",
          "Using code snippets in AL",
          "Getting Started - Quiz"
        ],
        "Programming Tables and Pages": [
          "Table Types By Functional Use",
          "Exploring table triggers",
          "Most Common Page Types",
          "Exploring page triggers",
          "Developing tables and pages",
          "Creating a Count FlowField",
          "Creating a Sum FlowField",
          "Creating a Exist FlowField",
          "Creating a Lookup FlowField",
          "Using Calcfields on FlowFields",
          "Creating Page Views",
          "Adding an action to a page",
          "Promoting an action",
          "Tables and Pages Quiz"
        ],
        "Programming Reports": [
          "Exploring Report Triggers",
          "Creating a basic RDLC report",
          "Creating a basic WORD report",
          "Creating a processing-only report",
          "Reports Quiz"
        ],
        "Programming Queries": [
          "Creating Queries in the AL Code",
          "Using Queries to Load Data into Pages with a Temporary Source",
          "Queries Quiz"
        ],
        "Upper Beginner Programming Topics": [
          "Implementing page background tasks",
          "Creating a custom API Page & perform CRUD operations on-premise",
          "Creating an Azure Account",
          "Accessing a custom API Page with OAuth 2.0 in a BC Sandbox",
          "Integrating Business Central with Azure Functions",
          "Upper Beginner Programming Quiz"
        ],
        "Bonus Lecture": [
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "To get the most out of this course, you’ll need a computer with internet access to set up and practice in Business Central environments, along with fundamental programming knowledge, a proactive mindset, and a willingness to engage in hands-on learning!"
      ],
      "description": "Welcome to \"Begin Programming in Microsoft Dynamics 365 Business Central\"!\nThis course is designed for beginners eager to learn how to extend and customize an existing Business Central solution. You'll explore a wide range of tools and techniques to create impactful customizations in Business Central.\nStarting with the basics, we’ll guide you through setting up your development environment, creating your first project, and building foundational skills. From there, you'll progress to more advanced topics, including page background tasks and integrating Business Central with Azure functions.\nThis course offers a balanced pace, with step-by-step guidance to ensure you gain confidence as you proceed.\n\n\nKey topics we’ll cover include:\nGetting Started\nInstalling Business Central on Docker Desktop\nInitiating a Business Central project in Visual Studio Code\nDiscover the app.json file & the object browser\nUsing code snippets effectively\nBegin Programming in Business Central\nDeveloping tables and pages\nCreating basic reports (RDLC, Word and Processing-Only)\nUpper Beginner Programming\nImplementing page background tasks\nCreating a custom API Page & perform CRUD operations on-premise\n+ accessing the custom API Page with OAuth 2.0 in a Business Central Sandbox\nIntegrating Business Central with Azure Functions\n\n\nLet’s dive into these topics together and unlock the potential of Dynamics Business Central programming!\n\n\nImportant: This course is not intended to prepare you for the MB-820 Certification. Instead, it focuses on practical, real-world concepts to support you in your day-to-day work as a Business Central developer.",
      "target_audience": [
        "Individuals looking to start a career in software development and seeking to gain foundational skills in programming within Dynamics 365 Business Central.",
        "Professionals wanting to enhance their technical knowledge and learn how to customize Business Central solutions to better meet organizational needs.",
        "Those working in IT support or administration who wish to broaden their skill set by learning how to extend and customize Business Central applications.",
        "Business owners interested in understanding how to tailor Business Central to fit their unique operational requirements and improve efficiency."
      ]
    },
    {
      "title": "Blockchain Programming with Hyperledger Composer and Fabric",
      "url": "https://www.udemy.com/course/blockchain-programming-with-hyperledger-composer-over-fabric/",
      "bio": "Learn blockchain programming using Hyperledger Fabric and Composer. Develop a Supply Chain application with Hyperledger.",
      "objectives": [
        "You will have a strong understanding about how to develop Hyperledger Composer Applications",
        "You will have a strong understanding on how to deploy Smart Contracts on Hyperledger Fabric",
        "You will learn how to use Hyperledger IDEs and work with Hyperledger Composer Playground",
        "You will learn how to deploy applications over Hyperledger Fabric development servers."
      ],
      "course_content": {
        "Introduction to the Course": [
          "Course Outline",
          "Prerequisites for the Course",
          "Getting Started: Instant Support"
        ],
        "Introduction to Distributed Ledgers": [
          "Distributed Ledger Technology",
          "Cryptography, Transactions and Smart Contracts",
          "Learning about DLTs"
        ],
        "Introduction to Hyperledger Fabric": [
          "Introduction to Hyperledger",
          "Getting to know Hyperledger Fabric",
          "Hyperledger Fabric Functionalities",
          "Hyperledger Fabric Key Features",
          "Learning about Hyperledger"
        ],
        "Overview of Hyperledger Fabric Transaction Flow": [
          "Transaction Flow Overview",
          "Steps involved in Transaction Flow",
          "Learning about Transaction Flow"
        ],
        "Introduction to Hyperledger Composer": [
          "Introduction to Hyperledger Composer",
          "Key Concepts: Blockchain State Storage, Connection Profiles and Assets",
          "Key Concepts: Participants, Identities, Business Network Cards and Transactions",
          "Key Concepts: Queries, Events, Access Control and Historian Registries",
          "Hyperledger Composer Glossary Terms",
          "Learning about Hyperledger Composer"
        ],
        "Working of Hyperledger Composer": [
          "How does Hyperledger Composer Work?",
          "Architecture of Hyperledger Composer",
          "Work with Hyperledger Composer"
        ],
        "Prerequisites for setting up Hyperledger Composer": [
          "Prerequisites which are required for the development environment",
          "Setting up the prerequisites for Hyperledger Composer Playground",
          "Text: Setting up the prerequisites for Hyperledger Composer"
        ],
        "Hyperledger Composer NPM Modules": [
          "Hyperledger Composer NPM Modules"
        ],
        "Setting up Hyperledger Composer Environment": [
          "Installing Hyperledger Composer Modules",
          "Text: Installing Hyperledger Composer Modules",
          "Hyperledger Composer Playground Overview",
          "Hyperledger Composer Common CLI Commands",
          "Setting up Hyperledger Fabric Dev Servers",
          "Text: Setting up Hyperledger Fabric Dev Servers"
        ],
        "Introduction to the Capstone Project": [
          "Introduction to the Capstone Project - Supply Chain",
          "Steps to create Hyperledger Composer Solution"
        ]
      },
      "requirements": [
        "Prior experience with any programming language is preferred. This course is specifically a Developer's course.",
        "Anyone who wishes to learn development with Hyperledger Composer over Hyperledger Fabric or has a passion to learn about Blockchain programming is welcome to take up this course."
      ],
      "description": "Learn from the industry experts!\n\n\nLearn how to use Hyperledger Composer with Hyperledger Fabric in order to create extensive applications in the simplest terms.\n\n\nWelcome to the Blockchain Development with Hyperledger Composer Course. Hyperledger Composer consists of a set of collaboration tools that help in the development of the Blockchain business networks. Hyperledger Composer is an application development framework that helps us to simplify the creation of Hyperledger Fabric Blockchain applications. This course has been designed in such a way that you will get a thorough understanding of how the build Blockchain applications and deploy over the Hyperledger Fabric Blockchain. This is a very specific course which explains how to use Hyperledger Composer for developing Hyperledger Fabric Blockchain applications with the help on a Capstone Project.\n\n\nThis is a Developer's course, this course is created in order to give a clear understanding of how to create Blockchain applications using Hyperledger Composer.\n\n\nIn 2018, the rise in jobs in the Blockchain sector has been 7000%. For every 14 jobs in the USA, there is only 1 person who is available to take up a job in Blockchain Technology. Hyperledger Fabric is a solution that is at the top of the curve for governments and enterprises. Industries like Walmart, McDonald's, Nestle, Dole, etc. have already implemented Hyperledger Fabric and many more are seeking the help of Hyperledger Platform to solve their problems and get an efficient solution.\n\n\nWhat you will get with this course:\nIn order to make this course more interactive, we have provided various quizzes as a part of the modules. You will get more clarity and will be able to master all the important topics related to the usage of Hyperledger Composer and the key concepts of Hyperledger Fabric.\n\n\nWhat we cover in this course:\nOverview of different projects under the Hyperledger Umbrella\nIntroduction to Hyperledger Fabric\nKey Functionalities offered by Hyperledger Fabric\nKey Concepts of Hyperledger Fabric\nTransaction Flow\nIntroduction to Hyperledger Composer\nWorking model for Hyperledger Composer\nHyperledger Composer Architecture\nLearning to build Business Networks using a Capstone Project\nWorking with Hyperledger Composer Playground\nSetting up Hyperledger Fabric Development Environment\nLearning to work with Modelling Language\nCreating Transaction Processor Functions\nLearning to work with Access Control Language\nCreating Queries using Bespoke Query Language\nDeploying Blockchain Applications over Hyperledger Fabric\nHyperledger API and Command Line Tools\nBonus material we provide:\nYou will learn to run REST servers for generating APIs for Business Networks.\nYou will learn to create/generate Angular 4 applications over Business Networks.\nWe2Blocks is a Blockchain Consultation and Training Company having a global presence. With this course, we aim to promote Blockchain and create an environment for people interested in Blockchain to learn and expand their knowledge.",
      "target_audience": [
        "Professionals curious to learn how to use Hyperledger Composer for developing Hyperledger Blockchain applications",
        "Software Developers curious to learn about Hyperledger Composer over Hyperledger Fabric",
        "Blockchain Consultants curious to learn about Hyperledger Composer",
        "Students curious to learn about Hyperledger Composer and how it is being used in the industry",
        "People curious to start their career in Hyperledger Fabric and Composer",
        "Managers curious to learn how to use Hyperledger in real world projects"
      ]
    },
    {
      "title": "Autonomous Robots: Path Planning",
      "url": "https://www.udemy.com/course/autonomous-robots-path-planning/",
      "bio": "Use A* Search (A-star Search) to find a route between any two locations in New York City, just like Google Maps does!",
      "objectives": [
        "Enough about A* Search (A-star) and Path Planning to defend it in an interview",
        "General robotics systems knowledge",
        "Python and its usefulness in robotics"
      ],
      "course_content": {
        "Introduction": [
          "Problem Setup",
          "Simulator Setup",
          "Conda Environments",
          "Old Simulator Setup",
          "What to do if you are still have issues with Python",
          "Assignment 0 - Intro"
        ],
        "BFS and DFS Grid World": [
          "BFS and DFS Intro",
          "BFS and DFS Implementation",
          "Assignment 1 - Intro",
          "Assignment 1 - Solution"
        ],
        "A* Search Grid World": [
          "A* Search Intro",
          "Assignment 2 - Intro",
          "Assignment 2 - Solution 1",
          "Assignment 2 - Solution 2"
        ],
        "A* Search New York City": [
          "New York City Intro",
          "Assignment 3 - Intro",
          "Assignment 3 - Solution"
        ],
        "A* Search - Advanced Heuristics": [
          "Assignment 4 - Intro",
          "Assignment 4 - Solution"
        ],
        "Outro": [
          "Outro"
        ]
      },
      "requirements": [
        "No Python or programming experience required. I'll teach you everything you need to know."
      ],
      "description": "Ever Wondered How Google Maps Calculates the Route To Your Destination? Learn How To Design A Path Planning System of Your Own!\nKnowing how to plan a path between your current location and your goal is an essential skill whether its for a self-driving car / autonomous vehicle, a roomba, or even an app like Uber, Waze, or Google Maps.\nIn this course you won't just learn concepts but will also have a chance to implement, test, and a see the results of your work in real time. For the final project of this course you will need to plan a path between any two locations in New York City. Like Frank Sinatra says, if you can plan a path there, you can plan one anywhere!\nWith this course, you can level up your knowledge, add an additional skill to your robotics arsenal, and do it all through a program that feels more like a game than it does a class.\nThis course will teach the A* search algorithm, which is a fundamental robotics algorithm. This algorithm is so fundamental it was even used on the very first mobile robot, Shakey the Robot.\nWhat are you waiting for?\nEnroll now and see what you can learn.",
      "target_audience": [
        "Current or future Roboticists looking to learn about a core part of the robotics software stack"
      ]
    },
    {
      "title": "Model Based Design: Build Embedded Systems with Simulink",
      "url": "https://www.udemy.com/course/model-based-design-build-embedded-systems-with-simulink/",
      "bio": "Model Based Development - MBD: From Requirements to Testing on Hardware",
      "objectives": [
        "Understand the concept of Model Based Design",
        "Navigate the Simulink Environment",
        "Configure Simulink Model for Code Generation",
        "Integrate Hand-Written Code with Generated Code from Simulink",
        "Deploy Code on Microcontroller",
        "Test Code on Real Hardware",
        "Requirements Analysis",
        "Interface Sensors and Actuators with Microcontroller",
        "Develop Algorithms for Different Sensors Using Simulink",
        "How to Read and Write Digital Signals",
        "Read Analog Signals",
        "Measure Distance Using Ultrasonic Sensor",
        "Use LDR (Photoresistor)",
        "Develop Algorithm for Rotary Encoder",
        "Algorithm for Infrared Sensor",
        "DC Motor Control using Digital and Analog Signals"
      ],
      "course_content": {
        "Introduction": [
          "Introduction to Model Based Design",
          "Quiz 1",
          "MBD Example (DC Motor Control - Part 1)",
          "MBD Example (DC Motor Control - Part 2)",
          "Quiz 2"
        ],
        "Tools and Development Techniques": [
          "Introducing the Software Architecture",
          "Quiz 3",
          "Tools installation Guide",
          "Model Configuration",
          "Quiz 4",
          "Hardware Components List"
        ],
        "Digital Inputs and Outputs": [
          "Digital Input and Output (Part 1 - Modeling)",
          "Digital Input and Output (Part 2 - Deploy on HW )",
          "Deploy Code on STM32F103C8",
          "Deploy Code on ESP32 Dev Module",
          "Quiz 5",
          "Directional Lights System"
        ],
        "Analog Signals": [
          "Analog Signals - Potentiometer",
          "DC Motor Speed Control (Part 1)",
          "DC Motor Speed Control (Part 2)",
          "DC Motor Speed Control (Part 3)",
          "Analog Signals - LDR"
        ],
        "Miscellaneous Topics": [
          "Ultrasonic Sensor",
          "Infrared Obstacle Avoidance Sensor",
          "Rotary Encoder (Part 1)",
          "Rotary Encoder (Part 2)",
          "Rotary Encoder (Part 3)",
          "Simulink Support Package for Arduino"
        ],
        "Questions & Answers": [
          "Q&A [Atomic Subsystem Vs Function-Call Subsystem]"
        ],
        "Tasks - ( Optional )": [
          "Directional Lights System Update",
          "Motor Speed Control Update",
          "Course Review"
        ]
      },
      "requirements": [
        "Basic Knowledge of Embedded Systems, Simulink is preferred but not necessary"
      ],
      "description": "Model Based Design: to be MBD Engineer\nWe will dive into the world of Model Based Design and Embedded Systems, explore the entire software development life cycle.\nInitiate the process by comprehending the requirements, transforming them into models, generate code from models, integrate codes and deploy on hardware.\nThroughout this course, we will guide you systematically in the creation of embedded systems projects and leveraging the power of the model based approach with Simulink.\nYou’ll gain expertise in constructing models tailored for code generation, deploying this code seamlessly onto microcontrollers, and conducting real-world hardware testing.\nFurthermore, we will provide you with a comprehensive introduction to the essential Simulink blocks that are frequently utilized in embedded software projects within industries such as automotive.\nIn addition, you will learn the common design concepts in industry such as implementation of counters, debouncing algorithm and other topics.\nLearn how to interface different sensors, design models to use data from them and to control different actuators.\nThis course will build your knowledge step by step and prepare you to start your journey as model based design engineer in industries such automotive, aerospace and robotics by building real embedded systems projects starting from basic examples to more complex designs.\nThis course will teach you how to handle the following sensors and actuators using model based design techniques:\nModelling using multiple Simulink blocks such as:\nMath blocks, Logic blocks\nPID controller, Inputs and outputs blocks,\nIf/else block, Switch Case blocks, Merge block\nAtomic subsystems, Enabled subsystem\nTruth Tables\nStateflow chart\nImplement commonly used algorithm in automotive and other industries such as Counters and Denouncing algorithm\nGenerate C Code and Deploy on Micro-Controller Target [Ex: Arduino, STM32 and ESP32]\nDigital inputs and outputs (Buttons and LEDs)\nAnalog signals (Potentiometer)\nCombine digital and analog signals in a control algorithm to control motor speed\nLDR\nUltrasonic Sensor\nInfrared Obstacle Avoidance Sensor\nRotary Encoder\nSimulink Support Package for Arduino\nIn each lesson we will learn a new design technique and introduce you to multiple ways of building the same functionality to enhance your modeling skills and deploying .\n\n\nCourse Updates:\n[April 2025]\nNew Lesson in Questions and Answers section [ Atomic vs Function Caller Subsystem]\n[Jan 2025]\nNew lesson on deploying generated code on STM32 uC\nNew lesson on deploying generated code on ESP32",
      "target_audience": [
        "Anyone who is interested in developing a full embedded systems project using model based design approach.",
        "Undergraduate and graduate students seeking a model-based development engineering position"
      ]
    },
    {
      "title": "Event Driven Microservices with CQRS, Saga, Event Sourcing",
      "url": "https://www.udemy.com/course/event-driven-microservices-with-cqrs-saga-event-sourcing/",
      "bio": "Develop Event Driven Microservices using Spring Boot, Axon framework, CQRS, Saga, Event Sourcing patterns",
      "objectives": [
        "Command Query Responsibility Segregation (CQRS)",
        "Event sourcing pattern",
        "Saga pattern",
        "Transactional Outbox Pattern",
        "Materialized View Pattern",
        "API composition pattern",
        "Database-per-service pattern",
        "Event Driven microservices"
      ],
      "course_content": {},
      "requirements": [
        "Java",
        "Good knowledge on Spring Boot, Microservices"
      ],
      "description": "Unlock the power of modern, event-driven microservices architecture with Spring Boot and the Axon Framework in this hands-on, project-based course. Dive deep into advanced patterns like CQRS (Command Query Responsibility Segregation), Saga, Event Sourcing, and essential microservices design principles to build robust, scalable applications.\nThis course is designed for developers and architects eager to gain expertise in building complex, distributed systems using event-driven patterns. From designing domain-driven services to managing data consistency across services, you’ll learn to address real-world challenges while creating resilient and high-performance microservices.\nWhat You’ll Learn:\nEvent-Driven Architecture Fundamentals: Master the foundations of event-driven design and understand when to use it in microservices.\nImplementing CQRS: Understand the Command Query Responsibility Segregation (CQRS) pattern, separating read and write concerns for optimized performance and scalability.\nHandling Complex Business Transactions with Sagas: Learn to coordinate distributed transactions across multiple microservices using the Saga pattern, ensuring consistency without traditional locking mechanisms.\nEvent Sourcing: Capture every state change in an event log for an immutable record of historical data and easier debugging, replay, and auditability.\nDatabase-per-Service Pattern: Maintain data independence for each microservice using separate databases, enabling easier scaling and independent deployment.\nAPI Composition Pattern: Create aggregated, composite APIs at the gateway level to simplify client interactions with multiple services.\nMaterialized View Pattern: Use read-optimized views for efficient querying, ensuring responsive and scalable data access in CQRS-based applications.\nTransactional Outbox Pattern: Ensure data consistency by safely publishing events from within your transaction boundary, eliminating potential data synchronization issues.\nKey Technologies Covered:\nSpring Boot: Build and deploy microservices with the popular Spring Boot framework.\nAxon Framework: Leverage the Axon Framework’s powerful toolkit to implement CQRS and event-sourcing patterns.\nMessage Brokers: Integrate with message brokers for reliable event publishing.\nMicroservices Best Practices: Use design principles, patterns, and tools to enhance resilience, performance, and scalability.\nHands-On Learning:\nThis course is packed with real-world examples, hands-on exercises, and guided projects to solidify your skills. You’ll walk away ready to apply these advanced patterns in real projects, design robust microservices, and tackle common challenges in event-driven architectures with confidence.\nWho Should Enroll:\nSoftware developers and architects interested in advanced microservices design.\nEngineers seeking hands-on experience with CQRS, Saga, Event Sourcing, and other cutting-edge patterns.\nDevelopers looking to learn Spring Boot and the Axon Framework to build event-driven systems.\nBy the end of this course, you’ll be fully equipped to design and develop sophisticated, event-driven microservices that handle complex data consistency challenges with ease, providing a solid foundation for any high-scale, high-resilience distributed application.",
      "target_audience": [
        "Developers who already know developing microservices using Spring Boot but looking to learn event driven patterns",
        "Java Architects"
      ]
    },
    {
      "title": "UML Class Diagrams for Programmers",
      "url": "https://www.udemy.com/course/uml-class-diagrams-for-programmers/",
      "bio": "Learn how to use UML Class Diagrams as a valuable communication and software architecture tool with practical guidance.",
      "objectives": [
        "Understand how to use UML Class Diagrams for effective communication.",
        "Understand how to read and create UML Class Diagrams.",
        "Understand how to design object-oriented classes in UML.",
        "Understand the different categories of UML diagrams.",
        "Understand the value of UML - even if it is done by hand.",
        "Understand the different concepts - like relationships - that apply to UML Class Diagrams.",
        "Understand how to write code based on UML Class Diagrams.",
        "Understand which elements of UML Class Diagrams are most useful."
      ],
      "course_content": {
        "Introduction": [
          "Welcome",
          "Class Diagrams - A Glimpse of the Final Example",
          "Introduction",
          "Types of UML Diagrams",
          "Note on Diagram Presentation",
          "Quiz"
        ],
        "Section 2: Class Diagrams": [
          "Class Diagrams - Basic Concepts",
          "Class Diagrams - Basic Concepts",
          "Class Diagrams - Basic Concepts",
          "Class Diagrams - Relationships",
          "Class Diagrams - Relationships (continued)",
          "Class Diagrams - Relationships",
          "Class Diagrams - Relationships",
          "Class Diagrams - Advanced Concepts",
          "Class Diagrams - Advanced Concepts",
          "Class Diagrams - Advanced Concepts",
          "Class Diagrams - Interfaces and Enumerations",
          "Interfaces and Enumerations",
          "Class Diagrams - Interfaces and Enumerations"
        ],
        "Online Store Example": [
          "Online Store Example - Requirements",
          "Online Store Example - UML",
          "Online Store Example - Full Diagram and Code"
        ],
        "Summary": [
          "Tips for creating Diagrams",
          "Summary",
          "Course Supplement - Reference Guide",
          "Bonus Lecture - Coupons"
        ]
      },
      "requirements": [
        "An understanding of object-oriented programming concepts will be useful.",
        "An understanding of general system concepts will be useful.",
        "No knowledge of any specific programming languages is required.",
        "No prior experience with UML is required.",
        "A desire to learn about UML and how to use it.",
        "No specific UML-tools are required; this course is about concepts, not tools."
      ],
      "description": "UML is a valuable tool - do you know how to use it?\nAs programmers, we rarely work in isolation - we often have to communicate our designs and our ideas to our colleagues.  In addition, we get specifications from analysts and architects that we need to understand.  UML can be incredibly valuable for this kind of communication!\nIn this course, I want to teach you how you, as a programmer, can make the most of UML Class diagrams, both as a tool for effectively communicating with other programmers, analysts, and architects, and also as a valuable tool for software architecture and design.  Because this is a course for programmers, we'll look at lots of source code as we create diagrams.  Finally, the video lectures are supplemented with written material that you can refer back to at any time.\nWe'll start by looking at the value that we can get from UML Class Diagrams.  We'll cover basic concepts, such as how classes are represented in UML.  We'll look at the relationships that can exist between class, and at how we can represent certain specialized classes.  We'll also work through a detailed example to help reinforce everything that you'll learn during the course.\n\nIn the course, I want to help you do a couple of different things.  I want to help you understand the fundamental concepts of UML Class Diagrams, effectively communicate with your peers using UML Class Diagrams, read UML Class Diagrams created by other people, create your own UML Class Diagrams, and understand how to get value out of UML Class Diagrams, without the need for expensive tools.\nThis course is aimed at programmers who want to use UML Class Diagrams to improve how they work, as well as software architects and analysts who create UML diagrams for other people - such a specifications.\nYou won't need much for this course, although it's not a course for beginner programmers.  We will talk about object-oriented programming concepts quite a lot, so it will be good if you have experience with object-oriented languages like Java or C#, otherwise some parts of the course might be difficult to follow.  You'll also need motivation and a desire to learn.  You will not need any experience with UML, or any expensive UML tools - in this course, we'll focus on the fundamentals, so no specific tools - you can even draw diagrams on paper if you want.  I want to help you understand the concepts, not the tools!  The tools are irrelevant - diagrams drawn on paper or a whiteboard as just as good as diagrams drawn in an expensive tool.\nSee you in the course!\n\n\nSome Review Feedback\n\"Reading UML Class Diagrams is a essential skill to all BA's and Developers Countless hours can be saved by understanding your requirements as a Developer\"\n\"Good course, I really appreciate it!\"\n\"I got exactly what I was looking for, a brief intro/refresher to UML concepts and methods along with very practical advice.\"\n\"Great material for class diagrams.\"\n\n\nThis course includes the option of a 30-day, no-questions-asked refund.\n*Image courtesy of Pexels.",
      "target_audience": [
        "Programmers (junior/intermediate/senior).",
        "Software Architects.",
        "Business/Systems Analysts."
      ]
    },
    {
      "title": "Mastering Computational Geometry Algorithms with C++",
      "url": "https://www.udemy.com/course/mastering-computational-geometry-cpp/",
      "bio": "Zero to Hero guide to Computational geometry algorithm in C++.",
      "objectives": [
        "Applications of Computational Geometry algorithms.",
        "Able to implement Computation Geometry algorithms with C++",
        "Precision and Performance concern and how to solve them when implementing Computational Geometry Algorithms",
        "Solid understanding on Mathematics and the interpretation of Mathematics behind Computational Geometry",
        "Solid understanding on Vector algebra to be using in Computational Geometry."
      ],
      "course_content": {
        "Introduction to Computational Geometry and Vector algebra.": [
          "Setting up the Environment",
          "Hello Computational Geometry",
          "Learning Goals for this Section",
          "Application of Computational Geometry",
          "Basic Terms",
          "Introduction to Vector Algebra",
          "Vector Dot Product",
          "Vector Cross Product",
          "Basics Of Vector Algebra",
          "Implementation of Vector Class",
          "Magnitude and Normalize functions.",
          "Basic operations of Vector Class",
          "Finding Relative Position of a Point Compared to a Line",
          "Representation of a Line",
          "Representation of a Plane",
          "Intersection of two lines.",
          "Intersection Point of Two Lines",
          "Calculating Angle Between Two Lines",
          "Angle Between a Line and a Plane",
          "Collinear and Coplanar tests",
          "Distance Between Point and a Line",
          "Distance Between Point and a Plane",
          "Intersection Between Line and a Plane",
          "Intersection between two Plane",
          "Overview of needed Data Structures and Algorithms"
        ],
        "Polygon Partitioning.": [
          "Art Gallery theorem",
          "Polygon Triangulation by Ear Clipping - Introduction",
          "Simple Polygon Representation",
          "Diagonal Test",
          "Polygon Triangulation by Ear Clipping - Algorithm Implementation",
          "DCEL - Introduction",
          "DCEL - Construction",
          "DCEL - Utility functions and Split function",
          "Introduction to monotone polygons",
          "Explanation of monotone polygon partitioning algorithm",
          "Monotone Polygon Partitioning Implementation"
        ],
        "Line Segment Intersection": [
          "Applications of line segment Intersection",
          "Manual rundown of Line segment Intersection algorithm",
          "Introduction to Plane Sweep algorithm for finding line segment intersection",
          "Implementation of Plane Sweep Algorithm"
        ],
        "Convex hulls": [
          "Applications of Convex hulls",
          "Convex hull 2D : Gift wrapping algorithm",
          "Convex hull 2D : Modified Graham's Scan",
          "Convex hull 3D - Introduction to the algorithm",
          "Convex hull 3D - Utility functions",
          "Convex hull 3D - Implementation"
        ],
        "Trees": [
          "Binary Search Tree - Introduction, Construction, Insert and Traversal functions",
          "Add a pointer called parent to BSTNode structure.",
          "Binary Search Tree - Search, Minimum, Maximum, Predecessor and Successor",
          "Lecture 40: Binary Search Tree - Delete function"
        ],
        "Range Queries": [
          "Introduction to Range Queries",
          "1D Range Query with BST",
          "KD Trees - Introduction and Construction",
          "KD Trees - Search Queries",
          "KD Trees - Search Queries - Implementation part 2",
          "KD Trees - Nearest Neighbor and Overlapped Segments and Collisions",
          "Range Trees",
          "2D Range Query with Range Trees"
        ],
        "Section 8 : Quad Trees": [
          "Applications of Quad trees",
          "Introduction to quad tree construction",
          "Implementation of Quad tree construction",
          "Finding neighbors of a node in quad tree",
          "Implementation of balancing a Quad tree"
        ],
        "Graph Theory": [
          "Introduction",
          "Lets learn some jargon part 1",
          "Lets learn some jargon part 2",
          "Adjacency matrix representation of a graph",
          "Adjacency list representation of a graph",
          "Comparison between two implementations",
          "Breadth first search (BFS)",
          "Breadth first search implementation",
          "Depth first search",
          "Predecessor sub graphs",
          "Classification of edges in predecessor sub graph",
          "Topological search of a directed graph",
          "Topological sort implementation",
          "Strongly connected component of a graph",
          "Strongly connected component of a graph implementation",
          "Shortest path algorithms introduction",
          "Bellman ford algorithm",
          "Bellman ford algorithm implementation",
          "Shortest path in DAG",
          "Dijkstra's algorithm of finding shortest path",
          "Dijkstra's algorithm of finding shortest path explanation",
          "Dijkstra's algorithm of finding shortest path implementation",
          "Minimum spanning tree introduction",
          "MST- Kruskal's algorithm introduction part 1",
          "MST-Kruskal's algorithm introduction part 2",
          "MST-Kruskal's algorithm implementation",
          "MST-Prims algorithm introduction",
          "MST-Prims algorithm implementation",
          "Introduction to flow networks",
          "Max flow min cut theorem"
        ]
      },
      "requirements": [
        "Knowledge on basic data structures and algorithms will be helpful.",
        "Hands on experience with any programming language."
      ],
      "description": "Computational Geometry algorithms have tons of applications in the fields like computer games, computer simulation, computer graphic, CAD/CAM software's, Navigation systems and many more day to day applications. But the data structure and algorithms fall under this category is still considered specialized area due to inherit complexities of those. To become fluent in computational geometry you need at least following knowledge.\nThrough knowledge on linear algebra and geometrical representation of  those.\nMathematical representation of  geometrical shapes.\nComputational steps for primitive test like intersection and distance queries.\nGood understanding on algorithms in computational geometry and where to use those.\nIn this course I will cover all the required knowledge for you to be fluent and confident on Computational Geometry. Following are the topic expected to cover in this course.\nTopics\nBasics of linear algebra including vector and matrix arithmetic and implementation of those operations.\nMathematical representation of basic geometry primitives and implementation.\nComputational approach for finding intersections and distance between basic primitives like rectangles, lines, planes etc.\nOrientation test on geometric primitives.\nPolygon triangulation.\nMonotone polygon partition.\nPlane sweep algorithms.\nConvex hull calculations and implementation in both 2D and 3D space.\nOverview of simple tree data structures like Binary Search Trees (BST) and Red Black Tree (RBT)\nKD Tree implementation and range queries using KDTrees.\nRange Trees..\nGraph Theory",
      "target_audience": [
        "Algorithm enthusiasts.",
        "Competitive Programmers.",
        "Anyone who seek advanced real-world applications of algorithms",
        "University students",
        "Software developers"
      ]
    },
    {
      "title": "Create a Python Powered Chatbot in Under 60 Minutes",
      "url": "https://www.udemy.com/course/create-a-python-powered-chatbot-in-under-60-minutes/",
      "bio": "No previous Python experience necessary!",
      "objectives": [
        "Running a web server using Python and Flask",
        "Create a smart, highly interactive Chatbot",
        "Publish a Chat Bot to the web for free!",
        "Installing Python",
        "Installing packages from Github",
        "Running Python code"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "What you’ll learn / Who is this course for?",
          "What you'll need to complete the course"
        ],
        "Setting Up Your Development Environment": [
          "Introduction",
          "Install Python",
          "Install Git",
          "Install Thonny IDE",
          "Lecture 7B: Install Packages to Thonny",
          "Google Sheets"
        ],
        "Install Chatbot Python Packages": [
          "Introduction",
          "Download the ChatBot package with Git",
          "Install Required Packages",
          "Testing your ChatBot Installation"
        ],
        "Programming Your ChatBot": [
          "Introduction",
          "Adding Knowledge to your Bot",
          "Test Your ChatBot!"
        ],
        "Adding Personality to your Bot": [
          "Introduction",
          "Intro #2: Software Update",
          "Set the Name and \"Look\" for your Bot",
          "ChatBot Confidence",
          "Random Responses",
          "Custom Responses for Date, Time, and Uncertainty",
          "Advanced Responses",
          "Learning From Conversations",
          "Don't Forget to Back up Your Bot!",
          "Customizing Your Bot Even More",
          "Section Review"
        ],
        "Sharing Your Bot With the World": [
          "Publish Your ChatBot to PythonAnyWhere"
        ],
        "Congratulations!": [
          "You've completed the course!"
        ],
        "BONUS: Beyond 60 Minutes: Making Your Bot Even Better": [
          "Introduction",
          "Bonus #1: Adding Buttons To Responses Intro",
          "How To Add Suggestion Buttons To ChatBot Responses"
        ]
      },
      "requirements": [
        "Access to a computer",
        "Internet Access"
      ],
      "description": "This course is designed to be accessible to brand new Python programmers but also worthwhile for more experienced Pythonistas who want to get started with AI and Natural Language processing.\n\n\nYou do not any previous experience with Python or programming to be successful in this course.\nYou can use a Windows or Mac computer to complete the course (or Linux for that matter).\n\n\nThis course will cover the following:\nSetting up your development environment\nDownloading and installing Python\nDownloading and installing a free IDE to work with our code\nInstalling the ChatBot package\nCustomizing and training your ChatBot\nSharing your ChatBot with the world",
      "target_audience": [
        "Beginner to intermediate Python users eager to create an interactive Chatbot",
        "Students looking for a beginner level, practical Python project"
      ]
    },
    {
      "title": "Computer Vision with Python",
      "url": "https://www.udemy.com/course/computer-vision-with-python/",
      "bio": "Introduction to Computer Vision, make vision apps",
      "objectives": [
        "Do image processing",
        "Use basic Computer Vision techniques",
        "Build: Image Similarity app",
        "Build: Search Engine app",
        "Build: Face Detection app",
        "Build: Object Detection app using templates",
        "Build: Object Detection app using Keypoints"
      ],
      "course_content": {
        "Inroduction": [
          "Intro"
        ],
        "Install OpenCV": [
          "Installation"
        ],
        "Media with Python": [
          "Load Image",
          "Color to Grayscale Conversion",
          "Metadata",
          "Quiz 1"
        ],
        "Image Theory": [
          "Pixels and coordinates",
          "Pixel Access",
          "Change Pixels in Image",
          "Draw lines, rectangles, circles",
          "Text on images",
          "Resize Image",
          "Cut Image",
          "Section Quiz"
        ],
        "Feature Extraction": [
          "Feature Vectors",
          "Color-mean Features Theory",
          "Demo: Color-mean Features",
          "Code: Color-mean features",
          "Histogram features",
          "Code: Grayscale Histogram Features",
          "Texture Features (Local Binary Pattern)",
          "Code: Texture-based Features (Local Binary Pattern)",
          "Quiz on Feature Vectors"
        ],
        "App: Image Similarity": [
          "Theory: Image Similarity",
          "App: Image Similarity"
        ],
        "Apps: Reverse Image Search": [
          "Theory: Reverse Image Search Engine",
          "App: Reverse Image Search"
        ],
        "App: Object Detection using Template Matching": [
          "Theory: Template Matching",
          "App: Object Detection app using Templates"
        ],
        "App: Face Detection": [
          "App: Face Detection using Haar Cascade",
          "Theory: Haar Features"
        ],
        "App: Real Life Object Detection using Keypoints": [
          "Object Detection using keypoints",
          "Code: Keypoint Extraction",
          "App: Object Detection using Keypoints"
        ]
      },
      "requirements": [
        "Students will need to know Python programming"
      ],
      "description": "Introduction course to Computer Vision with Python.\nMake Computer Vision Apps?\nLearn Computer Vision theory?\nBuild a strong portfolio with Computer Vision & Image Processing Projects?\nLooking to add Computer Vision algorithms in your current software project ?\nWhatever be your motivation to learn Computer Vision, I can assure you that you’ve come to the right course.\nThis course is tailor made for an individual who wishes to transition quickly from an absolute beginner to a Computer Vision expert in a few weeks. The most difficult concepts are explained in plain and simple manner using code examples.\nWe will build:\nMultimedia apps\nImage Similarity apps\nObect Detection apps\nFace detection apps\nReverse Image Search app\nI personally guarantee this is the number one course for you. This may not be your first OpenCV course, but trust me - It will definitely be your last.\nI assure you, that you will receive fast, friendly, responsive support by email, and on the Udemy.\nDon't believe me? I offer a full money back guarantee, so long as you request it within 30 days of your purchase of the course.\nAlso the course is updated on a regular basis to add more new and exciting content.\nJoin the course right now.  So what are you waiting for ?\nLet’s meet at the other side of the course.",
      "target_audience": [
        "For anyone interested in Computer Vision and knows the basics of Python programming"
      ]
    },
    {
      "title": "Learn Parallel Programming with C# and .NET",
      "url": "https://www.udemy.com/course/parallel-dotnet/",
      "bio": "Discover the core multithreading and parallelization concepts supported by the .NET framework.",
      "objectives": [
        "Create and run independent tasks",
        "Manage synchronized access to data",
        "Effectively use parallel collections",
        "Work with task continuations",
        "Write parallel loops",
        "Leverage the power of Parallel LINQ",
        "Master asynchronous programming (async/await)"
      ],
      "course_content": {
        "Course Introduction": [
          "Course Introduction"
        ],
        "Task Programming": [
          "Overview",
          "Creating and Starting Tasks",
          "Cancelling Tasks",
          "Waiting for Time to Pass",
          "Waiting for Tasks",
          "Exception Handling",
          "Summary"
        ],
        "Data Sharing and Synchronization": [
          "Overview",
          "Critical Sections",
          "Interlocked Operations",
          "Spin Locking and Lock Recursion",
          "Mutex",
          "Reader-Writer Locks",
          "Summary"
        ],
        "Concurrent Collections": [
          "Overview",
          "ConcurrentDictionary",
          "ConcurrentQueue",
          "ConcurrentStack",
          "ConcurrentBag",
          "BlockingCollection and the Producer-Consumer Pattern",
          "Summary"
        ],
        "Task Coordination": [
          "Overview",
          "Continuations",
          "Child Tasks",
          "Barrier",
          "CountdownEvent",
          "ManualResetEventSlim and AutoResetEvent",
          "SemaphoreSlim",
          "Summary"
        ],
        "Parallel Loops": [
          "Overview",
          "Parallel Invoke/For/ForEach",
          "Breaking, Cancellations and Exceptions",
          "Thread Local Storage",
          "Partitioning",
          "Summary"
        ],
        "Parallel LINQ": [
          "Overview",
          "AsParallel and ParallelQuery",
          "Cancellation and Exceptions",
          "Merge Options",
          "Custom Aggregation",
          "Summary"
        ],
        "Asynchronous Programming (Async/Await)": [
          "Overview",
          "Using Async and Await",
          "State Machines",
          "Task.Run",
          "Task Utility Combinators",
          "Async Factory Method",
          "Asynchronous Initialization Pattern",
          "Asynchronous Lazy Initialization",
          "ValueTask",
          "Summary"
        ],
        "Course Summary": [
          "Course Summary",
          "Bonus Lecture: Other Courses at a Discount"
        ]
      },
      "requirements": [
        "Basic knowledge of C# and .NET framework",
        "Basic knowledge of multithreading"
      ],
      "description": "This course is about .NET Parallel Programming with C# and covers the core multithreading facilities in the .NET Framework, namely the Task Parallel Library (TPL) and Parallel LINQ (PLINQ).\nThis course will teach you about:\nTask Programming: how to create and run tasks, cancel them, wait on them and handle exceptions that occur in tasks.\nData Sharing and Synchronization, ensuring your access to shared data also happens in a safe and consistent manner.\nConcurrent Collections, such as ConcurrentBag, which operate correctly even when accessed from multiple threads.\nTask Coordination concepts, including the idea of continuations, as well as uses of synchronization primitives to coordinate tasks.\nParallel Loops which let you easily iterate over a counter or collection while partitioning the data and processing it on separate threads.\nParallel LINQ, the parallel version of .NET's awesome Language-Integrated Query (LINQ) technology.\nAsync/Await and .NET's support for asynchronous programming.\nThis course is suitable for:\nBeginner and experienced .NET/C# developers\nAnyone interested in multi-threading, parallelism and asynchronous programming\nThe course consists of the following materials:\nVideo lectures showing hands-on programming\nC# files that you can download and run\nBefore taking the course, you should be comfortable with the C# programming language and familiar with multi-threading.",
      "target_audience": [
        "Beginner and experienced .NET developers",
        "Computer Science students",
        "Anyone interested in modern approaches to multithreading/parallelism"
      ]
    },
    {
      "title": "The Linux Command Line Bootcamp: Beginner To Power User",
      "url": "https://www.udemy.com/course/the-linux-command-line-bootcamp/",
      "bio": "Level Up Your Skills And Take Control Of Your Machine, w/ Dozens of Commands, Projects, and Challenges!",
      "objectives": [
        "Master the Command Line and Dozens of Commands!",
        "Stop Relying On The Limited Graphical User Interface",
        "Write Your Own Commands From Scratch",
        "Automate Tasks and Schedule Jobs Using Cron",
        "Control Your Computer Completely From The Command Line!",
        "Master The Quirks Of File Permissions",
        "Learn Powerful Keyboard Shortcuts To Improve Your Efficiency",
        "Construct Powerful Command Pipelines"
      ],
      "course_content": {
        "The Super Quick Course Orientation Stuff": [
          "Welcome To The Course!",
          "Join The Community!",
          "Why Learn The Command Line",
          "Finding The Slides & Exercises",
          "One Small Piece Of Advice"
        ],
        "Introduction": [
          "The World Of Operating Systems",
          "What Are Unix and Unix-Like?",
          "Exploring The Original Unix Manual",
          "Linux, GNU, Kernels, Oh My!",
          "Explaining Terminals, Shells, & Bash",
          "Installation & Setup!"
        ],
        "Command Basics": [
          "What Actually Matters In This Section",
          "Opening Up The Terminal",
          "Understanding The Prompt",
          "IMPORTANT NOTE: About the ncal Command",
          "Our First Commands!",
          "Using Arrow Keys In The Terminal",
          "Command Line Arguments",
          "Providing Options To Commands",
          "Combining Multiple Options",
          "Using Long-Form Options",
          "Options That Require Parameters",
          "Command Structure Quiz"
        ],
        "Getting Help": [
          "What Actually Matters In This Section",
          "Introducing The Manual",
          "Navigating & Searching A Man Page",
          "Parsing Man Page Synopses",
          "Man Page Syntax Quiz",
          "The 7 Manual Sections & Searching",
          "The Type & Which Commands",
          "Using The Help Command",
          "Getting Help EXERCISE"
        ],
        "Navigation": [
          "What Actually Matters In This Section",
          "The Root Directory",
          "The Home Directory",
          "The pwd Command",
          "Using ls",
          "Helpful options for ls",
          "Changing Directories With cd",
          "Relative Vs. Absolute Paths",
          "Navigation Quiz",
          "Overview Of Other Folders",
          "Navigation EXERCISE"
        ],
        "Creating Files & Folders": [
          "What Actually Matters In This Section",
          "Creating Files With touch",
          "Why Touch is Called Touch",
          "Exploring File Types, Extensions, & the file command",
          "File Names: Good, Bad, & Ugly",
          "Creating Directories With mkdir",
          "Creating Things EXERCISE"
        ],
        "Nano": [
          "What Actually Matters In This Section",
          "Introducing Nano",
          "The Basics of Nano",
          "Creating File With Nano",
          "Mastering Nano Shortcuts",
          "Searching & Replacing in Nano",
          "Configuring Nano & Spellchecking",
          "Nano Exercise"
        ],
        "Deleting, Copying, & Moving": [
          "What Actually Matters In This Section",
          "Deleting Files With rm",
          "Deleting Folders With -d & -r",
          "Moving Files With mv",
          "Moving Folders with mv",
          "Renaming With mv",
          "Copying with cp",
          "Deleting, Copying, & Moving EXERCISE"
        ],
        "Shortcuts & History": [
          "What Actually Matters In This Section",
          "Clearing & Jumping Lines",
          "Jumping Characters & Words",
          "Swapping Characters & Words",
          "Killing Lines, Words, & More",
          "Yanking From The Kill-Ring",
          "History Command & History Expansion"
        ],
        "Working With Files": [
          "What Actually Matters In This Section",
          "The Cat Command",
          "Working With Less",
          "Tac & Rev",
          "Head & Tail",
          "The wc Command",
          "The Sort Command",
          "Advanced Sorting By Field",
          "Working With Files EXERCISE"
        ]
      },
      "requirements": [
        "No Prior Experience Required",
        "All You Need is a Windows, Linux, or Mac Computer"
      ],
      "description": "Welcome to The Linux Command Line Bootcamp, a brand new course that aims to turn you into a command line power user! This course will teach you dozens and dozens of powerful commands (see the long list at the bottom), but more importantly it gives you the tools the continue to learn new commands and take full control of your machine. The skills you learn in this course will make you a stronger web developer, data scientist, machine learning engineer, game dev, or plain old computer user!  You will feel POWERFUL!!\nHi there, my name is Colt Steele. I've spent years leading in-person software engineering bootcamps and have helped thousands of students change careers.  Online I've taught over a million students and have hundreds of thousands of 5 star ratings and reviews.\nThis is an interactive course full of exercises and fun challenges that force you to practice the skills you are learning. You'll encounter some of the same assignments and projects that my in-person bootcamp students experience.  Learning command after command can be a dreadfully boring experience, but I've tried my best to make this course as exciting and interesting as possible :)   You may roll your eyes at my jokes, but you won't be bored!\n============Curriculum: The Short Version============\nThis course covers a TON.  Here's a short summary of the key points.  Scroll down for a more in-depth explanation.\nLearn dozens and dozens of powerful commands (see the long list below)\nUnderstand the big picture: how ALL commands fit together\nBuild complex data pipelines by stringing multiple commands together\nMaster command-line navigation and Linux folder structure\nCreate, delete, move, copy, and rename files and folders\nDecipher and manipulate Unix file permissions\nUse powerful searching commands like find, locate, and grep\nMaster redirection of standard input, standard output, and standard error\nWrite your own custom commands from scratch!\nCustomize the shell: write your own helpful aliases, tweak the prompt, etc.\nMaster Bash expansions and substitutions\nAutomate tedious tasks using cron and cronjobs\nEdit files directly from the command-line using nano\nMaster keyboard shortcuts to increase your command-line efficiency\n============Curriculum: The Long Version============\nThe course starts with a deep dive into confusing technical terms like terminal, shell, kernel, Unix, Unix-Like, GNU,  Linux, and Bash. It's important to understand the context and the WHY's around the command line and its history that still impacts our machines today.\nThen we shift our focus to the general patterns and structure that all commands follow including options and arguments. This blueprint we define will inform every single other topic we cover throughout the rest of the course. You'll also learn HOW to learn more about specific commands using the man, help, which, and type commands.\nNext, we cover the super-important Linux folder structure and learn essential commands for navigating our machines including ls, pwd, and cd. You'll be an expert navigator in no time!\nFrom there we learn to create new files and folders right from the command line using the commands touch, mkdir, and file. Next, we dive deep into a special text-editor built right into the command line called Nano. You'll learn to open and edit files using Nano, master various Nano shortcuts, and even learn how to configure nano's global settings.\nThe next section covers the powerful commands rm, mv, and cp. You'll learn how to remove individual files and entire directories, move and rename files, and copy files and folders right from the command line.  These are some of the most useful commands you can know!\nThen we take a quick break to focus on useful keyboard shortcuts you can use to improve your terminal efficiency, before diving into the history command and history expansion.\nThe next section covers tons of commands that have to do with manipulating file contents, including less, cat, tac, rev, head, tail, wc, and sort. Then we cover the three standard streams: standard input, standard output, and standard error. You'll learn to redirect all three streams and take full control over your data.\nNext we move to my favorite topic: piping! In this section you'll learn how to construct complex and powerful pipelines by stringing together multiple individual commands. You'll also learn about the tr command and the tee command along the way.\nFrom there we learn to \"speak\" the language of the shell using Expansion and Substitution. You'll learn the ins and outs of pathname expansion using wildcard characters, tilde expansion, and the super powerful curly brace expansion. We also cover arithmetic expansion, command substitution, and single and double quoting.\nNext up we learn about two commands that help us find files on our machine: locate and find. We pay special attention to the find command and its many fancy options and use-cases. You'll learn how to find files by name, size, timestamps, and more. You'll also learn how to bulk-edit files using find's exec option and the xargs command.\nWe then shift our focus to the grep command. You'll learn how to use grep to recursively search the contents of files and match complex files using regular expressions.\nNext, we spend some time discussing the details of file permissions. You'll learn how to read file attributes and understand read, write, and execute permissions. In the next section, we learn how to alter permissions using commands including chmod, chown, sudo, and su.\nIn the next section, we learn how to customize our shell experience. You'll learn to write your own custom aliases, work with shell variables, and even create your own fancy prompt. Then we learn how to create our own complex commands from scratch and the basics of bash scripting! By the end you'll be writing and running your own programs.\nFinally, we learn about the mysterious cron daemon. You'll learn the odd-looking cron syntax to set up your own automated and scheduled cronjobs.\n============THE END============\nWhether you have some experience with basic commands or you're a complete beginner, this course will help take your skills to the next level.  Learning the command-line is one of the rare skills that transcends the typical divisions between web development, data science, machine learning, or any other tech disciplines. If you work with a computer daily, you will benefit from mastering the command-line.  The commands you learn in the course will change the way you interact with your machine, giving you all new workflows and strategies and POWER over your computer!  More importantly, you'll leave this course prepared to conquer ALL the commands that are waiting for you out in the real world and on the job.\n===============================\nHere's an incomplete list of the commands covered in the course:\ndate\ncal\nncal\necho\nman\nhelp\nwhich\ntype\nls\ncd\npwd\ntouch\nmkdir\nnano\nrm\nrmdir\nmv\ncp\ncat\nless\ntac\nrev\nhead tail\nwc\nsort\ntr\ntee\nlocate\ndu\nfind\ngrep\nxargs\nchmod\nsudo\nsu\nchown\naddgroup\nadduser\nexport\nsource\ncrontab\ntar",
      "target_audience": [
        "Anyone interested in becoming a command line power user!",
        "Computer users who want complete control over their machine",
        "Anyone interested in web development, data science, or a career that involves code!",
        "Students with some prior command line experience who want to gain complete mastery"
      ]
    },
    {
      "title": "Spring WebFlux Masterclass: Reactive Microservices [New]",
      "url": "https://www.udemy.com/course/spring-webflux/",
      "bio": "Build High-Performance, Responsive, Scalable Microservices With Spring WebFlux and Reactive Programming",
      "objectives": [
        "Master Spring WebFlux: Learn how to build modern, scalable, and responsive web applications using Spring WebFlux.",
        "Embrace Reactive Programming: Understand the benefits of reactive programming for building efficient and scalable applications.",
        "Leverage R2DBC: Learn how to use R2DBC for reactive data access and improve application performance.",
        "Achieving High Performance & Scalability With HTTP2",
        "Build Reactive Controllers: Create reactive controllers with Spring WebFlux annotations and handle requests and responses efficiently.",
        "Implement Error Handling: Learn effective error handling strategies for a robust user experience.",
        "Use WebFilters for Pre-processing and Post-processing: Chain WebFilters for complex logic and share data effectively.",
        "Implement Streaming: Learn how to implement client-side and server-side streaming for optimized data transfer.",
        "Optimize for Performance: Use techniques like Gzip compression, HTTP connection pooling, and HTTP/2 to improve application performance.",
        "Master Integration Testing: Learn how to effectively test your Spring WebFlux applications using WebTestClient.",
        "Hands-On Learning: Learn through practical code examples and labs.",
        "Real-World Scenarios: Apply your knowledge to build real-world web applications.",
        "Expert Guidance: Learn from a seasoned instructor who specializes in Spring WebFlux."
      ],
      "course_content": {
        "Introduction": [
          "Before You Enroll"
        ],
        "Traditional vs Reactive APIs": [
          "*** Resource ***",
          "Project Setup",
          "External Services",
          "Traditional vs Reactive API",
          "Traditional vs Reactive API - Demo",
          "Traditional vs Reactive API - Demo via Browser",
          "Exposing Streaming API",
          "Common Mistake Using Reactive Pipeline",
          "How Reactive Web Works - Step By Step",
          "FAQ - Should Entire Stack Be Reactive?",
          "Reactive Web is Resilient - Demo",
          "Summary"
        ],
        "Spring Data R2DBC": [
          "Introduction",
          "Connection String",
          "*** Resource *** - Database Initialization Scripts",
          "Project Setup",
          "Spring Data - Crash Course",
          "Customer Entity / Repository",
          "Step Verifier - Crash Course",
          "CRUD Using Repository - Part 1",
          "CRUD Using Repository - Part 2",
          "CRUD Using Repository - Part 3",
          "R2DBC - Show SQL",
          "*** Assignment *** - Price Range Query Method",
          "Pageable",
          "What About Complex Queries?",
          "*** Resource *** - SQL For Products Ordered By Customer",
          "Join Query Using @Query",
          "*** Resource *** - SQL For Projection",
          "Projection",
          "R2DBC Database Client",
          "Summary"
        ],
        "R2DBC vs JPA/JDBC": [
          "Introduction",
          "[Performance Test] Throughput / Efficiency",
          "How R2DBC Works",
          "FAQ - Can I Use Spring Data JPA?",
          "Reactive Manifesto"
        ],
        "Reactive CRUD APIs": [
          "Introduction",
          "FAQ - Do We Need DTOs?",
          "DTO / Entity / Repository",
          "Service Class Implementation",
          "Controller",
          "FAQ - @RequestBody Mono<T> vs T",
          "CRUD APIs Demo",
          "Mono/Flux - Response Entity",
          "Handling 4XX via Response Entity",
          "@Modifying Query",
          "Paginated Results",
          "CRUD APIs Demo",
          "WebTestClient - Introduction",
          "Integration Testing - Part 1",
          "Integration Testing - Part 2",
          "Integration Testing - Part 3",
          "POST / PUT - Body Publisher vs Body Value",
          "Summary"
        ],
        "Input Validation / Error Handling": [
          "Problem Detail",
          "What About Bean Validation?",
          "Project Setup",
          "Application Exceptions",
          "Request Validator",
          "Validation - Emitting Error Signal",
          "@ControllerAdvice",
          "Demo via Postman",
          "*** Assignment ***",
          "Integration Tests",
          "Summary"
        ],
        "WebFilter": [
          "Introduction",
          "WebFilter Chain - How It Works",
          "Authentication & Authorization Requirements",
          "WebFilter Implementation",
          "Attributes via WebFilter",
          "WebFilter Demo",
          "Accessing Attributes via @Controller",
          "Problem Detail - WebFilter Workaround",
          "*** Assignment ***",
          "Integration Tests",
          "Summary"
        ],
        "Functional Endpoints": [
          "Introduction",
          "Router Configuration - Part 1",
          "Request Handler",
          "Router Configuration - Part 2",
          "Input Validation / Error Handler",
          "Paginated Results",
          "Order Of The Routes",
          "Demo via Postman",
          "Integration Tests",
          "Multiple Router Functions",
          "Nested Router Functions",
          "What About WebFilters",
          "Request Predicates",
          "*** Assignment ***",
          "Functional / Request Predicates - Assignment Solution",
          "Summary"
        ],
        "WebClient - Non-Blocking HTTP Client": [
          "Introduction",
          "Project Setup",
          "Simple GET",
          "Non-blocking Concurrent Requests",
          "[Optional] - How Event Loop Works",
          "URI Variables",
          "Streaming GET",
          "POST - Body Publisher vs Body Value",
          "Default Headers Configuration / Override",
          "Remote Service - Error Handling",
          "Retrieve / Exchange",
          "Query Params",
          "Basic Auth",
          "Bearer Auth",
          "Exchange Filter Function",
          "*** Assignment ***",
          "WebClient Attributes",
          "Summary"
        ],
        "Streaming": [
          "Introduction",
          "Uploading Million Products - Usecase",
          "JSON Lines",
          "Project Setup",
          "Product Service",
          "Product Streaming Upload API",
          "Product Client",
          "Client Streaming Request - Demo",
          "@RequestBody - Non-Blocking Clarification",
          "1 Million Products Upload - Demo",
          "*** Assignment *** - Download API",
          "*** Resource *** - FileWriter",
          "1 Million Products Download - Demo",
          "What About Bidirectional Stream",
          "Summary"
        ]
      },
      "requirements": [
        "Strong Knowledge on Reactive Programming (checkout my course if you are new to reactive programming)",
        "Knowledge on Spring Boot",
        "Comfortable with Indian Accent :)"
      ],
      "description": "Prerequisite: Knowledge on Reactive Programming. Please check out my Reactive Programming Course.\nCourse Focus\nThis course provides a comprehensive introduction to Spring WebFlux, a framework for building highly scalable, resilient and responsive web applications using reactive programming principles.\n\nWhat You'll Learn\nTraditional vs Reactive APIs\nHow Reactive APIs are different from Traditional APIs.\nReactive Data Access R2DBC\nLearn to connect to relational databases reactively using R2DBC drivers, create reactive repositories with Spring Data R2DBC, implement CRUD operations with reactive data access patterns, and effectively integration test your data access layer.\nRunning a throughput/efficiency test to demonstrate the power of R2DBC, its throughput and how it uses the system resources more efficiently compared to Spring Data JPA.\nBuilding CRUD Operations\nMaster creating reactive controllers with Spring WebFlux annotations, handling requests and responses with Flux and Mono, integration testing your reactive controllers.\nError Handling Strategies\nDiscover techniques for managing exceptions within reactive pipelines using various operators. Learn how to return meaningful error responses for a robust user experience.\nWebFilter/Interceptor Chaining\nExplore how to implement WebFilters for pre-processing and post-processing requests and responses. Chain multiple WebFilters for complex logic, pass attributes from WebFilters to controllers, and share data effectively.\nFunctional Programming with WebFlux\nLeverage the power of lambda expressions to write concise and readable code. Build reactive controllers with functional endpoints and understand the benefits of functional programming within WebFlux.\nBuilding Reactive Clients\nLearn to use WebClient to build reactive clients that consume external APIs using reactive streams and handle asynchronous responses efficiently in a non-blocking manner.\nStreaming\nImplement client-side streaming for uploading data as a stream using WebClient and explore backpressure handling for optimized data transfer.\nImplement server-side streaming for downloading data as a stream using WebClient.\nImplement Server-Sent Events (SSE) with Spring WebFlux to enable real-time data updates from server to client.\nOptimizing for Performance\nGzip compression\nHTTP connection pooling to optimize bandwidth usage and application scalability.\nLeveraging HTTP/2 protocol for efficient communication (New!).\nIntegration Testing\nMaster integration testing with WebTestClient, combining testing practices into our learning process throughout the course.\nCourse Structure\nFocus on practical code examples and demos tailored to each module's specific topic.\nHands-on labs to solidify your learning throughout the course.\nAccess to resources for further learning on both Spring WebFlux and prerequisite reactive programming concepts (articles, tutorials, official documentation).\nBy the end of this course, you'll be equipped with the knowledge and skills to build modern, performant, and scalable web applications using Spring WebFlux.\nNote\nA basic understanding of reactive programming is assumed as a prerequisite for this course.\nJoin this course to master Spring WebFlux and unlock the potential of reactive programming for developing highly performant and scalable microservices. Gain the skills necessary to build resilient, efficient, and real-time applications using Spring WebFlux's non-blocking and event-driven architecture.",
      "target_audience": [
        "Any Developer / Architect who is interested in Microservice Development / Architecture with WebFlux"
      ]
    },
    {
      "title": "Vagrant Quick Start: Virtualized Development Environments",
      "url": "https://www.udemy.com/course/vagrant-quick-start/",
      "bio": "An introduction to setting up and managing development server virtual machines using Vagrant, Virtual Box, and Linux",
      "objectives": [
        "Create automatic, reliable, repeatable, easy to use, and versioned development environments",
        "Write provisioning scripts to automatically setup Vagrant managed environments",
        "Solve the development box setup problem"
      ],
      "course_content": {
        "Introduction": [
          "Welcome and Course Overview",
          "Course Audience and Course Tips",
          "What is Vagrant and Core Concepts"
        ],
        "Quick Installation": [
          "Quick Installation Overview",
          "Quick Install Process for Windows",
          "Quick Install Process for Mac OS X"
        ],
        "Vagrant Quick Start By Example": [
          "Quick Start Overview",
          "Vagrant Project Setup",
          "Vagrant Website and Documentation",
          "Vagrant Project Initialization with Ubuntu 12 (Precise)",
          "Running the Vagrant Project",
          "Accessing the Vagrant Virtual Machine",
          "Suspending, Stopping and Removing Vagrant Virtual Machines",
          "Reloading Vagrant Virtual Machines",
          "Vagrant Project Cleanup"
        ],
        "Vagrant Boxes": [
          "Boxes Overview",
          "Finding Boxes on Vagrantbox.es",
          "Vagrantbox.es Example with CentOS 7",
          "Hashicorp Atlas and Example with Ubuntu 14.04 LTS",
          "Updating Quick Start Project with Ubuntu 14.04 LTS",
          "Updating a Vagrant Virtual Machine",
          "Saving Box Changes with Package",
          "Updating the Quick Start Project with a Custom Box"
        ],
        "Vagrant Provisioning": [
          "Provisioning Overview",
          "Setup Provisioning",
          "Updating a Vagrant Box",
          "Bash Shell Provisioning Start",
          "Updating Bash Shell Provisioning for Tomcat 8"
        ],
        "Conclusion": [
          "Update GitHub with Project Changes",
          "Review and Final Words"
        ],
        "Bonus: Windows Full Install": [
          "Windows Full Install Overview",
          "Git for Windows Install",
          "Git for Windows Help",
          "Git for Windows Configuration",
          "Notepad++ Install",
          "Notepad++ Git Integration",
          "VirtualBox Installation",
          "Vagrant Installation"
        ],
        "Bonus: Mac OS X Full Installation": [
          "Mac OS X Full Installation Overview",
          "Mac OS X Security Update",
          "Mac OS X Terminal",
          "Apple Git",
          "Git Help",
          "Git Configuration",
          "TextMate 2 Installation",
          "TextMate 2 Configuration",
          "TextMate 2 Git Integration",
          "Git Prompt on Mac OS X",
          "VirtualBox Install",
          "VirtualBox Extention Pack",
          "Vagrant Installation"
        ],
        "Bonus: Special Offers": [
          "Bonus: Exclusive Student Discounts"
        ]
      },
      "requirements": [
        "An interest in learning about virtualizing development systems",
        "Basic computer skills, intermediate experience recommended",
        "Ability to install software (admin rights)",
        "Modern Mac / Windows computer (within last 5 years), 64-bit operating system recommended",
        "Recommended: Virtualization chipset support (VT-x, etc)",
        "Recommended: Experience using the command line or shell terminal",
        "Recommended: Exposure to desktop virtualization (VirtualBox, VMWare Player/Workstation, Parallels, etc)"
      ],
      "description": "This is an introductory course on Vagrant designed to show how to setup local development environments using Vagrant and related tools.\nCourse Outline\n\nIntroduction provides an overview for the course, cover the core concepts for Vagrant, how to get the course materials.\nQuick Installation provides streamlined, fast instructions on how to setup Vagrant, VirtualBox, and other tools needed for the rest of the course on both Windows and Mac platforms. See the Bonus section for full installation processes.\nQuick Start walks through the basics of using Vagrant and how to version control (using Git) a project using Vagrant.\nBoxes covers how to find, manage and use Vagrant boxes.\nProvisioning covers how to write shell provisioners to automatically install software when Vagrant first runs or on demand. Students write a real shell script to provision Tomcat in their Vagrant managed virtual machines.\nConclusion has some final thoughts on Vagrant.\nBonus! sections provide comprehensive, step-by-step installation processes for both Windows and Mac OS X.\nCourse Features\nPresentations provide audio/video training of conceptual ideas in each major area or introduction of new concepts.\nScreencasts provide a video of the instructor's computer system with any actions, commands, or screens displayed and narrated. There are several hours of screencat video content -- it makes up the vast majority of the course.\nSeveral attachments throughout the course provide supplemental information, illustrations, or other reference material.",
      "target_audience": [
        "Software Engineers, developers, and programmers",
        "DevOps, IT Operations, Development Support",
        "Freelancers",
        "IT Managers",
        "Anyone who hates \"It works on my machine!\""
      ]
    },
    {
      "title": "Learn Cloud Computing from Scratch",
      "url": "https://www.udemy.com/course/learn-cloud-computing-from-scratch/",
      "bio": "A Quick Introduction to Cloud Computing Technologies and Ecosystem",
      "objectives": [
        "Learn to use popular Cloud platforms",
        "Understand Cloud Computing Concepts and Technologies",
        "Understand Virtualization and its use in Infrastructure development",
        "Apply the learning to build cloud infrastructure"
      ],
      "course_content": {
        "Introduction": [
          "Introduction To Cloud Computing"
        ],
        "Introduction to the Cloud": [
          "Service models (SaaS)",
          "Linux and the Cloud Operating System"
        ],
        "Cloud Technology With Examples": [
          "(IaaS) (PaaS) on Amazon AWS EC2",
          "(IaaS) (PaaS) Red Hat Open Shift",
          "(IaaS) (PaaS) Google Cloud Compute"
        ],
        "Virtualisation Expanded with examples": [
          "Virtualization Architecture",
          "Virtualization Examples"
        ],
        "Summary": [
          "Course Summary",
          "Bonus Lecture: More Interesting Stuff, Offers and Discounts"
        ]
      },
      "requirements": [
        "This course does not assume any cloud computing knowledge however it is expected the student understands Software Infrastructure and System Architecture"
      ],
      "description": "Cloud Computing has really changed the way companies looking into their digital Infrastructure now a days. Cloud computing with its unique paradigms brings in new opportunities and challenges for developers and administrators worldwide. With our unique curriculum we have tried to create the content which will bring beginners up to speed with Cloud technologies.\nThe Course will start with basic introduction to cloud concepts like SAAS, PAAS and IAAS. You will also learn how Linux systems is changing the Infrastructure landscape worldwide. You will then learn to use popular cloud technologies like Google Compute Engine , Amazon AWS and Redhat open shift. The last unit covers Virtualization Technologies to provide you a holistic understanding of cloud computing environment.\nThis course is surely the fastest and smartest way to get started with Cloud computing technologies.",
      "target_audience": [
        "Developers and Administrators who are new to Cloud and want to start with it",
        "Developers who are new to Linux Infrastrcuture"
      ]
    },
    {
      "title": "Java Multithreading, Concurrency & Performance Optimization",
      "url": "https://www.udemy.com/course/java-multithreading-concurrency-performance-optimization/",
      "bio": "Become an expert in Multithreading, Concurrency & Parallel programming in Java, with strong emphasis on high performance",
      "objectives": [
        "Build well designed & correct multithreaded applications in Java, with confidence.",
        "Gain expert-level practical knowledge of modern software architecture & low level programming using Threads",
        "Create high performance & responsive applications, clients will use and love",
        "Learn to utilize your computer and Java language using Concurrency and Parallel programming"
      ],
      "course_content": {
        "Introduction": [
          "Motivation & Operating Systems fundamentals- Part 1",
          "Operating Systems Fundamentals - Part 2",
          "Threading and Operating Systems Fundamentals Quiz"
        ],
        "Threading fundamentals - Thread Creation": [
          "Tips about Coding Lectures and Debugging Instructions",
          "Threads Creation - Part 1, Thread Capabilities & Debugging",
          "Threads Creation - Part 2. Thread Inheritance",
          "Thread Creation",
          "Thread Creation - MultiExecutor",
          "Thread Creation - MultiExecutor Solution"
        ],
        "Threading fundamentals - Thread Coordination": [
          "Thread Termination & Daemon Threads",
          "Thread Termination & Daemon Threads",
          "Joining Threads",
          "Multithreaded Calculation",
          "Multithreaded Calculation - Solution"
        ],
        "Performance Optimization": [
          "Introduction to Performance & Optimizing for Latency - Part 1",
          "Optimizing for Latency Part 2 - Image Processing",
          "Additional Resource - Image Processing, Color Spaces, Extraction & Manipulation",
          "Optimizing for Throughput Part 1",
          "Optimizing for Throughput Part 2 - HTTP server + Jmeter",
          "Performance Optimization"
        ],
        "Data Sharing between Threads": [
          "Stack & Heap Memory Regions",
          "Stack & Heap Memory Regions",
          "Resource Sharing & Introduction to Critical Sections"
        ],
        "The Concurrency Challenges & Solutions": [
          "Critical Section & Synchronization",
          "Critical Section & Synchronization",
          "Atomic Operations, Volatile & Metrics practical example",
          "Atomic Operations, Volatile & Metrics practical example",
          "Min - Max Metrics",
          "Min - Max Metrics - Solution",
          "Race Conditions & Data Races",
          "Data Races",
          "Locking Strategies & Deadlocks",
          "Locking Strategies & Deadlocks"
        ],
        "Advanced Locking": [
          "ReentrantLock Part 1 - tryLock and interruptible Lock",
          "ReentrantLock Part 2 - User Interface Application example",
          "ReentrantLock",
          "Reentrant Read Write Lock & Database Implementation",
          "Read-Write Locks",
          "Product Reviews Service",
          "Product Reviews Service - Solution"
        ],
        "Inter-Thread Communication": [
          "Semaphore - Scalable Producer Consumer implementation",
          "Semaphores - Barrier",
          "Condition Variables - All purpose, Inter-Thread Communication",
          "Objects as Condition Variables - wait(), notify() and notifyAll()",
          "Condition Variables",
          "Simple CountDownLatch",
          "Simple CountDownLatch - Solution"
        ],
        "Lock-Free Algorithms, Data-Structures & Techniques": [
          "Introduction to Non-blocking, Lock Free operations",
          "Atomic Integers & Lock Free E-Commerce",
          "Atomic References, Compare And Set, Lock-Free High Performance Data Structure",
          "Lock-Free Algorithms, Data-structures & Techniques"
        ],
        "Threading Models for High Performance IO": [
          "Introduction to Blocking IO",
          "Thread Per Task / Thread Per Request Model",
          "Asynchronous, Non Blocking IO with Thread Per Core Model",
          "Threading Models for High Performance IO - Quiz"
        ]
      },
      "requirements": [
        "A Windows, Mac or Linux computer",
        "Latest Java Development Kit (JDK) installed",
        "Basic knowledge of programming in Java"
      ],
      "description": "[Updated to 2023, including Project Loom and Virtual Threads]\nDescription\nIf you had your own jet plane, would you drive it to the grocery store or fly it on tour around the world?\nToday every computer and phone comes with immense computing power and multiple cores, allowing full parallelism. In this course, you will go on a journey to learn all the fundamental tools you need to become a confident and successful multithreaded application developer. Using multithreading and concurrency, we will learn to get the most out of our computer to truly make it fly!\nTeaching Philosophy\nThe course is designed to teach you \"how to fish\". Instead of memorizing classes, libraries, or Java APIs, we will learn the fundamentals of multithreaded programming, starting from the complete basics all the way to the very advanced topics in multithreading.\nAll lectures include the right theory and are accompanied by practical examples from relevant fields, such as:\nUser Interface applications\nImage Processing\nWeb Applications\nComputational programs\nAnd others\nIt's a practical course that is meant to save you time. Instead of filling hours of material, I hand-picked the most important topics based on my practical experience.\nTarget Student for this Course\nStudents who already have some experience and basic knowledge in programming in Java.\nStudents who want to acquire multithreaded, parallel programming and concurrency skills in a short period of time.\nStudents who are interested in performance optimizations and getting a good foundation in the above-mentioned topics.\nStudents who want to take their careers to the next level. Whether you are a\nNewly graduate and you're looking to land a dream job.\nA professional engineer who wants to become a better programmer and improve your skillset.\nA freelancer who wants to develop his/her own project and is looking to learn how to write efficient multithreaded code.\n\n\nThen this course is for YOU!\nShort Bio\nMy passion for multithreading and concurrency started in college, where I worked on a highly scalable, distributed B+ Tree research project sponsored by IBM.\nLater I worked as a Computer Architecture Engineer at Intel Corporation and as a Software Engineer in other companies, where I developed many applications and features involving efficient and optimized multithreaded code to deliver real-time video, audio, and data - in education, healthcare, augmented reality, and Ad Tech.\nToday I am a Principal Software Engineer and Software Architect. Training and mentoring engineers on all levels are both my job and my passion.\nWe will learn\nOperating Systems fundamentals and motivation for multithreading and concurrency.\nThe basics of multithreading - how to create threads in Java and communicate between threads in Java.\nPerformance considerations and design patterns of multithreaded and parallel applications, optimizing for latency or throughput.\nData sharing between threads in Java, all the pitfalls and challenges, as well as the solutions and best practices.\nAdvanced lock-free algorithms and data structures for increased responsiveness and performance.\nBy the End of the Course\nYou will be able to\nWrite correct, responsive, and performant multithreaded applications in Java for any purpose and scale.\nApply best practices to architect multithreaded applications, algorithms, and libraries.\nBecome knowledgeable in concurrency & parallel programming, which will help you in job interviews, your daily work as an engineer, and your personal projects.\nBecome an expert in Java Multithreading, Concurrency, and Performance Optimization today!\n\n\nFAQs\n- \"Will the course help me with interview questions?\"\nYes! The course is focused on helping you become proficient in multithreading and concurrency in general and also master multithreading in Java in particular. You will learn all you need about threads in Java as well as common topics in interview questions involving locking, synchronization in Java, heap and stack memory organization, and so on. Although the course is not focused on interview questions specifically, and there's no way to predict what you will be asked during an interview question, the knowledge you will get will definitely set you apart from other candidates.\n\n\n- \"Does the course cover all threading classes and APIs in Java?\"\n\"No. There are many books and expensive academic courses which cover EVERY single class and API which would take months to finish. In addition, Oracle provides excellent Java Docs that cover and explain every single Java multithreading API and class.\nThis course is different!\nBased on years of experience in the field, I have carefully designed a short curriculum that teaches you all the essentials in a short amount of time.\nNo fillers! No more wasting time learning things you could read yourself in 5 minutes or don't ever need!\nThis course will build the foundation for becoming an expert in multithreading and concurrency. And also be able to successfully and easily extend your own knowledge in the future.\n\n\n- \"What if I don't understand something during the course and I have a question, what do I do?\"\nNot a problem! I am here to help you succeed! Multithreading is not an easy topic; no one is expected to get it all right away. Each lecture has a Q&A section where students can ask questions about the lecture or any follow-up questions about the topic in general. I will answer all the questions promptly and ensure you have all the tools for success.\n\n\n- \"Does the course cover interprocess communication and distributed Systems?\"\nNo. Although those are really interesting and important topics that involve concurrency. They are not directly related to Java multithreading, which is the main topic of the course. We do mention those topics during the course, but they are out of scope and deserve their own course. The concepts, use cases, and challenges are very different than the ones we encounter while optimizing the performance of a single multithreaded Java application, algorithm, or library, so we will not cover them here.\n\n\n- \"Why do I need a separate course for concurrent programming?\"\nConcurrent programming is fundamentally different than transitional sequential programming. As in every engineering decision, there's always a tradeoff. Parallel and Concurrent programming can have a tremendous positive impact on the application's performance and responsiveness but it is a lot harder to get it right. In this course, we will learn all the caveats, techniques, and best practices to get the most out of multithreaded applications in Java.",
      "target_audience": [
        "Students who want to learn multithreaded programming and concurrency",
        "Students who want to produce the highest quality and highest performance software",
        "Engineers who want to take their professional career to new level, and become true experts",
        "College students and newly graduates, who want to stand out from the crowd, and land their dream job"
      ]
    },
    {
      "title": "Data Structures and Algorithms In Java ( DSA )",
      "url": "https://www.udemy.com/course/data-structures-and-algorithms-in-java/",
      "bio": "Data Structures and Algorithms in Java Using Java DSA Java DSA and Java Data Structures with Java DSA in Java DSA Java",
      "objectives": [
        "Understand the details of Data Structures and algorithms (DSA) through animations",
        "Learn to write programs for different Data Structures and Algorithms in Java",
        "Get the confidence to face programming interviews",
        "Test your knowledge with over 100 Quiz questions",
        "Learn how to analyse algorithms",
        "Get the ability to write and trace recursive algorithms"
      ],
      "course_content": {},
      "requirements": [
        "Basic knowledge of programming in any language"
      ],
      "description": "This \"Data Structures and Algorithms In Java\" course is thoroughly detailed and uses lots of animations to help you visualize the concepts.\nInstructor is author of book \"Comprehensive Data Structures and Algorithms in Java\".\nThis \"Data Structures and Algorithms in Java\" tutorial will help you develop a strong background in Data Structures and Algorithms (DSA). The course is broken down into easy to assimilate short lectures, and after each topic there is a quiz that can help you to test your newly acquired knowledge. The examples are explained with animations to simplify the learning of this complex topic. Complete working programs are shown for each concept that is explained.\nThis Data Structures and Algorithms in Java course provides a comprehensive explanation of data structures like linked lists, stacks and queues, binary search trees, heap, searching and hashing. Various sorting algorithms with implementation and analysis are included. Concept of recursion is very important for designing and understanding certain algorithms so the process of recursion is explained with the help of several examples.\nThis Data Structures and algorithms in Java course covers following DSA topics in Java with implementation :\nAlgorithm Analysis, Big O notation, Time complexity, Singly linked list, Reversing a linked list, Doubly linked list, Circular linked list, Linked list concatenation, Sorted linked list.\nStack, Queue, Circular Queue, Dequeue, Priority queue, Polish Notations, Infix to Postfix, Evaluation of Postfix, Binary Tree, Binary Search Tree, Tree Traversal (inorder, preorder, postorder, level order), Recursion, Heap, Searching, Hashing\nSorting : Selection, Bubble, Insertion, Shell, Merging, Recursive Merge, Iterative Merge, Quick, Heap, Binary tree, Radix, Address calculation sort\nHere is the DSA topics in course content-\nAlgorithm Analysis\nLinked List\nStack and Queue\nRecursion\nBinary Tree\nBinary Search Tree\nHeap\nSorting\nSearching\nHashing\nThroughout this Data Structures and Algorithms in Java course, a step by step approach is followed to make you understand different Data Structures and Algorithms. You will see code implementation of different data structures in Java and algorithms are explained in step-wise manner. Through this course you can build a strong foundation and it will help you to crack Data Structures and Algorithms in Java coding interviews questions and work on projects. Good foundation on Data Structures and Algorithms in Java interview topics helps you to attempt tricky interview questions.\nIn this Data Structures and Algorithms Through Java In Depth course, Java language programs are used for implementing various concepts, but you can easily code them in any other language like C++, C#, or Python.\nThis Data Structures and Algorithms In Java online course on udemy will help software developers to refresh the concepts studied in Data Structures and Algorithms in Java book / pdf and also to students learning from referred book / pdf.\nThis DSA Self Paced course helps students to have great foundation to solve DSA In Java problems. This will help them to solve LeetCode problems and in google faang coding interviews.\nWhat students are saying about this course\n\"It is one of the few courses on Udemy that deals with the actual implementation of the concepts of data structures in java. As of now I am completely satisfied with the course.\"\n\"The presentation was, graphically, well organized. This resulted in a great visual illustration of concepts that seem so abstract.  \"\n\"Effective and lucid! This is in fact one of the most underrated courses on Udemy when it comes to Data Structures and Algorithms in Java. The pace is optimum and the explanation is to the point. And to the people who might have a problem with her accent - the delivery style of the instructor is just fine.  \"\n\"This is excellent course on Data structure with wide example range covering each DSA topics in java \"\n\"The course is great for someone who has zero knowledge of Data Structures And Algorithms.\"\n\"The course was well explained and the pace of every lecture was ideal. I had a better understanding about the concepts and had a better understanding and preparation going into my final exam for Data Structures and algorithms. I also have bought the Advanced Data Structures course by Deepali as it has generated a genuine interest in me to learn about advanced concepts of algorithms.\"\n\"The concepts are clear. I like the teaching style of the instructor. Concept -> Example -> Code implementation.  \"\n\"An excellent course on data structures. The concepts are explained so well that even a person like me with no computer science background has learnt so many new things. I regret that I did not learn data structures earlier in my career.\"\n\"Explained with simple examples. Clarity was 100%\"\n\"Excellent explanation. Very useful for Programming Interviews.\"\n\"I enrolled in this course to supplement an Algorithm's class I am taking online, but struggling in. As soon as I worked through the content of this course many of the concepts I was struggling to wrap my mind around made sense. I credit this it the step by step walk-through approach used by the instructor. For each algorithm, there is a dynamic diagram used to illustrate what is happening, and why it is happening. More over, as is required of a Data Struct and Algorithm discussion, the complexity of the algorithms is analyzed and explained in detail. Truly a worthwhile buy if you need a better understanding of the content.\"\n\"Summary - a good interactive way to learn/refresh data structure. I took this course to help me to prepare for my Interview. There are mostly everything that is required for an interview. Example are pretty neat.The course is little fast paced, But you will get hang of it as you progress. Some of the examples are really great help in understanding the concept. Overall well I am happy with this.\"\n\n\nSo what are you waiting for, click on Buy button to enroll now and start learning.",
      "target_audience": [
        "Programmers looking for jobs",
        "Programmers wanting to write efficient code",
        "Computer Science students having Data Structures as part of their curriculum",
        "Non Computer science students wanting to enter IT industry"
      ]
    },
    {
      "title": "Mask R-CNN - Practical Deep Learning Segmentation in 1 hour",
      "url": "https://www.udemy.com/course/mask-r-cnn-robust-deep-learning-segmentation-in-1-hour/",
      "bio": "The Practical Guide to Create your own AI Semantic Segmentation: Learn the Full Workflow - From Training to Inference",
      "objectives": [
        "What is Instance Segmentation",
        "How to take object segmentation further using Mask RCNN",
        "Secret tip to multiply your data using Data Augmentation.",
        "How to use AI to label your dataset for you.",
        "Find out how to train your own custom Mask R-CNN from scratch.",
        "Pothole Detection using Mask R-CNN",
        "Step-by-step instructions on how to Execute, Annotate, Train and Deploy Custom Mask R-CNN models."
      ],
      "course_content": {},
      "requirements": [
        "Background in OpenCV & Computer Vision",
        "Have prior experience in Python using Anaconda.",
        "A PC/Laptop with CUDA-enabled Nvidia graphics Card for training - We use Ubuntu for training.",
        "Create a Free Account with Supervisely."
      ],
      "description": "***Important Notes***\nThis is a practical-focused course. While we do provide an overview of Mask R-CNN theory, we focus mostly on helping you get Mask R-CNN working step-by-step.\nLearn how we implemented Mask R-CNN Deep Learning Object Detection Models From Training to Inference - Step-by-Step\nWhen we first got started in Deep Learning particularly in Computer Vision, we were really excited at the possibilities of this technology to help people. The only problem is that if you are just getting started learning about AI Object Segmentation,  you may encounter some of the following common obstacles along the way:\nLabeling dataset is quite tedious and cumbersome,\nAnnotation formats between various object detection models are quite different.\nLabels may get corrupt with free annotation tools,\nUnclear instructions on how to train models - causes a lot of wasted time during trial and error.\nDuplicate images are a headache to manage.\nThis got us searching for a better way to manage the object detection workflow, that will not only help us better manage the object detection process but will also improve our time to market.\nAmongst the possible solutions we arrived at using Supervisely which is free Object Segmentation Workflow Tool, that can help you:\nUse AI to annotate your dataset for Mask segmentation,\nAnnotation for one dataset can be used for other models (No need for any conversion) - Mask-RCNN, Yolo, SSD, FR-CNN, Inception etc,\nRobust and Fast Annotation and Data Augmentation,\nSupervisely handles duplicate images.\nYou can Train your AI Models Online (for free) from anywhere in the world, once you've set up your Deep Learning Cluster.\nSo as you can see, that the features mentioned above can save you a tremendous amount of time. In this course, I show you how to use this workflow by training your own custom Mask RCNN as well as how to deploy your models using PyTorch. So essentially, we've structured this training to reduce debugging, speed up your time to market and get you results sooner.\nIn this course, here's some of the things that you will learn:\nLearn the State of the Art in Object Detection using Mask R-CNN pre-trained model,\nDiscover the Object Segmentation Workflow that saves you time and money,\nThe quickest way to gather images and annotate your dataset while avoiding duplicates,\nSecret tip to multiply your data using Data Augmentation,\nHow to use AI to label your dataset for you,\nFind out how to train your own custom Mask R-CNN from scratch for Road Pothole Detection, Segmentation & Pixel Analysis,\nStep-by-step instructions on how to Execute,Collect Images, Annotate, Train and Deploy Custom Mask R-CNN models,\nand much more...\nYou also get helpful bonuses:\nNeural Network Fundamentals\nPersonal help within the course\nWe donate my time to regularly hold office hours with students. During the office hours you can ask me any business question you want, and we will do my best to help you. Students can start discussions and message us with private questions. We regularly update this course to reflect the current marketing landscape.\nGet a Career Boost with a Certificate of Completion\nUpon completing 100% of this course, you will be emailed a certificate of completion. You can show it as proof of your expertise and that you have completed a certain number of hours of instruction.\nIf you want to get a marketing job or freelancing clients, a certificate from this course can help you appear as a stronger candidate for Artificial Intelligence jobs.\nMoney-Back Guarantee\nThe course comes with an unconditional, Udemy-backed, 30-day money-back guarantee. This is not just a guarantee, it's my personal promise to you that I will go out of my way to help you succeed just like I've done for thousands of my other students.\nLet me help you get fast results.  Enroll now, by clicking the button and let us show you how to Develop Object Segmentation Using Mask R-CNN.",
      "target_audience": [
        "Students who want to learn how to take object detection further with Mask RCNN",
        "Students who are curious to learn practical approach to Instance segmentation",
        "This course is for students with Python, OpenCV or AI experience who want to learn how to do Object Segmentation with Mask RCNN"
      ]
    },
    {
      "title": "Kubernetes Certified Application Developer (CKAD) with Tests",
      "url": "https://www.udemy.com/course/certified-kubernetes-application-developer/",
      "bio": "Learn concepts and practice for the Kubernetes Certification with hands-on labs right in your browser - DevOps - CKAD",
      "objectives": [
        "Kubernetes Certification",
        "Design and Deploy applications on Kubernetes Cluster",
        "Develop Cloud First Applications",
        "Secure Kubernetes cluster with Secrets and Network Policies",
        "Create and Schedule Jobs in Kubernetes",
        "Create and Configure Persistent Volumes",
        "Configure Readiness and Liveness Probes in a cluster",
        "Troubleshoot Applications Deployed using Logs",
        "Upgrade and Rollback Applications deployed on Kubernetes"
      ],
      "course_content": {},
      "requirements": [
        "Basic System Administration",
        "Basic Application Development - Python",
        "Linux VMs to follow along (This is optional as labs are provided with course)",
        "Kubernetes Basics"
      ],
      "description": "Learning Kubernetes is essential for any DevOps professional. DevOps engineers are always in demand. Currently, the average Silicon Valley salary for a DevOps engineer is 20% higher than what a software engineer makes. And one of the most in-demand skills is Kubernetes Deployment.\nKubernetes is an open-source system for automating the deployment, scaling, and management of containerized applications. It was originally designed by Google and is now maintained by the Cloud Native Computing Foundation. Simplify Complex Technology\nThis course helps you gain the knowledge required to design and deploy cloud-native applications on a Kubernetes cluster. A series of well-designed lectures with animation and illustrations help you understand complex concepts easily.\n\n\nPractice! Practice! Practice!\n\n\nLectures alone won’t help you clear the certification. The Kubernetes Certification (CKAD) is a practical, hands-on exam. You need hands-on experience, you need to get fast, and you need practice. That is what our integrated hands-on lab experience gives you.\nOur coding quizzes can be accessed right in your browser without having to set up any lab environment yourself. We validate your work and give you feedback instantly. Preview a few lab exercises for Free!\n\n\nAfter you have completed the lectures and coding exercises, you will have the opportunity to complete a series of assignments that put your new skills to the test. You will be given a challenge to solve using the Kubernetes skills you have learned.\nThis will give you real-world experience and the chance to work with other students in the community. You will develop a Kubernetes deployment and get feedback for your work.\n\n\nJoin our community of Experts and Learners.\n\n\nOnce you enroll, you will get access to our Slack Channel, where our instructors and experts will help answer your doubts and help you get through the practical lab exercises. Learn from others and by helping others.\nDon’t waste any more time wondering what course is best for you. You’ve already found it. Get started right away!\n“The Best Course for the Kubernetes . For Beginners the perfect search ends here.” – Student Testimonial.\nLegal Notice:\nKubernetes and the Kubernetes logo are trademarks or registered trademarks of The Linux Foundation. in the United States and/or other countries. The Linux Foundation and other parties may also have trademark rights in other terms used herein. This course is not certified, accredited, affiliated with, nor endorsed by Kubernetes or The Linux Foundation.\n\n\nCourse Update History\n\n\nMay 26, 2025 – Lab environment upgrade to 1.33v (in progress)\nFeb 26, 2025 - Lab environment upgrade to 1.32v\nOct 29, 2024 - Lab environment upgrade to 1.31v\nJuly 15, 2024 - Lab environment upgrade to 1.30v\nFeb 17, 2024 – Lab environment upgrade to 1.29v\nJune 15, 2023 – Lab environment upgrade to 1.27v\nFeb 2, 2023 – Lab environment upgrade to 1.26v\nOct 10, 2022 – Lab environment upgrade to 1.24v\nAug 27, 2022 – Lightning Labs and mock exam solutions added\nMay 1, 2022 – Lab environment upgrade to 1.23v\nOct 20, 2021 – Lab environment upgrade to 1.22v\nSep 1, 2021 – Course Updates / Exam Curriculum Update * New lectures and labs added based on the new curriculum on topics mentioned below:\n* Build, define, and modify container images * Authentication, Authorization, and Admission Control * KubeConfig * API Groups * Role-based access controls * Understanding API deprecations * Blue/Green or Canary deployments * Helm * Discovering and using resources that extend Kubernetes (CRD)\nMay 10, 2021 – Lab environment upgrade to 1.20v\nAug 24, 2020 – Lab environment upgrade to 1.19v\nJun 16, 2020 – Lab environment upgrade to 1.18v\nFeb 20, 2020 – New lectures on working with kubectl outputs, Rolling updates, Rollbacks, and 2 new Lightening Labs were added.\nMock Exams updated.\nJan 2, 2020 – New lectures on Storage Classes, StatefulSets, and Volume Claim Templates were added.\nJul 5, 2019 – New Mock Exam to the Kubernetes Certification Courses added\nJan 2, 2019 – New lecture ConfigMaps added\nDec 19, 2018 – New videos and practice tests on Service Accounts in Kubernetes added to the course\nDec 13, 2018 – New lectures on Taints/Tolerations and Node Affinity added\nDec 1, 2018 – Kubernetes Challenge Series Game of PODS added",
      "target_audience": [
        "System Administrators",
        "Application Developers",
        "Those looking to get Certified on Kubernetes"
      ]
    },
    {
      "title": "Design Patterns in TypeScript",
      "url": "https://www.udemy.com/course/design-patterns-typescript/",
      "bio": "Implement and Learn All 23 GoF (Gang of Four) Design Patterns In TypeScript.",
      "objectives": [
        "Design Patterns in TypeScript",
        "Learn All 23 GoF Design Patterns",
        "Creational Patterns : Factory, Abstract Factory, Builder, Prototype, Singleton",
        "Structural Patterns : Decorator, Adapter, Facade, Bridge, Composite, Flyweight, Proxy",
        "Behavioral Patterns : Command, Chain of Responsibility, Observer, Interpreter, Iterator, Mediator, Memento, State, Strategy, Template, Visitor",
        "Learn Many TypeScript Concepts : TSC, tsconfig, ES6 Imports/Exports, Classes, Interfaces, Types, Inheritance, Static Members, Access modifiers and many more",
        "UML Diagramming : Inherits, Implements, Composition, Aggregates, Association",
        "Learn Each Pattern from Conceptual and Use Case Points of View",
        "Develop Your Software Engineering Vocabulary"
      ],
      "course_content": {
        "Introduction": [
          "Development Environment Setup",
          "Course Code"
        ],
        "TypeScript Basics": [
          "Getting Started",
          "Adding tsconfig.json",
          "TSC Watch",
          "Let/Const",
          "Common Types",
          "Strings",
          "Boolean",
          "Number",
          "Array",
          "Dictionary",
          "Tuple",
          "Set",
          "Classes",
          "Interfaces",
          "Extending Classes",
          "Abstract Classes",
          "Access Modifiers",
          "Static Members",
          "ES6 Imports/Exports",
          "UML Diagrams"
        ],
        "Creational Patterns": [
          "Factory Pattern",
          "Factory Use Case",
          "Abstract Factory Pattern",
          "Abstract Factory Use Case",
          "Builder Pattern",
          "Builder Use Case",
          "Prototype Pattern",
          "Prototype Use Case",
          "Singleton Pattern",
          "Singleton Use Case"
        ],
        "Structural Patterns": [
          "Decorator Pattern",
          "Decorator Use Case",
          "Adapter Pattern",
          "Adapter Use Case",
          "Facade Pattern",
          "Facade Use Case",
          "Bridge Pattern",
          "Bridge Use Case",
          "Composite Pattern",
          "Composite Use Case",
          "Flyweight Pattern",
          "Flyweight Use Case",
          "Proxy Pattern",
          "Proxy Use Case"
        ],
        "Behavioral Patterns": [
          "Command Pattern",
          "Command Use Case",
          "Chain of Responsibility Pattern",
          "Chain of Responsibility Use Case",
          "Observer Pattern",
          "Observer Use Case",
          "Interpreter Pattern",
          "Interpreter Use Case",
          "Iterator Pattern",
          "Iterator Use Case",
          "Mediator Pattern",
          "Mediator Use Case",
          "Memento Pattern",
          "Memento Use Case",
          "State Pattern",
          "State Use Case",
          "Strategy Pattern",
          "Strategy Use Case",
          "Template Method",
          "Template Method Use Case",
          "Visitor Pattern",
          "Visitor Use Case"
        ],
        "Summary": [
          "Summary"
        ]
      },
      "requirements": [
        "An OS such as Windows 10, Mac OSX or Linux",
        "An IDE such as VSCode, Atom, Webstorm, Vim, Notepad or Just the command line.",
        "A Desire to Understand the 23 GoF Design Patterns"
      ],
      "description": "Learn All of the 23 GoF (Gang of Four) Design Patterns and Implemented them in TypeScript.\nDesign Patterns are descriptions or templates that can be repeatedly applied to commonly recurring problems during in software design.\nA familiarity of Design Patterns is very useful when planning, discussing, managing and documenting your applications from now and into the future.\nAlso, throughout the course, as each design pattern is discussed and demonstrated using example code, I introduce new TypeScript coding concepts along with each new design pattern. So that as you progress through the course and try out the examples, you will also get experience and familiarity with some of the finer details of programming with TypeScript.\nIn this course, you will learn about these 23 Design Patterns,\nCreational\nFactory\nAbstract Factory\nBuilder\nPrototype\nSingleton\nStructural\nDecorator\nAdapter\nFacade\nBridge\nComposite\nFlyweight\nProxy\nBehavioral\nCommand\nChain of Responsibility\nObserver Pattern\nInterpreter\nIterator\nMediator\nMemento\nState\nStrategy\nTemplate\nVisitor\nIn the list of patterns above, there are Creational, Structural and Behavioral patterns.\nCreational : Abstracts the instantiation process so that there is a logical separation between how objects are composed and finally represented.\nStructural : Focuses more on how classes and objects are composed using the different structural techniques, and to form structures with more or altered flexibility.\nBehavioral : Are concerned with the inner algorithms, process flow, the assignment of responsibilities and the intercommunication between objects.\nDesign patterns will give you a useful and common vocabulary for when designing, documenting, analyzing, restructuring new and existing software development projects from now and into the future.\nI look forward to having you take part in my course.\nSean Bradley",
      "target_audience": [
        "TypeScript Developers",
        "Software Architects",
        "Software Engineers"
      ]
    },
    {
      "title": "Reactive Redis Masterclass For Java Spring Boot Developers",
      "url": "https://www.udemy.com/course/spring-webflux-redis/",
      "bio": "Redis - Cache, Boost Performance and Scalability, Pub/Sub, Real-Time Capabilities in Microservices Architecture",
      "objectives": [
        "Leverage Redis for Caching: Explore various Redis data structures and implement caching strategies.",
        "Master Spring WebFlux and Redis: Learn how to effectively use Spring WebFlux and Redis to build high-performance microservices.",
        "Optimize Microservices Performance: Reduce network calls, minimize recomputation, and enhance scalability.",
        "Implement Reactive Redis Integration: Use Spring Data Reactive Redis or Redisson for reactive data access.",
        "Utilize Redis as a Message Queue: Discover how Redis can serve as a powerful message queue.",
        "Build Real-Time Applications: Develop chat applications using Spring WebFlux WebSocket and Redis Pub/Sub.",
        "Work with Geospatial Data: Use Redis for geospatial data storage and analysis.",
        "Gain Hands-On Experience: Learn through practical examples and demonstrations.",
        "Performance Improvement: See a significant performance boost in your applications."
      ],
      "course_content": {},
      "requirements": [
        "Knowledge on Reactive Programming & Spring WebFlux",
        "Comfortable with Indian Accent"
      ],
      "description": "Unlock the full potential of Spring WebFlux, a reactive and non-blocking web stack that outperforms traditional Spring Web MVC. In a Microservices architecture, where network calls to databases or external APIs are common, optimizing performance and scalability is crucial. This course delves into techniques for reducing unnecessary network calls, minimizing heavy recomputation, and maximizing the scalability of your Microservices.\nBy the end of this course, you will gain proficiency in:\nMicroservices Caching with Redis: Harness the power of Redis, explore various Redis data structures, leverage caching patterns, and implement cache eviction strategies. Learn to capture expired and deleted events from Redis and utilize Redis for rate limiting, batching, and transactions.\nSpring Data Reactive Redis / Redisson: Utilize a Java library for Redis that supports reactive streams. Implement cache-aside patterns for reactive types, create a generic cache template, and integrate Spring Data Reactive Redis with your applications.\nRedis as a Message Queue: Discover how Redis can serve as a powerful message queue in a Microservices architecture. Implement a priority queue using Redis and leverage Redis Pub/Sub for messages broadcasting.\nWebFlux WebSocket + Redis PubSub: Develop a chat application using Spring WebFlux WebSocket, enabling real-time messaging and broadcasting messages using Redis Pub/Sub. Create chat rooms and explore trend finding based on user views.\nGeospatial Data: Dive into Redis' geospatial data structure and develop a restaurant locator application using Spring WebFlux and Redis. Locate nearby restaurants based on user-provided zip codes.\nThroughout the course, practical examples and demonstrations reinforce your learning. In addition, a JMeter performance test showcases an impressive 80% performance improvement.\nJoin this course to elevate your Spring WebFlux skills, optimize Microservices performance, and unlock the vast capabilities of Redis for scalable and efficient applications.",
      "target_audience": [
        "Any Developer / Architect who is interested in Microservice Development / Architecture with WebFlux & Redis"
      ]
    },
    {
      "title": "Practical Linux Command Line 2.0",
      "url": "https://www.udemy.com/course/practical-linux-command-line/",
      "bio": "Get started quickly with the Linux Command Line - Step by step, with concrete Linux terminal examples.",
      "objectives": [
        "Master the basics of Linux command line",
        "Be confident when using a Linux terminal",
        "Be able to work on any project which requires the use of Linux",
        "Navigate in the Linux file system",
        "Create, remove, copy files and folders",
        "Edit files in the terminal with the Nano text editor",
        "Manage files and users permissions",
        "Install and update Linux packages",
        "Monitor processes and resources",
        "Network basics",
        "Remotely connect to a Linux terminal with SSH",
        "Use terminal shortcuts to go faster",
        "Work with multiple terminal windows at the same time",
        "Differences between Ubuntu, Debian, CentOS, and MacOS",
        "Apply best practices right from the start",
        "Learn by doing with hands-on lessons"
      ],
      "course_content": {
        "Introduction": [
          "Welcome!",
          "How to follow the course",
          "Install Linux (Ubuntu on VirtualBox) - optional",
          "Open a Terminal"
        ],
        "Navigate in the Linux File System": [
          "Navigate in the Terminal (pwd, ls, cd)",
          "Tips: Autocompletion, History, Clear the Terminal",
          "Linux File System Overview",
          "The Home Directory",
          "Using Absolute vs Relative Paths",
          "Show Hidden Files"
        ],
        "Work with Files & Folders": [
          "Create and Manage Files (touch, rm, cp, mv)",
          "Create and Manage Directories (mkdir, rm -rf, ls -R, cp, mv)",
          "See What’s Inside a File (cat, less, wc)",
          "Write Some Text Inside a File From the Terminal (echo)"
        ],
        "Edit Files in the Terminal": [
          "Edit a file in The terminal with Nano",
          "Configure Nano (.nanorc)",
          "Create and Execute a Bash File",
          "Extra: Discover Vim"
        ],
        "Manage Users and Permissions": [
          "What You Can and Can’t do as “your user”",
          "Run a Command with Admin Privilege (sudo)",
          "Understand File Owner and Permissions (ls -l)",
          "Change a File’s Owner (chown)",
          "Change a File’s Permissions (chmod)"
        ],
        "Install and Update Software": [
          "Install and Remove a Linux Package (apt, yum, brew)",
          "Update Existing Packages (update, upgrade)",
          "Extra: Use Snap on Ubuntu"
        ],
        "Become more productive with the command line": [
          "Find a Specific File by Name (find)",
          "Find Lines Containing a Pattern (grep)",
          "Pipe with Examples",
          "Linux Terminal Shortcuts",
          "Work with Multiple Terminals"
        ],
        "Monitor Processes and Resources": [
          "Find and Kill a Linux Process (ps, grep, kill)",
          "Monitor Space and Power Usage (df, htop)"
        ],
        "Network and SSH": [
          "Discover Basic Network Commands (ifconfig, hostname -I, ping, wget)",
          "Remotely Connect to Your Linux Terminal Using SSH",
          "Embedded Linux and Command Line - Quick Overview"
        ],
        "Scheduling and Automation": [
          "Schedule Tasks with Cron Jobs",
          "Make a Program Start on Boot with systemd"
        ]
      },
      "requirements": [
        "A computer and a strong will to learn, that’s it!"
      ],
      "description": "You are learning how to use the Linux command line, but you’re feeling lost?\nOr, you’re already a Linux user and want a quick refresher of the basics?\nAnd you prefer to learn by doing, with teaching material inspired from real life experience? → This Linux command line course 2.0 is for you.\nNo need to know anything about Linux to get started. I will start from zero and even provide instructions to install a Linux OS on a virtual machine, if you don’t have access to a Linux machine yet.\nThis course works on any Linux system: Debian, Ubuntu, CentOS, Fedora, and… MacOS! Yes, MacOS is actually based on Linux. The core concepts are the same for all Linux versions, with maybe just a few differences in the commands that I’m going to explain.\n\n\n→ Why this course?\n\n\nWell, learning the Linux command line can be quite confusing at best. I experienced that on my own, when I got my first Linux lessons in school. I just didn’t get it, and I just didn’t see the point of using all those complicated commands to complete exercises that I wasn’t going to use in real life anyway.\nAt first I was lost and kind of demotivated about it. But after a few professional experiences (web/mobile development, server administration and automation, robotics), I started to get a good grasp on the Linux terminal, and more importantly, I started to really understand why I need it and why it’s super powerful. Now, whenever I use a Linux OS, I just remove almost all graphical tools and open the terminal for everything.\nSo here, I’ve put all my years of Linux experience into this course, with a strong focus on understanding what you’re doing, and why you’re doing it - basically what was lacking in my own education.\nMy goal is that you can get a strong Linux command line foundation quickly, in just a few hours, and maybe avoid being confused for a few months/years before really “getting it”.\nThis Linux command line foundation will help you for anything IT related: web or software development, data science, machine learning, robotics, system administration, etc. This is the building block you need to go in any other direction.\nAnd there are many things that look fancy but are a waste of time, especially when you begin. So I’m going to teach you what I really use personally. No need to learn 150 commands to get started. With just a few ones and a good understanding, you can go a long way.\n\n\n→ How do I teach?\n\n\nStep by step: each section, each lesson, is built on top of the previous one, in a clean and ordered way. 1 lesson = 1 small step towards your mastery of the Linux command line.\nKeep things simple: as an engineer I know it’s tempting to make things over complicated to show you I know a lot of stuff. My philosophy for almost anything is: the simpler the better. By keeping things simple you won’t feel overwhelmed.\nHands-on: no complicated theoretical explanations, I directly write commands and explain at the same time. And I encourage you to also write the commands on your own.\nTo the point: if I can explain something in 5 minutes, I don’t produce a 15 minutes video to make the course look longer.\nPractical: I teach you what you really need to know about Linux using concrete examples, to do stuff you really need to do. I also give you some additional exercises to practice on the key concepts you’re going to use a lot.\n\n\n→ What will you learn/do in the course?\n\n\nFirst, if you don’t have access to a Linux OS, I will show you step by step how to install Ubuntu on a virtual machine, with a minimal and clean setup.\nOnce you have your Linux OS ready to be used, we will directly jump in and learn how to:\nNavigate and understand the Linux file system\nCreate and manage your own files and folders\nWrite into files using a command line text editor (Nano)\nChange files and users permissions\nInstall and update software\nMonitor Linux processes and computer resources\nRemotely connect to a Linux machine using SSH\nBonus: on top of all that, you will also learn how to improve your efficiency with the terminal, using auto-completion, pipes, search tools, keyboard shortcuts, multi-terminal setup, etc.\nAnd I’m going to give you all the best practices I got from my own experience, so you can start off on the right foot.\n\n\n→ Enroll today\n\n\nYou also get a 30 days money-back guarantee if you’re not fully satisfied. So just get started now, and if I don’t deliver on what I said, please do get the refund.\nSee you in the course! :)",
      "target_audience": [
        "Complete beginners who want to really understand what they do and want to get the “why” behind the Linux command line.",
        "Linux users who want a quick and to-the-point refresher.",
        "Anyone who wants to work in IT, because well, Linux command line is everywhere and you can’t just ignore it."
      ]
    },
    {
      "title": "Master Spring Boot Microservices with CQRS & Event Sourcing",
      "url": "https://www.udemy.com/course/master-spring-boot-microservices-with-cqrs-event-sourcing/",
      "bio": "Learn how to create Spring Boot microservices that are based on the CQRS & Event Sourcing. Powered by Java and Axon.",
      "objectives": [
        "How to create Java microservices with Spring Boot.",
        "How to create microservices that are based on the CQRS & Event Sourcing patterns.",
        "Implementing a database-per-service",
        "Axon Framework",
        "Using MongoDB as an Event Store",
        "Docker",
        "How to containerize Spring Boot microservices.",
        "Using different read database types including MySQL and MongoDB",
        "How to build an API gateway with Spring Cloud Gateway.",
        "How to create an OAuth 2.0 authorisation server with Spring Security.",
        "Securing microservices with the OAuth 2.0 resource server."
      ],
      "course_content": {
        "Introduction": [
          "What are You Going to Build?",
          "What are Microservices?",
          "CQRS & Event Sourcing",
          "Axon Platform",
          "Important Microservices Concepts"
        ],
        "Setup and Structure": [
          "Docker Installation Options For Mac / Windows",
          "Prerequisites",
          "Run Axon in Docker",
          "Run MongoDB in Docker",
          "Run MySQL in Docker",
          "Spring Initializr",
          "Basic Project Setup",
          "CQRS Project Structure",
          "Axon Configuration"
        ],
        "User Microservices": [
          "User Microservices",
          "User Domain Models",
          "User Commands",
          "User Events",
          "User Aggregate",
          "User Event Handler & Initial User Repository",
          "REST Controller for Registering Users",
          "Registering Your First User",
          "REST Controller for Updating Users",
          "REST Controller for Removing Users",
          "User Queries",
          "User Query Handler",
          "REST Controller for Retrieving Users",
          "User Microservices"
        ],
        "Securing Your Microservices": [
          "Introduction to Spring Security & OAuth2.0",
          "Generating the OAuth2.0 Project with Spring Initializr & Initial Setup",
          "User Repository & User Service",
          "Authorization Server & Web Security Configuration",
          "Securing the User Command & Query APIs",
          "Securing Microservices"
        ],
        "API Gateway": [
          "Introduction to API Gateways & Spring Cloud Gateway",
          "Create an API Gateway with Spring Cloud Gateway",
          "Testing API Gateway Routes",
          "API Gateways"
        ],
        "Bank Account Microservices": [
          "Bank Account Microservices",
          "Generating the Bank Account Projects with Spring Initializr",
          "Bank Account Project Setup",
          "Bank Account Domain Models",
          "Bank Account Commands",
          "Bank Account Events",
          "Bank Account Aggregate",
          "Bank Account Event Handler & Repository",
          "REST Controller for Opening a Bank Account",
          "REST Controller for Depositing Funds",
          "REST Controller for Withdrawing Funds",
          "REST Controller for Closing Bank Account",
          "Bank Account Queries",
          "Bank Account Query Handler",
          "Bank Account Lookup Controller",
          "Bank Account Microservices"
        ],
        "Dockerizing Your Microservices": [
          "Introduction to Containerization and Docker",
          "Containerize Your First Microservices",
          "Different Ways to Deploy Docker Images",
          "Containerization of Microservices"
        ]
      },
      "requirements": [
        "Have a basic understanding of Java"
      ],
      "description": "In this course you will not just learn how to create a small REST API, but you will learn how to create microservices that comply with best practice design principles, including CQRS, Event Sourcing and Domain-Driven Design.\nBy the end of this course you will know how to create loosely coupled Spring Boot microservices that each have their own database. You will also learn how to structure microservices projects in the correct way, deploy your microservices as Docker containers, and you will create your own OAuth2.0 authorization server and API gateway.\nThis course is a practical hands on course that will help you to master Spring Boot microservices with CQRS & event sourcing!\n\n\nWhat students are saying about this course?\n5-Stars: \"excellent course, beautifully explained, delivers what is expected, no beating around the bush straight to the point. some suggestions: - color of font in the terminal needs to be legible -If you can include Saga in this would be very helpful\" - Sanket Jadhav\n5-Stars: \"This is one of the best courses at Udemy which explaining microservices, CQRS and event sourcing with a step by step real-world implementation. I definitely recommend it.\" - Ismail Aksoy\n5-Stars: \"I took the precursor to this course (also by Sean Campbell, and just as excellent). Sean is an amazing teacher and he explains Microservices-related concepts really well, and in just 7 hours. Perfect!\" - Akoni Tee\n5-Stars: \"Excellent content coverage! The effort put into this course is highly appreciated Sean... Kudos :)\" - Donovan Mabunda\n5-Stars: \"Very Amazing course, thank you so much for this course, very useful\" - Nurul Hadi",
      "target_audience": [
        "Software Engineers",
        "Software Developers",
        "Software Architects",
        "Cloud Engineers",
        "Solution Architects"
      ]
    },
    {
      "title": "Full Stack Web Development with Django 5, TailwindCSS, HTMX",
      "url": "https://www.udemy.com/course/full-stack-django/",
      "bio": "Build a complete full stack web app | Master Django 5 | Pro styling with TailwindCSS | Docker and Docker Compose",
      "objectives": [
        "Code a full stack Django app using HTML, TailwindCSS, HTMX, and AlpineJS",
        "Set up a local Django development environment with Docker and Docker Compose",
        "Use Django Class-Based Views to set up advanced filtering and pagination",
        "Add Social Sign On to your Django apps with django-allauth",
        "Learn HTML and CSS from scratch, including semantic HTML, CSS flex, and CSS grid",
        "Learn to integrate a rich text editor with your Django apps"
      ],
      "course_content": {
        "Introduction": [
          "Overview of the Django course project",
          "Technical requirements for this course",
          "Curriculum overview",
          "How to get help",
          "Where to get the Django project code",
          "Change log of the course content"
        ],
        "HTML Fundamentals": [
          "The head and body elements",
          "Review: the head and body elements",
          "Block and inline elements",
          "Review: block and inline elements"
        ],
        "All the main HTML elements": [
          "Headings (h1 to h6)",
          "Let's code some headings!",
          "Paragraphs (p)",
          "Links (a)",
          "Let's code a text HTML page!",
          "Images (img)",
          "Lists (ul, ol, and li)",
          "Let's code a full HTML page!",
          "Divs and Spans"
        ],
        "HTML Forms": [
          "Introduction to HTML forms",
          "HTML text input fields (input)",
          "Let's code an HTML form!",
          "HTML checkboxes and radio buttons (input)",
          "HTML text areas (textarea)",
          "HTML dropdowns (select and option)",
          "Form submissions (method and action)",
          "Form accessibility and autocomplete",
          "Let's code a complete HTML form with multiple input types!"
        ],
        "Semantic HTML": [
          "Introduction to semantic HTML",
          "Header and nav elements",
          "Main, section, and article",
          "Aside and footer",
          "Let's code a complete page using semantic HTML!"
        ],
        "HTML meta tags": [
          "Meta tags and the viewport",
          "Open graph and Twitter meta tags",
          "Review: HTML meta tags!"
        ],
        "CSS Fundamentals": [
          "Introduction to CSS and selectors",
          "CSS units",
          "Review: CSS fundamentals!",
          "The CSS box model",
          "How does border-box work?",
          "Review: the CSS box model",
          "CSS selector specificity",
          "CSS positioning (relative, absolute, fixed, and sticky)",
          "Review: CSS selectors and positioning",
          "Working with colors in CSS",
          "Working with typography in CSS",
          "Review: colors and typography in CSS",
          "Pseudoclasses and pseudoelements"
        ],
        "CSS flex and grid": [
          "Introduction to CSS flex",
          "CSS flex justification and alignment",
          "CSS flex child item properties",
          "CSS flex gaps and line wrapping",
          "CSS grid columns and rows",
          "CSS grid template areas",
          "CSS grid repeating and auto-fit",
          "CSS grid placement",
          "CSS grid justification and alignment"
        ],
        "A Complete Python Refresher": [
          "Section intro, and can you skip it?",
          "Variables in Python",
          "Review: variables in Python",
          "String formatting with f-strings (and other)",
          "Getting user input with Python",
          "Review: string formatting and user input",
          "Lists, tuples, and sets in Python",
          "Review: lists, tuples, and sets",
          "Advanced Python set operations",
          "Working with booleans in Python",
          "Flow control: if statements in Python",
          "Review: booleans and if statements",
          "The 'in' keyword in Python",
          "Using the 'in' keyword in if statements with Python",
          "Review: The 'in' keyword and 'if' statements",
          "Python loops: for and while",
          "Review: loops in Python",
          "List comprehensions in Python",
          "Review: list comprehensions",
          "Working with Python dictionaries",
          "Review: Python dictionaries",
          "Destructuring variables in Python",
          "Review: destructuring variables",
          "Functions in Python",
          "Review: functions",
          "Function arguments and parameters in Python",
          "How to set default parameter values for functions in Python",
          "How to return values from functions in Python",
          "Anonymous or lambda functions in Python",
          "Dictionary comprehensions in Python",
          "Unpacking arguments with Python (*args)",
          "Unpacking keyword arguments with Python (**kwargs)",
          "Object-Oriented Programming in Python",
          "Magic Python methods: __str__ and __repr__",
          "@classmethod and @staticmethod in Python",
          "Class inheritance in OOP with Python",
          "Class composition in OOP with Python",
          "Type hinting with Python",
          "How do imports work in Python?",
          "Relative imports in Python (and why you should avoid them)",
          "Dealing with errors and exceptions in Python",
          "Create custom error classes in Python",
          "What are first-class functions in Python?",
          "Simple decorators in Python",
          "The 'at' syntax for decorators in Python",
          "Decorating functions with parameters",
          "Coding decorators with parameters",
          "What does 'mutability' mean in Python?",
          "Mutable default function parameters (and why they're a bad idea)"
        ],
        "Django local dev environment (project setup and configuration)": [
          "Intro to this section",
          "How to install pyenv and Python on Windows",
          "How to install pyenv and Python on Mac",
          "How to install Poetry on Windows",
          "How to install Poetry on Mac",
          "How to install VSCode on Windows",
          "How to install VSCode on Mac",
          "How to set up a virtualenv and install dependencies on Windows",
          "How to set up a virtualenv and install dependencies on Mac",
          "How to start a Django project on Windows",
          "How to start a Django project on Mac",
          "How to run migrations, create a superuser, and access the admin panel on Windows",
          "How to run migrations, create a superuser, and access the admin panel on Mac",
          "How to create a Django app on Windows",
          "How to create a Django app on Mac"
        ]
      },
      "requirements": [
        "Some Python knowledge will be helpful, although we include a full Python refresher",
        "No HTML or CSS knowledge is necessary",
        "No software is required, everything used is installed in the course",
        "No prior Django knowledge required!"
      ],
      "description": "Are you ready to level up your web development skills? Master modern full stack development using Django 5, TailwindCSS, and HTMX.\n\n\nWhat You'll Learn\nIn this comprehensive, project-based Django course, you'll build a complete, production-ready web application from the ground up. We'll learn Django to create robust projects without having to re-invent the wheel! We cover:\nSet up a Python environment and your Django projects\nUnderstand Model-View-Controller, requests, and responses\nWork extensively with Django templates\nAdd relationships between models (such as one-to-many or many-to-many)\nUse the Django ORM to query and aggregate data from your database\nUse and customize the powerful Django admin panel\nHandle user input with Django forms\nGenerate forms automatically using Django models\nAdd extensive authentication and social sign-on, including email confirmation\nLearn how to cache, compress, and serve static assets in production\n\n\nPlus you'll also learn an entire ecosystem around Django:\nTailwindCSS: Design sleek, responsive user interfaces\nHTMX: Add dynamic features without complex JavaScript\nPostgreSQL: Manage data with a production-grade database\nDocker & Docker Compose: Containerize your web application for easy deployment\nAuthentication: Implement secure user systems with Django-allauth, including social sign on\nMarkdown Editor: Integrate rich text editing capabilities with your Django project\nDeployment: Take your Django project live on Railway\n\n\nBy the end of this course, you'll have the skills to develop, design, and deploy full stack Django web applications using cutting-edge technologies.\n\n\nWhy Choose This Course?\nProject-Based Learning: Build a real-world Django application from start to finish\nComprehensive Tech Stack: Go beyond basic Django with modern tools and practices\nClear, Concise Explanations with Hand-Written Subtitles: Suitable for non-native English speakers\nPractical Skills: Learn techniques used in professional web development environments\nUp-to-Date Content: Stay current with the latest web development trends\nNo more piecing together fragmented tutorials or outdated resources. This course provides a cohesive learning experience that will take you from foundational concepts to advanced techniques in Django full stack development.\n\n\nJoin us to level up your web development skills. Whether you're aiming to boost your career prospects or bring your web application ideas to life, this course will give you the tools and knowledge you need to succeed.\n\n\nEnroll now and start your journey to becoming a proficient full stack Django developer.\n\n\nSee you in the course!",
      "target_audience": [
        "Entrepreneurs who want to quickly build their web projects using Django, a mature framework",
        "Software developers transitioning to a Django role or who want to learn the full stack",
        "Coding students learning to build full stack apps"
      ]
    },
    {
      "title": "Java Multithreading - Concurrency, Parallelism & Performance",
      "url": "https://www.udemy.com/course/multithreading-learnit/",
      "bio": "Learn Multithreading, Parallel Computing, Concurrency, Parallel Programming with Java code examples",
      "objectives": [
        "Multithreading :)",
        "Memory Management in Multithreading Programs",
        "Monitor/Mutex and how to work with it",
        "Build well designed & correct multithreaded applications in Java, with confidence",
        "How to create Java Multithreading Apps",
        "How Thread Scheduler works in Java",
        "What is Race Condition and how to avoid it",
        "Concurrent Programming",
        "Deadlocks & Livelocks and how to avoid them",
        "Executor Services in JDK",
        "Lock API in JDK",
        "Learn to write Asynchronous/Parallel Programming code using Functional Style APIs",
        "Synchronizers",
        "Gain expert-level practical knowledge of modern software architecture & programming using Threads",
        "Understand the advantages, limits and properties of Parallel computing",
        "Learn to write Asynchronous code using Completablefuture"
      ],
      "course_content": {
        "Introduction": [
          "Communication plan",
          "Unlimited access to 'Learn IT' application for students",
          "Tips to Improve Your Course Taking Experience",
          "Additional Free Learning Materials to Use During the Course",
          "Free AI Bot for My Students Only – No Sign-Up, FREE, Just Practice"
        ],
        "Synchronization Basics": [
          "Multithreading Overview",
          "First Multithreading Program: Thread & Runnable",
          "Thread Scheduler, Race Condition, Daemon Threads & Thread Groups",
          "Synchronization Basics"
        ],
        "Concurrent Programming": [
          "Memory Management in Multithreading Programs",
          "Deadlock & Livelock",
          "Executor Services, Callable & Future",
          "Executor Service Implementations & ThreadFactory"
        ],
        "Multithreading: Advanced": [
          "Fork/Join Framework",
          "CompletableFuture",
          "Lock API - Lock, ReadWriteLock, ReentrantLock, ReentrantReadWriteLock, StampedLo",
          "Synchronizers - CyclicBarrier, CountDownLatch, Semaphore, Exchanger & Phaser",
          "Virtual Threads"
        ],
        "Homework & Solution": [
          "Homework & Solution",
          "Quiz: Multithreading - Check yourself"
        ],
        "===== Multithreading in Java: Interview Preparation =====": [
          "Part 1: Java Multithreading Interview - Questions and Answers",
          "Part 2: Java Multithreading Interview - Questions and Answers"
        ],
        "Bonus section": [
          "Bonus lesson"
        ]
      },
      "requirements": [
        "Understanding of Java Syntax to be able understand code examples"
      ],
      "description": "From this course, you can learn Multithreading with Java Examples.\nThere are a lot of other courses on this topic. So, why would you choose exactly this course?  Here are just a few reasons:\n\n- Coding examples\nTo learn to program is not enough just watching videos and reading books. You also need to have a lot of practice. In this training course, you will review multiple practical tasks and coding examples which will help you learn and understand Java better.\n\n- Open source code\nWe hide nothing from our students! Including the source code for the home task solutions and source code of examples that were shared during the lesson. Having the source code you can just copy and paste it to run it on your local computer to understand how things work better.\nYou are allowed to use all source code examples for learning purposes. This helps significantly to configure the environment and make tests work, especially in case students didn't work with any testing framework in the past.\n\n- Q&A support\nThe significant difference between the online and offline learning process is the instructor's availability. If you are in one room with a tutor he always can help you to get understand the specific concept or to help fix your code on your computer.\nIn this course, we are supporting students with answers to any questions flagged in the Q&A section. In case there will be recurring questions - separate video lessons will be created to show how to address the issue.\nSo with this course you are not just getting video materials, code exercises, source code, access to the free mobile application without limits (which is still pretty cool, huh? :) ), but you also get tutor support and answers to your questions along with this course.\n\n- Relevant knowledge\nAfter our team investigated other Java courses on Udemy we realized that most of them have nothing in common with real life. The information which is shared there is very old and significantly out of date. For example, the instructor teaches a framework which is not been used already for 15 years. Or instructors do stress on the programming design which is not used anymore at all!\nThe instructor of this course is a consultant in a top-rated IT outsourcing company and helps to bring cutting-edge solutions in IT for all his clients. Feel free to check the LinkedIn page of the instructor and check skills endorsement. More than 19 thousand people across all over the world (BTW most of them are from the top 100 companies of the world) evaluated the skills of Andrii Piatakha.\nWith this course, you can be sure that you will spend your time learning the right things from one of the best IT consultants in the world.\n\n- Free mobile App without limits for our students\nKnowing Java is one skill. Be able to pass interviews in the company - that is another skill :) Nowadays a lot of companies use tests to select candidates on the first level of interview. We developed applications to practice skills specifically for such purposes.\nIn this course, we will provide you link to download our FREE mobile app for android. (soon it will be also available for iOS platforms)\nThe instructor of this course comes up with hundreds of tests that are used to test the knowledge of candidates. With this application, you will be well-prepared for the interview.\nAlso, only for our students - there is no limit on attempts to pass certification. In the course, we will tell you how to set up a special bonus code that will remove restrictions for our students inside the app.\n\n- High concentration of useful material in each lesson\nSometimes you can notice that watching 5 minutes of our lesson is equivalent to watching another 30 minutes lesson.\nThis is because time spent for preparation for the lesson (script for the lesson, lesson structure) and video editing (to cut boring pieces of the lesson or time when the program loads) sometimes 10 times as much (sometimes even 20) as the final lesson duration after video editing.\nAlso, each topic is separated from another. In case some concept will be explained in the next lesson and you don't need to worry about understanding this in the scope of this lesson - the instructor will make an announcement when a specific topic will be covered.\nGo and try it yourself! We will appreciate your feedback.\n\n\n\n\nSo don't wait! Take a look at the lessons' preview if you still have doubts!\nBuy this course today, and you will get all updates for FREE!\nFor those who successfully passed this training course, or for students who were recognized for asking amazing questions, there is a special offer from the IT-Bulls company! The creator of this course is IT-Bulls company CEO and Founder. We are always in search of talents to run our amazing startups together with you. Probably you always dreamed about running your startup? In this course, you will be able to find the team who will teach you how to do that and (in particular cases) will be glad to help with implementation!\nHope you enjoy this course! And remember, we appreciate all your feedback! Your feedback will help us to become even better! Your feedback will help us to create to best Java course ever!\nSee you at the lessons! :)",
      "target_audience": [
        "Junior and Senior Software Engineers with Java asa primary skill"
      ]
    },
    {
      "title": "Spring AI: Beginner to Guru",
      "url": "https://www.udemy.com/course/spring-ai-beginner-to-guru/",
      "bio": "Use Java to Unlock the Power of OpenAI's ChatGPT Artificial Intelligence (AI) with Spring AI",
      "objectives": [
        "Learn how to use Spring AI to interact with OpenAI",
        "How to write effective Prompts for Large Language Models",
        "Use Retrieval Augmented Generation to Improve Response Capabilities",
        "Using OpenAI Functions",
        "Generate Speech from Text",
        "Generate Text from Speech"
      ],
      "course_content": {
        "Introduction": [
          "Course Introduction",
          "Instructor Introduction",
          "Getting the Most Out of Your Course",
          "Setting Up Your Development Environment",
          "Is Your IDE Free Like A Puppy?",
          "Free 120 Day IntelliJ Trial",
          "Course Slack Room - Chat with Your Instructor and Other Students",
          "Github Workflow"
        ],
        "Introduction to AI": [
          "Introduction",
          "Types of Artificial Intelligence",
          "Introduction to Large Language Models (LLMs)",
          "Overview of OpenAI",
          "AI Quiz"
        ],
        "Introduction to Spring AI with OpenAI": [
          "Introduction",
          "Get Your OpenAI API Key",
          "Create New Spring Boot Project",
          "Configure OpenAI API Keys",
          "Add OpenAI Service",
          "Exploring LLM Capabilities",
          "Create Spring MVC Controller",
          "Test Controller with Postman",
          "Using Prompt Templates",
          "Directing OpenAI to format the Response",
          "Directing OpenAI to Respond with JSON",
          "Binding OpenAI Responses With JSON Schema",
          "OpenAI Response Meta Data",
          "Assn - Binding City with Info"
        ],
        "Prompt Engineering": [
          "Introduction",
          "Overview on Prompt Engineering",
          "Giving Clear and Precise Instructions",
          "Giving the Model Time to Think",
          "Generating Summaries with AI",
          "Inferring",
          "Zero Shot and Few Shot Prompting",
          "Chain of Thought",
          "Using System Messages",
          "Prompt Engineering Additional Resources"
        ],
        "Retrieval Augmented Generation - RAG": [
          "Introduction",
          "Overview of Retrevial Augmented Generation",
          "Spring AI Upgrade Notes",
          "Configure Vector Store",
          "Configure Vector Store Data Load",
          "Assignment - Create Ask / Answer Endpoint",
          "Returning Documents from Vector Store",
          "Improving Prompt Performance - Embedding Config",
          "Improving Prompt Performance - Trimming Data",
          "Providing Document Meta Data"
        ],
        "AI Recommendation Expert with RAG": [
          "Introduction",
          "Overview of Towing",
          "Spring Boot Project Review",
          "Configure Milvus Vector Database",
          "Vector Store Data to Load",
          "Load Vector Store",
          "Configure System Prompt and Test"
        ],
        "OpenAI Functions": [
          "Introduction",
          "Overview of Function Calling with OpenAI",
          "Spring Boot Project Review",
          "Get API Ninjas API Key",
          "Weather Service Function",
          "Configure Function Callback",
          "Provide Model with Function Response",
          "Use System Message to Improve Model Response",
          "Assignment - Create Stock Quote Service"
        ],
        "Spring AI Image Generation and Vision": [
          "Introduction",
          "Overview of Image Generation with OpenAI",
          "Code Review of Spring Boot Project",
          "Implement Spring MVC Endpoint",
          "Implement OpenAI Image Service",
          "Using DALL-E 3 OpenAI Model",
          "Using OpenAI Specific Image Options",
          "Overview of OpenAI Vision",
          "Create Spring MVC Controller",
          "Implement Vision Service"
        ],
        "Spring AI Text to Speech": [
          "Overview of Text to Speech with OpenAI",
          "Spring Boot Project Review",
          "Implement Spring MVC Endpoint",
          "OpenAI Speech Client"
        ],
        "Extra - Introduction to Junie and JetBrains AI": [
          "Installing JetBrains AI and Junie",
          "Hello World with Jetbrains AI",
          "Create a Spring Boot Project Using Inializer",
          "Create a JPA Entity Junie",
          "Create JPA Repository and Tests with Junie",
          "Create Service Layer and Spring MVC Controller",
          "Create Additional Controller Endpoints"
        ]
      },
      "requirements": [
        "Java and Spring Experience is Required",
        "Basic Understanding of RESTful APIs"
      ],
      "description": "Traditionally accessing Artificial Intelligence Models, such as OpenAI's ChatGPT, has been the domain of programming languages Python and Javascript.\nNot any more. Spring AI unlocks the power of Generative AI for Java developers.\nThe Spring AI project aims to streamline the development of applications that incorporate artificial intelligence functionality without unnecessary complexity.\nSpring AI provides support for all major Artificial Intelligence models, including:\nOpenAI\nAzure OpenAI\nAmazon Bedrock\nHuggingFace\nOllama\nGoogle VertextAI (PaLM2 and Gemini)\nMistral AI\nAntrhopic\nWatsonxAI\nSpring AI also supports image generation AI models from OpenAI and Stability.\nRetrieval Augmented Generation is an important use case for dealing with AI models. Spring AI includes robust support for all major Embedding Models and all popular vector databases.\nNo prior experience with AI is needed for this course.\nYou will start the course with a solid overview of what Artificial Intelligence is.\nNext you'll have a hands on section to develop a RESTful API to ask OpenAI's ChatGPT questions. In this section, you will learn how we can instruct the model to return data in the format we desire.\nSince no AI experience is required, the next section of the course builds upon what you learned with a formal look at Prompt Engineering. Prompt Engineering is a collection techniques to improve the quality and accuracy of responses from AI Models.\nRetrieval Augmented Generation (RAG) is an important technique to provide Large Language Models with additional information required to the user's query to complete specialized tasks.\nYou will see how we can use RAG to develop AI experts to perform high specialized tasks.\nThe AI models are not just limited to working with textual information.\nIn this course you will also see how to use AI to create images, create audio files from text, and how to transcribe audio files to text.\nCourse Updates\nSept 9th, 2024 - Course Updated to Spring AI 1.0.0-M2\nOctober 12th, 2024 - Course Updated to Spring AI 1.0.0-M3, Spring Boot 3.3.4\nJanuary 2nd, Course Updated to Spring AI 1.0.0-M5 and Spring Boot 3.3.6\nLearn all this and more in Spring A:I Beginner to Guru. Enroll today!",
      "target_audience": [
        "Any Java Developer wishing to get started using OpenAI"
      ]
    },
    {
      "title": "Master in Software Architecture, Engineering and Development",
      "url": "https://www.udemy.com/course/software-development-engineering-excellence-master-course/",
      "bio": "Best Course for software engineer / developer and team lead for best practices in programming, application security etc",
      "objectives": [
        "What is Excellence in Software Development",
        "Who are the best companies in software development",
        "What do these Excellent Companies do to develop softwares",
        "Best Practices from Excellent Software Development Companies like Google, Microsoft, Amazon, GitHub, Netflix and Spotify",
        "How can you also adapt these best practices and become Excellent in Software Development"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Overview": [
          "Overview I",
          "Overview I",
          "Overview II",
          "Overview II",
          "Overview III",
          "Overview III"
        ],
        "Case Studies": [
          "Case Studies I",
          "Case Studies I",
          "Case Studies II",
          "Case Studies II",
          "Case Studies III",
          "Case Studies III",
          "Case Studies IV",
          "Case Studies IV",
          "Case Studies V",
          "Case Studies V",
          "Case Studies VI",
          "Case Studies VI",
          "Case Studies VII",
          "Case Studies VII"
        ],
        "Agile Methodologies": [
          "Agile Methodologies I",
          "Agile Methodologies I",
          "Agile Methodologies II",
          "Agile Methodologies II",
          "Agile Methodologies III",
          "Agile Methodologies III",
          "Agile Methodologies IV",
          "Agile Methodologies IV",
          "Agile Methodologies V",
          "Agile Methodologies V",
          "Agile Methodologies VI",
          "Agile Methodologies VI",
          "Agile Methodologies VII",
          "Agile Methodologies VII",
          "Agile Methodologies VIII",
          "Agile Methodologies VIII",
          "Agile Methodologies IX",
          "Agile Methodologies IX",
          "Agile Methodologies X",
          "Agile Methodologies X",
          "Agile Methodologies XI",
          "Agile Methodologies XI",
          "Agile Methodologies XII",
          "Agile Methodologies XII"
        ],
        "User-Centric Design": [
          "User-Centric Design I",
          "User-Centric Design I",
          "User-Centric Design II",
          "User-Centric Design II",
          "User-Centric Design III",
          "User-Centric Design III",
          "User-Centric Design IV",
          "User-Centric Design IV",
          "User-Centric Design V",
          "User-Centric Design V",
          "User-Centric Design VI",
          "User-Centric Design VI"
        ],
        "Automation": [
          "Automation I",
          "Automation I",
          "Automation II",
          "Automation II",
          "Automation III",
          "Automation III",
          "Automation IV",
          "Automation IV",
          "Automation V",
          "Automation V",
          "Automation VI"
        ],
        "Innovation": [
          "Innovation I",
          "Innovation I",
          "Innovation II",
          "Innovation II",
          "Innovation III",
          "Innovation III",
          "Innovation IV",
          "Innovation IV",
          "Innovation V",
          "Innovation V"
        ],
        "Community Engagement": [
          "Community Engagement I",
          "Community Engagement I",
          "Community Engagement II",
          "Community Engagement II",
          "Community Engagement III",
          "Community Engagement III",
          "Community Engagement IV",
          "Community Engagement IV"
        ],
        "Security Focus": [
          "Security Focus I",
          "Security Focus I",
          "Security Focus II",
          "Security Focus II",
          "Security Focus III",
          "Security Focus III",
          "Security Focus IV",
          "Security Focus IV"
        ],
        "Summary": [
          "Summary"
        ]
      },
      "requirements": [
        "Spending 6.5 hours learning about excellence in software development"
      ],
      "description": "Want to become Excellent  in Software Development  but don’t know what to do and how?\nTake a look at this course where you will\nNot only learn what to do to become Excellent in Software Development but also learn\nHow to adopt the Software Development Excellence Practices from Global Software Leaders.\nPreview many lectures for free to see the content for yourself\n·Get Udemy’s 30 days Money Back Guarantee\nGet 4 bonus lectures of my new courses every month through educational announcements  in your email\nEnroll for free in my any other course using the coupon link in my YouTube channel videos from time to time subject to availability\nMy exposure to Software Development Excellence started when I came in contact with great software development companies like CISCO etc who came to IIM Udaipur to recruit management students to help them maintain and build on their excellence\nI came to know about their requirements from the management students to drive excellence in Software Development\nI went on a journey to discover the best practices following by researching not only the companies visiting IIM Udaipur but also the Best Software Development Companies globally like GitHub, Netflix, Amazon Web Services, Spotify, Google and Microsoft\nI bring in this course my learnings from this journey and sharing with you how can you also become Excellent in Software Development\nLook at what other students like you are saying about this course\n\"Comprehensive and Insightful Guide to Mastering Software Development. Thank you for creating this excellent online tutorial on mastering software development. The lessons are well-structured, clear, and very informative\"\n\"GREAT\"\n\"Awesome\"\n\"great content\"\n\"Excellent and brief explanation about the topics in the industry\"\n\"Super\"\n\"It was very helpful, hatsoff to our mentor sir\n\"It has too much good experience for me\"\n\"verry good\"\n\"Very Useful knowledge\"\n\"Very good course to learn\"\n\"Very good\"\n\"My first time and the lesson are clearly explained. Looking forward to further in the course of study\"\n\"Good\"\n\"It is a good match and easy to understand\"\nPreview for yourself many lectures free. If you like the content, enroll for the course, enjoy and skill yourself to Become Excellent in Software Development! If don't like the content, please message about how can we modify it to meet your expectations.\nPlease remember that this course comes with Udemy’s 30 days Money Back Guarantee",
      "target_audience": [
        "Software Development Leaders including Team Leads",
        "Aspiring Software Development Team Leaders"
      ]
    },
    {
      "title": "Industrial Communication by Siemens S7 1200PLC-Real Hardware",
      "url": "https://www.udemy.com/course/industrial-communication-by-siemens-s7-1200plc-real-hardware/",
      "bio": "Modbus RTU-RS485 , USS , IO-Link , Profinet , MQTT , Node-red , Webserver , Message(SMS)",
      "objectives": [
        "**You can request a coupon code for a discount",
        "Modbus RTU RS485",
        "USS",
        "IO-Link",
        "Webserver",
        "send and receive message (gsm / sms)",
        "Node-red , mqtt by siemens S71200 PLC",
        "Profinet Siemens V90 Servo"
      ],
      "course_content": {
        "Giriş": [
          "Giriş",
          "Lumel P18D introduction",
          "Modbus Blocks",
          "Lumel P18D modbus communicaiton programing",
          "Lumel P18D modbus communicaiton programing-2",
          "Lumel Modbus Add hmi (wincc)-1",
          "Lumel Modbus sample project -1",
          "Lumel Modbus sample project - 2",
          "Kinco servo instruction and modbus programming",
          "Kinco servo instruction and modbus programming-2",
          "Kinco servo instruction and modbus programming-3",
          "Kinco servo instruction and modbus programming-4-hmi",
          "Kinco servo instruction and modbus programming-5-hmi",
          "Sinamics v20 instruction",
          "Sinamics v20 modbus programming - 1",
          "Sinamics v20 modbus programming - 2",
          "Sinamics v20 modbus programming - 3",
          "Sinamics v20 modbus programming - 4 -hmi",
          "Sinamics v20 USS communication-1",
          "Sinamics v20 uss communication-2",
          "Sinamics v20 uss communication-scada-1",
          "Sinamics v20 uss communication-scada-2",
          "Danfoss FC51 Modbus RTU communication-1",
          "Danfoss FC51 Modbus RTU communication-2",
          "Danfoss FC51 Modbus RTU communication-3",
          "Modbus RTU communication between S7 1200 and S7 1200-1",
          "Modbus RTU communication between S7 1200 and S7 1200-2",
          "Modbus RTU communication between S7 1200 and S7 1200-3(RF Modem)",
          "IO LINK communication between S7 1200 and S7 1200",
          "Send and Recive SMS Message from plc-1",
          "Send and Recive SMS Message from plc-2"
        ],
        "V90 servo motor control with S7 1200": [
          "Device and system",
          "V assistant",
          "Commissioning",
          "Motion control command",
          "Continuie to program",
          "HSP install to TIA portal",
          "HMI add to project",
          "HMI program test"
        ],
        "Webserver in S7 1200 PLC": [
          "Webserver",
          "Webserver-2",
          "Webserver-3",
          "Webserver-4 java script gauge"
        ],
        "Node-red S71200": [
          "Install Nodejs and Node Red",
          "Node-red -1",
          "Node-red -2",
          "Node-red -3"
        ],
        "Connection between s7 1200 and MQTT(Mosquitto)": [
          "Mosquitto Setup"
        ]
      },
      "requirements": [
        "Basic level s7 1200 programming"
      ],
      "description": "In this training, we will work with industrial communication systems.\nCommunication systems make our projects easier and cheaper.\n\n\nFirst we will work with rs 485 modbus rtu protocol which is one of the most popular communication protocols.\nMany brands offer this communication protocol as standard.\nIn our first project we will use a lumel sensor. This sensor measures temperature and humidity. And it has modbus rtu protocol.\nWe will control the kinco servo motor with modbus rtu.\nWe will make operator panel and scada software with wincc in all our projects.\n\n\nOur next project will be with siemens v20 speed controller.\nThis device has two communication protocols. Modbus RTU and USS communication protocols.\nAfter controlling the drive with modbus rtu communication , we will control it with USS.\nour other communication protocol will be IO link.\nThis communication protocol is easy and simple for 2 or more Siemens S7 1200 PLC communication.\nIn this course we will use the webserver feature of siemens plc.\nWe will access plc via internet browser and exchange data. We will design the interface using html and java.\nWe will make projects with plc using mqtt and node-red.\nIn our next project, we will send a message to plc with Gsm module and receive a message from plc\nAfter supplying the devices, we will control siemens V90 servo system.\nLet's start our course",
      "target_audience": [
        "Technicians",
        "Engineers",
        "Students"
      ]
    },
    {
      "title": "Developing a Multithreaded Kernel From Scratch!",
      "url": "https://www.udemy.com/course/developing-a-multithreaded-kernel-from-scratch/",
      "bio": "Build a multitasking operating system and kernel with an interactive shell! osdev",
      "objectives": [
        "How to create a kernel from scratch",
        "How to create a multi-tasking kernel",
        "How to handle malicious or problematic programs in your operating system. Terminating them if they misbehave.",
        "How memory works in computers",
        "The difference between kernel land, user land and the protection rings that make up modern computing",
        "Kernel design patterns used by the Linux kernel its self",
        "You will learn all about virtual memory and how to map virtual addresses to physical addresses",
        "You will learn how to make the kernel understand processes and tasks",
        "You will learn how to load ELF files",
        "You will learn how to debug disassembled machine code",
        "You will learn how to debug your kernel in an emulator with GDB."
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Setup And A Brief Explanation Of Kernel Development": [
          "What Is Memory?",
          "The Boot Process",
          "Installing What We Need For Real Mode Development"
        ],
        "Real Mode Development": [
          "Hello World Bootloader",
          "Understanding Real Mode",
          "Segmentation Memory Model",
          "Improving Our Bootloader",
          "Preparing our bootloader to be booted on real hardware",
          "Writing our bootloader to a USB stick",
          "Booting the bootloader",
          "The Interrupt Vector Table Explained",
          "Implementing our own interrupts in real mode",
          "Disk Access And How It Works",
          "Reading from the hard disk"
        ],
        "Protected Mode Development": [
          "What is Protected Mode?",
          "Switching To Protected Mode",
          "Restructuring Our Project",
          "Enabling the A20 line",
          "Creating a Cross Compiler So We Can Code In C",
          "Loading our 32 bit kernel into memory and working with debugging symbols",
          "Cleaning our object files",
          "Dealing With Alignment Issues",
          "C Code In Protected Mode",
          "Text Mode Explained",
          "Writing To The Screen, Hello World Tutorial",
          "Interrupt Descriptor Table Explained",
          "Implementing The Interrupt Descriptor Table",
          "Implementing In and Out Functions",
          "Programmable Interrupt Controller Explained",
          "Programmable Interrupt Controller Implementation",
          "Understanding The Heap And Memory Allocation",
          "Implementing Our Heap",
          "Creating the enable interrupts function",
          "Understanding Paging",
          "Implementing Paging",
          "Modifying the page table",
          "Preparing To Read From The Hard Disk",
          "Reading from the disk in C with the ATA controller",
          "Improving Our Disk Driver",
          "What is a filesystem?",
          "Creating a path parser",
          "Creating a disk stream",
          "File Allocation Table Explained",
          "Starting To Create our FAT File system",
          "Understanding the VFS(Virtual File System) Layer",
          "Implementing our virtual filesystem core functionality",
          "implementing FAT16 filesystem driver core functionality",
          "Implementing FAT16 Structures",
          "Implementing The FAT16 Resolver Function",
          "Implementing the VFS fopen function",
          "Implementing FAT16 fopen function",
          "Implementing the VFS fread function",
          "Implementing FAT16 fread functionality",
          "Implementing the VFS fseek functionality",
          "Implementing the FAT16 fseek functionality",
          "Implementing the fstat VFS functionality",
          "Implementing the FAT16 fstat function",
          "Implementing the VFS fclose functionality",
          "Implementing the FAT16 fclose functionality",
          "Implementing a kernel panic",
          "Understanding User Land",
          "Changing our kernel segment and data descriptors to be written in C",
          "Implementing The TSS(Task Switch Segment)",
          "Implementing Task Foundations",
          "Implementing Process Foundations Part 1",
          "Implementing Process Foundations Part 2",
          "Packing the GDT",
          "Implementing User Land Functionality",
          "Creating our first user process application",
          "Executing the process and dropping into user land privileges",
          "Changing the paging functionality",
          "Talking with the kernel from userland",
          "Creating the interrupt 0x80 for user process to kernel communication",
          "Creating the ability to create and execute kernel commands",
          "Creating our first kernel command",
          "Calling our kernel command",
          "Copying strings from the tasks process",
          "Reading the task's stack",
          "Creating the print command in the kernel",
          "Understanding keyboard access in protected mode",
          "Creating the virtual keyboard layer",
          "Creating the PS2 port keyboard driver part 1",
          "Improving our interrupt descriptor table design",
          "Creating a cleaner way to create interrupt handlers in the interrupt descriptor",
          "Changing The Current Process",
          "Creating the PS2 port keyboard driver part 2",
          "Getting a key from the keyboard buffer in user land",
          "Creating a putchar command that writes one character to the terminal",
          "Implementing backspace in the terminal",
          "Revising our stream reader",
          "Elf Files Explained",
          "Implementing The Elf Loader - Part 1",
          "Implementing The Elf Loader - Part 2",
          "Implementing The Elf Loader - Part 3",
          "Implementing The Elf Loader - Part 4",
          "Implementing The Elf Loader - Part 5",
          "Implementing The Elf Loader - Part 6",
          "Writing User Programs In C",
          "Implementing system print in stdlib",
          "Implementing system get key in stdlib",
          "Implementing Malloc In Our stdlib",
          "Implementing Free In Our stdlib",
          "Changing the way we map virtual pages for the process",
          "Implementing itoa function",
          "Implementing the putchar function",
          "Implementing the printf function",
          "Implementing the ability to read lines",
          "Creating a shell",
          "Loading other programs from our shell",
          "Creating some important stdlib functions",
          "Memory Mapping malloc in stdlib",
          "Memory Unmapping free In stdlib",
          "Process arguments - Part 1",
          "Process Arguments - Part 2",
          "Process Arguments - Part 3",
          "Implementing A 'System' Command",
          "Implementing program termination",
          "Handling program crashes",
          "Creating an exit command",
          "Handling caps lock, upper case and lower case letters",
          "Running multiple tasks at the same time multi-tasking"
        ],
        "Optional": [
          "README",
          "Changing our fat16_new_fat_item_for_directory_item function",
          "Changing our fat16_open function",
          "Changing our fat16_get_root_directory function",
          "Changing our process_load_binary function",
          "Improvements to our fat16_to_proper_string function",
          "Changing our restore_general_purpose_registers function",
          "Final Kernel Improvements"
        ],
        "Assembly Language Catchup": [
          "Assembly Catchup!",
          "What is assembly language?",
          "Installing the emulator",
          "Hello World In Assembly",
          "Transistors And Logic Gates Understanding The Processor",
          "Registers in the 8086",
          "Segmentation Memory Model Explained",
          "The Stack, Subroutines And Endiness Explained"
        ],
        "Conclusion": [
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "You must know the C programming language",
        "It is wise have some basic knowledge in assembly language",
        "You should have a Linux operating system, free to install from the internet (We use Ubuntu in this course)"
      ],
      "description": "This course is designed to teach you how to create your very own multitasking operating system and kernel from scratch. It is assumed you have no experience in programming kernels and you are taught from the ground up.\nReal Mode Development\nReal mode is a legacy mode in all Intel processors that causes the processor to start in a legacy state, it performs like the old 8086 Intel processors did back in the way.\nIn the \"Real Mode Development\" section of the course we start by learning about the boot process and how memory works, we then move on to creating our very own boot loader that we test on our real machine! This boot loader will output a simple \"Hello World!\" message to the screen and we write this boot loader in purely assembly language.\nIn this section we also read a sector(512 bytes) from the hard disk and learn all about interrupts in real mode and how to create them.\nThis section gives you a nice taster into kernel development, without over whelming you with information. You are taught the basics and enough about the legacy processors to be able to move forward to more modern kernel development further into this course.\nProtected Mode Development\nIn this section we create a 32 bit multi-tasking kernel that has the FAT16 filesystem. Our kernel will use Intel's built in memory protection and security mechanisms that allow us to instruct the processor to protect our kernel and prevent user programs from damaging it.\nThis section is very in depth, you are taught all about paging and virtual memory. We take advantage of clever instructions in Intel processors to allow all processes to share the same memory addresses, this is known as memory virtualization. We map memory addresses to point to different physical memory addresses to create the illusion that every process that is running is loaded at the same address. This is a very common technique in kernel development and is also how swap files work (Those files that are used to compensate for when you run out of usable RAM).\nWe create our own virtual filesystem layer that uses a design that is similar to the Linux kernel. This clever abstraction that will be taught to you was inspired by the instructors knowledge of writing Linux kernel drivers in his past.\nYou are taught about the design of the FAT16 filesystem and how the FAT16 filesystem is broken down into clusters and that they can chain together. We then implement our very own FAT16 filesystem driver allowing files to be born!\nWe implement functionality for tasks and processes and write our own keyboard drivers.\nIn this course you also get to learn how memory management works, we implement the \"malloc\" and \"free\" functions creating our very own heap that's designed to keep track of what memory is being used. Memory management is essential in any operating system and kernel.\nLet us not forget that we even create an ELF file loader, we will compile all our operating systems programs into ELF files and allow the loading of binary programs or ELF programs. ELF files contain a lot of information that describes our program for example where our program should be loaded into memory and the different sections of the program.\nBy the end of this course you will have a fully functioning 32 bit multi-tasking kernel that can have many processes and tasks running at the same time. You will have a working shell that we can use as well.\nAssembly language bonus\nThis is a bonus section designed to bring your assembly skills up to scratch should you struggle a little bit with the assembly language in this course. It's however advised you come to this course with experience in assembly language, we do use it and its important. Never the less if you want to take a chance on this course with no assembly experience then this section will help point you in the right direction so your able to take what you learned and apply it to the kernel.\n\n\nTaught by an expert that has created Linux kernel modules professionally in the work place. 15 Years Experience As A Software Engineer",
      "target_audience": [
        "Beginner kernel developers who want to learn how to create kernels"
      ]
    },
    {
      "title": "DevOps: CI/CD using AWS CodePipeline & Elastic Beanstalk",
      "url": "https://www.udemy.com/course/devops-automation-aws-codepipeline-elastic-beanstalk/",
      "bio": "Learn Automated Continuous Deployment using AWS CodePipleine, Elastic Beanstalk & Lambda (includes example PHP project).",
      "objectives": [
        "Conceptualize and design fully automated continuous integration & deployment pipelines",
        "Use AWS CodePipeline to setup CI/CD pipelines",
        "Use AWS Elastic Beanstalk to deploy applications",
        "Map any real-world application into a CI/CD pipeline",
        "Integrate custom builds / actions in AWS CodePipeline",
        "Adding AWS Lambda functions in AWS CodePipeline",
        "Monitor their AWS CodePipeline"
      ],
      "course_content": {},
      "requirements": [
        "Basic knowledge of software development processes (code repository, testing, etc.)",
        "Amazon Web Services (AWS) Account (free or paid)",
        "Basic understanding of AWS services such as EC2 and IAM is recommended but not required",
        "Rudimentary / Working knowledge of source control systems such as Git"
      ],
      "description": "Automated Continuous Integration (CI) and Continuous Deployment (CD) is a critical part of DevOps and is a skill that is in high demand.\n\nIn this course, we will examine the subject in complete depth by walking through an example project and building a complex CI/CD pipeline on AWS. You will gain the following\nfive\nextremely valuable and highly sought after skills:\nLearn to conceptualize and design CI/CD pipelines for your own web applications\nDeploy and scale web applications on Amazon's Cloud infrastructure using AWS Elastic Beanstalk\nBuild pipelines on Amazon's Cloud infrastructure using AWS CodePipeline\nLearn advance topics such as Elastic Beanstalk Extensions and AWS Lambda to run custom actions in your CodePipeline\nMonitor your automated CI/CD pipelines\nThe tech landscape today is extremely competitive and is moving at an incredibly fast pace. With the emergence of cloud-based infrastructure, many startups are disrupting long-established businesses, industries and sectors almost on a daily basis as their entry barriers and costs keep on going down. DevOps and continuous integration / continuous deployment processes allows team to iterate often and innovate faster.\n\nAfter taking this course, you will have a comprehensive understanding of continuous integration and continuous deployment processes. You will be able to confidently design a CI/CD pipeline for your own web applications. You will gain an in-depth understanding of AWS CodePipeline and AWS Elastic Beanstalk services.\nWith these skills, you will be able to build fully automate deployments of your web applications on Amazon’s Cloud infrastructure.\nThe course is very hands-on and together we will walk through an example project. We will pick a web application and deploy it on Amazon’s Cloud using AWS Elastic Beanstalk. I will then demonstrate and create a fully automated CI/CD pipeline for our web application using AWS CodePipeline. I will cover both of these AWS services in complete depth while also giving you easy to follow step-by-step instructions.\n\nWe will also cover some advance topics such as ebextensions and adding AWS Lambda functions in your AWS CodePipeline.\n★ 4000+ students enrolled\n★ Rated highly by students\n★ 70% course is practical based",
      "target_audience": [
        "Software Engineers, Web Designers and Developers",
        "Infrastructure, DevOps & QA teams",
        "Tech founders, CTOs & SME owners",
        "Someone looking to automate their web application delivery process using AWS"
      ]
    },
    {
      "title": "Solving LeetCode's Top Interview Questions in Java [2025]",
      "url": "https://www.udemy.com/course/solving-leetcodes-top-interview-questions-in-java/",
      "bio": "Expand your knowledge of problem solving and impress your coding interviewers.",
      "objectives": [
        "Familiarity working with Arrays, Strings, Trees, Linked Lists and many other data structures",
        "Exposure to the most common questions asked in interviews",
        "Be able to critically analyze a problem and work towards an efficient solution",
        "Learn numerous tricks which can be applied to the future questions you encounter",
        "Gain the confidence and skills to ace your coding interviews",
        "Consider time and space complexity when designing algorithms"
      ],
      "course_content": {
        "Arrays": [
          "(Easy) LeetCode 26: Remove Duplicates From Sorted Array",
          "(Medium) LeetCode 122: Best Time To Buy and Sell Stock II",
          "(Medium) LeetCode 189: Rotate Array",
          "(Easy) LeetCode 217: Contains Duplicate",
          "Understanding Binary Representation",
          "(Easy) LeetCode 136: Single Number",
          "(Easy) LeetCode 350: Intersection of Two Arrays II",
          "(Easy) LeetCode 66: Plus One",
          "(Easy) LeetCode 283: Move Zeroes",
          "(Easy) LeetCode 1: Two Sum",
          "(Medium) LeetCode 36. Valid Sudoku",
          "(Medium) LeetCode 48: Rotate Image",
          "(Medium) LeetCode 15: 3Sum",
          "(Medium) LeetCode 73: Set Matrix Zeroes",
          "(Medium) LeetCode 49: Group Anagrams"
        ],
        "Strings": [
          "(Easy) LeetCode 344: Reverse String",
          "(Medium) LeetCode 7: Reverse Integer",
          "(Easy) LeetCode 387: First Unique Character in a String",
          "(Easy) LeetCode 242: Valid Anagram",
          "(Easy) LeetCode 125: Valid Palindrome",
          "(Medium) LeetCode 8: String to Integer (atoi)",
          "(Easy) LeetCode 28: Find the Index of the First Occurrence in a String",
          "(Easy) LeetCode 14: Longest Common Prefix",
          "(Medium) LeetCode 3: Longest Substring Without Repeating Characters"
        ],
        "Linked Lists": [
          "(Medium) LeetCode 237: Delete Node in a Linked List",
          "(Medium) LeetCode 19: Remove Nth Node From End of List",
          "(Easy) LeetCode 206: Reverse Linked List",
          "(Easy) LeetCode 21: Merge Two Sorted Lists",
          "(Easy) LeetCode 234: Palindrome Linked List",
          "(Easy) LeetCode 141: Linked List Cycle"
        ],
        "Trees": [
          "Depth First Search",
          "Breadth First Search",
          "(Easy) LeetCode 104: Maximum Depth of Binary Tree",
          "(Medium) LeetCode 98: Validate Binary Search Tree",
          "(Easy) LeetCode 101: Symmetric Tree",
          "(Medium) LeetCode 102: Binary Tree Level Order Traversal",
          "(Easy) LeetCode 108: Convert Sorted Array to Binary Search Tree",
          "(Medium) LeetCode 103: Binary Tree Zigzag Level Order Traversal",
          "(Medium) LeetCode 105: Construct Binary Tree from Preorder and Inorder Traversal"
        ],
        "Sorting and Searching": [
          "(Easy) LeetCode 88: Merge Sorted Array",
          "(Easy) LeetCode 278: First Bad Version (Binary Search)"
        ],
        "Dynamic Programming": [
          "Introduction to Dynamic Programming",
          "(Easy) LeetCode 70: Climbing Stairs",
          "(Easy) LeetCode 121: Best Time to Buy and Sell Stock",
          "(Medium) LeetCode 53: Maximum Subarray (Kadane's Algorithm)",
          "(Medium) LeetCode 198: House Robber",
          "House Robber Optimized Solution (Constant Space Complexity)",
          "(Medium) LeetCode 55: Jump Game"
        ],
        "Design (Object Implementation)": [
          "(Medium) LeetCode 384: Shuffle an Array",
          "(Medium) LeetCode 155: Min Stack"
        ],
        "Math": [
          "(Easy) LeetCode 412: Fizz Buzz",
          "(Medium) LeetCode 204: Count Primes",
          "Count Primes Time Complexity Proof",
          "(Easy) LeetCode 326: Power of Three",
          "(Easy) LeetCode 13: Roman to Integer"
        ],
        "Others": [
          "(Easy) LeetCode 191: Number of 1 Bits",
          "(Easy) LeetCode 461: Hamming Distance",
          "(Easy) LeetCode 190: Reverse Bits",
          "(Easy) LeetCode 118: Pascal's Triangle",
          "(Easy) LeetCode 20: Valid Parentheses",
          "(Easy) LeetCode 268: Missing Number"
        ],
        "Graphs": [
          "Introduction",
          "Representations of Graphs",
          "Adjacency List Quiz",
          "Depth First Search",
          "Breadth First Search",
          "(Easy) LeetCode 1971: Find if Path Exists in Graph",
          "(Medium) LeetCode 841: Keys and Rooms",
          "(Medium) LeetCode 207: Course Schedule"
        ]
      },
      "requirements": [
        "Basic understanding of data structures and algorithms",
        "Fundamental understanding of Java syntax"
      ],
      "description": "Welcome!\nHello everyone, and welcome to the course that will help you prepare for your coding interviews!\n\n\nSpecifically, we will be breaking down the problems of LeetCode's Top Interview Questions playlist. This playlist includes problems that are very commonly asked by interviewers from large tech companies such as Apple, Meta, Google, Uber, and many more! We will learn how to approach problems of all kinds, such as those consisting of Arrays, Strings, Linked Lists, Trees, Dynamic Programming, Design, Math, and general knowledge, while also learning useful concepts and tricks which will help when facing more difficult problems.\n\n\nWhat is LeetCode?\nSimply put, LeetCode is a large repository filled with interview questions asked by the top tech companies around the world (Google, Facebook, Amazon, and many more).\nThe main problem as a new user on LeetCode is that there are ENDLESS amounts of questions that you can find on there so you may not know which questions are the most common/beneficial to go over. This course's purpose is to provide a solution to this issue, as I go over the Top Inteview Questions recommended by LeetCode. If you are looking to ace your upcoming coding interview or even just to strengthen your problem solving skills, then look no further as you have found the one-stop-shop to become a problem solving machine.\nCourse Overview\nFor each problem in the playlist, I have a video dedicated to explaining the thought process in detail which will lead us to the most efficient solution, paired with a visual to aid in explaining the algorithm. After we understand the approach for the most efficient solution, I will translate the visual into Java code, breaking down every line as I code it. After the entire solution is implemented, we will analyze the time and space complexity of the solution.",
      "target_audience": [
        "Developers looking to solidify their problem solving skills and ace their coding interviews"
      ]
    },
    {
      "title": "Java Microservices: CQRS & Event Sourcing with Kafka",
      "url": "https://www.udemy.com/course/java-microservices-cqrs-event-sourcing-with-kafka/",
      "bio": "Learn how to create microservices that are based on CQRS & Event Sourcing. Powered by Spring Boot and Apache Kafka.",
      "objectives": [
        "CQRS",
        "Event Sourcing",
        "Creating DDD-Oriented Microservices",
        "Using MongoDB as an Event Store",
        "Optimistic Concurrency Control",
        "Event Versioning",
        "Using Apache Kafka as a Message Bus",
        "Implementing the Database-Per-Service Pattern",
        "Spring Framework",
        "Docker",
        "Using MySQL to Implement the Read Database",
        "Replay the Event Store and Recreate the State of the Aggregate",
        "Replay the Event Store and Recreate the Entire Read Database",
        "Replay the Event Store and Recreate the Read Database in a Different Database Type - PostgreSQL"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Microservices Basics",
          "CQRS & Event Sourcing",
          "Architecture Overview",
          "Apache Kafka",
          "Introduction",
          "Selling CQRS and Event Sourcing"
        ],
        "Setup & Structure": [
          "Setup & Structure Intro",
          "Prerequisites",
          "Run Kafka in Docker",
          "Run MongoDB in Docker",
          "Run MySQL in Docker",
          "Spring Intializr",
          "Basic Project Setup",
          "Configure Account Command API",
          "Configure Account Query API",
          "Setup & Structure"
        ],
        "Messages": [
          "What is a Command?",
          "Commands",
          "What is an Event?",
          "Events",
          "Messages"
        ],
        "Command Dispatching": [
          "The Mediator Pattern",
          "CommandDispatcher Interface (The Mediator)",
          "AccountCommandDispatcher (The Concrete Mediator)",
          "Command Dispatching"
        ],
        "Aggregate": [
          "What is an Aggregate?",
          "AggregateRoot",
          "AccountAggregate",
          "Aggregates"
        ],
        "Event Store": [
          "What is an Event Store?",
          "EventModel",
          "EventStoreRepository",
          "EventStore Interface",
          "AccountEventStore",
          "EventSourcingHandler Interface",
          "AccountEventSourcingHandler",
          "Event Store"
        ],
        "Command Handling": [
          "The Mediator Pattern Continued",
          "CommandHandler Interface (The Abstract Colleague)",
          "AccountCommandHandler (The Concrete Colleague)",
          "Register Command Handlers",
          "Command Handling"
        ],
        "Event Producer": [
          "Kafka Producer",
          "EventProducer Interface & Implementation",
          "Producing an Event",
          "Event Producer"
        ],
        "Domain Layer": [
          "Important DDD Concepts",
          "BankAccount Entity",
          "AccountRepository",
          "Domain"
        ],
        "Event Handling": [
          "Event Handling Introduction",
          "EventHandler Interface",
          "AccountEventHandler",
          "Event Handling"
        ]
      },
      "requirements": [
        "Basic understanding of Java programming language"
      ],
      "description": "In this course you will learn how to create Spring Boot microservices that comply to the CQRS and Event Sourcing patterns.\nYou will not use any CQRS framework, but you will write every line of code that is required to effectively create your own CQRS and Event Sourcing framework using Java and Apache Kafka. While this might sound a little daunting, you will be carefully guided step by step, and gain all the know-how and confidence to become an expert in CQRS and Event Sourcing.\nBy the end of this course you will know how to:\nHandle commands and raise events.\nUse the mediator pattern to implement command and query dispatchers.\nCreate and change the state of an aggregate with event messages.\nImplement an event store / write database in MongoDB.\nCreate a read database in MySQL.\nApply event versioning.\nImplement optimistic concurrency control.\nProduce events to Apache Kafka.\nConsume events from Apache Kafka to populate and alter the read database.\nReplay the event store and recreate the state of the aggregate.\nSeparate read and write concerns.\nStructure your code using Domain-Driven-Design best practices.\nReplay the event store to recreate the entire read database.\nReplay the event store to recreate the entire read database into a different database type - PostgreSQL.\nThe ultimate goal of this course is to take a deep-dive into the world of CQRS and Event Sourcing to enable you to create microservices that are super decoupled and extremely scalable.",
      "target_audience": [
        "Software Engineers",
        "Software Developers",
        "Software Architects",
        "Cloud Engineers",
        "Solution Architects"
      ]
    },
    {
      "title": "Develop Discord Bots in Nodejs: Complete Course in 2023",
      "url": "https://www.udemy.com/course/discord-bots-development-in-nodejs-for-beginners/",
      "bio": "Learn To Develop Discord Bots in 2023 With Updated New Content",
      "objectives": [
        "Discord Bot Development Essential and Fundamentals using Node js.",
        "Programming a poll bot that creates and saves polls that server members can vote on.",
        "Create advanced bots that make your Discord server 1000 times cooler.",
        "Working with user data.",
        "You will be able to show off your bots in other Discord servers.",
        "Fundamentals and Essential about Node js programming language.",
        "Understanding the Discord bot API to literally become a wizard.",
        "You will learn about general software development.",
        "You will learn how to analyse objects and display data from object properties.",
        "You will learn how to further develop written software.",
        "You will learn a skill so you can express your creativity in code.",
        "Reading and understanding how documentations benefit us developers.",
        "You will be able to continue developing much more advanced Discord bots after finishing this course"
      ],
      "course_content": {
        "Introduction": [
          "In this course",
          "Instructor introduction",
          "Course updates for free",
          "Course Updates List (2023)",
          "At Your Own Pace",
          "Course Structure & What you want"
        ],
        "Prerequisites (2023)": [
          "Section Objective",
          "Links to Software Required",
          "Nodejs Programming Language",
          "Visual Studio Code",
          "Version Control of Software",
          "Visual Studio Code Commands",
          "Creating a new Discord Server",
          "Creating a Discord Bot Application",
          "save + restart bot file",
          "The Next Step",
          "Quiz"
        ],
        "(Optional) Nodejs Basics (2023)": [
          "Section Objective",
          "console.log()",
          "Variables and Variable Types",
          "console.log + variables",
          "For loops",
          "Array",
          "For loop + Array",
          "If, else if, else statements",
          "If Statements Text Lecture",
          "Functions",
          "functions text lecture",
          "JSON Data Preperation",
          "JSON Data text lecture",
          "Temperature Converter Program",
          "Weight Converter Program",
          "Writing Comments",
          "Convert Milliseconds to Date and Time",
          ".forEach() is not a function",
          "When to use const variable",
          "The Next Step",
          "Coding Quiz"
        ],
        "Hello World Bot Updated (2023)": [
          "Section Objective",
          "Course & Code Update 2023",
          "Creating a Discord Server",
          "Discord Bot Creation",
          "Inviting the Bot Update",
          "app.js + Inviting the Bot",
          "Discord.js",
          "npm Installation",
          "Discord.js Course Update",
          "Client Intents Partials Update",
          "Ready & Login Update",
          "Token Safety Update",
          "Hello World! Update",
          "Help Commands Update",
          "Math Example Update",
          ".createdTimestamp Update",
          "Node.js Promise Update",
          ".joinedTimestamp Update",
          "Coding Quiz"
        ],
        "Hosting A Discord bot & Web Servers (2023)": [
          "Section Objective",
          "Hosting Bots (nodejs applications)",
          "How To Host Your Bot",
          "Token Security",
          "Node.js Web Server & Discord Bot",
          "Security quiz"
        ],
        "Rock, Paper or Scissors Bot (2023)": [
          "Section Objective",
          "Bot Template",
          "Game Logic",
          "User Input",
          "Deciding Who Won",
          "StatusMessage",
          "Saving Game Logic",
          "Object Structure",
          "Saving Data Demo",
          "Read Data Demo",
          "saveGame()",
          "newGame = true",
          "Create a New Game",
          "Fixing Paper & Scissors Command",
          "Display Game Data Logic",
          "Return All Games",
          "Return Specific Game",
          "Improvements & Expansion",
          "Coding Quiz"
        ],
        "Voting Poll Bot (2023)": [
          "Section Objective",
          "Using a Template",
          "!Help Command",
          "Create Poll External Function",
          "Send Data & Object Creation",
          "Filesystem Save Data",
          "Read & Extend Data",
          "!create poll completion",
          "JSON.stringify() Correction",
          "JSON.parse() Correction",
          "Returns Polls List",
          "Display Polls List",
          "Return a Specific Poll",
          "Create Embed Message",
          "Fixing Date & Embed Docs",
          "Add Fields for Voting",
          "Graph part 1",
          "Graph part 2",
          "!close poll command",
          "!close poll completion",
          "!vote poll start",
          "Loop Through All Polls",
          "Register Your Vote",
          "Bot Improvements",
          "Pros & Cons",
          "Why read documentation?",
          "Coding Quiz"
        ],
        "Loot Box Simulator Bot (2023)": [
          "Section Objective",
          "Discord.js Update 2023",
          "2023 Intents update",
          "User Text Input Command",
          "User Number Input",
          "!isNan(Number)",
          "Min & Max Values",
          "Reward Rolls",
          "Reward Items & Luck Factor",
          "channel.type Update 2023",
          "Receiving Loot",
          "Tailoring a Reply Message",
          "Commenting the Code"
        ],
        "(Optional) Nodejs Projects (2023)": [
          "Section Objective",
          "Movie List Sorter",
          "Display All Movies",
          "If Movie Title Exist",
          "Movies With Minimum Rating",
          "Movies That We Can Afford",
          "Watch a Specific Movie",
          "Circular Reference Text",
          "Circular Reference Node.js",
          "DRY - Don't Repeat Yourself",
          "Comments!",
          "Coding Quiz"
        ],
        "Welcome To The Server Bot (2023)": [
          "Section Objective",
          "Intents Update + Template",
          "GuildMember: Reading Docs",
          "Intents & Event",
          "Circle Reference JSON",
          "Fetch Channels",
          "Welcoming the New Member",
          "Admin Channel Message",
          "DM & Comments",
          "Fixing The DM",
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "A Discord account.",
        "A working pc.",
        "Ready to have some fun!"
      ],
      "description": "Hi there, 'Develop Discord Bots in nodejs Complete course' is perfect for you who wish to make Discord bots and add to your server. In this course I will teach you how to create some basic and then more advanced bots. We're going to have a lot of fun!\nAs we progress further into the course, the bots will become more advanced and your skill will grow rapidly.\nEach bot serves a purpose, some bots are more educational and some bots are useful on a daily basis.\nI will be there developing the bots with you, even if you get stuck you will be able to get the bot up and running by downloading the source code from the lecture.\nWhy trust me?\nI've been developing different kinds of software including a lot of web development during my time span as a developer. Creating complex functions with tons of security is my favorite. Creating outstanding code is my focus. I'm teaching you nodejs in this course which is the fastest language to use when it comes to Discord bots. I have 4 years of experience in programming and I've used different languages to build different type of software applications. When this course was first released for free I received a lot of positive feedback. Now this course is being further developed to become a large Discord bot course.\n\nWhy this course?\n• The best bot course on Udemy.\n• You have lifetime access, you will get new content for free.\n• At a very generous price. The knowledge within this course is literally worth $400-$500.\n• Downloadable code so you can use my code for free.\n• Bots are made to teach you how to handle objects in programming.\n• 1080p HD videos.\n• English captions.",
      "target_audience": [
        "Beginners software development",
        "Beginners data analysing",
        "Nodejs developers any level",
        "Software engineers",
        "Beginners",
        "Anyone",
        "Curious about software",
        "Curious about development",
        "Curious about programming"
      ]
    },
    {
      "title": "Generative AI for Java Developers with Google AI",
      "url": "https://www.udemy.com/course/generative-ai-for-java-developers-with-google-palm-api/",
      "bio": "Power your Java applications with Google's advanced GenAI capabilities",
      "objectives": [
        "How to add Generative AI capabilities to your Java applications",
        "Integrating the Generative Language API SDK into your Java code",
        "Consuming the Generative Language REST API in your Java code",
        "Integrating the Vertex AI SDK into your Java code",
        "Consuming the Vertex AI REST API in your Java code",
        "Develop a GenAI Bot in Java with Spring MVC",
        "Understand the fundamental concepts of Generative AI from a Developer's perspective",
        "Learn about Prompt Engineering best practices",
        "Learn about different prompt design strategies",
        "Learn how to use Vertex AI Studio to design prompts",
        "Understand how LLM model parameters affect creativity in responses"
      ],
      "course_content": {
        "Introduction": [
          "Course Introduction",
          "AI vs. ML vs. GenAI",
          "Google Gemini LLMs",
          "How Does Generative AI Generate New Content?",
          "Quiz: Important GenAI Concepts"
        ],
        "Setup & Configuration": [
          "Setup & Configuration Overview",
          "Installing JDK + IDE + Coding Exercise Files",
          "Signing Up for a Google Cloud Platform (GCP) Account",
          "Installing the gcloud CLI",
          "Navigating the Google Cloud Console + Vertex AI Studio",
          "Enabling the Vertex AI and Cloud Storage APIs",
          "Enabling the Generative Language API",
          "Creating a GCP Service Account"
        ],
        "Prompt Engineering": [
          "What is Prompt Engineering?",
          "Prompt Design Strategies",
          "Zero-Shot Prompting",
          "One-Shot Prompting",
          "Few-Shot Prompting",
          "Testing Your Prompts with cURL",
          "Quiz: Prompt Engineering"
        ],
        "API Integration": [
          "The Game Plan",
          "Vertex AI REST API Integration",
          "PaLM REST API Integration",
          "PaLM API SDK Integration",
          "Vertex AI SDK Integration",
          "Creating Your Own GenAI Bot"
        ],
        "Conclusion": [
          "Recommended Further Study",
          "Course Summary"
        ]
      },
      "requirements": [
        "Basic proficiency in Java",
        "No prior knowledge of Machine Learning or Data Science needed"
      ],
      "description": "Welcome to the \"Generative AI for Java Developers with Google AI\" course!\nAre you a Java developer looking to harness the power of Generative AI in your applications without diving too deep into the complexities of Machine Learning and Data Science? If so, this course is tailor-made for you!\nIn this comprehensive course, you'll discover how to seamlessly integrate Google's advanced Generative AI capabilities into your Java code through the Vertex AI API. Designed by a developer, for developers, no prior knowledge of Machine Learning or Data Science is needed. It focuses on practically, giving you just enough of the what and why, and then a lot of the how.\nThroughout the course, you'll gain a strong foundation in Generative AI, understand the mechanics of how generative AI generates new content, and explore the driving force behind it all—the Google Gemini and PaLM2 Large Language Models. You'll also learn the art of prompt engineering, using Vertex AI Studio, you will craft prompts that yield impressive results tailored to your specific use cases.\nThe core of the course focuses on practicality. You'll be guided through the process of seamlessly integrating the Google Vertex AI API into your Java applications. And the best part? You'll build your very own generative AI application to practice your newly acquired Gen AI skills.\nCourse Highlights:\nLearn how to integrate the Google Vertex AI API into your Java code\nDevelop a GenAI Bot in Java with Spring MVC\nUnderstand the fundamental concepts of Generative AI from a Developer's perspective\nLearn how to use Vertex AI Studio to design prompts\nLearn about Prompt Engineering best practices\nUnderstand how LLM model parameters affect creativity in responses\nDon't miss this unique opportunity to expand your Java development toolkit with the creative possibilities of Generative AI. Enroll today and unlock a new dimension of software development!",
      "target_audience": [
        "Software Engineers",
        "Software Developers"
      ]
    },
    {
      "title": "Intro Robotics Developer Course - Using ROS in Python",
      "url": "https://www.udemy.com/course/intro-robotics-developer-course-using-ros-in-python/",
      "bio": "Learn to program Robots using the famous Robot Operating System (ROS) framework in Python",
      "objectives": [
        "Learn about ROS, and how it is used when programming robots",
        "Learn about the tools available in the ROS Framework",
        "Learn how to use the ROS Python API to develop code for Robots in Python",
        "Learn about Robotics Simulation Tools to program and test them in a virtual environment"
      ],
      "course_content": {
        "Course Introduction": [
          "Welcome To The Course!",
          "What Is ROS?",
          "Things To Note"
        ],
        "Environment Setup": [
          "Section Intro",
          "Installing Virtual Operating System",
          "Installing Virtual Operating System (MAC)",
          "Installing ROS",
          "[Note] Code Editor Update",
          "Installing Code Editors"
        ],
        "ROS Overview": [
          "Section Intro",
          "ROS Framework Overview",
          "ROS Framework Overview Quiz",
          "ROS Simulation And Visualization Overview",
          "ROS Simulation And Visualization Overview Quiz",
          "Changes Between ROS2 And ROS1"
        ],
        "Using ROS In Python": [
          "Section Intro",
          "ROS Workspaces",
          "Creating Publishers",
          "Creating Subscribers",
          "Message Types",
          "Project: Publishers And Subscribers",
          "Parameter Server",
          "Launch FIles",
          "Project: Launch Files",
          "Bag Files",
          "Packages",
          "Creating Services",
          "Project: Services",
          "Project: Actions"
        ],
        "Intro to Robotics Simulation": [
          "Section Intro",
          "Gazebo",
          "Visualization Software",
          "Additional Notes On Simulation & Visualization"
        ],
        "Course Outro": [
          "Congratulations, Next Steps",
          "Course Feedback Survey",
          "Frequently Asked ROS Questions"
        ],
        "Bonus Section": [
          "Bonus"
        ]
      },
      "requirements": [
        "General Computer Skills",
        "Experience with Python programming language",
        "A computer capable of running a Virtual Machine",
        "Some experience with Linux is recommended, but not required"
      ],
      "description": "Learn how to use the Robot Operating System (ROS) platform which is used to program real world robotics. The course is designed for beginners with little, to no experience using ROS. The coding in this course is done in Python 3 using ROS Noetic. We will go over installation of ROS, how to develop code that uses the framework, and even go over simulation tools so you can make your own robot and control it in simulation, with code that can easily be ported to a real robotic system.\n\n\nThe course is broken into 6 main sections:\nCourse Introduction\nEnvironment Setup\nROS Overview\nUsing ROS in Python\nRobotics Simulation\nCourse Outro\n\n\nSection 1 is a general introduction to the course.\nIn section 2 you will learn how to setup your computer to be able to run ROS. This includes utilizing the Ubuntu operating system, installing ROS, and introducing you to the code editors we will be using in this course.\nIn section 3 I will teach you at a high level what \"tools\" are included in the ROS framework, and what each of them do.\nYou will spend the majority of this course in section 4, learning how to implement all the various ROS tools in your very own Python code.\nSection 5 will touch on using the simulation and sensor data visualization tools ROS has to offer.\nAnd lastly the course outro will go over what you can do once you have completed the course, as well as some frequently asked questions and a survey to help me improve the course.\n\n\nSo what are you waiting for? Let's get to programming, using the most widely used open source robotics platform, ROS.",
      "target_audience": [
        "Anyone who is new or want to learn more about ROS (Robot Operating System)",
        "Anyone who wants to learn to program Robots using ROS"
      ]
    },
    {
      "title": "Pragmatic System Design",
      "url": "https://www.udemy.com/course/pragmatic-system-design/",
      "bio": "Master System Design Interviews: Learn Practical Approaches and Boost Your Career",
      "objectives": [
        "How to solve most popular FANG interview questions",
        "Most important scalability concepts",
        "Common communication protocols",
        "Caching and Redis",
        "Concurrency",
        "Database design and PostgreSQL",
        "Sharding strategies"
      ],
      "course_content": {
        "Introduction": [
          "Introduction to Pragmatic System Design",
          "Diagram building blocks",
          "Diagram flow",
          "Making Estimates"
        ],
        "Networks": [
          "Load Balancing",
          "CDN"
        ],
        "Caching": [
          "Introduction",
          "Caching Strategies",
          "Eviction Policies",
          "Redis",
          "Caching"
        ],
        "Queues": [
          "Introduction: Queues",
          "Messaging",
          "RabbitMQ",
          "Kafka",
          "Queues"
        ],
        "Protocols": [
          "TCP",
          "UDP",
          "Summary: TCP vs UDP",
          "HTTP",
          "HTTP - Methods",
          "HTTP - Status Codes",
          "REST",
          "RESTfulness",
          "WebSockets",
          "Long Polling",
          "gRPC",
          "GraphQL",
          "Summary",
          "Protocols"
        ],
        "Concurrency": [
          "Concurrency vs Parallelism",
          "Processes",
          "Threads",
          "Thread Pools",
          "Concurrency"
        ],
        "Databases": [
          "Indexes",
          "Sharding",
          "Consistent Hashing",
          "Partitioning",
          "CAP Theorem",
          "ACID transactions",
          "Databases"
        ],
        "Architectural Patterns": [
          "Web Sessions",
          "Serialization",
          "CQRS"
        ],
        "Design a Taxi Hailing App (aka Uber)": [
          "Problem Introduction - Design a Taxi Hailing App",
          "Driver Locations",
          "Storing Locations",
          "Taxis Around You",
          "Matching",
          "Summary - Design a Taxi Hailing App"
        ],
        "Design a Task Board (aka Jira, Trello)": [
          "Problem Introduction - Design a Task Board",
          "Basic Design - Task Board",
          "Reordering Tasks",
          "Better Ordering for Tasks",
          "Collaborating on Tasks",
          "Change Data Capture",
          "Resolving Task Conflicts",
          "Summary - Design a Task Board"
        ]
      },
      "requirements": [
        "Computer hardware basics",
        "Basic SQL knowledge for some of the examples"
      ],
      "description": "Prepare yourself for system design interviews and leverage your knowledge in real-world scenarios with my comprehensive course. Gain the confidence and skills to excel in system design discussions, whether for job interviews or day-to-day work.\nIn today's industry, designing new systems is a rare opportunity for most engineers. Architecture discussions often involve only a select few individuals within companies. However, when it comes to interviews, the expectation is that everyone is a system design master. My course bridges this gap by covering essential topics and providing effective approaches to common system design interview questions.\nAdditionally, this course offers senior engineers an alternative perspective on system design. I encourage open discussions and aim to remove the stigma around imperfect real-world designs.\nChoose your preferred method of course consumption based on your availability. If you have ample time, follow the logical order of my videos for a step-by-step learning experience, gradually building your confidence.\nAlternatively, if time is limited or you're not currently actively preparing for interviews, you can start with the design videos. If any unfamiliar topics arise, I provide supplementary videos or links to relevant articles.\nSystem design interviews typically evaluate breadth of knowledge first and depth of knowledge second. Thus, I've kept the theoretical portion of each topic concise, aligning with interviewers' expectations.\nRemember, there's no such thing as a perfect design. Every system involves trade-offs and compromises. Moreover, each design is unique, reflecting your areas of expertise. Approach my videos as a collection of ideas rather than the definitive way to design a system.\nI value your input! If you have additional system design interview questions or topics you'd like me to address, please let me know. Your feedback shapes my content and ensures its relevance to your needs.",
      "target_audience": [
        "Software engineers of all levels preparing for System Design interviews",
        "Senior engineers that are looking to make the next step in their career",
        "Software architects that are looking to broaden their knowledge"
      ]
    },
    {
      "title": "Azure Logic Apps - A practical guide ( Hands-on approach )",
      "url": "https://www.udemy.com/course/azure-logic-app/",
      "bio": "Zero coding mechanism to build and integrate Business Workflows with the power of Logic Apps",
      "objectives": [
        "Automating workflows with Azure Logic Apps",
        "Concepts surrounding Logic Apps",
        "Demonstrations using real world scenarios",
        "Flow control in Logic Apps",
        "Nested Logic Apps",
        "Custom Connectors in Logic Apps",
        "B2B scenarios and Integration Accounts",
        "Integrating Azure services like functions, analytics, storage"
      ],
      "course_content": {
        "Setting the Stage": [
          "Course Overview",
          "Basics of Serverless Computing",
          "Understanding Workflows",
          "Why Logic Apps",
          "Connectors, Triggers & Actions",
          "Summary"
        ],
        "Getting Hands Dirty": [
          "Overview",
          "Create First Logic App",
          "Behind the Scenes",
          "Demo: Twitter Feed Processing",
          "Recurrent Workflows",
          "Demo: Scheduling Weather and Traffic Data Retrieval",
          "Request Response Logic App",
          "Demo: Loan Application Processing App",
          "Demo: Automated Service Ticket Management App",
          "Exception Handling in Logic App",
          "Demo: Exception Handling",
          "Logic App Development using Visual Studio",
          "Summary"
        ],
        "Flow Control in Logic App": [
          "Overview",
          "Conditional Constructs",
          "Demo: Image Moderation App",
          "Looping Constructs",
          "Demo: Processing Batch Transactions",
          "Demo: Understanding Do-Until Action",
          "Summary"
        ],
        "Nested Logic App": [
          "Overview",
          "Why Nested Logic App",
          "Demo: Batch Transactions Processing using Nested Logic Apps",
          "Summary"
        ],
        "Custom Connectors": [
          "Overview",
          "What are Custom Connectors",
          "Creating Custom Connectors",
          "Demo: Create and Use Custom Connector",
          "Summary"
        ],
        "Advanced Integration Scenarios": [
          "Overview",
          "Accessing On-Premise Data",
          "Enterprise Integration Pack",
          "Integration Service Environment",
          "When to use Logic App",
          "Looking Back",
          "Concluding Thoughts"
        ]
      },
      "requirements": [
        "Enthusiasm to explore the power of cloud offerings"
      ],
      "description": "Azure Logic App is a powerful cloud service which takes workflow automation to the next level. It facilitates implementation of complex integration scenarios with zero or minimal coding efforts. This is a revolution in building scalable and reliable cloud solutions while addressing the time-to-market constraint.\nThis course aims to provide an in-depth understanding of how logic apps work. Practical scenarios have been demonstrated to get the students quickly up to the speed. Grabbing the concepts and trying out the problems discussed in this course would prepare anyone to address business needs concerning workflow integration.\nWhy take this course ?\nConcepts explained with examples.\nThere is no better way to learn than understanding the usage of the technology in real-world scenarios.\nEnd-to-end demos for hands-on.\nThere is no fun learning something without getting a feel of real-world applications. This course has been designed to be fast paced and complements the concepts you learn with end-to-end demos. You can easily follow along these demos. All you need is a web browser and an active azure subscription.\nYou may just relax and watch the course completely before trying out stuffs on Azure.\nWeb and mobile application developers would appreciate how logic apps could make life really simple as far as backend processing is concerned.\nReach out to me for any question on implementing different scenarios and I will be happy to discuss.",
      "target_audience": [
        "Software Engineers, IT Professionals",
        "Application developers looking to leverage cloud services",
        "Beginners who want to dive into cloud technology"
      ]
    },
    {
      "title": "Java Collections Framework + Generics, Lambdas & Stream API",
      "url": "https://www.udemy.com/course/java-collections-framework-learnit/",
      "bio": "Learn Java Collections Framework from scratch to PRO level with practical exercises",
      "objectives": [
        "Java Collections Framework",
        "Different colelctions from Collection hierarchy",
        "Different Containers from Map hierarchy",
        "Real-life examples of using collections",
        "Iterable & Iterator",
        "Hash Tables",
        "Binary tree based collections",
        "Functional Programming",
        "Functional Programming with Collections",
        "Generics in Java",
        "Stream API",
        "How to write clear and concise code in Java with the help of lambdas and Stream API while working with collections"
      ],
      "course_content": {
        "Introduction": [
          "Communication plan",
          "Unlimited access to Learn-IT application for students",
          "Tips to Improve Your Course Taking Experience",
          "Additional Free Learning Materials to Use During the Course",
          "Free AI Bot for My Students Only – No Sign-Up, FREE, Just Practice"
        ],
        "Java Collections Framework - Overview": [
          "Java Collections Framework - Overview",
          "Collection Interface"
        ],
        "Collections Hierarchy": [
          "Interfaces List, Set and Queue: Overview"
        ],
        "List Implementations": [
          "List implementations - ArrayList, Vector, CopyOnWriteArrayList & Stack",
          "LinkedList VS ArrayList, Big O Notation & Homework",
          "LinkedList VS ArrayList - Performance Comparison",
          "Backend for online store",
          "MyList implementation"
        ],
        "Comparator and Comparable": [
          "Comparator and Comparable",
          "Write your Custom Product Comparator"
        ],
        "Iterable, Iterator & ListIterator": [
          "Iterable, Iterator & ListIterator",
          "Implement custom Iterator"
        ],
        "Queue and Deque": [
          "Queue and Deque",
          "Implement back-end system of Help Desk for online store"
        ],
        "Map Hierarchy": [
          "Map Hierarchy",
          "Hash Tables & HashMap",
          "LinkedHashMap",
          "LRU Cache",
          "SortedMap, NavigableMap & TreeMap",
          "Set Implementations (HashSet practice) & java.util.Colelctions class"
        ],
        "JCF: Advanced": [
          "Sequenced Collections - JEP 431"
        ],
        "Generics": [
          "Generics in Java",
          "Parameterized custom List & iterators",
          "Quiz: Java Collections Framework - Check yourself"
        ]
      },
      "requirements": [
        "Knoweldge of Java Basics is required for this course",
        "OOP knowledge is required for this course"
      ],
      "description": "From this course, you can learn Java Collections Framework, together with Generics, Lambda Functions, Method References, and Stream API.\nThere are a lot of other courses on this topic. So, why would you choose exactly this course?  Here are just a few reasons:\n\n- Coding examples\nTo learn to program is not enough just watching videos and reading books. You also need to have a lot of practice. In this training course, you will review multiple practical tasks and coding examples which will help you learn and understand Java better.\n\n- Open source code\nWe hide nothing from our students! Including the source code for the home task solutions and source code of examples that were shared during the lesson. Having the source code you can just copy and paste it to run it on your local computer to understand how things work better.\nYou are allowed to use all source code examples for learning purposes. This helps significantly to configure the environment and make tests work, especially in case students didn't work with any testing framework in the past.\n\n- Q&A support\nThe significant difference between the online and offline learning process is the instructor's availability. If you are in one room with a tutor he always can help you to get understand the specific concept or to help fix your code on your computer.\nIn this course, we are supporting students with answers to any questions flagged in the Q&A section. In case there will be recurring questions - separate video lessons will be created to show how to address the issue.\nSo with this course you are not just getting video materials, code exercises, source code, access to the free mobile application without limits (which is still pretty cool, huh? :) ), but you also get tutor support and answers to your questions along with this course.\n\n- Relevant knowledge\nAfter our team investigated other Java courses on Udemy we realized that most of them have nothing in common with real life. The information which is shared there is very old and significantly out of date. For example, the instructor teaches a framework which is not been used already for 15 years. Or instructors do stress on the programming design which is not used anymore at all!\nThe instructor of this course is a consultant in a top-rated IT outsourcing company and helps to bring cutting-edge solutions in IT for all his clients. Feel free to check the LinkedIn page of the instructor and check skills endorsement. More than 19 thousand people across all over the world (BTW most of them are from the top 100 companies of the world) evaluated the skills of Andrii Piatakha.\nWith this course, you can be sure that you will spend your time learning the right things from one of the best IT consultants in the world.\n\n- Free mobile App without limits for our students\nKnowing Java is one skill. Be able to pass interviews in the company - that is another skill :) Nowadays a lot of companies use tests to select candidates on the first level of interview. We developed applications to practice skills specifically for such purposes.\nIn this course, we will provide you link to download our FREE mobile app for android. (soon it will be also available for iOS platforms)\nThe instructor of this course comes up with hundreds of tests that are used to test the knowledge of candidates. With this application, you will be well-prepared for the interview.\nAlso, only for our students - there is no limit on attempts to pass certification. In the course, we will tell you how to set up a special bonus code that will remove restrictions for our students inside the app.\n\n- High concentration of useful material in each lesson\nSometimes you can notice that watching 5 minutes of our lesson is equivalent to watching another 30 minutes lesson.\nThis is because time spent for preparation for the lesson (script for the lesson, lesson structure) and video editing (to cut boring pieces of the lesson or time when the program loads) sometimes 10 times as much (sometimes even 20) as the final lesson duration after video editing.\nAlso, each topic is separated from another. In case some concept will be explained in the next lesson and you don't need to worry about understanding this in the scope of this lesson - the instructor will make an announcement when a specific topic will be covered.\nGo and try it yourself! We will appreciate your feedback.\n\n\n\n\nSo don't wait! Take a look at the lessons' preview if you still have doubts!\nBuy this course today, and you will get all updates for FREE!\nFor those who successfully passed this training course, or for students who were recognized for asking amazing questions, there is a special offer from the IT-Bulls company! The creator of this course is IT-Bulls company CEO and Founder. We are always in search of talents to run our amazing startups together with you. Probably you always dreamed about running your startup? In this course, you will be able to find the team who will teach you how to do that and (in particular cases) will be glad to help with implementation!\nHope you enjoy this course! And remember, we appreciate all your feedback! Your feedback will help us to become even better! Your feedback will help us to create to best Java course ever!\nSee you at the lessons! :)",
      "target_audience": [
        "Java software engineers of any levels",
        "Egnineers who wants to learn Java Collections Framework in-depth"
      ]
    },
    {
      "title": "Node Program: From 0 to Hero with Nodejs and MongoDB",
      "url": "https://www.udemy.com/course/nodeprogram/",
      "bio": "Build and deploy Nodejs and MongoDB REST API apps while watching the lectures by the author of 11 books on JS/Node",
      "objectives": [
        "Overview main JavaScript concepts and issues",
        "Contrast Node.js to browser JavaScript",
        "Build Node.js apps from scratch",
        "Know the most common core modules",
        "Utilize NoSQL database MongoDB in your projects",
        "Harness power of Express.js framework in your apps",
        "Be aware of the most common Express.js middleware",
        "Understand Node/Express stack (Jade, Stylus, Redis, etc.)",
        "Learn a few tips about Node.js in production",
        "Use Git for deployment to Heroku",
        "Deploy to Heroku",
        "Deploy to Amazon Web Services (AWS)",
        "Build REST API servers",
        "Build an OAuth 1.0 application"
      ],
      "course_content": {
        "Welcome to Node from 0 to Hero!": [
          "Welcome to Node from 0 to Hero!",
          "Slides/PDFs/Presentation and Source Code (Downloads)"
        ],
        "Introduction to Node.js": [
          "Introduction to the Course and Author",
          "Node.js Definition",
          "Non-Blocking I/O",
          "Integration",
          "Node.js Frameworks"
        ],
        "Node.js Fundamentals": [
          "It's all about JavaScript! — Node.js Fundamentals",
          "Node.js Global Object",
          "Node.js REPL (Shell/Console) Demo",
          "Node.js Modules",
          "Node.js Modules Demo"
        ],
        "npm—Node.js Package Manager": [
          "Meet the best, the npm!",
          "Node.js Package Manager npm",
          "Node.js Package Manager npm 2",
          "Node.js Package Manager npm Demo",
          "Node.js Package Manager npm 3"
        ],
        "HTTP Server with Node.js and Core http Module": [
          "Node.js, Web Apps and http Core Module",
          "Node.js Hello World HTTP Server",
          "Node.js Hello World HTTP Server Demo",
          "Node.js HTTP Object",
          "Node.js HTTP Static Server Demo",
          "Node.js Learn You Node Workshop",
          "Node.js Learn You Node Workshop Demo"
        ],
        "MongoDB NoSQL Database": [
          "Create, Delete, Read and Update with Mongo, Mongo Shell and Mongo Native Driver",
          "MongoDB NoSQL Database",
          "MongoDB Shell Demo",
          "MongoDB Native Node.js Driver"
        ],
        "REST API with MongoDB and Node.js using Core http Module": [
          "Building RESTful APIs with Core http Module, Node and MongoDB",
          "Node.js and MongoDB REST API Demo",
          "Node.js and MongoDB REST API Demo 2",
          "Node.js and MongoDB REST API Demo 3",
          "Node.js and MongoDB REST API Demo 4"
        ],
        "Summary": [
          "Summary, Bonuses and Outro"
        ],
        "NodeProgram.com LIVE Day 1, Node.js and NPM (BONUS)": [
          "Intro",
          "Slides, Books and Requirements (DO NOT EXPECT AUDIO IN THIS LECTURE!)",
          "Slides",
          "JavaScript Fundamentals",
          "JavaScript Fundamentals",
          "JavaScript Fundamentals II",
          "JavaScript II",
          "JavaScript Fundamentals III",
          "JavaScript Fundamentals III",
          "JavaScript Fundamentals Exercise",
          "Node.js Fundamentals",
          "Node.js Fundamentals",
          "Node.js Fundamentals Exercise",
          "Node.js Fundamentals II and Core Modules",
          "Node.js Fundamentals II",
          "Core Modules II and Tools",
          "Core Modules II and Tools",
          "NPM",
          "NPM",
          "Learn You Node Demo",
          "Learn You Node",
          "Learn You Node Exercise",
          "NPM II and Hello World Server",
          "Hello World Demo",
          "Hello World Heroku Demo",
          "Hello World Server Exercise",
          "Hello World",
          "Stream Adventure Exercise",
          "Chat REST API Server (Memory Store) Demo",
          "Chat REST API Server (Memory Store)",
          "Chat REST API Server (Memory Store) Exercise",
          "Functional JavaScript Exercise (Optional)"
        ],
        "NodeProgram.com LIVE Day 2, MongoDB, Express.js (BONUS)": [
          "Overview",
          "Overview",
          "Overview II and MongoDB",
          "MongoDB",
          "MongoDB Shell Exercise",
          "MongoDB and Chat Server (DB Store) Exercise",
          "Chat REST API Server (DB Store) Exercise",
          "Q&A and Discussions",
          "Express.js Fundamentals",
          "Express.js Fundamentals",
          "Express.js Fundamentals II and Its Middleware",
          "Express.js Middleware",
          "Express.js Stack",
          "Express.js Stack II",
          "Express.js Stack",
          "Express.js Hello World Demo",
          "Express.js Hello World Exercise",
          "Chat REST API Server (Express.js) Exercise",
          "Node.js in Production",
          "Node.js in Production: Q&A and Discussions",
          "Node.js in Production"
        ]
      },
      "requirements": [
        "Computer",
        "Heroku and AWS accounts",
        "Knowledge in web development (HTML, CSS, browser JS)",
        "Knowledge&skills in programming"
      ],
      "description": "Interested in Node.js, but don't know where to start and how to find time to learn it properly? Would you prefer to learn in a way that is more interesting than reading books or watching boring screencast videos? Confused about how the MEAN stack pieces of MongoDB, Expressjs, Angularjs and Nodejs fit together? How it's even possible to run JavaScript outside of the browser?\nYears ago, we were in the same boat, but we took the long route of learning from source code, books, blogs and free online documentation. We have put together the best information in the simplest way to help you learn about these systems. Basically, we are helping you to take a shortcut and save time, frustration and avoid costly mistakes by using the best practices available.\nThis is an online version of our two-day Node Program (nodeprogram dot com). The online course has recorded lectures, lively student discussions, quizzes, exercises, workshops, tutorials in the manual and lots and lots of code examples!\nBONUS: You'll get NodeProgram live recording and Advanced Node live recording!",
      "target_audience": [
        "Programmers",
        "Web developers",
        "Software engineers",
        "NOT total newbies in programming"
      ]
    },
    {
      "title": "FactorytalkView SE Training Using Studio 5000 PLC's.",
      "url": "https://www.udemy.com/course/ftviewse-hmi-basic-project-development-with-logix5000-plcs/",
      "bio": "You will gain the basic knowledge and confidence needed to Create and Run a FactorytalkView SE HMI project.",
      "objectives": [
        "The benefits you gain will be the ability to create, run and maintain an FactorytalkViewSE project with confidence.",
        "Create and develop an application.",
        "How to make your graphics \"Live\".",
        "How to create and run Clients."
      ],
      "course_content": {
        "Introduction.": [
          "Introduction."
        ],
        "Introduction to Factory Talk Studio and the Factory Talk Directory.": [
          "Introduction to Factory Talk View Studio and the Factory Talk Directory.",
          "Demonstration of FTviewSE Application Creation.",
          "Demonstration. Creating a Factory Talk Directory",
          "Creating a Network Application",
          "Summary. Introduction to FT view and FT Directory.",
          "Factory Talk View SE Introduction."
        ],
        "Basic Graphic Display Configuration.": [
          "Creating a Basic Graphic Display.",
          "Demonstration Creating a Basic Graphic Display.",
          "Summary. Basic Graphic Displays.",
          "Basic Graphic Displays."
        ],
        "Configuring Communications to a PLC.": [
          "Configuring Communications Between FT view and a PLC.",
          "Summary. Communication to a PLC.",
          "Configuring Communications Between FTview and a PLC."
        ],
        "Creating HMI tags and Referencing Direct Reference Tags.": [
          "How to Create Tags.",
          "Demonstration of Tag Creation.",
          "Summary. Creating HMI and Direct Reference Tags.",
          "Tag Creation and Use."
        ],
        "Making the Graphics Live.": [
          "Adding Live and Interactive Objects to your Displays.",
          "Demo 1. Making your Graphics Live.",
          "Demo 2. Making Your Graphics Live.",
          "Using Language Switching",
          "Summary. Making the Graphics Live.",
          "Making your Graphics Live."
        ],
        "Configuring HMI Alarms, Creating a Client and Macro's, Using the Command Line.": [
          "Demo One. Creating Alarms and Clients.",
          "Demo Two. Creating a Client.",
          "Creating Alarms and Events, Part One",
          "Creating Alarms and Events, Part Two.",
          "Configuring Alarms, Clients and Macro's.",
          "Summary, Creating Alarms, Clients and Macro's.",
          "Creating Alarms and Clients."
        ],
        "Creating Trends and Data Log Models.": [
          "Creating Trends and Datalogs.",
          "Demo, Creating Trends and DataLogs.",
          "Summary. Trends and Data Logs.",
          "Test your Knowledge. Trends and Data Log Models."
        ],
        "Configuring Run Time Security.": [
          "Attaching Security to Items in the Application.",
          "Summary. Configuring Security.",
          "Know your Security."
        ],
        "PID Control Configuration and use in FTviewSE.": [
          "PID Control Explained.",
          "Demonstration of PID Control.",
          "PID Control. Cascade",
          "PID Control. Ratio.",
          "Summary. PID Control.",
          "PID Control.",
          "Exercise Labs."
        ]
      },
      "requirements": [
        "It will be beneficial if you have knowledge of PLC,s, RSLogix5000 software and RSlinx. Knowledge of similar packages will also be of help."
      ],
      "description": "This course covering FactorytalkView SE Training Connecting to RSlogix/Studio5000 PLC's using Factory Talk Studio Software is for any of you who require the knowledge to create and maintain a Factorytalkview SE project and be familiar with all the tools available. This software is an HMI software used for operating and controlling operations across all aspects of industry and entertainment. It is especially suited to interface with RSLogix5000 PLC programs but is not limited to this. It is extremely user friendly and versatile and for me, it is the HMI I would use over and above anything else if at all possible.\nI shall be your instructor during this training and I have had many years practical experience creating projects and programming PLC's, HMI's, commissioning and face to face training. I also possess a SAQA Further Education and Training Certificate: Measurement, Control and Instrumentation. This is South African but recognized in many countries internationally.\nThe course will start by introducing you to Factory Talk View Studio and the Factory Talk Directory\nThen we shall create our first project.\nWho should Take This Course?\nThis FactorytalkView SE Training Connecting to Studio 5000 PLC's course is designed for anyone already using FactorytalkViewSE and wish to enhance their knowledge further and feel confident to maintain and develop projects.\nFor anyone who is planning on using FactorytalkView SE in the future, then this is a must-have. Some Studio 5000 knowledge is an advantage so if you still require this knowledge, just check out my PLC courses on Studio 5000.\nSome experience with other similar packages is an advantage but not absolutely necessary.\nListed below are some of the topics I will cover with you in this course.\nIntroduction to Factory Talk Studio and the Factory Talk Directory.\nSetting up Communications to the PLC.\nDirect Reference and HMI tags.\nConfiguring basic graphic displays.\nApplying live data to a graphic display.\nCreating a client and introduction to the Command line and Macro's.\nAlarm configuration.\nCreating Trends and Data Log Models.\nSecurity.\nPID Control.\nThis is just a short description explaining what you will learn but there is a lot more that you will learn if you take the FactorytalkView SE Training Connecting to Studio 5000 PLC's\nThere are a number of quizzes that you can complete after each section to help you reinforce your knowledge and gain confidence using the software. There are also some practical labs for you to complete with solutions attached.\nAt the end of the course, you will feel confident creating and running a project, interrogating an existing project, and carrying out necessary changes to a running operation.\nThe majority of the course consists of video tutorials where I will explain all the different aspects of FactorytalkViewSE and demonstrate the use of the software for each of these aspects.\nThe more you can use the software, the better you will be,\nSo if you are really serious about learning FactorytalkView SE using Factory Talk Studio, then this course is for you. Enroll on this course and you can be learning Today.",
      "target_audience": [
        "Engineers and technicians who wish to develop and maintain HMI projects using FactorytalkViewSE and anyone wishing to extend their knowledge."
      ]
    },
    {
      "title": "Google Cloud Services Fundamental Crash Course For Beginners",
      "url": "https://www.udemy.com/course/google-cloud-services-crash-course/",
      "bio": "Learn all GCP - Google Cloud service compute, storage, networking, database from Cloud Console in just 2 hour-fast paced",
      "objectives": [
        "Quickly get started with Google Cloud Platform",
        "Provision all main GCP services via Cloud Console",
        "Create Compute, Networking, Storage, Database Products inside GCP",
        "Get hands-on on all major services in minimum time"
      ],
      "course_content": {
        "GCP Basics": [
          "Udemy Tips",
          "Google Cloud Introduction, Account & Zones Region",
          "Google Cloud Free Trial Account",
          "GCP Projects & Billing Account",
          "[New] Create GCP Project and Billing Account",
          "Different GCP Services Overview",
          "[New] Explore Google Cloud Console",
          "[New] Google Cloud Shell",
          "[New] Different ways to access GCP"
        ],
        "[NEW] GCP Compute Services": [
          "Google Compute Engine",
          "Create Google Compute Engine",
          "Artifact registry",
          "Create artifact registry",
          "Google Cloud Run",
          "Deploy application to Google cloud run",
          "Google cloud Kubernetes Engine",
          "Deploy application to Google cloud Kubernetes Engine",
          "Google Cloud Run Function",
          "[New] Create Google Cloud Run Function",
          "Google App Engine",
          "[New] Deploy application to app engine",
          "Review GCP Compute Services"
        ],
        "[New] GCP Storage Services": [
          "Google Cloud Storage",
          "Create Google Cloud Storage Bucket",
          "Persistent Disk",
          "Create Persistent Disk and attached to GCE"
        ],
        "[New] GCP IAM and Hierarchy": [
          "Cloud IAM Identity",
          "Cloud IAM Role and Permission",
          "Cloud Role assignment to Identity",
          "GCP Service Account",
          "Create Service Account"
        ],
        "[New] Google Cloud Database": [
          "Google Cloud SQL",
          "Create Google Cloud SQL Instance",
          "Google Cloud Spanner",
          "Create Google Cloud Spanner instance",
          "Create Cloud PubSub Topic & Subscription",
          "Create Firestore Database",
          "Create BigQuery dataset and Explore Studio",
          "Create memoryStore Redis instance"
        ],
        "Cloud Networking": [
          "Virtual Private Cloud",
          "Static & Ephemeral IP"
        ],
        "Cloud IAM - Identity & Access management": [
          "Cloud Identity - Roles & Permission",
          "Service Account - Role Assignment"
        ],
        "Compute Engine Products": [
          "Google Compute Engine",
          "Destroy Compute Resources"
        ],
        "Serverless Products": [
          "Google App Engine",
          "Google Cloud Function"
        ],
        "Container Products": [
          "Create Docker image & Container registry",
          "Deploy to Cloud Run",
          "Deploy to Kubernetes Engine"
        ]
      },
      "requirements": [
        "Curiosity to dive in Google Cloud",
        "Debit/Credit Card for Google Cloud Free account"
      ],
      "description": "Do you want quickly start with Google cloud products and services?\nDo you want to provision Google cloud products via Cloud console?\nAre you working in corporate and don't have enough time still you want to dive into Google cloud in minimum time?\nIf about you answer is yes, You are at right place\n---------------------------------------------------------------\nTo quickly get started with Google cloud and provisioning all major services I have created Hands-on course on Google cloud services.\nThis is the free hands-on course to get started with Google cloud\nThis is one of the most Practical course having a 2+ hours of video content completely free of cost which will help you to create interest about Google cloud\nIf you find something interesting you can always follow associate and professional level advanced certification in Google cloud\n---------------------------------------------------------------\nIn this course I will teach you\nBasics of Google cloud\nRegions & Zones\nHow to create free trial Google cloud account\nGoogle networking service provisioning\nIdentity and access management - Roles, Permissions\nservice account\ncreate virtual machine inside the Google cloud\nhost application on Google app engine\nDeploy a small microservice as a function inside the Google cloud function\nDocker images & Container registry\nDeploy Docker images in Cloud Run\nHost Containerized app inside Kubernetes Cluster\nWe will see about storage and database related products like\nhow to create a bucket and upload object inside it\nget started quickly with SQL database solution cloud SQL and Cloud spanner\nNoSQL solution like Bigtable, datastore and MemoryStore\nFor asynchronous communication we will learn how to create a topic and subscription insider cloud Pubsub\nOverall it's a hands-on practical course.\nI wish best of luck for your journey inside Google cloud\nI will see inside a class\nRegards\nAnkit Mistry",
      "target_audience": [
        "Anyone who want to quickly get started with Google Cloud Services via Cloud Console",
        "For Experience professional who has limited time"
      ]
    },
    {
      "title": "UDP Socket Programming For Distributed Computing in C#.Net",
      "url": "https://www.udemy.com/course/udpsocketprogramming/",
      "bio": "Socket programming tutorial, make chat application in C# .Net, IoT/VoIP distributed applications & network programming",
      "objectives": [
        "UDP socket programming in C# .Net, synchronous and aynchronous",
        "Foundations of distributed chat/IoT applications, communication components of multiplayer games, VoIP applications in C# .Net",
        "Using Newtonsoft JSON in client server socket based applications"
      ],
      "course_content": {
        "Essential Networking Theory": [
          "Socket Programming in C#: Host in computer network",
          "Socket Programming in C#: IP Address in computer network",
          "Socket Programming in C#: Port Numbers in a computer network",
          "Socket Programming in C#: Fundamentals of User Datagram Protocol"
        ],
        "Introduction to UDP Socket Programming in C# .Net": [
          "Essentials of a Windows application in Visual Studio that uses UDP in C# .Net",
          "Socket Programming: Sending a broadcast over UDP in C# .Net",
          "Socket Programming: Receiving data broadcast over UDP in C# .Net",
          "Socket Programming Demo: Sending & receiving a broadcast on UDP sockets in C#"
        ],
        "Handling Byte Data and Working with Remote Endpoints.": [
          "Socket Programming: Converting string to byte in broadcast sender in C# .Net",
          "Socket Programming: Converting byte to string in broadcast receiver in C#.Net",
          "Socket Programming: Finding the remote EndPoint after receiving data in C#.Net",
          "Socket Programming Demo: Finding the remote EndPoint after receiving data in C#",
          "Socket Programming: Echo data back to sender in C# .Net",
          "Socket Programming Demo: Echo data back to a peer in C# .Net"
        ],
        "Asynchronous UDP Socket Programming in C# .Net": [
          "What is asynchronous and what does it look like when used for data communication",
          "UDP chat application introductiom and Visual Studio project setup in VS/C#",
          "What are callback methods in C# .Net",
          "Receiving data asynchronously on server side - socket programming in C# .Net",
          "Filling details of ReceiveCompletedCallback method in C# .Net Socket Programming",
          "Demo: Receiving data async in socket programming with C# .Net",
          "Send a network data broadcast asynchronously - socket programming in C# .Net",
          "Send a network data broadcast asynchronously P2 - socket programming in C# .Net",
          "Demo: Send Broadcast Async - UDP socket programming in C# .Net",
          "Section Summary - Asynchronous UDP socket programming in C# .Net"
        ],
        "Async UDP Socket Programming in C# .Net Part 2": [
          "Sending Back Confirmation Async - Socket Programming in C# .Net",
          "Receiving Text Confirmation Async - Socket Programming in C# .Net",
          "Demo: Receiving Text Confirmation Async - Socket Programming in C# .Net",
          "Send Message to a Specific Server - Socket Programming in C# .Net",
          "Receiving Message and Sending it to all Clients - Socket Programming in C# .Net",
          "Correction - Fixing a bad if condition - Socket Programming in C# .Net",
          "Demo: Sending Message to all Clients - Socket Programming in C# .Net"
        ],
        "How to Raise and Handle Events in C# .Net": [
          "Section Introduction - Event Handlers in C# .Net",
          "Publish Events from Source Classes of Socket Library in C# .Net",
          "Implementing an event handler in a generalized class - Socket Programming in C#",
          "Raising/handling an event from source classes - Socket Programming in C# .Net",
          "Demo: Event Handlers - Socket Programming in C# .Net"
        ],
        "Using JSON in network communication with C# .Net": [
          "Section Introduction - JavaScript Object Notation(JSON)",
          "Add Newtsoft JSON.Net to your C#.Net Solution in Visual Studio with Nuget",
          "Sending JSON Discover on Client Side - Socket Programming in C# .Net",
          "Sending JSON Formatted Confirmation from the Server - Socket Programming in C#",
          "Handling JSON Formatted Confirmation on Client - Socket Programming in C# .Net",
          "Demo: Using JSON in Server DIscovery - Socket Programming in C# .Net",
          "Sending a Message in JSON - Socket Programming in C# .Net",
          "Section Summary - Using JSON on UDP Sockets - Socket Programming in C# .Net"
        ],
        "Sending and Receiving Images In Chat Application": [
          "Section Introduction - Image & Binary Data Transfer - Socket Programming in C#",
          "Read Image File from Disk to Transmit over UDP Sockets in C# .Net",
          "Defining SendImage Method in C# .Net",
          "Receiving a Bitmap Image on Client Side and Printing - Socket Programming in C#",
          "Demo Sending and Receiving Images Over UDP Sockets in C# .Net",
          "Section Summary - Transmitting Images - Socket Programming in C# .Net"
        ]
      },
      "requirements": [
        "Visual Studio 2017",
        "C# .Net",
        "Programming"
      ],
      "description": "Welcome to this tutorial on UDP socket programming! This guide will explore the fundamentals of User Datagram Protocol (UDP) socket programming. Whether you are a beginner or an experienced programmer, this tutorial will provide you with a comprehensive understanding of UDP socket programming and how to use it to create efficient network applications. So, let's get started!\nUDP, or User Datagram Protocol, is a layer-4 protocol in the OSI model. It is part of the transport layer along with TCP (Transmission Control Protocol). UDP is a connectionless protocol that provides a simple way to send packets of data without the need for a connection. It is often used for applications where speed is more important than reliability, such as video streaming or online gaming. While UDP does not provide any error-checking or retransmission of lost packets, it is still an important part of the OSI model and plays a vital role in many network applications.\nThis course teaches C# .Net socket programming with UDP sockets in a hands-on and easy fashion. It is a carefully planned and crafted online course that takes the student by the hand and teaches them how to create quality distributed network applications using C# .Net step by step.\n\n\nIn socket programming, connection-less sockets, which include UDP sockets, are often used for applications that require fast and efficient communication. Unlike connection-oriented sockets, which establish a dedicated connection between two endpoints before any data is transmitted, connection-less sockets send data packets to the intended recipient without any prior setup. This makes them ideal for applications prioritizing speed over reliability, such as real-time video streaming or online gaming. However, because there is no guarantee that the packets will arrive in the correct order or even arrive at all, developers must take extra precautions to ensure the accuracy and completeness of their data.\n\n\nThe first sections of this course cover the basics of computer networking and UDP socket programming in CSharp dot Net necessary for network and socket programming.\n\n\nThe following two sections will teach how to send and receive UDP broadcast in a command prompt C# .Net application using synchronous sockets with method calls such as Socket.Send and Socket.Receive. You will also learn how to convert between string and byte data types.\nOnce you're familiar with distributed network applications, the course takes you toward asynchronous socket programming. You will also learn about callback methods and how you can implement callbacks in C# .Net. I will also show you the publisher-subscriber model, AKA pub/sub model. We will implement the pub/sub model in our library project and the client/server applications using the library as well. We'll create event handlers and delegates and raise events as well.\nWe will use an Object Oriented approach for this course, following the principles of OOP. The next section will implement a publisher/subscriber model in C# .Net to bridge the gap between the API solution classes and the WinForms-based front end.\nNext, you will learn JSON (JavaScript Object Notation) and how to add JSON functionality to your C# applications with Newtonsoft JSON .Net. Finally, we'll start implementing an application-level communication protocol in this section.\nIn the next section, you'll learn how to transmit binary data over a UDP socket in C# .Net. Then, for example, I will show you how to transfer png image files between multiple clients of your applications through the server. Again, the JSON-based protocol implemented in the previous section will play a key role here.\nAfter watching this short C tutorial course, you can write your own distributed applications that communicate through the network, either WiFi or Ethernet. You will have the foundation knowledge needed to create C# .Net-based applications for IoT, computer telephony, VoIP, online gaming(e.g., Unity), and more.\nThis course also shows you how to use String Interpolation, a C# 6 feature. You'll also learn how to debug network applications in Visual Studio and write code faster.\nYou don't need to learn C to work on this course.[Related: Socket Java, python socket UDP]\n\n\nPros and Cons of UDP\nUDP (User Datagram Protocol) is a simple and fast network protocol that is commonly used for real-time applications such as video conferencing, online gaming, and streaming multimedia content. However, it also has some drawbacks that should be considered.\n\n\nPros:\n- Speed: UDP is faster than TCP because it doesn't have the overhead of error checking and retransmission of lost packets.\n- Low latency: UDP is a connectionless protocol, which means that it doesn't establish a dedicated connection before transmitting data. This results in lower latency and faster response times.\n- Simplicity: UDP is a simple protocol that is easy to implement and maintain.\n\n\nCons:\n- Unreliable: UDP is an unreliable protocol because it doesn't guarantee the delivery of packets. This means that some packets may be lost or arrive out of order, which can affect the quality of the application.\n- Security: UDP doesn't provide any built-in security features, which means that it is vulnerable to attacks such as packet spoofing and tampering.\n- Congestion: UDP doesn't have any congestion control mechanisms, which means that it could potentially overload a network with too much traffic.",
      "target_audience": [
        "Beginner/intermediate C# .Net developers working to complete a socket programming & network communications project",
        "University students learning distributed application programming"
      ]
    },
    {
      "title": "Dependency Injection in .NET and ASP.NET Core",
      "url": "https://www.udemy.com/course/dependency-injection-in-net-core-2-and-aspnet-core-2/",
      "bio": "Master Dependency Injection in .NET and ASP.NET Core using C# + Interview Questions",
      "objectives": [
        "Inject Dependencies using built-in .NET Core Dependency Injection Container",
        "Resolve Dependencies Based on Given Conditions",
        "Inject Services Directly Into The Views in ASP .NET Core",
        "Inject Action Filters in ASP .NET Core",
        "Plug Third-Party IoC Containers (e.g. AutoFac) into Dependency Injection Framework of ASP .NET Core",
        "Dependency Injection in WPF Core (.NET Core 3)",
        "Interview Questions"
      ],
      "course_content": {},
      "requirements": [
        "C# Beginner Level",
        ".NET Core 3 SDK",
        "Visual Studio 2017, 2019 or Visual Studio for Mac"
      ],
      "description": "Boost your career prospects by mastering the cutting-edge techniques of Dependency Injection in .NET and ASP.NET Core with this comprehensive online course, now updated for .NET 9.\nWith Dependency Injection, you can eliminate the dependency between modules and classes, resulting in more modular, reusable, and maintainable code.\nIn the past, developers had to rely on third-party components and frameworks such as Unity, Ninject, and AutoFac; however, .NET and ASP.NET Core have made it easier than ever to implement Dependency Injection without complex frameworks.\nOur course covers all the essential software engineering concepts and design principles you need to know. We will guide you through a series of hands-on projects that explain the various Dependency Injection features of .NET 9 and ASP.NET Core.\nBy the end of the course, you will be able to quickly design and code extensible, scalable, and testable applications using NET. This knowledge will significantly enhance your resume and position you as a skilled developer.\nThis course includes a series of interview questions about Dependency Injection in .NET  that will help you prepare for future job interviews.\nYou need not be an experienced developer to take advantage of this course. The course content is tailored to suit developers of all levels, new and experienced.\nEnrol now and start your journey towards mastering dependency injection in .NET!",
      "target_audience": [
        "C# and VB .NET Developers",
        "ASP .NET and ASP .NET MVC Developers",
        ".NET Core and ASP .NET Core Developers or Learners",
        "University Students",
        "Solution Architectes",
        "Technical Leaders and/or Technology Managers"
      ]
    },
    {
      "title": "MCP Masterclass: Complete Guide to MCP in Python [2025]",
      "url": "https://www.udemy.com/course/learn-mcp-model-context-protocol-complete-guide/",
      "bio": "Master MCP (Model Context Protocol) | Build 4+ MCP Servers and Clients | Deploy and Publish MCP | Build MCP AI Agents",
      "objectives": [
        "Understand what MCP is and the problem it solves",
        "Learn the full MCP architecture including how Clients and Servers interact with each other",
        "Build your own MCP servers and clients from scratch with real-world examples",
        "Explore, learn, and apply all of MCP's features, like tools, resources, prompts, transport protocols, streamable https, and much more",
        "Learn to integrate MCP into broader agentic and LLM frameworks",
        "Package, publish, distribute, and host your own MCP Servers and Clients",
        "Build several MCP Servers and Clients from scratch",
        "Learn how to build MCP and integrate MCPs with Python"
      ],
      "course_content": {
        "MCP Introduction": [
          "Why does MCP exist?",
          "Course Tips",
          "History and benefits of MCP",
          "What is MCP?",
          "What is this course?",
          "Course roadmap",
          "About the instructor",
          "Keys to success",
          "Ways to reach out",
          "Leave a rating",
          "Watch in 1080p"
        ],
        "MCP Architecture Overview": [
          "MCP architecture deep dive with agents and LLMs",
          "MCP server deep dive with tools",
          "Full MCP client and server workflow chain",
          "Other MCP primitives (resources and prompts)",
          "FastMCP vs. lowlevel server",
          "Local vs. Remote MCPs - Stdio vs. Streamable HTTP"
        ],
        "MCP Environment Setup": [
          "Environment setup",
          "Resources"
        ],
        "MCP Quickstart": [
          "Simple Claude and Airbnb MCP example",
          "Create a simple MCP Server 1",
          "Create a simple MCP Server 2",
          "Connect an MCP Client to an MCP Server locally built",
          "Connect an MCP Client to an MCP Server using NPX"
        ],
        "MCP Server Deep Dive - Tools": [
          "MCP Server and local files 1",
          "MCP Server and local files 2",
          "Using MCP Servers to interact with your desktop",
          "Using MCP Servers to make API calls",
          "Using MCP Servers with other AI models or web search",
          "Complex inputs with MCP Servers"
        ],
        "MCP Server Deep Dive - Resources and Prompts": [
          "Introduction to MCP Resources and Prompts",
          "Prompts deep dive",
          "Resources deep dive",
          "Resources deep dive with inputs"
        ],
        "MCP Server Deep Dive - Deployment and Publishing": [
          "Introduction to MCP deployment",
          "Create and package an MCP Server",
          "Deploy MCP Server to package manager like Git"
        ],
        "MCP Server Deep Dive - STDIO vs. Streamable HTTP": [
          "Introduction to remote MCP servers with Streamable HTTP",
          "Create and host a Streamable HTTP MCP Server in a virtual machine",
          "Connect MCP Client to Streamable HTTP MCP Server",
          "Put MCP Server in virtual machine",
          "Connect to MCP Server Streamable HTTP with MCP Inspector",
          "Connect to MCP Server Streamable HTTP with MCP Client"
        ],
        "MCP Client Deep Dive": [
          "Introduction to MCP Clients",
          "MCP Client session class",
          "Listing and calling tools from MCP clients to MCP servers",
          "Listing and calling resources from MCP clients to MCP servers",
          "Listing and calling prompts from MCP clients to MCP servers",
          "Process query in MCP Client - Connect LLMs and MCP Servers 1",
          "Process query in MCP Client - Connect LLMs and MCP Servers 2"
        ],
        "MCP End-to-End Builds": [
          "MCP Server Build Memory Tracker 1",
          "MCP Server Build Memory Tracker 2",
          "MCP Server Build Chess Stats 1",
          "MCP Server Build Chess Stats 2",
          "MCP Client Build Multi MCP Server Example 1",
          "MCP Client Build Multi MCP Server Example 2"
        ]
      },
      "requirements": [
        "Basic understanding and familiarity with Python",
        "Basic understanding and familiarity with how APIs work is helpful but not needed",
        "Basic understanding and familiarity of Git and GitHub",
        "Windows or Mac"
      ],
      "description": "What makes this course different than others?\nComplete Guide: this is not a bootcamp or \"crash\" course - this is the only complete guide that takes you from knowing nothing about MCPs, to understanding the architecture and protocol, to an MCP expert building MCP Servers and Clients. You get ~8 hours of content!\nFocus on Python: the SDK we use here is completely in Python (instead of Javascript or Typescript). However, since all the SDKs are similar, what you learn here will be applicable to all SDKs.\nUp to date: this course incorporates all the latest updates and technologies, including the new Streamable HTTP transport\nFrom Theory to Build: this course starts on the theory and architecture behind MCPs, why they exist, how they work, their history so that you get a solid understanding. After that, we focus on the features around MCP Servers and Clients and applying it as we build with MCP\nMCP Servers and Clients: this course builds both MCP servers and clients (most content just stops at servers)\nBuild 4+ MCP Servers and Clients: we build several MCP servers and clients from scratch\n\n\nMCPs are taking over the world because they solve a critical problem. LLM applications are great at generating content but they lack taking action. Tools and Function Calling were meant to address this, but LLM frameworks apply this differently and many developers had to \"reinvent the wheel\" every single time they started building an LLM application.\n\n\nConsensus was needed and MCP was born.\n\n\nSince then, MCP has taken off, being adopted fully by Microsoft, OpenAI, Anthropic, and so much more. Thousands of companies have built their own MCP servers, and tens of thousands of developers have built MCP servers that interact with an API or compute some process locally. In fact, MCP was one of the highest search terms in Q1-Q2 2025 (after AI Agents).\n\n\nThis course is all about taking you from knowing nothing about MCPs to becoming an MCP master. By the end of this course, you will be able to build your own MCP Servers and Clients from scratch, deploy them locally or on a virtual machine, distribute them using GitHub or NPM, and learn / master all of MCPs architecture and features.\n\n\nNote that we focus on the Python SDK when building MCP Servers and Clients.\n\n\nWhat's MCP?\nMCP is a standardized mechanism (i.e., protocol) for AI systems (like LLMs, agents, etc.) to interact with external systems (like APIs, tool logic, local processes, etc.). Think of it as a universal USB-C connector for AI systems and everything that needs to connect to AI systems.\n\n\nWhy MCP?\nOne word: standardization. Once you build an MCP Server, it can easily connect to thousands of different applications / LLMs / Agents that contain an MCP Client. Similarly, if you build an MCP Client, it can easily connect to tens of thousands of MCP Servers.\n\n\nWhat is this course all about?\nThis course has one goal - to taking you from knowing nothing about MCPs to becoming an MCP master. Ultimately, this means going through MCPs vast set of features and learning how to apply them into your own applications. We will build MCP Servers and Clients from scratch and deploy / distribute them both locally and remotely.\nThis course is hands-on, practical, and tailored for enthusiasts / developers seeking how to build real-world MCP Servers and MCP Clients. Note that the SDK we use is Python in Windows/Mac and the MCP Hosts we use in this course are VS Code and Anthropic Claude.\n\n\nWhat will you learn?\nUnderstand MCP architecture - learn how MCP Clients and MCP Servers interact with each other in detail\nLearn, master, and apply all MCP features - deep dive into all of MCP features, including tools, resources, prompts, transport protocol, STDIO, streamable https, and so much more\nBuild MCP Servers and Clients - build several real-world practical MCP Servers and Clients from scratch, and combine them with LLMs to create powerful LLM applications\nPublish, and host your own MCP Server or MCP Client - distribute and publish your own MCP Servers and MCP Clients\n\n\nWhy choose this course?\nComplete guide - this is the 100% start to finish, zero to hero, basic to advanced guide on building MCP Servers and Clients. There is no other course like it that teaches you everything from start to finish. It contains ~8 hours of instructional content!\nStructured to succeed - this course is structured to help you succeed by learning the theory and actually applying it. We also focus on both architecture, servers, clients, and deployment.\nFully instructional - we not only go through important concepts, but also apply them as we are building our application so that we can solidify them. This is not only a walkthrough of the all the features and theoretical concepts, but a course that actually uses real-life examples and integrations\nStep by step - we go through every single concept one-by-one. This improves your probabilities of learning MCP rather than going haphazardly through each feature\nTeacher response - if there's anything else you would like to learn, or if there's something you cannot figure out, I'm here for you! Look at the ways to reach out video\nResources - you get access to all the code and slides in this course, plus several notes and guides\n\n\nCourse Overview\nMCP Introduction – Understand why MCP exists, its origins, what it enables, and a breakdown of the full course roadmap.\nMCP Architecture Overview – Dive into how MCP works with agents and LLMs, the client-server workflow, server primitives like resources/prompts, and the difference between FastMCP, Stdio, and Streamable HTTP setups.\nMCP Environment Setup – Get your local development environment ready with Claude, Python, Git, and VS Code, and access key course resources.\nMCP Quickstart – Build your first working MCP system (both Server and Client) with Claude and a simple tool (like an Airbnb example), covering both local and NPX-based setups.\nMCP Server Deep Dive - Tools – Learn how MCP servers interact with your local files, APIs, external models, and how to structure more complex inputs.\nMCP Server Deep Dive - Resources and Prompts – Explore how to expose reusable resources and prompts from your MCP server, and how to structure them for input-output handling.\nMCP Server Deep Dive - Deployment and Publishing – Package your MCP server for reuse and publish it to platforms like GitHub to share or deploy in real-world scenarios.\nMCP Server Deep Dive - STDIO vs. Streamable HTTP – Understand remote server options, how to build and host Streamable HTTP servers, and connect clients using MCP Inspector and virtual machines.\nMCP Client Deep Dive – Go under the hood of MCP Clients, how they manage sessions, call tools/resources/prompts, and integrate with LLMs for full processing flows.\nMCP End-to-End Builds – Build real-world projects like a memory tracker and chess stats server, and create MCP Clients that connect to multiple servers.\nMCP Conclusion and Certificate – Wrap up your MCP journey, celebrate your accomplishment, and learn how to access your course certificate.",
      "target_audience": [
        "Developers and engineers who are building agentic AI applications or LLM-powered tools",
        "Automation professionals and tech enthusiasts who are looking to connect AI with external tools or APIs",
        "AI builders who’ve hit limits with their current tools and want to build MCP Servers and Clients",
        "Founders or indie hackers exploring AI-native apps and toolchains",
        "Anyone who loves clean protocols, open standards, and the phrase “build once, run everywhere\"",
        "AI Enthusiasts who want to start building with MCPs"
      ]
    },
    {
      "title": "PSM II Certification Prep+Scrum Master+PSM 2 Certification",
      "url": "https://www.udemy.com/course/agile-scrum-certification-psm-2/",
      "bio": "Scrum Master Certification PSM II Prep+Practice Questions+Tips to Become Certified Scrum Master+Agile Project Management",
      "objectives": [
        "You will have a 2024 Scrum Master's Certificate of completion",
        "You will be fully prepared for the PSM 2 Certification Exam ( Professional Scrum Master II ) and gain a full recap of the PSM I",
        "Learn the difference between a traditional project manager and a Scrum Master",
        "Confidently Learn the Role of a Real World Scrum Master facilitating scrum teams",
        "Prove to Your Employers that you can Run Scrum Projects to achieve all your stakeholders' goals",
        "Learn how to train and coach your Product Owner using Agile Scrum techniques",
        "Learn how the pros use Scrum ( the most popular agile framework ) in the real world to create any product",
        "Understand how to apply Empiricism, Scrum Values, Scrum Events, Artifacts and the definition of Done to deliver efficient, high quality products",
        "Learn how to become a Scrum Master on the job WITHOUT paying thousands of dollars for training",
        "Understand how to easily Manage Products for your Stakeholders with a Product Backlog and User Stories to gather requirements more effectively",
        "Learn how to Overcome Challenges in the real world to Develop and Deliver products in the most professional, reliable and efficient way possible"
      ],
      "course_content": {
        "Introduction": [
          "Welcome to PSM 2 Scrum Certification Prep training",
          "Scrum Guide",
          "This course is Updated regularly + Scrum Guide Attribution and Use"
        ],
        "Foundation and Recap": [
          "What is Agile",
          "Scrum Theory",
          "Scrum Theory 1a - Quick Quiz",
          "Scrum Theory 1b - Quick Quiz",
          "Scrum Theory 1c - Quick Quiz",
          "Scrum Team Accountabilities",
          "Team Accountabilities 1a - Quick Quiz",
          "Scrum Team Accountabilities 1b - Quick Quiz",
          "Team Accountabilities 1c - Quick Quiz",
          "Scrum Events",
          "Scrum Events 1a - Quick Quiz",
          "Scrum Events 1b - Quick Quiz.",
          "Scrum Events 1c - Quick Quiz",
          "Scrum Artifacts",
          "Scrum Artifacts 1a - Quick Quiz",
          "Scrum Artifacts 1b - Quick Quiz",
          "Scrum Artifacts 1c - Quick Quiz",
          "Scrum Values",
          "Scaling Scrum",
          "Scaling Scrum - Quick Quiz"
        ],
        "Developing People and Teams": [
          "Scrum Master Vs A Traditional Project Manager: An In-depth Task Comparison",
          "A Day in the Life of a Scrum Master: Typical Impediments and Challenges",
          "Scrum Tools",
          "Developing People and Teams - Quiz 1a",
          "Scrum Master Roles: Key Principles to Bear in Mind",
          "Scrum Master Roles: How to Improve Product Owner Efficiency",
          "Scrum Master Roles: How to Improve the Development Team",
          "Developing People and Teams - Quiz 2a",
          "Mastering Scrum: Scrum Master Tips and Tricks"
        ],
        "Product Management - Managing Products with Agility": [
          "Product Vision",
          "BONUS: Forecasting & Release Planning - Part 1",
          "BONUS: Forecasting & Release Planning - Part 2",
          "BONUS: Forecasting & Release Planning - Part 3",
          "Product Management - Quiz 1a",
          "BONUS: Product Backlog Management - User Stories",
          "BONUS: Product Backlog Management - Prioritisation",
          "BONUS: Product Backlog Management - Product Backlog Grooming and Estimation",
          "Product Management - Quiz 2a"
        ],
        "Development - Developing & Delivering Products Professionally": [
          "Continuous Quality, Integration and Delivery",
          "Technical Risk and Technical Debt"
        ],
        "21 Tips to Remember for PSM II Mastery": [
          "Tip 1: How To Be Knowledgeable and Responsible In Your Role",
          "Tip 2: How To Foster a Fun Working Environment for Your Team",
          "Tip 3: How To Implement Good Engineering Practices",
          "Scrum Master Tips - Quiz 1a",
          "Tip 4: Be As Scrummy As the Organization Permits",
          "Tip 5: How To Encourage the Team to Stick To the Plan",
          "Tip 6: How To Be a Collaborator",
          "Scrum Master Tips - Quiz 2a",
          "Tip 7: How To Maintain Balance",
          "Tip 8: How To Keep the Team Focused On the Present Sprint",
          "Tip 9: How To Encourage Team Autonomy and Self-Management",
          "Scrum Master Tips - Quiz 3a",
          "Tip 10: How To Familiarize Yourself with the Work of All Team Members",
          "Tip 11: How To Build Strong Relationships With Other Teams",
          "Tip 12: How To Tame Over-commitment within the Team",
          "Scrum Master Tips - Quiz 4a",
          "Tip 13: How To Note Your Team’s Strengths and Weaknesses",
          "Tip 14: How To Respect Your Team’s Space",
          "Tip 15: How To Create Cordial Relationships with the Organization's Management",
          "Scrum Master Tips - Quiz 5a",
          "Tip 16: How To Respect Time Boxes",
          "Tip 17: How To Encourage Camaraderie",
          "Tip 18: How To Motivate the Team to Reach For the Stars",
          "Scrum Master Tips - Quiz 6a",
          "Tip 19: How To Create A Multi-Skilled Team",
          "Tip 20: How To Coach teams on the Various Scrum Tools",
          "Tip 21: How To Be a ‘One-Team’ Facilitator whenever possible",
          "Scrum Master Tips - Quiz 7a",
          "Conclusion",
          "Thank You"
        ],
        "Certification Quick Practice Exam": [
          "PSM 2 Certification Quick Exam Practice"
        ],
        "Final Words and certification": [
          "How to get PSM II Certified at Scrum.org?",
          "Student Recommended Resources for PSM II Exam Preparations",
          "Can Agile be used outside of software development?",
          "What's the difference between Agile and Scrum?",
          "FAQs & Latest News",
          "FEEDBACK: Reviews and Discussion"
        ],
        "BONUS Materials": [
          "BONUS LECTURE"
        ]
      },
      "requirements": [
        "No prior experience is required to take this course however the following are typical reasons:",
        "You want to deliver high quality projects/products",
        "You want a PSM 2 Certification ( Professional Scrum Master II ) as soon as possible",
        "You want to Prove to Employers that you can excel in a Scrum Master role",
        "You need to deal with rapidly changing project circumstances and requirements",
        "LINKEDIN: You want proof - a Certificate that shows competency as a Scrum Master",
        "You want to Coach a Product Owner / Product Manager on Agile Scrum techniques",
        "You want to improve the performance of your team as a product owner / product manager",
        "You want to recap for the PSM 1 - Professional Scrum Master i certification"
      ],
      "description": "\"Scrum Open, Professional Scrum™, Professional Scrum Master™, PSM, PSM I, PSM 1,  PSM II, PSM 2, PSM i,PSM ii etc. is the protected brand of Scrum . org. Our course and practice exams are neither endorsed by nor affiliated with Scrum . org.\"\n\nThree reasons to TAKE THIS COURSE right now!\nThe unique reasons for taking this course are:\nComplete, Concise, Confident Advanced and Foundational overview of Scrum - You will be confident that you have learned both foundational and advanced Scrum techniques as the founders intended because I only teach accurately from the rule-book of Scrum.\nConfidence in completing your PSM II ( and PSM I ) Scrum Certification - I teach you everything you need to gain confidence in the exam and then guide you on how to get certified online without going into a class room or spending $1000. I send you to the Scrum Open Assessment and student recommended practice assessments so you can practice before taking the final certification (Exam purchased separately - I will give you links directly to it).\nYou get to ask me questions and see me respond to every single one of them thoughtfully!\nUpdated for the latest v 2020 Scrum guide. Perfect for [2020] Scrum Guide exam preparation! This course is based on the\nQuiz questions and practice test are included for full preparation.\nIncludes Narration from Randal Schaffer\nWhat is Scrum?\n\nAgile Scrum is a simple method for managing and completing even the most complex project.  Based on my experience, it has also been the number one reason why projects have delivered on time!\nWho should take is course?\nWhether you are a scrum master, product owner, team member, business stakeholder or simply someone who wants to understand how to run complex projects in the real world with scrum, this is the place to start.\nIf you are preparing for a PSM II ( Professional Scrum Master 2 ) scrum master certification or other scrum certification, this class is for you.\nPSM I recap included. Quiz questions and practice test are included for full preparation.\nWhat will I learn?\nIn this class you will learn:\nConcise Advanced Overview of Scrum in the real world - The the exact techniques used to run the events, plus how the roles, rules and artifacts used on the job to deliver a project using scrum.  This includes recap lectures on the fundamentals of Scrum Sprint Planning, The Daily Scrum, Sprint Review, Sprint Retrospective, Scrum Artefacts and as well as advanced lectures on Developing People and Teams, Product Management - Managing Products with Agility, Developing & Delivering Products Professionally and Tips to acquire your Professional Scrum Master 2 - PSM II Certification\nThe facts based on the Scrum Guide - The correct terminology and use of Scrum is essential to mastering it. The Scrum Guide is the rule book on Scrum and many do not use it or know it.\nScrum Certification Preparation - A summary of frequently asked questions (FAQs) and frequently misunderstood points around Scrum that have been in past Open Assessment exams.\nScrum Certification - I then tell you how to prepare for PSM ii Scrum Certification and how to sit it online saving you hundreds if not thousands of dollars. You will also have a recap for PSM i certification .\nThe course is video based with no supporting document necessary.  I go through key gotchas from the scrum guide.\n\n\nPerfect for beginners and a recap for experts. The complete overview of advanced on the job techniques  + Scrum Master Certification Preparation up to PSM II level ( including PSM II recap )\nLearn Scrum & prepare for your Scrum Master or Agile certification based on the Scrum Guide™ v2020  ( 2020 scrum guide  ) .\nHow is the course structured?\nEach section features an overview of a particular aspect of Scrum such as Scrum Roles, Events, or Advanced topics such as Developing People and Teams or Product Management - Managing Products with Agility ~ followed by a summary of key exam points and frequent misunderstandings in industry.  All is based on the scrum guide so you know that you are learning the facts.  Quiz questions and practice test are included for full preparation.\nPerfect if you are interested in Scrum Master Certification, Scrum Master Jobs, increasing your Scrum Master Salary, gaining a Scrum Master Role, furthering your Scrum Master Training or meeting a Scrum Master job description.\nInspired by God, the Bible, Ken Schwaber, Jeff Sutherland",
      "target_audience": [
        "Anyone who wants a complete overview of Scrum and certainty that they are getting the facts",
        "A candidate preparing for a PSM II / PSM 2 / Professional Scrum Master Scrum certification",
        "A candidate who wants answers to frequently misunderstood points within Scrum",
        "An expert candidate who wants a concise, quick refresher in scrum PSM I / PSM 1 / Professional Scrum Master i"
      ]
    },
    {
      "title": "Cryptocurrency Trading Bot with a User Interface in Python",
      "url": "https://www.udemy.com/course/cryptocurrency-trading-bot-with-user-interface-in-python/",
      "bio": "Automate Your Crypto Trading Strategies on Binance & Bitmex with Python and Create Your Own Trading Dashboard (GUI)",
      "objectives": [
        "How to Code a trading bot / Automate a trading strategy",
        "How to Connect to crypto exchange APIs in general",
        "How to Design a graphical user interface (GUI) in Python",
        "Improve your Python skills and good practices with a real-world project",
        "Learn to use a REST and Websocket API"
      ],
      "course_content": {
        "Introduction & Initial Setup": [
          "Course Overview",
          "Installing Python",
          "Installing and Using Pycharm",
          "Creating your API Keys (mandatory)",
          "Frequently Asked Questions (FAQ)",
          "Stuck during the course? Check here"
        ],
        "Application Entry Point & Interface / API basics": [
          "Creating an Entry Point | Logger | Main window",
          "Interacting with a public API",
          "Use the Bitmex API",
          "Displaying API data on an interface",
          "Introduction to widget styling"
        ],
        "API Connectors : Learn with Binance Futures": [
          "Binance Futures - REST API (Public endpoints coding)",
          "Binance Futures - REST API (Public endpoints testing)",
          "Binance Futures - REST API (Private endpoints)",
          "Binance Futures - Websocket API",
          "Binance Futures - Improvements: Data Models & Variable Typing",
          "Binance Futures - Improvements: Error Handling & Private variables/methods",
          "Subscribing to more Websocket channels"
        ],
        "API Connectors : Apply your knowledge with Bitmex": [
          "Exercise: Creating a basic Bitmex connector",
          "Bitmex - REST API & Authentication",
          "Bitmex - REST API: Adding more functions",
          "Bitmex - Websocket API",
          "Convert a date-time string to an Unix Timestamp",
          "Solving the problem of the order price and quantity rounding"
        ],
        "Build Up the Interface": [
          "Parent Component & Interface organization",
          "Logging Component",
          "Updating the User Interface safely",
          "Watchlist Component: Structuring the Class",
          "Watchlist Component: Adding a Symbol",
          "Watchlist Component: Removing a symbol",
          "Watchlist Component: Updating the Watchlist",
          "Exercise: Creating the Trades Component",
          "Trades Component",
          "Strategy Component: Initialization",
          "Strategy Component: Adding a new strategy",
          "Strategy Component: Deleting a strategy",
          "Strategy Component: Configuring additional parameters",
          "Strategy Component: Validating the additional parameters",
          "Strategy Component: Switching the strategy On/Off",
          "Source Code"
        ],
        "Strategies and Trading": [
          "Using classes to organize the strategy module",
          "Candlestick data: Parsing trades data",
          "Candlestick data: Updating the list of candlestick data",
          "Coding the Breakout Strategy",
          "Calculating the Technical Strategy indicators",
          "Adding more conditions for entering a Trade or not",
          "Calculating the trade size on Binance and Bitmex",
          "Trade Execution",
          "Displaying the PNL and Trade in the interface",
          "Take Profit, Stop Loss, and Trade exits",
          "Source Code"
        ],
        "Enhance the Application with more features": [
          "Mac Users: Customize the Tkinter Buttons",
          "Data Entry validation",
          "Auto-complete Entry widgets",
          "Adding scrollable frames: the basics",
          "Adding scrollable frames: a more complex case",
          "Closing the application",
          "Starting the application outside of Pycharm",
          "Creating an SQLite database",
          "Saving your workspace to the database",
          "Creating a requirements.txt file",
          "Integrating Binance Spot",
          "Binance Spot Tesnet: Generating API keys",
          "Handling the Binance Spot Websocket limitations / Resubscribe to the channels"
        ],
        "Conclusion": [
          "Final words and advice",
          "Source Code with Comments"
        ]
      },
      "requirements": [
        "Basic Python knowledge (know what a class/object is, dictionaries, lists, functions, loops, etc.)",
        "Basic knowledge about crypto trading (bid/ask price, limit/market order)"
      ],
      "description": "Take your trading ideas to code and make them more efficient by automating them like a pro!\nThis course will guide you through all the steps required to write a program in Python for algorithmic trading, using the best coding practices. It is a perfect example of the \"learning by doing\" pedagogy: instead of learning only theoretical concepts, you will learn important concepts whilst creating a real trading application, from API connections to trade management.\n\n\nKeep control over your trading robot with an interface\nA trading program can automate your strategy, but that's not all: you can also use it as a trading assistant by building a user interface (UI) that will help you follow your trades and market data. This course will give you an understanding on how to develop a solid Tkinter interface and integrate it with the trading automation part.\n\n\nInteract with the crypto exchange servers without an intermediary\nMany platforms propose to write simplified code to automate your strategy and handle most of the interaction with an exchange API in the background. It doesn't give you the freedom you may need, it prevents you from building very developed programs, and their service- of course- isn't easy on the wallet.\nThis course will teach you how to interact with an exchange API without an intermediary- giving you control of everything. It will also give you the power to improve your programming knowledge, which you can re-use for other projects.\n\n\nLearn with the Binance Futures and Bitmex APIs\nBinance and Bitmex are two of the most popular crypto exchanges in the world, they provide awesome automation possibilities and are great for beginners. You can then apply what you have learned to your Binance Spot/Margin account or other exchanges.\nBoth Binance and Bitmex have testing environments, including their API, which is a great way to learn!",
      "target_audience": [
        "Traders wishing to automate their strategies",
        "Python developers wanting an introduction to trading bots",
        "Developers wanting an introduction to GUI programming in Python",
        "Python beginners who want to learn about GUI programming and API connections with a real-world project",
        "Binance and Bitmex users who want to create their own trading tools"
      ]
    },
    {
      "title": "RAG with Azure OpenAI (AI Search, CosmosDB, GraphRAG & more)",
      "url": "https://www.udemy.com/course/rag-with-azure-openai-ai-search-cosmosdb-graphrag-more/",
      "bio": "RAG with Azure OpenAI, Vector Embeddings, Azure AI Search, Azure CosmosDB, GraphRAG, Copilot Studio, Azure AI Studio",
      "objectives": [
        "RAG (Retrieval Augmented Generation): Using Private Data with LLM",
        "RAG with Azure AI Search",
        "RAG with Azure CosmosDB",
        "RAG with Azure OpenAI Studio",
        "RAG with Azure AI Studio",
        "RAG with Microsoft Copilot Studio",
        "GraphRAG with Neo4j and Azure OpenAI"
      ],
      "course_content": {
        "Introduction": [
          "Course Introduction",
          "Special Udemy Course Bundle: Scaling AI in Production",
          "My Udemy Course Collection Guide"
        ],
        "GenAI Primer": [
          "Join the Discord Server!!!!",
          "What is Generative AI?",
          "What is Azure OpenAI?"
        ],
        "Introduction to RAG": [
          "The What, Why and How of RAG",
          "Exploring The RAG Horizon with Azure",
          "Microsoft Copilot Studio v/s Azure AI Studio"
        ],
        "Azure OpenAI Basics": [
          "Deploying Azure OpenAI Resource (Hands-On Lab)",
          "Chatting With Our Model (Hands-On Lab)",
          "Image Generation Model (Hands-On Lab)",
          "Note: UI Update for Azure OpenAI Resource!!!",
          "ChatCompletions API to call engine via code (Hands-On Lab)",
          "What Are Vector Embeddings?",
          "Making Use of Embedding engines (Hands-On Lab)"
        ],
        "Prompt Engineering": [
          "Introduction to Prompt Engineering",
          "Basic Components of a Prompt",
          "Chain Of Thoughts Prompting Technique (Hands-On Lab)",
          "Controlling Output Through Prompt Engineering (Hands-On Lab)"
        ],
        "RAG With Azure AI Search": [
          "Vector Search with Azure Cognitive Search Theory",
          "Hybrid Search (Vector + keyword search) With Azure AI Search Lab (Hands-On Lab)",
          "Azure AI Search RAG with Python Code (Hands-On Lab)",
          "RAG Pain Points"
        ],
        "Multi-Modal RAG With Azure AI Search (UPDATE - 8th August, 2025)": [
          "Introduction to Multi-Modal RAG with Azure AI Search",
          "Lab: Simple Image Verbalisation RAG (Infra Set-up: Hands-On Lab)",
          "Lab: Simple Image Verbalisation RAG (Running Python Code: Hands-On Lab)",
          "Lab: Advanced Doc Intelligence RAG (Infra Set-up: Hands-On Lab)",
          "Lab: Advanced Doc Intelligence RAG (Running Python Code: Hands-On Lab)"
        ],
        "Azure AI Content Understanding (UPDATE - 25th September, 2025)": [
          "Introduction to Azure AI Content Understanding",
          "Clarity on Pricing!",
          "Lab: Trying Out Content Understanding in Azure Portal (Hands-On Lab)",
          "Lab: Content Understanding with Python Notebooks (Hands-On Lab)",
          "Lab: Creating and Testing Custom Analyzer (Hands-On Lab)",
          "Introduction to Sustainability RAG Project Architecture",
          "Lab: Project Infrastructure Set-Up (Hands-On Lab)",
          "Lab: Data Preparation for RAG (Hands-On Lab)",
          "Lab: Building and Running the RAG Pipeline (Hands-On Lab)"
        ],
        "RAG with Azure CosmosDB": [
          "Introduction to RAG With Azure CosmosDB",
          "RAG with CosmosDB for NoSQL API: Architecture",
          "RAG with CosmosDB for NoSQL API: Demo (Hands-On Lab)",
          "Architecture for RAG with MongoDB Vcore",
          "RAG with MongoDB VCore Python Lab (Hands-On Lab)"
        ],
        "Azure Icon Search Engine Project: Power of Azure CosmosDB": [
          "Introduction",
          "Deploying Resources on Azure",
          "Running our Project"
        ]
      },
      "requirements": [
        "Familiarity with Python Programming Language",
        "Some experience working with Azure and Microsoft Cloud in General",
        "General Software Engineering and development experience"
      ],
      "description": "Unlock the power of Retrieval-Augmented Generation (RAG) with Azure OpenAI in this comprehensive Udemy course, designed for data professionals and AI enthusiasts eager to deepen their expertise in advanced AI techniques. This course provides hands-on insights into integrating RAG with various Azure services, enabling you to enhance knowledge retrieval within AI solutions.\nLearning Objectives:\nMaster RAG with Azure AI Search:\nLearn how to enhance search capabilities and retrieve relevant data effectively within Azure’s robust AI Search environment.\nImplement RAG with Azure CosmosDB:\nDiscover methods to store, manage, and query large datasets, optimizing information retrieval for high-performance applications.\nLeverage RAG in Azure AI Studio:\nUtilize RAG within Azure AI Studio to develop custom solutions in a powerful development environment with enhanced flexibility.\nDevelop with RAG on Microsoft Copilot Studio:\nGain skills to create intelligent applications using Microsoft Copilot Studio, making user interactions more engaging and insightful.\nNavigate Graph RAG with Neo4j:\nUnderstand graph-based data storage and retrieval, allowing you to analyze complex relationships within data through Neo4j.\nThis course is packed with real-world applications, practical demonstrations, and code walkthroughs, equipping you with the knowledge to implement RAG across various Azure platforms and elevate your AI projects. Join now to gain in-demand skills and take your AI capabilities to the next level with RAG and Azure OpenAI!",
      "target_audience": [
        "Curious Developers looking to build cool apps with Azure OpenAI and GenAI",
        "Senior Software Engineers looking for GenAI application",
        "Any curious person in general looking to skill-up and keep-up with the industry!"
      ]
    },
    {
      "title": "Apache Spark With Examples for Big Data Analytics",
      "url": "https://www.udemy.com/course/spark-with-scala/",
      "bio": "In-depth course to master Spark SQL & Spark Streaming using Scala for Big Data (with lots real-world examples)",
      "objectives": [
        "Get clear understanding of the limitations of MapReduce and role of Spark in overcoming these limitations",
        "Understand fundamentals of Scala Programming Language and it’s features",
        "Expertise in using RDD for creating applications in Spark",
        "Mastering SQL queries using SparkSQL",
        "Gain thorough understanding of Spark Streaming features"
      ],
      "course_content": {
        "Dive Into Scala": [
          "Introduction to scala",
          "Environment Setup",
          "Hello Scala",
          "Flow Controls",
          "Functions and operators",
          "OOPS concepts",
          "Traits",
          "Arrays",
          "Collections"
        ],
        "Introduction to Apache Spark": [
          "BigData and Need for Apache Spark",
          "What is Spark,Spark Features and Spark Eco System",
          "Spark Architecture",
          "Spark Usecases"
        ],
        "Spark Configuration": [
          "Setup Environment",
          "Word Count Program in Spark"
        ],
        "Working with RDDs in Spark": [
          "What is RDD & How to Create",
          "Transformations - filter & map",
          "Solving Cars By Mileage problem using map and filter transformations",
          "Solving Cars In America problem using map and filter transformations",
          "Transformations - flatmap,union & intersection",
          "Analysis on 2014 football world cup player information",
          "RDD Actions",
          "Nasa Access Logs Analysis"
        ],
        "Aggregating Data with Pair RDDs": [
          "Pair RDD - How to Create,reduceByKey",
          "groupByKey and reduceBykey vs groupByKey",
          "Transformations - mapvalues sortbykey countbykey",
          "Analysis on 2015 Indian Startup funding information",
          "Analysis on real estate data using pair rdd operations",
          "Join Operations"
        ],
        "Advanced Spark Concepts": [
          "Broadcast Variables",
          "Accumulators",
          "Persistence and Caching",
          "Partitioning"
        ],
        "Spark SQL": [
          "What is Spark SQL",
          "DataFrames",
          "DataSets",
          "Ebay Auction Data Analysis",
          "Adhaar Data Analysis"
        ],
        "Spark Streaming": [
          "What is Spark Streaming?",
          "DStreams",
          "Spark Streaming Example",
          "Twitter Sentiment Analysis"
        ]
      },
      "requirements": [
        "Basic programming skills",
        "A computer running Windows, OSX or Linux",
        "The software needed for this course is freely available and detailed steps to install and configure software is include in the course"
      ],
      "description": "This course covers all the fundamentals you need to write complex Spark applications. By the end of this course you will get in-depth knowledge on Spark core,Spark SQL,Spark Streaming.\nThis course is divided into 9 modules\nDive Into Scala - Understand the basics of Scala that are required for programming Spark applications.Learn about the basic constructs of Scala such as variable types, control structures, collections,and more.\nOOPS and Functional Programming in Scala - Learn about object oriented programming and functional programming techniques in Scala\nIntroduction to Apache Spark - Learn Spark Architecture,Spark Components and spark use-cases\nSpark Basics - Learn how to configure/run spark in eclipse/intellij\nWorking with RDDs in Spark - Learn what is Resilient Distributed Dataset,Different types of actions and transformations which can be applied on RDDs\nAggregating Data with Pair RDDs - Learn how Pair RDD is different from RDD,Different types of actions and transformations which can be applied on Pair RDDs\nAdvanced Spark Concepts - Learn how Spark uses Broadcast variables and Accumulators to perform calculations,how persistence and partitioning helps to achieve performance\nSpark SQL and Data Frames - Understand the difference between Dataframe and Dataset\nSpark Streaming - Learn how to analyse massive amount of dataset on the fly\nAll the concepts are explained using hands-on examples.This course covers 10+ hands-on big data examples such as\nExplore player data from 2014 world cup\nAgregate data from ebay online auction data\nUnderstand different data points from Adhaar data\nDevelop application to analyse funds received by Indian startup\nExplore the price trend by looking at the real estate data in California\nHelp retailer to find out valid and invalid purchase transactions of chain of stores in Bangalore\nWrite Spark program find out count of stores in each US region from USA states & Store locations data\nDevelop Spark Streaming application to perform Twitter Sentiment Analysis\n30-day Money-back Guarantee! You will get 30-day money-back guarantee from Udemy for this course.\nIf not satisfied simply ask for a refund within 30 days. You will get a full refund. No questions whatsoever asked.",
      "target_audience": [
        "Professionals aspiring for a career in field of real time Big data analytics",
        "Analytics professionals",
        "Senior IT Professionals",
        "Developers and Architects",
        "Students who wish to gain a thorough understanding of Apache Spark",
        "Freshers",
        "Software Architects, Engineers and Developers"
      ]
    },
    {
      "title": "Learn Spring Modulith: Monolith to Microservices Seamlessly",
      "url": "https://www.udemy.com/course/spring-modulith-simplified/",
      "bio": "Spring Modulith, Spring Boot 3, Spring Data JPA, Spring MVC, Docker, CI/CD, Kubernetes, GraalVM, Modular Monolith",
      "objectives": [
        "You will learn how to apply Spring Modulith to any Spring Project",
        "You will learn how to Document with Spring Modulith Documenter",
        "you will learn how to mirror an already existing database with Spring Jpa",
        "You will learn how to section your projects into modules(packages)",
        "You will learn how to work with spring events",
        "You will learn how to ensure your modules are cleanly separated",
        "You will learn how to expose and restrict modules",
        "You will learn how to add Modulith actuator dependency and its properties to actuator",
        "You will write integration tests to ensure modules are communicating with the defined rules",
        "You will learn how to create custom exceptions and validation",
        "You will learn how to create native Image using GraalVM",
        "You will learn 3 ways to Dockerize your application",
        "You will learn how to prepare to deploy to Kubernetes",
        "You will learn pragmatic path to deploy to Kubernetes"
      ],
      "course_content": {
        "Modulith : Introduction": [
          "Introduction",
          "Monoliths vs Microservices",
          "Overview: What We'll Build",
          "Modulith Course Resources"
        ],
        "Boostrapping Dependencies": [
          "Modulith: Maven Dependencies",
          "Modulith: Exploring Spring Starter docker-compose dependency",
          "Modulith: Exploring Modulith Dependency"
        ],
        "Modulith : Entity Definitions and Bootstrap Data": [
          "Modulith : Entity Definition 1",
          "Modulith : Entity Definition 2",
          "Modulith : Limit Repository Access Level",
          "Modulith : Prepopulate Inventory Data"
        ],
        "Modulith : Module Integration Test": [
          "Modulith: Integration Test 1",
          "Modulith : Integration Test 2",
          "Modulith : Integration Test 3"
        ],
        "Modulith : Named Interface And Order Service": [
          "Modulith : Named Interface",
          "Modulith : Named Interface Continued",
          "Modulith : Order Service 0",
          "Modulith : Order Service 1",
          "Modulith : Order Service 2",
          "Modulith : Order Service 3"
        ],
        "Modulith : Events And Listeners": [
          "Modulith : Event 1",
          "Modulith : Event 2",
          "Modulith : Simulate Failed Event",
          "Modulith : Create Order Integration Test",
          "Modulith : Create Order Integration Test 2",
          "Modulith : Model/Mirror Event Publication Table",
          "Modulith : Event Action 1",
          "Modulith : Event Action 2",
          "Modulith : Republish Incomplete Event",
          "Modulith : Republish Incomplete Event 2"
        ],
        "Modulith : Payment And Email Listener": [
          "Modulith : Payment, Email Listener",
          "Note",
          "Fix Error in Implement Payment II",
          "Modulith : Implement Payment II",
          "Modulith : Implement payment part III"
        ],
        "Modulith : Exception and Validation": [
          "Modulith : Exception And Validation 1",
          "Modulith : Exception And Validation 2"
        ],
        "Modulith : Documentation": [
          "Note",
          "Modulith : Documentation 1",
          "Modulith : Documentation 2"
        ],
        "Modulith : Production Ready Features - Docker and Kubernetes(k8s)": [
          "Modulith : Runtime Support and Actuator",
          "Note",
          "Modulith : Dockerize 1",
          "Modulith : Dockerize 2",
          "Modulith : Externalization/Preparation for Kubernetes(k8s)",
          "Testing Externalized Properties"
        ]
      },
      "requirements": [
        "Java 21+. However Java 8+ experience is enough",
        "Spring Or Spring Boot",
        "Basic Knowledge of Spring JPA",
        "Appreciates Hands-on Coding"
      ],
      "description": "Would you like to easily transition your application to microservices having started as a monolith? Then this course is for you\nIt teaches you from scratch all you need to know about Spring Modulith. We break entities and their related objects into modules and use existing Modulith rules to enforce compliance.\nYou will master why and how to use Spring events to communicate between modules.\nAlso covered are mirroring existing database with Spring Data JPA.\n\n\nThe course also explains pragmatically how to save events:\nSuccessful events for metrics through illustration.\nFailed Events: on how to retrieve, APIs made available to trigger the rerun.\nCreated a custom class to show how we can use a scheduler (cronjob) to rerun the events.\nalso manual triggering of the failed event through an exposed method.\n\n\nInside the Course, you will learn about and/or highlight a bit on:\nSpring Events\nSpring Data JPA\nContainerization (Docker)\nThe course shows three(3) ways we can containerize our application. i.e create image\nwe likewise ran the application via Docker commands in the terminal\nclear usage on how services communicate within the containerized environment\nwe leveraged Docker networks clearly defined in the compose file\nCI/CD Pipeline using Git actions\nKubernetes Deployment\nPostgresDB\nCustom Exceptions and Validations\nModulith Metrics\nJava records\nSpring Boot Starter Docker Compose and how to use it in development and Integration Tests.",
      "target_audience": [
        "This course is for all Java developers: beginners to advanced who want to build projects that easily ship from monolith to microservices",
        "For developers/Engineers who want to properly structure a projects very neatly",
        "The Course is idea for all Java/ Spring Developers and intending Spring Developers"
      ]
    },
    {
      "title": "RESTful Web Services, Java, Spring Boot, Spring MVC and JPA",
      "url": "https://www.udemy.com/course/restful-web-service-with-spring-boot-jpa-and-mysql/",
      "bio": "Implement API calls: Sign-up, sign-in, email verification, password reset, update, delete. Deploy to Amazon AWS Cloud.",
      "objectives": [
        "Build a RESTful Web Service with Spring Boot",
        "Learn how to implement User Sign-in functionality",
        "Learn how to implement User Sign-up functionality",
        "Protect RESTful Web Service with Spring Security Framework",
        "Learn how to implement Token-Based Authentication",
        "Implement Password Reset and Email Verification features",
        "Use Spring Data JPA Query Methods",
        "Use Spring Data JPA Native SQL Queries",
        "Download and Install MySQL Server on Mac",
        "Download and Install MySQL Workbench",
        "Download and Install Spring Tool Suite",
        "Create new project using Spring Tool Suite and Spring Initializer",
        "Download, run and stop Apache Tomcat",
        "Deploy RESTful Web Service application to Apache Tomcat",
        "Run RESTful Web Service application as a stand along Java application",
        "Build and run REST API with Maven",
        "Use Postman HTTP client to send HTTP Request to a Web Service endpoints",
        "Start up Amazon EC2 server",
        "Install Java, MySQL and Apache Tomcat on Amazon AWS EC2 server",
        "Deploy RESTful Web Service to Amazon AWS EC2 server",
        "Deploy with AWS Beanstalk",
        "Use H2 in-memory database",
        "Use H2 database console to preview data in memory database as well as in a stand along MySQL database server",
        "Use JUnit 5 to test code",
        "Use Rest Assured to test RESTful Web Service endpoint"
      ],
      "course_content": {
        "Introduction": [
          "Source Code",
          "Install HTTP client Postman",
          "Postman overview",
          "Resource and Collection URIs",
          "HTTP Methods: GET, POST, DELETE and PUT",
          "Custom actions in REST URI",
          "HTTP Headers: Accept and Content Type",
          "Introduction to Web Service Application Layers",
          "A few suggestions",
          "REST API Design Principles - Quiz"
        ],
        "Download, Install and run MySQL Database on Local Computer": [
          "Downloading and Installing MySQL on MAC",
          "Start MySQL Server and Login",
          "Creating MySQL Database and a new User",
          "Downloading and Installing MySQL Workbench",
          "Connect to MySQL Database using MySQL WorkBench",
          "MySQL WorkBench brief overview"
        ],
        "Setup Development Environment": [
          "Install Java Platform (JDK)",
          "Download and Install Spring Tool Suite(STS)"
        ],
        "Getting Started. Creating a New Project.": [
          "Create new Spring Boot Project with Spring Tool Suite",
          "Creating a new Spring project using Spring Boot Initializr"
        ],
        "Quick Start": [
          "Create Users Rest Controller class",
          "Adding Methods to Handle POST, GET, PUT, DELETE HTTP requests",
          "Running Web Service Application"
        ],
        "Adding MySQL Database Support": [
          "Update POM.XML file",
          "Configure MySQL Database Access Details"
        ],
        "Implementing User Sign up": [
          "Adding method to handle HTTP Post Request",
          "Implementing the Create User Request Model class",
          "Implementing Create User Response Model",
          "Implementing the UserDto",
          "Making use of UserRest and UserDto in RestController",
          "Implementing Service class method",
          "Implementing UserEntity class",
          "Set Default Value for Email Verification Status field",
          "Implementing UsersRepository class",
          "Autowire UserRepository into Service class",
          "Trying how the User Sign up works",
          "Preventing Duplicate Entries with @Column(unique=true)",
          "Check if user already exists",
          "Generate User Public ID"
        ],
        "Spring Security for User Sign-up": [
          "Adding Spring Security to our project",
          "Encrypt User Password",
          "[Deprecated] Make the Sign-up Web Service Endpoint Public",
          "[Updated]Migrating from WebSecurityConfigurerAdapter"
        ],
        "Spring Security for User Sign-in. Authentication & Authorization.": [
          "Implementing User Sign-in Request Model",
          "[Updated] Implementing loadUserByUsername()",
          "[Updated] Implementing SecurityConstants class",
          "[Updated]Adding Maven Dependencies to generate and validate JWT",
          "[Updated] AuthenticationFilter Part 1. Implementing attemptAuthentication().",
          "[Updated] AuthenticationFilter Part 2. Implementing successfulAuthenticatio().",
          "[Updated] AuthenticationFilter Part 3. Register with HttpSecurity.",
          "Trying how user Authentication/Login works",
          "[Updated] Add UserId to HTTP Response Header",
          "[Updated]Customize Login URL Path",
          "[Updated] Implementing Authorization Filter.",
          "Trying how User Authorization works",
          "[Updated] Reading Token Secret from a properties file"
        ],
        "Implementing Get User Details Web Service Endpoint": [
          "Get User Details Resource Method",
          "Implement Service layer method",
          "Update UserRepository",
          "Trying the Get User Details API Call"
        ]
      },
      "requirements": [
        "Basic knowledge of Java",
        "Mac computer"
      ],
      "description": "This is a very practical video course aimed at beginner Java developers to help them build their very first RESTful Web Service application with Java, Spring Boot and Spring Data JPA to implement features like:\nUser sign-up and User sign-in,\nEmail verification,\nPassword Reset,\nGet user details API call,\nGet a list of users API call and implement Pagination,\nUpdate user details and Delete user details API calls,\nLearn to secure Web Service endpoints with Spring Security,\nLearn to use Amazon AWS Simple Email Service(SES) to send and request to confirm the user email address,\nand learn to generate and include the JSON Web Token in HTTP Request.\nStudents will learn how to use Postman HTTP client software to send: HTTP POST, GET, DELETE and PUT requests, as well as how to set needed HTTP Headers. We will also cover how to:\nSend data to your RESTful WebService via HTTP Body and,\nHow to pass data via URL Query String and as a Path parameter,\nHow to enable your RESTful Web Service to respond to Cross-Origin AJAX HTTP Requests.\nYou will also learn how to make your RESTful Web Service accept and respond back with JSON or XML media type.\nIn this video course you will learn how to:\nDownload and install Spring Tool Suite(STS),\nDownload and install MySQL server and MySQL Workbench GUI,\nDownload and run Apache Tomcat,\nAdd a specific Apache Tomcat Version to your Spring Tool Suite,\nUser Maven to build and run your project as well as package it into a deployable WAR file,\nYou will also learn how to run your Web Service as a stand-alone Java application with build-in Tomcat,\nDeploy your RESTful Web Service to Apache Tomcat as well as,\nStartup your own Amazon AWS EC2 Service in Amazon Cloud, install Java, MySQL, Tomcat, and deploy RESTful Web Service to your very own cloud server.\nYou will also learn how to deploy your application to AWS Beanstalk\nThis video course also covers the H2 in-memory database and teaches how to build a RESTful Web Service that stores data in a database without a need to install MySQL or any other database server. You will also learn how to use the H2 console to preview data stored in an in-memory database tables or in a MySQL database server.\nWhen it comes to storing data in a database you will learn how to use Spring Data JPA Query Methods as well as Native SQL Queries.\nYou will also learn how to use JUnit 5 to test your code and how to use one of the most popular test frameworks called Rest Assured to test RESTful Web Service endpoints of your REST API.",
      "target_audience": [
        "Beginner Java developers",
        "Java developers interested in learning how to Build, Deploy RESTful Web Services",
        "Java developers interested in learning how to Test Rest API with Rest Assured framework"
      ]
    },
    {
      "title": "Get into DevOps: The Masterclass",
      "url": "https://www.udemy.com/course/devops-masterclass/",
      "bio": "Learn Continuous Integration, Continuous Delivery & 15 DevOps tools like Docker, Ansible, Terraform, Jenkins, AWS, Chef",
      "objectives": [
        "You will learn how to use the most popular DevOps tools, such as: Docker, Ansible, Terraform, Jenkins, Chef, Puppet, Kubernetes",
        "You will learn all about DevOps concepts such as Continuous Integration, Continuous Delivery and Continuous Deployment",
        "You will learn the fundamentals and differences between the most popular cloud platforms: AWS Amazon Web Services, Google Cloud Platform, Microsoft Azure and Openstack",
        "You will learn the basics of building, running and orchestrating Docker containers with Kubernetes, Rancher and AWS Elastic Container Service",
        "You will learn how to implement DevOps ways of working by improving Team Autonomy",
        "You will learn the key design principles for modern development & testing environments"
      ],
      "course_content": {
        "Introduction to the course": [
          "What will you learn on The Masterclass"
        ],
        "Learn the concepts": [
          "The DevOps Problem",
          "Continuous Integration",
          "Continuous Delivery",
          "Continuous Deployment",
          "Continuous Improvement",
          "Designing Modern Environments",
          "Team Autonomy",
          "The DevOps Teacher Model",
          "The Concepts Quiz"
        ],
        "Learn the tools: Preparation": [
          "Creating user accounts",
          "Using the terminal",
          "Optional: Install the Linux terminal on Windows with WSL",
          "Using the code examples"
        ],
        "Learn the tools: Cloud Platforms": [
          "Cloud platforms: Introduction",
          "Cloud Platforms: Amazon Web Services",
          "Cloud platforms: Google Cloud Platform",
          "Cloud platforms: Openstack",
          "Cloud platforms: Microsoft Azure",
          "Cloud platforms: Comparison"
        ],
        "Learn the tools: Containers and container orchestration": [
          "Containers: Introduction",
          "Containers: Docker",
          "Containers: Kubernetes",
          "Containers: Rancher",
          "Containers: EC2 Container Service",
          "Containers: Comparison"
        ],
        "Learn the tools: Pipelines & automation": [
          "Pipelines & automation: Introduction",
          "Pipelines & automation: Jenkins",
          "Pipelines & automation: Gitlab CI",
          "Pipelines & automation: Rundeck",
          "Pipelines & automation: Comparison"
        ],
        "Learn the tools: Everything as Code": [
          "Everything as Code: Introduction",
          "Everything as Code: Ansible",
          "Bonus: How to install Terraform",
          "Everything as Code: Terraform",
          "Everything as Code: Chef",
          "Everything as Code: Puppet",
          "Everything as Code: Comparison"
        ],
        "Afterword and next steps": [
          "The Tools Quiz",
          "Your next steps",
          "Additional resources",
          "Bonus Lecture: Recommended further learning"
        ]
      },
      "requirements": [
        "You will NOT need prior experience in DevOps",
        "You will NOT need to be a software engineer or a systems administrator",
        "To follow the hands-on tutorials, you will need a PC running Windows, Linux or Mac OS",
        "To follow the hands-on tutorials, you will be guided to create free user accounts on Github, Gitlab, Amazon Web Services, Google Cloud Platform and Microsoft Azure"
      ],
      "description": "From the author of Get into DevOps, the learning blog trusted by over 19,000 DevOps professionals every month:\nWelcome to the only course on Udemy that teaches you all about the DevOps mindset, methodologies and practices, plus hands-on tutorials on 15 of the most popular DevOps tools on the market, such as Docker, Ansible, Terraform, Jenkins and Amazon Web Services.\nGet into DevOps: The Masterclass is for anyone looking to learn more about DevOps ways of working and how to use the most popular DevOps tools to build Continuous Delivery pipelines.\nDevOps is one of the most sought-after set of skills in the job market right now, with tens of thousands of open roles globally. According to PayScale, the median DevOps salary in the U.S. is $92,327 per year. The best DevOps specialists on the market can name their price, and often earn more than $200,000 in a year. The best time to start learning DevOps was 5 years ago - the second best time is now!\nThe first part of this course teaches you the fundamental DevOps concepts such as Continuous Delivery, Continuous Deployment and continuous improvement via frequent feedback loops. You will learn the key principles for designing modern testing environments, and how to improve delivery team throughput by improving team autonomy. We'll also discuss The DevOps Teacher model for building DevOps capability in software teams.\nAfter you know why you should implement DevOps ways of working, you will learn the how - the second part of this course is about hands-on tutorials on DevOps tools. You will learn the basics of using 15 of the most popular DevOps tools to implement automation, Infrastructure as Code, and self-service interfaces on modern cloud platforms.\nNote: The course is not designed to be an exhaustive reference guide to all these tools, but a crash course to enable you to quickly learn the fundamentals and identify the key differences between them.\n\nThis course covers the following hands-on examples:\nCloud platforms\nAmazon Web Services\nHow to create a Virtual Machine on EC2\nHow to create an S3 bucket for hosting images\nHow to create a MySQL server with RDS (AWS Relational Database Service)\nGoogle Cloud Platform\nHow to create a Virtual Machine on Google Compute Engine\nHow to use the Google Cloud Shell\nOpenstack\nHow to create a Virtual Machine on Openstack Nova\nHow to create and associate a floating IP with Openstack Neutron\nHow to create a Security Group rule to allow SSH access to Virtual Machines\nMicrosoft Azure\nHow to provision a Microsoft SQL Server installation on Azure\nContainers & Container orchestration\nDocker\nHow to create and run a Docker image for a Node.js application\nKubernetes\nHow to run a Kubernetes cluster locally with Minikube\nHow to deploy a simple containerised application on Kubernetes\nRancher\nHow to install Rancher on Google Cloud Platform\nHow to deploy a simple containerised application on Rancher\nHow to run an Elasticsearch cluster on top of Rancher\nAWS EC2 Container Service (ECS)\nHow to create an ECS cluster and deploy a simple containerised application on it\nPipelines & Automation\nJenkins\nHow to create a Continuous Integration pipeline for building Docker images with Jenkins\nGitlab CI\nHow to create a Continuous Delivery pipeline for building, testing and deploying Docker images to Kubernetes\nRundeck\nHow to create a self-service dashboard for launching preconfigured virtual machines in AWS EC2\nConfiguration management & Infrastructure as Code\nAnsible\nHow to use Ansible to launch a virtual machine in AWS EC2, configure it to install Docker, and then deploy a Docker container on it\nTerraform\nHow to provision a Load Balancer (ALB) and two web servers in AWS with Terraform\nChef\nHow to run Chef Solo to configure application servers built with Terraform\nPuppet\nHow to use Puppet to configure Apache and PHP on a server built with Terraform\nJoin thousands of satisfied students and enroll now!\n\nNote: Unfortunately, the instructor is unable to provide technical support for individual technical issues using the tools demonstrated on this course.",
      "target_audience": [
        "This course is for anyone interested in DevOps",
        "This course is for anyone wanting to learn how to use DevOps tools",
        "This course is for anyone wanting to learn about and implement Continuous Integration and Continuous Delivery"
      ]
    },
    {
      "title": "Advanced Data Structures and Algorithms in Java ( DSA )",
      "url": "https://www.udemy.com/course/data-structures-and-algorithms-in-java-2/",
      "bio": "Advanced Data Structures and Algorithms in Java Using Java DSA Java Data Structures Algorithms DSA with Java DSA in Java",
      "objectives": [
        "Understand various data structures and algorithms (DSA) through animations",
        "Get the ability to implement different algorithms in Java",
        "Get the confidence to face programming interviews",
        "Learn theory and implementation of AVL Trees, B Trees, Threaded Binary Trees and Expression Trees",
        "Graph, traversal and shortest path algorithms"
      ],
      "course_content": {
        "Introduction": [
          "Introduction to Advanced Data Structures and Algorithms Through Java"
        ],
        "AVL Tree": [
          "Important : Source Code Repository required for course",
          "Introduction",
          "Rotations",
          "Insertion in AVL tree - 1",
          "Insertion in AVL Tree - 2",
          "Insertion in AVL Tree - 3",
          "Insertion in AVL Tree - 4",
          "Examples of insertion in AVL Tree",
          "Deletion in AVL Tree - 1",
          "Deletion in AVL Tree - 2",
          "Deletion in AVL Tree - 3",
          "Examples of Deletion in AVL Tree",
          "Your Review Matters!"
        ],
        "Threaded Binary Tree": [
          "Introduction",
          "Insertion",
          "Deletion"
        ],
        "Expression Tree": [
          "Introduction",
          "Constructing and Evaluating an Expression Tree",
          "Implementation of Expression Tree"
        ],
        "B tree": [
          "Introduction",
          "Inorder Traversal",
          "Searching",
          "Insertion",
          "Implementation of Insertion - 1",
          "Implementation of Insertion - 2",
          "Deletion",
          "Examples of Deletion from Leaf Node",
          "Examples of Deletion from Non-Leaf Node",
          "Implementation of Deletion"
        ],
        "Graph": [
          "Introduction",
          "Terminology",
          "Cycles",
          "Connectivity in Undirected Graph",
          "Connectivity in Directed Graphs",
          "Tree and Forest",
          "Representation of Graph : Adjacency Matrix",
          "Adjacency Matrix in Java",
          "Representation of Graph : Adjacency List",
          "Adjacency List in Java",
          "Transitive closure of a directed graph and Path Matrix",
          "Warshall’s Algorithm",
          "Warshall’s Algorithm in Java"
        ],
        "Traversal In Graph": [
          "Introduction",
          "Breadth First Search",
          "Implementation of Breadth First Search",
          "Finding Shortest path in an unweighted graph",
          "BFS Spanning Tree",
          "BFS in Undirected Graphs : Finding Connected Components",
          "Depth First Search",
          "Implementation of Depth First Search through Stack",
          "Recursive Implementation of Depth First Search",
          "Classification of Edges in DFS of Directed Graph",
          "Classification of Edges in DFS of Undirected Graph"
        ],
        "Shortest Paths in Graph": [
          "Shortest Path Problem",
          "Dijkstra’s Algorithm",
          "Dijkstra’s Algorithm : Example",
          "Dijkstra's Algorithm in Java"
        ],
        "Minimum Spanning Tree of a Graph": [
          "Introduction",
          "Prim’s Algorithm",
          "Prim's Algorithm : Example",
          "Prim’s Algorithm in Java",
          "Kruskal’s Algorithm",
          "Kruskal's Algorithm : Example",
          "Implementation of Kruskal's Algorithm",
          "Kruskal’s Algorithm in Java"
        ],
        "Bonus Lecture": [
          "Recommended Course and offer on my other courses"
        ]
      },
      "requirements": [
        "Knowledge of Java programming",
        "Knowledge of linked list, stack, queue and binary search trees"
      ],
      "description": "This \"Advanced Data Structures and Algorithms In Java\" course is thoroughly detailed and uses lots of animations to help you visualize the concepts.\nInstructor is author of book \"Comprehensive Data Structures and Algorithms in Java\".\nThis \"Advanced Data Structures and Algorithms in Java\" tutorial provides a comprehensive explanation of different types of graph and various graph algorithms. Throughout the course a step by step approach is followed to make you understand different algorithms. Through this course you can build a strong foundation and it will help you to crack Data Structures and Algorithms in Java coding interviews questions and work on projects. Good foundation on Data Structures and Algorithms in Java interview topics helps you to attempt tricky interview questions.\nThis Data Structures and Algorithms using Java course covers following DSA topics in Java with implementation :\nTrees : AVL Tree, Threaded Binary Tree, Expression Tree, B Tree explained and implemented in Java\nGraphs : Adjacency matrix, Adjacency list, Path matrix, Warshall’s Algorithm, Traversal, Breadth First Search (BFS), Depth First Search (DFS), Dijkstra’s Shortest Path Algorithm, Prim's Algorithm and Kruskal's Algorithm for minimum spanning tree\nHere are the DSA topics in course-\nAVL Tree\nThreaded Binary Tree\nExpression Tree\nB Tree\nGraph\nTraversal in Graph\nShortest Paths in Graph\nMinimum Spanning Tree of a Graph\nThe Data Structures and Algorithms with Java course is broken down into easy to assimilate short lectures and complete working programs are shown for each concept that is explained. The algorithms and examples are explained with figures and animations to simplify the learning of this complex topic.  You will see code implementation of different data structures in Java and algorithms are explained in step-wise manner.\nIn this Data Structures and Algorithms through Java course, Java programs are used for implementing various concepts, but you can easily code them in any other programming language like C++, C#, Python.\nThis Learn Data Structures and Algorithms In Java online course on udemy will help software developers to refresh the concepts studied in Data Structures and Algorithms In Java books / pdf and also to students learning from referred books / pdf.\nWhat students are saying about this course -\n\"One of the only courses available on udemy that includes the coding implementation. Brilliantly explained and quite easy to follow.\"\n\"This is really revision experience for me. I have forgotten few basic DSA topics concept regarding data structures and this tutorial helped me big way to revise it all.\"\n\"Thanks dear.\"\n\"Good course. Explain difficult concepts like AVL tree and B tree very well.\"\n\"Super. Enjoyed learning the data structures. Very detailed explanation. Thank you.\"\n\"One of the best ways, she has explained. After going through the course I highly recommend her.\"\n\"The best tutor I ever seen before.\"\n\"Excellent data structures and algorithms tutorial with practical examples and lots of hands on coding...\"\n\"Very informative with great examples to help you visually understand the concepts of data structures and how they can be applied with examples of java code snippets.\"\n\"Amazing Lecture Videos. So glad i bought it\"\n\"Explained the concept and continued with multiple examples so it was easy to learn.\"\n\"Great Course!\"\n\"Very good instructor and materials presented in professional manner. it is recommended.\"\n\"Great.\"\n\"Overall a good course, I used it to get understanding of the algorithms, Instructor explains concept clearly and patiently\"\n\n\nSo what are you waiting for, click on Buy button to enroll now and start learning.",
      "target_audience": [
        "Professional Programmers wanting to write effective code",
        "Programmers looking for jobs",
        "Computer Science students having Data Structures as part of their curriculum",
        "Non Computer science students wanting to enter IT industry"
      ]
    },
    {
      "title": "Algorithms Data Structures in Java #2 (+INTERVIEW QUESTIONS)",
      "url": "https://www.udemy.com/course/algorithms-and-data-structures-in-java-part-ii/",
      "bio": "Tries Data Structures, Ternary Search Trees, Data Compression, Substring Search and Sorting Algorithms",
      "objectives": [
        "Grasp the fundamentals of algorithms and data structures",
        "Develop your own algorithms that best fit to the personal need",
        "Detect non-optimal code snippets",
        "Understand data compression",
        "Understand sorting algorithms",
        "Understand tries and ternary search trees",
        "Understand Strings and StringBuilders"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Trie Data Structures (Prefix Trees)": [
          "What are tries (prefix trees)?",
          "Prefix tree introduction - insertion and searching",
          "Prefix tree introduction - sorting",
          "Prefix tree introduction - autocomplete",
          "Prefix tree introduction - associative arrays",
          "Tries implementation I",
          "Tries implementation II",
          "Tries implementation III",
          "Tries implementation IV - associative arrays",
          "Tries implementation V - autocomplete",
          "Tries implementation VI - sorting",
          "Hashing based data structures and tries",
          "Applications of trie data structures",
          "Trie Data Structures Quiz"
        ],
        "Interview Questions - IP Routing with Tries": [
          "Networking and the longest common prefix problem",
          "Longest common prefix implementation"
        ],
        "Ternary Search Trees (TSTs)": [
          "What are ternary search trees?",
          "Ternary search tree visualization",
          "Ternary search tree implementation - insertion",
          "Ternary search tree implementation - search",
          "Ternary search trees implementation - traversal",
          "Recursion and stack memory visualization",
          "Ternary Search Trees Quiz"
        ],
        "Interview Questions - Boggle Game": [
          "What is boggle and how to solve it?",
          "Boggle game with ternary search tree implementation I",
          "Boggle game with ternary search tree implementation II",
          "Boggle game with ternary search tree implementation III"
        ],
        "Substring Search": [
          "Brute-force search introduction",
          "Brute-force search implementation",
          "Naive Substring Search Quiz",
          "Rabin-Karp algorithm introduction",
          "Rabin-Karp algorithm implementation",
          "Rabin-Karp Algorithm Quiz",
          "Knuth-Morris-Pratt algorithm introduction",
          "Constructing the partial match table",
          "Knuth-Morris-Pratt algorithm implementation",
          "Knuth-Morris-Pratt Algorithm Quiz",
          "Z algorithm introduction",
          "Z algorithm illustration",
          "Z algorithm implementation",
          "Z Algorithm Quiz",
          "Substring search algorithms comparison",
          "Applications of substring search"
        ],
        "Strings": [
          "Strings and the String Constant Pool (Intern Pool)",
          "String's immutability",
          "Strings and StringBuilders",
          "String reversion",
          "Suffixes",
          "Prefixes",
          "Longest common prefix",
          "Longest repeated substring problem",
          "Why are suffix tries and suffix arrays useful?",
          "String Quiz"
        ],
        "Basic Sorting Algorithms": [
          "Sorting introduction",
          "What is stability in sorting?",
          "Adaptive sorting algorithms",
          "Sorting Algorithms Basics Quiz",
          "Bogo sort introduction",
          "Bogo sort implementation",
          "Bogo Sort Quiz",
          "Bubble sort introduction",
          "Bubble sort implementation",
          "Selection sort introduction",
          "Selection sort implementation",
          "Selection Sort Quiz",
          "Insertion sort introduction",
          "Insertion sort implementation",
          "Insertion Sort Quiz",
          "Shell sort introduction",
          "Shell sort implementation",
          "Shell Sort Quiz",
          "Quicksort introduction",
          "Quicksort introduction - example",
          "Quicksort implementation",
          "Hoare's partitioning and Lomuto's partitioning",
          "What is the worst-case scenario for quicksort?",
          "QuickSort Quiz",
          "Merge sort introduction",
          "Merge sort implementation",
          "Merge sort and stack memory visualization",
          "Merge Sort Quiz",
          "Hybrid algorithms introduction",
          "Non-comparison based algorithms",
          "Counting sort introduction",
          "Counting sort implementation",
          "Radix sort introduction",
          "Radix sort implementation",
          "Non-Comparison Based Sorting Quiz"
        ],
        "Interview Questions - Sorting": [
          "Interview question #1 - implementing TimSort algorithm",
          "Interview question #1 - solution",
          "Interview question #2 - implement quicksort with iteration",
          "Interview question #2 - solution"
        ],
        "Data Compression": [
          "What is data compression?",
          "What is run-length encoding?",
          "Run-length encoding implementation",
          "Run-Length Encoding Quiz",
          "Huffman encoding introduction",
          "Huffman decoding introduction",
          "Huffman encoding implementation I - helper classes",
          "Huffman encoding implementation II - encoding",
          "Huffman encoding implementation III - testing",
          "Huffman Encoding Quiz",
          "LZW compression introduction - compression",
          "LZW compression introduction - decompression",
          "LZW implementation",
          "LZW Encoding Quiz"
        ]
      },
      "requirements": [
        "Core Java",
        "Internet connection"
      ],
      "description": "This course is about data structures and algorithms. We are going to implement the problems in Java, but I try to do it as generic as possible: so the core of the algorithms can be used in C++ or Python. The course takes approximately 12 hours to complete. I highly recommend typing out these data structures several times on your own in order to get a good grasp of it.\nSection 1 - Tries\nwhat are prefix trees (tries)\nbasics operations: insertion, sorting and autocomplete\nlongest common prefix problem\nprefix trees applications in networking (IP routing)\nSection 2 - Ternary Search Trees\nwhat is the problem with tries?\nwhat are ternary search trees\nbasic operations: insertion and retrieval\napplications of tries (IP routing and Boggle Game)\nSection 3 - Substring Search Algorithms\nsubstring search algorithms\nbrute-force substring search\nZ substring search algorithm\nRabin-Karp algorithm and hashing\nKnuth-Morris-Pratt (KMP) substring search algorithm\nSection 4 - Strings\nstrings in Java programming\nwhat is the String Constant Pool?\nprefixes and suffixes\nlongest common prefix problem\nlongest repeated substring problem\nsuffix tries and suffix arrays\nSection 5 - Sorting Algorithms\nbasic sorting algorithms\nbubble sort and selection sort\ninsertion sort and shell sort\nquicksort and merge sort\ncomparison based and non-comparison based approaches\nstring sorting algorithms\nbucket sort and radix sort\nSection 6 - Data Compression Algorithms\nwhat is data compression\nrun length encoding\nHuffman-encoding\nLZW compression and decompression\nSection 7 - Algorithms Analysis\nhow to measure the running time of algorithms\nrunning time analysis with big O (ordo), big Ω (omega) and big θ (theta) notations\ncomplexity classes\npolynomial (P) and non-deterministic polynomial (NP) algorithms\nO(1), O(logN), O(N) and several other running time complexities\nFirst, we are going to discuss prefix trees: modern search engines for example use these data structures quite often. When you make a google search there is an autocomplete feature because of the underlying trie data structure. It is also good for sorting: hashtables do not support sort operation but on the other hand, tries do support.\nSubstring search is another important field of computer science. You will learn about Z algorithm and we will discuss brute-force approach as well as Rabin-Karp method.\nThe next chapter is about sorting. How to sort an array of integers, doubles, strings or custom objects? We can do it with bubble sort, insertion sort, mergesort or quicksort. You will learn a lot about the theory as well as the concrete implementation of these important algorithms.\nThe last lectures are about data compression: run-length encoding, Huffman encoding and LZW compression.\nThanks for joining the course, let's get started!",
      "target_audience": [
        "This course is meant for university students with quantitative background (mathematics, computer science) but anyone with core java knowledge can get a good grasp of the lectures"
      ]
    },
    {
      "title": "Introduction to Entity Framework Core 6",
      "url": "https://www.udemy.com/course/introduction-to-entity-framework-core/",
      "bio": "Learn Entity Framework Core from scratch",
      "objectives": [
        "You are going to be able to develop .NET apps that use Entity Framework Core",
        "Read, update, insert and delete data using Entity Framework Core",
        "Create databases from C# code",
        "Model relationships using conventions, data annotations and the fluent API",
        "Do automatic tests that involves Entity Framework Core",
        "Use the latest features of Entity Framework Core"
      ],
      "course_content": {
        "Introduction to Entity Framework Core": [
          "Introduction",
          "What is Entity Framework Core?",
          "Versions",
          "Code First - Database First",
          "When to use EF Core?",
          "When NOT to use EF Core?",
          "EF Core vs Dapper",
          "Installing the EF Core CLI",
          "Configuring EF Core in a Console App",
          "Configuring EF Core in ASP.NET Core",
          "Summary",
          "Source code"
        ],
        "Modelling the Database": [
          "Introduction",
          "Creating the Project",
          "Creating the Genre Entity",
          "Configuring the Primary Key in 3 Ways",
          "Defining the Max Length of a Property",
          "Non-Null Fields",
          "Changing Names and Schema",
          "Creating the Actor Entity",
          "Creating the Cinema Entity - Configuring Decimal",
          "NetTopologySuite - Modelling Spatial Data",
          "Creating the Movie Entity",
          "One-to-One Relationships",
          "One-to-Many Relationships",
          "Enums",
          "Default Value",
          "Many-to-Many Relationships: Skip Style",
          "Many-to-Many Relationships: Non-Skip Style",
          "Configure Conventions",
          "Configuration Classes",
          "Generating the Database Diagram",
          "Summary"
        ],
        "Querying Data": [
          "Introduction",
          "Data Seeding",
          "Fetching a List of Records",
          "Not Keeping Track with AsNoTracking",
          "Fetching the First Record with First and FirstOrDefault",
          "Filtering with Where",
          "Pagination and IQueryable",
          "Selecting the Columns to Fetch",
          "AutoMapper and Projections",
          "Querying Spatial Data",
          "Ordering and Filtering Spatial Data",
          "Loading Related Data with Eager Loading",
          "Using ThenInclude",
          "Filtering and Ordering Related Data",
          "Related Data and AutoMapper",
          "Select Loading",
          "Explicit Loading",
          "Lazy Loading",
          "Deactivating Lazy Loading",
          "Grouping with GroupBy",
          "Deferred Execution",
          "Summary"
        ],
        "Creating, Updating and Deleting Data": [
          "Introduction",
          "Connected Model and Disconnected Model",
          "Clean-Up",
          "Inserting Records",
          "Inserting Several Records",
          "Inserting Related Data",
          "Inserting Cinema with DTO",
          "Inserting a Movie",
          "Flexible Mapping",
          "Updating with the Connected Model",
          "Updating with the Disconnected Model",
          "Updating Records with Related Data",
          "Deleting Records",
          "Soft-Delete",
          "Query Filters",
          "Summary"
        ],
        "Configuring Properties": [
          "Introduction",
          "Configuration Modes",
          "Primary Keys",
          "Ignoring Properties and Classes",
          "Configuring Indexes",
          "Index with Filters",
          "ValueConversions",
          "Custom ValueConversions",
          "Keyless Entities",
          "Working with Views",
          "Shadow Properties",
          "Automating Configurations with the Fluent API",
          "Summary"
        ],
        "Configuring Relationships": [
          "Introduction",
          "Basic Terminology",
          "Clean up",
          "Configuration by Convention",
          "Required and Optional Relationships",
          "Foreign Key Attribute",
          "Inverse Property Attribute - Two Relationships to the Same Table",
          "Configuring One-to-One Relationships with the Fluent API",
          "Configuring One-to-Many Relationships with the Fluent API",
          "Configuring Many-to-Many Relationships - Without Skipping",
          "Configuring Many-to-Many Relationships - With Skipping",
          "What Happens When You Delete - OnDelete",
          "Table Splitting",
          "Owned Types",
          "Inheritance - Table-Per-Hierarchy",
          "Inheritance - Table-per-Type",
          "Summary"
        ],
        "Commands and Migrations": [
          "Introduction",
          "The Most Important One: Get-Help",
          "Adding Migrations With Add-Migration",
          "Pushing the Changes: Update-Database",
          "Removing Migrations - Fully and Partially - Remove-Migration",
          "Listing the Migrations with Get-Migration",
          "Deleting the Database with Drop-Database",
          "Modifying Migrations",
          "Migration-Bundle",
          "Generating Scripts with Migration-Script",
          "Running Migrations From our Application",
          "Faster Loads with Compiled Models",
          "Database-First",
          "Summary"
        ],
        "DbContext": [
          "Introduction",
          "Properties of the DbContext",
          "Clean-Up",
          "OnConfiguring",
          "Changing the Entity State Directly",
          "Updating Some Columns",
          "Overriding SaveChanges",
          "Injecting Services in the DbContext",
          "State Events",
          "Events Related to Saving Changes",
          "Arbitrary Queries",
          "Inserting Data with Arbitrary Queries",
          "Using ToSqlQuery to Centralize Arbitrary Queries",
          "Stored Procedures and Non-Composable Queries",
          "Introduction to Transactions",
          "Using BeginTransaction",
          "Summary"
        ],
        "Advanced Scenarios": [
          "Introduction",
          "Clean Up",
          "User-Defined Functions - Scalars",
          "Table-Valued Functions",
          "Computed Columns",
          "Creating a Sequence",
          "Concurrency Handling with ConcurrencyCheck",
          "Concurrency Conflicts at the Row Level",
          "Handling Concurrency Exceptions",
          "Handling Concurrency Conflicts in ASP.NET Core",
          "Introduction to Temporal Tables",
          "Inserting, Updating and Deleting Data with Temporal Table",
          "Querying Data From the Temporal Table and the History Table",
          "What Was the Value of the Record in a Specific Date? - TemporalAsOf",
          "What Was the Value Between Two Dates? - TemporalFromTo",
          "What Values are Totally Contained Between Two Dates? - TemporalContainedIn",
          "What Were the Values Between Two Dates Including the End? - TemporalBetween",
          "Restoring a Deleted Record",
          "Customize the Naming in Temporal Tables",
          "Using EF Core in Another Project",
          "Summary"
        ],
        "Automatic Tests": [
          "Introduction",
          "Reviewing Basic Concepts",
          "Automated Tests",
          "Unit Testing - Our First Test",
          "Mocks",
          "Introduction to the In-Memory Provider",
          "Testing with the In-Memory Provider",
          "Testing with a Real Database",
          "Summary"
        ]
      },
      "requirements": [
        "Basic C# level. Know how to work with variables, functions, classes and LINQ",
        "Not much T-SQL knowledge is needed, though it helps to know basic concepts, like databases and tables"
      ],
      "description": "In this course you will learn how to use Entity Framework Core 6 to talk to a database from C# code.\n- We will learn to create databases from our C# code using the code-first technique.\n- We will make a brief comparison with Dapper, to see what is the difference between each of these tools.\n- We will see how to read, update, delete, and create data using Entity Framework Core.\n- We will learn to work with relationships between our tables: One-to-many relationships, one-to-one relationships, and many-to-many relationships.\n- We will use the Fluent API to configure the schema of our database.\n- We will see how to use automatic tests in our Entity Framework Core projects.\n- We will learn about the new features that Entity Framework Core 6 brings us.\n- We will use functions such as Sum, Average and GroupBy, to perform operations on different records of a table.\n- We will see how to execute stored procedures using Entity Framework Core.\n- We will load the related data of our entities in different ways, using eager loading, explicit loading, select loading and lazy loading.\n- We will learn that with deferred execution we can use interesting techniques to make our code more flexible and reusable.\n- We will see techniques on how to correctly configure Entity Framework Core in ASP.NET Core, for example, we will see when we should use a pool to recycle the DbContext.",
      "target_audience": [
        "Beginner or advanced .NET developer who wants to learn Entity Framework Core from scratch",
        "Beginner or advanced .NET developer who wants to stay up to date with Entity Framework Core features"
      ]
    },
    {
      "title": "ROS Actions",
      "url": "https://www.udemy.com/course/ros-actions/",
      "bio": "Master ROS Actions and Create More Complex Robotics Applications",
      "objectives": [
        "Master ROS actions",
        "Use the SimpleActionServer, SimpleActionClient, ActionServer and ActionClient classes",
        "Create more complex robotics applications",
        "Get more practice on ROS with Object Oriented Programming",
        "Unleash the potential of ROS communication",
        "And even more ROS best practices"
      ],
      "course_content": {
        "Introduction": [
          "Welcome!",
          "Why ROS Actions ?",
          "What are ROS Actions ?",
          "Quick Note on ROS Versions",
          "Setup your Environment for this Course",
          "How to get the most out of this course"
        ],
        "Discover Actions With SimpleActionClient/SimpleActionServer": [
          "Intro",
          "Create an Action Definition and Generate the Action Messages",
          "Create a Server with the SimpleActionServer",
          "Create a Client with the SimpleActionClient",
          "Make your Client Asynchronous",
          "Send Feedback from the Server to the Client",
          "Set a Goal as Succeeded or Aborted",
          "Understand Goal Status",
          "Cancel a Goal",
          "Debug ROS Topics used in ROS Actions",
          "Use rqt_graph to Get More Info about ROS Topics",
          "C++ - Create a Server with the SimpleActionServer",
          "C++ - Create a Client with the SimpleActionClient",
          "Documentation Reference For SimpleActionClient and SimpleActionServer",
          "Section Conclusion"
        ],
        "Activity: Experiment on SimpleActionClient/SimpleActionServer": [
          "Intro",
          "Create the Action Definition",
          "Create the Server",
          "Create the Client",
          "Cancel the Goal with Another Subscriber",
          "Use rqt_graph to Debug Your ROS Graph",
          "C++ - Create the Server",
          "C++ - Create the Client",
          "Section Conclusion"
        ],
        "Go To The Next Step: ActionClient and ActionServer Explained": [
          "Intro",
          "What Are the SimpleActions Main Limitations ?",
          "When SimpleActions Are Just What You Need",
          "What is an ActionServer",
          "What is an ActionClient",
          "A Few Documentation Links Before You Start"
        ],
        "Activity: Create a Complete ActionClient and ActionServer": [
          "Intro",
          "Create a Server With the ActionServer",
          "Create a Client With the ActionClient",
          "Send and Handle Multiple Goals",
          "Change the Goal Policy",
          "Place Goals in a Queue and Execute Them One by One",
          "C++ - Create a Server With the ActionServer",
          "C++ - Create a Client With the ActionClient",
          "Section Conclusion"
        ],
        "Conclusion": [
          "What You've Learned"
        ],
        "Bonus": [
          "A Few Examples of Existing Actions",
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "ROS basics (at least nodes, topics, services)",
        "Some programming knowledge in Python or C++",
        "You are familiar with Linux and how to use a terminal"
      ],
      "description": "Learning ROS is hard... But you’ve made it. You have some good basics about ROS nodes, topics, services, … This is a pretty good start. And you want to take your skills to the next level.\nOr you’re already in the process of learning ROS actions, but you have some real trouble finding documentation and tutorials online.\nA great ROS developer must know about ROS actions, and must be able to use them efficiently when required. Topics, Services and Actions are the 3 communication tools that will allow you to create any complex robotic application.\nWarning !!! Before continuing, I want to be sure you understand that this course is not a course for total ROS beginners. You have to get some ROS basics first if you want to be able to follow the pace of this course.\nAlso, this course targets the first version of ROS, or ROS1. This is not a ROS2 course.\n\n\n→ Why this course ?\n\n\nWhen I first started with ROS actions, my progress was really, really slow. I didn’t find any structured resource or tutorial to go beyond the very basic stuff. It took me a very long time (several months) to finally have a clear understanding.\nThis course is the course that I wish I had when I started. Practical and to the point. Showing you directly how things work, how you can quickly start and build more more complex applications.\n\n\n→  Now, why should you choose my course ?\n\n\nIn the past I have developed a complete ROS software for an entire 6 axis robotic arm. I’m telling you that, because by developing this robot, I learned (the hard way) what I really needed to know to build things that actually work.\nMy experience with Robot Operating System is not only about university work or a weekend hobby : I actually co-founded a business with a robot powered by ROS. By doing so, I had to focus on going to the point, finding what is useful, and what is not.\nSo today, with the practical vision that I’ve developed, I know exactly what you need to learn at the beginning if you want to get serious about building more complex robotic applications.\nAnd getting serious means mastering ROS actions. One day or another, you’ll need to use them or else you’ll be stuck.\n\n\n→ What is this course about\n\n\nThis course is a complete course about ROS actions. I’ll show you each part of the process, step by step, and explain all the code that I write.\nIn the first part of the course, you’ll start using ROS actions with the SimpleActionServer and SimpleActionClient classes. Those parts will let you understand the key concepts behind ROS actions.\nThe second part is focused on using ActionServer and ActionClient classes. Those are more difficult to understand but allow you to create far more complex applications. You will learn how to handle multiple goals, how to change the server goal policy, how to put goals in a queue, etc.\nDuring the course, you will practice through activities and challenges. Practicing is the key if you want to learn efficiently.\nI will mostly use Object Oriented Programming. That’s a great opportunity for you to improve your OOP skills, which is really working well with ROS. Also, all the code will be written in both Python and C++ !\n\n\nSo… Don’t wait too much and enroll in this course to go to the next level of ROS!\n\n\nDuring the course I will also give you all the best practices that I know when developing with the Robot Operating System. So that’s another opportunity to get some practical insights that will help you develop better and more complex robotics applications.",
      "target_audience": [
        "Students who have learned ROS basics and want to go further",
        "ROS developers who want to take their skill to the next level",
        "And anyone desperately searching for documentation on ROS actions without finding something useful"
      ]
    },
    {
      "title": "PCB Designing (with 3D Model) in Orcad [2022]",
      "url": "https://www.udemy.com/course/orcad2019/",
      "bio": "Schematic in OrCAD Capture CIS, Printed Circuit Board, BOM,Footprints, 3D Model,Routing and Gerber files for Arduino UNO",
      "objectives": [
        "Students can draw their own schematics and Design their own custom Printed Circuit Boards.",
        "Students will learn basic terminologies related to PCB's that are used widely in books and industries",
        "In Addition students will learn widely used electronics concepts"
      ],
      "course_content": {
        "Introduction & Installation": [
          "Course Curriculum",
          "How to Install OrCAD Professional (2019)"
        ],
        "[For beginners] OrCad Capture CIS (2019)": [
          "How to setup Project in OrCAD Capture",
          "Placing Parts, Wiring,Libraries,Symbols in OrCAD Capture Environment",
          "How to create custom Schematic symbols",
          "How to search symbols from Libraries",
          "First schematic Design (Real Life Project)",
          "How to assign footprints to schematic symbols",
          "Annotation, DRC, Netlist & Board File"
        ],
        "[For beginners] PCB Terminologies": [
          "What is PCB",
          "What are Pads",
          "VIA (Vertical Interconnect Access)",
          "Plated vs Non Plated Holes",
          "What is Silkscreen",
          "What is SolderMask"
        ],
        "[For beginners] PCB Editor (2019)": [
          "Introduction & Setup For PCB Editor",
          "How to setup Physical Rules (Constraint Manager)",
          "Requested Lecture (Physical Rules)",
          "PCB Layers (Cross_Section)",
          "How to place Components on PCB",
          "PCB Editor Custom Preferences",
          "How to Modify Footprints",
          "Board Outline & Mechanical symbols",
          "How To Update & Modify Board File",
          "PCB Routing Guidelines",
          "PCB Routing",
          "How to Setup Silkscreen",
          "Custom Text, Dimensions, NC Drill Legend....",
          "Gerber Files & NC Drill File",
          "Gerber Viewer"
        ],
        "[For beginners] Pad Stack Editor (2019) & Footprints": [
          "Overview & Introduction of Padstack Editor",
          "How to Create Pads for Through Hole Resistor",
          "How to Create Footprint for Through Hole resistor",
          "How to Create Footprint for SMD Resistor",
          "Create Footprint for 555 Timer (DIP-8) [Through Hole]",
          "Footprint Layers (Important)",
          "Create Footprint for 555 Timer (DIP-8) [SMD]"
        ],
        "[Advanced] Arduino UNO Schematic in OrCAD Capture CIS (2019)": [
          "Download Schematic & Project Setup in Capture CIS",
          "Schematic Symbols for ATMega328U & ATMega16UR",
          "Draw Schematic for AtMega328U & Wiring",
          "Reset Circuit & Decoupling Capacitor Schematic",
          "USB Bridge Schematic",
          "USB Circuit Schematic",
          "Net Naming (Alias) for AtMega328PU",
          "Net Naming (Alias) for USB Bridge Circuit",
          "Power Connector & voltage Regulator Circuit",
          "Power Selector Circuit",
          "Finishing our Arduino UNO Schematic"
        ],
        "[Advanced] Arduino UNO Components, Footprints & 3D Models from Digi-Key": [
          "Component Properties Panel",
          "ATMega328PU Footprint & 3D Model",
          "ATMega16U2 Footprint & 3D Model",
          "Ceramic Capacitors Footprint(0805) & 3D Model (Part-1)",
          "Ceramic Capacitors Footprint(0805) & 3D Model (Part-2)",
          "Electrolytic Capacitors Footprint & 3D Model",
          "Diode Footprint & 3D Model",
          "LED Footprint(0805) & 3D Model",
          "Resistor Footprint(0805) & 3D Model",
          "Push Button Footprint & 3D Model",
          "Varistor Footprint & 3D Model",
          "5V Voltage Regulator Footprint (SOT223) & 3D Model",
          "3.3V (LDO) Voltage Regulator Footprint (SOT23) & 3D Model",
          "LM321 Footprint (SOT23) & 3D Model",
          "16MHz Crystal Footprint & 3D Model",
          "Ferrite Bead & Inductor Footprint & 3D Model",
          "N Channel Mosfet Footprint (SOT23) & 3D Model",
          "Female Headers Footprint & 3D Model",
          "USB Type B Connector Footprint & 3D Model",
          "12V DC Jack Connector Footprint & 3D Model",
          "ICSP Header Footprint & 3D Model"
        ],
        "[Advanced] PCB Editor (2019) Classes/Sub-classes": [
          "Understanding Classes/sub-classes"
        ],
        "[Advanced] Fiducials & Mechanical symbols": [
          "Create Schematic symbol for Fiducials and Mounting Holes",
          "Create Footprint for Fiducials and Mounting Holes"
        ],
        "[Advanced] Arduino UNO BOM, Smart PDF, Netlist and Board File": [
          "Annotation, DRC, NetList and Board File",
          "Bill Of Material (BOM)",
          "Smart PDF of Schematic"
        ]
      },
      "requirements": [
        "Basic Concepts Of Electronics",
        "Windows 10 (also works with Windows 7 & Windows 8) or Mac OS",
        "I recommend to use a mouse if you are using Laptop",
        "You will need a OrCAD & Cadence Allegro Software. If you are College/University student, you can ask for a student license (I recommend you use ORCAD free 30 Days trial)",
        "In addition to educational packages for colleges and universities, OrCAD supports the student community by providing a Lite / student version of OrCAD (Student Version: The OrCAD Lite / Student product versions are not licensed, but instead are limited in terms of design size and complexity)"
      ],
      "description": "Get Detailed introduction to Orcad Capture CIS, Pad-stack Editor and PCB Editor with Project-1\nProject 1: Learn How to design basic Circuit based on real life projects [For beginners]\nLevel Up your Skills with Project-2\nProject 2: Learn to design Schematic & PCB for Arduino UNO (includes multiple schematic pages, Off page connectors, search parts from Digi-Key, Professional Bill of material, Smart PDF for Schematic, How to download custom footprints , How to create 3D Model etc )\nThis course is complete & detailed walk through of industry leading PCB  Design software. This course will help to develop a fundamentals in OrCAD, leading to better PCB design practices and skills.  After completion of this course you will have skill and useful resources to design your own custom PCB's.\nThis course is complete & detailed walk through of industry leading PCB  Design software. This course will help to develop a fundamentals in OrCAD, leading to better PCB design practices and skills.  After completion of this course you will have skill and useful resources to design your own custom PCB's.\n\n\nThis course is complete & detailed walk through of industry leading PCB  Design software. This course will help to develop a fundamentals in OrCAD, leading to better PCB design practices and skills.  After completion of this course you will have skill and useful resources to design your own custom PCB's..",
      "target_audience": [
        "This course is very useful for students related to Electrical, Electronics and Computer Engineering . Also, this tool is worth to learn if you already have a knowledge about Altium Designer, Pads, Eagle or KiCAD",
        "Engineering professionals who needs to learn and design their own printed circuit boards",
        "Hobbyist, Entrepreneur and tech savvy people those are curious about PCB's"
      ]
    },
    {
      "title": "Beat the Codility Coding Interview in Java",
      "url": "https://www.udemy.com/course/beat-the-codility-coding-interview-in-java/",
      "bio": "Learn and practice how to solve many coding puzzles from Codility using Java",
      "objectives": [
        "Experience solving many of codility's coding interview puzzles, with problem descriptions, hints and solutions",
        "Learn common problem solving tips ideal for coding interviews",
        "Have a greater chance of passing the coding interview with codility, hackerrank and others",
        "Have a better chance of doing well in a face to face or phone coding interview"
      ],
      "course_content": {
        "Introduction": [
          "Make most of this course",
          "Useful links and resources"
        ],
        "Time Complexity": [
          "Quick recap on Complexity Theory",
          "Perm Missing Element Problem",
          "Perm Missing Element Hint 1",
          "Perm Missing Element Hint 2",
          "Perm Missing Element Solution",
          "Perm Missing Element Code Walkthrough",
          "Equilibrium Problem",
          "Equilibrium Hint 1",
          "Equilibrium Hint 2",
          "Equilibrium Solution",
          "Equilibrium Code Walkthrough"
        ],
        "Arrays": [
          "Refresh your knowledge on Arrays",
          "Cyclic Rotation Problem",
          "Cyclic Rotation Hint",
          "Cyclic Rotation Solution",
          "Cyclic Rotation Code Walkthrough"
        ],
        "Counting Elements": [
          "What do we mean by Counting Elements?",
          "Frog River One Problem",
          "Frog River One Hint",
          "Frog River One Solution",
          "Frog River One Code Walkthrough",
          "Max Counters Problem",
          "Max Counters Hint 1",
          "Max Counters Hint 2",
          "Max Counters Solution",
          "Max Counters Code Walkthrough"
        ],
        "Stacks and Queues": [
          "The basics around Stacks and Queues",
          "Brackets Problem",
          "Brackets Hint",
          "Brackets Solution",
          "Brackets Code Walkthrough",
          "Fish Problem",
          "Fish Hint",
          "Fish Solution",
          "Fish Code Walkthrough"
        ],
        "Leader": [
          "Leader definition and the Dominator Problem",
          "Dominator Hint",
          "Dominator Solution",
          "Dominator Code Walkthrough"
        ],
        "Maximum Slice Problem": [
          "Introduction to the Maximum Sub Array problem",
          "Max Profit Problem",
          "Max Profit Hint",
          "Max Profit Solution",
          "Max Profit Code Walkthrough"
        ],
        "Sorting": [
          "Overview of different Sorting Algorithms",
          "Disc Intersection Problem",
          "Disc Intersection Hint",
          "Disc Intersection Solution",
          "Disc Intersection Code Walkthrough"
        ],
        "Prefix Sums": [
          "How to generate prefix sums",
          "Passing Cars Problem",
          "Passing Cars Hint",
          "Passing Cars Solution",
          "Passing Cars Code Walkthrough",
          "Div Count Problem",
          "Div Count Hint",
          "Div Count Solution",
          "Div Count Code Walkthrough"
        ],
        "Primes and Composites": [
          "Understanding Primes and Composites",
          "Flags Problem",
          "Flags Hint 1",
          "Flags Hint 2",
          "Flags Solution",
          "Flags Code Walkthrough"
        ]
      },
      "requirements": [
        "Java programming language",
        "Basic understanding of data structures and algorithms"
      ],
      "description": "This course has been designed to help you pass your next coding interview. It focuses on puzzles from Codility's training lessons, so if you have an online coding test coming up, this course is perfect for you.\nThe key to passing coding interviews is to practice as much as possible by solving various types of coding puzzles. In doing so you sharpen your problem solving skills and eventually you will start to see patterns amongst the different coding solutions. You also increase your chances of being asked a problem you’ve already solved.\nIn this course you’ll get to practice many of these coding puzzles. In every section we introduce the topic, explain the problem and later provide you with a few hints that help solve the puzzle. In the end we arrive at the solution together.\nAlong the way you'll learn how to ride a motorbike, surf, scuba dive and fly an aeroplane. *\nJoin me on this course, and let’s get you to pass this interview!\n\n\n*Not really, however this course is pretty fun regardless.\nAll code in this course can be found on github, username/project: cutajarj/CodilityInJava",
      "target_audience": [
        "Java Developers about to take the codility coding interview",
        "Java Developers about to take another coding interview, such as hackerrank or others",
        "Java Developers about to take a face to face or phone coding interview"
      ]
    },
    {
      "title": "Java Virtual Threads & Concurrency Masterclass [Hands-On]",
      "url": "https://www.udemy.com/course/java-virtual-thread/",
      "bio": "Multithreading, Structured Concurrency, Executor Service, Scalability, Performance Testing Using JMeter with Spring Boot",
      "objectives": [
        "Master Virtual Threads: Learn how to effectively use Virtual Threads to improve the performance and scalability of your Java applications.",
        "Simplify Concurrency: Discover a simpler and more efficient approach to concurrency compared to traditional threads.",
        "Optimize Executor Service: Use Executor Service with Virtual Threads to control concurrency and process tasks efficiently.",
        "Leverage Completable Future: Utilize Completable Future for asynchronous task processing and error handling.",
        "Stay Ahead of the Curve: Get a sneak peek into Java's new preview APIs for structured concurrency.",
        "Build Scalable Applications: Apply your knowledge to build scalable and performant Java applications.",
        "Test Application Scalability: Use JMeter to test your application's scalability and performance.",
        "Migrate to Virtual Threads: Learn how to easily migrate your existing applications to Virtual Threads.",
        "Hands-On Project: Build a practical application using Spring Boot Web and Virtual Threads.",
        "Migration Guide: Learn how to easily migrate your existing applications to Virtual Threads."
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Deep Dive into Virtual Threads": [
          "Introduction",
          "*** Resources ***",
          "Project Setup",
          "Platform Thread Creation Limit - Demo",
          "Thread Builder - Factory Method",
          "Virtual Thread Scaling - Demo",
          "How Virtual Thread Works",
          "Carrier Threads Demo",
          "Virtual Thread & Stack",
          "OPTIONAL - Getting Stack Trace",
          "CPU Intensive Task - Part 1",
          "CPU Intensive Task - Part 2",
          "CPU Intensive Task - Part 3",
          "Virtual Thread - Scheduler Config",
          "Preemptive vs Cooperative Scheduling",
          "Cooperative Scheduling Demo",
          "How Virtual Thread Can Help?",
          "Synchronization",
          "OPTIONAL - Synchronization For Compute Tasks",
          "Virtual Thread - Synchronization For IO Tasks",
          "Pinning Threads",
          "Java 24 - Pinning Issue Update",
          "Tracing Pinned Threads",
          "Fixing Pinned Threads Using Reentrant Lock",
          "Virtual Thread Factory",
          "OPTIONAL - Thread Methods",
          "Quiz",
          "Summary"
        ],
        "Executor Service": [
          "Introduction",
          "Executor Service Types",
          "Auto Closeable",
          "Executor Service Types - Demo",
          "** Resource ** - External Service",
          "External Service",
          "External Service Client",
          "Access Response Using Future",
          "OPTIONAL - Concurrency vs Parallelism",
          "Future Useful Methods",
          "Aggregator Service",
          "Do We Create Extra Thread?",
          "Clarification On Virtual Thread Executor Behavior",
          "Executor With Virtual Thread Factory",
          "Executor Service & Virtual Thread Challenges",
          "Concurrency Limit",
          "Semaphore",
          "Virtual Thread Concurrency Limiter",
          "What about Order?",
          "Virtual Thread Concurrency Limiter With Order",
          "Scheduled Executor With Virtual Thread",
          "Quiz",
          "Summary"
        ],
        "Completable Future": [
          "Introduction",
          "How CompletableFuture Works",
          "Simple CompletableFuture Demo",
          "Run Async",
          "Supply Async",
          "Getting Product Info",
          "Aggregator - Error Handling With CompletableFuture",
          "Timeout",
          "CompletableFuture - All Of",
          "CompletableFuture - Any Of",
          "CompletableFuture - Then Combine",
          "Summary"
        ],
        "** PREVIEW ** - Scoped Values & Structured Concurrency": [
          "Introduction",
          "ThreadLocal - Part 1",
          "ThreadLocal - Part 2",
          "Scoped Values - Part 1",
          "Scoped Values - Part 2",
          "Structured Concurrency",
          "StructuredTaskScope - Demo",
          "StructuredTaskScope - ShutDown On Failure",
          "StructuredTaskScope - ShutDown On Success",
          "Inheriting Scoped Values",
          "Summary"
        ],
        "Application Development With Spring & Virtual Threads": [
          "Introduction",
          "External Services",
          "Project Setup",
          "DTO",
          "** Resource ** - RestClient",
          "RestClient - Crash Course",
          "Service Client",
          "Trip Plan Service",
          "Trip Reservation Service",
          "Trip Controller",
          "** Resource ** - Application Properties",
          "Application Properties",
          "Service Client Beans",
          "Executor Service Bean",
          "Application Demo"
        ],
        "Performance Testing With JMeter": [
          "Introduction",
          "Throughput vs Response Time",
          "Setting Up JMeter",
          "Creating Test Script",
          "Throughput vs Response Time - Demo",
          "JConsole",
          "VisualVM",
          "HttpClient Executor",
          "Best Practices",
          "** Resource ** - Test Scripts",
          "Trip Reservation Test Script Creation",
          "Trip Reservation Test With Platform Threads",
          "Platform Threads Result Analysis",
          "Virtual Threads Result Analysis",
          "Rerunning Test With More Concurrent User Load",
          "Trip Plan Test With Platform Threads",
          "Trip Plan Test With Virtual Threads",
          "Results Comparison",
          "Summary"
        ],
        "Whats next?": [
          "Migration Guide For Existing Applications",
          "What's Next?",
          "Other Courses",
          "Is Reactive Programming Dead?"
        ]
      },
      "requirements": [
        "Knowledge on Java"
      ],
      "description": "Dive deep into the intricacies of concurrency & Learn how to make your Java applications run smoother and faster using simple and effective concurrency techniques. From the basics to hands-on projects, this course equips you with the skills to revolutionize your approach to programming.\nCourse Highlights:\nUnderstanding Concurrency: Learn about the challenges of traditional threads and discover how Java Virtual Threads provide a simpler and more efficient solution for making your programs scale seamlessly.\nExecutor Service Mastery: Dive into using Executor Service with Virtual Threads. Overcome challenges, control concurrency, and process tasks more efficiently by breaking them down into parallel subtasks.\nCompletable Future Exploration: Explore Completable Future for asynchronous task processing with Virtual Threads. Learn practical methods, handle timeouts, and manage errors in a declarative style.\nPreview of Structured Concurrency: Get a sneak peek into Java's new preview APIs, giving you insights into the future of concurrent programming. Stay ahead of the curve with a simplified understanding of Java's concurrency development.\nPractical Application Development: Apply what you've learned in a hands-on project using Spring Boot Web and Virtual Threads. See firsthand how these concepts integrate seamlessly into real-world application development.\nScalability Testing with JMeter: Test your application's scalability using JMeter. Compare throughput and response time to ensure optimal efficiency under different conditions.\nMigration Made Easy: Conclude the course with a practical migration guide to transition your existing applications to Java Virtual Threads effortlessly. Get ready for a future where your programs effortlessly combine concurrency and scalability.\nUnlock the full potential of Java Virtual Threads and elevate your programming skills. Enroll now to reshape the way you approach scalability and performance in Java applications!",
      "target_audience": [
        "Any Java Developer who likes to learn more about Virtual Threads"
      ]
    },
    {
      "title": "Blockchain Development: XRP Ledger Bootcamp (Stage 1)",
      "url": "https://www.udemy.com/course/the-complete-xrp-ledger-developer-bootcamp-stage-1/",
      "bio": "Master Core XRP Ledger Concepts and Gain Hands-On Experience in Blockchain Development",
      "objectives": [
        "Understand the fundamental principles of blockchain development on the XRP Ledger",
        "Learn about the XRP Ledger's history as well as its bright future",
        "Gain a robust theoretical understanding of the XRP ledger features and core concepts",
        "Build a real project that will give you experience of working with the XRP ledger",
        "Learn all about the XRP ledger infrastructure, including setting up your own node",
        "Master blockchain programming and start your journey to become a blockchain developer."
      ],
      "course_content": {
        "Introduction": [
          "Welcome",
          "What is the XRP ledger?",
          "Prerequisite for Hello World",
          "Hello world! Your last ledger index was: {x}"
        ],
        "About the course": [
          "Introduction",
          "Course goals & structure",
          "Target audience",
          "Your instructor & XRPL Commons",
          "Getting the most from this course",
          "System requirements",
          "Setting up our environment"
        ],
        "Introduction to Blockchain Development": [
          "Introduction",
          "What is a Blockchain",
          "History",
          "How a blockchain works",
          "Use cases",
          "The future of blockchain",
          "Testing your understanding of Blockchains",
          "Summary"
        ],
        "Introduction to the XRP ledger": [
          "Introduction",
          "History of the XRP ledger",
          "Overview of XRP ledger features",
          "Core concepts",
          "Interview with David Schwartz",
          "The XRP ledger community",
          "Summary"
        ],
        "The basics of XRP ledger development": [
          "Introduction",
          "The XRP ledger in action",
          "Account basics",
          "Generating an account",
          "Sending a payment",
          "Deleting an account",
          "Summary"
        ],
        "Course project - Functional wallet using REACT": [
          "Course project tour",
          "Creating the react application",
          "React app configuration",
          "Application structure",
          "Account management",
          "Importing accounts",
          "Generating an account",
          "Managing accounts - wiring it all up",
          "Displaying the balance",
          "Displaying transaction history",
          "Sending XRP",
          "Receiving XRP",
          "Congratulations"
        ],
        "Infrastructure": [
          "Introduction",
          "What is rippled",
          "Preparing to setup rippled",
          "Setting up a rippled stock node",
          "Further configuration",
          "Setting up a validator",
          "Maintenance",
          "Interview with an infrastructure provider",
          "Summary"
        ],
        "Congratulations": [
          "Next steps"
        ]
      },
      "requirements": [
        "Development experience is recommended, but not essential",
        "Some experience of javascript will be helpful",
        "No previous knowledge of Blockchain Development necessary but helpful"
      ],
      "description": "Learn Blockchain Development using the XRP Ledger in this course:\n“The Complete XRP Ledger Developer Bootcamp” (Stage 1).\nI will teach you the fundamentals of how to build on the XRP ledger from the ground up, using a combination of theory and practical coding tutorials to dive deep into the core features you must know in order to build real-world applications on the XRP ledger.\nThis course assumes you have no previous knowledge or experience with the XRP ledger or blockchain development, making it perfect for beginners who are eager to explore the world of blockchain programming and crypto development. You'll learn how the XRP ledger stands out among other blockchains, focusing on its unique consensus algorithm and high transaction speed.\nWe will start with the basics of blockchain technology. Then we will learn about the core features and concepts of the XRP ledger and get into the basics of XRP ledger development, before building a fully functional wallet using react.js. We will end stage 1 with a detailed look at XRP ledger infrastructure, including a step-by-step guide to setting up and running your own node.\nBy the end of this course, you'll not only have a robust theoretical understanding of the XRP ledger but also practical experience of interacting with its many diverse features.\nWhether you're a developer, entrepreneur, or blockchain enthusiast, this course will equip you with the foundational knowledge and skills to confidently build on the XRP ledger.\nEnrol now! and you'll be interacting with the XRP ledger (using code) in less than 15 minutes!",
      "target_audience": [
        "Blockchain Developers who want to learn how to build on the XRP Ledger",
        "Entrepreneurs and enthusiasts interested in learning more about the theory of the XRP ledger",
        "Enthusiasts wishing to learn more about Blockchain programming, specifically the XRP Ledger"
      ]
    },
    {
      "title": "Advanced Embedded Systems Bare-Metal Programming Ground Up™",
      "url": "https://www.udemy.com/course/embedded-systems-advance-bare-metal-programming/",
      "bio": "No libraries : RTC, IWDG, WWDG, DMA-ADC, DMA-I2C, DMA-SPI, DMA-UART, DMA-PWM, Standby, Wakeup",
      "objectives": [
        "Write advanced firmware using only bare-metal embedded-c",
        "Write bare-metal drivers for DMA Memory-to-Memory transfer",
        "Write DMA ADC drivers using bare-metal embedded-c",
        "Write DMA PWM drivers using bare-metal embedded-c",
        "Write DMA UART drivers using bare-metal embedded-c",
        "Write DMA SPI drivers using bare-metal embedded-c",
        "Write DMA I2C drivers using bare-metal embedded-c",
        "Develop proficiency in your embedded development skills and confidently take the next steps",
        "Write Realtime Clock (RTC) drivers using bare-metal embedded-c",
        "Write Watchdog Timer (IWDG and WWDG) drivers using bare-metal embedded-c",
        "Write bare-metal embedded-c drivers for entering Standby mode and Waking up",
        "Use the debugger effectively to analyze and resolve any bugs",
        "Understand and write every single line of code yourself- no Copy/Paste",
        "Build every single line of code from scratch by writing to the microcontroller’s memory space directly.",
        "Analyze the chip documentation"
      ],
      "course_content": {
        "Setting Up": [
          "Downloading CubeIDE",
          "Installing CubeIDE",
          "Getting the required documentation",
          "Getting the required package for bare-metal development",
          "Testing the project setup"
        ],
        "Essentials of Firmware Debugging": [
          "Introduction to Debugging",
          "Getting familiar with the Debug View",
          "Working with the Instrumentation Trace Macrocell (ITM)",
          "Retargetting \"printf()\" and creating Log functions",
          "Debugging with UART - Analyzing the Documentation",
          "Debugging with UART - Writing the UART Driver",
          "Debugging with UART - Testing the UART Driver",
          "Debugging GPIO with Serial Wire Viewer (SWV)"
        ],
        "Developing Bare-Metal Memory-to-Memory Direct Memory Access (DMA) Drivers": [
          "Overview of the Direct Memory Access (DMA) Module",
          "Analyzing the DMA Documentation",
          "Writing the DMA Memory-to-Memory Driver",
          "Implementing the DMA Data Transfer function",
          "Testing the DMA Driver"
        ],
        "Developing Bare-Metal ADC DMA Drivers": [
          "Understanding ADC Independents Modes",
          "Analyzing the ADC Documentation",
          "Writing the ADC DMA Driver (Part I)",
          "Writing the ADC DMA Driver (Part II)"
        ],
        "Developing Bare-Metal ADC Timer Trigger DMA Drivers": [
          "Writing the ADC Timer Triggered Driver",
          "Testing the ADC Timer Triggered Driver"
        ],
        "Developing Bare-Metal UART DMA Drivers": [
          "Overview of the UART Protocol",
          "Listing the Steps",
          "Implementing the UART RX TX Initialization functions",
          "Implementing the DMA Stream RX TX Configuration function (Part I)",
          "Implementing the DMA Stream RX TX Configuration function (Part II)",
          "Implementing the DMA Stream RX TX Configuration function (Part III)",
          "Testing the UART DMA Driver"
        ],
        "Developing Bare-Metal SPI DMA Drivers": [
          "Understanding the SPI Protocol",
          "Analyzing the SPI Documentation",
          "Implementing the SPI DMA Initialization function",
          "Implementing the TX Stream Configuration function",
          "Implementing the RX Stream Configuration function",
          "Implementing the Transfer and Receive functions",
          "Implementing the MPU9250 Mems Device SPI DMA Driver (Part I)",
          "Implementing the MPU9250 Mems Device SPI DMA Driver (Part II)",
          "Implementing the MPU9250 Mems Device SPI DMA Driver (Part III)",
          "Implementing the MPU9250 Mems Device SPI DMA Driver (Part IV)",
          "Testing the MPU9250 Mems Device SPI DMA Driver"
        ],
        "Developing Bare-Metal I2C DMA Drivers": [
          "Understanding the I2C Protocol",
          "Analyzing the I2C Documentation",
          "Implementing the I2C DMA Initialization function (Part I)",
          "Implementing the I2C DMA Initialization function (Part II)",
          "Implementing the I2C DMA Tx Stream Initialization function",
          "Implementing the I2C DMA Rx Stream Initialization function",
          "Implementing the I2C DMA Stream Transfer function",
          "Implementing the I2C DMA Stream Receive function",
          "Implementing the I2C DMA Read function",
          "Implementing the I2C DMA Write function",
          "Implementing the I2C DMA Stream IRQHandlers",
          "Testing the I2C DMA Driver with the MPU9250 Mems Device"
        ],
        "Developing Bare-Metal PWM DMA Drivers": [
          "Understanding STM32 Timers",
          "Analyzing the PWM Documentation",
          "Implementing the PWM Initialization function",
          "Developing the \"set_dutycycle()\" function",
          "Implementing the PWM DMA Initialization function(Part I)",
          "Implementing the PWM DMA Initialization function(Part II)",
          "Testing the PWM DMA Driver"
        ],
        "More on Debugging": [
          "Catching Anomalies with Breakpoints",
          "Catching HardFaults",
          "Debugging Timers using SWV Graph",
          "Measuring the Execution Time of an Algorithm",
          "Dumping Register Information",
          "Determining Execution Time and Place using Profiling"
        ]
      },
      "requirements": [
        "No programming experience needed - I'll teach you everything you need to know.",
        "We shall be using the STM32 IDE which is FREE."
      ],
      "description": "Are you tired of Copying and Pasting code you don't understand?\n\n\nHere’s an overview of what you’re getting in this advanced level course...\nDeveloping bare-metal DMA Drivers:\nThis course completely demystifies the Direct Memory Access (DMA) peripheral. Over 50% of the course is spent on this topic, so that by the end of this course you would have mastered the DMA peripheral.\n\n\nWe shall thoroughly look at developing the following bare-metal DMA drivers.\n- Bare-Metal DMA Memory-to-Memory Transfer Driver\n- Bare-Metal ADC DMA Regular Conversion Driver\n- Bare-Metal ADC DMA Timer Triggered Conversion Driver\n- Bare-Metal UART RX/TX DMA Driver\n- Bare-Metal SPI RX/TX DMA Driver\n- Bare-Metal I2C  RX/TX DMA Driver\n- Bare-Metal PWM DMA Driver\n\n\nDeveloping bare-metal RTC Drivers:\nThe Realtime Clock (RTC) peripheral is another advanced peripheral demystified in this course. We shall study the theory of realtime clocks, take a look at the capabilies of the realtime clock on our microcontroller and then develop the following drivers for the realtime clock.\n\n\n- Bare-Metal RTC Calendar Driver\n- Bare-Metal RTC Alarm Driver\n- Bare-Metal RTC Timestamp Driver\n- Bare-Metal RTC Tamper Detection Driver\n\n\nDeveloping bare-metal Watchdog Timer Drivers:\nWatchdog Timers are an essential component of any robust embedded device. In my opinion, no embedded device should be released onto the market without the implementation of an Independent Watchdog Timer (IWDG). You will understand why I hold this opinion in the course.\nIn this course we shall develop the following Watchdog Timer drivers:\n- Bare-Metal Independent Watchdog (IWDG) Timer Driver\n- Bare-Metal Windowed Watchdog (WWDG) Timer Driver\n\n\nWorking with Standby Mode and Wakeup:\nKnowing how to put your embedded devics into Low-power mode and coming out of it will greatly improve your ability to developer power efficient embedded solutions. This course will teach you how to put your device into Standby mode and come out of it using different methods.\n\n\nSpecifically, we shall develop the following drivers:\n\n\n- Bare-Metal Standby Mode and Wakeup Pin  Driver\n- Bare-Metal Standby Mode and RTC Wakeup Timer Driver\n\n\nThe Art of Debugging :\nKnowing how to properly debug your firmware will save you lots of time and money, and may even prolong your life because of the level of frustration and stress you will avoid.\n\n\nIn this course you shall grasp the theoretical aspects of debugging, understand the various types of debugging such functional debugging and performance debugging, and learn the various tools and methods used in different scenarios.\nSome of the techniques we you will master include:\n- Methods of identifying the cause of HardFault\n- Catching anomalous results\n- Measuring execution time of an algorithm using a Timer\n- Measuring execution time of an algorithm using a Logic Analyzer\n- Working with arrays dumps\n- Debugging techniques for Timers\n\nWith a programming based approach, this course is designed to give you a solid foundation in bare-metal firmware development for  ARM-based microcontrollers . The goal of this course is to teach you how to navigate the microcontroller reference manual and datasheet to extract the right  information to professionally  build peripheral drivers and firmware. To achieve this goal, no libraries are used in this course, purely bare-metal embedded-c and register manipulations.\nStill keeping it simple, this course comes in different ARM Cortex-M development boards  so that students can put the techniques to practice using an ARM Cortex-M development board of their choice. This version of the course uses the STMicroelectronics  STM32F4-NUCLEO which has an ARM Cortex-M4 microcontoller.\n\n\nThis is the Advanced level course for the world famous Embedded Systems Bare-Metal Programming Ground Up™ (STM32). You have to take the Embedded Systems Bare-Metal Programming Ground Up™ (STM32) before taking this course\n\n\nSo with that understood, let me tell you…\n\nExactly What You’re Getting\nThis is dramatically different from any course you have ever taken because it’s more of a professional hands-on “field guide” to stm32 bare metal firmware development.\nThe reason why is because there’s no fluff or filler. It immediately gets down to the actual subject, showing you exactly what to do, how to do it, and why.\nPlus, it’s easy.\nAnd you’ll immediately “get” the entire mythology I personally use to build firmware for consumer devices in my professional life.\nIt's About MORE Than Just Getting the Code to Work\nSee, this course will change your professional life forever. Here is what one student had to say about the Embedded Systems Bare-Metal Programming Ground Up™ (STM32)  course :\n\n\n\"I would suggest this course for all the beginners. The concepts have been covered in the right sequence.And also the best part of this lecture series is getting to know how to explore the reference manual and datasheets.\"\nHere is what another student had to say :\n\"Extremly helpful to get to understand the uC programming deeper! For me it is much easier from now to develop code because I undertstand the base behind, so I'm more confident and more experienced to develop and debug the code. Really, this course is very useful to link the hardware knowledge with the coding skills. This fills the gap between them. Thanks for it! :)\"\nA third student :\n\"I am a professional semiconductor chipset application engineer with 30 years in global embedded product design in system applications. I can say this teacher is very straight forward by sharing his many years knowledge to the students with his true heart. Yes. I love his teaching pace and style!\"\n\n\n\n\nTaken by 8000+ Students with 1000+ Reviews\nIf at least one of the following applies to you then keep reading if not then simply skip this course:\n\n\" Escape From \"\nCopying/Pasting code you don’t understand\nUsing third party libraries and header files like HAL, LL and StdPeriph\nExperiencing bugs you don’t understand\nBeing afraid of technical documentations like the reference manual and datasheet of the chip\nImposter syndrome\n\" Arrive At \"\nBuilding every single line of code from scratch by writing to the microcontroller’s memory space directly.\nUsing No third party libraries or header files\nUnderstanding and writing every single line of code yourself- no Copy/Paste\nUsing the debugger effectively to analyze and resolve any bugs\nDeveloping proficiency in your embedded development skills and confidently take the next steps\n\n\nSo like I said, there’s more than just getting each piece of code to work.\nHere’s an overview of what you’re getting in this advanced level course...\n\n\n\n\nDeveloping bare-metal DMA Drivers:\nThis course completely demystifies the Direct Memory Access (DMA) peripheral. Over 50% of the course is spent on this topic, so that by the end of this course you would have mastered the DMA peripheral.\n\n\nWe shall thoroughly look at developing the following bare-metal DMA drivers.\n- Bare-Metal DMA Memory-to-Memory Transfer Driver\n- Bare-Metal ADC DMA Regular Conversion Driver\n- Bare-Metal ADC DMA Timer Triggered Conversion Driver\n- Bare-Metal UART RX/TX DMA Driver\n- Bare-Metal SPI RX/TX DMA Driver\n- Bare-Metal I2C  RX/TX DMA Driver\n- Bare-Metal PWM DMA Driver\n\n\nDeveloping bare-metal RTC Drivers:\nThe Realtime Clock (RTC) peripheral is another advanced peripheral demystified in this course. We shall study the theory of realtime clocks, take a look at the capabilies of the realtime clock on our microcontroller and then develop the following drivers for the realtime clock.\n\n\n- Bare-Metal RTC Calendar Driver\n- Bare-Metal RTC Alarm Driver\n- Bare-Metal RTC Timestamp Driver\n- Bare-Metal RTC Tamper Detection Driver\n\n\nDeveloping bare-metal Watchdog Timer Drivers:\nWatchdog Timers are an essential component of any robust embedded device. In my opinion, no embedded device should be released onto the market without the implementation of an Independent Watchdog Timer (IWDG). You will understand why I hold this opinion in the course.\nIn this course we shall develop the following Watchdog Timer drivers:\n- Bare-Metal Independent Watchdog (IWDG) Timer Driver\n- Bare-Metal Windowed Watchdog (WWDG) Timer Driver\n\n\nWorking with Standby Mode and Wakeup:\nKnowing how to put your embedded devices into Low-power mode and coming out of it will greatly improve your ability to developer power efficient embedded solutions. This course will teach you how to put your device into Standby mode and come out of it using different methods.\n\n\nSpecifically, we shall develop the following drivers:\n\n\n- Bare-Metal Standby Mode and Wakeup Pin  Driver\n- Bare-Metal Standby Mode and RTC Wakeup Timer Driver\n\n\n\n\nBut it gets better because you  will also master....\n\n\n\n\nThe Art of Debugging :\nKnowing how to properly debug your firmware will save you lots of time and money, and may even prolong your life because of the level of frustration and stress you will avoid.\n\n\nIn this course you shall grasp the theoretical aspects of debugging, understand the various types of debugging such functional debugging and performance debugging, and learn the various tools and methods used in different scenarios.\nSome of the techniques we you will master include:\n- Methods of identifying the cause of HardFault\n- Catching anomalous results\n- Measuring execution time of an algorithm using a Timer\n- Measuring execution time of an algorithm using a Logic Analyzer\n- Working with arrays dumps\n- Debugging techniques for Timers\nSpecially Designed For People Who Hate Copy/Paste\nListen. If you don’t like “Copy/Paste” you’re not alone. I can’t stand it either. I’d literally rather have a piece of code that I wrote from scratch that doesn’t work than someone else’s working code I copied and pasted.\nAnd that’s why I’ve spent months designing and recording this course in which I show you how to locate every single register used and the meaning of every hexadecimal value written into the register.\n\n\nAlso it comes with a money back guarantee so you have nothing to lose.",
      "target_audience": [
        "If you are an absolute beginner to embedded systems, then take this course.",
        "If you are an experienced embedded developer and want to learn how to professionally develop embedded applications for ARM processors, then take this course."
      ]
    },
    {
      "title": "Apache Kafka for Event-Driven Spring Boot Microservices",
      "url": "https://www.udemy.com/course/apache-kafka-for-spring-boot-microservices/",
      "bio": "Learn to build and test event-driven Spring Boot Microservices using Apache Kafka.",
      "objectives": [
        "Apache Kafka for Microservices",
        "Create Event-Driven Microservices",
        "Work with Kafka CLI",
        "Work with Kafka Consumers in Java",
        "Run Multiple Kafka Servers in a cluster",
        "Work with Kafka Producers in Java",
        "Handle and recover from errors",
        "Perform Integration Testing of Kafka Producer and Consumer",
        "Implement Saga design pattern",
        "Configure Kafka Producer to be Idempotent",
        "Learn to work with Transactions in Apache Kafka",
        "Configure Kafka Consumer to be Idempotent"
      ],
      "course_content": {
        "Introduction to Apache Kafka": [
          "Introduction",
          "Welcome from the Instructor",
          "What is Microservice?",
          "Microservice vs Monolithic application",
          "Microservices Communication",
          "Would you like an interview question? Topic: What is a Microservice?",
          "Event-Driven Architecture with Apache Kafka",
          "Apache Kafka for Microservices",
          "Apache Kafka for Microservices Quiz",
          "Messages and Events in Apache Kafka",
          "Kafka Topic and Partitions",
          "Ordering of Events in Apache Kafka",
          "Quiz: Kafka Topics, Partitions and Messages",
          "Interview and overall review of the basics of Apache Kafka",
          "Java Development Environment & IntelliJ IDEA Ultimate Edition Licence"
        ],
        "Apache Kafka Broker(s)": [
          "What is Apache Kafka broker?",
          "Apache Kafka broker: Leader and Follower roles. Leadership balance.",
          "Quiz: Kafka Broker",
          "Download Apache Kafka(MacOS)",
          "Run Apache Kafka on Windows or in Docker",
          "Start single Apache Kafka broker with KRaft",
          "Multiple Kafka broker: Configuration Files",
          "Multiple Kafka broker: Storage folders",
          "Starting multiple Kafka broker with KRaft",
          "Stopping Apache Kafka brokers",
          "Would you like an interview question? Topic: Kafka Brokers"
        ],
        "Kafka CLI: Topics": [
          "Introduction to Kafka Topic CLI",
          "Creating a new Kafka topic",
          "List and describe Kafka topics",
          "Deleting Kafka Topic",
          "Apache Kafka Topic: Summary PDF document."
        ],
        "Kafka CLI: Producers": [
          "Introduction to Kafka Producer CLI",
          "Producing Kafka Message without a Key",
          "Sending Kafka Message as a Key:Value Pair",
          "Apache Kafka CLI: Producer. Summary PDF document"
        ],
        "Kafka CLI: Consumers": [
          "Introduction to Kafka Consumer CLI",
          "Consuming messages from Kafka topic from the beginning",
          "Consuming new Kafka messages only",
          "Consuming Key:Value pair messages from Kafka topic",
          "Consuming Kafka messages in order",
          "Apache Kafka CLI: Consumer. Summary PDF document"
        ],
        "Kafka Producer - Spring Boot Microservice": [
          "Source code",
          "Introduction to Kafka Producer",
          "Kafka Producer - Introduction to synchronous communication style",
          "Kafka Producer - A use case for asynchronous communication style",
          "Quiz: Kafka Producer.",
          "Creating a new Spring Boot project",
          "Kafka Producer configuration properties",
          "Creating Kafka Topic",
          "Run Microservice to create a new Kafka topic",
          "Creating Rest Controller",
          "Creating a Service class",
          "Creating an Event class",
          "Kafka Producer: Send Message Asynchronously",
          "Kafka Asynchronous Send. Trying how it works.",
          "Kafka Producer: Send Message Synchronously",
          "Kafka Producer: Handle Exception in Rest Controller",
          "Kafka Producer: Logging Record Metadata Information",
          "Kafka Synchronous Send. Trying how it works."
        ],
        "Kafka Producer: Acknowledgements & Retries": [
          "Source code",
          "Kafka Producer Acknowledgement: Introduction",
          "Kafka Producer Retries: Introduction",
          "Configure Producer Acknowledgments in Spring Boot Microservice",
          "The min.insync.replicas configuration",
          "Trying how the min.insync.replicas works",
          "Kafka Producer Retries",
          "Trying how Kafka Producer Retries work",
          "Kafka Producer Delivery & Request Timeout",
          "Trying how Kafka Producer Delivery & Request Timeout works",
          "Quiz: Kafka Producer Acknowledgements and Retries",
          "Kafka Producer Spring Bean Configuration"
        ],
        "Idempotent Producer in Kafka": [
          "Source code",
          "Introduction to Idempotent Kafka Producer",
          "Enable Kafka Producer Idempotence in application.properties",
          "Enable Kafka Producer Idempotence in Spring Bean"
        ],
        "Kafka Consumer - Spring Boot Microservice": [
          "Source code",
          "Introduction to Kafka Consumer",
          "Creating a new Spring Boot project",
          "Kafka Consumer Configuration Properties",
          "Kafka Consumer with @KafkaEventListener and @KafkaHandler annotations",
          "Creating the \"core\" module",
          "Adding \"core\" project as a dependency",
          "@KafkaHandler: Trying how it works",
          "Kafka Consumer Spring Bean Configuration",
          "Kafka Listener Container Factory",
          "Trying if Kafka Consumer Bean Configuration works",
          "Quiz: Apache Kafka Consumer."
        ],
        "Kafka Consumer - Handle Deserializer Errors": [
          "Source code",
          "Introduction to Error Handling in Kafka Consumer",
          "Causing the deserialization problem",
          "Kafka Consumer ErrorHandlingDeserializer",
          "Trying how ErrorHandlingDeserializer works"
        ]
      },
      "requirements": [
        "Basic knowledge of Java",
        "Basic knowledge of Spring Boot"
      ],
      "description": "In this video course, you will learn how to use Apache Kafka to build Event-Driven Spring Boot Microservices.\nThis course is designed for beginners and will start from the basics of Microservices and Apache Kafka.\nYou will learn:\n- What is Apache Kafka, and how to work with it using Command Line Interface(CLI),\nYou will learn how to use Kafka CLI to :\n- Start multiple Apache Kafka servers in a cluster,\n- Work with Kafka Topics,\n- Work with Kafka Producer to produce messages,\n- Work with Kafka Consumer to consume messages.\nYou will learn how to create a basic Spring Boot Microservice that acts as a Kafka Producer. While working with this Microservice you will learn:\n- How to send Kafka messages synchronously,\n- How to send Kafka messages asynchronously,\n- How to work with Acknowledgements, Retries, Delivery and Request timeouts.\nYou will also learn how to create Kafka Consumer Spring Boot Microservice. While creating Consumer Microservice you will learn to:\n- Consume messages from Kafka topic,\n- Handle and recover from errors,\n- Work with Kafka Dead Letter Topic(DLT),\n- Configure multiple consumer microservices to work as a group(Consumer Groups).\n- Write Integration tests for Kafka Consumer and Kafka Producer.\n- Learn how to implement the Saga design pattern.\nAll from the very beginning, to help you learn how to create Event-Driven Microservices with Apache Kafka and Spring Boot.",
      "target_audience": [
        "Java developers interested to learn about Apache Kafka",
        "Java developers interested to learn how to create event-driven Microservices with Apache Kafka"
      ]
    },
    {
      "title": "Easy to Advanced Data Structures",
      "url": "https://www.udemy.com/course/introduction-to-data-structures/",
      "bio": "A complete guide to learning everything there is to know about data structures",
      "objectives": [
        "Mature understanding of data structures",
        "Algorithms associated with data structures",
        "Dynamic arrays",
        "Singly and doubly linked list",
        "Queues & Stacks",
        "Binary Trees and Binary search trees",
        "Heaps & Priority queues",
        "Union find/Disjoint set",
        "Hash table/Associative array",
        "Fenwick tree/Binary indexed tree"
      ],
      "course_content": {
        "Introduction": [
          "Abstract data types Introduction",
          "Understanding time/space complexity",
          "QUIZ: time complexity"
        ],
        "Static and dynamic arrays": [
          "Static and dynamic arrays",
          "QUIZ: dynamic arrays",
          "Dynamic array source code"
        ],
        "Linked lists": [
          "Linked list introduction",
          "QUIZ: linked lists",
          "Doubly linked list source code"
        ],
        "Stacks": [
          "Understanding stacks",
          "Stack implementation details",
          "QUIZ: stacks",
          "Stack source code"
        ],
        "Queues": [
          "Understanding queues",
          "QUIZ: queues I",
          "Breadth first search and queue implementation",
          "QUIZ: queues II",
          "Queue source code"
        ],
        "Priority queues": [
          "What is a priority queue?",
          "Min heaps and Max heaps",
          "Priority queue inserting elements",
          "QUIZ: priority queue",
          "Priority queue removing elements",
          "Priority queue source code"
        ],
        "Union find/Disjoint set": [
          "Union find introduction",
          "Kruskal's Algorithm",
          "Union and find operations",
          "Path compression",
          "Union find source code",
          "QUIZ: union find"
        ],
        "Binary search trees": [
          "Introduction to binary trees",
          "Binary search tree insertions",
          "Binary search tree removals",
          "Binary tree traversals",
          "QUIZ: tree traversals",
          "Binary search tree source code"
        ],
        "Hash tables": [
          "Hash table hash functions",
          "Hash table separate chaining",
          "Hash table separate chaining source code",
          "QUIZ: hash functions and separate chaining",
          "Hash table open addressing",
          "Hash table linear probing",
          "Hash table quadratic probing",
          "Hash table double hashing",
          "QUIZ: open addressing",
          "Hash table removing key-value pairs",
          "Hash table open addressing source code"
        ],
        "Fenwick tree/Binary indexed tree": [
          "Fenwick tree range queries",
          "Fenwick tree point updates",
          "Fenwick tree construction",
          "Fenwick tree source code",
          "QUIZ: fenwick tree"
        ]
      },
      "requirements": [
        "Basic computer science knowledge"
      ],
      "description": "Data structures are amongst the most fundamental ingredients in the recipe for creating efficient algorithms and good software design. Knowledge of how to create and design good data structures is an essential skill required in becoming an exemplary programmer. This course will teach you how to master the fundamental ideas surrounding data structures.\nLearn and master the most common data structures in this comprehensive course:\nStatic and dynamic arrays\nSingly and doubly linked lists\nStacks\nQueues\nHeaps/Priority Queues\nBinary Trees/Binary Search Trees\nUnion find/Disjoint Set\nHash tables\nFenwick trees\nAVL trees\nBinary Indexed trees\nSparse tables\nCourse contents\nThis course provides you with high quality animated videos explaining a multitude of data structures and how they are represented visually. You will learn how to code various data structures together with simple to follow step-by-step instructions. Every data structure presented will be accompanied by some working source code (in Java) to solidify your understanding of that particular data structure. I will also be posting various coding exercises and multiple choice questions to ensure that you get some hands on experience.",
      "target_audience": [
        "Individuals hungry for new knowledge",
        "Students who want a fundamental understanding of data structures"
      ]
    },
    {
      "title": "Competitive Programming Essentials, Master Algorithms",
      "url": "https://www.udemy.com/course/competitive-programming-algorithms-coding-minutes/",
      "bio": "Master competitive coding techniques - maths, number theory, dynamic programming, advanced data structures & algorithms",
      "objectives": [
        "Understand & implement important techniques in Competitive Programming",
        "Learn advanced techniques to optimise naive solutions",
        "Ace code-thons and online coding competitons on Codeforces, HackerRank",
        "Get ready for ACM-ICPC, Google Kickstart, CodeJam & more"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Course Structure",
          "Exercise Solutions (C++/Java)",
          "Doubt Support",
          "IDE Environment Setup",
          "FAQ's"
        ],
        "Setting Up Sublime [Optional]": [
          "Sublime Setup",
          "Adding Master Header File",
          "Escaping Online Judges",
          "Common Code Snippets",
          "Using Macros",
          "Example Code Explained"
        ],
        "Time / Space Complexity Analysis": [
          "Space Time Complexity Introduction",
          "Experimental Analysis",
          "Big O Notation",
          "Nested Loops",
          "Note : Edit in Nested Loops - II",
          "Nested Loops - II",
          "Analysis of Bubble Sort",
          "Analayis of BInary Search",
          "Analysis of Merge Sort",
          "Avoiding TLE Errors",
          "Complexities for Worst Case AC",
          "Time/Space Complexity Quiz"
        ],
        "Data Structures & STL Containers": [
          "Data Structures & STL Containers Revisited",
          "Arrays in C++",
          "Array STL",
          "Vector STL",
          "Deque STL",
          "Stack STL",
          "Queue STL",
          "Priority Queue STL",
          "[Webinar] Hashing STL",
          "[Webinar] More on STL",
          "First Unique Character in a String",
          "Kth Largest Element",
          "One Integer",
          "Maximum Score From Removing Stones",
          "Find K Closest Elements",
          "Distinct Candies",
          "Bulls and Cows",
          "Smallest Range Covering Elements from K Lists"
        ],
        "Bitmanipulation Basics": [
          "Bitwise Operators",
          "Left Shift & Right Shift",
          "Odd Even",
          "Get ith Bit",
          "Clear ith Bit",
          "Set ith Bit",
          "Update ith Bit",
          "Clear Last i Bits",
          "Clear Range of Bits",
          "Replace Bits",
          "Two Power",
          "Power of Four",
          "Decode XORed Array",
          "Count Bits",
          "Count Bits Hack",
          "Make it Binary",
          "Sort Integers by The Number of 1 Bits",
          "Longest Consecutive Run of 1s in Binary",
          "Hamming Distance"
        ],
        "Bitmanipulation Problems": [
          "Unique Number - I",
          "Unique Number - I Code",
          "Unique Number - II",
          "Unique Number - II Code",
          "Unique Number - III",
          "Unique Number - III Code",
          "Finding Subsequences",
          "Finding Subsets Code",
          "Maximum Score",
          "Triples with Bitwise AND Equal To Zero",
          "Bitwise AND of Range of Numbers",
          "Total Hamming Distance",
          "Travelling Salesman Problem",
          "Travelling Salesman Intution",
          "Travelling Salesman Code",
          "Travelling Salesman - DP Optimisation",
          "Decode Permutation",
          "Shortest Superstring"
        ],
        "Big Integers": [
          "Welcome!",
          "Introduction to Big Integers",
          "Big Addition Concept",
          "Big Addition Code",
          "Array & Integer Multiplication",
          "Large Factorials",
          "Java Big Integer Class",
          "BigInteger Example",
          "Big Integers in Python",
          "Python's Handling of Big Integers",
          "Big Integer Challenge - Julka",
          "Big Integer Challenge Solution"
        ],
        "Linear Recurrences & Matrix Exponentiation": [
          "Binary Exponentiation",
          "POW",
          "Modular Binary Exponentiation",
          "Magic of the Locker",
          "Fast Mutiplication",
          "Strange Function",
          "Matrix Exponentiation Introduction",
          "Matrix Exponentiation Code",
          "Fibosum (spoj)",
          "Fibosum(second approach)",
          "Fibonacci Sum"
        ],
        "Pigeonhole Principle": [
          "Pigeonhole Principle",
          "Problem DIVSUB",
          "Applying Pigeonhole Principle",
          "Decreasing Sequence",
          "Gray Similar Code",
          "Holiday",
          "Holiday Code",
          "Subarray Sum Divisible by N",
          "Bob and Impossible Calculation"
        ],
        "Mathematical Expectation": [
          "Expectation",
          "Linearity of Expectation",
          "Problem - Linearity of Expectation",
          "Expected Throws - One Head",
          "Expected Throws - Two Consecutive Heads",
          "Expected Throws - N Consecutive Heads",
          "Bernaulli's Trial",
          "Choose Number",
          "Bernoulli's Trial",
          "Coupon Collector",
          "Expectation Quiz",
          "Bob and Palindromes",
          "Second Player"
        ]
      },
      "requirements": [
        "Comfortable with at-least one programming language",
        "Understanding & ability to code using data structures",
        "Basic problem solving experience"
      ],
      "description": "Equip yourself with essential programming techniques required for ACM-ICPC, Google CodeJam, Kickstart, Facebook HackerCup & more. Welcome to Competitive Programming Essentials - the ultimate specialisation on Algorithms for Competitive Coders!\n\nThe online Competitive Programming Essentials by Coding Minutes is a highly exhaustive & rigorous course on Competitive Programming. The 50+ hours course covers the breadth & depth of algorithmic programming starting from a recap of common data structures, and diving deep into essential and advanced algorithms.\n\nThe course structure is well-researched by instructors who not only Competitive Coders but have worked with companies like Google & Scaler. This course will help you to get a solid grip of fundamental concepts & comes with practice questions so that you sail through online coding challenges and code-athons with ease. The course is divided into 10 modules and 50 sections covering topics like Mathematics, Number Theory, Bitmasking, Inclusion-Exclusion, Meet in the Middle Techniques, Segment Trees, Fenwick Trees, Square Root Decomposition, Graph Algorithms, Shortest Paths, Game Theory, Pattern Matching, Binary Search, Greedy Techniques, Dynamic Programming and even more.\nThe problem setters of the course are Siddharth Singhal and Rajdeep Singh. Both are upcoming software developers at Microsoft and Razorpay respectively. They both exhibit excellent knowledge of Data Structures and Algorithms and are avid competitive programmers.\n\nMany top companies like Google, Facebook, Amazon, Directi, CodeNation, Goldman Sachs etc encourage Competitive Programming and conduct coding competitions to hire smart people who can solve problems.\n\n\nCourse Highlights\nInstructors from Google & Scaler Academy\n50+ hours of high quality & structured content\nIn-depth coverage of all topics\nExhaustive Course Curriculum\nCode Evaluation on Coding Exercises\nLifetime Access\nComplimentary TA Doubt Support",
      "target_audience": [
        "Intermediate-Advanced Programmers who want to improve problem solving",
        "University or college students who want to dive deep into algorithms",
        "Coding enthusiasts who want to sharpen problem solving skills",
        "Students preparing for ACM-ICPC and other online competitions"
      ]
    },
    {
      "title": "Oil & Gas Process Simulation/ Modeling Using Aspen HYSYS",
      "url": "https://www.udemy.com/course/oil-gas-process-simulation-modeling-using-aspen-hysys/",
      "bio": "Learn HYSYS from Scratch to be an Expert",
      "objectives": [
        "Process Simulation using Aspen HYSYS (compatible with V.8 to V.11)",
        "Efficient use of different HYSYS functions to build steady state process simulations",
        "Oil & Gas Processing Techniques"
      ],
      "course_content": {
        "Introduction": [
          "Instructor Introduction",
          "Introduction to HYSYS"
        ],
        "Simple Example (how to use HYSYS)": [
          "Example (Part 1)",
          "Example (Part 2)",
          "Calculate Dew Point"
        ],
        "Propane Refrigeration Loop": [
          "Build a Refrigeration Loop",
          "Results Discussion and Spreadsheets"
        ],
        "Refrigerated Gas Plant": [
          "Build a Refrigerated Gas Plant",
          "Build Heat exchanger and use Adjust function",
          "Quiz 2"
        ],
        "Oil Characterization": [
          "Oil Characterization"
        ],
        "NGL Fractionation": [
          "Build a De-Methanizer",
          "Build a De-Ethanizer",
          "Build a De-Propanizer"
        ],
        "Optimization Through HYSYS": [
          "Build the Model",
          "How to use HYSYS Optimizer"
        ],
        "Gas Pipelines Gather System": [
          "Build Pipeline Gather Model",
          "Solve the model and results Discussion"
        ],
        "Pre-Heating Train": [
          "Build the model (Part 1)",
          "Build the model (Part 2)",
          "Use Balance and Adjust Functions"
        ],
        "Atmospheric Distillation": [
          "Build the Atmospheric Distillation Train",
          "Simulate Side operations to enhance products quality"
        ]
      },
      "requirements": [
        "Background on Oil & Gas Industry"
      ],
      "description": "If you know nothing about HYSYS or know a little background about it, this will be the right place to start together to be an expert. We will go through many cases and will do examples together. Many units will be designed and analyzed according to the course content you see. Ready to be an expert?\n\nPart of students' feedback:\n\n* The course is easy to learn and covers all of the topics. The instructor is so knowledgeable and has a fortune of practical experience. I do recommend this course for the engineers and for whoever needs HYSYS in their work.\n* Great course with valuable information and excellent explanation , I recommend it so much It helps me a lot in software skills . Thanks Udemy for this course.\n*I've been a heavy user of Hysys for certain projects during my career in the oil and gas industry, but it's been a while since I've had to build a plant from scratch and make use of certain features. I think Hysys has so many features there's always something new to learn. I bought this course as a refresher and found it very useful. It reassured me that I haven't forgotten everything... and I learned to use a few features that were new to me, plus some great little keyboard shortcuts which are always welcome. I have an old habit of using x & y to untangle my flowsheets (reflects selected icon in x & y plane). I'd highly recommend this course to anyone in a similar position to me. I liked the hands on presentation style and the avoidance of using any slides. The resources were well organised and easy to follow.\n\n*The instructor is knowledgeable and the course seems to cover all HYSYS-related topics.",
      "target_audience": [
        "Petroleum engineers/ students, chemicals engineers/ students, operations engineers, process designers"
      ]
    },
    {
      "title": "The Complete Rust Programming Course",
      "url": "https://www.udemy.com/course/rust-programming-the-complete-guide/",
      "bio": "The BIGGEST Rust course online! Master Rust in 2024 with challenges, coding practices and more!",
      "objectives": [
        "Fundamentals of programming including: functions, structs, enums, pattern matching, iterators, closures, smart pointers, concurrency, and more",
        "Learn memory management and understand ownership, references, borrowing, and how Rust makes your code safe",
        "Build small applications to be able to piece together concepts",
        "Learn how to test your code"
      ],
      "course_content": {
        "Installing Rust": [
          "Welcome to the Course!",
          "Course Structure",
          "Installation Update",
          "Windows 10 Installation",
          "Linux and MacOS Installation",
          "*Read Experienced Programmers*"
        ],
        "The Basics": [
          "About This Section",
          "Quick Note",
          "Hello, World!",
          "More about Visual Studio Code",
          "Variables and Mutability",
          "Scalar Data Types",
          "Tuples",
          "Arrays",
          "Vectors",
          "Slices",
          "Strings and &str",
          "String Literals",
          "Functions",
          "Control Flow",
          "Wrap Up",
          "Section 2 Quiz",
          "Section 2 Assignment",
          "Section 2 Assignment - Solution"
        ],
        "Rust Principles": [
          "About this Section",
          "Ownership",
          "Move",
          "Clone",
          "Copy",
          "More Moves",
          "References and Borrowing",
          "Section 3 Quiz",
          "Section 3 Assignment",
          "Section 3 Assignment - Solution"
        ],
        "Structs and Lifetimes": [
          "About this Section",
          "Structs",
          "Methods",
          "Lifetimes",
          "Lifetimes in Structs",
          "Static Lifetime",
          "Section 4 Quiz",
          "Section 4 Assignment",
          "Section 4 Assignment - Solution"
        ],
        "Enums and Pattern Matching": [
          "About this Section",
          "Enums",
          "Option",
          "Match",
          "If Let",
          "More Matches",
          "Section 5 Quiz",
          "Section 5 Assignment",
          "Section 5 Assignment - Solution"
        ],
        "Traits and Generics": [
          "About this Section",
          "Generics",
          "Traits",
          "Traits as Parameters",
          "Drop",
          "Clone",
          "Copy",
          "From and Into",
          "Operator Overloading",
          "Section 6 Quiz",
          "Section 6 Assignment",
          "Section 6 Assignment - Solution"
        ],
        "Cargo, Crates, and Modules": [
          "Cargo, Crates, and Packages",
          "Modules"
        ],
        "Common Collections": [
          "About this Section",
          "Vectors",
          "Binary Heap",
          "Maps",
          "Sets"
        ],
        "Error Handing": [
          "About this Section",
          "Panic!",
          "Result",
          "Catching Errors",
          "Error Propagation"
        ],
        "Testing": [
          "About this Section",
          "Test Setup",
          "Assertations"
        ]
      },
      "requirements": [
        "No programming experience is required. Everything you need to know will be taught!"
      ],
      "description": "Welcome to the biggest and most comprehensive Rust programming language course on Udemy!\nWith 17.5 hours of content already, this hands-on practical course is frequently updated to make sure you master all the skills you need to become a Rust expert in the quickest, clearest manner possible.\n\n\nStuffed full with practical challenges and exercises, the first half of the course introduces you to the basics of Rust and getting you comfortable and confident with Rust. The second half of the course focuses on data structures and algorithms, looking at which data structures you can use, as well as how to use them! You'll also learn to analyse algorithms for space and time resource consumption... and a lot more!\n\n\nWhy learn Rust?\nRust is the most loved programming language by developers over the past few years according to numerous developer surveys. The Rust programming language is a highly sought after skill and is also one of the best paying skills in the industry.\nIn the US, Rust developers earn an average of 140k - 250k USD per annum (2022).\nWhat do YOU want to do with Rust?! Developers can (and do!) use Rust to build game engines, file systems, websites and tools, operating systems, browser components, and a whole lot more.\nRust does not sacrifice speed for memory management like many languages do, but Rust ensures memory safety unlike languages like C/C++. Rust's compiler is going to handle a lot of the checking for you to ensure there are no undefined behaviors, dangling pointers, double-frees, etc.\n\n\nWhy THIS course?\nThis is a fast paced course that is designed to give you everything you need to learn in a clear, but very concise manner. There is no fluff involved. I want to give you the skills you need as quickly as possible to allow you to immediately begin developing high quality software using Rust.\nAs well as practical projects, nearly every section of the course has a dedicated student assignment to complete! Each assignments tests your new skills and helps give you the confidence to tackle your own projects going forward!\nIn this course I will cover:\nCommon programming concepts (fundamental types, functions, control flow)\nOwnership and moves\nReferences\nStructs\nEnums and Patterns\nError Handling\nCrates and Modules\nTraits and Generics\nIterators\nCollections\nConcurrency\nWebassembly\nAnd much, much more!\nBy the end of this course you will have started at the basics of programming and journeyed all the way to becoming an expert in Rust!\nWhat are you waiting for? Dive in to Rust today!",
      "target_audience": [
        "Any developer looking to gain knowledge in one of the most loved and sought after languages",
        "Someone who wants fast and safe code",
        "Systems programmers, software engineers, back-end developers, and more."
      ]
    },
    {
      "title": "Hacking the Bootcamp",
      "url": "https://www.udemy.com/course/hacking-the-bootcamp/",
      "bio": "Prepare for success in your journey to become a software engineer.",
      "objectives": [
        "Identify the best practices to ensure your success before and during a bootcamp",
        "Explain the common mistakes and how to avoid them",
        "Design a plan for how to stay organized and maintain hight rate of learning during your immersive training experience.",
        "List what skills employers are looking for you to gain during the learning phase."
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "What to expect": [
          "Karate Kid",
          "Traditional classroom vs bootcamp",
          "Its like the karate kid",
          "How to be successful in the bootcamp and land a tech job",
          "The 3 things employers are looking for",
          "The most common mistakes students make",
          "What to do when you get stuck"
        ],
        "What you can learn from those that came before you": [
          "What it means to do the work",
          "Use this tool to easily track your time and effort",
          "Get some accountability partners",
          "Rapid Learning: Tim Ferriss Experiment Rapid Language Learning",
          "A lesson from learning languages with Tim Ferris",
          "What you'll encounter in a bootcamp (it's like riding a bike)",
          "How to use Google to be successful"
        ],
        "Working as a team": [
          "Code challenges and pair programming",
          "The most important ritual for engineer teams daily stand-ups",
          "How all hands meetings work and how to contribute",
          "The concept of mob programming"
        ],
        "Conclusion": [
          "Mac vs Windows in an immersive coding bootcamp experience",
          "Why you should pay attention to the organization’s core values",
          "Where should you be at the end of the program",
          "The name of the game as an engineer getting stuck and unstuck"
        ]
      },
      "requirements": [
        "No prior programming experience is needed to take this course. You will learn everything you need to be successful learning to code in less than 6 months."
      ],
      "description": "Many have tried, and failed. You can separate yourself from the pack and be prepared with the skills, tactics, and techniques of the most successful students at immersive coding bootcamps. This is valuable information everyone should have before they embark on the journey of learning to code over a very short period of time.\n\n\nHow hard is an immersive coding BootCamp, or self teaching? Really hard. Most people say it's the hardest thing they have done in their entire life...\n\nBut if you go into the process knowing what works and what doesn't you are much more likely to come away with a job. Ultimately this course covers the critical first step of squeezing every bit of knowledge from prior students so that you can learn the most at your bootcamp, prepare for the eventual interview, and have the skills to keep learning for first few years on the job.\n\n\nThis course is designed to give you an overview of the entire process so that you know exactly what to expect and why things work the way they do in most programs. This is not intuitive stuff, but because it is so valuable I insist it is taught up front as part of any program I run. Now you can gain that same insider knowledge that I share with all my students.\n\n\nBy the end of this course, you will know exactly what to expect in an immersive coding program, understand how to learn optimally during an intense program, be prepared for the challenges and obstacles you will face, and have the tools and techniques at your disposal to crush it during your journey. Let's get started!",
      "target_audience": [
        "Beginner programmers and anyone that is thinking about attending a coding bootcamp."
      ]
    },
    {
      "title": "RabbitMQ In Practice",
      "url": "https://www.udemy.com/course/rabbitmq-in-practice/",
      "bio": "A Complete Guide to RabbitMQ, Queues, Exchanges, Producers and Consumers, Patterns, Clustering, Optimization & Tune-up",
      "objectives": [
        "RabbitMQ best practices",
        "Usage of Exchanges, Queues, Bindings and Routing Keys",
        "Clustering and Highly Available and Fault Tolerant features",
        "Federations and Showels",
        "Performance testing, monitoring and memory analysis",
        "RabbitMQ patterns: Work queues, publish subscribe, RPC, DLX, delayed scheduling etc.",
        "Lazy queues, TTL, priority queues, exclusive queues, durability, hashed exchanges etc.",
        "AMQP deep dive",
        "General RabbitMQ Security and Troubleshooting"
      ],
      "course_content": {
        "About this Course and Author": [
          "About the author"
        ],
        "Code & Slides Download": [
          "Slides and Code Download"
        ],
        "Introduction": [
          "Queues",
          "RabbitMQ and Similar Products",
          "AMQP"
        ],
        "Getting starting with RabbitMQ": [
          "Prerequisites",
          "Basic configuration and Installation Hands On",
          "Configuration",
          "Configuration file Hands On",
          "Plugins",
          "Plugins - Web Admin Hands On",
          "Web Admin Overview and Default User Password",
          "RabbitMQ RESTful API",
          "Exchanges, Queues, Bindings, Routing Keys",
          "First Queue and First Consumption Hands On"
        ],
        "RabbitMQ patterns": [
          "Common Patterns",
          "Patterns: Simple Queue Hands On",
          "Patterns: Work Queues / Task Queues Hands On",
          "Patterns: Publish / Subscribe (fanout) Hands On",
          "Patterns: Publish / Subscribe based on Routing Hands On",
          "Patterns: Publish / Subscribe based on Topics Hands On",
          "Patterns: Publish / Subscribe based on Headers Hands On",
          "Patterns: RPC - Remote Procedure Call Hands On"
        ],
        "RabbitMQ advance Hands On": [
          "Custom Exchanges - Consistent Hash Exchange",
          "Dead Letter Exchange (DLX)",
          "Delay Schedule, Delay Publication Model",
          "Data safety - Transactions & Publisher Confirms",
          "Vhosts",
          "Policies",
          "Lazy queues - memory optimization",
          "Priority Queues",
          "NT service"
        ],
        "Distributed brokers": [
          "Overview",
          "Cluster Scale-Out Hands On",
          "Cluster Scale-In Hands On",
          "Shovels Hands On",
          "Federated Exchange Hands On",
          "Federated Queue Hands On",
          "Cluster, Federation, Shovel Summary",
          "Highly Available (Mirrored) Queues Hands On",
          "Quorum Queues Hands On",
          "Partitions Hands On"
        ],
        "Performance testing": [
          "Tools",
          "PerfTest Hands On"
        ],
        "Monitoring Hands On": [
          "Overview",
          "Collecting metrics",
          "Memory model",
          "Alarms"
        ],
        "Security": [
          "Overview",
          "Security - Permissions",
          "Security Hands On"
        ]
      },
      "requirements": [
        "Basic administrative skills are fine enough",
        "Programming Experience is optional - Java code we create in this course is not mandatory to understand RabbitMQ. Included Java code is an extra bonus for Developers,"
      ],
      "description": "This course will guide you through the features and limitation or RabbitMQ. Course contains a lot of practical knowledge, examples and hands-on lectures.\nIf you are a beginner, don't worry, course guides you from very generic concept of queues to more advanced features. If you already have experience with RabbitMQ, you will enjoy the advanced part of it. Maybe you are in the middle and not sure if you are using RabbitMQ correctly? If so, then course will help you find answers to that questions, optionally grounding and strengthening your exiting experience. No matter what is your existing level of knowledge, after completing this course, you will be ready to become a true professional in the RabbitMQ community.\nIn this course, I will show you how to configure, administrate, and properly use RabbitMQ. We'll start by forming a cluster and installing plugins. Then we will go through the details of the AMQP protocol, different types of queues, exchanges, virtual hosts, security features etc.\nI will show you typical RabbitMQ patterns like work queues, publish subscribe, RPC, dead letter exchanges (DLX), delayed scheduling etc.\nWe will also tune-up sample cluster and analyze memory usage by running performance tests. We'll simulate failures, like partitions, and I'll show you how to fix them and properly protect your cluster.\nOverall, you'll learn how to build highly available and fault-tolerant clusters in the easy way, without spending hours reading manuals.\nI hope to see you in the first lecture.",
      "target_audience": [
        "Software Engineers",
        "Architects",
        "DevOps & Administrators",
        "Developers & QA"
      ]
    },
    {
      "title": "Software Career Starter Kit - Planning for Growth",
      "url": "https://www.udemy.com/course/software-career-planning-bootcamp/",
      "bio": "Software Engineer, Career Development, Software Career, Career growth, Career Advice, Career Change, Career Planning",
      "objectives": [
        "Career challenges faced by non computer science graduates and ways to overcome them without getting burnt out.",
        "Understanding impact of career decisions in longer term. Thinking beyond frameworks, languages.",
        "Identify the shortcomings in existing skillset and fix them systematically without burnout.",
        "Ways of growing in current role to become senior software engineer",
        "Networking with intent of career growth",
        "How to be impactful and prodcutive software engineer. Being a good engineer shaping software is more important than a coder admired by the manager.",
        "Identifying career blockers like toxic culture and systemic biases"
      ],
      "course_content": {
        "Introduction": [
          "Course overview",
          "Tech check",
          "The motivation behind build a course focusing on survival over success!?",
          "Knowing your goals."
        ],
        "Myths vs. Reality": [
          "An alternate industry built to prey on confusion of aspirants.",
          "Knowing the difference between using a software framework and building software",
          "Mid section quiz",
          "Role of funding in higher education and subsequent career",
          "Education and funding by example",
          "Role of funding in career",
          "Dream job fallacy. Over ambition can derail careers at any stage!",
          "Section quiz"
        ],
        "Outsider protocol - The challenges and obstacles for non CS degree engineers": [
          "Overview of 5 factors framework to compare careers.",
          "Factor 1 : Theory - The knowledge aspect of the career compatability",
          "Factor 2 : Hands-on or Relevant experience - The execution element of growth",
          "Factor 3 : Resume - Track record of career trajectory used as currency in market",
          "Factor 4 : Business Acumen - Awareness of the bigger picture beyond daily tasks",
          "Factor 5 : Salary - Understanding the nuances beyond mere numbers",
          "[Deep Dive] How to predict your career growth based on your academic background?",
          "Self Learning Resources - Prompts to dive deeper using AI Tools like ChatGPT",
          "Section Quiz"
        ],
        "Challenges faced in early stages of software career": [
          "Location - The ovarian lottery of being born at right place at the right time!",
          "The decline of search results quality leading to unreliable expertise",
          "The limited impact of the concept of equal opportunity",
          "Mid section quiz",
          "Role of social circles in your career growth",
          "Role of your team in your career growth",
          "Role of your peers in your career growth - Imposter syndrome",
          "Concerns about disproportionate powers handed to managers",
          "Section Quiz"
        ],
        "Software as a business - Knowing the factors that dictate what happens to code": [
          "Unicorn vs An enterprise with a billion in profits",
          "Exploring recuritment constraints for a perspective of optimizing your career",
          "Understanding the relation between your equity, company market cap and networth.",
          "Mid Section Quiz",
          "Building a habit to analyzing Quarterly results of the company when published",
          "Realizing the layered nuances of software engineering communications",
          "Understanding the impact of open source software in career growth",
          "A glimpse of business process outsourcing in software driving services industry",
          "Section Quiz"
        ],
        "Action items and considerations for fixing career path": [
          "Immediately Actionable Insights for Early-Career Software Engineers",
          "The water cooler culture: Pros and cons of informal gatherings in office",
          "Precisely calculating personal finance factors based on career goals",
          "Mid section Quiz",
          "Mastering the Art of Effective Presentations - Less can be more!",
          "Considerations to be made while choosing post graduate education for growth",
          "Warning about blindly following the Hustle culture",
          "Realizing the impact of measuring code quality over quantity as a growth metric",
          "Mid Section Quiz",
          "Indicators to spot toxic culture around you",
          "Efficient networking goals to create relations with clear intent and sincerity",
          "Building an instinct to say No whenever necessary",
          "Treating migration and maintenance projects as learning opportunities",
          "Section Quiz"
        ],
        "Understanding nuances of competition at early stage of career.": [
          "Loyalty vs. Caliber",
          "Timely upskilling to stay relevant without burning out",
          "Accounting for the impact of hierarchy while applying to niche job openings",
          "Mid section quiz",
          "Understanding the power of visa when working abroad",
          "Navigating Career Trends: Focus on Long-Term Growth",
          "AI in Software Engineering: Embrace, Don't Fear",
          "Dealing with failed interviews objectively",
          "Section Quiz"
        ],
        "Conclusion": [
          "Closing remarks."
        ]
      },
      "requirements": [
        "No programming experience needed.",
        "Planning to or already pursuing a career in software or IT industry in any role. (Dev,QA,Support,DevOps,Sys. Admin etc.)",
        "Building a career roadmap aligned with personal responsibilities"
      ],
      "description": "Embark on a transformative journey with our comprehensive Udemy course designed for early-career professionals seeking a clear, actionable roadmap for success. Whether you're just starting or approaching the five-year mark in your career, this course offers invaluable insights to navigate the complex landscape of career planning effectively.\nThrough a series of meticulously structured sections, we delve into the critical challenges and considerations essential for shaping your career trajectory within the first five years. We aim to equip you with a robust Plan B, ensuring you're prepared to recalibrate your career path should you stray from your primary goals.\nKey Features:\nMyths vs. Realities: Uncover the truth behind common career myths with evidence-based realities. Learn to sift through the overwhelming information on the internet with filters refined from years of firsthand experience and insights from industry peers.\nStrategic Comparison Factors: Gain perspective on how educational background and field of study impact career prospects and compensation, embracing the hard truths of the industry while strategizing your career growth.\nChallenges and Obstacles: Identify the hurdles that could derail your career roadmap and learn strategies to overcome them, ensuring your goals are realistic and achievable.\nUnderstanding the Business of Software: Discover the crucial distinction between coding skills and business acumen in the software industry. Learn why understanding the business side is essential from the start.\nActionable Advice and Precise Action Items: Receive specific guidance and immediate steps you can take to shape your career path, emphasizing personal responsibility over general industry trends.\nMarket Competition and Job Survival Strategies: Learn to gauge your competition in the job market and navigate recessions successfully. This section offers survival tactics tested by experience through economic downturns, underscoring the importance of resilience.\nWhat You Will Learn:\nHow to debunk career myths with practical realities.\nWays to evaluate and compare your career prospects based on your background.\nStrategies to address and overcome early career challenges.\nThe importance of business knowledge in tech and software industries.\nImmediate, actionable steps for personal career development.\nTechniques to assess market competition and secure employment in fluctuating economies.\nWho This Course Is For:\nNew graduates and early-career professionals looking to navigate the first five years of their careers with confidence.\nIndividuals nearing the five-year career milestone seeking to reassess and adjust their career trajectory.\nAnyone interested in learning about the intersection of technical skills and business acumen in the software industry.\nWhy Choose This Course:\nLed by an instructor with extensive industry experience and a history of navigating career challenges, including recessions, this course is not just about aiming for the stars but securing a sustainable, fulfilling career. You'll leave with a clear, actionable plan tailored to your unique situation, ready to tackle the job market and beyond.\nDon't let your career journey be dictated by chance. Take control, plan strategically, and set the foundation for a rewarding career. Enroll now and start building your future, today!",
      "target_audience": [
        "Software Engineers with 0-5 years of experience. Software professionals seeking precise actionable advice to grow and build a prosperous career without burnout and days starting at browser based interview preparation portals.",
        "Sophomore, Post graduates, or anyone graduating in next couple of years.",
        "Anyone interested in starting a career in software or IT industry.",
        "Professionals interested in swithching from IT services companies to product companies within the same country or immigrating abroad."
      ]
    },
    {
      "title": "From Java Dev to AI Engineer: Spring AI Fast Track",
      "url": "https://www.udemy.com/course/java-spring-ai/",
      "bio": "Build AI Apps with Spring AI, OpenAI, RAG, MCP, AI Testing, Observability, Speech & Image Generation",
      "objectives": [
        "Build Spring Boot applications powered by Spring AI",
        "Integrate Spring AI app with OpenAI, Ollama, Docker Model Runner, and AWS Bedrock",
        "Use prompt templates and prompt stuffing techniques",
        "Convert AI text responses to Java Beans, Lists, and Maps",
        "Understand how LLMs work internally with tokens and embeddings",
        "Implement Retrieval-Augmented Generation (RAG) with Spring AI",
        "Implement memory in chat apps using Spring AI advisors",
        "Teach LLMs to call tools exposed by Java methods",
        "Build both MCP clients and servers with Spring AI",
        "From Testing to Production – Making AI Answers Safer with Evaluators",
        "Observability in Spring AI – Metrics, Monitoring & Tracing",
        "Transcription, Speech, and Image Generation using Spring AI"
      ],
      "course_content": {
        "Spring AI – Say Hello to AI in Spring Boot": [
          "Course Introduction",
          "Details of Source Code, PDF Content & other instructions for the course",
          "What is Spring AI Framework",
          "Hello World Spring AI app with OpenAI - Part 1",
          "Hello World Spring AI app with OpenAI - Part 2",
          "Deep dive on ChatModel and ChatClient",
          "Building a “Hello World” App with Spring AI and Ollama",
          "Building a “Hello World” App with Spring AI and Docker",
          "Building a “Hello World” App with Spring AI and AWS Bedrock - Part 1",
          "Building a “Hello World” App with Spring AI and AWS Bedrock - Part 2",
          "Working with Multiple Chat Models in Spring AI",
          "Choosing the Right LLM Deployment Strategy for Spring AI"
        ],
        "Spring AI Essentials - Prompts, Advisors, and Structured Responses": [
          "Understanding Message Roles in LLMs - Theory",
          "Understanding Message Roles in LLMs - Demo",
          "What Are Defaults in Spring AI",
          "Using Prompt Templates in Spring AI",
          "Using Prompt Stuffing technique",
          "Why Prompt Stuffing Isn’t Meant for Big Data",
          "Understanding Advisors in Spring AI Workflows",
          "Spring AI Built-in Advisors - Plug and Play Intelligence",
          "Custom Advisors in Spring AI - Make the AI Work Your Way",
          "Understanding ChatOptions in Spring AI",
          "Configuring ChatOptions in Spring AI",
          "Spring AI ChatClient – Response Types Explained",
          "Streaming AI Responses in Real-Time using stream() Method",
          "From Text to Types - Mastering Structured Output in Spring AI",
          "From AI Text to Java Objects - Spring AI Structured Output Demo",
          "Using Bean, List, and Map Output Converters in Spring AI",
          "Mapping AI Response to List<POJO> using ParameterizedTypeReference",
          "Ensuring Structured Outputs in Spring AI Applications"
        ],
        "Foundations of Generative AI and LLMs": [
          "Tracing the Roots - How We Reached Generative AI",
          "Meet the Gen AI Family - AI, ML, DL, and Beyond",
          "Funny memes of AI",
          "Types of Generative AI Models",
          "Introduction to Large Language Models - The Text Experts",
          "Core job of an LLM - Guessing next word",
          "The concept of Tokens & Token IDs in LLM",
          "Inside an LLM’s Dictionary - Understanding Model Vocabulary",
          "Embeddings & Vectors - A way to represent meaning",
          "How Embedding Vectors calculated",
          "What are Static Embeddings",
          "Positional Embeddings - How AI Understands Word Order",
          "The Magic of Attention - How AI Understands Context"
        ],
        "Teaching LLMs to Remember - The Power of Chat Memory in Spring AI": [
          "LLMs Don’t Remember You – The Stateless Nature of AI Models",
          "LLMs Forget Everything — ChatMemory to the Rescue!",
          "Making ChatClient ‘Remember’ – Spring AI’s Memory Advisors",
          "From Stateless to Stateful - Spring AI Memory in Action",
          "Per-User Memory in LLMs – Thanks to CONVERSATION_ID!",
          "Chat Memory That Lasts – Spring AI with JDBC-Based Persistence",
          "Using maxMessages to Limit Chat History in Spring AI",
          "Avoiding Token Overload - Use maxMessages with Context Window size in Mind",
          "Adding Memory to LLM Conversations"
        ],
        "The Art of Talking to Documents – RAG Unleashed": [
          "From Prompt Stuffing to RAG – A Better Way to Feed LLMs",
          "Understanding the RAG flow",
          "Meet the Vector Database - Storing Meaning, Not Just Data",
          "Setting Up Qdrant Vector Store with Spring Boot Using Docker Compose",
          "Demo of RAG using random text data - Part 1",
          "Demo of RAG using random text data - Part 2",
          "Demo of RAG using random text data - Part 3",
          "Let's talk to documents using RAG",
          "Breaking Down Big Documents - The Art of Chunking for LLMs",
          "RAG Made Easy - RetrievalAugmentationAdvisor in Action",
          "RAG flow with Web Search - Part 1",
          "RAG flow with Web Search - Part 2",
          "Advanced RAG with Pre-Retrieval",
          "Advanced RAG with Post-Retrieval",
          "Who calculates the embedding values of the documents",
          "Enhancing Answers with External Knowledge/Private Documents"
        ],
        "Tool Calling in Action - Giving LLMs the Power to Do Things": [
          "Introduction to Tool Calling in AI",
          "LLMs vs Reality - The Time Question They Can’t Answer",
          "Tool Calling in Action - Teaching LLMs to Tell the Time",
          "How the Tools get called by LLM internally",
          "Letting LLMs Talk to Databases - A Tool Calling Demo - Part 1",
          "Letting LLMs Talk to Databases - A Tool Calling Demo - Part 2",
          "Letting LLMs Talk to Databases - A Tool Calling Demo - Part 3",
          "Bypass the Model - Returning Tool Results Directly to the User",
          "Graceful Failure - Customizing Tool Error Responses in Spring AI",
          "Generative AI’s Journey - From Static Chat to Dynamic Intelligence"
        ],
        "Mastering Model Context Protocol (MCP)": [
          "The Missing Link in AI Apps - Understanding the Need for MCP",
          "Inside MCP - Understanding the Architecture of Model Context Protocol",
          "Behind the Scenes of MCP Communication - Built-in Transport Logic",
          "Building an MCP Client with Spring AI",
          "Demo of MCP Client and MCP Server integration",
          "Meet the MCP Inspector - The X-Ray Tool of MCP Server",
          "Demo of integration with GitHub MCP Server",
          "Building an MCP Server using STDIO - Part 1",
          "Building an MCP Server using STDIO - Part 2",
          "Building an MCP Server using remote invocation",
          "Standardizing AI Tool Integrations"
        ],
        "From Testing to Production – Making AI Answers Safer with Evaluators": [
          "Testing the Untestable - Evaluating LLM Responses with Spring AI",
          "Building Trustworthy AI with RelevancyEvaluator and FactCheckingEvaluator",
          "RelevancyEvaluator Demo - Ensuring LLMs Stay on Topic",
          "FactCheckingEvaluator in Action - Catching AI Hallucinations",
          "Using Spring AI Evaluator in a RAG Scenario",
          "Catching Bad LLM Answers in Production with Runtime Checks",
          "Runtime Validation with Spring AI Evaluator and Spring Retry",
          "Making AI Testing More Reliable"
        ],
        "Observability in Spring AI - Metrics, Monitoring & Tracing": [
          "Introduction to monitoring AI Operations",
          "Enabling Metrics in Spring AI with Spring Boot Actuator - Part 1",
          "Enabling Metrics in Spring AI with Spring Boot Actuator - Part 2",
          "Enabling Prometheus Monitoring in Spring AI - Part 1",
          "Enabling Prometheus Monitoring in Spring AI - Part 2",
          "Setting Up Grafana Dashboard for Spring AI Metrics",
          "Tracing AI Operations using OTLP & Jaeger - Part 1",
          "Tracing AI Operations using OTLP & Jaeger - Part 2"
        ],
        "Transcription, Speech, and Image Generation using Spring AI": [
          "From Voice to Text - Using Spring AI for Transcription - Part 1",
          "From Voice to Text - Using Spring AI for Transcription - Part 2",
          "From Text to Speech - Generating Voices with SpeechModel",
          "From Prompt to Picture - Image Generation with ImageModel"
        ]
      },
      "requirements": [
        "Knowledge on Java, Spring Boot is mandatory"
      ],
      "description": "Are you ready to build AI-powered Java applications with real-world use cases? This hands-on course will teach you how to integrate cutting-edge AI capabilities into your Spring Boot applications using the Spring AI framework and OpenAI.\nYou’ll master everything from building your first chat-based app to using Retrieval-Augmented Generation (RAG), Tool Calling, Structured Output Conversion, MCP (Model Context Protocol), and even Speech-to-Text, Text-to-Speech, and Image Generation — all using Java and Spring Boot.\nFrom understanding how LLMs work to deploying production-ready AI features with observability, testing, and advisor-based safety, this course is packed with powerful demos, clean explanations, and practical techniques to bring intelligence to your backend.\nWhether you're a Java developer, Spring enthusiast, or backend engineer exploring Generative AI, this course will guide you step-by-step with best practices and battle-tested code.\n\nWhat You’ll Learn:\nSection 1: Welcome & Hello World with Spring AI\nUnderstand the Spring AI framework and course roadmap\nBuild your first Spring Boot AI app using OpenAI\nDeep dive into ChatModel and ChatClient APIs\nSection 2: Prompt Engineering & Structured Output\nUse message roles, prompt templates, and stuffing techniques\nWork with advisors to control AI behavior\nMap AI responses to Java Beans, Lists, and Maps\nSection 3: Generative AI & LLM Fundamentals\nLearn about tokens, embeddings, and how LLMs generate text\nUnderstand attention, vocabulary, and model internals\nExplore static vs positional embeddings and context windows\nSection 4: AI Memory with ChatHistory\nImplement stateless-to-stateful conversations\nUse MemoryAdvisors and Conversation IDs for per-user memory\nPersist chat memory using JDBC and configure maxMessages\nSection 5: RAG – Retrieval-Augmented Generation\nSet up a vector store (Qdrant) using Docker\nStore and query document embeddings in Spring Boot\nUse RetrievalAugmentationAdvisor to feed documents to AI\nSection 6: Tool Calling – Let AI Take Action\nEnable tool invocation via LLMs\nBuild tools for real-time actions like querying time or database\nCustomize tool errors and return responses to users\nSection 7: Model Context Protocol (MCP)\nLearn MCP architecture and communication patterns\nBuild MCP Clients and Servers using Spring AI\nIntegrate with GitHub’s MCP Server and explore STDIO transport\nSection 8: Testing & Validating AI Outputs\nUse RelevancyEvaluator and FactCheckingEvaluator\nTest AI responses for correctness in dev and production\nAdd runtime safety checks with Spring Retry\nSection 9: Observability – Monitoring AI Operations\nEnable Spring Boot Actuator metrics for AI\nSet up Prometheus & Grafana dashboards\nTrace AI behavior with OpenTelemetry and Jaeger\nSection 10: Speech & Image Generation\nConvert voice to text with AI-powered transcription\nGenerate natural speech from text prompts\nTurn prompts into images using the ImageModel",
      "target_audience": [
        "Java and Spring Boot developers eager to integrate AI into real-world applications",
        "Backend developers curious about LLMs, prompt engineering, and AI-powered workflows",
        "Full Stack developers interested in adding AI capabilities to their microservices or APIs",
        "Architects exploring Retrieval-Augmented Generation (RAG) and Tool Calling in Spring ecosystems",
        "Professionals aiming to bring natural language interfaces to enterprise applications",
        "Devs building chatbots, voice assistants, or image generation tools using Spring AI",
        "Students and enthusiasts who want a practical, hands-on approach to Generative AI with Java"
      ]
    },
    {
      "title": "Haskell Programming",
      "url": "https://www.udemy.com/course/learn-haskell/",
      "bio": "Learn the Haskell Programming language, for Beginners",
      "objectives": [
        "Functional programming with Haskell",
        "Haskell basics",
        "A new way of thinking about programming (Functional)",
        "Learn concepts like Recursion, Lambda functions and more"
      ],
      "course_content": {
        "Introduction": [
          "Installation",
          "Introduction",
          "Functions, Let and If",
          "Lists",
          "List Comprehension (numbers)",
          "List Comprehension (strings)",
          "Tuples vs Lists",
          "Functions",
          "Recursion",
          "Modules",
          "Higher Order Functions",
          "Lambda functions",
          "Foldl",
          "Custom Data Types"
        ]
      },
      "requirements": [
        "No prior requirements"
      ],
      "description": "Learn programming with Haskell. Haskell is a functional programming language.  Learning Haskell helps you to think in a different way about a problem. You get a new way of thinking. There's also a job market for Haskell, so it may improve your career possibilities.\nIf you want to become a better programmer and learn something interesting, try Haskell. This is a beginners course",
      "target_audience": [
        "Beginner Haskell developers"
      ]
    },
    {
      "title": "Pyramid of Refactoring derived from Legacy Code cleaning",
      "url": "https://www.udemy.com/course/pyramid-of-refactoring-java-interpreter-factories/",
      "bio": "Clean code gradually and notice emerging Design Patterns like Interpreter, Fluent Builder, Factory Methods",
      "objectives": [
        "Design Patterns",
        "Clean Code",
        "Refactoring",
        "SOLID Principles",
        "Working with Legacy Code"
      ],
      "course_content": {
        "Introduction": [
          "About the course and my teaching style"
        ],
        "Refactoring Basics": [
          "Business meaning of refactoring",
          "Pyramid of Refactoring - discovery journey",
          "Pyramid of Refactoring - explained"
        ],
        "Climbing up the Pyramid of Refactoring": [
          "Sources and Business Domain explained",
          "First refactoring along the pyramid",
          "Pyramid of Refactoring - Recap"
        ],
        "Emerging Interpreter Design Pattern": [
          "Extract Delegate/Class - MaterialSpec",
          "Extract Parameter Object - AndSpec"
        ],
        "Completed Interpreter Design Pattern": [
          "Replace Method with Method Object - PlacementSpec",
          "Not Spec - Avoid a queried placement",
          "SOLID Principles help to extract Spec implementations",
          "Generic AndSpec"
        ],
        "Creational Design Patterns Support": [
          "Factory Methods hide direct usage of constructors",
          "Fluent Builder supports AndSpec creation",
          "Tests Refactoring with Fluent Builder support"
        ],
        "Clean your code continuously": [
          "Make refactoring part of your daily activities",
          "The most important slide to remember",
          "Thank You!"
        ]
      },
      "requirements": [
        "Java 1.8+",
        "JUnit",
        "IntelliJ Community Edition",
        "Maven"
      ],
      "description": "This is the first module of (planned) series called \"Pyramid of Refactoring\" dedicated to achieving Clean Code.\nWe use refactoring techniques and perform all the changes live. The student downloads the source code and performs all the changes together with the trainer - step by step. In this sample we make use of Interpreter Design Pattern as goal of our refactoring journey. The Interpreter Pattern is accompanied by two creational design patterns - Factory Method and Fluent Builder, which are also result of refactoring activities.\nSOLID Principles will be explained in practice instead of teaching the sole theory.\nThe journey allows us practice code transformations like :\nReplace Loop with Stream\nExtract Delegate / Class\nExtract Interface\nExtract Parameter Object\nReplace Method with Method Object\nExtract Method / Variable\nMove Method\nInline Method / Variable\nInstall IntelliJ IDE, Java and try it out. You will perform all the changes step by step with the trainer and learn refactoring transformations built into IntelliJ. Moreover after registering to this online workshop you will be informed about promotional prices of my other trainings which will allow you to continue with this subject at the lowest possible price.\nJoin a few hundreds of software developers whole spent these 2 hours and applied refactoring techniques to Clean Code in their daily work.",
      "target_audience": [
        "Software Developer",
        "Software Architect",
        "IT Team Leader"
      ]
    },
    {
      "title": "C++ Robotics Developer Course - Using ROS in C++",
      "url": "https://www.udemy.com/course/c-plus-plus-robotics-developer-course-using-ros-in-c-plus-plus/",
      "bio": "Learn to program Robots using the famous Robot Operating System (ROS) framework in C++",
      "objectives": [
        "Learn about ROS (Robot Operating System)",
        "Learn how ROS can be used for Robotics Development",
        "Learn about the tools available in the ROS Framework",
        "Learn how to use the ROS C++ Library to develop code for robots in C++",
        "Learn about Robotics Simulation Tools to program and test them in a virtual environment"
      ],
      "course_content": {
        "Course Introduction": [
          "Welcome To The Course!",
          "What Is ROS?",
          "Things To Note"
        ],
        "Environment Setup": [
          "Section Intro",
          "Installing Virtual Operating System",
          "[MAC Only] Installing Virtual Operating System",
          "Installing ROS",
          "[Note] Code Editor Update",
          "Installing Code Editors"
        ],
        "ROS Overview": [
          "Section Intro",
          "ROS Framework Overview",
          "ROS Framework Overview Quiz",
          "ROS Simulation And Visualization Overview",
          "ROS Simulation And Visualization Overview Quiz"
        ],
        "Using ROS In C++": [
          "Section Intro",
          "Asking Questions",
          "ROS Workspaces",
          "ROS C++ Style Guide Overview",
          "Creating Publishers",
          "Compiling ROS Nodes",
          "Creating Subscribers",
          "Message Types",
          "Project: Publishers And Subscribers",
          "Parameter Server",
          "Launch Files",
          "Project: Launch File",
          "Bag Files",
          "Packages",
          "Creating Services",
          "Project: Services",
          "Project: Actions"
        ],
        "Robotics Simulation": [
          "Section Intro",
          "Gazebo",
          "ROS Visualization Tools"
        ],
        "Course Outro": [
          "Congratulations, Next Steps",
          "Survey",
          "Frequently Asked ROS Questions"
        ],
        "Bonus Section": [
          "Bonus"
        ]
      },
      "requirements": [
        "General Computer Skills",
        "Experience with C++ (preferred)",
        "A computer capable of running a Virtual Machine",
        "Experience with Ubuntu Linux (preferred)"
      ],
      "description": "Learn how to use the Robot Operating System (ROS) platform which is used to program real world robotics. This course is designed for those who want to learn to program robots using one of the most widely used coding languages in industry: C++. The coding in this course is done in C++ using ROS Noetic on the Ubuntu 20.04 operating system.\n\n\nThis course will go over installation of ROS, how to develop code that uses the framework, and even go over simulation tools so you can make your own robot and control it in simulation, with code that can easily be ported to a real robotic system.\n\n\nThe course is broken into 6 main sections:\nCourse Introduction\nEnvironment Setup\nROS Overview\nUsing ROS in C++\nRobotics Simulation\nCourse Outro\n\n\nSection 1 is a general introduction to the course.\nIn section 2 you will learn how to setup your computer to be able to run ROS. This includes utilizing the Ubuntu operating system, installing ROS, and introducing you to the code editors we will be using in this course.\nIn section 3 I will teach you at a high level what \"tools\" are included in the ROS framework, and what each of them do.\nYou will spend the majority of this course in section 4, learning how to implement all the various ROS tools in your very own C++ code.\nSection 5 will touch on using the simulation and sensor data visualization tools ROS has to offer.\nAnd lastly the course outro will go over what you can do once you have completed the course, as well as some frequently asked questions and a survey to help me improve the course.\n\n\nSo what are you waiting for? Let's get to programming, using the most widely used open source robotics platform, ROS.",
      "target_audience": [
        "Developers who want to learn about ROS for robotics development",
        "Developers interested in coding robot functionality in C++"
      ]
    },
    {
      "title": "Studio 5000 Advanced Ladder Logic Training.",
      "url": "https://www.udemy.com/course/advanced-plc-ladder-programming-using-logix5000/",
      "bio": "Using Advanced Ladder Logic PLC Programming techniques with Studio 5000, using more complex instructions.",
      "objectives": [
        "How to program a project using RS Studio 5000 in the most efficient manner using some of the more advanced instructions and techniques.",
        "At the end of the course, you will be confident in using RS Studio 5000 with more advanced programming techniques and instructions.",
        "Confidence in building and modifying your RS Studio 5000 projects.",
        "Learn how to use Message, GSV/SSV instructions. Compute instructions, Add-on instructions. This is just a sample."
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Refresher: Communicating between Computer and PLC using RSlinx": [
          "Communicating between Computer and PLC using RSlinx",
          "Communicating between Computer and PLC using RSlinx 2",
          "Communication Summary",
          "Controller Communication",
          "Controller Communication"
        ],
        "Shift Register Instructions Including COP, MOV and FLL": [
          "Mov, COP and FLL Instructions.",
          "Mov, COP and FLL Instructions. Demonstration.",
          "BTD instructions.",
          "BTD Summary",
          "BTD Instructions"
        ],
        "Compute Instructions.": [
          "Programming CPT and CMP Instructions",
          "CPT and CMP Summary.",
          "CMP and CPT Instructions."
        ],
        "Message Instructions.": [
          "Programming an MSG CIP Data Table Read.",
          "Programming an MSG CIP Generic instruction",
          "Message Creation Summary",
          "Message Instruction Quiz"
        ],
        "User Defined Data Types.": [
          "Creating a User Defined Tag Data Type.",
          "Arrays, User Defined Data Types and Alias Names. Additional.",
          "User Defined Data Types Summary.",
          "User Defined Data types"
        ],
        "Produced and Consumed Tags.": [
          "Creating and Using a Produced and Consumed Tag.",
          "Produced and Consumed Tag Summary.",
          "Produced and Consumed Tags."
        ],
        "Using GSV and SSV Instructions.": [
          "Creating and Using GSV and SSV instructions in the Ladder Program.",
          "Using GSV and SSV Instructions in a Fault Routine.",
          "GSV and SSV Summary.",
          "GSV and SSV Instructions"
        ],
        "Creating Add-On Instructions.": [
          "Creating and Using Add-On Instructions.",
          "Demonstration Creating an Add-On Instruction",
          "Add On Instruction Summary.",
          "Add On Instructions"
        ],
        "Search and Cross Reference for Fault Finding Online. Creating L5k Files.": [
          "Searching and Cross Reference Online for Fault Finding.",
          "Creating and Using L5k Files."
        ]
      },
      "requirements": [
        "Computer literacy, knowledge of PLC s in general and knowledge of RS Studio 5000 in particular. Completion of the course Basic ladder programming using Logix5000 will be an advantage.",
        "This is not a course for beginners. Ensure your basic knowledge by taking the. RS Studio 5000 Training Using PLC Ladder Logic. Basic"
      ],
      "description": "This course covers the Studio 5000 PLC Advanced Ladder Logic Training and is for any of you who has some knowledge of Studio 5000 Programming Techniques in any of the 4 platforms where it is used. This software, and the Rockwell Automation platforms that use it, is very powerful and for me is my PLC software and hardware of choice, Very user-friendly.\nI shall be your instructor during this training and I have had many years practical experience creating projects and programming PLC's, HMI's, commissioning, and face-to-face training. I also possess a SAQA Further Education and Training Certificate: Measurement, Control and Instrumentation. This is South African but recognized in many countries internationally.\nThis course is quite advanced so it is not for the novice. It will be to your advantage if you have previously completed the course, Studio 5000 Ladder Logic Training. Basic.\nI will show you how to create a project and use programming techniques utilizing the more Advanced instructions\nWho Should Take This Course?\nThis Studio 5000 PLC Advanced Ladder Logic Training course is designed as a course for users who have had exposure to Studio 5000 but on a basic to intermediate level.\nThis course is also strongly recommended if you wish to improve your programming knowledge.\nThis is an advanced course, so if you are a novice user of RS Studio 5000, take the Studio 5000 Ladder Logic Training. Basic first.\nListed below are some of the topics I will cover with you in this course.\nRefresher: You will learn how to establish communication between computer and PLC using RSlinx.\nUsing Bit Shift instructions.\nConfiguring Message instructions.\nCreating Produced and Consumed tags.\nProgramming a CPT and a CMP instruction.\nHow to create User Defined Data Types.\nThe purpose of GSV and SSV instructions.\nAdd-On Instructions.\nThis is just a short description explaining what you will learn but there is a lot more that you will learn if you take the Studio 5000 PLC Advanced Ladder Logic Training.\nThere are a number of quizzes that you can complete after each section to help you reinforce your knowledge and gain confidence using the software. There are also some practical labs for you to complete.\nAt the end of the course, you will feel confident creating and running a project, interrogating an existing project and carrying out necessary changes to a running operation.\nThe majority of the course consists of video tutorials where I will explain all the different aspects of  RS Studio 5000 and demonstrate the use of the software for each of these aspects.\nThe more you can use the software, the better you will be, Then the next course which will cover Function Block Diagrams and SFC's, will be of real benefit to you.\nSo if you are really serious about learning Logix5000 using platforms such as controllogix, compactlogix or even Softlogix and you have reasonable knowledge of the software, then this course is for you. Enroll on this course and you can be learning Today.",
      "target_audience": [
        "Instrument and control system technicians and engineers.",
        "Anyone who has experience of RS Studio 5000 but wishes to advance their knowledge."
      ]
    },
    {
      "title": "API in C#: The Best Practices of Design and Implementation",
      "url": "https://www.udemy.com/course/api-in-csharp/",
      "bio": "Learn how to write clean code in C#. Design and implement API based on the best practices developed by .NET community.",
      "objectives": [
        "Design and implement a type or an API taking care of it's users.",
        "Encapsulate types so the other programmers would not hate you.",
        "Code in a good style making the code clearer in its intent.",
        "Refactor the code making it much better to read and understand.",
        "Throw and handle exceptions properly.",
        "Decide whether to comment a particular part of the code is a good idea or not. By the way, which comments are helpful and which are not?",
        "Dealing with Null values"
      ],
      "course_content": {
        "Introduction to API": [
          "How to Ask Questions",
          "Download Source Code",
          "Join .NET Community of Students",
          "Outline",
          "API's Characteristics",
          "Public API VS Private API",
          "API Development Principles",
          "Conclusion"
        ],
        "Names": [
          "Outline",
          "General Principles of Naming",
          "Naming Conventions in .NET",
          "Conclusion"
        ],
        "Designing and Implementing Types and their Members": [
          "Outline",
          "Class VS Structure",
          "Abstract Class VS Interface",
          "Implementing Abstract Classes",
          "Property VS Method",
          "Implementing Constructors",
          "Creational Patterns VS Constructors",
          "Tester-Doer Pattern",
          "Conversion VS Casting Operator",
          "Implementing Parameters",
          "Implementing \"Dispose\" Pattern",
          "Conclusion"
        ],
        "Implementation Smells": [
          "Outline",
          "Poor Naming",
          "Violating Naming Conventions",
          "Variable Declarations on the Top",
          "Magic Numbers",
          "Too Long Method",
          "Poor Conditional Clauses",
          "Output Parameters",
          "Comments",
          "Prefer Positive if-statements",
          "Conclusion"
        ],
        "Common Architectural Smells": [
          "Outline",
          "Primitives Obsession",
          "Hidden Dependencies",
          "Violation of Law of Demeter",
          "Temporal Coupling",
          "Temporal Coupling and Immutability",
          "Switch Statements",
          "Conclusion"
        ],
        "Dealing with Errors": [
          "Outline",
          "What Does an \"Error\" Mean?",
          "Problems with Exceptions",
          "Common Misconceptions",
          "Exception Handling Strategies",
          "CQS Principle",
          "Errors and Functional Programming",
          "Pipelining by Method Chaining",
          "Conclusion on Exceptions Handling",
          "BCL Exceptions Types",
          "Custom Exception Types",
          "Conclusion"
        ],
        "Dealing with Nulls": [
          "Outline",
          "Problems with Nulls",
          "Null Object Pattern",
          "Maybe monad in C#",
          "Automating Null Checks",
          "Static Analysis",
          "Returning IEnumerables",
          "Conclusion",
          "Final Test",
          "BONUS LECTURE"
        ]
      },
      "requirements": [
        "You should already be familiar with the basics of C#.",
        "You should already have some practice working with Visual Studio."
      ],
      "description": "Learn how to design and implement types in C# so that the other developers won't hate you when using one of the types developed by you. It means you are going to learn how to write code of the high quality: readable, understandable and reliable.\nImprove your knowledge in object-oriented programming in the context of clean coding and building types of high quality.\n\nUnderstand the characteristics of a well-designed type\nGrasp the principles of the convenient API development\nWrite clean code, get rid of unpleasant smells\nLearn about what exceptions are intended for and how to throw and catch them properly\nProtect your types from the incorrect usage making them properly encapsulated.\nFoundations of building object-oriented infrastructures\n\nDespite the fact that C# is a very rich on features language, it's very common to see poorly designed and implemented types in a real world. In fact, C# is one of the richest on features language among object-oriented languages in the world nowadays. But with great power comes great responsibility. It's challenging  to use all those features in a right way.\nYou probably have already heard the following well-known statement: most code sucks. Well, this course is all about how to produce code which doesn't suck.\nOwning skills of producing a well-designed and well-implemented types is the prerequisite for the other developers to treat you as a real professional.\nContent and Overview\nThis course is aimed at all the C# developers, from beginners to seniors. Topics which are covered in the course are relevant for all kinds of C# developers since all developers design and implement APIs. The topics complexity is very different. There are plenty of very simple topics, and at the same time, there are topics which require from you a solid C# background. There are plenty of code examples throughout this course, so you will learn both theoretical and practical material.\nStarting with characteristics and principles of a well-designed type you will go further, learning how to give names for different members, how many parameters a method should take, is it a good idea to take a Boolean as a parameter of a method and much more than that.\nThen you will learn what encapsulation really means. How to encapsulate a type? There are some trade-offs we will deal with encapsulating our types. There are many experienced programmers who don't know what encapsulation is in essence. Investigating this topic together we will see how to build a consistent and reliable type.\nAfter mastering the topic of types encapsulating you will face the great problem of exceptions handling. Yep, it's a hard nut to crack. We will start from discussing a question of why do we use exceptions as a mechanism of errors handling. And why C# team didn't invent any other mechanisms?\nIn the end, we will look at how to fight with null values. As you may know, Tony Hoar said that the invention of a null value was his billion-dollar mistake.\nTo sum up, the course covers the following topics:\n\nAPI development principles\nHow to give better names for API members and what naming conventions exist in the .NET platform and suited for C#.\nCommon problems encountered by C# developers in the process of designing and implementing APIs: classes vs structures, abstract classes vs interfaces, creational patterns vs constructors, how to implement dispose pattern (are you sure you understand this allegedly simple case?)\nCommon implementation smells such as poor naming, excessively long methods, output parameters and so on.\nCommon Architectural Design Smells such as Primitive Obsession, Hidden Dependencies, Violation of Law of Demeter and other.\nHow to deal with errors. It is surprisingly hard to develop robust software where errors handling is based on exceptions. We will find out why this is so and how to struggle with problems of error handling.\nHow to deal with Nulls. Null Vales have always been a pain the ass. NullReferenceException is a well-known and popular guest in our software. We will look at the possible ways of diminishing the disrupting power of null-values.\nTeaching Approach\nNo fluff, no ranting, no beating the air. I esteem your time. The course material is succinct, yet comprehensive. All important concepts are covered. Particularly important topics are covered in-depth. For absolute beginners I offer my help on Skype absolutely free, if requested. Don't forget that this course has English subtitles, so if you don't understand my accent, feel free to turn them on.\nTake this course and you will be satisfied.\n------------------------------------------------------------\nKeywords related to the course:\nC# Clean Code\nC# Best Practices\nAPI in C#\nBuilding API in C#\nClean Code in C# tutorial\nRefactoring",
      "target_audience": [
        "This course is primarily oriented on programmers who have at least basic knowledge of C# and looking for practical guidelines concentrated on the improving of code qualities."
      ]
    },
    {
      "title": "Understanding Semantic Kernel SDK",
      "url": "https://www.udemy.com/course/understanding-semantic-kernel/",
      "bio": "Empowering Business Applications with AI-Driven Plugins Using The Semantic Kernel SDK",
      "objectives": [
        "Understand the Core Concepts of Semantic Kernel and AI Plugins",
        "Gain Proficiency in Prompt Engineering for Business Contexts",
        "Develop Skills in Creating and Managing Skills and Plugins within the Semantic Kernel SDK",
        "Implement and Deploy AI Plugins in .NET Business Applications",
        "Optimize AI Plugins for Real-World Business Applications",
        "Leverage Azure OpenAI and Azure Services for Advanced AI Capabilities",
        "Build Business-Relevant AI Solutions Through Practical Projects"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Introduction to Semantic Kernel": [
          "Section Overview",
          "What is an LLM?",
          "What is Generative AI?",
          "What is Semantic Kernel?",
          "Why use the Semantic Kernel?",
          "Understanding AI Agents in Business Context",
          "Section Review"
        ],
        "Environment Setup": [
          "Section Overview",
          "Using Visual Studio (Windows Only)",
          "Visual Studio Code",
          "Microsoft Azure Account",
          "Section Review"
        ],
        "Build Your Kernal": [
          "Section Overview",
          "What is the kernel?",
          "How to build your kernel",
          "Create Azure OpenAI Resource",
          "Build a chat completion app",
          "Section Review"
        ],
        "Semantic Kernel Plugins": [
          "Section Overview",
          "Introduction to plugins",
          "Using built-in Time plugin",
          "Using Conversation Summary plugin",
          "Understanding prompts",
          "Create career advisor with prompt template",
          "Adding personas to prompts",
          "Career advisor with persona",
          "Saving prompts to files",
          "Create semantic career assistant plugin",
          "Section Review"
        ],
        "Native Functions and Plugins": [
          "Section Overview",
          "Understanding native functions",
          "Creating native functions for career tracking AI Agent",
          "Using Native functions in AI Agent",
          "Combining Functions with Prompts",
          "Using functions in prompts",
          "Automatically invoking functions",
          "Setting automatic function invocation",
          "Section Review"
        ],
        "Create Web Chat Assistant": [
          "Section Overview",
          "Create a New ASP.NET Core MVC Project",
          "Build a Semantic Kernel Service Class",
          "Create a Chat Endpoint",
          "Build the Chat Popup View - 1",
          "Build the Chat Popup View - 2",
          "Testing the Application",
          "Setup Chat Log Database",
          "Storing Chat Log in Database",
          "Fetching Chat Log",
          "Testing Chat History",
          "Add Historical Context to Semantic Kernel Chat",
          "Understanding RAG",
          "Implementing RAG with Semantic Kernel",
          "Section Review",
          "Section Source Code"
        ],
        "Conclusion": [
          "Conclusion"
        ]
      },
      "requirements": [
        "Familiarity with .NET",
        "C# proficiency"
      ],
      "description": "Unlock the power of AI-driven business solutions with the Semantic Kernel SDK by integrating AI in business applications with this comprehensive course designed to equip business application developers and business thinkers with the skills to build, integrate, and deploy AI-powered plugins using Microsoft’s Semantic Kernel SDK.\nAs organizations increasingly rely on data and intelligent systems to drive productivity, efficiency, and customer engagement, understanding how to harness AI in business applications is essential. This course is tailored for developers and business professionals leveraging AI plugins to streamline workflows, enhance user experiences, and drive impactful business outcomes.\nWhat You'll Learn:\nIn this course, you’ll explore the Semantic Kernel SDK, a powerful toolkit that simplifies the integration of large language models (LLMs) like OpenAI’s GPT into business applications. We’ll cover everything from foundational concepts to advanced techniques, ensuring that you gain a well-rounded understanding of how to build intelligent plugins for enterprise use. Topics include:\nIntroduction to Semantic Kernel SDK: Understanding what Semantic Kernel is, its core functionalities, and its role in AI plugin development.\nPrompt Engineering for Business Solutions: Learn to craft effective prompts that optimize LLM responses for specific business needs, such as customer support, data analysis, and decision-making assistance.\nCreating and Deploying AI Skills: Develop custom skills within the Semantic Kernel framework to perform targeted tasks, like automating repetitive workflows, summarizing content, and generating insights.\nBuilding and Configuring Plugins: Delve into the architecture of plugins, including setting up configuration parameters, managing inputs and outputs, and aligning plugins with business requirements.\nIntegration with Business Applications: Learn how to embed AI plugins within existing business systems, from CRM platforms to data analytics dashboards, to unlock real-time insights and automation capabilities.\nOptimizing and Scaling AI Plugins: Understand strategies for ensuring your plugins are robust, responsive, and scalable for enterprise use, including cloud deployment and integration with additional Azure services.\nWhy This Course Stands Out:\nThis course offers a unique, hands-on approach that goes beyond theory. You’ll complete coding activities and mini-projects in each module, allowing you to apply your knowledge in real-world scenarios. By the end of the course, you’ll have built multiple AI plugins that you can directly use in business environments.\nThis course also caters to both technical and business-focused learners. For developers, it provides in-depth technical insights into SK’s architecture and code practices. For business thinkers, it offers a high-level understanding of defining AI-driven solutions and transforming ideas into functional tools that align with organizational goals.\nPractical Applications of Your Knowledge:\nAfter completing this course, you’ll be ready to apply AI plugins in practical, business-enhancing ways, such as:\nAutomating Data Extraction and Reporting: Use plugins to pull insights from large datasets, generate reports, and perform routine data processing tasks, freeing up time for your team to focus on strategic projects.\nEnhancing Customer Support: Develop plugins that can analyze customer interactions, suggest relevant solutions, and respond to FAQs, improving customer service efficiency.\nBoosting Decision-Making Capabilities: Build AI-powered plugins that provide predictive insights, trend analysis, and data-driven recommendations for leaders and decision-makers.\nStreamlining Content Creation: Use Semantic Kernel to create tools that generate, summarize, and analyze content quickly, enabling teams to produce high-quality outputs with less effort.\nOptimizing Sales and Marketing Efforts: Integrate plugins into CRM systems to offer sales teams real-time insights on customer preferences, lead scoring, and personalization strategies.\nWho Should Enroll:\nThis course is ideal for:\nDevelopers and Software Engineers looking to expand their AI skillset and apply Semantic Kernel to build intelligent plugins.\nBusiness Analysts and Project Managers interested in learning how AI plugins can transform data into actionable insights and streamline business operations.\nTech-savvy business Thinkers who want to harness the power of AI to enhance their organization’s capabilities, even if they aren’t coding experts.\nTransform the Way You Build Business Solutions\nBy the end of this course, you’ll have the skills and confidence to create AI-powered plugins that can revolutionize business applications. Join us and take the next step in modernizing your organization's processes, enhancing productivity, and staying competitive in today’s data-driven world.",
      "target_audience": [
        "Business application developers",
        "Aspiring AI Developers"
      ]
    },
    {
      "title": "Managing EC2 and VPC: AWS with Python and Boto3 Series",
      "url": "https://www.udemy.com/course/aws-with-python-and-boto3-managing-ec2-and-vpc/",
      "bio": "Learn how to implement EC2 and VPC resources on AWS using Python API - Boto3! Implement your infrastructure with code!",
      "objectives": [
        "You'll be able to implement any sort of infrastructure on AWS with Python using VPCs, Subnets and EC2s!",
        "You'll learn how to code against AWS API using Python and Boto3!",
        "You'll learn how to launch EC2 Instances on AWS using Python and Boto3!",
        "You'll learn how to isolate and control your own infrastructure with Python using Route Tables, Internet Gateways, Security Groups and Rules!",
        "You'll have very good understanding of VPC concepts like Subnets, Route Tables and Internet Gateways by putting all into real-world practice with Python code!",
        "You'll be confident to work with AWS APIs using Python for any kind of AWS Resource on VPC and EC2 Instances!",
        "You'll learn how to read and code against an API documentation!",
        "You'll be able to launch your own infrastructure on AWS without even signing-in to AWS!"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "About This Course",
          "What We Will Build In This Course?",
          "What Do You Need For This Course?"
        ],
        "Preparing The Environment for Development": [
          "Section Overview",
          "About Tools and Environment",
          "Create an AWS Account If You Don't Already Have It!",
          "Logging in to AWS Console and A Walkthrough",
          "Let's Create Our AWS Credentials!"
        ],
        "Windows Environment Setup": [
          "Installing Python 3 and Pip",
          "Installing AWS SDK (CLI)",
          "Preparing CLI with AWS Credentials",
          "Installing Boto3",
          "Verifying The Setup"
        ],
        "MacOS Environment Setup": [
          "Installing Python 3 and Pip",
          "Installing AWS SDK (CLI)",
          "Preparing CLI with AWS Credentials",
          "Installing Boto3",
          "Verifying The Setup"
        ],
        "Virtual Private Cloud (VPC) with Boto3 - Part 1": [
          "Section Overview",
          "Scenario: AWS Console Perspective of What We'll Build",
          "Setting Up Our Project with PyCharm IDE",
          "Let's Check Out Boto3 API Docs!",
          "[Tip] Auto-Complete Magic with Pyboto3 on PyCharm IDE!",
          "Creating a Virtual Private Cloud (VPC)",
          "Adding Name Tag To An AWS Resource (VPC)",
          "Create an Internet Gateway (IGW)",
          "Attaching the Internet Gateway to VPC",
          "Section Summary"
        ],
        "Virtual Private Cloud (VPC) with Boto3 - Part 2": [
          "Section Overview",
          "Creating a Public Subnet",
          "Creating a Route Table for Public Routes",
          "Adding IGW Route to Route Table",
          "Associating Public Subnet with Public Route Table",
          "Allowing Auto-Assign Public IP Address on Subnet",
          "Creating a Private Subnet",
          "Section Summary"
        ],
        "Elastic Compute Cloud (EC2) with Boto3 - Part 1": [
          "Section Overview",
          "Scenario: AWS Console Perspective of What We'll Build",
          "Creating a Key Pair",
          "Creating a Security Group",
          "Adding a Rule to Security Group",
          "Creating a Startup Script for EC2 Instance",
          "Launching an EC2 Instance Within Our Public Subnet",
          "Launching an EC2 Instance Within Our Private Subnet",
          "!!! It's Time to Launch the Whole Infrastructure!",
          "Let's Check if Everything is Running on AWS Console!",
          "Connecting to EC2 Instance and Verifying Startup Script Works",
          "Checking Public Access for Private EC2 Instance",
          "Section Summary"
        ],
        "Elastic Compute Cloud (EC2) with Boto3 - Part 2": [
          "Section Overview",
          "Describing EC2 Instance",
          "Modifying EC2 Instance",
          "Stopping EC2 Instance",
          "Starting EC2 Instance",
          "Terminating EC2 Instance",
          "Section Summary"
        ],
        "Wrapping Up": [
          "What Have We Learned?",
          "What Comes Next?",
          "Thank You!"
        ]
      },
      "requirements": [
        "Beginner level of Python",
        "Any Python Interpreter. Default is fine but I recommend PyCharm",
        "An AWS Account - Free Tier Available!",
        "General Knowledge on AWS Model would be nice",
        "Theoretical Knowledge on VPC and EC2 Concepts would be nice but not necessary!"
      ],
      "description": "Do you want to learn how to implement VPC and EC2 resources with Python code on AWS? Do you want to launch EC2 Instances with Python code on AWS? Are you preparing for AWS Solutions Architect Associate Exam and want to put your theory and skills into practice with VPC and EC2? This is the course for you!\nIn this course, we’ll start by taking a look at the tools and the environment that we need to work with AWS resources. We’ll be using Python 3 and as per the IDE I recommend you to use PyCharm from Jetbrains. It has a free community edition even!\nAfter Iteach you how you can set up your environment on both MacOS and Windows, we’ll create our credentials for AWS as being the AWS Access Key and AWS Secret Access Key for programmatic access to AWS resources. You’ll learn how you can set your AWS credentials globally on your computers using AWS CLI. Before jumping into the implementation, for one last tip, I’ll show you how you can have auto-complete capabilities on your PyCharm IDE with PyBoto3!\nOnce we’re ready with our environment setup, we’ll start implementing our solution on AWS! And remember we’ll do everything with Python code; not a single thing manually or by hand! We’ll start by creating a VPC. For our own VPC, we’ll provide CIDR IP Block to isolate our resources within that VPC.\nThen we will create two subnets; Public and Private. Public Subnet will be where we will put our internet-facing resources like Public EC2 instances and we will definitely launch an EC2 instance in it! To achieve this, we will create an Internet Gateway or IGW and attach it to our VPC. But of course that is not enough. We will create a Route Table for public routes over the internet and also add our Internet Gateway to the Route Table to allow internet access to our Public EC2 Instance. We will also not forget to associate our Public Subnet with this Public Route table so it can be exclusively used by the Public Subnet and its subresources. And finally, we will modify our Public Subnet so it can automatically assign public IP addresses to the resources we will launch within this Public Subnet. That's the way we are going to achieve internet access to and from our Public EC2 Instance and again we will do all of that with our Python code!\nBesides, we will create a Private Subnet for our internal resources like a Private EC2 Instance which will only be accessible through the Private or Public Subnet; not open to the world. To achieve this, we will associate our Default Route Table with our Private Subnet and then we will not add our Internet Gateway to this Route Table so it will basically not have any internet access. We will also not enable auto-assign public IP addresses on Private Subnet which is disabled by default. That's basically how we are going to disable internet traffic on our Private EC2 Instance again we will do all this with our Python code!\nWe will not stop there of course so before we launch our Public EC2 Instance, we will develop a startup bash script to automatically run when we launch our EC2 Instance. In this script, we will first update our packages with yum package manager so we can stay up-to-date with the latest updates and security patches. Then we will install a HTTP server on it and make sure it's working by a startup check command. After we prepare our HTTP server, we will develop a simple HTML page as as greeting and we will write this page to disk to be served when we try to access our Public EC2 Instance. And remember, we will again do all of this with our Python code!\nAfter finishing up launching our EC2 Instances, we'll nove on to learn how to describe EC2 Instances on AWS in  detailed way; from their IP adresses to the subnet which they belong to. Then we'll learn how to learn how to manage EC2 Instances in various ways. We'll Stop, Start and Terminate EC2 Instances and again the best part is we will do all of that with our Python code!\nLots of information, hands-on practice and experience is waiting for you in this course on AWS. So, don't miss any more time and join me in this course to sharpen your skills on AWS using Python and Boto3!",
      "target_audience": [
        "Beginners on AWS who wants to put their theory in practice",
        "AWS Cloud Architect Associate Exam Preppers who wants to practice their theories with real projects",
        "Who wants to learn how to implement Infrastructure-as-a-Code or IaaS on AWS",
        "Who wants to learn how to develop infrastructures on AWS using Python",
        "Who wants to learn how to launch Virtual Private Clouds, Public-Private Subnets and more with Python code on AWS",
        "Who wants to learn how to launch EC2 Instances publicly and privately using Python on AWS",
        "Who wants to learn AWS Python API or namely Boto3"
      ]
    },
    {
      "title": null,
      "url": "https://www.udemy.com/course/csharp-for-beginners/",
      "bio": null,
      "objectives": [],
      "course_content": {},
      "requirements": [],
      "description": null,
      "target_audience": []
    },
    {
      "title": "30 Projects in 30 days of AI Development Bootcamp",
      "url": "https://www.udemy.com/course/25-projects-in-25-days-of-ai-development-bootcamp/",
      "bio": "Hands-on Mastery in AI Development: From Fundamentals to Real-World Applications(AI)",
      "objectives": [
        "Aspiring AI professionals: Individuals who want to build a strong foundation in AI, machine learning, and deep learning.",
        "Data scientists and analysts: Professionals seeking to upskill and integrate AI into their work.",
        "Developers and software engineers: Those interested in building AI-driven applications.",
        "Students and researchers: People studying AI or working on AI projects who want practical, hands-on experience."
      ],
      "course_content": {},
      "requirements": [
        "Access to a Development Environment",
        "Familiarity with Data Structures and Algorithms",
        "Basic Mathematics and Statistics",
        "Basic Programming Knowledge"
      ],
      "description": "This AI Development Bootcamp is designed to guide learners through a series of 30 practical projects, each aiming to build foundational skills and a solid understanding of various AI concepts and machine learning techniques. The course begins with simple and approachable projects, gradually moving into more complex applications. By the end, participants will have an impressive portfolio of projects that span across diverse areas such as natural language processing, image classification, recommendation systems, predictive modeling, and more. Each project offers a hands-on learning experience and focuses on a particular machine learning concept, algorithm, or tool.\nThe journey begins with creating a basic calculator using Python. This project introduces participants to coding logic and familiarizes them with Python syntax. Although simple, this project is essential as it lays the groundwork for understanding how to design basic applications in Python. From here, learners move to a more complex task with an image classifier using Keras and TensorFlow. This project involves working with neural networks, enabling learners to build a model that can distinguish between different classes of images. Participants will gain experience with training and validating a neural network, understanding key concepts such as activation functions, convolutional layers, and data preprocessing.\nA simple chatbot using predefined responses comes next, giving learners a taste of natural language processing. This project provides an introduction to building conversational agents, where the chatbot responds to user queries based on predefined rules. While it’s basic, it forms the foundation for more advanced NLP projects later on in the course. Moving on to the spam email detector using Scikit-learn, learners tackle text classification using machine learning. This project demonstrates how to process text data, extract relevant features, and classify messages as spam or not spam. Participants will work with techniques like TF-IDF vectorization and Naive Bayes, key tools in the NLP toolkit.\nHuman activity recognition using a smartphone dataset and Random Forest introduces the concept of supervised learning with time-series data. Here, participants will use accelerometer and gyroscope data to classify various physical activities. This project showcases the versatility of machine learning in handling complex, real-world data. Following this, sentiment analysis using NLTK allows learners to dive deeper into NLP by determining the sentiment behind text data. This project involves cleaning and tokenizing text, as well as using pre-built sentiment lexicons to analyze emotional undertones in social media posts, reviews, or comments.\nBuilding a movie recommendation system using cosine similarity is another exciting project. Here, participants learn to create collaborative filtering systems, which are essential for personalizing user experiences in applications. By comparing user preferences and suggesting movies similar to what they have previously liked, participants gain insights into how recommendation engines function in popular platforms. Predicting house prices with linear regression then brings the focus back to supervised learning. Using historical data, learners build a model to predict house prices, introducing them to the basics of regression, data cleaning, and feature selection.\nWeather forecasting using historical data takes learners through time-series prediction, an essential skill for handling sequential data. Participants will explore different modeling approaches to forecast weather trends. Following this, the bootcamp covers building a basic neural network from scratch. Here, participants write their own implementation of a neural network, learning about the intricacies of forward and backward propagation, weight updates, and optimization techniques. This project offers a hands-on approach to understanding neural networks at a granular level.\nThe course then progresses to stock price prediction using linear regression. This project teaches learners how to apply predictive modeling techniques to financial data, examining trends and patterns in stock prices. Predicting diabetes using logistic regression covers binary classification, where learners will predict the likelihood of diabetes in patients based on medical data. This project emphasizes the importance of healthcare data analytics and gives participants practical experience in building logistic regression models.\nThe dog vs. cat classifier project with a CNN introduces convolutional neural networks. This is a key project in image classification, as participants work on creating a model that differentiates between images of cats and dogs. With this project, learners gain a practical understanding of how CNNs work for image recognition tasks. Next, the Tic-Tac-Toe AI using the Minimax Algorithm introduces the concept of game theory and decision-making. The AI will learn to play optimally, providing participants with a foundation in developing game AI.\nIn credit card fraud detection using Scikit-learn, participants work on building a model that can identify fraudulent transactions, focusing on anomaly detection techniques. This project is highly applicable in financial services and demonstrates the importance of data-driven fraud detection systems. For Iris flower classification, learners utilize decision trees, one of the most interpretable machine learning algorithms. This project provides insight into how decision boundaries are formed and how simple classification algorithms operate.\nBuilding a simple personal assistant using Python speech libraries allows learners to integrate speech recognition and text-to-speech features. This project enhances programming skills in creating voice-activated applications. The text summarizer using NLTK helps participants explore text summarization techniques, which are useful in applications that require condensing information from large documents or articles. In fake product review detection, participants delve into NLP for identifying deceptive reviews, building skills that are crucial in maintaining integrity on e-commerce platforms.\nDetecting emotion in text using NLTK introduces emotion analysis, where participants will learn to classify text into categories such as happiness, sadness, anger, and more. This project is highly relevant for applications that require sentiment and emotion recognition. The book recommendation system using collaborative filtering is a practical extension of earlier recommendation techniques, allowing participants to explore more advanced methods for user personalization. Predicting car prices with Random Forest further reinforces regression and classification skills. Participants work on modeling car pricing, which is relevant in automotive industry applications.\nThe course also includes identifying fake news using Naive Bayes, a critical skill in today’s information landscape. Participants will learn techniques to detect misinformation, equipping them with skills to work on data integrity projects. In the resume scanner using keyword extraction, learners create a tool for analyzing resumes and identifying relevant skills based on job descriptions. This project provides insights into how text matching can be used in HR applications. Finally, the customer churn prediction project teaches participants how to model customer behavior and predict churn, which is crucial for customer retention strategies in many industries.\nThroughout the course, each project builds on the concepts learned in previous projects, creating a comprehensive learning path. By working through these projects, participants will develop strong skills in data preprocessing, feature engineering, model training, evaluation, and deployment. They will also learn to work with different types of data, from text and images to time-series and tabular data. This bootcamp is structured to accommodate both beginners and those with some programming experience, providing a gradual learning curve that leads to increasingly complex applications.\nWith each project, learners not only build technical skills but also improve problem-solving abilities. The course emphasizes real-world applications, helping participants see how AI techniques are used in industries such as finance, healthcare, e-commerce, entertainment, and more. The hands-on approach encourages creativity and experimentation, allowing learners to adapt and improve their models based on project requirements. By the end of the course, participants will have completed a diverse portfolio of projects that demonstrate their proficiency in AI and machine learning, giving them the confidence to tackle AI challenges independently.\nThe bootcamp format is intensive but highly rewarding, designed to keep learners motivated and engaged. By dedicating a day to each project, participants immerse themselves in learning without overwhelming complexity, ensuring steady progress. The projects are structured to introduce core AI techniques incrementally, helping learners grasp each concept thoroughly before moving on to the next. This bootcamp is a unique opportunity to acquire industry-relevant skills in a short period, making it ideal for anyone interested in breaking into the field of AI or enhancing their technical abilities.",
      "target_audience": [
        "Aspiring AI Professionals: Individuals who want to break into the field of artificial intelligence and machine learning. Whether you are a beginner or someone with a technical background looking to transition into AI, this course will provide a comprehensive and practical foundation.",
        "Data Scientists and Analysts: Professionals working with data who want to upskill and incorporate AI and machine learning techniques into their data analysis pipelines. This course will help data professionals apply AI techniques to enhance data-driven decision-making.",
        "Software Engineers and Developers: Developers with experience in software engineering who are looking to dive into AI-driven development, build machine learning models, and integrate AI solutions into their applications.",
        "Students and Researchers: University students, Ph.D. candidates, or academic researchers interested in AI for academic projects or advancing their careers in academia or industry research roles. This course will give them hands-on experience with AI tools and frameworks.",
        "Tech Enthusiasts and Self-learners: Enthusiasts and hobbyists who are passionate about AI and want to gain a structured and practical approach to understanding AI concepts, machine learning algorithms, and how to apply them in real-world scenarios."
      ]
    },
    {
      "title": "System Design Bootcamp : Crack Interviews and Build Systems",
      "url": "https://www.udemy.com/course/system-design-bootcamp/",
      "bio": "Crack System Design Interview and Build Systems that Scales with Ease using the Best System Design Patterns.",
      "objectives": [
        "Will Able to Crack System Design Interviews.",
        "Fully Capable of building Systems that Scales.",
        "Showcase System Design Knowledge in front of Employers.",
        "Solid Foundation of System Design Concepts.",
        "Connecting Different Parts of Real World Systems.",
        "System Design Patterns that are Robust."
      ],
      "course_content": {
        "Introduction to Latency and Througput": [
          "Introduction to the Course",
          "Latency in Systems",
          "Throughput",
          "Availability"
        ],
        "Load Balancing": [
          "Load Balancers in System Design",
          "Server Selection Strategy"
        ],
        "Proxy in Systems": [
          "Forward Proxy",
          "Reverse Proxy"
        ],
        "Caching in System Design": [
          "Introduction to Caching",
          "Caching Strategies in System Design",
          "Stale Cache"
        ],
        "Hashing [Important]": [
          "Introduction to Hashing",
          "Consistent Hashing"
        ],
        "Replication and Sharding [Important]": [
          "Replication",
          "Sharding"
        ],
        "Leader Election [Important]": [
          "Introduction to Leader Election",
          "Consensus Algorithm",
          "Not Related Course"
        ],
        "Publish & Subscribe [Important]": [
          "Introduction to Publish & Subscribe",
          "Properties of Publish & Subscribe"
        ],
        "Facebook News Feed [System Design]": [
          "Requirement Analysis or Clarifying Question to Ask",
          "News Feed System Design"
        ],
        "Stockbroker [System Design]": [
          "Requirement Analysis",
          "Stockbroker System Design"
        ]
      },
      "requirements": [
        "Willingness to learn something new.",
        "Internet.",
        "Nothing Else. This course is built for absolute beginners."
      ],
      "description": "Have you heard that System Design skill is essential for developers to be skilled in and understand?\nDo you want to learn Architecting Systems and Crack Interview problems with ease?\nMaybe you want to learn System Design from Scratch but have not found a good place to learn.\nOr perhaps you are a developer who wants to improve your career options by having skills in Designing and architecting systems, one of the most demanded expertise in the industry.\n\nWhatever the reason you have arrived here, this course will...\nHelp you understand and apply System Design Principles, including its various domains and options.\nHaving Architecting and System Designing skills is vital for developers to crack interviews and maximize job and consulting opportunities.\nKey concepts you will learn and work on within this course.\nPublish-Subscribe pattern\nLeader Election\nReplication and Sharding\nLoad Balancing\nHashing\nProxy\nAvailability\nLatency\nCaching\n\n\nWhy enrolling in this course is the best decision you can make.\nBecome skilled in System Design often require multiple courses.  However, you learn all those topics and data analysis in this one course.\nEssentially, you are learning from someone who has all the professional training, skills, and experience needed to teach you how to become proficient and  Crack System Design Interviews quickly as possible.\n\nIf you are ready to get that first paid programming job or move up to a more senior programming position, this course is for you!\nAfter completing this course, you will have the necessary skills to use System Design concepts confidently,\nThe sooner you sign up for this course, the sooner you will have the skills and knowledge you need to increase your job or consulting opportunities.\n\nSystem Design skills are required to crack interviews and create real-world systems, and you will understand and be able to use both after going through this course.\n\nYour new job or consulting opportunity awaits!\nWhy not get started today?\nClick the Signup button to sign up for the course!",
      "target_audience": [
        "Anyone want to crack System Design Interviews.",
        "Anyone want to build Systems that Scales.",
        "Anyone want to showcase System Design Knowledge in front of Employers",
        "Anyone want to use modern System Design Patterns",
        "Anyone want to learn how a bigger systems interacts."
      ]
    },
    {
      "title": "Become a Successful Software Programming Developer/ Engineer",
      "url": "https://www.udemy.com/course/how-to-become-a-successful-software-programming-developer/",
      "bio": "A software development / engineering course to also learn advanced topics like Vibe Coding, Drone Programming, DevSecOps",
      "objectives": [
        "What all to do to become a successful Software Developer-Overview",
        "What to learn and practice to become a software developer",
        "How to prepare for software developer interviews",
        "How to apply for software development internship and jobs",
        "How to explore career growth in software development",
        "Latest advances like Vibe Coding"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Overview": [
          "Overview I",
          "Overview I",
          "Overview II",
          "Overview II",
          "Overview III",
          "Overview III"
        ],
        "Setting your goals": [
          "Setting your goals I",
          "Setting your goals I",
          "Setting your goals II",
          "Setting your goals II",
          "Setting your goals III",
          "Setting your goals III"
        ],
        "Learning the Basics": [
          "Learning the Basics I",
          "Learning the Basics I",
          "Learning the Basics II",
          "Learning the Basics II",
          "Learning the Basics III",
          "Learning the Basics III",
          "Learning the Basics IV",
          "Learning the Basics IV"
        ],
        "Practice Coding": [
          "Practice Coding I",
          "Practice Coding I",
          "Practice Coding II",
          "Practice Coding II"
        ],
        "Version Control Systems like Git": [
          "Version Control Systems like Git I",
          "Version Control Systems like Git I",
          "Version Control Systems like Git II",
          "Version Control Systems like Git II"
        ],
        "Build a Portfolio": [
          "Build a Portfolio I",
          "Build a Portfolio I",
          "Build a Portfolio II",
          "Build a Portfolio II"
        ],
        "How to specialize in a specific area": [
          "How to specialize in a specific area I",
          "How to specialize in a specific area I",
          "How to specialize in a specific area II",
          "How to specialize in a specific area II"
        ],
        "Networking": [
          "Networking I",
          "Networking I",
          "Networking II",
          "Networking II"
        ],
        "Collaborate and Contribute": [
          "Collaborate and Contribute I",
          "Collaborate and Contribute I",
          "Collaborate and Contribute II",
          "Collaborate and Contribute II",
          "Collaborate and Contribute III",
          "Collaborate and Contribute III",
          "Collaborate and Contribute IV",
          "Collaborate and Contribute IV",
          "Collaborate and Contribute V",
          "Collaborate and Contribute V"
        ]
      },
      "requirements": [
        "5-6 hours time"
      ],
      "description": "Want to become a Successful Software Developer / Engineer but don’t know where to start?\nTake a look at this course where you will\nNot only learn what to learn and do in a focused way to become a successful software developer / Engineer but also\nUnderstand how to learn and do all it takes to become a successful software developer / Engineer.\nPreview many lectures for free to see the content for yourself\nGet Udemy’s 30 days Money Back Guarantee\nGet 4 bonus lectures of my new courses every month through educational announcements  in your email\nEnroll for free in my any other course using the coupon link in my YouTube channel videos from time to time subject to availability\nMy exposure to aspiring Software Developers & Engineers started in 2020 when I started coaching the engineering students of two universities in Udaipur (Rajasthan, India) to get a job they wanted from the campus placements.\nI came across many computer science and computer application undergraduates and postgraduates students who did not know what to do to become a successful software developers or engineers.\nWhile they are learning programming languages like HTML, C++, Java, Python etc, they did not have a game plan to become a successful software developer\nI went on the journey of helping these students prepare a game plan for themselves and the results were very satisfying\nI bring in this course my learnings from this journey and sharing with you how can you also become a Successful Software Developer\nLook at what are the other students saying about this course\n\"Amazing\"\n\"This course was great and eye-opening for me. I realized I was facing a lot of challenges in pursuing my career as a software engineer because I was not well-oriented, but this course went more than only orienting me but gave me the aspiration of not only becoming a software engineer but a successful Software Engineer and Developer. Thanks for this eye-opening course\"\n\"Super helpful\"\n\"ossam\"\n\"Is getting to the point, pretty much straight to what I need to know\"\n\"This course is indeed very helpful and a good advice especially since I am a graduating student.\"\n\"i really like this my instructor is very good\"\n\"perfect\"\n\"Thanks . it's very useful course . I learned so much\"\n\"Very good\"\n\"Good experience\"\n\"The lectures are well explained\"\n\"Good Foundation for Newbie Programmer\"\n\"It was a good try. i learnt a lot\"\n\"He's explaining the course well.\"\n\"The course materials were well-organized and easy to follow\"\n\"The course is well detailed\"\nPreview for yourself many lectures free. If you like the content, enrol for the course, enjoy and skill yourself to Become a Successful Software Developer / Engineer! If don't like the content, please message about how can we modify it to meet your expectations.\nPlease remember that this course comes with Udemy’s 30 days Money Back Guarantee",
      "target_audience": [
        "Anyone who wants to become a software developer but does not know where to start"
      ]
    },
    {
      "title": "DevOps For Beginners: Saving Your Code From The Apocalypse",
      "url": "https://www.udemy.com/course/devops-saving-your-code-from-the-apocalypse/",
      "bio": "What does DevOps mean? How does it benefit you? And what are the steps for a perfect Software Development Life Cycle?",
      "objectives": [
        "What is DevOps all about?",
        "How does a Software Development Life Cycle look like?",
        "The phases of DevOps: Plan, Build, Continuous Integration, Deploy, Operate, Feedback & Communication.",
        "Great tools to implement the DevOps practices.",
        "Agile Software Development with Scrum & Kanban",
        "Continuous Integration with GitLab"
      ],
      "course_content": {
        "What is DevOps all about?": [
          "Definition, Emotions & Theory of a Software Development Lifecycle",
          "DevOps Magic - also known as the DevOps Life Cycle & Benefits"
        ],
        "DevOps Life Cycle": [
          "Introduction",
          "Communication",
          "Plan",
          "Agile Software Development with Scrum",
          "Kanban (with Trello)",
          "Build",
          "Source Control with Git",
          "Containers",
          "Continuous Integration",
          "Deploy",
          "Operate",
          "Feedback",
          "Summary"
        ]
      },
      "requirements": [
        "There are no requirements or prerequisites!"
      ],
      "description": "DevOps is a term every single software developer will stumble upon in his or her career.\nBut what does it actually mean? Do you have to care as a developer? Definitely!\nBecause DevOps will make your developer life easier. Much easier.\nIn essence, DevOps is “a set of practices that combines software development (Dev) and information-technology operations (Ops) which is intended to reduce the time between committing a change to a system and the change being placed into normal production, while ensuring high quality.”\nIn this course, you will learn what these practices are and how they work. We’ll cover the following phases of DevOps.\n\n\nCommunication\nThe crucial part of every software development project. Without the right way and the right tools to communicate with your team, failure is guaranteed. Get to know the best tool to make your project successful.\n\n\nPlan\nBefore you start implementing any features. You have to plan your project and your tasks. In the past, people used the outdated waterfall model for planning. Nowadays, agile development is the way to go. Learn how to implement the agile software development frameworks Scrum and Kanban and what services you can use for free.\n\n\nBuild\nHere’s where the actual work is happening. But it’s not only about the right IDE or your particular programming language. We’re talking about managing and tracking your code here. Learn how to use the right source control system like Git and how powerful this is.\n\n\nContinuous Integration\nDevOps is all about automation. With continuous integration, you’ll learn how to automatically build your code, run automated tests - like unit or integration tests - and finally deploy your application to a server. There are wonderful services for that. Once you see how much time you can save, you’ll never want to go back.\n\n\nDeploy\nYou can deploy your application on a self-hosted server or you can use any of the many platform services out there. Get an overview of what services like Microsoft Azure, Amazon Web Services and the Google Cloud Platform can do for you and how you can use them for free.\n\n\nOperate\nAnother part of DevOps is monitoring your servers and applications. Apart from that you also want to log certain events and send notifications in special cases. Of course, there are services for that or you can do that by yourself. It might be easier than you think.\n\n\nFeedback\nAt the end of the DevOps circle, you want your users to give you feedback and also give feedback to them. It’s about IT Service Management (ITSM), Customer Relationship Management (CRM) and, perhaps most important, issue or bug tracking.\n\n\nWhat are you waiting for? Learn all about DevOps right now.\n\n\nCourse Image: Romolo Tavani/Shutterstock",
      "target_audience": [
        "Everyone who wants to improve the developer's life with DevOps."
      ]
    },
    {
      "title": "Java Spring Framework 6, Spring Boot 3, Spring AI Telusko",
      "url": "https://www.udemy.com/course/spring-5-with-spring-boot-2/",
      "bio": "Master Java, Spring 6 and Spring Boot 3 , Spring JPA, Security, Spring AI, Docker and Microservices with Telusko",
      "objectives": [
        "Core Java",
        "Spring Boot",
        "Spring Core - IoC",
        "Spring MVC",
        "Spring AOP",
        "Spring Data JPA",
        "Spring REST",
        "Spring Security",
        "Docker",
        "Microservices",
        "Spring AI"
      ],
      "course_content": {
        "Course Introduction": [
          "Course Introduction",
          "[Important] Access for Source Code and Learner Community"
        ],
        "Core Java": [
          "Introduction of Java",
          "JDK setup",
          "Intellij Idea Setup",
          "First code in Java",
          "First code Setup",
          "How Java Works",
          "Variables",
          "Data Types",
          "Variables & data types Coding Exercise",
          "Literal",
          "Type Conversion",
          "Quiz 1",
          "Arithmetic Operators",
          "Relational Operators",
          "Logical Operators",
          "Mastering Java Operators: Arithmetic, Relational, and Logical in Action",
          "If Else",
          "If Else If",
          "Ternary",
          "Switch Statement",
          "Java Conditionals: Evaluate Student Result with If-Else and Grading Logic",
          "Need For Loop",
          "While Loop",
          "Do While Loop",
          "For Loop",
          "Which Loop To Use",
          "Quiz 2",
          "Mastering Loops in Java: For, While, and Do-While in Action",
          "Smart Console Calculator: Advanced Exercise: Build Your First Java Program That Thinks",
          "Class And Object Theory",
          "Class and Object Practical",
          "JDK JRE JVM",
          "Methods",
          "Method Overloading",
          "Stack And Heap",
          "Need of Array",
          "Creation of Array",
          "Multi Dimensional Array",
          "jagged and 3D Array",
          "Drawbacks of Array",
          "Array of Objects",
          "Enhanced for loop",
          "Working with Arrays in Java: From Basics to Enhanced For Loops",
          "What is String",
          "Mutable vs Immutable string",
          "StringBuffer and StringBuilder",
          "Static Variable",
          "Static method",
          "Static block",
          "Encapsulation",
          "Getters and setters",
          "This keyword",
          "Constructor",
          "Default vs Parameterized Constructor",
          "Naming Convention",
          "Anonymous Object",
          "Need of Inheritance",
          "What is Inheritance",
          "Single and Multilevel inheritance",
          "Multiple Inheritance",
          "This and super method",
          "Method Overriding",
          "Packages",
          "Access Modifiers",
          "Polymorphism",
          "Dynamic Method Dispatch",
          "Final keyword",
          "Object Class equals toString hashcode",
          "Upcasting and Downcasting",
          "Wrapper Class",
          "Quiz 3",
          "Exploring OOP in Java: Classes, Objects, Inheritance, and Core Principles",
          "Java Developer Interview Simulation – Core Concepts with Harsh"
        ],
        "Advance Java": [
          "Project 1- Introduction",
          "Project 1- QuestionService and Question class",
          "Project 1- Hard Coded Questions and Display them",
          "Project 1- Play Quiz",
          "Project 1- Calculate Score",
          "Abstract keyword",
          "Inner class",
          "Anonymous Inner class",
          "Abstract and Anonymous Inner Class",
          "What is Interface",
          "More on Interfaces",
          "Need of Interface",
          "What is Enum",
          "Enum if and switch",
          "Enum Class",
          "What is Annotation",
          "Types of Interface",
          "Functional Interface New",
          "Lambda Expression",
          "Lambda Expression with return",
          "What is Exception",
          "Exception Handling using try catch",
          "Try with multiple catch",
          "Exception Hierarchy",
          "Exception throw keyword",
          "Custom Exception",
          "Ducking Exception using throws",
          "User Input using BufferedReader and Scanner",
          "Try with resources",
          "Threads",
          "Multiple Threads",
          "Thread Priority and Sleep",
          "Runnable vs Thread",
          "Race Condition",
          "Thread states",
          "Collection API",
          "ArrayList",
          "Set",
          "Map",
          "Comparator vs Comparable",
          "Need of Stream API",
          "forEach Method",
          "Stream API",
          "Map Filter Reduce Sorted",
          "ParallelStream in Java",
          "Optional class in Java",
          "Method Reference",
          "Constructor Reference",
          "Quiz 4",
          "Java Developer Interview Simulation – Abstraction to Streams Mastery with Gaurav"
        ],
        "Maven": [
          "Maven Introduction",
          "Maven in IDE",
          "Getting Dependencies",
          "Effective POM",
          "Maven Archetype",
          "Maven in Eclipse",
          "How Maven Works",
          "Quiz 5",
          "Maven Setup & Build Clarity at Telusko with Sushil"
        ],
        "JDBC (Java Database Connectivity)": [
          "JDBC Introduction",
          "Postgres Setup",
          "JDBC Steps",
          "Postgres Library jar",
          "Connecting Java and DB",
          "Execute and Process",
          "Fetching all Records",
          "Crud operations",
          "Problems with Statement",
          "PreparedStatement",
          "Quiz 6",
          "Real-Time JDBC Interview with Shramik– Connecting Java to PostgreSQL"
        ],
        "Hibernate": [
          "Hibernate Update Version",
          "Hibernate Section Introduction",
          "What is Hibernate",
          "Project setup",
          "Failed attempt to save data",
          "Successful attempt to save data",
          "Show SQL config",
          "Refactoring",
          "Fetching the data",
          "Update and Delete Objects",
          "Changing Table and Column names",
          "Embeddable",
          "Mapping Relationship Theory",
          "OneToOne Mapping",
          "OneToMany and ManyToOne",
          "Manytomany Mapping",
          "Hibernate Eager And Lazy Fetch",
          "Hiberntae Caching",
          "HQL Introduction",
          "Fetching Data using HQL",
          "Fetching with filter and specific properties",
          "Get vs Load",
          "Level 2 cache using Ehcache",
          "Quiz 7",
          "Hibernate Interview Simulation with Lumina"
        ],
        "Spring Getting Started": [
          "Introduction To Spring",
          "Spring Docs",
          "Prerequisites",
          "IDE For Spring",
          "IoC And DI",
          "Spring Vs Spring Boot",
          "First Spring Boot App",
          "DI Using Spring Boot",
          "Autowiring In Spring Boot",
          "Quiz 8",
          "Spring Interview Simulation with Lyra"
        ],
        "Exploring Spring Framework": [
          "Spring 1st Project",
          "Spring Bean Xml Config",
          "Object Creation",
          "Scopes",
          "Setter Injection",
          "Ref Attribute",
          "Constructor Injection",
          "Creating Interface",
          "Autowiring",
          "Primary Bean",
          "Lazy Init Bean",
          "Getbean By Type",
          "Inner Bean",
          "Quiz 9",
          "Spring XML Configuration & Bean Management – Interview Simulation with Ishan"
        ],
        "Working with Java Based Configuration": [
          "Java Based Config",
          "Bean Name",
          "Scope Annotation",
          "Autowire",
          "Primary And Qualifier",
          "Component Stereotype Annotation",
          "Autowire Field, Constructor, Setter",
          "Primary Annotation",
          "Scope And Value Annotation",
          "Quiz 10",
          "Java-Based Spring Configuration - Interview Simulation with Eva"
        ],
        "Moving to Spring Boot": [
          "Spring To Spring Boot",
          "Using Annotations In Spring Boot",
          "Different Layers",
          "Service Class",
          "Repository Layer",
          "Quiz 11",
          "Transitioning to Spring Boot – Backend Interview at Telusko with Naman"
        ]
      },
      "requirements": [
        "Knowledge of SQL and databases is helpful",
        "Basic Knowledge of HTML is helpful"
      ],
      "description": "Java is the most used enterprise language.\nLearn Java Spring from basics to mastery.\nNew addition : Spring AI\nSpring 6 is a functional web framework for back-end development and is quite famous among Java developers when it comes to designing an enterprise-based application.\n\nIt consists of lots of modules and projects, which makes it very huge.\nThe Spring Framework and Spring Boot enable developers to create high-performing, reusable, easily testable, and loose-coupling enterprise Java applications\nIt can be used to develop any Java application.\n\nKnowledge of Spring Framework has a huge demand in the enterprise market, and Spring Framework developers are paid handsomely.\nHaving Spring Framework on your resume will highlight you among other Java developers.\n\nThis course offers hands-on experience building Spring Framework apps using Spring Boot.\nThis course will be interactive and fun, as I will code all the projects from scratch.\nBy taking this course, you will have the latest skills that you need to build real apps using the Spring Framework.\n\nRequirements for this Course:\nBasic Knowledge of HTML is helpful\nKnowledge of SQL and databases is helpful\nLearn these important topics\nJava\nJDBC\nMaven\nSpring Boot\nSpring Core (IoC)\nSpring MVC\nSpring AOP\nSpring Data JPA\nSpring REST\nSpring Security\nSpring AI\nDocker\nMicroservices\n\nWho this course is for:\n\nThe course is for all Java developers, from beginners to advanced, who want to master Spring framework modules with Spring Boot\nThis learning path is for developers who wish to create their own web apps with Spring 6\nThis course is ideal for developers who wish to use the Spring Frameworks for enterprise application development",
      "target_audience": [
        "The course is for all Java developers: beginners to advanced who want to master Spring framework modules with Spring Boot",
        "This learning path is for developers who wish to create their own web applications with Spring 5",
        "This course is ideal for developers who wish to use the Spring Frameworks for enterprise application development"
      ]
    },
    {
      "title": "Learning Data Structures and Algorithms",
      "url": "https://www.udemy.com/course/learning-data-structures-and-algorithms/",
      "bio": "Implementation and Analysis for Increased Software Performance",
      "objectives": [
        "Learn to analyze and implement common algorithms",
        "Learn about different types of Data Structures",
        "Complexity Theory"
      ],
      "course_content": {
        "Introduction": [
          "Important - Download These First - Working Files",
          "Introduction And Course Overview",
          "How To Access Your Working Files"
        ],
        "Complexity Theory": [
          "Complexity Theory",
          "Big O Notation",
          "Typical Runtime Functions",
          "Comparing Runtime Functions",
          "P And NP"
        ],
        "Numerical Algorithms": [
          "Random Numbers",
          "Linear Congruential Generators",
          "Randomizing Arrays - Part 1 - Randomization Algorithm",
          "Randomizing Arrays - Part 2 - Randomize Two-Dimensional Array",
          "GCD",
          "LCM",
          "Prime Factorization - Part 1 - Factor",
          "Prime Factorization - Part 2 - Factoring Algorithm",
          "Finding Primes",
          "Testing Primality",
          "Numerical Integration"
        ],
        "Linked Lists": [
          "Singly Linked Lists - Part 1 - Explanation",
          "Singly Linked Lists - Part 2 - Sentinels",
          "Sorted Linked Lists",
          "Sorting With Linked Lists",
          "Doubly Linked Lists"
        ],
        "Arrays": [
          "One-Dimensional Arrays",
          "Triangular Arrays - Part 1 - How to Build This Array",
          "Triangular Arrays - Part 2",
          "Sparse Arrays - Part 1 - A linked List of Linked Lists",
          "Sparse Arrays - Part 2"
        ],
        "Stacks And Queues": [
          "Stacks",
          "Stack Algorithms",
          "Double Stacks",
          "Queues"
        ],
        "Sorting": [
          "Sorting Algorithms",
          "Insertionsort",
          "Selectionsort",
          "Quicksort - Part 1 - Fast Sorting Alogorithm",
          "Quicksort - Part 2 - Algorithm Runtime Behaviour",
          "Heapsort - Part 1",
          "Heapsort - Part 2",
          "Heapsort - Part 3",
          "Mergesort - Part 1",
          "Mergesort - Part 2",
          "Bubblesort - Part 1",
          "Bubblesort - Part 2",
          "Countingsort - Part 1",
          "Countingsort - Part 2",
          "Sorting Summary"
        ],
        "Searching": [
          "Linear Search",
          "Binary Search",
          "Interpolation Search"
        ],
        "Hash Tables": [
          "Hash Tables",
          "Chaining",
          "Open Addressing - Basics",
          "Open Addressing - Linear Probing",
          "Open Addressing - Quadratic Probing",
          "Open Addressing - Double Hashing"
        ],
        "Recursion": [
          "Recursion Basics",
          "Fibonacci Numbers",
          "Tower Of Hanoi",
          "Koch Curves",
          "Hilbert Curves",
          "Gaskets",
          "Removing Tail Recursion",
          "Removing Recursion With Stacks",
          "Fixing Fibonacci",
          "Selections",
          "Permutations"
        ]
      },
      "requirements": [
        "This course is designed for the absolute beginner, meaning no previous programming experience is required."
      ],
      "description": "In this Learning Data Structures and Algorithms training course, expert author Rod Stephens will teach you how to analyze and implement common algorithms used. This course is designed for the absolute beginner, meaning no previous programming experience is required.\n\nYou will start by learning about the complexity theory, then jump into learning about numerical algorithms, including randomizing arrays, prime factorization, and numerical integration. From there, Rod will teach you about linked lists, such as singly linked lists, sorted, and doubly linked lists. This video tutorial also covers arrays, stacks and queues, and sorting. You will also learn about searching, hash tables, recursion, and backtracking algorithms. Finally, you will cover trees, balanced trees, decision trees, and network algorithms.\n\nOnce you have completed this computer based training course, you will be fully capable of analyzing and implementing algorithms, as well as be able to select the best algorithm for various situations. Working files are included, allowing you to follow along with the author throughout the lessons.",
      "target_audience": [
        "Anyone interested in learning about Data structures and Algorithms"
      ]
    },
    {
      "title": "Algorithms and Data Structures in C++ (2020)",
      "url": "https://www.udemy.com/course/algorithms-and-data-structures-in-c-coding-interview/",
      "bio": "Learn Algorithms and Data structures in C++, get ready for enginnering interview",
      "objectives": [
        "Explain and Use Sorting Algorithms",
        "Construct Efficient Algorithms",
        "Explain and Use Data Structures",
        "Solve Problems"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Resources",
          "Say Hello"
        ],
        "Sorting Algorithms": [
          "Sorting Problem",
          "Selection Sort",
          "CODE | Selection Sort",
          "Bubble Sort",
          "CODE | Bubble Sort",
          "Recursion",
          "CODE | Recursion",
          "Merge Sort",
          "CODE | Merge Sort",
          "Quick Sort",
          "CODE | Quick Sort",
          "Comparing",
          "CODE | Comapring",
          "Sorting Algorithms"
        ],
        "Time Complexity": [
          "What is Time Complexity?",
          "Big O Notation"
        ],
        "Data Structures": [
          "What is Data Structure",
          "Binary search tree",
          "CODE | Binary Search Tree",
          "AVL tree",
          "AVL tree (insertion)",
          "AVL tree (deletion)",
          "CODE | AVL tree",
          "Linked List",
          "CODE | Linked List",
          "Trie",
          "CODE | Trie",
          "Hash Table",
          "CODE | Hash Table",
          "Data Structures"
        ],
        "Problem solving techniques": [
          "Divide and Conquer",
          "Dynamic Programming",
          "Greedy approach",
          "Backtracking"
        ],
        "Complex Problems": [
          "0-1 Knapsack problem",
          "Kruskal's algorithm",
          "Dijkstra's Shortest Path algorithm"
        ]
      },
      "requirements": [
        "Basic knowledge of programming (conditions, loops, variables)",
        "How pointers work"
      ],
      "description": "This course will give you ability to solve problems, most people focus on programming language, but people offten forget about algorithms.\nAlgorithms are definetly more important than programming language, you can learn programming language in about week, but problem solving ability is much harder to learn. But the benefits are worth it.\nWhen you get to interview mostly they care about your problem solving abilities.\nTo get your dream job, you need to know how to solve whatever problem they have. In this course you will learn how to do that.\nAlso I belive that nobody have time for long and booring lectures, so in this class I try to explain the important things in a fast and engaging way, so I won't bore you to death.\nWe start off with Sorting algorithms, I explain each algorithm and then I show you implementation in C++.\nAfter that we take a look at Data Structures, I chosed In my opinion the best Structures for you to learn the important concepts.\nAs a bonus I go through complex problem solving techniques. And I show you how these works on common examples such as Knapsack and Minimum spanning tree.\nI belive that  learning and understanding these concepts will help you solve problems more efficiently.",
      "target_audience": [
        "Anyone who wants to improve their Problem Solving skils",
        "Anyone who wants to learn Data Structures",
        "Anyone who wants to learn Algorithms"
      ]
    },
    {
      "title": "WireMock for Java Developers",
      "url": "https://www.udemy.com/course/wiremock-for-java-developers/",
      "bio": "Learn to build robust RESTFUL API Clients, Service Virtualization in Java and SpringBoot applications using WireMock.",
      "objectives": [
        "This course will help the students to learn about “how to write unit tests” which involves RESTFUL API integrations.",
        "Build REST API Clients using Spring Webclient",
        "Write Unit Tests that covers all the possible scenarios in a REST based interaction",
        "Mock an External Service using WireMock",
        "Build a robust REST Client by simulating Network Errors",
        "Build a robust REST Client by simulating Network Latency",
        "Unit Test the timeout of the REST Client"
      ],
      "course_content": {
        "Getting Started with Course": [
          "Course Introduction & Objectives",
          "Pre-Requesities"
        ],
        "Introduction to WireMock": [
          "Why WireMock?",
          "What is WireMock ?",
          "WireMock vs Mocking Libraries"
        ],
        "Slides for the course": [
          "Slides for the course"
        ],
        "Setting up the WorkSpace for the course": [
          "Overview of the application",
          "Source Code",
          "Set up the Movies RESTFUL Service",
          "Exploring the Movies RESTFUL Service [Optional]"
        ],
        "Build RESTFUL Clients using Spring WebClient": [
          "Setting up the Movies App",
          "RestTemplate vs Spring WebClient",
          "Setting up the Movies Domain",
          "Build Movies REST Client using Spring WebClient",
          "Build Movies REST Client test using JUnit5",
          "WebClient - Retrieve Movie by Movie-ID",
          "WebClient - Retrieve Movie by Movie-Name",
          "WebClient - Retrieve Movie By Year",
          "WebClient - Add a new Movie - HTTP POST",
          "WebClient - Update a Movie - HTTP PUT",
          "WebClient - Delete a Movie - HTTP DELETE"
        ],
        "Setting Up WireMock": [
          "Configuring WireMock"
        ],
        "Build Stubs Using WireMock - Hands On": [
          "Overview",
          "Create the very first WireMock Stub",
          "How WireMock works Behind the scenes and Matches the Stub?",
          "URL Matching Stub - urlPathEqualTo()",
          "URL Matching Stub - urlPathMatching()",
          "Generate Dynamic Http Response using ResponseTemplateTransformer",
          "Stub with 400 HttpStatus as Response",
          "Stub matches a Query Param using urlEqualTo() and urlPathEqualTo()",
          "Generate Dynamic Response Stub by reading Query Param from the request",
          "Build a stub for retrieveMovieByYear endpoint - \"/movieservice/v1/movieYear\"",
          "Build a stub for the retrieve movie by year Endpoint- 404 Response",
          "Stub with RequestBody - HTTP POST",
          "Dynamic Response Stub - HTTP POST",
          "Stub with 400 Bad Request Response - HTTP POST",
          "Stub for HTTP PUT",
          "Stub for HTTP DELETE"
        ],
        "Verifying the Stubs - Hands On": [
          "Why Verify the Stubs?",
          "Explore the verify DSL"
        ],
        "Simulating Server/Fault Responses - Hands On": [
          "Introduction to Server/Fault Responses",
          "Simulating 5xx Response",
          "Simulating Fault Responses - Network Errors"
        ],
        "Simulating Latency - Hands On": [
          "Configuring read/write Timeout in Spring WebClient",
          "Simulating Latency"
        ]
      },
      "requirements": [
        "Any one of the IDE such as IntelliJ, Eclipse etc.,",
        "Java Experience is a must",
        "Experience building REST clients",
        "Experience writing with JUnit Tests"
      ],
      "description": "WireMock is a simulator for HTTP-based APIs or MockServer.\nREST APIs are everywhere today as it's the modern and easiest way to build a functionality and expose it to the real world.\nWhen it comes to writing Unit Test Cases that involve REST-based interactions there is always a challenge in testing error responses , network faults, latency and timeouts. WireMock is going to solve this problem of the application code that depends on the external service by mocking the actual service.\nIn MicroServices Architecture, It is pretty common for services to depend on one other and it's always a challenge to write test cases for the code that depends on other external services. WireMock provides the necessary tools to simulate an external service so the code that depends on the external service can be tested which helps to build the robust REST Client.\nThis course is going to cover the techniques that are listed below using WireMock:\nService Virtualization\nSimulating the External Service\nSimulating Latency\nSimulating Error response\nSimulating Network errors\nLearn to integrate the most powerful HTTP Mock library - WireMock into your application to build a Resilient and Robust REST API clients.\nWhy you should use WireMock ?\nIf your application depends on an API that does not exist but still you would like to build the REST Client then WireMock can help support that kind of development.\nIf you would to cover all the edge cases scenarios such as NetWork Errors, Faults, Latency and RunTime Exception in your REST Client then start using WireMock\nIf you would like to write Unit Test cases that covers all the possible scenarios that can happen in a REST based interaction then start using WireMock.\nIn a MicroServices Architecture it is pretty common for your services to depend on other. WireMock is a powerful simulation tool to simulate the service that your application depends on it. In a nutshell, WireMock is a Service Virtualization tool.\nWhat's Covered in this Course?\nIntroduction to WireMock\nLearn to build REST Client using the Spring WebClient.\nLearn to virtualize an External Service\nLearn to create Stubs using WireMock\nLearn to Simulate Network Errors, Latency, Network Timeouts and more.\nLearn to run WireMock using JUnit4 and JUnit5 platform\nLearn to integrate and run WireMock in Spring Boot application\nPrerequisites for the Course:\nExperience working with Java applications\nJava 8 or Higher\nKnowledge of building RESTFUL API Clients\nKnowledge of RESTFUL API\nExperience working with Gradle/Maven\nExperience working with Intellij, Eclipse etc.,\nSection : Introduction to WireMock\nIn this section, I will cover the Introduction to WireMock from the theoretical perspective.\nWhy WireMock ?\nWhat is WireMock ?\nWireMock vs Mocking Libraries - A quick comparison between WireMock and Mockito.\nSection : Setting up the WorkSpace for the course\nIn this section, we will set up the workspace for this course.\nSection : Build REST Clients using Spring WebClient - Hands On\nIn this section, we will code and learn how to build a REST client using WebClient.\nSet up the base project movies-app for this course\nBuild the Rest Clients that will be used throughout the course using Spring WebClient\nBuild Rest Clients that covers the HTTP Methods such as GET, POST, PUT and DELETE\nSection : Setting Up WireMock\nIn this section we will configure the WireMock in to our movies-app project.\nSection : Build Stubs Using WireMock - Hands On\nIn this section, we will code and learn about how to create Stubs using wiremock and have test case interact with wiremock instead of the actual service.\nLearn about how to create stubs using WireMock\nLearn to create stubs for different HTTP Methods such as GET, POST, PUT and DELETE\nLearn to Simulate HTTP Responses with 400-Bad Request\nLearn about how to perform ResponseTemplating in WireMock\nSection: Verifying the Stubs - Hands On\nIn this section ,I will cover about how to make sure the stubs are invoked as expected by using the Verification DSL.\nExplore the Verify DSL in WireMock\nSection : Simulating Server/Fault Responses - Hands On\nIn this section , I will cover how to simulate the fault HTTP responses such as 5xx Errors, Fault Responses using WireMock.\nLearn about the difference between ServerError and Fault responses\nLearn to simulate a Server Error using WireMock\nLearn to simulate a Network Error using WireMock\nSection : Simulating Latency - Hands On\nIn this section, I will cover how to configure Timeout and simulate latency so that the client times out if the response is not received within the configured time.\nLearn to configure the timeout in the REST Client\nLearn to Simulate Latency and test your REST Client times out as expected\nSection : Selective Proxying - Hands On\nIn this section, we will learn about \"What is Selective proxying?\" and \"how to implement Selective proxying\" using Wiremock.\nLearn about What is Selective Proxying? and When to use Selective Proxying?\nLearn to simulate Selective Proxying using WireMock\nSection : Running WireMock on JUnit4\nIn this section, we will code and learn how to run a wiremock on a JUnit4 based environment.\nSection : Running WireMock on Spring Boot - Hands On\nIn this section, I will cover how to run and configure WireMock in a Spring Boot project.\nSection: Running WireMock with Spring Boot and JUnit5\nIn this section, we will code and learn about how to run the Spring Boot Project in a JUnit5 environment.\nBy completing this course, you will have a pretty good idea about the following:\nHow to Integrate WireMock in to your project\nHow to Build resilient RESTFUL API Clients\nThanks for taking your time to view my course and hope to see you in my course.",
      "target_audience": [
        "Developers who would like to learn building RESTFUL API Clients using Spring WebClient",
        "Java Developers who would like to learn about building resilient RESTFUL API Clients",
        "Developers who would like to write Unit Tests that depends on other services",
        "Developers who would like to write Unit Tests that covers Latency, Timeouts and Network faults"
      ]
    },
    {
      "title": "Crash Course Arduino and Microcontroller Development",
      "url": "https://www.udemy.com/course/crash-course-arduino-and-microcontroller-development/",
      "bio": "Master the Essentials of Embedded Systems, Electronics, Firmware Design and Arduino C/C++ Programming",
      "objectives": [
        "Learn about microcontrollers, microprocessors and their internal architecture including how instructions are executed, ALUs, Buses, MMUs, DMA and more.",
        "Master embedded engineering theory and pratice from blinking an LED to building complex systems with sensors, actuators and displays.",
        "Learn the Arduino platform's hardware, software and APIs as a working platform to bridge the gap to more complex systems like ARM later in the course.",
        "Understand C/C++ from the ground up and how to write effective firmware for embedded systems and memory/compute constrained systems.",
        "Learn how processors run at the bare metal level including inline and external assembly language programming and interfacing with C/C++.",
        "Conquer advanced Computer Science subjects such as optimization theory, data structures, recursion, interrupts, and Big O analysis.",
        "Explore multitasking on microcontrollers by developing an interrupt based-round-robin kernal as well as using FreeRTOS.",
        "Become expert in numerous tools such as compilers, Arduino IDE, TinkerCAD, EasyEDA, Replit, VSCode, CodeLite, WokWi, Fritzing, MPLabX, STM32CubeIDE, and more.",
        "Learn electronics fundamentals like Ohm's and Kirchhoff's laws, circuit analysis, how passive components work, transistors, and FETs.",
        "Understand the basics of analog and digital systems and building both combinational and sequential logic circuits with TTL/CMOS ICs.",
        "Overcome programmable logic and the fundamentals of CPLDs, PALs, GALs, and FPGAs along with a primer on hardware description languages and CUPL.",
        "Understand various memories types such as FLASH, RAM, SRAM, EEPROM and their different applications.",
        "Conquer power management and sleep modes and how to shut peripherals down in your embedded designs, wake from interrupts, and manage power effectively.",
        "Understand how to read datasheets, do research, dig into APIs and documentation like the pros.",
        "Discover simulation software to test your ideas and build systems virtually before committing to physical hardware.",
        "Learn how to build embedded projects on the bench with solderless breadboards, point to point wiring and tactics to make these builds work at high speed.",
        "Understand how to use test equipment properly such as digital multimeters, oscilloscopes, logic analyzers, and power supplies.",
        "Build numerous bench projects including a complete Arduino based game console running a 3D wire-frame game, equipped with RGB LCD, game pad, sound and more!",
        "Master one of the fastest growing and highest paid engineering fields in the world."
      ],
      "course_content": {
        "Getting Started with Embedded Engineering": [
          "Course Overview and Welcome!",
          "Installation and Setup",
          "Installation and Setup - CodeLite IDE and Compiler"
        ],
        "Introduction to Microprocessors and Microcontrollers": [
          "Microprocessors and Computer Architecture Fundamentals",
          "Microprocessors, Microcontrollers, ALUs, Assembly Language and More",
          "Processor Design Primer: ALU, Control Unit, RTL Logic and Processor Fundamentals",
          "Introduction to the Arduino, Hardware, Software, Documentation and Datasheet"
        ],
        "Arduino IDE, Coding, and Hardware Primer": [
          "Introduction to the Arduino UNO, Hardware, IDE, API, Programming and Simulation",
          "Hands on with the Arduino, Parts Kits, Solderless boards and Component Intros",
          "Blinking an LED with C++ in Hardware",
          "Simulating our Arduino Hardware and Code Online with TinkerCAD and Wokwi",
          "More Simulation with Code API Emulation on Replit",
          "Building a Game From Scratch: The Simon Memory Game, Hardware Design",
          "Building a Game From Scratch: The Simon Memory Game, Hardware Build",
          "Building a Game From Scratch: The Simon Memory Game, Coding and Firmware",
          "Finishing the Simon Game and Introduction to Serial Debugging",
          "Porting Simon to Online Simulation"
        ],
        "Tools and Test Equipment Overview": [
          "Basic Hand Tools for Electronics",
          "Working with Soldering Irons and Hot Air Machines without Burning Yourself!",
          "Multimeters, Oscilloscopes, Logic Analyzers, Signal Generators and Power",
          "Hands on with Test Equipment and Real-Time Experiments with Logic Analyzers"
        ],
        "Into the Abyss - Electronics Theory and Fundamentals Primer": [
          "The Fundamentals of Electricity, Charge, Current, Voltage, Resistance and Fields",
          "Ohm’s Law, Basic Circuit Analysis, Series and Parallel Circuits",
          "Understanding Power, Series and Parallel Batteries, Voltage Dividers and EasyEDA",
          "Ohm's Law++, Kirchhoff's Laws; KVL and KCL",
          "Capacitors, Electric Fields, Physics, Charging and Discharging",
          "Inductors, Magnetic Fields, Flux, Lenz’s & Faraday’s Law, Charging/Discharging",
          "Reactance, Impedance, Phasors, AC Analysis of Series Capacitive Circuits",
          "Low Pass Filters, Transfer Functions, Gain, Decibels",
          "Low Pass Filter Bench Build, Simulation, Arduino Tone Generator",
          "Basic Semiconductor Devices, Diodes, Rectification, LEDs, Simulation",
          "Transformers, DC Rectification, Understanding Datasheets",
          "Transistor Theory and Applications",
          "Mosfet Theory and Practical Applications",
          "Introduction to Digital Electronics, Boolean Algebra, Gates, and Logic Families",
          "TTL/CMOS Logic Gates, Driving, Sinking Current, Packages and Prototyping",
          "Review of Common TTL/CMOS ICs and Bench Demo of Gates",
          "Simulating a Digital Logic Gate Module Using the Arduino",
          "A Tour of Programmable Logic (RAM, FLASH, PALs, GALs, CPLD, FPGA) and Bench Demo"
        ],
        "C++ (along with C) Primer and Fundamentals from the Ground Up": [
          "Introducing C/C++, History and Programming Concepts for Embedded Systems",
          "Understanding C/C++ Compilers, Code Generation and Tools",
          "Working with IDEs, Compiling C++ Programs, and a Bit of Arduino Code",
          "C++ Primer Crash Course, Arduino Emulation and Coding",
          "Setting up our C++ Test Platforms",
          "C++ Fundamentals, Headers, External Libraries, Printing",
          "C++ Variables, Intrinsic Types, Naming Conventions, and more printf() Formatting",
          "C++ Variables, Globals, Locals, Basic Types, Math Operators, and Precedence",
          "C++ Mathematics, Understanding Base-N Number Systems with Binary, Hex & Octal",
          "C++, Programming Style Guide and Conventions, Macros, Conditional Compilation",
          "C++, Built in Math Operators, Binary Bitshift Operations and Using the Debugger",
          "More C++ Logical Operators, Conditionals and the \"if\" Statement, Type Casting",
          "C++ Looping Constructs, \"for\" and \"while\"",
          "C++ Switch Statements, Arrays, Strings",
          "C++ Strings, Arrays, Arduino Strings and Functions",
          "C++ Measuring Time, Nested Loops and Hardware Build (Finally!)",
          "C++ Console IO C and C++ methods, VT100 Gamepad Hardware Demo",
          "C++ Data Structures, Structs, Enums, Linked Lists and Trees",
          "C++ Pointers and References (The Dreaded Duo)",
          "C++ Classes, Methods, Properties and Object Oriented Basics",
          "C++ Advanced Classes, Constructors, Destructors, Operator Overloading",
          "C++ More Advanced Class Topics, Copy Constructors, Assignments, Deep and Shallow",
          "C++ Built in Objects and Including External Arduino Libraries",
          "C++ Understanding Microcontroller Memory Management, Globals, Locals, Statics",
          "C++ Memory Management and the Heap - Part II",
          "C++ Working with Arduino External Libraries and Objects and a Little Recursion"
        ],
        "Introducing the World of Arduino, AVR 8-Bit Processors, ATmega 328p & Firmware": [
          "Introduction to Arduino AVR 8-Bit Architecture; 8-bit Ports, GPIOs and ADC",
          "Interfacing to 7-Segment Displays, Switches, Keypads, Rotary Encoders and More",
          "Interfacing to 7-Segment Displays, Keypads, Rotary Encoders, & Bench Build II",
          "Filtering and Debouncing Deep Dive",
          "Analog Interfacing to Potentiometers and Joysticks",
          "C++ Exercise Converting the Joystick Code to a Class",
          "Interfacing to LEDs and NeoPixels"
        ],
        "Advanced Microcontroller Development and Arduino Embedded Internals": [
          "Assembly Language and Microcontroller Fundamentals, Inline AVR 328p",
          "Assembly Language, Memory, Registers, IO Space, GPIOs, Interfacing with C/C++",
          "Working with the UARTs in Assembly",
          "Using External Assembly Language and Memory Mapped IO",
          "Using External Assembly Language Part II - Writing a Math API",
          "Using External Assembly Language Part III - Variables, Tables, and Addressing",
          "Understanding Microcontroller In Circuit Programming, AVRDUDE, and Fuse Bits",
          "Understanding Microcontroller ICP Programming and Configuring the Clock Out Bits",
          "Understanding Microcontroller Clocking, Scaling, PLLs and More",
          "Understanding Sleep Modes, Interrupts, Polling and Multitasking",
          "More Advanced Interrupts and Coding Interrupt Service Routines",
          "Understanding Timers, Counters, PWM and Measuring Temporal Events",
          "Understanding Timers, Counters, PWM, Timer Interrupts and Waveform Generation",
          "Using the Timer and Interrupt Arduino APIs and Pin Change Interrupts",
          "Using the Timer and Interrupt Arduino APIs, Pin Change Interrupts Demo - Part II",
          "More Advanced Pin Change Interrupts and PIR Sensors",
          "The Watchdog Timer \"Woof Woof\"",
          "Power Consumption and Sleep Modes",
          "More Sleep and Power Saving Modes",
          "Direct Memory Access (DMA)",
          "Memory Management Units (MMUs), External Bus Interfaces and External Memories",
          "Advanced Debugging, Desktop and Embedded Debugging Ideas for Arduino",
          "Optimization Theory, Assembly Optimization Cycle Counting, Fixed Point Math",
          "Optimization Theory, Big O, Fixed Point Math - Part II",
          "Advanced Optimization and Data Structures; Linked Lists, Trees & Searching",
          "Advanced Optimization, Math Optimizations, Look up Tables, Clock Counting & More",
          "Advanced Optimization, Taylor and Maclaurin Approximations and Fixed Point Math",
          "Understanding Multitasking and Real-Time Operating Systems for Embedded",
          "Multitasking, Implementing a Mini Kernel with Interrupts",
          "Multiasking with our Kernel, LED, Photocell, Servo, Temp Sensor - Part II",
          "FreeRTOS and True Multitasking\""
        ],
        "Digital Communication Protocols and Interfacing RS-232, UART, SPI, I2C & 1-Wire": [
          "Serial Protocols UARTs and RS-232 - Part I",
          "Serial Protocols UARTs and RS-232 - Part II, Bench Demo of Terminals",
          "Serial Protocols UARTs and RS-232 Part III, Client/Server",
          "Introduction to Serial Peripheral Interface (SPI) Protocol",
          "Serial Peripheral Interface (SPI), Interfacing to a Temperature Sensor - Part II",
          "Serial Peripheral Interface (SPI), Interfacing to a Temperature Sensor-Part III",
          "Serial Peripheral Interface (SPI), Controlling a Digital POT - Part IV",
          "Serial Peripheral Interface to an LCD and Game Console Build - Part I",
          "SPI Interface to an LCD and 3D Game Port to Game Console - Part II",
          "I2C Serial Protocol, Introduction to Wire Library, Temp and Real Time Clock",
          "I2C Serial Protocol (Inter IC Communications), Interfacing to a Digital POT",
          "I2C Serial Protocol Digital POT Circuit Bench Build, and Demo and Analysis",
          "I2C Serial Protocol, SI7021 Temperature and Humidity Sensor Review and Build",
          "I2C Serial Protocol, Measuring Time with the DS1307 RTC (Real Time Clock)",
          "I2C Serial Protocol - Working with Accelerometers and Gyros"
        ],
        "Advanced Tools for Arduino and Embedded Development": [
          "Developing with the Ardunio Web/Cloud IDE",
          "Introducing the New and Improved(?) Arduino IDE 2.x IDE",
          "Working with Visual Studio Code + PlatformIO",
          "Visual Studio Code + PlatformIO - Adding Basic Debug Support",
          "MPLAB X IDE for AVR and PIC, ARM Cortex M0-M7, Part I - Overview and Install",
          "MPLAB X IDE for AVR and PIC, ARM Cortex M0-M7, Part II - Building \"Hello World\""
        ]
      },
      "requirements": [
        "A Windows, MacOS, or Linux PC/Laptop to run the desktop applications. But, a tablet or phone will suffice for students that simply want to watch lectures and follow me on the bench.",
        "This is a hands on course, we build projects with the Arduino platform, so to follow along with the physical builds students will have to purchase Arduino hardware and other components.",
        "This course teaches electronics, microcontrollers, C/C++, and embedded engineering from the ground up, so no prior knowledge is needed!",
        "The goal of this course is to teach fundamentals through theory, discussions and hands-on coding and builds on the bench. So, patience and time are needed, but they will pay off!"
      ],
      "description": "Crash Course Arduino and Microcontroller Development is designed to transform the complex world of embedded engineering into an accessible and enjoyable experience for students and hobbyists alike. This unique course covers a wide range of topics from the ground up, requiring no impossible prerequisites. With over 128 lectures and 111+ hours of video content, my aim was to create a comprehensive guide that takes you from a novice to a confident master in embedded engineering, microcontrollers, and Arduino.\nWe will explore everything from basic electronics and microprocessor architecture to the intricacies of the Arduino platform, ARM, and programming. You'll learn essential C/C++ programming skills to write your own code, optimize it, and understand advanced concepts like interrupts, data structures, multitasking, and object-oriented programming. Using simulators, compilers, IDEs, CAD, schematic entry programs, and various electrical test equipment, we will uncover the mysteries of communication protocols and signals, allowing you to see and understand the underlying processes.\nOur journey will be hands-on and practical, with each lecture combining theory, calculations, and real-world examples. We'll build simulations, construct physical hardware, test, and run our creations. This is not a scripted course but a genuine, one-on-one learning experience where I share my 40+ years of expertise in electronics and coding. Expect to have fun, learn deeply, and maybe even blow a few things up along the way!\nAdditionally, this course includes my college textbook, \"Design Your Own Video Game Console\" (aka \"The Black Art of Video Game Console Design\"), free of charge in PDF format. This 800+ page book will serve as a valuable reference throughout the course.\nJoin me in this exciting adventure into the world of embedded engineering and unlock your potential to create anything you can imagine.",
      "target_audience": [
        "Anyone that wants to learn about the Arduino, Microcontrollers and Embedded Engineering.",
        "Coders and programmers that want to explore the hardware side of development at the level of microcontrollers.",
        "Hobbyists and hackers that want to learn about the \"Arduino\" platform, what it is, and how to use it to build projects, gadgets, and contraptions.",
        "Students that want a single course that covers everything from the ground up, so by the end they can think of an embedded project, design, code, and build it with confidence."
      ]
    },
    {
      "title": "Twilio - Make a complete Call Centre in React and Node",
      "url": "https://www.udemy.com/course/twilio-react/",
      "bio": "React, Node, and Twilio - Create a complete call center with SMS authentication, waiting for queues & answer calls in th",
      "objectives": [
        "How to create a call centre from beginning to end",
        "How to use Twilio to send and receive SMS",
        "How to use Twilio to make and receive voice calls",
        "How to queue and dequeue calls using Twilio",
        "How to use Twilio Verify to verify the user mobile number",
        "How to send SMS to a phone number",
        "How to make a call to a phone number"
      ],
      "course_content": {
        "Twilio Introduction": [
          "Before we signup to Twilio",
          "Creating a Twilio Account",
          "Getting a phone number and creating all the necessary tokens"
        ],
        "Twilio Verify": [
          "Creating a Twilio Verify Service"
        ],
        "Node server with Express": [
          "Starting our express server",
          "Creating the endpoint to receive the mobile number and the verification code",
          "Creating a Twilio Class",
          "Send Verification with Twilio",
          "Verifying the code with Twilio"
        ],
        "React Login with SMS": [
          "Creating our react App",
          "Creating our login form",
          "Keep state using Immet and use-immet",
          "Preparing axios to send our request",
          "Request the verification code from Twilio",
          "Add an input for the verification code"
        ],
        "Verification, Authentication using Twilio": [
          "Sending the code to Twilio verify"
        ],
        "Realtime UI updates using SocketIo": [
          "Initializing sockets on the backend",
          "Initializing a socket connection with the frontend",
          "Understanding sockets and refactoring"
        ],
        "Authorization using JWT (JSON Web Token)": [
          "Creating and verifying a JWT token",
          "Creating the JWT token",
          "Receiving the JWT on the frontend",
          "Creating a custom hook to help with local Storage",
          "Storing the JWT token in Local Storage"
        ],
        "React Call Centre": [
          "Stop displaying the login page when we have a valid token",
          "Creating our Call Center screen starting with the navbar",
          "Creating the call progress bar"
        ],
        "Local tunnel, my localhost globally accessible": [
          "Understanding local tunnel and how it will help us"
        ],
        "Change Twilio phone number": [
          "Setup Twilio and changing phone number"
        ]
      },
      "requirements": [
        "Basic programming knowledge",
        "A free Twilio account",
        "Desire to learn and create amazing new things"
      ],
      "description": "Twilio the world's leading cloud communications platform as a service (CPaaS) that enables you to develop SMS solutions, WhatsApp, Voice, Video, email, and even IoT. Twilio powers communications for more than 190,000 businesses, and enables nearly 932 billion human interactions every year.\nIn this course, we will leverage some of those capabilities to create a fully functional Call Center, where the users will log with their mobile number using SMS and call will be added to a dashboard in real-time, showing where each call stage is.\n\nCalls will be greeted with a welcome message, and after adding to a queue, the workers on the call centre can track the call status on the dashboard the call will flow from ringing to queued to answered and of course in case we miss a call it will also display a call missed.\n\n\nVerify - We will use Twilio Verify to send a verification SMS to the user in the login faze, once the user is verified with Twilio we will create a JWT token that will allow the user to login to the Dashboard and subscribe to receive and make calls.\nProgrammable Voice - We sill use Programmable Voice to make, receive, and monitor calls around the world and directly from the browser.\nProgrammable SMS - We will use Programmable SMS to send and receive SMS using Twilio\nOther important details:\n\nFrontend:\nWe will create the front end in React using hooks, such as useState, useEffect, useContext, useCallback among many other custom hooks we will create, to make our application look amazing we will use Semantic UI and to help with the state management we will use Immet and SocketIo for realtime communication.\n\n\nBackend:\nWill be created using NodeJS, Express for the rest API and SocketIO for the real-time communication with the react app.",
      "target_audience": [
        "The course target new and advance programmers that want to deep their knowledge",
        "Developers that want to learn how to use Twilio"
      ]
    },
    {
      "title": "Apache Spark Project World Development Indicators Analytics",
      "url": "https://www.udemy.com/course/apache-spark-project-world-development-indicators-analytics/",
      "bio": "World Development Indicators Analytics Project in Apache Spark for beginner using Apache Zeppelin and Databricks",
      "objectives": [
        "Understand and explore the World Development Indicators dataset from the World Bank.",
        "Set up and configure a free Databricks account and Spark cluster for analytics.",
        "Work with Spark DataFrames to load, transform, and analyze real-world datasets.",
        "Apply Spark SQL and DataFrame operations to generate development insights.",
        "Analyze GINI Index, GDP per capita, literacy rates, life expectancy, poverty rates, infant mortality, and trade statistics across countries.",
        "Compare development trends between rich vs. poor countries over decades.",
        "Perform country-level and global analytics using Spark.",
        "Visualize global development metrics and publish Spark notebooks for sharing insights.",
        "Build confidence in handling real-world Spark projects with practical datasets."
      ],
      "course_content": {
        "Introduction to the Course": [
          "Welcome to the Course",
          "What are World Development Indicators (WDI)?",
          "What You Will Learn",
          "Tools We’ll Use: Apache Spark, Spark SQL, Apache Zeppelin"
        ],
        "World Development Indicators Deep Dive": [
          "WDI Dataset Overview – Countries, Regions, and Indicators",
          "Types of Indicators in WDI (Economic, Social, Demographic, Health, Environment)",
          "Understanding the WDI Dataset Structure (Attributes, Years, Metadata)",
          "Data Sources of WDI – World Bank & Other International Organizations"
        ],
        "Setting Up the Environment": [
          "Requirements",
          "(Hands On) Installing JAVA",
          "Steps for Installing JAVA",
          "(Hands On) Setting JAVA environments",
          "Steps for Setting JAVA environments",
          "(Hands On) Apache Zeppelin Installation Steps on Ubuntu machine",
          "Steps for Installing Apache Zeppelin on Ubuntu machine",
          "(Hands On) Installing Docker Desktop on Windows 10/11",
          "Steps for Installing Docker on Windows",
          "(Hands On) Running Apache Zeppelin on Docker (Windows)",
          "Steps for Running Apache Zeppelin on Docker",
          "(Hands On) Configure and Connect to Spark interpreter",
          "Steps for Configure and Connect to Spark Interpreter"
        ],
        "Download Resources": [
          "Download Resources"
        ],
        "Zeppelin Basics": [
          "What is Apache Zeppelin",
          "Features & Benefits",
          "Notebook UI Overview",
          "Markdown and text formatting",
          "Creating and Running Paragraphs",
          "Hands on Creating and Running paragraphs",
          "Visualization Options (Tables, Bar chart, Pie chart, etc.)",
          "Hands On - Types of Default Chart in Zeppelin"
        ],
        "Zeppelin with Apache Spark": [
          "Spark interpreter details",
          "Working with RDDs and DataFrames",
          "Spark SQL queries and caching",
          "Visualizing Spark outputs",
          "Job tracking and performance tuning basics"
        ],
        "Data Exploration with Spark": [
          "Loading CSV Data into Spark DataFrames (Country Dataset)",
          "Creating Temporary Views for Spark SQL Queries",
          "Analyzing Income Inequality with Gini Index in WDI",
          "Analyzing Youth Literacy Rates with Spark SQL",
          "Comparing Trade (% of GDP) for India and China",
          "Analyzing Exports of Goods and Services for India and China",
          "Analyzing Imports of Goods and Services for India and China",
          "Analyzing GDP per Capita (PPP) for India and China",
          "Analyzing Poverty Alleviation in India and China",
          "Analyzing Life Expectancy at Birth in India and China",
          "Analyzing Urban Population Growth in India and China",
          "Analyzing Infant Mortality as a Measure of Healthcare in India and China",
          "The 10 Poorest Countries in 1962 vs 2014",
          "The 10 Richest Countries in 1962 vs 2014",
          "Analyzing Average Income in Rich Countries (1960–2014)",
          "Average Income in Poor Countries (1960–2014)",
          "Comparing Average Incomes in 1962 (Case Study: 4 Countries)",
          "Comparing Average Incomes in 2014 (Case Study: 4 Countries)",
          "Life Expectancy in France (1960–2013)",
          "Birth Rates in G7 Countries (1960–2013)"
        ],
        "Introduction": [
          "Introduction"
        ],
        "Project Begins": [
          "File level details",
          "(Old) Free Account creation in Databricks",
          "(New) Free Account creation in Databricks",
          "Tips to Improve Your Course Taking Experience",
          "Importing Databricks Notebook",
          "Overview and Project Objective",
          "File Content Explaination",
          "Launch Spark Cluster",
          "Spark Notebook Basics",
          "Loading data into Spark Dataframe",
          "GINI Index",
          "Youth Literacy Rate",
          "Trade as a percentage of GDP for China and India",
          "Exports of goods and services",
          "Import of goods and services",
          "GDP per capita",
          "Poverty Alleviation",
          "Life Expectancy at birth, total (years)",
          "Urban Population growth",
          "Infant Mortality",
          "The 10 Countries with Lowest Average Income in 1962/2014",
          "The 10 Countries with Highest Average Income",
          "Average Income from 1960-2014 in Rich Countries",
          "Average Income from 1960-2014 in Poor Countries",
          "Average Income in 1962",
          "Average Income in 2014",
          "Life Expectancy in France 1960-2013",
          "G-7 Country Birth Rates 1960-2013",
          "World Per Capita Income in 2013",
          "Publish Notebook to the Web",
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "No prior Spark experience required — this is a beginner-friendly project.",
        "Basic understanding of Python or SQL will be helpful (but not mandatory).",
        "Access to a computer with internet connection.",
        "A free Databricks account (setup is covered step by step in the course).",
        "Curiosity to learn how data engineering and analytics can provide insights into global development."
      ],
      "description": "Apache Spark Project: World Development Indicators Analytics\nAre you ready to take your Apache Spark and Big Data skills to the next level by working on a real-world analytics project?\nIn this hands-on course, we’ll use Apache Spark, Spark SQL, and Apache Zeppelin to analyze one of the most important and widely used datasets in the world — the World Bank’s World Development Indicators (WDI). Covering over 200 countries, 50+ years of data, and hundreds of economic, social, demographic, health, and environmental indicators, this project is the perfect way to apply your Spark skills to real-world problems.\nYou’ll learn step by step how to:\n\n\nSet up Spark and Zeppelin on your system (Windows, Ubuntu, or Docker)\nLoad and explore massive datasets with Spark DataFrames\nWrite Spark SQL queries to analyze GDP, literacy, poverty, trade, population, life expectancy, urbanization, and more\nBuild interactive visualizations and dashboards in Zeppelin\nCompare economic and social development patterns across countries, regions, and decades\nDeliver a resume-ready Spark project that you can showcase in interviews\n\n\nWhat makes this course different?\n\n\nPractical, project-based approach: Learn Spark by solving real-world questions.\nStep-by-step guidance: Easy to follow, even if you’re new to Spark.\nComprehensive coverage: From environment setup → to data exploration → to insights.\nPortfolio-ready project: By the end, you’ll have a complete Spark + Zeppelin project to demonstrate your skills.\n\n\nWho is this course for?\n\n\nBeginners who want to break into Big Data and Analytics with a hands-on project.\nData engineers & data analysts looking to strengthen their Spark SQL and Zeppelin skills.\nJob seekers & interview candidates who need a portfolio project to stand out.\nAnyone interested in exploring global development trends through the power of big data.\n\n\nReal-World Case Studies Covered\n\n\nGini Index (Income Inequality)\nYouth Literacy Rates\nGDP per Capita (PPP) for India & China\nTrade, Imports & Exports Analysis\nPoverty Alleviation Trends\nLife Expectancy in India, China & France\nUrbanization & Infant Mortality Studies\nRichest vs Poorest Countries (1962 vs 2014)\nBirth Rates in G7 Countries\nGlobal Per Capita Income in 2013\n\n\nBy the end of this course, you will be able to:\n\n\nConfidently work with Apache Spark, Spark SQL, and Zeppelin.\nPerform advanced data analysis on large, real-world datasets.\nBuild interactive notebooks and dashboards for visualization.\nShowcase your Spark project in interviews and on your resume.\nThis is not just another Spark course — it’s a career-boosting project that prepares you for the real-world challenges of data engineering and analytics.",
      "target_audience": [
        "Data Engineers and Data Analysts who want hands-on experience with Apache Spark.",
        "Students and Beginners in Big Data who want a guided project to apply Spark in the real world.",
        "Aspiring Data Scientists looking to practice analytics on meaningful, real-world datasets.",
        "Researchers and Analysts interested in exploring global development metrics with Spark.",
        "Professionals preparing for Spark-related roles who want practical project experience to showcase.",
        "Anyone curious about using data and analytics to understand world development trends."
      ]
    },
    {
      "title": "Python Automation Testing With Pytest",
      "url": "https://www.udemy.com/course/python-automation-pytest/",
      "bio": "Complete Python Pytest Framework Course | Master Pytest Framework for Test Automation",
      "objectives": [
        "Everything about Pytest framework",
        "Test execution and Reporting with Pytest framework",
        "Building a easy test automation framework",
        "End to End Test automation with Python Pytest",
        "Python Testing with Pytest"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Installation and Setup": [
          "Please Read(time <1min)",
          "Python Installation",
          "New Pycharm Install & Create Project"
        ],
        "Pytest 101: Create Project and First Test": [
          "About Pytest",
          "Pycharm: Create project and VirtualEnv",
          "Pycharm: Installing python packages",
          "Optional Read",
          "Write First Tests & Tests Conventions",
          "Running Our Tests",
          "Understanding Test Outputs(1/2)",
          "Understanding Test Outputs(2/2)",
          "Assignment",
          "Practice Quiz1",
          "Handouts"
        ],
        "Pytest: Assertions and Test Discovery": [
          "Assertions",
          "Test Class",
          "Test Discovery",
          "About __init__.py",
          "pytest.raises Assertion(1/2)",
          "pytest.raises Assertion(2/2)",
          "Quiz2",
          "Handouts"
        ],
        "Pytest: Skip/Mark and Pytest Options": [
          "Pls Read(time <1min)",
          "Skipping Tests",
          "Grouping/Marking Tests(1/3)",
          "Marking Tests(2/3)",
          "Marking Tests(3/3)",
          "xfail: Expecting to Fail Marker(1/2)",
          "xfail: Expecting to Fail Marker(2/2)",
          "Run test by testname",
          "Pytest Cmd line options(1/2)",
          "Pytest Cmd line options(2/2)",
          "Test Outcomes",
          "Quiz3",
          "Handouts",
          "Run Tests from Jenkins(optional)"
        ],
        "Pytest: Parameterize and Setup/TearDown Tests(Fixtures)": [
          "Parametrizing Tests(1/2)",
          "Parametrizing Tests(2/2)",
          "Fixture Basics(1/3)",
          "Fixture Basics(2/3)",
          "Fixture Basics(3/3)",
          "Setup/Teardown in Fixtures",
          "Multiple Fixtures",
          "Fixture TearDown Example",
          "Sharing Fixtures",
          "Tracing Fixture Execution",
          "Introspecting the Calling Test Function",
          "Factories as Fixtures",
          "Quiz4",
          "Parametrizing from Fixtures(1/2)",
          "Parametrizing from Fixtures(2/2)",
          "Quiz5",
          "Fixture Scope",
          "Handouts"
        ],
        "Pytest: Customizations": [
          "Pass Arguments in Pytest Cmdline",
          "Pass Arguments in Pytest Cmdline(fix-issue)",
          "Configuring Pytest(1/2)",
          "Configuring Pytest(2/2)",
          "Dataprovider(DataDriven Tests)",
          "Using configuration files(1/2)",
          "Configuration files(2/2)",
          "Handouts"
        ],
        "Pytest-BDD": [
          "Intro Pytest-BDD",
          "Pytest-BDD Terms & Rules",
          "Write First BDD Test Scenario",
          "Execute BDD Tests & About \"target_fixture\"",
          "BDD Scenario Decorator",
          "Pytest BDD & Fixtures",
          "Pytest-BDD About Background",
          "Pytest-BDD Parameterize",
          "Pytest-BDD Parameterize(contd..)",
          "Note on pytest-bdd latest version(>5.0.0)",
          "Pytest-BDD Parameterize(code updates)",
          "Pytest-BDD ScenarioOutline",
          "Pytest Tags & BDD",
          "Quiz6"
        ],
        "Thanks": [
          "Pycharm(2025) Import Project(Optional)",
          "Jenkins Installation/Run(Windows)",
          "Pytest Cheat Sheet & Code",
          "Thanks!",
          "Pycharm installation & Setup(old optional)"
        ]
      },
      "requirements": [
        "Basic Python Scripting Concepts"
      ],
      "description": "Hi! Welcome to Python Automation Testing With Pytest!\nThis course will help you master automation testing with Pytest framework. Pytest is a testing framework which allows us to write test codes using python. We can write code to test anything in any environment, like database, API, and even GUI if you want. It is a simple framework to learn, just like python.\nIn this course, we will be go through all topics of Python Pytest framework and it assumes that you have minimal prior experience with Python coding.\nWe will learn everything about Pytest that will help us build a test automation framework easily. We will cover all important aspects of pytest and also how automation is done in real test environment.\nSome of topics are highlighted below, we will go thru all of this and more:\nTest Naming, and Test discovery\nDifferent types of Assertions\nSkipping tests and markers\nParametrized or data driven testing\nFixtures - one of the interesting topics in pytest\nPassing cmd line args in pytest\nPytest-BDD - the BDD framework with Pytest\nThank you and see you in this course!!!\nNote: This course is solely about Pytest framework, and details in depth about its related topics. How you can use the popular pytest framework within your whole test suite.\n\n\nThis course is designed for all levels of QA test professionals who want to work with Python automation, starting from absolute beginner level to advanced users. Anyone can follow along from top, by understanding each of the lessons and replicating it on their system. No worries if you are in any level of expertise, you can directly go to the session that you want to learn.\n\n\nFew Comments from Udemy Learners:\n*****\nHi Kumar, I realized that the lectures have been upgraded into a better mode. I came back for revision of pytest and noticed that lecture notes are finally provided. Also, there are also your personal annotation in the videos which are very helpful. Thanks for improvement. Appreciate it.\n*****\nOverall the course is good. It gives the understanding of software testing environment other than just programming. Certainly there will be difference in reviews depending on someone's knowledge in Python programming language. I am new in this domain and I know basic Python programming language. So I think if you provide more complex examples also in the course content that would be fine for better exposure and to get the understanding of how deep we need to go or to know where we actually stand in this field. It was good experience with this course. We get good and helpful knowledge in less time.\n*****\nhi kumar,your course is goood\n*****",
      "target_audience": [
        "Beginner to intermediate test developer who wants to learn Pytest for automation",
        "Anyone who wants to learn test automation easily",
        "Anyone who wants to be SDET with Python",
        "Anyone who wants to learn Python Testing"
      ]
    },
    {
      "title": "Software Engineering 101: Plan and Execute Better Software.",
      "url": "https://www.udemy.com/course/software-engineering-101/",
      "bio": "Software Engineering 101: Use Software Engineering to Plan and Build Amazing Software + Learn SCRUM Framework!",
      "objectives": [
        "Software Engineering Principles",
        "Requirements Definitions",
        "Software Architecture Planning",
        "Modularity",
        "Computer Science Models",
        "Agile Methodology"
      ],
      "course_content": {},
      "requirements": [
        "Basic Knowledge of Computers"
      ],
      "description": "Master the Techniques of Software Engineering!\nIf you are looking to learn the invaluable ideas behind software engineering, you have come to the right place. This course is perfect for anyone who is currently in, or looking to get into the highly profitable programming field.\nNo Previous Experience Necessary!\nThis course was designed to be a standalone course. This means it can be taken with or without knowledge of computer programming. It is both a great course to get started with, and a great course for that next step in your career.\nWhy is the Software Engineering Important?\nComputer programming is more than just knowing how to code. It is also an engineering process. Large scale systems must be planned out long before coding actually begins. Due to this, most companies are looking for programmers with knowledge in software engineering.\nIn this course we will learn the core techniques and ideas behind software engineering. Knowing this will help set you apart in the field.\nEnroll Now and You'll Learn:\nSoftware Development Life-cycle\nRequirements\nSpecifications\nWRSPM Model\nArchitecture\nDesign\nClient-server Pattern\nMaster-Slave Pattern\nModularity\nCoupling & Cohesion\nBuy vs Build\nTesting\nVerification and Validation\nSoftware Models\nAgile\nScrum\nKanban\nAlong with this, there is an in-depth guide on the SCRUM Framework. This framework is one of the most popular frameworks in companies. It allows for quick organized develpment. On top of this, it's a framework which allows for products to quickly pivot to new challenges and directions. This course offers an in-depth 1 hour+ overview on this great framework!\nMy Guarantee\nI am so confident you will enjoy this course, I offer a 100% 30-day money-back guarantee through Udemy. If you are not happy with your purchase, I have no problem with giving your money back!\nAre You Ready to Get Started?\nI will be waiting for you inside the course!\nRemember, this is an online course, so you can take it at your own pace. Are you busy right now? That's okay. Enroll today, and take the course at your own pace.\nThanks so much for your interest in this Software Engineering 101 Course!\nSee you inside!\nKurt",
      "target_audience": [
        "Beginner Programmers",
        "Programmers Who Want to Learn More About Software Development",
        "Computer Science Students"
      ]
    },
    {
      "title": "Encryption and Cryptography for Professionals",
      "url": "https://www.udemy.com/course/encryption-and-cryptography-for-professionals/",
      "bio": "The complete guide to encryption and cryptography for developers",
      "objectives": [
        "Learn the fundamentals of cryptography",
        "Learn advance encryption techniques",
        "Learn practical cryptography from ground up"
      ],
      "course_content": {
        "Fundamentals of Cryptography": [
          "Introduction to Cryptography",
          "Concepts of Information Theory",
          "Building Blocks of Encryption"
        ],
        "Symmetric Key Cryptography": [
          "Introduction to Symmetric Key Cryptography",
          "Common Symmetric Encryption Algorithms",
          "Symmetric Encryption for Bulk Data Transfer",
          "Symmetric Encryption for Secure Data Storage"
        ],
        "Public Key Cryptography": [
          "Introduction to Public Key Cryptography",
          "“Hard” Problems in Public Key Cryptography",
          "Common Asymmetric Encryption Algorithms",
          "Public Key Infrastructure",
          "Asymmetric Cryptography for Key Sharing"
        ],
        "Hash Functions": [
          "Introduction to Hash Functions",
          "Security Assumptions of Hash Functions",
          "Common Hash Algorithms",
          "Hash Functions for Password Security",
          "Hash Functions for Data Integrity"
        ],
        "Advanced Cryptographic Concepts": [
          "Secure Multi-Party Computation",
          "Zero-Knowledge Proofs",
          "Ring Signatures",
          "Post-Quantum Cryptography",
          "Homomorphic Encryption"
        ]
      },
      "requirements": [
        "Basic knowledge of programming and mathematics is essential for completing the course"
      ],
      "description": "Data is the new oil of the 21st century, and guarding this oil has become a headache for many individuals & organizations. Today, people are always looking for various ways to protect their data. One such way is encryption that is a form of cryptography through which you can change information or decode it so that only a particular person can read it.\nEveryone is using it- the government is using it to secure classified information, businesses are using it to protect corporate secrets, individuals are using it to guard personal data against any digital theft or piracy.\nAs of now, it has become one of the most effective forms of data security & still it’s underutilized. As per numerous studies, there has been a steady increase in the deployment of encryption solutions by businesses and organizations over the last few years. This has led to an increase in the fascination of cryptography & fascination. Considering this, we have curated this exclusive course that will teach you every essential concept revolving around Cryptography & Encryption so that you can help others protect businesses.\nWhat Makes This Course So Special?\nThis course is uniquely curated with all the important concepts required to master Encryption from scratch. It will give you a unique perspective of cryptography, its importance along with some key elements of encryption.\nThis course unfolds with all the fundamentals by introducing you to the cryptography, information theory & building blocks of encryption. Once the basic is covered, the instructor will give you insights into symmetric encryption algorithms for data transfer & data storage, & then help you understand public-key cryptography.\nYou will also learn other essential concepts such as hash functions, hash algorithms, & so on. Lastly, to make you confident in encryption, we have also included some more advanced concepts such as Secure Multi-Party Computation, Zero-Knowledge Proofs, Ring Signatures, Post-Quantum Cryptography & others.\nThis Course Includes-\n1. Fundamentals of cryptography\n2. Symmetric key cryptography- algorithms, security for bulk data transfer & data storage\n3. Public key cryptography- introduction, ‘hard’ problems, asymmetric algorithms, public key infrastructure, cryptography for key sharing\n4. Hash functions- Introduction, security assumptions, algorithms, hash functions for password security & data integrity\n5. Advanced concepts- secure multi-party computation, zero-knowledge proofs, ring signatures, post-quantum cryptography, homomorphic encryption\n\n\nExplore the world of encryption to save various businesses from data theft- Start today!",
      "target_audience": [
        "Anyone who wants to master encryption and cryptography will find this course very useful"
      ]
    },
    {
      "title": "Autonomous Robots: Model Predictive Control",
      "url": "https://www.udemy.com/course/model-predictive-control/",
      "bio": "Learn to make a Self-Driving or Autonomous Car follow the speed limit, pull into parking spaces, and avoid obstacles!",
      "objectives": [
        "They will learn how to design and implement a Model Predictive Controller for a Self-Driving Car or Autonomous Vehicle.",
        "Make an autonomous car follow the speed limit.",
        "Make an autonomous vehicle car pull into a parking space.",
        "Make a self-driving car avoid an obstacle."
      ],
      "course_content": {
        "Introduction": [
          "Tips for Success",
          "Introduction",
          "Free Installation Guide",
          "Conda Environments",
          "What to do if you are still have issues with Python"
        ],
        "Problem Setup": [
          "Problem Setup Part 1",
          "Problem Setup Part 2",
          "Assignment 0 - Walkthrough"
        ],
        "Highway Speed Control": [
          "Highway Speed Control",
          "Assignment 1 - Intro",
          "Assignment 1 - Walkthrough"
        ],
        "Parking Control": [
          "Parking Control",
          "Assignment 2 - Intro",
          "Assignment 2 - Walkthrough"
        ],
        "Obstacle Avoidance": [
          "Obstacle Avoidance",
          "Assignment 3 - Intro",
          "Assignment 3 - Walkthrough"
        ],
        "Outro": [
          "Outro"
        ]
      },
      "requirements": [
        "No requirements! Knowledge of coding or Python will help but not required."
      ],
      "description": "Learn to Program A Self-Driving Car In My Online Course!\nIn this course you will make an autonomous car drive itself! You will create an algorithm that will give the car the ability to:\nFollow the speed limit.\nPull into parking spaces.\nAvoid obstacles.\nIf you love cars (or robots) and want to see if you can code a car that can park, control its speed, and avoid obstacles all on its own… this course is for you.\nWhether you have extensive coding knowledge or just an interest in robotics, this course will take your skills to the next level. Most importantly, you’ll have fun throughout the process.\nYou won’t just learn about the concepts, you will have a chance to actually implement them, test them, and see the results in real time. Learning sticks better when you put it into action, and seeing results is what makes the process so rewarding. With my custom simulator, you can see how your algorithm would work on a real car.\nModel Predictive Control is a useful concept to understand for all areas of robotics, but learning about it doesn’t have to be a drag. It also doesn’t have to be impossible to understand. I break down each concept to be fully digestible for every kind of student.\nWith this course, you can level up your knowledge, add an additional skill to your robotics arsenal, and do it all through a program that feels more like a game than it does a class.\nWhat are you waiting for?\nEnroll now and see what you can learn.",
      "target_audience": [
        "Roboticists looking to add another powerful tool in their robotics arsenal."
      ]
    },
    {
      "title": "Data Structures and Algorithms",
      "url": "https://www.udemy.com/course/data-structures-and-algorithms-z/",
      "bio": "Data Structures operations and Analysing Algorithms",
      "objectives": [
        "Learning about the different types of operations on Linear ADT",
        "Insight into the applications of linear ADT",
        "Able to analyse the performance of an algorithm design based on the appropriate data structures.",
        "Able to choose the data structure and algorithm for a given problem based on the evaluation"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Course Curriculum",
          "Introduction to Data Structure"
        ],
        "Abstract Data Types, Arrays": [
          "Abstract Data Type",
          "Abstract Data Type- Classification",
          "Arrays",
          "Arrays-Operations",
          "Arrays-Practice Problems",
          "Q1"
        ],
        "Linked Lists": [
          "Linked Lists",
          "Linked Lists-Searching -Traversal",
          "Linked Lists-Insertion-Deletion",
          "Linked Lists-Variations-Practice Example"
        ],
        "Stacks and Queue": [
          "Stacks",
          "Stacks-Applications",
          "Queue",
          "Practice Example",
          "Quiz2"
        ],
        "Algorithm Design Techniques": [
          "Introduction to Algorithms",
          "Analysing Algorithms",
          "Quiz3"
        ],
        "Sorting Algorithms- Iterative Design": [
          "Introduction",
          "Insertion sort",
          "Selection and Bubble Sort",
          "Analysis of Sorting Algorithms",
          "Practice Example",
          "Quiz4"
        ],
        "Divide and Conquer": [
          "Introduction, Merge Sort",
          "Quick Sort",
          "Practice Example",
          "Quiz5"
        ],
        "Conclusion": [
          "Other Algorithm Design Techniques"
        ]
      },
      "requirements": [
        "Be familiar with Fundamental Programming Concepts",
        "Be familiar with Fundamental Mathematical Concepts"
      ],
      "description": "This course is aimed at any undergraduate students who are at beginners level in learning Data Structure and Algorithm, This course focus on  the fundamental concepts of Data structure, its analysis and analysis of algorithms.\nBasic ADT's Arrays, Linked Lists, Stacks and Queue are discussed in detail. The course is not aimed at writing the pseudo code  for  operations, rather on their working. Each one discussed with applications and their Pros and Cons.\nThe second part of the course is to teach analysis of simple algorithms with appropriate example. The two algorithm design technique  Iterative and Divide and Conquer are discussed in detail with reference to the sorting algorithms.\nEach session is provided with practice example and quiz to know the level of understanding.",
      "target_audience": [
        "Beginners in learning Computer Science Subjects"
      ]
    },
    {
      "title": "Python: Object Oriented Programming",
      "url": "https://www.udemy.com/course/python-object-oriented-programming/",
      "bio": "Move beyond the basics with Object Oriented Programming",
      "objectives": [
        "Understand Object Orientated Programming",
        "Create an OOP architecture: Classes, Objects, Inheritance and more",
        "Apply OOP to handle complexity"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Introduction text"
        ],
        "What is a Class?": [
          "Classes Intro",
          "Class and Objects",
          "Lecture Notes",
          "Class Attributes",
          "Lecture Notes",
          "Object Types",
          "Lecture Notes",
          "Class Methods",
          "Lecture Notes",
          "Exercises"
        ],
        "More on Classes": [
          "Constructor",
          "Lecture Notes",
          "Destructor",
          "Lecture Notes",
          "Private Variables",
          "Lecture Notes",
          "Exercises"
        ],
        "Inheritance": [
          "Inheritance",
          "Lecture Notes",
          "Inherit Methods",
          "Multiple Inheritance",
          "Lecture Notes",
          "Override Methods",
          "Lecture Notes",
          "Exercises"
        ],
        "Advanced OOP": [
          "Method Overloading",
          "Lecture Notes",
          "Interface",
          "Lecture Notes",
          "Factory Method",
          "Lecture Notes",
          "Exercises"
        ],
        "Object Serialization": [
          "Introduction",
          "Object Serialization with JSON",
          "Object Serialization with YAML",
          "Object Serialization with Pickle"
        ],
        "Counter OOP": [
          "Introduction",
          "Class Method",
          "Static Method"
        ]
      },
      "requirements": [
        "You should have a basic level of Python programming"
      ],
      "description": "In this Python course you will learn Object Orientated Programming (OOP). This course is designed for beginner Python programmers. Do you want to learn beyond the basics?\nThe course starts by explaining classes and goes in-depth about all OOP concepts like inheritance, abstract base classes, encapsulations and other topics.  In this course we make OOP easy.\nOnce you completed this course, you'll be able to make your own Python classes and implement object orientated design in Python.",
      "target_audience": [
        "You learned Python and want to learn Object Oriented Programming",
        "You already have a basic working knowledge of Python but wnat to move to the next level"
      ]
    },
    {
      "title": "Browser Automation with Python Selenium",
      "url": "https://www.udemy.com/course/browser-automation-with-python-selenium/",
      "bio": "Automate your Web Browser and any Web App",
      "objectives": [
        "Automate your Web Browser",
        "Automate any Web App or Web Site"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Selenium IDE"
        ],
        "Install Web Driver": [
          "What is a Web Driver?",
          "Important Note",
          "Ubuntu Linux: Selenium with Firefox",
          "Lecture Notes: Ubntu Linux Selenium with Firefox",
          "Ubuntu Linux: Selenium with Chromium",
          "Lecture Notes: Chromium on Ubuntu",
          "Mac OS X: Selenium with Firefox",
          "Lecture Notes: Firefox on Mac OS X",
          "Mac OS X: Selenium with Chromium/Chrome",
          "Lecture Notes Chromium on Mac OS X",
          "Windows: Selenium on Windows"
        ],
        "Basic": [
          "Getting Started",
          "Selenium Browser",
          "Take Screenshots Automatically",
          "Note on Selenium",
          "Button Click",
          "Text Input",
          "Get element text"
        ],
        "Locate elements by XPath": [
          "What is XPath?",
          "XPath in Firefox",
          "XPath in Chrome"
        ],
        "More Selenium": [
          "Get Links from Webpage",
          "Radiobuttons",
          "Dropdown",
          "Checkox",
          "Table",
          "Tabs"
        ],
        "Locate elements by css selector": [
          "css path firefox",
          "css selector chrome"
        ]
      },
      "requirements": [
        "Basic Python knowledge required"
      ],
      "description": "Learn how to automate a web browser with Python.\nYou'll be able to make programs that use any web app or web site. In this course you'll learn how to control the web browser complete from code!  That including clicking buttons, typing in text fields, clicking links and all the other things you can do with a web browser.\nAll example programs are included so you can try them out yourself.",
      "target_audience": [
        "Python developers that want to automate the web"
      ]
    },
    {
      "title": "Flutter 2.0: Build Modern Responsive Web & Mobile Apps",
      "url": "https://www.udemy.com/course/flutter-build-modern-responsive-web-mobile-apps-desktop/",
      "bio": "Build Adaptive Apps - Web Apps, iOS, Android & Desktop Apps with a Single Codebase using Flutter 2.0 & Firestore",
      "objectives": [
        "Build Web Apps with Flutter 2.0 & Cloud Firestore",
        "Build Adaptive, Dynamic Web Apps with Flutter 2.0",
        "Master Advanced Flutter API's like Providers & Routing",
        "Compile and Build iOS and Android App Using the same Flutter Web App Codebase",
        "Learn How to Use FirebaseAuth to Authenticate Web App Users",
        "Cutting Edge Flutter 2.0 Web App, iOS, Android and Desktop App Development Tools"
      ],
      "course_content": {
        "Introduction": [
          "Introduction and Course Prerequesites",
          "What You'll be Building in this Course",
          "Quick Message"
        ],
        "Machine Setup - WINDOWS Users ONLY": [
          "Download Windows Installation Instructions PDF",
          "Setup Your Windows Machine for Flutter Web Development"
        ],
        "Machine Setup - MAC Users ONLY": [
          "Download MAC Installation Instructions PDF",
          "Setup Your MAC Machine for Flutter Web Development"
        ],
        "Download Course Code": [
          "Download Course Source Code"
        ],
        "Build a Simple Flutter Web App - Portfolio App": [
          "Installing Important VS Code Extensions",
          "Download Project Assests",
          "IMPORTANT: Null Safety Automatically Enabled - WATCH THIS VIDEO",
          "Create a Portfolio Project",
          "AppBar - Adding Image and Name",
          "Creating the ContactMe Button",
          "Finishing up the AppBar and Action Buttons",
          "Refactoring Our Code",
          "Setup the Main Body Section - Add Image and Overlay Text",
          "Setup the Main Body Section - Fix Overflow Issues",
          "Setup the Main Body Section - Adding Button Row",
          "Setup the List of Projects",
          "Finishing up the Project List",
          "Launching Social Media Links When Icons Clicked",
          "Implementing MailTo and Final Fixes"
        ],
        "Build a Book Tracker App with Firebase & Firestore with Flutter 2.0": [
          "What You'll Build",
          "Project Setup and Creating the GetStarted Page",
          "Finishing up the GetStarted Page",
          "Setup the Login Page - Part 1",
          "Toggle Create and Login Logic",
          "Setup Login Page -Creating the Form",
          "Setup Login Page - Finishing up the User Interface",
          "Login form Validation",
          "Create Account Form",
          "Section Summary"
        ],
        "Setting up FirebaseAuth & Firestore - The App Backend Infrastructure": [
          "Introduction - FirebaseAuth and Firestore",
          "Setting up FirebaseAuth & Firestore Backend",
          "Login in an Existing User - Setup Firebase Auth User",
          "Signing in and Creating a User Account from the Web App",
          "Connecting to Firestore Cloud Database and Using Flutter Streambuilder Widget",
          "Getting Snapshot of a Single Field and Showing It",
          "Redirecting Logged In Users to MainScreen Automatically",
          "Mapping Firestore Document to a Book Object",
          "Resources"
        ],
        "The User Profile - Setting Up the User Profile": [
          "User Creation Structure",
          "Creating Users Collection in Cloud Firestore",
          "Adding Action Buttons in the AppBar",
          "Filtering Users and Showing Username in the AppBar",
          "Showing User Avatar Pic",
          "Create the User Account Dialog & Showing the Avatar and Name",
          "User Profile - Adding Name and Profession",
          "Finishing Up Adding User Quotes",
          "Edit Profile - Setting up the Form Dialog",
          "Populating TextFields and Code Refactor",
          "Refactoring the UpdateUser Widget",
          "Updating the User",
          "Updating the User - Only Updating the Necessary Fields & Final Section Remarks"
        ],
        "Book Search & Adding Books to Cloud Firestore": [
          "Section Introduction",
          "Creating the Search Book Page - Adding a TextField",
          "Google Book API - An Overview",
          "Parsing the Book API JSON",
          "Setting up the Book Class & FetchBooks Function",
          "Refactoring FetchBooks Function",
          "Showing Fetched Books in a ListView",
          "Creating the BookCard Widget",
          "Creating the BookDetails Alert Dialog",
          "Book Detail Dialog - Save and Cancel Buttons & Minor Cosmetics Fixes",
          "Saving Books to Cloud Firestore Database & Code Refactory",
          "Resources"
        ],
        "Book Tracker Main Page - Reading and Read Lists": [
          "Introduction - The Main Page Structure",
          "Assets",
          "Adding the Label Text",
          "Setting up Reading Now List - Dummy Cards",
          "Setting up the Reading Card List Widget",
          "Adding Items to the Reading Card List Widget - Image and Title",
          "Adding Button to the Reading Card List and More Cosmetic Fixes",
          "Setting Up the BookRating Widget",
          "Pulling in All the Books and Showing in the Card",
          "Setup reading List Cards",
          "Filtering Books by User Id",
          "Adding a Click Event to the Book Card & Show Details Alert",
          "Setting up the Form on the Details Alert Dialog",
          "Pulling the Book Data and Showing in the Book Details Dialog",
          "Setting up the Started Reading Button",
          "Updating Book with a Timestamp",
          "Showing the Started Reading Date",
          "Setting up the FinishedReading Date",
          "Adding a RatingBar",
          "Finishing Setting up the Rating Bar",
          "Deleting a Book",
          "Section Summary"
        ]
      },
      "requirements": [
        "Basic programming experience in general is helpful. As long as you have basic OOP Concepts, you should be just fine",
        "Be Willing to Work and Learn",
        "Pre-existing, Flutter, Dart Programming Experience is helpful; Or Web Development Basics"
      ],
      "description": "Flutter Web is here!\nIf you've wondered how to leverage your pre-existing Flutter/Dart development skills, then you'll be happy to know you now can build dynamic, scalable, and adaptive web apps (iOS, Android, and Desktop) with Flutter!\nFlutter 2.0 is a big release - you can use Flutter and Dart to build adaptive web and desktop apps - all with a single codebase.\nIn this course, you'll learn how to leverage Flutter 2.0 and Dart and build a capstone app called Book Tracker.\nYou'll be:\n(First) How to build a simple Flutter Web App - Portfolio App - to get started\nBuild a full-fledged, more complex, Flutter Web App with Firestore, FirebaseAuth as the backend\nCreate, Authenticate, and login users using Google Cloud FirebaseAuth\nCreate, Edit, Delete, Update Books with Cloud Firestore backend\nUse Providers, StreamBuilders in Flutter 2.0\nLearn how to implement basic and Advanced Routing in Flutter 2.0 Web\nDeploy Flutter Web App to Firebase Hosting\nBuild and release iOS and Android Mobile Apps from the same Web app codebase!\nBy the end of this course, you'll have all the tools and knowledge you'll need to build adaptive Flutter web apps, iOS, Android competently and easily port the same app into Desktop Apps!\n\n\nJoin and give yourself the right tools to become a Flutter cross-platform Software Developer!\nWhy Should You Take This Course (one more reason)?\n\nI'm Paulo Dichone, creator of the most best-selling online programming courses (with over 100,000 happy and satisfied students). This time, I have designed this Android Masterclass course - especially for YOU.\nI know how hard it can be to learn Flutter development in general - there's a lot of information out there, but the problem is that none is complete, nor is it updated.  I understand how frustrating it's to try to learn something on your own and spend months without seeing progress!\nThat's why I do what I do - teach.\nMy sole goal is to show you that you can get started right away with Flutter Web Development and start building your web app ideas!\n\n\nSign up today, and look forward to:\nOver 13 hours of HD 1080p video content\nBuild two Flutter Web Apps\nChallenges and Solutions\nFast and helpful support if you need anything or have questions\nMy great sense of humor :)\n\n\nEnroll today and start learning.\nSee you inside.\n\n\nPaulo",
      "target_audience": [
        "Beginner to Intermediate Flutter Developers",
        "Web Developers who Want to Learn to Build Flutter Web Apps",
        "Curious Students who Want to Build Their Own Flutter Web Apps, iOS, Android and Desktop Apps with Flutter 2.0",
        "Project Managers who Want to Learn How Flutter 2.0 Web App Development Works",
        "Anyone who wants to Learn Flutter Web App Development"
      ]
    },
    {
      "title": "Complete Software Engineering Course : Build Better Software",
      "url": "https://www.udemy.com/course/complete-software-engineering-course-build-develop-better-software/",
      "bio": "Learn Everything of Software Engineering : Plan, Design ,Develop, Test and Execute Software's using Software Engineering",
      "objectives": [
        "Software Engineering ,SDLC , SDLC Phases",
        "SDLC Models like Waterfall, Iterative, Incremental, Spiral, V Model, Agile etc",
        "SSDLC - Secure Software Development Lifecycle",
        "All the Key Agile Concepts",
        "SCRUM, KANBAN ,XP , CRYSTAL, LEAN RAD, FDD, SAFe",
        "Software Engineering Industry Best Practices",
        "Software Engineering Methods, tools , strategies, Principles, Guidelines everything"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Why you should take this Software Engineering Course ?",
          "How to take up this Software Engineering Course",
          "Case Study for this course"
        ],
        "Software Engineering": [
          "What is Software",
          "What is Engineering",
          "What is Software Engineering",
          "Why Software Engineering is Important and Worth Learning for"
        ],
        "Software Development": [
          "What is Software Development",
          "What is Project Management in Software Engineering",
          "How Software Engineering Project Ideas Emerges",
          "After Software Engineering Project Idea Emerged",
          "Standards and Certifications of IT software engineering service based companies"
        ],
        "Types of Software Engineering / Software Development": [
          "Front End Development | Front End Software Engineering",
          "Back End Development | Backend Software Engineering",
          "API Development | API Software Engineering",
          "Data Science | Data Science Software Engineering",
          "Mobile Application Development | Mobile Software Engineering",
          "Desktop Development | Desktop Software Engineering",
          "Cloud Computing Development | Software Engineering",
          "Full Stack Development",
          "Video Game Development",
          "Embedded System Development | Software Engineering",
          "Progressive Web Apps Development | Software Engineering",
          "Open Source Software Development | Software Engineering",
          "E-Commerce Software Development",
          "Enterprise Application Development | Software Engineering",
          "Database Development",
          "Artificial Intelligence AI and Machine Learning ML | AI ML Software Engineering",
          "Detail Case Study Requirments",
          "Analysis of Case Study"
        ],
        "SDLC in Software Engineering": [
          "Software Development Life Cycle SDLC | Software Engineering Cycle",
          "What is SDLC Software Development Life Cycle"
        ],
        "SDLC - Analysis and Planning Phase": [
          "Analysis and Planning Phase of SDLC",
          "Challenges of Analysis and Planning phase of SDLC",
          "Sample SDLC Process Timeline and Schedule",
          "SOW in Software Engineering Overview",
          "How Budget estimation done in Software Engineering Projects",
          "Bottom Up Estimation in Software Engineering Project",
          "Top Down Estimation in Software Engineering Projects",
          "Three Point Estimation in Software Engineering Projects",
          "Analogous Estimation of Software Engineering Project",
          "Parametric Estimation of Software Engineering Projects"
        ],
        "SDLC-Requirement Gathering Phase of Software Engineering": [
          "Requirement Gathering Phase of SDLC",
          "Challenges of Requirement Gathering Phase of SDLC",
          "Sample SRS Document / Software Requirement Specification Document",
          "Tools/ Softwares used in Requirment Gathering",
          "Difference between Analysis planning vs Requirement Gathering"
        ],
        "UML - Unified Modelling Language": [
          "Introduction",
          "Why UML",
          "What is UML",
          "Types of UML Diagrams",
          "Class Diagram in UML",
          "Sample Class Diagram Demonstration in UML",
          "Object Diagram in UML",
          "Sample Object Diagram Demonstration in UML",
          "Component Diagram in UML",
          "Sample Component Diagram Demonstration in UML",
          "Deployment Diagram in UML",
          "Sample Deployment Diagram Demonstration in UML",
          "Package Diagram in UML",
          "Sample Package Diagram Demonstration in UML",
          "Composite Structure Diagram in UML",
          "Sample Composite Structure Diagram Demonstration in UML",
          "Profile Diagram in UML",
          "Sample Profile Diagram Demonstration in UML",
          "Use Case Diagram in UML",
          "Use Case Diagram Demonstration in UML",
          "Activity Diagram in UML",
          "Sample Activity Diagram Demonstration in UML",
          "State Machine Diagram in UML",
          "Sample State Machine Diagram Demonstration in UML",
          "Sequence Diagram in UML",
          "Sample Sequence Diagram Demonstration in UML",
          "Communication Diagram in UML",
          "Sample Communication Diagram Demonstration in UML",
          "Timing Diagram in UML",
          "Sample Timing Diagram Demonstration UML",
          "Interaction Overview Diagram in UML",
          "Sample Interaction Overview Diagram Demonstration in UML"
        ],
        "SDLC- Design and Prototyping Phase of SDLC": [
          "Introduction",
          "Design and Prototyping Phase of SDLC",
          "Why Design and Prototyping is so important",
          "Challenges of Design and Prototyping Phase of SDLC",
          "High Level Diagram",
          "Data Flow Diagram",
          "Low Level Diagram",
          "UI UX | User Interface User Experience",
          "Wireframe Diagram",
          "High Fidelity and Low Fidelity Diagram",
          "Database Schema Design Diagram"
        ],
        "Software Design and Architecture in Software Engineering": [
          "Software Architecture",
          "Monolithic Software Architecture",
          "Layered Software Architecture",
          "Tiered Software Architecture",
          "Microservices Software Architecture",
          "Serverless Architecture",
          "Event Driven Architecture",
          "Software Design",
          "SOLID Software Design Principles",
          "Software Design Principles",
          "Software Design Patterns",
          "4+1 Software Architectural view Diagram"
        ]
      },
      "requirements": [
        "No Prerequisites needed for taking this course"
      ],
      "description": "This is the first-ever comprehensive Software Engineering course that covers almost everything that anyone aspiring to learn and progress in the Software field can take up and become as proficient as someone with nearly 10+ years of experience. This course is the gist of my entire decades of experience crafted in 14+ hours of content. Whatever I learned during my career concerning the real-world software Engineering I have included in this course. No boasting at all, Look at the course curriculum you will get the idea. In these 14 + Hours we are going to learn all the below concepts from scratch with a Real-life Case Study\n\n\nIntroduction\nWhat is Software\nWhat is Engineering\nWhat is Software Engineering\nWhy Software Engineering is Important and worth learning for\n\n\nSoftware Development\nWhat is Software Development\nWhat is Project Management in software engineering\nHow do software project ideas emerge?\nAfter the Project Idea is finalized what all things happen?\nStandards and Certifications of Service based companies should follow during software engineering\n\n\nTypes of Software Development\nIntroduction to Types of Software Development\nFront End Development\nBack-End Development\nAPI Development\nData Science\nMobile Development\nDesktop Development\nCloud Computing Development\nFull Stack development\nVideo game development\nEmbedded System Development\nProgressive web app development\nOpen source development\nE-commerce App development\nEnterprise App Development\nDatabase Development\nArtificial intelligence and machine learning development\nHow all these software development can be used in a real-life Case Study\nAnalysis of Case Study\nSoftware Development Life Cycle SDLC\nWhat is the SDLC Software Development Life Cycle\nSDLC - Analysis and Planning Phase of SDLC\nAnalysis and Planning Phase of SDLC\nChallenges of Analysis and Planning Phase of SDLC\nSample SDLC Process Timeline and Schedule\nHow the Budget estimation will be done\nSOW Scope of Work or Statment of Work Overview\nSOW Sample Template\n\nSoftware Project Cost Estimation\nBottom Up Estimation\nTop Down Estimation\nThree-point estimation\nAnalogous Estimation\nParametric Estimation:\n\n\nSDLC - Requirement Gathering Phase\nIntroduction\nRequirement Gathering Phase of SDLC\nChallenges of the Requirement Phase of SDLC\nSRS document\nTools/Software Used in Requirement Gathering\nDifference between Analysis and planning vs. Requirement gathering\n\n\nUML Needed for SDLC\nIntroduction to UML\nWhy UML\nWhat is UML\ntype of UML Diagram\nClass Diagram\nSample Class Diagram Demonstration\nObject Diagram\nSample Object Diagram\nComponent Diagram\nSample Component Diagram\nDeployment Diagram\nSample Deployment Diagram\nPackage Diagram\nSample Package Diagram\nComposite Structure Diagram\nSample Composite Structure Diagram\nProfile Diagram\nSample Profile Diagram\nUse Case Diagram\nSample Use Case Diagram\nActivity Diagram\nSample Activity Diagram\nState Machine Diagrams final\nSample State Machine Diagram\nSequence Diagram\nSample Sequence Diagram\nCommunication Diagrams\nSample Communication Diagram\nTiming Diagram\nSample Timing Diagram\nInteraction Overview Diagram\nSample Interaction Overview Diagram\nDiagrams\n\n\nSDLC Design and Prototyping of SDLC\nIntroduction\nDesign and Prototyping of SDLC Phase\nWhy Design and prototyping is so important in SDLC Process\nChallenge of Design and Prototyping Phase in SDLC Process\nHigh-level diagrams\nData Flow Diagram\nLow-Level Diagram\nUI UX\nWireframe Diagram\nHigh Fidelity and Low Fidelity Diagram\nDatabase Schema Design Diagram\n\n\nSoftware Design and Architecture\nIntroduction\nSoftware Architecture\nArchitecture Patterns\nMonolithic Architecture\nLayered Architecture\nTiered Architecture\nMicroservices architecture\nServerless Architecture\nEvent-Driven Architecture\nSoftware Design\nSoftware Design Principle- SOLID principle\nOther software design principles\nDesign Patterns\n4+1 Architectural View\n\n\nVersion Control System\nWhat is a Version Control System\nSource Code Management\nGit Branching Strategies\nSoftware application versioning\nApplication Environments\n\n\nSDLC- Development or Implementation Phase\nDevelopment or Implementation Phase\nChallenges of the Development Phase\nCode Coverage\nDevelopers Manual\nSynchronous code and Asynchronous code\nLanguage vs Framework\n\n\nTesting in the SDLC process\nIntroduction\nTesting Phase of SDLC\nChallenges of the Testing Phase in the SDLC Process\nTesting Methods\nTesting Levels\n\n\nTypes of Testing\nFunctional Testing\nLoad Testing\nPerformance Testing\nSecurity Testing\nIntegration Testing\nUsability Testing\nCompatibility Testing\nRegression Testing\nSanity Testing\nAccessibility Testing\nUnit Testing\nSystem Testing\nUser Acceptance Testing (UAT)\nNon-functional Testing\nQA Testing\nAPI Testing\nAB Testing\nGlobalization Testing\nCompliance Testing\nExploratory Testing\nAutomation Testing\n\n\nDeployment phase of SDLC\nDeployment Phase in SDLC\nChallenges of the Deployment Process in SDLC Process\nRequest for Change(RFC) Process\nPGLS\nRetrofit/Hotfix\nMaintenance Phase of SDLC\nBusiness As Usual(BAU)\nMaintenance Phase in SDLC\nChallenges of the Maintenance Phase in the SDLC Process\nSystem Improvement Program\nSupport Process: Raise Issue, Ticket and SLAs\nKeep It Current Process\nSupport Teams Structure\n\n\nDisaster Planning\nBusiness Continuity Planning (BCP)\nDifference between Disaster planning and BCP\n\n\nSecure Software Development Life Cycle SSDLC\nWhat is SSDLC\nPrinciples of Information Security\nRisk Threat and Vulnerability\nPrinciples of Protections\nPractices of SSDLC\nOWASP Open World Application Security Project\n\n\nSDLC Models used in SDLC\nWaterfall Model\nWhat is the Waterfall Model of SDLC\nWhen and Where to Use Waterfall Model\nPros and Cons of Using the Waterfall Model\n\n\nIncremental Model\nWhat is the Incremental Model of SDLC\nWhen and where to use the Incremental Model\nPros and Cons of the Incremental Model\n\n\nIterative Model\nWhat is an iterative Model of SDLC\nWhen and Where to Use Iterative Model\nPros and Cons of Using the Iterative Model\n\n\nV model\nWhat is the V model of SDLC\nWhen and Where V model\nPros and Cons of the V model\n\n\nSpiral Model\nWhat is the Spiral Model\nWhen and Where Spiral Model\nPros and Cons of Spiral Model\n\n\nAgile Model\nTraditional vs. Agile Model\nWhat is the Agile Model of SDLC\nWhen and Where Agile Model\nPros and Cons of the Agile Model\nAgile Manifesto\nAgile Principles\n\n\nKey Agile Concepts\nMinimum Viable Product\nUser Stories\nBurndown chart\n\n\nAgile Methodologies\nSCRUM - Agile Methodology\nKANBAN - Agile Methodology\nExtreme Programming - Agile Methodology\nLean Methodology - Agile Methodology\nCrystal Agile Methodology - Agile Methodology\nFeature-Driven Development (FDD) - Agile Methodology\nRapid Application Development (RAD) - Agile Methodology\nScaled Agile Framework (SAFe) - Agile Methodology\n\n\nAll these things we will learn via the Real Life examples and case studies. All of the above things are covered in just over 14+ hours of high-quality content. This is equivalent to a book with more than a thousand pages! in a very clear and concise manner doesn't waste a single minute of your precious time!\n\n\nYou're not going to get this information in One Place Anywhere over the Web.\n\n\nAnd on top of all these, you'll get:\n\n\nClosed-captions generated by a human, not a computer! Currently, only the first few sections have closed captions but new captions are being added every week.\n\n\nOffline access: if you are traveling or have a slow connection, you can download the videos and watch them offline.\n\n\nDownloadable resource\n\n\nPREREQUISITES\n\n\nThere is no such Prerequisite for this course anybody who has an interest in learning the Software development process can take up this course. We will learn everything from scratch in this course.\n\n\n30-DAY FULL MONEY-BACK GUARANTEE\n\n\nThis course comes with a 30-day full money-back guarantee. Take the course, watch every lecture, and do the exercises, and if you are not happy for any reason, contact Udemy for a full refund within the first 30 days of your enrolment. All your money back, no questions asked.\n\n\nABOUT YOUR INSTRUCTOR\n\n\nHi! My name is Yogesh Dahake! I'm a passionate Lead Software engineer with a decade of experience and I've taught over a thousand people about software development and Coding via my course and YouTube channel.\n\n\nMy goal is to enable people not just to learn but in an Optimal, efficient, and effective way and Generate that Spark of learning. That's why my courses are simple, pragmatic, and free of clutter\n\n\nSo, what are you waiting for? Don't waste your time jumping from one tutorial to another. Enroll in the course Acquire the LIFE Changing Skill in just 14 hours\n\n\nWho this course is for:\n\n\n1. People who are starting their careers in the software industry.\n2. People who are students of Software Engineering.\n3. People who are already working in the software company.\n4. Developer, Lead, Technical Architect, Tester anybody who is directly or indirectly involved in the process of software development\n5. People who want to develop quality software\n\n\nOn a higher note,\n\n\nAnybody who has an interest in Software, From Students to Teachers, From People who are about to start their careers to Professionals in the software industry.",
      "target_audience": [
        "Students who are learning Software Engineering",
        "Students who are starting their career in software Engineering",
        "IT Professionals who are already working in IT industry in Software Engineering",
        "People who wants to build the quality software's implementing the best software engineering methodologies",
        "Anyone who has a interest in IT and wants to know what happens in IT industry"
      ]
    },
    {
      "title": "Scalable programming with Scala and Spark",
      "url": "https://www.udemy.com/course/scalable-programming-with-scala-and-spark/",
      "bio": "Use Scala and Spark for data analysis, machine learning and analytics",
      "objectives": [
        "Use Spark for a variety of analytics and Machine Learning tasks",
        "Understand functional programming constructs in Scala",
        "Implement complex algorithms like PageRank or Music Recommendations",
        "Work with a variety of datasets from Airline delays to Twitter, Web graphs, Social networks and Product Ratings",
        "Use all the different features and libraries of Spark : RDDs, Dataframes, Spark SQL, MLlib, Spark Streaming and GraphX",
        "Write code in Scala REPL environments and build Scala applications with an IDE"
      ],
      "course_content": {
        "You, This Course and Us": [
          "You, This Course and Us",
          "Course Materials",
          "Installing Scala and Hello World"
        ],
        "Introduction to Spark": [
          "What does Donald Rumsfeld have to do with data analysis?",
          "Why is Spark so cool?",
          "An introduction to RDDs - Resilient Distributed Datasets",
          "Built-in libraries for Spark",
          "Installing Spark",
          "The Spark Shell",
          "See it in Action : Munging Airlines Data with Spark",
          "Transformations and Actions"
        ],
        "Resilient Distributed Datasets": [
          "RDD Characteristics: Partitions and Immutability",
          "RDD Characteristics: Lineage, RDDs know where they came from",
          "What can you do with RDDs?",
          "Create your first RDD from a file",
          "Average distance travelled by a flight using map() and reduce() operations",
          "Get delayed flights using filter(), cache data using persist()",
          "Average flight delay in one-step using aggregate()",
          "Frequency histogram of delays using countByValue()"
        ],
        "Advanced RDDs: Pair Resilient Distributed Datasets": [
          "Special Transformations and Actions",
          "Average delay per airport, use reduceByKey(), mapValues() and join()",
          "Average delay per airport in one step using combineByKey()",
          "Get the top airports by delay using sortBy()",
          "Lookup airport descriptions using lookup(), collectAsMap(), broadcast()"
        ],
        "Advanced Spark: Accumulators, Spark Submit, MapReduce , Behind The Scenes": [
          "Get information from individual processing nodes using accumulators",
          "Long running programs using spark-submit",
          "Spark-Submit with Scala - A demo",
          "Behind the scenes: What happens when a Spark script runs?",
          "Running MapReduce operations"
        ],
        "PageRank: Ranking Search Results": [
          "What is PageRank?",
          "The PageRank algorithm",
          "Implement PageRank in Spark",
          "Join optimization in PageRank using Custom Partitioning"
        ],
        "Spark SQL": [
          "Dataframes: RDDs + Tables"
        ],
        "MLlib in Spark: Build a recommendations engine": [
          "Collaborative filtering algorithms",
          "Latent Factor Analysis with the Alternating Least Squares method",
          "Music recommendations using the Audioscrobbler dataset",
          "Implement code in Spark using MLlib"
        ],
        "Spark Streaming": [
          "Introduction to streaming",
          "Implement stream processing in Spark using Dstreams",
          "Stateful transformations using sliding windows"
        ],
        "Graph Libraries": [
          "The Marvel social network using Graphs"
        ]
      },
      "requirements": [
        "All examples work with or without Hadoop. If you would like to use Spark with Hadoop, you'll need to have Hadoop installed (either in pseudo-distributed or cluster mode).",
        "The course assumes experience with one of the popular object-oriented programming languages like Java/C++"
      ],
      "description": "Taught by a 4 person team including 2 Stanford-educated, ex-Googlers  and 2 ex-Flipkart Lead Analysts. This team has decades of practical experience in working with Java and with billions of rows of data.\nGet your data to fly using Spark and Scala for analytics, machine learning and data science\nLet’s parse that.\nWhat's Spark? If you are an analyst or a data scientist, you're used to having multiple systems for working with data. SQL, Python, R, Java, etc. With Spark, you have a single engine where you can explore and play with large amounts of data, run machine learning algorithms and then use the same system to productionize your code.\nScala: Scala is a general purpose programming language - like Java or C++. It's functional programming nature and the availability of a REPL environment make it particularly suited for a distributed computing framework like Spark.\n\nAnalytics: Using Spark and Scala you can analyze and explore your data in an interactive environment with fast feedback. The course will show how to leverage the power of RDDs and Dataframes to manipulate data with ease.\n\nMachine Learning and Data Science : Spark's core functionality and built-in libraries make it easy to implement complex algorithms like Recommendations with very few lines of code. We'll cover a variety of datasets and algorithms including PageRank, MapReduce and Graph datasets.\nWhat's Covered:\nScala Programming Constructs: Classes, Traits, First Class Functions, Closures, Currying, Case Classes\nLot's of cool stuff ..\nMusic Recommendations using Alternating Least Squares and the Audioscrobbler dataset\nDataframes and Spark SQL to work with Twitter data\nUsing the PageRank algorithm with Google web graph dataset\nUsing Spark Streaming for stream processing\nWorking with graph data using the  Marvel Social network dataset\n.. and of course all the Spark basic and advanced features:\nResilient Distributed Datasets, Transformations (map, filter, flatMap), Actions (reduce, aggregate)\nPair RDDs , reduceByKey, combineByKey\nBroadcast and Accumulator variables\nSpark for MapReduce\nThe Java API for Spark\nSpark SQL, Spark Streaming, MLlib and GraphX",
      "target_audience": [
        "Yep! Engineers who want to use a distributed computing engine for batch or stream processing or both",
        "Yep! Analysts who want to leverage Spark for analyzing interesting datasets",
        "Yep! Data Scientists who want a single engine for analyzing and modelling data as well as productionizing it."
      ]
    },
    {
      "title": "Binary: The Foundation of All Computing",
      "url": "https://www.udemy.com/course/learn-binary/",
      "bio": "Learn how technology works at the foundation. You'll be able to read and write binary and see how it all fits together.",
      "objectives": [
        "Read and write binary",
        "Read and write hexadecimal",
        "Understand why binary is made of 1s and 0s",
        "Understand ASCII and Unicode",
        "Know what a real gigabyte is",
        "Understand different counting systems (such as Base16 and Base64)"
      ],
      "course_content": {
        "Getting Started": [
          "What is binary?",
          "Binary terms",
          "Binary Basics",
          "Meet App Cat"
        ],
        "Knowing Binary Inside and Out": [
          "Kilobytes, Megabytes, and Gigabytes",
          "App Cat buys a new hard drive",
          "Reading binary: chalkboard session",
          "Writing binary: chalkboard session",
          "Reading and Writing Binary",
          "ASCII and Unicode",
          "App Cat goes to a meetup"
        ],
        "Getting Comfortable with Hexadecimal": [
          "Base2, Base10, and Base16",
          "Reading and writing hexadecimal: chalkboard session",
          "RGB color codes",
          "Reading and Writing Hexadecimal"
        ]
      },
      "requirements": [
        "Pencil and paper",
        "No programming skills needed",
        "Basic math skills (addition and subtraction)",
        "Standard calculator skills (multiplication, exponents)",
        "An open mind to understand new ways of using numbers",
        "Excitement about knowing how all digital technology works"
      ],
      "description": "You should take this course if you want to have mastery over the foundations of digital technology... if you want to look at an HD movie and think \"I know how that's working on the root level. Awesome!\"\nThis course is all about binary, hexadecimal, and the core concepts that make all of our modern information technology possible. There are videos, quizzes, and a couple of App Cat episodes in presentation format.\nYou should watch the videos in order. Some of them build on the content from the last video. There are 3 chalkboard session videos that show the how-to steps for reading and writing binary and hexadecimal. You should watch those with paper and a pencil. You'll want to follow along.",
      "target_audience": [
        "Professional technologists",
        "Technology enthusiasts",
        "Perpetual learners"
      ]
    },
    {
      "title": "Embedded C Programming Design Patterns",
      "url": "https://www.udemy.com/course/embedded-c-programming-design-patterns/",
      "bio": "Design patterns for creating clean and maintainable firmware code for embedded systems",
      "objectives": [
        "Code readability and maintainability",
        "Great code reuse",
        "A clean software architecture",
        "Easy code review"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Quiz: Introduction"
        ],
        "Creational Patterns": [
          "Object Pattern",
          "Quiz: Object Pattern",
          "Opaque Pattern",
          "Quiz: Opaque Pattern",
          "Singleton Pattern",
          "Quiz: Singleton Pattern",
          "Factory Pattern",
          "Quiz: Factory Pattern"
        ],
        "Structural Patterns": [
          "Callback Pattern",
          "Quiz: Callback Pattern",
          "Inheritance Pattern",
          "Quiz: Inheritance Pattern",
          "Virtual API Pattern",
          "Quiz: Virtual API Pattern",
          "Bridge Pattern",
          "Quiz: Bridge Pattern"
        ],
        "Behavioral Patterns": [
          "Return Value Pattern",
          "Quiz: Return Value Pattern"
        ],
        "Concurrency Patterns": [
          "Concurrency Pattern",
          "Quiz: Concurrency Pattern",
          "Spinlock Pattern",
          "Quiz: Spinlock Pattern",
          "Semaphore Pattern",
          "Quiz: Semaphore Pattern",
          "Mutex Pattern",
          "Quiz: Mutex Pattern",
          "Conditional Pattern",
          "Quiz: Conditional Pattern"
        ]
      },
      "requirements": [
        "Basic familiarity with the C programming language"
      ],
      "description": "Why you need design patterns\nClean and maintainable: design patterns help us write clean, robust and maintainable code.\nEnhanced code reuse: patterns help you decouple dependencies and keep your code organized.\nBeing proactive about bug prevention: design patterns give clear expectations and enable us to review and reason about large quantities of code more easily.\nRemoves ambiguity: using the same patterns consistently removes ambiguity about code structure and behavior.\nEssential for effective DevOps: code that applies well known and understandable patterns is easy to review.\nMake details fall into place: design patterns help organize the code and make small implementation details fall into place more easily.\nWhen we develop embedded software, we see time and again the same class of problems. Legacy code that is costly to maintain, changing one piece of code results in unexpected behavioral changes in other places, code that breaks in unexpected ways.\nAll of this results in source code that becomes exponentially more difficult to work with.\nWhat this all comes down to is lack of clear architectural guidelines for writing the software. Things like \"How do we define an object?\" or \"What basic methods should every object have?\". These things aren’t enforced by compilers and probably will never be. This is something that we must enforce with clear guidelines and code review.\nThis is why we have a list of guidelines that we apply to every project and we make sure that all developers know about these guidelines and point out to each other during code review when these guidelines are not being followed. This results in code that is clean, easy to maintain, easy to test and easy to understand too.\nWe use design patterns to clarify software structure and the expectations that we place on that structure.\nDesign patterns are essential for implementing efficient devops because they directly decrease the time it takes to review new code. When everyone on the team uses design patterns and agrees on their use, everyone also knows what to expect from new code when it follows already known patterns.\nDesign patterns help us write clean, robust and maintainable code.\nCourse Overview\nWe are going to start with a short introduction where I explain to you how to follow this course and where to find additional resources and how each module is structured.\nWe will then cover Creational Patterns which deal with construction of our data objects. Creational patterns help us have standardized ways of creating new objects and handling responsibility of memory ownership.\nAfter that we dive into Structural Patterns which deal with the structure of our code. These patterns help us structure our code such that we can easily extend it with new functionality without having to refactor it later.\nThe Behavioral Patterns is a section concerned with code 'behavior' such as return value pattern. These patterns help us with certainty of what to expect from code in terms of behavior in different common situations.\nFinally, the Concurrency Patterns will give you an intuitive understanding of concurrency on an embedded RTOS so that you can understand when to use which concurrency pattern in order to achieve high responsiveness of your application.\nIntroduction\nIntroduction. In this section we look at useful information that you need before getting started, where to find code examples for this training, how to get additional help and where you can ask questions regarding this course. This is a brief introduction to this course.\nCreational Patterns\nObject Pattern. This is a way to group data into objects that can be instantiated and destroyed. We also introduce concept of classes and member functions.\nOpaque Pattern. This pattern gives us three ways of making the implementation of the object private and exposing only a handle to the object. This can also be referred to as opaque objects pattern.\nSingleton Pattern. The singleton pattern is a design pattern used to ensure that a class has only one instance, while providing a global access point to this instance.\nFactory Pattern. The factory design pattern is a creational design pattern that provides an interface for creating objects in a super class, but allows sub-classes to alter the type of objects that will be created.\nStructural Patterns\nCallback Pattern. Deals with object oriented callbacks that are bound to instances of objects. Allows callbacks to operate on specific instances of objects.\nInheritance Pattern. Inheritance pattern is used for implementing inheritance relationships between objects and components in a C program. It is useful as a way to create a hierarchy of objects instead of having to manage a large application where all details are at the same level of abstraction.\nVirtual API Pattern. Virtual API pattern is a way of implementing virtual functions in C and making the handles to opaque objects also \"smart\". The virtual api pattern gives us polymorphism - where we can use the same interface for several implementations without knowing about these implementations.\nBridge Pattern. This pattern builds upon the virtual api pattern and is the pattern to use when you need to bridge two distinct hierarchies of objects. We cover an example in Rust and in C where we look at how this pattern can be used in practice.\nBehavioral Patterns\nReturn Value Pattern. This pattern standardizes the way that function handle return values. This is valuable because return values in C are the primary way to signal status of an operation. Therefore we must have a clear way of communicating with caller through standardized return value.\nConcurrency Patterns\nConcurrency Introduction. In this section we are going to look at concurrency itself as a pattern for software development as well as when and why we should consider concurrency as a valuable tool in our toolbox.\nSpinlock / Interrupt Masking Pattern. Masking interrupts is the simplest pattern for data integrity has to do with protecting shared data that is accessed by interrupts. A generic implementation of this is often done in the form of spinlock. Here we look at how we need to protect data from corruption by making sure interrupt never runs when we are modifying it.\nSemaphore Pattern. A semaphore is one level above a spinlock and outlines a pattern of signalling between interrupt handlers and application level threads (and also between multiple threads in our application). In this module we look at the actual implementation of a semaphore, its use cases and important considerations. A semaphore is the most basic, thread aware synchronization primitive in any RTOS system.\nMutex Pattern. The mutex is slightly different from the semaphore in that it prevents starvation by means of priority inheritance. It is the primary pattern that should be used by an application thread for mutually exclusive access to a resource with respect to other threads. In this module we will look at an implementation of mutex, how it works and how it differs from implementations of other primitives.\nConditional Variable Pattern. The conditional variable pattern builds upon the mutex pattern to implement a way of signaling and waking up one or more threads from another thread or from an interrupt handler. This pattern is useful for checking for arbitrarily complex conditions in response to an asynchronous event in a safe manner.\nWho this is for\nThis training is for:\nEmbedded Software Architects: even if you have been coding for many years, you may still find ideas in this content on how to do things better.\nBeginner Embedded Programmers: patterns help you organize your code and the best place to start is right from the start.\nEmbedded Manager: it is very important that patterns are well understood and applied by the whole team because of how much impact they have on code structure.\nTime to enroll!",
      "target_audience": [
        "Professional embedded engineers",
        "Software developers working with system level software",
        "C programmers working with industrial automation",
        "IoT product firmware developers"
      ]
    },
    {
      "title": "Apache Kafka Series - Kafka Connect Hands-on Learning",
      "url": "https://www.udemy.com/course/kafka-connect/",
      "bio": "Kafka Connect - Learn How to Source Twitter Data, Store in Apache Kafka Topics & Sink in ElasticSearch and PostgreSQL",
      "objectives": [
        "Configure and run Apache Kafka Source and Sink Connectors",
        "Learn concepts behind Kafka Connect & the Kafka Connect architecture",
        "Launch a Kafka Connect Cluster using Docker Compose",
        "Deploy Kafka Connectors in Standalone and Distributed Mode",
        "Write your own Kafka Connector"
      ],
      "course_content": {
        "Course Introduction": [
          "Important Pre-Requisites",
          "Course Objectives",
          "Course Structure",
          "About Your Instructor"
        ],
        "Code Download": [
          "Code Download"
        ],
        "Kafka Connect Concepts": [
          "What is Kafka Connect?",
          "Kafka Connect Architecture Design",
          "Connectors, Configuration, Tasks, Workers",
          "Standalone vs Distributed Mode",
          "Distributed Architecture in Details"
        ],
        "Setup and Launch Kafka Connect Cluster": [
          "Important information about installation",
          "Docker on Mac (recent versions)",
          "Docker Toolbox on Mac (older versions)",
          "Docker on Linux (Ubuntu as an example)",
          "Docker on Windows 10 64bit",
          "Docker Toolbox on Windows (older versions)",
          "Important note for Docker Toolbox users",
          "Starting Kafka Connect Cluster using Docker Compose"
        ],
        "Troubleshooting Kafka Connect": [
          "It's not working! What to do?",
          "Where to view logs?",
          "Asking a question in the Q&A"
        ],
        "Kafka Connect Source - Hands On": [
          "Kafka Connect Source Architecture Design",
          "FileStream Source Connector - Standalone Mode - Part 1",
          "FileStream Source Connector - Standalone Mode - Part 2",
          "FileStream Source Connector - Distributed Mode",
          "List of Available Connectors",
          "Twitter Source Connector - Distributed Mode - Part 1",
          "Twitter Source Connector - Distributed Mode - Part 2",
          "Section Summary"
        ],
        "Kafka Connect Sink - Hands On": [
          "Kafka Connect Sink Architecture Design",
          "ElasticSearch Sink Connector - Distributed Mode - Part 1",
          "ElasticSearch Sink Connector - Distributed Mode - Part 2",
          "Kafka Connect REST API",
          "JDBC Sink Connector - Distributed Mode"
        ],
        "Writing your own Kafka Connector": [
          "Goal of the section: GitHubSourceConnector",
          "Finding the code and installing required software",
          "Description of the GitHub Issues API",
          "Using the Maven Archetype to get started",
          "Config Definitions",
          "Connector Class",
          "Writing a schema",
          "Data Model for our Objects",
          "Writing our GitHub API HTTP Client",
          "Source Partition & Source Offsets",
          "Source Task",
          "Building and running a Connector in Standalone Mode",
          "Command for next lecture",
          "Deploying our Connector on the Landoop cluster",
          "More Resources for Developers"
        ],
        "Advanced Concepts": [
          "Setting up Kafka Connect in Production (1/2)",
          "Setting up Kafka Connect in Production (2/2)",
          "What's next?",
          "Congratulations and Thank you!",
          "THANK YOU!",
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "Good understanding of Kafka Basic is REQUIRED to take this course",
        "A recent Windows / Mac / Linux machine with minimum 4GB of RAM, 5 GB of disk space",
        "Good to have knowledge about Linux command line",
        "Good to have knowledge about Docker",
        "A note book and pen is recommended to take notes during the entire course"
      ],
      "description": "A Comprehensive and Brand New Course for Learning Apache Kafka Connect Framework with Hands-on Training – (Launched in April 2017)\nKafka Connect is a tool for scalable and reliable streaming data between Apache Kafka and other data systems. Apache Kafka Connect is a common framework for Apache Kafka producers and consumers.\nApache Kafka Connect offers an API, Runtime, and REST Service to enable developers to define connectors that move large data sets into and out of Apache Kafka in real time. It inherits strong concepts such as fault-tolerance and elasticity thanks to being an extension of Apache Kafka. Kafka Connect can ingest entire databases, collect metrics, gather logs from all your application servers into Apache Kafka topics, making the data available for stream processing with low latency.\nKafka Connect standardises integration of other data systems with Apache Kafka, simplifying connector development, deployment, and management.\nIn this course, we are going to learn the Kafka Connector deployment, configuration and management with hands-on exercises. We are also going to see the distributed and standalone modes to scale up to a large, centrally managed service supporting an entire organisation or scale down to development, testing, and small production deployments. The REST interface to submit and manage connectors to your Kafka Connect cluster via an easy to use REST API’s.\nStudents Loved this course – Students have rated the course with 5 stars...!!\nTin Pavlinic says “This course is an excellent resource for those getting started with Apache Kafka-Connect. Stephane explains concepts very clearly and provides plenty of practical examples. The setup is easy. You can follow the examples along on your own machine, and then experiment further. I highly recommend this Apache Kafka course.”\nAlan V says \"This course is GREAT: 1. The teacher provides clear explanations of the role to Kafka Connector in Kafka Streaming Solution architecture. 2. The course uses docker-compose.yml to help learners quick build a practice environment. 3. The course is well organized and easy to understand the idea, behind Kafka Connector. The teacher guides you how to use the tool step by step. 4. The provided shell commands are all well commented and steps by steps to guide users. If you read the comments in the shell script files after the course, it will remind you what the teacher just taught in the videos. 5. The teacher is very responsible to learners' questions and very helpful. If you are a professional developer, I highly recommend you to attend this course.\"\nSagar Joshi says \"It was very engaging and interesting course. I recommend taking this Apache Kafka course. Stephane has provided all the required details and its really a hands-on training course. Thank you..!!\"\n===============================\nInstructor\nMy name is Stephane Maarek, and I'll be your instructor in this course. I teach about Apache Kafka, the Kafka ecosystem and Kafka Certifications with my focus always on helping my students improve their professional proficiencies. I am also the co-founder of Conduktor: an enterprise Apache Kafka platform & UI to help everyone use Kafka.\nThroughout my career in designing and delivering these certifications and courses, I have already taught 1,000,000+ students and gotten 350,000+ reviews!\nWith Apache Kafka becoming much more than a buzzword out there, I've decided it's time for students to properly learn how to be a Kafka professional. So, let’s kick start the course! You are in good hands!\n===============================\nThis Course Also Comes With:\nLifetime Access to All Future Updates\nA responsive instructor in the Q&A Section\nLinks to interesting articles, and lots of good code to base your next applications onto\nUdemy Certificate of Completion Ready for Download\nThis is the course that could improve your career!\nApache Kafka is a skill in high demand and there are not enough people to fulfill all the open positions. You can boost your income, take on new roles and fun challenges. Many of my students are now the Kafka experts of their companies! You can be the next!\nI hope to see you inside the course!\n=======================\nNote: Looking for more advanced Kafka concepts? There are many volumes in the Apache Kafka Series:\nLearn Kafka for Beginners v2 (great to start)\nKafka Connect Hands On Learning\nKafka Streams for Data Processing\nKSQL on ksqlDB - Hands On!\nKafka Cluster Setup & Administration\nConfluent Schema Registry & Kafka REST Proxy\nKafka Security (SSL SASL ACL)\nKafka Monitoring and Operations\nHappy learning!",
      "target_audience": [
        "Developers who wants to learn Apache Kafka Connect Framework and get hands-on with it",
        "Professionals who are good at Apache Kafka ecosystem and basic core concepts",
        "Architects who want to understand how Kafka Connect fits in their Solution Architecture"
      ]
    },
    {
      "title": "Advanced Data Structures and Algorithms in C# ( DSA )",
      "url": "https://www.udemy.com/course/data-structures-and-algorithms-in-csharp-2/",
      "bio": "Advanced Data Structures and Algorithms in C# Using C# DSA C# Data Structures Algorithms with LeetCode DSA C# DSA in C#",
      "objectives": [
        "Understand various data structures and algorithms (DSA) through animations",
        "Get the ability to implement different algorithms in C#",
        "Get the confidence to face programming interviews",
        "Learn theory and implementation of Graph and related algorithms, AVL Trees, B Trees, Threaded Binary Trees and Expression Trees"
      ],
      "course_content": {
        "Introduction": [
          "Introduction to Advanced Data Structures and Algorithms Through C#"
        ],
        "Graph": [
          "Important : Source Code Repository required for course",
          "Introduction",
          "Terminology",
          "Cycles",
          "Connectivity in Undirected Graph",
          "Connectivity in Directed Graphs",
          "Tree and Forest",
          "Quiz 1",
          "Representation of Graph : Adjacency Matrix",
          "Adjacency Matrix in C#",
          "Representation of Graph : Adjacency List",
          "Adjacency List in C#",
          "Transitive closure of a directed graph and Path Matrix",
          "Warshall’s Algorithm",
          "Warshall’s Algorithm in C#",
          "Your Review Matters!"
        ],
        "Traversal in Graph": [
          "Introduction",
          "Breadth First Search",
          "Implementation of Breadth First Search",
          "Finding Shortest path in an unweighted graph",
          "BFS Spanning Tree",
          "BFS in Undirected Graphs : Finding Connected Components",
          "Depth First Search",
          "Implementation of Depth First Search through Stack",
          "Recursive Implementation of Depth First Search",
          "Classification of Edges in DFS of Directed Graph",
          "Classification of Edges in DFS of Undirected Graph",
          "Quiz 2"
        ],
        "Shortest Paths in Graph": [
          "Shortest Path Problem",
          "Dijkstra’s Algorithm",
          "Dijkstra’s Algorithm : Example",
          "Dijkstra’s Algorithm in C#"
        ],
        "Minimum Spanning Tree of a Graph": [
          "Introduction",
          "Prim's Algorithm",
          "Prim's Algorithm : Example",
          "Prim's Algorithm in C#",
          "Kruskal's Algorithm",
          "Kruskal's Algorithm : Example",
          "Implementation of Kruskal's Algorithm",
          "Kruskal's Algorithm in C#",
          "Quiz 3"
        ],
        "AVL Tree": [
          "Introduction",
          "Rotations",
          "Insertion in AVL Tree - 1",
          "Insertion in AVL Tree - 2",
          "Insertion in AVL Tree - 3",
          "Insertion in AVL Tree - 4",
          "Examples of insertion in AVL Tree",
          "Deletion in AVL Tree - 1",
          "Deletion in AVL Tree - 2",
          "Deletion in AVL Tree - 3",
          "Examples of deletion in AVL Tree",
          "Quiz 4"
        ],
        "Threaded Binary Tree": [
          "Introduction",
          "Insertion",
          "Deletion"
        ],
        "Expression Tree": [
          "Introduction",
          "Constructing and Evaluating an Expression Tree",
          "Implementation of Expression Tree"
        ],
        "B tree": [
          "Introduction",
          "Inorder Traversal",
          "Searching",
          "Insertion",
          "Implementation of Insertion - 1",
          "Implementation of Insertion - 2",
          "Deletion",
          "Examples of Deletion from Leaf Node",
          "Examples of Deletion from Non-Leaf Node",
          "Implementation of Deletion",
          "Quiz 5"
        ],
        "Bonus Lecture": [
          "Recommended Course and offer on my other courses"
        ]
      },
      "requirements": [
        "Basic knowledge of programming in any language",
        "Basic knowledge of linked list, stack, queue and binary search trees"
      ],
      "description": "This \"Advanced Data Structures and Algorithms In C#\" course is thoroughly detailed and uses lots of animations to help you visualize the concepts.\nThis \"Advanced Data Structures and Algorithms in C#\" tutorial provides a comprehensive explanation of trees, different types of graph and various graph algorithms. Throughout the course a step by step approach is followed to make you understand different algorithms. Through this course you can build a strong foundation and that will help you to crack Data Structures and Algorithms in C# coding interviews questions and work on projects. Good foundation on Data Structures and Algorithms interview topics helps you to attempt tricky interview questions.\nThis Data Structures and Algorithms using C# course covers following DSA topics in C# with implementation :\nTrees : AVL Tree, Threaded Binary Tree, Expression Tree, B Tree explained and implemented in C#\nGraphs : Adjacency matrix, Adjacency list, Path matrix, Warshall’s Algorithm, Traversal, Breadth First Search (BFS), Depth First Search (DFS),\nDijkstra’s Shortest Path Algorithm, Prim's Algorithm and Kruskal's Algorithm for minimum spanning tree\nHere are the DSA topics in course-\nAVL Tree\nThreaded Binary Tree\nExpression Tree\nB Tree\nGraph\nTraversal in Graph\nShortest Paths in Graph\nMinimum Spanning Tree of a Graph\nThe Data Structures and Algorithms with C# course is broken down into easy to assimilate short lectures and complete working programs are shown for each concept that is explained. The algorithms and examples are explained with figures and animations to simplify the learning of this complex topic. You will see code implementation of different data structures in C# and algorithms are explained in step-wise manner.\nIn this Data Structures and Algorithms through C# course, C# programs are used for implementing various Data structures and Algorithms, but you can easily code them in any other programming language like C++ or Python.\nThis Learn Data Structures and Algorithms In C# online course on udemy will help software developers to refresh the concepts studied in Data Structures and Algorithms In C# books / pdf and also to students learning from referred books / pdf.\nWhat students are saying about this course -\n\"Great course and instructor.\"\n\"Its well explained\"\n\"Author is quite knowledgeable about algorithm and data structure, and explanations are detailed and very clear.\"\n\"awesome tutorials maam. Really helped me understand algos which was my weak area. I have around 20 years of exp, yet i found your course very useful and learnt stuff that matters\"\n\"Good course\"\n\"Absolutely love this course. It was incredibly well explained and the code was amazing! I learned so much! Thank you.\"\n\"Very clear concise and easy to understand explanations. Thank you making a hard topic easier to understand.\"\n\"as good as data structure in C\"\n\"Simple techniques to explain the average time complexity and rotation.\"\n\n\nSo what are you waiting for, click on Buy button to enroll now and start learning.",
      "target_audience": [
        "Professional Programmers wanting to write effective code",
        "Programmers looking for jobs",
        "Computer Science students having Data Structures as part of their curriculum",
        "Non Computer science students wanting to enter IT industry"
      ]
    },
    {
      "title": "SOLID Principles in PHP : Learn how to write better code",
      "url": "https://www.udemy.com/course/solid-principles-decoded/",
      "bio": "Software Architecture: Learn how to create modular, maintainable and scalable software by mastering SOLID principles",
      "objectives": [
        "PHP solid principles",
        "Solid Principles in php",
        "Solid Principles OOP",
        "Object Oriented Programming",
        "Object Oriented Design",
        "Better software architecture",
        "Laravel tips and tricks along the way",
        "Introduction to Test driven development",
        "Understanding concept of decoupled code",
        "Software engineering principles",
        "PHP engineering best practices",
        "PHP design principles"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "How to make the most of this course"
        ],
        "Single Responsibility Principle": [
          "Introducing Single Responsibility Principle",
          "Walk-through of a real world use case",
          "Lets apply Single Responsibility Principle",
          "Test your SRP Knowledge"
        ],
        "Open Closed Principle": [
          "Introducing Open Closed Principle",
          "Walk-through of a contrived example",
          "Real world use case of using OCP - Part 1",
          "Real world use case of using OCP - Part 2",
          "Test your OCP Knowledge"
        ],
        "Liskov Substitution Principle": [
          "Introducing Liskov Substitution Principle",
          "Breaking down LSP , using real world use case - Part 1",
          "Breaking down LSP's technical jargon",
          "Test your newly acquired LSP knowledge"
        ],
        "Interface Segregation Principle": [
          "Introducing Interface Segregation Principle",
          "Using Interface Segregation Principle in real world -Part 1",
          "Using Interface Segregation Principle in real world -Part 2",
          "Test your newly acquired ISP knowledge"
        ],
        "Dependency Inversion principle": [
          "Introducing Dependency Inversion Principle - DIP",
          "Using Dependency Inversion Principle in real world",
          "Test your newly acquired Dependency Inversion Principle knowledge"
        ],
        "Course wrap up": [
          "Where to go from here ?"
        ]
      },
      "requirements": [
        "You should have a fair understanding of PHP",
        "Working knowledge of MVC framework will help"
      ],
      "description": "Object Oriented Design principles, SOLID, either you love them or hate them. However, they are the crucial building blocks of your software's architecture. Unfortunately, as useful as they are, most of the material available  on this subject is either too abstract or use impractical examples. Now, they do help in understanding these principles conceptually, but they lack the depth and understanding as how and where these principles can benefit you the most.\nWell, in this course, I will walk you through these principles step by step. I have structured the course in such a way that by the end of it, not only you will have completely understood these mystical concepts but also you will be ready to apply them in your projects straight away. I will also show you how  these principles can rescue you from the darkness of messy code by giving you practical examples.\nIn addition to that, I will also show you a few tips and tricks along the way in Laravel and a gentle introduction to testing.",
      "target_audience": [
        "Intermediate PHP developers",
        "Advance PHP developers",
        "Laravel developers",
        "Backend developers"
      ]
    },
    {
      "title": "Python Development First Steps and Development IDE Platform",
      "url": "https://www.udemy.com/course/python-development-first-steps-and-development-ide-platform/",
      "bio": "Python Development First Steps and Development IDE Platform Course by MTF Institute",
      "objectives": [
        "Python Development Essentials",
        "Interpreters and IDEs",
        "Setting up Anaconda",
        "Web-based Alternatives to IDEs",
        "Navigating the IDE",
        "Let's Greet the World",
        "its the module of program \"Professional Diploma in Python Development\"You may join that course separately, or join the full program."
      ],
      "course_content": {
        "Introduction": [
          "Onboarding to the learning process",
          "Welcome to MTF",
          "Important. Its specific course about first steps and IDE for beginners"
        ],
        "Python Development First Steps": [
          "Welcome to the section!",
          "Code, interpreters and IDEs",
          "Setting up Anaconda",
          "Web-based alternatives to IDEs",
          "Navigating the IDE",
          "Code literacy",
          "Let's greet the world",
          "Section conclusion",
          "print() function"
        ],
        "Interactive Part": [
          "Congratulations with finishing from MTF",
          "Interactive Part",
          "Bonus Section: Next Steps"
        ]
      },
      "requirements": [
        "For a better learning experience, we suggest you to use a laptop / mobile phone / pen and paper for taking notes, highlighting important points, and making summaries to reinforce your learning."
      ],
      "description": "Welcome to course: Python Development First Steps and Development IDE Platform\nits the module of program \"Professional Diploma in Python Development\"\nYou may join that course separately, or join the full program.\n\n\nCourse provided by MTF Institute of Management, Technology and Finance\nMTF is the global educational and research institute with HQ at Lisbon, Portugal, focused on business & professional hybrid (on-campus and online) education at areas: Business & Administration, Science & Technology, Banking & Finance.\nMTF R&D center focused on research activities at areas: Artificial Intelligence, Machine Learning, Data Science, Big Data, WEB3, Blockchain, Cryptocurrency & Digital Assets, Metaverses, Digital Transformation, Fintech, Electronic Commerce, Internet of Things.\nMTF is the official partner of: IBM, Intel, Microsoft, member of the Portuguese Chamber of Commerce and Industry.\nMTF is present in 208 countries and has been chosen by more than 380,000 students.\n\n\n\n\nCourse Content:\ninterpreters and IDEs\nSetting up Anaconda\nWeb-based alternatives to IDEs\nNavigating the IDE\nCode literacy\nLet_s greet the world\n\n\nCourse Author:\nStanisław Marek Halkiewicz\nI am a seasoned educator specializing in the domains of econometrics, statistics, statistical programming, and mathematics, boasting an extensive track record exceeding three years. Notably, I have imparted my expertise to students hailing from prestigious global universities, solidifying my standing as a sought-after tutor. I have made significant contributions in research endeavors spanning statistics, econometrics, and statistical programming. Furthermore, my professional trajectory encompasses a diverse spectrum, ranging from project management to business intelligence and Data Science.\n\n\nCourse Description:\nPython Development First Steps and Development IDE Platform is a course designed to introduce individuals to the world of Python programming. Python has gained immense popularity in recent years for its simplicity, versatility, and readability. This course is ideal for beginners who are new to programming.\n\n\nImportance For Companies:\nVersatility: Python is versatile and can be used for a wide range of applications, from web development and data analysis to artificial intelligence and automation. Companies can benefit from having Python developers who can adapt to various projects.\n\n\nProductivity: Python's clean and readable syntax allows developers to write code more quickly and efficiently. This results in faster project development and reduced costs for companies.\n\n\nLarge Ecosystem: Python has a vast ecosystem of libraries and frameworks, making it easier for companies to find solutions to their specific needs. This reduces the need for reinventing the wheel.\n\n\nData Analysis and AI: Python is a go-to language for data analysis and machine learning. Companies can leverage Python to extract valuable insights from data and build AI-driven applications.\n\n\nCommunity and Support: Python has a strong and active community of developers. Companies can tap into this community for support, resources, and talent recruitment.\n\n\nImportance For Developers:\n\n\nCareer Opportunities: Learning Python opens up a wide range of career opportunities in various industries. Python developers are in high demand, and their skills are transferable to different domains.\n\n\nDiversity of Roles: Python developers can work in roles such as web developer, data analyst, data scientist, machine learning engineer, and more. This diversity allows developers to explore different areas of interest.\n\n\nEase of Learning: Python's straightforward syntax makes it an ideal choice for beginners in programming. It's also accessible to experienced developers looking to add another language to their skill set.\n\n\nContinuous Growth: Python is constantly evolving, with new libraries and frameworks being developed. This means that developers who invest in Python education can continue to grow their skill set over time.\n\n\nRemote Work Opportunities: Python development often allows for remote work, providing developers with flexibility in their careers.\n\n\nThe course \"Introduction to Python Development\" provides a foundation for individuals looking to embark on a career in programming or expand their skill set. Python's significance in the tech industry, its versatility, and its demand in the job market make it a valuable asset for both companies and developers aiming to excel in today's technology-driven world.",
      "target_audience": [
        "Course Description: Introduction to Python Development is a course designed to introduce individuals to the world of Python programming. Python has gained immense popularity in recent years for its simplicity, versatility, and readability. This course is ideal for beginners who are new to programming.",
        "No special requirements. Course for any who want to build a career at development or improve their knowledge.",
        "Importance For Companies: Versatility: Python is versatile and can be used for a wide range of applications, from web development and data analysis to artificial intelligence and automation. Companies can benefit from having Python developers who can adapt to various projects.",
        "Productivity: Python's clean and readable syntax allows developers to write code more quickly and efficiently. This results in faster project development and reduced costs for companies. Large Ecosystem: Python has a vast ecosystem of libraries and frameworks, making it easier for companies to find solutions to their specific needs. This reduces the need for reinventing the wheel.",
        "Data Analysis and AI: Python is a go-to language for data analysis and machine learning. Companies can leverage Python to extract valuable insights from data and build AI-driven applications. Community and Support: Python has a strong and active community of developers. Companies can tap into this community for support, resources, and talent recruitment.",
        "Importance For Developers: Career Opportunities: Learning Python opens up a wide range of career opportunities in various industries. Python developers are in high demand, and their skills are transferable to different domains. Diversity of Roles: Python developers can work in roles such as web developer, data analyst, data scientist, machine learning engineer, and more. This diversity allows developers to explore different areas of interest.",
        "Ease of Learning: Python's straightforward syntax makes it an ideal choice for beginners in programming. It's also accessible to experienced developers looking to add another language to their skill set. Continuous Growth: Python is constantly evolving, with new libraries and frameworks being developed. This means that developers who invest in Python education can continue to grow their skill set over time.",
        "Remote Work Opportunities: Python development often allows for remote work, providing developers with flexibility in their careers. The course \"Introduction to Python Development\" provides a foundation for individuals looking to embark on a career in programming or expand their skill set. Python's significance in the tech industry, its versatility, and its demand in the job market make it a valuable asset for both companies and developers aiming to excel in today's technology-driven world."
      ]
    },
    {
      "title": "Mendix 9.6 : Building an e-Commerce Application [Advanced]",
      "url": "https://www.udemy.com/course/mendix-advanced-low-code-development-course/",
      "bio": "Learn Advanced Concepts Of Mendix. Javascript & Java Actions, Advanced Domain Model Concepts and more...",
      "objectives": [
        "Students will learn Advanced Domain Model Concepts.",
        "Students will learn Building Java Actions with Mendix.",
        "Students will learn Mendix Client API.",
        "Students will learn Custom Javascript Snippets."
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "How to Install Mendix 9.6?",
          "Install VS Code & Git",
          "How to Access Project Files"
        ],
        "Enabling App For Anonymous User": [
          "Creating Mendix Project",
          "Setting Up Anonymous Module & Role",
          "Mendix UI Design Hierarchy",
          "Implementing Login Page Initially",
          "Designing Initial Login Page, Creating Anon Entity",
          "Styling Login page",
          "Styling register page"
        ],
        "Mendix Architecture": [
          "Understanding Mendix Architecture",
          "Microflows vs Nanoflows"
        ],
        "Implementing Login & Register Functionality": [
          "Implement Login Functionality",
          "Implement Register Function Without Validation",
          "Implementing Validations For Registration Process",
          "Adding Progress Bar to Nanoflow",
          "Adding Custom SCSS to Login and Register Pages"
        ],
        "Implementing Admin Module": [
          "Changing Folder Structure",
          "Designing Admin Page and User Component",
          "Creating Admin Role and Adding Signout Button",
          "Prevent User to Access Admin Panel",
          "Building a Products Page",
          "Building Admin Panel - My Account",
          "Create New My Account Page - Image Uploads",
          "Redesigning My Account Page",
          "Implement Event Handler For Profile Page",
          "Changing Theme of App"
        ],
        "Advanced Domain Model Concepts": [
          "Import Excel Data, MxModelReflection & Product Entity",
          "How Domain Model Works",
          "Redesign Products Page",
          "Deep Dive into Non-Persistable - Persistable Entites",
          "Applying Price Filter To Products",
          "Implementing range slider - Designing Filter Pane",
          "Creating ProductCategory Entity and Import Data",
          "Assigning Random Categories To Products",
          "Importance of Refresh In Client",
          "Understanding Retrieve By Association",
          "Implementing Product Category Filter",
          "Understanding Nested Data Context",
          "Using Non-Persistent - Persistent Entity Relation",
          "Adding Selected Product Background",
          "Many to Many relation between Non Persistent Entity",
          "Checkout UI Implementation",
          "Implementing Checkout Logic",
          "Handling many to many relationships"
        ],
        "Implementing Business Logic": [
          "Changing User Sales Grid Logic",
          "Products - My Account Page UI Improvements",
          "Applying Entity Access for Data Security",
          "Changing Folder Structure",
          "Generating Inventory Data",
          "Redesign Product - Inventory Pages"
        ],
        "Domain Model Event Handlers": [
          "Check Inventory Data For Purchasing Process - Before Commit"
        ],
        "Error Handling In Mendix": [
          "Error Handling Summary In Mendix"
        ],
        "Building Custom Javascript Snippets - Product Card Popup": [
          "Adding Custom Javascript To Create Product Popup",
          "Adding Styling to Product Popup Card"
        ]
      },
      "requirements": [
        "Javascript",
        "HTML",
        "CSS",
        "Basic Java & OOP knowledge",
        "Should know Mendix basics."
      ],
      "description": "Mendix is a huge low-code platform, and the best in low-code development. It provides and utilizes tools to build, test, and deploy applications in same platform. Mendix has been building out the platform so that businesses can go live sooner and attain success faster. In addition to that on 1  October  2018, Mendix was acquired by Siemens, the largest industrial manufacturing company in Europe.\nIn this course you will build and learn;\n- Building an simple e-Commerce app with Mendix.\n- Custom Login & Registration Page\n- Allowing Anonymouse Users\n- Mendix UI Design System & Hierarchy\n- Advanced Domain Model Concepts\n- Javascript Actions\n- Mendix Client API\n- Java Actions\n- Custom Javascript Snippet Implementation\n- Advanced XPATH queries and much more...\n- Non Persistent & Persistent Entity Relationships\n- High Level Debugging Skills\n- Excel Importer, MxReflection Modules\n- Implementation of Custom SCSS\nThis is a 10 hours course to teach you to give more deep insight about Mendix development.\nMendix is a high productivity app platform that enables you to build and continuously improve mobile and web applications at scale. The Mendix Platform is designed to accelerate enterprise app delivery across your entire application development lifecycle, from ideation to deployment and operations.\nMendix enables you to implement both Agile and DevOps best practices. It even goes beyond that by involving business stakeholders in the actual development of the applications.",
      "target_audience": [
        "Business Analysts",
        "Software Developers"
      ]
    },
    {
      "title": "The Complete Hands-On Introduction to Apache Airflow 3",
      "url": "https://www.udemy.com/course/the-complete-hands-on-course-to-master-apache-airflow/",
      "bio": "Learn to author, schedule and monitor data pipelines through practical examples using Apache Airflow",
      "objectives": [
        "Create plugins to add functionalities to Apache Airflow.",
        "Using Docker with Airflow and different executors",
        "Master core functionalities such as DAGs, Operators, Tasks, Workflows, etc",
        "Understand and apply advanced concepts of Apache Airflow such as XCOMs, Branching and SubDAGs.",
        "The difference between Sequential, Local and Celery Executors, how do they work and how can you use them.",
        "Use Apache Airflow in a Big Data ecosystem with Hive, PostgreSQL, Elasticsearch etc.",
        "Install and configure Apache Airflow",
        "Think, answer and implement solutions using Airflow to real data processing problems"
      ],
      "course_content": {
        "Course Introduction": [
          "Prerequisites",
          "Course Objectives",
          "Who I am?",
          "Set up your Development Environment",
          "Optional: Quick intro to Docker"
        ],
        "Getting Started with Airflow": [
          "Why Airflow?",
          "What is Airflow?",
          "Core Components",
          "Core Concepts",
          "Airflow is not...",
          "The Different Architectures",
          "How does it work?",
          "Installing Apache Airflow",
          "Quiz Time!"
        ],
        "The important views of the Airflow UI": [
          "The Home View",
          "The DAGs view",
          "The Asset view",
          "Additional Important views"
        ],
        "Coding Your First Data Pipeline with Airflow": [
          "The Project",
          "Advices",
          "Define a DAG",
          "Create a Table",
          "Create a Postgres connection",
          "What is a Provider?",
          "The secret weapon!",
          "Is the API available?",
          "Other useful Sensors to know",
          "Extracting users (the classic way)",
          "Extracting users (the better way)",
          "Processing users",
          "Storing users",
          "Define the dependencies",
          "The DAG in action!",
          "Quiz Time!"
        ],
        "Creating DAGs with Assets!": [
          "The new Asset paradigm",
          "What is an Asset?",
          "Create your first Asset",
          "Materialize an Asset",
          "Define dependencies between Assets",
          "Monitor your Assets",
          "Create multiple Assets at once"
        ],
        "Databases and Executors": [
          "What's an Executor?",
          "The default configuration",
          "The sequential executor",
          "The local executor",
          "The celery executor",
          "Running Airflow with Celery",
          "Monitoring your tasks with Flower",
          "Running tasks with the CeleryExecutor",
          "Adding new workers",
          "What is a queue?",
          "Smart distribution of your tasks",
          "Back to the previous configuration",
          "Concurrency, the parameters you must know!",
          "Quiz Time!"
        ],
        "Implementing Advanced Concepts in Airflow": [
          "Grouping your tasks with TaskGroups",
          "TaskGroups in action!",
          "Sharing data between tasks with XCOMs",
          "XCOMs in action!",
          "Chossing tasks based on conditions"
        ],
        "Create a new Decorator and Airflow provider to run SQL queries": [
          "What you will build",
          "Some important concepts",
          "Creating the Airflow Provider",
          "Defining provider information",
          "Creating the custom SQL Operator",
          "Creating the new SQL decorator",
          "Installing your Provider",
          "The SQL Decorator is ready!"
        ],
        "APPENDIX": [
          "[BLOG POST] How to use the DockerOperator with Templating and Apache Spark",
          "[BLOG POST] Apache Airflow with Kubernetes Executor",
          "[BLOG POST] How to use templates and macros in Apache Airflow",
          "[BLOG POST] How to use the BashOperator",
          "[BLOG POST] Variables in Apache Airflow: The Guide",
          "[BLOG POST] The PostgresOperator: All you need to know",
          "Surprise ?"
        ]
      },
      "requirements": [
        "At least 8 gigabytes of memory",
        "Some prior programming or scripting experience. Python experience will help you a lot but since it's a very easy language to learn, it shouldn't be too difficult if you are not familiar with."
      ],
      "description": "Apache Airflow is an open-source platform for programmatically authoring, scheduling, and monitoring workflows. If you have many ETLs  to manage, Airflow is a must-have.\nIn this course, you are going to learn everything you need to start using Apache Airflow 3 through theory and practical videos.\nYou will start with the basics such as:\nWhat is Apache Airflow?\nThe core concepts of Airflow\nDifferent architectures to run Airflow\nWhat happens when a workflow runs\nThen you will create your first data pipeline covering many Airflow features such as:\nSensors, to wait for specific conditions\nHooks, for interacting with a database\nTaskflow, for writing efficient, easy-to-read DAGs\nXCOMs, for sharing data\nand much more.\nAt the end of the project, you will be equipped for creating your own workflows!\nAfter the project, you will also discover the new Asset syntax that completely change your way of thinking about your tasks in Airflow 3.\nWhat is an Asset\nHow to create dependencies between Assets\nHow to materialize an Asset\nand more.\nYou will discover the different executors for running Airflow at scale. More specifically, the CeleryExecutor which is extremely popular.\nHow to configure Airflow for using the CeleryExecutor\nHow to distribute your tasks on different Workers\nHow to choose your Workers with Queues\nand more.\nYou will explore advanced features to elevate your DAGs to a new level, and conclude by creating your own Airflow provider and a new decorator for executing SQL requests.\nIf you're working in a company with Airflow, you will love that part.\n\n\nEnjoy",
      "target_audience": [
        "People being curious about data engineering.",
        "People who want to learn basic and advanced concepts about Apache Airflow.",
        "People who like hands-on approach."
      ]
    },
    {
      "title": "Advanced React For Enterprise: React for senior engineers",
      "url": "https://www.udemy.com/course/react-for-senior-engineers/",
      "bio": "A practical deep dive into building, scaling and maintaining high-quality design systems for software engineers.",
      "objectives": [
        "Css architecture of frontend codebases",
        "Design patterns for creating reusable react components",
        "Creating maintainable and team effective components with Typescript",
        "Creating, deploying and managing npm packages",
        "Accessibility of custom components & accessibility testing",
        "Performance optimisation for styles in React codebases",
        "Unit and visual regression testing",
        "Storybook and component libraries",
        "Continuous integration and deployments for the modern software engineer"
      ],
      "course_content": {
        "Introduction to design systems": [
          "What are design systems",
          "Atomic Design principles",
          "Example design systems",
          "Your role as an engineer in a design system"
        ],
        "CSS Architecture": [
          "What we'll build",
          "Css architecture checklist",
          "Setup folder and file structure",
          "Define system variables",
          "Define foundation colors",
          "Assignment - Define foundation colors",
          "Define foundation typography",
          "Assignment - Define foundation typography",
          "Define mixins",
          "Assignment - Define mixins",
          "Global root and css reset",
          "Add stylelint and prettier",
          "Setup husky and pre-commit hooks",
          "Compile scss to css",
          "Compile components to css"
        ],
        "Monorepositories": [
          "Setup mono repository with yarn and lerna"
        ],
        "Implementation of React": [
          "Add react package to mono repository",
          "Add rollup to compile react",
          "Setup a react playground",
          "Setup dev script for all packages",
          "Identify atoms, molecules and organisms",
          "Assignment - Identify atoms, molecules and organisms",
          "Develop the colour component",
          "Dynamically generate utility classes",
          "Assignment - create image atom",
          "Extract foundation to a separate package",
          "Spacing component",
          "The select molecule",
          "Styles for the select molecule",
          "Calculate the overlay position",
          "Style the select option",
          "Selected option state",
          "Animate select caret",
          "Render props for custom option"
        ],
        "Accessibility for the select component": [
          "Expanded and popup aria attributes",
          "Control menu items with keyboard",
          "Accessible keyboard navigation"
        ],
        "Unit testing atomic components": [
          "Setup babel and jest",
          "Assignment - Select test cases",
          "Assignment - Select test cases solution",
          "Tests for foundations"
        ],
        "Storybook with react": [
          "Setup storybook",
          "Select component variants",
          "Addon knobs",
          "Addon accessibility",
          "Visual regression tests with chromatic"
        ],
        "Publish to npm": [
          "Publish to npm with lerna",
          "Control published files",
          "Conventional commits",
          "Lint commits",
          "Generate changelogs with lerna"
        ],
        "Github actions / CI / CD": [
          "Setup github actions workflow",
          "Fix build issues on CI",
          "Automate chromatic with github actions",
          "Deploy storybook to netlify"
        ]
      },
      "requirements": [
        "Basic knowledge of React is required",
        "A little knowledge about testing is recommended but not required",
        "Basic knowledge of Typescript is recommended but not required"
      ],
      "description": "Welcome to the React for Senior engineers course !!  Knowledge of React is 100% required for this course.\nI've been working with React.js for over 5 years now, and I am so excited to share with you the skills needed to thrive as a senior React Engineer.\nDo you want to build and architect react Apps like Microsoft and Github Engineers? This course is for you!\nWe'll build our very own design system from scratch. This will give us the opportunity to cover senior topics such as:\n\n\nCSS Architecture for react applications\nTypescript and its advantages for frontend engineers\nDesign systems and atomic design principles\nNpm package creation, management and publishing\nContinuous integration and deployment for the frontend engineer\nUnit component testing\nVisual regression testing\nStorybook and component libraries\nComponent design patterns\nMono-repository architecture patterns\nAccessibility and unit accessibility testing\nAnd so much more to come.\n\n\nThis course is perfect for you if:\nYou're a beginner to midlevel react developer looking to learn more advanced concepts\nYou want to improve your skills all round as a frontend engineer\nYou are interested in building design systems\nYou want to learn the fundamentals tools you'll need to become an open source software developer\n\n\nWe're also going to be adding a whole new section containing advanced react concepts that you'll find almost nowhere on the internet. We'll cover advanced topics such as design patterns, hook patters, efficient state management, frontend codebase architecture, best practices for performance, and so much more.\n\n\nCome join me on this fun journey. I can't wait to share my wealth of knowledge and experience with you. Click the Enrol button now, and change your life forever.",
      "target_audience": [
        "Beginner to intermediate React developers looking to become senior react developers"
      ]
    },
    {
      "title": "Taking Python to Production: A Professional Onboarding Guide",
      "url": "https://www.udemy.com/course/setting-up-the-linux-terminal-for-software-development/",
      "bio": "Data scientists, analysts, and beginner devs: transition from \"coder\" to \"software engineer\" and learn to ship code",
      "objectives": [
        "Set up a professional Python development environment - Visual Studio Code, pyenv, git, autocompletion",
        "Learn the professional git workflow with GitHub and CI/CD with GitHub Actions",
        "Make the terminal more intuitive with ZSH and plugins",
        "Version and package Python software and publish it for the community",
        "Setup automated code quality checks (testing, linting, documentation, type checking, etc.)"
      ],
      "course_content": {
        "Introduction": [
          "Course introduction",
          "NEW - Join Discord",
          "IMPORTANT! Course Notes and Course Website",
          "Linux and terminal crash course"
        ],
        "Environment Setup": [
          "Install VS Code",
          "Make sure you have the `code` command",
          "Mac users only: Install Homebrew, Xcode, and iTerm2",
          "Windows users only: Install the Windows Subsystem for Linux (WSL2)",
          "Windows users only: Integrate VS Code with the WSL2",
          "Resources: Installing git",
          "Installing the git CLI tool"
        ],
        "Improving the terminal with ZSH": [
          "Introduction",
          "Installing OhMyZSH",
          "Navigating using ZSH and installing ZSH plugins",
          "The ~/.zshrc file and ZSH themes",
          "Disabling/enabling ZSH plugins; All-in-one Markdown extension; web-search plugin",
          "Typeahead auto-completion with zsh-autosuggestions",
          "Syntax highlighting with zsh-syntax-highlighting",
          "Cheat sheet: quick ZSH setup"
        ],
        "Managing multiple Python versions": [
          "Introduction to Semantic Versioning (semver)",
          "Semantic Versioning (continued)",
          "Semantic Versioning",
          "Why developers need to be able to switch between multiple Python versions",
          "Resources for installing pyenv",
          "Installation and overview of pyenv for managing multiple Python versions",
          "History of Python changes; Overview of how Python evolves"
        ],
        "VS Code: shortcuts, auto-completion, and virtual environments": [
          "VS Code keyboard shortcut reference",
          "VS Code: layout and key shortcuts",
          "Python/Pylance: improve refactoring and syntax highlighting support",
          "Step debugging in VS Code",
          "Preview of virtual environments",
          "Python virtual environments and the PATH variable"
        ],
        "Git and VS Code": [
          "Introducing git by comparing it to Google Docs",
          "Git lens extension",
          "Git command reference",
          "git CLI and commits",
          "Making a commit",
          "Time traveling and best practices for making commits",
          "git stash",
          "(Part 1) git branching - visual intuition",
          "(Part 2) git branching - hands-on in VS Code",
          "Merging git branches",
          "Resolving merge conflicts",
          "[Extra] git branching game",
          "git tags",
          "Recap: the local git workflow"
        ],
        "GitHub and Code Review": [
          "Preview of the rest of the course",
          "What is GitHub?",
          "Creating a repository in GitHub",
          "Cloning and git remotes",
          "Pull Requests and Code Review",
          "Conducting Code Review with a Pull Request",
          "Recap: the remote git workflow"
        ],
        "Continuous Integration: clean code, formatters, linters and VS Code integrations": [
          "Section guide: resources, links, assignments, summary notes, etc.",
          "Clean code and why it's important",
          "Python style guides: Google and PEP 8",
          "Refactoring for better readability",
          "Introduction to Continuous Integration and best practices for PRs",
          "\"PR hell\" and more discussion of Continuous Integration",
          "Autoformatting with Black, VS Code's settings system, and \"Holy Wars\"",
          "Pylint Part 1 - Introducing Linters",
          "Pylint Part 2 - Integrating with VS Code",
          "Pylint Part 3 - Configuring Pylint w/ a config file and CLI arguments",
          "Flake8 Part 1 - Usage and background",
          "Flake8 Part 2 - Flake8 plugins w/ Darglint as an example",
          "isort: sorting import statements",
          "\"Code metrics\" like \"cyclomatic complexity\" with Radon, Xenon, and McCabe",
          "Typing Part 1 - type hints, autocompletion, static vs dynamic type checking",
          "Typing Part 2 - Mypy and basic typing",
          "Typing Part 3 - Simple and Complex Types",
          "Typing Part 4 - Union and Optional",
          "Typing Part 5 - TypedDict, dataclasses, NamedTuple, self-referential types",
          "Typing Part 6 - Generic Types",
          "Typing Part 7 - Type Stubs and incrementally adding types to existing codebases",
          "Darker: incrementally lint legacy projects",
          "Ruff: the last Python linter ever?"
        ],
        "Continuous Integration - The pre-commit framework": [
          "A Continuous Integration workflow with code quality tools",
          "CI Approach 1 - Writing a script that calls each tool",
          "Git pre-commit hooks",
          "CI Approach 2 - The pre-commit framework",
          "Pre-commit hook roundup",
          "Tour of an advanced pre-commit config file"
        ],
        "GitHub Actions": [
          "Our first GitHub Actions \"workflow\"",
          "GitHub Actions: running a workflow",
          "Fixing the build and using pre-commit",
          "Branch permissions, merge checks, and pull requests",
          "Understanding GitHub Actions Pricing",
          "Optimizing for cost by using GitHub Actions Triggers"
        ]
      },
      "requirements": [
        "Basic Linux/bash knowledge: cp, mv, ls, rm, etc; <-- there's a resource within to help with this; ability to install commands",
        "A computer that supports a *native* Linux terminal. If you are running on MacOS or Linux, you're good. If you are running Windows 10 or 11, we'll cover how to install the WSL 2 (See the early Windows videos).",
        "Knowledge of Python syntax: loops, functions, classes, etc.",
        "Comfortable Googling errors to get unstuck"
      ],
      "description": "This is a course about transitioning from a \"coder\" to a \"software engineer\". It specifically covers the tools needed to develop and \"ship\" production-ready software with Python.\n\n\nAs an MLOps engineer, my role is to help enable data scientists, analysts, and junior engineers become more self-sufficient at bringing products to production.\nThis course covers a mix of foundational tools, engineering practices, and career advice that new engineers should be given during the onboarding process when they join a team (but they often don't get guidance!).\nBy the end of this course, you should feel confident contributing to complex software projects in a team setting, whether open-source or at a company (or please request a refund within 30 days!).\nYou will understand how closed- and open-source projects are run and how to run your own.\nIn the course, we write very little code and instead focus on the non-coding aspects of software engineering that make you an effective member of the software engineering community.\nThat said, you should have a solid grasp of Python fundamentals (loops, functions, classes, etc.) before taking this course.\n\n\nExpect to learn\nhow to set up a professional Python development environment\nhow to set up a professional workflow for Python development with Visual Studio Code; extra emphasis on autocompletion\nhow to use git, GitHub, \"branching strategies\", and their integrations with VS Code and the terminal\nhow to write clean, maintainable code and ensure that all code contributed to your projects is good quality (testing, linting, formatting, type checking, documentation, etc.)\nhow to publish production-quality software for a wide audience with packaging, versioning, continuous integration, and continuous delivery (pre-commit, GitHub Actions, PyPI)\nhow to templatize all of the above points, so you can create new, high-quality projects in seconds\nBefore paying for this course, please sample the preview lectures so you can get a sense of whether it's right for you.\nSee you in the course!\n- Eric",
      "target_audience": [
        "Lower-intermediate to advanced Python developers who meet the requirements and are interested in the learning outcomes.",
        "Data scientists, analysts, junior developers, and self-taught developers who want want to set up a development environment for writing \"production-ready\" software"
      ]
    },
    {
      "title": "Spring Framework for Java Developers: Practical Guide",
      "url": "https://www.udemy.com/course/spring-learnit/",
      "bio": "Create online shop with Spring Boot, Spring Core, IoC, DI, Spring MVC, Spring Security, Spring Data, Spring JPA",
      "objectives": [
        "Spring Framework",
        "Spring Core",
        "Spring IoC (Inversion of control) & Spring DI (Dependency Injection)",
        "Spring MVC",
        "Spring Security",
        "Spring Data JPA",
        "Spring JDBC",
        "Spring AOP",
        "REST Architecture",
        "Spring Boot",
        "Creating of the Web application (online shop) using Srping Framework",
        "Coding exercises and source code examples",
        "OpenAI API",
        "ChatGPT",
        "Best Practices of using ChatGPT",
        "Slack Messenger API",
        "Jira Software Cloud API",
        "ChatGPT, Slack, Jira Integration via Java Spring Boot Web App",
        "Create Web App via Spring Boot, ChatGPT, Jira, Slack for Project Management Operations Automation"
      ],
      "course_content": {
        "Introduction": [
          "Communication plan",
          "Unlimited access to 'Learn IT' application for students",
          "Tips to Improve Your Course Taking Experience",
          "Additional Free Learning Materials to Use During the Course",
          "Free AI Bot for My Students Only – No Sign-Up, FREE, Just Practice"
        ],
        "Spring Core": [
          "Spring Framework: General Overview",
          "Using the Latest Spring Versions in This Course",
          "Spring Architecture, Inversion of Control, Dependency Injection & Spring Beans",
          "IoC, Beans Configuration, XML and Annotations - Practice",
          "Spring Dependency Injection: Practice"
        ],
        "Spring MVC & Spring for WEB": [
          "Spring MVC: Overview & First Project",
          "Model, RequestParam & PathVariable",
          "Spring MVC Forms, @ModelAttribute, Bean Validation",
          "Exception Handling in Spring MVC",
          "Serving Static Resources in Spring MVC",
          "WebFilters & HandlerInterceptor in Spring MVC",
          "L10N & I18N in Spring MVC",
          "Redirect & Forward in Spring MVC",
          "Spring API - Work with Cookies in Spring MVC & Work with Properties"
        ],
        "===== EXAM: Spring Core & Spring MVC =====": [
          "EXAM: Spring Core & Spring MVC"
        ],
        "Spring Security": [
          "Spring Security Introduction",
          "First Login Form & First Security Filter Configuration",
          "Spring Security: The Updated Way to Define the Security Filter Chain",
          "Login with Database Users, Roles & Privileges",
          "Remember Me & Methods Security",
          "Spring Security Architecture & Authentication Provider"
        ],
        "===== EXAM: Spring Security - Online Shop =====": [
          "EXAM: Spring Security - Online Shop"
        ],
        "Spring Data": [
          "Spring Data & Spring Data JPA: Overview",
          "Spring Data JPA: Practice"
        ],
        "===== EXAM: Spring Data JPA - Online Shop =====": [
          "EXAM: Spring Data JPA - Online Shop"
        ],
        "Spring JDBC": [
          "Spring JDBC: Overview",
          "Spring JDBC: Practice"
        ],
        "===== EXAM: Spring JDBC - Online Shop =====": [
          "EXAM: Spring JDBC - Online Shop"
        ]
      },
      "requirements": [
        "Understanding of the Java",
        "Understanding of the key concepts of the Web Development in Java (Servlets, Web Filters, JPA, etc.)"
      ],
      "description": "From this course, you can learn Spring Framework for Java Developers. We are going to learn Spring Boot, Spring Core, IoC, DI, Spring MVC, Spring Security, Spring Data, Spring JPA, etc.\nThere are a lot of other courses on this topic. So, why would you choose exactly this course?  Here are just a few reasons:\n\n- Coding examples\nTo learn to program is not enough just watching videos and reading books. You also need to have a lot of practice. In this training course, you will review multiple practical tasks and coding examples which will help you learn and understand Java better.\n\n- Open source code\nWe hide nothing from our students! Including the source code for the home task solutions and source code of examples that were shared during the lesson. Having the source code you can just copy and paste it to run it on your local computer to understand how things work better.\nYou are allowed to use all source code examples for learning purposes. This helps significantly to configure the environment and make tests work, especially in case students didn't work with any testing framework in the past.\n\n- Q&A support\nThe significant difference between the online and offline learning process is the instructor's availability. If you are in one room with a tutor he always can help you to get understand the specific concept or to help fix your code on your computer.\nIn this course, we are supporting students with answers to any questions flagged in the Q&A section. In case there will be recurring questions - separate video lessons will be created to show how to address the issue.\nSo with this course you are not just getting video materials, code exercises, source code, access to the free mobile application without limits (which is still pretty cool, huh? :) ), but you also get tutor support and answers to your questions along with this course.\n\n- Relevant knowledge\nAfter our team investigated other Java courses on Udemy we realized that most of them have nothing in common with real life. The information which is shared there is very old and significantly out of date. For example, the instructor teaches a framework which is not been used already for 15 years. Or instructors do stress on the programming design which is not used anymore at all!\nThe instructor of this course is a consultant in a top-rated IT outsourcing company and helps to bring cutting-edge solutions in IT for all his clients. Feel free to check the LinkedIn page of the instructor and check skills endorsement. More than 19 thousand people across all over the world (BTW most of them are from the top 100 companies of the world) evaluated the skills of Andrii Piatakha.\nWith this course, you can be sure that you will spend your time learning the right things from one of the best IT consultants in the world.\n\n- Free mobile App without limits for our students\nKnowing Java is one skill. Being able to pass interviews in the company - that is another skill :) Nowadays a lot of companies use tests to select candidates on the first level of interview. We developed applications to practice skills specifically for such purposes.\nIn this course, we will provide you link to download our FREE mobile app for android. (soon it will be also available for iOS platforms)\nThe instructor of this course comes up with hundreds of tests that are used to test the knowledge of candidates. With this application, you will be well-prepared for the interview.\nAlso, only for our students - there is no limit on attempts to pass certification. In the course, we will tell you how to set up a special bonus code that will remove restrictions for our students inside the app.\n\n- High concentration of useful material in each lesson\nSometimes you can notice that watching 5 minutes of our lesson is equivalent to watching another 30 minutes lesson.\nThis is because time spent for preparation for the lesson (script for the lesson, lesson structure) and video editing (to cut boring pieces of the lesson or time when the program loads) sometimes 10 times as much (sometimes even 20) as the final lesson duration after video editing.\nAlso, each topic is separated from another. In case some concept will be explained in the next lesson and you don't need to worry about understanding this in the scope of this lesson - the instructor will make an announcement when a specific topic will be covered.\nGo and try it yourself! We will appreciate your feedback.\n\n\n\n\nSo don't wait! Take a look at the lessons' preview if you still have doubts!\nBuy this course today, and you will get all updates for FREE!\nFor those who successfully passed this training course, or for students who were recognized for asking amazing questions, there is a special offer from the IT-Bulls company! The creator of this course is IT-Bulls company CEO and Founder. We are always in search of talents to run our amazing startups together with you. Probably you always dreamed about running your startup? In this course, you will be able to find the team who will teach you how to do that and (in particular cases) will be glad to help with implementation!\nHope you enjoy this course! And remember, we appreciate all your feedback! Your feedback will help us to become even better! Your feedback will help us to create to best Java course ever!\nSee you at the lessons! :)",
      "target_audience": [
        "This course is for Java Developers who wants to learn Spring Framework from scratch, or just learn more about Srping and get more practical skills",
        "For Java Engineers who is preparing for the interview (Spring Framework topic)"
      ]
    },
    {
      "title": "Java Data Structures & Algorithms + LEETCODE Exercises",
      "url": "https://www.udemy.com/course/data-structures-and-algorithms-java/",
      "bio": "DSA + LEETCODE for Coding Interviews — Clear, Step-by-Step Animated Walkthroughs!",
      "objectives": [
        "Solve 100+ coding exercises to ace DSA interviews with confidence.",
        "Think like a pro coder to tackle complex problems efficiently.",
        "Master data structures—linked lists, trees, heaps, graphs—for practical use.",
        "Learn algorithms—sorting, recursion, dynamic programming—with clarity.",
        "Analyze time and space complexity to optimize your coding solutions.",
        "Grasp DSA concepts faster with animated examples for deeper insight.",
        "Apply DSA to solve LeetCode challenges and practical coding problems.",
        "Boost your developer skills to excel in technical interviews confidently."
      ],
      "course_content": {
        "Introduction": [
          "Read This First: 3 Key Things About the Course",
          "Overview (Please Watch)",
          "Code Editor"
        ],
        "Big O": [
          "Big O: Intro",
          "Big O: Worst Case",
          "Big O: O(n)",
          "<> Big O: O(n)",
          "Big O: Drop Constants",
          "Big O: O(n^2)",
          "Big O: Drop Non-Dominants",
          "Big O: O(1)",
          "Big O: O(log n)",
          "Big O: Different Terms for Inputs",
          "Big O: Array Lists",
          "Big O: Wrap Up",
          "Big O"
        ],
        "Classes & References": [
          "Classes",
          "References"
        ],
        "Linked Lists": [
          "Linked List: Intro",
          "LL: Big O",
          "LL: Under the Hood",
          "LL: Constructor",
          "Coding Exercises (Important)",
          "LL: Print List",
          "LL: Append",
          "LL: Remove Last (Intro)",
          "LL: Remove Last (Code)",
          "LL: Prepend",
          "LL: Remove First",
          "LL: Get",
          "LL: Set",
          "LL: Insert",
          "LL: Remove",
          "LL: Reverse",
          "Linked List Big O"
        ],
        "<> LL: Coding Exercises": [
          "LL: Constructor",
          "LL: Append",
          "LL: Remove Last",
          "LL: Prepend",
          "LL: Remove First",
          "LL: Get",
          "LL: Set",
          "LL: Insert",
          "LL: Remove",
          "LL: Reverse"
        ],
        "<> LL: Interview / LeetCode Exercises": [
          "LL: Find Middle Node",
          "LL: Find Middle Node ( ** Interview Question)",
          "LL: Has Loop",
          "LL: Has Loop ( ** Interview Question)",
          "LL: Find Kth Node From End",
          "LL: Find Kth Node From End ( ** Interview Question)",
          "LL: Remove Duplicates",
          "LL: Remove Duplicates ( ** Interview Question)",
          "LL: Binary to Decimal",
          "LL: Binary to Decimal ( ** Interview Question)",
          "LL: Partition List",
          "LL: Partition List ( ** Interview Question)",
          "LL: Reverse Between",
          "LL: Reverse Between ( ** Interview Question)",
          "LL: Swap Nodes in Pairs",
          "LL: Swap Nodes in Pairs ( **Interview Question)"
        ],
        "Doubly Linked Lists": [
          "DLL: Constructor",
          "DLL: Append",
          "DLL: Remove Last",
          "DLL: Prepend",
          "DLL: Remove First",
          "DLL: Get",
          "DLL: Set",
          "DLL: Insert",
          "DLL: Remove"
        ],
        "<> DLL: Coding Exercises": [
          "DLL: Constructor",
          "DLL: Append",
          "DLL: Remove Last",
          "DLL: Prepend",
          "DLL: Remove First",
          "DLL: Get",
          "DLL: Set",
          "DLL: Insert",
          "DLL: Remove"
        ],
        "<> DLL: Interview / LeetCode Exercises": [
          "DLL: Palindrome Checker",
          "DLL: Palindrome Checker ( ** Interview Question)",
          "DLL: Reverse",
          "DLL: Reverse ( ** Interview Question)",
          "DLL: Partition List",
          "DLL: Partition List ( ** Interview Question)",
          "DLL: Reverse Between ( ** Interview Question)",
          "DLL: Swap Nodes in Pairs ( ** Interview Question)"
        ],
        "Stacks & Queues": [
          "Stack: Intro",
          "Stack: Constructor",
          "Stack: Push",
          "Stack: Pop",
          "Queue: Intro",
          "Queue: Constructor",
          "Queue: Enqueue",
          "Queue: Dequeue",
          "Stacks & Queues Big O"
        ]
      },
      "requirements": [
        "Basic Java programming knowledge (e.g., variables, loops, functions)",
        "No prior experience with data structures or algorithms needed",
        "An eager attitude to learn DSA and tackle coding challenges"
      ],
      "description": "Welcome to Data Structures & Algorithms in Java\n\nThis course makes learning to code fun and makes hard concepts easy to understand.\n\nHow did I do this?  By using animations!\n\nAnimating the Data Structures & Algorithms makes everything more visually engaging and allows students to learn more material - in less time - with higher retention (a pretty good combination).\n\nI will use these visuals to guide you, step-by-step, through the entire course.\n\nThe course also includes dozens-and-dozens of Coding Exercises. So you can immediately put everything into practice as soon as you learn it (a very important step).\n\nAll of this will help you to feel more confident and prepared when you walk into a coding interview.\n\nI have made several Free Sample Videos available for the course so you can see the difference the animations make.\n\nAlso, I am very active on the Q&A, so I will be with you every_step_of _the_way.\n\n_____________________________\n\n\nWhat you will get in this course…\n\n\nOver 100 hand-crafted animated HD videos to illustrate the Data Structures & Algorithms.\n\n\nHere are the topics we will cover:\n\n\nTechnical\nBig O notation\n\n\nData Structures\nArrays\nArray Lists\nLinked Lists\nDoubly Linked Lists\nStacks & Queues\nBinary Trees\nHash Tables\nHeaps\nGraphs\n\n\nAlgorithms\nDynamic Programming\nSorting\nBubble Sort\nSelection Sort\nInsertion Sort\nMerge Sort\nQuick Sort\n\n\nSearching\nBreadth First Search\nDepth First Search\n\n\n\n\nDon't just take my word for it though, check out what existing students have to say about my courses:\n\n5-Star Review:\n\"In order to describe this course accurately, we need the definition of the word Beautiful. beau·ti·ful: adjective 1.- pleasing the senses or mind aesthetically. 2.- of a very high standard; excellent.\"  - Josue Hernandez Amezcua\n\n5-Star Review:\n\"The best course on DSA on Udemy\" - Enlai Li\n\n5-Star Review:\n\"One of the best courses on DSA. The animations do make a huge impact. All the points are explained in detail. The only problem is that I can't give it more than a 5-star rating.\" - Nikita Sarkar\n\n5-Star Review:\n\"Amazing Course. My words cannot describe how much animations helped me to understand the concepts. 100% Recommended.\" - Simarjeet Singh\n\n5-Star Review:\nBeing a visual learner this is BY FAR the BEST course ever. The way the instructor presents this topic makes it so easy to understand.\" - Eduardo SN\n\n5-Star Review:\n\"The animations were really helpful for an easy understanding, but the best thing about this course for me is that it will not waste your time! It is perfectly optimized, covers the important topics that I wanted, and at the same time perfectly clear. Thank you so much.\" - Fatemeh Moghaddam\n\n5-Star Review:\n\"This course is very well done! ... the animations in each video take the explanation and understanding of the material to a new level.\" - Luis Felipe Posada\n\n5-Star Review:\n\"This course has seriously been amazing. The animations have worked wonders for my understanding and I have made significant progress from the beginning of the course until now.\" - Dakota Fabro\n\n5-Star Review:\n\"I can follow as a beginner, amazing.\" - Sabrina Fung\n\n5-Star Review:\n\"This is the best course I have ever seen\" - Luong Viet Tri\n\n\nREMEMBER… I'm so confident that you'll love this course that we're offering a FULL money-back guarantee for 30 days! So it's a complete no-brainer, sign up today with ZERO risk and EVERYTHING to gain.\n\nSo what are you waiting for? Click the \"Buy now\" button and join the best Java Data Structures & Algorithms course on Udemy.\n\nI look forward to seeing you in the course.\n\nNow let's get started! :-)",
      "target_audience": [
        "Java programmers aiming to ace technical interviews with DSA mastery",
        "University students seeking to excel in data structures and algorithms courses",
        "Self-taught programmers eager to fill gaps in their computer science knowledge",
        "Career switchers transitioning into tech roles with strong coding skills"
      ]
    },
    {
      "title": "Graph Theory Algorithms for Competitive Programming",
      "url": "https://www.udemy.com/course/graph-theory-algorithms-for-competitive-programming/",
      "bio": "Learn Graphs Algorithms in Computer Science & Mathematics, theory + hands-on coding and ace Competitive Coding problems!",
      "objectives": [
        "Graph Basics, Applications",
        "BFS, DFS, Connected Components",
        "Shortest Paths - Dijkstra, Bellman, Floyd Warshall",
        "Travelling Salesman Problem - DP with Bitmasks",
        "Topological Ordering, Strongly Connected Components",
        "Disjoint Set Union, Minimum Spanning Trees, Prim's & Kruskal",
        "Advanced Graphs, Euler Tour, Trees",
        "Network Flow, LCA, Articulation Points",
        "Graphs for Competitive Programming",
        "80 + Competitive Coding Questions",
        "Complete Code Repository in C++ and Java",
        "Coding Exercises Solutions"
      ],
      "course_content": {
        "Introduction": [
          "Course Orientation!",
          "Q/A Section & Discord Community",
          "Graphs Code Repository C++ and Java!",
          "Exercise Solutions - Code Repository!",
          "Sharing Feedback"
        ],
        "Setting Up Sublime [optional]": [
          "Sublime Setup",
          "Adding Master Header File",
          "Escaping Online Judges",
          "Common Code Snippets",
          "Using Macros",
          "Example Code Explained"
        ],
        "Graph Representation": [
          "Graphs Introduction",
          "Graph Applications",
          "Graph Key Terms",
          "Adjacency List Representation",
          "Find Center of Star Graph",
          "Adjacency List Representation with Node Class",
          "Maximal Network Rank",
          "Minimum Degree of a Connected Trio in a Graph",
          "Some Helpful Webinars [Optional]"
        ],
        "Breath First Search": [
          "Breadth First Search",
          "BFS Code",
          "BFS Shortest Path",
          "BFS Shortest Path Code",
          "Snakes and Ladder Game",
          "Snakes and Ladder Solution",
          "Message Route",
          "Word Ladder",
          "Valid Bfs?"
        ],
        "Depth First Search": [
          "DFS Concept",
          "DFS Code",
          "Keys and Rooms",
          "Largest Island",
          "Largest Island Solution",
          "Astronaut Pairs",
          "Reconstruct Itinerary"
        ],
        "Cycle Detection": [
          "Cycle Detection in Undirected Graph",
          "Cycle Detection in Undirected Graph Code",
          "Cycle Detection in Undirected Graph",
          "Directed Graph - Cycle Detection",
          "Directed Graph Cycle Detection",
          "Directed Graph - Cycle Detection Code",
          "Course Schedule",
          "Bipartite Graph",
          "Bipartite Graph Code",
          "Is Graph Bipartite?",
          "Detecting an Odd Length Cycle",
          "Detect Cycles in Grid",
          "Shortest Cycle in Undirected Graph"
        ],
        "Directed Acyclic Graph": [
          "Directed Acyclic Graph & Topological Ordering",
          "Topological Sort Algorithm",
          "Topological Ordering BFS Code",
          "Toplogical Order using DFS",
          "Topological Ordering using DFS Code",
          "All Paths From Source to Target",
          "Course Schedule II",
          "Largest Color Value in a Directed Graph",
          "Game Routes"
        ],
        "Disjoint Set Union": [
          "Disjoint Set Union Introduction",
          "DSU Data Structure - Union & Find Ops",
          "DSU Data Structure",
          "DSU Implementation",
          "Disjoint Set Union",
          "Forest Detection",
          "Useless Connection",
          "Union by Rank",
          "Path Compression Optimisation",
          "DSU Dry Run",
          "Communication Between Towers",
          "Make Network Connected",
          "Special Paths"
        ],
        "Minimum Spanning Trees": [
          "Introduction to Minimum Spanning Trees!",
          "Prim's Algorithm",
          "Prim's Code",
          "Kruskal's Algorithm",
          "Kruskal's Code",
          "Minimum Spanning Cost",
          "Connect All",
          "Remove Maximum Number of Edges",
          "Build Roads",
          "Find Critical and Pseudo-Critical Edges in MST"
        ],
        "Shortest Path Algorithms": [
          "Introduction to Shortest Path Algorithms",
          "Dijkshtra's Algorithm",
          "Dijkshtra's Algorithm Code",
          "Dijkstra",
          "Delay Time in Network",
          "Bellman Ford Algorithm",
          "Bellman Ford Code",
          "Floyd Warshall",
          "Floyd Warshall Code",
          "Shortest Grid Path",
          "Solution - Shortest Path in Grid!",
          "Cheapest Flight Within K Stops",
          "City With the Smallest Number of Neighbours at a Threshold Distance",
          "Travel by Car"
        ]
      },
      "requirements": [
        "Familiarity with basic data structures",
        "Ability to write / understand code",
        "Prior experience in problem solving"
      ],
      "description": "Welcome to Graph Algorithms for Competitive Coding - the most detailed Specialisation in Graph Theory for Competitive Programmers, Software Engineers & Computer Science students!\n\nGraphs is quite an important topic for software engineers, both for academics & online competitions and for solving real life challenges. Graph algorithms form the very fundamentals of many popular applications like - Google Maps, social media apps like Facebook, Instagram, Quora, LinkedIn, Computer Vision applications such as image segmentation, resolving dependencies while compile time, vehicle routing problems in supply chain and many more. This course provides a detailed overview of Graph Theory algorithms in computer science, along with hands on implementation of all the algorithms in C++. Not just that you will get 80+ competitive coding questions, to practice & test your skills!\n\nThis comprehensive course is taught by Prateek Narang & Apaar Kamal, who are Software Engineers at Google and have taught over thousands of students in competitive programming over last 5+ years. This course is worth thousands of dollars, but Coding Minutes is providing you this course to you at a fraction of its original cost! This is action oriented course, we not just delve into theory but focus on the practical aspects by building implementing algorithms & solving problems. With over 95+ high quality video lectures, easy to understand explanations this is one of the most detailed and robust course for Graph Algorithms ever created.\n\nCourse starts very basics with how to store and represent graphs on a computer, and then dives into popular algorithms & techniques for problem solving. The course is divided into two parts.\n\nPart-I Graph Theory Essentials\nGraph Representations\nPopular Traversals - BFS & DFS\nCycle Detection - Weighted & Unweighted Graphs\nTopological Ordering & Directed Acyclic Graphs\nDisjoint Set Union, Path Compression & Union by Rank\nMinimum Spanning Trees - Prim's & Kruskal's\nShortest Paths - BFS, Dijkstra's, Bellman Ford, Floyd Warshall\nTravelling Salesman Problem, Min Cost Hamiltonian Cycle\n\nPart-II Graph Theory Advanced\nFlood Fill\nMultisource BFS\nDFS & Backedges\nSCC's & Kosaraju's Algorithm\nEuler Tour\nLCA\nTrees\nArticulation Points & Bridges\nNetwork Flow\nThe part-II is recommended for programmers who want to deep dive into Competitive Programming & take part in contests. For most students part-I is good enough to understand the most fundamental concepts and techniques in graphs!\n\nOur special thanks to our problem setters, Siddharth Singhal & Rajdeep from Delhi Technological University, who helped us crafting the complete problem-set for this course.\n\nSo what you are waiting for ? Sign up today & start your deep-dive into graph theory!",
      "target_audience": [
        "Intermediate-Advanced Programmers with basic coding experience",
        "College/ University students pursuing Computer Science or related fields",
        "Passionate programmers who want deep dive into Graph Theory",
        "Competitive Programmers who want to excel in online coding competitions"
      ]
    },
    {
      "title": "Qt 5 QML Intermediate: Interfacing to C++",
      "url": "https://www.udemy.com/course/interfacing-qt-quick-qml-to-cpp-intermediate/",
      "bio": "Connect Your Fluid and Dynamic Qt Quick(QML) User Interface to a Powerful C++ Back End",
      "objectives": [
        "Interfacing Qt Quick and QML to C++",
        "Building your own QML Types"
      ],
      "course_content": {
        "Introduction : Dive In": [
          "Important notice: PLEASE READ!",
          "Welcome",
          "Get Help (Fast)",
          "Calling C++ from QML : ContextProperty",
          "Join the Official Support Channels",
          "Connections : A Flexible way to connect QML signals and slots",
          "Connecting C++ Signal to QML Slot",
          "QPROPERTY : Map C++ Objects to QML Elements",
          "Exposing C++ Data as Context Objects",
          "Calling JS Function from C++",
          "Dive In : Section Recap"
        ],
        "Data Conversion between QML and C++": [
          "Data Conversion Between QML and C++ : An Introduction",
          "Basic Qt Data Types",
          "Other Qt Types and C++: String Date Number",
          "Other Qt Types (Contd): String,Date and Number Localization",
          "Sequence Types to JS Arrays",
          "QVariantList and QVariantMap to JS Array and Object",
          "Data Conversion : Recap"
        ],
        "Challenge : REST Api Client V1, Feeding Raw C++ Data to QML": [
          "Fetch Rest APIs : Challenge Overview",
          "Getting the Data",
          "Feeding the Data to QML",
          "Fetch Rest APIs : Recap"
        ],
        "Custom Non Visual Types": [
          "C++ Custom Types : An Introduction",
          "Defining Custom C++ Types for use in QML(Counter Demo)",
          "Making use of C++ enums",
          "Counter Demo : Enum Version",
          "Object And List Property Types Part1 : Concepts",
          "Object And List Property Types Part2 : Get your Hands Dirty",
          "Working with Inherited Types",
          "Default Properties",
          "Grouped Properties",
          "Attached Properties",
          "Property Value Sources",
          "So Many Registration Types : Which one for What ?",
          "C++ Custom Types : Recap"
        ],
        "Farewell, Next Steps and BONUS": [
          "Farewell, Next Steps",
          "BONUS -Course List : Discounted!"
        ]
      },
      "requirements": [
        "The student should come with a fair knowledge about the C++ side of Qt",
        "The student should have a fair knowledge about Qt Quick and QML",
        "Should have the latest version of Qt and Qt Creator Installed on your PC or Mac"
      ],
      "description": "Important note : There is an update of this  course to Qt 6. If  you're just starting out, that's what you should take. Take this if you have a specific reason to target Qt 5.\nQt Quick is the latest and greatest User Interface design technology from the Qt Framework. It is best known and used to build Fluid, Dynamic and cross platform user interfaces, that can run on Windows,Mac,Linux,Android,IOS and even embedded devices.\nQt Quick User interfaces can be easily extended or interfaced with a powerful C++ back end. Allowing you to take full advantage of what Qt has to offer.\nThis course will teach you various key techniques you need to know to make your powerful C++ back end and your shinny fluid Qt Quick User interface work together in one single piece of software product. You will be exposed to  different facilities at your disposal in the Qt framework.Those will help you write Qt code in the recommended way. That is building fluid an eye catching UI in QML and connecting it a a powerful C++ code base for heavy operations.\nThe ideal student for the course is someone who already knows their way around both the C++ side of Qt and Qt Quick ; and is willing to learn how the two sides can communicate. So if you are rusty on either Qt C++ or Qt Quick(QML), please learn the basics first. If in doubt, do check my previous courses on both Qt C++ and Qt Quick.\nYou will take advantage of lots of straight to the point and easy to understand lectures, most of them backed by engaging demos for you to try out the concepts on your own right away.\nIf you're looking to learn how you can get your Qt C++ and QML code bases to connect and talk to each other, this course will get you up and running in the shortest amount of time possible.\n\nThe course starts right away getting your hands dirty doing things like Calling C++ methods from QML,Calling Javascript/QML methods from C++, Using Q_PROPERTY mechanism to propagate properties and changes between C++ and QML and more.\nYou then get to take a comprehensive look at how your data is transformed when you juggle it between QML and C++. Next we do a live demo; a REST API client that downloads data in C++ and feeds the data to Qt Quick for display. The course then dives in one of the most interesting topics of registering a type in C++ to be used and instantiated in Qt Quick. This will allow you to create your own QML types like Person, Car, Tomato,... On top of that you'll also learn how to make your own QML Apis more readable and usable by incorporating features like Object and List Properties,Default Properties, Attached Properties and Property Value Sources.\nQt is the platform choice for thousands of software projects and used by some of the most successful companies on the planet today. Learning how to make your C++ talk to your shiny Qt Quick UI will unlock the door to really using Qt the way it should be used today. Leveling up your skills as a Qt Developer.\nPlease check out some of the preview videos, and lets get you STARTED connecting your powerful C++ back end to a Dynamic and Fluid Qt Quick User Interface.",
      "target_audience": [
        "Anyone willing to learn what it takes to interface QML to C++"
      ]
    },
    {
      "title": "50 popular coding interview problems",
      "url": "https://www.udemy.com/course/50-problems/",
      "bio": "Prepare for your coding interview with these 50 solved and explained popular coding problems",
      "objectives": [
        "How to solve coding interview problems",
        "How to use recursion, dynamic programming, memoization, divide and conquer, backtracking...",
        "How to solve problems related to various data structures"
      ],
      "course_content": {
        "0- Introduction": [
          "Introduction"
        ],
        "1- Find pair that sums up to k": [
          "Solve the problem [Python]",
          "Solve the problem [Java]",
          "Solve the problem [C++]",
          "Solve the problem [JavaScript]",
          "Solution + code",
          "Complexity analysis"
        ],
        "2- First repeating character": [
          "Solve the problem [Python]",
          "Solve the problem [Java]",
          "Solve the problem [C++]",
          "Solve the problem [JavaScript]",
          "Solution + code",
          "Complexity analysis"
        ],
        "3- Remove duplicates": [
          "Solve the problem [Python]",
          "Solve the problem [Java]",
          "Solve the problem [C++]",
          "Solve the problem [JavaScript]",
          "Solution + code",
          "Complexity analysis"
        ],
        "4- Find the duplicate": [
          "Solve the problem [Python]",
          "Solve the problem [Java]",
          "Solve the problem [C++]",
          "Solve the problem [JavaScript]",
          "Solution + code",
          "Complexity analysis"
        ],
        "5- Tree depth first search": [
          "Solve the problem [Python]",
          "Solve the problem [Java]",
          "Solve the problem [C++]",
          "Solve the problem [JavaScript]",
          "Solution + code",
          "Complexity analysis"
        ],
        "6- Maximum subarray": [
          "Solve the problem [Python]",
          "Solve the problem [Java]",
          "Solve the problem [C++]",
          "Solve the problem [JavaScript]",
          "Solution + code",
          "Complexity analysis"
        ],
        "7- Reverse binary tree": [
          "Solve the problem [Python]",
          "Solve the problem [Java]",
          "Solve the problem [C++]",
          "Solve the problem [JavaScript]",
          "Solution + code",
          "Complexity analysis"
        ],
        "8- Longest substring without repeating characters": [
          "Solve the problem [Python]",
          "Solve the problem [Java]",
          "Solve the problem [C++]",
          "Solve the problem [JavaScript]",
          "Solution + code",
          "Complexity analysis"
        ],
        "9- Reverse linked list": [
          "Solve the problem [Python]",
          "Solve the problem [Java]",
          "Solve the problem [C++]",
          "Solve the problem [JavaScript]",
          "Solution + code",
          "Complexity analysis"
        ]
      },
      "requirements": [
        "Basics in algorithms, data structures, and time/space complexity analysis"
      ],
      "description": "WARNING: The instructor is not currently available to answer questions regarding this course\n\n\nPreparing for coding interviews? Competitive programming? Then this course will help you for sure: 50 well-chosen problems to increase your problem-solving skills!\nMany algorithms concepts covered: dynamic programming, divide and conquer, memoization, backtracking...\nAnd many data structures used: arrays, hashmaps, sets, trees, stacks...\nAnd also, time and space complexity analysis is provided for every problem!\n\n\nProblems covered:\n1- Find pair that sums up to k\n2- First repeating character\n3- Remove duplicates\n4- Find the duplicate\n5- Tree depth first search\n6- Maximum subarray\n7- Reverse a binary tree\n8- Longest substring without repeating characters\n9- Reverse a linked list\n10- Peak finding\n11- Palindrome linked list\n12- Longest possible palindrome\n13- Get substring index\n14- Tree breadth first search\n15- Sort a linked list\n16- Valid binary search tree\n17- Minimum cost path in matrix\n18- Balanced binary tree\n19- Paths in matrix\n20- Tree breadth first search II\n21- Product of array except self\n22- Jump to last index\n23- Graph depth first search\n24- Graph breadth first search\n25- String subsequences\n26- Valid brackets\n27- Flatten a binary tree\n28- Lowest common ancestor\n29- Minimum in rotated sorted array\n30- Add two linked lists\n31- Ways to climb stairs\n32- Subsets that sum up to k\n33- Ways to decode\n34- Remove node from binary search tree\n35- Array permutations\n36- Longest common subsequence\n37- Longest consecutive sequence\n38- Edit distance\n39- Count sorted vowel strings\n40- Smallest number after removing k digits\n41- Merge intervals\n42- Insert interval\n43- Binary tree max sum\n44- 0-1 Knapsack\n45- Shortest palindrome\n46- Coin change\n47- Word search\n48- N-queens\n49- Word ladder\n50- Longest increasing subsequence",
      "target_audience": [
        "People preparing for coding interviews",
        "Competitive programmers",
        "People who want to increase their problem-solving skills"
      ]
    },
    {
      "title": "Domain Driven Design: Complete Software Architecture Course",
      "url": "https://www.udemy.com/course/domain-driven-design-complete-software-architecture-course/",
      "bio": "Learn Domain Driven Design (DDD) by example with detailed coding sessions, video explanations and realistic assignments.",
      "objectives": [
        "Learn about domain-driven design",
        "Learn about the domain-driven design building blocks, patterns and best practices to architect solutions and implement the code itself",
        "Learn how to design and code out a system using domain-driven design through detailed video tutorials",
        "Design your own domain-driven component, and then code it out"
      ],
      "course_content": {
        "Introduction": [
          "Course Introduction"
        ],
        "What is DDD?": [
          "Introduction to DDD",
          "When to use DDD - Advantages and Disadvantages"
        ],
        "DDD in Practice": [
          "The Building Blocks",
          "Design Patterns",
          "Component Architecture"
        ],
        "A Complete DDD Example: From Design to Coding!": [
          "Step 1: Design Modelling",
          "Design Modelling Assignment",
          "Design Modelling - Model Answer Explanation",
          "Step 2: Coding",
          "Coding a system using DDD",
          "Coding - Model Answer Explanation - Part 1",
          "Coding - Model Answer Explanation - Part 2",
          "Coding - Model Answer Explanation - Part 3",
          "Bounded Contexts and Anti-Corruption Layers"
        ],
        "Next Steps": [
          "Next Steps"
        ]
      },
      "requirements": [
        "Basic coding knowledge will help follow the code examples"
      ],
      "description": "In this course, you will learn in detail the technical skills and techniques required to design and develop a system using domain-driven design (DDD) including:\nDDD building blocks\nDesign modeling skills\nDesign assignment - with model answers that are explained via video tutorial and feedback on your assignment from others if you'd like.\nDesign patterns\nComponent architecture\nCoding assignment - with model answers that are explained in detail via video tutorial and downloadable code in C#, Java and Python so that you can follow explanations!\n\n\nThe course is structured around both video tutorials explaining different techniques and architecture patterns, and (optional) assignments to help make sure you're understanding what we're learning.\nI'm also available to answer any queries you may have regarding any course material which you didn't understand or would like further detail on.\n_______\nJust in case you're still not convinced if you should take this course, here are a couple of positive reviews from the hundreds I have received on my bestselling, top-rated Udemy courses:\n\"The course is comprehensive and well explained through clear and concise examples, and shows that the instructor is highly experienced in their field. Overall this course is excellent and highly appropriate for software developers looking to improve their architectural and programming skills, both beginners as well as more advanced programmers. I will be looking forward to more courses by the author in the future.\" - J. Fusselberg\n\"High quality videos, lectures are clear and to the point. This course is highly recommended for any developer who wants to move on to a senior position or software architect role. However, it will also be a good start for beginners to introduce them to proper coding practices early on.\" -  Roberto de Souza\nI look forward to seeing you in my course and hearing how the course has helped you progress in your career!",
      "target_audience": [
        "Software developers who are working on complex systems.",
        "Software developers who are designing new systems, or refactoring existing systems.",
        "Software architects who want to improve their skills in designing domain-driven components and solutions.",
        "Anyone who wants to learn about domain-driven design and gain in-depth technical knowledge on how to design, structure and code systems following this approach."
      ]
    },
    {
      "title": "Data Structures and Algorithms Made Easy",
      "url": "https://www.udemy.com/course/algorithm/",
      "bio": "Easy way to learn about Sort, Search, Trees, Hash Tables, and Heaps.",
      "objectives": [
        "they will be able to use algorithms with ease to solve their programming problems.",
        "build a search engine from scratch"
      ],
      "course_content": {},
      "requirements": [
        "Some programming experience is helpful but not required"
      ],
      "description": "Have you ever used data structures in Python or Java?  Well, do you really understand how they work?  If you struggle with algorithms, it means you are approaching this topic the wrong way!\nThere are lots of places to copy code from, but without having high level understanding, it can be difficult to handle data structures well.\nThis course teaches the fundamentals of algorithms, so you can apply knowledge easily.  This course contains NO PROGRAMMING, JUST PSEUDOCODE to encourage understanding of Algorithms and how to use them\nWhatever the reason, if you are looking for a course that focus on the implementations to give you a complete understanding of how things work, then this is the course for you.  This course is a combination of two courses I took as an undergraduate and taught to graduate students at Cornell and Stanford.\nThis course goes over the theory of how things work, but only to give you what you need to know to understand the implementation covered.\nThis is a hands-on course!  If you want to try understand things at a deep level, and work on implementations, rather than theory, then again, this is the course for you.\nTopics covered:-\nArrays Linked Lists Trees Hashtables Stacks Queues Heaps Sort algorithms Search algorithms\nThe course also spends more time than most other courses of its kind looking at what’s available in the JDK. Students wanting to understand how things work \"under the hood\" will benefit enormously from this course.\n\n\nWhy learn about data structures and algorithms?\n\nThe reality is, the more you learn about data structures and algorithms, the better a programmer you become.\nWhy?\nBecause, data structures and algorithms are effectively patterns for solving problems.   You want to add as many of them as you can to your skill-set.  By doing so, you will find you solve more problems, and use the right tools for the job, in a more elegant way.  And you will learn HEAPS of them in this course.\n\nWhy enrolling in this course is the best decision you can make.\n\nMost courses focus on giving you the theory of how things work, so that you can take an interview.  Whilst the theory is important, the knowledge of how to implement these data structures and algorithms are of vital importance. This course goes over the theory of how things work, but only to give you what you need to know to understand the implementation covered.   The main focus of the course is to give you a real understanding of how things work under the hood, so that you can apply this to future programming projects.\n\nIf you want to actually understand how things work, and be able to take that understanding and apply it to your own programs, then this course is for you.\n\nAfter completing this course, you will have a solid understanding of data structures and algorithms. The sooner you sign up for this course, the sooner you will have the skills and knowledge you need to increase your job or consulting opportunities.    Both Python and Java developers with key skills and understanding of data structures and algorithms are in high demand and get paid extremely well.  You need to MASTER ALGORITHMS to be a respected programmers.\nIf you are ready for that new job promotion or consulting opportunity, it's time to get started.\nWhy not get started today?\nClick the Signup button to sign up for the course\nWho is the target audience?\n\nDevelopers who have some knowledge of Python or Java looking to understand data structures and algorithms at a deep level",
      "target_audience": [
        "Anyone interested in programming in any language."
      ]
    },
    {
      "title": "Open source LLM: DeepSeek AI for Developers",
      "url": "https://www.udemy.com/course/deepseek-ai-for-developers/",
      "bio": "Understand DeepSeek AI fundamentals, use DeepSeek-V3 and R1 models, run models offline, access the DeepSeek API.",
      "objectives": [
        "Understand the core concepts behind DeepSeek AI models",
        "Differentiate between DeepSeek-V3, DeepSeek-R1, and other models like OpenAI’s offerings.",
        "Use DeepSeek Chat via the browser or mobile app",
        "Run DeepSeek locally using Ollama and LM Studio",
        "Make API calls to DeepSeek Platform",
        "Compare DeepSeek to OpenAI"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "What is DeepSeek?",
          "First look at DeepSeek"
        ],
        "Overview of the DeepSeek models & capabilities": [
          "Basic AI terminology",
          "DeepSeek training and architecture",
          "Classifying DeepSeek models",
          "DeepSeek-V3",
          "DeepSeek-R1",
          "DeepSeek-V3 vs DeepSeek-R1",
          "Standard and reasoning models",
          "The open-source aspect",
          "Model bias",
          "Distilled Models",
          "Image generation with Janus-Pro"
        ],
        "How to use DeepSeek online": [
          "Ways to access DeepSeek AI",
          "DeekSeek chat (browser-based)",
          "DeepSeek app (Apple, Android)",
          "Privacy policy",
          "Countries that have banned DeepSeek"
        ],
        "How to use DeepSeek offline (locally)": [
          "What you need to know about offline use",
          "Ollama (CLI tool, no GUI)",
          "LM Studio (with GUI)"
        ],
        "DeepSeek API": [
          "Integrating DeepSeek API into applications",
          "Creating an API key",
          "Your first DeepSeek API call",
          "Setting up billing for the DeekSeek Platform",
          "Creating a chat completion",
          "Creating a chat completion (reasoning)",
          "Understanding tokens",
          "Message roles",
          "Streaming responses",
          "Controlling the model behavior with inference parameters",
          "API Pricing",
          "Privacy policy for the DeepSeek platform / API",
          "API status",
          "Local API calls with Ollama API"
        ],
        "Build applications with DeepSeek": [
          "DeepSeek integration in applications",
          "Google Colab for cloud Python development",
          "Local Python development setup",
          "DeekSeek API call from Python",
          "Terminating Google collab sessions",
          "Local Ollama API call (Ollama Python library)",
          "DeepSeek integration with LangChain",
          "Building user interfaces in Gradio",
          "RAG application with LangChain (chat with documents)"
        ],
        "Conclusion": [
          "Bonus lecture"
        ]
      },
      "requirements": [
        "DeepSeek account",
        "Some familiarity with AI concepts (optional)",
        "Powerful GPU (to run models locally)"
      ],
      "description": "Welcome to this technical deep dive into DeepSeek and their latest GenAI models (DeepSeek-V3 and DeepSeek-R1)!\nWhether you are an AI enthusiast, a developer, or someone curious about the next big thing in AI, this course will help you understand, use, and even integrate DeepSeek models into your projects.\n\n\n== What You’ll Learn ==\nIntroduction to DeepSeek\nWhat is DeepSeek and why does it matter?\nA first look at DeepSeek’s models and capabilities\nUnderstanding basic AI terminology\nDeepSeek Models & Architecture\nDeepSeek-V3 vs. DeepSeek-R1 – Key differences\nThe open-source aspect & model censorship\nDistilled models and how they compare to OpenAI\nImage generation with DeepSeek’s Janus model\nUsing DeepSeek online & offline (locally)\nDeepSeek Chat (browser & mobile apps)\nPrivacy policies & security considerations\nRunning DeepSeek locally using:\nOllama\nLM Studio\nDeepSeek API\nGenerating an API key\nMaking your first API call\nAPI pricing & privacy policy\nRunning a self-hosted model API\n\n\n== Why Take This Course? ==\nBeginner-friendly – No prior knowledge needed!\nStep-by-step guidance – From theory to practical applications\nHands-on projects – Learn by doing!\nUp-to-date content – AI evolves fast, and so does this course!\nBonus materials – Extra resources, links, and guides included!\n\n\nFeeling Overwhelmed? Don’t Worry!\nThis course is designed to be accessible even if you are new to AI. We will go step by step, and I’m here to answer your questions!\nNeed help? Use the Q&A section or send me a private message.\n\n\nReady to explore DeepSeek? Let’s begin!",
      "target_audience": [
        "AI Enthusiasts & Beginners",
        "Developers & Engineers",
        "Tech Professionals & Data Scientists",
        "Entrepreneurs & Innovators"
      ]
    },
    {
      "title": "Data Analysis in Python with Pandas",
      "url": "https://www.udemy.com/course/data-analysis-in-python-with-pandas/",
      "bio": "Getting an introduction to doing data analysis with the Python pandas library with hours of video and code.",
      "objectives": [
        "Perform data analysis with python using the pandas library.",
        "Understand some of the basic concepts of data analysis.",
        "Have used n-dimensional arrays in NumPy as well as the pandas Series and DataFrames to analyze data.",
        "Learned the basics of plotting with matplotlib"
      ],
      "course_content": {
        "Introduction to the Course": [
          "What is this Course?",
          "Installation Instructions",
          "Setting up your Environment",
          "Course Resources - All Files and Data"
        ],
        "IPython Notebooks and Raw Python Data Analysis": [
          "Tools of the Trade, The IPython Notebook",
          "Maps",
          "Filters",
          "List Comprehensions",
          "Lambda Functions"
        ],
        "The Basics of NumPy": [
          "NumPy Array Basics",
          "Boolean Selection",
          "Helpful Methods and Shortcuts",
          "Vectorization",
          "Multi-Dimensional Arrays",
          "Querying Slicing, Combining, and Splitting Arrays"
        ],
        "Pandas Basics": [
          "General pandas Concepts"
        ],
        "pandas Series": [
          "Overview of the pandas Series",
          "Look Ups, Selections, and Indexing",
          "Advanced Indexing Options",
          "Handling NaN Values, Reindexing, Filling Methods and Series Addition",
          "Series Multiplication, More Reindexing, and Mapping"
        ],
        "pandas DataFrame": [
          "DataFrame Basics",
          "Reading Files, Plotting, and Basic Methods",
          "More Plotting, Joins, Basic DateTime Indexing, and Writing to Files",
          "Adding & Reseting Columns, Mapping with Functions",
          "More Mapping, Filling NaN values, Plotting, Correlations, and Histograms",
          "More Plotting, Rolling Calculations, Basic DateTime Indexing",
          "Analysis Concepts, Filling NaN Values, Cumulative Sums and Value Counts",
          "Data Maintenance, Adding/ Removing Columns and Rows",
          "Basic Grouping, Concepts of Aggregate Functions"
        ],
        "BONUS: Advanced pandas Topics": [
          "pandas.IO.Data, Panels and Hierarchical Indexing",
          "Advanced Reading Csvs/HTML, Binning, Categorical Data",
          "Advanced Groupings and Aggregate Functions",
          "More Grouping Functions including Apply and Transform"
        ]
      },
      "requirements": [
        "Students need to have Python installed on their computer.",
        "Students should be familiar with basic data analysis concepts.",
        "Students should have experience writing, at a minimum, basic programs in python."
      ],
      "description": "Ever wonder how you can best analyze data in python? Wondering how you can advance your career beyond doing basic analysis in excel? Want to take the skills you already have from the R language and learn how to do the same thing in python and pandas?\nTHEN THIS COURSE IS FOR YOU!\nBy taking the course, you will master the fundamental data analysis methods in python and pandas!\nYou’ll also get access to all the code for future reference, new updated videos, and future additions for FREE! You'll Learn the most popular Python Data Analysis Technologies!\nBy the end of this course:\n- Understand the data analysis ecosystem in Python.\n- Learn how to use the pandas data analysis library to analyze data sets\n- Create how to create basic plots of data using MatPlotLib\n- Analyze real datasets to better understand techniques for data analysis\nAt the end of this course you will have learned a lot of the tips and tricks that cut down my learning curve as a business analyst and as a Master’s Student at UC Berkeley doing data analysis. I designed this course for those that have an intermediate programming ability and are ready to take their data analysis skills to the next level.\nYou’ll understand cutting edge techniques used by data analysts, data scientists, and other data researches in Silicon Valley.\nComplete with working files and code samples, over 5 hours with 40+ lectures you’ll learn all that you need to know to turn around and apply data analysis strategies to the data that you work with. You’ll be able to work along side the instructor as we work through different data sets and data analysis approaches using cutting edge data science tools!",
      "target_audience": [
        "This course is best suited for people that need a deeper understanding of data analysis tools available today.",
        "This course is not suited for those that want to learn how to program and have no prior programming experience.",
        "This course is great for introductory to intermediate python programmers or those that come from a statistical software background like R or SPSS.",
        "Analysts who want to better understand a technical approach to analyzing data.",
        "Scientists who want to step away from more academic programming languages and use a general purpose language like python.",
        "Programmers who are coming from a technical background but want to understand the pydata ecosystem a bit better.",
        "Those that are interested in learning a bit more about data analysis."
      ]
    },
    {
      "title": "Functional Programming using C++",
      "url": "https://www.udemy.com/course/functional-programming-using-cpp/",
      "bio": "Write more robust and easier to maintain C++ code than ever before.",
      "objectives": [
        "You will be able to write code that is easy to understand and almost self-documenting.",
        "You will be familiar with the background of functional programming, and understand the fundamental differences between functional and imperative solutions.",
        "You will be able to solve programming problems elegantly by composing functional tools only or mixing them with other paradigms.",
        "Because of their increased run-time safety, you will spend much less time debugging your real-world applications.",
        "You will be able to utilize multiple CPU cores to improve the performance of your applications.",
        "Your understanding of functional programming will help in other languages too. And it will expand your horizon regarding software engineering in general."
      ],
      "course_content": {
        "Functional programming basics": [
          "Introducing functional programming",
          "Introducing functional programming",
          "Correctness follows from expressiveness",
          "Type annotations",
          "Type annotations",
          "Advantages of certain restrictions"
        ],
        "Developing functional solutions": [
          "Programming challenge: Parse and product",
          "Lambdas and closures",
          "Lambdas and closures",
          "Programming challenge: Longest edge of polygon",
          "The problem with comments",
          "High-level expressiveness and concise code",
          "Currying and partial function application",
          "Forward application",
          "Programming challenge: An SQL analogy",
          "Function composition",
          "Programming challenge: Interacting with the command line"
        ],
        "Thinking functionally": [
          "Structuring your project cleanly",
          "Memoization",
          "Monoids",
          "Error handling",
          "Functors",
          "Monads"
        ],
        "Functional C++ in everyday usage": [
          "Refactoring",
          "Testing",
          "Performance and profiling",
          "Multithreading",
          "OOP Design patterns vanishing",
          "Libraries",
          "Outlook and conclusion"
        ]
      },
      "requirements": [
        "You should have some experience in programming with C++.",
        "Previous experience with functional programming is not necessary.",
        "A C++14-compatible compiler is needed."
      ],
      "description": "Controlling complexity is one of the biggest challenges a developer faces. Functional programming helps tremendously in solving the problems arising from this, and thus becomes more and more popular, even in originally imperative and object-oriented languages like C++. This course will help you increase your productivity by teaching you how to write functional C++ code that is easy to understand, test, and reuse.\n\n\nAfter mastering the basic building blocks of functional programming, you will learn how to think functionally and also how to elegantly solve everyday programming problems. Every provided coding exercise comes with an exemplary solution that you can peek into in case you get stuck implementing your own solution.\n\n\nAt the end of this course, you will be able to use the functional approach to write application code that is extraordinarily robust and pleasant to work with. The abstractions of control flow will reduce the cognitive load of anybody working with your code, including yourself, which results in more features with fewer bugs in less time.\n\n\nAnd as a bonus, all the concepts you have learned will not only help you when using C++, but apply to other programming languages too, and will expand your horizon regarding programming in general.",
      "target_audience": [
        "This course is for all C++ developers (intermediate and advanced) who want to improve the quality of the C++ code they produce by learning about and applying functional programming principles."
      ]
    },
    {
      "title": "Akka Classic Essentials with Scala",
      "url": "https://www.udemy.com/course/akka-essentials/",
      "bio": "Learn the classic Akka actor model with Scala and write parallel, concurrent and fault-tolerant systems",
      "objectives": [
        "create concurrent applications with actors instead of threads and locks",
        "design fault-tolerant systems with supervision",
        "configure Akka for various scenarios",
        "confidently test actor systems",
        "use Akka patterns and best practices"
      ],
      "course_content": {
        "Welcome": [
          "Welcome!",
          "How to Make the Best out of This Course"
        ],
        "Scala and Parallel Programming Recap": [
          "Scala Recap",
          "Advanced Scala Recap",
          "Scala Multithreading Recap",
          "Difficulties with the Standard Thread Model"
        ],
        "Akka Actors": [
          "The Akka Actor Model to the Rescue",
          "Actors, Messages and Behaviors",
          "Actors, Messages and Behaviors (part 2)",
          "Actors, Messages and Behaviors - Exercises",
          "How Actors Actually Work",
          "Changing Actor Behavior",
          "Changing Actor Behavior (part 2)",
          "Changing Actor Behavior - Exercises",
          "Child Actors",
          "Child Actors - Exercises",
          "Actor Logging",
          "Intro to Akka Configuration"
        ],
        "Testing Akka Actors": [
          "Intro to TestKit",
          "TestProbes",
          "Timed Assertions",
          "Intercepting Logs",
          "Synchronous Testing"
        ],
        "Fault Tolerance": [
          "Starting, Stopping and Watching Actors",
          "Actor Lifecycle",
          "Supervision",
          "(optional) The Backoff Supervisor Pattern"
        ],
        "Akka Infrastructure": [
          "Schedulers and Timers",
          "Routers",
          "Dispatchers",
          "Mailboxes"
        ],
        "Akka Patterns": [
          "Stashing Messages",
          "The Ask Pattern",
          "(optional) Finite State Machines",
          "(optional) Finite State Machines (part 2)"
        ],
        "You Rock!": [
          "You Rock!"
        ]
      },
      "requirements": [
        "solid general programming experience",
        "a good understanding of multithreading",
        "a solid command of the Scala language"
      ],
      "description": "In this course, we will learn how to write concurrent and resilient applications using Akka actors. You'll write 2000+ lines of Akka code yourself, with guidance, and you will become a rockstar.\nThis course is for Scala programmers who need to design complex and scalable concurrent applications.\nWhy Akka:\nit speeds up the development of concurrent applications by as much as 10x\nits demand has exploded\nit's a highly marketable skill\nit's incredibly fun - once tasted Akka, you'll never want to get back to threads\nI like to get to the point and get things done. This course\ndeconstructs all concepts into the critical pieces you need\nselects the most important ideas and separates them into what's simple but critical and what's powerful\nsequences ideas in a way that \"clicks\" and makes sense throughout the process of learning\napplies everything in live code\nThe end benefits are still much greater:\na completely new mental model around parallel applications\nsignificantly more marketable resume\nmore enjoyable work - Akka is fun!\nThis course is for established programmers with experience with Scala and with functional programming at the level of the Rock the JVM Scala beginners course. I already assume a solid understanding of general programming fundamentals.\nThis course is NOT for you if\nyou've never written Scala code before\nyou've never worked with threads\nThe course is comprehensive, but you'll always see me get straight to the point. So make sure you have a good level of focus and commitment to become a badass programmer.\nI believe both theory and practice are important. That's why you'll get lectures with code examples, real life code demos and assignments, plus additional resources, instructions, exercises and solutions. At the end of the course, you'll have written thousands of lines of Akka.\nI've seen that my students are most successful - and my best students work at Google-class companies - when they're guided, but not being told what to do. I have exercises waiting for you, where I offer my (opinionated) guidance but otherwise freedom to experiment and improve upon your code.\nDefinitely not least, my students are most successful when they have fun along the way!\nSo join me in this course and let's rock the JVM!",
      "target_audience": [
        "Scala developers who need to design complex distributed systems",
        "developers looking to get into the field of fast data"
      ]
    },
    {
      "title": "Java Multithreading & Concurrency - Interview Practice Exams",
      "url": "https://www.udemy.com/course/java-multithreading-concurrency-interview-practice-exams/",
      "bio": "Prepare for your Java Software Engineering Job Interview with 100+ questions. Practice Java Concurrency & Multithreading",
      "objectives": [],
      "course_content": {
        "Practice Tests": []
      },
      "requirements": [],
      "description": "Did you know that Multithreading and Concurrency questions are becoming increasingly popular in technical job interviews but even experienced candidates struggle with them?\nAre YOU ready to rock your job interview and impress your interviewer with your Java Multithreading skills?\nThis unique and original collection of Java Multithreading and Concurrency questions will challenge you and prepare you for any interview involving Java Multithreading, Concurrency, Parallel Programming, and Java Performance.\nWhy Java Multithreading Interview Questions Are So Popular\nNowadays, all personal computers, cloud servers, and mobile devices have immense computing power that comes in the form of multi-core CPUs. To harness that computing power, Java developers use multithreading, which is a first-class feature in Java that has been around since its early versions.\nUsing Java Multithreading, we can get the most performance out of our CPU cores and build fast and responsive applications that our users love.\nFor that reason, the vast majority of production Java applications run with multiple threads, which makes Java Multithreading one of the most in-demand skills for Java developers.\nWho Is This Practice Course For?\nStudents preparing for Technical Job Interviews\nStudents who completed the Java Multithreading, Concurrency & Performance Optimization course or its equivalent and are looking for more practice\nAny Java developer who wants to test and practice their Java Multithreading and Concurrency skills and gain confidence in those topics\nWhat You Get\nThis self-assessment course includes 100+ multiple-choice questions and is organized into self-contained exams.\nEach exam is timed, automatically checked, and scored.\nThe questions cover many topics like\nOperating Systems fundamentals\nMemory Organization and data sharing between threads\nRace conditions, data races, and critical sections\nSynchronization, Locking, and Java Multithreading mutual exclusion techniques\nPerformance Optimization\nInter-thread communication\nLock-Free algorithms and data structures\nAnd much more\nTypes of Multithreading & Concurrency Interview Questions\nJava Multithreading questions come up in 4 different formats:\nKnowledge-based Interview Questions - In this type of interview question, an interviewer assesses your general knowledge of different concurrency-related topics and Operating Systems fundamentals and familiarity with Java Multithreading keywords, classes, and APIs. These questions are typically asked during technical screen interviews and at the beginning of in-person interviews. For these questions, it's critical to demonstrate your knowledge with confidence and answer in detail to show your interviewer your grasp of all Concurrency topics and fundamentals.\nCoding Interview Questions - This type of question may start without special emphasis on Multithreading and involve implementing a class or a method, but are frequently followed up with additional requirements for thread safety or high performance and test your practical skills in Java Multithreading APIs and Concurrency design principles.\nTake-Home Assessments - These are generally bigger projects given to a candidate to take home and submit back in several hours or days. They test the candidate's ability to solve complex problems involving practically applying all their knowledge as it closely resembles a real work environment. Showing your ability to apply Multithreading correctly in a maintainable way to provide high performance and responsiveness will set you apart from any candidate. The requirements for high performance and responsiveness are never expressed explicitly and will show the out-of-the-box forward-thinking that hiring managers are looking for.\nSystem Design Interview Questions - These questions typically do not involve coding but instead require the candidate to design a big system that satisfies both functional and non-functional project requirements. One of the key factors in such questions is the ability to handle large traffic and efficiently handle the workload. Multithreading and Concurrency are the best tools to achieve high performance. So the interviewer expects an experienced candidate to demonstrate their skills in these areas.\nIn these Practice Tests, you will assess your knowledge and skill in Java Multithreading and Concurrency to prepare yourself for all the above types of interview questions. You will build confidence around your existing knowledge, refresh topics you need to brush up on and get the time to learn the topics you haven't mastered yet to fully prepare for your technical Interview.\nSo what are you waiting for?\nJump in and start your first Java Multithreading & Concurrency Interview Practice exam.",
      "target_audience": [
        "Any student who wants to practice their Concurrency, Multithreading and Parallel Programming skills",
        "Any student preparing for a technical job interview (coding, knowledge, take-home assignment or system design)",
        "Any Java Developer who wants to improve and refresh their Java, Multithreading and Concurrency skills"
      ]
    },
    {
      "title": "GUI Development with Python and Tkinter",
      "url": "https://www.udemy.com/course/desktop-gui-python-tkinter/",
      "bio": "Master Python GUI development using Tkinter to build desktop applications!",
      "objectives": [
        "Master GUI Development with Tkinter and Python!",
        "Create multiple Tkinter projects, including forms, games, and even a chat app that interacts with a web API.",
        "Fully understand the two most important Geometry Managers in Tkinter: grid and pack.",
        "Learn how to use a wide variety of widgets, such as labels, entries, buttons, spinboxes, and even the Canvas!",
        "Gain in-depth knowledge of how themes and styles work in Tkinter, as well as how you can create your own styles and use them in your applications.",
        "Throughout the entire course, follow best practices for Python and Tkinter code as taught by a professional software developer with years of experience."
      ],
      "course_content": {
        "Introduction": [
          "Welcome to this course!",
          "Curriculum + how to take this course",
          "Initial setup (for newer Pythonistas)"
        ],
        "Python Refresher": [
          "Introduction to this section",
          "Variables in Python",
          "Get the Python Refresher code here",
          "String formatting in Python",
          "Getting user input",
          "Lists, tuples, and sets",
          "Advanced set operations",
          "Booleans in Python",
          "If statements in Python",
          "The 'in' keyword in Python",
          "If statements with the 'in' keyword",
          "Loops in Python",
          "List comprehensions in Python",
          "Dictionaries",
          "Destructuring variables",
          "Functions in Python",
          "Function arguments and parameters",
          "Default parameter values",
          "Functions returning values",
          "Lambda functions in Python",
          "Dictionary comprehensions",
          "Unpacking arguments",
          "Unpacking keyword arguments",
          "Object-Oriented Programming in Python",
          "Magic methods: __str__ and __repr__",
          "Class methods and static methods",
          "Class inheritance",
          "Class composition",
          "Type hinting in Python 3.5+",
          "Imports in Python",
          "Relative imports in Python",
          "Errors in Python",
          "Custom error classes",
          "First-class functions",
          "Simple decorators in Python",
          "The 'at' syntax for decorators",
          "Decorating functions with parameters",
          "Decorators with parameters",
          "Mutability in Python",
          "Mutable default parameters (and why they're a bad idea)"
        ],
        "Creating Your First Tkinter App": [
          "Setting up Tkinter",
          "Tkinter on Mac not working?",
          "Hello, World with Tkinter",
          "Tkinter Buttons",
          "Our Greetings App",
          "Packing components in Tkinter",
          "Packing components with Frames",
          "Our Greetings App using Pack",
          "The Tkinter Grid Geometry Manager",
          "Enabling High-DPI in Windows 10"
        ],
        "Tkinter Widget Reference": [
          "Introduction to this section",
          "Labels in Tkinter",
          "The Text Widget in Tkinter",
          "Scrollbars in Tkinter",
          "Separators in Tkinter",
          "Check Buttons in Tkinter",
          "Radio Buttons in Tkinter",
          "Comboboxes in Tkinter",
          "Listboxes in Tkinter",
          "Spinboxes in Tkinter",
          "Scales in tkinter"
        ],
        "Milestone Project: Distance Converter": [
          "Initial setup",
          "Calculating the number of feet",
          "Updating our feet display label dynamically",
          "Shortcuts and Keybindings in Tkinter",
          "How to change the font of a Tkinter widget",
          "The Tkinter winfo_children method"
        ],
        "Object-Oriented Programming with Tkinter": [
          "An Object-Oriented Window in Tkinter",
          "An Object-Oriented Frame",
          "A Full Tkinter Object-Oriented App",
          "Making our Distance Converter use Object-Oriented Programming",
          "Adding an inner container for better control of space",
          "Creating a FeetToMetres frame",
          "How to switch between frames (or views) in a Tkinter app",
          "Adding keybindings to our app"
        ],
        "Tkinter Themes and Styles": [
          "Tkinter themes, and how to change theme",
          "Finding a Tkinter widget's style class",
          "How to change and configure a Tkinter style",
          "Find out what properties you can change in a Tkinter style",
          "How to create new inherited styles in Tkinter",
          "How to configure state-specific options in a Tkinter style",
          "Can you change the entry field font using styles?",
          "How to use named fonts in Tkinter"
        ],
        "Milestone Project: Pomodoro Timer": [
          "Introduction: app overview",
          "Creating a simple Countdown Timer with Tkinter",
          "Adding timer breaks",
          "Showing the current timer's description label on the side",
          "How to start and stop the timer",
          "How to reset the timer",
          "Linking our Timer frame with the controller",
          "Splitting our Tkinter app into multiple files",
          "Creating the user Settings Frame",
          "Adding the ability to switch between frames",
          "Styling our Pomodoro Timer with custom styles and state-specific styles"
        ],
        "Build a Chat app with Tkinter": [
          "Overview of what the app will look like",
          "How to get the chat messages from the API",
          "Creating a label for each message received",
          "Showing the message date in another label",
          "How to add a sample user avatar to each message",
          "How to create scrollable Frames with Tkinter",
          "How to code the scrollable Frame in our application",
          "Handling resizing and wrapping labels",
          "Sending message data to the API",
          "Styling our completed app"
        ],
        "Build a Snake Game with Tkinter": [
          "Build the Snake Game!"
        ]
      },
      "requirements": [
        "You should have some programming knowledge, with Python or another language. Although we provide a complete Python Refresher course that covers everything you need to know, this is not an introductory Python course.",
        "You need a computer with either Linux, Mac, or Windows 10. Older Windows versions will work too but there can be some small issues that we can work around.",
        "Developing on a mobile device is possible by using a web editor. How to do this is detailed inside the course."
      ],
      "description": "Welcome to the highest-rated course on Udemy on creating desktop apps using Python and Tkinter.\nWhether you want to create simple utilities, complex multi-page applications, or internal tools for your business, Tkinter has what you need.\nIn this course, I'll teach you the techniques to make any kind of desktop application using Python and Tkinter.\n\n\nA frequent question is: \"Why should I learn Tkinter instead of web development\"?\nDesktop applications are much easier to develop than websites. This is especially true for tools and utilities.\nIt's easy to share Tkinter apps with others without needing them to install Python.\nPython GUI apps made with Tkinter look native to the Operating System.\nTkinter apps have full access to the user's computer, which means you can store data locally, safely and securely.\n\n\nSo what's covered in the course?\nThis is the most comprehensive Tkinter course available on Udemy. We'll look at how you can:\nUse Tkinter's grid and pack layout methods to structure your apps\nUse Object-Oriented Programming with Tkinter, and create your own custom widgets\nSplit Tkinter apps into many files, so working on them becomes much easier\nAdd fonts and styles to Tkinter apps using the new Themed Tkinter Widgets\nAdd shortcuts and keybindings to your Python GUI apps\nConnect to web APIs to send and receive data, stored in the cloud\nBuild games using Tkinter with the Canvas widget\nPackage and distribute Tkinter apps so your users don't need to install Python\n\n\nWe've also included two unique sections in this course:\nA complete Python refresher. If you're new to Python (but you have some other coding experience), this section will make you productive right away.\nA full reference of many Tkinter widgets so you learn how to work with them quickly. It's also easy to come back to later to review what you've learned.\n\n\nOther students are loving this course!\n> The course is straightforward and logically introduces new concepts. I am enjoying it so far!\n> This course was perfect for no-frills refresher - and then some! The instructor is very engaging, is full of great suggestions and insight, and delivers his material perfectly.\n> Excellent course! A lot of details explained well.\n\n\nMy name is Jose Salvatierra, and I'll be your instructor! I'm an experienced software developer turned instructor. I've helped over 250,000 students in their programming journey.\nSo if you want to create and distribute intuitive, usable Python GUI applications, this is the course for you!\nI'll see you on the inside!",
      "target_audience": [
        "If you already have some programming knowledge and want to broaden your skill set, and learn how to create desktop apps and share them with users.",
        "If you'd like to create desktop tools to help with your business, this course will teach you how to do that effectively.",
        "Finally, this course is for anyone who wants to build desktop apps with Python!"
      ]
    },
    {
      "title": "[NEW] Cloud & DevOps Interview Guide - AWS, Azure & GCP",
      "url": "https://www.udemy.com/course/aws-azure-google-cloud-devops-interview/",
      "bio": "Prepare for Interviews with AWS, Azure, Google Cloud, DevOps, Docker, Kubernetes, Terraform & Git",
      "objectives": [
        "Prepare confidently for AWS, Azure, and Google Cloud and DevOps interviews",
        "Understand core concepts of AWS, Azure, and Google Cloud and DevOps",
        "Explore managed services across AWS, Azure, and Google Cloud",
        "Explore Popular DevOps tools - Docker, Kubernetes, Terraform and Git"
      ],
      "course_content": {
        "Introduction": [
          "Introduction - Cloud and DevOps Interview Guide"
        ],
        "DevOps Interview Questions - Getting Started (Beginner)": [
          "Ready to Learn DevOps Fundamentals? [RESOURCES LINKED INSIDE]",
          "01 DevOps Fundamentals",
          "01 01 What is DevOps?",
          "01 02 How Did We Evolve to DevOps?",
          "01 03 What is Continuous Integration (CI) and Continuous Deployment (CD)?",
          "01 04 What is Infrastructure as Code?",
          "01 05 What is Standardization? How do Containers & Container Orchestration Help?",
          "01 06 What is Observability?",
          "01 07 Can DevOps Be Done Without Cloud?"
        ],
        "Docker Interview Guide - Part 1 (Beginner)": [
          "Ready to Review Docker Part 1 - [RESOURCES LINKED INSIDE]",
          "01 Docker Fundamentals",
          "01 01 What was the Traditional Deployment Approach Before Containers?",
          "01 02 Can you explain the sequence of steps in creating and deploying a Containe",
          "01 03 Compare Virtual Machines (VM) and Containers",
          "01 04 Explain Important Components in Container Architecture",
          "01 05 Why is Containerization important for DevOps and Microservices?",
          "02 Building Docker Images",
          "02 01 What is a Dockerfile? How do you build a Docker image?",
          "02 02 What is a Base Image?",
          "02 03 What is the difference between ENTRYPOINT and CMD in a Dockerfile? explain",
          "02 04 Difference between ADD and COPY in a Dockerfile",
          "02 05 How do you tag a Container image? Why is tagging important?",
          "02 06 How can you design Dockerfiles to maximize layer reuse?",
          "02 07 What is a multi stage build, and how can it be used to reduce the size of",
          "02 08 Is it possible to make changes to an existing Container image?",
          "02 09 What is the purpose of the .dockerignore file?",
          "02 10 What Are Alternatives to Writing Dockerfile?",
          "02 11 What is OCI and Why Is It Important?",
          "03 Managing Docker Containers",
          "03 01 Quick Review of Container Image Creation and Usage",
          "03 02 Explain important container management commands",
          "03 03 How do you set memory & CPU usage for containers & get Memory, & CPU Usage",
          "03 04 Explain the Docker Container Lifecycle",
          "03 05 How do you get all the system level information about docker? Like events",
          "How to remember things for a long time?"
        ],
        "Docker Interview Guide - Level 2": [
          "Ready to Review Docker - [RESOURCES LINKED INSIDE]",
          "04 Persisting Data in Docker",
          "04 01 Why is Data Persistence needed for Containers?",
          "04 02 What is a Volume in Docker?",
          "04 03 Explain Commands used to manage Volumes",
          "04 04 Explain Bind Mounts with an example",
          "04 05 Docker Volumes vs Bind Mounts",
          "04 06 Is it possible to share data between Multiple Containers?",
          "04 07 How can you recover data after accidentally deleting a Container?",
          "04 08 What are Volume Drivers?",
          "05 Docker Networking",
          "05 01 Why do we need Container Networking?",
          "05 02 What are the Networking Options in Docker?",
          "05 03 Give Examples of Network Management Commands in Docker?",
          "05 04 How can containers be isolated using a custom Bridge Network?",
          "05 05 Can a container be connected to multiple networks? If yes, how?",
          "05 06 What is DNS based service discovery in Docker networks?",
          "05 07 What happens when two containers are in different networks?"
        ],
        "Docker Interview Guide - Level 3": [
          "Ready to Review Docker - [RESOURCES LINKED INSIDE]",
          "06 Docker Security",
          "06 01 Why is Container Security Important?",
          "06 02 What are the Best Practices with Securing Containers?",
          "06 03 How can you run a Container as Non Root User?",
          "06 04 How do you remove Linux capabilities from a container?",
          "06 05 How do you check the Health of a Container?",
          "06 06 Explain Docker Content Trust (DCT) and how it enhances container security?",
          "06 07 What are CVEs (Common Vulnerabilities and Exposures)?",
          "06 08 What is Docker Image Vulnerability Scanning?",
          "06 09 How can you scan Docker images with Trivy?",
          "07 Docker Compose",
          "07 01 What is the need for Docker Compose?",
          "07 02 How is Docker Compose different from Docker Swarm or Kubernetes?",
          "07 03 Explain docker compose.yml, with an example",
          "07 04 How can you use Docker Compose to launch and tear down applications?",
          "07 05 What is the use of .env files in Docker Compose?",
          "07 06 Docker Compose FAQ",
          "08 Advanced Docker Concepts",
          "08 01 Docker FAQ",
          "08 02 Give Examples of Minimal Docker Base Images",
          "08 03 How would you troubleshoot a container if it is not running?",
          "08 04 How Do Namespaces and Control Groups Enable Container Isolation?",
          "08 05 How can you run Containers in the Cloud?",
          "Technology Change is an Opportunity"
        ],
        "Docker Cheat Sheet - Beginner": [
          "09 Docker Cheat Sheet",
          "09 01 System Commands, Basic Commands, Common Options",
          "09 02 Container Lifecycle, Images and Volumes, Network, Troubleshooting and more",
          "09 03 Docker Compose & Docker Hub"
        ],
        "Kubernetes Interview Guide - Level 1 (Beginner)": [
          "Ready to Learn Kubernetes - [RESOURCES LINKED INSIDE]",
          "01 Kubernetes Landscape",
          "01 01 What are the Challenges faced in Microservices Architecture?",
          "01 02 Why is Kubernetes important for DevOps and Microservices?",
          "01 03 What Features does Kubernetes provide?",
          "Role Play - What Features does Kubernetes provide?",
          "01 04 How can your run Kubernetes?",
          "01 05 Give an overview of Cloud managed Kubernetes Options?",
          "Role Play - Give an overview of Cloud-managed Kubernetes Options?",
          "01 06 How does Kubernetes Release Cycle work?",
          "02 Kubernetes Fundamentals",
          "02 01 Explain Kubernetes Physical Architecture",
          "Role Play - Explain Kubernetes Physical Architecture",
          "02 02 What is the role of Deployment, ReplicaSet and a Pod?",
          "What is the role of Deployment, ReplicaSet and a Pod",
          "02 03 Explain Kubernetes Logical View when a Microservice is Deployed",
          "Kubernetes Logical View when a Microservice is Deployed",
          "02 04 What happens in the background when you create a Deployment?",
          "02 05 What happens in the background when you Scale your Deployment?",
          "02 06 What happens in the background when you update the image in a Deployment?",
          "03 Kubernetes Services and Networking",
          "03 01 Why do we need a Kubernetes Service?",
          "Why do we need a Kubernetes Service",
          "03 02 What are the different Types of Services?",
          "What are the different Types of Services",
          "03 03 Kubernetes Services Scenarios",
          "03 04 What is the need for Fully Qualified Domain Name (FQDN)?",
          "03 05 How does a Service help with Service Discovery?",
          "03 06 Give a Practical Example of Service Discovery",
          "03 07 Why do we need an Ingress?",
          "03 08 Why do we need an Ingress Controller?",
          "03 09 Compare Ingress vs LoadBalancer Service",
          "04 More Kubernetes Fundamentals",
          "04 01 Why do we need labels in Kubernetes?",
          "04 02 Explain an Example Deployment YAML",
          "04 03 Explain an Example Service YAML",
          "04 04 What do selectors do in Kubernetes?",
          "04 05 What is the declarative approach in Kubernetes?",
          "04 06 Why is the declarative approach useful?",
          "04 07 What are Namespaces?",
          "04 08 Namespace Scenarios",
          "04 09 What is the need for Gateway API?",
          "04 10 Can you show a Gateway Multi tenant Traffic Routing example?",
          "04 11 How is Gateway different from Ingress?",
          "04 12 What are the scaling options in Kubernetes?",
          "04 13 What is Horizontal Pod AutoScaler (HPA)?",
          "04 14 What is Vertical Pod AutoScaler?",
          "04 15 How is HPA different from VPA?",
          "04 16 What is Cluster AutoScaler?",
          "04 17 How does HPA compare to VPA and Cluster AutoScaler?",
          "04 18 What are some alternatives to Cluster AutoScaler?",
          "How to stay relevant"
        ],
        "Kubernetes Interview Guide - Level 2": [
          "Ready to Learn Kubernetes - [RESOURCES LINKED INSIDE]",
          "05 Kubernetes Storage",
          "05 01 Why is persistence important for stateful applications in Kubernetes?",
          "05 02 What is the need for Volumes in Kubernetes?",
          "05 03 Give examples of different types of volumes in Kubernetes",
          "05 04 What is Static Volume Provisioning?",
          "05 05 What is Dynamic Volume Provisioning?",
          "05 06 Kubernetes Object - PersistentVolumeClaim (PVC)",
          "05 07 What is the role of a StorageClass in dynamic provisioning?",
          "05 08 PV, PVC and StorageClass - Troubleshooting",
          "05 09 Why would you prefer to use StatefulSet over Deployment for running kafka?",
          "05 10 Can you explain a StatefulSet with an example?",
          "05 11 How is a Secret different from a ConfigMap",
          "05 12 Why are changes to ConfigMaps and Secrets not visible immediately?"
        ],
        "Kubernetes Interview Guide - Level 3": [
          "Ready to Review Kubernetes - [RESOURCES LINKED INSIDE]",
          "06 Kubernetes Security",
          "06 01 Why Securing Kubernetes Is Challenging but Critical",
          "06 02 What is the need for Kubernetes Service Accounts?",
          "06 03 Practical Example? RBAC with Service Account",
          "06 04 What is the need for ClusterRole and ClusterRoleBinding?",
          "06 05 What is the need for a Network Policy?",
          "06 06 Give a Practical Example of Network Policy",
          "06 07 When do you use Pod Security Admission?",
          "06 08 How does Pod Security Admission work? What is Pod Security Standards(PSS)",
          "06 09 What is the need for SecurityContext?",
          "06 10 List a few tools to enhance security posture of workloads in Kubernetes",
          "07 Kubernetes Scheduling",
          "07 01 What is the need for Node Affinity?",
          "07 02 Practical Example Node Affinity",
          "07 03 What is the difference between Node Affinity and Node Selector?",
          "07 04 Why do we need Pod Affinity?",
          "07 05 Practical Example Pod Affinity",
          "07 06 What is Anti Affinity?",
          "07 07 Practical Example Anti Affinity",
          "07 08 Node Affinity vs Pod Affinity vs Pod Anti Affinity",
          "07 09 What are Taints and Tolerations?",
          "07 10 Practical Example Taints and Tolerations",
          "07 11 What is a Pod Disruption Budget?",
          "07 12 Cordon vs Drain",
          "07 13 Debugging Problems with Starting Up Pods",
          "08 Kubernetes Observability",
          "08 01 What is Monitoring?",
          "08 02 What is Observability?",
          "08 03 Monitoring vs Observability",
          "08 04 What is OpenTelemetry?",
          "08 05 How well is OpenTelemetry supported in Kubernetes?",
          "08 06 How does a Service Mesh Work?",
          "08 07 List a Few Observability Tools in Kubernetes",
          "08 08 What is need for Probes?",
          "08 09 What is the need for a DaemonSet?",
          "09 More Kubernetes Essentials",
          "09 01 What is CRI?",
          "09 02 What is CNI?",
          "09 03 What is CSI?",
          "09 04 How do you setup Highly available Kubernetes cluster?",
          "09 05 List Some Important Controllers in Kubernetes",
          "09 06 What is a Operator?",
          "09 07 Controllers vs Operators",
          "09 08 What is the need for Helm?",
          "09 09 What is Kustomize?",
          "09 10 Compare Kustomize vs Helm",
          "09 11 How can you implement GitOps with Argo CD in Kubernetes?",
          "HALF WAY STAGE How to take care of yourselves"
        ],
        "Cloud Interview Guide - AWS, Azure, Google Cloud - Level 1 (Beginner)": [
          "Ready to Learn Cloud - [RESOURCES LINKED INSIDE]",
          "00 Getting Started with Cloud Interview AWS, Azure and Google Cloud Interview",
          "01 01 What is Cloud and What are its advantages",
          "01 02 Region vs Zones vs EdgeLocations",
          "01 03 On premise vs Hybrid Cloud vs Multi Cloud",
          "01 04 IaaS vs PaaS vs SaaS vs Serverless",
          "01 05 What is Virtualization",
          "01 06 How can you create Virtual Machines in the cloud",
          "01 07 Architectural aspects about virtual machines in the cloud",
          "01 08 What are the Compute Options in Cloud",
          "02 00 Cloud Storage and Databases AWS, Azure and Google Cloud Interview",
          "02 01 Compare Availability vs Durability vs Consistency",
          "02 02 Compare RTO vs RPO",
          "02 03 Compare Data Formats vs Data Stores",
          "02 04 Where is Structured Data stored OLAP vs OLTP",
          "02 05 Where is Semi Structured Data stored NoSQL Databases",
          "02 06 Where is Unstructured Data stored File, Block, or Object storage",
          "02 07 What is Block Storage",
          "02 08 What is File Storage",
          "02 09 What is Object Storage",
          "02 10 What is Hybrid Storage",
          "02 11 What is the need for Data Analytics",
          "02 12 Compare Data Warehouse vs Data Lake",
          "How to be Productive - 3 Tips"
        ]
      },
      "requirements": [
        "No prior cloud or DevOps experience is required."
      ],
      "description": "Take Your FIRST STEP Towards a Cloud & DevOps Job!\nONE COURSE to review and learn AWS, Azure, Google Cloud, DevOps, Docker, Kubernetes, Terraform & Git.\nGET READY for Your Cloud and Devops Interview.\n\n\n5 THINGS YOU NEED TO KNOW: Cloud & DevOps Interview Guide\n#1: WIDE RANGE OF INTERVIEW TOPICS COVERED – AWS, Azure, Google Cloud, DevOps, Docker, Kubernetes, Terraform & Git.\n#2: STEP-BY-STEP PREP FOR INTERVIEW – Learn with step-by-step, real-world, hands-on examples.\n#3: DESIGNED FOR BEGINNERS & EXPERIENCED – Perfect whether you're just starting out or brushing up.\n#4: MULTI-CLOUD INSTRUCTOR – 500,000+ learners are mastering AWS, Azure & Google Cloud with in28Minutes.\n#5: FREE WEBSITE – Access all the content anytime - beautifully organized.\n\n\nCloud and DevOps skills are among the top in-demand tech skills globally. With companies migrating to AWS, Azure, and GCP, interview preparation is essential to land your dream job.\n\n\nWhat You'll Learn Inside\nStart with DevOps Fundamentals: Understand DevOps focus on culture and key practices including CI/CD, Infrastructure as Code, containerization, observability, and automation\nGrasp Cloud Fundamentals: Review core cloud concepts: IaaS vs PaaS vs SaaS, Serverless, virtualization, regions/zones, and cloud models (on-prem, hybrid, multi-cloud).\nReview Managed Services in AWS, Azure, and Google Cloud: Explore storage, databases, messaging, networking, cost optimization, security, and AI/ML services across AWS, Azure and Google Cloud.\nExplore Docker: Grasp container architecture, Dockerfiles, image building, container lifecycle, networking, volumes, security best practices, and Docker Compose.\nGet Confident with Kubernetes: Dive into Pods, Deployments, Services, Ingress, scaling, storage, observability, scheduling, and securing Kubernetes workloads.\nGet Started with Terraform: Explore Infrastructure as Code using HCL, providers, resource definitions, modules and state management.\nUncover Git: Master Git workflows, branching strategies, version control fundamentals, and advanced techniques like cherry-picking, tagging, and hooks.\n\n\nAre you READY to get started on this amazing journey to prepare for your Cloud and DevOps interview?\n\n\nDo you want to join over a MILLION learners having amazing learning experiences with in28Minutes?\n\n\nLet’s get interview-ready — with in28Minutes.\n\n\nLet’s get started.\n\n\nI’ll see you in the course.",
      "target_audience": [
        "Anyone preparing for a Cloud or DevOps interview",
        "Beginners who want to break into Cloud or DevOps roles",
        "Beginners looking to learn AWS, Azure, GCP, Docker, Kubernetes, Terraform, and Git quickly"
      ]
    },
    {
      "title": "Mastering Apache Airflow! Deploy to Kubernetes in AWS",
      "url": "https://www.udemy.com/course/mastering-apache-airflow/",
      "bio": "Learn to programmatically author, schedule and monitor workflows with Apache Airflow. Deploy to Kubernetes in AWS.",
      "objectives": [
        "Advanced tips for production",
        "Create your first pipeline",
        "Create ETL pipeline using Pandas",
        "Build Docker image for Apache Airflow",
        "Create helm chart for Apache Airflow",
        "Deploy Airflow to Kubernetes in AWS",
        "Basic Airflow components - DAG, Plugin, Operator, Sensor, Hook, Xcom, Variable and Connection",
        "Advance in branching, metrics, performance and log monitoring",
        "Run development environment with one command through Docker Compose",
        "Run development environment with one command through Helm and Kubernetes",
        "The difference between Sequential, Local, Celery and Kubernetes Executors",
        "Understand Apache Airflow's configuration properties",
        "Investigate Apache Airflow's REST Api",
        "Explore Apache Airflow's web interface"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Who this course is for?",
          "Course objectives"
        ],
        "Apache Airflow overview": [
          "What is Apache Airflow?",
          "Apache Airflow use cases",
          "Apache Airflow architecture"
        ],
        "Apache Airflow scheduler": [
          "Introduction",
          "Sequential Executor",
          "Local Executor",
          "Celery Executor",
          "Kubernetes Executor",
          "Quiz"
        ],
        "Apache Airflow web server": [
          "Introduction",
          "DAGs View",
          "Graph View",
          "Tree View",
          "Task Duration View",
          "Gantt View",
          "Code view",
          "Quiz"
        ],
        "Apache Airflow configuration": [
          "Introduction",
          "Core configuration section",
          "Scheduler configuration section",
          "Web server configuration section",
          "Kubernetes configuration section",
          "Overriding property in the configuration file",
          "Quiz"
        ],
        "Apache Airflow components": [
          "DAG",
          "Plugin",
          "Operator",
          "Hook",
          "Sensor",
          "XCom",
          "Variable",
          "Quiz"
        ],
        "Development environment": [
          "Python",
          "Docker",
          "PostgreSQL",
          "Kubernetes",
          "Setup project - Working directory",
          "Setup project - Installing dependencies",
          "Setup project - Initializing the project",
          "Quiz"
        ],
        "Create your first simple pipeline": [
          "Introduction",
          "Create your first DAG",
          "Create your first plugin",
          "Create your first operator",
          "Create your first sensor",
          "Create your first xcom"
        ],
        "Advanced": [
          "Branching",
          "Airflow connections",
          "Airflow logs",
          "Airflow REST Api",
          "Airflow metrics",
          "Quiz"
        ],
        "Apache Airflow in Docker and Docker Compose": [
          "Build Apache Airflow's Docker image",
          "Run Apache Airflow with Docker Compose",
          "Quiz"
        ]
      },
      "requirements": [
        "Internet connection",
        "Computer with either MacOS or Linux",
        "Basic Python knowledge",
        "A desire to learn"
      ],
      "description": "Apache Airflow is an open-source platform to programmatically author, schedule and monitor workflows. In this course we are going to start with covering some basic concepts related to Apache Airflow - from the main components - web server and scheduler, to the internal components like DAG, Plugin, Operator, Sensor, Hook, Xcom, Variable and Connection.\nLater in the course I will teach you some more advanced topics like branching, metrics, performance and log monitoring, and Airflow's REST API. Additionally I will help you to build your development environment with just one click using Docker and Docker Compose.\nWhy stop here? After all this, we will create a Kubernetes cluster in Amazon and we will deploy our application there!\nFinally, I will share with you some useful advanced tips which will be helpful to enhance your simple Airflow project to a production ready system.",
      "target_audience": [
        "Software Engineers curious about Apache Airflow",
        "Software Engineers looking to automate repetitive tasks",
        "Data Engineers looking to improve their Data Platforms"
      ]
    },
    {
      "title": "Python Data Structures & Algorithms: Ace Coding Interviews",
      "url": "https://www.udemy.com/course/data-structures-algorithms-in-python-j/",
      "bio": "Python Data Structures and Algorithms | Leetcode DSA in Python | Animated Explanation |Programming Use Cases in Python",
      "objectives": [
        "Understand Data Structures and Algorithms & How to Implement and Use them in Python",
        "Understand Big O Notation and How to Calculate Space & Time Complexities",
        "Improve your Problem Solving Skills",
        "Enhance your Programming Skills",
        "Leetcode Challenges with Video Solutions",
        "Understand How to Decide When to Use a Specific Algorithm or Data Structure for Different Use Cases",
        "Ace Coding Interviews"
      ],
      "course_content": {
        "Introduction": [
          "Why Should You Learn Data Structures and Algorithms ?",
          "What are Data Structures ?",
          "What are Algorithms ?",
          "IMPORTANT: Course Source Code"
        ],
        "Big O Notation": [
          "Introduction to Big O Notation",
          "Linear Complexity - O(n)",
          "Constant Complexity - O(1)",
          "Quadratic Complexity - O(n^2)",
          "Logarithmic Complexity - O(logn)",
          "Constants in Big O",
          "Dominant and Non-Dominant Factors in Big O",
          "Complexities Comparison"
        ],
        "Big O Notation: Practical": [
          "Big O Notation's Quiz",
          "Big O Calculation"
        ],
        "Linked Lists": [
          "Introduction to Linked Lists",
          "Linked List Class Implementation",
          "Linked List: Add Element",
          "Linked List: Append Implementation",
          "Linked List: Prepend Implementation",
          "Linked List: Iterating",
          "Linked List: Iterating Implementation",
          "Linked List: Removing Elements",
          "Linked List: Removing Elements Implementation",
          "Time Complexity of Linked Lists Operations",
          "When to Use Linked Lists",
          "Linked List Use Case: Shopping Cart"
        ],
        "Linked Lists: Practical": [
          "Linked List's Quiz",
          "Leetcode Challenge - Reverse Linked List",
          "Leetcode Challenge - Reverse Linked List: Solution",
          "Leetcode Challenge - Middle of the Linked List",
          "Leetcode Challenge - Middle of the Linked List: Solution"
        ],
        "Doubly Linked Lists": [
          "Introduction to Doubly Linked Lists",
          "Doubly Linked List Class Implementation",
          "Doubly Linked List: Append Implementation",
          "Doubly Linked List: Prepend Implementation",
          "Doubly Linked List: Delete Implementation",
          "Time Complexity of Doubly Linked Lists Operations",
          "Doubly Linked List Use Case: Text Cursor"
        ],
        "Doubly Linked Lists: Practical": [
          "Doubly Linked Lists Quiz"
        ],
        "Stacks": [
          "Introduction to Stacks",
          "Stack Implementation: Stack and Node Classes",
          "Stack Implementation: Push",
          "Stack Implementation: Pop & isEmpty",
          "Python Built-In List as Stack",
          "Stack Use Case: Text Editor Undo Functionality"
        ],
        "Stacks: Practical": [
          "Stack's Quiz",
          "Reverse String using a Stack",
          "Leetcode Challenge - Valid Parentheses",
          "Leetcode Challenge - Valid Parentheses: Solution"
        ],
        "Queues": [
          "Introduction to Queues",
          "Queue Implementation: Queue and Node Classes",
          "Queue Implementation: isEmpty",
          "Queue Implementation: Enqueue",
          "Queue Imeplementation: Dequeue",
          "Queue Use Case: Print Service"
        ]
      },
      "requirements": [
        "Basic python programming"
      ],
      "description": "Welcome to the Data Structures and Algorithms in Python Course!\n\n\nAre you a Python programmer who wants to write efficient code and improve your programming and problem solving skills ?\nDo you have an upcoming coding interview and you want to ace it with confidence ?\n\n\nIf the answer is yes, then this course is the right choice for you!\nIn this course you will learn everything about Data Structures and Algorithms and how to implement and use them in Python.\nThe concepts are explained with animations which makes it much more easier to understand and memorize.\n\n\nYou will also apply your knowledge throughout the course via coding exercises and Leetcode coding challenges with video solutions.\n\n\n\n\nThe course covers the following topics:\n\n\nGeneral\nWhy Should You Learn Data Structures and Algorithms ?\nWhat are Data Structures ?\nWhat are Algorithms ?\n\n\nBig O Notation\nLinear Complexity - O(n)\nConstant Complexity - O(1)\nQuadratic Complexity - O(n^2)\nLogarithmic Complexity - O(logn)\nConstants in Big O\nDominant and Non-Dominant Factors in Big O\nComplexities Comparison\n\n\nData Structures\nLinked Lists\nDoubly Linked Lists\nStacks\nQueues\nSets\nTrees\nTries\nHeaps\nHash Tables\nGraphs\n\n\nAlgorithms\nLinear Search\nBinary Search\nBubble Sort\nInsertion Sort\nSelection Sort\nMerge Sort\nRecursion\nTree Traversal\nGraph Traversal\n\n\nI'm confident that you will enjoy this course, but if you for some reason are not happy with the course it's backed by Udemy's 30 day money back guarantee, so nothing to lose :)\n\nI'm excited to see you in the course, hit that enroll button and start your mastering Data Structures & Algorithms journey :)",
      "target_audience": [
        "Python Programmers Who Want to Master Data Structures and Algorithms",
        "Python Programmers Preparing for Coding Interviews",
        "Python Programmers Who Want to Write More Efficient Code and Improve Their Problem-Solving Skills"
      ]
    },
    {
      "title": "Master Python Microservices on AWS",
      "url": "https://www.udemy.com/course/build-microservices-with-python-aws/",
      "bio": "Hands-on: Build Cloud-Native Microservices with Python and AWS",
      "objectives": [
        "Patterns of Event-Driven Microservices Architecture",
        "Building and Deploying AWS Lambda Microservices with Python",
        "Building and Deploying Containerized Microservices with Docker, FastAPI and AWS ECS",
        "Eliminate Dependencies using Event Bus and Messages",
        "Orchestrating Microservices with Choreography and Orchestrator Patterns",
        "Building Fast and Resilient Systems using CQRS",
        "Building Resiliant Systems using Event-Sourcing and Circuit Breaker",
        "Eliminating Network Dependencies using Service Discovery Pattern"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Introduction to Microservices": [
          "Microservices vs. Monolithic",
          "Anatomy of a microservices-based application"
        ],
        "The Hotel Booking Project": [
          "Hotel Booking System",
          "Preparing the Development Environment"
        ],
        "Identity and Access Management :: AWS Cognito": [
          "Introduction to AWS Cognito",
          "Setting up AWS Cognito for Hotel Booking system",
          "Sign in with AWS Cognito",
          "Adding a Page for Creating Hotels"
        ],
        "API Gateway": [
          "API Gateway Pattern and Tools",
          "Creating a Mock API with AWS API Gateway",
          "Authenticating API Requests",
          "Adding CORS Headers to APIs"
        ],
        "Building Serverless Microservices": [
          "The concept of a Microservice Chassis :: Serverless & Containrisation",
          "Creating and Deploying an AWS Lambda Microservice",
          "Capturing the Request Body in AWS Lambda as an API Backend",
          "Performing Authorization in a Backend-Lambda",
          "Storing Data and Files in AWS",
          "Creating an Execution IAM Role for Lambda",
          "Create and Configure S3 Buckets",
          "Uploading Files and Images to AWS S3",
          "Creating and Configuring a DynamoDB Table",
          "Storing Information in DynamoDB",
          "Deploying AWS Lambda with Python Dependencies",
          "Connecting API Gateway to Lambda via a Proxy Resource",
          "Testing Proxy API with Lambda",
          "Creating a RestFul GET API in API Gateway with a Lambda Microservice",
          "Practice Creating and Configuring an AWS Lambda Function",
          "Practice Creating a Proxy REST API in AWS API Gateway",
          "Review Your Practice Results",
          "Exploring Jason Web Tokens (JWT) and JSON Web Key Sets (JWKS)",
          "Lambda Authorizer: Performing Authentication",
          "Lambda Authorizer: Performing Authorization",
          "Deploying and Using the Lambda Authorizer with AWS API Gateway",
          "The CQRS Pattern",
          "The \"Fan Out\" and \"Idempotent Consumer\" Patterns",
          "Publishing Events to AWS SNS",
          "Setting up Elasticsearch for Search Microservice",
          "Implementing the Idempotent Consumer Pattern",
          "Storing the Event Information in Elasticsearch",
          "Practice: Deploy the Updater Service",
          "Subsciring a Microservice to Event Bus"
        ],
        "Building Containerised Microservices": [
          "Introdutction to Containerized Microservices",
          "The Search Microservice",
          "Testing Search API Locally in Visual Studio Code",
          "Creating and Testing a Docker Microservice",
          "Pushing a Docker Image to Amazon Elastic Container Registry (ECR)",
          "Deploying a Microservice to AWS ECS with Fargate Launch Type",
          "Creating a Proxy API for a Containerised Microservice",
          "Creating a an API for a Containerised Microsrevice with a Private IP",
          "Search Microserice in Action",
          "Introduction to the Circuit Breaker Pattern",
          "Implementing Circuit Breaker Pattern in Search API",
          "The Event Sourcing Pattern for Ultimate System Resiliancy",
          "Event Sourcing Microservice : Hotel Created Event Handler - Order Domain",
          "Practice: Deploy Hotel Created Event Handler for Order Domain",
          "Subscribing the Hotel Created Event Handler Order Domain to SNS Topic",
          "Booking Microservice - Command",
          "Deploying a Containerized Microservice with AWS Fargate Service Model",
          "Creating and Securing an HTTP API in AWS API Gateway",
          "CQRS: Building a Query Microservice with Docker and ECS"
        ],
        "Service Discovery": [
          "The Service Discovery Pattern and AWS Cloud Map",
          "Deploying a Microservice to AWS ECS and AWS CloudMap",
          "Creating an HTTP API in AWS Api Gateway and AWS Cloud Map",
          "View and Confirm Hotel Bookings",
          "Create a Review and Confirm Bookings Microservice",
          "Deploying a Docker Microservice to AWS ECS with EC2 Launch Type",
          "Creating an HTTP API for ECS Miroservice with EC2 Launch Type",
          "The Sidecar Pattern",
          "Booking Review Sidecar Microservice",
          "Deploy Booking Review Microservice",
          "Booking Review - Website Demo"
        ],
        "Logging for Microservices": [
          "Introduction to Logging and Microservices",
          "Logging Solutions in AWS",
          "AWS CloudWatch",
          "Setting up AWS Cognito Identity Pool for Kibana",
          "Creating ELK Stack with AWS OpenSearch",
          "Shipping Logs from AWS Cloudwatch to ELK (Elasticsearch and Kibana)"
        ],
        "The Saga Pattern": [
          "Events vs. Messages",
          "Introduction to Saga Pattern - Orchestration vs. Choreography",
          "Deep Dive into Choreography Pattern",
          "Deep Dive into Orchestration Pattern",
          "Orchestration and Choreography Patterns Comparison"
        ]
      },
      "requirements": [
        "Intermediate Python Programming",
        "Intermediate Knowledge of AWS Services"
      ],
      "description": "Microservices architecture has gained popularity and is now widely used by solution architects and developers to build scalable, maintainable, and secure software systems and applications.\n\n\nAlthough microservices have significant benefits, building and maintaining a complex system can be challenging. Some frameworks, such as Django, tried to reduce this complexity and overhead with a \"battery-included\" approach, which takes care of essential aspects of a microservices-based ecosystem in the background.\n\n\nWith the advent of public cloud services such as Amazon Web Services (AWS), applications have become distributed. Such distributed applications use the native services of AWS, such as Event Bus, API Gateway and Security, to form a Cloud-Native application.\n\n\nUnfortunately, frameworks like Django are unsuitable for building a modern cloud-native distributed system because they promote monolithic architecture and may produce significant service-level dependencies. Such frameworks also may impede developers from learning the nitty-gritty of how event-driven microservices work.\n\n\nThis course teaches how a modern distributed system is architected and coded via a complete Hotel Booking System. You will be hands-on and will code this system with me. This hotel booking system utilises the native services of Amazon Web Services (AWS) and Event-Driven architecture to build a system that is easily maintainable, resillient and can scale virtually unlimited.\n\n\nWhat you will learn:\n\n\nThe architecture of a modern event-driven and cloud-native distributed system.\nAWS services are used to build microservices, including Incognito, API Gateway, Lambda, ECS, DynamoDB, S3, SNS, CloudMap, and Secrets Manager.\nPython coding for building small and independent microservices using FastAPI. If you prefer Flask for creating APIs, you can use that instead.\nServerless Python Microservices.\nArchitectural patterns for microservices, including API Gateway, Event Bus, Circuit Breaker, CQRS, and more.\nContainerised Docker Python Microservices.\n\n\nWhat is not included:\n\n\nWeb Development. I have, on purpose, not included coding a web UI using a Javascript framework, i.e., React, so that we focus solely on microservices. The course comes with a simple HTML/Javascript UI. This is NOT a full-stack development course.\nLegacy microservices and web frameworks such as Django.\n\n\nWhat you must already know:\n\n\nElementary-level Python programming.\nIntermediate-level knowledge of Amazon Web Services (AWS). I will teach you in details how each service is configured; however, you will need some AWS experience.\nBasic understanding of what containers and Docker are.\n\n\nTo successfully master the architecting and building of Python microservices, you must come in with an open mind and be ready for a paradigm shift. At the end of this course, you will be praised for your knowledge and skill in quickly building a modern enterprise-scale system.\n\n\nEnrol now and join me on this exciting journey!",
      "target_audience": [
        "Developers and Programmers",
        "Solution Architects",
        "Technical Leaders",
        "University Students"
      ]
    },
    {
      "title": "From 0 to 1: Design Patterns - 24 That Matter - In Java",
      "url": "https://www.udemy.com/course/from-0-to-1-design-patterns/",
      "bio": "An intensely practical, deeply thoughtful and quirky look at 24 Design Patterns. Instructors are ex-Google, Stanford.",
      "objectives": [
        "Identify situations that call for the use of a Design Pattern",
        "Understand each of 24 Design Patterns - when, how, why and why not to use them",
        "Distill the principles that lie behind the Design Patterns, and apply these in coding and in life, whether or not a Design Pattern is needed",
        "Spot programming idioms that are actually built on Design Patterns, but that are now hiding in plain sight"
      ],
      "course_content": {
        "What are Design Patterns?": [
          "What this course is about",
          "Creational, Behavioural and Structural Paradigms",
          "Design Principle #1: Rely on Interfaces, not Implementations",
          "Design Principle #2: The Open/Closed Principle",
          "Design Principle #3: Principle of Least Knowledge",
          "Design Principles #4 and #5: Dependency Inversion and the Hollywood Principle",
          "Quiz : Design Patterns",
          "A taste of things to come"
        ],
        "The Strategy Pattern": [
          "The Strategy Design Pattern: Introduction via String Sorting",
          "The Strategy Pattern and Dependency Injection - I",
          "The Strategy Pattern and Dependency Injection - II",
          "Quiz : Strategy Pattern",
          "Quiz : Strategy Pattern",
          "Quiz : Strategy Pattern"
        ],
        "The Decorator Pattern": [
          "The Decorator Design Pattern",
          "The Decorator Design Pattern In Action: Java File APIs",
          "Quiz : Decorator Pattern",
          "Quiz : Decorator Pattern"
        ],
        "The Factory Pattern": [
          "The Factory Design Pattern: Introduction",
          "The Factory Design Pattern In Action: Database Drivers",
          "The Abstract Factory Design Pattern",
          "The Abstract Factory Design Pattern: Families of classes",
          "The Factory Design Pattern In Action: Reflection - I",
          "The Factory Design Pattern In Action: Reflection - II",
          "Quiz : Factory Pattern",
          "Quiz : Factory Pattern",
          "Quiz : Factory Pattern",
          "Quiz : Factory Pattern"
        ],
        "The Singleton Pattern": [
          "The Singleton Design Pattern: Introduction",
          "The Singleton Design Pattern: Double-Checked Locking",
          "The Singleton Design Pattern: The Synchronized Keyword",
          "The Singleton Design Pattern: Pulling together a multi-threaded solution",
          "Quiz : Singleton Pattern",
          "Quiz : Singleton Pattern",
          "Quiz : Singleton Pattern",
          "Quiz : Singleton Pattern"
        ],
        "The Adapter Pattern": [
          "The Adapter Design Pattern: Introduction",
          "The Adapter Design Pattern: Introduction - II",
          "The Adapter Design Pattern In Action: Tables and Charts",
          "Quiz : Adapter Pattern"
        ],
        "The Facade Pattern": [
          "The Facade Design Pattern",
          "Quiz : Facade Pattern",
          "Quiz : Facade Pattern"
        ],
        "The Template Pattern": [
          "The Template Design Pattern: Introduction via Text Auto-Summarization",
          "The Template Design Pattern In Action: Frameworks",
          "The Template Design Pattern In Action: Frameworks - II",
          "Quiz : Template Pattern"
        ],
        "The Iterator Pattern": [
          "The Iterator Design Pattern: Introduction",
          "The Iterator Design Pattern: Type Safety via Generics",
          "The Iterator Design Pattern: Internal and External Iterators",
          "The Iterator Design Pattern: Language Support for Iterators in Python and Java",
          "Quiz : Iterator Pattern"
        ],
        "The MVC Paradigm": [
          "The Model View Controller Design Pattern: An Introduction",
          "The Model View Controller Design Pattern In Action: A MediaPlayer Example",
          "The Model View Controller Design Pattern In Action: A Chart Example",
          "Quiz : MVC",
          "Quiz : MVC",
          "Quiz : MVC"
        ]
      },
      "requirements": [
        "There are no pre-requisites other than curiosity - about Design, about Patterns, about Life :-)"
      ],
      "description": "Prerequisites: Basic understanding of Java\nTaught by a Stanford-educated, ex-Googler, husband-wife team\nMore than 50 real-world examples\nThis is an intensely practical, deeply thoughtful, and quirky take on 24 Design Patterns that matter.\nLet’s parse that.\nThe course is intensely practical, bursting with examples - the more important patterns have 3-6 examples each. More than 50 real-world Java examples in total.\nThe course is deeply thoughtful, and it will coax and cajole you into thinking about the irreducible core of an idea - in the context of other patterns, overall programming idioms and evolution in usage.\nThe course is also quirky. The examples are irreverent. Lots of little touches: repetition, zooming out so we remember the big picture, active learning with plenty of quizzes. There’s also a peppy soundtrack, and art - all shown by studies to improve cognition and recall.\nLastly, the patterns matter because each of these 24 is a canonical solution to recurring problems.\n\n\nWhat's Covered:\nDecorator, Factory, Abstract Factory, Strategy, Singleton, Adapter, Facade, Template, Iterator, MVC, Observer, Command, Composite, Builder, Chain of Responsibility, Memento, Visitor, State, Flyweight, Bridge, Mediator, Prototype, Proxy, Double-Checked Locking and Dependency Injection.\nThe only GoF pattern not covered is the Interpreter pattern, which we felt was too specialized and too far from today’s programming idiom; instead we include an increasingly important non-GoF pattern, Dependency Injection.\nExamples: Java Filestreams, Reflection, XML specification of UIs, Database handlers, Comparators, Document Auto-summarization, Python Iterator classes, Tables and Charts, Threading, Media players, Lambda functions, Menus, Undo/Redo functionality, Animations, SQL Query Builders, Exception handling, Activity Logging, Immutability of Strings, Remote Method Invocation, Serializable and Cloneable, networking.\nDependency Inversion, Demeter’s Law, the Open-Closed Principle, loose and tight coupling, the differences between frameworks, libraries and design patterns.",
      "target_audience": [
        "Yep! Engineers - from street-smart coders to wise architects - ought to take this course. After this class, you'll look at software design with a new pair of eyes.",
        "Yep! Product Managers ought to take this course - you will learn to understand the 'how' of Software Design without being constrained by it.",
        "Yep! Technology executives and investors who don't write code ought to take this course - after this you will always have an intelligent point-of-view on software, and won't find your eyes glazing over when its time to talk nitty-gritty",
        "Computer Science majors (undergrad or grad) - if you are among the folks that make 'real world example Observer Pattern' such a common search phrase on Google, this is precisely the place for you.",
        "Yep! Journalists, Wall Street types or IP lawyers seeking to understand recurring patterns of problems and solutions in technology.",
        "Yep! If you are prepping hard for software engineering interviews :-)",
        "Nope! This course is not right for you if you are looking for a Programming 101 course. That's not because there are pre-requisites, but simply because a Programming 101 course focuses on syntax, and on doing, while this course focuses on design, and on thinking."
      ]
    },
    {
      "title": "Complete Guide to Elasticsearch",
      "url": "https://www.udemy.com/course/elasticsearch-complete-guide/",
      "bio": "Learn Elasticsearch from scratch and begin learning the ELK stack (Elasticsearch, Logstash & Kibana) and Elastic Stack.",
      "objectives": [
        "How to build a powerful search engine with Elasticsearch",
        "The theory of Elasticsearch and how it works under-the-hood",
        "Write complex search queries",
        "Be proficient with the concepts and terminology of Elasticsearch"
      ],
      "course_content": {
        "Introduction": [
          "Introduction to the course",
          "Introduction to Elasticsearch",
          "Overview of the Elastic Stack",
          "Understanding of the Elastic Stack",
          "Walkthrough of common architectures",
          "Guidelines for the course Q&A"
        ],
        "Getting Started": [
          "Elasticsearch vs OpenSearch",
          "Overview of installation & hosting options",
          "Hosting OpenSearch on Bonsai",
          "Hosting Elasticsearch & Kibana on Elastic Cloud",
          "Setting up Elasticsearch & Kibana on macOS & Linux",
          "Setting up Elasticsearch & Kibana on Windows",
          "Understanding the basic architecture",
          "Inspecting the cluster",
          "Sending queries with cURL",
          "Sharding and scalability",
          "Sharding",
          "Understanding replication",
          "Replication",
          "Adding more nodes to the cluster",
          "Overview of node roles",
          "Wrap up"
        ],
        "Managing Documents": [
          "Creating & deleting indices",
          "Indexing documents",
          "Retrieving documents by ID",
          "Updating documents",
          "Scripted updates",
          "Upserts",
          "Replacing documents",
          "Deleting documents",
          "Understanding routing",
          "How Elasticsearch reads data",
          "How Elasticsearch writes data",
          "Understanding document versioning",
          "Optimistic concurrency control",
          "Update by query",
          "Delete by query",
          "Batch processing",
          "Importing data with cURL",
          "Wrap up"
        ],
        "Mapping & Analysis": [
          "Introduction to this section",
          "Introduction to analysis",
          "Using the Analyze API",
          "Understanding inverted indices",
          "Introduction to mapping",
          "Overview of data types",
          "How the \"keyword\" data type works",
          "Understanding type coercion",
          "Understanding arrays",
          "Adding explicit mappings",
          "Retrieving mappings",
          "Using dot notation in field names",
          "Adding mappings to existing indices",
          "How dates work in Elasticsearch",
          "How missing fields are handled",
          "Overview of mapping parameters",
          "Updating existing mappings",
          "Reindexing documents with the Reindex API",
          "Defining field aliases",
          "Multi-field mappings",
          "Index templates",
          "Introduction to dynamic mapping",
          "Combining explicit and dynamic mapping",
          "Configuring dynamic mapping",
          "Dynamic templates",
          "Mapping recommendations",
          "Stemming & stop words",
          "Analyzers and search queries",
          "Built-in analyzers",
          "Creating custom analyzers",
          "Adding analyzers to existing indices",
          "Updating analyzers",
          "Wrap up"
        ],
        "Searching for Data": [
          "Introduction to searching",
          "Introduction to term level queries",
          "Searching for terms",
          "Retrieving documents by IDs",
          "Range searches",
          "Prefixes, wildcards & regular expressions",
          "Querying by field existence",
          "Term level queries",
          "Introduction to full text queries",
          "The match query",
          "Introduction to relevance scoring",
          "Searching multiple fields",
          "Phrase searches",
          "Full text queries",
          "Leaf and compound queries",
          "Querying with boolean logic",
          "Query execution contexts",
          "Boosting query",
          "Disjunction max (dis_max)",
          "Querying nested objects",
          "Nested inner hits",
          "Nested fields limitations",
          "Compound & nested queries"
        ],
        "Joining Queries": [
          "Introduction to this section",
          "Add departments test data",
          "Mapping document relationships",
          "Adding documents",
          "Querying by parent ID",
          "Querying child documents by parent",
          "Querying parent by child documents",
          "Multi-level relations",
          "Parent/child inner hits",
          "Terms lookup mechanism",
          "Join limitations",
          "Join field performance considerations"
        ],
        "Controlling Query Results": [
          "A word on document types",
          "Specifying the result format",
          "Source filtering",
          "Specifying the result size",
          "Specifying an offset",
          "Pagination",
          "Sorting results",
          "Sorting by multi-value fields"
        ],
        "Aggregations": [
          "Introduction to aggregations",
          "Metric aggregations",
          "Introduction to bucket aggregations",
          "Document counts are approximate",
          "Nested aggregations",
          "Filtering out documents",
          "Defining bucket rules with filters",
          "Range aggregations",
          "Histograms",
          "Global aggregation",
          "Missing field values",
          "Aggregating nested objects"
        ],
        "Improving Search Results": [
          "Introduction to this section",
          "Proximity searches",
          "Affecting relevance scoring with proximity",
          "Fuzzy match query (handling typos)",
          "Fuzzy query",
          "Adding synonyms",
          "Adding synonyms from file",
          "Highlighting matches in fields",
          "Stemming"
        ],
        "Conclusion": [
          "Bonus Lecture: Discounts to my other courses"
        ]
      },
      "requirements": [
        "Knowledge of JSON",
        "Basic terminal skills is a plus"
      ],
      "description": "Do you want to learn Elasticsearch from the beginning and become a professional in no time? This course is an excellent way for you to quickly learn Elasticsearch and to put your knowledge to work in just a few hours! This online course is the most comprehensive Elasticsearch tutorial that you will find anywhere! It is a great starting point for anyone who wants to learn the Elastic Stack and ELK stack, as Elasticsearch is at the center of both stacks.\nElasticsearch is an extremely popular search engine and will be an excellent addition to your CV - even if you are already familiar with other search engines or frameworks such as Apache Lucene, Apache Solr, Algolia, etc.\nThis Elasticsearch course is a combination of theory and learning by doing. Before giving examples of how to perform certain queries, you will have been equipped with the necessary theory in advance. This ensures that you not only know how to write powerful Elasticsearch queries, but that you also understand the relevant theory. Throughout this tutorial, you will get a deep understanding of how Elasticsearch works under the hood.\nThe course starts from the absolute beginning, and no knowledge or prior experience with Elasticsearch is required. We will walk through all of the most important aspects of Elasticsearch. After completing this course, you will be able to utilize Elasticsearch for a number of use cases and purposes, such as:\nBuilding a full text search engine (e.g. similar to Google Search)\nData analytics for large amounts of data with aggregations\nUsing Elasticsearch as a time series database (TSDB)\n... and much more!\nCombined with other products in the Elastic Stack, such as Logstash or Kibana, you will unlock several other features, such as:\nLog management and log analysis\nObservability (including server/service monitoring and APM (Application Performance Monitoring))\nData visualization and reporting\nSecurity analysis (SIEM)\n... and much more!\n* These features are not specifically covered in this course. Some of them are covered in my Logstash and Kibana courses.\nSo, join me in this online course and learn how to build amazing things with Elasticsearch!\n\n\n\n\nPlease note that this course is intended for developers who want to interact with an Elasticsearch cluster in one way or another and not system administrators looking to maintain an Elasticsearch cluster in production. The course focuses on functionality relevant to utilize the capabilities of Elasticsearch as a developer. It also covers Elasticsearch in favor of OpenSearch, but most of the core features are identical or similar. So even if you wish to learn OpenSearch, this course should still be a good starting point.\nNote that this course does not cover Logstash and Kibana. This is so that I can go into much greater detail with Elasticsearch and focus on that exclusively. This course is therefore dedicated to Elasticsearch. For courses on Logstash and Kibana, please see my other courses.",
      "target_audience": [
        "Developers who want to learn Elasticsearch. The course is intended for developers and not system administrators."
      ]
    },
    {
      "title": "Mastering Linked Lists in Java: A Comprehensive Guide",
      "url": "https://www.udemy.com/course/data-structures-java/",
      "bio": "Learn Singly, Doubly and Circular LinkedList Data Structures in Java through Animations and Implementations.",
      "objectives": [
        "Step by Step approach to visualize Linked List Data Structures",
        "Students will master in and out of LinkedList Data Structures through animations and implementations",
        "Learn Singly Linked List through Animations and Implementations",
        "Learn Doubly Linked List through Animations and Implementations",
        "Learn Circular Linked List through Animations and Implementations"
      ],
      "course_content": {
        "Singly Linked List in Java": [
          "How to represent a Singly Linked List in Java ?",
          "How to implement a Singly Linked List in Java ?",
          "Animation - How to create a Singly Linked List in Java ?",
          "Implementation - How to create a Singly Linked List in Java ?",
          "Animation - How to print elements of a Singly Linked List in Java ?",
          "Implementation - How to print elements of a Singly Linked List in Java ?",
          "Animation - How to find length of a Singly Linked List in Java ?",
          "Implementation - How to find length of a Singly Linked List in Java ?",
          "Animation - How to insert node at the beginning of a Singly Linked List in Java?",
          "Implementation - How to insert node at the beginning of a Singly Linked List ?",
          "Animation - How to insert a node at the end of a Singly Linked List in Java ?",
          "Implementation - How to insert a node at the end of a Singly Linked List in Java",
          "How to search an element in a Singly Linked List in Java ?",
          "How to reverse a Singly Linked List in Java ?",
          "How to find middle node in a Singly Linked List in Java ?",
          "How to find nth node from the end in a Singly Linked List in Java ?",
          "How to insert a node in a sorted Singly Linked List in Java ?",
          "How to remove a given key from Singly Linked List in Java ?",
          "Animation - How to detect a loop in a Singly Linked List in Java ?",
          "Implementation - How to detect a loop in a Singly Linked List in Java ?"
        ],
        "Doubly Linked List in Java": [
          "How to represent Doubly Linked List in Java ?",
          "How to implement Doubly Linked List in Java ?",
          "Animation - How to print elements of a Doubly Linked List in Java ?",
          "Implementation - How to print elements of a Doubly Linked List in Java ?",
          "How to insert node at the beginning of a Doubly Linked List in Java ?",
          "How to insert node at the end of a Doubly Linked List in Java ?",
          "Animation - How to delete first node in a Doubly Linked List in Java ?",
          "Implementation - How to delete first node in a Doubly Linked List in Java ?",
          "Animation - How to delete last node in a Doubly Linked List in Java ?",
          "Implementation - How to delete last node in a Doubly Linked List in Java ?"
        ],
        "Circular Singly Linked List in Java": [
          "How to represent a Circular Singly Linked List in Java ?",
          "How to implement a Circular Singly Linked List in Java ?",
          "How to traverse and print a Circular Singly Linked List in Java ?",
          "Animation - Insert node at the beginning of a CircularSinglyLinkedList",
          "Implementation - Insert node at the beginning of a CircularSinglyLinkedList",
          "Animation - Insert node at the end of a Circular Singly Linked List",
          "Implementation - Insert node at the end of a Circular Singly Linked List",
          "Animation - How to remove first node from a Circular Singly Linked List ?",
          "Implementation - How to remove first node from a Circular Singly Linked List ?"
        ],
        "Bonus": [
          "Bonus lecture - A must read !!!"
        ]
      },
      "requirements": [
        "The basics of Java programming.",
        "Any IDE - Eclipse, Netbeans or IntelliJ"
      ],
      "description": "Are you intrigued by the elegance and versatility of Linked Lists? This course is designed to equip you with the knowledge and skills to become a proficient expert in this fundamental data structure.\nA Deep Dive into Linked List Types:\nFrom the foundational Singly Linked List to the more complex Doubly Linked List and Circular Linked List, this course provides a thorough exploration of each type. We'll delve into their unique characteristics, operations, and applications, ensuring you grasp the intricacies of these structures.\nLearning by Doing: Problem-Solving with Visualizations\nTo reinforce your understanding, we'll guide you through a variety of practical problems and their solutions. Each step will be accompanied by clear and concise visualizations, making it easier to grasp the underlying logic and avoid rote memorization.\nJava as Your Programming Language:\nThe course is primarily taught using Java, a popular and versatile language. However, if you're familiar with languages like JavaScript, Python, C#, C++, or C, you'll find that the concepts and techniques covered are transferable.\nAnimated Explanations and Code Implementation:\nTo enhance your learning experience, we've incorporated animated slides that visually represent the algorithms and data structures. This dynamic approach will help you internalize the concepts more effectively. Additionally, you'll gain hands-on experience by coding the algorithms on an integrated development environment (IDE).\nPreparing for Interviews: A Focus on Algorithm and Data Structure Questions\nThis course is designed to equip you with the knowledge and skills necessary to excel in technical interviews. We'll cover a wide range of frequently asked questions related to algorithms and data structures, providing you with the confidence to tackle any challenge that comes your way.\nKey Takeaways:\nA solid understanding of Singly Linked Lists, Doubly Linked Lists, and Circular Linked Lists\nPractical problem-solving skills using Linked Lists\nProficiency in implementing Linked List operations in Java\nPreparation for technical interviews involving algorithms and data structures\nBy the end of this course, you'll have a deep understanding of Linked Lists and the ability to apply your knowledge to real-world programming challenges.",
      "target_audience": [
        "Beginners to Data Structures",
        "Java Programmers who want to learn LinkedList Data Structures",
        "Beginners who want to learn SinglyLinkedList Data Structures in Java",
        "Beginners who want to learn DoublyLinkedList Data Structures in Java",
        "Beginners who want to learn CircularLinkedList Data Structures in Java"
      ]
    },
    {
      "title": "NinjaTrader 8 Strategy Design Essentials",
      "url": "https://www.udemy.com/course/ninjatraderessentials/",
      "bio": "Crash Course on how to Get Up and Running with Strategy Development for NinjaTrader 8",
      "objectives": [
        "You will learn how to code strategies for NinjaTrader 8.",
        "You will get a framework that you can re-use numerously for making your own strategies.",
        "You will understand how to most effectively structure the code base for designing strategies for NinjaTrader.",
        "You will get a lot of examples and some interesting bonuses on working with NinjaTrader strategies."
      ],
      "course_content": {},
      "requirements": [
        "At least basic knowledge of C#"
      ],
      "description": "Hello!!!\nThis course is a quintessence of the other 120 lecture course on NinjaTrader and is completely dedicated to strategy development. It is a quick way to get up and running with the code and demonstrates the most essential techniques I use to develop strategies demonstrating common scenarios.\nIn the course we buid everything together in a modular approach and I provide all the code that is used in the resources. The course is very hands and provides a very usefull framework that you can use in the future to build your own strategies for NinjaTrader.",
      "target_audience": [
        "People who are interested in learning how to develop trading strategies for NinjaTrader"
      ]
    },
    {
      "title": "10X Developer Productivity: Master GitHub Copilot & Amazon Q",
      "url": "https://www.udemy.com/course/master-github-copilot-coding-efficiency-copilot-complete-guide/",
      "bio": "Write Python, Java, ReactJS, SQL & Selenium Code 10X Faster - Complete Generative AI-Powered Development Bootcamp [2025]",
      "objectives": [
        "Accelerate Development: Use GitHub Copilot and Amazon Q for faster coding in Python, ReactJS, Spring Boot and other programming languages with test automation",
        "Efficiently Learn and Integrate New Tech Stacks: Quickly master Python, ReactJS, and Spring Boot, using scaffolded setups to streamline, accelerate development",
        "Master Prompt Engineering for Effective Code Generation: Craft precise prompts to maximize GitHub Copilot's code generation capabilities, ensuring high-quality",
        "Creating Postman Collection and Test Automation Scripts using GitHub CoPilot and Amazon Q",
        "Accelerate RDBMS PL/SQL Development with GitHub Copilot",
        "Selenium Automation using Copilot and Amazon Q"
      ],
      "course_content": {
        "Introduction to GitHub Copilot": [
          "Agenda",
          "Introduction",
          "Udemy Ratings and Reviews",
          "Exploring Key Features of GitHub Copilot"
        ],
        "GitHub Copilot - Getting Started": [
          "Signing up for GitHub Copilot",
          "Setup inside Visual Studio Code",
          "Optional - Setup inside Intellij"
        ],
        "GitHub Copilot - Implementing RESTful CRUD Operations with in Python": [
          "Building the Foundation: Scaffolding a Python Application with GitHub Copilot",
          "Create Python Modules",
          "Initializing App and Database with GitHub Copilot",
          "Streamlining App Launch, Testing, and curl CLI Generation with Copilot"
        ],
        "GitHub Copilot - Building a ReactJS Frontend": [
          "Effortless ReactJS App Scaffolding with GitHub Copilot",
          "Using Copilot to Add a Product Route in ReactJS",
          "Managing Products: List, Create, and Update with Copilot",
          "Enhancing UI: Add Bootstrap and Navigation Using Copilot",
          "Debugging Terminal Errors with GitHub Copilot",
          "GitHub Copilot: Automating Unit Test Creation",
          "Selenium Automation for CRUD Operations with GitHub Copilot",
          "Extra - Selenium Automation using Java and NodeJS"
        ],
        "GitHub Copilot - Build Spring Boot based Java Application": [
          "Quick Start: Scaffold a Java Application Using Copilot",
          "Sorting, Filtering, and Pagination with Copilot Assistance",
          "Exporting Books to Excel Using Copilot",
          "Write Unit Tests using Copilot",
          "Build Swagger API Docs with GitHub Copilot",
          "Learn to Simplify Code with GitHub Copilot",
          "Extra - Authentication and Containerization"
        ],
        "GitHub Copilot - Accelerate PL/SQL Development": [
          "Setting up SQLTools in Visual Studio for database management",
          "Installing Oracle Client/Driver for SQLTools",
          "Establishing a connection to Oracle Database",
          "Creating a Products Table",
          "Adding Constraints and Indexes",
          "Resolving Syntax Errors",
          "Creating a SKU Table with Foreign Key Constraints",
          "Generating Product Test Data with Mockaroo",
          "Generating SKU Test Data with Mockaroo",
          "Loading Product Data via CSV with SQL*Loader",
          "Loading SKU Data via CSV with SQL*Loader",
          "Creating a Procedure for Adding a New Product",
          "Enhancing Procedure with Constraint Validation",
          "Creating a Function and Resolving Terminal Errors",
          "Exploring Inner Join, Left Outer Join, Right Outer Join, and Full Outer Join",
          "Add Categories Table with Test Data and Join with Products",
          "Subqueries and Common Table Expressions"
        ],
        "GitHub Copilot - Streamlining Selenium Automation": [
          "Scaffold a New Selenium Application for The Internet Herokuapp",
          "Implementing and Executing Login Tests with GitHub Copilot",
          "Automating Dropdown Functionality Tests with GitHub Copilot",
          "Creating and Automating Dynamic Loading Tests Using GitHub Copilot",
          "Automating File Upload Tests Using GitHub Copilot"
        ],
        "Amazon Q - Getting Started": [
          "Free Tier - Install Amazon Q on Visual Studio",
          "Pro Tier - Install Amazon Q on Visual Studio"
        ],
        "Amazon Q - Basic Features": [
          "Exploring Basic Features - Build a Chat Application using Amazon Q"
        ],
        "Amazon Q - Build a Java Application": [
          "Scaffold Expense Tracker Application using Amazon Q",
          "Create a Postman Collection using Amazon Q",
          "Compile and Test the Application",
          "Enhance the application using Dev Command",
          "Inline Suggestions",
          "Create Project Documentation",
          "Fix the Issues with the Code",
          "Generate the Unit Tests",
          "Optimize the Code",
          "Querying the Code using Chat",
          "Refactor the Code"
        ]
      },
      "requirements": [
        "Basic Programming Knowledge: Familiarity with at least one programming language such as Python, JavaScript, Java or Similar.",
        "Understanding of Development Environments: Basic knowledge of using Integrated Development Environments (IDEs) like VS Code, IntelliJ, or similar tools.",
        "Curiosity and Willingness to Learn: An open mind to learn new tools and technologies to enhance coding productivity and efficiency."
      ],
      "description": "Transform into an AI-powered developer and code 10X faster with GitHub Copilot and Amazon Q generative AI tools. This complete artificial intelligence programming course teaches Python development, Java Spring Boot, ReactJS, PL/SQL database programming, Selenium automation, and AWS cloud development using machine learning coding assistants.\nMaster generative AI for developers with hands-on projects in Python application scaffolding, ReactJS component development, Java enterprise applications, database programming with AI assistance, automated testing with Selenium, and AWS CLI automation. Learn prompt engineering techniques for optimal AI code generation, automated unit testing, integration testing, and deployment automation.\nPerfect for software developers, full-stack engineers, DevOps engineers, QA automation testers, and programming beginners wanting to leverage artificial intelligence tools for accelerated software development. Course includes real-world projects, AI coding best practices, and comprehensive training in GitHub Copilot, Amazon Q developer assistant, and generative AI programming workflows.\nComplete AI Development Mastery - What You'll Learn:\nGitHub Copilot & Amazon Q Fundamentals\nAI pair programming with GitHub Copilot for faster code development\nAmazon Q developer assistant for AWS cloud development and troubleshooting\nGenerative AI prompt engineering for optimal code generation\nAI code completion and intelligent code suggestions\nMachine learning for developers - practical AI coding applications\nPython Development with AI Assistance\nPython application scaffolding using GitHub Copilot auto-generation\nAutomated Python code writing with AI-powered suggestions\nPython unit testing automation using generative AI tools\nPython debugging with artificial intelligence assistance\nFlask and Django development accelerated by AI coding tools\nJava & Spring Boot AI Development\nSpring Boot application creation with GitHub Copilot assistance\nJava enterprise development using AI code generation\nRESTful API development with automated code completion\nJava unit testing and integration testing with AI tools\nMaven and Gradle project management with AI assistance\nReactJS & Frontend Development\nReact component development using AI-powered code generation\nJavaScript ES6+ programming with GitHub Copilot assistance\nFrontend testing automation with AI-generated test cases\nReact hooks and state management using AI coding assistance\nAPI integration and axios configuration with AI tools\nDatabase Development & PL/SQL\nSQL query optimization using AI-powered suggestions\nPL/SQL procedure development with GitHub Copilot assistance\nDatabase schema design using artificial intelligence tools\nOracle database programming with AI code generation\nDatabase testing automation and performance optimization\nSelenium Test Automation\nSelenium WebDriver automation with AI-generated test scripts\nCross-browser testing using AI-powered test case creation\nPage Object Model implementation with GitHub Copilot\nTestNG and JUnit integration with AI assistance\nAutomated regression testing using generative AI tools\nAWS Cloud Development\nAWS CLI automation with Amazon Q assistance\nCloud infrastructure setup using AI-powered guidance\nAWS services integration with AI coding assistance\nCloud cost optimization using Amazon Q insights\nDevOps automation with AI-generated scripts\nThrough practical examples and hands-on exercises, you will reinforce your learning and gain the confidence to apply these skills in real-world scenarios. Expert guidance from experienced instructors will support you throughout the course, and you'll have the opportunity to join a community of learners for sharing experiences, asking questions, and collaborating on projects.\nBy the end of this course, you'll be proficient in using GitHub Copilot and Amazon Q to enhance your coding productivity, integrate new technologies efficiently, and follow best practices for code management and collaboration. Join us and take your development skills to the next level!",
      "target_audience": [
        "This GitHub Copilot and Amazon Q course is designed for developers and programmers of all levels who want to enhance their coding productivity using GitHub Copilot. Whether you're a beginner looking to accelerate your learning curve, an intermediate developer aiming to streamline your workflow, or an experienced programmer seeking to integrate AI-powered assistance into your development process, this course offers valuable insights and practical skills.",
        "Beginners: New programmers who want to learn how to use GitHub Copilot and Amazon Q to write code faster and with fewer errors, gaining a head start in their coding journey.",
        "Intermediate Developers: Those who are already comfortable with programming and are looking to improve their efficiency by leveraging AI-powered GitHub Copilot and Amazon Q Udemy code suggestions.",
        "Experienced Programmers: Seasoned developers who want to explore advanced features of GitHub Copilot and Amazon Q to further enhance their productivity and adopt new best practices.",
        "Software Engineers: Professionals working in various fields of software development who seek to integrate AI tools into their daily workflows to boost productivity.",
        "Coding Enthusiasts: Individuals passionate about coding and eager to explore the latest tools and technologies to stay ahead in the tech industry.",
        "This course will equip learners with the skills to effectively use GitHub Copilot and Amazon Q, ensuring they can maximize its potential to write high-quality, efficient code across various programming languages and development environments."
      ]
    },
    {
      "title": "Build a Blockchain and a Cryptocurrency from Scratch",
      "url": "https://www.udemy.com/course/build-blockchain/",
      "bio": "Updated for 2025: Build a blockchain and cryptocurrency. Discover the engineering ideas behind Bitcoin and Ethereum!",
      "objectives": [
        "Discuss the implementation of Blockchain and cryptocurrencies.",
        "Understand main blockchain concepts like Proof-of-Work, mining, peer-to-peer connections, etc.",
        "Build their own blockchain and cryptocurrency.",
        "Create a NodeJS application with real-time websocket connections.",
        "Build an API with NodeJS and Express."
      ],
      "course_content": {
        "Course Overview - What is the Blockchain And Why?": [
          "Course Overview and Roadmap",
          "Note on the Introductory Videos",
          "What is the Blockchain and Why Use it?",
          "The Blockchain in Practice: Cryptocurrencies and Cryptography",
          "The Blockchain in Practice: Mining and Bitcoin",
          "Roadmap to Building the Blockchain: Guided by the Bitcoin White Paper"
        ],
        "References | Course Repository, Software Installations, and Mega JS Overview": [
          "Important: Course Repository and Requirements",
          "For Windows: Install the Windows Subsystem for Linux and VS Code",
          "Optional: Mega JavaScript Overview for JS Newcomers part 1",
          "Optional: Mega JavaScript Overview for JS Newcomers part 2"
        ],
        "Build the Blockchain - Blocks": [
          "Set Up the Blockchain Application",
          "Create the Block",
          "Genesis Block",
          "Mine Blocks",
          "SHA256 Hash Function",
          "Test the Block"
        ],
        "Build the Blockchain - the Chain": [
          "Build the Blockchain Class",
          "Test the Blockchain",
          "Multiple Chain Validation",
          "Chain Validation",
          "Test Chain Validation",
          "Replace the Chain",
          "Test Chain Replacement"
        ],
        "Develop the Blockchain Application": [
          "Organize the Project",
          "Blockchain API - Get Blocks",
          "Mine Blocks Post Request"
        ],
        "Create the Blockchain Network": [
          "Peer to Peer Server",
          "Create the WebSocket Server",
          "Connect to Blockchain Peers",
          "Handle Messages from Peers",
          "Synchronize the Blockchain across Peers"
        ],
        "Proof of Work": [
          "Proof of Work and the 51% Attack",
          "Proof of Work and the Nonce",
          "Test the Nonce Functionality",
          "Dynamic Block Difficulty",
          "Test Difficulty Adjustment"
        ],
        "Wallets and Transactions on the Blockchain": [
          "Notes on the Upcoming Cryptocurrency Implementation",
          "Wallets, Keys, and Transactions",
          "Create Wallet",
          "Chain Util and Key Generation",
          "Create a Transaction",
          "Test the Transaction",
          "Sign a Transaction",
          "Test the Transaction Input",
          "Verify Transactions",
          "Test Transaction Verification",
          "Transaction Updates",
          "Test Transaction Updates"
        ],
        "Collect Transactions in a Pool": [
          "Transaction Pool",
          "Transaction Pool - Add Transaction",
          "Test the Transaction Pool",
          "Create Transactions with the Wallet",
          "Test Wallet Transactions",
          "Get Transactions",
          "Post Transactions",
          "Add the Transaction Pool to the Peer to peer Server",
          "Handle Transaction Messages in the Peer to peer Server",
          "Public Key Endpoint"
        ],
        "Mine Transactions in a Block": [
          "Miners of Transactions",
          "Create the Miner Class",
          "Grab Valid Transactions",
          "Test Valid Transactions",
          "Reward Transactions",
          "Test Reward Transactions",
          "Reward Valid, and Clear Transactions",
          "Broadcast Clear Transactions",
          "Mine Transactions Endpoint",
          "The Nuance of Wallet Balance",
          "Calculate the Wallet Balance",
          "Calculate the Balance during each Transaction",
          "Test Balance Calculation",
          "The Cryptocurrency in Action"
        ]
      },
      "requirements": [
        "Familiarity with using a code editor and the command line.",
        "Some JavaScript experience will help, but every line is explained. This is not a course on advanced JS, but uses JS to build the concepts. By focusing on the concepts, the JS will become clear.",
        "Some programming experience will definitely help. If you've never coded before, then this course will probably move too quickly."
      ],
      "description": "Announcement! There is a full-stack remastered version of this course! This course builds the backend. But if you're interested in building a frontend and deploying the project, check out the remastered version!\n\n\nSearch for \"Build a Blockchain & Cryptocurrency | Full-Stack Edition\" under my list of courses!\n\n\n***\nThis course will get you to build a blockchain and cryptocurrency from scratch.\nThe blockchain is a revolutionary technology that allows for the secure, distributed, decentralized storage of information. Over the past few years, the blockchain has taken the engineering landscape by storm. Many people in the industry predict that the blockchain will disrupt the ways we interact with technology on the same way the Internet did in the early 2000s.\nThe blockchain is the main technology behind Bitcoin, Ethereum, and the other prominent cryptocurrencies that we read about in the news today. By leveraging the blockchain, cryptocurrencies create a system of “trustless”ness. This cuts the need for middle men like banks and traders in economic systems.\nDo you want to enter this young market, and become a highly sought-after blockchain engineer? The industry is starving for people who understand, and even better, can build blockchains. The supply is low, but the demand is high. So having a blockchain project under your belt will open doors and jobs for you.\nFor engineers, coders, and software developers, the best way to truly understand the revolutionary technologies of blockchain and cryptocurrencies, is to build a blockchain and cryptocurrency yourself. Therefore, this course will take you through implementing a blockchain and cryptocurrency - discovering the underlying techniques and concepts.\nThe course is designed into sections that introduce the main concepts of the blockchain one-by-one. By the end of the course, you will have a respectable blockchain project in your repertoire.\nSome of the main course highlights:\nBuild a Blockchain in the object-oriented programming style.\nGenerate hashes for blocks in the chain.\nUnit Test Components of the Blockchain.\nCreate an API around the Blockchain.\nCreate a real-time connected peer-to-peer server.\nImplement a proof-of-work algorithm.\nSign Transactions with cryptography and digital signature.\nCreate a Transaction Pool for a real-time list of incoming data.\nInclude transactions in core blocks of the chain.\nWe’ll use NodeJS to implement this project. Don’t worry if you’re not familiar with JavaScript. This course explains the purpose behind every line and keyword. So, while JS experience will help, it’s not an absolute requirement.\nWritten summaries supplement each tutorial. That way, you can move along at your own pace, either watching the more thorough filmed tutorial, or reading the summary.\nUltimately, knowledge of the Blockchain will set you up for success in the future, as an engineer in a blockchain-dominated world. So what are you waiting for? Let’s get started building a blockchain!",
      "target_audience": [
        "The Blockchain engineers of the future.",
        "Anyone wanting to understand how cryptocurrencies are built.",
        "Cryptocurrency holders, so that way they can understand the underlying system.",
        "Anyone who wants to build a huge project in NodeJS, and it to their repertoire."
      ]
    },
    {
      "title": "Python: Coding Guidelines, Tools, Tests and Packages [2024]",
      "url": "https://www.udemy.com/course/python-coding-guidelines-tooling-testing-and-packaging/",
      "bio": "Step ahead in your Python career and learn about PEP8, Unit-Testing (TDD), Type Annotations and Python Packaging.",
      "objectives": [
        "The Coding guidelines and good practice programming (PEP8)",
        "Tooling with Pylint, Flake8, Autopep8, Black etc.",
        "Type Annotations and Mypy",
        "The usage of Debugging, Profiling, Timing and Unit Testing",
        "The creation of own Python packages",
        "The creation of a modern HTML documentation",
        "The usage of continouos integration tools"
      ],
      "course_content": {
        "Chapter 1: Introduction and Software": [
          "Introduction to the course",
          "Course manual",
          "Note: Materials and Software",
          "Setup the Python Environment",
          "Setup Visual Studio Code"
        ],
        "Chapter 2: Coding Guidelines and Docstrings": [
          "PEP8 Coding Guidelines - Part 1",
          "PEP8 Coding Guidelines - Part 2",
          "PEP8 Guidelines",
          "Vscode Settings for the Tools",
          "Tool: isort",
          "Code Linter: Why do we need them?",
          "Code Linter: Flake8 and Pylint",
          "Code Linter: Ruff",
          "Formatter: Why do we need them?",
          "Formatter: Black",
          "Formatter: Ruff",
          "Linter and Formatter",
          "Example Class: Vector2D",
          "Docstring Styles",
          "Code Linter: Pydocstyle",
          "Docstrings",
          "What is a Python Type Annotation? - Part 1",
          "What is a Python Type Annotation? - Part 2",
          "What is a Python Type Annotation? - Part 3",
          "Type Annotations: Union",
          "Type Annotations: Any and Optional",
          "Python 3.9 Type Annoations",
          "Type Annotation: List",
          "Type Annotation: Tuple",
          "Type Annotation: Callable",
          "Type Annotations - Part 1",
          "Python 3.10 Type Annoations",
          "Type Annotation: Dict and Mapping",
          "Type Annotation: NoReturn",
          "Python 3.10 Type Annotations: TypeGuard",
          "Type Annotation: Protocol",
          "Type Annotation: Generic Functions",
          "Type Annotation: Generic Classes",
          "Type Annotations: NamedTuple and TypedDict",
          "Python 3.11 Type Annoations: Literals",
          "Python 3.12 Type Annoations",
          "Type Annotations - Part 2",
          "pre-commit",
          "Config files for the tools",
          "Real World Example for the Tools"
        ],
        "Chapter 3: Debugging, Unit-Testing and Timing": [
          "Debugging in VS Code: Python Part 1",
          "Debugging in VS Code: Python Part 2",
          "Debugging in VS Code: Jupyter Notebook",
          "Tasks in VS Code",
          "Timing",
          "Profiling",
          "Debugging, Timing and Profiling",
          "Unit-Testing with unittest",
          "Unit-Testing with pytest",
          "Unit-Testing"
        ],
        "Chapter 4: Packaging": [
          "Modules and Packages - Part 1",
          "Modules and Packages - Part 2",
          "Modules and Packages - Part 3",
          "Modules and Packages - Part 4",
          "Modules and Packages",
          "Overview for our Vector Python Package",
          "Metadata and Install the Library",
          "Mkdocs and Github Pages",
          "Pre-Commit Hooks",
          "More to Github Actions",
          "Code Coverage",
          "Github Repository Features"
        ],
        "Chapter 5: Course conclusion": [
          "Course conclusion",
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "Be able to work with your operating system and the terminal",
        "You should know the Python basics (Variables, Functions, Classes etc.)"
      ],
      "description": "Course description:\nIn this course, you will explore coding guidelines and best practices, such as PEP8, as well as using popular Python tools like Pylint, Flake8, Autopep8, Black, and Pydocstyle. Additionally, you will learn about different docstring styles, such as Sphinx, Numpy, and Google, as well as using type annotations and the static type checker, MyPy. You will also gain practical experience in debugging, profiling, timing, and unit testing (TDD). Furthermore, you will learn how to create your own Python packages, modern HTML documentation using MkDocs and Google documentation strings, and how to use continuous integration tools like GitHub Actions for testing and code documentation.\nThe Course covers the following Topics:\nInstalling and setting up the software\nThe coding guidelines and good practice programming (PEP8)\nThe usage of Pylint, Flake8, Autopep8, Black and Pydocstyle\nDifferent docstring styles for your code (sphinx, numpy and google)\nThe usage of type annotations and the static type checker MyPy\nThe usage of debugging, profiling, execution time measuring (timing) and unit testing (TDD)\nThe creation of own Python packages that can be uploaded to PyPi\nThe creation of a modern HTML documentation with mkdocs and google documenation strings\nThe usage of continouos integration tools (Github actions for testing and codedoc)\nStep ahead in your Python career and join this course!\nI hope will see you there!\n\n\nNote:\nIn the course, Python is installed via Anaconda. If this is not possible for you, you can also install Python from other sources.",
      "target_audience": [
        "(Junior) Python developer who want to master the language"
      ]
    },
    {
      "title": "Python for Software Engineering Bootcamp",
      "url": "https://www.udemy.com/course/python-for-software-engineering/",
      "bio": "Go from zero to software engineer",
      "objectives": [
        "How to write proper and clean Python code",
        "How to develop APIs in Python",
        "Skills required to work as a software engineer",
        "How to properly test your code",
        "How to write scalable applications",
        "How to interact with databases in code",
        "How to add caching to your code",
        "How to use GitHub to automatically test and deploy code",
        "How to use Docker to build containerised applications"
      ],
      "course_content": {
        "Introduction": [
          "Setting Up Our Coding Environment",
          "Installing Python",
          "Writing Our First Program",
          "Variables",
          "String",
          "Operations on Strings",
          "Integers, Floats, and Type Casting",
          "Booleans and Boolean Operations",
          "None Types",
          "Lists",
          "Tuples",
          "Dictionaries",
          "Formatting Strings and Writing Comments",
          "If Statements",
          "Elif and Else Statements",
          "For Loops",
          "While Loops",
          "Break and Continue",
          "Functions",
          "Exercise: Printing Formatted Symbols",
          "Function Parameters",
          "Global Variables",
          "File Handling",
          "Virtual Environments",
          "Launching Our First Application",
          "Classes",
          "Classes Inheritance",
          "Decorators",
          "Generators",
          "JSON and Text Response",
          "Typing",
          "Response Models",
          "Expanded Field Information",
          "Path Prameters",
          "Request Bodies",
          "Query Parameters",
          "Put and Delete",
          "Patch Endpoint",
          "Docstrings",
          "Async Functions",
          "Directory Structure",
          "API Routers Continued",
          "Environment Variables",
          "HTTP Status Codes",
          "Returning Any Response Code",
          "Exceptions",
          "Logging",
          "Logging Formatter",
          "Custom Exception Handlers",
          "Headers and Dependencies"
        ],
        "Testing": [
          "Pytest Intro",
          "Writing Our First Service Test",
          "Fixtures",
          "Integration Tests",
          "Testing For Exceptions",
          "Sending Requests in Python",
          "Sending Async Requests",
          "Testing Synchronous Requests",
          "Testing Async Requests",
          "Test Coverage",
          "MyPy Round 2"
        ],
        "Intro to the Terminal": [
          "Digital Ocean Setup",
          "SSH on Windows",
          "Connecting With SSH",
          "Basic Navigation",
          "Creating Folders",
          "Creating Files",
          "Removing Folders and Files",
          "Moving, Renaming, Copying Files and Folders",
          "Environment Variables",
          "Piping and Redirecting",
          "Super User and Running Pythons Scripts",
          "Executables and Modifying Permissions",
          "Sending Requests"
        ],
        "Docker": [
          "Docker Intro",
          "Creating a Dockerfile",
          "Multistage Build",
          "Docker compose",
          "Makefile"
        ],
        "SQL": [
          "Intro to Relational Databases",
          "Data Types and Schemas",
          "[Mac] Setting Up a Local PostgreSQL Server",
          "[Windows] Setting Up a Local PostgreSQL Server",
          "[Mac] SQL Editor Postico",
          "SQL Editor DataGrip",
          "SQL Editor CLI",
          "Creating and Removing a Database",
          "Creating Schemas",
          "Creating Tables",
          "Altering Tables",
          "Enumerated Types",
          "Inserting Values",
          "Running an SQL Script",
          "Reading Data",
          "Exercise Sheet 1",
          "Creating Tables Using Query Results",
          "Aliases and Ordering",
          "Conditional Filtering Direct Comparisons",
          "Conditional Filtering Grouped Comparisons",
          "Joining Conditionals",
          "Negating Conditionals",
          "Filtering Null Values",
          "Creating New Columns and Arithmetics",
          "Datatype Conversions",
          "Exercise Sheet 2",
          "Logic Statements",
          "Manipulating Strings",
          "String Positional Information",
          "String Subsets and Concatenations",
          "String Replacements",
          "Date and Time",
          "Date and Time Intervals",
          "Exercise Sheet 3",
          "Comments",
          "Aggregation Functions",
          "Grouping and Filtering Aggregations",
          "Inner Join",
          "Left, Right, and Outer Joins",
          "Self Joins",
          "Unions",
          "Subqueries",
          "Exercise Sheet 4",
          "CTEs",
          "Window Functions and Aliases",
          "Row Numbers and Ranks",
          "Using Other Rows with Window Functions",
          "NTiles",
          "Understanding Query Performance",
          "Exercise Sheet 5"
        ],
        "Integrating Databases into our Application": [
          "Adding Postgres into our Docker Compose",
          "Creating Database Models in Python",
          "Database Migrations",
          "SQLAlchemy ORM Intro",
          "Creating a Database Client",
          "Updating our Application to Read From the Database",
          "Database Inserts",
          "Database Updates",
          "Database Deletes",
          "Async Database Queries",
          "Async Updates",
          "Updating Unit Tests to Work With the Database",
          "Updating Integration Tests to Work With the Database",
          "SQLite for Testing",
          "Mocking"
        ],
        "Caching": [
          "Redis Intro",
          "Adding Caching Into Our Application",
          "Redis Hash Intro",
          "Redis Sets Intro",
          "Adding Hash Caching to Pagination Endpoint",
          "Python Object Serialization",
          "Cache Flushing",
          "Data Compression"
        ],
        "Linting": [
          "MyPy Configurations",
          "Import Sorting",
          "Automatic Code Formatting",
          "Additional Code Checking"
        ],
        "Github": [
          "Github Credentials Setup",
          "Github Desktop Setup",
          "Cloning A Repository",
          "Pushing a Local Repository to Github",
          "Reverting and Squashing Commits",
          "GitHub Branches",
          "Pull Request",
          "Precommit Hooks",
          "Github CI",
          "Tagged Release",
          "Reading Documentation"
        ],
        "Concurrent and Parallel Programming": [
          "Threading, Multiprocessing, Async Intro",
          "Threading in Python",
          "Creating a Threading Class",
          "Creating a Wikipedia Reader",
          "Creating a Yahoo Finance Reader",
          "Queues and Master Scheduler",
          "Creating a Postgres Worker",
          "Integrating the Postgres Worker",
          "Yaml File Intro",
          "Creating a Yaml Reader",
          "Improving Our Wiki Worker",
          "Improving All Workers and Adding Monitoring",
          "Final Program Cleanup",
          "Locking",
          "Multiprocessing Intro",
          "Multiprocessing Queues",
          "Multiprocessing Pool",
          "Multiprocessing Pool Map Multiple Arguments",
          "Multiprocessing Multiple Varying Arguments",
          "Multiprocessing Checking Elements in List in Certain Ranges",
          "Intro to Writing Asynchronous Programs",
          "Asynchronous Tasks",
          "Async Gather Method",
          "Using Async Timeouts",
          "Creating Asynchronous For Loops",
          "Using Asynchronous Libraries",
          "The Async Wait Statement",
          "Combining Async and Multiprocessing"
        ]
      },
      "requirements": [
        "Access to a computer and a willingness to learn"
      ],
      "description": "Software Engineers are one of the most in-demand positions in the modern world, and this demand will only increase as people and organizations continue to adopt technology and integrate it into their business processess.\nIn addition, Software Engineering provides lucrative and flexible job positions, with especially many remote work opportunities in the post-COVID error.\nHowever, because of this, Software Engineering positions can be extremely competitive to get, and often contain several rounds of intense interviews.\n\n\nIn this course you're going to go from no prior programming experience to having the technical skillset to work as a Software Engineer in tech. You're going to learn how to build, test, and APIs and web services, which form the foundation of most software engineer work, and you'll be learning all of this in Python, one of the worlds most popular and widely used programming languages.\n\n\nHowever, what really sets this course apart is not just the content you'll learn, but also the depth you'll learn it in. You'll learn how to write properly structured, well tested, and production ready code that's not just suited for a hobby project, but will be at level that is expected in the professional world.\n\n\nBy the end of this course you'll feel comfortable with developing applications, have a portfolio item, and be ready to apply to Software Engineer positions and take on those technical interviews.",
      "target_audience": [
        "Complete beginners who want to learn how to program and become a Software Engineer",
        "No prior programming experience needed, you'll learning everything you'll need to know in the course"
      ]
    },
    {
      "title": "Ultimate Text Editing Productivity with Sublime Text",
      "url": "https://www.udemy.com/course/ultimate-text-editing-productivity-with-sublime-text/",
      "bio": "Make your productivity soar by mastering Sublime Text. Covering all the new features of Sublime Text 4 too!",
      "objectives": [
        "How to use Sublime Text like a professional",
        "How to be more effective as a developer using keyboard shortcuts",
        "Effectively edit code, prose and more at speed",
        "Know all the pro features of Sublime Text and how to use them"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Installation",
          "Package Control",
          "Preferences",
          "Plugins and themes overview",
          "Themes introduction",
          "Installing themes",
          "Fonts and ligatures"
        ],
        "Interface Orientation": [
          "Interface Overview",
          "Opening files",
          "The 'minimap'",
          "The sidebar",
          "The console and Terminus",
          "Copy History",
          "Quick project switching",
          "Remapping keys",
          "Tabs - switching, making, moving and closing",
          "Windows splitting closing and switching",
          "Fullscreen and distraction free modes",
          "Find and replace",
          "Goto symbol in project"
        ],
        "Movement": [
          "Movement basics",
          "System-wide delete and select by word and line",
          "Edit points and diff 'hunks'",
          "Jump points",
          "Jump to line",
          "Code folding",
          "Bookmarks",
          "Markers"
        ],
        "Selection": [
          "Basics",
          "Expanding selections",
          "Multiple cursors",
          "All occurrences and skipping selections"
        ],
        "Manipulation": [
          "Inserting new lines and copy and paste",
          "Indent, delete lines to end and beginning",
          "Swapping lines/line bubbling and transposing text",
          "Comments",
          "Paste and indent, wrapping selections",
          "Spell checking",
          "Duplicate or join lines, changing the case of selections",
          "Arithmetic"
        ],
        "Build systems": [
          "Build system"
        ],
        "Snippets": [
          "Snippets"
        ],
        "Troubleshooting": [
          "Troubleshooting"
        ],
        "Final Challenge": [
          "Final Challenge"
        ],
        "Plugins": [
          "LSP - Language Server Protocol",
          "Sidebar enhancements",
          "Prettier",
          "Terminus"
        ]
      },
      "requirements": [
        "No programming experience needed. You will need a copy of Sublime Text to follow along"
      ],
      "description": "Learn how to use Sublime Text like an expert! In this class you will learn all the incredible capabilities of Sublime Text and how to use its tools and techniques to make your productivity soar.\nWhether you are writing code or prose, Sublime Text can get the job done at a blistering pace.\nWe won't just cover the basics like installation and setup. Most of this course will deal with the killer features you probably don't even know about! This is a course for beginners and established users alike. Whether you use Sublime Text on Linux, Windows or Mac on screen shortcuts show the relevant keyboard shortcuts for each editor.\nWhether you have just got Sublime Text or been using it for years and want to use it more effectively, Ultimate Text Editing with Sublime Text has something for you!\n\n\nWe will cover:\n\n\n- Viewing and reverting 'diffs'\n- Editing at speed with multiple cursors\n- Creating build systems for oft used tasks\n- Making snippets to expand common boilerplate text\n- Switching windows and tabs with the keyboard\n- Jumping through previous edit points and selections\n- Using fullscreen and distraction free modes\n- Using code folding to keep your mind on the task at hand\n- Sublime Text has arithmetic built in. Use it to create numbered lists and auto calculate selections\nAnd much, much more!\n\n\nThe project of this class is taking part in the Final Challenge. You should play that video and pause the video at each task.\nTry and remember the features you have learnt in prior lessons and the shortcuts needed to achieve them.\nYou can consider yourself a 10th Dan Sublime Black Belt if you can carry out those tasks without needing to refer back to the other videos!\nIf you think you have what it takes, upload a short (3-5mins) video of you editing text using the techniques you have learnt. The less mouse use the better! Lemme see what you've got! Talk us through your edits as you go!",
      "target_audience": [
        "Any developer or writer looking to be more effective at text editing with Sublime Text"
      ]
    },
    {
      "title": "Blockchain Programming",
      "url": "https://www.udemy.com/course/build-your-own-cryptocurrency-in-48-hours/",
      "bio": "Build a blockchain and cryptocurrency from scratch using Python",
      "objectives": [
        "Build a cryptocoin from scratch using Python",
        "Digitally sign messages and verify signatures",
        "Design and build a tamper-proof blockchain to store any kind of data",
        "Secure your blockchain with a proof-of-work requirement",
        "Open sockets to communicate transactions and block with peers",
        "Build a wallet and miner for your cryptocoin"
      ],
      "course_content": {
        "Introduction and Python Basics": [
          "Introduction",
          "Python Datatypes: Lists, Dictionaries and Tuples",
          "Python Basics: Functions, Loops, If Statements and Modules",
          "Where's the blockchain!?",
          "Python Basics: Classes",
          "Python Basics: Inheritance",
          "Python Basics: Catching Errors with Try/Except"
        ],
        "Digital Signatures": [
          "Asymmetric Encryption",
          "Digital Signatures",
          "Signatures for Cryptocurrencies",
          "Digital Signatures",
          "Test-driven Development",
          "Installing modules with pip",
          "Assignment: Sign and verify",
          "Solution: Part 1",
          "Solution: Part 2",
          "Strings or Bytes"
        ],
        "Block Chain": [
          "Hash functions",
          "Crytographic hashing",
          "Computing hash functions with Python",
          "Block Chains",
          "Assignment: Blockchain for general data",
          "Solution"
        ],
        "Transactions": [
          "Transactions",
          "Multiple output addresses",
          "Multi-signature transactions",
          "Transactions",
          "Assignment: Transaction class Part 1",
          "Assignment: Transaction class Part 2",
          "Solution: Part 1",
          "Solution: Part 2"
        ],
        "Blockchain-based transaction ledger": [
          "Securing a public transactions ledger",
          "Review of previous work",
          "Assignment 1: Save and restore with pickle",
          "Assignment 1: Solution",
          "Assignment 2: The TxBlock class",
          "Assignment 2: Solution"
        ],
        "Mining and Proof-of-Work": [
          "Decentralization",
          "The Dark Side of Decentralization",
          "Proof-of-Work",
          "Nonces",
          "Proof-of-Work Quiz",
          "Assignment 1: Mining rewards",
          "Assignment 1: Solution",
          "Assignment 2: Nonce requirement",
          "Additional Python tips and tricks",
          "Assignment 2: Solution"
        ],
        "Communicating with Peers": [
          "Dragons!",
          "Internet basics",
          "Client and Server",
          "Building a server",
          "Building a client",
          "Non-blocking server",
          "Client-server code along",
          "Pickling data for communication",
          "Finishing up client-server",
          "Miner and Wallet",
          "Building a socket communication utility",
          "Assignment: Build a Miner",
          "Solution",
          "Placing the new block"
        ],
        "Multi-threading": [
          "Basic Threading",
          "Assignment 1: Test Miner Using Threads",
          "Assignment 1: Solution",
          "Assignment 2: Wallet client and server",
          "Assignment 2: Solution",
          "Coding Best Practices",
          "Assignment 3: Saving and Restoring Keys",
          "Assignment 3: Solution",
          "Save and Restore Blocks and Transactions"
        ],
        "Additional security concerns": [
          "Potpourri",
          "Assignment 1: Load and save states",
          "Assignment 1: Solution",
          "Assignment 2: Limit block size",
          "Assignment 2: Solution",
          "Assignment 3: Checking account balances",
          "Assignment 3: Solution",
          "Assignment 4: Blockchain branching",
          "Assignment 4: Solution",
          "Assignment 5: Replay Attacks",
          "Assignment 5: Solution",
          "Approaches to replay attacks",
          "Assignment 6: Multiple miners",
          "Assignment 6: Solution",
          "Hardness and emission rate",
          "Hardness quiz",
          "Cryptocoin economics: Supply-side edition",
          "Cryptocoin economics: Demand-side edition",
          "Final code base"
        ]
      },
      "requirements": [
        "Beginning knowledge of any programming language",
        "Python 3.x",
        "A text editor"
      ],
      "description": "You'll learn the ins and outs of blockchain like only a blockchain programmer knows. Using only a few Python libraries, we'll build a cryptocurrency from the ground up. Even if you have very little programming experience we can help you through it!\n\nYou'll learn about digital signatures, hashing and proof-of-work mining. We'll design and build a scheme for decentralized consensus including communicating over TCP/IP sockets. Bring your basic knowledge of Python, and you'll emerge on the other side with a grasp of cryptocurrencies better than 99% of your peers and with a working prototype you can build on.\nYou'll make smarter cryptocurrency investment decisions, launch a career in blockchain programming or just be the smartest crypto-junkie in the room. Clear your weekend, click the enroll button and let's go!",
      "target_audience": [
        "Programmers of all skill levels who want to learn cryptocurrencies from the inside",
        "Crypto-junkies who want to learn some programming"
      ]
    },
    {
      "title": "gRPC [Java] Master Class: Build Modern API & Micro services",
      "url": "https://www.udemy.com/course/grpc-java/",
      "bio": "Better than REST API! Build a fast and scalable HTTP/2 API for your microservice with gRPC & Protocol Buffers (protobuf)",
      "objectives": [
        "Learn the gRPC theory to understand how gRPC works",
        "Compare gRPC and REST API paradigm",
        "Write your gRPC service definition in .proto files",
        "Generate Server & Client Code in Java using the Gradle gRPC plugin",
        "Implement Unary, Server Streaming, Client Streaming & Bi-Directional Streaming API",
        "Practice your learning with Exercises & Solutions",
        "Implement advanced concepts such as Error Handling, Deadlines & SSL Security",
        "Implement a full CRUD API on top of MongoDB",
        "Get pointers to expand your learning journey and get inspired by real world gRPC services"
      ],
      "course_content": {
        "gRPC Course Overview": [
          "gRPC Introduction",
          "Course Structure",
          "About your instructor",
          "Important Message",
          "Prerequisites"
        ],
        "Code Download": [
          "Code Download"
        ],
        "[Theory] gRPC Internals Deep Dive": [
          "Why this section?",
          "Protocol Buffers & Language Interoperability",
          "HTTP/2",
          "4 Types of gRPC APIs",
          "Scalability in gRPC",
          "Security in gRPC (SSL)",
          "gRPC vs REST",
          "Section Summary – why use gRPC",
          "Quiz on GRPC"
        ],
        "[Hands-On] gRPC Project Overview & Setup": [
          "Java Gradle Project Setup",
          "Dummy Service Code Generation",
          "Server Setup Boilerplate Code",
          "Client Setup Boilerplate Code"
        ],
        "[Hands-On] gRPC Unary": [
          "Greet API Definition",
          "Unary API Server Implementation",
          "Unary API Client Implementation",
          "[Exercise] Sum API",
          "[Solution] Sum API"
        ],
        "[Hands-On] gRPC Server Streaming": [
          "GreetManyTimes API Definition",
          "Server Streaming API Server Implementation",
          "Server Streaming API Client Implementation",
          "[Exercise] Primes API",
          "[Solution] Primes API"
        ],
        "[Hands-On] gRPC Client Streaming": [
          "LongGreet API Definition",
          "Client Streaming API Server Implementation",
          "Client Streaming API Client Implementation - Part 1 - Refactoring",
          "[Exercise] Avg API",
          "[Solution] Avg API"
        ],
        "[Hands-On] gRPC Bi-Directional Streaming": [
          "GreetEveryone API Definition",
          "Bi-Directional Streaming API Server Implementation",
          "Bi-Directional Streaming API Client Implementation",
          "[Exercise] Max API",
          "[Solution] Max API"
        ],
        "[Hands-On] gRPC Advanced Features Deep Dive": [
          "[Hands-On] Errors implementation",
          "[Hands-On] Deadlines",
          "[Hands-On] SSL Security",
          "gRPC Reflection & Evans CLI"
        ],
        "[Hands-On] CRUD API with MongoDB": [
          "Install Docker",
          "Docker-Compose setup",
          "Blog Service Java Setup",
          "CreateBlog Server",
          "CreateBlog Client",
          "ReadBlog Server",
          "ReadBlog Client",
          "UpdateBlog Server",
          "UpdateBlog Client",
          "ListBlog Server",
          "ListBlog Client",
          "DeleteBlog Server",
          "DeleteBlog Client"
        ]
      },
      "requirements": [
        "Good Understanding of Java 8 Programming Language",
        "Good Understanding of Protocol Buffers"
      ],
      "description": "gRPC is a new and modern framework for building scalable, modern and fast API. It is leveraged by many top tech companies such as Google, Square & Netflix and enables programmers to write micro-services in any language they want while keeping the ability to easily create communications between these services. It relies on Protocol Buffers for the transport mechanism and Service Definition language.\n\nIn this course, we are going to explore in depth, with hands-on lectures, all the aspects to get started with gRPC\n\nThis course is hands-on and you will implement two services: Greet and a Calculator Service\nIn just a few hours, you will know everything you need to know to write your .proto files, generate code in your Favourite Programming, and implement your services, servers and client in Java. There will be plenty of hands-on lectures and exercises for you to practice your newly acquired skills.\nIt's time to say goodbye to slow and clunky REST API, and opt-in for a better API framework\n\ngRPC Java Master Class is the best way to get a great overview of all the possibilities offered by gRPC with your favourite language\n> Learn the gRPC theory to understand how gRPC works\n> Compare gRPC and REST API paradigm\n> Write your gRPC service definition in .proto files\n> Generate Server & Client Code in Java using the Gradle gRPC plugin\n> Implement Unary, Server Streaming, Client Streaming & Bi-Directional Streaming API\n> Practice your learning with Exercises & Solutions\n> Implement advanced concepts such as Error Handling, Deadlines & SSL Security\n> Implement a full CRUD API on top of MongoDB\n> Get pointers to expand your learning journey and get inspired by real world gRPC services\nNote: This course expects you have some preliminary knowledge about Protocol Buffers.\n\n\nSection outline:\ngRPC Course Overview: Get an understand of the course objectives, how the course is structured, download the course code and get ready!\n[Theory] gRPC Internals Deep Dive: Learn how gRPC works behind the scenes. Learn about HTTP/2, Protocol Buffers efficiencies, and the differences of gRPC and REST.\n[Hands-On] gRPC Project Overview & Setup: Setup your project using Gradle and learn how to trigger code generation\n[Hands-On] gRPC Unary: API description & implementation\n[Hands-On] gRPC Server Streaming: API description & implementation\n[Hands-On] gRPC Client Streaming: API description & implementation\n[Hands-On] gRPC Bi-Directional Streaming: API description & implementation\n[Hands-On] gRPC Advanced Features Deep Dive: Advanced features such as Error Handling, Deadlines, SSL Security.\nNext Steps: Some useful real-world links & where to take your learning from here\n\n\nInstructor\nMy name is Clément Jean, and I'll be your instructor in this course. I teach about Protocol Buffers and gRPC with my focus always on helping my students improve their professional proficiencies. I am also the author of some of the most highly-rated & best-selling courses.\nWith development being a widely accepted and pursued career, I've decided it's time for students to properly learn about gRPC . So, let’s kick start the course! You are in good hands!\n\n\nThis Course Also Comes With:\nLifetime Access to All Future Updates\nA responsive instructor in the Q&A Section\nLinks to interesting articles, and lots of good code to base your next template onto\nUdemy Certificate of Completion Ready for Download\nA 30 Day \"No Questions Asked\" Money Back Guarantee!\nI hope to see you inside the course!",
      "target_audience": [
        "Developers who want to understand how to write gRPC Services and Clients in Java",
        "Architects who want to understand how gRPC works and the concepts behind the different types of API"
      ]
    },
    {
      "title": "Complete SDLC : Software Development Life Cycle SDLC (2025)",
      "url": "https://www.udemy.com/course/complete-sdlc-software-development-life-cycle-sdlc/",
      "bio": "A Comprehensive Guide to SDLC : Learn SDLC : Software Development Life Cycle via Real life Case Studies",
      "objectives": [
        "What is SDLC | How SDLC is implemented in Real life software IT projects | SDLC concepts with real life case studies",
        "How to conduct SDLC Phases successfully | SDLC Project Cost Estimation | SDLC Project Deliverables",
        "Best Practices used in each SDLC Phase | Challenges of each SDLC Phase in detail, How to overcome common SDLC challenges",
        "Complete case study of SDLC"
      ],
      "course_content": {
        "Introduction": [
          "Introduction - What is this Course About",
          "Why Only this SDLC Course?",
          "How to take up this SDLC Course?",
          "Case Study Overview"
        ],
        "Software Development": [
          "Introduction",
          "Software Development",
          "Software Engineering",
          "Project Management",
          "How the Software Development Project Ideas Emerges",
          "After Software Project Idea Finalize",
          "Standards and Certifications of Service based Companies"
        ],
        "Types of Software Development": [
          "Introduction to Types of Software Development",
          "Front-End Development",
          "Back-End Development",
          "API Development",
          "Data Science Development",
          "Mobile Application Development",
          "Desktop Development",
          "Cloud Computing Development",
          "Full Stack Development",
          "Game Development",
          "Embedded System Development",
          "Progressive Web App Development PWA",
          "Open Source Software Development",
          "Enterprise Software Development",
          "E-Commerce Application Development",
          "Database Development",
          "Artificial Intelligence (AI) & Machine Learning (ML) Development",
          "Case Study",
          "Case Study Analysis",
          "Quiz"
        ],
        "Software Development Life Cycle-SDLC": [
          "Introduction",
          "Software Development Life Cycle SDLC",
          "Quiz"
        ],
        "Analysis and Planning Phase of SDLC": [
          "Analysis and Planning Phase of SDLC",
          "Challenges of Analysis and Planning phase in SDLC Process",
          "Sample SDLC Timelines / Sample Software Project Timelines and Schedule",
          "Sample SOW - Statement of Work Document Walk-through",
          "Quiz"
        ],
        "Cost Estimation / Budget Estimation": [
          "Introduction to Cost Estimation",
          "Bottom-Up Cost Estimation Method",
          "Top-down Cost Estimation Method",
          "Three Point Cost Estimation Method",
          "Analogous Cost Estimation Method",
          "Parametric Cost Estimation Method"
        ],
        "Requirement Gathering Phase of SDLC": [
          "Requirement Gathering Phase of SDLC",
          "Challenges of Requirement Gathering Phase in SDLC Process",
          "Software's and Tools for Requirements Gathering phase",
          "SRS Document Overview | Software Requirement Specification Overview",
          "Analysis Planning VS Requirement Gathering Phase"
        ],
        "UML - Unified Modelling Language": [
          "Introduction",
          "Why UML",
          "What is UML",
          "Different Types of UML Diagrams",
          "Tools for designing UML Diagrams",
          "Class Diagram of UML",
          "Class Diagram Demonstration- Example",
          "Object Diagram of UML",
          "Object Diagram Demonstration",
          "Component Diagram of UML",
          "Component Diagram Demonstration",
          "Package Diagram of UML",
          "Package Diagram Demonstration",
          "Deployment Diagram of UML",
          "Deployment Diagram Demonstration",
          "Composite Structure Diagram of UML",
          "Composite Structure Diagram Demonstration",
          "Profile Diagram of UML",
          "Profile Diagram Demonstration",
          "Use Case Diagram of UML",
          "Usecase Diagram Demonstration",
          "Activity Diagram of UML",
          "Activity Diagram Demonstration",
          "State Machine Diagram of UML",
          "State Machine Diagram Demonstration",
          "Sequence Diagram of UML",
          "Sequence Diagram Demonstration",
          "Communication Diagram of UML",
          "Communication Diagram Demonstration",
          "Timing Diagram of UML",
          "Timing Diagram Demonstration",
          "Interaction Overview Diagram of UML",
          "Interaction Overview Diagram Demonstration",
          "Quiz"
        ],
        "Design and Prototyping Phase of SDLC": [
          "Introduction",
          "Design and Prototyping Phase of SDLC",
          "Why Design and prototyping phase is so important in SDLC",
          "Challenges of Design and prototyping phase",
          "High Level Design Diagram",
          "Data Flow Diagram",
          "Low Level Design Diagram",
          "UI UX - User Interface VS User Experience",
          "Wireframe Diagrams",
          "High Fidelity and Low Fidelity Diagrams",
          "Database Schema Design Diagram",
          "Quiz"
        ],
        "Software Design and Software Architecture": [
          "Software Architecture",
          "Monolithic Architecture Or Monolith Architecture",
          "Layered Software Architecture",
          "Tiered Software Architecture",
          "Microservices Software Architecture",
          "Serverless Architecture",
          "Event Driven Architecture",
          "Software Design",
          "SOLID Principles",
          "Software Design Principles",
          "Software Design Patterns",
          "4+1 Architectural View Model"
        ]
      },
      "requirements": [
        "No Prerequisite as such .We will learn everything from scratch"
      ],
      "description": "This is the first-ever comprehensive SDLC course that covers almost everything that anyone aspiring to learn and progress in the Software field can take up and become as proficient as someone with nearly 10+ years of experience. This course is the gist of my entire decades of experience crafted in 14+ hours of content. Whatever I learned during my career concerning the SDLC Software development Life cycle I have included in this course. No boasting at all, Look at the course curriculum you will get the idea. In these 14 + Hours we are going to learn all the below concepts from scratch with a Real-life Case Study\n\n\nSoftware Development?\nWhat is Software Project Management?\nWhat is software engineering?\nHow do software project ideas emerge?\nAfter the Project Idea is finalized what all things happen?\nStandards and Certifications of Service based companies should follow during SDLC\nTypes of Software Development\nIntroduction to Types of Software Development\nFront End Development\nBack-End Development\nAPI Development\nData Science\nMobile Development\nDesktop Development\nCloud Computing Development\nFull Stack development\nVideo game development\nEmbedded System Development\nProgressive web app development\nOpen source development\nE-commerce App development\nEnterprise App Development\nDatabase Development\nArtificial intelligence and machine learning development\nHow all these software development can be used in a real-life Case Study\nAnalysis of Case Study\nSoftware Development Life Cycle SDLC\nWhat is SDLC Software Development Life Cycle\nSDLC - Analysis and Planning Phase of SDLC\nAnalysis and Planning Phase of SDLC\nChallenges of Analysis and Planning Phase of SDLC\nSample SDLC Process Timeline and Schedule\nHow the Budget estimation will be done\nSOW Scope of Work or Statment of Work Overview\nSOW Sample Template\n\nSoftware Project Cost Estimation\nBottom Up Estimation\nTop Down Estimation\nThree-point estimation\nAnalogous Estimation\nParametric Estimation:\n\n\nSDLC - Requirement Gathering Phase\nIntroduction\nRequirement Gathering Phase of SDLC\nChallenges of the Requirement Phase of SDLC\nSRS document\nTools/Software Used in Requirement Gathering\nDifference between Analysis and planning vs. Requirement gathering\n\n\nUML Needed for SDLC\nIntroduction to UML\nWhy UML\nWhat is UML\ntype of UML Diagram\nClass Diagram\nSample Class Diagram Demonstration\nObject Diagram\nSample Object Diagram\nComponent Diagram\nSample Component Diagram\nDeployment Diagram\nSample Deployment Diagram\nPackage Diagram\nSample Package Diagram\nComposite Structure Diagram\nSample Composite Structure Diagram\nProfile Diagram\nSample Profile Diagram\nUse Case Diagram\nSample Use Case Diagram\nActivity Diagram\nSample Activity Diagram\nState Machine Diagrams final\nSample State Machine Diagram\nSequence Diagram\nSample Sequence Diagram\nCommunication Diagrams\nSample Communication Diagram\nTiming Diagram\nSample Timing Diagram\nInteraction Overview Diagram\nSample Interaction Overview Diagram\nDiagrams\n\n\nSDLC Design and Prototyping of SDLC\nIntroduction\nDesign and Prototyping of SDLC Phase\nWhy Design and prototyping is so important in SDLC Process\nChallenge of Design and Prototyping Phase in SDLC Process\nHigh-level diagrams\nData Flow Diagram\nLow-Level Diagram\nUI UX\nWireframe Diagram\nHigh Fidelity and Low Fidelity Diagram\nDatabase Schema Design Diagram\n\n\nSoftware Design and Architecture\nIntroduction\nSoftware Architecture\nArchitecture Patterns\nMonolithic Architecture\nLayered Architecture\nTiered Architecture\nMicroservices architecture\nServerless Architecture\nEvent-Driven Architecture\nSoftware Design\nSoftware Design Principle- SOLID principle\nOther software design principles\nDesign Patterns\n4+1 Architectural View\n\n\nVersion Control System\nWhat is a Version Control System\nSource Code Management\nGit Branching Strategies\nSoftware application versioning\nApplication Environments\n\n\nSDLC- Development or Implementation Phase\nDevelopment or Implementation Phase\nChallenges of the Development Phase\nCode Coverage\nDevelopers Manual\nSynchronous code and Asynchronous code\nLanguage vs Framework\n\n\nTesting in the SDLC process\nIntroduction\nTesting Phase of SDLC\nChallenges of the Testing Phase in the SDLC Process\nTesting Methods\nTesting Levels\n\n\nTypes of Testing\nFunctional Testing\nLoad Testing\nPerformance Testing\nSecurity Testing\nIntegration Testing\nUsability Testing\nCompatibility Testing\nRegression Testing\nSanity Testing\nAccessibility Testing\nUnit Testing\nSystem Testing\nUser Acceptance Testing (UAT)\nNon-functional Testing\nQA Testing\nAPI Testing\nAB Testing\nGlobalization Testing\nCompliance Testing\nExploratory Testing\nAutomation Testing\n\n\nDeployment phase of SDLC\nDeployment Phase in SDLC\nChallenges of the Deployment Process in SDLC Process\nRequest for Change(RFC) Process\nPGLS\nRetrofit/Hotfix\nMaintenance Phase of SDLC\nBusiness As Usual(BAU)\nMaintenance Phase in SDLC\nChallenges of the Maintenance Phase in the SDLC Process\nSystem Improvement Program\nSupport Process: Raise Issue, Ticket and SLAs\nKeep It Current Process\nSupport Teams Structure\n\n\nDisaster Planning\nBusiness Continuity Planning (BCP)\nDifference between Disaster planning and BCP\n\n\nSecure Software Development Life Cycle SSDLC\nWhat is SSDLC\nPrinciples of Information Security\nRisk Threat and Vulnerability\nPrinciples of Protections\nPractices of SSDLC\nOWASP Open World Application Security Project\n\n\nSDLC Models used in SDLC\nWaterfall Model\nWhat is the Waterfall Model of SDLC\nWhen and Where to Use Waterfall Model\nPros and Cons of Using the Waterfall Model\n\n\nIncremental Model\nWhat is the Incremental Model of SDLC\nWhen and where to use the Incremental Model\nPros and Cons of the Incremental Model\n\n\nIterative Model\nWhat is an iterative Model of SDLC\nWhen and Where to Use Iterative Model\nPros and Cons of Using the Iterative Model\n\n\nV model\nWhat is the V model of SDLC\nWhen and Where V model\nPros and Cons of the V model\n\n\nSpiral Model\nWhat is the Spiral Model\nWhen and Where Spiral Model\nPros and Cons of Spiral Model\n\n\nAgile Model\nTraditional vs. Agile Model\nWhat is the Agile Model of SDLC\nWhen and Where Agile Model\nPros and Cons of the Agile Model\nAgile Manifesto\nAgile Principles\n\n\nKey Agile Concepts\nMinimum Viable Product\nUser Stories\nBurndown chart\n\n\nAgile Methodologies\nSCRUM - Agile Methodology\nKANBAN - Agile Methodology\nExtreme Programming - Agile Methodology\nLean Methodology - Agile Methodology\nCrystal Agile Methodology - Agile Methodology\nFeature-Driven Development (FDD) - Agile Methodology\nRapid Application Development (RAD) - Agile Methodology\nScaled Agile Framework (SAFe) - Agile Methodology\n\n\nAll these things we will learn via the Real Life examples and case studies. All of the above things are covered in just over 14+ hours of high-quality content. This is equivalent to a book with more than a thousand pages! in a very clear and concise manner doesn't waste a single minute of your precious time!\n\n\nYou're not going to get this information in One Place Anywhere over the Web.\n\n\nAnd on top of all these, you'll get:\n\n\nClosed-captions generated by a human, not a computer! Currently, only the first few sections have closed captions but new captions are being added every week.\n\n\nOffline access: if you are traveling or have a slow connection, you can download the videos and watch them offline.\n\n\nDownloadable resource\n\n\nPREREQUISITES\n\n\nThere is no such Prerequisite for this course anybody who has an interest in learning the Software development process can take up this course. We will learn everything from scratch in this course.\n\n\n30-DAY FULL MONEY-BACK GUARANTEE\n\n\nThis course comes with a 30-day full money-back guarantee. Take the course, watch every lecture, and do the exercises, and if you are not happy for any reason, contact Udemy for a full refund within the first 30 days of your enrolment. All your money back, no questions asked.\n\n\nABOUT YOUR INSTRUCTOR\n\n\nHi! My name is Yogesh Dahake! I'm a passionate Lead Software engineer with a decade of experience and I've taught over a thousand people about software development and Coding via my course and YouTube channel.\n\n\nMy goal is to enable people not just to learn but in an Optimal, efficient, and effective way and Generate that Spark of learning. That's why my courses are simple, pragmatic, and free of clutter\n\n\nSo, what are you waiting for? Don't waste your time jumping from one tutorial to another. Enroll in the course Acquire the LIFE Changing Skill in just 14 hours\n\n\nWho this course is for:\n\n\n1. People who are starting their careers in the software industry.\n2. People who are students of Software Engineering.\n3. People who are already working in the software company.\n4. Developer, Lead, Technical Architect, Tester anybody who is directly or indirectly involved in the process of software development\n5. People who want to develop quality software\n\n\nOn a higher note,\n\n\nAnybody who has an interest in Software, From Students to Teachers, From People who are about to start their careers to Professionals in the software industry.",
      "target_audience": [
        "Beginner",
        "Intermediate",
        "Advance",
        "All People related to IT software project"
      ]
    },
    {
      "title": "NodeJS Internals and Architecture",
      "url": "https://www.udemy.com/course/nodejs-internals-and-architecture/",
      "bio": "Understand how Node works inside out to improve performance, efficiency and consistency of your backend applications",
      "objectives": [
        "NodeJS Architecture",
        "NodeJS protocols, file and socket programming internals",
        "Optimize Node JS",
        "Writing efficient code",
        "Multi-threaded Node",
        "Libuv Asynchronous IO",
        "Node Networking",
        "Node Streams",
        "C++ Addons"
      ],
      "course_content": {},
      "requirements": [
        "Backend and Operating Systems Fundamentals"
      ],
      "description": "My favorite thing in software engineering is the art of making it transparent.\n\n\nNode is one of the most popular runtimes used on backend engineering yet I feel it is the least understood. I surely felt this way at times.\n\n\nI spent months working on a course to demystify NodeJS Internals and Architecture and distilled this in this comprehensive course.\n\n\nI built this course is for the engineers who can't stand working with something opaque.\n\n\nThey love to understand what is running behind the engine.\nThey enjoy tearing apart 1 the line of code into its original 1000 lines.\nThey question why is the output of a Node program is unpredictable.\nThey want to know when does the Node process exit.\nThey want to know why Node takes so long to start in some cases.\nThey appreciate how Node works on all operating systems and would like to know how it does that.\n\n\nFor example by understanding the internals of HTTP module, you can write a backend in Node that accepts and process more requests. Every line of code you write you would think of how and when Node will process it.\n\n\nBy understanding the event loop and the different stages you can tune and re-order your code to achieve best performance and even consistent result.\n\n\nEver wrote a program in Node that fails 1% of the time while succeeds 99%? Understanding Node architecture helps you make your program predicable. As opposed to adding workaround because you don't understand. We all did that.\n\n\nIt is all about removing blockage and letting the main loop phases “breath”. When we build software the problem is we often go against the grain. Understanding where the friction is in Node allow you to work with it as oppose to against it.\n\n\nIn this course I cover the following\n- NodeJS Architecture\nI cover the various phases in the event loop and what exactly happens in each phase, how promises are just callbacks, how and when modules are loaded and their effect on performance, Node packages anatomy and more\n\n\n- Node Internals\nThis is where we go one layer deeper, how Node truly achieves asynchronous IO with libuv, and how each protocol in node is implemented. How concurrent node works on both user level threads and process level.\n\n\n- Node Optimization and Performance\nNow that we understand the internals and architecture of Node, this is where we discuss tips how to make the code runs more efficiently and more performance. And only when we exhaust all other avenues Node provides ways to extend it with C++ add-ons where JavaScript just can't no longer hold.\n\n\nThis course is for intermediate students who are familiar with Node and want to understand how it works. While not required, I recommend taking the fundamentals of operating system course as a prerequisite of this course.",
      "target_audience": [
        "Intermediate level software engineers who want to understand Node internals",
        "Backend engineers who want to run Node efficiently"
      ]
    },
    {
      "title": "Hacking with macOS - Build 18 Desktop Apps with Swift 5",
      "url": "https://www.udemy.com/course/hacking-with-macos-and-swift4/",
      "bio": "Build Amazing Desktop Apps for your Mac",
      "objectives": [
        "Place your own amazing desktop apps into the hands of thousands of people through the Mac App Store",
        "Become completely proficient in macOS app development using the latest version of Apple's language, Swift 4, along with best practices and techniques",
        "Build your own desktop apps for the Mac",
        "Broaden your coding skills by learning to program on a different Apple platform"
      ],
      "course_content": {},
      "requirements": [
        "You will need a Mac, and Xcode 10 which is a free download from the Mac App Store, and simply a desire to transform your ideas into amazing apps"
      ],
      "description": "This course is produced from the \"Hacking with macOS\" series of tutorials, which are written and authored by the award winning Swift programmer, Paul Hudson,  and these videos were made with his permission and support. You can always be guaranteed you're learning the latest and greatest Apple technologies in the Hacking with Swift tutorials. Here you learn smart, powerful, and expressive Swift 5.0, the way it was meant to be written. You learn while you make real-world desktop apps, which means you get to apply your new skills immediately and see them work in context. Hacking with Swift is one of the most popular Swift tutorial series online, which uses an approach that teaches you Swift programming incredibly quickly, and you end up with a huge library of finished projects that are yours to develop further, or ship to the Mac App Store. Paul has received high praise from the creator of the Swift language, Chris Lattner, for his outstanding method of teaching, and series of Swift tutorials. And working together with iOS developer Steve DeStefano, the Hacking with Swift series of programming training videos are simply the fastest way to learn how to code in the Apple eco-system.\n\nNote: All finished projects and source code have been update to Swift 5.2. So even though some lectures are shown using Swift 4.2, they are currently being re-recorded with the latest Swift 5.2 code - just reference the source code for any update you might need until they are ready very soon.\nCheck out all of Paul Hudson's Swift tutorials and books at HackingWithSwift - from beginner to pro, Paul will teach you to write Swift code in very little time.\nWant to learn how to build amazing desktop apps?\nWant to code your own custom buttons for the new MacBook Pro “Touch Bar”?\nThis course has all the step by step instruction you need to create awesome apps to submit to the Mac App Store. And the Mac App Store is also a great source of revenue as it only has a fraction of the number of apps that the iOS App Store has, and typically you charge more for a Mac app.\nBuilding a Mac desktop app uses the exact same Swift 5 language as iOS apps…there are differences of course from iOS, such as the macOS user interface uses windows instead of screens for an iPhone, but if your coming from iOS, the transition is seamless...an example is on iOS we use a UIImageView, and on macOS we use an NSImageView…simple right?.\nThe term \"Hacking with macOS\" means we are \"playing\" with the Swift language, and using it in unique and interesting ways.\nDesktop apps are fun to build, simply add your own unique creativity, and follow along in the lectures, and before you know it, you've created a masterpiece.....how cool is it to have your very own creation right on your prized MacBook Pro, and on thousands of other MacBook Pros?\nThis course makes use of annotations, callouts, diagrams, highlighting, and deep explanations that help make complex subject matter, much easier to grasp, and guides you along the path of the code, each step of the way.\nThis course also makes the perfect reference tool kit, to be used in conjunction with the Apple docs, so that you can go back and scrub through any of the lectures very quickly to pull out relevant code or instruction that you need, as there's no wasted chatter here, it's strictly on point with Swift 5.0 and macOS.\nSome of the topics that will be covered:\nFeaturing apps built by the award winning Swift programmer - Paul Hudson - HackingWithSwift\nBuild 18 projects - each one teaching a new aspect of macOS\nAll source code is built with the latest Swift 5.2 code\nLearn Swift by use of annotations - diagrams - highlighting - callouts\nTouch Bar - code your own custom touch bar buttons and controls\nHow to use controls - Outlets and Actions\nWindows - Controllers - Table views\nSplit view controllers - Toolbars\nWeb views\nUsing delegates and protocols\nWork with the social framework - FB - Twitter etc.\nLearn how to refactor code\nThe ins and outs of GCD\nSpriteKit and Games\nThe new UserDefaults to persist data\nAdding audio - Animations\nUsing stackView\nGrid views\nLearn how to work with JSON data in swift\nNSUndoManager - Add undo and redo to your apps\nNSDocument\nBindings - Which let you build apps with very little code\nLearn how to use Auto Layout both in code and in storyboards\nAnd a ton more!\nAll videos are recorded in HD for maximum resolution and clarity\nSome Swift programming experience is needed to be able to follow along comfortably.\nIf you think this might be too difficult for you, think again, and come code along with me in a step by step format....just add a big portion of your own unique creativity, and before you know it, you will have built many amazing apps that you can submit to the Mac App Store. See you inside the course.",
      "target_audience": [
        "This course is for the Swift developer who wants to lean how to make desktop apps with Swift 4.2 and macOS",
        "This is the perfect course if your coming from iOS as we use the same Swift 4.2 language"
      ]
    },
    {
      "title": "PLC & AC Drive with Automatic & Manual Industrial Control",
      "url": "https://www.udemy.com/course/plc-ac-drive-with-automatic-manual-industrial-control/",
      "bio": "this course will take newbies to a higher level to deal with complex PLC projects, Motor Drives ( VFD ) & Manual Control",
      "objectives": [
        "Learn everything about Basic Electrical Components ex: Relays,Contactors, etc",
        "Study Different Cases for Power Flow and Power Conversion",
        "Have a great idea on different kinds of Motors and Generators",
        "Control any parameter for Induction Motors with Variable Speed Drive (VSD)",
        "Design simple and complex Manually Controlled Circuits using EKTS software",
        "Learn everything about PLCs internally and externally",
        "Be familiar with different PLC languages ex: LADDER, FBD and STL using Step7 software",
        "Be able to deal with Hardware Configurations and Wiring Diagrams",
        "Be able to write codes for simple and complex Automation Systems",
        "Be able to deal with any Industrial Automation System"
      ],
      "course_content": {},
      "requirements": [
        "No prior experience is needed",
        "Be ready to try the applications illustrated by yourself to achieve the maximum benefit from this course"
      ],
      "description": "Hello Our Friend!\n- Looking to enhance your career in Industrial Automation  track ?\n>> If your answer is a big YES, then you're definitely in the right place.\n-->  Actually this is the course that I wish I had at the beginning of my career. This course is the first step for anyone who wish to be #1 in this field.\n\n\nWhy this course is Powerful and Unique ?\nthis course is the first one on udemy platform and on most of educational platforms which collect all of these huge and practical information about Manual and  Automatic Control.\nSince your legs (or your mouse by the way) lead you to this course, so you might have heard these fascinating names:\n1 )   PLC in Automation Control >>  learning different languages for  programming your PLC like LADDER, FBD and STL. Also how to deal with SIEMENS devices like Simatic S7 1200 and S7 300 and an overview on their wiring process. And working on illustrative programs like LogixPro, Simatic Manafer Step7and YASKAWA for ac drives.\n\n\n2)  Basics of Electricity >>  a great explanation for Power Factor and how to handle its variation, ATS (Automatic Transfer Switches) and how to include it in your circuits, solving problems in 3 phase system using Phase Sequence devices.\n\n\n3) Industrial Machines >> dealing with different kinds of machines like Induction Motors, Synchronous Machines, DC Motors and how to measure their speed with Encoders and Tachometers.\n\n\n4) Sensors >> how to deal with different sensors Digital and Analog and to write equations in your code to get the physical values in the outside environment from your sensors.\n\n\n4)   Manual Control >>  learn to design different kinds of controlling circuits related to the field using EKTS software.\n\n\n\n5)    Motor Drives >> A drive is the electronic device that harnesses and controls the electrical energy sent to the motor. The drive feeds electricity into the motor in varying amounts and at varying frequencies, thereby indirectly controlling the motor’s speed and torque.\n\n\n** At this course :\nThese tracks would be like a piece of cake to you.\nWe'll take you from the Scratch to a HIGHER level of Designing and Analysis.\nYou'll learn with funny exciting method in order to understand without being bored.\n**  All you need is an open mind and the passion to be successful!\n** My help is always available to you if you get stuck or have a question\n** Nothing is kept secret. I reveal all I know ...\n** New lectures will be added to the course constantly - at no extra cost to you!\n# This is a course that will continue to grow and grow ..\n--> So don't hesitate and click \" Buy Now \" button so you can begin on the right path!",
      "target_audience": [
        "Electrical Engineering Students",
        "Newbies to PLC Programming",
        "Newbies to Manual Controlling Circuits",
        "Anyone who wants to be familiar with Industrial Automation and Control"
      ]
    },
    {
      "title": "Siemens TIA Portal: PLC Ladder Logic & WinCC HMI Design",
      "url": "https://www.udemy.com/course/siemens-tia-portal-plc-ladder-logic-wincc-hmi-design/",
      "bio": "A hands on, project based course on HMI Design and PLC Programming in Ladder Logic using Siemens TIA Portal",
      "objectives": [
        "The basics of Siemens TIA Portal",
        "How to program a PLC using Ladder Logic",
        "The fundamentals of WinCC HMI/SCADA Design",
        "How to simulate your PLC code and HMI Designs",
        "Hands on Project: Together we will design a control system, program it, design the HMI, and simulate the functionality of the system."
      ],
      "course_content": {},
      "requirements": [
        "If you are an absolute beginner, it is recommended that you take my intoductory course \"Ladder Logic PLC Programming for Beginners\" before doing this course, but it is not mandatory.",
        "Access to TIA portal is advantageous if you would like to write the code with me."
      ],
      "description": "Unlock the realm of Ladder Logic PLC programming mastery with this comprehensive course!\n\n\nCheck out the free preview of Lecture 67 of this course to get a preview of the simulated system we will be building together!!\n\n\nLed by an Electrical Engineer with extensive experience, this course is designed to empower you with the essential skills needed to emerge as a proficient PLC Ladder Logic Developer, specializing in Siemens technologies and TIA Portal.\nCourse Highlights:\nPLC & HMI Setup in TIA Portal: Acquire hands-on experience in setting up PLC and HMI hardware configurations using Siemens TIA Portal.\nLadder Logic PLC Programming: Dive into the intricacies of Ladder Logic programming, mastering the art of crafting efficient and robust code for industrial control systems.\nWinCC HMI Design: Unleash your creativity in Human Machine Interface (HMI) design through in-depth exploration of WinCC, ensuring a seamless interface for control systems.\nSimulation & Debugging: Sharpen your troubleshooting skills with simulated environments, enabling you to identify and rectify potential issues efficiently.\nGuided Project Approach: Embark on a project-based learning journey, constructing a real-world control system without the need for physical hardware. This simulated project encompasses:\nScoping & Functional Design Specification: Define the requirements and functionality of the control system.\nInput/Output Definition & Tagging: Gain proficiency in defining inputs/outputs and effective tagging for streamlined operation.\nLadder Logic PLC Code Writing: Translate design concepts into functional Ladder Logic PLC code.\nHMI System Design: Craft an intuitive Human Machine Interface for seamless user interaction.\nComplete Simulation & Virtual Commissioning: Validate your system through comprehensive simulation and virtual commissioning.\nUpon completion, you'll possess the skills required to embark on a fulfilling career in Control, Automation, or PLC programming. The course utilizes Siemens TIA Portal as the development environment, and you are encouraged actively participate in the development process by writing your own code in parallel with me. Notably, most of the skills acquired are transferable to various PLC brands, broadening your professional versatility.\nEnroll now and elevate your expertise in PLC programming, Siemens technology, and HMI design!\n\n\nCheck out the free preview of Lecture 67 of this course to get a preview of the simulated system we will be building together!!",
      "target_audience": [
        "Electrical Engineers",
        "Automation Engineers",
        "Engineering Students",
        "Control System Engineers",
        "PLC Programmers",
        "Anybody looking to get started with PLC programming",
        "Anybody interested in HMI Design",
        "Anybody who wants to learn ladder logic",
        "Anybody who is interested in learning Siemens TIA Portal"
      ]
    },
    {
      "title": "SOLID Principles of Object Oriented Design and Architecture",
      "url": "https://www.udemy.com/course/solid-principles-object-oriented-design-architecture/",
      "bio": "Design clean, extensible and maintainable systems using SOLID principles",
      "objectives": [
        "Discover how SOLID principles promote clean and maintainable software architecture",
        "Learn the fundamental theory of SOLID principles",
        "Master each SOLID principle through real-world, non-trivial examples",
        "Understand the architectural trade-offs associated with SOLID principles",
        "Go beyond just writing code and design systems that will stand the test of time",
        "Discover the history of SOLID principles and get to know the people behind them"
      ],
      "course_content": {
        "Introduction": [
          "History of SOLID",
          "Explanation of Udemy System"
        ],
        "Single Responsibility Principle": [
          "Simplistic Definition",
          "Definition Through Conjunction \"AND\"",
          "Practical Definition Through Change",
          "UML Class Diagram",
          "Simple Example: Employee",
          "Simple Example: AuthManager",
          "Advanced Example: KaraokePlayer",
          "Single Responsibility and Reusability",
          "Single Responsibility Principle Summary"
        ],
        "Abstractions": [
          "Abstractions in Digital World",
          "Abstractions in Object-Oriented Design",
          "Abstractions in This Course"
        ],
        "Open Closed Principle": [
          "Open Closed Confusion",
          "Historical Definition",
          "Current Definition",
          "Example: Salary Calculator",
          "Example: Karaoke Application",
          "Open Closed Principle Summary"
        ],
        "Liskov Substitution Principle": [
          "Intuitive Example: Rectangle and Square",
          "Definition and History",
          "Liskov Substitution Principle Rules",
          "Method Signature Rules",
          "Method Pre- and Post-Condition Rules",
          "Class Property Rules",
          "Example: Rectangle and Square",
          "Liskov Substitution Principle Summary"
        ],
        "Interface Segregation Principle": [
          "Definition",
          "Example: Publish-Subscribe Architectural Pattern",
          "Example: Big Callback Interface",
          "Interface Segregation Principle Summary"
        ],
        "Dependency Inversion Principle": [
          "Definition",
          "Example: Open Closed Principle",
          "Example: Callback",
          "Example: Inter-Dependent Modules",
          "Dependency Inversion Principle Summary"
        ],
        "Summary": [
          "SOLID Summary",
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "Experience with any object-oriented programming language"
      ],
      "description": "SOLID principles are fundamental rules of software architecture, helping developers craft clean and maintainable systems. These principles are grounded in over 40 years of academic research and practical experience, making them essential for developers, particularly those in senior positions.\nSOLID is an acronym that stands for five principles:\nSingle Responsibility Principle\nOpen Closed Principle\nLiskov Substitution Principle\nInterface Segregation Principle\nDependency Inversion Principle\nIn this course, you will discover the full scope and power of the SOLID principles and learn to apply them in your projects. I'll explain the concepts in simple words, with the help of real-world examples, so you'll get the theory and see how these principles work in real designs.\nAfter completing this course, you'll become not just a programmer, but a software designer. You'll be able to incorporate longer-term architectural considerations into your code and know how to identify and rectify design mistakes. The insights that you'll acquire here will also make your programming job much more enjoyable!\nThroughout the course, I will share interesting historical facts about the people behind the SOLID principles and the evolution of software architecture. These stories will enrich the technical content, adding depth and context to your learning experience.\nSo, I invite you to join me on this exciting journey into the world of SOLID principles of Object Oriented Design and Architecture!",
      "target_audience": [
        "Developers who want to improve their software design and architecture skills"
      ]
    },
    {
      "title": "Monorepos - A Beginner's Guide",
      "url": "https://www.udemy.com/course/monorepos-a-beginners-guide/",
      "bio": "Start building your projects with Monorepos today",
      "objectives": [
        "Monorepo",
        "JavaScript application architecture",
        "Creating multiple JavaScript applications in a single repository",
        "Yarn workspaces",
        "NPM workspaces",
        "PNPM workspaces",
        "Lerna",
        "Dependency Management"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "What is a Monorepo?",
          "Set up your development environment",
          "Resources"
        ],
        "Basic principles": [
          "Module resolution with Node.JS",
          "Module resolving",
          "The node_modules trick",
          ".gitignore",
          "Resources"
        ],
        "Linking": [
          "What is linking?",
          "Linking your packages",
          "Resources"
        ],
        "Workspaces": [
          "What are workspaces?",
          "Defining your packages",
          "Hoisting",
          "Scripts",
          "No more cd",
          "Resources"
        ],
        "Yarn vs NPM vs PNPM": [
          "Other package managers",
          "NPM",
          "PNPM",
          "NX & Turborepo"
        ],
        "Conclusion": [
          "BONUS: Managing & publishing packages with Lerna",
          "Conclusion",
          "Resources"
        ]
      },
      "requirements": [
        "JavaScript fundamentals"
      ],
      "description": "Updated: July 2022\n\n\nHave you ever wondered how large companies and open source libraries manage their ever-expanding codebases? Monorepos are one the most popular development strategies for reducing duplication, keeping product dependencies up to date and publishing all of your updates simultaneously.\n\n\nMonorepos are fast becoming the most popular way to manage large projects by giving developers the ability to manage the many parts independently, allowing for a much better development experience than managing multiple repositories or slowing down your development pipeline with a large monolithic application.\n\n\nThis course will get you started on learning what a Monorepo is, how they work in a JavaScript ecosystem and which tools are available to get your new project up and running. You'll learn the core concepts around monorepos and how they can be managed using multiple tooling options.\n\n\nYou will learn:\nWhat is a monorepo\nHow to set up a basic monorepo\nHow to use advanced features to enhance your monorepo\nUsing workspaces to create the best setup\nWhat tools are available and how are they different?\nA comparison of Yarn, NPM and PNPM, including a conversation about other tools like NX\nBonus content: Using Lerna to manage your versions and publish your library\n\n\nTake your project to the next level and make it easier for your team to contribute. Enrol today to get started.",
      "target_audience": [
        "JavaScript library and application developers",
        "JavaScript Open Source library maintainers"
      ]
    },
    {
      "title": "Introduction to Automata Theory, Languages and Computation",
      "url": "https://www.udemy.com/course/introduction-to-automata-theory-languages-and-computation/",
      "bio": "Theory of computation, Automata Theory, Formal Language and Automata Theory",
      "objectives": [
        "Understand the basics of Automata Theory, Languages and its need",
        "Understand the working of Finite Automata, Push Down Automata and Turing Machine",
        "Able to solve problems using Finite Automata, Push Down Automata and Turing Machine",
        "Able to recognize the relationship between various Automata",
        "Understand the need for proving various equivalence between Automata"
      ],
      "course_content": {
        "Introduction to Automata Theory, Languages and Computation": [
          "Introduction to this course",
          "Introduction to Automata - Languages - Chomsky Hierarchy",
          "Formal Languages: Strings, Languages",
          "Chomsky Hierarchy",
          "Introduction"
        ],
        "Introduction to Finite Automata": [
          "Introduction to Finite Automata",
          "DFA and NFA",
          "DFA - Extended Transition Function and Language Acceptance",
          "NFA - Extended Transition Function and Language Acceptance",
          "Examples of DFA and NFA - language of strings",
          "Example DFA for complement of any language",
          "Finite Automaton with €- moves",
          "Finite Representation : Regular Expressions (RE)",
          "Pumping Lemma for RE",
          "Finite Automata"
        ],
        "L= { w over {0,1} | w is a Binary String Divisible by  } - 3,4,5": [
          "L= { w over {0,1} | w is a Binary String Divisible by  3}",
          "L= { w over {0,1} | w is a Binary String Divisible by  4}",
          "L= { w over {0,1} | w is a Binary String Divisible by  5}"
        ],
        "Equivalence among Finite Automata": [
          "Equivalence of NFA, DFA, NFA with €- moves and RE",
          "Working and examples for Subset construction Method",
          "NFA to DFA using Lazy subset construction Method",
          "Thomson's Construction Method for RE to Ꜫ-NFA",
          "Regular Expression to DFA",
          "Solved Examples for RE to DFA",
          "Minimization of DFA",
          "Epsilon NFA to NFA",
          "DFA to RE (Formula Method)",
          "Solved Examples for DFA to RE (Formula Method)",
          "Solved Examples for DFA to RE 3 states (Formula method)",
          "DFA to RE (State Elimination Method)",
          "Finite Automata - Example 1 - Scenario Question",
          "Finite Automata - Example 2 - Scenario based question",
          "Finite Automata - Example 3 - Scenario based question for DFA construction",
          "Equivalence of Finite Automata"
        ],
        "Automata With Output": [
          "Introduction to Moore and Mealy Machine",
          "Moore machine Example and Three ways of representation",
          "Mealy machine Example and Three ways of representation",
          "Moore Machine to Mealy Machine",
          "Mealy machine to Moore machine"
        ],
        "Context Free Garmmar": [
          "Introduction, Types of Grammar and Representation",
          "Context Free Grammar (CFG) and Languages",
          "Example 1: CFG construction",
          "Example 2: CFG construction",
          "Example 3: CFG construction",
          "Derivation, Parse tree and Ambiguity",
          "Simplification of CFG - Elimination of Useless Symbols",
          "Simplification of CFG - Elimination of Null productions",
          "Simplification of CFG - Elimination of Unit productions",
          "CFG to Chomsky Normal Form (CNF)",
          "Scenario based example for CNF",
          "Solved Examples - CFG to CNF",
          "CFG to Greibach Normal form",
          "Solved Examples - CFG to GNF",
          "Solved Examples - CNF to GNF",
          "Scenario GNF",
          "Example 1 - Scenario based question for CNF and GNF",
          "Context Free Grammar"
        ],
        "Push Down Automata": [
          "Introduction to Push Down Automata",
          "Problem in PDA {a^nb^n/n>1}",
          "Problem in PDA {a^n b^ m/n,m>=1} two problems (n>m) and (m>n)",
          "Problem in PDA { WCW^R/ w={a,b}*}",
          "Non-Deterministic PDA {Palindrome of a string}",
          "CFG (Context Free Grammar) to PDA (Push Down Automata)",
          "PDA (Push Down Automata) to CFG (Context Free Grammar)",
          "Pumping Lemma for CFG",
          "Scenario based question in CFG and PDA",
          "Push Down Automata"
        ],
        "Properties of Regular Language and Context Free Language": [
          "Closure Properties of Regular Language",
          "Closure Properties of Context Free Language"
        ],
        "Turing Machine": [
          "Introduction to Turing Machine, Instantaneous Description",
          "Turing Machine Representations",
          "Turing Machine for Regular Language",
          "Turing Machine for Context Free Language",
          "TM for L={a^n b^n c^n / n>=0}",
          "TM for palindrome of a string over alphabet a,b",
          "TM for proper subtraction",
          "TM for Multiplication",
          "Modifications of TM",
          "Simulation of Turing Machine",
          "Turing Machine"
        ],
        "Extra solved problems in Finite Automata, Push Down Automata and Turing Machine": [
          "Example 1 : Regular Language - construction of DFA, PDA and TM",
          "Example 2 : Context Free Language - Construction of PDA and TM",
          "Example 3 : Turing Machine problem",
          "Example 4 : Turing Machine for 1's Complement",
          "Example 5 : scenario based question in Turing Machine",
          "Example 6 : scenario based question in Turing Machine",
          "Example 7 : scenario based question in Turing Machine",
          "Example 8 : scenario based question in PDA and CFG"
        ]
      },
      "requirements": [
        "No prerequisites are there for this course. Students can listen to the lectures to understand Automata Theory concepts from base."
      ],
      "description": "The aim of this course “Introduction to Automata Theory, Languages and Computation” is to give a detailed working explanation regarding each Mathematical model, its corresponding languages, and their provable equivalence. “Theory of Computation” has three major subdivisions namely\n1) Automata Theory\n2) Computability Theory\n3) Complexity Theory\nThe automata theory deals with some Mathematical models that perform some operations automatically like programming machines. There are four main Mathematical models namely, Finite Automata(FA), Push Down Automata(PDA), Linear Bound Automata(LBA), and Turing Machine(TM). Each Mathematical model differs based on its memory units as FA has no external memory unit, PDA has stack as a memory unit, LBA has finite length tape as a memory unit and TM has infinite tape as a memory unit.\nBased on the limitations in the memory unit each model solves a limited set of problems only. The set of problems solved by each model is grouped as languages accepted by the model. The problems solved by Finite Automata are called Regular Language and its corresponding language representation is called Regular Grammar. The language accepted by Push Down Automata is called Context Free Language, the language accepted by Linear Bound Automata is called Context Sensitive Language, and the language accepted by Turing Machine is called Un-Restricted language since Turing machines have unlimited memory and random access to the memory unit.\nTuring machines can be equated to modern computers, it can solve any problem that is solvable by computers. Computability theory deals with verifying whether the problem is solvable or not and If it is solvable complexity theory deals with the algorithmic complexity of problems that are solvable by Turing Machine.\nThis course mainly deals with automata theory (Mathematical Models) and its languages.",
      "target_audience": [
        "Computer science students",
        "Students preparing for Gate exams",
        "Anyone planning for Government Exams in Computer Science base",
        "Students interested in understanding the basic working of Models"
      ]
    },
    {
      "title": "Algorithms for Job Interviews and Competitive Programming",
      "url": "https://www.udemy.com/course/algorithms-for-job-interviews-and-competitive-programming/",
      "bio": "Quickly understand the most important Algorithms and learn how to use them to solve real Programming Problems.",
      "objectives": [
        "Find efficient solutions to algorithmic programming problems.",
        "Analyse why code runs slowly and significantly improve run time.",
        "Apply most important algorithms to solve real problems."
      ],
      "course_content": {
        "Setup and Introduction": [
          "Course Introduction",
          "Quick Introduction to Runtime Analysis and big-O notation",
          "Quick Introduction to C++ for Competitive Programmers",
          "Introduction Quiz"
        ],
        "Graphs I: Searching on Graphs": [
          "Introduction to Graphs (Terms and Representation)",
          "The Depth-First-Search",
          "The Breadth-First-Search",
          "Topological Sorting",
          "Graph Search Quiz"
        ],
        "Graphs II: Shortest Paths": [
          "Dijkstra's Algorithm - Part 1: Understand",
          "Dijkstra's Algorithm - Part 2: Analyse",
          "Dijkstra's Algorithm - Part 3: Implement",
          "Dijkstra's Algorithm Quiz",
          "Negative Edges: Bellman-Ford Algorithm",
          "All Distances: Floyd-Warshall Algorithm",
          "Shortest Paths Quiz"
        ],
        "Writing Faster Algorithms with Dynamic Programming": [
          "From Recursion to Memorization to Dynamic Programming",
          "The Knapsack Problem",
          "Dynamic Programming on Trees",
          "Dynamic Programming Quiz"
        ]
      },
      "requirements": [
        "Basic to advanced programming skills. Language does not matter.",
        "Basic understanding of simple data structures like arrays, lists, and sets."
      ],
      "description": "You have some programming experience and now want to take your skills to a new level? Learning algorithms and mastering algorithmic thinking is by far the most effective way of rapidly improving as a developer and problems solver.\nThat's why I will teach you the most interesting and useful algorithms in this course. (I intentionally skipped sorting algorithms as they are so over-discussed and rarely need to be implemented by yourself).\nFor each algorithm or topic, I give a concise explanation, example and implementation outline. Then it's your turn to apply the new learned algorithm to solve real problems. For that, I hand-picked tasks from programming websites. When you struggle with an issue and need help, I answer every question and provide personal feedback for your problems.\nSign up now and begin a new chapter in your programming world.",
      "target_audience": [
        "Programmers who want to step up their coding game.",
        "Coders preparing for a job interview.",
        "Beginners in the competitive programming world."
      ]
    },
    {
      "title": "Mastering OpenCV: A Practical Guide to Computer Vision",
      "url": "https://www.udemy.com/course/mastering-opencv-a-practical-guide-to-computer-vision/",
      "bio": "Explore Image Manipulations, Video Processing, and Object Detection with OpenCV",
      "objectives": [
        "Understand fundamental concepts of computer vision and OpenCV.",
        "Install and configure OpenCV on various operating systems.",
        "Perform basic image operations like reading, saving, and displaying.",
        "Manipulate image properties and handle different color spaces.",
        "Apply image filtering techniques for blurring, sharpening, and edge detection.",
        "Conduct morphological image operations such as erosion and dilation.",
        "Implement image thresholding techniques for image segmentation.",
        "Understand and apply video processing to read and write videos.",
        "Develop skills in real-time video handling using webcam feeds.",
        "Complete a project on object detection using learned OpenCV skills."
      ],
      "course_content": {
        "Introduction to Computer Vision": [
          "Course Outline",
          "Overview of Computer Vision Concepts",
          "Applications of Computer Vision"
        ],
        "Getting Started with OpenCV": [
          "Installation and setup",
          "Reading Images",
          "Image Attributes and Matrix Representation",
          "Displaying and Working with Color images",
          "Converting Color spaces and Channel splitting",
          "Saving images"
        ],
        "Basic Image Manipulations": [
          "Accessing and Manipulating image pixels",
          "Image Resizing",
          "Image Cropping",
          "Image Flipping",
          "Image Annotations"
        ],
        "Working with Videos": [
          "Reading and Writing videos",
          "Accessing the camera"
        ],
        "Basic Image Enhancements": [
          "Arithmetic Operations on Images",
          "Image Filtering (Blur, Sharpening and Edge detection)",
          "Morphological Operations (Erosion, Dilation, Opening, Closing)"
        ],
        "Image Thresholding": [
          "Overview of Image Thresholding",
          "Image Thresholding",
          "Finding and drawing contours"
        ],
        "Image Features and Alignment": [
          "Image Alignment",
          "Creating Panoramas using Image Stitching"
        ],
        "Project: Object Detection": [
          "Project Description",
          "Project Implementation"
        ]
      },
      "requirements": [
        "Master basic operations in OpenCV like image reading, writing, and displaying.",
        "Apply advanced image manipulations including resizing, cropping, and flipping.",
        "Utilize image filtering for enhancements and edge detection in images.",
        "Perform morphological transformations like erosion, dilation, opening, and closing.",
        "Implement various image thresholding techniques for effective segmentation.",
        "Understand and handle video streams from files and cameras in real-time.",
        "Explore practical applications of computer vision in various industries.",
        "Execute arithmetic operations on images to adjust brightness and contrast.",
        "Develop skills to stitch images together to create panoramas.",
        "Design and build an object detection system as a capstone project."
      ],
      "description": "Dive into the fascinating world of computer vision with our comprehensive Udemy course, \"Mastering OpenCV: A Practical Guide to Computer Vision\". This course is meticulously designed for beginners and intermediate learners aiming to harness the powerful capabilities of OpenCV, a leading library in the realm of image and video analysis. Starting with a solid introduction to basic computer vision concepts, you will learn how to set up OpenCV and begin manipulating images and videos with ease.\nYou'll explore a wide range of techniques including reading, displaying, and saving images, as well as more advanced image manipulations like resizing, cropping, flipping, and annotations. The course will also cover essential image processing operations such as filtering, morphological operations, and image thresholding to enhance and extract meaningful information from visuals.\nVenture into video processing where you'll learn to handle video inputs and outputs, and access camera feeds for real-time analysis. The course culminates in a hands-on project on object detection, where you'll apply your learned skills to solve a practical problem using image stitching and alignment techniques.\nWhether you're a student, a budding developer, or an enthusiast eager to delve into computer vision, this course will equip you with the knowledge and skills to start your journey in the dynamic field of image and video analysis with confidence. Join us to unlock the potential of computer vision and transform the way you interact with visual data.",
      "target_audience": [
        "Basic understanding of programming in Python.",
        "Access to a computer with internet connection.",
        "Ability to install software (instructions provided).",
        "No prior experience in OpenCV required.",
        "Enthusiasm for learning new technology and computer vision."
      ]
    },
    {
      "title": "Requirements Engineering: Software Engineering",
      "url": "https://www.udemy.com/course/requirements-software-engineering/",
      "bio": "Everything you need to know about software requirements: elicitation, analysis, documentation, validation and management",
      "objectives": [
        "Understand the need for requirements for software systems.",
        "Learn different types of requirements: functional, non-functional, system and process requirements",
        "Understand the requirements engineering processes.",
        "Learn different techniques to derived and elicit requirements",
        "Discuss requirements analyses and conceptual modeling",
        "Explain how requirements are classified",
        "Explain various techniques to document the requirements",
        "Overview software requirements verification and validation",
        "Provide an overview of requirements change management"
      ],
      "course_content": {
        "Software Engineering Introduction": [
          "Software Engineering Introduction",
          "Why Learn Software Engineering?",
          "What is Software Engineering?",
          "Software Engineering Introduction Quiz"
        ],
        "Introduction to Requirements Engineering": [
          "Requirements Engineering - Introduction",
          "Definition of a Software Requirement",
          "Product and Process Requirement",
          "Functional and Non-Functional Requirements",
          "Non-Fuctional Requirements",
          "More Non-Functional Requirements",
          "Emergent Properties",
          "Quantifiable Attributes",
          "Software and System Requirements",
          "Introduction to Requirements Engineering Quiz"
        ],
        "Requirements Process": [
          "Process Models",
          "Process Actors",
          "Requirements Process Support and Management",
          "Process Quality and Improvement",
          "Requirements Process Quiz"
        ],
        "Requirements Elicitation": [
          "Requirements Elicitation - Introduction",
          "Issues and Problems in Requirements Elicitation",
          "Requirements Sources",
          "Requirements Elicitation Techniques",
          "Brainstorming",
          "Interview",
          "Facilitated Workshops",
          "Focus Groups",
          "Joint Application Development (JAD)",
          "Prototypes",
          "Benchmarking",
          "Persona",
          "Scenarios and Use cases",
          "User Story",
          "Questionnaires and Surveys",
          "Role-playing and Viewpoints",
          "Document Analysis",
          "Observation",
          "Ethnography",
          "When to Stop Eliciting Requirements",
          "Requirements Elicitation Quiz"
        ],
        "Requirements Analysis": [
          "Requirements Analysis - Introduction",
          "Requirements Classification",
          "Architectural design and requirements allocation",
          "Requirements Negotiation",
          "Formal Analysis",
          "Derived Requirements",
          "Feature Analysis",
          "Requirements Analysis Quiz"
        ],
        "Requirements Modeling": [
          "Why Requirements Modeling?",
          "Data Flow Diagram (DFD)",
          "Class Diagram",
          "Activity Diagram",
          "State Diagram",
          "Requirements Modeling Quiz"
        ],
        "Requirements Documentation": [
          "Requirements Documentation - Introduction",
          "Detailed vs. Simplified Requirements Documents",
          "Creating a Simplified Requirements Document",
          "Creating the SRS",
          "Properties of a Single Requirement",
          "Properties of the Whole Requirements Document",
          "System Requirements Specification (SysRS)",
          "Requirements Documentation Quiz"
        ],
        "Requirements Validation": [
          "Requirements Validation Introduction",
          "Requirements Review",
          "Prototyping",
          "Model Validation",
          "Acceptance Tests",
          "Requirements Validation Quiz"
        ],
        "Requirements Management and Practical Considerations": [
          "Change Management",
          "Change Control",
          "Status Tracking",
          "Version Control",
          "Requirements Traceability Matrix",
          "How Does Agile Manage Change?",
          "How to Limit Changes And Change Impact?",
          "Requirements Management Quiz"
        ],
        "Requirements Tools": [
          "Requirements Tools Classification",
          "Brainstorming Tools",
          "Prototyping Tools",
          "Modeling Tools",
          "Collaboration Tools",
          "Business Needs Assessment Tools",
          "Data Analysis Tools",
          "Why Requirement Management Tools?",
          "Requirements Management Tools",
          "Main Principles For Tool Selection",
          "Introducing A Tool Into An Organization",
          "Success Factors For Tools"
        ]
      },
      "requirements": [
        "- Basic Knowledge of Software Development Life Cycles"
      ],
      "description": "\"Requirements Engineering\" Is the first course in our \"Software Engineering\" series.\nIf you are involved in software projects, especially large ones, you know that dealing with software requirements is the biggest problem the software practitioner faces in almost every project.\nNot working effectively with software requirements could be the number one reason for many software projects' failures.\nThe course will discuss concepts for systematically establishing, defining, and managing the requirements for large, complex, changing, and software-intensive systems from technical, organizational, and management perspectives.\nThe course will consider the past, present, and future paradigms and methodologies in requirements engineering.\nThe course will cover informal, semi-formal, and formal approaches while balancing theory and practice.\nThe course will involve building models of both the requirements engineering process and the requirements engineering product, concerning both functional and non-functional goals/requirements/specifications, using a systematic decision-making process.\nThis course will help you manage the requirements aspect of software projects across various domains, sizes, technologies, platforms, and diverse practitioner and customer experiences. We need to acquire a set of tools, techniques, and best practices and learn when to use them to handle software requirements effectively and efficiently.\nIn this course, you will learn various techniques to capture requirements, analyze and validate requirements, control and manage requirements change requests, and deliver a solid requirements document.\nYou will understand the role of a requirements analyst in a software project, which will help you know what you need from them and what they need from you.\nThe course is based on the Software Engineering Body of Knowledge (the SWEBOK) from IEEE. This course can also help you pass various software engineering exams provided by the IEEE. I will teach you everything you need to know, and I will answer any of your questions 24 x 7.",
      "target_audience": [
        "Business Analysts, System Analysts and Requirements Engineers",
        "Product Owners",
        "Project Managers, Product Managers and Team Leaders",
        "Software Practitioners: Developers, Testers, Designers",
        "Software Engineering Students"
      ]
    },
    {
      "title": "Software Architecture and Clean Code Design in OOP",
      "url": "https://www.udemy.com/course/software-architecture-learnit/",
      "bio": "Learn design patterns and principles for Object-oriented programming to make your software scalable and easy to maintain",
      "objectives": [
        "What is a good software architecture?",
        "Basic principles in Software Architecture in OOP",
        "SOLID principles",
        "What is low coupling and high cohesion?",
        "How to group units into packages, modules, namespaces or components",
        "Practical, proven techniques to becoming a great Software Architect",
        "Software design patterns",
        "Architectural Patterns used in almost any software system",
        "Clean code design",
        "Review examples of SOLID code in object-oriented programming",
        "Real-life examples of good and bad architecture",
        "Test-driven development (TDD) to drive software architecture",
        "Behavior-driven development (BDD)",
        "Acceptance test-driven development (ATTD)",
        "Database Architecture",
        "Secure and Robust Architecture",
        "Web application design patterns",
        "MVC Design Pattern",
        "DAO Pattern",
        "Layered Architecture Pattern",
        "REST Architecture"
      ],
      "course_content": {
        "Introduction": [
          "Communication plan",
          "Unlimited access to 'Learn IT' application for students",
          "Tips to Improve Your Course Taking Experience",
          "Free AI Bot for My Students Only – No Sign-Up, FREE, Just Practice"
        ],
        "SOLID Principles": [
          "SOLID principles overview & Single Responsibility Principle",
          "Open / Closed Principle",
          "Liskov Substitution Principle",
          "Interface Segregation Principle",
          "Dependency Inversion Principle",
          "Quiz: SOLID Principles - Check yourself"
        ],
        "PRACTICE: Coding exercises to practice SOLID principles": [
          "Single Responsibility Principle: User Registration and Authentication Refactoring Exercise",
          "Open / Closed Principle: Shape Refactoring Challenge",
          "Liskov Substitution Principle: Square and Rectangle Refactoring Challenge",
          "Interface Segregation Principle: Worker Refactoring Challenge",
          "Dependency Inversion Principle: Car-Engine Refactoring Challenge"
        ],
        "Object-oriented Architecture, Clean Code Design (Advanced)": [
          "Clean Code Architecture, Coupling & Cohesion",
          "Tell, Don’t Ask Pricniple & Data Structures",
          "Law of Demeter",
          "KISS Principle in OOP",
          "YAGNI Principle in OOP",
          "DRY Principle in OOP | Part 1",
          "DRY Principle in OOP | Part 2 - Practice",
          "Packaging Pricniples p.1: Cohesion Principles",
          "Packaging Pricniples p.2: Coupling Principles and Others"
        ],
        "GoF Design Patterns of Software Architecture in OOP": [
          "GoF Patterns: Overview",
          "Creational Patterns",
          "Structural Patterns, p.1",
          "Structural Patterns, p.2",
          "Behevioral Patterns, p.1",
          "Behevioral Patterns, p.2",
          "Behevioral Patterns, p.3"
        ],
        "TDD, BDD & ATTD": [
          "Test-driven development: Theory",
          "BDD & ATTD",
          "TDD, BDD & ATTD - Practice"
        ],
        "Databases Architecture from Scratch": [
          "About this section",
          "Databases: Overview - Part 1",
          "Databases: Overview - Part 2",
          "MySQL: Overview & Installation (including Workbench Installation)",
          "Relational Databases: Basic Concepts",
          "Create Schema & Table: Naming, Collation, Engines, Types, Column Properties",
          "Database Modelling & Design: Conceptual, Logical and Physical Data Models",
          "Referential Integrity: Foreign Key Constraint & Cascading Operations",
          "Indexes in Databases",
          "Database Normalization & Denormalization"
        ],
        "Web Application Design Patterns": [
          "DAO (Data Access Object) Design Pattern",
          "MVC Design Pattern",
          "Layered Architecture"
        ],
        "===== Exam: DAO, Database, JDBC, SQL ======": [
          "Exam task review and solution"
        ],
        "===== Exam: MVC & Layered Architecture =====": [
          "Task Overview",
          "Solution Overview: Part 1",
          "Solution Overview: Part 2",
          "Solution Overview: Part 3"
        ]
      },
      "requirements": [
        "Basic understanding of Object-oriented programming. In case you don't have any priori knowledge of OOP, watch my other course that is named \"Object-Oriented Programming - From Basics to Advance\""
      ],
      "description": "From this course, you can learn Software Architecture and Clean Code Design in OOP.\nThere are a lot of other courses on this topic. So, why would you choose exactly this course?  Here are just a few reasons:\n\n- Coding examples\nTo learn to program is not enough just watching videos and reading books. You also need to have a lot of practice. In this training course, you will review multiple practical tasks and coding examples which will help you learn and understand Java better.\n\n- Open source code\nWe hide nothing from our students! Including the source code for the home task solutions and source code of examples that were shared during the lesson. Having the source code you can just copy and paste it to run it on your local computer to understand how things work better.\nYou are allowed to use all source code examples for learning purposes. This helps significantly to configure the environment and make tests work, especially in case students didn't work with any testing framework in the past.\n\n- Q&A support\nThe significant difference between the online and offline learning process is the instructor's availability. If you are in one room with a tutor he always can help you to get understand the specific concept or to help fix your code on your computer.\nIn this course, we are supporting students with answers to any questions flagged in the Q&A section. In case there will be recurring questions - separate video lessons will be created to show how to address the issue.\nSo with this course you are not just getting video materials, code exercises, source code, access to the free mobile application without limits (which is still pretty cool, huh? :) ), but you also get tutor support and answers to your questions along with this course.\n\n- Relevant knowledge\nAfter our team investigated other Java courses on Udemy we realized that most of them have nothing in common with real life. The information which is shared there is very old and significantly out of date. For example, the instructor teaches a framework which is not been used already for 15 years. Or instructors do stress on the programming design which is not used anymore at all!\nThe instructor of this course is a consultant in a top-rated IT outsourcing company and helps to bring cutting-edge solutions in IT for all his clients. Feel free to check the LinkedIn page of the instructor and check skills endorsement. More than 19 thousand people across all over the world (BTW most of them are from the top 100 companies of the world) evaluated the skills of Andrii Piatakha.\nWith this course, you can be sure that you will spend your time learning the right things from one of the best IT consultants in the world.\n\n- Free mobile App without limits for our students\nKnowing Java is one skill. Be able to pass interviews in the company - that is another skill :) Nowadays a lot of companies use tests to select candidates on the first level of interview. We developed applications to practice skills specifically for such purposes.\nIn this course, we will provide you link to download our FREE mobile app for android. (soon it will be also available for iOS platforms)\nThe instructor of this course comes up with hundreds of tests that are used to test the knowledge of candidates. With this application, you will be well-prepared for the interview.\nAlso, only for our students - there is no limit on attempts to pass certification. In the course, we will tell you how to set up a special bonus code that will remove restrictions for our students inside the app.\n\n- High concentration of useful material in each lesson\nSometimes you can notice that watching 5 minutes of our lesson is equivalent to watching another 30 minutes lesson.\nThis is because time spent for preparation for the lesson (script for the lesson, lesson structure) and video editing (to cut boring pieces of the lesson or time when the program loads) sometimes 10 times as much (sometimes even 20) as the final lesson duration after video editing.\nAlso, each topic is separated from another. In case some concept will be explained in the next lesson and you don't need to worry about understanding this in the scope of this lesson - the instructor will make an announcement when a specific topic will be covered.\nGo and try it yourself! We will appreciate your feedback.\n\n\n\n\nSo don't wait! Take a look at the lessons' preview if you still have doubts!\nBuy this course today, and you will get all updates for FREE!\nFor those who successfully passed this training course, or for students who were recognized for asking amazing questions, there is a special offer from the IT-Bulls company! The creator of this course is IT-Bulls company CEO and Founder. We are always in search of talents to run our amazing startups together with you. Probably you always dreamed about running your startup? In this course, you will be able to find the team who will teach you how to do that and (in particular cases) will be glad to help with implementation!\nHope you enjoy this course! And remember, we appreciate all your feedback! Your feedback will help us to become even better! Your feedback will help us to create to best Java course ever!\nSee you at the lessons! :)",
      "target_audience": [
        "Sofware engineers that use OOP in any programming language",
        "Software technical leads",
        "Future Software Architects"
      ]
    },
    {
      "title": "Java Best Practices for Efficient, Scalable, and Secure Code",
      "url": "https://www.udemy.com/course/java-best-practices-learnit/",
      "bio": "Tips and Tricks from OOP Foundations to Advanced Architecture Design Concepts - Guide for Developers, Architects, QAs",
      "objectives": [
        "Java Best Practices",
        "Solid Foundation in OOP Principles",
        "Application of SOLID Principles",
        "Effective OOP Interview Preparation",
        "Hands-On Exam on Object-Oriented Programming",
        "Understanding Java Platform Module System (JPMS)",
        "Comprehensive Testing Techniques for Java Platform",
        "Adoption of TDD, BDD & ATDD Methodologies",
        "Object-Oriented Architecture Design",
        "The Best Clean Code Practices",
        "Application of GoF Design Patterns",
        "Preparation for Design Patterns Interviews",
        "Stay Updated with Java New Versions",
        "Effective Logging Practices in Java",
        "Java Secure Coding Practices",
        "Designing RESTful Architectures",
        "Understanding Software Development Metrics and KPIs",
        "Web Application Design Patterns"
      ],
      "course_content": {
        "Introduction": [
          "Communication plan",
          "Unlimited access to Learn-IT application for students",
          "Tips to Improve Your Course Taking Experience",
          "Additional Free Learning Materials to Use During the Course",
          "Free AI Bot for My Students Only – No Sign-Up, FREE, Just Practice"
        ],
        "OOP Basics": [
          "Object-oriented programming: Basics",
          "Classes & Objects",
          "Different types of Classes, Abstract keyword and Abstract classes",
          "Interfaces"
        ],
        "OOP Core Principles - Inheritance, Polymorphism, Encapsulation and Abstraction": [
          "Inheritance",
          "Polymorphism and 'final' keyword",
          "'static' keyword",
          "Encapsulation",
          "Object, JNI and Object class overview",
          "Quiz: Object-oriented programming - Check yourself"
        ],
        "SOLID Principles": [
          "SOLID principles overview & Single Responsibility Principle",
          "Open / Closed Principle",
          "Liskov Substitution Principle",
          "Interface Segregation Principle",
          "Dependency Inversion Principle",
          "Quiz: SOLID Principles - Check yourself"
        ],
        "PRACTICE: Coding exercises to practice SOLID principles": [
          "Single Responsibility Principle: User Registration and Authentication Refactoring Exercise",
          "Open / Closed Principle: Shape Refactoring Challenge",
          "Liskov Substitution Principle: Square and Rectangle Refactoring Challenge",
          "Interface Segregation Principle: Worker Refactoring Challenge",
          "Dependency Inversion Principle: Car-Engine Refactoring Challenge"
        ],
        "===== OOP: Interview Preparation =====": [
          "How to be prepared for the interview?",
          "Part 1: OOP Interview - Questions and Answers",
          "Part 2: OOP Interview - Questions and Answers"
        ],
        "Practice: EXAM OOP & Object-Oriented e-Commerce console applications": [
          "Exam and homework for OOP topic",
          "Payments and Transacations processing",
          "Books Management",
          "Presents Management"
        ],
        "Object-oriented Architecture, Clean Code Design (Advanced)": [
          "Clean Code Architecture, Coupling & Cohesion",
          "Tell, Don’t Ask Pricniple & Data Structures",
          "Law of Demeter",
          "KISS Principle in OOP",
          "YAGNI Principle in OOP",
          "DRY Principle in OOP | Part 1",
          "DRY Principle in OOP | Part 2 - Practice",
          "Packaging Pricniples p.1: Cohesion Principles",
          "Packaging Pricniples p.2: Coupling Principles and Others"
        ],
        "GoF Design Patterns of Software Architecture in OOP": [
          "GoF Patterns: Overview",
          "Creational Patterns",
          "Structural Patterns, p.1",
          "Structural Patterns, p.2",
          "Behevioral Patterns, p.1",
          "Behevioral Patterns, p.2",
          "Behevioral Patterns, p.3"
        ],
        "===== Design Patterns: Interview Questions =====": [
          "Part 1: OOP & Design Patterns Interview - Questions and Answers"
        ]
      },
      "requirements": [
        "Basic Java Knowledge: A fundamental understanding of Java programming is essential. Students should be familiar with Java syntax, data types, control structures, and basic concepts.",
        "Programming Experience: Participants should have prior experience in writing Java code. Familiarity with coding practices and basic software development concepts is advantageous.",
        "Development Environment Setup: Students should have a working Java development environment set up on their machines. This includes the Java Development Kit (JDK), Integrated Development Environment (IDE) like IntelliJ or Eclipse, and a version control system (e.g., Git).",
        "Familiarity with Version Control: Some familiarity with version control systems, particularly Git, is recommended. This knowledge will aid in collaborative coding practices and project management.",
        "Motivation for Best Practices: An eagerness to learn and apply best practices in Java development is crucial. The course emphasizes industry-standard approaches to writing efficient, maintainable, and secure code."
      ],
      "description": "Unlock the full potential of Java development with my comprehensive course on best practices. Whether you're a Java developer looking to elevate your coding skills, a Development Lead, an Architect, or a QA professional aiming to enhance testing efficiency. This course is your gateway to a higher level of Java expertise. It provides a deep dive into industry-proven techniques.\nKey Learning Points:\nSolid Foundation in OOP Principles:\nMaster the fundamental concepts of OOP and discover their direct applications in Java development.\nApplication of SOLID Principles:\nLearn how to apply SOLID principles systematically, ensuring the creation of Java code that is robust, scalable, and easily maintainable.\nObject-Oriented Architecture Design:\nDevelop the skills needed to create scalable and maintainable Object-Oriented Architecture for Java applications, ensuring your projects stand the test of time.\nApplication of GoF Design Patterns:\nUnderstand and implement the renowned Gang of Four (GoF) design patterns, addressing common challenges encountered in software design.\nPreparation for Design Patterns Interviews:\nLearn how to navigate design pattern-related problems commonly encountered in interviews, enhancing your problem-solving skills and interview performance.\nEffective OOP Interview Preparation:\nEquip yourself with the knowledge and skills needed to confidently navigate OOP-related interview questions, enhancing your prospects in job interviews.\nHands-On Exam on Object-Oriented Programming:\nDemonstrate your practical proficiency in applying OOP principles through a comprehensive examination, solidifying your understanding of key concepts.\nUnderstanding Java Platform Module System (JPMS):\nExplore the benefits of modularity in Java applications using the Java Platform Module System, gaining insights into creating modular and efficient codebases.\nComprehensive Testing Techniques:\nMaster Unit Testing with JUnit, delve into Integration Testing, and learn to harness the power of Mockito and PowerMockito for effective and reliable testing.\nAdoption of TDD, BDD & ATDD Methodologies:\nGain practical experience in Test-Driven Development (TDD), Behavior-Driven Development (BDD), and Acceptance Test-Driven Development (ATDD), transforming your approach to software development.\nWeb Application Architecture:\nWe are going to learn the best practices of web application development\nBest Practices of REST Architecture Design in Java Applications:\nArchitecture - that is something what is critically important from the very beginning.\nStay Updated with Java New Versions:\nKeep pace with the latest features and improvements in recent Java versions, ensuring you leverage the full potential of the language.\nEffective Logging Practices in Java:\nUnderstand the critical role of logging in Java applications and learn best practices using frameworks like SLF4J and Logback.\nSecure Coding Practices:\nExplore secure coding practices, addressing OWASP Top 10 security issues in Java applications, fortifying your code against potential vulnerabilities.\nDesigning RESTful Architectures:\nMaster the principles of RESTful architecture and learn best practices for designing RESTful APIs in Java, ensuring efficient communication in modern software systems.\nUnderstanding Software Development Metrics and KPIs:\nGain insights into the importance of metrics and key performance indicators (KPIs) in software development. This knowledge enables informed decision-making and continuous improvement in your development processes.\nEmbark on this educational journey to become a proficient and well-rounded Java developer, QA professional, architect, or tech lead, armed with the latest industry best practices and techniques. Join us on a journey to master Java best practices and elevate your software development skills to new heights.",
      "target_audience": [
        "Java Developers: Intermediate and experienced Java developers looking to enhance their skills and adopt industry best practices in Java programming.",
        "Java Enthusiasts and Students: Students and enthusiasts who want to build a strong foundation in Java programming and gain insights into industry-standard practices.",
        "Technical Leads and Architects: Technical leads and architects aiming to reinforce their understanding of Java best practices for designing scalable and maintainable software architectures.",
        "QA Engineers: QA professionals aiming to understand Java best practices to enhance the quality and efficiency of their testing efforts.",
        "QA Automation Engineers: Individuals involved in QA automation who want to improve their Java programming skills and incorporate best practices into their automated testing frameworks.",
        "QA Leads and Managers: QA leads and managers seeking insights into Java best practices to guide their teams in implementing effective and maintainable testing strategies."
      ]
    },
    {
      "title": "API First Engineering with Spring Boot",
      "url": "https://www.udemy.com/course/api-first-engineering-with-spring-boot/",
      "bio": "Learn Industry Best Practices to Develop First Class APIs for your Customers",
      "objectives": [
        "Build High Quality RESTful APIs and API Documentat",
        "Learn What is API First Engineering and Why its Important",
        "How to Leverage OpenAPI as the Single Source of Truth",
        "Use OpenAPI Code Generation to Generate Java Code",
        "Use Redocly for CI Builds of your OpenAPI Specification and Documentat"
      ],
      "course_content": {},
      "requirements": [
        "Should be familiar with Spring Boot and Spring MVC",
        "Basic Java Development Skills and Able to Use Maven",
        "Working Knowledge of OpenAPI"
      ],
      "description": "Take a comprehensive dive into the world of API First development using Spring 6 and Spring Boot 3. This extensive course covers the latest practices and tools for designing, building, and testing robust APIs following industry best practices.\nYou'll begin by understanding the foundational concepts of API-first development and its benefits for organizations. The course then guides you through the practical implementation of an API using OpenAPI specifications, domain-driven design principles, and code generation from OpenAPI specifications.\nThroughout the course, you'll explore a wide range of topics, including:\nDefining APIs using the OpenAPI specification and tools like Redocly\nUsing Redocly to establish CI/CD builds for your OpenAPI Specification and Redoc API Documentation\nApplying domain-driven design principles for effective API design\nGenerating code from OpenAPI specifications using Maven with OpenAPI Code Generator\nDeveloping Spring Boot and SpringMVC to implementing API endpoints\nTesting APIs with Spring MockMVC and incorporate request validation to your OpenAPI Specification\nImplementing create, update, patch, and delete operations for APIs\nObject-relational mapping with JPA, Hibernate\nUsing MapStruct for efficient object mapping and type transformation\nEnforcing data validation and constraints with JPA and Java Bean Validation\nHandling standardized problems and errors with libraries like Zalando Problem\nGeneration of Spring Boot API clients and using clients with integration testing\nThroughout the course, you'll work on a real-world e-commerce API project, applying the concepts and best practices learned in each section. By the end of this course, you'll have a deep understanding of API-first development using Spring 6 and Spring Boot 3 with OpenAPI, enabling you to design, build, and test robust APIs that adhere to industry standards.\nThis course is a master course in developing high quality world class API products for your customers.\nEnroll now and elevate your skills in API development with Spring!",
      "target_audience": [
        "Spring Developers Responsible for Building Customer Facing APis",
        "Developers Seeking to Build High Quality APIs",
        "QA Engineers Wishing to Improve API Code Quality",
        "API Product Owners Responsible for the Delivery of Customer Facing APIs"
      ]
    },
    {
      "title": "Build your Own Self Driving Car| [Course 1 & Course 2]",
      "url": "https://www.udemy.com/course/selfdriving/",
      "bio": "Learn Raspberry Pi 3, Arduino UNO, Image Processing and Neural Networks (Machine Learning) for any Embedded IOT Project",
      "objectives": [
        "Learn How to Setup Raspberry Pi 3 for any IOT Project",
        "Learn How to Setup Arduino UNO as a Slave micro-controller for any IOT Project",
        "Learn Image Processing using OpenCV4 for any Platform",
        "Learn Machine Learning & Train your own Image Classifier",
        "Learn How to Troubleshoot any Hardware & Software issues",
        "Most Important!! Learn to Design Embedded Product totally from scratch"
      ],
      "course_content": {
        "Introduction": [
          "Course Curriculum",
          "Detailed Working"
        ],
        "Build Hardware for Self Driving Car": [
          "Hardware Requirements (hardware Link is provided in Resource Section)",
          "Assemble Hardware Parts (Robot Chassis)",
          "How To Build Track for Testing"
        ],
        "Slave Device Setup (Arduino UNO)": [
          "Forward & Backward Functions for Motors",
          "Left & Right Functions for Motors"
        ],
        "Master Device Setup (Raspberry PI 3 B+)": [
          "How to Flash Raspbian OS on Raspberry Pi 3 B+",
          "Raspbian Buster Fix",
          "Connect Raspberry PI to Personal Computer through Ethernet",
          "Connect Raspberry PI to Personal Computer through WiFi",
          "Connect Raspberry PI to Personal Computer through VNC Viewer"
        ],
        "Install OpenCV4 on Raspberry PI 3 B+": [
          "Introduction to OpenCV",
          "Remove Unnecessary Software from Raspberry PI",
          "Clone OpenCV from GitHub",
          "Build OpenCV on Raspberry PI with CMake",
          "Setting Up Libraries in Programming Editor",
          "Test First Program In Geany Programming Editor",
          "SD CARD BACKUP"
        ],
        "Camera Setup for Raspberry PI": [
          "Install Raspicam & Wiring PI Libraries on Raspberry PI",
          "Mount Camera on Robot Car Chassis",
          "Backup of SD Card"
        ],
        "C++ Code to Capture Images & Videos": [
          "How to Initialize Camera",
          "C++ Code to Capture Images",
          "C++ Code to Capture Video",
          "calculate FPS (Frames Per Second)"
        ],
        "Image Processing Using OpenCV4 & C++": [
          "Convert Image Signature",
          "Create Region Of Interest",
          "Perspective Transformation (Bird Eye View)",
          "Threshold Operations",
          "Canny Edge Detection",
          "Troubleshoot Hardware & Software",
          "How to Find Lanes from Track",
          "Histogram and Vectors",
          "Iterators and Pointers",
          "Calibration",
          "Final Step"
        ],
        "Master & Slave Device Communication": [
          "Raspberry PI Digital Pins",
          "Wiring Pi Library Fix (download latest command list in resource)",
          "Slave Device (Arduino Uno) Programming",
          "Testing",
          "Smooth Performance Tweek"
        ],
        "Final Testing & Features (Image Processing)": [
          "Testing on Large Track",
          "Lane End & UTurn Implementation (Main Device)",
          "Lane End & UTurn Implementation (Slave Device)"
        ]
      },
      "requirements": [
        "Basic Understanding of C or C++",
        "Basic Understanding of Digital Logic",
        "Basic Understanding of Soldering and Breadboard Prototyping"
      ],
      "description": "\"Machine Learning will change the lives of all of us. What is Machine Learning? It’s behind what makes self-driving cars a reality\"\nThis unique course is a complete walk-through process to Design, Build and Program a Embedded IOT Project (Self driving Car). Everything is discussed with details and clear explanation. The complete Self driving Car project is divided into 2 Parts\n\n\nPart-1: (Course - 1)\n1. Learn to design complete hardware for self driving car\na. Learn to setup Master device ( Raspberry Pi 3 ) for any project\nb. Learn to setup Slave device ( Arduino UNO ) for any project\nc. Learn to Establish Communication link between Master and Slave device\n2. Learn Image Processing using OpenCV4\n3. Learn to driver robot on road lane\n\n\nPart-2: (Course - 2)\n1. Learn Essentials of Machine Learning\n2. Learn to train your own cascade classifier to detect Stop Sign, Traffic Lights and any Object\n3. Learn to design LED Dynamic Turn Indicators\n\n\n\"Machine Learning will change the lives of all of us. What is Machine Learning? It’s behind what makes self-driving cars a reality\"\nThis unique course is a complete walk-through process to Design, Build and Program a Embedded IOT Project (Self driving Car). Everything is discussed with details and clear explanation. The complete Self driving Car project is divided into 2 Parts",
      "target_audience": [
        "College or University student from Electronics/Electrical or Computer Engineering or relevant Diploma",
        "Hobbyist interested in Machine Learning & Image Processing",
        "Anybody Who wants to create Embedded IOT Project"
      ]
    },
    {
      "title": "Learn Computer Vision with OpenCV and Python",
      "url": "https://www.udemy.com/course/learn-computer-vision-with-opencv-and-python/",
      "bio": "Image processing basics, Object detection and tracking, Deep Learning, Facial landmarks and many special applications",
      "objectives": [
        "Understanding the fundamentals of computer vision & image processing",
        "Build computer vision applications using OpenCV",
        "Improve programming skills in Python",
        "Object detection and tracking examples",
        "Deep Learning for Computer Vision",
        "Beside learning some OpenCV functions, Also you will have many special examples with own algorithm"
      ],
      "course_content": {
        "Introduction": [
          "Introduction-1 (for the first state of the course)",
          "Introduction-2 (for the richest content of the course)"
        ],
        "Basic Image Processing": [
          "Histogram equalization",
          "Thresholding",
          "Convolution",
          "Sharpening and edge detection",
          "Morphological tranformations",
          "Image pyramid"
        ],
        "Special App : Mini Game - Hit the Ball with Key Point Detection": [
          "Corner detection",
          "Keypoint detection and Feature matching",
          "Mini \"hit the ball\" game"
        ],
        "Image Segmentation": [
          "Contours and segmentation",
          "Contour properties",
          "Blob detection",
          "Circle detection",
          "Line detection",
          "Watershed segmentation"
        ],
        "Special App - People Counter": [
          "People counting"
        ],
        "Object Tracking": [
          "Tracking APIs",
          "Filtering by Color",
          "Special App: Moving object tracking"
        ],
        "Object Detection": [
          "Haarcascade - face and eye detection",
          "HOG - Pedestrian detection",
          "Special App: Search team logos"
        ],
        "How to Prepare dataset and Train Your Deep Learning Model": [
          "How to install Keras with tensorflow",
          "Automatically download images from Google",
          "Prepare dataset with LabelImg",
          "How to get selected ROI information for labeled data",
          "Special App: Train your model with a simple dataset",
          "Test trained model for bird detection"
        ],
        "Detect and Track Object with YOLO": [
          "Tracker for YOLOv5 object detector"
        ],
        "Object detection with Deep Learning": [
          "Object detection with trained caffe model",
          "Train model with YOLOV5"
        ]
      },
      "requirements": [
        "Basic Python is a plus, but no programming knowledge is needed.",
        "All the software needed in this course is free and open source.",
        "Only install Python and OpenCV"
      ],
      "description": "Note: You will find real world examples (not only using implemented functions in OpenCV) and i'll add more by the time. It means that course content will expand with new special examples!.\n***New Chapter***: \"How to Prepare dataset and Train Your Deep Learning Model\" was added to the course. You will learn how to prepare a simple dataset, label the objects and train your own deep learning model.\n***New Special App***: \"Search team logos\" was added to the course. You will learn how you can compare images and find similar image/object in your dataset.\n***New Chapter***: \"Special Apps - Missing and Abandoned Object Detection\" was added to the course. You will learn how to do an application for missing object detection and abandoned object detection\n***New Chapter***: Facial Landmarks and Special Applications (real time sleep and smile detection) videos was added to the course!\n***Different Special Applications Chapter***:  new videos in different topics will be shared under this chapter. You can look at \"Soccer players detection\" and \"deep learning based API for object detection\" examples.\n\nIn this course, you are going to learn computer vision & image processing from scratch. You will reach all resources, have many examples and explanations of these examples.\nThe explanations are easy to understand and also you can ask the points you need.\nI have shared key concepts with you without the heavily mathematical theory, so we can focus the implementation.\nMaybe you can find some other resources, videos or blogs to learn about some of these topics explained in my course, but the advantage of this course is that, you will learn computer vision from scratch by following an order, so that you will not loss yourself between many different sources.\n\nYou will also find many special examples beside the fundamental topics.\n\nI preferred to use OpenCV which is an open source computer vision library used and supported by many people!. I have used OpenCV with Python, because Python allows us to focus on the problem easily without spending time for programming syntax/complex codes.\nI wish this course to be useful for you to learn computer vision, and Actively we can use 'questions and answers' area to share information...\nYou will learn the topics:\nThe key concepts of computer Vision & OpenCV\nBasic operations: histogram equalization,thresholding, convolution, edge detection, sharpening ,morphological operations, image pyramids.\nKeypoints and keypoint matching\nSpecial App : mini game by using key points\nImage segmentation: segmentation and contours, contour properties, line detection, circle detection, blob detection, watershed segmentation.\nSpecial App: People counter\nObject tracking:Tracking APIs, Filtering by Color.\nSpecial App: Tracking of moving object\nObject detection: haarcascade face and eye detection, HOG pedestrian detection\nObject detection with Deep Learning\nExtra Chapter: How to Prepare dataset and Train Your Deep Learning Model\nExtra Chapter: Special Apps - Missing and Abandoned Object Detection\nExtra Chapter: Facial Landmarks and Special Applications (real time sleep and smile detection)\nExtra Chapter: Different Special Applications ( will be updated with special examples in different topics )",
      "target_audience": [
        "Passion to learn computer vision from scratch",
        "For students looking for computer vision applications"
      ]
    },
    {
      "title": "The Complete Cloud Computing Software Architecture Patterns",
      "url": "https://www.udemy.com/course/the-complete-cloud-computing-software-architecture-patterns/",
      "bio": "Architect Large Scale Systems using Cloud Computing, Software Architecture Patterns & Modern System Design Principles",
      "objectives": [
        "Architect Modern Large Scale Software Systems",
        "Solve Challenging System Design Problems using Software Architecture Patterns",
        "Use Cloud Computing to Serve Millions of Users around the World",
        "Design, Architect, Deploy and Test Real-Life Production Systems"
      ],
      "course_content": {
        "Introduction": [
          "Introduction to Cloud Computing Software Architecture Patterns",
          "Download Course Workbook"
        ],
        "Scalability Patterns": [
          "Load Balancing Pattern - Software Architecture & Cloud Computing Use Cases",
          "Pipes and Filters Pattern",
          "Scatter Gather Pattern",
          "Execution Orchestrator Pattern for Microservices Architecture",
          "Choreography Pattern for Microservices Architecture",
          "Scalability Patterns Quiz"
        ],
        "Performance Patterns for Data Intensive Systems": [
          "Map Reduce Pattern for Big Data Processing",
          "The Saga Pattern",
          "Transactional Outbox Pattern - Reliability in Event Driven Architecture",
          "Materialized View Pattern - Architecting High-Performance Systems",
          "Data Intensive Systems Patterns Quiz 1",
          "CQRS Pattern",
          "CQRS + Materialized View for Microservices Architecture",
          "Event Sourcing Pattern",
          "Data Intensive Systems Patterns Quiz 2"
        ],
        "Software Extensibility Architecture Patterns": [
          "Sidecar & Ambassador Pattern",
          "Anti-Corruption Adapter Pattern",
          "Backends for Frontends Pattern",
          "Software Extensibility Patterns Quiz"
        ],
        "Reliability, Error Handling and Recovery Software Architecture Patterns": [
          "Throttling and Rate Limiting Pattern",
          "Retry Pattern",
          "Circuit Breaker",
          "Dead Letter Queue (DLQ)",
          "Reliability, Error Handling and Recovery Patterns Quiz"
        ],
        "Deployment and Production Testing Patterns": [
          "Rolling Deployment Pattern",
          "Blue-Green Deployment Pattern",
          "Canary Release and A/B Testing Deployment Patterns",
          "Chaos Engineering Production Testing Pattern"
        ],
        "Bonus Section": [
          "Bonus Lecture - Let's Keep Learning"
        ]
      },
      "requirements": [
        "Some Software Engineering Experience (1-2 years)"
      ],
      "description": "Are you ready for your next career step?\nDo you want to become a Software Architect or Technical Lead and work on impactful projects that help millions of users?\nThen you came to the right place!\nIn this course, you will wear the hat of a Software Architect, solving some of the most challenging and important problems in system design, software architecture, and modern cloud computing.\nThroughout the course, you will learn the most useful Software Architecture Patterns that any Cloud Software Architect needs to know, and which have already been successfully applied by the top tech companies.\nIn each lecture, you will be presented with:\nA new design problem\nA common solution in the form of a Software Architecture Pattern\nA real-life example where that pattern can be used\nImportant design and architecture considerations that leverage the power of cloud computing\nBy the end of the course:\nYou will have a complete Software Architecture toolbox full of patterns that will help you architect a highly scalable, available, reliable, and responsive cloud-based system that can reach millions of users worldwide and help grow your company's business.\nIn addition, knowing and understanding those Software Architecture Patterns can set you apart in System Design Interviews, especially at FAANG and other top tech companies.\nThis course is ideal for you if:\nYou are an experienced Software Engineer who understands that software engineering is more than just coding and you are ready to take your career to the next level.\nYou are an aspiring or existing Software Architect or Technical Lead and want to ensure you make the right design decisions when architecting new cloud-based systems.\nYou are seeking or are currently in a role that requires deep knowledge of software architecture and cloud computing. This can be any role, such as a Cloud Architecture or Cloud Consultant, as well as a Technical Product Manager, Solutions Architect, or even an Engineering Manager overseeing large-scale projects.\nWhy do we need new Software Architecture Patterns?\nWith the advancements in cloud computing, the problems that software architects are now facing are very different from a few decades ago. When architecting a large-scale system using cloud computing and Microservices Architecture, the design decisions and challenges require a completely new set of software architecture patterns than the traditional OOP Design Patterns, which focus only on code organization within a single application. These new Software Architecture Patterns solve many problems, such as scalability, performance, reliability, and so on.\nFAQ:\n- I am completely new to Software Architecture, is this the right course for me?\nThis course can be a great introduction to Software Architecture in general. It will teach you some of the fundamental techniques that top companies use, to solve challenging design and architecture problems. If you are a beginner, I recommend taking my other course, Software Architecture & Design of Large Scale Systems, either before or in conjunction with this course.\n\n\n- Is this a programming course or a Software Architecture course?\nThis is 100% a Software Architecture course. As a software engineer, knowing how to program is a given. If you look around, everyone in your team can code, starting from the most junior to the most senior developer. However, Software Architecture is the next level of abstraction and the next level in a software engineer's career. So the focus of this course is Software Architecture, specifically in a cloud computing environment. A topic that is rarely taught in the academy, boot camps, or even at work.\n\n\n- Is this course specific to any cloud vendor such as AWS, Google Cloud Platform, or Microsoft Azure?\nNo. The Software Architecture and Cloud Computing Patterns you will learn in the course are completely implementation, platform, and cloud vendor independent. You can successfully implement them on any cloud vendor or programming language.\n\n\n- I'm already a Software Architect, will I benefit from this course?\nYes! The Software Architecture Patterns in this course are the most up-to-date in the industry. They are a must-skill for any Software Architect that works on system design and architecture of modern systems, both in a public cloud computing and hybrid cloud computing environment. Whether you are just starting your career as a Software Architect or you're already an experienced software architect, you will learn a lot in this course.",
      "target_audience": [
        "Anyone who aspires to become a Software Architect or Technical Lead",
        "Anyone who wants to gain deep knowledge and expertise in Architecture Large Scale Systems"
      ]
    },
    {
      "title": "QC051: Math Prerequisites for QC - Content moved to QC101",
      "url": "https://www.udemy.com/course/mathematics-prerequisites-for-quantum-computing-and-quantum-physics/",
      "bio": "THE CONTENTS OF THIS COURSE HAVE BEEN ADDED TO QC101. Purchase this course if you want only the math lessons",
      "objectives": [
        "Math prerequisites for Quantum Computing and Quantum Physics"
      ],
      "course_content": {
        "Boolean Algebra": [
          "Introduction",
          "Boolean Algebra",
          "Boolean Variables & Operators",
          "Reviewing Your Experience",
          "Truth Tables",
          "Logic Gates",
          "Logic Circuits",
          "AND Gate",
          "OR Gate",
          "NOT Gate",
          "Multiple Input Gates",
          "Equivalent Circuits 1",
          "Equivalent Circuits 2",
          "Universal Gate: NAND",
          "Exclusive-OR",
          "XOR for Assignment",
          "XOR of Bit Sequences 1",
          "XOR of Bit Sequences 2"
        ],
        "Cryptography": [
          "Introduction to Cryptography",
          "Cryptography with XOR",
          "Shared Secret",
          "Importance of Randomness",
          "Breaking the Code"
        ],
        "Probability": [
          "Introduction to Probability",
          "Probability of a Boolean Expression",
          "Mutually Exclusive Events",
          "Independent Events",
          "Manipulating Probabilities with Algebra",
          "P( Mutually Exclusive Events )",
          "P( Independent Events )",
          "Complete Set of Mutually Exclusive Events",
          "P( A OR B )",
          "Examples",
          "Examples",
          "P( Bit Values )",
          "Analysis with Venn Diagrams",
          "Venn Diagram P( A AND B )",
          "Venn Diagram P( A OR B )",
          "Venn Diagram P( NOT A )",
          "Examples",
          "Examples",
          "Conditional Probability",
          "Examples"
        ],
        "Statistics": [
          "Introduction to Statistics",
          "Random Variables",
          "Mapping Random Variables",
          "Mean, Average, Expected Value ...",
          "Example",
          "Example",
          "Beyond Mean",
          "Standard Deviation",
          "Examples",
          "Combinations of Random Variables",
          "Correlation",
          "Analysis of Correlation",
          "Test to Determine if Real-World Random Variables are Correlated"
        ],
        "Complex Numbers": [
          "Introduction to Complex Numbers",
          "Imaginary i",
          "Addition",
          "Subtraction",
          "Multiplication by a Real",
          "Division by a Real",
          "Complex Multiplication",
          "Examples",
          "Complex Conjugates",
          "Squared Magnitude",
          "Complex Division",
          "Examples",
          "Euler's Formula",
          "Polar Form",
          "Examples",
          "Fractional Powers",
          "Complex Cube Roots of 1",
          "Square Root of i",
          "2D Coordinates"
        ],
        "Linear Algebra & Matrices": [
          "Matrices",
          "Matrix Dimensions",
          "Matrix Addition",
          "Subtraction",
          "Scalar Multiplication",
          "Matrix Multiplication",
          "Examples",
          "Examples",
          "3x3 Example",
          "Exercises",
          "More Multiplications",
          "When is Multiplication Possible?",
          "Example",
          "Not Commutative",
          "Associative & Distributive",
          "Dimension of Result",
          "Odd Shaped Matrices",
          "Examples",
          "Outer Product",
          "Exercise",
          "Inner Product",
          "Exercises",
          "Identity Matrix",
          "Matrix Inverse",
          "Transpose",
          "Transpose Examples",
          "Transpose of Product",
          "Complex Conjugate of Matrices",
          "Adjoint",
          "Unitary",
          "Hermitian",
          "Hermitian & Unitary",
          "Why Hermitian or Unitary?",
          "Vectors & Transformations",
          "Rotation in 2D",
          "Special Directions",
          "Eigen Vectors & Eigen Values",
          "More Eigen Vectors",
          "Conclusion"
        ]
      },
      "requirements": [
        "Students must have completed 12th grade Math and Physics in high school"
      ],
      "description": "THE CONTENTS OF THIS COURSE HAVE BEEN ADDED TO QC101.\nPurchase this course if you want only the math lessons without the rest of QC101.\n\n\nThe contents of this course have been added to the section on Math Foundation in QC101.\n-----------\nThis is a refresher course in Mathematics for students who studied Math and Physics through 12th grade high school, but have now forgotten many of the details. In less than 4 hours I review the Math you will need to understand quantum computing concepts.\nThe focus is on getting you up to speed as quickly as possible. I cover what you need to know: Probability, Statistics, Boolean Logic, Complex Numbers, and Linear Algebra. You will not waste time on topics you do not need for quantum computing.\nTo get the most out of this course, you need to have already studied Math at a 12th grade level in high-school. This is merely a review course to help you refresh your memory. If you have not studied these topics in high school, then this 4 hour course cannot substitute for 2 years of high school Math classes.\nThis course reviews basic high-school Math. It doesn't go into any details about quantum physics or quantum computing. Those topics will be discussed in subsequent courses of this series.",
      "target_audience": [
        "Students who studied Math & Physics in 12th grade high school many years ago and now need a refresher course in basic Math"
      ]
    },
    {
      "title": "Multithreading and Parallel Programming in C#",
      "url": "https://www.udemy.com/course/parallel-csharp/",
      "bio": "Overcome multithreading and asynchronous programming in C# problems & improve performance by parallel computing in C#",
      "objectives": [
        "Be able to use a full power of TPL (task parallel library) by using Tasks",
        "Understand the low-level of Threads",
        "Understand all the basic concepts such as \"Thread\", \"Process\"; difference between \"asynchrony\", \"concurrency\", \"multithreading\", and \"parallel computing\"",
        "Use the full power of synchronization constructs such as Monitor (lock), Interlocked, ReaderWriterLockSlim, Semaphore, SynchronizationContext",
        "Use the full power of signaling constructs such as AutoResetEvent and ManualResetEventSlim, CountdownEvent and Barrier, Mutex",
        "Use spinners where appropriate: SpinLock, SpinWait",
        "Understand and use Immutable and Concurrent Collections",
        "Harness the power of parallel computing by using PFX components: Parallel class and PLINQ"
      ],
      "course_content": {
        "Before Taking the Course": [
          "How to Ask Questions",
          "Source Code",
          "Join .NET Community of Students",
          "Materials"
        ],
        "Introduction": [
          "Outline",
          "Main Concepts",
          "Threads and Related Notions",
          "Why async programming Important?",
          "Hanging Application Demo",
          "Problems Related to Multithreading",
          "Conclusion"
        ],
        "Thread API, Thread Pool, APM & EAP": [
          "Outline",
          "Create Process",
          "Starting a Thread",
          "Cancelling a Thread",
          "Coordinating Threads",
          "Threading and COM",
          "How Thread Pool Works",
          "Worker and I/O Threads",
          "I/O-Bound Operations",
          "APM and EAP",
          "Conclusion"
        ],
        "Tasks": [
          "Outline",
          "What is a Task? Starting a Task",
          "Task States",
          "Cancelling a Task",
          "Chaining Tasks (Continuations)",
          "Waiting for a Task",
          "Creating I/O-Based Tasks",
          "Error Handling",
          "Global Exception Handling",
          "Nested and Child Tasks",
          "TaskCompletionSource",
          "Conclusion"
        ],
        "Async and Await": [
          "Outline",
          "What is Async?",
          "Async Method Return Types",
          "Where \"await\" can be Used?",
          "Exceptions in Async Code",
          "Conclusion"
        ],
        "Synchronization in Multithreaded Scenarios": [
          "Outline",
          "Resources Shared by Threads",
          "Atomic Operations and Thread Safety",
          "Interlocked",
          "Monitor (lock)",
          "ReaderWriterLockSlim",
          "Semaphore",
          "SynchronizationContext",
          "Deadlock",
          "Conclusion"
        ],
        "Signaling Constructs": [
          "Outline",
          "Signaling with AutoResetEvent and ManuallyResetEventSlim",
          "CountdownEvent and Barrier",
          "Crossing Boundaries of a Process",
          "Conclusion"
        ],
        "Spinning": [
          "Outline",
          "Blocking vs Spinning",
          "SpinLock and SpinWait",
          "Implementing our own spinner: UpdateableSpin",
          "Conclusion"
        ],
        "Concurrent Collections": [
          "Outline",
          "Introduction",
          "Implementing ImmutableStack and the Problem of Memory Pressure",
          "Immutable Stack and ImmutableQueue",
          "Immutable List",
          "Immutable Sets",
          "Immutable Dictionary",
          "Builders in Immutable Collections",
          "ConcurrentStack and ConcurrentQueue",
          "ConcurrentBag",
          "ConcurrentDictionary",
          "Blocking Collection and Producer/Consumer Pattern",
          "Conclusion"
        ],
        "Parallel Programming": [
          "Outline",
          "Introduction",
          "Parallel Class",
          "PLINQ",
          "Cancelling Parallel and PLINQ",
          "Conclusion",
          "BONUS"
        ]
      },
      "requirements": [
        "Good understanding of C#"
      ],
      "description": "For the last two decades, computers became faster by increasing the number of CPU cores. However, the fact of having more cores itself doesn’t make a computer drastically faster if those cores are not used by software properly. We, as software developers, should know how to write asynchronous and parallel executing code to make our applications faster and more responsive.\nThis course is all about developing more responsive and fast programs. Multithreading and Parallel Computing are topics for those who already have some experience in programming, otherwise, you may face difficulties with understanding the content. Anyway, this course covers:\nTheoretical foundations of asynchronous programming: main concepts, processes, threads and so on\nLow-level Thread API, APM, and EAP\nTask Parallel Library (TPL) including starting tasks, canceling tasks, chaining tasks, waiting for tasks, IO-based tasks, exceptions handling and other\nAsync and Await feature of C#\nSynchronization including atomicity, Interlocked, Monitor (lock), ReaderWriterLockSlim, Semaphore, SynchronizationContext, and Mutex\nSignaling constructs such as AutoResetEvent and ManualResetEventSlim, CountdownEvent and Barrier\nSpinning including SpinWait, SpinLock and our own UpdateableSpin\nConcurrentCollections including ImmutableStack, ImmutableQueue, ImmutableList, Immutable Sets, ImmutableDictionary, ConcurrentStack, ConcurrentQueue, ConcurrentBag, BlockingCollection\nParallel Programming including Parallel class and PLINQ\nEnroll and start learning the foundations of multithreading and parallel computing in .NET.",
      "target_audience": [
        "Any C# developer who wants to learn about multithreading and parallel computing in C#",
        "Any C# developer who wants to have a good reminder (about multithreading-related stuff) at hand"
      ]
    },
    {
      "title": "Technical Writing: How to Write Using DITA XML",
      "url": "https://www.udemy.com/course/technical-writing-how-to-write-using-dita-xml/",
      "bio": "How to Become a Modern and Successful Technical Writer Using DITA XML",
      "objectives": [
        "Learn to write using DITA XML topics and maps",
        "Produce documentation deliverables using Oxygen XML Author tool",
        "Reuse on maps level (mapref), topic level (topicref), topic element level (conref) and table rows (conref - conrefend)",
        "Personalized user guides based on the same DITA content using profiling (conditioning) of content",
        "Create interactive images and create image maps",
        "How to configure and customize your DITA HTML output"
      ],
      "course_content": {},
      "requirements": [
        "You need a PC or a laptop where to install the needed software an follow the exercises in the course",
        "This course is not suitable for use on a mobile device or tablet",
        "Basic knowledge in technical writing is recommended"
      ],
      "description": "Do you want to learn how to write structured documentation using DITA XML? If yes, I can help!\nMy name is Jordan Stanchev. I have built my career in the field of technical communications over the last 20 years.\nStarting off as a Java developer, I have then become a senior technical writer and had built a career as a DITA information architect.\nI have written thousands of pages of software documentation guides for administrators and for developers. The software products I have worked on are in the field of security, messaging services, and development infrastructure (such as GitHub and SAP NWDI).\nToday, I am a part of the team that leads the development of DITA XML-based infrastructure projects. The technical writers' community we serve is more than 1000 authors. I also chair the experts' group of our nearly 300 people strong group of DITA information architects in a Fortune 100 company - SAP SE.  I constantly have to write software development specifications and project documentation, in addition to the user guide.\nWhat can I say, I have vast experience to share in structured writing and information architecture using DITA XML. And this is what I focus on in this course.\nBased on my experience, what I can tell you, is that for a modern technical writer looking to build his or her career in the field of technical communications, knowing DITA XML simply is a must!\nYou wouldn't believe how often I hear back from my students about how the knowledge from this course is what made the breakthrough in their DITA technical writer job interview and helped them advance their careers!\nTo achieve the ultimate career goal, all you do need is to learn writing using DITA!\n\n\nKnowledge of DITA is relevant for you if you are involved in any way with software documentation as a:\ntechnical writer;\ninformation architect;\npeople manager, managing technical writers in the team;\nuser experience designer;\nbusiness analyst;\nproject manager;\n\n\nThe course 'How to Write Using DITA XML\" is designed for intermediate to advanced-level technical writers who want to deep dive into the capabilities offered by DITA, create complex and personalized user guides, and deliver this single-sourced output using the Oxygen Author tool into various delivery channels.\nIt is based on the online DITA XML training I've been providing to my students at the university.\nWARNING:\nIt will take you around 8-10 hours from the start of this course just to go through this material! It comes with lots of various hands-on exercises, examples, and advice based on my practice.\nI recommend that you take one section a day at most, to avoid being overwhelmed and manage to perform each exercise described.\nThe course further deep dive and elaborate the basic concepts and knowledge introduced with the course 'A Quick Start to Technical Writing with DITA'  and then provides more advanced details and strategies such as reuse of content and personalization of content based on profiling strategy.\n\n\nNote:\nIf you are looking for a quick start into DITA, consider the basic DITA course 'A Quick Start to Technical Writing with DITA', which is for technical communicators, that are not yet familiar with DITA.\n\n\n\n\nHow much time does the course take? In short:\nSection 1: Introduction - 70 min\nSection 2: 5 Quick Steps to Writing in DITA XML - 50 min\nSection 3: DITA Elements - 25 min\nSection 4: Reusing Content in DITA - 50 min\nSection 5: Profiling (conditioning) Content in DITA - 60 min\nSection 6: Information Architecture for Technical Communicators - 50 min\nSection 7: Information Architecture for DITA Authors - 90 min\nSection 8: How to Create Interactive Images in DITA - 80 min\nSection 9: Linking in DITA - 77 min\nSection 10: Customizing DITA XML Output - 60 min\n\n\nWhat will you learn?\n\n\nSection 1: Introduction - 70 min\nBy the end of this section you will be able to explain:\n- What is DITA;\n- What are the benefits of writing software documentation using DITA;\n\n\nJust spelling out the benefits of writing in DITA takes a lot of time! There are so many reasons why DITA is getting more and more popular. Today you cannot be a modern technical writer if you do not know how to write software documentation using DITA XML! It's the de facto standard XML for writing! You must know and spell out the benefits of DITA, and be sure, on a job interview you will be asked why DITA is so important.\n\n\nJust to name a few:\n- Based on common information types.\n- It implies strict rules for writing, no matter who the technical writer is!\n- Content is modularized and reusable.\n- Automatically generated various outputs from the same DITA source;\n- Content can be personalized, and so on.\n\n\nSection 2: 5 Quick Steps to Writing in DITA XML - 50 min\nBy the end of this section you will be able to:\n- Apply the 5 steps for creating the content of a user guide;\n- Explain what is a DITA map;\n- Create the 3 most frequently used DITA topics types: Task, Concept, and Reference;\n- Create DITA maps;\n- Reference topics in a map to construct a deliverable (user guide) using Oxygen XML Author;\n\n\nWriting in DITA is easy. Do not let the diversity in tags and the huge number of DITA capabilities confuse you.\nAll you need to write your first guide is a strategy (what you want to deliver) and a set of simple steps to follow to construct your guide (explained in this section of the course)!\n\n\nSection 3: DITA Elements - 25 min\nBy the end of this section you will be able to:\n- Name the most commonly used DITA topic elements (DITA tags);\n- Describe a strategy for using topic elements in the context of a specific topic;\n- Open, search through, and select the needed topic elements in a topic;\n- Use the list of topic elements in the context of a Task topic;\n\n\nDITA comes with a huge number of tags to use. With them comes great flexibility for writing content. But where do you start? And which elements are a \"must-know\" vs. \"optional-to-know\"? This is what you will learn in this section to get a steady start with your content.\n\n\nSection 4: Reusing Content in DITA - 50 min\nBy the end of this section you will be able to:\n- Describe the benefits of reuse;\n- Reuse content on map level (mapref);\n- Reuse content on topic level (topicref);\n- Reuse content on a topic element level (conref);\n- Reuse entire table rows (conref - conrefend);\n\n\nReuse of content on all these levels allows you to dramatically reduce the time you have to spend writing documentation. This is one of the most important benefits of DITA.\nAllow me to give you an example: you can use reuse on the topic element level to define the name of your software product as a reusable topic element. You then use this element across your entire document. Later on, when the product name changes, you update the value of the reusable topic element and it gets automatically updated in all occurrences in each and every document! Compare this to the time it takes you to search and replace a product name in a Word document or Wiki page!\n\n\nSection 5: Profiling (conditioning) Content in DITA - 60 min\nBy the end of this section you will be able to:\n- Describe the benefits of using profiling in your content;\n- Profile content on map level;\n- Profile content on a topic level;\n- Profile content on a topic element level;\n- Profile table rows;\n\n\nToday everyone talks about the personalization of the user experience with the software. How about the personalization of the user experience with the software documentation?\nThe profiling functionality allows you to personalize the content for your target audience, without disrupting the authoring process. The personalized end-user guide is automatically generated in the end, based on the rules set by the author. Something that is close to impossible for any non-structured way of writing content in DITA happens in a few clicks!\n\n\nSection 6: Information Architecture for Technical Communicators - 50 min\nBy the end of this section you will be able to explain:\n- What is information architecture?\n- Who is an information architect?\n- What to consider to become an efficient information architect?\n\n\nAs of this section, we are raising the stakes! This course is not only for people who want to learn to write in DITA but also for those of you who want to grow in your careers. What's the name of the next level in technical writing? It's called \"information architecture\". But what is information architecture? What are you supposed to start doing today, to become an information architect?\nThat is what is explained in this section. Information architects possess a higher level, broader, and more holistic view of the content creation process. You are no longer focused on the neatly greedy details of the single-user guide. Instead, you look at the big picture, where and how your content is organized, and how it fits the end-to-end customer experience.\nIn this section, you will learn the basics of information architecture, and open the gates to the next stage in your career as a technical writer.\n\n\nSection 7: Information Architecture for DITA Authors - 90 min\nBy the end of this section you will be able to explain:\n- How to govern the usage of profiling values by technical writers in the scope of a dedicated DITA map\n- What are DITA subject scheme maps\nIn this section, I am touching upon an aspect not realized by many technical writers. Usually, that is the difference between being a technical writer and being an information architect in DITA. I will explain how to use DITA to control how different authors can profile content in your map, reducing profiling mistakes and ensuring a better quality of the finally produced personalized documentation.\n\n\nSection 8: How to Create Interactive Images in DITA - 80 min\nBy the end of this section you will be able to:\n- Describe the rules for using images in technical writing;\n- Name the tools to use for creating graphics;\n- Explain what are interactive graphics  and image maps in DITA;\n- Describe the benefits of using interactive graphics;\n- Create an image map for an image in your documentation;\n\n\nSection 9: Linking in DITA - 77 min\nDITA XML comes with great functionality that can help the technical writer and information developer to organize the documentation in an optimal way.\nAny proficient technical writer will tell you that you must create and insert links to external content, such as websites, but also to reference other topics from your DITA map to have a documentation deliverable that provides excellent navigation capabilities for your readers.\nBut does it mean you need to waste your time to manually craft and then maintain these links? As a technical writer focused on delivering the best possible information to your readers, your time is precious! Maintaining links instead of providing valuable instructions and content for your readers is not what you should do!\nHow can DITA help you with that?!\nYou will be surprised to find out how many technical writers do not even know that DITA XML supports automatically generated links. All you need to do is to activate the desired linking option and your links will appear automatically in the generated output!\nAnd it gets even better, the links will appear only when there is a valid linking target!\nWhat are the benefits for you then? Obviously:\nLess time you waste on inserting links.\nFewer chances to have a broken link in the documentation - leading to higher content quality!\nBetter consistency of the links - you choose a linking strategy and the links appear in a consistent style across your entire documentation deliverable.\nMore time for you to focus on what matters most - high-quality information delivered to end-users!\nThis is what you will gain once you learn how to use linking in DITA XML!\nIn this course, we will cover the following subjects:\nManually Created Links\nYou will learn how to create a link to:\na web site\na resource\nanother DITA topic\nbetween sections on one and the same topic!\nAutomatically Generated Links\nYou will learn how to set up and trigger the automatic generation of links using the collection-type attribute. You will learn to create links of type:\nchoice\nfamily\nsequence\nThese are the subjects we will cover in this section, each of them accompanied by demos and exercises that you can perform using the Oxygen XML Author editor.\n\n\nSection 10: Customizing DITA XML Output - 60 min\nBy the end of this section, you will be able to:\n- Configure the look and feel of your HTML output, based on pre-defined (but, yet, customizable!) HTML output\n\n\n\n\nWhy DITA?\n\n\nStructured writing in DITA XML is an advanced discipline for technical writers. You can find many authors with decent language and writing skills. But you already know that technical writing is so much more than just written text with no spelling mistakes, isn't it?\n\n\nIf you need your technical writers to:\n- Strictly follow your company or industry writing guidelines;\n- Be able to spend less time on the maintenance of old documentation and spend more time on value-added activities for the customer;\n- Offer information that can be reused on all levels - entire guides, chapters, topics, sentences, or even single words;\n- Maintain a very high content quality standard  with no broken links and missing content;\n- Produce as many different output formats as your customer needs - all from the same content\n- Use metadata to classify the content that was written and offer it for automated forms of information consumption;\nthen most probably you are already evaluating DITA as an option for writing.\nDITA already offers all listed functionality and even more!\n\n\nBeing a technical writer who knows how to use DITA can open the doors for you to start a career in some of the greatest IT companies in the world!\n\n\nCompanies Using DITA\nHere are just a couple of company names that write their documentation using DITA XML:\n- Apple\n- IBM (they invented DITA, after all!)\n- Google\n- VMware\n- SAP SE\nand hundreds of other companies, many of which are in the IT and software development industry!\n\n\nWhat students are saying?\n\n\n\"I value the comprehensive training, challenging practice assignments, and a variety of techniques used to improve and inform my writing!\"\n- Devon Apple, Web Developer\n\n\n\"If you want to know how to write using DITA go and check this course! The lecturer provides great explanations and tutorials, which are really helpful in practice.\"\n- Karina Delcheva, Technical Writer\n\n\n\"Very good and comprehensible introduction to the world of DITA and XML Author software. I would highly recommend this course for everyone who wishes to quickly understand the subject and start using it...\"\n- Boris, a University student\n\n\nIf you are looking for a way to advance in your career as a DITA technical writer, this is your course! I am sure that you've already seen just by searching Google, that a course like this costs way above 1000$ and takes at least a week of physical and/or online presence, travel expenses, and... usually does not even cover half of the material I present here! Thanks to Udemy's policy for delivering the best courses to as many people as possible, we've managed to reduce the cost to only 199$, only here on Udemy!\nThe course still comes with an interactive and community part - you will get access to a closed learning community on our JPDocu Learning Facebook page.\nYou will have the chance to get in contact directly with the trainer of this course and receive personalized feedback on questions you may have about using DITA.\nYou will get an invaluable certificate upon the successful completion of this course, that you can put on your CV, or share on Facebook and LinkedIn - do not underestimate the importance of this certificate - without it, you most probably will never make it on the shortlist for the job interview of your dream job!\nAnd maybe the most important part, which will allow you not only to get to but also to break through a job interview - your own work that you can use to demonstrate what you have learned and how you applied DITA to produce documentation!\n\n\nEnroll now and see how simple and beneficial technical writing with DITA XML can be!\n\n\nP.S. If you are looking for a job as a technical writer in a software development company - check 2 things:\n1. Are they writing software documentation using DITA XML?\n2. Which tool are they using for writing?\n\n\nBe prepared even before your job interview to showcase the DITA XML documentation you have written using Oxygen XML Author and prove how good you are at applying reuse strategies and advanced DITA techniques - profiling, automated linking, and image maps.\n\n\nP.S.S. Do not forget that the course comes with a 30-day full refund policy - no questions asked!",
      "target_audience": [
        "Technical writers who want to advance their knowledge in DITA"
      ]
    },
    {
      "title": "Mastering Multithreading Programming with Go (Golang)",
      "url": "https://www.udemy.com/course/multithreading-in-go-lang/",
      "bio": "Learn about Multithreading, Concurrency & Parallel programming with practical and fun examples in Google's Go Lang",
      "objectives": [
        "Discover how to create responsive and high performance software.",
        "See how to use multithreading for modeling certain types of problems and simulations.",
        "Develop programs with Golang that are highly Concurrent and Parallel.",
        "Understand the advantages, limits and properties of Parallel computing.",
        "Improve your programming skills in Go with more advanced, mulithreading topics.",
        "Learn about goroutines, mutexes, reader writers locks, waitgroups, channels, condition variables and more."
      ],
      "course_content": {
        "Introduction": [
          "Understanding Parallel Computing",
          "More on Parallel Computing",
          "Links and Resources for this course"
        ],
        "Creating and using Threads": [
          "Processes, Threads and Green threads",
          "Using Goroutines for Boids",
          "Groundwork for our simulation",
          "Starting our Goroutines",
          "Memory sharing between Threads",
          "Memory Sharing example Part 1",
          "Memory Sharing example Part 2",
          "Using Threads Quiz"
        ],
        "Thread Synchronization with Mutexes": [
          "Why do we need Locking?",
          "Using Mutexes in Boid simulation",
          "Adding Synchronization to simulation",
          "Readers-Writer Locks",
          "Boid Synchronization with Readers-Writers Locks",
          "Mutexes Quiz"
        ],
        "Waiting for Completed tasks": [
          "Understanding WaitGroups",
          "Concurrent file searching with WaitGroups",
          "WaitGroup Quiz"
        ],
        "Message passing with Channels": [
          "Thread Communication using Channels",
          "Pipelining Example",
          "Understanding Thread Pools",
          "Thread Pool Example Part 1",
          "Thread Pool Example Part 2",
          "Shoelace algorithm explained (optional)",
          "Channels Quiz"
        ],
        "Synchronization using Condition Variables": [
          "What's a Condition Variable?",
          "Parallel Algorithm for Matrix Multiplication",
          "Implementing Parallel Matrix Multiplication Part 1",
          "Implementing Parallel Matrix Multiplication Part 2",
          "Condition Variable Quiz"
        ],
        "Deadlocks": [
          "Deadlocking Robots, Philosophers and Trains",
          "Simple Deadlock Example",
          "Train Deadlock Example Part 1",
          "Train Deadlock Example Part 2",
          "Solving Deadlocks using Resource Hierarchy",
          "Implementing Resource Hierarchy Solution",
          "Solving Deadlocks using an Arbitrator",
          "Implementing Arbitrator Solution"
        ],
        "Barriers": [
          "Barriers Explained",
          "Building a Barrier",
          "Barriers with Matrix Multiplication"
        ],
        "Atomic Variables": [
          "Understanding Atomic Variables",
          "Atomic Variables Example",
          "Building a Letter Frequency Program",
          "Using Atomic Variables in our Example"
        ],
        "Spinning Locks": [
          "Locking using Spinning locks",
          "Building our own Spinning locks",
          "Ledger Example",
          "Implementing the Ledger Part 1",
          "Implementing the Ledger Part 2"
        ]
      },
      "requirements": [
        "Some experience of programming in Go (enough if you know how to use functions, loops, arrays and a bit of pointers).",
        "Recent version of Go installed.",
        "Being able to do 50 push-ups while shouting a unique prime number on each rep (just kidding)."
      ],
      "description": "The mood in the meeting on the 12th floor of an international investment bank was as bleak as it gets. The developers of the firm met to discuss the best way forward after a critical core application failed and caused a system wide outage.\n\n\n\"Guys, we have a serious issue here. I found out that the outage was caused by a race condition in our code, introduced a while ago and triggered last night.\" says Mark Adams, senior developer.\n\n\nThe room goes silent. The cars outside the floor to ceiling windows slowly and silently creep along in the heavy city traffic. The senior developers immediately understand the severity of the situation, realizing that they will now be working around the clock to fix the issue and sort out the mess in the datastore. The less experienced developers understand that a race condition is serious but don't know exactly what causes it and therefore keep their mouths shut.\n\n\nEventually Brian Holmes, delivery manager, breaks the silence with \"The application has been running for months without any problems, we haven't released any code recently, how is it possible that the software just broke down?!\"\n\n\nEveryone shakes their heads and goes back to their desk leaving Brian in the room alone, puzzled. He takes out his phone and googles \"race condition\".\n\n\nSound familiar? How many times have you heard another developer talking about using threads and concurrent programming to solve a particular problem but out of fear you stayed out of the discussion?\n\n\nHere's the little secret that senior developers will never share... Multithreading programming is not much harder than normal programming. Developers are scared of concurrent programming because they think it is an advanced topic that only highly experienced developers get to play with.\n\n\nThis is far from the truth. Our minds are very much used to dealing with concurrency. In fact we do this in our everyday life without any problem but somehow we struggle to translate this into our code. One of the reasons for this is that we're not familiar with the concepts and tools available to us to manage this concurrency. This course is here to help you understand how to use multithreading tools and concepts to manage your parallel programming. It is designed to be as practical as possible. We start with some theory around parallelism and then explain how the operating system handles multiple processes and threads. Later we move on to explain the multiple tools available by solving example problems using multithreading.\n\n\nIn this course we use Google's Go programming language with its goroutines, however the concepts learned here can be applied to most programming languages.\n\n\nAll code in this course can be found on github, username/project: cutajarj/multithreadingingo",
      "target_audience": [
        "Developers who want to take their career to the next level by improving their skills and learning about concurrent multithreading programming.",
        "College students currently learning about parallel computing who want to see how concepts learned in class relate to practice.",
        "Experienced developers that have recently started working with Go and want to discover the multithreading tools available.",
        "Delivery managers called Brian Holmes."
      ]
    },
    {
      "title": "Qt 6 C++ GUI Development for Beginners : The Fundamentals",
      "url": "https://www.udemy.com/course/qt6-c-gui-widgets-tutorial-for-beginners/",
      "bio": "Build Cross Platform Desktop Applications and Run Them on Windows, Mac and Linux. Build once, Run Everywhere!",
      "objectives": [
        "The fundamentals of working with Qt to build C++ Gui Applications",
        "Working with Qt Widget Classes",
        "Working with Dialog Classes",
        "Using the Qt Resource System",
        "Styling Qt Applications",
        "Working with Networks to fetch HTTP Data",
        "Working with the File System",
        "Model View Architecture"
      ],
      "course_content": {
        "Welcome": [
          "Welcome",
          "Get Help (Fast)",
          "What you'll build",
          "About the source code"
        ],
        "Environment Setup": [
          "Environment setup - Windows",
          "Environment setup - Linux Ubuntu",
          "Environment setup - Mac",
          "Teaser"
        ],
        "Getting Started , C++ Crash Course": [
          "Introduction",
          "Qt Creator User Interface",
          "Standard C++ Console Apps (Non Qt Console)",
          "Qt Console Apps",
          "Streams",
          "Data Types",
          "Flow Control and Loops",
          "Practice- Guess My Number",
          "Functions",
          "Classes : Declarations and Instantiations",
          "Classes : Constructors",
          "Classes : Multiple Files",
          "Build Process : Declarations and Definitions",
          "Qt GUI Intro",
          "Practice - Guess My Number GUI",
          "Summary"
        ],
        "Memory Management": [
          "Introduction",
          "Heap and Stack Memory",
          "Smart Pointers",
          "Qt Parent Child Relationship",
          "Summary"
        ],
        "Signals and Slots": [
          "Introduction",
          "Lambdas",
          "Signals and Slots",
          "Practice - Slider and ProgressBar Connected",
          "Practice - Calory Counter",
          "Qt6 Property Bindings",
          "Summary"
        ],
        "A tour of Qt Widgets": [
          "Introduction",
          "QWidget",
          "QMainWindow",
          "QMessageBox",
          "QPushButton",
          "QLineEdit",
          "QTextEdit",
          "QLabel",
          "QHBoxLayout",
          "QVBoxLayout",
          "Size Policies And Stretches",
          "QGridLayout",
          "QRadioButton and QCheckBox",
          "QList",
          "QListWidget",
          "QTabWidget",
          "QComboBox",
          "Menus, Toolbars and Actions",
          "Summary"
        ],
        "Dialogs": [
          "Introduction",
          "QDialog",
          "QDialogButtonBox",
          "QFileDialog",
          "QFontDialog",
          "QColorDialog",
          "QInputDialog",
          "Summary"
        ],
        "Resources": [
          "Qt Resource System Theory",
          "Qt Resource System Demo",
          "Summary"
        ],
        "Styling": [
          "Styling Overview",
          "QPalette",
          "Stylesheets - Inline",
          "Stylesheets - External",
          "More with stylesheets",
          "Summary"
        ],
        "Settings": [
          "Settings Theory",
          "Settings Demo",
          "Summary"
        ]
      },
      "requirements": [
        "Basic knowledge of working with Computers",
        "Open mind and strong willingness to learn how to build Qt C++ Gui applications",
        "Basic understanding of programming will be useful but not required"
      ],
      "description": "Welcome to Qt 6 C++ GUI Development for Beginners.\nQt is a cross platform application development framework. It can be used to build Graphical User interfaces that can run on Windows, Mac Linux , mobile platforms like android and ios, even embedded devices.\nThis course will focus on using Qt Widgets to build robust cross platform desktop applications capable of running well on major desktop Operating Systems like Windows , Mac and Linux.\nWhile Qt Widgets can technically run both on mobile and embedded, it's better and less painful to use QML, another technology provided by the Qt framework. If you want to target mobile and embedded, then please check our courses on QML and Qt Quick. This course doesn't QML , Mobile or embedded!\nThe course assumes no prior knowledge of Graphical User Interface Development and even provides a C++ refresher crash course for those in need of a helping hand to get up and running with C++ within the Qt environment. By the time you are done with the course, you'll not only be armed with knowledge you could use to build basic to intermediate Graphical user interfaces, but you will also have enough momentum to use the documentation to even learn more on your own. As with my other courses, I use every chance I get to show you how to use the documentation to find solutions on your own and faster.\nLet's take a look at the content of the course.\nWe start with a complete beginner to both C++ and Qt in mind, and we take  you through the the process of getting your environment set up on your platform of choice :\nWe do a live install of Qt Creator on Windows\nWe do a live install of Qt Creator on Linux\nWe guide you though how you would install Qt Creator on a Mac\nWe then take you on a tour of the C++ programming language, covering the concepts deemed important to start working with Qt to build your shinny GUI applications. You don't need to be a C++ wizard to start writing your applications using Qt. One of the goals behind Qt itself is to be as easy to use as possible, helping you to focus on your application logic rather than the C++ complex plumbing. This does not mean that you can do with zero C++ knowledge though. That's why we take you on a tour to cover the basic concepts of the language covering topics like:\nRunning your first console application and understanding the main function\nStreams that help you write and read data from your C++ applications\nVariables and Data Types\nBasic C++ Operators and Control flow where among other things you learn about if clauses and loops\nBuild an app to guess numbers and put together the concepts learned so far\nC++ Functions\nC++ classes\nBuilding your first Qt C++ GUI Application\nBuilding a GUI Version of your Number guessing game\nWe then visit the fascinating concept signals and slots in Qt where  you learn the most flexible way to respond to events :\nWe'll explore lambda functions in C++ in general, we'll need them to use their SIGNAL SLOT syntax\nWe explore different ways to connect signals to slots in Qt\nWe then do a concept enforcing demo for you to try them out\nNext we dive in the Qt Widgets section and visit some of the most important widget classes in Qt :\nQWidget\nQMainWindow\nQMessageBox\nQPushButton\nQLineEdit\nQTextEdit\nQLabel\nQHBoxLayout, QVBoxLayout, QGridLayout\nWe visit size policies and stretches and how they help tie the knots in  your layouts\nQCheckBox and QRadioButton\nQList\nQComboBox\nQListWidget\nQTabWidget\nQMenu, QToolBar, QAction\nDialogs are explored next , we look at QDialog and how to build  your own custom dialog class from scratch , QDialogButtonBox, QMessageBox, QFontDialog, QFileDialog, QInputDialog and how they add a layer of interactivity to your Qt GUI applications.\nWe then go on and explore how to work with the Qt Resource System , Styling your Qt applications with QStyle, QPalette and Style Sheets, Saving your application settings with QSetting, Working with Files and Directories using QFile and QDir,  working with the network capabilities of Qt where we :\nSee the different classes that are available to work with networks in Qt\nBuild an application to download web pages in our Qt Applications\nBuild an application to consume Rest APIs in your Qt Applications\nand we wrap up the course looking at the Model View Architecture of the Qt framework where we learn about classes like\nQListWidget\nQTableWidget\nQTreeWidget\nQListView\nQTableView\nQTreeView\nQStandardItemModel\nQAbstractItemTableModel\nQAbstractItemListModel\nQStringListModel\nand much more!\nQt has quite a huge user base and there are thousands of projects using both open source and commercial, including the one I am using to record this video right now. If you want to build cross platform graphical user interface applications using C++, this course is designed with the skill, patience and depth, needed to get you there as effisciently as possible. Please check out some of the preview videos and let's get you started building cross platform GUI applications using C++ and Qt 6.",
      "target_audience": [
        "Anyone willing to Build Cross Platform Gui Software using Qt",
        "Complete Beginners",
        "Anyone willing to get a job building Qt Gui Applications",
        "Students and Researchers willing to use Qt Gui features in their projects"
      ]
    },
    {
      "title": "High Performance Coding with .NET Core and C#",
      "url": "https://www.udemy.com/course/high-performance-coding-with-net-core-and-csharp/",
      "bio": "Learn how to write high performance and scalable .NET Core and ASP.NET Core applications in C#",
      "objectives": [
        "Get an overview about the current stage of the .NET platform with focus on .NET Core, ASP .NET Core, and C# 7 with their performance aspects",
        "Get to know tools which are essential to measure the performance of a .NET Core application: Visual Studio Performance Tools, PerfView, BenchmarkDotNet, Perf and LTTng on Linux, Prefix, MiniProfiler",
        "Performance characteristics of value types and reference types, the effect of async/await on performance, and performance of collections in the base library",
        "Behind the scenes knowledge about C# 7: you will see what the compiler generates from C# 7 code and what performance implications this has on your application",
        "New performance related APIs like Span<T>, ArrayPool<T>",
        "Data access performance with Entity Framework Core",
        "Ahead of time compilation for .NET Core with CrossGen, and removing dead code with the .NET IL Linker",
        "Production monitoring for .NET Core and ASP .NET Core with Application Insights and Dynatrace"
      ],
      "course_content": {
        "Setting the Stage": [
          "Course Overview",
          "Note for .NET Core experts",
          ".NET Core History - Performance",
          ".NET Core Concepts and Definitions"
        ],
        "Measure Performance During Development Part 1": [
          "Measuring CPU",
          "Measuring Memory",
          "Visual Studio Performance Tools - PerfTips and Profiler",
          "Visual Studio Performance Tools – The Diagnostic Tools Window"
        ],
        "Measure Performance During Development Part 2": [
          "Event Tracing: ETW and PerfView",
          "Micro Benchmarking with BenchmarkDotNet",
          ".NET Core Performance Diagnostic on Linux",
          "Performance Monitoring on the Developer Machine with Stackify Prefix",
          "Performance Monitoring on the Developer Machine with MiniProfiler"
        ],
        "Make your Code Faster – General Tips for .NET Developers": [
          "Value Types vs. Reference Types and Reducing Pressure on the GC",
          "Value Types vs. Reference Types and Reducing Pressure on the GC - Demo",
          "Saving Threads with async/await",
          "Saving Threads with async/await – Demo",
          "Choosing the Right Collection",
          "Choosing the Right Collection - Demo"
        ],
        "C# 7 Performance": [
          "Performance Impact of C# 7 Features",
          "Avoid Heap Allocations with Local Functions",
          "Make ValueTypes Faster with ref return",
          "The Performance Characteristics of the C# 7 Tuple Feature",
          "Optimization of async-methods with ValueTask",
          "Pattern matching and Performance"
        ],
        "New Performance Related APIs": [
          "Reusing Arrays with ArrayPool<T>",
          "Accessing all Types of Memory Safely and Efficiently with Span<T>",
          "Accessing all Types of memory Safely and Efficiently with Span<T> - Demo"
        ],
        "Data Access Performance: Entity Framework Core": [
          "Make faster Queries with Entity Framework Core",
          "Loading Dependent Entities Efficiently",
          "EF Core Performance: Maximum Length, Client Side Execution, Change Tracking"
        ],
        ".NET Core Specific Performance Tools and Configurations": [
          "Pre-JIT .NET Core Applications with CrossGen",
          "Make your .NET Core Application Smaller with Mono’s Linker",
          "Faster Startup with ASP.NET Core Precompiled Views"
        ],
        "Performance Monitoring in Production for .NET Core": [
          "Enabling Application Insights for ASP.NET Core Applications",
          "Tracking Slow Requests and Performance Testing with Application Insights",
          "Tracking Custom Dependencies with Application Insights",
          "Monitoring .NET Core Applications with Dynatrace"
        ]
      },
      "requirements": [
        "You should have some experience with the .NET framework",
        "You already created at least 1 application either with .NET Core or with the .NET Classic framework",
        "A little bit of .NET Core experience helps, but if you have solid a solid .NET Classic background, then it's also fine"
      ],
      "description": "A few years ago, Microsoft decided to radically redefine the .NET platform. An open-source, cross-platform, high performance flavor of the .NET framework was created: this is .NET Core. Additionally, C#, the most widely used .NET programming language also evolved over the years. These new developments include many performance improvements.\nThe goal of the course is to give you deep understanding about these performance improvements. By applying the knowledge from this course, you will be able to measure and optimize the performance of .NET Core (including ASP.NET Core), C# applications.\nAfter a short wrap-up on .NET Core the course introduces you to the first pillar of the performance topic: measuring performance. You will learn to use tools that you can apply to measure the performance of your code running on .NET Core. Then we will focus on some important performance tricks like reducing the pressure on the GC by using value types or choosing the right collection for the given problem. After that we will see what the compiler does behind the scenes when it compiles your C# 7 code and what performance implications this has. We will talk about some new performance related APIs like ArrayPool and Span and we will also look into the performance aspects of Entity Framework Core. We will talk about the ahead of time compilation story for .NET with CrossGen and IL trimming with the .NET IL Linker. We will finish the course by learning about production performance monitoring for .NET Core.\n\n\n\nGoal of the course\nUnderstanding why .NET Core and ASP.NET Core are great platforms to create high performance applications\nLearning about tools that can measure the performance of your .NET Core code: Visual Studio Performance Tools, BenchmarkDotNet, MiniProfiler, Stackify Prefix, LTTng and Perf on Linux, ETW and PerfView\nUnderstand the latest language features of C# and how they affect performance\nAdvanced tools to improve the performance of your .NET Core and ASP.NET Core applications: Span<T>, ArrayPool<T>, ASP.NET Core Precompiled Views, Entity Framework Core performance, .NET IL Linker, AOT compilation with CrossGen.\nPerformance monitoring in production for .NET Core and ASP.NET Core: Application Insights and Dynatrace\n\n\nCourse style\nThe course is a mix of theory and practice. Tools and concepts with their theoretical background will be introduced with slides and then the theoretical knowledge will be applied in demos.",
      "target_audience": [
        "If you are a .NET Core developer and you want to make sure your application does not break under production load then this course is for you!",
        "Furthermore, if you are interested in performance and you like looking behind the scenes and understanding what really happens in your application then you will also find this course interesting."
      ]
    },
    {
      "title": "Domain Driven Design & Microservices for Architects",
      "url": "https://www.udemy.com/course/domain-driven-design-and-microservices/",
      "bio": "Learn how to build Microservices applications starting with business analysis and domain driven design",
      "objectives": [
        "Domain Driven Design",
        "Architecting Microservices Application",
        "Design Patterns for building Microservices & Distributed systems",
        "Event Driven Architecture",
        "Developing API for Microservices",
        "Event Storming",
        "Develop a Business case for Microservices"
      ],
      "course_content": {
        "Course Ouline": [
          "Author introductions and Course outline",
          "Development tools and setup"
        ],
        "Microservices Architecture": [
          "Microservices Architecture",
          "Business & Digital Transformation",
          "A Business Perspective of Microservices",
          "A Technical Perspective of Microservices",
          "Adoption of Microservices Architecture"
        ],
        "Introduction to Domain Driven Design": [
          "Domain, Sub-Domain and Domain Experts",
          "Conceptual models, Architecture and Design",
          "Modeling techniques & Architectural Styles",
          "Domain Models",
          "Modeling techniques & Architectural Styles"
        ],
        "Understanding the Business Domain": [
          "Why understand the Business?",
          "Introduction to Business Model Canvas",
          "Exercise : ACME Travels Business Model Canvas"
        ],
        "Domain Driven Design : Strategic Patterns": [
          "Introduction to DDD and Patterns",
          "Business Subdomain Types",
          "Exercise : ACME Subdomain Type Assignment",
          "Understanding the Business Context",
          "Business Domain Language",
          "Strategic Pattern : Ubiquitous Language",
          "Exercise : Define ACME's Ubiquitous Language",
          "Strategic Pattern : Bounded Context",
          "Discovering the Bounded Contexts in a Domain",
          "Exercise : Identify ACME's Bounded Contexts"
        ],
        "Bounded Context Relationships": [
          "Intro to DDD Integration Patterns",
          "Managing BC Relationships using Context Maps",
          "Symmetric Relationship Patterns",
          "Asymmetric Relationship Patterns",
          "One to Many Relationship Patterns",
          "Exercise : Context Mapping for a Bank"
        ],
        "Domain Driven Design - Tactical Patterns": [
          "Intro to DDD Tactical Patterns",
          "Entity Object - Pattern",
          "Value Object - Pattern",
          "Exercise : Identify Entity & VO in ACME Sales Model",
          "Hands On : Building the ACME Sales Entities & VO in JAVA",
          "Aggregate & Factory - Pattern",
          "Exercise : ACME Sales Use Case",
          "Hands On : UML for ACME Sales Aggregates",
          "Model Behavior : Anemic & Rich Models",
          "Repository Object - Pattern",
          "Hands On : ACME model Repository in UML & JAVA",
          "Domain Service - Pattern",
          "Application Services - Pattern",
          "Infrastructure Services - Pattern",
          "Hands On : ACME Domain Service, UML & JAVA",
          "Hands On : Application and Infrastructure Services, UML & JAVA"
        ],
        "Events Driven Architecture & Domain Events": [
          "Intro to Events in Microservices",
          "Monolithic & Distributed Communication Patterns",
          "Microservices Interaction Patterns",
          "Event Driven Architecture",
          "Hands On : Pub Sub with AMQP/RabbitMQ",
          "Domain Events - Pattern",
          "Hands On : Static Class Broker Pattern",
          "Exercise : ACME Sales Domain Events",
          "Hands On : Realization of ACME Domain Events",
          "Integration Events - Pattern",
          "Exercise : ACME Sales Integration Events",
          "Hands On : Realization of ACME Integration Events (1 of 2)",
          "Hands On : Realization of ACME Integration Events (2 of 2)"
        ],
        "Event Storming for creating shared knowledge": [
          "Learning Objectives : Discovering the Events in a Domain",
          "Introduction to Event Storming",
          "Elements of Event Storming",
          "Preparing for the ES Workshop",
          "Conducting the ES Workshop",
          "Exercise : ACME Sales ES Workshop"
        ],
        "Microservices Data Management Patterns": [
          "Introduction to Microservices Data Persistence",
          "Monolithic Apps - Shared Persistence Storage",
          "Service Oriented Architecture (SOA)",
          "Separate Database pattern",
          "Brownfield Microservices : Database patterns | options",
          "Shared Database Pattern",
          "Shared Database : Challenges & Solutions"
        ]
      },
      "requirements": [
        "Understanding of software development practices",
        "Basic knowledge JAVA or any other programming language"
      ],
      "description": "PS: Focus is on designing Microservices not coding\nNo specific Microservices framework in use\nAll sample code is in plain JAVA to demonstrate/clarify understanding of DDD patterns, etc.\nModels are developed in UML - using the PlantUML tool\nPostgreSQL/MongDB/RabbitMQ/Kafka - free instances created on the cloud for demos & walkthroughs\nPLEASE Do NOT join the course if you are looking for tutorials on Microservices Coding or specific framework!!!\nWhat is this course about?\nMicroservices is a new way of building software in which an application is composed of an independent set of services. The biggest benefit of Microservices is that it enables an organization to transform at a very rapid pace. This speed to market is achieved due to the independent nature of the services that make up a Microservices application. Companies like Amazon, Netflix and Etsy have proven the value of Microservices beyond doubt.\nMany organizations today are looking to adopt Microservices. These organizations are investing in technologies, tools, skills and are changing their software development and delivery processes as well. But still many organizations are failing to achieve the full benefits of Microservices; in fact many organizations feel that they have created technical debt by adopting Microservices.\nSo why is it that some organizations have been successful in adopting Microservices while others are not. One common aspect I have observed in companies that fail to adopt Microservices is that they treat Microservices as a purely technology initiative. They do not spend time in understanding the business aspects of their Microservices applications  !!!\n\n\nMicroservices is NOT just about technology\nThe key element of the Microservices architecture is that services are Independent. This independent aspect of the service is what makes it possible for Microservices to change independently of other services. If scope of the microservices is leading to inter-dependencies between services then it would lead to a need for change coordination between teams which in turn will lead to the same problems we have with Monolithic applications !!! Release cycles will be longer and there will be no benefit of the adoption of Microservices.\nTo ensure that these is no interdependencies between Microservices, a Microservices architect needs to understand the domain and then decide on the boundary and scope of the Microservices. This is where Domain Driven Design comes into picture. Once the Microservices business boundaries are defined the services should be built using appropriate Microservices design patterns and technologies.\nTeams working on Microservices should not just look at the technical aspects of the service but MUST keep in mind that there are other considerations that play a critical part in the success of Microservices initiative. In order to\n\n\nRole of a Microservices Architect\nAn IT professional working in the role of Microservices architect is responsible for may aspects depending on the maturity of Microservices adoption in their organization. Here are the list of activities that the architects is responsible for:\nEvaluate the business benefits of Microservices for their specific organization\nBuild a Business case for Microservices\nEducate the Business & IT stakeholders on pros/cons of Microservices\nApply Domain Driven Design to demarcate the boundaries of Microservices\nDefine the domain model for the Microservices\nDo the technical design of Microservices\nGuide and Mentor the Microservices teams\nEvaluate the technologies | frameworks for the realization of Microservices\nBuild proof of concepts to show how things work\nHow will this course help?\nThis course will help developers & architects in building skills needed for successful implementation of Microservices applications. It consists of a combination of concepts, UML modelling and working code to demonstrate the implementation of Microservices. Students will learn the concepts of Domain driven design by way of common industry examples and a case study (ACME travels).\n\n\nFocus is on Architecture, Design and Development of Microservices.\n\n\n1. Transformation & Microservices\n2. Domain Driven Design\n3. Applying the DDD strategic & tactical pattern\n4. Event Driven Architecture\n5. Event Storming\n6. Data Management\n7. Messaging\n8. Distributed Transactions\n9. API\n\n\nIMPORTANT:\nCode Samples\nFocus is on the Microservices design not coding.\nAll of the sample code is in plain JAVA\nCourse does NOT cover any specific framework\nSpringBoot is used in samples for API/GraphQL section\nPlease check out the course preview lectures before enrolling the course.\nReview the topics covered\nMake sure you understand instructor's accent\n\n\nPre-Requisites\nBasic understanding of JAVA or any other programming language\nSome experience with software development practices\nPS:\nHand on part is optional but students are encouraged to do hands on tasks to get a better feel of the design patterns.",
      "target_audience": [
        "Software Developers",
        "Software Architects",
        "Product Managers",
        "Students interested in Microservices"
      ]
    },
    {
      "title": "DevOps on AWS: Learn to set up your infrastructure on cloud",
      "url": "https://www.udemy.com/course/devops-on-aws-learn-to-set-up-your-infrastructure-on-cloud/",
      "bio": "A project based unique course which will teach you Cloud Computing and DevOps both from ground up.",
      "objectives": [
        "Learn to set up development and production infrastructure on AWS",
        "Learn best practices for cloud",
        "Learn DevOps tools and processes to leverage cloud capabilities",
        "Learn to build scalable systems"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Introduction to Cloud Computing": [
          "Cloud Computing Definition",
          "Pros and cons for cloud computing",
          "Software Methodologies",
          "Introduction to DevOps and AWS",
          "Section 2"
        ],
        "Building Infrastructure on AWS": [
          "Signing up to AWS",
          "Securing your Account",
          "AWSCLI installation and configuration",
          "Instace requirements",
          "Running your first instance",
          "Deploying a web server in the cloud",
          "Section 3"
        ],
        "Cloud Formation and Troposphere": [
          "Introducing Cloud Formation",
          "Working with troposphere",
          "Working with troposphere (2)",
          "Adding output to the template",
          "Uploading the template to CF",
          "Introducing Git",
          "Section 4"
        ],
        "Setting a Complete Environment": [
          "Introducing Ansible",
          "Setting up Dynamic AWS Inventory",
          "Running your first Ansible command",
          "Using Ansible playbooks",
          "Introducing Ansible roles",
          "Creating a role for PHP",
          "Creating a role for Apache",
          "Introducing Ansible pull",
          "Verifying our cron job",
          "Section 5"
        ],
        "CI/CD Best Practices": [
          "What is CI,CD-",
          "The Jenkins role",
          "Create CF template for Jenkins",
          "Deploying Jenkins",
          "Writing and testing our code",
          "CI in Jenkins",
          "Creating the staging EC2 instance CF template",
          "Install CodeDeploy on the staging environment",
          "Create the Code Deploy service",
          "Creating continuous deployment using CodeDeploy and CodePipeline",
          "Section 6"
        ],
        "Summary": [
          "Summary",
          "Bonus Lecture: More Interesting Stuff, Offers and Discounts"
        ]
      },
      "requirements": [
        "The course requires basic programming knowledge to complete the projects"
      ],
      "description": "The one stop shop for learning DevOps on AWS, to help master DevOps concepts, along with the AWS tools.\nDeveloping is a time consuming process, that requires coding, testing, bug fixing, recoding, testing, deployment. This process takes weeks, months and sometimes even years depending on how complex the software is. But what if you could reduce this process to hours and weeks, this is exactly what DevOps does.\nDevOps looks at automating the entire process of testing and deployment to reduce the amount of work that a developer needs to do. This makes it not only easier to build more products, but it also makes it faster to work on the changes and putting the new updates into the pipeline.\nAWS offers powerful cloud features which can help scale your application easily to millions of users. We bring together an unique course which will help you create your production and deployment environment on cloud and will teach you implement the best of cloud computing practices.\nThis is why companies are looking to hire DevOps and AWS architects that can help them build this process and design better apps and software, faster and in a more sophisticated manner. However, learning DevOps and AWS isn’t easy. It requires an understanding of basic DevOps concepts and AWS tools, along with programming languages.\nThis is why we have designed this course! This DevOps on AWS tutorial helps breakdown simple DevOps and AWS concepts and builds upon to them to help you learn exactly how to code using DevOps and AWS, as well as test and deploy your apps on the cloud platform.\nThe course will cover topics such as what is DevOps, why it is trending and how it came into existence, as well as introduction to cloud computing and how to benefit from the AWS cloud platform. It also includes building a very basic web application on the cloud, utilizing tools like Ansible and Jenkins and also learning how to use AWS tools such as CloudFormation, CodeDeploy and CodePipeline. Lastly, you will also learn how to actually deploy apps on AWS instances automatically and also achieve continuous integration using DevOps and AWS tools.\nAt the end of this course, not only will you have mastered the concepts required to understand DevOps and AWS, but you will also learn exactly how to get started working with these tools and even how to actually build an app and deploy it on the cloud.\nEnroll now and become a DevOps and AWS master with this course!",
      "target_audience": [
        "Any one who wants to learn cloud computing and DevOps will find this course very useful"
      ]
    },
    {
      "title": "Technical Product Management: learn on 4 real industry cases",
      "url": "https://www.udemy.com/course/technical-product-manager/",
      "bio": "Boost your technicality (as a PM) or tech product skills (as an engineer) to grow in your current role",
      "objectives": [
        "Why does a Tech Product Manager role popularity grow in IT industry and examples of the companies hiring TPMs today",
        "*Please note*: I do NOT teach basic PM-ing here - this course is an add-on to boost your existing skills, not to make you a PM from scratch!",
        "How to decompose large tech business problems and find/utilize tech insights (based on 4 real industry examples)",
        "What are the must-know Tech Product building blocks of any real service: APIs, architecture, reliability, monitoring, etc.",
        "What is the difference between a Tech PM and a PM, Developer, Program and Project manager, in a big company or a startup",
        "How to become a Tech Product Manager: growth reading materials for a PM or a Developer (no repetition of the PM base)",
        "How to improve projects at your current job with a Tech Product approach",
        "Bonus: feel free to message me with any questions you have regarding the course or your own product"
      ],
      "course_content": {},
      "requirements": [
        "Basic understanding of a Product management role: in order to make the course concise and to the point I DO NOT teach you basic PM-ing as there are already enough good courses on the topic",
        "Basic understanding of IT industry terms (e.g. service, API, metric)",
        "Curiosity to build products in the tech area or improve your existing ones by understanding their tech product side"
      ],
      "description": "Why Technical Products Management?\nThis course is about Tech Product Manager - a rapidly growing role in today's IT industry.\nMany innovative companies (Google, Amazon, Facebook, Booking, Uber, etc) build a big portion of their value on the non-intuitive (for a classical product perspective) tech insights and need a mix of product and technical skills to drive it from a vague idea to the end customer facing solution. Think Google Search: minimum UI, but maximum algorithmical and infrastructural magic which almost fully determines a value and the overall experience. As you probably guessed, search algorithms and large-scale infrastructure are two examples of Tech PM sweet spots.\nBut it is a mistake to think that unless you work for one of IT-giants, there is no application of Tech PM skills. Look around for a second —mostly everything you encounter is an online-service of some size: you book a flight and hotel online, order food, learn guitar, sometimes even do guided sport and renew a passport with your government — everything is online. All of these products do not hang in the air — they are powered by ecosystems of actual software (e.g. Java) services and there is a product leader with a team driving them in the right (or wrong) direction. The moment mostly everything in the product becomes a service, the leader naturally gets involved in a Tech PM area.\nOk, landscape is changing, but does the required PM skill set changes together with it? I think, that partially — yes. To illustrate it, we might roughly estimate, that for any successful Product Manager (or an entrepreneur) in any modern IT-project (including startups) there are critical, important and nice-to-have set of skills:\nProduct Management base (critical, ~50% of success) to know how to deal with customer requirements, in other words to have a solid PM base (i do not teach it here - there are already hundreds of courses on the topic)\nTechnical Product Addition (important, ~30% of success) to easily combine external and internal systems together, keep in mind non-functional requirements (architecture, security, infrastructure, reliability, etc) and at the end turn a product idea into a real practical IT service. The course is exactly about this part.\nDomain knowledge (nice to have, ~20% of success) a specific domain knowledge on top (e.g. about payments, or about ML, or a content processing, etc) to ask the right questions and go deeper if your product needs it. It is nice to have because you can always learn if your product and tech product base is strong enough.\n\n\nWhy i can talk about Tech Product Management?\nI have a solid tech background (a PhD in Computer Science with 7 years of software development) and then 7 years of the Tech Product management at Booking. com in different product and tech departments. In other words, i have a lot to share with you regarding Tech PMing. Also I am a founder of productdo. io - practical simulators to boost PM skills in action, not in theory.\n\n\nStructure of the course\nIn the Part 1 I explain in details why Tech PM role is gaining popularity with the examples of Google, Uber, AWS, Stripe, etc. and set the course goals.\nIn the Part 2 I quickly cover specifics of the Tech PM role (it is expected that you already know PM basis from another course) and explain the main difference between a Technical Product Manager, a classical Product Manager, an Engineer, a Project Manager and a Technical Program Manager (completely different roles!). It will help you to frame the right context and avoid a confusion about who does what.\nThe core practical Part 3 of the course consists of the 4 real tech product use cases (different industries and company setups), which i solve for you applying Tech PM thinking process. There are also quizzes after each case and the final assignment to solidify your knowledge. Students who understood and completed all the assignments of this part would be able to apply TPM approach to their projects.\nIn the Part 4 I provide learning directions of how to grow your Tech PM skills. I first cover main Tech Product building blocks (APIs, infrastructure, architecture, monitoring, reliability, security) and then give you links to a lot of external materials to boost your technicality and PM skills.\nEnjoy and join a growing community of Tech Product Managers passionate about building rockstar products on yet undiscovered tech insights!",
      "target_audience": [
        "Product managers who would like to boost their understanding of tech part of the product or even shift into a technology field",
        "Developers who would like to boost their product approach to their daily projects or even switch to a Tech PM role",
        "Beginners, who are trying to understand what branch of PMing they should pursue"
      ]
    },
    {
      "title": "Developing a C Compiler From Scratch - Module 1",
      "url": "https://www.udemy.com/course/creating-a-c-compiler-from-scratch-module-1/",
      "bio": "Compiler Design, Compiler Development, Lexical Analysis, Parsing, Code Generation, Abstract Syntax Trees",
      "objectives": [
        "How to build a C compiler from scratch",
        "Full understanding of stackframes and how assembly language is generared for a C source file",
        "Complete Understanding of lexical analysis and parsing",
        "Stronger Assembly language skills will be gained",
        "Compiler Design"
      ],
      "course_content": {},
      "requirements": [
        "You must have a basic experience of assembly language."
      ],
      "description": "Are you ready to learn compiler design and compiler development and prove your a master programmer?\nLearn to create your very own C compiler from scratch. In this course we develop a compiler that compiles a subset of the C Programming Language. By the time you finish all modules of this course you will be able to compile C programs that use pointers, structures, unions, arrays, functions, for loops, while loops. do while loops, if statements, switches and much more!\nOur compiler also has a preprocessor macro system allowing you to include header files and create definitions just like you would in any C file.\nYour compiler is advanced enough to use the GCC standard library so we are able to call C functions from our compiler. Your compiler will be able to compile the C programming language.\nThis course does not rely on any frameworks we do everything from scratch to ensure the best possible learning experience for students\n\n\nModule 1\nIn module 1 of this course we load our C source file that we wish to compile, into memory. We create a lexer to preform lexical analysis on the source input which will convert the source code into a bunch of tokens that our compiler can easily understand. We then pass the tokens through a parser to produce an abstract syntax tree. An AST describes the C program in a logical way that makes it easier for our compiler to understand. For example for the expression 50 + 20 you will end up with a root expression node that has a left operand that has a node of value 50 and a right operand that has a node of value 20. Breaking down problems in this way makes it much easier to create compilers.\n\n\nThroughout the whole course series you will learn to create a fully functioning C compiler.",
      "target_audience": [
        "People with an interest in compiler design",
        "People who are interested in assembly language",
        "People who are interested in the C Programming language"
      ]
    },
    {
      "title": "Building an Enterprise Application with ASP.NET Core MVC",
      "url": "https://www.udemy.com/course/building-an-enterprise-application-with-aspnet-core-mvc/",
      "bio": "Full-Stack MVC Web Application with ASP.NET Core 3.0, ASP.NET Core 2.2 & Entity Framework Core",
      "objectives": [
        "Implement multi-layered architecture and their dependencies on each other",
        "Using .net core Class Libraries",
        "Implementing several business logic",
        "Creating Interfaces and their Implementations",
        "Creating Controllers, Injecting Interfaces in Controllers",
        "Registering a Service for Dependency Injection (DI)",
        "Receiving data from request to Controllers",
        "Passing data from Controllers to View",
        "Tracking changes in project files using GIT",
        "Passing data collection using ViewBag object",
        "Creating Action Methods, Action Methods with Parameter",
        "Create Entity Data Model",
        "Query Entity Data Models using LINQ - Inserting, Updating, Retrieving, Filtering, Ordering etc....",
        "Using ViewModels, access a ViewModel object",
        "User Input Data Validation",
        "Validation using Regular Expression",
        "Understanding Domain Classes vs ViewModel classes",
        "Model Binding & Mapping",
        "Creating a Layout View (Master Page)",
        "Creating CRUD Views (without using the scaffolding wizard)",
        "Form's Data Persistence",
        "Pagination logic",
        "Data Seeding Initializer",
        "Create the Entity Framework (EF) Core Context",
        "Using EF Core to initialize the database",
        "Configure EF Core to use SQL Server",
        "Configure connectionStrings in AppSetting .json file (for both local and remote SQL Server Databases)",
        "Security - Preventing Cross-Site Request Forgery (CSRF) attacks, Identity, Authentication & Authorisation",
        "Data Migration from SQL Server LocalDb to Azure Cloud SQL Server",
        "Deploying Application to Azure Cloud",
        "Pushing to final Source Code to a Remote Repo"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Demo - Completed Application",
          "Development Tools & Installations"
        ],
        "Software Architecture": [
          "Software Architecture Used",
          "Create Solution & Layers",
          "References & Dependencies"
        ],
        "Domain Models & DbContext Class": [
          "Employee Domain Model",
          "PayRecords Domain Model",
          "Enums",
          "ApplicationDbContext & Migration"
        ],
        "Git - Version Control System (VCS)": [
          "Git Configuration"
        ],
        "Employee Service": [
          "IEmployeeService - Interface",
          "EmployeeService - Implementation",
          "Git - Tracking Entire Solution"
        ],
        "Employee Controller & Employee ViewModels": [
          "Index Action Method - EmployeeController",
          "EmployeeCreateViewModel & Data Input Validation",
          "Create Action Method - EmployeeController",
          "Edit Action Method - EmployeeController",
          "Detail Action Method - EmployeeController",
          "Delete Action Method - EmployeeController"
        ],
        "Built-in Dependency Injection (DI)": [
          "Register a Service for Dependency Injection (DI)"
        ],
        "Layout View": [
          "_Layout.cshtml - Top NavBar",
          "_Layout.cshtml - Finalised"
        ],
        "Employee View": [
          "Index.cshtml - Employee View",
          "Create.cshtml - Employee View",
          "Edit.cshtml - Employee View",
          "Detail.cshtml - Employee View",
          "Delete.cshtml - Employee View"
        ],
        "Payroll Computation Services": [
          "IPayComputationService - Interface",
          "PayComputationService - Implementation",
          "TaxComputationService - Interface and Implementation",
          "NationalInsuranceContributionService - Interface and Implementation",
          "StudentLoanRepayment Calculation",
          "Union Fees"
        ]
      },
      "requirements": [
        "Basic Object-Oriented Programming experience",
        "Html & CSS fundamentals"
      ],
      "description": "Building an Enterprise Application with ASP.NET Core MVC\nFor those with basic OOP knowledge & new ASP.NET Core , this course will use a project-based approach to teach ASP.NET Core full-stack web application development, Using the latest .net core SDK as of the time of production.\n\".NET Core is an open-source, general-purpose development platform maintained by Microsoft and the .NET community on GitHub. It's cross-platform (supporting Windows, macOS, and Linux) and can be used to build device, cloud, and IoT applications.\" - Microsoft.\nIn this course, we will be developing a web-based, modular Enterprise Payroll Software using the popular ASP.NET Core Framework. We will use a multi-layered architecture and it will be hosted on Azure Cloud.\n\n\nProject Technology Stack & Tools used\n\n\n- C# Programming language\n- .NET Core 2.2 & 3.0 SDK Covered\n- MVC\n- Entity Framework Core\n- LINQ\n- Visual Studio 2019\n- Bootstrap 4\n- SQL Server, Server Management Studio\n- GIT Version Control System (VCS), Version 2.22.0\n- RotativaCore (NuGet Library for PDF)\n- Cmder (Console Emulator for Windows)\n- Azure Cloud Portal",
      "target_audience": [
        "Beginner - Advanced Developers who want to learn the latest ASP .NET Core and Entity Framework Core",
        "Beginner - Advanced Developers who want to build an enterprise application from scratch"
      ]
    },
    {
      "title": "Arduino Embedded C With Electronics/Schematics/PCB",
      "url": "https://www.udemy.com/course/arduino-firmware-programming-with-electronicsschematicspcb/",
      "bio": "Learn all about schematics, Printed Circuit Boards and Firmware Programming With Embedded C",
      "objectives": [
        "All about Arduino and firmware programming",
        "Designing Electronic Schematics",
        "Designing PCB(Printed Circuit Boards)"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Development": [
          "Current Vs Voltage",
          "What is a breadboard?",
          "Your First Circuit",
          "Blinking An LED Programmatically",
          "Resistance And Ohm's law",
          "Programming Push Buttons With Arduino",
          "Understanding Diodes",
          "Interrupting The Arduino",
          "Understanding Capacitors",
          "Programming an LCD Display With Arduino",
          "Multimeters And How To Use Them",
          "Arduino Serial Communication",
          "Potentiometers In Circuit",
          "Working With Analog Signals In Arduino",
          "Basics Of Inductors",
          "Arduino Whack A Mole Game",
          "Voltage Regulators Explained"
        ],
        "Schematics And PCB": [
          "Installing KiCad Schematic Software",
          "Creating KiCad schematic",
          "Wiring the PCB",
          "Creating A Schematic And PCB for Whack A Mole"
        ],
        "Bonus": [
          "Real Electronics On Real Hardware",
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "Understanding Of Programming At A Basic Level"
      ],
      "description": "In this course you will learn all about the Arduino board and how to program it. We go through various stages in this course and you are taught all about the basics of electronics and how to program Arduino firmware with Embedded C.\nIf you have never even picked up a wire in your life then this course is for you, by the end of this course you will have all the experience you need to get a good grade in a university module that's based on Arduino. You will have the experience required to further your education and you will know how to create some really fun little exercises in Arduino.\nNot to mention you will also understand the basics of electronics at a fundamental level and have experience with various components such as resistors, LED's, diodes, capacitors and much more.\nYou are taught all about schematics and how to read and write them, as well as how to create printed circuit boards from these schematics so that you can have your very own circuit board shipped to your home based on your design!\nThis course also includes a Whack A Mole Game where you are taught how to create your very own little Arduino electronic game using LED's  and push buttons\nThis course has a 30 day money back guarantee if you are not satisfied you can have your money back",
      "target_audience": [
        "Beginner Firmware Developers",
        "Beginner's with Electronics",
        "People who want to learn how to read and create schematics",
        "People who want to learn how to create PCB(Printed Circuit Boards)"
      ]
    },
    {
      "title": "Learn Parallel Computing in Python",
      "url": "https://www.udemy.com/course/parallel-computing-in-python/",
      "bio": "Discover Multithreading, Multiprocessing, Concurrency & Parallel programming with practical and fun examples in Python",
      "objectives": [
        "Discover how to create responsive and high performance software.",
        "See how to use multithreading and multiprocessing for modeling certain types of problems.",
        "Develop programs with Python that are highly Concurrent and Parallel.",
        "Understand the advantages, limits and properties of Parallel computing.",
        "Improve your programming skills in Python with more advanced, mulithreading and multiprocessing topics.",
        "Learn about threads, processes, mutexes, barriers, waitgroups, queues, pipes, condition variables, deadlocks and more."
      ],
      "course_content": {
        "Introduction": [
          "Understanding Parallel Computing",
          "More on Parallel Computing",
          "Links and Resources for this course"
        ],
        "Creating Threads and Processes": [
          "Processes and Threads",
          "Threads in Python and the GIL (Global Interpreter Lock)",
          "Creating our first Thread",
          "Processes in Python",
          "Creating our first Processes"
        ],
        "Memory Sharing between Threads": [
          "Memory Sharing",
          "Letter count Implementation",
          "Letter count using Memory Sharing"
        ],
        "Thread Synchronization with Mutexes": [
          "Why do we need Synchronization?",
          "Adding Mutexes to Letter Count",
          "Adding Mutexes to Letter Count Implementation"
        ],
        "Waiting for Completed tasks using Joins": [
          "Understanding Joins",
          "File Search Example",
          "Concurrent File Search"
        ],
        "Synchronization using Condition Variables": [
          "Introduction to Condition Variables",
          "Condition Variables for Wait Groups",
          "Implementing Wait Groups with Condition Variables",
          "Using Wait Groups"
        ],
        "Barriers Explained": [
          "What’s a Barrier?",
          "Example Barrier Application: Matrix Multiplication",
          "Matrix Multiplication Implementation",
          "Multi Threaded Matrix Multiplication with Barriers",
          "Multi Threaded implementation with Barriers"
        ],
        "Memory Sharing between Processes": [
          "How can Processes share Memory?",
          "Using Process Memory Sharing",
          "Process Memory Sharing in Practice"
        ],
        "Communication using Message passing": [
          "Communication with Pipes and Queues",
          "Examples of using Pipes and Queues",
          "Pipelining Example",
          "Single Process implementation",
          "Multi Process implementation",
          "Thread and Process Pools",
          "Process Pool Example Part 1",
          "Process Pool Example Part 2",
          "Shoelace algorithm explained (optional)"
        ],
        "Avoiding Deadlocks": [
          "Deadlocking Robots, Philosophers and Trains",
          "Simple Deadlock Example",
          "Train Deadlock Example Part 1",
          "Train Deadlock Example Part 2",
          "Solving Deadlocks using Resource Hierarchy",
          "Implementing Resource Hierarchy Solution",
          "Solving Deadlocks using an Arbitrator",
          "Implementing Arbitrator Solution"
        ]
      },
      "requirements": [
        "Some experience of programming in Python (enough if you know how to use functions, lists and dictionaries).",
        "Recent version of Python installed.",
        "Being able to do 50 pull ups while shouting a unique prime number on each rep (just kidding)."
      ],
      "description": "The mood in the meeting on the 12th floor of an international investment bank was as bleak as it gets. The developers of the firm met to discuss the best way forward after a critical core application failed and caused a system wide outage.\n\n\n\"Guys, we have a serious issue here. I found out that the outage was caused by a race condition in our code, introduced a while ago and triggered last night.\" says Mark Adams, senior developer.\n\n\nThe room goes silent. The cars outside the floor to ceiling windows slowly and silently creep along in the heavy city traffic. The senior developers immediately understand the severity of the situation, realizing that they will now be working around the clock to fix the issue and sort out the mess in the datastore. The less experienced developers understand that a race condition is serious but don't know exactly what causes it and therefore keep their mouths shut.\n\n\nEventually Brian Holmes, delivery manager, breaks the silence with \"The application has been running for months without any problems, we haven't released any code recently, how is it possible that the software just broke down?!\"\n\n\nEveryone shakes their heads and goes back to their desk leaving Brian in the room alone, puzzled. He takes out his phone and googles \"race condition\".\n\n\nSound familiar? How many times have you heard another developer talking about using threads and concurrent programming to solve a particular problem but out of fear you stayed out of the discussion?\n\n\nHere's the little secret that senior developers will never share... Multithreading and Multiprocessing programming is not much harder than normal programming. Developers are scared of concurrent programming because they think it is an advanced topic that only highly experienced developers get to play with.\n\n\nThis is far from the truth. Our minds are very much used to dealing with concurrency. In fact we do this in our everyday life without any problem but somehow we struggle to translate this into our code. One of the reasons for this is that we're not familiar with the concepts and tools available to us to manage this concurrency. This course is here to help you understand how to use multithreading and multiprocessing tools and concepts to manage your parallel programming. It is designed to be as practical as possible. We start with some theory around parallelism and then explain how the operating system handles multiple processes and threads. Later we move on to explain the multiple tools available by solving example problems using concurrent programming.\n\n\nIn this course we use the Python language, however the concepts learned here can be applied to most programming languages.\n\n\nAll code in this course can be found on github, username/project: cutajarj/multithreadinginpython",
      "target_audience": [
        "Developers who want to take their career to the next level by improving their skills and learning about concurrent and parallel programming.",
        "College students currently learning about parallel computing who want to see how concepts learned in class relate to practice.",
        "Experienced developers that have struggled with this topic and want to give it another try using a different approach.",
        "Delivery managers called Brian Holmes."
      ]
    },
    {
      "title": "Learn Multithreading in C++",
      "url": "https://www.udemy.com/course/cplusplus-multithreading/",
      "bio": "Modern C++ multithreading: threads, async, tasks, locks, futures, promises, conditions and more.",
      "objectives": [
        "How to use multithreading in C++ 17 onwards."
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Where to Find Source Code",
          "Hello World",
          "Basic Multithreading",
          "When is Multithreading Useful"
        ],
        "Locks": [
          "Shared Data",
          "Mutexes",
          "Function Arguments",
          "Lock Guards",
          "Threads with Callable Objects"
        ],
        "Returning Values from Threads": [
          "Calculating Pi",
          "Promises and Futures",
          "Promises and Exceptions",
          "Packaged Tasks"
        ],
        "Signalling": [
          "Waiting for Threads",
          "Condition Variables",
          "Checking Condition Shared Resources",
          "Blocking Queues",
          "Using Methods in Threads",
          "Containers and Thread Safety",
          "Producer Consumer",
          "A Blocking Queue"
        ],
        "Processing Work Efficiently": [
          "Async",
          "Hardware Concurrency",
          "Launching Lots of Threads",
          "A Thread Pool",
          "Distributing Work Between Cores",
          "Timing Code"
        ],
        "Conclusion": [
          "Conclusion"
        ]
      },
      "requirements": [
        "Be able to code in C++"
      ],
      "description": "An introduction to multithreading, and to the powerful multithreading features added to C++ in 2011, 2014 and 2017.\nTake your C++ to the next level!\n\n\nAmong other things, you'll learn the following in this course:\nHow to create threads using the thread class or async\nHow to work with promises, futures and tasks\nHow to use mutexes and locks to coordinate multiple threads\nHow to use conditions to signal between threads\nHow to create blocking queues and thread pools\nIn this course I'll break complex multithreading concepts down into simple steps, demonstrating practically, in front of your eyes, how you can make use of multiple threads to accomplish tasks that would be difficult or horribly slow without multithreading.",
      "target_audience": [
        "C++ developers"
      ]
    },
    {
      "title": "Software Architecture: Dependency Injection for C# Devs",
      "url": "https://www.udemy.com/course/dependency-injection/",
      "bio": "Learn Dependency Injection techniques along with an IoC-framework (DI-Container). Grow Architecture applying DI.",
      "objectives": [
        "Deeply understand the concepts of Dependency Injection and Inversion of Control",
        "Apply Dependency Inversion Principle (DIP) in practice",
        "Understand the concept of DI-Containers (IoC-Containers)",
        "Build a trivial IoC-Container on your own",
        "Apply existing IoC-Containers (frameworks)",
        "Refactor your code by applying DI coming up with significantly improved Architecture",
        "Write unit tests (this course includes introduction to Unit Testing)",
        "Apply AOP (aspect-oriented programming) techniques"
      ],
      "course_content": {
        "Before taking the Course": [
          "How to Ask Questions",
          "Introduction to Unit Testing",
          "Download Source Code and Slides",
          "English Subtitles",
          "Join .NET Community of Students"
        ],
        "Dependency Inversion Principle and Dependency Injection": [
          "Outline",
          "Definition of DIP",
          "Dependencies",
          "Volatile and Stable Dependencies",
          "Definitions of IoC and DI",
          "DIP Violation Demo",
          "Refactoring to a Better Design Applying Dependency Injection",
          "Dependency Injection Techniques",
          "Architectural Implications",
          "Common Smells of DIP Violation",
          "Conclusion"
        ],
        "Introduction to IoC-Containers (or DI-Containers)": [
          "Outline",
          "Pure DI and IoC-Containers",
          "Building a Simple IoC-Container",
          "Service Locator Design Pattern",
          "Demo With an IoC-Container",
          "Conclusion"
        ],
        "Dependency Injection - Related Anti-Patterns & Refactorings": [
          "Outline",
          "Control Freak",
          "Hidden Dependencies with Service Locator",
          "Temporal Coupling and Constructor Injection",
          "Constructor Over-Injection",
          "Ambient Context",
          "Facade Service",
          "Property Injection VS Bastard Injection",
          "Cyclic Dependencies",
          "Conclusion"
        ],
        "Dependency Injection Real-World Example": [
          "Outline",
          "Application Overview",
          "Data Access and Models",
          "UI-Side",
          "The Problem of Tight Coupling",
          "Refactoring Process",
          "Isolating the Bootstrapper",
          "Consequences",
          "Conclusion"
        ],
        "Reaping the Fruits of DI": [
          "Outline",
          "Adding New DAL",
          "Writing Unit Tests for View Models",
          "Conclusion"
        ],
        "DI-Containers (IoC-Frameworks)": [
          "Outline",
          "Overview of DI-Containers",
          "Unity DI-Framework",
          "Late Binding with Unity",
          "Aspect-Oriented Programming (AOP)",
          "Demonstration of the Problem of Boilerplate Code",
          "Implementing AOP by Intercepting",
          "Interception vs Pure DI vs AOP Tooling",
          "Autofac and Castle.Windsor DI-Containers",
          "Problems Related to DI-Containers",
          "Conclusion",
          "BONUS Lecture"
        ],
        "Appendix. Intro to Unit Testing. Getting Started": [
          "Outline",
          "What is a Unit Test",
          "Unit Testing Frameworks",
          "Your First Unit Test",
          "Naming Conventions",
          "Running and Debugging Unit Tests",
          "Benefits of Unit Tests",
          "Who Should Write Unit Tests and When",
          "Programmer's Oath",
          "Exercise: Degree Converter",
          "Solution: Degree Converter",
          "Conclusion"
        ],
        "Appendix. Intro to Unit Testing. NUnit Framework": [
          "Outline",
          "Assert Intro",
          "Assert Demo",
          "Arrange-Act-Assert",
          "Running Tests from the Console",
          "SetUp and TearDown",
          "OneTimeSetUp and OneTimeTearDown",
          "Parameterized Unit Tests",
          "Grouping and Ignoring Unit Tests",
          "Code Coverage",
          "Exercise: FizzBuzz",
          "Solution: FizzBuzz",
          "Exercise: Parsing Roman Numerals",
          "Solution: Parsing Roman Numerals",
          "Exercise: Stack",
          "Solution: Stack",
          "Conclusion"
        ]
      },
      "requirements": [
        "Some experience in C#"
      ],
      "description": "Build a solid foundation in software architecture applying Dependency Injection with IoC-Containers\nIn many of my courses I use techniques of Dependency Injection and each time students write me private messages saying that they don't what it is and thus they don't understand what's going on in the course I teach. This is very unfortunate from the learning perspectives.\nDependency Injection is the set of techniques that allow to supply dependencies to objects. Actually, if you have ever passed dependencies via constructors, then you applied the so-called constructor injection. Dependency Injection (DI) is simple and difficult at the same time. On one hand, DI is comprised of simple techniques and on the other hand, when we need to bring DI to the next level, we need to make things more complicated using the so-called DI or IoC (Inversion of Control) Containers. These are the frameworks which perform dependency injection automatically. You just need to set one up in the application root (an extremely important notion which you'll learn about in the course) and after that, it will resolve all the dependencies it knows about in the runtime.\nIf you still don't understand what am I talking about, just believe me, you absolutely need to know about Dependency Injection. This course will tremendously improve your understanding of how software architectures emerge. So, this course is \"must watch\" for anyone who still doesn't understand what is DI and IoC-Containers.\nContent and Overview\nThis course is aimed at all kind of developers. It provides solid theoretical base reinforced by practical material.\nThe course covers:\nIntroduction to Inversion of Control:\nDependency Inversion Principle (DIP), Inversion of Control (IoC), Dependency Injection (DI),\nDependencies and their types, Pure DI and IoC-Containers, Service Locator\nThe Architectural Implications of Dependency Injection\nDI-related Anti-Patterns & Refactorings:\nControl Freak, Hidden Dependencies, Temporal Coupling,\nConstructor Over-Injection and how to avoid it,\nAmbient Context, Facade Service, Property Injection vs Bastard Injection, Cyclic Dependencies\nRefactoring Example of an existing code base applying Dependency Injection\nHow to reap the fruits of DI\nDI-Containers (IoC-Containers):\nOverview, Unity, Late Binding with Unity, Aspect-Oriented Programming (AOP), Interception vs Pure DI vs AOP Tools,\nSetting up a bootstrapper with Unity, Autofac and Castle.Windsor\nIntroduction to Unit Testing\nTeaching Approach\nNo fluff, no ranting, no beating the air. I respect your time. The course material is succinct, yet comprehensive. All the important concepts are covered. Particularly important topics are covered in-depth.\nTake this course, and you will be satisfied.",
      "target_audience": [
        "Any C# developer who wants to learn about Dependency Injection and IoC-Frameworks"
      ]
    },
    {
      "title": "OpenCV Python For Beginners | Hands on Computer Vision",
      "url": "https://www.udemy.com/course/opencv-python-for-beginners-hands-on-computer-vision/",
      "bio": "Hands on Practical Examples with OpenCV & Python",
      "objectives": [
        "Basics of NumPy",
        "Face Detection with OpenCV",
        "Draw shapes on images and videos with OpenCV",
        "Smoothing, blurring, thresholding, and morphological operations with OpenCV",
        "Objects Tracking with OpenCV",
        "Histograms with OpenCV",
        "Find Car Lane lines with OpenCV"
      ],
      "course_content": {
        "Install and Setup Python": [
          "How to Install Python 3 on Windows 10",
          "How to install Python 3 on Mac",
          "How To Install PyCharm In Windows 10",
          "How To Install PyCharm In Windows 11",
          "How To Install PyCharm In Mac",
          "How To Install PyCharm In Ubuntu 18.04 + Create and Run First Python Project",
          "How To Install PyCharm In Ubuntu 20.04 + Create and Run First Python Project"
        ],
        "Numpy": [
          "Introduction + Installing numpy",
          "Python List Vs Numpy Array",
          "Basic properties and Methods in NumPy Array",
          "Creating specific arrays, Reshape and more"
        ],
        "Introduction to OpenCV": [
          "Introduction to OpenCV"
        ],
        "Install OpenCV": [
          "How to Install OpenCV for Python on Windows 10",
          "How To Install OpenCV 4 for Python on Ubuntu 18.04 Linux"
        ],
        "OpenCV Basics": [
          "How to Read, Write, Show Images in OpenCV",
          "How to Read, Write, Show Videos from Camera in OpenCV",
          "Draw geometric shapes on images using Python OpenCV",
          "Setting Camera Parameters in OpenCV Python",
          "Show Date and Time on Videos using OpenCV Python",
          "Handle Mouse Events in OpenCV",
          "More Mouse Event Examples in OpenCV Python"
        ],
        "Core Operations": [
          "cv.split, cv.merge, cv.resize, cv.add, cv.addWeighted, ROI",
          "Bitwise Operations (bitwise AND, OR, NOT and XOR)",
          "How to Bind Trackbar To OpenCV Windows"
        ],
        "Image Processing in OpenCV": [
          "Object Detection and Object Tracking Using HSV Color Space",
          "Simple Image Thresholding",
          "Adaptive Thresholding",
          "matplotlib with OpenCV",
          "Morphological Transformations",
          "Smoothing Images | Blurring Images OpenCV",
          "Image Gradients and Edge Detection",
          "Canny Edge Detection in OpenCV",
          "Image Pyramids with Python and OpenCV",
          "Image Blending using Pyramids in OpenCV",
          "Find and Draw Contours with OpenCV in Python",
          "Motion Detection and Tracking Using Opencv Contours",
          "Detect Simple Geometric Shapes using OpenCV in Python",
          "Understanding image Histograms using OpenCV Python",
          "Template matching using OpenCV in Python"
        ],
        "Hough Transform": [
          "Probabilistic Hough Transform using HoughLinesP in OpenCV",
          "Hough Line Transform Theory",
          "Hough Line Transform using HoughLines method in OpenCV",
          "Circle Detection using OpenCV Hough Circle Transform"
        ],
        "Road Lane Line Detection Mini Project": [
          "Road Lane Line Detection with OpenCV (Part 1)",
          "Road Lane Line Detection with OpenCV (Part 2)",
          "Road Lane Line Detection with OpenCV (Part 3)"
        ],
        "Face and Eye Detection": [
          "Face Detection using Haar Cascade Classifiers",
          "Eye Detection Haar Feature based Cascade Classifiers"
        ]
      },
      "requirements": [
        "Basic programming skills in python language python would be beneficial.",
        "A Windows, Mac or Linux computer.",
        "All you need is a PC and a working internet connection"
      ],
      "description": "Welcome to this on OpenCV Python Tutorial For Beginners. OpenCV is an image processing library created by Intel and later supported by Willow Garage and now maintained by Itseez. opencv is available on Mac, Windows, Linux. Works in C, C++, and Python. it is Open Source and free. opencv is easy to use and install.\nThe goal of this course is to provide you with a working knowledge of OpenCV with Python. We'll start with the basics, starting from installing OpenCV with Python on Windows, Mac, and Ubuntu. Then we will see how to create your first OpenCV python script. Then we will dive deep into the amazing world of computer vision Using OpenCV and learn the most important concepts about computer vision using OpenCV .\nSo Let's get started !!!",
      "target_audience": [
        "Anyone who wants to code",
        "New Programmers and Developers",
        "Beginners",
        "Students"
      ]
    },
    {
      "title": "[NEW V2] AWS Lambda & Serverless Architecture Bootcamp 2025",
      "url": "https://www.udemy.com/course/aws-lambda-serverless-architecture/",
      "bio": "AWS Serverless with AWS Lambda, API Gateway, Amazon DynamoDB, Step Functions, SAM, Observability, DevOps & more",
      "objectives": [
        "Master AWS Lambda, API Gateway, DynamoDB, and Step Functions from the ground up (Full of Hands On Labs)",
        "Streamline your development and deployment with AWS SAM",
        "Automate serverless deployment with AWS CI/CD tools like GitHub, CodeBuild and CodePipeline",
        "Build Serverless Production-grade REST API with Observability, IaC and AWS DevOps tools",
        "Learn Serverless Best Practices"
      ],
      "course_content": {
        "Serverless Demystified – The Cloud-Native Revolution Begins": [
          "Welcome to the course!",
          "Introduction to Cloud Native and Serverless Computing",
          "Meet Your Serverless Toolkit – Key Serverless Services in AWS",
          "Power Lab – Build Your First Serverless API with Lambda and API Gateway"
        ],
        "Course Slides Download": [
          "Course Slides Download"
        ],
        "Mastering AWS Lambda – The Heart of Serverless": [
          "What Makes Lambda Tick – AWS Lambda Overview",
          "Behind the Triggers – Lambda Invocation Types Explained",
          "Decoding Events, Context, and Environment Variables in Lambda",
          "Debug Like a Pro – Logging, Tracing, and Error Handling",
          "Scaling Smart – Understanding Lambda Concurrency",
          "Go Pro with Lambda Versions and Aliases",
          "Running Lambda in a VPC – When and Why",
          "Power Lab – Exploring AWS Lambda Console, Configuration, and Event Handling",
          "Dynamic Lambda Handlers – Write Less, Do More",
          "Going Container-Native – Lambda with Docker",
          "Supercharge Your Functions with Lambda Layer",
          "Know the Lambda Limits",
          "Turbocharge Performance – Tips to Optimize Lambda Functions",
          "Power Lab – Build a Serverless Image Resizing Pipeline with Lambda and S3"
        ],
        "API Gateway Unlocked – Build Robust Serverless APIs": [
          "Your Serverless Front Door – Understanding Amazon API Gateway",
          "Validate Early, Fail Fast – Request Validation and Mapping",
          "Error Handling in API Gateway",
          "Power Lab – Building Serverless APIs with API Gateway and AWS SAM",
          "Your API Needs Docs – How to Build and Manage Them",
          "Going Live – Deploying and Managing API Gateway Stages",
          "Power Lab – Progressive Blue/Green Deployments with SAM and CodeDeploy",
          "Lock It Down – Access Control with API Gateway",
          "Securing APIs with Authentication and Authorization"
        ],
        "DynamoDB Deep Dive – The Serverless NoSQL Powerhouse": [
          "Why Purpose-Built Databases Matter",
          "Choose Wisely – Understanding Data Types and Databases",
          "DynamoDB Essentials",
          "Cost Clarity – Understanding DynamoDB Pricing",
          "Turbocharged Queries – Global and Local Secondary Indexes",
          "Power Lab – Master DynamoDB Basics: Tables, Indexes, and Item Operations",
          "Scaling Secrets – How DynamoDB Handles Load",
          "Reinforce - Single Table Design with Amazon DynamoDB",
          "Real-World Design Patterns in DynamoDB",
          "Best Practices for Rock-Solid DynamoDB Designs",
          "Backup and Restore – Never Lose Your Data",
          "Secure by Default – DynamoDB Encryption Explained",
          "Streams, TTL, and Global Tables – Going Real-Time and Global",
          "Power Lab – Auto-Cleanup S3 Files with DynamoDB TTL and Streams",
          "Power Lab – Build Multi-Region Multi-Active Serverless Database",
          "Web Identity Federation with DynamoDB",
          "Speed Up Reads with DynamoDB Accelerator (DAX)"
        ],
        "Unlocking the AWS Serverless Ecosystem": [
          "Meet the Event Bus – Building Event-Driven Apps with EventBridge",
          "Messaging 101 – SQS vs. SNS in Real-World Use Cases",
          "Power Lab – Implementing Error Handling in Lambda with DLQs and Destinations",
          "Streaming Data Processing with Amazon Kinesis",
          "Step Functions Unpacked (Part 1)",
          "Step Functions Unpacked (Part 2)",
          "Power Lab – Design Your First AWS Step Functions Workflow",
          "Power Lab – Build a Serverless Image Processing Workflow with AWS Step Functions"
        ],
        "Building Production-Grade Serverless Systems": [
          "Automate Everything – DevOps and Infrastructure as Code for Serverless",
          "Proven Blueprints – Serverless Architecture Patterns That Work",
          "Power Lab – Automate EC2 Start/Stop with Lambda and EventBridge",
          "Building Beyond Basics – Serverless Best Practices for Real-World Projects",
          "Telemetry That Talks – Observability, X-Ray, and Monitoring Tools",
          "Power Lab – Build Production-Grade Serverless Microservices with DevOps"
        ],
        "What’s Next? Supercharge Your Cloud Journey": [
          "Bonus – A Secret Gift for You"
        ]
      },
      "requirements": [
        "Have access to an AWS Account",
        "Be familiar with basics of AWS",
        "Basic knowledge of JavaScript"
      ],
      "description": "Master AWS Lambda and the Entire Serverless Ecosystem with the Most In-Depth, Hands-On Bootcamp Available\nIf you're serious about becoming a cloud-native developer or architect, this is the course that gets you there—faster, smarter, and with real-world confidence.\nServerless Computing isn’t just the future—it’s the present. AWS Lambda, API Gateway, DynamoDB, and Step Functions are driving a new wave of scalable, cost-effective, cloud-native applications. Companies are rapidly adopting serverless architectures, and certified, hands-on professionals are in high demand.\nThis 2nd Edition is not just an upgrade—it’s a complete transformation.\nBuilt from the ground up, this course dives deeper, explains clearer, and takes you further into the AWS serverless universe than ever before. With a laser focus on real-world skills, this course combines foundational knowledge with hands-on Power Labs that mirror what you’ll actually be doing on the job.\nWhether you're preparing for AWS Certifications or building production-grade solutions, this course is your complete playbook.\n\n\n---\n\n\nHere’s What You’ll Master Inside\nThe Core of Serverless Development:\nDeep-dive into AWS Lambda—triggers, context, VPC access, Layers, container packaging, and performance optimization\nMaster API Gateway—staging, authentication, throttling, documentation, and error handling\nBuild resilient, scalable systems with Amazon DynamoDB, EventBridge, SQS/SNS, and Step Functions\nBuild Real Projects with Confidence: You won’t just learn theory. You’ll build hands-on serverless solutions through guided Power Labs, including:\nA production-ready Serverless API with Observability baked in\nEvent-driven apps using SQS, SNS, and EventBridge\nBlue/green deployments with SAM and CodeDeploy\nMulti-region DynamoDB with global tables\nReal-world DevOps integration using AWS CI/CD tools\nAnd so much more...\nEach lab is designed to simulate real challenges you’ll face as a cloud engineer, solution architect, or developer—and to prepare you to solve them.\nCloud-Native by Design. Production-Ready by Default. We teach you to think in cloud-native patterns. From telemetry and observability with AWS X-Ray and Lambda Powertools, to automating infrastructure with AWS SAM, this course pushes you to design, build, and deploy production-grade applications, not just classroom demos.\n\n\n---\n\n\nWho This Course is For\nDevelopers and architects ready to master AWS Lambda and the serverless stack\nEngineers preparing for AWS certification exams (especially Associate and Professional levels)\nTeams building scalable, modern applications with minimal infrastructure overhead\nAnyone serious about gaining real, job-ready skills in serverless computing\n\n\n---\n\n\nTools and Tech You’ll Work With:\nNode.js and JavaScript\nAWS SDK for JavaScript, AWS CLI, AWS SAM, and CloudFormation\n\n\n---\n\n\nWhat You’ll Walk Away With\nBy the end of this course, you won’t just “understand” AWS Serverless—you’ll be ready to build and deploy it in the real world. You’ll know how to optimize performance, secure your APIs, design with resilience, and integrate with event-driven services across the AWS landscape.\n\n\n---\n\n\nTake a look at these student reviews:\n“Riyaz does a great job patiently explaining complex topics through excellent examples. A great up-to-date course with tons of material.” – Stephen B.\n“Very good course, the name 'bootcamp' is very apt as it’s pretty intense.” – Rodrigo V.\n“Perfect to enhance my skills after already being certified as a Solutions Architect Associate.” – Dan R.\n“Must-watch if you want to become a serverless expert and appreciate the instructor’s effort.” – Mansi\n\n\n---\n\n\nJoin the 2nd Edition—Built for 2025 and Beyond\nThis is not a repackaged course. It’s a complete reinvention, designed to match the evolving landscape of AWS and serverless computing.\nEnroll today, and gain the skills that leading companies are hiring for right now.\nYou're not just signing up for another course. You're starting your journey toward becoming a cloud-native expert.\nLet’s build the future—serverlessly.",
      "target_audience": [
        "Developers at all levels (beginner to advanced) interested in mastering Serverless",
        "Developers and Architects who want to master AWS Lambda and the Serverless Architecture",
        "DevOps Professionals looking to implement serverless continuous integration and continuous delivery processes",
        "Developers looking to speed up and streamline their serverless development and deployment process",
        "Developers who want to design serverless applications using the best practices in serverless computing",
        "AWS Certification Aspirants"
      ]
    },
    {
      "title": "Azure Container Apps: intro and deep dive",
      "url": "https://www.udemy.com/course/azure-container-apps/",
      "bio": "Master Azure Container Apps: Build, Deploy, and Scale Your Applications with Confidence",
      "objectives": [
        "The fundamentals of developing and deploying applications into Container Apps",
        "Managing and securing Container Apps",
        "Configuring and scaling Container Apps",
        "Automated deployment using DevOps CI/CD pipelines"
      ],
      "course_content": {
        "Introduction": [
          "Course introduction",
          "[Lightboard] What is Container Apps ?",
          "Introduction",
          "[Demo] Deploying sample container into Container Apps",
          "[Demo] Deploying Frontend and Backend apps using Azure portal",
          "Note about exposing the backend API",
          "Exploring the features of Container Apps Environment",
          "Exploring the features of Container Apps",
          "Quiz"
        ],
        "Deploying using YAML files (like in Kubernetes)": [
          "Creating Container Apps using YAML configuration files",
          "[Demo] Creating Container Apps using YAML configuration files",
          "Exporting Container Apps configuration into YAML",
          "Quiz"
        ],
        "Manual, scheduled and event-driven Jobs": [
          "Introduction to Container Apps Jobs",
          "[Demo] Creating and running Jobs manually",
          "Quiz"
        ],
        "Autoscaling Apps and Jobs using KEDA": [
          "Introduction to KEDA on the Lightboard",
          "Autoscaling Apps and Jobs using KEDA Scalers",
          "[Demo] Autoscaling Jobs using KEDA Service Bus Scaler",
          "[Lab, Part1] Introduction to the demo environment",
          "[Lab, Part2] Explaining KEDA authentication and autoscaling configuration",
          "[Lab, Part3] Running the resources and testing the application",
          "Quiz"
        ],
        "Securing Secrets with Key vault": [
          "Introduction to Secrets in Container Apps",
          "[Demo] Creating and reading secrets",
          "Quiz"
        ],
        "Updating Container Apps using revisions and splitting traffic": [
          "Creating releases using revisions and splitting traffic",
          "[Demo] Creating releases using revisions and splitting traffic",
          "Quiz"
        ],
        "Logging and troubleshooting Container Apps": [
          "Logging and troubleshooting Container Apps",
          "[Demo] Logging and troubleshooting Container Apps",
          "Getting Container Apps logs in Grafana dashboards",
          "Quiz"
        ],
        "Lab: building and deploying frontend and backend": [
          "Introduction to the lab",
          "Building and deploying backend to Container Apps",
          "Building and deploying frontend to Container Apps",
          "Quiz"
        ],
        "Lab: building and deploying frontend and backend using Managed Identity": [
          "Introduction to the application architecture",
          "Creating Container Registry (ACR) and Managed Identity",
          "Building and deploying backend with MI",
          "Building and deploying frontend with MI",
          "Quiz"
        ],
        "Managing storage in Container Apps": [
          "Introduction to storage options in Container Apps",
          "Saving data using container file system",
          "{Demo] Saving data using container file system",
          "Saving data using Ephemeral storage (EmptyDir)",
          "[Demo] Saving data using Ephemeral storage (EmptyDir)",
          "Persisting data using Azure File Share",
          "[Demo] Persisting data using Azure File Share",
          "Quiz"
        ]
      },
      "requirements": [
        "Basic knowledge of cloud computing and understanding of containers"
      ],
      "description": "Are you ready to take your application development skills to the next level with Azure Container Apps? This comprehensive online course is designed to equip you with the knowledge and skills needed to build, deploy, and scale your applications using the power of Azure Container Apps.\n\n\nIn this hands-on course, you'll start by gaining a solid understanding of containerization and its benefits in modern application development. You'll explore the core concepts of Azure Container Apps, including container orchestration, image creation, and deployment strategies. Through a series of practical exercises and real-world examples, you'll learn how to leverage the full potential of Azure Container Apps to streamline your development workflow and enhance application scalability.\n\n\nThroughout the course, you'll dive deep into various topics such as creating and managing container instances, configuring auto-scaling to meet fluctuating demand, integrating Azure Container Registry, implementing CI/CD pipelines, and monitoring and troubleshooting containerized applications.\n\n\nBy the end of this course, you'll have the expertise to confidently develop, deploy, and manage containerized applications using Azure Container Apps. Whether you're a developer looking to modernize your application deployment process or an IT professional seeking to optimize infrastructure utilization, this course will empower you with the skills to harness the full potential of Azure Container Apps and accelerate your success in the cloud-native era.\n\n\nEnroll now and embark on a transformative journey to become a proficient Azure Container Apps developer, and unlock a world of possibilities for your application development career.\n\n\nHere's a sneak peek into what you'll learn:\n\n\nIntroduction to Azure Container Apps: Understanding the benefits and key features of Azure Container Apps compared to Azure Kubernetes Service (AKS) or Azure Container Instance (ACI).\n\n\nCreating and Managing Container Apps: Exploring the process of creating, configuring, and managing container apps within the Azure portal, Bicep and Terraform.\n\n\nDeploying and Scaling Container Apps: Learning how to deploy container apps to Azure and scale them to meet demand using KEDA powerful scaling options.\n\n\nManaging Containers and Networking: Discovering container management techniques with the Revisions, networking configurations for external and internal ingress, and how to secure your containerized applications.\n\n\nContinuous Integration and Deployment: Implementing CI/CD pipelines using Azure DevOps and Github Actions to automate the deployment of container apps.\n\n\nMonitoring, Logging, and Troubleshooting: Understanding how to monitor containerized applications, collect logs, and troubleshoot common issues effectively.\n\n\nContainer Apps for Microservices: Exploring the power of Dapr for managing microservices communication, configuration and security.\n\n\nAdvanced Topics: Exploring advanced concepts such as advanced networking, controlling egress with UDR mode and Azure Firewall and implementing Azure Container Apps in a Landing Zone.",
      "target_audience": [
        "Developers: Software developers who want to leverage Azure Container Apps for deploying and running their containerized applications in a scalable and reliable manner.",
        "DevOps Engineers: Professionals responsible for designing and implementing the deployment and management processes of applications in an organization. They can learn how Azure Container Apps fit into the DevOps pipeline and how to integrate them with other Azure services.",
        "Cloud Architects: Architects who need to understand the capabilities and features of Azure Container Apps to make informed decisions about application deployment strategies in Azure. They can explore the benefits and considerations of using Azure Container Apps in their architecture designs.",
        "Cloud Architects: Architects who need to understand the capabilities and features of Azure Container Apps to make informed decisions about application deployment strategies in Azure. They can explore the benefits and considerations of using Azure Container Apps in their architecture designs."
      ]
    },
    {
      "title": "SoftwareAG webMethods Integration (OnPremise) for Beginners",
      "url": "https://www.udemy.com/course/webmethods/",
      "bio": "Do It Yourself - webMethods v10.x - 60+ lectures/demo | 10 hours of Tutorials | Fundamentals | ESB | Integration | API",
      "objectives": [
        "Learn the webMethods Fundamentals",
        "How to download and Install webMethods Integration Server and Designer",
        "How to develop flow service using different flow steps using step by step procedure",
        "How to publish and subscribe using Universal Messaging",
        "How to create SOAP webservice",
        "How to create REST webservice",
        "Practice alongside several hands-on",
        "webMethods Interview Questions and Answers",
        "Output template",
        "How to use lookup table",
        "How to create Java service",
        "How to create flatfile schema"
      ],
      "course_content": {
        "About Myself and also about course": [
          "About Me!",
          "About the Course"
        ],
        "Introduction, Concepts": [
          "What is Integration? What is webMethods?",
          "webMethods Designer"
        ],
        "Download and Install SoftwareAG webMethods Trail Version -v10.5": [
          "Demo-How to Download, Install SoftwareAG webMethods v10.5 trail | Run First App",
          "How to Register webMethods Integration server as a Service"
        ],
        "Exercise Chapters - webMethods Designer": [
          "Theory-Create Package and folders - Exercise1",
          "Demo-Create Package and folders - Exercise1",
          "Theory-Create flow service to add two number-Exercise2",
          "Demo-Create flow service to add two number-Exercise2",
          "Theory-Create Document type using XML/XSD/DTD-Exercise3",
          "Demo-Create Document type using XML/XSD/DTD-Exercise3",
          "Theory-Create flow service with Branch flow step-Exercise4",
          "Demo-Create flow service with Branch flow step-Exercise4",
          "Theory-Create a flow service with Repeat-Exercise5",
          "Demo-Theory-Create a flow service with Repeat-Exercise5",
          "Theory-Create a flow service with Sequence-Exercise6",
          "Demo-Create a flow service with Sequence-Exercise6",
          "Theory-Create flow service with Loop Flow step-Exercise7",
          "Demo-Create flow service with Loop Flow step-Exercise7",
          "Theory-Create flow service with Exit flow step-Exercise8",
          "Demo-Create flow service with Exit flow step-Exercise8",
          "Theory-Create a flow service with transformers-Exercise9",
          "Demo-Create a flow service with transformers-Exercise9",
          "Theory-Create a java service to add three numbers-Exercise10",
          "Demo-Create a java service to add three numbers-Exercise10",
          "Theory-How to create flat file schema-Exercise11",
          "Demo-How to create flat file schema-Exercise11",
          "Theory-How to create scheduler service-Exercise12",
          "Demo-How to create scheduler service-Exercise12",
          "Theory-How to create Specification-Exercise13",
          "Demo-How to create Specification-Exercise13",
          "Demo-Publish Subscribe using Universal Messaging-Exercise14",
          "Demo-How to create REST based webservice from Designer-Exercise15",
          "Demo-How to consume SOAP webservice from webMethods | web service descriptor",
          "Demo-How to expose Flow service as a SOAP Based Provider webservice",
          "Demo-How to create Branch for If/else scenario (Expression = true)",
          "webMethods Built in services - WmPublic Package - String operations",
          "How to download the webMethods documentation from Empower",
          "Output Templates Demo - Generate output in HTML or XML or CSV",
          "How to use lookupTable"
        ],
        "webMethods Topics - Theory": [
          "Different webMethods Components",
          "webMethods Integration Server",
          "webMethods Trading Networks",
          "webMethods Universal Messaging",
          "Enterprise Integration Pattern",
          "What is EDI, webMethods EDI Module",
          "API Testing, Test your API from SOAP UI"
        ],
        "webMethods Interview Questions and Answers": [
          "webMethods Interview-Part1",
          "webMethods Interview-Part2",
          "webMethods Interview-Part3",
          "webMethods Interview-Part4",
          "webMethods Interview-Part5",
          "webMethods Interview-Part6",
          "webMethods Interview-Part7",
          "webMethods Interview-Part8"
        ],
        "Frequently Asked Questions / Doubts?": [
          "Why we have try/catch block and also sequence block for error handling",
          "What should I ask to gather Integration Requirements"
        ],
        "Quiz - Let's Check our knowledge": [
          "General questions"
        ],
        "Conclusion": [
          "Links to Rememeber",
          "Wrapup",
          "Other useful material links to learn webMethods free"
        ]
      },
      "requirements": [
        "Basic knowledge of Integration, but not mandatory",
        "Basic knowledge of programming language like JAVA or C or any other language, but not mandatory"
      ],
      "description": "Are you interested in learning webMethods? Whether you're a beginner or currently working in webMethods Support and looking to expand your knowledge into webMethods Development, this course is designed for you!\n\n\nThis course covers key topics in webMethods (On-Premise). Follow the topics in the recommended order, and try to execute the provided demos on your laptop/desktop to gain a faster and deeper understanding.\n\n\nSection#1 (Course Introduction)\nAbout the course\nSection#2 (Integration/Concepts)\nWhat is Integration?\nwebMethods Designer\nSection#3 (Download and Install webMethods)\nHow to download SoftwareAG webMethods (Trial version) for this course.\nHow to register webMethods Integration server as a Windows service.\nSection #4 (Exercise/Demo Chapters for the following in SoftwareAG webMethods Designer)\nHow to Create Packages and folders\nHow to Create Flow services to add two numbers\nHow to Create Document type using XML/XSD/DTD\nHow to Create Flow service with Branch (Switch case) step\nHow to Create Flow service with Repeat step\nHow to Create Flow service with Sequence step\nHow to Create Flow service with Loop step\nHow to Create flow service with Exit step\nHow to Create flow service with Transformers\nHow to create Java service\nHow to create flat file schema to parse sample flat file.\nHow to create schedulers to run flow service.\nHow to Create specification\nHow to publish and subscribe message | Universal Messaging.\nHow to create REST based webservice using REST resource and REST resource v2\nHow to Invoke/Call SOAP Based webservice (Consumer webservice)\nHow to create provider webservice for SOAP and expose your flow service.\nCreate Flow service with Branch (IF -  Expression = true)\nwebMethods Built in services - WmPublic Package - String operations\nHow to download the webMethods documentation from Empower\nHow to use output templates to generate html output\nHow to use lookup tables.\n\n\nSection#5 (webMethods Theory/Concepts)\nSoftwareAG webMethods Different components.\nwebMethods Integration Server\nwebMethods Trading Networks\nwebMethods Universal Messaging\nEnterprise Integration patterns.\nwebMethods EDI Module\nAPI Testing, How to test API from SOAP UI - Functional and Load testing.\n\n\nSection#6 (Prepare your webMethods Interview using below Questions and Answers [8+ videos] to gain more confidence)\nwebMethods Interview - Part1\nwebMethods Interview - Part2\nwebMethods Interview - Part3\nwebMethods Interview - Part4\nwebMethods Interview - Part5\nwebMethods Interview - Part6\nwebMethods Interview - Part7\nwebMethods Interview - Part8\nSection#7 (Frequently Asked Questions)\nWhy we have try/catch block and also sequence block for error handling\nWhat should I ask to gather Integration Requirements\n\n\nSection#8 (Quiz  - Let's Check our knowledge)\nGeneral questions\n\n\nSection#9 (Conclusion)\nLink to remember\nWrap-up\n\n\nAs part of this course, we will delve into the theoretical concepts to grasp integration and webMethods. Following that, we'll proceed to download and install the necessary software on our machines for hands-on exercises. These exercises will cover various flow steps, as well as hands-on practice with web services (SOAP, REST), and a demonstration of the publish-subscribe model.\n\n\nAfter watching each video, make sure to execute the same steps on your laptop for a better understanding.\n\n\nEnroll in this course today and embark on a journey of learning something new. Happy learning!\n\n\nThanks\nArul - TechLightning",
      "target_audience": [
        "Who wants to learn SoftwareAG webMethods",
        "Who wants to work in webMethods Development and Support projects."
      ]
    },
    {
      "title": "Deploy Django + AI ML Face Recognition Web App in AWS",
      "url": "https://www.udemy.com/course/complete-face-recognition-app-machine-learning-django-heroku/",
      "bio": "Develop & Deploy Face Recognition, Facial Emotion using OpenCV, Machine Learning, Django, Database in Python in AWS",
      "objectives": [
        "Deploy Face Recognition Django Web App in AWS and Heroku Cloud",
        "Train your own Machine Learning based Face Recognition Model in Python",
        "Train own Facial Emotion Recognition using Machine Learning in Python",
        "Develop Django Web App using MVT Framework",
        "Design SQLlite Database in Django",
        "Train Support Vector Machines, Random Forest Model for Face Recognition in Python",
        "Debuging error while Deploying in Heroku",
        "Interphase Machine Learning Models with MVT Framework",
        "Build Ensemble (stacking) Machine Learning Model combining SVM and Random Forest Models in Python",
        "Face Detection with Deep Neural Networks",
        "OpenCV Essentials for Face Recognition",
        "Managing Heroku Cloud",
        "Styling Django Web App with Bootstrap"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "What you will Develop ?",
          "Facing any Issue with the Course? Don't Panic. Here is the solution"
        ],
        "Setting Up Course": [
          "Install Python",
          "Download requirements.txt",
          "Install CMake & Dlib on Windows"
        ],
        "OpenCV Crash Course": [
          "Download the Syntax commands commonly used",
          "Download Resources",
          "What will you learn ?",
          "What is Pixel in Image.",
          "Load Image",
          "Display Image",
          "Save Image",
          "Acessing Pixels",
          "Manipulate Pixels",
          "Color Space - Split BGR",
          "Color Space - Convert Colors",
          "Drawings - Line",
          "Drawings - Line part2",
          "Drawings - Rectangle",
          "Drawings - Polygon",
          "Drawings - Circles",
          "Put Text",
          "What you will Learn ?",
          "Download the Resources",
          "Viola-Jones Object Detection Intuition",
          "Download Cascade Classifier",
          "Face Detection with Cascade Classifier",
          "Multiple Faces Detection",
          "Eyes Detection",
          "Smile Detection",
          "What you will Learn ?",
          "Download the Resourses",
          "Face Detection with Deep Neural Network Framework",
          "Face Detection with DNN part-1",
          "Face Detection with DNN part -2",
          "Face Detection with DNN part-3",
          "Feature Extraction Framework",
          "Facial Feature Extraction: part-1",
          "Facial Feature Extraction: part-2 (Landmark Detection)",
          "Facial Feature Extraction: part-3 (Face Descriptors)"
        ],
        "Practice Test": [
          "Knowledge Check"
        ],
        "Phase-1: Face Recognition Project (Person Identity)": [
          "Project phase -1, Face Recognition",
          "Face Recognition Framework",
          "How to Download the Resource",
          "Download the Resource",
          "Data Preprocessing",
          "Data Preprocessing - face detection",
          "Data Preprocessing - feature extraction",
          "Data Preprocessing - Helper Function",
          "Data Preprocessing - Feature Embedding and Labeling",
          "Save Data in Pickle file",
          "Machine Learning - Data",
          "Machine Learning and Evaluation - Logistic Regression, Accuracy and F1score",
          "Machine Learning & Evaluation - Support Vector Classifier, Accuracy and F1score",
          "Machine Learning & Evaluation - Random Forest, Accuracy and F1score",
          "Machine Learning & Evaluation - Voting Classifier",
          "Grid Search Parameter Tuning",
          "Save Face Recognition Model in Pickle"
        ],
        "Facial Emotion Recognition": [
          "Get the Data",
          "Download the Resources",
          "Data Preprocessing",
          "Train Machine Learning Model"
        ],
        "Pipeline All Models": [
          "Load all Face Recognition and Detection Machine Learning Models",
          "Automatic Multiple Faces Detections",
          "Combine Predictions of all Machine Learning Models",
          "Create Function for Entire Code"
        ],
        "Phase-2: Setting Up Web App Project": [
          "Phase-2: Django Web App",
          "Install Visual Studio Code",
          "Setting Up Visual Studio Code",
          "Create Virtual Environment from Visual Studio Code (Windows)",
          "Install & Freeze Requirements"
        ],
        "Django Basics": [
          "Your First Django App",
          "Django Overview",
          "HttpRespones in Django",
          "Templates",
          "Static"
        ],
        "Face Recognition Webapp with Django": [
          "Model Views Templates + Machine Learning Framework",
          "Download the Django Project",
          "Upload Images into Models - part-1",
          "Connect Models, Views, Template part-2",
          "Connect Models, Views, Template part-3",
          "Import Machine Learning Models in Django App",
          "Get Face Recognition Predictions from Machine Learning in Django",
          "Display Face Recognition Output in Django Templates",
          "Display Face Recognition Output in Django Templates part-2"
        ]
      },
      "requirements": [
        "Should be at least beginner to Python",
        "Basic knowledge in Machine Learning",
        "Understanding HTML, Bootstrap",
        "Should know how to install Python Libraries using pip"
      ],
      "description": "Welcome to the AI and ML Enthusiast Course: Building a Face Recognition Web App with Django, Machine Learning, and Cloud Deployment on AWS!\nEmbark on an exciting journey into Artificial Intelligence as we delve into the realms of Computer Vision and Face Recognition within the expansive field of AI and ML. This course is designed to guide you through the entire development process of an end-to-end project, catering to both machine learning and web development enthusiasts.\nCourse Phases:\nPhase 1: Machine Learning - Face Identity Recognition\nImage processing techniques with OpenCV\nPrerequisites of the course: Python installation and library setup\nFace Detection using OpenCV and Deep Neural Networks\nFeature extraction using deep neural networks\nTraining machine learning models: logistic regression, support vector machines, random forest\nCombining models with a Voting Classifier (stacking method)\nModel selection and hyperparameter tuning for face recognition\nPhase 2: Machine Learning - Facial Emotion Recognition\nApplication of machine learning techniques from face identity recognition\nIntegration of detection and recognition models into a pipeline\nPhase 3: Django Web App Development\nWeb application development in Django\nRendering HTML, CSS, and Bootstrap for the frontend\nBackend development in Python using the MVT (Models, Views, and Templates) framework\nDesigning a SQLite database for the Django app\nInterfacing machine learning pipeline models with the MVT framework\nStyling the app using Bootstrap\nPhase 4: Deployment / Production on AWS Cloud\nDeployment of the Django Web App on AWS Elastic Beanstalk\nUtilizing the AWS Free Tier for 12 months\nAccessing the app globally through a provided URL/domain\nTroubleshooting and error resolution during deployment\nCourse Highlights:\nIn-depth learning of OpenCV for image processing\nTraining models for Face Recognition and Facial Emotion Recognition\nDjango web app development with MVT framework\nIntegration of machine learning models into the web app\nDeployment on AWS Elastic Beanstalk with a focus on the AWS Free Tier\nIf you aspire to be an AI developer, this course is your gateway to mastering AI and ML concepts while gaining hands-on experience. Don't miss out – start your journey now!\nSee you inside the course!",
      "target_audience": [
        "Anyone who want to learn OpenCV project",
        "Python Developers curious about Artificial Intelligence Projects"
      ]
    },
    {
      "title": "DevOps Interview Questions Preparation Course",
      "url": "https://www.udemy.com/course/devops-interview-questions-preparation-course/",
      "bio": "Learn everything about DevOps. Save time in Interview preparation.",
      "objectives": [
        "Understand DevOps",
        "Learn important concepts of DevOps",
        "Answer questions on DevOps",
        "Understand benefits of DevOps",
        "Best Practices of DevOps",
        "Demand higher salary or promotion based on the knowledge gained"
      ],
      "course_content": {
        "Why should you learn DevOps?": [
          "Introduction",
          "Disclaimer"
        ],
        "DevOps Interview Questions - Part 1": [
          "What are the popular DevOps tools that you use?",
          "What are the main benefits of DevOps?",
          "What is the typical DevOps workflow you use in your organization?",
          "How do you take DevOps approach with Amazon Web Services?",
          "How will you run a script automatically on commit in GIT?"
        ],
        "DevOps Interview Questions - Part 2": [
          "What are the main features of AWS OpsWorks Stacks?",
          "How does CloudFormation work in AWS?",
          "What is CICD in DevOps?",
          "What are the best practices of Continuous Integration (CI)?",
          "What are the benefits of Continuous Integration (CI)?"
        ],
        "DevOps Interview Questions - Part 3": [
          "What are the options for security in Jenkins?",
          "What are the main benefits of Chef?",
          "What is the architecture of Chef?",
          "What is a Recipe in Chef?",
          "What are the main benefits of Ansible?"
        ],
        "DevOps Interview Questions - Part 4": [
          "What are the main use cases of Ansible?",
          "What is Docker Hub?",
          "What is your favorite scripting language for DevOps?",
          "What is Multi-factor authentication?",
          "What are the main benefits of Nagios?"
        ],
        "DevOps Interview Questions - Part 5": [
          "What is State Stalking in Nagios?",
          "What are the main features of Nagios?",
          "What is Puppet?",
          "What is the architecture of Puppet?",
          "What are the main use cases of Puppet Enterprise?"
        ],
        "DevOps Interview Questions - Part 6": [
          "What is the use of Kubernetes?",
          "What is the architecture of Kubernetes?",
          "How does Kubernetes provide high availability of applications in a Cluster?",
          "Why Automated Testing is a must requirement for DevOps?",
          "What is Chaos Monkey in DevOps?"
        ],
        "DevOps Interview Questions - Part 7": [
          "How do you perform Test Automation in DevOps?",
          "What are the main services of AWS that you have used?",
          "Why GIT is considered better than CVS for version control system?",
          "What is the difference between a Container and a Virtual Machine?",
          "What is Serverless architecture?"
        ],
        "DevOps Interview Questions - Part 8": [
          "What are the main principles of DevOps?",
          "Are you more Dev or more Ops?",
          "What is a REST service?",
          "What are the Three Ways of DevOps?",
          "How do you apply DevOps principles to make system Secure?"
        ],
        "DevOps Interview Questions - Part 9": [
          "What is Self-testing Code?",
          "What is a Deployment Pipeline?",
          "What are the security benefits of using Container based system?",
          "How many heads can you create in a GIT repository?"
        ]
      },
      "requirements": [
        "Basic software experience",
        "Familiar with software development or operations"
      ],
      "description": "DevOps is one of the fastest growing trend in technology world. Big companies like Amazon, Netflix, Google etc adopt DevOps culture. This course is designed to help you achieve your goals in DevOps field. Software Engineers with DevOps knowledge may get more salary than others with similar qualifications without DevOps knowledge.\nIn this course, you will learn how to handle interview questions on DevOps in Software Development. I will explain you the important concepts of DevOps.\nYou will also learn the benefits and use cases of DevOps in this course.\nWhat is the biggest benefit of this course to me?\nFinally, the biggest benefit of this course is that you will be able to demand higher salary in your next job interview.\nIt is good to learn DevOps for theoretical benefits. But if you do not know how to handle interview questions on DevOps, you can not convert your DevOps knowledge into higher salary.\nWhat are the topics covered in this course?\nWe cover a wide range of topics in this course. We have questions on DevOps best practices, Jenkins, Docker, Automation etc.\nHow will this course help me?\nBy attending this course, you do not have to spend time searching the Internet for DevOps interview questions. We have already compiled the list of most popular and latest DevOps Interview questions.\nAre there answers in this course?\nYes, in this course each question is followed by an answer. So you can save time in interview preparation.\nWhat is the best way of viewing this course?\nYou have to just watch the course from beginning to end. Once you go through all the videos, try to answer the questions in your own words. Also mark the questions that you could not answer by yourself. Then, in second pass go through only the difficult questions. After going through this course 2-3 times, you will be well prepared to face a technical interview in DevOps field.\nWhat is the level of questions in this course?\nThis course contains questions that are good for a Fresher to an Architect level. The difficulty level of question varies in the course from a Fresher to an Experienced professional.\nWhat happens if DevOps concepts change in future?\nFrom time to time, we keep adding more questions to this course. Our aim is to keep you always updated with the latest interview questions on DevOps.\nWhat are the sample questions covered in this course?\nSample questions covered in this course are as follows:\nWhat are the popular DevOps tools that you use?\nWhat are the main benefits of DevOps?\nWhat is the typical DevOps workflow you use in your organization?\nHow do you take DevOps approach with Amazon Web Services?\nHow will you run a script automatically when a developer commits a change into GIT?\nWhat are the main features of AWS OpsWorks Stacks?\nHow does CloudFormation work in AWS?\nWhat is CICD in DevOps?\nWhat are the best practices of Continuous Integration (CI)?\nWhat are the benefits of Continuous Integration (CI)?\nWhat are the options for security in Jenkins?\nWhat are the main benefits of Chef?\nWhat is the architecture of Chef?\nWhat is a Recipe in Chef?\nWhat are the main benefits of Ansible?\nWhat are the main use cases of Ansible?\nWhat is Docker Hub?\nWhat is your favorite scripting language for DevOps?\nWhat is Multi-factor authentication?\nWhat are the main benefits of Nagios?\nWhat is State Stalking in Nagios?\nWhat are the main features of Nagios?\nWhat is Puppet?\nWhat is the architecture of Puppet?\nWhat are the main use cases of Puppet Enterprise?\nWhat is the use of Kubernetes?\nWhat is the architecture of Kubernetes?\nHow does Kubernetes provide high availability of applications in a Cluster?\nWhy Automated Testing is a must requirement for DevOps?\nWhat is Chaos Monkey in DevOps?\nHow do you perform Test Automation in DevOps?\nWhat are the main services of AWS that you have used?\nWhy GIT is considered better than CVS for version control system?\nWhat is the difference between a Container and a Virtual Machine?\nWhat is Serverless architecture?\nWhat are the main principles of DevOps?\nAre you more Dev or more Ops?\nWhat is a REST service?\nWhat are the Three Ways of DevOps?\nHow do you apply DevOps principles to make system Secure?\nWhat is Self-testing Code?\nWhat is a Deployment Pipeline?\nWhat are the main features of Docker Hub?\nWhat are the security benefits of using Container based system?\nHow many heads can you create in a GIT repository?\nWhat is a Passive check in Nagios?\nWhat is a Docker container?\nHow will you remove an image from Docker?\nWhat are the common use cases of Docker?\nCan we lose our data when a Docker Container exits?",
      "target_audience": [
        "Absolute DevOps beginners",
        "Software Engineer, Sr. Software Engineer, Member Technical Staff, Expert",
        "Software Architect, Development Manager, Director",
        "Anyone who wants to learn DevOps"
      ]
    },
    {
      "title": "SOLID Software Architecture: Complete Guide with Coding Examples",
      "url": "https://www.udemy.com/course/solid-software-architecture-complete-guide-with-c-examples/",
      "bio": "Become a better developer: Learn software architecture techniques and develop code that is more robust, flexible, understandable and maintainable.",
      "objectives": [
        "Understand the SOLID principles",
        "Apply them to their own code and architect better software solutions",
        "Design and build more robust and maintainable systems",
        "Identify SOLID design violations in code and refactor this code accordingly"
      ],
      "course_content": {
        "Introduction": [
          "Course Introduction & Objectives"
        ],
        "Single Responsibility Principle": [
          "What is the Single Responsibility Principle?",
          "SRP: Coding Example"
        ],
        "Open/Closed Principle": [
          "What is the Open/Closed Principle?",
          "OCP: Coding example"
        ],
        "Liskov Substitution Principle": [
          "What is the Liskov Substitution Principle?",
          "LSP: Coding example"
        ],
        "Interface Segregation Principle": [
          "What is the Interface Segregation Principle?",
          "ISP: Coding example"
        ],
        "Dependency Inversion Principle": [
          "What is Dependency Inversion?",
          "DI: Coding example"
        ]
      },
      "requirements": [
        "Beginner level of coding, experience will help you understand some principles better but is not mandatory.",
        "Eager and willing to learn new software design principles"
      ],
      "description": "In this course you will learn in detail the SOLID software architecture design principles for Object Oriented Programming. You will learn what are the benefits (and sometimes drawbacks !) of each of the SOLID principles which are:\nSingle Responsibility Principle\nOpen/Closed Principle\nLiskov Substitution Principle\nInterface Segregation Principle\nDependency Inversion Principle\nWe will explore each principle in detail and will then go through code examples that violate the principle and refactor these together in video tutorials. The code files of both the initial code and the refactored version are provided for each coding example. In this way, after following this course you will not only be able to apply this knowledge to your own code and develop software architecture of higher quality, but you will also be able to detect existing violations and correct them.\nThe coding examples are in C# , a widely used object oriented programming language. However, if you are not familiar with C# but use another object oriented programming language (e.g. Java, PHP, Python etc. ) don't worry you'll still be able to fully grasp the different principles and the scope of each refactoring. Additionally, if you'd like me to go through a similar code example in another programming language, just sent me a message and I'll be glad to guide you through one.\nI'm also available to answer any queries you may have regarding any course material which you didn't understand or would like further detail on.\nSome of the many positive reviews I have received so far :\n\"The course is comprehensive and well explained through clear and concise examples, and shows that the instructor is highly experienced in their field. Overall this course is excellent and highly appropriate for software developers looking to improve their architectural and programming skills, both beginners as well as more advanced programmers. I will be looking forward to more courses by the author in the future.\" - J. Fusselberg\n\n\"High quality videos, lectures are clear and to the point. This course is highly recommended for any developer who wants to move on to a senior position or software architect role. However, it will also be a good start for beginner to introduce them to proper coding practices early on.\" -  Roberto de Souza\nI look forward to seeing you in my course and hearing how the content's helping you in your work or studies !",
      "target_audience": [
        "Beginners who want to start off their coding career on the right foot",
        "More experienced developers who want to improve their software design and architecture skills",
        "Anyone who wants to begin developing better software"
      ]
    },
    {
      "title": "Recursion",
      "url": "https://www.udemy.com/course/learn-recursion/",
      "bio": "A detailed course that covers all what you need to know to be comfortable with recursion and not be afraid of it anymore",
      "objectives": [
        "Recursion",
        "Recursive process",
        "Optimizing a recursive function (with memoization and dynamic programming)",
        "Algorithmic techniques based on recursion (backtracking and divide-and-conquer)",
        "Tail recursion",
        "Breaking down a problem into subproblems of the same type"
      ],
      "course_content": {
        "Introduction": [
          "What is recursion?",
          "Code and execution",
          "Base cases and recursive cases"
        ],
        "Multiple recursive calls": [
          "Process explanation",
          "Recursion tree"
        ],
        "Visualize call stack and recursion tree": [
          "Visualize call stack",
          "Visualize recursion tree"
        ],
        "Time and space complexity analysis of recursive functions": [
          "Recursion and time/space complexity",
          "Recursion tree method",
          "Recurrence relation method",
          "Master theorem method",
          "Space complexity of a recursive algorithm"
        ],
        "Recursion vs Iteration": [
          "The comparison",
          "From recursion to iteration",
          "From iteration to recursion"
        ],
        "Optimize a recursive function with memoization and dynamic programming": [
          "What is memoization",
          "Optimize \"ways to climb stairs\" solution with memoization",
          "What is dynamic programming",
          "Optimize \"ways to climb stairs\" solution with dynamic programming"
        ],
        "Divide-and-conquer and backtracking": [
          "What is divide-and-conquer",
          "What is backtracking",
          "N-queens problem"
        ],
        "Recursive data structures": [
          "Recursion and linked lists",
          "Recursion and trees",
          "Recursion and graphs"
        ],
        "Tail recursion": [
          "What is tail recursion",
          "Examples"
        ],
        "Double recursion": [
          "What is double recursion"
        ]
      },
      "requirements": [
        "Basic programming knowledge"
      ],
      "description": "WARNING: The instructor is not currently available to answer questions regarding this course\n\n\nEven if the concept of recursion is simple, a lot of people struggle with it (not understanding the recursive process, not being able to figure out the base cases and recursive cases...), this is why I wanted to create a course on recursion that explains it and illustrates it in detail, it also contains 11 solved and explained coding problems to practice.\nAnd knowing recursion will also give you a new way of thinking, which is dividing the problem into multiple instances of the same problem, which will help you understanding techniques like dynamic programming, backtracking...\nSee you in the first lecture!\nThe course covers:\nWhat is recursion\nCode and execution\nBase cases and recursive cases\nMultiple recursive calls process\nCall stack\nRecursion tree\nHow to visualize the process\nRecursive functions complexity analysis (time and space comp)\nRecursion vs Iteration\nHow to optimize a recursive function (memoization and dynamic programming)\nDivide-and-conquer\nBacktracking\nRecursive data structures\nTail recursion\nDouble recursion\nHow to think recursively\nPlus 11 solved and explained coding problems to practice:\nSum of digits\nCount occurrences\nHas adjacent duplicates\nReverse string\nMinimum cost path in matrix\nAll possible phrases\nKeypad combinations\nString subsequences\nBinary numbers with at most 2 zeros\nWord search\nArray permutations\n\n\nWhy you should take this course:\nDetailed explanation of how the recursive process works\nAnimated examples\nGood audio/video quality\nReal English captions\nContains coding problems to practice\nAbility to ask questions if you don't understand something",
      "target_audience": [
        "Programmers",
        "Computer science students",
        "Engineering students",
        "Competitive programmers",
        "Self-learning people"
      ]
    },
    {
      "title": "Real-time Credit card Fraud Detection using Spark 2.2",
      "url": "https://www.udemy.com/course/real-time-creditcard-fraud-detection-using-spark/",
      "bio": "Real time Credit card Fraud detection using Spark Streaming, Spark ML, Kafka, Cassandra and Airflow",
      "objectives": [
        "Students will be able to build End to End Big data project using Spark, Kafka, Cassandra, Scala and Java"
      ],
      "course_content": {
        "Introduction": [
          "Course Objective",
          "About Me",
          "Introduction Agenda",
          "Prerequisites",
          "Components",
          "Introduction to Spark",
          "Introduction to Kafka",
          "Introduction to Cassandra",
          "Real-time Fraud Detection Architecture"
        ],
        "Real-time Fraud Detection Demonstration": [
          "Agenda",
          "Install VirtualBox and Image",
          "Code Setup",
          "Start Servers",
          "Run Spark Jobs from Intellij",
          "Clean Up",
          "Airflow Configuration",
          "Build Project and Start Servers",
          "Airflow Automation"
        ],
        "Code Walkthrough": [
          "Agenda",
          "Project Structure",
          "Spark Initial Import Job",
          "Spark ML Job",
          "Spark Streaming Initialization and Consumption",
          "Spark Streaming Processing and Prediction",
          "Spark Streaming Exactly Once Semantics",
          "Spark Streaming Grace-full Shutdown",
          "Kafka Producer",
          "Fraud Alert Dashboard",
          "Airflow Automation",
          "Course Conclusion"
        ]
      },
      "requirements": [
        "Spark Streaming, Spark ML, Kafka, Cassandra, Programming IDE like Intellij or Eclipse, Java, Scala"
      ],
      "description": "Real-time Credit card Fraud Detection is implemented using Spark Kafka and Cassandra.\nSpark ML Pipeline Stages like String Indexer, One Hot Encoder and Vector Assembler is used for Pre-processing\nMachine Learning model is created using the Random Forest Algorithm\nData balancing is done using K-means Algorithm\nIntegration of Spark Streaming Job with Kafka and Cassandra\nExactly-once semantics is achieved using Spark Streaming custom offset management\nAirflow Automation framework is used to automate Spark Jobs on Spark Standalone Cluster.",
      "target_audience": [
        "Data Scientist, Data Engineers, Software Engineers, Managers, Architects, Computer Science Engineering Students"
      ]
    },
    {
      "title": "Python, JS, & React | Build a Blockchain & Cryptocurrency",
      "url": "https://www.udemy.com/course/python-js-react-blockchain/",
      "bio": "Updated for 2026: Build a blockchain and cryptocurrency like Bitcoin with Python, JS, React, and more!",
      "objectives": [
        "Updated for 2026: learn how to build a full-stack blockchain+cryptocurrency from an engineer with 5+ years of industry experience.",
        "How to build a blockchain and cryptocurrency system from scratch.",
        "The fundamentals of python - data structures, object-oriented programming, modules, and more.",
        "The ins and outs of hashing and sha256.",
        "Encoding and decoding in utf-8.",
        "Testing Python applications with pytest.",
        "Python virtual environments.",
        "The concept of proof of work, and how it pertains to mining blocks.",
        "Conversion between hexadecimal to binary.",
        "HTTP APIs and requests.",
        "How to create APIs with Python Flask.",
        "The publish/subscribe pattern to set up networks.",
        "When to apply the concepts of serialization and deserialization.",
        "Public/private keypairs and generating data signatures.",
        "The fundamentals of JavaScript.",
        "Frontend web development and how web applications are constructed.",
        "The core concepts of React and React hooks.",
        "How the React engine works under the hood, and how React applies hooks.",
        "CORS - and how to get over the CORS error properly.",
        "How to build a pagination system."
      ],
      "course_content": {
        "Introduction": [
          "Course Goals and Curriculum Overview",
          "Build a Blockchain with Python in 13 Minutes | Lightning Version"
        ],
        "Python Fundamentals": [
          "Section Preview and Outline: Python Fundamentals",
          "Section Preview: Python Fundamentals",
          "Set up Python and other Software Installations (Mac, Linux, and Windows)",
          "For Windows: Install Windows Subsystem for Linux and VS Code",
          "Python Interpreter and Fundamentals",
          "Strings and Variables",
          "Functions",
          "Control Flow: Booleans, Comparison Operators, and If Statements",
          "Loops: While and For",
          "Data Structures: Lists, Sets, and Dictionaries",
          "Overview: Classes and Object-Oriented Programming",
          "Code: Classes and Object-Oriented Programming",
          "Section Summary: Python Fundamentals"
        ],
        "Start the Blockchain Application": [
          "Section Preview and Outline: Start the Blockchain Application",
          "Section Preview: Start the Blockchain Application",
          "The Blockchain and Cryptocurrencies - What, Why, and How",
          "The Blockchain and Block class",
          "Course Repository",
          "Modules and __main_",
          "Mining Blocks and the Genesis Block",
          "Update add_block and Static Methods",
          "The Hashing Algorithm Part 1",
          "Hashing and SHA-256",
          "Encoding and Decoding in UTF-8 | An Overview",
          "The Hashing Algorithm Part 2, and Lambda Functions",
          "Section Summary: Start the Blockchain Application"
        ],
        "Test the Application": [
          "Section Preview and Outline: Test the Application",
          "Section Preview: Test the Application",
          "Virtual Environments, Pip, and Pytest",
          "Quick tip: updating python packages, requirements.txt, and dependencies",
          "Organize the Application into Packages",
          "Test the Application",
          "Test the Blockchain",
          "Section Summary: Test the Application"
        ],
        "Proof of work": [
          "Section Preview and Outline: Proof of Work",
          "Section Preview: Proof of Work",
          "Proof of Work and the 51% Attack",
          "Difficulty and the Nonce Value",
          "Dynamic Difficulty and the Mine Rate",
          "Test Adjust Difficulty",
          "Proof of Work System | Average Work Script",
          "Hex to Binary Conversion",
          "Test hex_to_binary",
          "Section Summary: Proof of Work"
        ],
        "Preparing the Blockchain for Collaboration": [
          "Section Preview and Outline: Preparing the Blockchain for Collaboration",
          "Section Preview: Preparing the Blockchain for Collaboration",
          "Chain Validation and Replacement Overview",
          "Validate a Block",
          "Test is_valid_block",
          "Chain Validation",
          "Chain Replacement",
          "Section Summary: Preparing the Blockchain for Collaboration"
        ],
        "The Blockchain Network - Flask API and Pub/Sub": [
          "Section Preview and Outline: The Blockchain Network",
          "Section Preview: The Blockchain Network",
          "APIs, HTTP, and Flask Overview",
          "Set Up Flask",
          "GET the Blockchain Data",
          "Respond with the blockchain as JSON",
          "Mine Block Request",
          "Real-Time Messaging Network through Pub/Sub",
          "Set up PubNub",
          "Make sure to have the proper version of PubNub installed",
          "PubSub Class",
          "Peer Instances",
          "Broadcast Blocks",
          "Add Received Blocks",
          "Avoid Redundant Pub/Sub Interactions",
          "Synchronize a Peer on Startup",
          "Section Summary: The Blockchain Network"
        ],
        "The Cryptocurrency: Wallets, Keys, and Transactions": [
          "Section Preview and Outline: The Cryptocurrency - Wallets, Keys, & Transactions",
          "Section Preview: The Cryptocurrency",
          "Wallets, Keys, and Transactions Overview",
          "Wallets and Cryptography Module",
          "Sign Data",
          "Verify Signatures",
          "Test the Wallet",
          "Transactions",
          "Test Transactions",
          "Transaction Updates",
          "Note: Updating local transactions with the Redundant PubSub Fix",
          "Test Transaction Updates",
          "Validate Transactions",
          "Section Summary: The Cryptocurrency"
        ],
        "Transactions on the Network": [
          "Section Preview and Outline: Transactions on the Network",
          "Section Preview: Transactions on the Network",
          "Download Postman",
          "Transact Endpoint",
          "Serialize the Wallet Public Key",
          "Encode the Signature and a Successful POST Transact",
          "Transaction Pool: Overview",
          "Transaction Pool: Code",
          "Broadcast Transactions",
          "Transaction Updates in the API and Truthy/Falsy values",
          "Section Summary: Transactions on the Network"
        ],
        "Connect the Blockchain and Cryptocurrency": [
          "Section Preview and Outline: Connect the Blockchain and Cryptocurrency",
          "Section Preview: Connect the Blockchain and Cryptocurrency",
          "Mine Transactions",
          "Test App Script",
          "Clear Transaction Pool Transactions",
          "Calculate Wallet Balances: Overview",
          "Calculate Wallet Balances: Code",
          "Test Calculate Wallet Balance",
          "Balance Property and Wallet Info Endpoint",
          "Mining Reward",
          "Validate Mining Rewards",
          "Transaction Chain Validations",
          "Test Transaction Chain Validations",
          "Check Historic Balances",
          "Section Summary: Connect the Blockchain and Cryptocurrency"
        ]
      },
      "requirements": [
        "You can be new to Python.",
        "You can be new to JavaScript.",
        "You can be new to blockchains and cryptocurrencies.",
        "You can be new to React.",
        "If you are a complete beginner to programming, you may find this course fast paced. Everything is explained from scratch. But, there's a lot of concepts: Python, the blockchain, JavaScript, React, and more. It might help to do a couple introductory programming tutorials first."
      ],
      "description": "Why should you take this course?\nThe better question: why shouldn't you?\nThis course brings together some of today's most-in demand skills and exciting technologies: Python, Blockchains, Cryptocurrencies, Backend Development, JavaScript, React.js, and React Hooks. By investing in it, you’re not just learning—you’re building a portfolio-ready blockchain and cryptocurrency system from the ground up.\nAccording to the Stack Overflow 2025 Developer Survey, Python and JavaScript remain the most popular programming languages, and React.js is the most loved frontend framework. Add blockchain development on top, and you’ll be at the forefront of modern technology.\n\n\n***\nStudent feedback\n\"Outstanding course - I have a fully working and tested blockchain thanks to this course! David was super helpful in the Q&A, and did an excellent job of breaking everything down.\" - M.R.\n\"Excellent! The basic blockchain code is introduced early on. Explanations are very clear\" - D.A\"\n\"David has done such an amazing job with this course! He is patient and walks you through blockchain concepts from start to finish… A very solid foundation!\" - K.I.\n\n\n***\nWho is this course for?\nBeginners: Start from scratch with Python and JavaScript. Every core concept is explained step by step.\nExperienced developers: Skip the intros and dive straight into building the blockchain and cryptocurrency project.\nThe course adapts to your experience—your journey, your pace.\n\n\n***\nWhat you’ll achieve:\nLearn Python and Backend Web Development.\nBuild a Blockchain and Cryptocurrency Project that you can add to your portfolio.\nLearn JavaScript, Frontend Web Development, React.js, and React Hooks.\nThe course's main project is to build a blockchain and cryptocurrency. With a blockchain and cryptocurrency system as the main goal, you will go through a course journey that starts with backend development using Python. Then, you will transition to frontend web development with JavaScript, React.js, and React Hooks.\nHere's an overview of the overall course journey:\nGet an introduction of the Python Fundamentals.\nBegin building the Blockchain Application with Python.\nTest the Application using Pytest.\nIncorporate the crucial concept of Proof of Work into the Blockchain.\nEnhance the application to prepare for networking.\nCreate the Blockchain network using Flask and Pub/Sub.\nIntegrate the Cryptocurrency, building Wallets, Keys, and Transactions.\nExtend the network implementation with the cryptocurrency.\nTransition from Python to JavaScript with a \"From Python to JavaScript\" introduction.\nEstablish frontend web development skills and begin coding with React.js.\nCreate the frontend portion for the blockchain portion of the system.\nComplete the frontend by building a UI for the cryptocurrency portion of the system.\nIn addition, here are the skills that you'll gain from the course:\nHow to build a blockchain and cryptocurrency system from scratch.\nThe fundamentals of python - data structures, object-oriented programming, modules, and more.\nThe ins and outs of hashing and sha256.\nEncoding and decoding in utf-8.\nTesting Python applications with pytest.\nPython virtual environments.\nThe concept of proof of work, and how it pertains to mining blocks.\nConversion between hexadecimal and binary.\nHTTP APIs and requests.\nHow to create APIs with Python Flask.\nThe publish/subscribe pattern to set up networks.\nWhen to apply the concepts of serialization and deserialization.\nPublic/private keypairs and generating data signatures.\nThe fundamentals of JavaScript.\nFrontend web development and how web applications are constructed.\nThe core concepts of React and React hooks.\nHow the React engine works under the hood, and how React applies hooks.\nCORS - and how to get over the CORS error properly.\nHow to build a pagination system.\n\n\n***\nFrequently asked questions\nCan I use the course project for my own software product?\nYes! Feel free to use the course project as the foundation for your own software product/company. The course code is open source. And I'm happy to provide advice via the Q&A section, or direct messages.\nWill this help me get a job?\nAbsolutely. You’ll graduate as both a software engineer and a specialized blockchain developer. This skill set is rare, in demand, and opens doors to exciting opportunities.\nWhat is the difference between this course and your other courses on building a blockchain and cryptocurrency?\nThis is a remastered version of my other blockchain courses, using Python this time! Since Python is a language that can greatly serve you in your future with software engineering and/or the blockchain, this course is here with Python as a main emphasis.\n\n\n***\nFinal word\nUltimately, this course is a learning experience like no other. It's packed with languages and technologies from Python, to the blockchain, to React.js, and everything in between. On top of that. It’s an opportunity to become a pioneer in such a young and promising field.\nSee you inside the course!",
      "target_audience": [
        "Those looking to add Python, JavaScript, or React to their programming skill set.",
        "Rising engineers searching for an interesting project to add to their software portfolio.",
        "Entrepreneurs researching the foundation for their next product.",
        "Anyone looking for supplementary materials for other Python, JavaScript, blockchain, or general programming courses.",
        "Python developers wanting to learn about the blockchain, cryptocurrencies, and/or React and JavaScript.",
        "Students of any of my previous blockchain courses, who want to leverage their knowledge to learn Python."
      ]
    },
    {
      "title": "Mastering critical SKILLS in Algorithms using C++: Part 2",
      "url": "https://www.udemy.com/course/skills-algorithms-cpp2/",
      "bio": "70 Challenges to master recursive based techniques, shortest-path and MST algorithms.",
      "objectives": [
        "Master recursive techniques by solving MANY problems",
        "Expose yourself to many algorithmic techniques",
        "After the course, a smooth experience to prepare for coding interviews",
        "Short and well written codes"
      ],
      "course_content": {
        "Dynamic Programming (DP) - Intro": [
          "Fibonacci Sequence",
          "Fibonacci RCA",
          "Fibonacci Implementations",
          "Dynamic Programming"
        ],
        "DP: Pick or Leave Pattern": [
          "Knapsack Problem 1",
          "Knapsack Problem 2",
          "Knapsack Problem 3",
          "Knapsack Problem 4",
          "Knapsack Problem 5",
          "LIS Problem 1",
          "LIS Problem 2",
          "LIS Problem 3",
          "LIS Problem 4",
          "LCS Problem 1",
          "LCS Problem 2",
          "DP homework 1 - 3 Medium Challenges",
          "DP homework 1 - Solutions p1 p2",
          "DP homework 1 - Solutions p3",
          "DP homework 2 - 3 Medium to Hard Challenges",
          "DP homework 2 - Solutions p1",
          "DP homework 2 - Solutions p2",
          "DP homework 2 - Solutions p3"
        ],
        "DP: Enumerating the choices": [
          "Edit Distance 1",
          "Edit Distance 2",
          "Integer Break 1",
          "Integer Break 2",
          "DP Homework 1 - 2 Easy to Medium Challenges",
          "DP Homework 1 - Solutions"
        ],
        "DP: Range Patterns": [
          "General Range Pattern",
          "Consecutive Range Pattern",
          "Nested Range Pattern 1",
          "Nested Range Pattern 2",
          "DP Homework 1 - 3 Medium Challenges",
          "DP Homework 1 - Solutions",
          "DP Homework 2 - 2 Hard Challenges",
          "DP Homework 2 - Solutions"
        ],
        "DP: Counting": [
          "Counting DP 1",
          "Counting DP 2",
          "DP Homework 1 - 4 Medium Challenges",
          "DP Homework 1 - Solutions p1",
          "DP Homework 1 - Solutions p2",
          "DP Homework 1 - Solutions p3",
          "DP Homework 1 - Solutions p4"
        ],
        "DP on Grid": [
          "DP on Grid",
          "DP on Grid Homework 1 - 4 Medium to Hard Challenges",
          "DP on Grid Homework 1 - Solutions p1 p2",
          "DP on Grid Homework 1 - Solutions p3",
          "DP on Grid Homework 1 - Solutions p4"
        ],
        "DP: Building Output": [
          "Building DP Output",
          "Building DP Output Homework 1 - 3 Medium Challenges",
          "Building DP Output Homework 1 - Solutions"
        ],
        "DP Tablulation": [
          "Note",
          "DP Tabulation",
          "LIS Tabulation 1A",
          "LIS Tabulation 1B",
          "LIS Tabulation 2",
          "Coin Change Tabulation 1",
          "Coin Change Tabulation 2",
          "DP Tabulation Homework 1 - 4 Easy to Medium Challenges",
          "DP Tabulation Homework 1 - solutions",
          "DP Tabulation Homework 2 - 3 Very Hard Challenges [Optional]"
        ],
        "DP Marathon": [
          "More to tackle"
        ],
        "Backtracking": [
          "Backtracking 1",
          "Backtracking 2 - Maze",
          "Backtracking 3 - Maze Tracing",
          "Backtracking 4 - Maze Extension",
          "Backtracking - Partition to K 1",
          "Backtracking - Partition to K 2",
          "Backtracking - Partition to K 3",
          "Backtracking - Partition to K 4",
          "Backtrack Homework 1 - 6 Medium to Hard Challenges",
          "Backtrack Homework 1 - Solution p1",
          "Backtrack Homework 1 - Solution p2",
          "Backtrack Homework 1 - Solution p3",
          "Backtrack Homework 1 - Solution p4",
          "Backtrack Homework 1 - Solution p5",
          "Backtrack Homework 1 - Solution p6"
        ]
      },
      "requirements": [
        "Strong programming background",
        "Solved several practice during a programming course",
        "STL, especially vector class. Others include: set, map and hash table",
        "Optional but recommended: Implement long programming projects",
        "Highly recommended: Attended a strong data structure course first and solved a lot"
      ],
      "description": "Almost all other courses focus on knowledge. In this course, we focus on gaining real skills.\nOverall:\nThe course covers a good subset of algorthmic topics\nLearn the inner details of the algorithms and their time & memory complexity analysis\nLearn how to code line-by-line\nSource code and Slides and provided for all content\nAn extensive amount of practice to master the taught algorithms (where most other content fails!)\n\n\nContent:\nDynamic Programming: Intro\nDP: Pick or Leave Pattern\nDP: Enumerating the choices\nDP Range Patterns\nDP on Graph and Grids\nDP Counting\nDP: Printing Solution\nDP Tabulation\nDP Solving Marathon\nBacktracking\nDivide and Conquer\nShortest Path Algorithm: Floyd-Warshal\nShortest Path Algorithm: Bellman-Ford\nShortest Path Algorithm: Dijkstra\nMinimum Spanning Tree: Prim\nMinimum Spanning Tree: Kruskal\n\n\n\n\nTeaching Style:\nInstead of long theory then coding style, we follow a unique style\nI parallelize the concepts with the codes as much as possible\nUnless better for you to work on pseudocode first\nGo Concrete as possible\nUse Clear Simple Visualization\nEngagement\n\n\nBy the end of the journey\nSolid understanding of Algorithms topics in C++\nMastering different skills\nAnalytical and Problem-Solving skills\nClean coding for algorithms\nWith the administered problem-solving skills\nYou can start competitive programming smoothly\nA strong step toward interviews preparation\n\n\nPrerequisites\nProgramming Skills:\nStrong Programming skills\nSolving a lot of basic problem-solving problems on fundamentals\nGood understanding for basic recursion (E.g. Fibonacci)\nSTL, especially Vectors, map/set, unordered map/set\nHighly Preferred:\nDo programming projects\nFinish a descent data structure course (extensive data structure practice)\nDon't miss such a unique learning experience!\n\n\nAcknowledgement: “I’d like to extend my gratitude towards Robert Bogan for his help with proofreading the slides for this course”",
      "target_audience": [
        "People who want to master a critical CS component",
        "People who want to prepare for interviews, then Algorithms is a must step before interviews preparations"
      ]
    },
    {
      "title": "Learn Spring & Spring Boot – 10x Productive Java Development",
      "url": "https://www.udemy.com/course/learn-spring-and-spring-boot-10x-productive-java-development/",
      "bio": "Spring Boot is highly in-demand and ultimate way to develop Java applications. Start developing your apps right now!",
      "objectives": [
        "Ways to get up and running with Spring Boot",
        "Understand how Spring and Spring Boot works",
        "Work with Spring Profiles and Spring Configuration",
        "Develop Spring MVC Application from scratch",
        "Connect to databases with Spring Data and JPA",
        "Create repositories and manage entities",
        "Develop a full-fledged RESTful API",
        "Understand HTTP Request and Response lifecycles",
        "Work with REST Template, Netflix Feign Client and Eureka Server",
        "Develop a full-featured Spring MVC CRUD application with latest technologies",
        "See changes instanlty with Spring Dev Tools and LiveReload",
        "Document your RESTful API with Swagger",
        "Schedule actions and events with Spring Scheduler",
        "Template and send emails with Thymeleaf and Spring Mail"
      ],
      "course_content": {
        "Introduction": [
          "Welcome",
          "About This Course",
          "What is Spring?",
          "What is Spring Boot?",
          "Section Overview"
        ],
        "Setting Up Your Development Environment": [
          "Setting Up Development Environment",
          "Installing Java on Windows",
          "Installing Java on MacOS",
          "IDE Options",
          "Installing Intellij IDEA on Windows",
          "Installing Intellij IDEA on MacOS",
          "Section Overview"
        ],
        "Let’s Get Started with Spring Boot": [
          "Creating Our First Spring Boot Application - Hello World",
          "Spring Inıtializr",
          "Maven Overview",
          "Packaging Basics: Make Your App an Executable JAR with Maven",
          "Exercise - Build Your Very First Application",
          "Section Overview"
        ],
        "Fundamentals of Spring Boot": [
          "Dependency Injection and Inversion of Control",
          "Spring Boot Application Lifecycle",
          "Application Properties and Alternatives",
          "Spring Profiles and Spring Configuration",
          "Section Overview"
        ],
        "Spring MVC with Spring Boot": [
          "Developing a Spring MVC Application Overview",
          "Resources and Static Content",
          "Templating and Template Engines",
          "Demo: Thymeleaf",
          "Exercise: Build Your Own Spring MVC Application",
          "Section Overview"
        ],
        "Spring Data with Spring Boot": [
          "Introduction to JPA and Spring Data",
          "H2 In-Memory Database Overview",
          "Creating Entities With JPA",
          "Creating Repositories and Persisting Data with JPA and Spring Data",
          "Reading and Querying Data with JPA and Spring Data",
          "Different Ways to Query Data with JPA and Spring Data",
          "Updating Data with JPA and Spring Data",
          "Deleting Data with JPA and Spring Data",
          "Exercise: Build Your Own Spring Data Application",
          "Section Overview"
        ],
        "RESTful APIs with Spring Boot": [
          "Introduction to RESTful APIs",
          "HTTP Request Types",
          "HTTP Response Codes",
          "HTTP Clients",
          "GET with Spring REST",
          "POST with Spring REST",
          "PUT with Spring REST",
          "DELETE with Spring REST",
          "REST API Elements Explained",
          "Refactoring the REST API",
          "Refactoring the REST API - Part 2",
          "REST with REST Template",
          "REST with Netflix's Feign Client and Eureka Server Registration",
          "Developing a Feign Client for HTTP Requests with Eureka Server",
          "Exercise: Build Your Own REST API",
          "Section Overview"
        ],
        "Bring It All Together - Let's Build a CRUD Application": [
          "CRUD Application Overview",
          "Bootstrapping the Application",
          "Navigation and Index Page with HTML5, CSS3 and Bootstrap",
          "Create Product Page",
          "Listing Products Page",
          "Updating Product Page",
          "Deleting Product",
          "Reviewing our Spring MVC Application",
          "Exercise: Build Your Own CRUD Application",
          "Section Overview"
        ],
        "Extras": [
          "See Your Changes Instantly - Spring DevTools and LiveReload",
          "Document Your RESTful API - Swagger",
          "Get to Know Your Application Better - Spring Actuator",
          "Schedule Actions - Spring Scheduler",
          "Get Rid of Some More Boilerplate Code - Project Lombok",
          "Template Emails and Deliver - Spring Email and Thymeleaf",
          "Section Overview"
        ],
        "Conclusion": [
          "What We've Learned and What Comes Next?",
          "A Huge Thank You!"
        ]
      },
      "requirements": [
        "Students should be familiar with Java Programming Language",
        "A computer that can run Java and any Java IDE like IntelliJ or Eclipse"
      ],
      "description": "Do you want to become a Spring Developer with lots of high-demand skillsets in your toolbox? Do you want to learn how Spring Framework and Spring Boot works? You should definitely join me where we will be diving deep into the Spring Framework and Spring Boot and develop Spring MVC, Spring Data, Spring REST applications and much more starting from scratch!\n\n\nList of technologies we will cover in this course is huge. Covering everything with Spring technology stack, to combine all the technologies we learned, we will buid a full-featured, production-grade Spring MVC CRUD application where we will use Spring Data, Spring REST, Spring MVC, Thymeleaf, HTML5, CSS3 and Bootstrap! So we will also get a taste of UI and Front-End development too with Spring!\n\n\nFirst, we will start by setting up our development environment. To set things up, I will show you how you can prepare your environment both on Windows and MacOS. We'll then learn and understand how Spring Framework and Spring Boot works. We will discover the architecture of Spring Framework and Spring Boot and how everything amazingly work together and handled by the framework itself. We will make use of Spring Initializr to create all of our applications and I will teach you how you can make the most out of it. We will use both use IDE version of Spring Initializr and also start dot spring dot io. We will also learn to how to build and package our application with Maven. Then we will start by developing our first Spring Boot application! After our first application, we will start digging into Spring Boot more and learn how Dependency Injection(DI) and Inversion of Control(IoC) works. Learning DI and IoC is a crucial process in learning how Spring works and to actually work with it. When we understand DI and IoC, we will discover the world of Spring Profiles and Spring Configuration. We will activate profiles and learn how to configure our application for our specific needs.\n\n\nWhen we grasp the inner workings of Spring, we will start developing our first web application with Spring MVC and Thymeleaf. When we're implementing, you will understand what each and every component is and how to handle static content like Javascript, CSS, Images and much more in our application. Most importantly, you will understand what templating is and how to dinamicaly bind data to HTML pages.\n\n\nAfter we finish our first Spring MVC application, we will learn and understand how Spring Data and JPA works and to actually implement them, we will connect to databases, create entities and repositories and persist data with Spring Data and JPA.\n\n\nOn top of Spring Data, we will build a RESTful API following the standards in the real-world use-cases. We will create controllers and implement all the important HTTP operations such as GET, POST, PUT and DELETE. After finishing our implementation, we will take safety measures for our RESTful API and implement ControllerAdvice and error-handling. After handing errors for our RESTful API, we will take a step back and refactor our code.\nWhen we finish developing our RESTful API, we will take a bold step ahead and combine all the knowledge we had throughout the course to develop a full-featured Spring MVC CRUD application with a beautiful UI! We'll make use of Spring Boot, Spring Data, Spring REST, Spring MVC, Thymeleaf, HTML5, CSS3, Bootstrap and much more!\nWe are not done yet! At the end of \"Bring it All Together\" section. We will move on with \"Extras\" section where we will discover lots of other great technologies and libraries we can use in our applications. To see our changes in any application and most importantly in web applications, we will discover Spring Dev Tools and Live Reload. We will also nicely document our RESTful API with Swagger where we can navigate and interact with our API. To understand the metrics of our application, we will discover Spring Actuator and kepp track of everything going on with our application. We will also learn another cool feature of Spring as it is the Spring Scheduler. With Spring Scheduler, it is really easy to schedule and trigger actions for specific timelines in any application. Then we will discover the beauty of Project Lombok to get rid of lots of boilerplate code in our application. And finaly, we will combine Thymeleaf with Spring Email capabilities to template and deliver HTML5 emails from our application.\nFinally, do not forget that Udemy offers you the lifetime access to course contents from either desktop, tablet and your mobile. By taking this course, you can learn Spring technologies anywhere at your own pace and play again and again to grasp every single detail!\nAgain, we have a huge list of technologies that we are going to cover in this course. Spring is in huge demand these days thanks to Spring Boot and all of its offerings. If you want to jumpstart your career with Spring then join me in this course and take a huge step forward for becoming an amazing Spring Developer!",
      "target_audience": [
        "Students who want to jumpstart their career as a Spring Developer",
        "Students want to learn Spring and Spring Boot",
        "Students new to Spring and Spring Boot technologies",
        "Experienced developers who want to learn Spring Framework and Spring Boot technologies"
      ]
    },
    {
      "title": "Master CI/CD for React Native",
      "url": "https://www.udemy.com/course/continuous-integration-and-continuous-delivery-for-react-native/",
      "bio": "Learn Continuous Integration and Continuous Deployment / Delivery to increase your employability in 2019 and beyond!",
      "objectives": [
        "Apply complete CI/CD flows in their app development process.",
        "Use GitHub to trigger code checks and app distribution to users.",
        "Use App Center to automate checks and protect important branches.",
        "Leverage App Center to automatically create builds on every merge.",
        "Automate the distribution of a new build to beta testers.",
        "A full list of other features are on this page."
      ],
      "course_content": {
        "DevOps": [
          "Course Structure",
          "What is DevOps?",
          "Why use DevOps?",
          "What You Will Accomplish by The End?"
        ],
        "Source Control and GitHub": [
          "Source Control And Branch Structure",
          "Initialize Version Control",
          "Commiting Changes",
          "Creating Branches",
          "Working with Branches",
          "Creating a GitHub Repo",
          "Pushing to GitHub",
          "Working in Teams",
          "Making Pull Requests",
          "A Simulated CI/CD Rundown"
        ],
        "Intro to App Center": [
          "Intro to App Center",
          "Creating an App Center Account",
          "Connecting App Center",
          "Source Code and GitHub Repo",
          "Crashing the Application",
          "Uploading iOS Symbols to App Center",
          "Check if the App Crashed in previous session",
          "Tracking All Kinds of Events",
          "Tracking Events with Better Context"
        ],
        "Continuous Integration": [
          "Why Use Continuous Integration?",
          "Working with Feature Branches",
          "A First CI Build",
          "Adding Checks to Pull Requests",
          "Cleaning Up the Connections",
          "Using Checks to Protect Branches",
          "A Complete CI Flow"
        ],
        "Continuous Quality": [
          "Intro to Continuous Quality",
          "Prepare Android Project for Tests",
          "Prepare iOS Project for Tests",
          "Installing the App Center CLI",
          "Uploading the Android Tests",
          "Uploading the iOS Tests",
          "Running Automatic Tests - iOS",
          "Running Automatic Tests - Android"
        ],
        "Continuous Delivery": [
          "Intro to Continuous Delivery",
          "Creating an iOS Distribution Group",
          "Configuring Android Continuous Delivery",
          "Configuring iOS Continuous Delivery",
          "Installing from App Center - Android",
          "Installing from App Center - iOS",
          "Connecting the Play Store to App Center",
          "Connecting the iOS App Store to App Center",
          "Continuous Delivery to the App Store",
          "Continuous Integration / Continuous Delivery"
        ],
        "Extra Information - Source code, and other stuff": [
          "Source Codes",
          "Bonus Lecture and Information"
        ]
      },
      "requirements": [
        "The course does not require any previous CI/CD or DevOps experience",
        "Some basic Git & GitHub experience is desirable",
        "While this is a CI/CD course, it is oriented to React Native developers, so some basic React Native development experience is required."
      ],
      "description": "What you will learn in this course?\nIn this course, you will learn the fundamentals of CI/CD which is short for Continuous Integration/Continuous Delivery and be able to apply these fundamentals in your React Native app development process.\n\nThe word Deployment is often used in place of Delivery but effectively means the same thing.\n\nThese skills are essential to maximize your career potential in 2019 and beyond, because more and more companies are adopting these development practices requiring new employees or freelancers to be well versed in these concepts.\nWhat is Continuous Integration (CI) ?\nCI is the practice of merging all programmers current working copies to a shared mainline on a regular basis (usually several times a day).\nA developer checks out a working copy of the code base prior to making a change.  Over time as other developers check out and make changes, this checked out working copy of the source code base gets out of date, potentially requiring more and more work by developers to actually  check their completed changes back in to the main repository.\nWithout using CI it can become really difficult to merge all these changes and can lead to it taking more time to  merge changes back into the main source code base than it took to make the the change itself.\nCI seeks to eliminate this problem by making sure all developers integrate early and often with the goal to reduce rework and ultimately save cost and time.  This involves all developers merging their code back into the main repository multiple times a day.\nAn added bonus is that each programmer who is merging changes needs to build and run (and pass) all unit tests which usually run automatically meaning the code base is easier to work with and merge changes into and is potentially more stable as a result.\nWhat is Continuous Delivery or Deployment (CD) ?\nThis extends CI to ensure that new changes to software can be released to clients quicker, but in a more sustainable way.  It takes the advantages of CI from a development perspective (automated testing, on code check-in, etc) allowing the actual code base to be built and new releases to be automatically released to the client, effectively meaning a new version can be deployed to the client by a click of a button.\nCI/CD concepts.\nBy adhering to a CI/CD development process, the code base can be built and released more quickly, and is in a more stable state overall.  These are some of the reasons why more and more companies are adopting a CI/CD development process in 2019 and beyond.\nKey topics in this course.\n1. Continuous Integration\n2. Continuous Delivery\n3. App Center\n4. GitHub Pull Requests\n5. Branch protection\n6. UI Tests\n7. App Diagnostics\n8. App Analytics\nWhat will you learn?\n• Learn how to track errors and crashes in your apps.\n• Learn how to track any event triggered within your apps.\n• Apply complete CI/CD flows in your app development process.\n• Use GitHub to trigger code checks and app distribution to users.\n• Use App Center to automate checks and protect important branches.\n• Leverage App Center to automatically create builds on every merge.\n• Automate the distribution of a new build to beta testers.\n• Automate the distribution of new releases to the Google app store.\n• Focus on the development of features, leave the build and distribution to App Center.\n• Improve teamwork with automatic builds and checks that improve the quality of your merges.\n• Enable product discovery with the help of Analytics in the App Center.\n• Test your app in a wide array of cloud-hosted physical devices.\nDifferences with other CI/CD courses.\nWhile there are other CI/CD courses out there, most of them are too general. This course is completely tailored to React Native developers, this way you can immediately start applying what you learn in your app development process. Because of this, the course also covers topics not normally found on other CI/CD courses, such as UI Testing for React Native app development.\nWho is the course aimed at?\n\nThe course does not require any previous CI/CD or DevOps experience, although some basic Git & GitHub experience is desirable.\n\nWhile this is a CI/CD course, it is oriented to React Native app developers, so some basic React Native app development experience is required.\nGetting started\nIf you are ready to get started, click on the Enroll or Add to Cart button on this page and start taking your CI/CD skills with\nReact Native to the next level.",
      "target_audience": [
        "React Native developers looking to become skilled in the CI/CD process"
      ]
    },
    {
      "title": "Computer Science 101: Master the Theory Behind Programming",
      "url": "https://www.udemy.com/course/computer-science-101-master-the-theory-behind-programming/",
      "bio": "Computer Science 101: Learn Computer Science to become a better Programmer and Software Engineer.",
      "objectives": [
        "Understand the Fundamental Theories of Algorithm Analysis",
        "Be able to Compare Various Algorithms",
        "Understand When to use Different Data Structures and Algorithms",
        "Understand the Fundamentals of Computer Science theory",
        "Understand the Core Sorting Algorithms"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Binary Number Introduction",
          "Binary Deca Number Conversion",
          "Binary Number System Notes",
          "Binary Number System Quiz"
        ],
        "Analyzing Algorithms": [
          "All Notes",
          "Introduction to Time-Complexity",
          "Math Refresher: Logarithmic Functions",
          "Math Refresher: Factorial Functions",
          "Math Refresher: Algebraic Expressions",
          "Math Refresher Notes",
          "n-notation Introduction",
          "n-notation Scaling",
          "n-notation Example",
          "Big O Notation",
          "n-Notation Notes",
          "Big O Notation Quiz",
          "Big O Real-World Example"
        ],
        "Arrays": [
          "How is Data Stored?",
          "Fixed Array Introduction",
          "Fixed Array Run Times",
          "Binary Search Algorithm (Fixed Array Sorted Search)",
          "Fixed Array Notes",
          "Circular Array Intro + Modulo",
          "Circular Array Deep Dive",
          "Circular Array Code Example",
          "Dynamic Arrays",
          "O(1) Approximation",
          "Circular and Dynamic Array Notes",
          "Array Review",
          "Array Real World + Code Examples",
          "Array Quiz"
        ],
        "Linked Lists": [
          "Nodes",
          "Singly Linked List",
          "Linked List Run Times",
          "Singly Linked-List Code Example",
          "Singly-Linked List Notes",
          "Doubly Linked Lists",
          "Tail Pointers",
          "Doubly-Linked List and Tail Pointer Notes",
          "Linked List Real World Examples",
          "Linked List Review",
          "Linked Lists"
        ],
        "Stacks and Queues": [
          "Stacks",
          "Stack Examples",
          "Stack Code Example",
          "Stack Notes",
          "Queues",
          "Queue Examples",
          "Queue Code Example",
          "Queue Notes",
          "Queue and Stack Run Times",
          "Stack and Queue Real World Examples",
          "Stacks and Queues Quiz",
          "Stacks and Queues Quiz Explanation"
        ],
        "Sorting Algorithms": [
          "Introduction to Sorting Algorithms",
          "Bubble Sort",
          "Bubble Sort Coding Example",
          "Bubble Sort Notes",
          "Selection Sort",
          "Selection Sort Code Example",
          "Selection Sort Notes",
          "Bubble Sort and Selection Sort Quiz",
          "Insertion Sort",
          "Insertion Sort Notes",
          "Recursion",
          "Quick Sort",
          "Quick Sort Run Time",
          "Quick Sort Notes",
          "Quick Sort Code Example",
          "Insertion Sort and Quick Sort Quiz",
          "Merge Sort",
          "Merge Sort Run Times",
          "Merge Sort Notes",
          "Merge Sort Code Example",
          "Stable vs NonStable",
          "Stable Vs NonStable Notes",
          "Merge Sort and Stability Quiz",
          "Sorting Algorithm Real World Examples"
        ],
        "Trees": [
          "Trees",
          "Binary Search Trees",
          "Binary Search Tree Run Times",
          "Tree Code Example",
          "Tree Notes",
          "Tree Quiz",
          "Tree Traversals",
          "Tree Real World Examples"
        ],
        "Heaps": [
          "Heaps Introduction",
          "Heap Analysis",
          "Heaps Real World Examples",
          "Heap Notes"
        ],
        "Graphs": [
          "Introduction to Graphs",
          "Basic Types of Graphs",
          "Graph Terminology",
          "Graph Terminology Summary",
          "Depth First Search",
          "Breadth First Search",
          "BFS and DFS Run Times"
        ],
        "Hashing": [
          "Hashing Overview",
          "Hash Table Overview",
          "Linear Probing",
          "Quadratic Probing",
          "Rehashing",
          "Closed Addressing",
          "Real World Hash Table",
          "Encryption vs Hashing",
          "Hashing Notes"
        ]
      },
      "requirements": [
        "A Willingness to Learn New Topics!",
        "No Prior Experience or Knowledge is Needed!"
      ],
      "description": "Master the Theory to Becoming a Good Programmer!\nIf you're looking to learn the theory that makes great programmers, you've come to the right place! This course is perfect for anyone interested in learning the fundamentals to Computer Science Theory.\nNo Previous Experience Necessary!\nComputer science and technology are often thought of as things only for \"analytical minds\". I believe however that technology and it's theory are for everyone. So I designed this course to teach each topic in a variety of easy to digest ways. Through these multiple reinforcing steps, I believe anyone can follow along and succeed!\n\nWhy is the Theory of Programming Important?\nUnderstanding Computer Science theory is what sets apart Great programmers from average ones. Programming theory is something that transcends a single programming language. It gives you skills and techniques you can apply to any programming language you touch. Learning the theory behind programming is just as important, if not more important than learning a singular programming language like Java or C++.\nProgramming is all about problem solving. Analyzing a problem, and being able to figure out a way that a computer can help with that problem. Computer Science is the practice of this analysis process. It goes over the techniques and knowledge necessary to design efficient and sustainable code.\nSo if you want to begin setting yourself apart from the average programmers, this is the course for you!\nEnroll Now and you'll Learn:\n\nBinary Number System\nN Notation\nBig O Notation\nHow to Analyze a Program\nArrays and their Advantages\nNodes and their Importance\nLinked Lists and their Advantages and Implementations\nStacks implemented with Arrays and Linked Lists\nQueues Implemented with Arrays and Linked Lists\nVarious Sorting Algorithms and Their Comparisions\nTrees and Binary Search Trees\nAnd Much Much More!\nMy Guarantee\nI am so confident you will enjoy this course, I offer a 100% 30-day money-back guarantee through Udemy. If you are not happy with your purchase, I have no problem with giving your money back!\nAre You Ready to Get Started?\nI will be waiting for you inside the course!\nRemember, this is an online course, so you can take it at your own pace. Are you busy right now? That's okay. Enroll today, and take the course at your own pace.\nThanks so much for your interest in this Computer Science 101 Course!\nSee you inside!\nKurt",
      "target_audience": [
        "Anyone who wants to become a Good Programmer",
        "Anyone interested in the Computer Science Discipline",
        "Anyone who wants to learn how to problem solve like a Computer Scientist"
      ]
    },
    {
      "title": "Complete Software Engineering Course with Python",
      "url": "https://www.udemy.com/course/learn-python-3-with-software-engineering-concepts/",
      "bio": "Learn Python 3 with Software Engineering Concepts | Learn Python GUI, Object Oriented Programming, Data Visualization...",
      "objectives": [
        "Software development",
        "Complete Python 3",
        "Graphical user interfaces (GUIs)",
        "Object oriented programming (OOP)",
        "APIs and RESTful APIs",
        "Desktop Apps development",
        "Data visualization",
        "File handling",
        "Working with database",
        "Real world programs",
        "Software development life cycles",
        "Functions",
        "Building text to speech software",
        "Building strong random password generator software"
      ],
      "course_content": {
        "Course Introduction": [
          "Course Overview",
          "Course requirements",
          "[Important] Understand the course"
        ],
        "Introduction to software engineering and programming": [
          "What is Software engineering"
        ],
        "Introduction to Python": [
          "What is Python"
        ],
        "Python Setup": [
          "How to download and install Python",
          "How to download and install PyCharm IDE",
          "How to create Python project in PyCharm"
        ],
        "What are variables in programming": [
          "What are variables",
          "Rules of declaring variables",
          "Quiz no 1",
          "Assignment no 1"
        ],
        "How to write programs in Python": [
          "First program in Python",
          "How to write Python code in the notepad or in the cmd/terminal"
        ],
        "Data Types": [
          "What are data types?",
          "Data types in Python"
        ],
        "Data structures": [
          "What are data structures in Python?",
          "Set in Python",
          "List in Python",
          "List functions in Python",
          "2D list in Python",
          "Dictionaries in Python",
          "Tuples in Python",
          "Test no 1",
          "Assignment no 2"
        ],
        "If statements and Loops": [
          "If statements in Python",
          "Loops in Python",
          "Exercise 1"
        ],
        "Arrays, Input statement and comments": [
          "Arrays in Python",
          "Input function in Python",
          "Comments in Python"
        ]
      },
      "requirements": [
        "Just PC"
      ],
      "description": "This is a complete Python 3 course designed for learners of all backgrounds. You will start from the very basics and progress to more advanced topics, learning programming step by step in simple and clear language. Throughout the course, you will build real-world applications that are both practical and relevant. You will gain a strong understanding of object-oriented programming, learn how to visualize data through graphs and charts, and explore file handling in Python, including how to create, read, write, rename, and delete different types of files.\nThe course also covers working with APIs, helping you understand what APIs and RESTful APIs are and how they’re used in modern applications. You will learn how to build graphical user interfaces (GUIs) in Python and create visually appealing desktop apps.\nYou will also learn about the Software Development Life Cycle (SDLC), a crucial part of professional programming. We have practically implemented the SDLC in the course by building a complete text-to-speech desktop application, following each phase of the development cycle from planning to deployment. You will also discover how to use ChatGPT and AI tools to enhance your coding workflow. Enroll now and start your journey to becoming a skilled Python developer today.",
      "target_audience": [
        "Anybody who want to learn programming in real words"
      ]
    },
    {
      "title": "Advanced Object Oriented Analysis of Hard Problems using UML",
      "url": "https://www.udemy.com/course/advanced-object-oriented-analysis-of-hard-problems/",
      "bio": "Take your software and business analysis skills to completely new levels with advanced UML conceptual modelling.",
      "objectives": [
        "Know how to create a conceptual model of any system",
        "Know in which situations conceptual modelling is efficient and when and how to apply it successfully",
        "Be able to interpret and construct common and advanced conceptual models using UML",
        "Know how business process- and conceptual modelling best is performed in conjunction and how they relate to each other",
        "Acquire knowledge faster",
        "Communicate more clearly and eliminate misunderstandings",
        "Develop more accurate business and software systems",
        "Learn a tool for catalysing creative thinking",
        "Know of different techniques to use when performing conceptual modelling",
        "Know how to prepare, plan, facilitate and document a concept modeling workshop",
        "Achieved practical experience in workshop facilitation",
        "Know of to read and apply common patterns when developing conceptual models"
      ],
      "course_content": {
        "Introduction": [
          "Who Am I? (if you like to know)",
          "Course Introduction - Imagine If No One Used The Same Terms For Any Things",
          "A Concept Map of Udemy and General Applications Areas Of Concept Mapping",
          "Introduction Quiz",
          "Course Goals And Organisation",
          "Two Ways To Complete The Course - Theory First or Practice First"
        ],
        "The Cognitive Foundation Of Concept Mapping": [
          "Introduction To The Cognitive Foundation Of Concept Mapping",
          "We Have Three Memory Systems In Our Brains",
          "Semantic Memory And Knowledge Persistence",
          "Brains Love Visualizations!",
          "How Does Creative Thinking Work?",
          "Let's Eat Our Own Dog Food: A Concept Map Of The Cognitive Foundation",
          "Cognitive Science Quiz"
        ],
        "Philosophical foundations of conceptual analysis - introduction": [
          "The Whole Philosophy Section In Just One Lecture!",
          "What Happens In A Room When We Visualize Our Concepts Together?",
          "Ogden's Triangle - \"This Fellow Isn't Insane; We Are Only Doing Philosophy\"",
          "Four Theories Of The Concept of Concept - How Hard Could It Be?",
          "The Classical Theory About Concepts - How It All Began",
          "The Prototype Theory About Concepts - Is A Dove More Of A Bird Than A Penguin?",
          "The Theory Theory About Concepts - Is It Even Possible To Have The Same Concept?",
          "A Pluralism About Concepts - Perhaps Many Theories Are Needed",
          "Concept Quiz",
          "Important! You Now Have Two Options On How To Proceed!"
        ],
        "Philosophical Foundations Of Conceptual Analysis - Continued": [
          "The Intentionality Of The Mind - \"My Adding Machine Understands Nothing\"",
          "Summary So Far - We Have Concepts In Intentional States In Our Minds!",
          "The Network And The Background - \"The Whole Hurly-Burly Of Human Actions\"",
          "Collective Intentionality - I Think That You Think That I Think That You Think..",
          "Intentionality Quiz",
          "Summary - First Corner - Concepts In Intentional States About Others' States",
          "Language - Second Corner - Communicate Your Meaning",
          "Terms and Propositions - The Signified and The Signifier",
          "Generativity and Compositionality - The Key Mechanisms Of Any Language",
          "Sentence Meaning Is Not Enough! \"Yes I Can; I'd Just Use My Legs!\"",
          "\"The King of France is Bald\" Is False,But So Is \"The King Of France is Not Bald\"",
          "The Indeterminacy Of Translation - \"Lo! An Undetached Rabbit-Part!\"",
          "Language Quiz",
          "Speech Acts - \"Sorry, I Can't. My Mother-In-Law Won't Allow Me!\"",
          "Meaning Through Speech Acts - \"There Is a Fluffy Mouse Catcher On The Mat\"",
          "Five Types Of Speech Acts - All You Need!",
          "The Strange Thing About Declarations About Declarations - We Create Our World",
          "Steven Pinker on - Language as a Window into Human Nature",
          "Speech Act Quiz",
          "Summary - Second Corner - We Refer To Concepts In Our Minds Using Speech Acts",
          "The World Of Objects and Facts - Third Corner In The Triangle",
          "The Ontological Nature Of Objects - Let's Get Deep!",
          "Properties And Relations - \"Being In Love\" Is A Special Kind Of Relation",
          "Objects and Properties Quiz",
          "Facts And Truth - \"The Cat Is Not On The Mat\" Is Also A Fact",
          "Social Facts - Objectively True Knowledge About Subjectively Relative Phenomena",
          "Fact Quiz",
          "Status Functions - A Rock, A Table And A President Are Very Different Things",
          "Function Quiz",
          "Summary - The Triangle In A New Light"
        ],
        "Lessons Learned By Our Deeper Knowledge About How We Create Our World": [
          "Lessons Learned - Overview",
          "Meaning Breakdown - Do They Agree And Do They Think They Agree?",
          "Slow Knowledge Acquisition - There Is So Much Time To Save",
          "Language Legacy - When Language Prevents Strategic Breakthroughs",
          "Rigid Information Systems - Envision Your Future When Conceptualizing",
          "Creative Leap Catalyst - See The Hidden Links No One Else Does",
          "Early Customer Acceptance Of Language - Ground Your Language Collectively",
          "Conclusions So Far - Visualization Of Concepts Eliminates Communication Waste!"
        ],
        "Notation - The Boxes And Arrows And Their Semantics": [
          "What is a model? A Model And It's Subject",
          "Domain Models - It's In the Eye Of The Beholder",
          "What is a model more formally?",
          "Model Quiz",
          "The Unified Modeling Language - The Notation We Are Using In This Course",
          "UML Classes and Instances - The \"Boxes\"",
          "Classes and Instances Quiz",
          "UML Associations - The \"Lines\"",
          "UML Generalizations - \"Those That Resemble Flies From A Distance\"",
          "Relationship Quiz",
          "UML Packages - \"Divide and Conquer\""
        ],
        "Concept modeling workshop techniques - Perform An Outstanding Workshop": [
          "Introduction To Workshop And Facilitation",
          "Workshop Preparation",
          "Workshop Storytelling - Once Upon A Time...",
          "Object Diagram Examples - Complexity Does Not Mean That It Is Wrong",
          "Pattern Recognition - \"That Would Be Shunting I Suppose\"",
          "Workshop Quiz",
          "Conceptual Patterns - Do Not Reinvent The Wheel",
          "Thing - Information Pattern - \"I Do Not Store My Kid In A Database\"",
          "Party - Role Pattern - \"Who Are You? It Depends Who Is Asking?\"",
          "Concepts and Processes - \"The Concept Of Skies And Skiing Are Inseparable\"",
          "Finding The Generic-Specific Sweet-Spot",
          "Exercise – Finding Flight Domain Concepts - It's Time For You To Enter The Stage",
          "Flight Domain Example Solution - One Of Many Ways To Solve It",
          "Modeling Quiz",
          "Workshop Exercise - Homework For You To Do. Post Your Results In The Forum!",
          "Diagram Composition - Watch How Easy It Is To Make Something Incomprehensible!",
          "Diagram Composition Quiz"
        ],
        "Package your concept model": [
          "Packaging Your Concept Model - Handle A Growing System",
          "Guidelines When Packaging Your Model",
          "Evaluation Of Package Organisation - A Fuzzy Logic Problem",
          "Package Dependencies - \"I Depend On You\"",
          "Exercise - Packaging Of The Flight Domain Model",
          "Example - Packaging The Foundational Domain Model",
          "Packaging Quiz"
        ]
      },
      "requirements": [
        "A tool in where you can create diagrams with boxes connected arrows. Paper and pen works as well."
      ],
      "description": "\"It is not often that a course reinforces many many years of professional system and design experience and also provides a new perspective on that experience with deep philosophical and cognitive psychology understanding...Very satisfied with taking this course, and plan to refer others and reference it again and again.\" - Pete Gordon\nLearn how I have helped international businesses as well as my own startups for soon 20 years to reshape blurry, vague and often contradicting ideas into crystal clear businesses, products, and software systems! Getting your concepts straight and visualised for scrutiny, early on, in any development effort is often what makes the difference between success and failure.\nIn this course you will learn everything of value about the special technique of object-oriented conceptual modelling that I have successfully employed in hundreds of workshops with business and software people, always with great success. In conjunction of being one of the most essential activities in the first steps in any software analysis and design endeavour, conceptual modelling could also be used on an everyday basis as a means of communicating more clear, acquiring knowledge faster and catalyst creative thinking.\nThe conceptual modelling technique using UML (Unified Modelling Lanugage), also called domain modelling or concept mapping, taught in this course gives you a very thorough understanding on the foundations of object-oriented class modelling. I have for  20 years professionally developed object-oriented systems and for more than 5 years I worked in a small team together with some of the founding \"fathers\" (including Ivar Jacobson) of UML and Object Oriented Design (OOD), where we developed tools for Software Architects and Analysts.\nConcept mapping will propel your success rate in delivering value and getting rid of the most crucial waste; the waste of doing the wrong things, in the wrong order for the wrong reason.\n\n“I want to underline the excellent quality of the course and can only encourage people to take it. Thanks Per.\" - Mufaddal Zakir\n\n\"Per, the instructor, makes a complex topic both interesting and easy to grasp even for those new to conceptual/business modelling. Highly recommended to anyone who wants to become a better thinker and analyst in ANY domain!\" - Kirill Soloviev\n\nAbout the course\n+2k students\nDozens of 5 Star Reviews from VERY satisfied students\nFull, free lifetime access\nAll future extra lectures and upgrades are always included for free\nUnconditional Udemy 30 day money-back guarantee – but you will not need it!\nOver 80 high-quality video lectures to enjoy wherever you are and from a multitude of devices\n\"I consider this a FAR better value for the price than most college courses I've taken, and I took a rigorous engineering course of study, so that is all the more impressive.\" - Kirsten Tynan\nClick the “take this course\" button, top right, now!",
      "target_audience": [
        "Business Analysts",
        "Enterprise Architects",
        "Requirements Analysts",
        "Software Architects",
        "Software Developers",
        "Information Architects",
        "Project Managers",
        "Database Modeler",
        "Business Developers",
        "Product Developers",
        "Entrepreneurs",
        "Instructors",
        "Teachers",
        "Legal Consultants",
        "Scientists",
        "Product Managers"
      ]
    },
    {
      "title": "UML and Object-Oriented Design Foundations",
      "url": "https://www.udemy.com/course/uml-and-object-oriented-design-foundations/",
      "bio": "Get started with Object-Oriented Design and the Unified Modeling Language (UML). Use UML for effective communication!",
      "objectives": [
        "Learn UML from a leading expert",
        "Think as professional software designers",
        "Gain a working knowledge of Object-Oriented Design and UML 2.0",
        "Communicate more clearly and eliminate misunderstandings",
        "Get the companion eBook for FREE! (sells for $28.80 on Amazon)",
        "Get ready for technical job interviews",
        "Increase your software development productivity",
        "Create professional UML diagrams"
      ],
      "course_content": {
        "Introduction": [
          "What’s Covered in this Course?",
          "Tools and Prerequisites",
          "Join the Official Student Group"
        ],
        "Software Project Management Foundations": [
          "Why You Shouldn't Skip This Module",
          "Waterfall vs. Agile: Software Development Approaches",
          "The Waterfall Model",
          "Agile Software Development",
          "Waterfall or Agile?",
          "How Well Do You Know the Waterfall and Agile Software Development Methodologies?",
          "Selecting the Best Fit: Waterfall or Agile?"
        ],
        "Core Object-Orientation Concepts": [
          "A Brief History of Programming",
          "Objects",
          "The Class",
          "Abstraction",
          "Encapsulation and Data Hiding",
          "Inheritance",
          "Polymorphism",
          "Test Your Knowledge About Fundamental OO-Concepts",
          "Object-Oriented Foundations Check"
        ],
        "Object-Oriented Analysis and Design": [
          "Fundamental Object-Oriented Analysis and Design Concepts",
          "Collecting Requirements",
          "Mapping Requirements to Technical Descriptions",
          "Why Do We Need a Common Descriptive Language?"
        ],
        "UML Basics and Fundamental Diagram Types": [
          "What’s UML?",
          "Use Case Diagrams",
          "Use Case Diagrams: Challenge",
          "Use Case Diagrams: Solution",
          "Class Diagrams",
          "Class Diagrams: Challenge",
          "Class Diagrams: Solution",
          "Visibility: Public, Private, Protected, Package",
          "Associations",
          "Generalization",
          "Dependency, Aggregation, Composition and Realization",
          "Sequence Diagrams",
          "Activity Diagrams",
          "Statechart Diagrams",
          "Test Your UML Skills"
        ],
        "Case Study: Designing a Note-Taking App from Scratch": [
          "Practice Makes the Master",
          "Collecting the Requirements",
          "Mapping Requirements to User Stories",
          "Diagraming the Main Use Cases",
          "Identifying Classes and Relationships - Epic 1",
          "Identifying Classes and Relationships - Epic 2 and 3",
          "Describing the Flow of Note Creation using Sequence Diagrams",
          "Activity Diagram: Note Management, Local Storage & Cloud Sync",
          "The Note Object’s State Diagram",
          "Common Issues in State Machines and How to Fix Them",
          "Text Version & Downloadable PDF Version of the Case Study"
        ],
        "Next Steps + Bonuses!": [
          "How Much UML Do You Need to Know?",
          "Goodbye",
          "Design a Library Management System",
          "UML Cheat Sheets",
          "Companion eBook",
          "Bonus Lecture: Learn More from Karoly + Useful Links"
        ]
      },
      "requirements": [
        "No prerequisites (we will teach you everything you need to know)",
        "A desire to learn",
        "Basic programming skills are helpful, but not required"
      ],
      "description": "The best-selling UML and Object-Oriented Design course on Udemy. Companion eBook included.\nExplore the fundamental concepts behind modern, object-oriented software design best practices. Learn how to work with UML to approach software development more efficiently.\nThis course will help you become familiar with the fundamentals of object-oriented design and analysis*. I'll introduce each concept using simple terms, avoiding confusing jargon. We'll focus on the practical application, using hands-on examples you can use for reference and practice.\n(*)Many universities across the world require their students to complete this course as part of their Systems Analysis and Design curriculum.\nThroughout the course, I'll walk you through several examples related to software design and UML. Plus, we'll delve into a case study to review all the steps of designing a real software system from start to finish.\nWhat qualifies me to teach you?\nI have more than 25 years of software development expertise. I've worked for companies like Apple, Siemens, and SAP.\nAs a software architect, I have designed and built several enterprise systems and frameworks, including core components of Siemens Healthcare's syngo image processing system. I'm one of the senior software architects behind the SAP Cloud Platform SDK for iOS, a framework built by Apple and SAP. I currently hold twelve patents related to inventions in the field of mobile computing.\nTopics include:\nUnderstanding software development methodologies\nChoosing the right methodology: Waterfall vs. Agile\nFundamental object-Orientation concepts: Abstraction, Polymorphism, and more\nCollecting requirements\nMapping requirements to technical descriptions\nUnified Modeling Language (UML)\nUse case, class, sequence, activity, and state diagrams\nDesigning a Note-Taking App from scratch\nYou will acquire professional and technical skills, together with an understanding of object-orientation principles and concepts. After completing this course, you'll be able to understand the inner workings of object-oriented software systems. You will communicate easily and effectively with other developers using object-orientation terms and UML diagrams.\n\n\nSUCCESS STORIES - SEE WHAT OTHERS HAVE ACHIEVED\n\"I highly recommend this course to people at any point in their software design modelling career, especially if you like to be shown how to use something in real life. I also recommend it to anyone who's thinking of recording a tutorial.\" - Colin Hughes\n\"This was great and helped me crack an interview. Thank you so much!\" - Ashutosh Bhokare\n\"I was looking for a course on UML to refresh my knowledge in UML. My main expectation was a concise course that touched on all the aspects of UML; I am glad to say that this course met and exceeded my expectations.\" - Faithman Stephen Narte\n\"Excellent course! It helps me to retrieve some UML concepts that I've forgotten, and I'll apply them in my work with future projects! Thanks a million!\" - Ernesto Antonio Rodriguez Acosta\n\"I am a software development college student and this course helped me A LOT with my studies and tests. The content is clear, essential and to the point. Thank you very much!\" - Miriam Wojcik\n\"Great course, I particularly like the fact that Mr. Nyisztor began with the concepts of OO design outside UML.\" - Randall Reed\n\"This course is the best online course I have ever taken.\" - Syed Aqib\n\"Good course! Easy to understand and apply. You'll get up and running quickly with UML diagrams.\" - Panos Filippakos\n\"I was amazed by the clarity of the explanation of the terminology - pokemon rules ;)\" - Adam Rudnicki\n\nMORE THAN AN ONLINE COURSE. WITH THIS CLASS, YOU ALSO RECEIVE:\nExpert instructions\nAs a professional software architect, I've been using UML for more than two decades.\nPersonalized support\nAs a student of this course, you’ll get access to the course's private forum, where I answer questions and provide support if necessary.\nThe companion eBook\nDownloadable resources\nYou get downloadable UML cheat sheets you can use as quick reference guides.\nContinuous updates\nI keep enhancing this course to provide fresh and up-to-date content.\n\nOUR 30-DAY MONEY-BACK GUARANTEE\nIf you aren't satisfied with your purchase, we'll refund you your money. We want to make sure you're completely satisfied with the course. That's why we're happy to offer you this money-back guarantee.\nGo ahead and click the enroll button. See you in the first lesson!",
      "target_audience": [
        "If you know how to write code but want to design and implement complex applications"
      ]
    },
    {
      "title": "Problem Solving with C programming language",
      "url": "https://www.udemy.com/course/problem-solving-with-c-programming-language/",
      "bio": "c programming language ,c problem solving ,c practice coding , software engineering , development.",
      "objectives": [
        "Learn how to practice coding with C programming language",
        "Learn Basics of problem solving with C programming",
        "Change your perception of problems and adopt the right mindset",
        "Learn to unleash your creativity",
        "Evaluate and select the best solutions Successfully implement the chosen solutions And much more",
        "Discover methods to find innovative solutions",
        "Successfully implement the chosen solutions"
      ],
      "course_content": {
        "Syntax": [
          "Syntax"
        ],
        "Printf": [
          "Printf"
        ],
        "Comment": [
          "Comment"
        ],
        "Variables": [
          "variables"
        ],
        "Datatype": [
          "Datatype"
        ],
        "Typecasting": [
          "Typecasting"
        ],
        "Constant": [
          "constant"
        ],
        "User Input": [
          "user input"
        ],
        "Arithmetic operators": [
          "arithmetic operators"
        ],
        "Assignment operator": [
          "assignment operator"
        ]
      },
      "requirements": [
        "Have a little knowledge about C programming language"
      ],
      "description": "Complete program on problem solving with C programming language\nThe best way to learn C programming is by practicing and solving the C programs (C problems). We have 30+ C programs with solutions which are categorized below. Practice these C programs to learn and enhance your C problem-solving skills.\nIf you have mastered programming, you must have experienced the beginning of problem solving or solving problems, which is a set of prohibited questions that measure your understanding and programming thinking.\nSometimes it is not sufficient just to cope with problems. We have to solve that problems. Most people are involving to solve the problem. These problem are occur while performing small task or making small decision. So, Here are the some basic steps to solve the problems\nStep 1: Identify and Define Problem\nExplain you problem clearly as possible as you can.\nStep 2: Generate Possible Solutions\nList out all the solution that you find. Don’t focus on the quality of the solution\nGenerate the maximum number of solution as you can without considering the quality of the solution\nStep 3: Evaluate Alternatives\nAfter generating the maximum solution, Remove the undesired solutions.\nStep 4: Decide a Solution\nAfter filtering all the solution, you have the best solution only. Then choose on of the best solution and make a decision to make it as a perfect solution.\nStep 5: Implement a Solution:\nAfter getting the best solution, Implement that solution to solve a problem.\nStep 6: Evaluate the result\nAfter implementing a best solution, Evaluate how much you solution solve the problem. If your solution will not solve the problem then you can again start with Step 2.\nThis training contains everything you need to know to solve problems in an efficient and innovative way.\nIn this training, you will learn problem-solving techniques.\nI show you how to approach challenges with the right mindset.\nYou will learn effective strategies for analyzing the causes of problems and methods of working with a group to find the best solutions.\nYou will also find examples and practical exercises to illustrate each point.\nBut for now let's jump into this course. Hit Enroll and let me show you a way to become a rising star of problem solving in C Programming language!",
      "target_audience": [
        "This training is for anyone who wants to solve problems faster and more efficiently.",
        "This training will help you to better respond to crisis situations."
      ]
    },
    {
      "title": "Build and Deploy Lambda Functions: AWS with Python and Boto3",
      "url": "https://www.udemy.com/course/build-and-deploy-lambda-functions-aws-with-python-and-boto3/",
      "bio": "Learn how you can develop and deploy Java, Python, NodeJS Lambda Functions and manage them using Python and Boto3!",
      "objectives": [
        "You'll learn how to develop Python, NodeJS and Java Lambda Functions!",
        "You'll learn how to give necessary IAM Roles and Policies for Lambda Functions!",
        "You'll learn how to configure Python, NodeJS and Java Lambda Functions!",
        "You'll learn how to package and deploy Python, NodeJS and Java Lambda Functions!",
        "You'll learn how to invoke Python, NodeJS and Java Lambda Functions!",
        "You'll be able to implement any sort of infrastructure with Lambda on AWS with Python!",
        "You'll learn how to code against AWS API using Python and Boto3!",
        "You'll be confident to work with AWS APIs using Python for any kind of AWS Resource on Lambda!"
      ],
      "course_content": {},
      "requirements": [
        "Little to no experience with Python",
        "Any Python interpreter. Default is fine but I recommend PyCharm",
        "An AWS Account - Free Tier Available!",
        "General knowledge on AWS would be nice",
        "Not necessary but theoretical knowledge on Lambda would be nice!"
      ],
      "description": "AWS Lambda is one of the fastest growing services of AWS!\nJoin me in this course to learn how you can develop and deploy Python, Node.js or Java Lambda functions using Python and Boto3; manage your serverless functions easily!\nThis course is part of a series of courses on AWS solutions with Python and Boto3 and now it’s time to implement serverless functions!\nAWS Lambda is a cornerstone service for serverless architectures on AWS. You do not manage infrastructure like CPU, memory, OS or patches you name it! All you have to do and worry about is your implementation and code!\nLet’s take a closer look at what we’re going to cover in this course step-by-step.\nIn this course, we will start off with what we’ll build throughout the course and what you need to have on your computer to follow along with me.\nDon’t worry; I’ll explain everything you need very clearly and I’ll show you what you need to install and setup on your computer to work with AWS Lambda. There will be two different sections for Windows and MacOS users. These sections are basically identical and show how you can prepare your computer environment to be ready to work with AWS Lambda! I’ll show you how to install Python, Boto3 and configure your environments for these tools. I’ll also show you how you can create your own AWS account step-by-step and you’ll be ready to work AWS in no time!\nWhen we’re done with preparing our environment to work AWS with Python and Boto3, we’ll start implementing our solutions for AWS.\nFirst thing we’ll do is to create an IAM Access Policy for our Lambda Functions to access and communicate with other AWS resources like S3, CloudWatch and so on. Once we have it created, we’ll also create an IAM Role for our Lambda Function to execute and run on AWS on our behalf. And as for the most crucial part of this process, we’ll attach the IAM Policy to IAM Role so we will be complete on permissions and roles to run our Lambda Functions!\nNext step is to develop a Python Lambda function from scratch! We’ll develop a Python  function with a proper handler and start implementing the way to develop it to AWS. For that purpose - since AWS is looking for bytes of the source code for Lambda functions – we’ll develop a Utility class where we’ll implement the way to package our Lambda Function first as zip file. Once we do that, we’ll then read the bytes of the file and pass that information to our deployer method. Apart from source code, we will also provide our Lambda function a runtime, name and so on.\nOnce we successfully deploy our Python Lambda function, we’ll check it out on AWS console and verify that its configured as we expect it to be.\nNext up is the implementation and deployment of a Node.js Lambda function! We’ll follow the same steps again to implement and create our own Node.js Lambda function and deploy it using our genericly-implemented solution for deployment. Once we’ve done      that, we’ll again go to AWS console and verify our Lambda function.\nJava Lambda functions are up next! We’ll launch Eclipse IDE - which is basically the easiest way to create and work with Java Lambda functions – and install AWS Toolkit first. Once we have it, we will create our very first Java Lambda function and then we’ll package it as an executable JAR file using Maven. Next thing to do is to deploy our Java Lambda function and once we do that, we’ll go to AWS console and verify it.\nNow is time to invoke our Lambda functions and you will see how easy it is to do so! We’ll call our function and parse the response from AWS!\nNext up is to manage our Lambda function in various ways and that includes Aliasing, Versioning, using Environment Variables, Updating the Source Code and much more! We’ll also learn all the basic CRUD operations we can do against Lambda functions and you’ll again see how easy those are too!\nLet’s not lose any more time and jump right into developing and deploying Lambda functions to AWS Lambda!",
      "target_audience": [
        "Who wants to learn how to implement Python, NodeJS and Java Lambda Functions",
        "Who wants to learn how to deploy Python, NodeJS and Java Lambda Functions",
        "Who wants to learn how to configure and package Python, NodeJS and Java Lambda Functions",
        "Beginners on AWS who wants to put their theory in practice",
        "AWS Cloud Architect Associate Exam Preppers who wants to practice their theories with real projects",
        "Who wants to learn how to implement Infrastructure-as-a-Code or IaaS on AWS",
        "Who wants to learn how to develop infrastructures on AWS using Python",
        "Who wants to learn AWS Python API or namely Boto3"
      ]
    },
    {
      "title": "Introduction to Sequelize ORM (w/ Express.js + Postgres)",
      "url": "https://www.udemy.com/course/introduction-to-sequelize-orm-w-expressjs-postgres/",
      "bio": "Learn how to build an authentication backend with Express.js, Sequelize ORM, Postgres, Docker and testing it with Jest",
      "objectives": [
        "Learn how to build a production-level application with Express",
        "How to set up a development environment that is easily reproducible and painless",
        "Learn how to write migrations for our Postgres database using Sequelize ORM",
        "Expect to write tests for every line of code we write in our application"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Necessary tools - Advise for Windows users",
          "Necessary tools - Node Version Manager (NVM)",
          "Join the Discord community",
          "About reviews",
          "Necessary tools - Docker and Docker Compose",
          "Necessary tools - Postman and DBeaver",
          "Installing VSCode"
        ],
        "Initial setup": [
          "Repo for this course",
          "Initial setup",
          "Adding all the dependencies",
          "Configuring Babel, Jest and Nodemon",
          "Creating and connecting to the database"
        ],
        "JWT and Bcrypt": [
          "Understanding JWT",
          "Understanding Bcrypt",
          "Adding environment variables",
          "Creating utils for JWT"
        ],
        "Database and models": [
          "Creating the database class",
          "Register the models",
          "Adding the server",
          "Adding tests helpers",
          "Models overview",
          "Creating the User model (Part 1)",
          "Creating the User model (Part 2)",
          "Creating the User model (Part 3)",
          "Defining the Role model",
          "Adding Refresh Token model",
          "Inspecting the new tables with DBeaver",
          "Configuring the Sequelize CLI",
          "Adding User migration",
          "Adding Role migration",
          "Adding Refresh Token migration",
          "Applying migrations",
          "Small improvement to the User model",
          "Adding User model tests (Part 1)",
          "Adding User model tests (Part 2)",
          "Adding User model tests (Part 3)",
          "Adding User model tests (Part 4)",
          "Adding User model tests (Part 5)",
          "Adding Role model tests"
        ],
        "The Express app": [
          "Create the Express app",
          "Creating an Errors middleware",
          "Creating a wrapper to handle async code",
          "Creating an authentication middleware"
        ],
        "Controllers": [
          "Adding structure to the controllers",
          "Adding the register controller",
          "Adding tests for the register controller",
          "Adding the login controller",
          "Adding another test helper",
          "Adding tests for the login controller",
          "Adding a token controller",
          "Adding tests for the token controller (Part 1)",
          "Adding tests for the token controller (Part 2)",
          "Adding the logout controller",
          "Adding tests for the logout controller",
          "Looking at the coverage of our tests",
          "Listening for connections",
          "Testing the app manually with Postman",
          "Learning how to use the debug script"
        ],
        "Conclusion": [
          "Conclusion"
        ]
      },
      "requirements": [
        "No"
      ],
      "description": "Hi and welcome to this course! Here, you will learn A LOT about how to build a simple backend with production-level code. We are going to learn how to set up a local database with Docker, how to use Express.js with Sequelize as the ORM and manipulate the database, how to test our code with Jest and more importantly, how to structure our code to test it easily. We will also learn:\nSequelize best practices (how to register models, how to register associations between models, how to add scopes, how to make simple queries, how to write migrations, etc.)\nJWT and Bcrypt to handle authentication and\nTesting with Jest (remember that untested code is broken code)\nExpress middlewares and how to test them\nDocker and Docker Compose to set up a local database and avoid installing databases locally\nBest practices in general (separating the Express app from the server for easier testing, separating model logic from the controller, hiding passwords from the response, etc.)\nThis course is different as I am looking for you to learn how production-level code looks like and build the habit to test every line of code you write! Most courses skip testing, but the reality is that testing is so important on software development that it is unbelievable that most courses out there just skip them.",
      "target_audience": [
        "Beginner NodeJS developers",
        "Developers interested in backend development",
        "Developers interested in the Express framework"
      ]
    },
    {
      "title": "Master CI/CD for iOS Developers",
      "url": "https://www.udemy.com/course/continuous-integration-and-continuous-delivery-for-ios-developers/",
      "bio": "Learn Continuous Integration and Continuous Deployment / Delivery to increase your employability in 2019 and beyond!",
      "objectives": [
        "Apply complete CI/CD flows in their app development process.",
        "Use GitHub to trigger code checks and app distribution to users.",
        "Use App Center to automate checks and protect important branches.",
        "Leverage App Center to automatically create builds on every merge.",
        "Automate the distribution of a new build to beta testers.",
        "A full list of other features are on this page."
      ],
      "course_content": {
        "DevOps": [
          "Course Structure",
          "What is DevOps",
          "Why use DevOps",
          "What You Will Accomplish by The End"
        ],
        "Source Control and GitHub": [
          "Source Control And Branch Structure",
          "Initialize Version Control",
          "Commiting Changes",
          "Creating Branches",
          "Working with Branches",
          "Creating a GitHub Repo",
          "Pushing to GitHub",
          "Working in Teams",
          "Making Pull Requests",
          "A Simulated CI/CD Rundown"
        ],
        "Intro to App Center": [
          "Intro to App Center",
          "Creating an App Center Account",
          "Connecting App Center",
          "Source Code and GitHub Repo",
          "Crashing the Application",
          "Check if the App Crashed in Previous Session",
          "Tracking All Kinds of Events",
          "Tracking Events with Better Context"
        ],
        "Continuous Integration": [
          "Why Use Continuous Integration?",
          "Working with Feature Branches",
          "A First CI Build - iOS",
          "Adding Checks to Pull Requests",
          "Cleaning Up the Connections",
          "Using Checks to Protect Branches",
          "A Complete CI Flow"
        ],
        "Continuous Quality": [
          "Intro to Continuous Quality",
          "Prepare Solution for Tests",
          "Installing the App Center CLI",
          "Uploading the iOS Tests",
          "Running Automatic Tests"
        ],
        "Continuous Delivery": [
          "Intro to Continuous Delivery",
          "Creating an iOS Distribution Group",
          "Configuring iOS Continuous Delivery",
          "Installing from App Center",
          "Creating a First Manual Store Release",
          "Continuous Delivery to the App Store",
          "Continuous Integration / Continuous Delivery"
        ],
        "Extra Information - Source code, and other stuff": [
          "Source Codes",
          "Bonus Lecture and Information"
        ]
      },
      "requirements": [
        "The course does not require any previous CI/CD or DevOps experience",
        "Some basic Git & GitHub experience is desirable",
        "While this is a CI/CD course, it is oriented to iOS developers, so some basic iOS development experience is required."
      ],
      "description": "What you will learn in this course?\nIn this course, you will learn the fundamentals of CI/CD which is short for Continuous Integration/Continuous Delivery and be able to apply these fundamentals in your iOS app development process.\n\nThe word Deployment is often used in place of Delivery but effectively means the same thing.\n\nThese skills are essential to maximize your career potential in 2019 and beyond, because more and more companies are adopting these development practices requiring new employees or freelancers to be well versed in these concepts.\nWhat is Continuous Integration (CI) ?\nCI is the practice of merging all programmers current working copies to a shared mainline on a regular basis (usually several times a day).\nA developer checks out a working copy of the code base prior to making a change.  Over time as other developers check out and make changes, this checked out working copy of the source code base gets out of date, potentially requiring more and more work by developers to actually  check their completed changes back in to the main repository.\nWithout using CI it can become really difficult to merge all these changes and can lead to it taking more time to  merge changes back into the main source code base than it took to make the the change itself.\nCI seeks to eliminate this problem by making sure all developers integrate early and often with the goal to reduce rework and ultimately save cost and time.  This involves all developers merging their code back into the main repository multiple times a day.\nAn added bonus is that each programmer who is merging changes needs to build and run (and pass) all unit tests which usually run automatically meaning the code base is easier to work with and merge changes into and is potentially more stable as a result.\nWhat is Continuous Delivery or Deployment (CD) ?\nThis extends CI to ensure that new changes to software can be released to clients quicker, but in a more sustainable way.  It takes the advantages of CI from a development perspective (automated testing, on code check-in, etc) allowing the actual code base to be built and new releases to be automatically released to the client, effectively meaning a new version can be deployed to the client by a click of a button.\nCI/CD concepts.\nBy adhering to a CI/CD development process, the code base can be built and released more quickly, and is in a more stable state overall.  These are some of the reasons why more and more companies are adopting a CI/CD development process in 2019 and beyond.\nKey topics in this course.\n1. Continuous Integration\n2. Continuous Delivery\n3. App Center\n4. GitHub Pull Requests\n5. Branch protection\n6. UI Tests\n7. App Diagnostics\n8. App Analytics\nWhat will you learn?\n• Learn how to track errors and crashes in your apps.\n• Learn how to track any event triggered within your apps.\n• Apply complete CI/CD flows in your app development process.\n• Use GitHub to trigger code checks and app distribution to users.\n• Use App Center to automate checks and protect important branches.\n• Leverage App Center to automatically create builds on every merge.\n• Automate the distribution of a new build to beta testers.\n• Automate the distribution of new releases to the Google app store.\n• Focus on the development of features, leave the build and distribution to App Center.\n• Improve teamwork with automatic builds and checks that improve the quality of your merges.\n• Enable product discovery with the help of Analytics in the App Center.\n• Test your app in a wide array of cloud-hosted physical devices.\nDifferences with other CI/CD courses.\nWhile there are other CI/CD courses out there, most of them are too general. This course is completely tailored to iOS developers, this way you can immediately start applying what you learn in your app development process. Because of this, the course also covers topics not normally found on other CI/CD courses, such as UI Testing for iOS app development.\nWho is the course aimed at?\n\nThe course does not require any previous CI/CD or DevOps experience, although some basic Git & GitHub experience is desirable.\n\nWhile this is a CI/CD course, it is oriented to iOS app developers, so some basic iOS app development experience is required.\nGetting started\nIf you are ready to get started, click on the Enroll or Add to Cart button on this page and start taking your CI/CD skills with\niOS to the next level.",
      "target_audience": [
        "iOS developers looking to become skilled in the CI/CD process"
      ]
    },
    {
      "title": "Generative AI Complete Bootcamp - NLP, Transformers & Gen AI",
      "url": "https://www.udemy.com/course/generative-ai-mastery-langchain/",
      "bio": "Explore Generative AI, LangChain, Prompt Engineering. Build, Deploy, Optimize Gen AI Models Apps with Python.",
      "objectives": [
        "Learn the core concepts of AI, machine learning, and deep learning to build a strong foundation in AI development.",
        "Build a solid foundation in Python programming to effectively implement AI concepts and applications.",
        "Learn how to utilize vector databases for efficient storage and retrieval of embeddings in AI projects.",
        "Explore the essentials of Large Language Models (LLMs) and their applications in generative tasks.",
        "Develop skills in crafting effective prompts to optimize model performance and achieve desired outputs.",
        "Understand the complete pipeline of Natural Language Processing, from data preprocessing to model deployment."
      ],
      "course_content": {
        "Introduction to Generative AI": [
          "Introduction - What you will Learn",
          "Create Python Environment | Native Python Way",
          "Create Python Environment | Python distribution Anaconda",
          "Jupyter Notebook in VS Code",
          "Course Chat with Students and Tech Community",
          "Code Location: Hands-On Setup"
        ],
        "Python Basic Fundamentals": [
          "Introduction to Python - Essential Syntax and Semantics I",
          "Introduction to Python - Essential Syntax and Semantics II",
          "Python Variables",
          "Operators in Python",
          "Python Basics: Variables, Operators, and Membership Operators",
          "Python Basics - Variables, Operators, and Membership"
        ],
        "Python: Understanding Control Flow": [
          "Conditional Statements",
          "Loops in Python",
          "Python Control Flows"
        ],
        "Understanding Data Structures in Python": [
          "Python Lists and List Comprehension: Everything You Need to Know I",
          "Python Lists and List Comprehension: Everything You Need to Know II",
          "Tuples in Python: Immutable Collections",
          "Python Dictionaries: Efficient Key-Value Pair Management",
          "Python Dictionaries: Efficient Key-Value Pair Management II",
          "Building a Simple Contact Manager"
        ],
        "Functions in Python": [
          "Exploring Functions in Python",
          "Exploring Functions in Python II",
          "Password Strength Checker",
          "To-Do List Application"
        ],
        "Module Fundamentals: Importing, Creation, and Packaging": [
          "Introduction to Modules",
          "Importing Modules",
          "Creating Custom Modules",
          "Packaging Modules",
          "Using Third-Party Modules",
          "Project 1: Creating a Simple Calculator Module"
        ],
        "File Handling in Python": [
          "File Operations with Python",
          "Working with File Paths in Python",
          "Word Count Program"
        ],
        "Exception Handling in Python": [
          "Exception Handling in Python I",
          "Exception Handling in Python II"
        ],
        "Python OOPs Concepts": [
          "Python Classes and Objects",
          "Use of \"self\" in Python",
          "Encapsulation in Python",
          "Inheritance in Python",
          "Multiple and Multi-Level Inheritance",
          "Polymorphism in Python",
          "*args and **kwargs in Python",
          "Abstraction in Python"
        ],
        "Create Web Apps for Machine Learning": [
          "Building Interactive Web Apps for Data Science and Machine Learning",
          "Build App - BMI Calculator",
          "Build App - ML-Powered App"
        ]
      },
      "requirements": [
        "Familiarity with Python programming language, including basic syntax, data structures, and functions.",
        "Understanding of APIs and how to interact with them, as the course will involve integrating various APIs for model deployment and usage.",
        "Ability to navigate and execute commands in a command line interface (CLI) or terminal."
      ],
      "description": "Unlock the potential of Generative AI with our comprehensive course, \"Mastering Generative AI: LLMs, Prompt Engineering & More.\" This course is designed for both beginners and seasoned developers looking to deepen their understanding of the rapidly evolving field of artificial intelligence.\n\n\nIn this course, you will explore a wide range of essential topics, including:\n· Python Programming: Learn the fundamentals of Python, the go-to language for AI development, and become proficient in data manipulation using libraries like Pandas and NumPy.\n· Natural Language Processing (NLP): Dive into the world of NLP, mastering techniques for text processing, feature extraction, and leveraging powerful libraries like NLTK and SpaCy.\n· Deep Learning and Transformers: Understand the architecture of Transformer models, which are at the heart of many state-of-the-art AI applications. Discover the principles of deep learning and how to implement neural networks using TensorFlow and PyTorch.\n· Large Language Models (LLMs): Gain insights into LLMs, their training, and fine-tuning processes. Learn how to effectively use these models in various applications, from chatbots to content generation.\n· Retrieval-Augmented Generation (RAG): Explore the innovative concept of RAG, which combines retrieval techniques with generative models to enhance AI performance.\n· Prompt Engineering: Master the art of crafting effective prompts to improve the interaction with LLMs and optimize the output for specific tasks.\n· Vector Databases: Discover how to implement and utilize vector databases for storing and retrieving high-dimensional data, a crucial skill in managing AI-generated content.\nThe course culminates in a Capstone Project, where you will apply everything you've learned to solve a real-world problem using Generative AI techniques.\nBy the end of this course, you will have a solid foundation in Generative AI and the skills to implement complex AI solutions. Whether you're looking to enhance your career, transition into AI development, or simply explore this fascinating field, this course is your gateway to mastering Generative AI.\n\n\nEnroll now and take the first step toward becoming an expert in Generative AI!!",
      "target_audience": [
        "Individuals passionate about AI and ML who want to expand their knowledge and skills in generative AI applications.",
        "Developers interested in integrating advanced AI capabilities into their applications and learning about the deployment and optimization of AI models."
      ]
    },
    {
      "title": "Generative AI Architectures with LLM, Prompt, RAG, Vector DB",
      "url": "https://www.udemy.com/course/generative-ai-architectures-with-llm-prompt-rag-vector-db/",
      "bio": "Design and Integrate AI-Powered S/LLMs into Enterprise Apps using Prompt Engineering, RAG, Fine-Tuning and Vector DBs",
      "objectives": [
        "Generative AI Model Architectures (Types of Generative AI Models)",
        "Transformer Architecture: Attention is All you Need",
        "Large Language Models (LLMs) Architectures",
        "Text Generation, Summarization, Q&A, Classification, Sentiment Analysis, Embedding Semantic Search",
        "Generate Text with ChatGPT: Understand Capabilities and Limitations of LLMs (Hands-on)",
        "Function Calling and Structured Outputs in Large Language Models (LLMs)",
        "LLM Providers: OpenAI, Meta AI, Anthropic, Hugging Face, Microsoft, Google and Mistral AI",
        "LLM Models: OpenAI ChatGPT, Meta Llama, Anthropic Claude, Google Gemini, Mistral Mixral, xAI Grok",
        "SLM Models: OpenAI ChatGPT 4o mini, Meta Llama 3.2 mini, Google Gemma, Microsoft Phi 3.5",
        "How to Choose LLM Models: Quality, Speed, Price, Latency and Context Window",
        "Interacting Different LLMs with Chat UI: ChatGPT, LLama, Mixtral, Phi3",
        "Installing and Running Llama and Gemma Models Using Ollama",
        "Modernizing Enterprise Apps with AI-Powered LLM Capabilities",
        "Designing the 'EShop Support App' with AI-Powered LLM Capabilities",
        "Advanced Prompting Techniques: Zero-shot, One-shot, Few-shot, COT",
        "Design Advanced Prompts for Ticket Detail Page in EShop Support App w/ Q&A Chat and RAG",
        "The RAG Architecture: Ingestion with Embeddings and Vector Search",
        "E2E Workflow of a Retrieval-Augmented Generation (RAG) - The RAG Workflow",
        "End-to-End RAG Example for EShop Customer Support using OpenAI Playground",
        "Fine-Tuning Methods: Full, Parameter-Efficient Fine-Tuning (PEFT), LoRA, Transfer",
        "End-to-End Fine-Tuning a LLM for EShop Customer Support using OpenAI Playground",
        "Choosing the Right Optimization – Prompt Engineering, RAG, and Fine-Tuning",
        "Vector Database and Semantic Search with RAG",
        "Explore Vector Embedding Models: OpenAI - text-embedding-3-small, Ollama - all-minilm",
        "Explore Vector Databases: Pinecone, Chroma, Weaviate, Qdrant, Milvus, PgVector, Redis",
        "Using LLMs and VectorDBs as Cloud-Native Backing Services in Microservices Architecture",
        "Design EShop Support with LLMs, Vector Databases and Semantic Search",
        "Design EShop Support with Azure Cloud AI Services: Azure OpenAI, Azure AI Search",
        "Develop .NET to integrate LLM models and performs Classification, Summarization, Data extraction, Anomaly detection, Translation and Sentiment Analysis use case",
        "Develop RAG – Retrieval-Augmented Generation with .NET, implement the full RAG flow with real examples using .NET and Qdrant"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Tools and Resources for the Course - Course Slides",
          "Course Project: EShop Customer Support with AI-Powered Capabilities using LLMs"
        ],
        "What is Generative AI ?": [
          "Evolution of AI: AI, Machine Learning, Deep Learning and Generative AI",
          "What is Generative AI ?",
          "How Generative AI works ?",
          "Generative AI Model Architectures (Types of Generative AI Models)",
          "Transformer Architecture: Attention is All you Need"
        ],
        "What are Large Language Models (LLMs) ?": [
          "What are Large Language Models (LLMs) ?",
          "How Large Language Models (LLMs) works?",
          "What is Token And Tokenization ?",
          "How LLMs Use Tokens",
          "Capabilities of LLMs: Text Generation, Summarization, Q&A, Classification",
          "Limitations of Large Language Models (LLMs)",
          "Generate Text with ChatGPT: Understand Capabilities and Limitations of LLMs",
          "LLM Settings: Temperature, Max Tokens, Stop sequences, Top P, Frequency Penalty",
          "Function Calling in Large Language Models (LLMs)",
          "Structured Output in Large Language Models (LLMs)",
          "What are Small Language Models (SLMs) ? Use Cases / How / Why / When",
          "LLM Quiz",
          "Senior .NET Developer Technical Interview: Core LLM Concepts"
        ],
        "Exploring and Running Different LLMs w/ HuggingFace and Ollama": [
          "LLM Providers: OpenAI, Meta AI, Anthropic, Hugging Face, Microsoft, Google",
          "LLM Models: OpenAI ChatGPT, Meta Llama, Anthropic Claude, Google Gemini, Mistral",
          "SLM Models: OpenAI ChatGPT 4o mini, Meta Llama 3.2 mini, Gemma, Phi-3",
          "How to Choose LLM Models: Quality, Speed, Price, Latency and Context Window",
          "Open Source vs Proprietary Models",
          "Hugging Face - The GitHub of Machine Learning Models",
          "LLM Interaction Types: No-Code (ChatUI) or With-Code (API Keys)",
          "Interacting Different LLMs with Chat UI: ChatGPT, LLama, Mixtral, Phi3",
          "Interacting OpenAI Chat Completions Endpoint with Coding",
          "Ollama – Run LLMs Locally",
          "Installing and Running Llama and Gemma Models Using Ollama",
          "Modernizing Enterprise Apps with AI-Powered LLM Capabilities",
          "Designing the 'EShop Support App' with AI-Powered LLM Capabilities",
          "LLMs Augmentation Flow: Prompt Engineering -> RAG -> Fine tunning -> Trained",
          "Presenting the Company's Generative AI Strategy to the CIO"
        ],
        "Prompt Engineering": [
          "What is Prompt ?",
          "Elements and Roles of a Prompt",
          "What is Prompt Engineering ?",
          "Steps of Designing Effective Prompts: Iterate, Evaluate and Templatize",
          "Advanced Prompting Techniques",
          "Zero-Shot Prompting",
          "One-shot Prompting",
          "Few-shot Prompting",
          "Chain-of-Thought Prompting",
          "Instruction-based and Role-based Prompting",
          "Design Advanced Prompts for EShop Support – Classification, Sentiment Analysis",
          "Design Advanced Prompts for Ticket Detail Page in EShop Support App w/ Q&A Chat",
          "Test Prompts for Eshop Support Customer Ticket w/ Playground",
          "Prompt Engineering Quiz",
          "Troubleshooting and Improving an AI Feature with Advanced Prompting"
        ],
        "HANDS-ON: Chat, Classification, Summarization, Sentiment Analysis w/ .NET": [
          "Introduction and Create .NET Solution for Developing AI Projects",
          "GitHub Models – Run LLMs Free",
          "Create Access Token for GitHub Models",
          "Text Completion LLM with GitHub Models OpenAI gpt-5-mini model",
          "Classification, Summarization, Sentiment Analysis LLM Other Use Cases",
          "Build AI Chat App with .NET and gpt-5-mini model"
        ],
        "Retrieval-Augmented Generation (RAG)": [
          "What is Retrieval-Augmented Generation (RAG) ?",
          "Why Need Retrieval-Augmented Generation (RAG) ? Why is RAG Important?",
          "How Does Retrieval-Augmented Generation (RAG) Work?",
          "The RAG Architecture Part 1: Ingestion with Embeddings and Vector Search",
          "The RAG Architecture Part 2: Retrieval with Reranking and Context Query Prompts",
          "The RAG Architecture Part 3: Generation with Generator and Output",
          "E2E Workflow of a Retrieval-Augmented Generation (RAG) - The RAG Workflow",
          "Challenges and Key Considerations of Using RAG -- Retrieval-Augmented Generation",
          "Design EShop Customer Support using RAG",
          "End-to-End RAG Example for EShop Customer Support using OpenAI Playground",
          "RAG Quiz",
          "Defending Your RAG Architecture in a Technical Review"
        ],
        "HANDS-ON: Retrieval Augmented Generation (RAG) Application w/ .NET AI": [
          "Build .NET Chat App w/ RAG Template",
          "Explore .NET Chat App RAG Solution",
          "Run & Test .NET Chat App RAG Solution"
        ],
        "Fine-Tuning LLMs": [
          "What is Fine-Tuning ?",
          "Why Need Fine-Tuning ?",
          "When to Use Fine-Tuning ?",
          "How Does Fine-Tuning Work?",
          "Fine-Tuning Methods: Full, Parameter-Efficient Fine-Tuning (PEFT), LoRA",
          "Challenges and Key Considerations of Fine-Tuning",
          "Design EShop Customer Support Using Fine-Tuning",
          "End-to-End Fine-Tuning a LLM for EShop Customer Support using OpenAI Playground",
          "Fine-Tuning Quiz",
          "Proposing a Fine-Tuning Strategy for Enhanced AI Performance"
        ],
        "Choosing the Right Optimization – Prompt Engineering, RAG, and Fine-Tuning": [
          "Comparison of Prompt Engineering, RAG, and Fine-Tuning",
          "Choosing the Right Optimization – Prompt Engineering, RAG, and Fine-Tuning",
          "Training Own Model for LLM Optimization"
        ]
      },
      "requirements": [
        "Basics of Software Developments"
      ],
      "description": "In this course, you'll learn how to Design Generative AI Architectures with integrating AI-Powered S/LLMs into EShop Support Enterprise Applications using Prompt Engineering, RAG, Fine-tuning and Vector DBs.\nWe will design Generative AI Architectures with below components;\nSmall and Large Language Models (S/LLMs)\nPrompt Engineering\nRetrieval Augmented Generation (RAG)\nFine-Tuning\nVector Databases\nWe start with the basics and progressively dive deeper into each topic. We'll also follow LLM Augmentation Flow is a powerful framework that augments LLM results following the Prompt Engineering, RAG and Fine-Tuning.\nLarge Language Models (LLMs) module;\nHow Large Language Models (LLMs) works?\nCapabilities of LLMs: Text Generation, Summarization, Q&A, Classification, Sentiment Analysis, Embedding Semantic Search, Code Generation\nGenerate Text with ChatGPT: Understand Capabilities and Limitations of LLMs (Hands-on)\nFunction Calling and Structured Output in Large Language Models (LLMs)\nLLM Models: OpenAI ChatGPT, Meta Llama, Anthropic Claude, Google Gemini, Mistral Mixral, xAI Grok\nSLM Models: OpenAI ChatGPT 4o mini, Meta Llama 3.2 mini, Google Gemma, Microsoft Phi 3.5\nInteracting Different LLMs with Chat UI: ChatGPT, LLama, Mixtral, Phi3\nInteracting OpenAI Chat Completions Endpoint with Coding\nInstalling and Running Llama and Gemma Models Using Ollama to run LLMs locally\nModernizing and Design EShop Support Enterprise Apps with AI-Powered LLM Capabilities\nDevelop .NET to integrate LLM models and performs Classification, Summarization, Data extraction, Anomaly detection, Translation and Sentiment Analysis use cases.\nPrompt Engineering module;\nSteps of Designing Effective Prompts: Iterate, Evaluate and Templatize\nAdvanced Prompting Techniques: Zero-shot, One-shot, Few-shot, Chain-of-Thought, Instruction and Role-based\nDesign Advanced Prompts for EShop Support – Classification, Sentiment Analysis, Summarization, Q&A Chat, and Response Text Generation\nDesign Advanced Prompts for Ticket Detail Page in EShop Support App w/ Q&A Chat and RAG\nRetrieval-Augmented Generation (RAG) module;\nThe RAG Architecture Part 1: Ingestion with Embeddings and Vector Search\nThe RAG Architecture Part 2: Retrieval with Reranking and Context Query Prompts\nThe RAG Architecture Part 3: Generation with Generator and Output\nE2E Workflow of a Retrieval-Augmented Generation (RAG) - The RAG Workflow\nDesign EShop Customer Support using RAG\nEnd-to-End RAG Example for EShop Customer Support using OpenAI Playground\nDevelop RAG – Retrieval-Augmented Generation with .NET, implement the full RAG flow with real examples using .NET\nFine-Tuning module;\nFine-Tuning Workflow\nFine-Tuning Methods: Full, Parameter-Efficient Fine-Tuning (PEFT), LoRA, Transfer\nDesign EShop Customer Support Using Fine-Tuning\nEnd-to-End Fine-Tuning a LLM for EShop Customer Support using OpenAI Playground\nAlso, we will discuss\nChoosing the Right Optimization – Prompt Engineering, RAG, and Fine-Tuning\nVector Database and Semantic Search with RAG module\nWhat are Vectors, Vector Embeddings and Vector Database?\nExplore Vector Embedding Models: OpenAI - text-embedding-3-small, Ollama - all-minilm\nSemantic Meaning and Similarity Search: Cosine Similarity, Euclidean Distance\nHow Vector Databases Work: Vector Creation, Indexing, Search\nVector Search Algorithms: kNN, ANN, and Disk-ANN\nExplore Vector Databases: Pinecone, Chroma, Weaviate, Qdrant, Milvus, PgVector, Redis\nLastly, we will Design EShopSupport Architecture with LLMs and Vector Databases\nUsing LLMs and VectorDBs as Cloud-Native Backing Services in Microservices Architecture\nDesign EShop Support with LLMs, Vector Databases and Semantic Search\nAzure Cloud AI Services: Azure OpenAI, Azure AI Search\nDesign EShop Support with Azure Cloud AI Services: Azure OpenAI, Azure AI Search\nThis course is more than just learning Generative AI, it's a deep dive into the world of how to design Advanced AI solutions by integrating LLM architectures into Enterprise applications.\nYou'll get hands-on experience designing a complete EShop application, including LLM capabilities like Summarization, Q&A, Classification, Sentiment Analysis, Embedding Semantic Search, Code Generation.",
      "target_audience": [
        "Beginner to integrate AI-Powered LLMs into Enterprise Apps"
      ]
    },
    {
      "title": "Object-Oriented Software Engineering with Java",
      "url": "https://www.udemy.com/course/oo-se-java/",
      "bio": "Mastering Object Oriented Programming with Java",
      "objectives": [
        "Build classes and creates objects using Java to promote code reuse",
        "Build a large software using inheritance, abstract classes, encapsulation, polymorphism, and Interfaces",
        "Recognize object-oriented concepts for large software development",
        "Solve advanced software development problems using Object Oriented concepts",
        "Develop and use generic classes to promote software reuse",
        "Use effective tools for Java project management (Netbeans, GitHub)"
      ],
      "course_content": {},
      "requirements": [
        "The course assumes that the student has a knowledge of the basic programming concepts with Java, including loops, methods, conditional statements, etc."
      ],
      "description": "Course Updates\nSep 5: Adding ArrayList lecture (Section II) and one programming assignment on files and ArrayList\n\n\nOverview\nThe course provides a comprehensive coverage of object-oriented programming (OOP) concepts using Java programming language. OOP is the key paradigm that allows software reuse and that facilitates the development of complex and large-scale software. The course first starts with providing a clear understanding why OOP is important. We then dive into the main OOP concepts including encapsulation, inheritance, and polymorphism. We also present generic classes and design patterns which further demonstrate an additional software abstraction. All along the course, we show how OOP allows software engineers to develop complex software by making high-level abstractions starting from very general classes down to more concrete classes.\nTo better illustrate the concepts, each chapter contains several hands-on activities, namely: (1) Quizzes which help reviewing the main theoretical concepts presented in the lectures, (2) short coding exercises where the student can apply the concepts he learned on simple use cases, (3) programming assignments, which  provide more thorough activities aiming at consolidating the understanding of the learner and guide him to master the concepts presented in the lectures. All hands-on activities have written and video solutions.\nIn addition, during the course, the student will work on one application which he will improve from one chapter to another so that he can observe how programming concepts he learned can be applied to improve a certain application. In this course, we consider an application to process images for the programming assignment. There is no pre-requisite needed about images to do the exercises, as it is just a simple application context for the programming assignment.\nThe course was designed to provide the learners with a solid background on software engineering using object-oriented programming concepts!\nI wish you an excellent learning experience!",
      "target_audience": [
        "Beginner/Intermediate Software Developers",
        "Software Engineering Students",
        "Computer Science Students",
        "Information Systems Students",
        "Beginners Java Developers"
      ]
    },
    {
      "title": "Microservices with Spring Cloud",
      "url": "https://www.udemy.com/course/microservices-with-spring-cloud/",
      "bio": "A deep-dive into the Microservice architectural style, and how to implement it with Spring technologies.",
      "objectives": [
        "Articulate the Microservices architectural style; its advantages and disadvantages",
        "Build simple Spring Boot applications utilizing web interfaces, REST interfaces, Spring Data, and HATEOAS",
        "Build Microservice applications utilizing the different Spring Cloud sub-projects, including Config Server & Bus, Eureka, Ribbon, Feign, and Hystrix"
      ],
      "course_content": {
        "Introduction": [
          "Course Introduction",
          "Lab Setup"
        ],
        "Introduction to Microservices": [
          "What are Microservices? Part 1",
          "What are Microservices? Part 2"
        ],
        "Modern Spring: Spring Boot, Spring Data, and Spring Data REST": [
          "Spring Boot, Part 1",
          "Spring Boot, Part 2",
          "Spring Boot, Part 3",
          "Spring Boot, Part 4",
          "Spring Boot, Part 5",
          "Lab 1 - Create a Spring Boot Application"
        ],
        "Spring Cloud": [
          "Spring Cloud Overview",
          "Spring Cloud Configuration - Centralized Version Configuration",
          "Lab 3 - Spring Cloud Configuration",
          "Service Discovery and Eureka",
          "Lab 4 - Spring Cloud Eureka",
          "Spring Cloud Load Balancer - Client-Side Load Balancing",
          "Lab 5 - Spring Cloud Load Balancer",
          "Spring Cloud Open Feign - Declarative REST Client",
          "Lab 6 - Open Feign",
          "Spring Cloud Circuit Breaker",
          "Lab 7 - Circuit Breakers",
          "Spring Cloud Bus - Dynamic Configuration Changes",
          "Lab 8 - Spring Cloud Bus",
          "Spring Cloud Gateway",
          "Lab 9 - Spring Cloud Gateway"
        ],
        "Wrap-Up, Final Thoughts, and Next Steps": [
          "Summary, Resources, and Feedback"
        ],
        "Archived Content": [
          "Spring Cloud Overview",
          "Spring Cloud Configuration - Centralized, Versioned Configuration - Part 1",
          "Spring Cloud Configuration - Centralized, Versioned Configuration, Part 2",
          "Spring Cloud Eureka - Service Discovery",
          "Spring Cloud Ribbon - Client-Side Load Balancing",
          "Spring Cloud Feign - Declarative REST Client",
          "Spring Cloud Hystrix - Circuit Breaker",
          "Lab 7 - Hystrix",
          "Spring Cloud Bus - Dynamic Configuration Changes",
          "API Gateway - Part 1 - Purpose, and Spring Cloud Zuul",
          "API Gateway - Part 2 - Caching Options",
          "API Gateway - Part 3 - Resource Expansion",
          "API Gateway - Part 4 - Protocol Conversion",
          "Lab 9 - Zuul and ETags"
        ]
      },
      "requirements": [
        "Knowledge of Java programming",
        "Knowledge of latest versions of Spring Framework. Familiarity with concepts such as ApplicationContext, Profiles, RestTemplate, @Value, @Autowired, @Component, Java Configuration, etc.",
        "Knowledge of Spring Boot helpful, but will be covered in the course.",
        "Basic familiarity with Maven. How to specify dependencies, and how to do a \"mvn clean package\"",
        "A Git account, such as GitHub, will be needed. We will cover this in the course if you don't have one already. Course materials will be downloaded from Git, and you will need to place files in your own Git repository."
      ],
      "description": "Microservices with Spring Cloud is an online workshop designed to help you learn the Microservices architectural style, and how to implement it using Spring technologies\nThis course provides a good, solid introduction to the topic of the Microservices architectural style, and combines this with practical experience gained by working through the exercises featuring Spring Cloud.\nAlong the way, this course will provides a brief introduction to Spring Boot and Spring Data (enough to get you familiar with these technologies if you have not been immersed in them already).\nThe course provides exercises that provide you with hands-on experience working with the various components of Spring Cloud.\nThe goal of this course is to serve as a practical guide through the Spring Cloud projects, so you can see how they are used to implement microservice based architecture.\nBy the time you finish this course, you will have gained the ability to articulate what the Microservices architectural style is all about, including its advantages and disadvantages.\nYou will gain familiarity with Spring Boot, and you'll see how to use it to build web interfaces, REST interfaces, and how to use Spring Data and Spring Data REST.\nYou will gain the ability to build microservice-based applications utilizing Spring Cloud technologies. You will learn about\nCentralized, versioned configuration management using Spring Cloud Config\nDynamic configuration updates with Spring Cloud Bus\nService discovery  with Spring Cloud Eureka\nClient Side Load Balancing\nDeclarative REST Clients with Open Feign\nSoftware Circuit Breakers with Resilience4J.",
      "target_audience": [
        "Intended for experienced Java software developers comfortable with the latest releases of the Spring framework",
        "NOT intended for beginners. However, depending on your technical experience in other technologies, and your learning style, you may find this course a fascinating deep-dive into Microservices, Spring Cloud, and Cloud-Native applications."
      ]
    },
    {
      "title": "Quantum Computing with Qiskit Ultimate Masterclass",
      "url": "https://www.udemy.com/course/quantum-computing-with-ibm-qiskit-ultimate-masterclass/",
      "bio": "Master the Concepts of Quantum Computing & Gain Hands-On Experience with IBM Qiskit for Quantum Programming",
      "objectives": [
        "Learn the fundamentals of mathematics and physics behind Quantum Computing",
        "Explore core concepts of Quantum Computing - Superposition, Interference and Entanglement",
        "Learn about Quantum Gates and construct Quantum Circuits with IBM Qiskit",
        "Learn Quantum Gate decomposition and Quantum Circuit Optimization of large Quantum Circuits",
        "Learn Quantum Teleportation and Superdense Coding with their implementation using IBM Qiskit",
        "Run your Quantum Programs on a real IBM Quantum Computer",
        "Learn and gain background to think and analyze about Quantum Algorithms",
        "Gain Confidence to tackle Quantum Programming Challenges organized by Quantum Computing Companies"
      ],
      "course_content": {
        "Course Overview": [
          "Why Learn Quantum Computing - The Motivation",
          "Applications of Quantum Computing",
          "Quantum Computing vs Classical Computing",
          "Course Introduction and Syllabus",
          "Course FAQs - Important"
        ],
        "Google Colab/ Python and IBM Qiskit Environment Setup": [
          "Installing Anaconda IDE",
          "Creating an Environment with Anaconda IDE",
          "Installing IBM Qiskit on Anaconda"
        ],
        "----Part 1 Introduction to Classical Computing----": [
          "Classical Computing Introduction"
        ],
        "Introduction to Classical Computing": [
          "Introducing Classical Computing Hardware",
          "Digital Logic and Operations",
          "Introducing Classical Logic Gates",
          "Constructing Classical Circuits",
          "Complexity of Algorithms",
          "Classical Computing Quiz"
        ],
        "---Part 2 Mathematics for Quantum Computing---": [
          "Mathematics for Quantum Computing"
        ],
        "Linear Algebra": [
          "Introducing Vectors and Vector Spaces",
          "Dot Products and Inner Products",
          "Euclidean Norm",
          "Properties of Hilbert Spaces",
          "Matrices and Transformations",
          "Arithmetic of Matrices",
          "Outer Products",
          "Eigenvalues & Eigenvectors of an Operator",
          "Inverse of Matrix & Unitary Transformations",
          "Determinant, Trace & Expectation Value of an Operator",
          "Tensor Products",
          "Linear Algebra Latex Notes",
          "Linear Algebra Assignment"
        ],
        "Trigonometry & Complex Numbers": [
          "2D & 3D Cartesian Coordinate System",
          "Polar Coordinate System",
          "Complex Numbers & Complex Plane",
          "Complex Numbers & Trigonometry Assignment"
        ],
        "Probability": [
          "Introduction to Probability & its Axioms",
          "Random Variables, Expectations & Variances",
          "Law of Large Numbers"
        ],
        "---Part 3 Quantum Mechanics---": [
          "Overview of Quantum Mechanics"
        ],
        "Overview of Quantum Mechanics": [
          "Primary Concepts of Quantum Mechanics",
          "Interference, Young's Double Slit Experiment & Wave-Particle Duality",
          "Wavefunctions and Hamiltonians",
          "The Schrodinger Equation",
          "Postulates of Quantum Mechanics",
          "Quantum Mechanics Assignment"
        ]
      },
      "requirements": [
        "Have coding experience with Python Programming language",
        "Have basic knowledge of Trigonometry, Complex Numbers, Linear Algebra and Probability"
      ],
      "description": "**Please note that more lecture videos, quizzes, and LaTeX formatted clean notes are being uploaded in the course**\nFascinated by Quantum Computing and it's science fiction like capabilities? Then you arrived at the right place, this course is designed for you!\n\nQuantum Computing is the intersection of computer science, mathematics and quantum physics which utilizes the phenomena of quantum mechanics to perform computations which classical computers cannot perform. Quantum computers are faster than classical computers and provides significant speedup in different kinds of algorithms such as searching data elements or breaking RSA encryption systems!\n\n\nIt is expected that the Quantum Computing industry is going to grow at a rapid rate from around USD 500 million in 2021 to nearly USD 1800 million (1.8 billion!) by 2026. Various industries such as banking, finance, space technology, defense, healthcare, pharmaceuticals, chemicals, energy, power, transportation, logistics, academia and government are going to do well out of this cutting-edge technology.\n\n\nSeveral countries such as USA, China, Japan, UK, France, Germany, Spain, South Korea, India and Canada are investing large amounts of finances in the field of quantum computing due to its promising potential which is also going to create more jobs in this field. There is a huge talent deficit in the field of quantum computing and therefore much efforts and investments (in billions) have been put by various industries working on quantum computing through education and research. Some of the prominent players in quantum computing includes - IBM, Microsoft, Google, Intel, D-Wave, Xanadu Quantum Technologies, Rigetti Computing, Zapata Computing, Honeywell, IonQ, Cambridge Quantum, Oxford Quantum Circuits and many more!\n\n\nThis is a masterclass hands-on (practical coding) and theoretical course on quantum computing which will introduce you to the fundamentals of quantum computing and you will implement several important quantum algorithms which has practical real life use cases!\n\n\nJust as Deep Learning, Machine Learning, Data Science or Artificial Intelligence became popular a few years back due to the availability of data sets and technology (GPUs and TPUs), in a very similar manner, the field quantum computing is witnessing rapid growth and is going to have a major impact in your lives through the release of products or services by industries. This is the time to make yourself future proof and remain ahead of others!\n\n\nThe course has been divided into the following parts which has a coherent structure to help you navigate according to your requirements:\nPart 1 - Introduction to Classical Computing\nPart 2 - Mathematical Pre-requisites for Quantum Computing - Trigonometry, Complex Numbers, Linear Algebra and Probability\nPart 3 - Quantum Mechanics for Quantum Computing\nPart 4 - Introduction to Quantum Computing\nPart 5 - Single Qubit Quantum Gates\nPart 6 - Multi Qubit Quantum Gates\nPart 7 - Constructing Quantum Circuits using Quantum Gates\nPart 8 - Quantum Teleportation\nPart 9 - Quantum Superdense Coding\nPart 10 - Deutsch's Algorithm\nPart 11 - Deutsch-Jozsa Algorithm\nPart 12 - Bernstein-Vazirani Algorithm\nPart 13 - Simon's Algorithm\nPart 14 - Grover's Search Algorithm\nPart 15 - Quantum Fourier Transform (QFT)\nPart 16 - Quantum Phase Estimation (QPE)\nPart 17 - Shor's Algorithm\nThis course is exciting and full of practical exercises to help you reinforce the concepts which you learn in each of the topics. You will be utilizing the IBM Qiskit and Python platform to construct the quantum circuits and various algorithms.\n\n\nI am feeling very exuberant about Quantum Computing as it has already started to disrupt industries and research. I can't wait to see you inside the course! I hope to see you soon in the course!\n\n\nSrinjoy Ganguly\nFounder & CEO\nAdroitERA (AERA)",
      "target_audience": [
        "Beginners who are curious to know about Quantum Computing",
        "High School students with basic background on mathematics and Python programming",
        "University students who want to learn and apply Quantum Computing",
        "Industry professionals who want to up-skill themselves with Quantum Computing",
        "Technology enthusiasts who want to explore the world of Quantum Computing",
        "Business professionals who want to leverage the power of quantum computing in their decision making process",
        "Solopreneurs and Entrepreneurs who want to enter into this cutting-edge field and provide services to others",
        "Anyone who want to start their career in Quantum Computing",
        "Machine Learning, Deep Learning or AI professionals who want to up-skill themselves with Quantum Computing"
      ]
    },
    {
      "title": "Introduction to Software Engineering",
      "url": "https://www.udemy.com/course/introduction-to-software-engineering/",
      "bio": "A Comprehensive Guide to Software Engineering Principles",
      "objectives": [
        "Understand the key principles of software engineering and its systematic approach to developing software.",
        "Develop skills in documenting requirements to ensure alignment between developers and users.",
        "Understand the fundamental principles of software design and the role it plays in creating maintainable code.",
        "Understand the importance of software testing and explore various testing types such as unit, integration, and functional testing.",
        "Explore deployment strategies and learn how to transition software from development to production environments."
      ],
      "course_content": {
        "Welcome": [
          "Welcome to the Course",
          "What you will learn in this Course?"
        ],
        "Introduction to Software Engineering": [
          "Section Overview",
          "Introduction to Software Engineering",
          "Software Development Methodology",
          "Section Conclusion"
        ],
        "Requirements Gathering and Analysis": [
          "Section Overview",
          "Understanding User Requirements",
          "Requirements Analysis and Specification",
          "Section Conclusion"
        ],
        "Design and Architecture": [
          "Section Overview",
          "Software Design Principles",
          "Architectural Patterns",
          "Section Conclusion"
        ],
        "Implementation and Testing": [
          "Section Overview",
          "Coding and Development",
          "Software Testing",
          "Section Conclusion"
        ],
        "Deployment and Maintenance": [
          "Section Overview",
          "Deployment and Release Management",
          "Software Maintenance",
          "Section Conclusion"
        ],
        "Quiz Challenge": [
          "Introduction to Software Engineering Quiz Test"
        ]
      },
      "requirements": [
        "No prior experience in software engineering is required. A basic familiarity with programming concepts is beneficial but not essential."
      ],
      "description": "Embark on a comprehensive journey into the world of software engineering with my \"Introduction to Software Engineering\" course. Whether you're a beginner looking to explore the foundations of software development or an aspiring programmer seeking a deeper understanding of the engineering process, this course is designed to provide you with a solid groundwork in software engineering principles.\n\n\nCourse Highlights:\nSection 1: Fundamentals of Software Engineering: Dive into the core principles of software engineering, understanding the software development lifecycle, the importance of clear requirements, and the power of systematic design.\n\n\nSection 2: Requirements Gathering and Analysis: Learn how to gather, analyze, and document user requirements effectively. Explore use cases, user stories, and requirements specifications to ensure your software meets user needs.\n\n\nSection 3: Design and Architecture: Master the art of software design and architectural patterns. Discover how to create clean, maintainable code by understanding software design principles and exploring common architectural patterns.\n\n\nSection 4: Implementation and Testing: Delve into the hands-on phases of software development. Explore coding best practices, the significance of testing, and strategies for writing effective tests that ensure your software functions correctly.\n\n\nSection 5: Deployment and Maintenance: Navigate the vital phases of taking software from development to deployment. Explore deployment strategies, continuous integration, containerization, and cloud services. Learn the art of ongoing software maintenance, bug fixing, and the importance of documentation.\n\n\nCourse Benefits:\nUnderstand the principles that underpin successful software development.\nLearn coding best practices and testing strategies for high-quality software.\nExplore various phases of software engineering, from design to deployment.\nGain insights into real-world practices such as continuous integration and containerization.\nDevelop the skills needed to create reliable, user-centric software applications.\n\n\nEnroll today and embark on a transformative journey into the realm of software engineering. From coding and design to deployment and maintenance, you'll gain the knowledge and skills needed to create impactful software applications. Join us and unlock the potential of software engineering in the digital age!",
      "target_audience": [
        "Aspiring software developers and programmers.",
        "Students pursuing computer science or related fields.",
        "Professionals seeking a foundational understanding of software engineering.",
        "Individuals interested in creating functional and user-friendly software applications."
      ]
    },
    {
      "title": "Docker & Kubernetes for .Net and Angular Developers",
      "url": "https://www.udemy.com/course/docker-for-net-and-angular-developers/",
      "bio": "For Dotnet and Angular Developers",
      "objectives": [
        "Build, test, debug and deploy .net and angular apps on docker while learning production-style development workflows",
        "Create docker files for dotnet apps",
        "create docker files for angular apps",
        "create docker files for simple and complex html files",
        "Containerize SQL server",
        "Multi stage builds",
        "Creating Docker Compose files",
        "Volume creation",
        "Network creation",
        "HTTPS handling inside container",
        "Project Tye - Microsoft tooling for containers and kubernetes",
        "CI/CD setup with Github actions",
        "Deploying containers on Azure container instances",
        "Deploying containers on Azure web apps",
        "Deploying containers on Azure container registry",
        "Deploying containers on Dockerhub",
        "Kubernetes Setup",
        "And many more things, you will learn along."
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Branching Strategy"
        ],
        "Getting started with Docker": [
          "Container Overview",
          "What are containers?",
          "Containers Vs Virtual Machines",
          "Developers Vs Ops Team",
          "Containers inside virtual machines",
          "Docker Image Vs Containers",
          "Installation Steps",
          "Docker Options",
          "Hands on with Docker"
        ],
        "Learn to create Docker Files": [
          "Creating First Docker File",
          "Docker Build",
          "Docker Run",
          "Docker Run complex HTML site"
        ],
        "Docker Commands": [
          "Docker commands like ps, ps-a, start, stop",
          "Docker containers and images cleanup"
        ],
        "More Docker Commands": [
          "Docker Pull",
          "Docker Run",
          "Docker Logs",
          "Docker Inspect",
          "Docker Stats"
        ],
        "Docker File Overview": [
          "Docker File Instructions",
          "Docker File overview for DotNet App",
          "Docker File overview for Angular App"
        ],
        "Running Dotnet and Angular Projects using DockerFile and Docker-Compose": [
          "Console App example using STDIN example",
          "Running Console App using Dockerfile",
          "CMD Vs Entrypoint",
          "Running ASP.NET Core app using Dockerfile",
          "Verifying Files uploaded in docker container",
          "Debugging Docker Container",
          "Running Angular app in a container",
          "Verifying files in angular container",
          "Creating Docker Compose file",
          "Running Docker Compose"
        ],
        "Docker Networking": [
          "Introduction",
          "Docker Network Creation"
        ],
        "Containerizing SQL Server": [
          "Creating Container for SQL Server",
          "Connecting Dotnet app with SQL Container",
          "Adding Docker Compose",
          "Dotnet App failing to connect with SQL Server container",
          "SQL Container connected with Dotnet app",
          "Volume with SQL Container"
        ],
        "HTTPS Setup": [
          "Project Setup",
          "Docker File Creation",
          "Running On HTTP",
          "Dev Certificate Creation",
          "Running the container"
        ]
      },
      "requirements": [
        "Basic coding experience is good to start this course."
      ],
      "description": "Welcome to the ultimate course on Docker and Kubernetes for .NET and Angular developers! If you're looking to learn how to containerize your applications and orchestrate them using Kubernetes, then you're in the right place.\nIn this course, you will learn the fundamentals of Docker and Kubernetes, and how to use them to build, deploy, and manage your .NET and Angular applications. You'll start by learning how to containerize your applications using Docker, and then move on to learning how to deploy them to a Kubernetes cluster.\nThroughout the course, you'll build a real-world application using .NET and Angular, and learn how to containerize each component of the application. You'll also learn how to deploy the application to a Kubernetes cluster, and how to use Kubernetes to manage the application's scaling and availability.\nBy the end of the course, you'll have a solid understanding of Docker and Kubernetes, and how to use them to build and deploy your applications with ease. You'll also be able to apply what you've learned to your own projects, and take your development skills to the next level.\nSo, whether you're a .NET or Angular developer looking to enhance your skills, or you're simply interested in learning about Docker and Kubernetes, this course is for you. Enroll now and start building and deploying your applications with confidence!\n\n\nWho should enrol:\n\n\nFreshers: If you're just starting out in your career as a .NET or Angular developer, this course is a great way to learn about Docker and Kubernetes and how they can be used to build and deploy applications. You'll gain a foundational understanding of these technologies that will be useful as you move forward in your career.\nJunior Developers: If you have some experience with .NET or Angular development but are new to Docker and Kubernetes, this course will help you take your skills to the next level. You'll learn how to containerize your applications and deploy them using Kubernetes, which will enable you to build more scalable and resilient applications.\nMid-level Developers: If you're a mid-level developer with some experience using Docker and Kubernetes, this course will help you deepen your understanding of these technologies. You'll learn how to apply Docker and Kubernetes to real-world projects, and gain valuable insights into best practices for building and deploying applications.\nSenior Developers: If you're a senior developer with years of experience, this course will help you stay up-to-date with the latest trends and technologies in the industry. You'll learn how to use Docker and Kubernetes to build highly scalable and resilient applications, which will be valuable in any organization.\nDevOps Engineers: If you're a DevOps engineer, this course will help you gain a deeper understanding of Docker and Kubernetes and how they can be used to build and deploy applications. You'll learn how to automate the deployment process and ensure high availability for your applications.\nTechnical Leads: If you're a technical lead responsible for overseeing development projects, this course will help you understand how Docker and Kubernetes can be used to improve the efficiency and scalability of your applications. You'll gain valuable insights into how to design and architect applications for maximum performance and availability.\nCourse Structure as follows:\n\n\nIntroduction\nIntroduction\nAbout Me\nBranching Strategy\nGetting started with Docker\nContainer Overview\nWhat are containers?\nContainers Vs Virtual Machines\nContainers inside virtual machines\nDevelopers Vs Ops Team\nDocker Image vs Containers\nInstallation Steps\nDocker Options\nHands on with Docker\nLearn to create Docker Files\nCreating first docker file\ndocker build\ndocker run\ndocker run complex HTML site\nDocker Commands\ndocker build\ndocker run\ndocker ps\ndocker start\ndocker stop\ndocker rm\ndocker rmi\nremoving all images and containers via script\nMore Docker Commands\ndocker pull\ndocker push\ndocker inspect\ndocker stats\ndocker logs\nDocker File Overview\nDocker File Instructions\nDocker File overview for DotNet App\nDocker File overview for Angular App\nRunning Dotnet and Angular projects with docker\nConsole app STDIN example\nConsole app run\nCMD vs Entrypoint\nRunning ASP.NET Core in container\nVerifying files in container\nDebugging Docker Container\nRunning Angular app in container\nVerifying files in angular container\nCreating Docker Compose file\nRunning Docker Compose\nDocker Networking\nIntroduction\nBridge\nNone\nHost\nListing all networks\nInspecting containers\nInspecting networks\nDNS Server\nAssociating containers with network\nCreating custom network\nContainerizing SQL Server\nCreating SQL Server container\nConnecting Dotnet app with SQL container\nAdding Docker Compose\nWorking without volume\nCreating Volume\nVerifying data after container shutdown\nHTTPS Setup\nSample project creation\nDocker file creation\nRunning on HTTP\nDev Cert creation\nRunning the container with HTTPS\nProject Tye\nTye Introduction\nTye build\nTye run\nCreating Frontend App using Razor Template\nCreating Backend App using Web API Template\nAdding Service Discovery\nTye Run with Backend and Frontend Projects\nAdding Redis\nTye Run with Redis\nPushing Images to DockerHub and Azure Container Registry (ACR)\nPushing images on DockerHub\nACR Creation\nPushing images to ACR\nDeploying containers to Azure Container Instances (ACI)\nAnother way of deploying containers to ACI\nDeploying Angular App with ACI endpoint\nDeploying container to web app\nCI/CD pipeline using Github Actions\nGithub Actions introduction\nCreating first workfile\nAdding Docker login step for ACR\nAdding Docker build and push step\nRunning the workfile\nSQL Server container preparation\nCreated SQL server container on Azure\nPublishing database to container instance on Azure\nKubernetes Setup\nBranching Strategy\nEnabling Kubernetes\nK8s Components\nCreating Catalog Api Yaml\nAdding Brands and Types sections\nCreating Mongo ConfigMap\nCatalog Db Yaml Creation\nCatalog db Secret Creation\nDocker tag Catalog Api image\nCatalog Api and Db Created\nSetting up Kubernetes Dashboard\nFixing Container config issue\nKubernetes Lens\nBonus Section\nBonus Lecture\nAs technology continues to evolve, we are committed to updating the content to ensure it remains relevant and useful. We're confident that you will find the course engaging and informative, and we value your feedback. Please let us know if you have any suggestions or comments, as your input is critical in helping us create top-quality, enterprise-ready content that meets your needs. Thank you for choosing this course, and we look forward to helping you enhance your skills and reach your goals.",
      "target_audience": [
        "Beginner and intermediate developers who want to enhance their knowledge of docker using .Net and Angular apps",
        "Beginner and intermediate developers who wish to learn how to apply containers to their projects locally and also to deploy on cloud. This couse is meant for them."
      ]
    },
    {
      "title": "Master OpenAI API and ChatGPT API with Python",
      "url": "https://www.udemy.com/course/openai-api-chatgpt-gpt4-with-python-bootcamp/",
      "bio": "Master GenAI: Learn OpenAI, ChatGPT, GPT-4o API with Python. Master Prompt Engineering. Project-based course",
      "objectives": [
        "From setup to mastery: Use OpenAI and ChatGPT APIs to build real-world Python projects with the latest OpenAI models and cutting-edge techniques!",
        "Master the OpenAI API: Unlock the full potential of ChatGPT, GPT-4, DALL-E, Whisper, TTS, and more to create groundbreaking AI applications!",
        "Learn how to use the vision capabilities of multimodal GPT-4o.",
        "Fine-tuning GPT models using OpneAI API.",
        "Acquire a good understanding of how the OpenAI models like ChatGPT, GPT-4o, Whisper and DALL-E 3 work.",
        "Learn how to generate original images using the DALL-E API and Python.",
        "Learn how to translate and transcribe audio files using the Whisper API and Python.",
        "Learn to build chat completions effortlessly using OpenAI's powerful GPT models.",
        "Master prompt engineering: Discover best practices for crafting prompts that optimize text completion with AI models.",
        "Build real-world Python projects: Create templates you can reuse and adapt for your own AI-powered applications.",
        "You'll learn how to develop applications with GPT-4o.",
        "You'll learn how to administer Linux Systems using AI and natural language (ShellGPT).",
        "You'll learn all about OpenAI's embeddings and how to develop application using embeddings.",
        "You'll learn how to create web interfaces (front-ends) for you apps using Streamlit.",
        "Streamlit: main concepts, widgets, session state, callbacks.",
        "Learn how to use Jupyter AI efficiently.",
        "Learn how to use the Text-to-Speech (TTS) API"
      ],
      "course_content": {
        "Getting Started": [
          "How to Get the Most Out of This Course",
          "Setting Up the Environment: Jupyter Notebook",
          "Setting Up the Environment: Google Colab",
          "Join My Private Community!",
          "Course Resources"
        ],
        "Deep Dive into Chat Completions API": [
          "Creating an OpenAI Account and an API Key",
          "Installing the OpenAI API Library and Authenticating to OpenAI",
          "Test Your Knowledge",
          "OpenAI Models",
          "Test Your Knowledge",
          "Making GPT Requests Using the OpenAI API",
          "The System Role",
          "Test Your Knowledge",
          "OpenAI API Costs",
          "Tokens",
          "Chat Completions API Parameters: Temperature and Seed",
          "Chat Completions API Parameters: top_p, max_tokens, frequency penalty",
          "Test Your Knowledge",
          "AI That Thinks: Diving into OpenAI’s Reasoning Models (o1 and o3)",
          "Best Practices for Prompting Reasoning Models",
          "The OpenAI Playground",
          "How GPT Models Work",
          "LLMs Issues and Limitations",
          "Diving into GPT-4"
        ],
        "Unlocking the Power of GPT-4o API": [
          "Introduction to GPT-4o",
          "Using Local Base64 Images as Input",
          "Using Online Images as Input"
        ],
        "Running Remote MCP Servers in the OpenAI API": [
          "Why MCP is a Game Changer for LLM and Tool Integration",
          "MCP Fundamentals, Architecture, and Key Concepts",
          "How MCP Communicates: The Communication Protocol Explained",
          "What Is Remote MCP in the OpenAI API & How to Set It Up",
          "Making API Requests and Calling Tools with MCP (Streamable HTTP)",
          "Filtering Available Tools",
          "Approving Remote MCP Tools"
        ],
        "Prompt Engineering": [
          "Intro to Prompt Engineering",
          "Tactic #1 - Position instructions clearly with delimiters",
          "Tactic #2 - Provide detailed instructions for the context, outcome, or length",
          "Tactic #3 - Use the RTF Format",
          "Tactic #4 - Few-Shot Prompting",
          "Tactic #5 - Specify the steps required to complete a task",
          "Tactic #6 - Give Models Time to \"Think\"",
          "Other Tactics and Principles for Better Prompting",
          "Avoid Hallucinations Using Guarding",
          "Prompt Engineering Summary"
        ],
        "Deep Dive into Image Generation API (DALL-E 3)": [
          "Generating Original Images Using the DALL-E 3 Model",
          "Creating Variations of Images Using DALL-E",
          "Editing Images Using DALL-E",
          "Diving into DALL-E"
        ],
        "Deep Dive into Speech Recognition and Text-to-Speech (TTS) API": [
          "Transcriptions with Whisper",
          "Translations with Whisper",
          "Text-to-Speech (TTS) API"
        ],
        "Jupyter AI": [
          "Jupyter AI",
          "Python Version",
          "Introduction to Jupyter AI and Other Coding Companions",
          "Installing Jupyter AI",
          "Using Jupyter AI in JupyterLab",
          "Setting Up Jupyter AI in Jupyter Notebook",
          "Using Jupyter AI in Jupyter Notebook",
          "Using Interpolation for More Advanced Use Cases",
          "Using Jupyter AI with Other Providers and Models"
        ],
        "Project #1: Zero-Shot Sentiment Analysis Using ChatGPT": [
          "Project Requirements",
          "OpenAI API Version",
          "Building the Application",
          "Testing the Application",
          "Building a Front-End Using Streamlit",
          "Creating the Web App Layout With Streamlit",
          "Saving and Displaying the History Using the Streamlit Session State"
        ],
        "Project #2: Building a ChatGPT Clone From Scratch (Chat Bot)": [
          "Project Requirements",
          "OpenAI API Version",
          "Making a Dialog With the AI Model",
          "Looping",
          "Testing the Project and Python Script Overview"
        ]
      },
      "requirements": [
        "Basic Python programming experience is required.",
        "You should be able to sign up to OpenAI API with a valid phone number.",
        "Based on your location, it's possible that OpenAI requires a credit card and funding your account."
      ],
      "description": "Fully updated for the latest OpenAI API, including GPT-4o—OpenAI's groundbreaking model capable of reasoning across audio, vision, and text in real-time.\nWelcome to the ultimate course for mastering the OpenAI API and ChatGPT API with Python. This comprehensive course is designed to equip you with the skills to integrate the latest OpenAI models into your Python applications.\nWe cover every OpenAI model that has an API, including GPT-4, GPT-4o, DALL-E, and Whisper. By the end of this course, you'll have extensive knowledge and significant hands-on experience with the OpenAI API, making you an expert in developing intelligent Python applications.\nWhy Choose This Course?\nExpert Instruction: Learn from an instructor with decades of real-world experience in Artificial Intelligence and teaching.\nComprehensive Coverage: Dive deep into the OpenAI API, ChatGPT API, GPT-4o, and more.\nHands-On Projects: Develop real-world projects that can serve as templates for your own applications.\nCommunity Support: Gain access to an exclusive online group for enhanced, faster support.\n\n\nProjects You'll Build:\nZero-Shot Sentiment Analysis Using ChatGPT\nBuilding a ChatGPT Clone From Scratch (ChatBot)\nHealthy Daily Meal Plan Generator with Streamlit\nBoost Linux Sysadmin Capabilities with ChatGPT (ShellGPT)\nYouTube Videos Summary Generator\nBooks Recommendation System Using Embeddings and Similarity Search\n\n\nWhat You'll Learn:\nMastering Prompt Engineering\nCreating an OpenAI Account and API Key\nInstalling the OpenAI API Library and Authentication\nExploring OpenAI Models: GPT-3.5-Turbo, GPT-4, GPT-4o, DALL-E, Whisper\nMaking API Requests with Python\nUnderstanding OpenAI API Costs and Tokens\nImage Generation with DALL-E\nSpeech Recognition with Whisper\nText Embeddings and Similarity Search\nBuilding Web Interfaces with Streamlit\nUsing Jupyter AI for Enhanced Productivity\nWho Is This Course For?\nDevelopers interested in integrating OpenAI and ChatGPT APIs into their Python applications.\nAI enthusiasts eager to explore GPT-4o and other cutting-edge models.\nAnyone looking to master prompt engineering and apply it in real-world projects.\nPrerequisites:\nBasic Python programming experience is required.\nEnroll Today!\nIf you want to stay ahead in the rapidly evolving field of Artificial Intelligence, this is the course for you. Learn by doing, with practical projects and expert guidance. Don't miss out on mastering the OpenAI API and ChatGPT API with Python.\nRemember, you have a 30-day money-back guarantee, so there's no risk in getting started.\nJoin now and start your journey towards AI mastery!",
      "target_audience": [
        "Python programmers who want to integrate the OpenAI Models like ChatGPT, GPT-4, DALL-E 3 and Whisper into their applications.",
        "Any programmer interested in the latest OpenAI API.",
        "Any technical person interested in the most disruptive technology of this decade."
      ]
    },
    {
      "title": "C Programming On Windows For Beginners",
      "url": "https://www.udemy.com/course/c-programming-in-windows/",
      "bio": "Master C Programming On Windows Taught By A Professional Designed For Beginners",
      "objectives": [
        "How to know the C programming language very well",
        "How to manually use the \"gcc\" C compiler",
        "How to automate project building with \"Makefiles\""
      ],
      "course_content": {},
      "requirements": [
        "Be able to follow the course all the way through, every lecture pushes you a little more further"
      ],
      "description": "It's time to finally master the C programming language. Dan, your tutor, has been developing in the C programming language for over ten years and has a lot of experience to give. In this course you will learn C programming on Windows. What makes this course different from the others is that you will actually use the compiler. An IDE will just not do it for us. We will be using the compiler ourselves this will give you the experience you need to manually use the GCC compiler. Be A Pro.\nThis course will teach you everything about the C programming language, you will be taken through the basics all the way to more complicated concepts such as functions, pointers and library development. Best of all this course is made to be beginner friendly.\nWe end this course by creating a book program that allows a user to create books, save them to disk and then read them again.\nOnce you have finished this course you will be experienced in the C programming language and will have no trouble moving forward with your own personal projects. This course is great for students who need that extra push\nThis course is beginner friendly regardless of your current skill level\n\n\nIntroduction Video Music by Ben Sound",
      "target_audience": [
        "C Programmers Who Want To Master The Language"
      ]
    },
    {
      "title": "Principles of Software Safety Standards",
      "url": "https://www.udemy.com/course/principles-of-safe-software-design/",
      "bio": "Understand, Evaluate and Apply Software Safety Standards Effectively!",
      "objectives": [
        "Understand and apply generic SW safety standards;",
        "List the 4+1 Principles & Understand each one of them;",
        "Apply the 4+1 Principles with examples, in isolation and together;",
        "Evaluate specific SW standards using the 4+1 Principles;",
        "Understand the limitations of standards and compensate for them; and"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Why Should You Learn from Me?"
        ],
        "Overview of Software Safety Standards": [
          "Overview of Software Safety Standards Lesson",
          "Overview of Software Standards Quiz"
        ],
        "Safe Software Principles": [
          "Safe Software Principles Lesson",
          "Safe Software Principles Quiz"
        ],
        "Standard DO-178C": [
          "Safety Principles and Standard DO-178C Lesson",
          "Safety Principles and DO-178C Standard Quiz"
        ],
        "Standard IEC 61508 (& Derivatives)": [
          "Safety Principles and the IEC 61508 Standard Lesson",
          "Safety Principles and the IEC 61508 Standard Quiz"
        ],
        "Standard ISO 26262": [
          "Safety Principles and the ISO 26262 Standard",
          "Safety Principles and the ISO 26262 Standard Quiz"
        ],
        "Review of Standards": [
          "Reviewing Standards against the Safety Principles Lesson",
          "Reviewing Standards against the Safety Principles - Quiz"
        ],
        "Bonus Material": [
          "Functional Hazard Analysis"
        ]
      },
      "requirements": [
        "Some familiarity with software or safety engineering is useful but not essential"
      ],
      "description": "This course is on the Principles of Software Safety Standards.\nNow, software safety can be a daunting subject. Software development is challenging, and it's a very risky business. Safety is also intangible, and people are nervous about it. You may look at this subject and wonder: how could I possibly get into software safety? How do you develop safe software? I don't even know where to begin … but it need not be so!\n\n\nSo, what are the LEARNING OBJECTIVES of this course?\n\n\nUnderstand and apply generic SW safety standards;\nList the 4+1 Principles & Understand each one of them;\nApply the 4+1 Principles with examples, in isolation and together;\nEvaluate specific SW standards using the 4+1 Principles; and\nUnderstand the limitations of standards and compensate for them.\nLessons in this Course:\n\n\nSafe Software Principles;\nOverview of Safe Software Standards;\nSafe Software 4+1 Principles (with examples);\nStandards DO-178C, IEC 61508 & ISO 26262;\nReview of Standards; and\nThe Slide Pack.\nEach lesson comes with a quiz to reinforce and test your learning.\nPlease note that this is NOT a course about coding!!!\n-------------------------------------------------------------------------------------------------------------------------------\nLearn safety from an industry professional with 25+ years of experience:\n\n\nSW Engineering professional since 1994;\nSystem Safety Engineering professional since 1996;\nDomains: aviation (fast jets, ISREW & helicopters), ships, submarines, ICT, ATM, rail & road vehicles;\nPrograms: UK, US, European & Australian;\nRoles: customer, supplier, consultant, DevOps & ILS; and\nCurrent system safety lead, practitioner, trainer & Mentor.\nThe Safety Artisan provides professional, pragmatic, and impartial information about safety engineering. Whether you want to know how it's done or actually how to do it, you will find help here.\n-------------------------------------------------------------------------------------------------------------------------------\nSafety | Engineering | Training",
      "target_audience": [
        "Safety and Software engineers, managers, testers, quality assurers, estimators & purchasers",
        "Please note that this is NOT a course about coding."
      ]
    },
    {
      "title": "Create a Text Completion ChatGPT A.I. Bot With Tkinter",
      "url": "https://www.udemy.com/course/create-a-chatgpt-ai-bot-with-tkinter/",
      "bio": "Learn to Connect Your Python Apps To OpenAI The Fast And Easy Way!",
      "objectives": [
        "Intro To the OpenAI ChatGPT API",
        "Introductory To Intermediate TKinter",
        "Introductory To Intermediate CustomTkinter",
        "Introductory Use of Python"
      ],
      "course_content": {
        "Introduction and Setup": [
          "Introduction",
          "Install Python",
          "Sublime Text And Gitbash Terminal",
          "OpenAI API Key",
          "Virtual Environment",
          "Pip Install Libraries",
          "Create Our App!"
        ],
        "Build Out The Tkinter GUI": [
          "Text Widget",
          "Add Scrollbar To Text Widget",
          "Entry Widget",
          "Add Buttons",
          "API Key Section",
          "Show / Hide API Key",
          "API Keys",
          "Save API Keys",
          "Error Handling",
          "Clear The Screen"
        ],
        "ChatGPT API": [
          "Check For API Key",
          "Query ChatGPT",
          "Parse The Results From ChatGPT"
        ],
        "Upload Code To Github": [
          "Create A SSH Key",
          "Upload SSH Key To Github.com",
          "Push Code To Github.com"
        ],
        "Conclusion": [
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "No special tools are necessary to take this course",
        "A Basic Understanding of Python and TKinter Is Helpful"
      ],
      "description": "In this course I'll teach you how  to make graphical user interfaces for Python using TKinter, and how to connect those apps to the OpenAI Text Completion Artificial Intelligence API.  You'll be surprised just how quickly you can create some pretty cool looking apps!\n\n\nWe'll use Python, Tkinter, and CustomTkinter to build a cool Chatbot app that connects to OpenAI, maker's of ChatGPT.\nYou'll be able to send ChatGPT-like questions straight from your app, and receive a response that is output to the screen of your app.\n\n\nWe'll use davinci-003, the most advanced model offered by OpenAI to get our responses.\n\n\nFinally, I'll discuss how to connect to OpenAI with an API Key, query the engine, and parse the responses in the correct way.\n\n\nIf you've seen ChatGPT recently and want to learn how to use these types of tools programmatically, then this is the course for you!\n\n\nWe'll use the customTkinter library to make our Tkinter app look a little more modern and professional.  Some people think that Tkinter is a little old and stodgy looking.  The CustomTkinter library solves that problem very easily.\n\n\nWe won't dive into customTkinter in great detail in this course, we'll just use bits of it here and there to make our app look more modern.  So if you have no experience with customTkinter, you won't have any trouble following along; I'll walk you through it step by step!",
      "target_audience": [
        "This course is geared towards anyone who's interested in programming ChatGPT from Open AI.",
        "This course is aimed towards beginers through intermediate Coders who want to learn the to build Apps With TKinter and Python"
      ]
    },
    {
      "title": "ROS Tutorials for Beginners",
      "url": "https://www.udemy.com/course/ros-tutorials/",
      "bio": "Robot Operating System tutorials for beginners, to master ROS Melodic & Noetic for the Industrial Robotics Programming",
      "objectives": [
        "Robotics Programming",
        "How does ROS work?",
        "Debugging the ROS Projects",
        "What is Package in ROS?",
        "How to download and Install a ROS package?",
        "What is ROS Node and ROS master?",
        "How to write a node in ROS?",
        "What is a ROS message, and topics?",
        "What is a Publisher, and Subscriber in ROS?",
        "What does the roscore command do",
        "Understanding ROS Wiki",
        "ROS Tutorial in Python and C++",
        "What are launch files in ROS?",
        "What are Parameters in ROS?",
        "How to Communicating among Multiple Robots in ROS?",
        "What are Namespaces in ROS?"
      ],
      "course_content": {
        "Introduction, ROS Installation and Creating the first ROS Package": [
          "Before You Begin!",
          "Which ROS Version to Install?",
          "ROS installation Procedure",
          "ROS Environment setup and WorkSpace Initialization",
          "src, devel and build Directories",
          "Creating the First ROS Package",
          "Running a C++ Executable in ROS",
          "Running a Python Executable in ROS",
          "rosrun Command",
          "Tab Completion and the Unix Time Stamp"
        ],
        "ROS Nodes": [
          "What are ROS Nodes",
          "How to Create a Node in ROS?",
          "CPP: Creating a C++ ROS Node",
          "PY: Creating a Python ROS Node",
          "What is ROS Master?"
        ],
        "ROS Topics and Graphs": [
          "ROS Topics and Messages",
          "CPP: How to Implement a Publisher Node in C++?",
          "PY: How to Implement a Publisher Node in Python?",
          "Subscriber Nodes",
          "CPP: Implement a Subscriber Node in C++",
          "PY: Implement a Subscriber Node in Python",
          "Running the Publisher and Subscriber Nodes",
          "Visualizing Node Communication using the rqt_graph"
        ],
        "Playing with the Turtlesim": [
          "Reading a ROS Wiki Page",
          "Running the turtlesim_node",
          "The Fields of geometry_msgs/Twist message",
          "Importance of the Fields of Twist message",
          "CPP: Autonomously Moving the Turtle in a Circular Path",
          "PY: Autonomously Moving the Turtle in a Circular Path",
          "Turtle Collision Avoidance",
          "CPP: Publisher and Subscriber in 1 node",
          "PY: Publisher and Subscriber in 1 node",
          "ROS Services"
        ],
        "Services and Topics Communication using Custom msg and srv files": [
          "Service Type",
          "CPP: Implementing a Service Client Node",
          "PY: Implementing a Service Client Node",
          ".msg and .srv Files",
          "Creating a Custom .msg and .srv File: Steps",
          "Creating a Custom .msg and .srv File: Implementation",
          "CPP: Custom Message and Services 1",
          "CPP: Custom Message and Services 2",
          "CPP: Custom Message and Services 3",
          "PY: Custom Message and Services 1",
          "PY: Custom Message and Services 2",
          "PY: Custom Message and Services 3"
        ],
        "ROS Parameters and YAML Files": [
          "ROS Parameters",
          "YAML Files for saving the ROS Parameters"
        ],
        "Launch Files in ROS": [
          "XML and Launch files in ROS",
          "<launch> and <node> tags in Launch files",
          "<launch> and <node> tags in Launch files: Example",
          "<remap> Tags in Launch files",
          "<param> and <rosparam> tags in Launch files",
          "<param> and <rosparam> tags in Launch files: Example",
          "<arg> tags in Launch files",
          "<include> tags in Launch files"
        ],
        "ROS Communication and Multi Machine Setup": [
          "IP Addresses and Ports",
          "Configuring Hostnames in Linux",
          "What happens when we run the roscore command?",
          "How the ROS nodes communicate?",
          "5. Ping and Netcat",
          "Running the nodes on a distributed ROS network"
        ]
      },
      "requirements": [
        "Basic Understanding of C++ or Python",
        "Some Experience of Linux terminal will be helpful (Not Mandatory)",
        "Some Experience of CMake will be helpful (Not Mandatory)"
      ],
      "description": "Learning ROS was never so easy!\n\"How Do I learn ROS?\"\nIf you are having this question in you your mind, then You have landed at correct place! These comprehensive ROS Tutorials is carefully designed for beginners like you, who want to advance their career in the field of Robotics and Sensor Integration.\n\n\nWelcome to the course ROS Tutorials, where you will learn the Robot Operating System from scratch using both the C++ and Python programming languages. After completing this course, you will be able to understand the fundamental concepts in ROS in a step-by-step manner.\n\n\nEnroll Now and enjoy the 4 hours, power-packed course, to learn the most popular and essential tool in Robotics!\n\n\nThis course is made after extensive research on Stackoverflow, Quora, Reddit, Youtube, and other Q&A websites to handpick the concepts which are difficult to understand for the beginners. The course starts with creating a simple ROS package, written in C++ as well as Python; and, over the sections, various concepts of ROS are added along with their interesting practical implementations.\n\n\nSome salient features of this course includes:\nStep-by-step explanation while maintaining the flow of the course, so that you can easily replicate the steps at your end\nThe course is focused on answering the 'Why a particular step has to be carried out?', instead of focusing on 'Which steps needs to be carried out?'.\nLarger font size throughout the course, so that you can easily concentrate even on small screen devices\nApart from teaching you the right techniques, the course also teaches you the techniques to increase your productivity using different shortcuts\n\n\nThe outline of the course is as follows -\nSection 1:\nROS Introduction & Installation\nEnvironment Setup\nROS package Creation\nSection 2:\nROS Nodes & Master\nLogging\nSection3:\nROS Topics and Messages\nROS communication graph / rqt_graph\nSection 4:\nTurtlesim Package Examples\nNavigating ROS Documentation\nAutonomous turtle movement\nSection 5:\nROS Services\nCustom .msg and .srv files\nSection 6:\nROS Parameters\nYAML File\nSection 7 :\nXML and Launch Files\nImportant tags in Launch files\nSection 8:\nROS communication\nMulti-machine setup\n\n\n\n\nEnroll Now and enjoy the 4 hours, power-packed course, to learn the most popular and essential tool in Robotics!",
      "target_audience": [
        "Beginners, interested in learning Robotics"
      ]
    },
    {
      "title": "PLC Programming - Training from Scratch on RSLogix500 & 5000",
      "url": "https://www.udemy.com/course/plc-programming-training-from-scratch-on-rslogix500-5000/",
      "bio": "PLC programming from scratch training class by a controls engineer equipped with PLC systems - Allen Bradley RSLogix 500",
      "objectives": [
        "Understand how a Programmable Logic Controller (PLC) works",
        "Understand how to programm a PLC",
        "Showcase several completed projects to an employer",
        "Pass a technical PLC interview"
      ],
      "course_content": {
        "Introduction": [
          "Course Overview",
          "Course Extras, Bonus & SolisPLC.com Announcement",
          "Course Notes & F.A.Q.",
          "Contacting the Instructor & Getting Help"
        ],
        "PLC Hardware & Software Overview": [
          "Hardware Overview & History of PLCs",
          "Ladder Logic Overview",
          "Quiz 1 - General PLC & Their Software Understanding"
        ],
        "Hardware, Inputs, Outputs & External Devices": [
          "PLC Hardware, What to Buy & General Hardware Advice",
          "PLC Hardware Overview",
          "Inputs, Sinking, Sourcing, PNP & NPN",
          "Outputs, General Purpose, Relays & Analog",
          "External Hardware, ControlLogix, CompactLogix, Point IO & Remote IO Overview",
          "Hardware, Inputs & Outputs Understanding",
          "Section Wrap-Up"
        ],
        "Software Fundamentals, Programming Techniques & Ladder Logic": [
          "Downloading a Free Copy of RSLogix 500, RSLinx & RSLogix 500 Emulate",
          "Data Files & Structures",
          "Ladders, Rungs, Branches & Logic Statements",
          "Instructions - XIC, XIO & OTE",
          "Instructions - OTL & OTU",
          "Mini Challenge 1 - 3 Button Station & Stacklight",
          "Instructions - ONS, OSR & OSF",
          "Instructions - Timers, TON, TOF & RTO",
          "Instructions - Counters, CTU, CTD & RES",
          "Instructions - Comparators, LES, GRT, LEQ, GEQ & LIM",
          "Instructions - ADD, SUB, MUL, DIV & CPT",
          "Mini Challenge 2 - Tank Filling & Discharging Station (Part 1 / 3)",
          "Mini Challenge 2 - Tank Filling & Discharging Station (Part 2 / 3)",
          "Mini Challenge 2 - Tank Filling & Discharging Station (Part 3 / 3)",
          "Instructions - Scaling (SCL, SCP, CPT)",
          "Instructions - BSR (Bit Shift Right)",
          "Instructions - BSL (Bit Shift Left)",
          "PLC Instruction Summary / Cheat Sheet",
          "RSLogix 500 Instructions",
          "Section Wrap-Up"
        ],
        "Ladder Logic Concepts and Best Practices": [
          "Working with Ladder Logic Rungs",
          "Analyzing a Complex Rung with Multiple Inputs and Outputs",
          "Ladder Good Practice - NEVER use Multiple OTE Instructions (Demonstration)",
          "Ladder Good Practice - AVOID using OTL/OTU Instructions (Demonstration)",
          "Input & Output Mapping / Buffering Good Practice Explained"
        ],
        "Troubleshooting, Emulation, Hardware & Software Considerations": [
          "Introduction to Troubleshooting section & RSLogix Emulate500",
          "RSLogix Emulate500 Tutorial - Testing Code on Local Machine",
          "External I/O Module Configurations",
          "Troubleshooting Basics - Using Forces to Toggle Inputs/Outputs",
          "Troubleshooting Basics - Cross Referencing & How to Navigate within Your Program"
        ],
        "Project 1 - Proximity Sensor, Button & LED Output Control System": [
          "Project 1 - Introduction",
          "Communicating with a brand new MicroLogix 1100 PLC",
          "Project Hardware Overview",
          "Testing Inputs & Outputs in Software",
          "Program Initialization & Input / Output Segregation",
          "Sensor Trigger Counter & Input Debouncing Technique",
          "Presence Counter & Reset Functionality",
          "LED Blinking & Timer Setup",
          "Timer Altering through MOV Instructions & Final Touches"
        ],
        "Project 2 - Street Light Control System PLC/HMI [In Progress]": [
          "Project 2 Introduction",
          "Building the Base Program & Creating Ladder Logic for the Light System",
          "Creating an HMI Application in FTView ME & Linking to the PLC",
          "PLC to HMI Link & Basic Animations in FTView ME",
          "HMI System Control Display Implementation Addition of Numeric Entries & Displays",
          "HMI Screen Layout Design",
          "HMI System Control Display Implementation",
          "External Inputs & Outputs Addition & Handling to CompactLogix PLC",
          "I/O Fault Handling & System Fault State"
        ],
        "RSLogix 5000 Programming Section": [
          "BOOTP Utility - Setting the IP Settings of a New Device",
          "PLC Firmware Overview, Downloads & Compatibility",
          "RSLogix 5000 General Overview",
          "RSLogix 5000 Tag Creation, Management & Usage",
          "RSLogix 5000 Instruction Overview (Refer to RSLogix 500 Lectures for details)",
          "RSLogix 5000 UDT Structures - Part I",
          "RSLogix 5000 UDT Structures - Part II",
          "RSLogix 5000 - Working with External Hardware (1769 I/O) Part 1 / 2",
          "RSLogix 5000 - Working with External Hardware (PowerFlex 525) Part 2 / 2",
          "RSLogix 5000 - Trending PLC Tags",
          "RSLogix 5000 - MSG between ControlLogix & MicroLogix PLC",
          "Add-On Instruction Development in Studio 5000 - Setting up a Basic AOI"
        ],
        "Alarms, Notifications, Faults & Proper Handling": [
          "Introduction to Alarms & Non-Critical Faults",
          "Alarms & Faults Process Considerations",
          "Alarm Structure, Ladder & Handling",
          "Fault Structure, Handling & AFI Instructions"
        ]
      },
      "requirements": [
        "Basic Computer Skills",
        "Basic Hardware Understanding",
        "Basic Mathematics"
      ],
      "description": "In this class, you will learn absolutely everything necessary to land a job as an entry level PLC technician (engineer, etc.).\nWe will cover basic topics such as what a PLC is used for, how it is able to receive and process Inputs & Outputs. We will take a much deeper dive with hands on labs and practice sessions during which I will give you specific real world scenarios to work with and give you tips and common pitfalls. These lessons are designed to strengthen your knowledge of PLCs and give you an edge during interviews.\nAt the end of each section, you will face a quiz which will allow you to test yourself on the material you have learned before moving to the next section. As some one who has administered interviews to PLC technicians, these questions are crucial in making sure that you've understood the material presented.\nWhat are the requirements for the class?\nYou don't need any hardware or software to follow the lectures, however, it is highly recommended to get some practice before going into an interview. If that's not possible, I would advise spending some time working with an emulator and browsing through data sheets and manuals which will be presented to you in the course.\nWhat can I expect from this class?\nThe main objective of this course is to get you job-ready by the time you finish the last lecture.\nYou will have a good understanding of what a PLC does, how it does it as well as what the outcomes of those actions are.\nYou will be comfortable creating basic ladder logic programs and troubleshoot complex existing ones.\nYou will be able to create simple Human Machine Interface (HMI) screens and controlling them via a PLC.\nYou will have a good understanding of manufacturing systems as a whole.\nWhat is the target audience for the class?\nElectrical Engineers looking for a crash course on PLCs.\nElectrical Technicians / Electricians looking to expand their knowledge into controls.\nSoftware Engineers who are seeking to learn about controlling hardware.\nManufacturing Operators looking to progress in their career.\nAnyone interested in how manufacturing processes are executed.",
      "target_audience": [
        "Electrical Engineers",
        "Electricians",
        "Technicians",
        "Anyone interested in learning how an industrial process works"
      ]
    },
    {
      "title": "AWS Serverless Microservices with Patterns & Best Practices",
      "url": "https://www.udemy.com/course/aws-serverless-microservices-lambda-eventbridge-sqs-apigateway/",
      "bio": "AWS Event-driven Serverless Microservices using AWS Lambda, API Gateway, EventBridge, SQS, DynamoDB and CDK for IaC",
      "objectives": [
        "AWS Event-driven Serverless Microservices",
        "AWS Lambda, AWS DynamoDB, AWS API Gateway, AWS EventBridge, AWS SQS and AWS CDK",
        "REST API and CRUD endpoints with using AWS Lambda, API Gateway",
        "Data persistence with using AWS DynamoDB",
        "Decouple microservices with events using AWS EventBridge",
        "Message Queues for cross-service communication using AWS SQS",
        "Cloud stack development with IaC using AWS CloudFormation CDK",
        "Serverless Design Patterns and Best Practices",
        "Develop E-commerce Event-driven Microservices Application",
        "RESTful Microservices with using AWS Lambda, Api Gateway and DynamoDb for performing CRUD operations",
        "Event-Driven asynchronous Communication between Microservices using Amazon EventBridge",
        "Serverless e-commerce application infrastructure development with using AWS CDK",
        "AWS API Gateway -for- Restful API-Driven Development and Synchronous Event Sources",
        "AWS EventBridge -for- Event-Driven asynchronous Communication between Microservices",
        "AWS SQS -for- Decouple Microservices and processing events asynchronously using queues",
        "Publish and create event to Serverless Eventbus which is AWS EventBridge",
        "Create Rules and Target definitions for AWS EventBridge",
        "Microservices send polling request and get event from the AWS SQS queue.",
        "Synchronous communication with AWS Api Gateway for routing request from client applications to downstream microservices",
        "Asynchronous communication with AWS Serverless Eventbus which is EventBridge for applying Event Driven asynchronous Communication patterns",
        "Event Source mapping communication polling queue records from lambda services to AWS SQS-Simple Queue Service for Decouple Microservice",
        "Devops best practices develop infrastructure as code Serverless Stacks with using AWS CDK - Cloud Development Kit",
        "AWS Developer and AWS Solution Architecture Jobs",
        "Prepare your AWS Certification with practical way",
        "AWS Serverless + CDK Automation + Integration Patterns = AWSome Microservices!"
      ],
      "course_content": {
        "Course Introduction": [
          "Introduction",
          "Final Application - Serverless Event-driven E-Commerce Application",
          "Project Code Structure",
          "AWS Cost Management During the Course",
          "Course Structure and Way of Learning",
          "AWS Lambda Invocation Types",
          "Our Serverless Journey with AWS Lambda Invocation Types",
          "Serverless Explained : AWS Operational Responsibility Model",
          "AWS Serverless Services for Microservices Architectures"
        ],
        "Project Code & Course Slides": [
          "Project Code & Course Slides"
        ],
        "Create AWS Account - Free Tier": [
          "Create Free Tier AWS Account",
          "Security Best Practices of AWS Accounts",
          "Create IAM User Account and Configure for Programmatic and Console Access",
          "AWS Access Types - Programmatic and Management Console Access"
        ],
        "Developing Our First Lambda Function": [
          "AWS Lambda Overview",
          "How does AWS Lambda work?",
          "AWS Lambda Main Features",
          "AWS Lambda Event Sources and Destination Trigger Services",
          "AWS Lambda Invocation Types",
          "AWS Lambda Function Code",
          "AWS Lambda Walkthrough with AWS Management Console",
          "AWS Lambda Best Practices and Event-driven Architecture",
          "AWS Lambda Quiz"
        ],
        "Architecture Recap : Event-Driven Microservices Architectures": [
          "Microservice Architecture",
          "Microservices Communications",
          "Event-Driven Microservices Architecture",
          "Application Integration Patterns for Microservices",
          "Event-Driven Architecture Quiz"
        ],
        "Thinking AWS Serverless for Event-Driven Microservices Architecture": [
          "Thinking Serverless",
          "AWS as an Application Development Framework",
          "AWS Lambda as a Microservice",
          "Mapping Microservice Architecture with AWS Serverless Services for Microservice",
          "Event-driven Serverless Microservices Design with AWS Lambda",
          "Serverless Architectural Patterns and Best Practices",
          "AWS Serverless Event-driven Quiz"
        ],
        "API Gateway Restful API Development with Synchronous Lambda Event Sources": [
          "Introduction - API Gateway Restful API Development with Synchronous Lambda Event",
          "What is Amazon API Gateway?",
          "Architecture of API Gateway",
          "Main Features of API Gateway",
          "Amazon API Gateway Use Cases",
          "API Gateway as a Lambda Synchronous Event Sources",
          "Amazon API Gateway Core Concepts",
          "Amazon API Gateway -Differences between REST - HTTP API",
          "Amazon API Gateway Walkthrough with AWS Management Console",
          "API Gateway Quiz"
        ],
        "Building Microservices with AWS Lambda for Synchronous API-Driven Event Sources": [
          "Developing AWS Lambda Synchronous Microservices with Amazon API Gateway",
          "Create a REST API from AWS Lambda Function with adding API Gateway Trigger",
          "Understanding How Lambda Trigger with Event JSON Object",
          "Understanding API Gateway Synchronous Trigger to AWS Lambda",
          "Resource Cleanup"
        ],
        "AWS DynamoDB Serverless NoSQL Data Persistence": [
          "What Is Amazon DynamoDB?",
          "AWS DynamoDB Core Concepts - Tables, Items, Attributes, Indexes",
          "AWS DynamoDB Primary Key, Partition Key and Sort Key",
          "AWS DynamoDB Walkthrough with AWS Management Console",
          "AWS DynamoDB Quiz"
        ],
        "Building RESTful Microservices with AWS Lambda, API Gateway and DynamoDB": [
          "Introduction - RESTful Microservices with AWS Lambda, API Gateway and DynamoDB",
          "Create a DynamoDB Table",
          "Create a Lambda Function",
          "Create an API Gateway",
          "Test - RESTful Microservices with AWS Lambda, API Gateway and DynamoDB",
          "AWS Console microservice-http-endpoint Lambda Blueprint - API Gw + Lambda + Dyna",
          "Resource Cleanup"
        ]
      },
      "requirements": [
        "Cloud Basics",
        "Javascript Basics"
      ],
      "description": "This course comes from a live GitHub aws-microservices repository which verified from community with 250+ stars and 100+ forks.\nIn this course, we will learn AWS Event-driven Serverless Microservices with using\nAWS Lambda,\nAWS DynamoDB,\nAWS API Gateway,\nAWS EventBridge,\nAWS SQS which stands for Simple Queue Service,\nAWS CDK stands for Cloud Development Kit for IaC - Infrastructure as Code tool and\nAWS CloudWatch for monitoring.\nThis course will be 100% hands-on, and you will be developing a real-world application which includes;\nREST API and CRUD endpoints with using (AWS Lambda, API Gateway)\nData persistence with using (AWS DynamoDB)\nDecouple microservices with events using (AWS EventBridge)\nMessage Queues for cross-service communication using (AWS SQS)\nCloud stack development with IaC using (AWS CloudFormation CDK)\nBy the end of the course, you will learn how to develop reliable and scalable Serverless applications, following the microservices architecture. We will develop event-driven microservices with AWS Serverless services which comes with power of cloud high availability and high scalability by nature. Of course we will follow the Serverless Design Patterns and Best Practices when developing our e-commerce event-driven microservices application.\nThere is a couple of microservices which implemented e-commerce modules over Product, Basket and Ordering microservices. We will use AWS Lambda service as a microservices and use power of lambda functions. And this microservices databases will store NoSQL AWS DynamoDB databases.\nAnd also we have followed communication patterns and best practices when designing Serverless microservice communications for synchronous and asynchronous communications with using AWS API Gateway, AWS EventBridge as a Eventbus and AWS SQS as a queue service. That means we design our architecture rely on asynchronous connections that gives us much more flexible and resilient application.\nWe will use\nAWS API Gateway -for- Restful API-Driven Development and Synchronous Event Sources\nAWS EventBridge -for- Event-Driven asynchronous Communication between Microservices\nAWS SQS -for- Decouple Microservices and processing events asynchronously using queues\nThe course proposes a microservice oriented architecture implementation with AWS Serverless world using event-driven patterns and best practices. So the project will be the e-commerce application that will be totally Serverless components.\nLet me try to introduce Serverless components one by one;\nApi Gateway\nThis is entry point of our microservices.\nAPI Gateway provides Restful API-Driven Development and Synchronous Event Sources.\nSynchronous commands are request/response.\nAPI Gateway is a synchronous event source and provides a Serverless API proxy to AWS Lambda.\nAPI Gateway Redirects to CRUD request to internal microservices.\nProduct Lambda microservices which performs;\nCRUD operations using DynamoDB table over the AWS API Gateway\nThis will cover product table operations fully Serverless in microservices architecture.\nSynchronous requests will manage by AWS API Gateway and routing requests to Product Lambda Microservices that perform CRUD operations.\nWe will write Lambda functions with using AWS SDK for interacting other AWS resources for example in Product case we will interact with AWS Serverless DynamoDB to perform all crud operations.\nBasket Lambda microservices which performs;\nAdd-Remove synchronous basket operations with using AWS API Gateway and DynamoDB\nAgain synchronous requests will manage by AWS API Gateway and routing requests to Basket Lambda Microservices that perform CRUD operations.\nWe will write Lambda functions with using AWS SDK for interacting other AWS resources. For example in Basket case we interact with AWS Serverless DynamoDB to perform all crud operations.\nBut also,\nBasket microservice triggers to Event-driven use case which is the Checkout Basket.\nWhen checkout basket, this will publish and create event to Serverless Eventbus which is AWS EventBridge.\nSo this asynchronous communication will held by Basket Lambda Microservice and AWS EventBridge and consumed by Ordering microservices over the AWS SQS.\nAWS Event Bridge\nSo asynchronous communication held by AWS Serverless Eventbus service which is AWS EventBridge.\nWe will create Rules and Target definitions for AWS EventBridge from Basket Lambda microservices.\nThat means we will develop Basket Lambda Microservices when publishing checkout message to AWS EventBridge with using AWS SDK for development purpose.\nAWS SQS and Ordering Lambda microservices\nSo after publishing checkout event to the EventBridge, this event will consume by Ordering part.\nEventBridge send to event to AWS SQS in order to gain power of AWS queue.\nAfter that Ordering lambda microservice will consume this event with polling.\nThat means we will use event source mapping communication type here when consuming events, ordering lambda microservices send polling request and get event from the AWS queue.\nAfter consuming the event from the AWS queue, Ordering lambda microservices process the event with creating order record into its DynamoDB table.\nOrdering lambda microservices perform all these operations with developing lambda functions with using AWS SDK.\nWe have 3 communication types;\nSynchronous communication with AWS API Gateway for routing request from client applications to downstream microservices\nAsynchronous communication with AWS Serverless Eventbus which is EventBridge for applying Event Driven asynchronous Communication patterns.\nAnd lastly we have Event Source mapping communication when polling queue records from lambda services to AWS SQS-Simple Queue Service for Decouple Microservice and processing events asynchronously.\nDuring the course we will follow these Microservice communication types with Lambda invocations, and develop our sections following these arrows.\nIaC Serverless Stacks with AWS CDK - Cloud Development Kit\nWill follow Devops best practices when coding infrastructure. The whole project, we will develop infrastructure as code Serverless Stacks with using AWS CDK - Cloud Development Kit.\nWe will use AWS CDK for IaC Serverless Stacks developments that we will develop and provision all services step by step with together.\nAWS Developer and AWS Solution Architecture Jobs\nThis course prepares to you real AWS Developer and AWS Solution Architecture jobs, which's offers to you 3 figure salaries.\nBecause we are going to develop a real-world Serverless application which is already used and developed by lots of companies in the world.\nPrepare your AWS Certification with Practical Way\nAWS Certified Developer Associate\nAWS Certified Solutions Architect Associate\nDon't memorize all topics, feel and develop by hands-on, dirty your hands by this way you can achieve to onboard your target AWS jobs. This course will help you to prepare AWS Developer and Solutions Architect Associate certifications both theoretical and mostly practical way with developing Serverless e-commerce applications.\nAWS Serverless + CDK Automation + Integration Patterns = AWSome!\nThis will be the manifesto of our course. We will follow these manifesto every place of our course and the Serverless e-commerce application.\nIntegration Patterns that we will follow Queue-chaning, Publish-Subscribe and Fan-out design patterns during the course when developing our serverless e-commerce application.\nBy the end of this course, you'll learn how to design and developing AWS Event-driven microservices with using Serverless patterns and best practices.\nThis course will be 100% hands-on, and we will be develop all infrastructure and microservice codes with together and step by step.",
      "target_audience": [
        "Software Developer who wants to develop real-world project with AWS Serverless Services",
        "Software/Solutions Architects who wants to develop real-world project with AWS Serverless Services",
        "Who wants to develop and deploy Microservices on AWS Serverless Services"
      ]
    },
    {
      "title": "Mastering GitOps with Argo CD",
      "url": "https://www.udemy.com/course/mastering-gitops-with-argo-cd/",
      "bio": "Argo CD and GitOps from zero to hero: Helm, Kustomize, ApplicationSets, Blue/Green, CI/CD, Plugins, Hooks and many more!",
      "objectives": [
        "Implement GitOps methodologies to streamline application deployment and management, effectively reducing lead times and improving overall reliability.",
        "Apply advanced deployment strategies, such as multi-cluster deployments, canary releases, and blue-green deployments",
        "Integrate Argo CD and GitOps practices with existing CI/CD pipelines",
        "Override the default Kustomize and Helm behaviors and intefrate with Terraform using plugins"
      ],
      "course_content": {
        "Introduction to GitOps and Argo CD": [
          "Welcome and Course Overview",
          "Understanding GitOps",
          "Introduction to Argo CD",
          "Why GitOps with Argo CD?"
        ],
        "Setting Up Your Environment": [
          "Installing and Configuring Git",
          "Kubernetes Cluster Setup",
          "Installing Argo CD on Your Cluster"
        ],
        "GitOps Workflow and Best Practices": [
          "Git Repository Structure for GitOps",
          "Manifests, Helm Charts, and Kustomize",
          "GitOps Best Practices"
        ],
        "Argo CD Deep Dive": [
          "Argo CD Architecture",
          "Deploying a sample application to Argo CD",
          "Deploying Helm charts to Argo CD",
          "Deploying applications to Argo CD using Kustomize",
          "Managing Secrets in GitOps",
          "Synchronization and Rollbacks"
        ],
        "Advanced Argo CD Features and Integrations": [
          "Multi-Cluster Deployment with Argo CD",
          "Introducing Argo CD ApplictionSets",
          "Implementing Blue-Green Deployments",
          "Implementing Canary Deployments"
        ],
        "Using Argo CD in CI/CD pipelines": [
          "Section Introduction",
          "Preparing our sample application (the currency converter)",
          "Connecting Argo CD to GitHub",
          "Setting up the CI pipeline using GitHub Actions",
          "Using Argo CD for the Continous Deployment (CD) part"
        ],
        "Using Argo CD plugins for custom configuration management": [
          "What are Argo CD plugins and why we may need them?",
          "Creating an Argo CD plugin for envsubst",
          "Introducing Terraform and our sample project",
          "Using an Argo CD dynamic plugin with Terraform for a zero-touch workflow"
        ],
        "Argo CD Resource Hooks": [
          "Introducing Resource Hooks and their need",
          "Using PreSync Hook for performing database migrations",
          "Using Sync Hook for clearing cache",
          "Using PostSync and SyncFail for sending Slack notifications",
          "Using the PostDelete hook for database backup and deletion",
          "Enabling hostPath volumes in KinD clusters"
        ]
      },
      "requirements": [
        "Basic knowledge of Kubernetes and containerization concepts",
        "Familiarity with Git and version control systems",
        "Experience with command-line interfaces and the ability to use the terminal",
        "Basic knowledge of DevOps principles and practices"
      ],
      "description": "Welcome to \"Mastering GitOps with Argo CD,\" a comprehensive guide to implementing modern GitOps practices and accelerating your continuous delivery pipeline using Argo CD. You will learn the fundamentals of GitOps, explore Argo CD's powerful features, and dive deep into advanced deployment strategies and integrations.\nThis course is designed for DevOps engineers, developers, and IT professionals who want to improve their skills in managing Kubernetes-based applications using GitOps methodologies. By the end of the course, you will have a solid understanding of GitOps principles and be able to confidently use Argo CD to deploy, manage, and monitor your applications.\nKey takeaways from this course include:\nGrasping the concepts and benefits of GitOps for managing application infrastructure\nFamiliarizing yourself with Argo CD, its architecture, and components\nSetting up your environment, including Git, Kubernetes, and Argo CD\nDesigning and managing Git repositories for GitOps workflows\nDeploying applications with Argo CD and understanding synchronization and rollback processes\nImplementing advanced deployment strategies, such as multi-cluster deployments, canary, and blue-green deployments\nWith hands-on examples and practical demonstrations, this course will equip you with the skills and knowledge to streamline your application delivery process, reduce deployment risks, and embrace the full potential of GitOps with Argo CD.\nJoin us in \"Mastering GitOps with Argo CD\" as we guide you step by step through this exciting journey into the world of GitOps and Kubernetes application management. Whether you're a seasoned professional or just starting your career in the DevOps field, this course will provide you with the skills and confidence to excel in managing complex Kubernetes deployments using GitOps methodologies and Argo CD.\nEnroll now and become an expert in GitOps and Argo CD, empowering yourself to deliver high-quality applications with efficiency, reliability, and speed!",
      "target_audience": [
        "Software developers who want to learn how to streamline their Kubernetes deployment workflow and improve infrastructure management",
        "DevOps engineers who want to implement GitOps best practices for Kubernetes deployments",
        "IT professionals who want to learn how to use Argo CD to automate their Kubernetes deployments and manage their infrastructure as code",
        "Students who are interested in learning about GitOps and its role in modern software development and DevOps practices"
      ]
    },
    {
      "title": "Apache Kafka - Real-time Stream Processing (Master Class)",
      "url": "https://www.udemy.com/course/kafka-streams-real-time-stream-processing-master-class/",
      "bio": "Processing Real-time Streams using Apache Kafka and Kafka Streams API - Start as Beginner to Finish as PRO",
      "objectives": [
        "Apache Kafka Foundation and Kafka Architecture",
        "Creating Streams using Kafka Producer APIs",
        "Designing, Developing and Testing Real-time Stream Processing Applications using Kafka Streams Library",
        "Kafka Streams Architecture, Streams DSL, Processor API and Exactly Once Processing in Apache Kafka",
        "Auto-generating Java Objects from JSON Schema definition, Serializing, Deserializing and working with JSON messages without Schema Registry.",
        "Auto-generating Java Objects from AVRO Schema definition, Serializing, Deserializing and working with AVRO messages using Confluent Schema Registry.",
        "Unit Testing and Integration Testing your Kafka Streams Application.",
        "Supporting Microservices architecture and implementing Kafka Streams Interactive Query."
      ],
      "course_content": {
        "Before you Start": [
          "Introduction",
          "About the Course",
          "About the Author",
          "What do you Need for this Course?",
          "Debugging Problems and Asking Questions",
          "Frequently Asked Questions",
          "Source Code and Other Resources"
        ],
        "Introduction to Real-time Streams": [
          "Emergence of Bigdata - A Quick Recap",
          "Conception of Event Streams",
          "Real-time Streaming - Use Cases",
          "Real-time Streaming Challenges",
          "Real-time Streaming Design Consideration",
          "Section Summary"
        ],
        "Enter the world of Apache Kafka": [
          "What is Apache Kafka?",
          "Kafka Storage Architecture",
          "Kafka Cluster Architecture",
          "Kafka Work Distribution Architecture - Part 1",
          "Kafka Work Distribution Architecture - Part 2",
          "Section Summary"
        ],
        "Creating Real-time Streams": [
          "Streaming into Kafka",
          "Kafka Producers - Quick Start",
          "Kafka Producer Internals",
          "Scaling Kafka Producer",
          "Advanced Kafka Producers (Exactly Once)",
          "Advanced Kafka Producer (Implementing Transaction)",
          "Kafka Producer - Micro Project",
          "Kafka Producer - Final Note and References"
        ],
        "Enter the Stream Processing": [
          "Stream Processing in Apache Kafka",
          "Kafka Consumer - Practical Introduction",
          "Kafka Consumer - Scalability, Fault tolerance and Missing Features",
          "Kafka Streams API - Quick Start",
          "Creating Streams Topology",
          "Implementing Streams Topology",
          "Kafka Streams Architecture",
          "Section Summary and References"
        ],
        "Foundation for Real Life Project Implementations": [
          "Introduction to Types and Serialization in Kafka",
          "JSON Schema to POJO for JSON Serdes",
          "Creating and Using JSON Serdes",
          "AVRO Schema to POJO for AVRO Serdes",
          "Creating and using AVRO schema in Producers",
          "Creating and using AVRO schema in Kafka Streams",
          "Section Summary and References"
        ],
        "States and Stores": [
          "Understanding States and State Stores",
          "Creating your First State Store",
          "Caution with States",
          "State Store Fault Tolerance",
          "Section Summary and References"
        ],
        "KTable - An Update Stream": [
          "Introducing KTable",
          "Creating your First Update Stream - KTable",
          "Table Caching and Emit Rates",
          "Introducing GlobalKTable"
        ],
        "Real-time Aggregates": [
          "Computing Your First Aggregate - Real-time Streaming Word Count",
          "Streaming Aggregates - Core Concept",
          "KStream Aggregation using Reduce()",
          "KStream Aggregation using Aggregate()",
          "Common Mistakes in Aggregation",
          "Count on KTable",
          "KTable Aggregation using Aggregate()"
        ],
        "Timestamps and Windows": [
          "Timestamps and Timestamp Extractors",
          "Creating Tumbling Windows",
          "Stream Time and Grace Period",
          "Suppressing Intermediate Results",
          "Creating Hopping Windows",
          "Creating Session Windows"
        ]
      },
      "requirements": [
        "Programming Knowledge Using Java Programming Language",
        "Familiarity with Java 8 Lambda",
        "A Recent 64-bit Windows/Mac/Linux Machine with 4 GB RAM (8 GB Recommended)"
      ],
      "description": "This course does not require any prior knowledge of Apache Kafka. We have taken enough care to explain all necessary and complex Kafka Architecture concepts to help you come up to speed and grasp the content of this course.\n\n\nAbout the Course\nI am creating Kafka Streams - Real-time Stream Processing to help you understand the stream processing in general and apply that knowledge to Kafka Streams Programming. This course is based on my book on the same subject with the same title. My Book is already published and is available with all major online retailers as an eBook and Paperback.\nMy approach to creating this course is a progressive common-sense approach to teaching a complex subject. By using this unique approach, I will help you to apply your general ability to perceive, understand, and reason the concepts progressively that I am explaining in this course.\nWho should take this Course?\nKafka Streams - Real-time Stream Processing course is designed for software engineers willing to develop a stream processing application using the Kafka Streams library. I am also creating this course for data architects and data engineers who are responsible for designing and building the organization’s data-centric infrastructure. Another group of people is the managers and architects who do not directly work with Kafka implementation, but they work with the people who implement Kafka Streams at the ground level.\nKafka Version used in the Course\nThis course is using the Kafka Streams library available in Apache Kafka 2.x. I have tested all the source code and examples used in this course on Apache Kafka 2.3 open source distribution. Some examples of this course also make use of the Confluent Community Version of Kafka. We will be using Confluent Community Version to explain and demonstrate functionalities that are only available in the Confluent Platform, such as Schema Registry and Avro Serdes.\nSource Code, Development IDE, Build Tool, Logging, and Testing Tools\nThis course is fully example-driven, and I will be creating many examples in the class. The source code files for all the examples are included in your study material.\nThis course will be making extensive use of IntelliJ IDEA as the preferred development IDE. However, based on your prior experience, you should be able to work with any other IDE designed for Java application development.\nThis course will be using Apache Maven as the preferred build tool. However, based on your prior experience, you should be able to use any other build tool designed for Java applications.\nThis course also makes use of Log4J2 to teach you industry-standard log implementation in your application.\nWe will be using JUnit5, which is the latest version of JUnit for implementing Unit Test Cases.\nExample and Exercises\nWorking examples and exercises are the most critical tool to convert your knowledge into a skill. I have already included a lot of examples in the course. This course also consists of objective questions and some programming assignments as and when appropriate. These exercises will help you to validate and check your concepts and apply your learning to solve programming problems.",
      "target_audience": [
        "Software Engineers and Architects who are willing to design and develop a Stream Processing Application using Kafka Streams Library.",
        "Java Programmers aspiring to learn everything necessary to start implementing real-time streaming applications using Apache Kafka"
      ]
    },
    {
      "title": "Master the Coding Interview: Big Tech (FAANG) Interviews",
      "url": "https://www.udemy.com/course/master-the-coding-interview-big-tech-faang-interviews/",
      "bio": "Ace the Google, Amazon, Meta, Microsoft, Netflix coding interviews. Step by step guide for their toughest questions!",
      "objectives": [
        "Ace the coding interview at the top tech companies (Google, Amazon, Meta, Apple, Microsoft, Tesla, Netflix + others)",
        "Step by step guide to common questions, how to solve them, optimize, and present them during tech interview",
        "The ultimate resource to prepare for coding interviews, tech interviews and programming interviews",
        "Learn exactly what you need to answer difficult questions and the framework you need for ANY kind of questions they throw at you",
        "Use the right Data Structures and Algorithms to pass coding interview questions that have the optimal solution",
        "Become a better developer by mastering computer science fundamentals"
      ],
      "course_content": {
        "Introduction": [
          "Course Breakdown",
          "Join Our Online Classroom!",
          "Exercise: Meet Your Classmates and Instructor",
          "Download All Code + Solutions",
          "ZTM Resources",
          "Monthly Coding Challenges, Free Resources and Guides"
        ],
        "Arrays - Question #1 Google Interview Question Two Sum (Easy)": [
          "Interview Question #1 Two Sum",
          "How To Approach Our Problem",
          "Writing Our Brute Force Solution",
          "Testing Our Brute Force Solution With Our Test Cases",
          "Submitting To Leetcode",
          "Analyzing Space and Time Complexity",
          "Optimizing Our Solution",
          "Coding Our Optimal Solution",
          "Testing Our Optimal Solution With Our Test Cases & Space and Time Complexity",
          "Checking Performance on Leetcode",
          "Solutions In Other Languages",
          "Web, Python, Machine Learning Monthly + Resources"
        ],
        "Arrays - Questions #2 - Container With Most Water (Medium)": [
          "Interview Question #2 - Container With Most Water",
          "Coming Up With Test Cases",
          "Thinking Through A Logical Brute Force Solution",
          "Coding Out Our Brute Force Solution",
          "Stepping Through Our Code",
          "Thinking About Our Optimal Solution",
          "Coding Our Optimal Solution And Testing On LeetCode"
        ],
        "Arrays - Questions #3 - Trapping Rainwater (Hard)": [
          "Interview Question #3 - Trapping Rainwater",
          "Thinking About A Logical Solution",
          "Coding Our Brute Force",
          "Figuring Out Our Optimization Strategy",
          "Coding Our Optimal Solution",
          "Optimal Code And LeetCode"
        ],
        "Strings - Question #4 - Typed Out Strings (Easy)": [
          "Interview Question #4 -Typed Out Strings",
          "Logic Of Our Brute Force",
          "Coding Our Brute Force",
          "Space And Time Complexity",
          "Coming Up With Optimal Solution",
          "Coding Our Optimal Solution",
          "Submitting To LeetCode"
        ],
        "Strings - Question #5 - Longest Substring Without Repeating Characters (Medium)": [
          "Interview Question #5 - Longest Substring Without Repeating Characters",
          "Coming Up With A Brute Force Approach",
          "Coding Our Brute Force",
          "Space And Time Complexity",
          "Sliding Window Technique",
          "Hints For Optimizing Our Solution",
          "Thinking About Optimal Solution",
          "Coding Our Optimal Solution",
          "Note: Correction for explanation of +1",
          "Optimal Code And LeetCode"
        ],
        "Strings - Question #6 - Valid Palindrome & Almost Palindrome": [
          "Intro To Palindromes",
          "Interview Question #6 - Valid Palindrome",
          "Almost A Palindrome",
          "Figuring Out Our Solution",
          "Coding Our Solution"
        ],
        "Introducing Linked Lists - Basics and Reverse A Linked List": [
          "Linked List Introduction",
          "Basic Algorithm: Reverse a Linked List",
          "Thinking About Our Solution",
          "Coding Reverse A Linked List Solution"
        ],
        "Linked List - Question #7 - M, N Reversals (Medium)": [
          "Interview Question #7 - M, N Reversals",
          "Coming Up With A Logical Solution",
          "Coding Our Solution"
        ],
        "Linked List - Question #8 - Merge Multi-Level Doubly Linked List (Medium)": [
          "Interview Question #8 - Merge Multi-Level Doubly Linked List",
          "Figuring Out Our Test Cases",
          "Note: A great visualization helper written in Python by Karen Fisher",
          "Thinking About Our Approach",
          "Coding Out Our Solution"
        ]
      },
      "requirements": [
        "No previous computer science knowledge necessary",
        "Basic understanding of one programming language",
        "If you have the ambition to learn and get into one of these companies we will make it achievable for you! (see our student success stories)"
      ],
      "description": "Brand new course ready for the 2023 hiring season! Join a live online community of over 900,000+ engineers and a course taught by industry experts that have actually worked both in Silicon Valley and Toronto at top tech firms. Graduates of ZTM courses are now working at Google, Tesla, Amazon, Apple, IBM, JP Morgan, Meta + other top tech companies.\n\nThis is one student 1 month after taking this course:\n\"I joined the course when it came out, and after a couple of months studying, practice, and more practice, losing sleep and everything I'm proud to say that I got an offer from GOOGLE!! I still can't believe it, it's incredibly surreal. And I can't thank you and this entire community enough for what you've given me. This year is notorious for how tumultuous it's been, but it's seriously has been a test from the first second of this year.. I've shed many, many tears these past 12 months and could write a book on the experience this year. but i just want to Thank you, thank you, thank you from the bottom of my heart for providing me (and this community) the resources needed to realize my potential that I honestly never saw in myself.. and now that I know i can get this far, I know that this is only the beginning..\"\nWant to land a job at a great tech company like Google, Microsoft, Meta, Netflix, Amazon, or other companies but you are intimidated by the interview process and the coding questions? Do you find yourself feeling like you get \"stuck\" every time you get asked a coding question? This course is your answer. Using the strategies, lessons, and exercises in this course, you will learn how to land offers from all sorts of companies. This is the ultimate resource to prepare you for coding interviews. Everything you need in one place!\n\nThe goal of the course isn't to tell you: \"Do 100 interview questions and hope you memorize their answers.\" NO! Our goal is to use the hand selected common interview questions to give you a framework to answer ANY interview question that these companies may throw at you. Instead of trying to memorize common questions, we teach you the principles and fundamentals that you can use to notice certain common patterns in questions so that any question that you get, you have a framework to answer and be confident in your programming interview.\nYou will also get access to our private online community with thousands of developers online to help you get through the course and the interview!\n\nHere is what you will learn to use in this course while answering the interview questions step by step with us:\n----Technical----\n1. Big O Notation\n2. Data Structures Used:\n* Arrays\n* Hash Tables\n* Singly linked lists\n* Doubly linked lists\n* Stacks\n* Queues\n* Binary Trees\n* Binary Search Trees\n* Tries\n* N-ary Trees\n* Min/Max Heaps\n* Priority Queues\n* 2-D Arrays/ Matrices\n* Graphs\n* Adjacency List\n* Adjacency Matrix\n* Interface Design\n\n\n3. Algorithmic Paradigms Used:\n* Recursion\n* Sorting\n* Searching\n* Tree Traversals\n* Graph Traversals\n* Breadth First Search\n* Depth First Search\n* Divide and Conquer\n* Greedy Method\n* Dynamic Programming\n* Backtracking\n\n\n4. Specific Algorithms Used:\n* Hoare's Quickselect Algorithm\n* Floyd's Tortoise and Hare Cycle Detection Algorithm\n* Bellman-Ford Algorithm\n* Dijkstra's Algorithm\n* Topological Sort\n\n\nUnlike most instructors out there, We are not marketers or salespeople. We are senior engineers and programmers who have worked and managed teams of engineers and have been in these interviews both as an interviewee as well as the interviewer.\n\nOur job as instructors will be successful if we are able to help you get your dream job at a big company. This one skill of mastering the coding interview can really change the course of your career and life and we hope you sign up today to see what it can do for your career!\n\nSee you inside the course!\n\n\nTaught by:\n\nAndrei is the instructor of the highest rated Web Development course on Udemy as well as one of the fastest growing. His graduates have moved on to work for some of the biggest tech companies around the world like Apple, Google, JP Morgan, IBM, etc... He has been working as a senior software developer in Silicon Valley and Toronto for many years, and is now taking all that he has learned, to teach programming skills and to help you discover the amazing career opportunities that being a developer allows in life.\nHaving been a self taught programmer, he understands that there is an overwhelming number of online courses, tutorials and books that are overly verbose and inadequate at teaching proper skills. Most people feel paralyzed and don't know where to start when learning a complex subject matter, or even worse, most people don't have $20,000 to spend on a coding bootcamp. Programming skills should be affordable and open to all. An education material should teach real life skills that are current and they should not waste a student's valuable time.   Having learned important lessons from working for Fortune 500 companies, tech startups, to even founding his own business, he is now dedicating 100% of his time to teaching others valuable software development skills in order to take control of their life and work in an exciting industry with infinite possibilities.\nAndrei promises you that there are no other courses out there as comprehensive and as well explained. He believes that in order to learn anything of value, you need to start with the foundation and develop the roots of the tree. Only from there will you be able to learn concepts and specific skills(leaves) that connect to the foundation. Learning becomes exponential when structured in this way.\nTaking his experience in educational psychology and coding, Andrei's courses will take you on an understanding of complex subjects that you never thought would be possible.\n\n-------\n\nYihua Zhang is one of the Instructors of Zero To Mastery, one of the highest rated and fastest growing Web Development academies on Udemy. He has been working as a software developer for numerous years in Toronto for some of the largest tech companies in the world. He has also been working as an instructor for more than a decade. He is focused on bringing everything he has learned to help you achieve a new career as a developer, but also give you all the fundamental skills required to flourish in this incredible industry.\n\n\nYihua is a self taught developer, so he fully understands the challenges and mindset of coming into this industry from various other backgrounds. He has been on both sides of the table, as both an instructor and student numerous times so he can empathize with the difficulty of learning something new and challenging. Learning itself is a skill that needs to be practiced and improved upon, and he is dedicated to helping you improve and master that skill for yourself. Courses need to be practical, you need to be able to understand why you are learning the things that you are being taught. You need to understand the problem before you know the solution, and he prides himself on teaching you how to build professional, real world applications so you truly understand why you are doing things a specific way. He will teach you the mindset and skillset required to grow as a developer as fast as possible, so you can have the rich and fulfilling life that comes with this career.\n\n\nYihua's courses will guide you to build beautifully written and richly featured applications, while truly understanding all the complex concepts you will encounter along the way.",
      "target_audience": [
        "Anyone that wants to work a Google, Amazon, Meta, Microsoft, Apple, Tesla, Netflix or other top tech companies",
        "Any engineer, developer, programmer, who wants to improve their interviewing skills",
        "Anyone interested in improving their whiteboard coding skills",
        "Anyone who wants to become a better developer",
        "Any self taught programmer who missed out on a computer science degree"
      ]
    },
    {
      "title": "Functional Programming + Lambdas, Method References, Streams",
      "url": "https://www.udemy.com/course/functional-programming-learnit/",
      "bio": "Learn amazing features in Java with functional programming, lambda functions, method references and Stream API",
      "objectives": [
        "Functional Programming Approach",
        "Core Principles of Functional Programming",
        "Lambda Expressions",
        "Method References",
        "Functional Programming in Java",
        "Functional interfaces like Function, BiFunction, Consumer, BiConsumer, Predicate, BiPredicate & others",
        "How to write amazing code with functional programming approach in Java",
        "Stream API"
      ],
      "course_content": {
        "Introduction": [
          "Communication plan",
          "Unlimited access to 'Learn IT' application for students",
          "Tips to Improve Your Course Taking Experience",
          "Free AI Bot for My Students Only – No Sign-Up, FREE, Just Practice"
        ],
        "Functional Programming: General Overview & Core Concepts": [
          "Functional Programming: Overview"
        ],
        "Lambda Functions & Method References & Functional Interfaces in Java": [
          "Functional Interface, Lambda Functions & Method References"
        ],
        "Interfaces from java.util.function package": [
          "Function & BiFunction: Theory & Practice",
          "Consumer, BiConsumer, Predicate & BiPredicate",
          "Sort words in array with anonymous function"
        ],
        "Reference Section: Generics in Java": [
          "Generics in Java",
          "Parameterized custom List & iterators"
        ],
        "Stream API": [
          "Stream API with Practical Exercises",
          "Quiz: Functional Programming in Java - Check yourself"
        ],
        "===== Functional Programming in Java: Interview Preparation =====": [
          "How to be prepared for the interview?",
          "Part 1: Java Functional Programming Interview - Questions and Answers",
          "Part 2: Java Functional Programming Interview - Questions and Answers"
        ],
        "Bonus section": [
          "Bonus Lesson"
        ]
      },
      "requirements": [
        "Understanding of Java syntax",
        "Knowledge of Java Collections Framework is required"
      ],
      "description": "From this course, you can learn Functional Programming in Java with Lambda expressions (anonymous functions), Method references, and Stream API.\nThere are a lot of other courses on this topic. So, why would you choose exactly this course?  Here are just a few reasons:\n\n- Coding examples\nTo learn to program is not enough just watching videos and reading books. You also need to have a lot of practice. In this training course, you will review multiple practical tasks and coding examples which will help you learn and understand Java better.\n\n- Open source code\nWe hide nothing from our students! Including the source code for the home task solutions and source code of examples that were shared during the lesson. Having the source code you can just copy and paste it to run it on your local computer to understand how things work better.\nYou are allowed to use all source code examples for learning purposes. This helps significantly to configure the environment and make tests work, especially in case students didn't work with any testing framework in the past.\n\n- Q&A support\nThe significant difference between the online and offline learning process is the instructor's availability. If you are in one room with a tutor he always can help you to get understand the specific concept or to help fix your code on your computer.\nIn this course, we are supporting students with answers to any questions flagged in the Q&A section. In case there will be recurring questions - separate video lessons will be created to show how to address the issue.\nSo with this course you are not just getting video materials, code exercises, source code, access to the free mobile application without limits (which is still pretty cool, huh? :) ), but you also get tutor support and answers to your questions along with this course.\n\n- Relevant knowledge\nAfter our team investigated other Java courses on Udemy we realized that most of them have nothing in common with real life. The information which is shared there is very old and significantly out of date. For example, the instructor teaches a framework which is not been used already for 15 years. Or instructors do stress on the programming design which is not used anymore at all!\nThe instructor of this course is a consultant in a top-rated IT outsourcing company and helps to bring cutting-edge solutions in IT for all his clients. Feel free to check the LinkedIn page of the instructor and check skills endorsement. More than 19 thousand people across all over the world (BTW most of them are from the top 100 companies of the world) evaluated the skills of Andrii Piatakha.\nWith this course, you can be sure that you will spend your time learning the right things from one of the best IT consultants in the world.\n\n- Free mobile App without limits for our students\nKnowing Java is one skill. Be able to pass interviews in the company - that is another skill :) Nowadays a lot of companies use tests to select candidates on the first level of interview. We developed applications to practice skills specifically for such purposes.\nIn this course, we will provide you link to download our FREE mobile app for android. (soon it will be also available for iOS platforms)\nThe instructor of this course comes up with hundreds of tests that are used to test the knowledge of candidates. With this application, you will be well-prepared for the interview.\nAlso, only for our students - there is no limit on attempts to pass certification. In the course, we will tell you how to set up a special bonus code that will remove restrictions for our students inside the app.\n\n- High concentration of useful material in each lesson\nSometimes you can notice that watching 5 minutes of our lesson is equivalent to watching another 30 minutes lesson.\nThis is because time spent for preparation for the lesson (script for the lesson, lesson structure) and video editing (to cut boring pieces of the lesson or time when the program loads) sometimes 10 times as much (sometimes even 20) as the final lesson duration after video editing.\nAlso, each topic is separated from another. In case some concept will be explained in the next lesson and you don't need to worry about understanding this in the scope of this lesson - the instructor will make an announcement when a specific topic will be covered.\nGo and try it yourself! We will appreciate your feedback.\n\n\n\n\nSo don't wait! Take a look at the lessons' preview if you still have doubts!\nBuy this course today, and you will get all updates for FREE!\nFor those who successfully passed this training course, or for students who were recognized for asking amazing questions, there is a special offer from the IT-Bulls company! The creator of this course is IT-Bulls company CEO and Founder. We are always in search of talents to run our amazing startups together with you. Probably you always dreamed about running your startup? In this course, you will be able to find the team who will teach you how to do that and (in particular cases) will be glad to help with implementation!\nHope you enjoy this course! And remember, we appreciate all your feedback! Your feedback will help us to become even better! Your feedback will help us to create to best Java course ever!\nSee you at the lessons! :)",
      "target_audience": [
        "Java Software engineers who wants to learn functional programming in Java"
      ]
    },
    {
      "title": "Kubernetes Training: Learn K8s from Zero to Cloud",
      "url": "https://www.udemy.com/course/kubernetes-training-learn-kubernetes-from-zero-to-cloud/",
      "bio": "Develop and Deploy Cloud Native Applications at Scale with Kubernetes",
      "objectives": [
        "Deploy containerized applications using Kubernetes pods",
        "Implement service discovery for inter-application communication",
        "Organize and isolate resources using Kubernetes namespaces",
        "Scale applications using Kubernetes Deployments",
        "Deploy databases using StatefulSets and manage storage with Persistent Volumes",
        "Separate configuration from code using ConfigMaps and Secrets",
        "Implement automatic scaling with Horizontal Pod Autoscaler (HPA)",
        "Manage external access to services using Ingress Controllers",
        "Streamline application deployment using Helm Charts",
        "Automate complex application management with Kubernetes Operators",
        "Deploy a Kubernetes cluster to Amazon Web Services (AWS)",
        "Understand and apply Kubernetes' self-healing and resilience features",
        "Perform rolling updates and rollbacks for zero-downtime deployments",
        "Implement health checks using Liveness and Readiness probes",
        "Use the Kubernetes CLI and VS Code extensions for efficient cluster management"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Discover More Valuable Content",
          "Your Instructor"
        ],
        "Project Files": [
          "Project Files"
        ],
        "Containers Crash Course (Optional)": [
          "Containers Crash Course (Optional)"
        ],
        "Cloud and DevOps (Optional)": [
          "Become a Cloud and DevOps Engineer"
        ],
        "Why Kubernetes Dominates the Cloud": [
          "Why Kubernetes Dominates the Cloud (Kubernetes Overview)",
          "Quiz"
        ],
        "Downloads and Setup": [
          "Docker Desktop Linux Containers",
          "Setting Up a Single-Node Kubernetes Cluster",
          "VS Code: Kubernetes Extension Setup"
        ],
        "Pods and Containers": [
          "Pods and Containers",
          "Extra Practice (Grade Submission API)",
          "Key Takeaways"
        ],
        "Service Discovery": [
          "Service Discovery",
          "Key Takeaways"
        ],
        "Namespace": [
          "Namespace",
          "Key Takeaways"
        ],
        "Resiliency and Self Healing": [
          "Resiliency and Self Healing",
          "Key Takeaways"
        ]
      },
      "requirements": [
        "Familiarity with any programming language will be helpful, but no expert-level skills are required.",
        "Some comfort with using command-line interfaces will be beneficial, but we'll review essential commands.",
        "You'll need a computer (Windows, Mac, or Linux) with a stable internet connection to follow along with the hands-on exercises.",
        "A basic understanding of containerization concepts is recommended. However, we provide an optional Docker crash course for those new to containerization.",
        "The most important prerequisite is enthusiasm and a desire to learn about cloud-native technologies!"
      ],
      "description": "Since its open-source release by Google in 2014, Kubernetes has revolutionized cloud computing. Now supported by major cloud providers like AWS, Azure, and Google Cloud, it's the industry standard for managing cloud-native applications at scale.\nThis End-to-End Kubernetes training course will guide you through developing and deploying cloud-native applications on Kubernetes. From foundational concepts to advanced techniques, you'll gain hands-on experience with key Kubernetes features and best practices. The course culminates in a real-world deployment to Amazon Web Services (AWS), providing you with practical, applicable skills for cloud-native development.\nBy the end of this course, you will be able to:\nDeploy containerized applications using Kubernetes pods\nImplement service discovery for inter-application communication\nOrganize and isolate resources using Kubernetes namespaces\nScale applications using Kubernetes Deployments\nDeploy databases using StatefulSets and manage storage with Persistent Volumes\nSeparate configuration from code using ConfigMaps and Secrets\nImplement automatic scaling with Horizontal Pod Autoscaler (HPA)\nManage external access to services using Ingress Controllers\nStreamline application deployment using Helm Charts\nAutomate complex application management with Kubernetes Operators\nDeploy a Kubernetes cluster to Amazon Web Services (AWS)\nUnderstand and apply Kubernetes' self-healing and resilience features\nPerform rolling updates and rollbacks for zero-downtime deployments\nImplement health checks using Liveness and Readiness probes\nUse the Kubernetes CLI and VS Code extensions for efficient cluster management\nEnroll in our Kubernetes Bootcamp today and gain the practical skills you need to effectively orchestrate your cloud native projects.",
      "target_audience": [
        "Software developers looking to transition to cloud-native development",
        "Students and professionals wanting to future-proof their careers in cloud computing",
        "DevOps engineers seeking to enhance their Kubernetes skills",
        "Cloud architects interested in mastering Kubernetes for large-scale deployments",
        "Anyone with basic Docker knowledge looking to advance their container orchestration skills"
      ]
    },
    {
      "title": "Clean Architecture for Beginners: A Practical Guide",
      "url": "https://www.udemy.com/course/software-architecture-essentials-for-business-applications/",
      "bio": "Architecting Software Systems with Clean Architecture Principles with Code Examples",
      "objectives": [
        "Basic Software Architecture Concepts",
        "Layered Architecture",
        "Clean Architecture (Onion Architecture)",
        "Separation of Concerns Principle",
        "How Clean Architecture helps TDD and Unit Testing",
        "Common Mistakes in Software Architecture"
      ],
      "course_content": {
        "Software Architecture Concepts": [
          "What is Software Architecture",
          "What is a good Software Architecture",
          "What is Complexity",
          "The SoC Principle"
        ],
        "Clean Architecture Concepts and Examples": [
          "Application Introduction",
          "Without SoC Principle",
          "Applying the Layered Architecture",
          "Dependency Problems and Dependency Injection",
          "Problems with Layered Architecture: #1 Lack of Intent",
          "Problems with Layered Architecture: #2 Leaks of Logic",
          "Technologies Driven Architecture",
          "Intent Driven Architecture",
          "Seeking the Middle Ground",
          "What is Clean Architecture (Onion Architecture)",
          "Plugin Based Outer Rings",
          "Clean Architecture Applied",
          "Problems Solved By Clean Architecture",
          "The Benefits of Clean Architecture",
          "Implement the View Ports Use Case",
          "Implement the Search by Port Use Case",
          "A Common Mistake"
        ],
        "Next Steps & Source Code": [
          "Source Code",
          "Next Steps"
        ]
      },
      "requirements": [
        "You have programmed for more than 6 months with any OOP languages",
        "You have basic knowledge of OOP",
        "You are eager to learn software architecture"
      ],
      "description": "Software development career is very rewarding. Being able to code with simple, efficient and clean architecture will not only help you crack your interviews, but also take your career to a whole new level.\n\n\nSoftware development jobs are mainly in developing business applications. This is the focus of this course. In this course, I will dive deep into the typical layered architecture for business applications, analyze the pros and cons of it and then present you the Clean Architecture, also known as the onion architecture, which is covered in Robert Martin's books and blogs.\n\n\nThis course is not just full of theories, I prepared a cargo shipping application as a whole case study with a lot of existing code analysis to help you understand the related software design principles, applying layered architecture and the clean architecture. I also code in front of your eyes when I apply the Clean Architecture to implement two new use cases.\n\n\nBy the end of the course, you will have a thorough understanding of the Separation of Concerns principle, layered architecture as well as the Clean Architecture and be able to use them in your next projects.\n\n\nWhat you will learn:\nBasic Software Architecture Concepts\nLayered Architecture\nClean Architecture (Onion Architecture)\nSeparation of Concerns Principle\nHow Clean Architecture helps TDD and Unit Testing\nCommon Mistakes in Software Architecture\n\n\nWhat you will need:\nYou have programmed for more than 6 months with any OOP languages\nYou have basic knowledge of OOP\nYou are eager to learn software architecture\n\n\nWho this course is for:\nAnyone with any OOP computer languages knowledge who wants to know more about software architecture in business apps.\nAnyone who want to learn about the Clean Architecture (Onion Architecture) but haven't been able to grasp it yet.\n\n\nLast but not least:\nEnjoy this course and don't forget to check out my other courses which are created with the Clean Architecture in them to help you further understand this great architecture.",
      "target_audience": [
        "Anyone with any OOP computer languages knowledge who wants to know more about software architecture in business apps.",
        "Anyone who want to learn about the Clean Architecture (Onion Architecture) but haven't been able to grasp it."
      ]
    },
    {
      "title": "Recursion and Backtracking (Memoization, D&C, Combinations)",
      "url": "https://www.udemy.com/course/recursion-and-backtracking-memoization-dc-combinations/",
      "bio": "Algorithm Design Techniques, Backtracking, Divide and Conquer, Memoization, N-queen Problem",
      "objectives": [
        "You will be able to solve almost any problem involving recursion or at least easily understand the logic behind it.",
        "You will learn Backtracking and be able to solve famous Backtracking problems that may be asked in the coding interviews.",
        "You will have the sufficient knowledge and skill to easily understand and learn Data Structures and Algorithms.",
        "You will learn how to create and solve problems having to do with Recurrence Relations.",
        "You will learn the Basics of Programming Paradigms such as Dynamic Programming, Divide and Conquer and Backtracking."
      ],
      "course_content": {},
      "requirements": [
        "A computer or any device for attending the course",
        "Knowledge of at least a programming language"
      ],
      "description": "If you have trouble understanding Recursion and Backtracking, which is a recursion based technique, then this course is for you, since it is a course solely dedicated to Recursion and All types of Algorithms related to it.\nIn this course the Basics of Recursion will be learned. The basic Algorithm Design techniques like Divide and Conquer, Dynamic Programming and Backtracking(Exhaustive Search) will be discussed and many problems related to them will be solved.\nMany different type of problems will be solved, from the simplest, finding the sum of numbers, to more difficult ones like Combinations, Permutations, Memoizations and the famous Flood Fill and N-queen Problem.",
      "target_audience": [
        "Anyone who wants to improve his/her skills in Recursion and Backtracking.",
        "Coders who want to do good in coding interviews.",
        "Struggling students in the topic of Recursion and Backtracking.",
        "Students who want to understand better Dynamic Programming and other Paradigms.",
        "Coders who have just learned a Programming Language."
      ]
    },
    {
      "title": "Object Process Methodology (OPM) for MBSE",
      "url": "https://www.udemy.com/course/opm-for-mbse/",
      "bio": "Object Process Methodology (OPM) for Model Based Systems Engineering (MBSE)",
      "objectives": [
        "Familiarity with Systems.",
        "Familiarity with Systems Engineering.",
        "Familiarity with Model Based Systems Engineering (MBSE).",
        "Familiarity with Object Process Methodology (OPM)."
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Systems & Systems Engineering": [
          "Systems & Systems Engineering"
        ],
        "Model Based Systems Engineering (MBSE)": [
          "Model Based Systems Engineering (MBSE)"
        ],
        "Introduction to Object Process Methodology (OPM)": [
          "Introduction to Object Process Methodology (OPM)",
          "Diagrams & Language",
          "Methodology(ies)"
        ],
        "Managing Model Complexity": [
          "Managing Model Complexity"
        ],
        "Software tools": [
          "Software tools"
        ],
        "Conclusion": [
          "Conclusion"
        ]
      },
      "requirements": [
        "None."
      ],
      "description": "Hi guys, Joshua Sutherland here and welcome to this course on Object Process Methodology (OPM) for Model Based Systems Engineering (MBSE).\n\nLearn how engineers can logically describe the systems they are designing. We do this using Model Based Systems Engineering (MBSE).\nThe big ideas we explore are:\nSystems Engineering enables the successful realization, use and retirement of engineered systems.\nModel Based Systems Engineering (MBSE) enables us to do Systems Engineering by utilizing a consistent model of our system.\nTo make a model we need:\n1. Purpose(s) 2. Methodology(ies); 3. Language(s); 4. Tool(s)\nOPM is an example of a conceptual modeling language\nOPM describes a system with both a diagram and text simultaneously\nKey building blocks of OPM are:\nObjects, Processes & States\nWe then link these things together\nI have applied this method in with companies and individuals from Japan to Great Britain with fantastic results, and personally this is one of my favourite approaches to describe and design systems.\nWho is this course for?\nAnyone wanting to learn how engineers logically design technical products\nAnyone with an interest in Systems\nAnyone with an interest in Systems Engineering\nAnyone with an interest in Model Based Systems Engineering (MBSE)\nAnyone with an interest in OPM\nAnyone wanting to learn new languages and ways of communicating\nI am very excited to share the approach with you and aid you in your own business or personal development and really looking forward to seeing what you come up with.\nGood luck to you all on this course!",
      "target_audience": [
        "Anyone wanting to learn how engineers logically design technical products.",
        "Anyone with an interest in Systems.",
        "Anyone with an interest in Systems Engineering.",
        "Anyone with an interest in Model Based Systems Engineering (MBSE).",
        "Anyone with an interest in Object Process Methodology (OPM).",
        "Anyone wanting to learn new languages and ways of communicating."
      ]
    },
    {
      "title": "Ethereum Tutorial: Ethereum & Smart Contracts from Scratch",
      "url": "https://www.udemy.com/course/build-ethereum-from-scratch/",
      "bio": "Updated for 2024: Create your own Ethereum system, with smart contracts, a blockchain, cryptocurrency, and more!",
      "objectives": [
        "Updated for 2024: Learn how to build an Ethereum-like decentralized computing platform from an engineer with 5+ years of industry experience.",
        "How to build Ethereum from scratch.",
        "The essential elements of the Ethereum decentralized computing platform.",
        "The mechanics behind Ethereum's cryptocurrency.",
        "How to create a blockchain, Ethereum style."
      ],
      "course_content": {
        "Introduction to \"Build Ethereum from Scratch - Smart Contracts and more\"": [
          "Ethereum and Course Project Overview",
          "Lightning Smart Contract Language in 13 minutes",
          "[Required] Succeeding in this Course and Reference to a JavaScript Overview"
        ],
        "Smart Contracts - Building a Language": [
          "Overview: Smart Contracts - Building a Language guided by Ethereum Documentation",
          "[Required] Project Repository and Node.js",
          "Optional For Windows: Install the Windows Subsystem for Linux and VS Code",
          "Subtract, Multiply, and Divide",
          "Comparisons and Logic",
          "Jumps",
          "Argument Validations",
          "Jest Test the Interpreter",
          "Summary: Smart Contracts - Building a Language"
        ],
        "The Blockchain": [
          "Overview: the Blockchain",
          "Blockchain, Blocks, and the Genesis Block",
          "Util and Sort Characters",
          "Hashing Overview and Keccak Hash",
          "Mining: An Ethereum-based Implementation",
          "MineBlock - Block Target Hash",
          "MineBlock - Under Target Hash",
          "Test the mineBlock method",
          "MineBlock - Adjust Difficulty",
          "Validate Blocks",
          "Test the validateBlock method",
          "Summary: The Blockchain"
        ],
        "The Blockchain Network": [
          "Overview: the Blockchain Network",
          "Private Application and API",
          "Pub/sub - Server-to-server Communication | Overview",
          "PubNub",
          "BroadcastBlock and Peers",
          "Peer Synchronization",
          "Summary: the Blockchain Network"
        ],
        "Accounts and Transactions": [
          "Overview: Accounts and Transactions",
          "Accounts Part 1: Fields",
          "Accounts Part 2: Signing and Verifying Signatures",
          "Transactions",
          "Validate Transactions",
          "Transaction Queue and the Application Account",
          "Transact Endpoint and API Test Script",
          "Broadcast Transactions",
          "Block TransactionSeries",
          "Summary: Accounts and Transactions"
        ],
        "World State and Running Blocks of Transactions": [
          "Overview: World State and Running Blocks of Transactions",
          "Tries",
          "Tries - Bug Fix",
          "Test the Trie class and Get Copies",
          "State and the StateTrie",
          "Run Blocks and Transactions",
          "Get Balance and World State",
          "TransactionSeries Validations",
          "Test the updated Transaction Validation Methods",
          "The Transactions Trie",
          "Mining Reward",
          "Summary: World State and Running Blocks of Transactions"
        ],
        "Smart Contracts in the Decentralized Computer": [
          "Overview: Smart Contracts in the Decentralized Computer",
          "Smart Contracts Accounts in State",
          "Run the Interpreter on Smart Contract Execution",
          "Smart Contract Gas",
          "Account Storage",
          "Summary: Smart Contracts in the Decentralized Computer"
        ],
        "Optional Reference Section Including JavaScript Overview": [
          "Optional: Mega JavaScript & Node.js Overview for JS Newcomers | Part 1",
          "Optional: Mega JavaScript & Node.js Overview for JS Newcomers | Part 2"
        ],
        "Conclusion": [
          "Congratulations and Ways to Extend the Project",
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "Experience coding: familiarity with a command line and code editor.",
        "A good amount of experience in at least one language. Preferably JavaScript. This course is best for intermediate students.",
        "If you're a beginner, it would be wise to take an introduction to JavaScript course beforehand or simultaneously."
      ],
      "description": "The most requested topic for a course I've had so far is to \"build a smart contract blockchain and cryptocurrency.\" And for plenty of reasons:\nSmart contracts are the main feature behind Ethereum, which is the second most valuable cryptocurrency.\nLearning smart contracts is a natural next step after learning about blockchains. A blockchain is a decentralized ledger. A smart contract blockchain is a decentralized computer.\nA smart contract blockchain can support decentralized applications. This opens the door to a wide variety of solutions.\nBased on these points and more it would definitely be a valuable learning experience to try building a smart contract blockchain and cryptocurrency like Ethereum.\nSo it can be quite surprising to discover that existing tutorials are challenging to find. Sure, there's the Ethereum documentation. But this information is better understood when you're pretty knowledgeable about blockchains already. Likewise, other resources you find, like articles and videos, mostly focus on aspects of a completed Ethereum system. They don't take you through the process of completely building a smart contract blockchain and cryptocurrency.\nHowever, it's understandable. A complete system like Ethereum is quite complex. It uses many advanced data structures and technologies. And untangling the interaction between its many components can feel like navigating through a labyrinth.\nThis is why I made it my mission to create a \"Build Ethereum From Scratch\" tutorial that focuses on the essential elements. By the end of the tutorial, you should be able to execute smart contracts in a decentralized way.\nAnd with a few months of work, here you have the finished product! Here is the course journey:\nBuild a smart contract language and an interpreter to execute code.\nNext, create an ethereum-inspired blockchain, with its own mining implementation, and block structures.\nExtend the blockchain with a network implementation.\nIncorporate transactions and accounts. This will set up the Ethereum-like cryptocurrency, and create the concept of a decentralized computer.\nCome full circle by running smart contracts on the blockchain.\nBy the end of the course, you will have built a decentralized computer platform that resembles many of the key features of Ethereum. In addition, at the end of the course, I'll provide a list that you can use for continued development. That way, the project is truly in your hands - ready to go as far as you want to take it.\nTake this course if you want to learn how Ethereum works. Especially take this course if you've been hoping to build your own version of Ethereum. By the end, you'll have a unique item on your resume, or even the foundation for your next startup!\nAlright, let's get started coding!",
      "target_audience": [
        "Anyone who wants to build a smart-contract based system.",
        "Ethereum enthusiasts aiming to understand the platform from a code perspective.",
        "Blockchain developers who'd like to learn about the fundamentals behind Ethereum.",
        "Rising developers looking for a unique project to add to their resume.",
        "Entrepreneurs looking for the foundation for their next smart-contract based solution.",
        "Bitcoin enthusiasts wanting to learn more about the cryptocurrency landscape.",
        "Coders who want to expand their horizons by diving into blockchain and cryptocurrency concepts."
      ]
    },
    {
      "title": "The Spring-Boot Crash Course",
      "url": "https://www.udemy.com/course/the-spring-boot-crash-course/",
      "bio": "Learn how to build your first Spring-Boot REST API from scratch with a compact 1 hour Crash-Course",
      "objectives": [
        "The strong points of Spring-Boot Framework and why it's so popular in the industry",
        "How to create a Spring-Boot application (REST API) from scratch",
        "How to write the code that processes a HTTP request",
        "How to call an external HTTP service from a Spring-Boot application",
        "How to modify the deserialization process to extract only relevant data from a payload",
        "How to configure a MySQL database to receive external requests",
        "How to connect to a MySQL database from a Spring-Boot application"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Learning the basics": [
          "Why should you learn Spring-Boot?",
          "Let's create your first Spring-Boot application",
          "Exploring POST requests",
          "Implementing standard responses in Spring-Boot"
        ],
        "Spring-Boot Services & Configuration Management": [
          "What is a Service in Spring-Boot?",
          "Calling an external API from a Spring-Boot application",
          "Understanding configuration management"
        ],
        "Playing with data access in Spring-Boot": [
          "Configuring a local MySQL database with Docker",
          "How to query a MySQL database from a Spring-Boot application"
        ]
      },
      "requirements": [
        "Basic Java Knowledge",
        "Intellij IDEA Community Edition (free)",
        "Willingness to learn and curiosity :-)"
      ],
      "description": "Intro\nThis course is everything you need to get started with Spring-Boot framework in Java, which is the most popular JVM-based web framework for building microservices and backend systems, used by many big-tech companies.\nJava is a really great language and provides a number of features out of the box, but if you want to build a REST API in pure Java, it might not be so straight-forward.\nFor this reason, developers have created frameworks that allows you to build APIs fast, with best-practices in terms of code design and performance/efficiency, and Spring-Boot is such a great framework.\nWhy do you need to learn Spring-Boot Framework?\nSpring-Boot is so popular because of the following:\nIt allows you to create create production-grade applications very fast\nIt promotes a well designed code-base\nIt integrates with external systems seamlessly\nIt has a big open source community that constantly improves it\nAnd many other reasons\nHaving Spring-Boot in your skillset as a Java developer, will allow you to:\nBe more competitive in the job market\nBe more productive because you'll read and write code faster (and better) by recognising and applying well-established design patterns embedded into Spring-Boot\nBe able to tackle more technical opportunities since many open source projects use Spring-Boot\nOverall, this framework will take you a step further in your Software Engineering career and learning it as soon as possible is probably one of the best strategic moves that you can do for developing your technical expertise.\nWhat you will learn in this course\nThis course is about 1 hour long, but be aware that it is jam-packed with information. In a nutshell, in this course we're going to create a plain REST API that interacts with a MySQL database to store user data, and also with an external HTTP API, to grab some external data.\nA non-exhaustive list of things you're going to learn in this course is the following:\nWhat is Spring-Boot and how it compares to a traditional command-line Java application\nHow can you import Spring-Boot framework in an empty IntelliJ Idea project\nHow can you find the right Spring dependencies on the web\nHow can you create a REST Controller and receive some data via HTTP\nHow can you configure your REST Controller to send data back and follow best practices\nHow can you create Services in Spring-Boot\nHow to use Spring-Configuration mechanism\nWhat is Dependency Injection and how does it work\nHow can you call an external API via HTTP from your application, using a HTTP Client\nHow can you configure the Jackson deserialization to extract only the data you need\nHow can you create and configure a MySQL database using Docker\nHow can you configure a Spring-Boot application to connect and interact with the MySQL database\nHow can you use Transactions in Spring-Boot to ensure atomic operations on the database\nThis course is meant to guide you through this framework by showcasing how can you build a simple application that connects to other 2 systems, from an end-to-end perspective. It's highly practical, because this is the best way to learn any new technology, by playing with it as much as possible\nTo set the right expectations: this is not a complete Spring-Boot course, it doesn't cover all possible configurations and dependencies that Spring-Boot provides. Instead, it's a course highly focused on building an application similar to a microservice, and the main goal is to give you a taste on how Spring-Boot looks as a web framework and what is the developer experience for using it.\nPrerequisites for this course\nThis course is addressed to beginner Java Developers, Computer Science/Engineering students, existing developers that want to learn something new and of course, to anyone who wants to learn Spring-Boot.\nThe only prerequisites for this course are the following:\nIntellIJ IDEA community (free) edition\nBasic Java knowledge (classes, interfaces, generics)\nWillingness to learn :-)\nIn the last 2 lectures I'm going to use a terminal and Docker, so if you are familiar with those it will be easier to follow along, but they're not required as I'm explaining any command that I run step-by step.\nThank you for being here and let's jump in the first lecture!",
      "target_audience": [
        "Beginner/Junior Java Developers who want to learn Spring-Boot framework",
        "Computer Science/Engineering students who want to learn industry-level technologies",
        "Any developer with basic Java knowledge, who want to expand their skills by learning Spring-Boot framework"
      ]
    },
    {
      "title": "Algorithms and Data Structures in Swift 5",
      "url": "https://www.udemy.com/course/introduction-to-algorithms-in-swift/",
      "bio": "Learn about algorithms and data structures in Swift. Topics include: Big O, clean code, technical interview questions.",
      "objectives": [
        "Learn how to write elegant and efficient code from a leading expert",
        "Cut down on your development time",
        "Get the companion eBook for FREE! (sells for $28.80 on Amazon)",
        "Gain a working knowledge of algorithmic thinking",
        "Learn how to improve the performance of existing code",
        "Get ready for technical job interviews"
      ],
      "course_content": {
        "Overview": [
          "Why Should You Learn Algorithms?",
          "Is This Course for You?",
          "Prerequisites",
          "Demo Projects and Other Useful Resources",
          "Join the Official Student Group"
        ],
        "The Big O Notation": [
          "What's Big O?",
          "Common Big O Time Complexities",
          "O(1) - Constant Time Complexity",
          "Implementing the BenchTimer  Performance Measurement Tool",
          "Demo: Algorithms with Constant Time Complexity",
          "Linear Time - O(n)",
          "Quadratic Time - O(n2)",
          "Hints for O(n^k) Complexity",
          "Logarithmic Time - O(log n)",
          "Summary",
          "Big O Quizzes",
          "Big-O Source Code (Swift playground projects)"
        ],
        "Recursion": [
          "Recursion - Overview",
          "What is Recursion?",
          "How Does Recursion Work?",
          "Recursion Pitfalls",
          "How to Avoid Infinite Recursion?",
          "Recursion Quizzes",
          "Recursion Source Code (Swift playground projects)",
          "Recursive Rescue: Patch the Exit Pitfall!",
          "Dive Into The Spiral Of Fibonacci"
        ],
        "The Power of Algorithms": [
          "The Power of Algorithms - Overview",
          "Calculate Sum(N)",
          "Pair Matching Challenge",
          "Find the Equilibrium Index",
          "Summary",
          "The Power of Algorithms - Source Code (Swift playground projects)",
          "Incremental Sequence Generator"
        ],
        "Working with Generics": [
          "Generics - Overview",
          "Why Generics?",
          "Generic Types",
          "Generic Functions",
          "Generics Quizzes",
          "Generics Sample Code (Swift playground project)"
        ],
        "The Built-In Swift Collection Types": [
          "Swift Collection Types - Overview",
          "The Array",
          "Accessing the Array",
          "Modifying the Array",
          "The Set",
          "Accessing and Modifying the Set",
          "Set Operations",
          "The Hashable Protocol",
          "The Dictionary",
          "Accessing and Modifying the Dictionary",
          "Swift Collection Types Quizzes",
          "Built-in Swift Collection Types - Demos (Swift playground projects)"
        ],
        "Basic Data Structures and Their Practical Applications": [
          "Basic Data Structures - Overview",
          "The Tuple",
          "Choosing the Right Return Type: Tuple, Struct, or Array?",
          "The Queue",
          "Implementing a Generic Queue",
          "A Practical Queue Application: Print Jobs",
          "The Deque",
          "Sliding Window Maximum: First Attempt",
          "Sliding Window Maximum: A Deque-Based Solution",
          "The Stack",
          "Implementing an Array-based Stack",
          "Evaluating Arithmetic Expressions with a Stack",
          "Basic Data Structures - Demos (Swift Playground Projects)"
        ],
        "Basic Sorting": [
          "Basic Sorting - Overview",
          "Selection Sort",
          "Selection Sort Summary",
          "Insertion Sort",
          "Insertion Sort - Summary",
          "Bubble Sort",
          "Bubble Sort - Summary",
          "Basic Sorting Quizzes",
          "Basic Sorting Demos (Swift playground project)"
        ],
        "Advanced Sorting": [
          "Advanced Sorting - Overview",
          "Merge Sort",
          "Merge Sort - Summary",
          "Quicksort",
          "Quicksort - Summary",
          "Advanced Sorting Quizzes",
          "Advanced Sorting Source Code (Swift playground projects)"
        ],
        "Test Your Skills": [
          "Fizz Buzz"
        ]
      },
      "requirements": [
        "You should be comfortable with concepts like variables, methods, and classes",
        "Basic knowledge of Xcode",
        "A desire to learn"
      ],
      "description": "Are you ready to elevate your Swift programming skills? Unlock the power of algorithms and data structures to solve coding problems more efficiently with our step-by-step, example-filled course. Companion eBook included.\nThis course is perfect for beginners who want to understand how computers process data, as well as experts looking to brush up on the basics.\nHi, I'm Karoly Nyisztor, a software engineer with over 25 years of experience, and I've worked with companies like Apple, Siemens, and SAP. I've designed and built several enterprise systems and frameworks, and I hold twelve patents in the field of mobile computing. I'm excited to share my knowledge with you in my course, \"Algorithms and Data Structures in Swift 5.\"\nIn this comprehensive course, we'll cover algorithmic thinking, the Big-O notation, time complexity, recursion, generics, built-in Swift collection types, and data structures. We'll also explore various sorting algorithms and dive into code optimization techniques. I'll explain each concept using easy-to-understand examples and focus on the practical application with hands-on code examples you can reference and practice.\nTopics include:\nAlgorithmic thinking\nThe Big O notation\nConstant, linear, polynomial, and logarithmic time complexity\nUnderstanding recursion and avoiding pitfalls\nCase studies for finding faster solutions\nGenerics\nBuilt-in Swift collection types\nWhen to use a Set, an Array, or a Dictionary?\nCommon data structures and their practical applications\nImplementing selection sort, insertion sort, and bubble sort\nAdvanced sorting: quicksort and merge sort\nWith personalized support, a companion eBook, downloadable resources, and continuous updates, this course is more than just an online class.\nTestimonials:\n\"This course gives me a much deeper understanding of how to write efficient and effective Swift code. It addresses things not covered in the various other crash courses on iOS development, things not apparent at first.\"\n- Minni K. Ang\n\n\"LOVE this instructor! His explanations are always clear and accurate, and his pacing is spot-on. Fantastic!\" - Glenn\n\n\"Speed is very good for the content being taught. The size of the videos is perfect for the depth of the topic being discussed.\"\n- Nick Perkins\n\n\"Excellent clear presentation and covering the topic very well - recommended course!\"\n- Graham Wright\n\n\"Very well made and in-depth explanations. Easy to follow and a lot of visual references making it very easy to understand! Great course overall and highly recommended.\"\n- Peter West\n\n\nWith our 30-day money-back guarantee, there's no risk in giving it a try.\nSo, go ahead and click the enroll button to start your journey toward mastering algorithms and data structures in Swift.\nSee you in the first lesson!",
      "target_audience": [
        "Anyone who wants to implement better, more performant software applications",
        "Developers interested in writing clean, modern Swift code",
        "Anyone who's brand new to algorithms/data structures or needs a refresher"
      ]
    },
    {
      "title": "Event-Driven Microservices, CQRS, SAGA, Axon, Spring Boot",
      "url": "https://www.udemy.com/course/spring-boot-microservices-cqrs-saga-axon-framework/",
      "bio": "Learn to build distributed Event-driven Microservices, CQRS, Event Sourcing, SAGA and Transactions.",
      "objectives": [
        "Create Event-Driven Microservices",
        "Basics of Spring Cloud",
        "Use Axon Framework",
        "Use Eureka Discovery Service",
        "Implement CQRS Design Pattern",
        "Use Spring Cloud API Gateway",
        "Implement SAGA Design Pattern",
        "Create Event Based Messages",
        "Rollback Transactions"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Source code",
          "Microservice vs Monolithic application",
          "Microservices Architecture Overview",
          "Event-Driven Microservices",
          "Transactions in Microservices",
          "Choreography-Based Saga",
          "Orchestration-Based Saga",
          "Frameworks that we can use",
          "(CQRS)Command Query Responsibility Segregation",
          "Event Sourcing",
          "Axon Framework and Axon Server",
          "AxonIQ Console",
          "What if I have questions?"
        ],
        "Software": [
          "Introduction",
          "Download and run Docker Desktop",
          "Spring Tool Suite",
          "Download and Install Postman HTTP client"
        ],
        "Creating a Basic Microservice": [
          "Introduction",
          "Creating a new project. Products Microservice.",
          "Creating a Rest Controller class",
          "Handle HTTP POST, GET, PUT and DELETE Requests",
          "Trying how it works"
        ],
        "Eureka Discovery": [
          "Introduction",
          "Creating new project",
          "Configure project as Eureka Server",
          "Registering Microservices with Eureka",
          "Trying how it works"
        ],
        "Spring Cloud API Gateway & Load Balancing": [
          "Introduction",
          "Creating Spring Cloud API Gateway project",
          "Automatic Routing with Resource Locator",
          "Random Port Number",
          "Starting Multiple instances of Products Microservice",
          "Trying how load balancing work"
        ],
        "Axon Server - Getting Started": [
          "Introduction",
          "Download and run Axon Server as JAR application",
          "Axon Server configuration properties",
          "A complete list of Axon Server configuration properties",
          "Run Axon Server in a Docker container",
          "Running Axon Server in Docker Blog Post",
          "Start, Stop, Delete Axon Server Docker Container By ID",
          "Configure Axon Server running in Docker Container"
        ],
        "CQRS Pattern. Products Microservice.": [
          "Introduction",
          "Accept HTTP Request Body",
          "Trying how it works",
          "Adding Axon Framework Spring Boot Starter",
          "Upgrading Axon Framework to 4.7.0",
          "Creating a new Command class",
          "Creating a new CreateProductCommand object",
          "Send Command to a Command Gateway",
          "Product Aggregate - Introduction",
          "Creating ProductAggregate class",
          "Validate the CreateProductCommand",
          "Creating ProductCreatedEvent",
          "Apply and Publish the Product Created Event",
          "@EventSourcingHandler",
          "Adding Additional Dependency",
          "Fixing ForbiddenClassException",
          "Trying how it works",
          "Previewing Event in the EventStore"
        ],
        "CQRS. Persisting Event in the Products database.": [
          "Introduction",
          "Adding Spring Data JPA & H2 dependencies",
          "Configure database access in the application.properties file",
          "Creating an ProductEntity",
          "Creating ProductRepository",
          "Creating Products Events Handler/Projection",
          "Implementing @EventHandler method",
          "Trying how it works",
          "Preview Product record in a database"
        ],
        "CQRS. Querying Data": [
          "Introduction",
          "Creating Rest Controller",
          "Refactor Command API Rest Controller",
          "Get Products web service endpoint",
          "Querying the QueryGateway",
          "Creating ProductsQueryHandler",
          "Implementing the findProducts() method",
          "Trying how it works"
        ],
        "Validating Request Body. Bean Validation.": [
          "Introduction to Bean Validation",
          "Bean validation. Enable Bean Validation.",
          "Bean validation. Validating Request Body.",
          "Hibernate Validator Documentation",
          "Trying how the Request Body Validation works."
        ]
      },
      "requirements": [
        "Java"
      ],
      "description": "In this video course, you will learn how to build business logic that spans several distributed Spring Boot Microservices.\nThis course is designed for beginners and we will start from the basics of Microservices, Spring Boot, and Spring Cloud.\nYou will learn how to create your very first Spring Boot Microservice and how to handle HTTP requests. You will then learn how to run multiple instances of your Microservice behind an API Gateway and how to make them discoverable. This will help you scale up your microservice up and down as needed.\nThis video course will also cover transactions across multiple distributed Microservices and how to roll back changes if an error took place. Transactions is an advanced topic and to be able to build transactional microservices this video course will teach you a few more design patterns. Starting from the very beginning, you will learn how to develop event-based Microservices that are absolutely location transparent.\nYou will learn how to use a modern and very popular framework for building event-based Microservices called Axon. Axon Framework is based on design principles such as CQRS(Command Query Responsibility Segregation) and DDD(Domain Driven Design). You will learn how to build event-based Microservices using Axon Framework and how to use CQRS and Event Sourcing in your Microservices.\nFinally, you will learn about the Saga design pattern and how to group multiple operations into a single transaction. This will help you build business logic that spans multiple distributed Microservices and roll back changes if one operation fails.\nAll from the very beginning, to make these advanced topics easier.",
      "target_audience": [
        "Beginner Java developers interested in learning about Microservices"
      ]
    },
    {
      "title": "SoftwareAG webMethods 10.x Development Practice Demo Videos",
      "url": "https://www.udemy.com/course/webmethodsdemo/",
      "bio": "Do It Yourself (DIY)-webMethods v10.x- 36+ lectures/demo | 5.5+ hours Tutorials | ESB | Integration | JDBC | JMS | SFTP",
      "objectives": [
        "webMethods JDBC Adapter Services (select, insert, update, batchinsert, custom sql template)",
        "Database to XML transformation",
        "Flatfile to XML Conversion",
        "Oracle installation in order to connect/work with database related exercise",
        "webMethods Integration Server Admin Walk through",
        "webMethods Deployer",
        "webMethods Designer",
        "How to Start/Stop Integration Server, Universal Messaging (startup),",
        "How to create Cache Manager to store the key and Values.",
        "How to send Messages to JMS Queue and Subscribe Message from JMS Queue",
        "How to send Messages to JMS Topic and Subscribe Message from JMS Topic",
        "How to send files to SFTP server",
        "Connect Salesforce through SOAP Based webservice | WSDL | Login and Query",
        "How to create Document type using JSON sample",
        "Sample Mapping Specification Document",
        "webMethods vs webMethods io vs cloudstreams",
        "Pickup the files from SFTP server",
        "How to create File polling port - Demo",
        "Practice alongside several hands-on"
      ],
      "course_content": {
        "About Myself and also about course": [
          "About Me",
          "About the Course"
        ],
        "Database Related Integration using JDBC Adapter": [
          "Download and Install Oracle Database, Create Tables",
          "How to create JDBC Connection and Select, Insert Adapter service",
          "How to create JDBC Update Adapter Service Demo",
          "How to create JDBC Batch Insert SQL Adapter Service Demo",
          "How to create JDBC Delete Adapter Service Demo",
          "How to transform / map database Records to XML format",
          "How to create Custom SQL adapter service"
        ],
        "webMethods Designer Exercises": [
          "How to create File polling port - Demo",
          "What is Global Variables and Use in flow service",
          "MAP Service Demo",
          "Pickup the files from SFTP server",
          "Flat file to XML structure Transformation",
          "Store and Retrieve Keys from Cache - Caching Demo",
          "How to Send Message to JMS Queue and Subscribe it from JMS Queue",
          "How to send Message to JMS Topic and Subscribe it from JMS Topic",
          "XML to HTML Transformation using XSLT",
          "How to send files to SFTP server",
          "How to Invoke/Call HTTP/REST based web service",
          "How to convert XML To JSON String",
          "How to send Email using SMTP built in service",
          "How to setup the Proxy server in Integration Server for outbound connection",
          "How to configure ACL in flow service",
          "How to configure Short URL for Integration service",
          "Connect Salesforce through SOAP Based webservice | WSDL | Login and Query",
          "Error handling block Try Catch Finally in Flow service",
          "Brand-new look for the 10.7 webMethods IS administration and monitoring console",
          "How to create Document type using JSON sample"
        ],
        "Integration Server": [
          "Create Users Demo, Change Password, Login with User",
          "Shutdown and Start Integration Server",
          "Integration Server Admin- Walk through"
        ],
        "Universal Messaging": [
          "Start the Universal Messaging"
        ],
        "Deployer": [
          "How to create deployer project to deploy components"
        ],
        "Frequently Asked Questions / Doubts": [
          "webMethods vs webMethods.io vs cloudstreams",
          "Sample Mapping Specification Document",
          "Other useful material links to learn webMethods free",
          "Let's Check our Knowledge"
        ]
      },
      "requirements": [
        "Basic understanding of webMethods",
        "Completion of SoftwareAG webMethods Integration (OnPremise) for Beginners course in udemy"
      ],
      "description": "This course covers the following topics in the latest webMethods 10.x version. Whether you're working with any on-premise version of webMethods (7.x, 8.x, 9.x, or 10.x), the content of this course is universally applicable, allowing you to follow the same procedures across all versions.\n\n\nAfter watching each demo-based video, practice the procedures on your system to enhance your understanding and accelerate your learning of webMethods.\n\n\nSection#1 (Course details)\nAbout the Course\nSection#2 (Database Related Integration using JDBC adapter service)\nHow to Download and Install Oracle database for database related exercise/demo\nHow to create JDBC Connections\nHow to create Select JDBC Adapter Service\nHow to create Insert JDBC Adapter Service\nHow to create Update JDBC Adapter Service\nHow to create Delete JDBC Adapter Service\nHow to create Batch Insert SQL Adapter Service\nHow to convert database records to XML format\nHow to create custom SQL adapter service.\nSection#3 (webMethods Designer Exercises)\nHow to create file polling port and process the file.\nHow to create and use Global variables in the flow service.\nHow to create map service\nHow to process the file from SFTP Location, Configure SFTP Alias, Create SFTP User Alias\nHow to process Flat file and convert to XML structure\nHow to store and retrieve the keys from Caching. Create Cache Manager, Create Cache\nHow to send Messages to JMS Queue and Subscribe message from JMS Queue. Create Connection Factory, Create JMS Queue in Enterprise Manager.\nHow to send Messages to JMS Topic and Subscribe message from JMS Topic.\nXML to HTML transformation\nHow to send files to SFTP server\nHow to invoke/call http REST based webservice\nHow to convert XML to JSON string\nHow to send email using built in service.\nHow to setup the Proxy server in Integration Server for outbound connection\nHow to configure ACL in flow service\nHow to configure Short URL for Integration service\nConnect Salesforce through SOAP Based webservice | WSDL | Login and Query operations\nWhat is finally block in Error handling in Flow service?\nBrand-new look for the 10.7 webMethods IS administration and monitoring console\nHow to create Document type using JSON sample\nSection#4 (webMethods Integration Server)\nHow to create user in Integration Server\nHow to stop and start Integration Server for Windows\nIntegration Server Admin pages walkthrough\nSection#5 (webMethods Universal Messaging)\nHow to start the Universal Messaging server\nSection#6 (webMethods Deployer)\nHow to deploy the Components using webMethods Deployer\nSection#7 (Frequently Asked Questions / Doubts)\nwebMethods vs webMethods io vs cloud streams\nSample Mapping Specification Document\nLet's Check our Knowledge\n\n\nEnroll in this course to delve into webMethods development. Happy learning!\n\n\nAfter watching each video, try to execute the same steps on your laptop for a better understanding.\n\n\nThanks. Arul. TechLightning.",
      "target_audience": [
        "Who wants to learn SoftwareAG webMethods Development"
      ]
    },
    {
      "title": "Mastering 5G PHY: Complete Development Training",
      "url": "https://www.udemy.com/course/5g-phy-training/",
      "bio": "5G, Physical Layer, 3GPP, Training, L1",
      "objectives": [
        "OFDM & basics of wireless communication",
        "Understanding of essential and advance modules in 5G Physical Layer",
        "Understanding of Physical Layer 3GPP specification",
        "SSBurst: PSS, SSS and PBCH",
        "PDCCH: Physical Downlink Control Channel understanding",
        "PDSCH: Physical Downlink Shared Channel understanding",
        "CSI-RS: Channel State Information Reference Signal understanding",
        "DMRS: Demodulation Reference Signal for DL and UL channels",
        "PRACH: Physical Random Access Channel understanding",
        "PUCCH: Physical Uplink control channels (F0, F1, F2, F3, F4)",
        "PUSCH: Physical Uplink Shared Channel understanding",
        "SRS: Sounding Reference Signal understanding",
        "PTRS: Phase Tracking Reference Signal understanding",
        "HARQ: Hybrid Automatic Repeat Request",
        "MIMO: Multiple Input and Multiple Output Antenna systems"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "5G: What and Why?",
          "3GPP, RAN Meetings and Technical Specifications",
          "5G Physical Layer Design",
          "Course Overview & How to Navigate It",
          "Insights from ITU-R Report on Future Technology Trends for 6G"
        ],
        "Essential modules of 5G physical layer": [
          "CRC: Cyclic Redundancy Check",
          "CRC Attachment and Validation",
          "Channel Coding in 5G",
          "Rate matching (puncturing, shortening and repetition)",
          "Polar rate matching",
          "LDPC rate matching",
          "LBRM: Limited Buffer Rate Matching",
          "RV: Redundancy Version and bit selection",
          "Bit interleaving in LDPC rate matching",
          "m-sequence & PN sequence",
          "Zad-off chu sequence",
          "Scrambling",
          "Modulation techniques",
          "OFDM modulation",
          "Cyclic Prefix",
          "Numerology",
          "Radio Frames, Slots, Subframes and Symbols",
          "Resource grid, Point A & Common Resource Blocks",
          "Bandwidth Part (BWP): Concept and Motivation",
          "Antennas and Beamforming",
          "Introduction to DMRS, Channel Estimation & Equalization"
        ],
        "SSBurst": [
          "SSBurst: Introduction",
          "SSBurst: PSS",
          "SSBurst: SSS",
          "SSBurst: PBCH and PBCH DMRS",
          "SSBurst: Time and Frequency locations"
        ],
        "PDCCH": [
          "PDCCH: Transmitter Design and DMRS",
          "PDCCH: DCIs",
          "PDCCH: Coreset",
          "PDCCH: Search Space",
          "PDCCH: Receiver and Blind Decoding"
        ],
        "PDSCH & PUSCH": [
          "DMRS for PDSCH and PUSCH",
          "PDSCH/PUSCH: Physical layer processing",
          "PDSCH/PUSCH: Time and frequency domain resource allocation part 01",
          "PDSCH/PUSCH: Time and frequency domain resource allocation part 02",
          "PDSCH/PUSCH: MCS tables",
          "PDSCH/PUSCH: Transport Block(TB) size calculations",
          "MIMO: Basics of Multiple Antenna Systems",
          "PDSCH: Precoding for MIMO",
          "PDSCH/PUSCH: UE Multiplexing and Multi UE/TTI",
          "SU-MIMO and MU-MIMO",
          "PUSCH: DFT-s-OFDM | Transform Precoding",
          "PUSCH: MIMO, Codebook, Beamforming and more",
          "PUSCH: Non codebook based MIMO"
        ],
        "PRACH": [
          "PRACH: What and Why?",
          "PRACH: Signal Generation and Mapping",
          "PRACH: Cyclic Shift, Restricted Sets, and Timing Offset",
          "PRACH: Long formats",
          "PRACH: Short formats",
          "PRACH: More on Resource Allocation",
          "PRACH: Receiver Processing"
        ],
        "PUCCH": [
          "PUCCH: Introduction to Physical Uplink Control Channel",
          "PUCCH Format 0: Signal Generation and Resource Mapping",
          "PUCCH Format 0: UE Multiplexing and Receiver",
          "PUCCH Format 1: Signal Generation and Resource Mapping",
          "PUCCH Format 1: DMRS",
          "PUCCH Format 1: UE Multiplexing and Receiver",
          "PUCCH Format 2/3/4: Bit Processing, CSI Part 1 and Part 2",
          "PUCCH Format 2: DMRS",
          "PUCCH Format 2: Signal Generation, Receiver and More",
          "PUCCH Format 3/4: DMRS",
          "PUCCH Format 3: Signal Generation, Receiver and More",
          "PUCCH Format 4: Signal Generation, UE Multiplexing and Receiver"
        ],
        "CSI-RS": [
          "CSI-RS: Channel State Information Reference Signal",
          "CSI-RS: CDM Concept",
          "CSI-RS: Sequence Generation and Mapping",
          "CSI-RS: Sequence Generation and Mapping with Example",
          "CSI-IM: CSI for Interference Measurement",
          "CSI-RS: CQI & RI",
          "CSI-RS: PMI"
        ],
        "SRS": [
          "SRS: Introduction to Sounding Reference Signal",
          "SRS: Sequence Generation",
          "SRS: Resource Mapping",
          "SRS: Receiver Processing, TDD Reciprocity and Antenna Switching"
        ],
        "PTRS": [
          "Phase Noise: What and Why?",
          "PTRS: Signal Generation and Mapping [PDSCH & PUSCH]",
          "PTRS: Signal Generation and Mapping [PUSCH Transform Precoding]",
          "PTRS: Receiver Design"
        ]
      },
      "requirements": [
        "A background in electrical engineering, computer science, or a related field is recommended. While not mandatory, having relevant educational or professional experience can aid in comprehending complex concepts."
      ],
      "description": "Become a Physical Layer Expert with 5G PHY Development Training Program\nDive into the cutting-edge world of 5G technology with our comprehensive training on the 5G Physical Layer (PHY). Designed for beginners and experienced professionals, this training program will guide you through the intricacies of 5G PHY, from foundational concepts to advanced techniques.\nWhat You'll Learn:\n3GPP Standards: Understand the crucial role of the 3rd Generation Partnership Project (3GPP) in shaping 5G technology and how its standards influence network architecture and performance.\nBasic Modules of the Physical Layer: Explore the core components of 5G PHY, including modulation, coding, signal processing techniques, PN sequence, ZC sequence, beamforming, OFDM, Cyclic Prefix, and antennas that are part of the physical layer channels and signals.\nSSBurst (Synchronization Signal Burst): Learn about synchronization signal bursts and their significance in 5G networks for facilitating initial access and mobility management.\nPDCCH (Physical Downlink Control Channel): Gain insights into the PDCCH transmitter and receiver chains, CORESET, search space, blind decoding, and DCIs.\nPDSCH (Physical Downlink Shared Channel): Master the workings of the PDSCH transmitter and receiver chains, MCS, transport blocks, MIMO (MU-MIMO & SU-MIMO), Precoding, and UE multiplexing.\nCSI-RS (Channel State Information Reference Signal): Understand how CSI-RS aids in channel estimation and optimization for enhanced data throughput and network efficiency. Additionally, understand the CDM group concepts, CSI-IM, ZP, and NZP CSI-RS.\nDMRS (Demodulation Reference Signal): Explore the DMRS and its function in improving the accuracy of data demodulation and overall signal quality.\nPUCCH (Physical Uplink Control Channel): Delve into the various formats of PUCCH (Format 0 to Format 4) and how they support uplink control information transmission, how the UE multiplexing happens for each format and how the receiver can be designed.\nPRACH (Physical Random Access Channel): Discover the PRACH, its short and long formats, and its role in facilitating random access procedures and initial connection setups in 5G networks.\nPUSCH (Physical Uplink Shared Channel): Learn about the workings of the PUSCH transmitter and receiver chains, resource allocation, MCS, transport blocks, Transform Precoding, and MIMO.\nSRS (Sounding Reference Signal): Understand the purpose of SRS in uplink channel sounding and its impact on beamforming, UL MIMO, and DL MIMO.\nPTRS (Phase Tracking Reference Signal): Explore what phase noise is, the role of PTRS in phase noise compensation, and its effect on maintaining signal integrity.\nHARQ (Hybrid Automatic Repeat reQuest): Grasp the concepts of HARQ for error correction and how it enhances data reliability and throughput.\nAdditional Topics: Expand your knowledge with bonus content like RSRP, RSRQ, ARFCN, GSCN, PAPR, TDD frame structure, throughput calculations in 5G, and more.",
      "target_audience": [
        "3G/4G/5G Engineers working in testing field and wants to be developer",
        "4G/5G Engineer working in L2/MAC field and wants to be MAC expert",
        "4G/5G Physical Layer Engineer who wants to build in depth understanding",
        "4G/5G Radio Network Optimization Engineers",
        "Graduating students who are looking for jobs in 4G/5G/6G field",
        "Freshers who wants to switch their jobs to core 4G/5G/6G field"
      ]
    },
    {
      "title": "Intermediate Level C++",
      "url": "https://www.udemy.com/course/intermediate-level-c/",
      "bio": "Gain knowledge and build your understanding about some of the key concepts of Intermediate C++.",
      "objectives": [
        "Intermediate Level C++"
      ],
      "course_content": {
        "Pointers": [
          "Pointers",
          "Pointers continued"
        ],
        "Linked Lists and Dynamic Arrays": [
          "Linked List",
          "Dynamic Array"
        ],
        "Stack Implementation": [
          "Stack using Linked List",
          "Stack using Dynamic Array"
        ],
        "Miscellaneous Topics": [
          "'Static' Keyword",
          "Inheritance",
          "Function Overloading and Overriding"
        ]
      },
      "requirements": [
        "Basic understanding of C++ Programming."
      ],
      "description": "This course is targeted towards the students of university degree programs of Computer Science, who are either enrolled, or about to enroll in their second course in C++ Programming. In this course, you will learn about the use of Pointers in implementing basic data structures and then using that understanding to implement even more advanced data structures. You will learn how to develop traversing algorithms, File I/O, Object Oriented Programming and more, all in a course of about 1.5 hours.",
      "target_audience": [
        "Students who are enrolled in the second course on C++ Programming at a university."
      ]
    },
    {
      "title": "AWS CDK for professionals (Python and TypeScript)",
      "url": "https://www.udemy.com/course/aws-cdk-for-professionals/",
      "bio": "Write Infrastructure as Code with Python, TypeScript or other languages. Use AWS CDK and CloudFormation like a pro!",
      "objectives": [
        "AWS CDK in a proffesional manner",
        "Write Infrastructure as Code with Python or TypeScript",
        "AWS CloudFormation - beginner and intermediate topics",
        "DevOps for AWS with CDK and GitHub Actions",
        "Build Serverless apps with ApiGateway, DynamoDb and Lambda",
        "Configure serverless apps with CDK",
        "CDK tools, introduction and configuration for Python",
        "CDK tools, introduction and configuration for TypeScript",
        "CDK testing with Pytest or Jest",
        "Handle different AWS CDK construct levels(L1, L2, L3)",
        "CDK best practices",
        "Web project deployment with AWS CLoudFront and CDK"
      ],
      "course_content": {
        "Introduction": [
          "How to take this course",
          "Tools we will need",
          "IAM user for the AWS CLI"
        ],
        "CDK and CloudFormation intro": [
          "Section intro",
          "AWS CloudFormation",
          "CDK intro",
          "Code examples",
          "CDK project explore",
          "CDK environment",
          "Understanding CDK code",
          "[Py] construct example",
          "[Ts] construct example",
          "CDK Constructs overview",
          "Cdk outputs and mental model",
          "Cdk Commands",
          "CDK destroy",
          "☑️ Section quiz"
        ],
        "CDK intermediate topics": [
          "Section intro",
          "CDK IDs",
          "CloudFormation intrinsic functions",
          "[Py] intrinsic functions practice",
          "[Ts] intrinsic functions practice",
          "Handling multipe stacks",
          "[Py] cross stack references",
          "[Ts] cross stack references",
          "☑️ Section quiz"
        ],
        "Halfway discussion": [
          "Halfway discussion"
        ],
        "Practice: Serverless Rest API with CDK": [
          "Section intro",
          "AWS Lambda and CDK",
          "Serverless API architecture",
          "[Py] ApiGateway and lambda",
          "[Ts] ApiGateway and lambda",
          "DynamoDb and SDK calls",
          "[Py] DynamoDB queries",
          "[Ts] DynamoDB queries",
          "API Gateway and CORS"
        ],
        "Practice: Monitoring with CloudWatch": [
          "Section intro",
          "Services overview",
          "[Py] webhook lambda",
          "[Ts] webhook lambda",
          "CloudWatch metrics presentation",
          "CloudWatch alarms",
          "[Py] CDK metric alarms",
          "[Ts] CDK metric alarms",
          "Testing the alarm",
          "Real resource alarm",
          "Further reading"
        ],
        "CICD and web deployment": [
          "Section intro",
          "Services Overview",
          "[Py] Bucket hosting and CloudFront",
          "[Ts] Bucket hosting and CloudFront",
          "CloudFormation custom resources",
          "GitHub repo setup",
          "IAM user for GitHub actions",
          "[Py + Ts] GitHub Actions",
          "Further reading"
        ],
        "CDK testing": [
          "Section intro",
          "[Py] project init and test explore",
          "[PY] first test",
          "[PY] test matchers",
          "[PY] test captors",
          "[PY] snapshot testing",
          "[TS] project init and test explore",
          "[TS] first test",
          "[TS] test matchers",
          "[TS] test captors",
          "[TS] snapshot testing"
        ],
        "Other CDK topics": [
          "Section intro",
          "[Py] CDK tags",
          "[Ts] CDK tags",
          "CDK aspects",
          "[Py] aspects example",
          "[Ts] aspects example",
          "CDK patterns libraries"
        ],
        "Ending section": [
          "Thank you!",
          "Bonus"
        ]
      },
      "requirements": [
        "AWS Account with Administrator access",
        "AWS Basics",
        "Basic programming skills in Python, Typescript or another language"
      ],
      "description": "This course is designed to teach how to use AWS CDK as a professional. You can start to migrate your cloud infrastructure to CDK right after course completion.\nThe course contains code examples for Python and TypeScript, but you can enroll even if you plan to use CDK with another language, singe most topics are presented at an abstract level and you can easily apply the course material for your preferred programming language, maybe Java, C# or Go.\nMain course topics:\nTools required for CDK: AWS account, IAM user for console access, AWS CLI configuration\nCDK introduction:\nAWS CloudFormation intro and intermediate topics\nCDK console commands like init, synth, deploy, destroy, doctor\nExploring the generated project with CDK init\nUse Python to write infrastructure as code\nUse Typescript to write infrastructure as code\nUnderstand the different level of CDK constructs - L1, L2, L3\nThe mental model behind CDK - with CloudFormation intrinsic functions\nCDK intermediate topics:\nCloudFormation and CDK ids\nIntrinsic functions practice with Python and Typescript\nHow to handle multiple CloudFormation stacks\nPython and Typescript cross stack references\nPractice session: Serverless API with ApiGateway, Lambda and DynamoDb:\nConfigure the serverless app infrastructure\nConfigure aws Lambda for Python and Typescript\nWrite DynamoDB queries with boto3 for Python\nWrite DynamoDB queries with aws-sdk for typescript\nSolve the CORS issue for APIs accessed by browsers\nPractice session: CloudWatch metrics and Alarms\nLearn AWS cloud watch features like metrics, alarms and logs\nConfigure and webhook lambda with Python or TypeScript\nWrite Infrastructure as Code for the alarm metrics with CDK\nPractice session: CICD and web deployment\nUse CDK to configure web deployment with AWS Cloud Front and s3\nImplement CICD with GitHub actions\nConfigure CICD for Python and Typescript\nConfigure an IAM user for GitHub (not Administrator)\nCDK testing:\nWrite tests for infrastructure as code and run them with Pytest or Jest\nLearn about fine grained assertions, matchers, captors and snapshot testing\nAnalyze the Cloud Formation outputs and generated templates in order to understand the tests\nUse best practices when testing infrastructure as code\nOther CDK topics: tags, aspects, patterns.\n\n\nWhy this course stands out from other Udemy courses:\nBeyond the basics - after finish, you can directly use this knowledge into production code\nPractical knowledge - presentations are kept to a minimum, we focus on what is really important\nLogical and flexible structure - take the course at your own pace\nFast paced, concise, most typing cut out - focus on explanations - respect for your time\nCode changes in each lecture on Git with code diffs\nBig font, dark background, full HD content, this way it is readable even on a small screen or even tablet.\nLifetime access\nCertificate of completion to present to your current or prospective employer\nQ&A active instructor\nGo beyond the theory and learn from an active instructor, aligned with today's programming demands!",
      "target_audience": [
        "Developers who want to write infrastructure as code with CDK",
        "Anywane who wants to learn AWS in a fun and dynamic way, not from the console, but with CODE"
      ]
    },
    {
      "title": "MVVM in WPF Survival Guide From A to Z",
      "url": "https://www.udemy.com/course/mvvm-in-wpf-survival-guide-from-a-to-z/",
      "bio": "Learn how to create a maintainable Windows application applying MVVM to WPF. Introduction to Caliburn.Micro.",
      "objectives": [
        "Logically and physically structuring WPF applications according to MVVM pattern",
        "Apply either View-First or ViewModel-First approach",
        "Set up Design-Time Data",
        "Build a communication bridge between Views and ViewModels",
        "Correctly apply a static message bus",
        "Organize navigation",
        "Validate Models",
        "Build your own MVVM framework"
      ],
      "course_content": {
        "Introduction to MVVM": [
          "How to Ask Questions",
          "Join .NET Community of Students",
          "Introduction",
          "Applications Maintaining",
          "Why MVVM?",
          "MVVM in a Nutshell",
          "Services in MVVM",
          "Educational Application Overview",
          "Problems of Monolithic Design",
          "Downsides of MVVM",
          "Conclusion"
        ],
        "Connecting Views and ViewModels": [
          "Outline",
          "Naming Conventions",
          "Preparing the Solution",
          "View-First VS ViewModel-First",
          "View-First Intro",
          "Straightforward View-First Implementation",
          "View-First via ViewModel-Locator. AutoWiring.",
          "Dependency Injection and Inversion of Control",
          "Bootstrapper and IoC. Intro",
          "Bootstrapper and IoC. Demo",
          "Design-Time Data. Intro",
          "Design-Time Data. Demo: Separate ViewModels and Mixing In.",
          "Design-Time Data. Demo: Avoiding Duplication.",
          "View-First via ViewModel-Locator. Locator as a Container.",
          "ViewModel-First. Intro",
          "ViewModel-First. Demo",
          "Conclusion"
        ],
        "Communicating Views and ViewModels": [
          "Outline",
          "Commands in WPF and MVVM",
          "RelayCommand. Intro",
          "RelayCommand. Demo",
          "Behaviors. Intro",
          "Attached Behaviors",
          "Blend Behaviors",
          "MessageBus. Intro",
          "MessageBus. Demo",
          "Conclusion"
        ],
        "Navigation and Other Services": [
          "Outline",
          "Locating MVVM Components",
          "UI-Composition",
          "Navigation without Parameters",
          "Navigation with Parameters",
          "Homework: Navigation without MessageBus",
          "Dialogs. Intro",
          "Dialogs API Demo",
          "Applying Dialogs API",
          "Making INotifyPropertyChanged Less Painful",
          "Conclusion"
        ],
        "Models and Validation": [
          "Outline",
          "Models Wrapping",
          "Stateful ViewModel VS Stateless ViewModel",
          "Validation. Intro",
          "Validation. Demo 1.",
          "Validation. Demo 2.",
          "Homework: Apply Validation for managing the state of UI",
          "Conclusion"
        ],
        "MVVM Frameworks": [
          "Outline",
          "MVVM Frameworks",
          "Prism and MVVM-Light",
          "Caliburn.Micro. Intro",
          "Caliburn.Micro. Demo",
          "Conclusion"
        ],
        "Wrap Up": [
          "Final Words",
          "Test 1",
          "Test 2"
        ],
        "Appendix A. Unit Testing.": [
          "Unit Tests for ViewModels"
        ],
        "Appendix B: Implementing a Real-World Application": [
          "Outline",
          "\"True or False\" Game",
          "Constructing MainWindow.xaml",
          "Implementing Logic of MainWindow",
          "Constructing GameWindow.xaml",
          "Implementing Logic of GameWindow",
          "Problems of Monolithic Design",
          "Preparing MVVM-based Application",
          "Bootstrapping with Caliburn.Micro and Castle.Windsor",
          "Bringing Models and Services",
          "Implementing the Remaining Part"
        ],
        "Appendix C1: Dependency Inversion Principle.": [
          "Outline",
          "DIP Definition",
          "Dependencies",
          "Volatile and Stable Dependencies",
          "Definitions of IoC and DI",
          "DIP Violation Demo",
          "Refactoring to a Better Design Applying DI",
          "DI Techniques",
          "Architectural Implications",
          "Common Smells of DIP Violation",
          "Conclusion"
        ]
      },
      "requirements": [
        "You should already have a decent C# and a little bit of WPF experience."
      ],
      "description": "MVVM (stands for Model-View-ViewModel) is a well-known architectural pattern in the world of WPF. Most enterprise level WPF applications are MVVM-based.\nLearn deeply the concepts lying behind the MVVM pattern in order to understand what MVVM is in essence and how to pragmatically apply it to a WPF application. This is a great MVVM tutorial for beginners (beginners in MVVM, don't forget to look at prerequisites)!\nTeaching Approach\nNo fluff, no ranting, no beating the air. I respect your time. The course material is succinct, yet comprehensive. All important concepts are covered. Particularly important topics are covered in-depth. Don't forget that this course has English subtitles, so if you don't understand my accent, feel free to turn them on.\nTake this course and you will be satisfied.\nBuild a strong foundation in applying MVVM with this course\nIn the case you’re just familiar with the WPF framework, learning this course will give you a level-up since you’ll be capable of developing professional WPF applications. Applying MVVM intelligently is a “must have” skill for WPF developers.\nIf you are an experienced WPF developer, you might be interested in how MVVM frameworks may work under the hood. Throughout the course, we will be building a small MVVM framework similar to Caliburn.Micro.\nContent and Overview\nThis course is primarily aimed at intermediate developers. Experts may also find interesting MVVM tricks provided in this course. If you are a beginner, be sure you’re ready to take this course, since it requires from you a solid C#-background and acquaintance with WPF.\nThis course provides solid theoretical base reinforced by tons of practical material. This course is very practical (except the very first introductory module).\n“MVVM in WPF” is a very wide topic and it’s hardly possible to cover all the related challenges arising while applying MVVM. That’s why this course includes the most important topics understanding of which is a key for successful development. We will sacrifice some topics which may be interesting for students, but which are hardly connected with MVVM directly. What I’m talking about is, for example, the problem of setting up a full-fledged data access layer. Such topics are omitted.\nThe most beneficial aspect of this course is that it gives you the deep understanding of the MVVM pattern. For example, you’ll see how to pass parameters to ViewModels through constructors, without using a static message bus, or passing parameters by explicitly setting properties of a ViewModel.\nIn short, the course covers the following topics:\nMVVM background: what is MVVM, why to use it, when to use MVVM etc.\nConnecting Views and ViewModels: View-First and ViewModel-First approaches\nDesign-Time data support\nConfiguring and using an IoC-container (by the example of Castle.Windsor\nCommunication channel between Views and ViewModels: commands, attached and blend behaviors, static message bus (EventAggregator)\nNavigation: hierarchical UI composition, how to open dialogs,  including modal dialogs, navigating to parameterized ViewModels (pass  parameters into their constructors)\nModels and validation\nMVVM toolkits: Caliburn.Micro more closely\nUnit-Testing of ViewModels\nIn the end, we will recap what you have learned and you will try to understand where you have to go further with the intention to master your skills. Here we will have a discussion of different paths you can go on.\n------------------------------------------------------------\nKeywords related to the course:\nMVVM in WPF\nMVVM tutorial\nMVVM pattern\nModel-View-ViewModel MVVM tutorial\nCaliburn.Micro\nView-First\nViewModel-First",
      "target_audience": [
        "Intermediate developers who want to learn MVVM",
        "Experts who applied MVVM, but lack the deep understanding of it",
        "It is not for beginners with the lack of C# experience or no WPF experience"
      ]
    },
    {
      "title": "Algorithms Data Structures in Java #1 (+INTERVIEW QUESTIONS)",
      "url": "https://www.udemy.com/course/algorithms-and-data-structures/",
      "bio": "Basic Algorithms and Data Structures: AVL tree, Binary Search Trees, Arrays, B Trees, Linked Lists, Stacks and HashMaps",
      "objectives": [
        "grasp the fundamentals of algorithms and data structures",
        "detect non-optimal code snippets",
        "learn about arrays and linked lists",
        "learn about stacks and queues",
        "learn about binary search trees",
        "learn about balanced binary search trees such as AVL trees or red-black trees",
        "learn about priority queues and heaps",
        "learn about B-trees and external memory",
        "learn about hashing and hash tables"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Course exercises and solutions"
        ],
        "Data Structures Overview": [
          "Why do we need data structures?",
          "Data structures and abstract data types",
          "Optional: how to measure the running time of algorithms?",
          "Data Structures and Abstract Data Types Quiz"
        ],
        "Arrays": [
          "What are array data structures?",
          "Arrays introduction - operations",
          "Implementing arrays",
          "ArrayList in Java",
          "Arrays Quiz"
        ],
        "Interview Questions (Arrays)": [
          "Reversing an array in-place exercise",
          "Reversing an array in-place solution",
          "Anagram problem exercise",
          "Anagram problem solution",
          "Palindrome problem exercise",
          "Palindrome problem solution",
          "Integer reversion exercise",
          "Integer reversion problem solution"
        ],
        "Linked Lists": [
          "What are linked lists?",
          "Linked list theory - operations",
          "Pros and cons of linked lists",
          "Linked lists in Java !!!",
          "Linked list implementation I",
          "Linked list implementation II",
          "Linked list implementation III",
          "Linked list implementation IV",
          "Comparing linked lists and arrays",
          "Practical (real-world) applications of linked lists",
          "Linked Lists Quiz"
        ],
        "Doubly Linked Lists": [
          "What are doubly linked lists?",
          "Doubly linked list implementation I",
          "Doubly linked list implementation II",
          "Doubly linked list implementation III",
          "Doubly linked list implementation IV",
          "LinkedLists in Java",
          "Running time comparison: linked lists and arrays",
          "Doubly Linked Lists Quiz"
        ],
        "Interview Questions (Linked List)": [
          "Finding the middle node in a linked list exercise",
          "Finding the middle node in a linked list solution",
          "Reverse a linked list in-place exercise",
          "Reverse a linked list in-place solution"
        ],
        "Stacks": [
          "What are stacks?",
          "Stacks in memory management (stacks and heaps )",
          "Stack memory visualization",
          "Stack implementation with linked list",
          "Stack implementation with arrays",
          "Stacks in Java",
          "Practical (real-world) applications of stacks",
          "Stacks Quiz"
        ],
        "Queues": [
          "What are queues?",
          "Queue implementation with linked list",
          "Queues in Java",
          "Queues Quiz"
        ],
        "Interview Questions (Stacks and Queues)": [
          "Max in a stack problem overview",
          "Max in a stack problem solution",
          "Queue with stacks overview",
          "Queue with stacks solution",
          "Queue with stacks solution - recursion"
        ]
      },
      "requirements": [
        "Basic Java (loops and some OOP)"
      ],
      "description": "This course is about data structures and algorithms. We are going to implement the problems in Java. The course takes approximately 20 hours to complete. It is highly recommended to type out these data structures several times on your own in order to get a good grasp of it.\nSection 1:\ndata structures and abstract data types\nSection 2 - Arrays\nwhat are arrays\nwhat is random access and how to indexes\nSection 3 - Linked Lists\nlinked lists and doubly linked lists\nlinked list related interview questions\nSection 2 - Stacks and Queues:\nwhat are stacks and queues\nheap memory and stack memory\nvisualizing stack memory\nSection 3 - Binary Search Trees (BSTs):\nwhat are tree data structures?\nhow to achieve O(logN) logarithmic running time?\nbinary search trees\nSection 4 - AVL Trees\nwhat is the problem with binary search trees?\nbalanced search trees: AVL trees\nrotations\nSection 5 - Red-Black Trees\nwhat are red-black trees?\nwhat is recovering operation?\ncomparing AVL trees and red-black trees\nSection 6 - Splay Trees\nsplay trees and caches\nachieve O(1) running time for getting the recently visited item\nSection 7 - Heaps and Priority Queues\nwhat are priority queues?\nwhat is heap data structure?\nhow to do sorting in O(NlogN) with heaps?\nSection 8 - B-Trees\nexternal memory and the main memory (RAM)\nB-trees and their applications in memory\nB* trees and B+ trees\nSection 9 - Hashing and HashMaps:\nwhat are hashing and hashtables (hashmaps)\nwhat are hash-functions\nhow to achieve O(1) running time complexity\nSection 10 - Sorting Algorithms\nbasic sorting algorithms\nbubble sort and selection sort\ninsertion sort and shell sort\nquicksort and merge sort\ncomparison based and non-comparison based approaches\nstring sorting algorithms\nbucket sort and radix sort\nSection 11 - Substring Search Algorithms\nsubstring search algorithms\nbrute-force substring search\nZ substring search algorithm\nRabin-Karp algorithm and hashing\nKnuth-Morris-Pratt (KMP) substring search algorithm\nSection 12 (BONUS):\nwhat is LRU cache\nLRU cache implementation\nSection 13 (BONUS):\nFenwick trees (binary indexed trees)\nbinary indexed tree implementation\nSection 14 - Algorithms Analysis\nhow to measure the running time of algorithms\nrunning time analysis with big O (ordo), big Ω (omega) and big θ (theta) notations\ncomplexity classes\npolynomial (P) and non-deterministic polynomial (NP) algorithms\nO(1), O(logN), O(N) and several other running time complexities\nIn each chapter you will learn about the theoretical background of each algorithm or data structure, then we are going to write the code on a step by step basis in Eclipse, Java.\nMost of the advanced algorithms relies heavily on these topics so it is definitely worth understanding the basics. These principles can be used in several fields: in investment banking, artificial intelligence or electronic trading algorithms on the stock market.\nThanks for joining the course, let's get started!",
      "target_audience": [
        "This course is meant for everyone from scientists to software developers who want to get closer to algorithmic thinking in the main"
      ]
    },
    {
      "title": "Data Structures and Algorithms in Java",
      "url": "https://www.udemy.com/course/algorithms-data-structures-in-java-engineering-interview/",
      "bio": "Learn data structures and algorithms in Java, Improve your Problem solving abilities and logical thinking.",
      "objectives": [
        "Explain and Use Sorting Algorithms",
        "Construct Efficient Algorithms",
        "Explain and Use Data Structures",
        "Solve Problems",
        "Implement Data structures and Algorithms in Java"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Welcome",
          "Say Hello"
        ],
        "Sorting Algorithms": [
          "Problem definition",
          "Selection Sort",
          "CODE | Selection Sort",
          "Bubble Sort",
          "CODE | Bubble Sort",
          "Recursion",
          "CODE | Recursion",
          "Merge Sort",
          "CODE | Merge Sort",
          "Quick Sort",
          "CODE | Quick Sort",
          "Comapring",
          "CODE | Comparing",
          "Sorting Algorithms",
          "PRACTICE | Create Algorithms"
        ],
        "Time Complexity": [
          "What is Time Complexity?",
          "Big O Notation"
        ],
        "Data Structures": [
          "Introduction",
          "Binary search tree",
          "CODE | Binary Search Tree",
          "AVL tree",
          "AVL tree (insertion)",
          "AVL tree (deletion)",
          "CODE | AVL tree",
          "Linked List",
          "CODE | Linked List",
          "Trie",
          "CODE | Trie",
          "Hash Table",
          "CODE | Hash Table",
          "Data Structures"
        ],
        "Problem solving techniques": [
          "Divide and Conquer",
          "Dynamic Programing",
          "Greedy approach",
          "Backtracking"
        ],
        "Complex Problems": [
          "0-1 Knapsack problem",
          "Kruskal's algorithm",
          "Dijkstra's Shortest Path algorithm"
        ]
      },
      "requirements": [
        "Basic knowledge of programming (conditions, loops, variables)",
        "Some Java IDE"
      ],
      "description": "This course will give you the ability to solve problems, most people focus on the programming language, but people often forget about algorithms.\nAlgorithms are definitely more important than a programming language, you can learn a programming language in about week, but the problem-solving ability is much harder to learn. But the benefits are worth it.\nWhen you get to interview mostly they care about your problem-solving abilities.\nTo get your dream job, you need to know how to solve whatever problem they have. In this course, you will learn how to do that.\nAlso, I believe that nobody has time for long and boring lectures, so in this class, I try to explain the important things in a fast and engaging way, so I won't bore you to death.\nWe start off with Sorting algorithms, I explain each algorithm and then I show you implementation.\nAfter that we take a look at Data Structures, I choose In my opinion the best Structures for you to learn the important concepts.\nAs a bonus, I go through the complex problem-solving techniques. And I show you how these works on common examples such as Knapsack and Minimum spanning tree.\nI believe that learning and understanding these concepts will help you solve problems more efficiently.",
      "target_audience": [
        "Anyone who wants to improve their Problem Solving skills"
      ]
    },
    {
      "title": "Building GUI Applications with Fyne and Go (Golang)",
      "url": "https://www.udemy.com/course/building-gui-applications-with-fyne-and-go-golang/",
      "bio": "Learn how to build fast, efficient desktop applications for Mac, Windows and Linux using Go and Fyne.",
      "objectives": [
        "Learn how to build GUI applications using Go and Fyne",
        "Learn how to have your application display common widgets",
        "Learn how to save your application state with an embedded database",
        "Learn how to have your application call resources on the internet"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "About me",
          "Installing Go",
          "Installing Visual Studio Code",
          "Installing Make",
          "Asking for help",
          "Mistakes. We all make them."
        ],
        "Getting Started with Fyne": [
          "Installing the necessary tools",
          "Writing the obligatory \"Hello, world!\" application",
          "The structure of a Fyne application",
          "Adding a simple container, an entry, and button"
        ],
        "First Project: Building a Markdown Editor": [
          "What we'll cover in this section",
          "Getting started with the MarkDown editor",
          "Adding a Main Menu to our Application",
          "Making Menu Items Functional: Saving files",
          "Opening files",
          "Adding a filter to the open file command",
          "Making the Save menu item functional",
          "Packaging our application",
          "Writing a simple test for our application",
          "Defining a custom theme"
        ],
        "Second Project: GoldWatcher": [
          "What we'll cover in this section",
          "Setting up a simple application",
          "Getting started on the user interface",
          "Getting the current price of gold from an external site",
          "Writing tests for our gold prices logic",
          "Creating and returning the prices container",
          "Displaying prices in our application window",
          "Writing a test for the getPriceText function",
          "Creating a toolbar",
          "Writing a test for the toolbar",
          "Adding application tabs",
          "Getting the Gold Price Chart",
          "Creating and returning the priceChart container",
          "Handling the situation when no network is available",
          "Displaying the chart in our application window",
          "Writing a function that will refresh all Gold price information",
          "Enabling the refresh icon in the toolbar",
          "Updating gold prices in the background"
        ],
        "Second Project: Part II, Connecting to a database": [
          "What we'll cover in this section",
          "Setting up a database repository",
          "Implementing a sqlite Repository",
          "Implementing a sqlite repository, continued",
          "Setting up our testing environment for db-sqlite.go",
          "Testing our sqlite database repository",
          "Connecting our application to sqlite",
          "Setting up a test repository"
        ],
        "Second Project: Part III, populating the holdings tab": [
          "What we'll cover in this section",
          "Getting started with the holdings tab",
          "Getting the slice of holdings and testing our currentHoldings function and",
          "Testing our getHoldingSlice function",
          "Building the table widget",
          "Getting the information we need in order to refresh the holdings table",
          "Creating the refreshHoldingsTable function",
          "Displaying the holdings table in our application (finally!)",
          "Manually entering some data into sqlite",
          "Changing the container type for our holdings table",
          "Fixing a problem with the delete button",
          "Enabling the add holdings button in the toolbar",
          "Adding validation to our add holdings dialog",
          "Fixing a problem with the way prices display, and writing a simple test",
          "Installing a Makefile",
          "Adding an icon, and building an executable",
          "Setting up preferences for our application",
          "Enabling the preferences icon in the toolbar"
        ],
        "For Mac users: Signing our Application through Apple": [
          "What we'll cover in this section",
          "Installing Xcode, and getting a developer account",
          "Signing our application"
        ]
      },
      "requirements": [
        "Familiarity with the Go programming language",
        "Mac or Windows computer and an Internet connection"
      ],
      "description": "Many developers are intimidated by the idea of writing a desktop application, and this is probably because of the rise of web based applications. In fact, some university computer science programs do not even devote an entire course to developing GUI applications, and that's unfortunate.\nGo, sometimes referred as Golang, has quickly risen in popularity over the past decade, and has become extremely popular for building REST APIs, back end applications, and network software. One question that comes up a great deal online, though, is how one might go about building a desktop application using Go. For quite some time, the default answer was use Qt and CGO bindings, but several years ago a new project emerged -- one that makes it relatively easy to build GUI applications in pure Go: the Fyne project. Fyne is a project is based around the premise that it should be free and simple to develop an application that can run on all platforms without modification or adaptation. Fyne apps are installed like regular applications on all platforms and deliver great performance and solid user experience.\nWith Fyne, you can write your code once, in pure Go, and deliver applications that run on Mac OSX, Windows, Linux, Android devices, iOS devices, and as WebAssembly in the browser.\nThis course is intended to cover the basics of building a GUI application in pure Go. We will cover:\nBuilding Desktop applications: we'll build two: a MarkDown editor and an application that allows users to track (fictional) Gold investments and get real-time information on Gold prices.\nWe will cover:\n\nHow to work with the Fyne Canvas\nHow to work with Fyne Windows\nHow to use (and customize) Widgets, including dialogs, text, labels, input fields, forms, and tables\nHow to validate user input\nHow to fetch external resources from remote servers and use them in our application\nHow to use containers to arrange things in a window\nHow to embed a sqlite database into a desktop application\nHow to build custom menu items and link them to actions\nHow to read and write files from your application\nHow to read and write preferences\nHow to bundle assets (e.g. images) into a Fyne application\nHow to build a single binary with a custom icon\nHow to sign a Mac OS X application for distribution",
      "target_audience": [
        "Developers who know Go, and want to learn how to build a GUI application"
      ]
    },
    {
      "title": "Social Media Bots with Python",
      "url": "https://www.udemy.com/course/social-media-bots-with-python/",
      "bio": "Build and Deploy Social Media Bots",
      "objectives": [
        "Learn Python Programming",
        "Create a Reddit bot",
        "Create a Twitter bot",
        "How to use APIs"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Learn Python",
          "API",
          "IDE",
          "Reddit bot",
          "Twitter bot"
        ]
      },
      "requirements": [
        "No prior requirements"
      ],
      "description": "This course is designed to help you create your own social media bots with Python. You will learn how to use Python to create automated programs that can interact with social media platforms like Twitter and Reddit. You'll be able to create bots that can post content. We'll also explore how to use APIs to access data from these platforms. API stands for Application Programming Interface. It's a way for different pieces of software to talk to each other. Using this techniques, you should be able to create a social media bot for any platform you want.\nThe course is perfect for anyone who wants to learn how to use Python to automate their social media activities. It's easy to follow and you'll have access to our experienced instructors who can help you every step of the way. If you're interested in learning more, please don't hesitate.\nSo if you're interested in learning how to create social media bots with Python, this is the course for you. The course is created for beginners, those who are new to Python. You will also learn the basics of Python when starting this course. Are you looking to become a Python expert? Don't miss out on this opportunity to take your Python skills to the next level!",
      "target_audience": [
        "Beginner Python Programmers"
      ]
    },
    {
      "title": "Embedded Systems Bare-Metal Programming Ground Up™ (STM32)",
      "url": "https://www.udemy.com/course/embedded-systems-bare-metal-programming/",
      "bio": "No Libraries used, Professional CMSIS Standard, ARM Cortex, ADC,UART,TIMERS, DMA,SPI,I2C,RTC,GPIO etc.",
      "objectives": [
        "Write firmware using only bare-metal embedded-c",
        "Understand the Cortex-M Architecture",
        "Write Analog-to-Digital Converter (ADC) drivers using bare-metal embedded-c",
        "Write PWM drivers using bare-metal embedded-c",
        "Write UART drivers using bare-metal embedded-c",
        "Write TIMER drivers using bare-metal embedded-c",
        "Write Interrupt drivers using bare-metal embedded-c",
        "Write SPI drivers using bare-metal embedded-c",
        "Write I2C drivers using bare-metal embedded-c",
        "Master the ARM-Cortex CMSIS standard",
        "Write DMA drivers using bare-metal embedded-c",
        "Build every single line of code from scratch by writing to the microcontroller’s memory space directly.",
        "Use No third party libraries or header files",
        "Understand and write every single line of code yourself- no Copy/Paste",
        "Use the debugger effectively to analyze and resolve any bugs",
        "Develop proficiency in your embedded development skills and confidently take the next steps",
        "Define addresses for the different peripherals",
        "Analyze the chip documentation",
        "Create registers from the addresses"
      ],
      "course_content": {
        "Getting Started - Constructing Peripheral Registers from Memory Addresses": [
          "Downloading our Integrated Development Environment (IDE)",
          "Installing our Integrated Development Environment (IDE)",
          "Getting the right Documentation for Bare-Metal Development",
          "Coding : Locating the Ports and Pins of Components on the Nucleo board",
          "Coding : Defining Addresses of Modules using information from the Documentation",
          "Coding : Creating required Registers using Information from Documentation",
          "Coding : Configuring Pins using the Registers we Created",
          "Coding : Creating Registers from Structure Members",
          "Notice"
        ],
        "General Purpose Input/Output(GPIO)": [
          "Overview of ARM Cortex-M General Purpose Input/Output Module",
          "Coding : Developing the GPIO Output Driver",
          "Coding : Controlling GPIO Outputs using the Bit Set/Reset Register (BSRR)",
          "Coding : Developing the GPIO Input Driver"
        ],
        "Universal Asynchronous Receiver-Transmitter(UART)": [
          "Overview of the UART Protocol",
          "Coding : Developing the UART Transmitter Driver",
          "Coding : Testing the UART Transmitter Driver",
          "Coding : Retargeting printf",
          "Coding : Making the Driver more Modular",
          "Coding : Developing the UART Receiver Driver",
          "Coding : Testing the UART Receiver Driver"
        ],
        "Analog to Digital Conversion (ADC)": [
          "Introduction to Analog to Digital Conversion",
          "Understanding ADC Independents Modes",
          "Coding : Developing the ADC Single Conversion Driver",
          "Coding : Developing the ADC Continuous Conversion Driver"
        ],
        "The System Tick (SysTick) Timer": [
          "Overview of the System Tick Timer",
          "Coding : Developing the System Tick Timer Driver"
        ],
        "General Purpose Timers": [
          "Overview of General Purpose Timers",
          "Commonly used Timer registers",
          "Coding : Developing the General Purpose Timer Driver",
          "Coding : Developing the Timer Output Compare Driver",
          "Coding : Developing the Timer Input Capture Driver"
        ],
        "Interrupt Programming": [
          "Introduction to Interrupts",
          "Coding : Developing the GPIO Interrupt Driver",
          "Coding : Testing the GPIO Interrupt Driver",
          "Coding : Developing the UART Receiver Interrupt Driver",
          "Coding : Developing the ADC Interrupt Driver",
          "Coding : Developing the Systick Interrupt Driver",
          "Coding : Developing the Timer Interrupt Driver"
        ],
        "Direct Memory Access (DMA) Driver Development": [
          "Overview of the Direct Memory Access (DMA) Module",
          "Coding : Developing the UART Transmitter DMA Driver Pt.1",
          "Coding : Developing the UART Transmitter DMA Driver Pt.2",
          "Coding : Testing the UART Transmitter DMA Driver"
        ],
        "Inter-Integrated Circuit (I2C)": [
          "Introduction to I2C",
          "Coding : Implementing the I2C Init function",
          "Coding : Implementing the I2C Byte Read function",
          "Coding : Implementing the I2C Burst Read function",
          "Coding : Implementing the I2C Burst Write function",
          "Coding : Configuring the ADXL345 Accelerometer using the I2C driver",
          "Coding : Testing the ADXL345 Accelerometer using the I2C driver"
        ],
        "Serial Peripheral Interface (SPI)": [
          "Introduction to Serial Peripheral Interface (SPI)",
          "Coding : Implementing the SPI GPIO Initialization function",
          "Coding : Configuring the SPI Parameters",
          "Coding : Implementing the SPI Transmit",
          "Coding : Implementing the SPI Receive",
          "Coding : Configuring the ADXL345 Accelerometer using the SPI Driver",
          "Coding : Testing our ADXL345 Driver"
        ]
      },
      "requirements": [
        "No programming experience needed - I'll teach you everything you need to know.",
        "We shall be using the STM32 IDE which is FREE."
      ],
      "description": "Are you tired of Copying and Pasting code you don't understand?\n\nWith a programming based approach, this course is designed to give you a solid foundation in bare-metal firmware development for  ARM-based microcontrollers . The goal of this course is to teach you how to navigate the microcontroller reference manual and datasheet to extract the right  information to professionally  build peripheral drivers and firmware. To achieve this goal, no libraries are used in this course, purely bare-metal embedded-c and register manipulations.\nStill keeping it simple, this course comes in different ARM Cortex-M development boards  so that students can put the techniques to practice using an ARM Cortex-M development board of their choice. This version of the course uses the STMicroelectronics  STM32F4-NUCLEO which has an ARM Cortex-M4 microcontoller.\n\n\nSo with that understood, let me tell you…\n\nExactly What You’re Getting\nThis is dramatically different from any course you have ever taken because it’s more of a professional hands-on “field guide” to stm32 bare metal firmware development.\nThe reason why is because there’s no fluff or filler. It immediately gets down to the actual subject, showing you exactly what to do, how to do it, and why.\nPlus, it’s easy.\nAnd you’ll immediately “get” the entire mythology I personally use to build firmware for consumer devices in my professional life.\nIt's About MORE Than Just Getting the Code to Work\nSee, this course will change your professional life forever. Here is what one student had to say about the course :\n\n\n\"I would suggest this course for all the beginners. The concepts have been covered in the right sequence.And also the best part of this lecture series is getting to know how to explore the reference manual and datasheets.\"\nHere is what another student had to say :\n\"Extremly helpful to get to understand the uC programming deeper! For me it is much easier from now to develop code because I undertstand the base behind, so I'm more confident and more experienced to develop and debug the code. Really, this course is very useful to link the hardware knowledge with the coding skills. This fills the gap between them. Thanks for it! :)\"\nA third student :\n\"I am a professional semiconductor chipset application engineer with 30 years in global embedded product design in system applications. I can say this teacher is very straight forward by sharing his many years knowledge to the students with his true heart. Yes. I love his teaching pace and style!\"\n\n\n\n\nTaken by 8000+ Students with 1000+ Reviews\nIf at least one of the following applies to you then keep reading if not then simply skip this course:\n\n\" Escape From \"\nCopying/Pasting code you don’t understand\nUsing third party libraries and header files like HAL, LL and StdPeriph\nExperiencing bugs you don’t understand\nBeing afraid of technical documentations like the reference manual and datasheet of the chip\nImposter syndrome\n\" Arrive At \"\nBuilding every single line of code from scratch by writing to the microcontroller’s memory space directly.\nUsing No third party libraries or header files\nUnderstanding and writing every single line of code yourself- no Copy/Paste\nUsing the debugger effectively to analyze and resolve any bugs\nDeveloping proficiency in your embedded development skills and confidently take the next steps\n\n\nSo like I said, there’s more than just getting each piece of code to work.\nHere’s an overview of what you’re getting...\nAnalyzing the chip documentations:\nBefore developing the firmware for any chip you have to learn how to read the documentation provided by the chip manufacturer.\n\n\nDefining Peripheral address\nAll components on the microcontroller have an address range. To write to a component or read from a component you need to locate its address range in the documentation and properly define the addresses in your code.\n\n\nCreating registers from the address:\nThe addresses in the address range of a component represent the registers of that component. To access these registers you have effectively typecast the addresses.\n\n\nUnderstanding CMSIS:\nCortex-Microcontroller Interface Standard (CMSIS)CMSIS is a standard developed by Arm for all Cortex-Microcontrollers. This is the standard used in professional firmware development\n\n\nBut it gets better because you’re also getting…\n\nDeep Lessons on Developing Peripheral Drivers\nYou will learn how to develop bare-metal drivers for the following peripherals :\nAnalog-to-Digital Converter (ADC)\nSerial Peripheral Interface (SPI)\nInter-Integrated Circuit (I2C)\nDirect Memory Access (DMA)\nNested Vector Interrupt Controller (NVIC)\nGeneral Purpose Timers (TIM)\nSystem Tick Timer (SysTick)\nGeneral Purpose Input/Output (GPIO)\n\n\nSpecially Designed For People Who Hate Copy/Paste\nListen. If you don’t like “Copy/Paste” you’re not alone. I can’t stand it either. I’d literally rather have a piece of code that I wrote from scratch that doesn’t work than someone else’s working code I copied and pasted.\nAnd that’s why I’ve spent months designing and recording this course in which I show you how to locate every single register used and the meaning of every hexadecimal value written into the register.\n\n\nAlso it comes with a money back guarantee so you have nothing to loose.",
      "target_audience": [
        "If you are an absolute beginner to embedded systems, then take this course.",
        "If you are an experienced embedded developer and want to learn how to professionally develop embedded applications for ARM processors, then take this course."
      ]
    },
    {
      "title": "Writing Maintainable Unit Tests",
      "url": "https://www.udemy.com/course/writing-maintainable-unit-tests/",
      "bio": "Master the art of loosely coupled unit tests",
      "objectives": [
        "How to apply the test pyramid",
        "Learn about state and behaviour verification",
        "Understand and apply the DRY, SRP and DAMP principles",
        "How to organise unit tests",
        "Build loosely coupled unit tests",
        "Provide intentful assertions and observations"
      ],
      "course_content": {},
      "requirements": [
        "A decent understanding of an object-oriented programming language, preferrably C# or Java.",
        "At the very least some first experiences writing unit tests for production code.",
        "Basic or intermediate knowledge of xUnit test frameworks (e.g. NUnit, JUnit, xUnit, ...).",
        "Basic or intermediate knowledge of mocking frameworks in general."
      ],
      "description": "Are unit tests causing you pain? Are they constantly failing whenever you make changes to your production code? Do you spend a lot of time fixing them when they break? Are they difficult to set up and run? Do you have a hard time maintaining or structuring your unit test code? Are they causing you headaches from time to time? Are you on the brink of giving up on writing unit tests altogether or have you already done so?\nOr do you just want to step up your game and want to learn more about how to write readable and maintainable unit tests?\nThis course is for experienced software developers who want to improve upon their existing skills in writing unit tests. By the end of this course, students will have gained the knowledge to build loosely coupled, highly maintainable and robust unit tests that are trustworthy and improve the overall code quality of your software applications. The content of this course is based on 15+ years of experience with Test-Driven Development. This knowledge is essential for becoming a senior-level software developer or a technical lead.\nAlthough the examples that are used throughout this course are written in C#, the principles and guidance discussed here are broadly applicable to other platforms and programming environments as well (Java, Python, JavaScript, ... etc.). So students will be able to universally apply this knowledge throughout the rest of their careers as software developers.",
      "target_audience": [
        "This course is for software developers who want to improve upon their existing skills for writing readable and maintainable unit tests."
      ]
    },
    {
      "title": "OAuth 2.0 in Spring Boot Applications",
      "url": "https://www.udemy.com/course/oauth2-in-spring-boot-applications/",
      "bio": "Learn to secure Spring Boot applications with the New OAuth 2.0 Stack in Spring Security 5",
      "objectives": [
        "OAuth 2.0",
        "OAuth 2 Authorization Flows",
        "The New OAuth 2.0 stack in Spring Security 5",
        "Use OAuth 2.0 in Spring Boot Applications",
        "Configure OAuth 2.0 Resource Server",
        "Keycloak Identity and Access Management Solution",
        "Resource Servers behind API Gateway",
        "New Spring Authorization Server",
        "OAuth 2.0 in MVC Web App",
        "OAuth 2 - Social Login",
        "OAuth2 + PKCE in JavaScript Application",
        "Register Resource Servers with Eureka Service Registry"
      ],
      "course_content": {
        "Introduction": [
          "Source Code",
          "Presentation files",
          "Introduction",
          "Introduction to OAuth 2",
          "OAuth 2.0 Roles",
          "Current State of OAuth 2.0 in Spring Security 5",
          "OAuth 2.0 Client Types",
          "OAuth Access Token",
          "OAuth2 and OpenID Connect (OIDC)"
        ],
        "OAuth 2 Grant Types and Authorization Flows": [
          "Introduction",
          "Authorization Code. Introduction.",
          "Authorization Code Demo. Initial Request.",
          "Important note",
          "Authorization Code Demo. Exchange code for Access token.",
          "PKCE-enhanced Authorization Code",
          "Generating PKCE Code Verifier",
          "Generating PKCE Code Challenge",
          "PKCE Demo. Requesting Authorization Code",
          "PKCE Demo. Exchanging Code for Access Token",
          "Client Credentials",
          "Client Credentials Grant Type Demo",
          "The Password Credentials Flow",
          "The Password Credentials Flow: Demo"
        ],
        "Refreshing Access Token": [
          "Introduction",
          "Requesting Refresh Token that never expires",
          "Refreshing Access Token. Demonstration."
        ],
        "Keycloak. The Standalone Authorization Server.": [
          "Introduction",
          "[Updated] Downloading Standalone Authorization Server Keycloak",
          "[Updated] Starting and Stopping Keycloak server",
          "[Updated] Creating an Admin user",
          "[Updated] Creating a new Realm",
          "[Updated] Creating a new user",
          "[Updated] Creating a new OAuth Client",
          "[Updated] Configuring Client Application Secrets",
          "[Updated] Requesting Access Token and Refresh Token",
          "[Updated] Enable/Disable OAuth 2.0 Authorization Flow",
          "[Updated] OAuth 2.0 Client Scopes"
        ],
        "OAuth Resource Server": [
          "Introduction",
          "Creating a new project",
          "Import project into Spring Tool Suite IDE",
          "Creating a Rest Controller Class",
          "Starting Resource Server on different port number",
          "Access Token Validation URIs",
          "Accessing endpoints with an Access Token",
          "Accessing Principal and JWT Claims",
          "Demo - Accessing JWT Claims"
        ],
        "Resource Server - Scope Based Access Control": [
          "Introduction",
          "[Updated] Create WebSecurity class and enable WebSecurity",
          "[Updated] Configure basic HttpSecurity in Resource Server",
          "[Updated] Resource Server OAuth Scope-based Access Control",
          "Demo - Access Resource Server without using proper Scope",
          "Demo - Access Resource Server using proper Scope",
          "Creating OAuth 2 Scope in Keycloak"
        ],
        "Role Based Access Control with Keycloak": [
          "Introduction",
          "Source code",
          "[Updated] Creating User Role",
          "Securing Endpoints to a Specific Role",
          "Creating Role Converter class",
          "Decoding JWT to find user roles",
          "Converting Roles into GrantedAuthority objects",
          "Register JwtAuthenticationConverter with HttpSecurity",
          "Trying how it works"
        ],
        "Resource Server: Method Level Security": [
          "Introduction",
          "Source code",
          "Enable Method Level Security",
          "@Secured annotation example",
          "@PreAuthorized annotation",
          "Reading UserId from JWT Access Token",
          "Trying how the @PreAuthorized annotation works",
          "Creating getUser() to be used with @PostAuthorize",
          "@PostAuthorized annotation",
          "Trying how to the @PostAuthorized annotation works"
        ],
        "Resource Server Behind API Gateway": [
          "Introduction",
          "Creating API Gateway Project",
          "Import API Gateway to Spring Tool Suite",
          "Configuring API Gateway Routes",
          "Trying how it works",
          "Albums & Photos Resource Servers",
          "Routing to multiple Resource Servers",
          "Trying how it works"
        ],
        "Eureka Discovery Service": [
          "Introduction",
          "Creating Eureka Discovery Service Project",
          "Configuring Eureka project"
        ]
      },
      "requirements": [
        "Knowledge of Java",
        "Knowledge of Spring Boot",
        "Knowledge of Spring MVC"
      ],
      "description": "This video course is for beginner Java developers who are interested in learning how to secure OAuth 2.0 Resources in Spring Security 5.\nThe course covers only the new OAuth 2.0 stack in Spring Security 5.\nYou will learn how to:\nPerform each OAuth 2 authorization flow,\nAuthorization Code,\nPKCE-enhanced authorization code,\nClient credentials,\nPassword credentials.\nStartup and configure the Keycloak server,\nConfigure OAuth 2 Resource Server,\nStartup multiple Resource Servers on random port numbers,\nConfigure Spring Cloud API Gateway,\nConfigure and use Eureka Registry and Discovery Service,\nBuild a simple Spring MVC Web Application that fetches data from a protected Resource Server running behind Spring Cloud API Gateway.\nImplement a simple JavaScript application that uses PKCE-Enhanced authorization code to acquire JWT access tokens and communicate with protected Resource Server,\nLearn how to refresh an expired JWT Access token,\nLearn to implement Scope-base access control,\nLearn how to implement Role-based access control,\nOAuth social login with Facebook, Google, and Okta accounts,\nImplement Keycloak Remote User Authentication(User Storage SPI)\nNew Spring Authorization Server version 0.2.2\nThis is a step-by-step video course that explains how to use OAuth 2 from the very beginning. If you do not have experience with OAuth and would like to learn how to use it in Spring Boot Web Applications, then this video course is for you.",
      "target_audience": [
        "Beginner Java developer interested to learn OAuth 2.0"
      ]
    },
    {
      "title": "Learn Vert.x - Reactive microservices with Java",
      "url": "https://www.udemy.com/course/reactive-web-applications-with-vertx-and-vuejs/",
      "bio": "Learn how to create reactive web applications. Featuring Vert.x 4, Mutiny and Quarkus!",
      "objectives": [
        "Learn how to use the Vert.x 4 Framework",
        "Build a REST API",
        "Reactive Database Access with Vert.x",
        "Using Web Sockets with Vert.x",
        "Configuring a Vert.x application properly",
        "Using Mutiny and Vert.x",
        "Creating a Quarkus Reactive Application",
        "and more!"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Course Content",
          "About your instructor",
          "Code Examples & Setup"
        ],
        "Vert.x Core": [
          "Overview",
          "Your first Vert.x Application",
          "The Vert.x Object",
          "Vert.x Verticles",
          "Vert.x Verticle Scaling",
          "Vert.x Verticle Config",
          "Logging",
          "Event Loop Threads",
          "Worker Threads",
          "The Event Bus - Overview",
          "The Event Bus - Request Response Messaging",
          "The Event Bus - Point to Point messaging",
          "The Event Bus - Publish Subscribe Messaging",
          "The JSON Object",
          "The JSON Array",
          "Mapping Java Objects",
          "The Event Bus - JSON",
          "The Event Bus - Custom Message Codec Part 1",
          "The Event Bus - Custom Message Codec Part 2",
          "Vert.x Future & Promise",
          "Vert.x Future & Promise - Hands on",
          "Using Futures",
          "Vert.x Launcher",
          "Live Redeploy",
          "Vert.x Docker - Fat Jar",
          "Vert.x Docker - Jib"
        ],
        "Vert.x Web": [
          "Overview",
          "Vert.x Web Application",
          "Http Routing - GET request",
          "Custom Object - Error handling",
          "Unit tests using WebClient",
          "Project Lombok",
          "Http Routing - Path Variables",
          "In Memory Store",
          "Custom HttpResponse",
          "HTTP Routing - PUT",
          "Body Handler",
          "HTTP Routing - DELETE",
          "HTTP Headers - Content Type",
          "HTTP Headers - Custom",
          "Refactor HTTP Handlers",
          "Scaling the Web Server",
          "Scaling the Web Server - Load Test"
        ],
        "Vert.x Config": [
          "Overview",
          "Environment Variables",
          "System Properties & Overload Rules",
          "System Properties Test Configuration",
          "YAML file"
        ],
        "Vert.x Data - Reactive SQL Clients": [
          "Overview",
          "Setup a PostgreSQL Database",
          "Setup Schema migration with Flyway",
          "First Schema migration with Flyway",
          "Database Connection Configuration",
          "PgPool - Overview",
          "PgPool - Configuration",
          "PgPool - Select",
          "SQL Template - Custom Object",
          "SQL Template - Json Object",
          "SQL Template - Insert",
          "SQL Template - Batch Insert",
          "SQL Template - Delete",
          "Using Transactions",
          "Reactive SQL Client using MySQL",
          "Reactive MySQL Client Configuration",
          "Flyway MySQL Configuration"
        ],
        "Vert.x Reactive - Mutiny": [
          "Overview",
          "Mutiny - Uni",
          "Mutiny - Multi",
          "Mutiny - Vert.x Core, Vert.x Web",
          "Mutiny - Vert.x Reactive Clients"
        ],
        "Quarkus Reactive and Vert.x": [
          "Overview",
          "Setup a Quarkus Project",
          "Quarkus Reactive - RESTEasy and Hibernate Reactive with Panache Part 1",
          "Quarkus Reactive - RESTEasy and Hibernate Reactive with Panache Part 2",
          "Quarkus Reactive - Vert.x Verticles",
          "Quarkus Reactive - Inject Vert.x",
          "Quarkus Reactive - Vert.x EventBus"
        ],
        "Vert.x Web Sockets": [
          "Overview",
          "Web Socket Server - Simple",
          "Web Socket Server - Advanced",
          "Web Socket Server - Broadcast",
          "Web Socket Client"
        ],
        "Ending": [
          "Congratulations!"
        ]
      },
      "requirements": [
        "Be able to read and understand Java",
        "Know how to work with Docker",
        "Desire to learn while having fun!"
      ],
      "description": "In this course you will learn how to build reactive web applications using the Vert.x toolkit. The course starts with the core features of Vert.x and throughout the course we will cover more and more Vert.x modules.\nThe course is very practical and most of the course are hands-on coding examples. Basic Java 11 knowledge and docker experience is preferred to be able to follow everything in the course.\nVert.x Core:\nUnderstand the basic concepts: Future, Promise & the event bus\nVert.x Web:\nBuild reactive REST APIs\nVert.x Reactive SQL Clients\nReactive non-blocking Database Access.\nVert.x Config:\nConfigure your application properly\nand more...\nVert.x was one of the first JVM based reactive libraries. It is battle proven and used by a lot of companies in production. It found its way into multiple components and plays a key role in:\nHibernate Reactive:\nNon-blocking database access featuring the reactive SQL Clients from Vert.x\nQuarkus Reactive:\nReactive programming using Vert.x\nInject Vert.x into Quarkus Beans\nDeploy Vert.x Verticles\nUse the Vert.x Eventbus\n\n\nThe original content of this course is only available on Udemy and the copyright is by the instructor!\n\n\nAbout the instructor:\nDaniel is a senior software engineer and developed multiple web applications serving millions of users. He started as full stack developer and was able to gain experience for frontend and backend development.\nHe found his passion in developing highly scalable applications. Currently he works as a senior software engineer on a fin-tech platform that is used by more than three million users (2022). He advanced into a role as Technical Lead and offers his knowledge to his colleagues. The fin-tech platform utilises Technologies such as Apache Kafka, Java (Vert.x & Micronaut), PostgreSQL and AWS and consists of multiple Microservices.",
      "target_audience": [
        "Software Engineers looking for a reactive java framework",
        "Software Engineers building microservices with Java",
        "Software Engineers building microservices at scale"
      ]
    },
    {
      "title": "Design and Analysis of Algorithms",
      "url": "https://www.udemy.com/course/design-and-analysis-of-algorithms/",
      "bio": "Fundamentals of Computer Algorithms.",
      "objectives": [
        "Design and Analysis of Algorithms"
      ],
      "course_content": {
        "Introduction to Algorithms": [
          "Introduction to the Concept of Algorithms",
          "Definition of an algorithm",
          "Algorithm specification - Pseudocode Convention",
          "Performance Analysis Space complexity Time Complexity",
          "Asymptotic notations",
          "Randomized Algorithms"
        ],
        "Divide and Conquer method": [
          "General Method",
          "Binary Search",
          "Merge Sort",
          "Quicksort",
          "Merge sort and Quick sort-Complexity",
          "Merge sort vs Quick sort",
          "Strassen's Matrix Multiplication"
        ],
        "Disjoint Sets and Representations": [
          "Introduction",
          "Set Operations",
          "Graph Definition and Depth First Search traversal method",
          "Breadth First Search traversal Algorithm",
          "Bi-Connected Components",
          "Finding Articulation points in a Connected Component"
        ],
        "Greedy Method": [
          "Greedy Method and Control Abstraction",
          "Knapsack Problem-Greedy Solution",
          "Job Sequencing with deadlines",
          "Prim's Algorithm Example",
          "Kruskal's Algorithm with an example",
          "Single Source Shortest path problem (Dijkstra's Algorithm)"
        ],
        "Dynamic Programming and its applications.": [
          "Dynamic Programming and Principle of optimality",
          "0/1 Knapsack Problem",
          "Matrix chain multiplication",
          "Travelling salesperson problem",
          "Reliability Design",
          "Optimal Binary Search Tree problem"
        ],
        "Backtracking and its applications": [
          "Introduction to Backtracking.",
          "N-Queen problem",
          "Graph Coloring problem",
          "Hamiltanian Cycle problem"
        ],
        "Branch and Bound Applications.": [
          "LC-Branch and Bound",
          "FIFO-Branch and Bound"
        ]
      },
      "requirements": [
        "Basic knowledge on C and algorithms"
      ],
      "description": "The Highlights of the course are\n1.How to write algorithms with clear explanation.\n2.Analysis of Algorithms which can be measured with Time and space complexities.\n3.Methods like Divide and Conquer , Greedy method, Dynamic Programming,Backtracking and Branch and Bound are clearly explained with Applications of each method with an example and algorithm.\n4. The tracing of algorithms are clearly explained line by line.",
      "target_audience": [
        "Computer Science & Engineering and Information technology students"
      ]
    },
    {
      "title": "Ultimate Tkinter Python GUI Masterclass",
      "url": "https://www.udemy.com/course/ultimate-tkinter-python-gui-masterclass/",
      "bio": "Build Three Graphical User Interface Apps with Python and TKinter The Fast and Easy Way!",
      "objectives": [
        "Introductory TKinter",
        "How to Build Basic Apps With TKinter and Python",
        "Create Executable .exe Apps",
        "Build an MP3 Music Player With Tkinter and Python",
        "Build a Paint App wiht Tkinter and Python"
      ],
      "course_content": {
        "Welcome To The Course!": [
          "Welcome To The Course!"
        ],
        "Introduction To TKinter": [
          "First Things First: How To Get Support Fast!",
          "Introduction",
          "Install Python",
          "Install Gitbash and Sublime",
          "Set Up A Virtual Environment",
          "Hello World",
          "Label",
          "Label Options",
          "Pack Vs. Grid",
          "Grid Options",
          "Buttons",
          "Input Entry Boxes",
          "Icons",
          "Images",
          "Pack Forget and Destroy",
          "Menus Part 1",
          "Menus Part 2",
          "Frames",
          "Frames and Menus",
          "Hiding and Showing Menu Frames",
          "Status Bar",
          "Radio Buttons",
          "Check Buttons",
          "Pop Up Message Box",
          "Pop Up Box Response",
          "ComboBoxes",
          "New Windows",
          "New Windows Hide And Kill",
          "Images in New Windows",
          "Open Files Dialog Box",
          "Open Dialog Box Image To Screen",
          "Grid Forget Part 1",
          "Grid Forget Part 2",
          "Color Chooser Part 1",
          "Color Chooser Part 2",
          "Standalone exe file!"
        ],
        "Flashcard App": [
          "Flashcard App Intro",
          "Flashcard App Frames",
          "Flashcard App GUI",
          "Flashcard App Random Number IntVar()",
          "Flashcard App Answer Message",
          "Flashcard App Better Answer Message",
          "Flashcard App Generate New Random Numbers",
          "Flashcard App Subtraction",
          "Flashcard App Multiplication",
          "Flashcard App Division",
          "Flashcard App Destroying Frame Children with winfo_children",
          "Flashcard App Start Screen",
          "Flashcard App Start Screen Part 2"
        ],
        "Build a Paint Program With Tkinter": [
          "Introduction",
          "Install Python",
          "Install Sublime Text And Git Bash Terminal",
          "First TKinter Program",
          "Intro To The Canvas Widget",
          "Creating Lines On The Canvas",
          "Bind The Mouse To The Canvas",
          "Draw With The Mouse",
          "Define Brush Parameters",
          "Create Brush Options Frame",
          "Create Brush Size Frame",
          "Create Brush Size Slider",
          "Update Brush Width On Canvas",
          "Change Brush Type",
          "Change Colors",
          "Color Chooser Widget",
          "Clear Screen and Save Image Buttons",
          "Clear Screen Function",
          "Save Image File Dialog Box",
          "Set Correct PNG File Extension",
          "Pip Install Pillow",
          "Save The Image",
          "Save Image Pop Up Message Box",
          "Convert to EXE Executable File"
        ],
        "Build an MP3 Music Player With TKinter": [
          "Introduction",
          "Install Python",
          "Install Sublime Text And Git Bash Terminal",
          "Set Up Virtual Environment",
          "First TKinter Program",
          "Playlist Box",
          "Button Images Part 1",
          "Button Images Part 2 - Make Buttons",
          "Button Images Part 3 - Add Images",
          "Add Song Menubar",
          "FileDialog Box",
          "Get Song Title",
          "Strip Directory Structure From Song Title",
          "Change Playlist Colors",
          "Add Many Songs To The Playlist At Once",
          "Delete Songs Menu",
          "Delete Songs Function",
          "Install Pygame",
          "Play A Song Button",
          "Stop A Song Button",
          "Pause A Song Button",
          "Forward Button pt1",
          "Forward Button pt2",
          "Back Button",
          "Status Bar",
          "Get Current Song Time",
          "Convert To Time Format",
          "Mutagen Song Length",
          "Stop Function Status Bar",
          "Volume Slider Intro",
          "Set Volume",
          "Create Song Slider",
          "Set Slider To Song Length",
          "Move Slider In Time",
          "Slider Pause",
          "Slider Stop",
          "Slider Forward and Back",
          "Slider Move Song Position",
          "Slider Status Bar Update",
          "Slider End Of Song"
        ],
        "Conclusion": [
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "No special tools are necessary to take this course",
        "A Basic Understanding of Python Is Helpful"
      ],
      "description": "In this course I'll teach you how  to make graphical user interfaces for Python using TKinter.  You'll be surprised just how quickly you can create some pretty cool looking apps!  This is a bundle of three of my most popular TKinter courses here on Udemy, you get them all in one course!\nI'll show you the ins and outs of TKinter, and then I'll show you how to package your app as an .exe file that you can share with others!\nWe'll start out by learning all about the main TKinter widgets.  Everything in TKinter is a widget...from labels, to buttons, input boxes, and more.\nAfter we've learned all the major Widgets, we'll build a fun Math Flashcard app.  Our app will have addition, subtraction, multiplication, and division flashcards.\nThen we'll move into more advanced apps.\nWe'll build a fun Paint App that lets the user draw simple pictures with Tkinter.  Then we'll build a cool little MP3 music player app.\nIf you've ever wanted to create GUI apps with Python, this is the course for you!",
      "target_audience": [
        "This course is aimed towards absolute beginners who want to learn the to build Apps With TKinter and Python",
        "Anyone wanting to learn to build apps"
      ]
    },
    {
      "title": "Basic to Advanced: Retreival-Augmented Generation (RAG)",
      "url": "https://www.udemy.com/course/basic-to-advanced-retreival-augmented-generation-rag-course/",
      "bio": "Multi-modal RAG Stack: A Hands-on Journey Through Vector Stores, LLM Integration, and Advanced Retrieval Methods",
      "objectives": [
        "Build three professional-grade chatbots: Website, SQL, and Multimedia PDF",
        "Master RAG architecture and implementation from fundamentals to advanced techniques",
        "Run and optimize both open-source and commercial LLMs",
        "Implement vector databases and embeddings for efficient information retrieval",
        "Create sophisticated AI applications using LangChain framework",
        "Deploy advanced techniques like prompt caching and query expansion",
        "Understand how to deploy on AWS EC2 (Basic Guide)"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Outline"
        ],
        "RAG Fundamentals": [
          "Section Intro",
          "Intro to RAG & Core Concepts",
          "Principles, Traditional Methods vs RAG",
          "Real-world applications and use cases",
          "Understanding Retrieval-Augmented Generation architecture"
        ],
        "Introduction to Large Language Models (LLMs)": [
          "Section Intro",
          "Basics of LLMs and Closed Source Models",
          "Closed Source & Open Source LLMs (Continued)",
          "Closed vs Open Source Models & Software",
          "What does Retrieval-Augmented Generation (RAG) do to LLMs?",
          "Let's run an Open Source LLM locally!"
        ],
        "VS Code & Github Repo Setup": [
          "Downloading Python, VS Code, Git and more",
          "Cloning and accessing all Projects",
          "PDF for entire course"
        ],
        "Vector Databases & Embeddings": [
          "Section Intro",
          "What are Vectors and Why we use them?",
          "What are Embeddings?",
          "Setting up over VS Code Project",
          "Audio, Graph, Text and Image Vectors & Embeddings",
          "Vector DB Indexing and Pinecone Setup",
          "Image, Text and Paragraph Indexing and Matching"
        ],
        "LangChain Framework & Building a Simple RAG Pipeline": [
          "Section Intro",
          "Components of Basic RAG Pipeline, LangChain and Loaders",
          "Create a Website Chatbot",
          "Add a Memory to your Website Chatbot",
          "Building a CSV / Excel Data Chatbot"
        ],
        "LangChain / RAG Advanced": [
          "Section Intro",
          "Advanced Text Splitting, Re-ranking, Chunking Techniques",
          "Building Query Expansion Workflow"
        ],
        "Advanced Projects with LangChain": [
          "Section Intro",
          "SQL / Database Chatbot using LangChain",
          "Prompt Caching (In Memory and DB)",
          "Multi-modal Chatbot",
          "DeepSeek-R1 RAG Chatbot"
        ],
        "Completion!": [
          "2025 AI Roadmap",
          "Congratulations!"
        ]
      },
      "requirements": [
        "Basic Python knowledge is Good to have but not mandatory."
      ],
      "description": "Transform your development skills with our comprehensive course on Retrieval-Augmented Generation (RAG) and LangChain. Whether you're a developer looking to break into AI or an experienced programmer wanting to master RAG, this course provides the perfect blend of theory and hands-on practice to help you build production-ready AI applications.\nWhat You'll Learn\nBuild three professional-grade chatbots: Website, SQL, and Multimedia PDF\nMaster RAG architecture and implementation from fundamentals to advanced techniques\nRun and optimize both open-source and commercial LLMs\nImplement vector databases and embeddings for efficient information retrieval\nCreate sophisticated AI applications using LangChain framework\nDeploy advanced techniques like prompt caching and query expansion\nCourse Content\nSection 1: RAG Fundamentals\nUnderstanding Retrieval-Augmented Generation architecture\nCore components and workflow of RAG systems\nBest practices for RAG implementation\nReal-world applications and use cases\nSection 2: Large Language Models (LLMs) - Hands-on Practice\nSetting up and running open-source LLMs with Ollama\nModel selection and optimization techniques\nPerformance tuning and resource management\nPractical exercises with local LLM deployment\nSection 3: Vector Databases & Embeddings\nDeep dive into embedding models and their applications\nHands-on implementation of FAISS, ANNOY, and HNSW methods\nSpeed vs. accuracy optimization strategies\nIntegration with Pinecone managed database\nPractical vector visualization and analysis\nSection 4: LangChain Framework\nText chunking strategies and optimization\nLangChain architecture and components\nAdvanced chain composition techniques\nIntegration with vector stores and LLMs\nHands-on exercises with real-world data\nSection 5: Advanced RAG Techniques\nQuery expansion and optimization\nResult re-ranking strategies\nPrompt caching implementation\nPerformance optimization techniques\nAdvanced indexing methods\nSection 6: Building Production-Ready Chatbots\nWebsite Chatbot\nArchitecture and implementation\nContent indexing and retrieval\nResponse generation and optimization\nSQL Chatbot\nNatural language to SQL conversion\nQuery optimization and safety\nDatabase integration best practices\nMultimedia PDF Chatbot\nMulti-modal content processing\nPDF parsing and indexing\nRich media response generation\nWho This Course is For\nSoftware developers looking to specialize in AI applications\nAI engineers wanting to master RAG implementation\nBackend developers interested in building intelligent chatbots\nTechnical professionals seeking hands-on LLM experience\nPrerequisites\nBasic Python programming knowledge\nFamiliarity with REST APIs\nUnderstanding of basic database concepts\nBasic understanding of machine learning concepts (helpful but not required)\nWhy Take This Course\nIndustry-relevant skills currently in high demand\nHands-on experience with real-world examples\nPractical implementation using Tesla Motors database\nComplete coverage from fundamentals to advanced concepts\nProduction-ready code and best practices\nWorkshop-tested content with proven results\nWhat You'll Build\nBy the end of this course, you'll have built three professional-grade chatbots and gained practical experience with:\nRAG system implementation\nVector database integration\nLLM optimization\nAdvanced retrieval techniques\nProduction-ready AI applications\nJoin us on this exciting journey to master RAG and LangChain, and position yourself at the forefront of AI development.",
      "target_audience": [
        "Software developers looking to specialize in AI applications",
        "AI engineers wanting to master RAG implementation",
        "Backend developers interested in building intelligent chatbots",
        "Technical professionals seeking hands-on LLM experience",
        "Software Engineers Data Scientists, AI Engineers, Machine Learning Engineers"
      ]
    },
    {
      "title": "From 0 to 1: Data Structures & Algorithms in Java",
      "url": "https://www.udemy.com/course/from-0-to-1-data-structures/",
      "bio": "Learn so you can see it with your eyes closed",
      "objectives": [
        "Visualise - really vividly imagine - the common data structures, and the algorithms applied to them",
        "Pick the correct tool for the job - correctly identify which data structure or algorithm makes sense in a particular situation",
        "Calculate the time and space complexity of code - really understand the nuances of the performance aspects of code"
      ],
      "course_content": {
        "What this course is about": [
          "You, This course and Us"
        ],
        "Data Structures And Algorithms - A Symbiotic Relationship": [
          "Why are Data Structures And Algorithms important?"
        ],
        "Complexity Analysis and the Big-O Notation": [
          "Performance and Complexity",
          "The Big-O Notation",
          "What is the complexity of these pieces of code?"
        ],
        "Linked Lists": [
          "The Linked List - The Most Basic Of All Data Structures",
          "Linked List Problems",
          "Linked Lists vs Arrays"
        ],
        "Stacks And Queues": [
          "Meet The Stack - Simple But Powerful",
          "Building A Stack Using Java",
          "Match Parenthesis To Check A Well Formed Expression",
          "Find The Minimum Element In A Stack In Constant Time",
          "Meet The Queue - A Familiar Sight In Everyday Life",
          "The Circular Queue - Tricky But Fast",
          "Build A Queue With Two Stacks"
        ],
        "Sorting and Searching": [
          "Sorting Trade-Offs",
          "Selection Sort",
          "Bubble Sort",
          "Insertion Sort",
          "Shell Sort",
          "Merge Sort",
          "Quick Sort",
          "Binary Search - search quickly through a sorted list"
        ],
        "Binary Trees": [
          "Meet The Binary Tree - A Hierarchical Data Structure",
          "Breadth First Traversal",
          "Depth First - Pre-OrderTraversal",
          "Depth First - In-Order and Post-Order Traversal"
        ],
        "Binary Search Trees": [
          "The Binary Search Tree - an introduction",
          "Insertion and Lookup in a Binary Search Tree"
        ],
        "Binary Tree Problems": [
          "Minimum Value, Maximum Depth And Mirror",
          "Count Trees, Print Range and Is BST"
        ],
        "Heaps": [
          "The Heap Is Just The Best Way to Implement a Priority Queue",
          "Meet The Binary Heap - It's A Tree At Heart",
          "The Binary Heap - Logically A Tree Really An Array",
          "The Binary Heap - Making It Real With Code",
          "Heapify!",
          "Insert And Remove From A Heap"
        ]
      },
      "requirements": [
        "Basic knowledge of programming is assumed, preferably in Java"
      ],
      "description": "This is an animated, visual and spatial way to learn data structures and algorithms\n\nOur brains process different types of information differently - evolutionarily we are wired to absorb information best when it is visual and spatial i.e. when we can close our eyes and see it\nMore than most other concepts, Data Structures and Algorithms are best learnt visually. These are incredibly easy to learn visually, very hard to understand most other ways\nThis course has been put together by a team with tons of everyday experience in thinking about these concepts and using them at work at Google, Microsoft and Flipkart\nWhat's Covered:\n\nBig-O notation and complexity\nStacks\nQueues\nTrees\nHeaps\nGraphs and Graph Algorithms\nLinked lists\nSorting\nSearching",
      "target_audience": [
        "Yep! Computer Science and Engineering grads who are looking to really visualise data structures, and internalise how they work",
        "Yep! Experienced software engineers who are looking to refresh important fundamental concepts"
      ]
    },
    {
      "title": "Docker Training: Learn Docker from Zero to Cloud",
      "url": "https://www.udemy.com/course/docker-training-learn-docker-from-zero-to-cloud/",
      "bio": "Containerize Apps, Manage Microservices, and Deploy to the Cloud with Docker!",
      "objectives": [
        "End-to-End Docker Training",
        "Understand the fundamental concepts and benefits of containerization with Docker",
        "Containerize Python, Go, Java, Javascript, and Ruby applications",
        "Build efficient and optimized Docker images using Dockerfiles",
        "Containerize web applications built with Flask, Spring Boot, Node JS, and Go",
        "Establish communication between containers using Docker networks",
        "Push Docker images to Docker Hub and implement proper tagging practices",
        "Containerize and manage databases (e.g., MySQL, PostgreSQL, MongoDB) with Docker",
        "Handle persistent data storage using Docker volumes",
        "Orchestrate and manage multi-container applications using Docker Compose"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Discover more Valuable Content",
          "Your Instructor"
        ],
        "From Docker to Kubernetes": [
          "From Docker to Kubernetes"
        ],
        "Required Downloads and Installations": [
          "Required Downloads and Installations"
        ],
        "The Need for Docker": [
          "The Need for Docker"
        ],
        "Running Applications Inside Docker Containers": [
          "Important Tip for Windows Users",
          "Running Applications Inside Docker Containers",
          "Struggling with the Docker Run Command?",
          "Workbook: Containerizing Python, Go, and Ruby Applications"
        ],
        "Building Images from Dockerfiles": [
          "Building Images from Dockerfiles",
          "Workbook: Building Images for Python, Go, and Ruby Applications"
        ],
        "Containerizing a Web Application": [
          "Containerizing a Web Application (Flask)",
          "Containerizing a Web Application (Spring Boot)"
        ],
        "Docker Networks and Microservices": [
          "Running Web Applications on the Same Network",
          "Ecommerce Microservices: React, Node, Flask, Spring Boot, Go"
        ],
        "Pushing Images to Docker Hub and Tagging Practices": [
          "Pushing Images to Docker Hub and Tagging"
        ],
        "Streamlining with Docker Compose": [
          "Streamlining with Docker Compose",
          "Ecommerce Workbook: Docker Compose"
        ]
      },
      "requirements": [
        "Basic understanding of software development and programming concepts",
        "Familiarity with command-line interfaces and terminal navigation",
        "Recommended: Basic knowledge of at least one programming language"
      ],
      "description": "Imagine being able to develop an application on your local machine and then seamlessly run that application anywhere else without having to worry about compatibility issues or missing dependencies. Docker makes this possible. Almost every big company, be it Spotify, Netflix, or PayPal, uses Docker to deliver applications faster than ever before, and now it's your turn.\nThis course will teach you how to:\nInstall and set up Docker on various operating systems\nContainerize a wide range of applications built with Python, Go, Java, JavaScript, Ruby, Flask, Spring Boot, Node.js, and more\nBuild efficient and optimized Docker images using Dockerfiles\nEstablish seamless communication between containers using Docker networks\nOrchestrate and manage multi-container applications, including microservices and databases, using Docker Compose\nHandle persistent data storage and manage databases (MySQL, PostgreSQL, MongoDB) with Docker volumes\nPush Docker images to Docker Hub and implement effective tagging and versioning strategies\nDeploy containerized applications to the cloud using Heroku.\nReal-World E-commerce Application Project\nThroughout the course, you'll work on a realistic e-commerce application composed of multiple microservices, each built with different languages and frameworks. You'll learn how to containerize these microservices, manage their dependencies, and orchestrate the entire application using Docker Compose, and deploy it to the cloud. This hands-on experience will solidify your understanding of Docker's capabilities in a practical setting.\n\n\nBoost Your Career with Docker Skills\nDocker and microservice orchestration are highly sought-after skills in the industry. This course provides software developers and DevOps professionals with the knowledge and tools to streamline development workflows and optimize application deployment.\nEnroll in our Docker Bootcamp today and gain the practical skills you need to effectively develop and deploy applications using containerization.",
      "target_audience": [
        "Software Developers",
        "DevOps engineers",
        "IT professionals who want to streamline application development, deployment, and management using Docker."
      ]
    },
    {
      "title": "RabbitMQ: Learn all MessageQueue concepts and administration",
      "url": "https://www.udemy.com/course/rabbitmq-from-start-to-finish/",
      "bio": "Use RabbitMQ for asynchronous Messaging to decouple your systems for easy scalable systems with examples in Python & C#",
      "objectives": [
        "Learn why RabbitMQ exists and what problems it solves",
        "Setup a RabbitMQ Server",
        "Learn the different routing mechanisms",
        "Understand RabbitMQ architecture",
        "Messaging Patterns with RabbitMQ",
        "High availability with RabbitMQ",
        "Learn Authentication and Access Control in RabbitMQ",
        "Logging & Monitoring",
        "Clustering with RabbitMQ"
      ],
      "course_content": {
        "Introduction": [
          "Introduction to the course",
          "What is RabbitMQ, Why do you need it?",
          "First Impression: Producer & Consumer visualized using the pika library",
          "How RabbitMQ works on a high level",
          "Clients we will be using: .Net & Python",
          "Erlang: the power behind RabbitMQ",
          "Setup for the course: Docker container",
          "Management UI for visualization of RabbitMQ"
        ],
        "RabbitMQ Server basics": [
          "Visualize Message Flow in RabbitMQ",
          "Message Flow: Direct Exchange",
          "Message Flow: Topic Exchange",
          "Message Publishing: Exchanges",
          "Connect to a Rabbit: Connections and Channels",
          "Vhost and logical seperations",
          "Create a Consumer with RabbitMQ.Client",
          "Create a Publisher with RabbitMQ.Client",
          "An easier way to use the Rabbit Client for .Net",
          "Summary of Server basics",
          "What is RabbitMQ doing on a high level"
        ],
        "Closer Look at Message Flow in RabbitMQ": [
          "Close look at queues: Declare and Bind",
          "Declare and Bind queues with the pika library",
          "Queue properties: Durable, Auto-delete, exclusive",
          "Queue properties 2: Advanced properties and their use",
          "Message TTL and Queue Expiry with RabbitMQ.Client",
          "Check your knowledge for queue Properties",
          "MessagePatterns explained",
          "MessagePattern: RPC or Request Response",
          "Message Reliability explained",
          "Message delivery guaranteed: Publisher confirms (.Net)",
          "Message consumption guaranteed: Consumer Acks (Python)",
          "Advanced Messaging",
          "Summary closer look at Messaging"
        ],
        "RabbitMQ management": [
          "Intro to vhosts and access control",
          "Access Control: Set and use permissions",
          "Plugins in RabbitMQ",
          "What are Policies",
          "CLI for RabbitMQ",
          "Manage RabbitMQ with the HTTP API",
          "Configuration of the RabbitMQ Server",
          "Configure via Configuration Files",
          "Configure with Environment Variables",
          "Summary Rabbitmq Management"
        ],
        "Optimize the RabbitMQ for UseCase scenarios": [
          "Intro to Optimization of RabbitMQ",
          "Tools for Optimization: Built in Clustering",
          "How to create a simple local cluster",
          "High Availability: Replicate Queues with mirroring",
          "High availability: Shovels",
          "Implementing a Dynamic Shovel from management UI",
          "High Throughput with Clustering",
          "Summary Performance and High availability"
        ],
        "Logging and Monitoring the RabbitMQ": [
          "Monitoring and Logging with RabbitMQ",
          "Enable Tracing Plugin for debugging",
          "Logging with Queues",
          "Use the HTTP REST API for Health checks",
          "Summary Monitoring and Logging"
        ],
        "Bonus - Use cases and special cases": [
          "Python config watchdog",
          "Dead Letter Exchange Example",
          "Better RPC with RabbitMQ - Concepts",
          "Better RPC with pika (python)",
          "UseCases Introduction",
          "Use Case:Load balancer explained",
          "Classic example: Load balancing with monitoring of Queue levels and auto scaling",
          "Intro: Temporary BLOB Storage with Redis",
          "Temporary BLOB Storage with Redis - Code"
        ],
        "Example Application with RabbitMQ, dotnet core and Python": [
          "Intro to the application: What we are building",
          "Setup the solution structure",
          "Setup the Middleware: Messages and Bus Library",
          "Setup the Consumer with access to the database",
          "Setup RabbitMQ and the database itself",
          "Setup the Rest API and do a first integration of the system",
          "Create the Database access code and Insert the Order",
          "Integrate the full system",
          "Now implement the Logging and Anaylitcs clients yourself!"
        ]
      },
      "requirements": [
        "Interest in Programming",
        "Basic understanding of programming languages helps with the examples: Python or .Net",
        "Basic IT concepts",
        "Interest in learning distributed Systems design and practices"
      ],
      "description": "Ever asked yourself how to decouple your systems without the least amount of friction?\nOr did you ask yourself how to scale a distributed system?\nOr are you tired of changing your code over and over again, just because your boss or sales wants this or that little tiny extra feature?\nThen learn decoupling by asynchronous messaging with the message broker RabbitMQ in this online course.\nThis course will not only cover which benefits this technology offers but also shows you of what you can use it for.\nWith that out of the way, it dives right into the following topics\nRabbitMQ Entities and Message Flow\nExchanges\nQueues\nBinding, Declare and Queue Properties\nRabbitMQ Access Control\nVirtual Hosts\nUsers and Permissions\nAuthentication and Authorization\nManagement of the RabbitMQ server\nSetup in Docker container\nConfigure the server for your needs\nDifferent means of configuration\nClustering\nWhy and How\nFor High Availability\nThroughput\nLogging and Monitoring\nLogging with Built in mechanisms\nMonitoring with clients and built in mechanisms\nTo follow this course, basic programming knowledge is advised, best with Python and/or .Net (C#). Taking this course should also be done with understanding of basic software and application knowledge.\nThe course itself is most appropriate if you identify as one of the following groups\nAnyone who needs to learn RabbitMQ (obv is obv)\nSoftware engineer / developer in distributed systems\nDevOps engineers\nIT professionals that manage a RabbitMQ Server instance\nIn general as a developer it is a good idea to learn about a Message Broker, simply because this is a way to easily decouple your applications and make them more maintanable, extendable and failure proof.\n\n\nTo become a more competent developer, advance your career and learn about an extremely well implemented system which is RabbitMQ,\nENROLL NOW\nand get access to life long updates for RabbitMQ, with support from a Freelance DevOps engineer that has implemented multiple systems with this broker.\nAlso remember the 30 days refund, so there is nothing to loose for you really.\n\n\nEnjoy the course and becoming a better engineer and developer.",
      "target_audience": [
        "Python Developers",
        ".Net Developers",
        "Microservice systems engineers",
        "DevOps engineers"
      ]
    },
    {
      "title": "The Complete GitHub Actions & Workflows Guide",
      "url": "https://www.udemy.com/course/github-actions/",
      "bio": "Automate Code Testing, Deployment & Versioning using CI/CD Workflows. Create & Publish GitHub Actions to the Marketplace",
      "objectives": [
        "Learn about writing serialized data in the YAML format.",
        "Learn about all the GitHub Actions concepts (Workflows, Steps, Jobs, Actions, etc..)",
        "Discover everything you can do in a GitHub workflow (events, schedules, filtering, environment variables, context, encryption, matrix and more)",
        "Learn how docker can be used in a GitHub workflow",
        "Create a real-life CI/CD workflow for code testing, formatting, versioning and more.",
        "Use caching in workflows for an improved performance.",
        "Learn about uploading artifacts in workflows.",
        "Learn about how to create your own custom GitHub Actions using Javascript or Docker",
        "Create an action for opening GitHub issues using JavaScript.",
        "Create an action for sending slack messages using PHP.",
        "Learn how to publish GitHub actions in the GitHub marketplace."
      ],
      "course_content": {
        "Introduction & Basic Concepts": [
          "Before Starting the Course",
          "Introduction to GitHub Actions & Workflows",
          "Introduction to the YAML Format",
          "Let's Create Our First Workflow",
          "Parallel & Dependent Jobs",
          "An Overview to Managing Our Workflow Runs through the Web UI & the GitHub CLI",
          "Debugging Our Workflow Runs",
          "Skipping Workflow Runs",
          "Introduction to Workflow Commands",
          "Quick Note",
          "Shells & Working Directories",
          "Downloading Our Repository into the Runner Machine",
          "Introduction to Actions",
          "The Checkout Action"
        ],
        "Events that Trigger Workflows": [
          "Repository Events (ex. Push, Pull Request, Issues)",
          "Events Activity Types",
          "Workflow Run Approval from Fork Pull Requests",
          "Using the Pull Request Target Event",
          "Running a Workflow Based on Another Workflow",
          "Filtering Our Workflow Runs by Branches, Tags and Paths",
          "Manually Triggering a Workflow from the GitHub Web UI, CLI and the REST API",
          "Using the Repository Dispatch Event for External Events",
          "Running Workflows on a Schedule"
        ],
        "Expressions, Contexts, Functions, Environment Variables & Secrets": [
          "Expressions & Contexts",
          "The If Key & Expression Functions",
          "Status Check Functions",
          "Default & Custom Environment Variables",
          "Setting Environment Variables During the Execution of a Workflow",
          "Configuration Variables & Secrets",
          "Encrypting & Decrypting Large Files in a Workflow",
          "The GITHUB_TOKEN Secret & Customizing its Permissions"
        ],
        "Diving Deeper with More Advanced Github Actions Features": [
          "Timeout Minutes & Continue on Error",
          "Running a Job Multiple Times Using a Matrix",
          "Including & Excluding Matrix Configurations",
          "Handling Failing Jobs in a Matrix",
          "Step and Job Outputs & Dynamic Matrices",
          "Running a Single Job or Workflow at a Time Using Concurrency",
          "Reusable Workflows",
          "Reusable Workflow Outputs",
          "Nesting Reusable Workflows",
          "Caching Files in Github Actions",
          "Updating Cache Keys Dynamically & Adding Restore Keys",
          "Cache Limits & Restrictions",
          "Uploading & Downloading Job Artifacts"
        ],
        "Using Docker in GitHub Actions": [
          "Running Jobs in Docker Containers",
          "Using Docker Containers in Steps",
          "Exploring Shared Networks & Volumes Between Multiple Containers",
          "Creating a Custom Docker Entrypoint Script",
          "Sending a Slack Message Using a Docker Container",
          "An Overview to a Simple NodeJS Application",
          "Using Service Containers in GitHub Actions",
          "Publishing Docker Images Using GitHub Actions"
        ],
        "Creating & Publishing Our Own Actions": [
          "Actions Overview",
          "Creating a Simple JavaScript Action",
          "Compiling The Action's JavaScript Code into One File",
          "Creating a Simple Docker Action",
          "Bundling Steps into an Action with Composite Actions",
          "Writing a Docker Action for Sending a Slack Message Using PHP (Part 1)",
          "Writing a Docker Action for Sending a Slack Message Using PHP (Part 2)",
          "Using an Official GitHub Template for Writing JavaScript Actions",
          "Creating a JavaScript Action for Opening Github Issues",
          "Creating Releases & Publishing Our Action to the Marketplace",
          "Automating Release Management For Our Action"
        ],
        "Let's Create a Complete CI/CD Workflow": [
          "Introduction the Application that We are Going to Automate",
          "Let's Discuss Our Workflow Plan",
          "Using Flagsmith to Add Feature Flags to Our Project",
          "Deploying Our App to AWS Elastic Beanstalk",
          "Configuring Repository Protection Rules & Environments",
          "Creating a Workflow to Test Our App",
          "Fixing and Running Our Test Workflow & CodeQL on Pull Request",
          "Caching Playwright Browsers to Make Our Workflow Faster",
          "Creating a Workflow to Deploy to AWS Elastic Beanstalk (Part. 1)",
          "Creating a Workflow to Deploy to AWS Elastic Beanstalk (Part. 2)",
          "Testing Our Deploy Workflow",
          "Adding Changesets to Handle our App's Versioning",
          "Creating a Version Pull Request on Pushing Changeset Files",
          "Testing & Deploying to Staging & Production when Merging Version Pull Requests",
          "Quick Note",
          "Deploying Pull Request Branches to Isolated AWS Environments (Part 1)",
          "Deploying Pull Request Branches to Isolated AWS Environments (Part 2)",
          "Terminating Pull Request AWS Environments",
          "Detecting Errors Before Committing Our Code Using Git Hooks",
          "Quick Note",
          "Using OIDC for AWS Authorization Instead of Storing Secrets",
          "Customizing the OIDC JWT Token Subject for More Granularity",
          "Quick Note"
        ],
        "Conclusion": [
          "More Reading"
        ]
      },
      "requirements": [
        "You should have basic GitHub knowledge",
        "Some lectures will require some basic docker knowledge (it's not necessary if you want to skip it)",
        "Creating custom actions requires JavaScript and/or docker knowledge",
        "For some sections some stuff must be installed on your machine including: nodejs, npm, docker, composer, php.",
        "The last section requires an AWS account if you follow actively and you might be charged."
      ],
      "description": "NOTE: The last section in the course requires an AWS account and you might be charged if you follow the section actively. Check the promo video for more information.\n\n\nGitHub recently released GitHub Actions\", a CI service competitor to services like TravisCI and CircleCI. GitHub Actions however has the edge of being natively integrated with your GitHub repository. In addition to that, thanks to GitHub's popularity; GitHub Actions has the advantage of having large ecosystem and community. Using GitHub Actions you will find a lot of official and community pre-made workflows and also the actions marketplace. In the actions marketplace you can find tons of actions which are reusable pieces of code that you can use in your workflows to perform certain tasks like deploying code, interacting with API's, sending SMS's, etc..\n\n\nLearn everything you need to know in order to create GitHub workflows & Actions.\nIn this course we will comprehensively explore GitHub's CI service. We are going to learn what GitHub workflows & actions are. And we will discover everything we can do in a GitHub workflow including how to run commands, use actions, trigger workflows, build matrices, reuse workflows, use docker and more.  We are going to learn how to write custom actions and publish them to the marketplace so that other people can use them.  Finally, we will use what we learned to create a real-world example of a CI/CD workflow where we will test, build, deploy a web application to AWS.\n\n\nLet's take a look at what will be discussed in each section in more detail:\nSection 1\nIn section 1 we will have a conceptual introduction to Github Actions. We are going to learn what terms like workflows, actions, jobs, steps and other terms mean. We are also going to learn about YAML which is the format used to write workflows in GitHub. Then we will start writing our first workflow and take a look at basic things like writing commands, using different shells and using actions including the most common action which is the checkout action.\nSection 2\nIn section 2 we will get a bit deeper and learn different ways that we can use in order to trigger a workflow to run. This includes GitHub events like push and pull_request, external events, manual events and CRON schedules. We will also see how to make a workflow only run for certain branches, tags and directory paths.\nSection 3\nIn this section we will take a look at how to write expressing in a workflow. And how to use context information and functions in our workflows. We will also see how can we use default environment variables and also how to add custom environment variables. We will discover how to encrypt sensitive information and also how to encrypt and decrypt sensitive files that we don't won't to push to our repository. Moreover, we will take a look at the GITHUB_TOKEN environment variable and how to use it to perform certain actions and how to customize its permissions.\nSection 4\nIn section 4 we will see how can we setup matrices, a matrix is a way to run a job multiple times but using different configurations. We will also learn about concurrency and how to reuse our workflows to avoid duplication. We are also going to take a look at caching and uploading and downloading artifacts.\nSection 5\nIn section 5 we are going to discuss using docker in GitHub Actions. We are going to see how to use docker images in our jobs and steps. We are also going to learn about running multiple service containers together and see how to communicate between them. Finally we are going to see how can we automate publishing docker images to DockerHub and the GitHub Container Registry.\nSection 6\nDuring the course we will use some actions that are available in the marketplace. But in this section we are going to learn how to create our own actions. Actions can be created using JavaScript or using Docker. In this section we are going to learn about both ways and then we will create a JavaScript action that opens GitHub issues and a docker action that sends a slack message which we will write using PHP. We will also discover another way of writing actions which is Composite Actions.\nSection 7\nIn section 5 we will finally use our knowledge to create a real-world CI/CD example. In this section we are going to use an Amazon service called Elastic Beanstalk to deploy our app. We are going to use feature flags to continuously integrate and deploy our app without exposing all features to the end user. We are going to automate versioning our app and generating changelogs. In addition to that, we are going to add the option to deploy pull request branches to an isolated AWS environment and also add the option to destroy that environment. We are finally going to see how to use OpenID Connect to access AWS from our workflows without having to store any credentials. This section requires an AWS account and you might be charged if you follow the section actively.",
      "target_audience": [
        "Developers/Software engineers who need to learn everything about GitHub Workflows & Actions.",
        "Developers/Software engineers who want to create a CI/CD workflow using GitHub",
        "Developers/Software engineers who would like to learn how to create and publish GitHub Actions."
      ]
    },
    {
      "title": "AWS Cloud Architecture For Java Spring Boot Developers",
      "url": "https://www.udemy.com/course/aws-java/",
      "bio": "Design, Deploy, Secure Applications with VPC. Subnets, Auto Scaling, Load Balancing, ECS Fargate, CI/CD Pipelines",
      "objectives": [
        "Learn AWS cloud fundamentals tailored for Java Spring developers.",
        "Architect highly available, scalable, reliable, and secure production-grade infrastructure on AWS.",
        "Understand AWS services from three perspectives: end-users, security (against hackers), and developers (CI/CD).",
        "Achieve proficiency in deploying containerized Java Spring applications on AWS.",
        "Implement content delivery (CloudFront), edge locations, path-based routing, load balancing, and health checking.",
        "Secure infrastructure using VPC, subnets, NAT, security groups, IAM roles, and bucket policies.",
        "Master CI/CD pipelines with AWS services like CodeCommit, ECR, CodeBuild, and CodePipeline.",
        "Gain practical experience through hands-on labs (80% hands-on) and real-world scenarios.",
        "Prepare confidently to discuss AWS concepts and solutions in interviews."
      ],
      "course_content": {
        "Introduction": [
          "Before You Enroll...",
          "AWS Account Setup / Billing Alert"
        ],
        "EC2 / Elastic Computing Cloud": [
          "Region / Availability Zone / Edge Locations",
          "EC2",
          "Launching An EC2 Instance",
          "SSH From Local",
          "Running Nginx",
          "*** Resource *** - Creating AMI Commands",
          "Creating AMI",
          "Security Groups - Part 1",
          "*** Resource *** - Docker Command For Postgres",
          "Security Groups - Part 2",
          "Self Referencing Security Groups",
          "User Data",
          "Summary",
          "*** Resource *** - Course Summary",
          "Quiz"
        ],
        "S3 / Simple Storage Service": [
          "Introduction To S3",
          "Data Breaches",
          "Creating S3 Bucket",
          "*** Resource *** - S3 Bucket Policy",
          "Bucket Policy - Part 1",
          "Bucket Policy - Part 2",
          "Bucket Configuration / Encryption",
          "S3 Usecases",
          "Summary",
          "Quiz"
        ],
        "IAM / Identity Access Management": [
          "Introduction To IAM",
          "Creating An User",
          "User Groups",
          "*** Resource *** - AWS CLI",
          "IAM Role",
          "*** Resource *** - Local Development",
          "Access Keys For Local Development",
          "S3 SDK Demo",
          "How SDK Works",
          "Access Key Best Practices",
          "Root Account Best Practices",
          "Summary",
          "Quiz"
        ],
        "RDS / Relational Database Services": [
          "Introduction",
          "Creating RDS DB Instance",
          "RDS Demo - Part 1",
          "*** Resource *** - RDS SQL Commands",
          "RDS Demo - Part 2",
          "RDS Demo - Part 3 - Read Replicas",
          "RDS Demo - Part 4 - Restoring Snapshots & Resource Cleanup",
          "Summary",
          "Quiz"
        ],
        "ALB / Application Load Balancer": [
          "Introduction To ALB",
          "*** Resource *** - Docker Commands",
          "Setting Up Applications",
          "Creating Target Groups",
          "Creating ALB",
          "Listener Rules",
          "ALB Demo",
          "Resource Cleanup",
          "Summary",
          "Quiz"
        ],
        "CloudFront / Route 53": [
          "Introduction To CloudFront",
          "*** Resource *** - Static Content",
          "Bucket With Static Content",
          "CloudFront Distribution",
          "CloudFront Demo",
          "Cache Invalidation",
          "[Optional] - Integrating With R53",
          "Multiple Origins",
          "[FAQ] - Why Do We Have Multiple Path Based Routing?",
          "Resource Cleanup",
          "Summary",
          "Quiz"
        ],
        "VPC / Virtual Private Cloud": [
          "Introduction To VPC",
          "VPC Subnets",
          "Internet Gateway",
          "Importance Of Public IP",
          "Recommended VPC Architecture",
          "CIDR",
          "Custom VPC Creation",
          "Route Table",
          "Challenges With Private Subnets",
          "SSH Into Private Subnet Instances",
          "NAT Gateway",
          "NACL",
          "Shared Responsibility Model",
          "[FAQ] - Multiple Path Based Routing Clarification",
          "Plan For The Rest Of The Course",
          "Resource Cleanup",
          "Summary",
          "Quiz"
        ],
        "Spring Boot / Application Development": [
          "Application Overview",
          "*** Resource ***",
          "Movie Service - Project Setup",
          "Movie Service -Entity / DTO / Repository",
          "Movie Service - Service & Controller",
          "*** Movie Service Resource *** - DB Init SQL",
          "Movie Service - Integration Test Setup",
          "Movie Service - Integration Test",
          "Test Movie Service",
          "*** Resource *** - Dockerfile",
          "Dockerfile",
          "Customer Service - Project Setup",
          "Customer Service - Entity / DTO / Repository",
          "Customer Service - Controller Advice",
          "Customer Service - Movie Client",
          "Customer Service - Service & Controller",
          "*** Customer Service Resource *** - DB Init SQL & Maven Dependency",
          "Customer Service - Integration Test Setup",
          "Customer Service - Integration Test",
          "*** Resource *** - End To End Testing In Local",
          "End To End Testing In Local",
          "What About Front End?"
        ],
        "Architecting In AWS Cloud / ECS with Fargate": [
          "Introduction",
          "*** Resource *** - Debugging Guides",
          "VPC / Subnets / Security Groups",
          "ALB / Target Groups",
          "S3 / CloudFront",
          "*** Resource *** - DB Init SQL",
          "RDS",
          "Secrets Manager",
          "*** Resource *** - Application / Secrets Manager Dependency",
          "Application & Secrets Manager Integration",
          "ECR",
          "Pushing Docker Images",
          "Introduction To ECS with Fargate",
          "ECS Cluster Creation",
          "Task Definitions",
          "Inter services Communication",
          "Deploying Apps",
          "Bringing Up RDS / NAT / Apps",
          "End To End API Demo",
          "*** Resource *** - Front End",
          "End To End Demo With UI",
          "[Optional] - Integrating With R53 Domain",
          "Summary"
        ]
      },
      "requirements": [
        "No AWS knowledge is required. We will start from scratch",
        "Java/Spring Boot/Docker knowledge is required",
        "Heads Up on Costs: While this course focuses on using AWS services to build applications, be aware that some services will incur credit card charges. (Check the first lecture)"
      ],
      "description": "Take your Java Spring Boot development skills to the cloud and build robust, scalable applications!\nThis comprehensive course equips Java Spring Boot developers with the essential knowledge to design and deploy highly available, scalable, secure, and reliable applications on the AWS cloud platform. No prior AWS experience is necessary!\nWe'll begin with cloud computing fundamentals and progressively guide you through the core AWS services crucial for your success:\nCompute: Explore both EC2 instances and ECS Fargate for containerized deployments\nStorage: Explore object storage with S3 for efficient data management.\nIdentity & Access Management (IAM): Implement robust security measures to protect your AWS resources.\nDatabases: Leverage RDS for managing relational databases effectively.\nLoad Balancing: Uncover the power of Application Load Balancers (ALB) to ensure high availability for your applications.\nContent Delivery Network (CDN): Optimize global content delivery with CloudFront.\nDNS Services: Learn to manage domain names effectively using Route 53.\nNetworking: Gain a comprehensive understanding of VPCs, Subnets, NAT Gateways, and Route Tables to build secure and scalable network architectures.\nAuto Scaling: Implement automated scaling mechanisms to dynamically adjust resources based on application demands.\nEmbrace modern CI/CD practices! We'll delve into CodeBuild, CodeCommit, and CodePipeline to establish automated deployment workflows and ensure smooth rolling updates with zero downtime deployments.\nBy the end of this course, you'll be equipped to:\nDesign and deploy highly available, scalable, and secure Cloud Infrastructure on AWS\nDeploy Java / Spring Boot application\nImplement containerization with ECS Fargate for efficient resource utilization\nLeverage CI/CD pipelines for automated application deployments and updates\nAutoScaling\nManage infrastructure with core AWS services like S3, IAM, RDS, and more.\nBuild a strong foundation for your future certification.",
      "target_audience": [
        "Java / Spring Developers who want to learn AWS Cloud"
      ]
    },
    {
      "title": "Building .NET Windows Applications using C# and WinForms",
      "url": "https://www.udemy.com/course/developing-gui-applications-with-windows-forms/",
      "bio": "Learn to develop GUI Applications with real time case studies and examples.",
      "objectives": [
        "Get complete knowledge of .NET Framework and its internals.",
        "Build GUI applications using .NET Framework and WinForms API.",
        "Build and use the reusable components and controls.",
        "Working with Model and Modeless Dialog",
        "How to build Graphics based application",
        "Working with Timer, TreeView and ListView"
      ],
      "course_content": {
        "Framework-CLR": [
          "Framework-CLR"
        ],
        "Developing GUI Application Using WinForms": [
          "WinForms Working With Controls"
        ],
        "WinForms Working With Controls": [
          "WinForm Working With Controls"
        ],
        "Container Control": [
          "Container Control"
        ],
        "Graphics And GDI Objects": [
          "Graphics And GDI Objects"
        ],
        "Interactive Drawing Examples": [
          "Interactive Drawing Examples"
        ],
        "Menu Strip, Context Menu Strip, Tool Strip And Status Strip": [
          "Menu Strip, Context Menu Strip, Tool Strip And Status Strip"
        ],
        "Model Dialog And Notepad Application": [
          "Model Dialog And Notepad Application"
        ],
        "Modeless Dialog Box": [
          "Modeless Dialog Box"
        ],
        "MDI Interface": [
          "MDI Interface"
        ]
      },
      "requirements": [
        "Basic Knowledge on C# Language"
      ],
      "description": "This course developed by Mr. Sandeep Soni (Microsoft certified trainer and C# corporate training expert) will provide you with an efficient way to gain an excellent programming knowledge. He has discussed some of the best practical examples for beginners to better understand the course.\nMr.Sandeep has worked closely with many IT companies and helped them with their technology resources training needs. He considers this to be the best part of his profession and he enjoys the most because he gets to meet new people; get involved in the ever changing technology needs and provide them with optimum solution to the problems they face in application development. This is how he keeps himself updated with the latest technology in the industry.\n\nBy the end of this course you should able to\nGet complete knowledge of MS.NET Framework and its internals.\nUse VS.NET - Integrated Development Environment Basic Controls\nPanels and Layouts\nDrawing and GDI Devices\nMenuStrip, ToolStrip and Context Menu Strip\nModel and Modeless Dialog boxes\nMultiple Document Interface (MDI)\nForm Inheritance\nBuilding Login Form\nWorking with Resource Files and Settings\nNotify Icon Controls\nUsing Components like Timer, FileSystemWatcher, Process, BackgroundWorker\nDrag and Drop\nWorking with Advanced controls like TreeView and ListView",
      "target_audience": [
        "This course is for the students who want to learn Winforms to build real time projects",
        "This is not the Introductory course. in case you are not familiar with C#, you can enroll for our C# Language basics course."
      ]
    },
    {
      "title": "Certified AI Engineering Masterclass: From Zero to AI Hero",
      "url": "https://www.udemy.com/course/ai-engineering-masterclass-from-zero-to-ai-hero/",
      "bio": "Master AI Engineering: Build, Train, and Deploy Scalable AI Solutions with Real-World Projects and Hands-On Learning.(AI",
      "objectives": [
        "Build AI models using Python, TensorFlow, and PyTorch to create intelligent systems capable of solving real-world problems",
        "Preprocess, clean, and analyze complex datasets to ensure high-quality input for machine learning and AI model training",
        "Train, evaluate, and optimize machine learning models for tasks like regression, classification, and clustering",
        "Design, implement, and fine-tune neural networks, including CNNs and RNNs, for advanced AI applications",
        "Apply Natural Language Processing (NLP) techniques to analyze, interpret, and generate human-like text data",
        "Leverage transfer learning to adapt pre-trained AI models for new tasks, reducing development time and resources",
        "Deploy AI models using scalable APIs and containerization tools like Docker for seamless integration into applications",
        "Monitor AI model performance, detect data drift, and establish retraining workflows for consistent reliability",
        "Solve real-world business and technical challenges using AI-driven approaches and intelligent systems",
        "Develop end-to-end AI projects, from ideation and prototyping to deployment and long-term maintenance"
      ],
      "course_content": {
        "Introduction to Course": [
          "Introduction to AI Engineering Masterclass: From Zero to AI Hero",
          "Resources for the Course - Slides and Code Files"
        ],
        "Week 1: Python Programming Basics": [
          "Introduction to Week 1 Python Programming Basics",
          "Day 1: Introduction to Python and Development Setup",
          "Day 2: Control Flow in Python",
          "Day 3: Functions and Modules",
          "Day 4: Data Structures (Lists, Tuples, Dictionaries, Sets)",
          "Day 5: Working with Strings",
          "Day 6: File Handling",
          "Day 7: Pythonic Code and Project Work"
        ],
        "Week 2: Data Science Essentials": [
          "Introduction to Week 2 Data Science Essentials",
          "Day 1: Introduction to NumPy for Numerical Computing",
          "Day 2: Advanced NumPy Operations",
          "Day 3: Introduction to Pandas for Data Manipulation",
          "Day 4: Data Cleaning and Preparation with Pandas",
          "Day 5: Data Aggregation and Grouping in Pandas",
          "Day 6: Data Visualization with Matplotlib and Seaborn",
          "Day 7: Exploratory Data Analysis (EDA) Project"
        ],
        "Week 3: Mathematics for Machine Learning": [
          "Introduction to Week 3 Mathematics for Machine Learning",
          "Day 1: Linear Algebra Fundamentals",
          "Day 2: Advanced Linear Algebra Concepts",
          "Day 3: Calculus for Machine Learning (Derivatives)",
          "Day 4: Calculus for Machine Learning (Integrals and Optimization)",
          "Day 5: Probability Theory and Distributions",
          "Day 6: Statistics Fundamentals",
          "Day 7: Math-Driven Mini Project – Linear Regression from Scratch"
        ],
        "Week 4: Probability and Statistics for Machine Learning": [
          "Introduction to Week 4 Probability and Statistics for Machine Learning",
          "Day 1: Probability Theory and Random Variables",
          "Day 2: Probability Distributions in Machine Learning",
          "Day 3: Statistical Inference - Estimation and Confidence Intervals",
          "Day 4: Hypothesis Testing and P-Values",
          "Day 5: Types of Hypothesis Tests",
          "Day 6: Correlation and Regression Analysis",
          "Day 7: Statistical Analysis Project – Analyzing Real-World Data"
        ],
        "Week 5: Introduction to Machine Learning": [
          "Introduction to Week 5 Introduction to Machine Learning",
          "Day 1: Machine Learning Basics and Terminology",
          "Day 2: Introduction to Supervised Learning and Regression Models",
          "Day 3: Advanced Regression Models – Polynomial Regression and Regularization",
          "Day 4: Introduction to Classification and Logistic Regression",
          "Day 5: Model Evaluation and Cross-Validation",
          "More Than Accuracy: Communicating Model Performance to Non-Experts",
          "Day 6: k-Nearest Neighbors (k-NN) Algorithm",
          "Day 7: Supervised Learning Mini Project"
        ],
        "Week 6: Feature Engineering and Model Evaluation": [
          "Introduction to Week 6 Feature Engineering and Model Evaluation",
          "Day 1: Introduction to Feature Engineering",
          "Day 2: Data Scaling and Normalization",
          "Day 3: Encoding Categorical Variables",
          "Day 4: Feature Selection Techniques",
          "Why This, Not That: Explaining Feature Importance to Domain Experts",
          "Day 5: Creating and Transforming Features",
          "Day 6: Model Evaluation Techniques",
          "Day 7: Cross-Validation and Hyperparameter Tuning"
        ],
        "Week 7: Advanced Machine Learning Algorithms": [
          "Introduction to Week 7 Advanced Machine Learning Algorithms",
          "Day 1: Introduction to Ensemble Learning",
          "Day 2: Bagging and Random Forests",
          "Day 3: Boosting and Gradient Boosting",
          "Day 4: Introduction to XGBoost",
          "Day 5: LightGBM and CatBoost",
          "Day 6: Handling Imbalanced Data",
          "Day 7: Ensemble Learning Project – Comparing Models on a Real Dataset"
        ],
        "Week 8: Model Tuning and Optimization": [
          "Introduction to Week 8 Model Tuning and Optimization",
          "Day 1: Introduction to Hyperparameter Tuning",
          "Day 2: Grid Search and Random Search",
          "Day 3: Advanced Hyperparameter Tuning with Bayesian Optimization",
          "Smarter Search: Defending Hyperparameter Optimization Strategy",
          "Day 4: Regularization Techniques for Model Optimization",
          "Day 5: Cross-Validation and Model Evaluation Techniques",
          "Day 6: Automated Hyperparameter Tuning with GridSearchCV and RandomizedSearchCV",
          "Day 7: Optimization Project – Building and Tuning a Final Model"
        ],
        "Week 9: Neural Networks and Deep Learning Fundamentals": [
          "Introduction to Week 9 Neural Networks and Deep Learning Fundamentals",
          "Day 1: Introduction to Deep Learning and Neural Networks",
          "Day 2: Forward Propagation and Activation Functions",
          "Day 3: Loss Functions and Backpropagation",
          "Day 4: Gradient Descent and Optimization Techniques",
          "Day 5: Building Neural Networks with TensorFlow and Keras",
          "Day 6: Building Neural Networks with PyTorch",
          "Day 7: Neural Network Project – Image Classification on CIFAR-10",
          "Build with Intent: Justifying Your Neural Network Architecture"
        ]
      },
      "requirements": [
        "Basic Programming Knowledge: Familiarity with Python is recommended but not mandatory.",
        "Curiosity and Enthusiasm: A passion for AI and a willingness to learn are essential.",
        "Access to a Computer: A computer with internet access and sufficient processing power for AI tasks.",
        "No Prior AI Experience Required: The course starts from foundational concepts and gradually advances.",
        "Basic Math Skills: Understanding high school-level math concepts (e.g., algebra, basic statistics).",
        "A Stable Internet Connection: For accessing course materials, tools, and hands-on projects.",
        "Optional Tools: Installation of Python, Jupyter Notebook, and relevant AI libraries (guidance provided in the course).",
        "Open Mindset: Be ready to explore, experiment, and build real-world AI applications."
      ],
      "description": "Welcome to the AI Engineering Masterclass: From Zero to AI Hero! This comprehensive AI course is designed to take you on an exciting journey from an AI beginner to a confident AI Engineer, equipped with the skills to build, train, and deploy Artificial Intelligence solutions. Whether you're starting from scratch or looking to solidify your AI expertise, this AI Masterclass provides the step-by-step roadmap you need to succeed.\nIn this AI Engineering Masterclass, you'll begin with the foundations of AI, exploring Python programming, data preprocessing, and the basics of machine learning. As you progress, you'll dive into advanced AI topics such as neural networks, deep learning, natural language processing (NLP), and computer vision. You’ll also gain hands-on experience with cutting-edge AI frameworks like TensorFlow, PyTorch, and Hugging Face to create production-ready AI solutions.\nThis AI Masterclass emphasizes practical AI skills, with real-world projects embedded into every module. You'll learn to tackle real business problems using AI technologies, optimize AI models, and deploy scalable solutions.\nWhy Choose the AI Engineering Masterclass?\nBeginner-Friendly AI Curriculum: Start from scratch and grow into an expert\nHands-On AI Projects: Build real AI applications for real-world challenges\nMaster AI Frameworks: Learn TensorFlow, PyTorch, and Hugging Face\nComprehensive AI Training: Cover Python, Machine Learning, Deep Learning, NLP, and AI Deployment\nZero to AI Hero Roadmap: Structured learning path for complete AI mastery\nBy the end of this AI Engineering Masterclass, you'll not only have mastered AI engineering skills, but you'll also be equipped to innovate, lead AI projects, and drive transformation with AI solutions in your organization or startup.\nWhether you're an aspiring AI Engineer, an AI enthusiast, or someone looking to break into the Artificial Intelligence industry, this AI Masterclass is your ultimate resource to go From Zero to AI Hero.\nJoin the AI Revolution Today – Enroll in the AI Engineering Masterclass: From Zero to AI Hero and take the first step towards mastering AI!",
      "target_audience": [
        "Aspiring AI Engineers: Individuals looking to kickstart a career in AI with hands-on skills and real-world projects.",
        "Data Scientists & Analysts: Professionals aiming to expand their expertise with AI model building and deployment.",
        "Software Developers: Programmers eager to integrate AI capabilities into their applications and systems.",
        "Career Changers: Individuals from non-technical backgrounds ready to transition into the AI industry.",
        "Graduate Students: Students in data science, computer science, or related fields seeking practical AI knowledge.",
        "Tech Entrepreneurs: Founders and CTOs exploring AI for product innovation and business growth.",
        "AI Enthusiasts: Anyone passionate about AI and looking to build intelligent systems from scratch.",
        "Business Professionals: Leaders aiming to understand AI for strategic decision-making and organizational growth."
      ]
    },
    {
      "title": "Getting Started with Web3 Development",
      "url": "https://www.udemy.com/course/getting-started-with-ethereum-solidity-development/",
      "bio": "Develop your first decentralized application from scratch on the Ethereum blockchain with Solidity",
      "objectives": [
        "Understand the basic philosophy behind the blockchain and distributed/decentralized applications",
        "The basics of how a blockchain generally works, just enough to be able to use it as a development platform",
        "Develop a web3 app, create a project, deploy it in production, write smart contracts, unit test them, and create a user interface for them",
        "How to combine the right tools to put together a consistent and real world pragmatic development environment",
        "The fundamentals of the Solidity smart contract language",
        "How to use the Truffle build and testing framework (covers Truffle 4)",
        "How to deploy a decentralized app to various Ethereum instances (testrpc, private chain, test chain, main net)",
        "How to unit test smart contracts"
      ],
      "course_content": {
        "Commencez ici": [
          "Introduction"
        ],
        "Why the Blockchain?": [
          "How Do You Represent Value?",
          "The Internet of Value",
          "Blockchain Use Cases"
        ],
        "What is a blockchain (and what it's not)?": [
          "The 3-layer Model",
          "Blockchain Design Goals",
          "Blockchain Implementations",
          "Blockchain Instances",
          "Public Blockchains as Tricameral Systems",
          "Blockchain Key Components 1/2",
          "Blockchain Key Components 2/2",
          "What a Blockchain Is Not"
        ],
        "Cryptography 101": [
          "Hashing Functions",
          "Asymmetric Cryptography",
          "Merkle Trees"
        ],
        "Installing the Development Environment (Truffle 4)": [
          "Course Update for Truffle 5",
          "MacOS environment setup",
          "Installing Ganache on Windows 8",
          "Windows environment setup",
          "Linux environment setup",
          "Setting up a private node on MacOS",
          "Setting up a private node on Windows",
          "Setting up a private node on Linux",
          "Troubleshooting your private node",
          "Setting up MetaMask on all environments"
        ],
        "My First Smart Contract: Greetings (Truffle 4)": [
          "Deploying a smart contract without Truffle (1/2)",
          "Deploying a smart contract without Truffle (2/2)",
          "Working around the truffle init error in the next lesson",
          "Deploying a smart contract with Truffle (1/3)",
          "Deploying a smart contract with Truffle (2/3)",
          "Deploying a smart contract with Truffle (3/3)",
          "Blocks and transactions",
          "Gas",
          "OpCodes",
          "Sending ether"
        ],
        "How do you design and develop a decentralized application? (Truffle 4)": [
          "ChainList application preview",
          "Sell an article: smart contract (1/2)",
          "Sell an article: smart contract (2/2)",
          "Sell an article: tests (1/2)",
          "Sell an article: tests (2/2)",
          "Sell an article: frontend preparation (1/2)",
          "Sell an article: frontend preparation (2/2)",
          "Sell an article: display article in the frontend (1/3)",
          "Sell an article: display article in the frontend (2/3)",
          "Sell an article: display article in the frontend (3/3)",
          "Sell an article from the frontend (1/2)",
          "Sell an article from the frontend (2/2)",
          "Sell an article through MetaMask",
          "Sell an article: smart contract with event (1/3)",
          "Sell an article: smart contract with event (2/3)",
          "Sell an article: smart contract with event (3/3)",
          "Sell an article: events in the frontend (1/2)",
          "Sell an article: events in the frontend (2/2)",
          "Unknown transaction when migrating with Truffle 4.0.4",
          "Deploy ChainList to a private network (1/3)",
          "Deploy ChainList to a private network (2/3)",
          "Deploy ChainList to a private network (3/3)",
          "Buy an article: smart contract (1/3)",
          "Buy an article: smart contract (2/3)",
          "Buy an article: smart contract (3/3)",
          "Buy an article: tests (1/3)",
          "Buy an article: tests (2/3)",
          "Buy an article: tests (3/3)",
          "Buy an article: frontend (1/3)",
          "Buy an article: frontend (2/3)",
          "Buy an article: frontend (3/3)",
          "List of articles: smart contract (1/4)",
          "List of articles: smart contract (2/4)",
          "List of articles: smart contract (3/4)",
          "List of articles: smart contract (4/4)",
          "List of articles: tests (1/5)",
          "List of articles: tests (2/5)",
          "List of articles: tests (3/5)",
          "List of articles: tests (4/5)",
          "List of articles: tests (5/5)",
          "List of articles: frontend (1/3)",
          "List of articles: frontend (2/3)",
          "List of articles: frontend (3/3)",
          "Smart contract deactivation (1/2)",
          "Smart contract deactivation (2/2)",
          "Function modifiers",
          "Smart contract inheritance",
          "Deploying the frontend",
          "Deploying smart contracts to the Rinkeby test net",
          "Deploying smart contracts to the main net",
          "Deploying to a test node with an Infura remote node"
        ],
        "Truffle 5 Update": [
          "Before we start",
          "Updating the development environment",
          "Updating contracts",
          "Adapting happy path tests",
          "Adapting exception tests",
          "Adapting the frontend",
          "ChainList Update Transcript"
        ],
        "Conclusion": [
          "Congratulations"
        ],
        "Bonus": [
          "The Byzantium Hardfork"
        ]
      },
      "requirements": [
        "You should already have developed a couple of software applications, backend, frontend or both",
        "You need a Mac, Linux or Windows 10 machine to develop the sample application",
        "A basic understanding of a programming language like Javascript is definitely a plus"
      ],
      "description": "February 2018 Update\nWe released the first version of this course in September 2017. Back then, the latest version of Truffle was version 3, and the best Ethereum node emulator was testrpc, on the command line.\nThen, in November 2017, the Truffle team released both Truffle 4 and a new user interface for testrpc called Ganache. Those tools had a big impact on the development lifecycle, so we took this opportunity to completely rewrite and re-shoot the practical part of this course.\nWe also took this opportunity to integrate most of the comments and feedbacks we got in the Q&A section of this course. So all the details you needed to troubleshoot issues are now part of the content.\nThis results in a consequent update with quite a few improvements:\nFull Truffle 4 coverage, including Truffle debug and Truffle develop\n\nFull Ganache coverage\nMetaMask workarounds, tips and tricks\nAll the content has been tested on MacOS, Linux and Windows (PowerShell)\nCode is not copy-pasted anymore, we type everything live to make it easier to follow along\nNote that the old content will remain online for a few weeks, and then we will unpublish them so that students don't need to watch all the old content to complete the course and get the Udemy certificate.\nIf you notice any issue, bug, outdated content, missing link or resource, please let us know in the Q&A section of this course.\nWelcome to \"Become a Blockchain Developer with Ethereum and Solidity\"!\nThis course is a complete introduction to decentralized application (Dapp) development on the Ethereum blockchain using the Solidity language and the Truffle build framework.\n\nNo need to know anything about the blockchain, you should just have some basic software development experience. Whether you have already written some code for backend, web or mobile applications, it should be enough to become a blockchain developer thanks to this course.\nThe blockchain is all the rage these days, and there is a lot of theoretical or anticipative talk around it, but this course will help you get your hands dirty with actual code in order to build your first decentralized application. This is the kind of skill that can get you an actual job as a blockchain developer, something that is in skyrocketing demand right now.\nHave you ever looked back on the nineties, thinking you would have loved to be a part of the web revolution. Well, stop dreaming: the blockchain is here and it promises to be even bigger than the web or even the mobile revolution.\nWhat we cover\nWe briefly cover the philosophy of the blockchain, both as a crypto-currency system and as a development platform\nThen we will explain how blockchains work, what are their main components and how its ecosystem is structured\nAfter that we quickly go over the main cryptographic tools you need to understand\nWe continue with a description of the perfect development environment, including tools that are used by most professional blockchain developers\nAnd the biggest part of the course is dedicated to guiding you through the iterative creation, development, testing and deployment of the ChainList decentralized application\nThe tools we use\nEthereum of course\nThe Metamask Chrome extension\nThe Solidity smart contract language\nThe Truffle build and test framework (Truffle 4)\nThe Ganache Ethereum node emulator\nGithub Pages\nAtom (text editor)\nThe Rinkeby test network\nWe deliberately don't reinvent the wheel or develop our own build tools because it didn't seem very pragmatic to do that. That's why we demonstrate the use of development tools like Truffle and Ganache that offer a lot of very powerful features, even though they evolve very often.\nMost of the videos were shot on a Mac, but we give detailed instructions on how to set up your environment on Linux and Windows, and all the other lessons have been tested and adapted with a few OS-specific instructions.",
      "target_audience": [
        "Anybody with a little bit of backend and/or frontend software development experience"
      ]
    },
    {
      "title": "Software Development: Better Requirements Gathering Skills",
      "url": "https://www.udemy.com/course/software-requirements-gathering/",
      "bio": "Boost Your Software Requirements Gathering Skills Today! Learn The Techniques That Work!",
      "objectives": [
        "Identify the correct questions to ask during requirements gathering",
        "Effectively manage the requirements gathering process",
        "Handle 'Single Interviews', 'Group Interviews' and 'Focus Groups'.",
        "Anticipate 'problem areas' and how to deal with them",
        "Differentiate 'Functional Requirements' from 'Non-Functional Requirements'",
        "How to design software for Multiple Departments",
        "Manage the customers expectations from day one",
        "Choose the right path to delivering software on time and on budget",
        "Avoid Project Overrun by clearly defining what is in scope and what is not!",
        "Complete the accompanying template files",
        "Free 'Software Requirements Specification' Template",
        "Free 'Feasibility Guide' Template"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "What Are Software Requirements?",
          "Requirement Types"
        ],
        "Building An Effective Skillset": [
          "Feasibility Study",
          "Feasibilty Quiz",
          "Gathering Requirements",
          "Requirements Gathering - Getting Started",
          "Standard Operating Documents",
          "Asking The Right Questions",
          "Managing Requirements",
          "Understanding Interactions",
          "Interactions Quiz",
          "Typcial Architectures",
          "Requirements Specification",
          "Requirements Validation",
          "Document Structures"
        ],
        "Conclusion and Take-aways": [
          "Conclusion",
          "Feedback"
        ]
      },
      "requirements": [
        "You do not need any tools or experience to take this course!",
        "This course covers all topics in easily digestible lectures",
        "This course will teach you the lessons that have taken years to learn"
      ],
      "description": "Whether you are a software developer, architect, project manager or just someone who codes for fun; knowing what to write is just as hard as knowing how to write it. 'Software requirements gathering' is the process of capturing the objectives, goals and wishes of the customer upfront and early-on in the Software Development Life Cycle (SDLC).\nThis course is accompanied by several templates and document files, that you can use as a guideline during your next requirements gathering project. There is a feasibility study template, a software specification template, a terminology guide and a couple more.\nThis course will get you 'asking the right questions' early in the process, saving you time, money and effort. You will learn how to 'manage the requirements process' from start to finish. How to differentiate between 'Functional and Non-functional requirements'. How to 'capture and record requirements'. Plus, you will get an insight to how one system is used throughout an organization.\n\nThis course will guide you through the entire range of 'Scoping Documents', 'Technical Specifications', 'Feasibility Studies' and 'Requirements Gathering'.\nYour time is precious and that matters to me, this course has been arranged into small lectures that you can consume when you have a spare few minutes. They follow-on from each other, making the entire course watchable in one sitting. you can be sure that the project you embark on is the same as the project you deliver. On time and on budget.\nCapturing Software Requirements, Meeting Deliverables, Exceeding Expectations and Documenting the whole process can take years to learn, this stuff is not taught in colleges, it is learned in the trenches. So save yourself time, get the insider information on the topics that matter. By the end of the course, you will have amassed a large number of key takeaways and several useful template files that together will take your software development skills to the next level.\nThis course is for life, meaning you can learn whenever you have the time. You have access to the discussions area, where I will personally answer any questions you have on this course. This course is also backed by a 30 day money back guarantee.\nIf you need a deeper understanding of the software development life cycle. Are about to begin work on a new software project or embark on a prospective customer collaboration? this course will guide you through the process.\nI look forwards to seeing you on the inside.\nKind Regards, Robin.",
      "target_audience": [
        "This course is meant for anyone working in the software industry that requires a detailed understanding of the requirements gathering process.",
        "For junior developers looking to climb the ladder",
        "No prior programming knowledge is needed.",
        "Anyone who needs 'How To Write a Software Specification Document'",
        "Anyone looking to Capture Software Requirements",
        "This course is probably not for you if you are already capable of eliciting every single requirement from your customers and never fail to deliver on time and on budget!"
      ]
    },
    {
      "title": "Linux Shell Programming for Beginners",
      "url": "https://www.udemy.com/course/linux-shell-programming-for-beginners/",
      "bio": "The Complete course to master Bash shell scripting for Linux",
      "objectives": [
        "Learn professional shell scripting skills",
        "Learn to create efficient scripts for mundane tasks",
        "Do routine tasks faster",
        "Learn inner workings of the bash shell"
      ],
      "course_content": {
        "Course Introduction": [
          "Introduction"
        ],
        "Introduction to Bash": [
          "Introduction to BASH",
          "The “directory” concept",
          "Running jobs in the background",
          "Introduction to Bash Quiz"
        ],
        "Command Line Tips and Tricks": [
          "The interactive mode",
          "The vi editing mode",
          "Using the fc command",
          "Command Line Tips and Tricks Quiz"
        ],
        "Customizing your Shell": [
          "The BASH environment",
          "Shell options",
          "Single and double quotes",
          "The shell prompt variables",
          "The CDPATH variable",
          "Customizing your Shell Quiz"
        ],
        "Understanding Shell Scripts": [
          "Shell Programming Essentials",
          "Positional Variables",
          "Manipulating variables in place Part A",
          "Manipulating variables in place Part B",
          "Using patterns in string operations",
          "Assigning command output to variables",
          "Understanding Shell Scripts Quiz"
        ],
        "Condition and Loops": [
          "Deciision Making",
          "More elegant ways of testing conditions",
          "Testing for integers Part A",
          "Testing for integers Part B",
          "The select statement",
          "Condition and Loops Quiz"
        ],
        "Command Line Options": [
          "Command-line options",
          "More Complex options: the getopts command",
          "LAB: adding more opions to highest.st",
          "Increment and decrement operators",
          "The for loop revisited Part A",
          "The for loop revisited Part B"
        ],
        "Bash Input Output": [
          "BASH I/O",
          "The echo command",
          "LAB: enhancing the log rotation script"
        ],
        "Process Management": [
          "Process Management",
          "Process signals",
          "Reacting to signals Part A",
          "Reacting to signals Part B"
        ],
        "Bash Administration": [
          "BASH Administration",
          "Setting default file permissions Part A",
          "Setting default file permissions Part B"
        ]
      },
      "requirements": [
        "Basic knowledge of Linux is required for this course"
      ],
      "description": "Want to feel like an awesome spy hacker similar to the one in the movies that opens a command line terminal and manages to complete complicated tasks using a few simple codes? Well, this can be a reality using BASH.\nA huge chunk of a programmer’s time is wasted in trying to repeat codes and processes, especially when it comes to working with UNIX or Linux. The constant commands that are required to program or create systems is a tedious and long process.\nWell, here’s how you can eliminate that and save a whole buncha time – BASH\nBourne Again Shell, more popularly known as BASH is a UNIX/Linux shell and a command line interpreter that runs commands from a standard input file. This shell comes with a nifty feature that allows you to reduce the amount of commands that you have to call personally by automating them.\nOur Shell Scripting course has been specifically designed to teach you how to use BASH to shave hours from your coding practice. Learn how to write shell scripts, learn how command history, echo command and even variables work, along with how to automate simple and complex commands. This BASH tutorial doesn’t even require you to have previously worked with BASH. All it needs is for you to be familiar with UNIX or Linux and have a machine that runs UNIX or Linux – that’s it! That’s all you need to be on your way to learning automation.\nThe course starts at the very beginning including what is BASH, what are shells, what do you  mean by shell scripts, customizing your shell, difference between a shell script and an interactive shell, command line-options, statements, loops and so much more.\nIn addition to providing you with theoretic information about BASH and Shell Scripting, the course will also give numerous examples at every step to get you familiar with how scripting works and what happens when you execute a certain script. Additionally, you will also be provided with all the scripts that were used by the instructor to try on your own.\nLearn how to write well documented, modular, efficient and complex shell scripts, automate daily routines, basic programming concepts such as loops, commands and statements, how to effectively write command line processing, process management and even manipulate command-line functions.\nSo, what are you waiting for? Click Enroll and unleash the power of scripts!",
      "target_audience": [
        "Anyone who wants to be a skilled linux user and developer will find this course useful"
      ]
    },
    {
      "title": "Learn To Build DevOps Pipeline On Azure Cloud",
      "url": "https://www.udemy.com/course/learn-to-build-devops-pipeline-on-azure-cloud/",
      "bio": "Master DevOps on cloud and automate your development pipeline",
      "objectives": [
        "Learn to setup devops pipeline on Azure",
        "Learn technologies such as VSTS and Kubernetes",
        "Learn core concepts of Azure dev tools",
        "Learn about containers and orchestration technologies"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Introduction to DevOps": [
          "DevOps in Azure - What you will learn in this course",
          "Introduction to DevOps",
          "CI and CD"
        ],
        "Deploy Web Apps to Azure with VSTS CI_CD": [
          "Architecture of CI and CD with Azure Web Apps",
          "Getting started with CI and CD with Azure Web Apps",
          "Create a Team Services Project",
          "Deploy a Web app to Azure",
          "Creating a Build Definition for CI and CD",
          "Deploying an App to VSTS CI and CD",
          "Azure Web App Deployment Slots",
          "Deploying to a staging site"
        ],
        "Deploy Web Apps to Azure VM with VSTS CI_CD": [
          "Architecture of CI and CD with Azure VMs",
          "Creating an Azure VM",
          "Create a Deployment Group in VSTS",
          "Creating a Release Definition",
          "Manually Trigger a Release",
          "Testing the CI and CD pipeline"
        ],
        "Introduction to Containers": [
          "What are Containers",
          "Containers vs VMs",
          "Important concepts in Containers",
          "Introduction to Docker",
          "Docker Image vs Containers",
          "Getting started with Docker",
          "Running Containers with Docker"
        ],
        "Orchestration Technologies": [
          "What is the need for Container Orchestration",
          "Introduction to Container Orchestration Technologies",
          "Architecture of Kubernetes",
          "Kubernetes objects",
          "Introduction to Azure services for Containers"
        ],
        "Azure Kubernetes Service": [
          "Getting started with Azure Kubernetes Service (AKS)",
          "Running the app locally",
          "Creating Container Registry",
          "Creating Kubernetes Cluster in Azure - Part 1",
          "Creating Kubernetes Cluster in Azure - Part 2",
          "Running your app",
          "Scaling your app",
          "Update your app",
          "Upgrade your Cluster"
        ],
        "DevOps in AKS": [
          "Introduction to Azure DevOps Project",
          "Creating a DevOps Project",
          "Walk through of resources created",
          "Update your app",
          "DevOps with Jenkins and Kubernetes - Part 1",
          "DevOps with Jenkins and Kubernetes - Part 2",
          "Creating GitHub webhooks"
        ],
        "Conclusion": [
          "Conclusion",
          "Bonus Lecture: More Interesting Stuff, Offers and Discounts"
        ]
      },
      "requirements": [
        "Basic programming knowledge is essential for completing this course"
      ],
      "description": "Build a strong foundation on cloud and devops using our unique training program.\nCompanies are now looking to hire DevOps and Azure architects that can help them build development process and design better apps and software, faster and in a more sophisticated manner. However, learning DevOps  in AWS isn’t easy. It needs a better understanding of basic DevOps concepts and tools, along with core cloud concepts.\nThe DevOps skills are in great demand, but there is no quick way to acquire this knowledge. Rather than rely on hit and trial method, this course will provide you with all the information you need to get started with your DevOps in Azure .\nIf you want to excel in this growing field and become a DevOps master using a simple and fun course, then we’ve got the perfect one for you!\nThe course will cover topics such as Introduction to DevOps, why it is trending and how it came into existence. It also includes Deploying a very basic web application to Azure VSTS (Visual studio team services), utilizing CI and CD tools with Jenkins. The next section will be followed with VSTS, CI and CD tools that can deploy web apps by azure virtual machine. The fourth section of the course will cover Introduction to Containers and how to benefit from the AWS cloud platform.\nWe will even brief you about the Container orchestration technology those are available to us like Kubernetes, Docker Swarm, and DC/OS (Datacenter Operating System) and work on practical examples selecting the orchestration technology  like kubernetes. And lastly we will guide you through Azure kubernetes services, here you will learn how to actually host these orchestration technology in the cloud. Last but not the least we will be setting up devops in azure kubernetes sevices along with the devops setup in jenkins and kubernetes in the azure VM\nWe have carefully designed this course to ensure that the student gets all the essential conceptual knowledge followed by theoretical and practical examples. So what are you waiting for enroll your name and master DevOps with Eduonix!",
      "target_audience": [
        "Anyone who wants to build a devops pipeline on cloud should take this course"
      ]
    },
    {
      "title": "Flutter BLoC TDD & Clean Architecture | Project Based",
      "url": "https://www.udemy.com/course/flutter-bloc-tdd-clean-architecture/",
      "bio": "Understanding the concept of large scale app development",
      "objectives": [
        "Students will learn about TDD(test driven development)",
        "They will also learn what's clean architecture",
        "Why TDD and clean architecture are so important",
        "Integrating BLoC with TDD and clean architecture",
        "How to use TDD with BLoC and Cubit and Provider",
        "Learn large scale app development principle",
        "Deep dive in Dart and Flutter",
        "Advanced Dart concept",
        "Learn about flutter_test package"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Understanding the layer": [
          "Understand domain layer entities, repositories and usecases",
          "Understanding data layer and the models",
          "Understanding data layer and repositories",
          "Understanding presentation layer",
          "Wrap up layers understanding"
        ],
        "Clean architecture and SOLID principles": [
          "Clean architecture and SOLID principles"
        ],
        "A basic example of clean architecture": [
          "A basic example of clean architecture"
        ],
        "Dumny app for TDD and Clean Architecture": [
          "Create a dummy project",
          "Create user entity",
          "Understand dart objects and compare with reference",
          "Install dartz package and understand Either concept",
          "Create failure and typedef",
          "Dart callable call function",
          "Done with domain layer usescases create user",
          "Domain layer usecases get_user"
        ],
        "Unit test and understanding": [
          "Understanding unit test",
          "Create test part 1",
          "Create test part 2 and finish stubbing",
          "Create test part 3 and added expect() function",
          "Create test part 4 and add verify() function",
          "Create test part 5 and run it",
          "Test summary in text format",
          "Create test get_users and done with Domain layer"
        ],
        "Data layer and test for user model, fromJson, toJson, fromMap, toMap": [
          "Create user model",
          "Create copyWith method",
          "Test user model",
          "Load json file user data",
          "Run test fromJson, toJson, fromMap, toMap"
        ],
        "Data layer, repos and implementation": [
          "Data layer and implementation part 1",
          "Data layer and implementation section part 2",
          "Authentication repository implementation test part 1",
          "Authentication repository implimentation test 2",
          "Authentication repository implimentation exception test 3",
          "Authentication Repository done with APIException test 4",
          "Authentication remote data source implementation test",
          "Work on http client test for remote data source part 1",
          "Http post request 200, 201 and 400 status code part 2",
          "Http get request test part 3",
          "Not found test part 4"
        ],
        "Presentation layer and BLoC and Cubit and uses cases": [
          "Presentation layer use cases with BloC",
          "Presentation layer cubit and usecases",
          "Cubit authentication test",
          "BLoC and Cubit test pass",
          "Cubit create user pass",
          "Cubit get user test pass",
          "Cubit get users test pass",
          "Inject dependencies and connect all the layers",
          "Summary in text format",
          "Work on homepage",
          "Create our first user"
        ],
        "Project set up": [
          "Project set up",
          "Extended project set up"
        ]
      },
      "requirements": [
        "Basic understanding of programming"
      ],
      "description": "This is course where we will cover what is clean architecture in detail with step by step example. We will also talk about why it important and how it plays an important role for big projects and how a team can collaborate with their projects if the project is done using clean architecture and how each of the project is dependent.\nThis course comes in two parts. Students need to buy both parts separately.\nBuy the source code from our website to get free access to course using free coupon.\nTwitter/Facebook/Instagram/LinkedIn @dbestech\nThis app cover 100 TDD and detail explanation of Clean Architecture with BLoC, Provider and Cubit\nThis app uses firebase as backend and chatting. All data is saved in the firebase and the login also happens through firebase. You get notifications in different cases.\nYou may get notification for joining a group and notification is a new course or exam is uploaded.\nThere's an admin side of this app, where you may upload courses to firebase and the app reads that immediately. You may upload many exams or courses.\nThe exam result comes out automatically and immediately.  Students can review their result and recheck the test.\nYou will have a screen video player section which could be fullscreen or half screen. You get to play video from a link or local storage.\nProfile center provides name, password and avatar change.\nThis course also covers dedicated TDD section clear examples. So the first 6 hours of this course we take a look at a dummy app to know about TDD and clean architecture.\nMain features\nSocial login\nView course\nJoin group chat\nAuto create group chat\nLeave group chat\nUpload video from backend\nPlay video from local storage\nProfile center (create, delete, update with image)\nReceive notification\nClear notification\nOnboarding screen\nFirebase integration\nAdmin panel\nUpload exam",
      "target_audience": [
        "Intermediate to advanced learners"
      ]
    },
    {
      "title": "TypeScript 5 for developers",
      "url": "https://www.udemy.com/course/typescript-full-stack-programming/",
      "bio": "Use TypeScript like a pro! Quickly learn basic and advanced Typescript and practice it with Node, Express and React!",
      "objectives": [
        "Master the TypeScript type system",
        "Learn how to install, configure and run TypeScript",
        "Use special TypeScript types like unknown, any, never",
        "Learn advanced JavaScript along the way",
        "Deeply understand advanced TypeScript features like Generics, Mapped types, Decorators",
        "Use ES modern syntax async/await, import/export",
        "Learn how to use TypeScript with classes and Object Oriented Programming (OOP)",
        "TypeScript with Express and React",
        "Practice special TypeScript types like Records, mapped types, optional, literal and other utility types",
        "Learn npm, async programming and the ES module system",
        "Learn about module bundlers like Webpack and ESbuild",
        "Build and consume a REST api with Express and React"
      ],
      "course_content": {
        "Getting started": [
          "Welcome and how it works",
          "How to get help",
          "Course resources access",
          "Tools we will need",
          "TypeScript program lifecycle",
          "First TypeScript program",
          "Compiler options",
          "☑️ TypeScript basics quiz"
        ],
        "Introduction to types": [
          "Section intro",
          "Primitive types",
          "Arrays and tuples",
          "Functions",
          "Any vs Unknown",
          "Type aliases",
          "Practice: simple app",
          "☑️ TypeScript basics quiz"
        ],
        "Working with types: basics": [
          "Section intro",
          "Literal and Union types",
          "Type narrowing",
          "Optional values",
          "Type assertion",
          "Type intersection and Interfaces",
          "Enum",
          "Never",
          "☑️ Types basics quiz"
        ],
        "OOP and classes": [
          "Section intro",
          "Classes in TypeScript",
          "Inheritance",
          "Access modifiers",
          "Abstract classes",
          "TypeScript interfaces"
        ],
        "TypeScript Generics": [
          "Section intro",
          "What are Generics",
          "Popular generics",
          "Generic constraints",
          "Multiple types",
          "Generic classes",
          "Generic Interfaces and types"
        ],
        "Working with types - advanced": [
          "Section intro",
          "Readonly and const",
          "Record and index signatures",
          "keyof vs Object.keys",
          "Conditional Types",
          "Infer",
          "Literal types",
          "Mapped types",
          "Utility types",
          "Types exercises",
          "Further reading"
        ],
        "Functions and asynchronous programming": [
          "Section intro",
          "Function overloading",
          "This",
          "Async functions",
          "Promises",
          "Promise Types",
          "Further reading"
        ],
        "Modules and module bundling": [
          "Section intro",
          "JS modules",
          "JS imports",
          "TypeScript and npm",
          "Module resolution",
          "Module bundling intro",
          "TypeScript and Webpack setup",
          "Advanced webpack",
          "TypeScript and EsBuild",
          "Further reading: WebPack and EsBuild"
        ],
        "Tuning the TypeScript compiler": [
          "Section intro",
          "Include and exclude",
          "Target and lib",
          "Strict checks",
          "Declaration and Source maps",
          "CLI options",
          "Further reading: The TypeScript compiler"
        ],
        "Creating an NPM package with TypeScript": [
          "Section intro",
          "Base package",
          "Npm package",
          "Using the TypeScript package",
          "Further reading"
        ]
      },
      "requirements": [
        "Some programming experience in any language",
        "Basic JavaScript"
      ],
      "description": "TypeScript is one of the most loved languages of the moment. How can you learn it properly and go beyond basic examples?\n\n\nTypescript has reinvented the way we code JavaScript, first of all by adding type safety, but also with many other great features like access modifiers, generics, interfaces, classes, decorators and many others.\nTypescript combines the flexibility of modern JavaScript with the power of strongly typed languages like Java or C#, making it a great choice for your full stack app.\nWelcome to my course, in which you will learn basic and advanced Typescript and NodeJs by practice. We will not waste much time on presentations or reading the documentation, which you can do yourself, no course needed. Instead we will focus on coding a real, full stack application.\nTypescript features covered:\nInstallation and and setup inside a npm project\nBasic TypeScript compiler options like sourceDir and Target\nPrimitive types, build-in types, advanced types, utility types\nAny vs unknown vs never\nObjects, Interfaces and Classes\nType aliases, type narrowing optional values, type intersection\nEnums and exhaustive enums in TypeScript\nAbstract classes and inheritance\nGenerics and decorators - both old and new (version 2 and 3)\nAdvanced types like conditional types, literal types, mapped types\nThe Advanced TypeScript environment:\nUnderstand how npm packages work by building and using your own npm package with TypeScript\nRun and analyze TypeScript code on both NodeJs and Browser\nDeeply understand how module bundlers like WebPack and EsBuild work\nPractice sessions with NodeJs, Express and React:\nBuild from scratch a CRUD application with Node, Express and TypeScript - Rest API\nUnderstand how Express routing works\nUnderstand how Express middleware works\nUse ZOD for data validation inside a Node Express app\nDeeply understand how module bundlers like WebPack and EsBuild work\nBuild from scratch a UI app with React and TypeScript\nRecap for React state, props and hooks\nUnderstand how React components work and how to pass data between child/parent components\nIntegrate the Express rest API with React\nThis course stands out with many advantages and highlights:\nConcise and with deep respect for your time: only learn what you need. Most of the instructor typing is cut, focusing on why we write a certain way the code.\nUnitary Typescript course theme - the same NodeJs application, so you don't get bored and get a rewarding sense of completion\nExperienced and programming active instructor: a great teacher never looses touch with the industry. This is especially true for software development, where the industry is so dynamic. This helps the instructor stay up to date with the best coding guidelines and present you the challenging parts, not the \"hello world\"\nGitHub Code diffs - for each lecture - this way you can keep up and quickly get an overview of the lecture, in case you missed something\nGreat visuals - dark background, big font, 1080p resolution\nCertificate of completion\nThe best way to learn is by exercise, so I'll see you in class.\nThere will be code!",
      "target_audience": [
        "Programmers who want to exand their knowledge to Typescript",
        "TypeScript devs who want to master it",
        "Anyone who wants to practice NodeJs/React/Express programming"
      ]
    },
    {
      "title": "Writing production-ready ETL pipelines in Python / Pandas",
      "url": "https://www.udemy.com/course/writing-production-ready-etl-pipelines-in-python-pandas/",
      "bio": "Learn how to write professional ETL pipelines using best practices in Python and Data Engineering.",
      "objectives": [
        "How to write professional ETL pipelines in Python.",
        "Steps to write production level Python code.",
        "How to apply functional programming in Data Engineering.",
        "How to do a proper object oriented code design.",
        "How to use a meta file for job control.",
        "Coding best practices for Python in ETL/Data Engineering.",
        "How to implement a pipeline in Python extracting data from an AWS S3 source, transforming and loading the data to another AWS S3 target."
      ],
      "course_content": {
        "Introduction": [
          "Course Introduction",
          "[Important!] Updates",
          "Task Description",
          "Production Environment",
          "Task Steps"
        ],
        "Quick and Dirty Solution": [
          "Why to use a virtual environment?",
          "Virtual Environment Setup",
          "AWS Setup",
          "Understanding the source data",
          "Quick and Dirty: Read multiple files",
          "Quick and Dirty: Transformations",
          "Quick and Dirty: Argument Date",
          "Quick and Dirty: Save to S3",
          "Quick and Dirty: Code Improvements"
        ],
        "Functional Approach": [
          "Why a code design is needed?",
          "Functional vs. Object Oriented Programming",
          "Why Software Testing?",
          "Quick and Dirty to Functions: Architecture Design",
          "Quick and Dirty to Functions: Restructure Part 1",
          "Quick and Dirty to Functions: Restructure Part 2",
          "Restructure get_objects Intro",
          "Restructure get_objects Implementation"
        ],
        "Object Oriented Approach": [
          "Design Principles OOP",
          "More Requirements - Configuration, Meta Data, Logging, Exceptions, Entrypoint",
          "Meta Data: return_date_list Quick and Dirty",
          "Meta Data: return_date_list Function",
          "Meta Data: update_meta_file",
          "Code Design - Class design, methods, attributes, arguments",
          "Comparison Functional Programming and OOP"
        ],
        "Setup and Class Frame Implementation": [
          "Setting up Git Repository",
          "Setting up Python Project - Folder Structure",
          "Installation Visual Studio Code",
          "Setting up class frame - Task Description",
          "Setting up class frame - Solution S3",
          "Setting up class frame - Solution meta_process",
          "Setting up class frame - Solution constants",
          "Setting up class frame - Solution custom_exceptions",
          "Setting up class frame - Solution xetra_transformer",
          "Setting up class frame - Solution run",
          "Logging in Python - Intro",
          "Logging in Python - Implementation",
          "Create Pythonpath",
          "Python Clean Coding"
        ],
        "Code Implementation": [
          "list_files_in_prefix - Thoughts",
          "list_files_in_prefix - Implementation",
          "list_files_in_prefix - Linting Intro",
          "list_files_in_prefix - Pylint",
          "list_files_in_prefix - Unit Testing Intro",
          "list_files_in_prefix - Unit Test Specification",
          "list_files_in_prefix - Unit Test Implementation 1",
          "list_files_in_prefix - Unit Test Implementation 2",
          "Task Description - Writing Methods",
          "Solution - read_csv_to_df - Implementation",
          "Solution - read_csv_to_df - Unit Test Implementation",
          "Solution - write_df_to_s3 - Implementation",
          "Solution - write_df_to_s3 - Unit Test Implementation",
          "Solution - update_meta_file - Implementation",
          "Solution - update_meta_file - Unit Test Implementation",
          "Solution - return_date_list - Implementation",
          "Solution - return_date_list - Unit Test Implementation",
          "Solution - extract - Implementation",
          "Solution - extract - Unit Test Implementation",
          "Solution - transform_report1 - Implementation",
          "Solution - transform_report1 - Unit Test Implementation",
          "Solution - load - Implementation",
          "Solution - load - Unit Test Implementation",
          "Solution - etl_report1 - Implementation",
          "Solution - etl_report1 - Unit Test Implementation",
          "Integration Tests - Intro",
          "Integration Tests - Test Specification",
          "Integration Tests - Implementation",
          "Entrypoint run - Implementation"
        ],
        "Finalizing the ETL Job": [
          "Dependency Management - Intro",
          "pipenv Implementation",
          "Profiling and Timing - Intro",
          "Mem-Profiler",
          "Dockerization",
          "Run in Production Environment"
        ],
        "Summary": [
          "Summary"
        ]
      },
      "requirements": [
        "Basic Python and Pandas knowledge is desirable.",
        "Basic ETL and AWS S3 knowledge is desirable."
      ],
      "description": "This course will show each step to write an ETL pipeline in Python from scratch to production using the necessary tools such as Python 3.9, Jupyter Notebook, Git and Github, Visual Studio Code, Docker and Docker Hub and the Python packages Pandas, boto3, pyyaml, awscli, jupyter, pylint, moto, coverage and the memory-profiler.\nTwo different approaches how to code in the Data Engineering field will be introduced and applied - functional and object oriented programming.\nBest practices in developing Python code will be introduced and applied:\ndesign principles\nclean coding\nvirtual environments\nproject/folder setup\nconfiguration\nlogging\nexeption handling\nlinting\ndependency management\nperformance tuning with profiling\nunit testing\nintegration testing\ndockerization\n\n\nWhat is the goal of this course?\nIn the course we are going to use the Xetra dataset. Xetra stands for Exchange Electronic Trading and it is the trading platform of the Deutsche Börse Group. This dataset is derived near-time on a minute-by-minute basis from Deutsche Börse’s trading system and saved in an AWS S3 bucket available to the public for free.\nThe ETL Pipeline we are going to create will extract the Xetra dataset from the AWS S3 source bucket on a scheduled basis, create a report using transformations and load the transformed data to another AWS S3 target bucket.\nThe pipeline will be written in a way that it can be deployed easily to almost any production environment that can handle containerized applications. The production environment we are going to write the ETL pipeline for consists of a GitHub Code repository, a DockerHub Image Repository, an execution platform such as Kubernetes and an Orchestration tool such as the container-native Kubernetes workflow engine Argo Workflows or Apache Airflow.\n\n\nSo what can you expect in the course?\nYou will receive primarily practical interactive lessons where you have to code and implement the pipeline and theory lessons when needed. Furthermore you will get the python code for each lesson in the course material, the whole project on GitHub and the ready to use docker image with the application code on Docker Hub.\nThere will be power point slides for download for each theoretical lesson and useful links for each topic and step where you find more information and can even dive deeper.",
      "target_audience": [
        "Data engineers, scientists and developers who want to write professional production-ready data pipelines in Python.",
        "Everyone who is interested in writing data pipelines in Python that are ready for production."
      ]
    },
    {
      "title": "Docker for Java Developers",
      "url": "https://www.udemy.com/course/docker-for-java-developers/",
      "bio": "Learn how you can use Docker to supercharge your enterprise Java Development!",
      "objectives": [
        "How you can run Docker Containers",
        "How you can create and run your own Docker Images",
        "Publish Docker Images to Docker Hub",
        "Learn how to use Docker Compose to Run Multiple Docker Containers",
        "Use Docker Swarm for Cloud Scale Computing",
        "Use Maven to Create Docker Images",
        "How to use Docker Containers for Integration Tests",
        "Run multiple Docker containers with Docker Compose",
        "How you can leverage Docker Containers for Integration tests from CI Builds",
        "Create Your Own Docker Swarm Cluster"
      ],
      "course_content": {
        "Introduction": [
          "Course Introduction",
          "Instructor Introduction",
          "Free 120 Day IntelliJ Trial!",
          "Checking out from GitHub",
          "GitHub Workflow",
          "Docker Cheat Sheet",
          "Course Slack Room - Chat Live with Me and Other Gurus!"
        ],
        "Introduction to Docker": [
          "Introduction",
          "What is Docker",
          "Docker Editions",
          "Installing Docker",
          "Hello World with Docker",
          "Docker Hub",
          "Introducing KiteMatic",
          "Assignment - Run Hello World Nginx",
          "Conclusion"
        ],
        "Working with Containers and Images": [
          "Introduction",
          "Running Mongo DB Docker Container",
          "Assignment - download and run Spring Boot Project",
          "Assignment Review",
          "Docker Images",
          "Docker Files",
          "Non Persistent Container Storage",
          "Assigning Storage",
          "Assignment - Run Rabbit MQ in a Docker Container",
          "Assignment Review",
          "Assignment - Run MySQL in a Docker Container",
          "Assignment Review",
          "Docker House Keeping",
          "Flash Cards",
          "Conclusion"
        ],
        "Running Spring Boot in a Centos Image": [
          "Introduction",
          "Preparing CentOS for Java development",
          "Run Your Own Spring Boot App",
          "Sample Spring Boot Application",
          "Running Spring Boot from Docker",
          "Assignment - Fix Dockerfile",
          "Assignment Review",
          "Interview with James Labocki of Red Hat",
          "Conclusion"
        ],
        "DevOps - Automating Building of Docker Images": [
          "Introduction",
          "Maven vs Gradle and Fabric8",
          "Spring Boot Application Code Review",
          "Adding Fabric8 Maven Plugin",
          "Creating Docker Image in Fabric 8",
          "Publishing to Dockerhub",
          "Assignment - perform a release in Maven",
          "Assignment Code Review",
          "Using A Docker File Template",
          "Flash Cards",
          "Conclusion"
        ],
        "Running Images from Maven": [
          "Introduction",
          "Running a Docker image from Maven",
          "Design for a more robust application",
          "Application Code Review",
          "Running Example Application with Docker",
          "Running Docker Containers via Maven",
          "Using Docker Containers for Integration Testing",
          "Using Maven for CI Builds",
          "Assignment: Add Pageview Counter for Index Page",
          "Assignment Review",
          "Flash Cards",
          "Conclusion"
        ],
        "Using Docker Compose": [
          "Introduction to Docker Compose",
          "YAML Crash Course",
          "Run Wordpress with Docker Compose",
          "Run Pageview Service with Docker Compose",
          "Assignment: Add Web Application to Docker Compose",
          "Assignment Review",
          "Adding Spring Boot Actuator",
          "Conclusion"
        ],
        "Docker Swarm Mode": [
          "Introduction",
          "What is Docker Swarm Mode?",
          "Docker Swarm Mode Init",
          "Docker Swarm Topology",
          "Provision Servers for Docker Swarm",
          "Assignment - Install Docker on Swarm Servers",
          "Assignment - Review Install Docker",
          "Creating a Multi Node Docker Swarm",
          "Assignment - Install Portainer",
          "Assignment Review",
          "Docker Swarm Service Discovery",
          "Docker Swarm Routing Mesh",
          "Flash Cards",
          "Conclusion"
        ],
        "Running Java Apps in Docker Swarm": [
          "Introduction",
          "Deploy MySQL as Service in Docker Swarm",
          "Docker Overlay Networks",
          "Docker Swarm Stacks",
          "Using Docker Secrets",
          "Implementing Docker Secrets",
          "Conclusion"
        ],
        "Appendix A - Using GitHub": [
          "GitHub Basics",
          "GitHub Workflow"
        ]
      },
      "requirements": [
        "Students taking the course should have basic Java programming skills",
        "Spring knowledge is not required, but helpful",
        "The ideal student will have basic Linux skills",
        "Local Admin access for installing Docker"
      ],
      "description": "If you're a Java developer, Docker is a true game changer for you!\nDeveloping Java applications in large enterprises is no easy task. Every day you are asked to work with many different technologies. In the morning, you might need to save data to a MySQL database. In the afternoon, you might be working with RabbitMQ. Tomorrow you might be asked to work with Mongo or Redis.\nThink about what you need to do when working with all these different technologies.\nIf you install all these on your laptop, it becomes cluttered and slow. Sure, you could use VMs to run these - if you really want to slow down your laptop. Virtual Machines are awesome, but VMs can also be huge resource hogs.\nIf you're on a dev team, you can set up dedicated development servers. But then you don't have a clean development environment. And your development work becomes dependent on access to the development servers.\nDocker is an exciting technology you can leverage for enterprise development.\nThe popularity of Docker has been explosive. Much of the industry focus has been on DevOps. But more so on the Operations part.\nDid you know Google creates roughly 285 MILLION Docker containers per day?\nDocker is clearly a popular technology for running cloud scale applications like GMail.\nBut as a Java developer, what does Docker mean to you?\nAre you working with MySQL? There's a ready made Docker image for you.\nPostgres? Mongo DB? Redis? Cassandra? RabbitMQ? ActiveMQ? Kafka?\nYep, there's Docker images you can download and use today.\nYou can use Docker for a lot more than just your local development.\nAre you developing microservices? If you are not already deploying your microservices in Docker containers, chances are you soon will be.\nIntroduction to Docker\nThis course starts off assuming you have no knowledge about Docker.\nYou will learn why Docker is not like a Virtual Machine.\nRight away, you will learn how to run a Docker container with a Docker Image pulled down from Docker hub.\nAs the course progresses, you will learn how to create your own Docker images and publish those images to Docker hub.\nJava DevOps with Docker\nThrough the use of the Fabric8 Maven plugin, you will learn how to automate many Docker tasks, such as creating images for microservices.\nDocker Compose is a powerful tool to run multiple Docker containers. You will learn how to run how to run an application consisting of a Spring Boot web application, RabbitMQ, a page view microservice, and a MySQL database. Through Docker Compose, with a single command, you will be able to start or stop this application on any Docker machine!\nUsing Docker Swarm Mode\nYou'll learn how Docker Swarm Mode does container orchestration. In this course, you will provision your own Docker Swarm Cluster in the cloud. You will deploy a containerized Java application into a Docker Swarm Cluster. You'll see what a powerful feature Docker Swarm's routing mesh is, and how you can dynamically scale your application.\nExpert Interviews\nThis course includes interviews with leading industry experts!\nJames Labocki - Product Owner, Red Hat Cloud Infrastructure\nMore on the way!\nSlack Group\nExclusive to this course is a Slack group you can join to interact with the instructor, teachers assistants, and other students learning Docker from around the world. Say hi. Get help with a problem, or help someone else. When you enroll in this course you can join a community of others learning Docker!\nSpring Boot Cookbook!\nCourse includes a Spring Boot Cookbook giving you example Spring Boot projects you can use against popular open source technologies including:\nMongo DB\nMySQL\nPostgres\nMaria DB\nDB2 Express\nNeo4J\nRedis\nCassandra\nActiveMQ\nRabbitMQ",
      "target_audience": [
        "The ideal student for this course is a Java developer who wants to learn how to use Docker"
      ]
    },
    {
      "title": "Game Theory Algorithms in Competitive Programming",
      "url": "https://www.udemy.com/course/game-theory-algorithms-in-competitive-programming-course/",
      "bio": "Dive deep into game theory algorithms, learn & apply these techniques for Codeforces & Competitive Programming problems!",
      "objectives": [
        "Learn in-depth Game Theory Concepts",
        "Learn to solve Competitive Programming Questions",
        "Problems involving Nim Game, Sprague-Grundy Theorem",
        "Combinatorial Games, Subtraction Games, Games as Graphs",
        "Learn by solving Easy, Medium & Hard problems",
        "Hands-on Coding for every Game Theory Challenge"
      ],
      "course_content": {
        "Introduction": [
          "Introduction to the course",
          "Code Repository"
        ],
        "Setting Up Sublime Text [optional]": [
          "Sublime Setup",
          "Add master header file",
          "Escaping Online Judges",
          "Common Code Snippets",
          "Using Macros",
          "Example Code Explained"
        ],
        "Take Away Games and Subtraction Games": [
          "Combinatorial Games",
          "Simple Take Away Games",
          "Nim Game",
          "Divisor Game",
          "Take Away Game (Misère Rule)",
          "Examples",
          "N/P positions",
          "Q. Empty and Divide",
          "Lucky Number",
          "Maximum number of coins",
          "Predict the Winner"
        ],
        "Nim Game": [
          "The Game Of Nim",
          "Nim Sum",
          "Applications Of NimSum",
          "Game of Bullets",
          "Nim Game II",
          "Similar Games",
          "Stair Game"
        ],
        "Sprague Grundy Function": [
          "Games as Graphs and Sprague Grundy Function",
          "Examples of Sprague Grundy Function",
          "Coding Sprague Grundy Function"
        ],
        "Sprague Grundy Theorem": [
          "Sprague Grundy Theorem",
          "Chalkboard Xor Game",
          "Matrix Game",
          "Friends Game",
          "Ada Pawns",
          "Grundy's Game"
        ],
        "Problems Set - I": [
          "Introduction",
          "Game Of Stones",
          "Tower Breakers",
          "A ChessBoard Game",
          "Introduction to NIM Game"
        ],
        "Problem Set - II": [
          "Misere NIM",
          "Nimble",
          "Alice and Bob's Silly Game",
          "Poker Nim"
        ],
        "Problem Set - III": [
          "Tower Breakers Revisited!",
          "Tower Breakers Again Lecture - 1",
          "Tower Breakers Again Lecture - 2",
          "Zero Move Nim",
          "A ChessBoard Game Again"
        ],
        "Problem Set - IV": [
          "Digits Square Board",
          "Stone Division",
          "Chocolate in the Box",
          "Kitty and Katty"
        ]
      },
      "requirements": [
        "Programming fundamentals",
        "Basic understanding of data structures",
        "Familiar with any one programming language"
      ],
      "description": "This hands-on course is designed for everyone to learn & implement Game Theory concepts to solve Competitive Programming Challenges. You will learn how approach Game Theory based questions involving - Nim Game, Sprague Grundy Theorem, Subtraction Games, Combinatorial Games, Graph Games, Take-away games! The course involves both breadth and depth of these topics with enough examples and hands-on coding for each problem.\nCompetitive programming or Sport Programming is a mind sport usually, involving participants trying to program according to provided specifications. Competitive programming is recognised and supported by several multinational software and Internet companies, such as Google and Facebook. Popular Competitive Programming platforms include Codeforces, Codechef, HackerEarth, HackerRank, Spoj and more! This course is designed for both beginners and advanced programmers looking forward to take the next leap in Competitive Programming!\nParticipation in programming contests can increase student enthusiasm for computer science studies. The skills acquired in ICPC-like programming contests also improve career prospects,  which often require candidates to solve complex programming and algorithmic problems on the spot.\nThis comprehensive course is taught by Apaar Kamal, who is a highly successful competitive coder and popular bootcamp Udemy Instructor and has taught thousands of students in several online and in-person courses over last 2+ years. This is deep-dive course, we not just delve into theory but focus on the practical aspects by solving multiple game theory problems of various difficulty levels.\nThe course starts with basics of Game Theory and then diving deeper topics! Here are some of the topics that you will learn in this course.\nCombinatorial Games\nTake-away Games\nN/P Positions\nGame of Nim\nNim-Sum\nApplications of Nim-Sum\nSimilar Nim-Games\nGames as Graphs\nSprague Grundy Function\nSprague Grundy Theorem\n20+ Problems with Code\nJoin me in the course and take the next leap towards becoming a rockstar Competitive Programmer! See you in the course!",
      "target_audience": [
        "College students pursuing Computer Science or related degrees",
        "Programmers preparing for Competitive Programming competitions",
        "Students who want to deep-dive into Algorithms & Game Theory",
        "Students preparing for ACM-ICPC, IOI, Facebook HackerCup etc"
      ]
    },
    {
      "title": "Create your own cryptocurrency with ERC-20 tokens on ETH !",
      "url": "https://www.udemy.com/course/create-your-own-cryptocurrency-with-erc-20-tokens/",
      "bio": "Deploy your own cryptocurrency on the Ethereum blockchain",
      "objectives": [
        "How to create a cryptocurrency",
        "The Ethereum Blockchain",
        "The Blockchain",
        "ERC-20 Tokens",
        "The basics of the Solidity Language"
      ],
      "course_content": {
        "Introduction": [
          "Who am I?",
          "Summary of this course",
          "What will you find in this course",
          "What you will not find in this course",
          "Legal Warning"
        ],
        "Basics": [
          "Let's get ready! - What you will need to take this course!",
          "What is a cryptocurrency?",
          "What is a blockchain?",
          "What is Solidity?",
          "What is ERC-20 tokens?"
        ],
        "Solidity : the language of Ethereum": [
          "Introduction to Solidity",
          "Arrays",
          "Basic Solidity Types",
          "Functions",
          "Collections"
        ],
        "The smart contract of your cryptocurrency": [
          "The ERC-20 standard",
          "Let's write the contract 1/2",
          "Let's write the contract 2/2",
          "Windows - Let's setup our tools",
          "Mac & Linux - Let's setup our tools",
          "Write the script to compile",
          "Write the script to deploy"
        ],
        "Deploy your cryptocurrency on Ethereum": [
          "Deploy your cryptocurrency on Ethereum Testnet",
          "Deploy your cryptocurrency on Ethereum Mainnet",
          "FAQ - The answers to your questions",
          "Set the price of your cryptocurrency"
        ],
        "Deploy your cryptocurrency on other blockchain": [
          "Deploy your cryptocurrency on Polygon",
          "Deploy your cryptocurrency on Binance Smart Chain"
        ],
        "Conclusion": [
          "Thank you!"
        ],
        "Go Further": [
          "Go Further",
          "How to invest in Real Estate and receive rent everyday with cryptocurrencies",
          "How to get FREE cryptocurrencies !"
        ],
        "BONUS": [
          "Bonus"
        ]
      },
      "requirements": [
        "All concepts will be explained from basics.",
        "A Windows, Linux or Mac PC/Laptop",
        "Some programming experience (Beginner accepted)"
      ],
      "description": "Welcome in this course called \"Create your own cryptocurrency with ERC-20 tokens on ETH\" !\nIn this course, you will learn how to create your own cryptocurrency on the Ethereum blockchain!\nCreated in 2021, this course is updated regularly.\nIf you want to learn more about how to write smart contract with Solidity and how to create a cryptocurrency this course will be perfect for you! We will also talk about the blockchain, how to fix the price of a cryptocurrency, and how to deploy a ERC-20 token on the Ethereum mainnet.\nMore than 3000 students already followed my courses !\nThis course will teach you:\n\n- How to create a cryptocurrency with ERC-20 tokens\n- Basics of Solidity\n- The blockchain\n- How to set the price of your cryptocurrency\n- How to use Ethereum Testnet\n- How to deploy your cryptocurrency on Ethereum Mainnet\n\nand many more things...\n\n\nThis course will NOT teach you:\n\n- How to become rich by creating a cryptocurrency.\n- How to predict future prices of your cryptocurrency.\n- How to deploy your cryptocurrency on another blockchain than Ethereum.\n- How to be a good Solidity developer\nIf you have any questions about this course you can always send me a private message me here on Udemy. I will be delighted to answer you as soon as possible.\nWhat are you waiting to learn how to create your own cryptocurrency?",
      "target_audience": [
        "Anyone who wants to create a cryptocurrency",
        "Anyone who wants to create an ERC-20 token",
        "Anyone who wants to learn Solidity"
      ]
    },
    {
      "title": "SOLID Principles: Introducing Software Architecture & Design",
      "url": "https://www.udemy.com/course/solid-design/",
      "bio": "Gain mastery over SOLID Principles and write clean and well-designed code in Object Oriented Languages like Java etc.",
      "objectives": [
        "Anyone can code, but quality code is hard to come by. Make yourself stand out by learning how to write quality code.",
        "Learn basic software architecture by applying SOLID principles.",
        "Apply SOLID principles in order to write quality code, as a software engineer.",
        "Well-crafted illustrations to help understand the basic concepts. Minimal bullet point slides.",
        "Learn what differentiates elegant and robust code from badly designed code.",
        "Get the concepts right using real world analogies.",
        "Live sessions where existing code is analyzed and design holes are picked.",
        "Hands-on sessions where existing code is re-designed and revamped after applying SOLID design principles."
      ],
      "course_content": {
        "Introduction": [
          "Introduction and Scope - What you will learn"
        ],
        "Single Responsibility Principle": [
          "Introduction",
          "Cohesion and Coupling",
          "Reasons for Change",
          "Live Coding Session",
          "Wrap Up"
        ],
        "Open Closed Principle": [
          "Introduction",
          "Real World Analogies And Code Snippets",
          "Key Takeaways From The Examples",
          "Live Coding Session",
          "Wrap Up"
        ],
        "Liskov Substitution Principle": [
          "Introduction",
          "Breaking The Hierarchy",
          "Tell, Don't Ask",
          "Live Coding Session",
          "Wrap Up"
        ],
        "Interface Segregation Principle": [
          "Introduction",
          "Restructuring The Code To Follow ISP",
          "Techniques To Identify Violations",
          "Live Coding Session",
          "Wrap Up"
        ],
        "Dependency Inversion Principle": [
          "Introduction",
          "Dependency Injection",
          "Live Coding Session",
          "Inversion Of Control",
          "Wrap Up"
        ],
        "Course Summary": [
          "Course Summary",
          "Thank You!"
        ]
      },
      "requirements": [
        "Beginner level knowledge in any object oriented programming language.",
        "Basic object oriented concepts like inheritance etc."
      ],
      "description": "Anyone can code. But what differentiates a professional software engineer from a hobbyist coder is how well-designed and well-coded the final product is. Code quality is hard to come by. Unfortunately, most coders start straight without understanding basic concepts of software design. This course will help a budding coder, as well as an established programmer who wants to learn better design and write quality code.\nIt is really important that you grasp the core concepts of SOLID thoroughly. Once you get the fundamentals right, writing quality code will come naturally to you.There are tons of free YouTube videos on SOLID, but they try to teach you in bits and pieces, and don't pick the right analogies and code snippets. What you need is a holistic picture, which is what this course aims to provide. I have spent considerable time and effort to come up with the content for this course. Each and every concept, each and every analogy, each and every code example has been meticulously picked in such a way the design principles stick to your mind. I have used graphical illustrations and real world analogies wherever possible to drive home the point.\nSomething else that is special about this course - The subtitles are hand-scripted and accurate. I have even checked the timings to guarantee accuracy. Most courses come with subtitles that are auto-generated using a Speech-To-Text Engine, the accuracy of which is fairly low. But not mine! I have taken pains to script my course to perfection and include the subtitles too. So if you are at work, and you want to put me on mute, please feel free, although I would like you to hear my voice narration. If you want to put me on mute, just enable the subtitles in Udemy and play!",
      "target_audience": [
        "Programmers who want to write quality code.",
        "Developers who want to create well-designed software.",
        "Wannabe software architects."
      ]
    },
    {
      "title": "Google Cloud Professional Cloud Architect: GCP Certification",
      "url": "https://www.udemy.com/course/gcp-professional-cloud-architect/",
      "bio": "Google Cloud Professional Cloud Architect Certification. Become a GCP Cloud Architect, Latest GCP Exam and Case Studies.",
      "objectives": [
        "Start your journey to become a Google Cloud Certified Professional Cloud Architect",
        "Get hands-on with compute, networking, storage, and database services in Google Cloud Platform",
        "Students will learn about data storage options like Persistent disk, Local Disk, Cloud SQL, Cloud DataStore, BigQuery",
        "Understand how to architect and deploy secure and robust applications on Google Cloud Platform",
        "Understand the best practices for building available, scalable, resilient and secure applications on the Google Cloud Platform"
      ],
      "course_content": {
        "GCP Professional Cloud Architect : Course Introduction": [
          "GCP Cloud Architect : Course Introduction",
          "Role of a Google Cloud Architect",
          "GCP Professional Architect Exam Blue Print",
          "My Motivation Factor",
          "Course Chat with Students and Tech Community"
        ],
        "Cloud Resource Manager": [
          "Management Services",
          "GCP Resource Hierarchy",
          "Demo : Project ID & Project Name",
          "Labels in GCP",
          "Demo : Labels in GCP",
          "Resource Quotas",
          "Demo : Resource Quotas"
        ],
        "Cloud IAM": [
          "Familiarity with Cloud IAM Part I",
          "Familiarity with Cloud IAM Part II",
          "Cloud IAM : Policies",
          "Cloud IAM : Service Accounts",
          "Demo : Service Account",
          "Cloud IAM Best Practices",
          "Demo : Cloud IAM"
        ],
        "Concept of GCP Billing": [
          "Billing Overview",
          "Demo : Billing Overview",
          "Demo : Export Billing and BigQuery Result Data"
        ],
        "Operations in GCP": [
          "GCP Operations Overview",
          "Cloud Logging Concepts",
          "Hands On : Cloud Logging I",
          "Hands On : Cloud Logging II",
          "Cloud Monitoring",
          "Demo : Cloud Monitoring",
          "Demo : Cloud Monitoring II",
          "Demo : Cloud Monitoring III - Uptime Check",
          "Demo : Cloud Monitoring IV - Monitoring Alerts",
          "Trace | Error Reporting | Debug Tools",
          "Demo : Trace | Error Reporting | Debug Tools",
          "Demo : Trace | Error Reporting | Debug Tools II"
        ],
        "Google Cloud Storage": [
          "Cloud Storage Overview",
          "Cloud Storage in GCP",
          "Interact with Cloud Storage",
          "Lab : Working with Cloud Storage Buckets",
          "Lab : Create Bucket & Data using CLI",
          "Lab : Execute Application and Create Data in Cloud Storage",
          "Transfer Services in GCP",
          "Lab : Transfer Service in GCP",
          "Lab : SetUp Cloud Storage SetUp using CLI",
          "Text Direction : Lab SetUp Cloud Storage SetUp for CLI",
          "Lab : Custom Encryption key in Cloud Storage"
        ],
        "Managed Database Service in GCP": [
          "Manage Database Overview",
          "Manage Database on GCP"
        ],
        "Cloud SQL": [
          "Understanding of Cloud SQL & Cloud Spanner",
          "Lab : Create Cloud SQL DB",
          "Lab : Execute Cloud SQL DB",
          "My Motivation Factor",
          "Text Direction : Execute Cloud SQL DB",
          "Lab : Bulk Load in Cloud SQL DB",
          "Lab : Demo on Cloud Spanner"
        ],
        "Google Cloud BigQuery": [
          "BigQuery Introduction",
          "BigQuery Application",
          "Case Study : When to Use BigQuery",
          "Lab : BigQuery on CSV Data Handling",
          "Text Direction : Lab CSV Data Handling in BigQuery",
          "Lab : JSON Data Handling in BigQuery",
          "Text Direction : Lab - JSON Data Handling in BigQuery",
          "Lab : Practice DataSet in BigQuery",
          "Lab : BigQuery via CLI",
          "Text Direction : Lab - BigQuery via CLI",
          "Lab : WikiData in BigQuery",
          "Text Direction : Lab - WikiData in BigQuery"
        ],
        "Virtual Private Cloud (VPC) Network": [
          "VPC Overview and Application",
          "Global Network and Subnets",
          "Role of IP Addresses In GCP",
          "Lab : VPC IPs Distribution",
          "Routes in VPC",
          "Firewalls in VPC",
          "Firewall Rules Logging in GCP",
          "Lab : Network Firewalls in GCP",
          "Lab : VPC Network in GCP"
        ]
      },
      "requirements": [
        "Just a basic understanding of Cloud computing is good enough for this course.",
        "Software or Information Technology or Infrastructure understanding"
      ],
      "description": "Google Cloud Platform is one of the fastest-growing cloud service platforms offered today that lets you run your applications and data workflows at a 'Google-sized' scale.\nGoogle Cloud Certified Professional Cloud Architect certification is one of the most highly desired IT certifications out today. It is also one of the most challenging exams offered by any cloud vendor today. Passing this exam will take many hours of study, hands-on experience, and an understanding of a very wide range of GCP topics.\nLuckily, we're here to help you out! This course is designed to be your best single resource to prepare for and pass the exam to become a certified Google Cloud Architect.\n\n\nWhy should do a Google Cloud Certification?\nHere are few results from Google's 2020 Survey:\n89% of Google Cloud certified individuals are more confident about their cloud skills\nGCP Cloud Architect was the highest paying certification of 2020 (2) and 2019 (3)\nMore than 1 in 4 of Google Cloud certified individuals took on more responsibility or leadership roles at work\n\n\nWhy should you aim for Google Cloud - GCP Cloud Architect Certification?\nGoogle Cloud Professional Cloud Architect certification helps you gain an understanding of cloud architecture and Google Cloud Platform.\nAs a Cloud Architect, you will learn to design, develop, and manage robust, secure, scalable, highly available, and dynamic solutions to drive business objectives.\n\n\nThe Google Cloud Certified - Professional Cloud Architect exam assesses your ability to:\nDesign and architect a GCP solution architecture\nManage and provision the GCP solution infrastructure\nDesign for security and compliance\nAnalyze and optimize technical and business processes\nManage implementations of Google Cloud architecture\nEnsure solution and operations reliability\n\n\nAre you ready to get started on this amazing journey to becoming a Google Cloud Architect?\nSo let's get started!",
      "target_audience": [
        "You want to start your Cloud Journey with Google Cloud Platform",
        "You want to become a Google Cloud Certified Professional Cloud Architect"
      ]
    },
    {
      "title": "Data Structures & Algorithms using C++, C and Python - 2025",
      "url": "https://www.udemy.com/course/mastering-data-structures-and-algorithms-using-c-programming/",
      "bio": "Coding Interview : Learn Arrays, Stacks, Queues, Linked Lists, Trees, Graphs & Algorithms from basics to advanced.",
      "objectives": [
        "Data Structures and Algorithms for Beginners to Advanced.",
        "Detailed discussion on Physical Data Structures like Arrays and Linked Lists.",
        "Detailed discussion on Logical Data Structures like Stacks, Queues, Trees, Graphs and Hashing.",
        "Play with Searching and Sorting techniques.",
        "Learn how to develops the codes from scratch.",
        "Master the Most difficult concept \"RECURSION\".",
        "Become Master in writing Algorithms in optimized way.",
        "BONUS : AVL Trees ( Advanced Data Structure).",
        "Master Dynamic Programming and Graphs."
      ],
      "course_content": {
        "Basic Stuff": [
          "Memory Structure"
        ],
        "1. Arrays": [
          "Why arrays are required?",
          "Arrays Introduction and One Dimensional Arrays.",
          "C Code : One Dimensional Arrays Implementation",
          "C++ Code : One Dimensional Arrays Implementaiton.",
          "Python Code : One Dimensional Arrays Implementation",
          "Two Dimensional Arrays Introduction",
          "Row Major Order - 1",
          "Row Major Order - 2",
          "Column Major Order",
          "C Code : Two Dimentional Array - Row Major Order",
          "Python Code : Two Dimentional Array - Row Major Order",
          "Column Major Order - 1",
          "Column Major Order - 2",
          "Extra Stuff on Arrays : Lower Triangular Matrix",
          "Extra Stuff on Arrays : Tridiagonal Matrix",
          "Extra Stuff on Arrays : Toeplitz Matrix"
        ],
        "2. Stacks": [
          "Stack Introduction",
          "Stack Implementaion by using Arrays : Push() Operation.",
          "Stack Implementation by using Arrays : Pop() operation.",
          "C Code : Stacks Implementation using Arrays : Push(), Pop(), TopOfStack().",
          "C++ Code : Stacks Implementation using Arrays : Push(), Pop(), Display().",
          "Python Code : Stacks Implementation using Arrays : Push(), Pop(), Display",
          "Python Code : Stacks Implementation using Arrays : Push(), Pop(), Display().",
          "Associativity and Precedence",
          "Converting to Prefix and Postfix notation from Infix"
        ],
        "2.1 Recursion : Exclusive": [
          "Writing Recursive Code",
          "Evaluation of Recursive code by using Recursive Tree",
          "Example 1 : Recursive code Evaluation by using Recursive Tree",
          "Constructing Recursive Tree",
          "Example 2 : Recursive code Evaluation by using Recursive Tree",
          "Printing Array Elements using Recursion",
          "Finding Time Complexity from Recursive Equation by using Substitution Method",
          "Recursive code for Multiplication and Division",
          "Time Complexity for Fibonacci Series using Recursive Tree",
          "Finding Time Complexity from Recursive Equation by using Substitution Method",
          "Finding Time Complexity from Recursive Equation by using Substitution Method"
        ],
        "3. Queues": [
          "Queue Inroduction.",
          "Enqueue Operation",
          "Dequeue Operation",
          "C Code : Queue Implementation - Enqueue and Dequeue.",
          "C++ Code : Queue Implementation - Enqueue and Dequeue.",
          "Python Code : Queue Implementation - Enqueue and Dequeue.",
          "Drawbacks in Normal Queues.",
          "Circular Enqueue Operation",
          "Circular Dequeue Operation",
          "C Code : Circular Queue - Enqueue and Dequeue.",
          "C++ Code : Circular Queue - Enqueue and Dequeue."
        ],
        "4. Linked Lists": [
          "Single Linked List Introduction and Structure Creation",
          "Single Linked List : Node Creation Physically in Memory",
          "Single Linked List : Insertion - Beginning",
          "Single Linked List : Insertion - Ending",
          "Single Linked List : Insertion - Middle",
          "C Code : Insertion - Beginning, Middle and Ending.",
          "C++ Code : Insertion - Beginning, Middle and Ending.",
          "Python Code : Insertion - Beginning, Middle and Ending.",
          "Single Linked List : Deletion - Beginning and Ending",
          "Single Linked List : Deletion - Middle",
          "C Code : Deletion - Beginning, Middle and Ending.",
          "C++ Code : Deletion - Beginning , Middle and Ending.",
          "Python Code : Deletion - Beginning, Middle and Ending.",
          "Single Linked List : Traversing",
          "Single Linked List : Reversing",
          "Question 1 : Single Linked List",
          "Circular Single Linked Lists : Introduction",
          "Circular Single Linked Lists : Insertion - Beginning",
          "Circular Single Linked Lists : Insertion - Ending",
          "Circular Single Linked Lists : Deletion - Beginning",
          "Circular Single Linked Lists : Deletion - Ending",
          "C Code : Circular Single Linked Lists : Insertion - Beginning, Middle, Ending.",
          "C Code : Circular Single Linked Lists : Deletion - Beginning, Middle, Ending",
          "Python Code : Cricular Single Linked Lists -Insertion - Beginning, Middle,Ending",
          "Python Code :Circular Single Linked Lists - Deletion Beginning, Middle, Ending",
          "Double Linked List : Introduction and Node Definition.",
          "Double Linked List : Node Creation",
          "Double Linked List : Insertion - Beginning",
          "Double Linked List : Insertion - Middle",
          "Double Linked List : Insertion - Ending",
          "C Code : Double Linked List : Insertion - Beginning, Middle, Ending",
          "C++ Code : Double Linked List : Insertion - Beginning, Middle, Ending",
          "Python Code : Double Linked Lists : Insertion - Beginning, Middle, Ending.",
          "Double Linked List : Deletion - Beginning",
          "Double Linked List : Deletion - Ending",
          "Double Linked List : Deletion - Middle",
          "C Code : Double Linked List : Deletion - Beginning, Ending and Middle",
          "C++ Code : Double Linked Lists : Deletion - Beginning, Middle, Ending.",
          "Python Code : Double Linked List : Deletion - Beginning, Ending and Middle",
          "Stack Implementation using Linked List",
          "Queue Implementation using Linked List",
          "Extra Stuff : Linked Lists nodes count - with loops",
          "Extra Stuff : Linked Lists nodes count - with Recursion"
        ],
        "5. Binary Trees": [
          "Binary Trees : Introduction",
          "Binary Trees : Traversing Basic",
          "Binary Trees : Traversing Technique - PREorder, INorder, POSTorder.",
          "Binary Trees : Traversing Techniques - PREorder Recursive Code",
          "Binary Trees : Traversing Techniques - INorder and POSTorder Recursive Codes",
          "Binary Trees : Creating Binary Trees from PREorder and INorder.",
          "Binary Trees : Creating Binary Trees from POSTorder and INorder.",
          "Binary Trees : Arithmetic Expression Trees",
          "Binary Trees : Arithmetic Expression Trees - Example"
        ],
        "Binary Search Trees": [
          "Binary Trees : Drawbacks",
          "Binary Search Trees : Introduction",
          "Insertion on Binary Search Trees",
          "C Code : Insertion on BST.",
          "Deletion on Binary Search Trees",
          "C Code : Deletion on BST.",
          "C Code : Search a node and Modify a node.",
          "C Code : Number of nodes in BST.",
          "C Code : Number of leaf nodes in BST.",
          "C Code : Number of Internal nodes in BST.",
          "C Code : Finding Minimum and Maximum element in BST."
        ],
        "Heaps": [
          "Introduction and Definition of Heaps (Max Heap and Min Heap).",
          "Max Heap Creation (Insertion Operation).",
          "Heap Tree Creation Time Complexity.",
          "Heap Tree representation by using Arrays"
        ],
        "BONUS LECTURE - ADVANCED DATA STRUCTURE : 6. AVL Trees - Exclusive": [
          "6.1 Why AVL Trees are required?",
          "What is AVL Trees & Introduction.",
          "Insertion : Imbalance",
          "Insertion : LL Imbalance",
          "Insertion : RR Imbalance",
          "Insertion : LR Imbalance",
          "Insertion : RL Imbalance",
          "AVL Tree Creation (Insertion) - 1",
          "AVL Tree Creation (Insertion) - 2",
          "AVL Tree - Deletion : Introduction",
          "AVL Tree - Deletion : R0",
          "AVL Tree - Deletion : R1",
          "AVL Tree - Deletion : R-1",
          "AVL Tree - Deletion : L0",
          "AVL Tree - Deletion : L-1",
          "AVL Tree - Deletion : L1"
        ]
      },
      "requirements": [
        "No prerequisite"
      ],
      "description": "Are you not confidence in coding. So, what has to change to become master in coding.\nYou are in right page, first please go through the description.\nThank you for coming to course page. Hope you seen Demo Videos.\n(Highest Rated course)\nData Structures is the basic course for any computer science student. This course discusses every topic from very basics and reach maximum depth possible.\nNote : A person with zero knowledge also can understand the course and a expert in data structures and algorithms also can find new techniques and can deep dive.\n\n\nEverything under one roof  (No Commercial angle):\nData structures.\nAdvanced Data Structures Like AVL Trees, Splay Trees.\nAlgorithms.\nDifferent strategies for developing algorithms.\nTime complexities (Exclusive - You will analyze any type of algorithm for time and space complexity after completion).\nExclusive Lessons on 'Recursion' for both beginners and advanced.\nImplementation in C language.\nImplementation in C++ language.\nImplementation in Python.\nSolid examples for every topic with simple real world scenarios.\nInterview Preparation Strategies.\nPin point discussion (Every Small topic covered in separate lesson).\nLine by line code development in C, C++ and Python.\nDownloadable Source Code in C, C++ and Python for every Program.\nMedium PACE discussion for every topic.\nComparison based discussion with related topics.\n40+ hours on-demand video content.\n25+ downloadable resources.\nData Science Oriented Course.\nVery Soon every program is going to implement in 'JAVA' also.\nCourse is useful for \"Coding Interview\".\nOptimized algorithm discussions for working professionals in IT field.\n\n\nSee the Index how strongly it is designed (Please spend some time to view the every chapter and what way topics are covering).\nApproximately 200 Lessons and many more are going to add.\nVery Unique feature of this course is every algorithm implemented in both C, C++ and Python languages (JAVA Implementation very SOON).\n\n\nDon't see the number of students registered right now Since it started recently. See the content quality and decide. Journey to space also will start with first step.\nEnd of the course you will be able to understand real applications of each data structures and best way to write algorithms with less time and space complexities.\n\n\nWhat you will learn :\nData Structures :\nArrays\nStacks\nQueues\nLinked lists (Single, Double, Circular and problems)\nTrees  ( Binary Trees, Binary Search Trees, AVL Trees and Splay Trees along with operations).\nGraph ( Representations, BFS, DFS).\nHashing ( collision resolutions techniques)\nAlgorithms :\nAsymptotic Notations ( Big Oh, Big Omega, Theta, Small Oh, Small omega).\nTime Complexity Calculation ( Simple loops, Nested Loops, Recursion)\nDivide and Conquer Strategy\nGreedy Method\nDynamic Programming\nSorting Algorithms ( Bubble Sort, Selection Sort, Insertion Sort, Quick Sort, Merge Sort, Heap Sort)\nSearching algorithms ( Linear Search, Binary Search).\nMiscellaneous Topics\n\n\nMoreover, Once you buy the course, it's yours. We update the content regularly, and all the updates come to you for free in the one-time purchase you make.\nThat means with your one-time purchase you will have lifetime access to new tutorial added to the course.\n\n\nWho this course is for:\nFor everyone\nAcademic Students.\nInterview Preparation Persons.\nCompetitive Exam Preparation Aspirants.\nAnyone interested in Data Structures and Algorithms.\nThose who want to become a highly paid coding developer.\nThose who want to open up doors in your IT career by learning one of the world's most popular and in-demand programming.\n\n\nWhat you can do after completing this course!!\nData Science\nArtificial Intelligence\nDeep Learning\nApplications in many Frontend Development and Backend Development.\n\n\nSome Testimonials :\nJoseph\nRating: 5.0\nMr. Atchyut Kumar does an excellent job of thoroughly explaining each method data structure. He shows with plenty of detailed examples, making it very easy to understand. He doesn't go straight to the solution, he explains things in a way that make it easy to understand with charts and very descriptive diagrams. It makes for very easy learning. You won't be disappointed.\nDeekshit kumar\nRating: 5.0\nOne of the best teachers I've ever had! He is a masterful lecturer and is very good at explaining topics even for the Beginners. I hope he decides to make more Computer Science courses.\nRavi Kumar\nRating: 5.0\nThe course was great. Great part of his course is every concept explaining in all possible directions. Always starting from very basic and going very deep as much as possible. Most part of the material was complex and instructor found a way to explain it clearly. A lot of examples were provided were discussed for every concept. Highly recommended course!\n\n\nImportant information before you enroll!\nIf you find the course is not useful for your career, don't forget you are covered by a 30-day money back guarantee.\nOnce enrolled, you have unlimited, 24/7, lifetime access to the course (unless you choose to drop the course during the first 30 days).\nYou will have instant and free access to any updates I'll add to the course - video lectures, additional resources, quizzes, exercises.\nYou will benefit from my full support regarding any question you might have 7 days a week, This is not just a programming course, You will play with data structures and algorithms in C and Python.\nCheck out the promo video at the top of this page and some of the free preview lectures in the curriculum to get a taste of my teaching style and methods before making your decision.\n\n\nALL THE BEST FOR YOUR BRIGHT FUTURE.",
      "target_audience": [
        "all"
      ]
    },
    {
      "title": "Introduction to Data Structures & Algorithms in Java",
      "url": "https://www.udemy.com/course/introduction-to-data-structures-algorithms-in-java/",
      "bio": "Designed to help understand the fundamentals of DS & Algorithms really well. A must have for programming interviews.",
      "objectives": [
        "Be able to know and implement various data structures and algorithms",
        "Be able to write your own algorithms and understand if their running time is good or bad"
      ],
      "course_content": {},
      "requirements": [
        "Although any programming language may be used by the student, we use the java programming language to implement algorithms."
      ],
      "description": "This course introduces some basic data structures (arrays, linked lists, stacks, queues, trees and heaps) and algorithms (various sorting algorithms, and algorithms for operations on binary search trees and heaps). We will also cover recursion in this course. Use of graphics and animations makes the lectures very easy to understand and digest. After taking this course, you will loose your fear for data structures and algorithms.",
      "target_audience": [
        "Anyone who wants to learn data structures and algorithms (introductory)",
        "Anyone appearing for interviews, can be used to understand from grounds up, or as a quick revision"
      ]
    },
    {
      "title": "Learn RabbitMQ: Asynchronous Messaging with Java and Spring",
      "url": "https://www.udemy.com/course/learn-rabbitmq-asynchronous-messaging-with-java-and-spring/",
      "bio": "Learn how to develop Queues, Exchanges, Routings and Listeners with RabbitMQ using Java and Spring!",
      "objectives": [
        "Learn to build applications with RabbitMQ using Java and Spring!",
        "Learn and Implement Topics, Queues, Exchanges and Bindings in RabbitMQ",
        "Learn how to develop message listeners for specific queues and routings",
        "Learn to design asynchronous, message-driven systems with RabbitMQ!",
        "Learn and understand Message-Queueing",
        "Learn and understand Advanced Message-Queueing Protocol or AMQP",
        "Learn and understand how Advanced Message-Queueing Protocol works",
        "Learn and understand the architecture of RabbitMQ"
      ],
      "course_content": {
        "Introduction": [
          "Welcome!",
          "About This Course"
        ],
        "Getting Started with RabbitMQ": [
          "Section Overview",
          "Installing RabbitMQ and Management Plugin on Windows",
          "Installing RabbitMQ and Management Plugin on MacOS",
          "First Look with RabbitMQ Admin",
          "Creating Queue, Exchange and Binding and Publishing Message"
        ],
        "Messaging , AMQP and RabbitMQ": [
          "Section Overview",
          "What is Messaging and Why We Need It?",
          "Messaging Protocols Overview",
          "What is AMQP and What It Solves?",
          "Know your MQ!",
          "Meet RabbitMQ",
          "4 Actors of Messaging with RabbitMQ - Exchanges, Queues, Topics and Bindings",
          "Exchanges",
          "Know the Exchange Types!",
          "Queues",
          "Topics",
          "Bindings",
          "RabbitMQ vs. other MQs: A Comparison"
        ],
        "Application Development Basics with RabbitMQ": [
          "Section Overview",
          "Publishing Messages with RabbitTemplate",
          "Publishing Binary Messages with RabbitTemplate",
          "Configuring a Listener for Messages",
          "Testing Out the Listener"
        ],
        "Configuring Queues and Exchanges with RabbitMQ": [
          "Section Overview",
          "Queue Configuration with Spring AMQP",
          "Direct Exchange Configuration with Spring AMQP",
          "Topic Exchange Configuration with Spring AMQP",
          "Fanout Exchange Configuration with RabbitMQ",
          "Headers Exchange Configuration with RabbitMQ",
          "Creating Bindings Between Queues and Exchanges",
          "Scenario: Receiving and Processing Messages from Different Apps",
          "Publishing Messages with RabbitMQ"
        ],
        "Summary": [
          "What Have We Learned?",
          "Thank You!"
        ]
      },
      "requirements": [
        "Working knowledge of Java, Spring preferred",
        "Any Java IDE (Intellij preferred)"
      ],
      "description": "- \"RabbitMQ is the most widely deployed open source message broker.\"  - Pivotal Software\nJoin me in this course to learn ins and outs of RabbitMQ!\nIf you want to learn RabbitMQ and how to develop with it using Java and Spring AMQP, this is the only course you need!\nFrom Exchanges to Queues, Bindings to Message Listeners, we'll start by learning the pillars, corner stones of RabbitMQ and build on top of them with practical development for all these concepts using Java and Spring!\nI will walk you through the starting from scratch, the messaging itself! We'll discover what messaging means and how it affects our architectural decisions and design considerations. Next up is the AMQP, Advanced Message Queueing Protocol. We'll discover the benefits and reasons behind the popularity of AMQP and how it shaped the architecture of RabbitMQ from messaging concepts to client platforms making use of it.\nWhile discovering the advantages of AMQP, we'll then start discovering RabbitMQ and its architecture. We'll learn Queues, Exchanges, Bindings, Routings, Publishers, Subscribers and much more about RabbitMQ!\nAfter meeting with RabbitMQ through the concepts that it puts on the table, we'll start preparing our environment for running RabbitMQ and developing applications using it. We'll install all the necessary software for RabbitMQ and have it up and running on our machines both on Windows and MacOS.\nWhen we finish preparing our environment for RabbitMQ, we'll start discovering by RabbitMQ Management Dashboard. We'll see and learn how RabbitMQ Dashboard helps us easily monitor and manage our RabbitMQ server. We will then send our first ever message to RabbitMQ! After sending our message, we'll learn how to create Queues, Exchanges and Bindings between them.\nNow it's time to start developing for RabbitMQ! We'll learn everything we need to develop software using RabbitMQ starting with RabbitTemplate. RabbitTemplate helps us publish messages to RabbitMQ really easy and we'll learn to use it by examples. From simple text messages to actual objects, we'll learn to send any kind of messages.\nWe'll then deepen our knowledge by developing actual Queues, Exchanges and Binding with Java and Spring! We'll learn how to construct Queues, Exchanges, Bindings with Spring AMQP using both Annotations and Builder methods. We're not going to finish it there and we'll develop a message listener for specific queue that we also created programmatically. We'll both publish and listen to messages so we'll developing a complete application from scratch just like we should in our professional applications!\nUntil this point, you'll practically gain all the knowledge you need to develop applications with RabbitMQ. But we'll not stop there and also think of an asynchronous messaging pipeline scenario where we send messages from one application and receive from another one. If you're beginning to work with RabbitMQ or if you need to realize an asynchronous scenario for your next design, this part is especially valuable to you and you should definitely learn how to do this!\nBelow are some of the key metrics for RabbitMQ; if you're still hesitant to take this course, please read these carefully:\nRabbitMQ is the most widely deployed open source message broker or messaging middleware in other terms.\nWith more than 35,000 production deployments of RabbitMQ world-wide at small startups and large enterprises, RabbitMQ is the most popular open source message broker.\nRabbitMQ is lightweight and easy to deploy on premises and in the cloud. It supports multiple messaging protocols. RabbitMQ can be deployed in distributed and federated configurations to meet high-scale, high-availability requirements.\nRabbitMQ runs on many operating systems and cloud environments, and provides a wide range of developer tools for most popular languages.\nI hope I'll be seeing you in the course to teach you everything you need to develop applications with RabbitMQ! I guarantee that you'll learn a lot from this course but please remember that you can always refund it within 30 days so take it and see for yourself!",
      "target_audience": [
        "Anyone who wants to learn RabbitMQ inside-out!",
        "Anyone who wants to learn Publishing and Subscribing to messages with RabbitMQ",
        "Anyone who wants to build and design asynchronous, loosely-coupled systems with Java and Spring",
        "Anyone who is interested in asynchronous systems with message exchanges",
        "Anyone who wants to learn Message-Queueing",
        "Anyone who wants to learn Advanced Message-Queueing Protocol or AMQP"
      ]
    },
    {
      "title": "The Complete Beginner's guide to LabView Programming",
      "url": "https://www.udemy.com/course/the-complete-labview-course/",
      "bio": "A-Z Course, that covers all the fundamentals to get you started in the realm of Labview programming",
      "objectives": [
        "Write their own Labview code and understand programming fundamentals"
      ],
      "course_content": {
        "Introduction to Labview": [
          "Introduction",
          "Labview Programming Environment, VIs",
          "Data Flow Programming",
          "Data Types in Labview",
          "Help and Debugging"
        ],
        "Let's start programming": [
          "Hello World, Celsius to Fahrenheit Converter",
          "Thermometer SubVI",
          "Introduction to loops",
          "Loop Examples",
          "Charts and Graphs",
          "Local and Global variables",
          "Clusters",
          "Clock Timer Example",
          "String functions",
          "Shift Registers",
          "Feedback Node",
          "Auto Match VI",
          "Case Structures",
          "Temperature Analysis",
          "Property Nodes",
          "Formula Nodes"
        ]
      },
      "requirements": [
        "Please download and install Labview"
      ],
      "description": "This is a Complete Labview Course, which takes you from zero to an intermediate level, where you will be able to create your own programmes and understand other people's code as well. This is a practical course, which means that although all the necessary background knowledge is explained, the emphasis is put on learning through examples.\n\nThe course is structured in two parts:\nIntroduction to Labview\nLet's start programming\nThe first section deals with the necessary background knowledge needed to get started in Labview Programming. This includes taking a look at the development environment and making some concepts clear.\nThe second part deals with examples, which enable You to understand what Labview is really about and how awesome it is.\nI hope you will enjoy this course and can't wait to hear your feedback!",
      "target_audience": [
        "This Labview Course is meant for anyone who is interested in learning programming. No prior programming knowledge is needed.",
        "This course is not for you if you are interested in more advanced Labview programming techniques."
      ]
    },
    {
      "title": "RabbitMQ & Java (Spring Boot 3) Bootcamp - Basic To Advanced",
      "url": "https://www.udemy.com/course/rabbitmq-java-spring-boot-for-system-integration/",
      "bio": "Learn RabbitMQ (queue + stream) & Java Spring Boot 3 for asynchronous messaging & real-time data transfer among systems",
      "objectives": [
        "Setup a basic RabbitMQ environment",
        "Learn & implement RabbitMQ concepts : message, queue, exchange",
        "Learn basic knowledge of Java with Spring Boot",
        "Learn & implement Java programs to handle asynchronous data integration among multiple systems using RabbitMQ",
        "Handle basic error that occurred on Java + RabbitMQ, including how to retry failed message",
        "Using basic RabbitMQ REST API",
        "Using RabbitMQ Stream : Offset Tracking, Working With JSON, and Super Stream"
      ],
      "course_content": {
        "Introduction": [
          "Welcome to This Course",
          "Course Structure",
          "Tips : How To Get Maximum Value From This Course"
        ],
        "Technology in This Course": [
          "Download Source Code & Scripts",
          "Messaging System",
          "Messaging System : A Note",
          "RabbitMQ Introduction",
          "Java & Spring"
        ],
        "Installation": [
          "Install RabbitMQ on Windows",
          "Install RabbitMQ on Linux",
          "Install RabbitMQ on Mac",
          "Install RabbitMQ using Docker",
          "Install Java",
          "Install Eclipse"
        ],
        "RabbitMQ Basic Concepts": [
          "RabbitMQ Basic Concepts"
        ],
        "Start Writing Codes": [
          "Spring Boot",
          "Hello RabbitMQ - Before We Start!",
          "Rabbitmq Queue Types",
          "Hello RabbitMQ",
          "Consumer Is Real Time Indeed",
          "Multiple Consumers For Each Queue"
        ],
        "Working with JSON Message": [
          "Why JSON?",
          "Producing JSON Message",
          "Customize JSON Format",
          "Consuming JSON Message"
        ],
        "RabbitMQ Exchange": [
          "Exchange : The Employee",
          "Fanout Exchange",
          "Direct Exchange",
          "Topic Exchange"
        ],
        "RabbitMQ REST API (Part 1)": [
          "RabbitMQ REST API Part 1"
        ],
        "Handling Error": [
          "DLX (Dead Letter Exchange)",
          "TTL (Time To Live)",
          "Consumer Exception without DLX",
          "Handle Consumer Exception with DLX (Solution One)",
          "Handle Consumer Exception with DLX (Solution Two)",
          "Which DLX Solution to Choose?",
          "TTL Demo (When No Consumer Available)"
        ],
        "Headers Exchange": [
          "Headers Exchange"
        ]
      },
      "requirements": [
        "Understand basic algorithm and programming language",
        "Basic Java programming language (especially with Spring) will helps, but not a mandatory requirement"
      ],
      "description": "New MAJOR Update!\nALL courses were re-recorded using Spring Boot 3!!\nBetter voice\nLearn RabbitMQ Stream (and also RabbitMQ SuperStream)\n\n\nNew Update!\nMore advanced concepts and technical hands-on for RabbitMQ. OF course, the working source code included :\nAutomatically convert Java objects to/from JSON\nSchedule consumers to stop/start at a given time\nConsumer prefetch\nHandle message ordering\nA new way to write consumer\nConsistent hash exchange\nRequest-reply pattern\nCreate RabbitMQ structures (queue, exchange, binding) from Java code\nInstall RabbitMQ using Docker. Works for all operating systems!\nUse RabbitMQ plugins to extend functionalities\nDon't want to install RabbitMQ? Use it on a cloud!\nRetry mechanism without any code! (direct exchange)\nAgain, do the retry mechanism without writing code! (fanout exchange)\nAdditional bonus for modern architecture!\nSingle active consumer\nReliable publishing\n\n\nMessaging System\nNowadays, we work with multiple systems and data that run among them. It's a common thing that one system triggers another system(s) process, or data needs to be transferred among systems. Whether your systems are built on monolith or microservice, whatever database you use, you need those data moving from one point to another. And you need those movements FAST to be processed immediately (otherwise, your life will be ruined).\nThat kind of demand is so common; fortunately, today's technology has an answer for that. Say hello to the messaging system, where you can send messages easily from one system to another system(s) asynchronously, in real-time intervals. There are some popular messaging systems in the market, and in this course, we will be talking about one of the most popular: RabbitMQ.\n\n\nRabbitMQ\nRabbit MQ is like a central hub where you place all data from the source system(s), and the other corresponding systems take the data and process it. RabbitMQ is open-source, reliable, and able to work on clusters. It has a small learning curve to get started, yet powerful enough for system integrations.\nThis course includes everything you need to know about basic RabbitMQ and implementation using Java (Spring Framework). After finishing this course, you should be able to install, configure, and use RabbitMQ from the Java Program. In this course, we will walk through detailed step-by-step from concept to hands-on Java coding. Given such a way, you will learn to understand the logic behind and experience how things are done using Rabbit MQ and Java source codes.\n\n\nJava and Spring Boot\nJava itself has been a popular language for years. Several programming language indexes recognize Java as the world's most used programming language. Due to its popularity and long history, Java has many open-source projects or frameworks to help developers work more efficiently. One of the popular Java frameworks is Spring Framework. Over the years, Spring Framework has grown substantially among the Java community. Almost all software components required by a Java application are available within Spring Framework. However, configuring Spring requires some effort. This involves setting up library dependencies and configuring the required Java Spring beans using XML or annotations in Java code. Spring developers soon realized that automating much of this work was possible.\nSo 2014, Spring Boot 1.0 was released for the Java community. Spring Boot gives Java programmers a lot of automatic help and leads to Java developers' quick, large-scale adoption of the project. Fast forward to today, where Spring Boot has evolved, and the latest Spring Boot 3 provides many features to develop enterprise-level applications.\nIn real-world applications, Java with Spring and RabbitMQ can benefit data transfer among systems. Rabbit MQ is popular among Java developers, although RabbitMQ developers provide clients for multiple programming languages besides Java.\n\n\nWhat You Will Get\nAfter finishing the course, you will learn:\nInstallation of RabbitMQ and Java (In Windows. Currently, I don't have Linux/Mac)\nRabbitMQ key concepts\nManaging RabbitMQ from the web user interface\nCreate publisher and consumer using Java (Spring Boot)\nBasic error handler if there is a failure during processing Rabbit MQ message\nRetry mechanism on RabbitMQ if there is a failure message\nHandle message ordering\n\n\nThe course will explain to you the theory of RabbitMQ and a lot of hands-on coding to get your hands dirty and your brain working. Whether you are a hobbyist, beginner, or experienced developer, this course will surely bring added value to you!\n\n\nRoad to Microservices\nMessage broker is one important pillar of microservice architecture. In microservice, we use asynchronous messaging for inter-service communication. Services communicating by exchanging messages over messaging channels like RabbitMQ.\nIn this course, you will learn the theory and hand-code of messaging with RabbitMQ and an introduction to REST API, another microservice architecture pillar.",
      "target_audience": [
        "Developers who want to learn how Rabbit MQ can fit into their enterprise systems, especially when integrating data among multiple systems, in near-real-time fashion",
        "Anyone who wants to know the basic ways of messaging system, or publish-subscribe pattern",
        "Technical Manager / Architect that find a way to integrate data from one system to another"
      ]
    },
    {
      "title": "IBM webMethods: From newbie to proficiency",
      "url": "https://www.udemy.com/course/softwareag-webmethods-from-newbie-to-proficiency/",
      "bio": "webMethods Integration Server | Universal Messaging | GraphQL | JDBC | APIs",
      "objectives": [
        "Download & Install webMethods Integration Server & Universal Messaging",
        "Develop your 1st flow services",
        "Expose & Consume SOAP & REST APIs",
        "Perform JDBC queries using webMethods",
        "Publish & Consume messages using webMethod Messaging Service",
        "Understand webMethods Integration Server Admin Portal",
        "GraphQL in webMethods"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Download and Installation": [
          "Download installation binaries and license files",
          "Installation of webMethods",
          "Start & Stop webMethods suite"
        ],
        "Flow Services & Flow Steps": [
          "Packages, Folders & Flow services",
          "Map, Branch, Sequence, Loop & Invoke",
          "Debug & Pipeline",
          "Try/Catch and final"
        ],
        "Portal Admin Page": [
          "Integration Server Admin Page"
        ],
        "APIs": [
          "Expose SOAP API",
          "Consume SOAP API",
          "Expose REST API",
          "Consume REST API"
        ],
        "JDBC": [
          "JDBC Database Connection",
          "JDBC Database Adapters"
        ],
        "GraphQL in webMethods": [
          "Create GraphQL scheme file",
          "Import GraphQL descriptor",
          "Invoke GraphQL Query APIs",
          "Invoke GraphQL Mutation APIs"
        ],
        "Messaging": [
          "Enterprise Manager",
          "JMS & JNDI",
          "Publish message to a queue",
          "Create a trigger and consume message"
        ],
        "Assignments": [
          "Assignment #1",
          "Assignment #2",
          "Assignment #3"
        ],
        "Interview Questions": [
          "webMethods Integration Server",
          "Universal Messaging & Terracotta"
        ]
      },
      "requirements": [
        "Programming Experience",
        "APIs",
        "SQL",
        "Java Messaging Service Concepts",
        "GraphQL"
      ],
      "description": "This course is for developers who would like to learn about webMethods and pursue a career as webMethods developer or webMethods Administrator. webMethods version used in this course is 10.15\n\n\n*Disclaimer: Free webMethods license is not available anymore, however you can enjoy watching the course.\n\n\nI have more than 10 years of experience in webMethods suite. I want to summarize my experience in a short course to support people who want to learn webMethods. In this course, you will find the essential knowledge needed to start your career in webMethods.\n\n\nWith webMethods Integration Server, you have the power to connect anything faster, thanks to open, standards-based integration. Make custom, packaged and mainframe applications and databases—on-premises and in the cloud—interoperable and assure the fluid flow of data across your automated processes. Universal Messaging is a Message Orientated Middleware product that guarantees message delivery across public, private and wireless infrastructures. Universal Messaging has been built from the ground up to overcome the challenges of delivering data across different networks.\n\n\nIn this course, I'll taught you how to do the below:\n1. Download and install webMethods Suite.\n2. Develop your 1st flow service.\n3. Expose and consume APIs.\n4. Perform database queries using webMethods.\n5. Publish and consume messaging using webMethods messaging service.\n6. GraphQL in webMethods\n7. Interview Questions\n\n\nIn order to get the benefits of the course, make sure to be aware of APIs and have basic programming skills.\n\n\nYou can contact me through linkedIn \"Ahmed Fahim webMethods Ninja\" if you to know more information before subscribing to the course.",
      "target_audience": [
        "People who want to pursue career as webMethods developer/Admin"
      ]
    },
    {
      "title": "Jenkins 2 Introduction for Beginners on Windows",
      "url": "https://www.udemy.com/course/jenkins2-windows/",
      "bio": "Novice guide to Jenkins 2 Continuous Integration with a step-by-step guide to DevOps on a Windows System",
      "objectives": [
        "Install Jenkins CI server on Windows",
        "Install and configure several tools commonly used with Jenkins",
        "Understand the basics of continuous inspection, continuous integration, and continuous deployment",
        "Use Jenkins effectively to build, test, and analyze Java projects",
        "Apply the techniques and experience to implement Jenkins and/or a continuous integration system"
      ],
      "course_content": {
        "Introduction": [
          "Course Welcome and Introduction",
          "Course Focus and Approach",
          "What and Why of Jenkins",
          "Jenkins Architecture"
        ],
        "Quick Install": [
          "Quick Install Overview",
          "Jenkins Quick Install",
          "Jenkins Services on Windows",
          "Quick Install Notes"
        ],
        "Jenkins Basics": [
          "Jenkins Basics Overview",
          "Login",
          "Jenkins Dashboard",
          "Create First Job",
          "Project Configuration",
          "First Build",
          "Project Homepage",
          "Enable and Disable Projects",
          "Build History",
          "Build Page",
          "Batch Project",
          "Failing on Purpose",
          "Dashboard Revisited",
          "Deleting a Project",
          "Cleaning Up / Fix Broken Project",
          "Copy a Project"
        ],
        "Manage Jenkins": [
          "Manage Jenkins Overview",
          "Manage Jenkins Page",
          "Update Jenkins",
          "Update Plugins",
          "Plugin Research",
          "Add New Plugin",
          "Uninstall Plugins",
          "Enable/Disable Plugins",
          "Maven Integration Plugin",
          "Configure Jenkins",
          "Global Tools"
        ],
        "Maven Projects": [
          "Maven Projects Overview",
          "Build Locally First",
          "Maven Project",
          "Maven Build and Workspace",
          "Maven Modules and Build Pages",
          "Troubleshooting Maven Projects - Code Update",
          "Troubleshooting Maven Projects - Within Jenkins",
          "Troubleshooting Maven Projects - Replicate Locally",
          "Troubleshooting Maven Projects - Project Workspace",
          "Troubleshooting Maven Projects -Resolve Failure"
        ],
        "Scheduled Projects": [
          "Scheduled Projects Overview",
          "Building on a Schedule - Part 1 - Setup and Configuration",
          "Building on a Schedule - Part 2 - Builds",
          "Building on a Schedule - Part 3 - Revise Schedule"
        ],
        "Source Code Polling": [
          "Polling Overview",
          "Polling 1 - Welcome / Config",
          "Polling 2 - Initial Builds",
          "Polling 3 - Code Updates",
          "Polling 4 - Revise Schedule"
        ],
        "Linked Projects": [
          "Linked Projects Overview",
          "Upstream Project Configuration",
          "Upstream Project Build and Review",
          "Downstream Project Configuration",
          "Downstream Project Build and Review"
        ],
        "Views": [
          "Views Overview",
          "Creating New Views",
          "Regular Expression Views",
          "Deleting a View",
          "View Descriptions",
          "Navigation with Views and Default View",
          "View Build History"
        ],
        "Course Errata and Updates": [
          "Known Issue: Maven Projects Fail with POM Parse Error",
          "Jenkins Incompatibility with Java 9"
        ]
      },
      "requirements": [
        "Basic computer skills",
        "Ability and access to install software (admin rights required)",
        "Desire to learn something new"
      ],
      "description": "This is a beginner's course designed to show how to setup and run a Jenkins CI server starting with continuous inspection (build, test and analysis) for users of Windows-based systems. This course provides a strong foundation for implementing continuous inspection and integration at your company or studio. In order to keep the course short and to-the-point, several decisions were made in order to provide a complete path to continuous integration.\nThe pipeline created in this course consists of the following:\nJenkins CI server installed and configured on Windows\nGit as the source control system\nJava as the main programming language of build projects\nMaven as the build tool\nThis set of tools provides a comprehensive, end-to-end implementation continuous integration pipeline. Jenkins can be installed on many operating systems and supports a myriad of tools and technologies -- which means, this course provides tremendous value to those comfortable or interested in other operating systems and/or technologies.\nCourse Outline\nIntroduction provides an overview for the course, which leas to the Core Concepts for Jenkins. This provides a foundation for the remainder of the course.\nQuick Installation provides an abbreviated step-by-step instructions on how to setup Jenkins and all the related tools specifically on Windows. Full Installation details is covered in the bonus section of the course.\nJenkins Basics provides a first look at Jenkins at work with a very simple \"freestyle\" project. This allows us to learn the Jenkins interface and the key features it provides.\nAfter our initial introduction to Jenkins, we Manage Jenkins plugins and global configuration.\nThen, we dive into Maven Projects specifically -- since Jenkins can understand Maven and thus provides special features for Maven projects -- with the right plugins installed.\nWe venture beyond the basics with Scheduled Projects and periodically Polling Source Control, which are closely related. Then we look at how to Link Projects together by calling upstream and downstream projects. Finally, we organize our projects with Views.\nCourse Features\nPresentations provide audio/video training of conceptual ideas in each major area or introduction of new concepts.\nScreencasts provide a video of the instructor's computer system with any actions, commands, or screens displayed and narrated. There are several hours of screencat video content -- it makes up the vast majority of the course. Any command line based screencast will include a command listing in the lecture downloads.",
      "target_audience": [
        "Developers, software engineers, and programmers wanting to avoid \"it works on my machine\" syndrome",
        "IT professions looking to implement continuous inspection through continuous deployment at their company",
        "IT management that wants to have a deeper understanding of Jenkins and other DevOps concepts",
        "DevOps (Development/Operations) professional looking at Jenkins as a build tool or as part of a larger software delivery pipeline",
        "Software Engineers, Developers, and DevOps staff working on a Windows system"
      ]
    },
    {
      "title": "Understand asynchronous programming with .NET and C#",
      "url": "https://www.udemy.com/course/master-asynchronous-programming-with-dotnet/",
      "bio": "Master the Thread API, the evolution to TPL with async and await, the use of parallel programming and Thread safety",
      "objectives": [
        "Why is asynchronous programming needed in the first place",
        "Asynchronous programming concepts",
        "All asynchronous programming techniques in .Net.",
        "Thread Safety and Coordination",
        "Threads, Tasks and async & await",
        "Parallel Programming Framework (Pfx)"
      ],
      "course_content": {
        "What is asynchronous programming": [
          "Introduction to asynchronous programming",
          "Mechanisms of asynchronous programming I: Machines & Processes",
          "Basics of asynchronous programming",
          "Mechanisms of asynchronous programming II: Threads",
          "Threads as asynchronous programming mechanism",
          "Course Contents and How to work with the course"
        ],
        "Handle Threads in .Net": [
          "Introduction to Threads",
          "Code for the chapter",
          "How to Start a Thread",
          "Start a Thread",
          "How to Stop a Thread",
          "Stop a Thread with Coordination",
          "Stop a Thread",
          "Create Foreground and Background Threads",
          "Thread Coordination: Thread.Join",
          "Error and Exception Handling with Threads",
          "The Threadpool",
          "The Threadpool: Examples for Enqueuing work to the threadpool",
          "Summary of Thread API",
          "Quiz Threads",
          "Learn to handle the Thread API"
        ],
        "Thread Safety and Coordination": [
          "Introduction to concepts of thread safety",
          "Code for the chapter",
          "Thread Safety",
          "What does atomic mean in the context of thread safety?",
          "Exclusive Locking Mechanisms and atomic Operations",
          ".Net locking Workhorse: Monitor and lock",
          "Non-Exclusive Locking: The ReaderWriterLock(Slim)",
          "Non-Exclusive Locking: The Semaphore(Slim)",
          "Signaling between Threads with the Monitor",
          "Signaling with Events: ManualResetEvent & AutoResetEvent",
          "Concurrent Collections",
          "Summary of Thread Safety",
          "Learn to handle Thread Safety mechanisms"
        ],
        "TPL - Task Parallel Library": [
          "Introduction to the TPL",
          "3 ways to start a Task",
          "Control Task behavior with the underlying Thread",
          "Tasks and data",
          "Create an I/O bound Tasks",
          "Error Handling with Tasks",
          "Task Relationships",
          "Cancellation",
          "Anything a Task: TaskCompletionSource",
          "async & await 1: make async code look like synchronous one",
          "async & await 2: All Method signatures",
          "Task Combinators",
          "Summary of the TPL",
          "All about TPL"
        ],
        "Basics of Parallel Programming": [
          "Basics of Prallel programming in .Net",
          "Simple parallelism: Parallel.Invoke",
          "For in Parallel: Parallel.For",
          "ForEach in Parallel: Parallel.ForEach",
          "Parallel Linq: PLINQ",
          "Summary for Parallel Programming",
          "Quiz on Parallel Programming"
        ],
        "Bonus: General Things about asynchrony": [
          "Introduction to server side asynchrony",
          "Deadlock: an example",
          "Another Signaling construct: The Barrier class",
          "Basics: Delegates and Lambdas",
          "Make a Legacy (synchronous) API asynchronous"
        ]
      },
      "requirements": [
        "Knowledge in C# is helpful, any other Object oriented language will do",
        "General understanding of programming concepts",
        "Interest in deeper knowledge about asynchronous programming"
      ],
      "description": "Have you ever had issues with a bug that resulted in an asynchronous programming wrong doing? Did your users report some unresponsive behavior of your application they did not want to deal with? Or does your boss want you to utilize the given hardware in the most efficient way possible?\nIf you had any of those or similar issues with asynchronous programming, this course will help you solve those issues. In other words this course will help you to handle multithreaded and concurrent scenarios in programming like  you always wanted to.\nBesides looking at the underlying mechanisms, we will look at all the different techniques to utilize our freshly crafted knowledge.\nThis course not only gives you the well rounded background to understand what is going on with all that concurrency, parallelism and multi threading, but also hands over all the needed tools to you, that you will need to excel in this regard\nIt includes:\nTPL with Tasks and async await keywords\nThe actual Thread API\nThread Safety with Locking, Non-exclusive locking and Concurrent Collections\nEverything about how concurrency works under the hood\nIn this course you will also see examples to every of the above topics and this will guide you to become a master of asynchronous programming techniques with .NET.\n\n\nSo do not hesitate and enroll to:\n\nAdvance your career\nMaster one of the most needed skills of contemporary programming\nIf you still do not find any value here, you still have the 30 days refund.",
      "target_audience": [
        ".Net developers",
        "Backend developers with .Net",
        "C# Developers"
      ]
    },
    {
      "title": "Data Structures with Python",
      "url": "https://www.udemy.com/course/data-structures-with-python/",
      "bio": "The All-In-one Course for you to Conquer Data Structures with Python",
      "objectives": [
        "Data Structures in Python",
        "All the way from the Built-in to User defined data structures intuition with implementation",
        "Understand OOPS Concept required to build User-defined Data Structures",
        "How to solve and approach a Data-Structure Problem",
        "Understand applications of Data Structures",
        "Know and determine Time-Complexities of Operations over Data-Structures",
        "Discover methods on Data-Structures",
        "Solved problems so that it's easy to start off practicing",
        "Download The Whole Code"
      ],
      "course_content": {},
      "requirements": [
        "Basics of Python like variables , methods and operators."
      ],
      "description": "Data structure provides the right way to organize information in the digital space. The data structure is a key component of Computer Science and is largely used in the areas of Artificial Intelligence, operating systems, graphics.\nThe right selection of data structure can enhance the efficiency of computer programs or algorithms in a better way.\nLearn Data Structures in Python all the way from Built-in to User-Defined.\nMethods on Data structures are also covered so that we can use them efficiently.\nThe data structure and algorithm provide a set of techniques to the programmer for handling the data efficiently. The programmer should understand the core concepts of data handling.\nNecessary OOPS is also covered so, that there won't be a problem understanding further concepts.\nIt's Beginner Friendly with intuition followed by code tutorials, So It's Easy to Understand and Visualise a Data Structure.\nSo, Solving Problems would be easier after learning the Data Structure as you have better intuition.\n\n\n\n\nCourse Design:  Intuition of the concept + Code walkthrough in Python + Time and Space Complexity + Application of that Data Structure in real Life.\n\n\nData Structures Include:\nLists\nTuples\nSets\nDictionaries\n2-D Arrays\nOOP For understanding data structures\nStacks\nQueues\nDeque\nLinked-Lists\nDoubly Linked Lists\nCircular Linked Lists\nTrees\nBinary Trees\nBinary Search Trees + Traversals\nAVL Trees\nHeaps +  Heap sort\nPriority Queue\nHashMaps/HashTables\nGraphs + Properties\nGraph Traversals\nSpanning Trees + MST\nPrims + Kruskals Algorithms for MST\nTries (Keyword Trees)\nMisc Section( Has important concepts )\nTake Away Section( Download the whole source code in this Section)",
      "target_audience": [
        "Python developers who have basics and want to crack coding interviews",
        "Developers who want to improve python for data structures and implement them in interviews",
        "Beginners in python who want to have data structures foundation",
        "Students who want to start competitive programming"
      ]
    },
    {
      "title": "Mastering System Design: From Basics to Cracking Interviews",
      "url": "https://www.udemy.com/course/mastering-system-design-from-basics-to-cracking-interviews/",
      "bio": "Build Scalable Systems, Master Architectural Patterns, and Ace System Design Interviews",
      "objectives": [
        "Understand Core Principles – Learn scalability, availability, reliability, and performance to build efficient system architectures.",
        "Design Scalable Systems – Master load balancing, sharding, caching, and microservices for high-performance applications.",
        "Apply Industry Best Practices – Use proven strategies from top tech companies to build robust and maintainable systems.",
        "Crack System Design Interviews – Develop a structured approach to solving system design problems and confidently tackle interviews."
      ],
      "course_content": {
        "Introduction": [
          "Welcome",
          "What is System Design?",
          "Why is System Design Important?",
          "The Evolution of System Design Over the Last 25 Years",
          "How This Course is Structured?",
          "How to Navigate This Course Effectively"
        ],
        "Networking & Communication (System Design Fundamentals)": [
          "Introduction to Networking in System Design",
          "Understanding IP Addresses",
          "How DNS Works",
          "Client-Server Model Explained",
          "Forward Proxy vs. Reverse Proxy",
          "Introduction to Load Balancing",
          "What is an API Gateway?",
          "Content Delivery Networks (CDN)",
          "Networking Fundamentals Summary"
        ],
        "Protocols (System Design Fundamentals)": [
          "Lets Start Protocols",
          "TCP & UDP",
          "HTTP - The Backbone of the Web",
          "REST & RESTfulness - API Design Principles",
          "Real-Time Communication Protocols",
          "Modern API Protocols - Beyond REST",
          "Summary & Practical Applications"
        ],
        "Architectural Patterns (System Design Fundamentals)": [
          "Introduction to Architectural Patterns",
          "Software Architecture Patterns & Styles",
          "Multi-Tier Architecture",
          "Microservices Architecture",
          "Event-Driven Architecture",
          "Summary & Practical Applications"
        ],
        "Web Concepts in System Design (System Design Fundamentals)": [
          "Introduction to Web Concepts",
          "Web Sessions: Managing State in Web Applications",
          "Serialization: Data Exchange & Storage Formats",
          "CORS: Cross-Origin Resource Sharing & Web Security",
          "Summary & Practical Applications"
        ],
        "Scalability in System Design": [
          "Introduction to Scalability",
          "Scaling Strategies: Horizontal, Vertical & Diagonal",
          "Understanding Load Balancers: Types, Algorithms & Cloud Solutions",
          "Autoscaling & Best Practices in Cloud Environments",
          "Summary and Final Thoughts"
        ],
        "Storage - Database and Storage": [
          "Introduction to Storage in System Design + CAP Theorem",
          "Understanding Database Models: SQL vs. NoSQL",
          "Advanced Database Topics: Sharding, Replication & Polyglot Persistence",
          "Object Storage in Modern Systems",
          "File Systems and Distributed Storage",
          "Big Data Fundamentals",
          "Summary and Key Takeaways - Choosing the Right Storage Solution"
        ],
        "Performance - Concepts, Tools & Techniques": [
          "Introduction to System Performance",
          "Caching for Speed Optimization",
          "Messaging & Queues for Decoupling",
          "Concurrency & Parallelism",
          "Database Performance Optimization Techniques",
          "Summary and Recap - Performance"
        ],
        "Reliability, Availability & Disaster Recovery": [
          "Introduction to System Reliability",
          "High Availability, Fault Tolerance & Failover",
          "Backup & Recovery Strategies",
          "Disaster Recovery in Practice",
          "Summary and Recap: Building Reliable Distributed Systems"
        ],
        "Security in System Design – Principles, Practices & Protocols": [
          "Introduction to Security in System Design",
          "Authentication & Authorization",
          "Data Protection & Secure Communication",
          "Network & Infrastructure Security",
          "Summary and Recap: Designing Secure Distributed Systems"
        ]
      },
      "requirements": [
        "Basic Programming Knowledge – Familiarity with any programming language (Java, Python, JavaScript, etc.).",
        "Fundamentals of Data Structures & Algorithms – Understanding of arrays, linked lists, trees, graphs, hashing, and sorting algorithms.",
        "Basic Understanding of Databases – Knowledge of SQL and NoSQL databases, indexing, and basic query optimization.",
        "Familiarity with Web Applications – Awareness of how client-server architecture, APIs, and HTTP work.",
        "No prior system design experience is required—this course will guide you from the basics to advanced concepts"
      ],
      "description": "System design is a critical skill for software engineers, whether you're developing real-world applications or preparing for technical interviews at top tech companies. As software systems grow in complexity, engineers must understand how to design architectures that scale efficiently, handle high traffic, and remain resilient to failures. This course takes you on a structured journey, starting from fundamental concepts and progressing to advanced architectural patterns used in industry-leading applications.\nThroughout this course, you’ll gain a deep understanding of scalability, availability, reliability, and fault tolerance—key principles that drive modern system design. You’ll explore monolithic vs. microservices architectures, distributed systems, caching mechanisms, load balancing, and database scaling techniques. Each topic is reinforced with real-world case studies, showing how major tech companies design systems like URL shorteners, messaging platforms, and e-commerce applications.\nBeyond the technical aspects, this course also focuses on interview preparation, providing structured frameworks for solving system design questions in high-stakes job interviews. You’ll learn how to break down problems, communicate design decisions effectively, and handle trade-offs in scalability, performance, and maintainability. Mock interview scenarios and hands-on exercises will ensure you can confidently tackle system design challenges.\nBy the end of this course, you'll be equipped with the knowledge and problem-solving mindset needed to design efficient, scalable, and robust systems. Whether you're an aspiring software engineer, an experienced developer looking to upskill, or someone preparing for FAANG-level system design interviews, this course will give you the expertise to excel in both real-world projects and technical interviews.",
      "target_audience": [
        "Software Engineers & Developers – Looking to strengthen system design skills for real-world applications and interviews.",
        "Engineering Managers & Architects – Wanting to refine their understanding of scalable and efficient system design principles.",
        "Students & Job Seekers – Preparing for system design interviews at top tech companies.",
        "Self-Taught Developers & Career Switchers – Interested in learning how modern software systems are designed and scaled.",
        "Whether you're a beginner or an experienced professional, this course will help you master system design!"
      ]
    },
    {
      "title": "Master .NET and C# Unit Testing with NUnit and Moq",
      "url": "https://www.udemy.com/course/nunit-moq/",
      "bio": "Become an expert in unit testing with NUnit, Moq, dotMemoryUnit, ReSharper and other tools!",
      "objectives": [
        "What unit tests are for and how they are written",
        "How to set up and use the NUnit test framework",
        "What are the different test doubles: fakes, stubs, mocks",
        "How to effectively use the Moq mocking framework",
        "How to use the ReSharper unit test runner",
        "How to write memory-related unit tests using dotMemoryUnit"
      ],
      "course_content": {},
      "requirements": [
        "Good understanding of C#",
        "Familiarity with an IDE such as Visual Studio"
      ],
      "description": "The goal of this course is to teach you Unit Testing and the use of the latest and greatest tools and frameworks available on the market today. This course covers the following technologies:\nNUnit, the most popular unit test framework available for .NET\nMoq, a mocking framework\ndotMemoryUnit, a unit test framework for testing memory consumption\nReSharper (its unit test runner) used extensively in this course\ndotCover is used to illustrate the concepts of code coverage and continuout testing\nIn this course you'll learn what unit tests are, how to write and execute them, what are fakes/mocks/stubs/moles and how to use a mocking framework.",
      "target_audience": [
        ".NET developers wishing to learn about using unit testing",
        "Experienced developers wishing to expand their unit testing skills"
      ]
    },
    {
      "title": "Agile Metrics for Agile Project Management",
      "url": "https://www.udemy.com/course/agile-metrics-project-management/",
      "bio": "Learn about Agile Metrics that matter for successful project management",
      "objectives": [
        "Key Agile Metrics including Burndown Chart & Team Velocity",
        "Key Flow Metrics: WIP, Cycle Time, Lead Time, Throughput & Work Item Age",
        "Demonstrating stability of workflow with the help of Cummulative Flow Diagram(CFD)",
        "Understand Little's Law in the context of Kanban",
        "Flow analysis through Ageing work in progress chart"
      ],
      "course_content": {
        "Welcome to the course!": [
          "Introducing the Course & Your Instructor"
        ],
        "A brief introduction to Agile!": [
          "What is Agile?",
          "Course Resources",
          "You've reached a milestone!",
          "Agile Principles"
        ],
        "Burndown chart": [
          "Introduction to Burndown Chart",
          "Creating a Burndown Chart",
          "Burndown Chart: Activity"
        ],
        "Velocity": [
          "Velocity",
          "Practice Exercise on Velocity"
        ],
        "Flow Metrics": [
          "Introduction to Kanban Flow Metrics",
          "Kanban Flow Metrics: Work in progress",
          "Kanban Flow Metrics: Cycle Time",
          "Kanban Flow Metrics: Throughput",
          "Kanban Flow Metrics: Work Item Age",
          "Practical Exercise on Ageing Work in progress",
          "Leading & Lagging Indicators"
        ],
        "Little's Law": [
          "Introduction to Little's Law",
          "When & When not to use Little's Law",
          "Little's Law Assumptions",
          "Time to check your understanding of Little's Law"
        ],
        "Cumulative Flow diagram": [
          "Cumulative Flow Diagram"
        ],
        "Service Level Expectation (SLE)": [
          "Service Level Expectation (SLE)"
        ],
        "Bonus Section": [
          "Final milestone it is!",
          "Bonus Lecture: Congratulations & About your Certificate"
        ]
      },
      "requirements": [
        "Fundamentals of Agile & Kanban Framework"
      ],
      "description": "Welcome to the course on Agile Metrics for Agile Project Management!\nAbout Agile Metrics\nAre you looking to embed the Agile framework for project management into your team’s work to ramp up efficiency?\nOr Are you looking to set standards to measure the work of your team based on real-life data?\nIf yes, all you need is to track the right agile metrics.\nAgile metrics will help you direct your teams toward continuous improvement on the basis of real-life data from previous work cycles.\nWith the right agile metrics, you will not only be able to speed up delivery time for your products and projects but also help the teams to focus on delivering maximum value to end users.\nAbout the course\nIn this course Agile metrics for Agile Project Management/, you will gain a solid understanding of the key Agile metrics which is going to enhance your team’s productivity, generate higher value for customers, and build better team dynamics.\nWe will start with discussing the key agile metrics including Burn down chart, team velocity and then cover the important flow metrics like work in progress, cycle time , throughput & work item age. We will not only be discussing the Metrics but also the relationship between them in form of Little’s law along with the charts you should be following to track the progress of your workflow.\nYou are going to thoroughly understand & enjoy the course through practical examples, practice exercises and quizzes\nThis course is ideal for software developers, project managers who are using agile methodology for Project Management and looking to enhance the efficiency of their team by tracking the right metrics.\nCourse enrollment grants you lifetime access to all the the entire course content including quizzes, practice exercises etc. In addition, you’ll also receive 1-on-1 support for any questions or uncertainties that come up. And this all comes with a 30-day money-back guarantee! You have nothing to lose and so much knowledge to gain.\n\n\nOver 12,000 students have enrolled into this course so far and have shared some great reviews about the course:\n★★★★★ \"Short and concise course\"\n-Van jogh saar\n★★★★★ \"Amazing. Give me many insight about metrics to use in agile projects\"\n-Muhammad Khoirul Umam\n★★★★★ \"A very interesting course with a lot of information to improve your skills.\"\n-Jokin\n★★★★★ \"Hi, This course is a quick and easy way of understanding the Agile metrics you can use on a project. The instructor does a good job of giving examples and helping you understand some of the trickier concepts of the metrics. It helped me get a basic understanding of WIP aging and CFD which is what I was looking for as the rest I get to learn by doing. Thank you.\"\n-Sridevi Eppili\n\n\nI hope that you will enjoy the course, be challenged by it and learn a lot.\nIt is suggested that you go through the course at a pace that makes sense for you. The topics build on each other, so it is better to slow down and really learn something than to just move on in order to keep up a certain pace.\nSo, I have the tools needed to get the job done. So, let’s do it, I’ll see you in class. All the best!",
      "target_audience": [
        "Software Developers & Project Managers looking to enhance the efficiency of their team by tracking the right metrics."
      ]
    },
    {
      "title": "Mastering Node.js by answering top interview questions",
      "url": "https://www.udemy.com/course/nodejs-interview-questions/",
      "bio": "Deep Dive into Node.js mastering Core Concepts, Expert Techniques to land your dream job in Web Development",
      "objectives": [
        "Focused on passing a NodeJS job Interview",
        "Learn Advanced NodeJS concepts",
        "How to work with different data types such as streams",
        "How to refactor your code , apply Object Oriented Programming",
        "Learn how NodeJS works behind the scenes",
        "Learn how top companies structure their codebase",
        "Implement different design patterns",
        "TypeScript with NodeJS",
        "Learn how to test your code",
        "Implement a production grade software architecture"
      ],
      "course_content": {
        "Easy Level Questions": [
          "what is a module",
          "Cli",
          "JSON string",
          "parse JSON",
          "this keyword part 1",
          "losing scope",
          "Scope Questions",
          "this keyword part 2",
          "rules that you must know",
          "this keyword part 3",
          "bind method",
          "callback",
          "var, let, const part 1",
          "var, let, const part 2",
          "var, let, const part 3",
          "var, let, const part 4",
          "anonymous vs named functions",
          "closure",
          "Code review(Extremely important)",
          "express server part1",
          "how to auto restart in dev mode?",
          "express server part 2",
          "SSR vs CSR",
          "wildcard",
          "multiple imports",
          "Display every second",
          "Code Assignment",
          "prototype"
        ],
        "Intermediate Questions": [
          "protocol",
          "Circular issue",
          "Event Loop",
          "Micro VS Macro",
          "OOP",
          "Big File",
          "Process 1",
          "Process 2",
          "pool",
          "authentication",
          "mono VS micro",
          "Auth Mechanism coding Task"
        ],
        "Advanced questions": [
          "Pattern 1",
          "pattern groups",
          "Pattern 2",
          "Pattern3",
          "MVC",
          "In memory"
        ],
        "Advanced questions DI": [
          "MongoDB Setup",
          "DI (Used by some of the top companies/FAANG)"
        ],
        "AWS": [
          "serverless"
        ],
        "Data structures Interview Questions": [
          "Strings 1 (easy level)",
          "Strings 2 (easy level)",
          "Strings 3 (easy level)",
          "Strings 4 (easy level)",
          "Strings 5 (easy level)",
          "Strings 6 (Intermediate level)"
        ],
        "How to prepare for a job Interview?": [
          "Strategies"
        ]
      },
      "requirements": [
        "Basic NodeJS knowledge is required(variables, functions, objects, arrays, if statements).",
        "A computer(MacOS, Windows, or Linux) is required to install NodeJS software.",
        "Desire to learn NodeJS in more detail.",
        "Nothing else! It’s just you and your ambition to get started."
      ],
      "description": "Are you ready to take your Node.js skills to the next level and excel in your interviews? Welcome to \"Mastering Node.js by answering top interview questions\" the definitive course designed to empower you with the knowledge, techniques, and confidence to stand out in Node.js interviews.\nIn this immersive program, We leave no stone unturned, delving deep into the intricacies of Node.js. You'll embark on a journey through fundamental concepts, from event-driven architecture to the nuances of asynchronous programming, equipping you with a rock-solid foundation to tackle any interview question with ease.\nBut we don't stop there. We'll dissect advanced topics, demystifying streams, buffers, modules and many more ensuring you're well-versed in even the most complex areas of Node.js. Practical, hands-on examples will reinforce your understanding, giving you the practical skills needed to shine in any technical interview.\nOur focus on best practices means you'll not only learn how to write code, but how to write exceptional code. Discover the techniques for optimizing performance, writing clean and efficient code, and ensuring scalability in your Node.js applications.\nReal-world scenarios and problem-solving challenges are woven throughout the course, providing you with the opportunity to apply your newfound knowledge in practical situations. You'll emerge not just with theoretical expertise, but with the ability to tackle real coding challenges head-on.\nTo further bolster your confidence, I provide insider tips and strategies that have been gleaned from years of experience in the industry. You'll learn how to present your solutions effectively, articulate your thought process, and demonstrate your Node.js prowess in a way that sets you apart from the competition.\nBy the end of this course, you won't just be prepared for Node.js interviews – you'll be poised to excel. Join now and embark on a transformative journey toward becoming a Node.js interview champion.\n\n\nPlease Note that basic NodeJS knowledge is required\n\n\nEnroll today and let's take your Node.js career to new heights!",
      "target_audience": [
        "People who want to learn Nodejs in much more detail and pass Nodejs job interview",
        "People who want to get a job as a backend developer.",
        "Developers who want to up their game",
        "People who want to become a better Nodejs developer for all levels mid/senior/junior"
      ]
    },
    {
      "title": "Microservices Interview Questions and Answers",
      "url": "https://www.udemy.com/course/microservices-interview-questions-passsing-guarranteed/",
      "bio": "Top Microservices Interview Questions with Detailed Answers",
      "objectives": [
        "Anatomy of Event-Driven Microservices Architecture",
        "Architectural Patterns of Microservices",
        "Microservices in Cloud-native Systems",
        "Examples of Microservices in Java, .NET, Python as well as Amazon Web Services"
      ],
      "course_content": {
        "Underestanding Microservices": [
          "Welcome! How to Use This Course Effectively",
          "What Is Coupling?",
          "Types of Coupling",
          "What is Cohesion?",
          "Practice Code for Coupling and Cohesion"
        ],
        "Comparing Architectures and Building Blocks": [
          "What are the differences between Monolithic, SOA and Microservices",
          "Benefits and Drawbacks of Monolithic Applications",
          "What are the alternatives of Monolith Applications?",
          "What are benefits of microservices architecture?",
          "What are the drawbacks of microservices?",
          "What is a microservice",
          "How do microservices relate to the business?",
          "Check Your Knowledge",
          "This role play simulates a job interview, where you have applied for a software developer role"
        ],
        "Designing Microservices Systems": [
          "What is Bounded Context?",
          "On a white board draw a system based on microservice architecture",
          "Name some design patterns and tools we use in developing microservices",
          "Name some ways or architectural styles of building microservices",
          "Explain Idempotence and its usage",
          "Explain the API Gateway Pattern",
          "What is API Composition?",
          "Job Interview at CloudWare Pty Ltd - Phase 2",
          "What is Strangler Application?",
          "What are Cross-Cutting Concerns in Microservices and how are they handled?"
        ],
        "Microservice Communication and Reliability Patterns": [
          "Explain how independent microservices communicate with each other",
          "What is the difference between Event and Message?",
          "What is Distributed Transaction?",
          "What is Two-Phase Commit or 2PC Pattern?",
          "What is Saga Pattern?",
          "Explain the Choreography Pattern",
          "Explain the Orchestration Pattern",
          "What is Blast Radius in Microservices and how do we build Resiliency?",
          "What is Circuit Breaker pattern?",
          "What is Restful API?",
          "Job Interview - Round 3"
        ],
        "Security in Microservices": [
          "Explain OAuth",
          "What are Client Certificates?",
          "What are ways of testing the security of micro services?",
          "How is User Security Achieved in Microservices?",
          "Job Interview - Round 3 with Daniel"
        ],
        "Testing and Observability": [
          "Explain Testing Strategies in Microservices",
          "What is Mike Cohn’s Test Pyramid?",
          "What is Semantic Monitoring?",
          "Explain continuous monitoring",
          "Explain the Role of Observability in Microservices",
          "Job Interview at Cloudware - Tester"
        ],
        "Containerization and Deployment": [
          "Explain Container in Microservices",
          "What is the main role of docker in microservices?",
          "How can you deploy containers?",
          "What are Deployment Strategies for Microservices?",
          "What is Cloud-Native?"
        ],
        "Supporting Infrastructure and Service Mesh": [
          "Explain Service Discovery pattern",
          "What is Sidecar pattern?",
          "What is Service Mesh?",
          "Job interview at Cloudware - Software Archutect"
        ],
        "Advanced Data Patterns": [
          "Explain Transactional Outbox",
          "What is Transaction Log Tailing?",
          "What is Polling Publisher pattern?",
          "What is Data Offloading?",
          "Explain the Scaling Cube",
          "Explain CDC",
          "Explain the CQRS pattern",
          "Explain Event Sourcing",
          "Job Interview - Software Architect - Round 2"
        ],
        "Final Quiz and Assignment": [
          "Self Assessment - Microservices",
          "Design and Implement an AI-Powered Bookstore"
        ]
      },
      "requirements": [
        "Some experience with any programming language will be helpful.",
        "Experience with object oriented programming will be helpful.",
        "Basic understanding of cloud infrastructure i.e. Amazon Web Services"
      ],
      "description": "Excel in your next job interview by mastering this course's expertly curated microservices interview questions and answers.\nLearning the complex microservices architecture concepts and design patterns can take considerable time. You will need these guided interview questions for two main reasons: first, to assess your learning outcomes after studying microservices architecture, and second, to learn through a question-and-answer technique, which yields similar results in a much shorter time.\n\n\nWhether you want to check your readiness for job interviews or speed up your learning process, this course is tailor-made to help you deeply understand Microservices Architecture's core concepts, architectural patterns, and techniques.\n\n\nWith 50 meticulously curated questions and detailed explanations, you'll swiftly grasp essential architectural patterns, ensuring you're well-prepared for any interview scenario. When answering each interview question, more than one option is often mentioned, and comparisons between options are made to help the students understand what pattern is best for a given context and what the trade-offs are.\n\n\nWhether you're proficient in Java, Python, C#, or any other programming language, this course caters to all developers, irrespective of their tech stack preferences. However, it notably excludes specific frameworks like Spring Boot.\n\n\nTopics covered include:\n\n\nMicroservices Design & Architectural Patterns\nEvents vs. Messages vs. APIs\nMicroservices Examples\nMicroservices on AWS, Azure, and Google Cloud Platforms\nContainers and Docker\nMonolith-to-Microservices Transformation\nIntegration Patterns, i.e., API Gateways.\nCloud-Native Microservices\nMonitoring Strategies\nAs you progress through the course, you'll have the opportunity to gauge your readiness with a comprehensive exam, which will empower you to approach even the most daunting job interviews confidently.\n\n\nWhether you aspire to become a seasoned software architect, ace technical interviews, or deepen your microservices expertise, enroll today and embark on your journey towards success!",
      "target_audience": [
        "Developers",
        "DevOps Engineers",
        "Solution Architects"
      ]
    },
    {
      "title": "Data Structures And Algorithms In The C Programming Language",
      "url": "https://www.udemy.com/course/data-structures-and-algorithms-in-the-c-programming-language/",
      "bio": "Linked Lists, Array Lists, Stacks, Queues, Trees the lot!",
      "objectives": [
        "Linked Lists",
        "Double Linked Lists",
        "Arrays",
        "Array List",
        "Creating a stack",
        "Creating a queue",
        "Binary trees"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Linked Lists": [
          "Understanding Linked Lists",
          "Creating Your Very First Linked List",
          "Understanding Double Linked Lists",
          "Double Linked Lists In C",
          "Deleting Elements And Creating A Better Implementation",
          "Having The List Element Also Be The Value",
          "Programming The List Element To Also Be The Value"
        ],
        "Arrays": [
          "Understanding Arrays And Array Lists",
          "Programming An Array List"
        ],
        "Stacks And Queues": [
          "Understanding Stacks And Queues",
          "Creating A Stack",
          "Creating A Queue"
        ],
        "Trees": [
          "Understanding Binary Trees",
          "Programming Binary Trees"
        ],
        "Bonus Section": [
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "Understanding of pointers, structures and arrays within the C Programming Language"
      ],
      "description": "Are you a great programmer? Prove it with this course. It is time that you learn how memory works on the processor and in the C programming language  to work with C structures to make linked lists, arrays, queues and more!\nThis course will teach you all about creating internal data structures in C.\nThis course will teach you how to create the following:\nLinked List Implementation\nIn our linked list implementation you will learn how we can use C pointers to link elements together in a chain\nDouble Linked List Implementation\nIn our double linked list implementation you will learn how you can use a previous pointer in an element to be able to iterate backwards through a linked list. This is called a double linked list.\nArray List Implementation\nOur array list implementation will allow us to add elements to a dynamic array, resizing it when needed.\nQueue Implementation\nLearn about first in last out techniques in our queue implementation.\nStack Implementation\nLearn how to create a stack where you will be able to add an element to a stack and then take it off the stack later. That is why its called a stack!\nBinary Tree Implementation\nLearn how to create binary trees and why they are important.\n\n\nAll of the implementations described above will be created on video from scratch! You will learn how all of these work internally and when they should be used. This course is a \"must have\" for someone who has learned the fundamentals of the C Programming Language",
      "target_audience": [
        "C programmers who want to learn how to develop data structures in their applications"
      ]
    },
    {
      "title": "Kubernetes: Deploy Your First App in Kubernetes in 1 Hour",
      "url": "https://www.udemy.com/course/kubernetes-docker/",
      "bio": "Kubernetes hands on basics tutorial along with Docker",
      "objectives": [
        "Get a basic foundation for Kubernetes in a hands on way. This will make it easier for them to learn intermediate & more advanced concepts on Kubernetes and making the transition to production level skills.",
        "Pod",
        "Replicaset",
        "Deployment",
        "Service",
        "Rollbacks",
        "Docker",
        "Dockerfile",
        "Dockerhub"
      ],
      "course_content": {
        "Introduction": [
          "Before you begin",
          "Introduction",
          "Real life analogy",
          "Application to be deployed",
          "Requirement to be installed"
        ],
        "Kubernetes Resources introduction": [
          "Pod introduction",
          "Replicaset introduction",
          "Deployment introduction"
        ],
        "Docker quick introduction": [
          "Why is Docker needed",
          "Dockerfile to create Docker Image",
          "Push Docker Image to Docker Hub"
        ],
        "Pod": [
          "Run a Pod",
          "Service",
          "Drawback of running a Pod directly"
        ],
        "Replicaset": [
          "Run a Replicaset",
          "Drawback of running a Replicaset"
        ],
        "Deployment": [
          "Run a Deployment",
          "Example of Rolling update in a Deployment"
        ],
        "Summary": [
          "Summary"
        ],
        "Kubernetes Miscellaneous": [
          "Kubernetes Troubleshooting",
          "Kubernetes Commands",
          "Kubernetes Interview Questions & Answers"
        ],
        "Bonus Section": [
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "Laptop with internet"
      ],
      "description": "In this course you will learn the basics of Kubernetes in a hands on manner in 1 hour by deploying your first application in the form of a Javascript game.\n\n\nKubernetes is an open-source container orchestration system to automate application deployment, scaling and management. Imagine you write your application and push your code. Then Kubernetes will take care of ensuring it is running at all times to serve your users. Kubernetes is being extensively used these days and its popularity is growing at a high speed.\n\n\nThis course will give you a head start in learning Kubernetes by going through the basic resources of Kubernetes such as:\nPod\nService\nReplicaset\nDeployment\nYou will learn how to write and run the above resources by deploying a Javascript game. You will also get a reasonable introduction on Docker including:\nWhat is Docker image\nHow to write Dockerfile to create an image\nHow to push the image to a remote registry\nThis course is mainly designed keeping complete beginners in mind although intermediate users may find the example useful. By the end of the course you will have a basic foundation on Kubernetes to go ahead and learn intermediate and more advanced concepts.",
      "target_audience": [
        "Anyone interested in getting a quick & basic introduction to Kubernetes in 1 hour. No experience necessary"
      ]
    },
    {
      "title": "Software Development From A to Z - Learn What Truly Matters",
      "url": "https://www.udemy.com/course/software-development-from-a-to-z/",
      "bio": "Valuable Software Development Insights: IT Roles, Agile, SCRUM, SDLC, OOP, UML, Python Programming 101, Web Development",
      "objectives": [
        "Understand what it takes to become a software developer",
        "Explore positions in the software development industry, from internships to key roles such as Software Architect, System Analyst, DevOps Engineer, and more.",
        "Get insights into the daily activities of a professional software developer",
        "Gain a realistic perspective on the challenges and rewards of a career in tech",
        "Unravel the truths and misconceptions about becoming a software developer",
        "Discover how professional software products are developed",
        "Learn how to organize and optimize your work using Agile, Scrum, and Kanban",
        "Kickstart your coding journey with our Python module",
        "Learn key concepts from basic variables to object orientation and algorithms – a perfect foundation for aspiring programmers",
        "Use UML to communicate effectively with other developers",
        "Learn the essentials of web development with our module on HTML, CSS, and basic JavaScript, setting the foundation for your web creation journey",
        "Get the companion eBook for FREE! (sells for $28.80 on Amazon)"
      ],
      "course_content": {
        "INTRODUCTION": [
          "Software Development: a Future-Proof Career",
          "Join the Official Student Group"
        ],
        "PART 1: SOFTWARE DEVELOPMENT: MYTHS VS. REALITY": [
          "The Biggest Misconceptions About Becoming a Developer",
          "Common Myths About Software Development",
          "Activities Involved in Software Development",
          "Section Quizzes"
        ],
        "PART 2: UNCOVERING ROLES IN SOFTWARE DEVELOPMENT": [
          "Why Understanding Software Development Roles is Important",
          "Internship: Your First Step into Software Development",
          "Junior Developer: Earning While Learning",
          "Senior Developer: A Maestro of Code",
          "Tester/Quality Assurance Engineer: The Gatekeeper of Code Quality",
          "DevOps Engineer: Code's Best Friend on Its Journey",
          "UI/UX Designer: Bridging Code and User Experience",
          "Technical Writer: Master of Documents",
          "Software Architect: The Blueprint Artist of Software Development",
          "System Analyst: The Bridge Between Business and Tech",
          "Management Roles: A Module Wrap-Up"
        ],
        "PART 3: SOFTWARE DEVELOPMENT METHODOLOGIES": [
          "Software Development Methodologies",
          "The Waterfall Model",
          "The Waterfall Model - Pros and Cons",
          "Agile Software Development",
          "Agile Model Pros and Cons",
          "Why Waterfall isn't Dead and Agile isn't the only Answer?",
          "Section Quizzes - Software Development Methodologies"
        ],
        "Agile Frameworks: SCRUM & Kanban": [
          "Agile Frameworks - Scrum",
          "Sprint Planning",
          "The Daily Scrum",
          "The Sprint Review Meeting",
          "The Sprint Retrospective",
          "The Kanban Agile System",
          "Kanban Boards",
          "Setting Up a Kanban Board in Asana",
          "Section Quizzes: Agile Frameworks"
        ],
        "PART 4: PROGRAMMING FOUNDATIONS FOR ABSOLUTE BEGINNERS": [
          "Programming Foundations - Overview",
          "What's Coding?",
          "Programming Languages"
        ],
        "Introducing Python": [
          "Why Python?",
          "Setting Up Python on Your Computer",
          "The Python Command Line",
          "Installing and Configuring Visual Studio Code",
          "Exercise Files"
        ],
        "Basic Syntax": [
          "Woo-hoo! Your First Python Program!",
          "Asking for User Input",
          "Using Comments in Code",
          "Declaring Variables",
          "Working with Numbers",
          "Using Basic Arithmetic Operations",
          "Working with Strings",
          "The Boolean Data Type",
          "Is This Code Correct?",
          "Declaring and Using Variables",
          "What's Wrong with the Maths?",
          "Total Car Cost Calculator",
          "Concatenating and Displaying Strings",
          "Navigating the True/False Maze"
        ],
        "Control Flow": [
          "Introducing Conditional Code",
          "Code Blocks",
          "Comparison Operators",
          "Going Deeper: Else-If",
          "Nested Conditionals",
          "Using Logical Operators",
          "Piggy Bank",
          "Odd or Even?",
          "Distance from Sun",
          "A Day at the Zoo"
        ],
        "Functions": [
          "Why Do We Need Functions?",
          "Writing Functions",
          "Calling a Function",
          "Defining Function Parameter and Return Type",
          "Understanding the Scope of Variables",
          "Demo: Implementing an Area Calculator",
          "Testing our Application",
          "Enhancing the Area Calculator App",
          "Celsius to Fahrenheit Converter",
          "Travel Time Calculator",
          "Scope It Out",
          "Challenge: Calculate Rhombus Area",
          "Solution: Calculate Rhombus Area"
        ]
      },
      "requirements": [
        "No prerequisites (we will teach you everything you need to know)",
        "A desire to learn new concepts"
      ],
      "description": "Welcome to \"Software Development From A to Z - Learn What Truly Matters.\"\nIf you're new to the field or considering a career switch, this course is tailored for you. It's a jargon-light, beginner-friendly guide to software development.\n\n\nWhy This Course?\nNo prior experience is required\nJump right in! This course is crafted for absolute beginners, so you can start learning without any background in software development.\nComprehensive Coverage\nThis course takes a panoramic view, from demystifying software development myths and IT roles to hands-on coding in Python and the basics of web development.\nBeginner-Focused\nComplex topics like Object-Oriented Programming and Software Development Methodologies are broken down into easy-to-understand language.\nContinuously Updated\nStay ahead of the curve with regular updates. Upcoming modules include versioning systems, career guidance, and job interview preparation.\n\n\nWhat You Will Learn\nThe real world of software development: separating myths from reality.\nKey methodologies in software development: Waterfall, Scrum, Kanban, and more.\nDesigning software using UML: understanding and communicating software design using an industry standard approach.\nCoding in Python: starting with the basics and moving on to more advanced topics like error handling and algorithms.\nWeb Development Essentials: a primer on creating websites using JavaScript.\nand more!\n\n\nWhat Qualifies Me to Teach You?\nI have more than 25 years of software development expertise. I've worked for companies like Apple, Siemens, and SAP.\nAs a software architect, I have designed and built several enterprise systems and frameworks, including core components of Siemens Healthcare's syngo image processing system. I'm one of the senior software architects behind the SAP Cloud Platform SDK for iOS, a framework built by Apple and SAP. I currently hold twelve patents related to inventions in the field of mobile computing.\n\n\nStudent Reviews\n\"Excellent course, a fantastic instructor. A comprehensive course for those who are starting in software development. Highly recommended.\" - Guillermo A. Robiglio\n\"Abstract concepts simplified into digestible information.\" - Brian McPherson\n\"Good for refreshing programming skills and learning about how to use them professionally.\" - Dieter Funkhauser\n\n\nCourse Extras\nAccess to a private course forum for personalized support.\nFree companion eBook and downloadable resources such as UML cheat sheets and quick reference guides\nRegular updates to keep the content fresh and relevant.\n\n\nTopics Include:\nSoftware development: myths vs. reality\n- Misconceptions around software development\nSoftware development methodologies\n- What’s a Software Development Methodology?\n- What’s the Difference between Agile and Waterfall?\n- How is Work Organized in Scrum?\n- Just-in-Time and Kanban. What has Toyota to Do with Software Development?\nProgramming foundations\n- Learn to Code through hands-on Python Examples\n- Basic Syntax\n- Control Flow\n- Functions\n- Loops\n- Containers\n- Error Handling\n- File Input and Output\n- Introduction to Object-Oriented Programming\n- Introduction to Algorithms\nThe Unified Modeling Language (UML)\n- UML Diagram Types\n- The Class Diagram\n- UML Relationships\n- The Sequence Diagram\n- The Statechart Diagram\nWeb development\n- How Do Websites Work?\n- What's HTML?\n- Using CSS to Style Webpages\n- JavaScript Basics\n- Implementing a Color Theme Picker in JavaScript\n- JavaScript Functions and Event Handlers\nSoftware Development from A to Z is the perfect course for you if you plan to switch careers or if you just want to find out more about software development.\n\n\nSatisfaction Guarantee\nA 30-day money-back guarantee ensures you can try the course risk-free.\nIf this course aligns with your learning goals, feel free to enroll. I'm here to guide you at every step along the way.\nSo why wait? Start your journey into the world of software development today!\nSee you in the first lesson.",
      "target_audience": [
        "This course is for you if you plan to start a career in software development",
        "This course will refresh your knowledge about software development concepts",
        "Take this course if you want to acquire technical skills required for job interviews",
        "You'll get insights into the software development industry"
      ]
    },
    {
      "title": "Flutter , Nodejs, Express , MongoDB: Build Multi-Store App",
      "url": "https://www.udemy.com/course/flutter-nodejs-express-mongodb-build-multi-store-app/",
      "bio": "Flutter Multi-Vendor E-commerce | Shop | Food | Store App | Multi-store App | Node.js | Express | MongoDB | Deployment",
      "objectives": [
        "Full Stack With Flutter - Node - Express - MongoDB",
        "Flutter Multi Vendor Ecommerce | Shop | Food | Store App",
        "Building RESTful APIs with NodeJs",
        "Setting up and managing a MongoDB database",
        "Implementing authentication and authorization",
        "Learn how to integrate Flutter, Nodejs, Mongodb",
        "System Design",
        "Creating dynamic user interfaces with Flutter",
        "Ensuring app security and performance optimization",
        "Learn Shared Preferences",
        "Learn Riverpod State Management - Back-to-Back",
        "Best practices for code organization and project structure",
        "Designing a scalable multi-vendor application",
        "Set up AWS SES for sending OTPs, order emails, and password reset functionality.",
        "Use Redis for caching data and improving app performance.",
        "Integrate Cloudinary for seamless image storage and optimization.",
        "Deploying the backed to heroku"
      ],
      "course_content": {
        "Introduction": [
          "Course Introduction",
          "Ask me Anything Please",
          "Create Flutter Project",
          "MVC Architecture (Model–View–Controller)",
          "Configure Assets",
          "Add Google Fonts"
        ],
        "Authentication Ui": [
          "Create Login Screen",
          "Create TextFormFields",
          "Sign in Button",
          "Advance Button",
          "Create Register Screen",
          "Add Validation",
          "Login Validator"
        ],
        "Introduction To Node js": [
          "Install Node Js",
          "Create Nodejs Project",
          "Initialize Project",
          "Write First Script",
          "Express Server in Node.js",
          "Create Your First EndPoint",
          "Separate Route"
        ],
        "Integrate MongoDb - Backend": [
          "Integrate MongoDb"
        ],
        "Create Signup Api EndPoint": [
          "Create User Model",
          "Validation Check",
          "Signup Api Endpoint",
          "Understanding User Signup Flow",
          "Catching Error",
          "Testing Api - Thunder Client",
          "Password Hashing"
        ],
        "Create Signin Api Endpoint": [
          "Create Api Endpoint",
          "Testing Validation",
          "Catching Errors"
        ],
        "Consume Signup API in Flutter App": [
          "Create User Model - Define Fields",
          "Serialize User Model",
          "Convert To Json",
          "Deserialization",
          "User Factory",
          "Manage Http Response",
          "Get Your Ip Address",
          "Consume Api - Signup",
          "Consume Api Final - Sign Up"
        ],
        "Consume Signin Api - Flutter": [
          "Consume Api - Signin",
          "Add Token Field"
        ],
        "Enhance Authentication Ux & Clean MongoDb": [
          "Improve Auth User Experience",
          "Create Main Screen",
          "Navigate User",
          "Clear User Collection - MongoDb"
        ],
        "Working On Main Screen - Front-end": [
          "Create Bottom Navigation Bar",
          "BottomNavigationBarItem",
          "Create Nav Screens"
        ]
      },
      "requirements": [
        "Have Flutter Installed"
      ],
      "description": "Course: Build a Flutter Multi-Vendor E-commerce App\nLearn how to create a powerful and scalable multi-vendor e-commerce app using Flutter. This course will guide you step-by-step through the process of building a complete app that can support multiple stores, whether for general shopping, food delivery, or a mix of both.\n\n\nWhat You'll Learn:\nFlutter Basics:Understand the fundamentals of Flutter and how to build beautiful, responsive user interfaces.\nMulti-Vendor Functionality: Learn to create features that allow multiple vendors to list and manage their products.\nState Management with Riverpod: Master state management in Flutter using Riverpod to build efficient and maintainable      applications\nBackend Development: Use Node.js and Express to build a secure and efficient backend.\nDatabase Management: Implement MongoDB to handle data storage and ensure scalability.\nReal-Time Updates: Set up real-time notifications to keep users informed about orders and promotions.\nDeployment: Learn how to deploy your app and make it live for users.\n\n\nWhy Take This Course?\n\n\nHands-On Experience: Build a real-world application from scratch.\nComprehensive Curriculum: Covers both frontend and backend development.\nCareer Boost: Gain valuable skills that are in high demand in the job market.\nSupportive Community: Access to a community of learners and instructors for guidance and support.\n\n\nBy the end of this course, you'll have the skills and knowledge to create a fully functional multi-vendor e-commerce app, ready to deploy and scale. Join us and start your journey to becoming a proficient Flutter developer!",
      "target_audience": [
        "Anyone can take this course; everything is explained clearly."
      ]
    },
    {
      "title": "Intro To TKinter for Python GUI Apps",
      "url": "https://www.udemy.com/course/intro-to-tkinter-for-python-gui-apps/",
      "bio": "Build Graphical User Interface Apps with Python and TKinter The Fast and Easy Way!",
      "objectives": [
        "Introductory TKinter",
        "How to Build Basic Apps With TKinter and Python",
        "Download and Install Python",
        "Create Executable .exe Apps"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "First Things First: How To Get Support Fast!",
          "Install Python",
          "Install Gitbash and Sublime",
          "Set Up A Virtual Environment",
          "Hello World"
        ],
        "TKinter Widgets": [
          "Labels",
          "Label Options",
          "Pack Vs. Grid",
          "Grid Options",
          "Buttons",
          "Input Entry Boxes",
          "Icons",
          "Images",
          "Pack Forget and Destroy",
          "Get The Course Sourcecode",
          "Menus Part 1",
          "Menus Part 2",
          "Frames",
          "Frames and Menus",
          "Hiding and Showing Menu Frames",
          "Status Bar",
          "Radio Buttons",
          "Check Buttons",
          "Pop Up Message Box",
          "Pop Up Box Response",
          "ComboBoxes",
          "New Windows",
          "New Windows Hide And Kill",
          "Images in New Windows",
          "Open Files Dialog Box",
          "Open Dialog Box Image To Screen",
          "Grid Forget Part 1",
          "Grid Forget Part 2",
          "Color Picker Part 1",
          "Color Picker Part 2",
          "Standalone exe file!"
        ],
        "Let's Build A Flashcard App!": [
          "Flashcard App Intro",
          "Flashcard App Frames",
          "Flashcard App GUI",
          "Flashcard App Random Number IntVar()",
          "Flashcard App Answer Message",
          "Flashcard App Better Answer Message",
          "Flashcard App Generate New Random Numbers",
          "Flashcard App Subtraction",
          "Flashcard App Multiplication",
          "Flashcard App Division",
          "Flashcard App Destroying Frame Children with winfo_children",
          "Flashcard App Start Screen",
          "Flashcard App Start Screen Part 2"
        ],
        "Conclusion": [
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "No special tools are necessary to take this course",
        "A Basic Understanding of Python Is Helpful"
      ],
      "description": "In this course I'll teach you how  to make graphical user interfaces for Python using TKinter.  You'll be surprised just how quickly you can create some pretty cool looking apps!\nI'll show you the ins and outs of tKinter, and then I'll show you how to package your app as an .exe file that you can share with others!\nWe'll start out by learning all about the main TKinter widgets.  Everything in tKinter is a widget...from labels, to buttons, input boxes, and more.\nAfter we've learned all the major Widgets, we'll build a fun Math Flashcard app.  Our app will have addition, subtraction, multiplication, and division flashcards.\nIf you've ever wanted to create GUI apps with Python, this is the course for you!",
      "target_audience": [
        "This course is aimed towards absolute beginners who want to learn to build Apps With TKinter and Python",
        "Anyone wanting to learn to build apps"
      ]
    },
    {
      "title": "Fluent API Design - A Crash Course",
      "url": "https://www.udemy.com/course/fluent-api-design/",
      "bio": "A crash course on a software architecture approach for creating readable, intuitive, and easy-to-understand code.",
      "objectives": [
        "Understand why API's should be designed well.",
        "Understand the benefits of using Fluent API's.",
        "Learn how to design fluent API's.",
        "Learn how to write intuitive, easy-to-understand code.",
        "Learn how to structure code for excellent readability.",
        "Add new skills to your programming toolbox."
      ],
      "course_content": {
        "Introduction": [
          "What is an API?",
          "What is a Fluent API?",
          "Using a Fluent API in Practice",
          "Setting up Java and IntelliJ IDEA",
          "Refactoring Test Cases"
        ],
        "Designing Fluent API's": [
          "Implementing a Fluent API - The Builder Pattern",
          "Bank Account Management",
          "More on the Builder Pattern",
          "Implementing a Fluent API -Simple Scheduler",
          "Simple Scheduler",
          "Implementing a Fluent API - Querying Collections",
          "Recap - Generics and Lambdas",
          "Querying Collections",
          "Querying Collections, Part 2",
          "Query Collections, Sets",
          "API Design Tips",
          "Fluent API Design"
        ],
        "Summary": [
          "Summary",
          "Complete Code Examples"
        ]
      },
      "requirements": [
        "You should be familiar with an object-oriented programming language, such as Java or C#.",
        "You should have an understanding of object-oriented programming principles.",
        "The code examples are in Java - while they aren't mandatory to work through, it will be beneficial if you have a Java development environment (with Maven) configured."
      ],
      "description": "Fluent API Design - Write Good, Clean, Readable Code\n\nHave you ever looked at code that you needed to use, and thought that it could just be so much easier, better, and cleaner?  Have you ever wondered how tools like the Java™ DSL in Apache Camel or the streaming API's in Java 8 work under the covers?  How you can architect your code to clearly express it's intent without the need for extensive documentation?  If so, this course is for you!\nThroughout the course, we'll look at what fluent API's are and how we can design them.  We'll look at the benefits of fluent API's, and we'll see real-world examples in practice.  We'll also work through examples where we implement our own fluent API's.  Our examples will be in Java, but the concepts are equally relevant to other object-oriented languages, like C#.\nThis course is intended to help you become a better programmer, by teaching you how to write code that is incredibly easy to understand.  After all, as programmers, we spend a significant amount of time reading existing code rather than writing new code.  Therefore, the ability to write code that is easy to read and easy to understand is a very important skill for programmers to have.  In this course, I want to help you develop that skill.\nSome Review Feedback\n\n\"I thought the beginning of the course was quite slow and too much verbiage for the given slides. But once you got into going through code methodologies and showing coding examples, I enjoyed flow very much. I liked the use of video so I could pause in places to analyze the code.\"\n\"For a short course such as this, you get a lot of information to improve your skills. I enjoyed this course and learned some new and useful techniques.\"\n\"This course covers a familiar thought among developers; striving for well-written code, which is 1) easy to read/understand and then 2) easy to amend and build upon with subsequent revisions; essentially demonstrating the benefits of good API design overall. I also appreciated the inclusion of the code examples, which demonstrates the advantages of Fluent API Design in a practical way.\"\n\"I learned about fluent API in a short time. The characteristics of the pattern Builder and reason important for implementing this pattern our own code. Thanks!\"\n\"Great topic, great course, great content.\"\n\"Very well explained material.\"\nThis course includes the option of a 30-day, no-questions-asked refund.",
      "target_audience": [
        "Junior- to intermediate programmers who use an object-oriented language, such as Java or C#.",
        "Anyone who wants to learn how to design fluent API's.",
        "Anyone who wants to change the way in which they think about designing API's.",
        "Anyone who wants to learn how to write intuitive, easy-to-understand code."
      ]
    },
    {
      "title": "Retrospective+Kaizen+Agile Scrum+Continuous Improvement",
      "url": "https://www.udemy.com/course/agile-retrospectives-kaizen-lean/",
      "bio": "Learn continuous improvement and kaizen to improve your team or business with agile retrospectives and scrum",
      "objectives": [
        "A complete overview of the retrospectives and how it is used to boost the efficiency and productivity of a team",
        "Learn how to improve sprint retrospectives",
        "Learn what scrum is and why it is so powerful for conducting a retrospective",
        "Learn the exact techniques the pros use in industry for holding retrospectives",
        "Feel confident in improving the performance of scrum for any software, service, maintenance or support team",
        "Explain what sprint retrospectives will make your team or business more efficient"
      ],
      "course_content": {
        "INTRODUCTION": [
          "Introduction",
          "Pashun Consulting Intro",
          "Agile Scrum Recap",
          "What is the sprint retrospective?",
          "Retrospectives - Explanation of concept",
          "EXAMPLE: how to run a Sprint Retrospective",
          "Key Elements of a Good Retrospective"
        ],
        "TIPS 1-7": [
          "DELIVERY: How To Use The Retrospective To Deliver On Time",
          "Tip 1 – The Importance of Time Boxing",
          "Tip 2 – Focus on Team Needs",
          "Tip 3 – Put a stop to the Mundane",
          "Tip 4 – Switch the Goal",
          "Tip 5 – Take Lessons from Your Friends",
          "Tip 6 - The Secret Box",
          "Tip 7 - Open Retrospective"
        ],
        "TIPS 8-14": [
          "CASE STUDY: Retrospective Regret",
          "Tip 8 - Change the Facilitator",
          "Tip 9- Change the Style",
          "Tip 10 - Accolades to the Team",
          "Tip 11 – The Retro Radiator",
          "Tip 12 – Creative retrospectives",
          "Tip 13 – Involvement of Remote Teams",
          "Tip 14 – Separate Discovery from Discussion"
        ],
        "TIPS 15-21": [
          "COACHING: how to explain why the SPRINT RETROSPECTIVE works",
          "Tip 15- Avoid Assumptions",
          "Tip 16 - Taking Cue from Previous Retrospectives",
          "Tip 17 - Draw out the Problems, Successes and Opportunities",
          "Tip 18 - Roundtable Discussion",
          "Tip 19 - Voting For Essential Items to Act Upon",
          "Tip 20 - Use the Five Whys to Get to the Root of the Problem",
          "Tip 21 - Make an Action Plan for Your Top Priorities"
        ],
        "TIPS 22-29": [
          "CHECKLIST: Sprint Retrospective Checklist",
          "Tip 22 - Allocate Exclusive Time for Actions of Improvement",
          "Tip 23 - Formal Artifacts to Record Your Retrospectives",
          "Tip 24 – Design a Working agreement",
          "Tip 25 - Give Ample Time to Answer",
          "Tip 26 - Allow The Team To Improve During The Sprint",
          "Tip 27 - Go By A Retrospective Pattern",
          "Tip 28 - One at A Time",
          "Tip 29 - Improve How You Capture Visible Notes",
          "Conclusion",
          "FAQ: How to get the Udemy Certificate for this course",
          "Can Agile be used outside of software development?",
          "What's the difference between Agile and Scrum?",
          "FAQs & Latest News",
          "FEEDBACK: Reviews and Discussion"
        ],
        "BONUS MATERIALS": [
          "BONUS LECTURE"
        ]
      },
      "requirements": [
        "A keen interest in Agile Scrum",
        "A real need to improve your team or business",
        "The desire to improve continuously"
      ],
      "description": "\"Scrum Open, Professional Scrum™, Professional Scrum Master™, PSM, PSM I, PSM 1, etc. is the protected brand of Scrum . org. Our course and practice exams are neither endorsed by nor affiliated with Scrum . org.\"\nThree reasons to TAKE THIS COURSE right now!\nThe unique reasons for taking this course are:\n1. Complete, Concise, Confident Overview of sprint retrospectives - I cover the theory and give you examples of how the theory is used in industry.\n2. Confidence in using scrum - In a very simple way, I teach you the fundamentals agile retrospectives and how to organize sprint retrospectives in industry without going into a class room or spending a lot.\n3. You get to ask me questions and see me respond to every single one of them thoughtfully!\nWhat is sprint retrospective?\nIt is a method for boosting your team’s efficiency. Based on my experience, it is the perfect way to learn from the past and take that learning to learn new in the upcoming sprints.\nWho should take is course?\nWhether you are a novice, an expert or simply someone who wants the answer to the question \"what is sprint retrospective, this is definitely the class is for you.\nWhat will I learn?\nIn this class you will learn:\n• Concise overview of sprint retrospective - Including 29 easy tips to hold a sprint retrospective successfully\n• The facts based on real industry experience and research - The correct terminology and use of proper methods is essential to mastering it. My experience in industry and research into the topic has been used to give you a solid grounding in the most concise way possible.\nThe course is video based with no supporting document necessary.\nHow is the course structured?\nEach section features an overview of a particular aspect of holding a sprint retrospective and tips to organize it wonderfully. Examples are included throughout the course with excellent quality video and audio. All is based on real world experience.",
      "target_audience": [
        "Scrum Master, Product Owner, Business Owners, Support Teams, Maintenance Teams, Service and Sales Teams, Development Support Teams",
        "Anyone who wants a complete overview of agile scrum retrospectives and certainty that they are getting the facts taught by an Agile expert",
        "A candidate who wants answers to frequently misunderstood points within scrum methodology or an expert candidate who wants a concise, quick refresher on retrospectives",
        "Someone who wants pointers on holding a successful retrospective meeting"
      ]
    },
    {
      "title": "Qt 5 QML Advanced : Interfacing to C++",
      "url": "https://www.udemy.com/course/interfacing-qt-quick-qml-to-cpp-advanced/",
      "bio": "Use Custom C++ Models in QML, Build your own Visual C++ QML Types, Use Singletons and Dig Deep Through QML from C++",
      "objectives": [
        "Working with Custom C++ Models in QML",
        "Building Custom C++ Visual Types and using them in QML",
        "Using your C++ Classes as Singletons in QML",
        "Digging through the QML tree and manipulating elements from C++"
      ],
      "course_content": {
        "Using Custom C++ Models in QML": [
          "Important notice: PLEASE READ!",
          "Introduction",
          "Get Help (Fast)",
          "C++ Models in QML : An Introduction",
          "String List Model From C++",
          "Join the Official Support Channels",
          "Object List Model From C++",
          "Editable Object List Model Demo",
          "Editable Object List Model Demo : QPROPERTY",
          "Convenience Models : Comparison & Review",
          "Abstract Item Model From C++ : Concepts",
          "Abstract Item Model From C++ : Building the Model",
          "Abstract Item Model From C++ : Using the Model in Qt Quick",
          "Decoupling Data Source and Model",
          "Using Object List Properties",
          "C++ Models in QML : Recap"
        ],
        "Challenge : REST Api Client V2, Using a C++ Data Model": [
          "Rest Api Client V2 : Challenge Overview",
          "Modeling Data and Data Source Classes",
          "Building the Data Model",
          "Putting it all together"
        ],
        "Custom Visual Types": [
          "Registering Visual Types : An Overview",
          "Custom Painted Types: Images - Concepts",
          "Custom Painted Types : Images- Demo",
          "Custom Painted Types : Draw a Bar Chart",
          "Enhance Stair Chart with List Properties",
          "Pure QML Custom Shapes",
          "Registering Visual Types : Recap"
        ],
        "Dive in : Singletons": [
          "Singletons Overview",
          "Registering Singletons : QJSValue",
          "Registering Singletons : QObject",
          "Registering Singletons : QML",
          "Singletons Recap"
        ],
        "Digging QML from C++": [
          "Digging QML from C++ : Overview",
          "Loading QML Objects from C++ with QQmlEngine : Reading and Writing Properties",
          "Custom FootBallTeam Project Overview",
          "Parsing a Custom C++ Type from QML",
          "Loading Visual Types with QQuickView",
          "QqmlApplicationEngine : The Convenience",
          "Invoking QML Methods",
          "Handling a QML Signal in C++, Passing QML objects as parameters",
          "Digging QML from C++ : Recap"
        ],
        "Farewell and Next Steps": [
          "Farewell, Next Steps",
          "BONUS -Course List : Discounted!"
        ]
      },
      "requirements": [
        "Basic Knowledge of Qt C++",
        "Basic Knowledge of Qt Quick",
        "Basic Knowledge to Interface C++ to QML",
        "The latest Version of Qt and Qt Creator",
        "Open mind and willingness to learn"
      ],
      "description": "Important note : There is an update of this  course to Qt 6. If  you're just starting out, that's what you should take. Take this if you have a specific reason to target Qt 5.\nYou already know quite a bit about Qt , C++ and Qt Quick and looking to learn about cool advanced features like Custom C++ Models in QML, Custom C++ Visual types in QML and more cool features. If that's the case then this is the course for you. This course will hit 4 critical points in advanced tricks to interface your C++ to QML .\nBuilding your own Custom C++ Models in C++ and using them in QML\nBuilding your own C++ Visual Types and using them in QML\nUsing C++ Types as Singletons in QML\nDigging Deep in the QML tree and manipulating your QML Elements from C++\nAlong the course we'll touch on lots of best practices to make your C++ and QML Code and APIs much more readable, user friendly and maintainable. The course is packed with lots of examples and demos to make your learning experience as pleasant as possible. If you' re looking to push your skills in Interfacing Qt C++ to QML to the next level, this course will get you up to speed in shortest amount of time possible.\nQt is the platform choice for thousands of software projects. Both Open source and commercial and is used by some of the most successful companies on the planet.\nIf you want to build Fluid, Dynamic and Cross Platform User Interfaces, that can run on virtually anything out there, and take advantage of the powerful features like the Model View Framework and the fancy Qt Painting and Drawing API and more, Qt is second to none in that regard.Please check out some of the preview videos, and lets get you STARTED using Advanced tricks in connecting your C++ to QML.",
      "target_audience": [
        "Anyone willing to learn to use Custom C++ Models in QML",
        "Anyone willing to learn to build Custom C++ Visual Types and use them in QML",
        "Anyone willing to learn how to use C++ Classes as Singletons in QML",
        "Anyone willing to learn how to traverse the QML element tree structure and manipulate elements from C++"
      ]
    },
    {
      "title": "Datadog Monitoring - A Full Basic to ADVANCE Datadog guide",
      "url": "https://www.udemy.com/course/datadog-course/",
      "bio": "The complete In-depth Datadog monitoring course from Basic to ADVANCE. Learn Datadog with Real-time Hands-On examples.",
      "objectives": [
        "Learn In & Out of Datadog monitoring tool with proper HANDS-ON examples from Basic to Advance level.",
        "Datadog Agent setup & configuration in Windows Host and Docker containers.",
        "Datadog core concepts like Datadog Architecture, Pricing, Datadog Agent manager, Understanding installation root directory etc.",
        "Infrastructure Monitoring for Hosts, Processes, Containers, Events, Serverless function (AWS lambda).",
        "Understand the Tagging concept in Datadog and its benefits. Implement Tagging in Container and Non-container environments.",
        "Create Custom Metrics using Custom Agent check and a Python application (DogStatsD).",
        "Tailored Datadog Dashboards to get overview of Host's health using Timeseries, Query Value, Table, Group, Summaries, Stream widgets and Template variables.",
        "Build Datadog Notebooks using Timeseries, Text, Table cells.",
        "Configure Datadog Monitors & Alerts using Tag, Template, Conditional variables and Notification, Re-notification messages.",
        "EXCLUSIVE - Datadog Log Management including Log collection, LOG PIPELINE, Log Explorers & Views in Datadog.",
        "Application Performance Monitoring (APM) and Continuous Profiling for a Python Flask web application.",
        "EXCLUSIVE - Instrument Flask application for Traces, TRACE PIPELINE for Ingestion Control (Sampling), Datadog APM Views & Explorers.",
        "Datadog Account Management for Administrators - Grant Roles & Permissions, API keys, SAML Group mappings, Audit Trail, Sensitive Data Scanner."
      ],
      "course_content": {
        "Introduction": [
          "Introduction to Monitoring in SDLC",
          "What is Datadog monitoring tool",
          "Key functionalities of monitoring tools",
          "Announcement",
          "Monitoring Terminologies",
          "Architecture of Datadog"
        ],
        "Pricing and Setup": [
          "Datadog Pricing",
          "Datadog Setup and account creation"
        ],
        "Datadog Agent": [
          "Datadog Agent Manager",
          "Datadog Agent's Directory Tour",
          "Datadog Agent Manager continued",
          "Quiz 1"
        ],
        "Infrastructure Monitoring - Host": [
          "Host Map",
          "Agent, System, Ntp metrics in Host Map"
        ],
        "Tags in Datadog": [
          "Introduction to Tagging",
          "Unified Service Tagging (Reserved Tags) in Datadog",
          "Filtering, Grouping on Tags",
          "Assigning Tags from datadog.yaml file",
          "Announcement1",
          "Host Map Options",
          "Quiz 2"
        ],
        "Infrastructure Monitoring - Processes": [
          "Process Explorer - Part 1",
          "Process Explorer - Part 2",
          "Scrubbing Sensitive data",
          "Create Custom Process metrics"
        ],
        "Infrastructure Monitoring - Containers": [
          "Introduction",
          "Docker Setup",
          "Containerized Docker Agent Setup",
          "Container Map and Live Containers",
          "Realistic approach to run Docker agent",
          "Environment Variables Translation rules",
          "Run Docker Agent from Docker Compose file",
          "Quiz 3"
        ],
        "Metrics and Metric Views in Datadog": [
          "What are Metrics ?",
          "Why Datadog Agent aggregates metrics",
          "Count, Rate, Gauge, Set Metric types",
          "Histogram Metric type",
          "Distribution Metric type",
          "Datadog's Summary View for Metrics",
          "Metric Explorer"
        ],
        "Custom Metrics - Agent Check": [
          "Custom Metrics Fundamentals",
          "Custom Metrics submission types",
          "Create Custom Check for COUNT metric type",
          "Custom Agent check running",
          "Metric Without Limits",
          "Create Custom Check for GAUGE metric type",
          "Create Custom Check for RATE metric type",
          "Create Custom Check for HISTOGRAM metric type"
        ],
        "Custom Metrics - DogStatsD & Python app": [
          "Python application code to instrument",
          "increment() & decrement() functions for COUNT metric type",
          "Instrument Python app for COUNT metric type",
          "Instrument Python app for GAUGE metric type",
          "Instrument Python app for HISTOGRAM & DISTRIBUTION",
          "Quiz 4"
        ]
      },
      "requirements": [
        "Basic Computer science knowledge."
      ],
      "description": "\"Datadog is an observability service for cloud-scale applications, providing monitoring of servers, databases, tools, and services, through a SaaS-based data analytics platform.\"\nWhat's included in the course ?\nComplete Datadog monitoring tool's features explained from Scratch to In-depth Advance level.\nCovers a wide scope of almost all the Datadog features listed in Datadog's official documentation.\nDatadog Agent setup & configuration, Metrics, Events, Infrastructure Monitoring, Log Management, Application Performance Monitoring, Continuous Profiling, UI Monitoring, Dashboards, Notebooks, Monitors and many more.\nEach Datadog monitoring feature and the associated concepts are demonstrated with proper Theory and Real-time Hands-On examples.\nInteract with Multiple integrations supported by Datadog monitoring tool.\nBuild and Instrument a Python Flask application for Application Performance Monitoring and Continuous Profiling.\nExclusive Datadog Topics like End-to-End Log Pipeline (LMS), Trace Pipeline (APM), Datadog Containerized Agent, Application Instrumentation etc.\nThis course is useful for Application developers too as there are multiple sections in the course that involves Instrumenting Applications to generate Custom Metrics, Custom Events, Traces etc.\nFor Datadog Administrators, there is a section for Datadog Account Management that involves Granting Roles & Permissions, API keys, SAML Group mappings, Audit Trail, Sensitive Data Scanner etc.\nCourse is packed with many Datadog Tips & Tricks that can be very helpful in your day to day interaction with Datadog monitoring tool in Real projects.\nAfter completing this Datadog course, you can start working on any Real-time Datadog monitoring project with full confidence.\nPlease go through the above Course content/Curriculum to get more details of it.",
      "target_audience": [
        "Monitoring engineers who want to add Datadog monitoring tool in their skillset.",
        "DevOps Engineers",
        "Application Developers"
      ]
    },
    {
      "title": "Distributed Systems & Cloud Computing with Java",
      "url": "https://www.udemy.com/course/distributed-systems-cloud-computing-with-java/",
      "bio": "Learn Distributed Java Applications at Scale, Parallel Programming, Distributed Computing & Cloud Software Architecture",
      "objectives": [
        "Design and build massively Parallel Java Applications and Distributed Algorithms at Scale",
        "Create efficient Cloud-based Software Systems for Low Latency, Fault Tolerance, High Availability and Performance",
        "Master Software Architecture designed for the modern era of Cloud Computing",
        "Globally deploy Distributed Programs on the Cloud serving millions of users, billions of requests, & petabytes of data"
      ],
      "course_content": {},
      "requirements": [
        "Proficiency in the Java",
        "Passion for Software Engineering and Computer Science",
        "Multithreading and Concurrency: Recommended"
      ],
      "description": "Have you always wanted to build software that reaches millions of users and impact people's lives?\nHave you been wondering how modern companies\nHandle massive amount of internet traffic and transactions?\nSecurely store billions of our photos, videos, and other data?\nProvide impeccable user experience and high performance 24/7 all around the globe?\nThen you are in the perfect place!\n\n\nIn this course you will:\nMaster the theory of Distributed Systems, Distributed Computing and modern Software Architecture\nGain the practical skills necessary to build Distributed Applications and Parallel Algorithms, focusing on Java based technologies\nDeploy groups of distributed Java applications on the Cloud\nScale Distributed Databases to store petabytes of data\nBuild Highly Scalable and Fault Tolerant Distributed Systems\nAlong the way, you will learn modern technologies like:\nApache Kafka\nApache Zookeeper\nMongoDB\nHAProxy\nJSON\nJava HTTP Server and Client\nProtocol Buffers\nGoogle Cloud Platform\nAnd many others\nBy the end of the course you will:\nApply best practices for building and architecting real-life Distributed Systems\nScale your Distributed System to handle billions of transactions per day\nDeploy your distributed application on the Cloud\nChoose the right technologies for your use case and Software Architecture\nUse modern Java based techniques to store and handle large amounts of data\n\n\nSo what are you waiting for?\nJoin us today on this incredible journey!\n\n\nFAQ\n- What do I need to know to join the course?\nBasic knowledge of Java will suffice. Knowing the fundamentals of Multithreading and Concurrency may help but is not required.\n- Will this course help me in System Design Interviews?\nYes. Distributed Systems questions are frequently asked during System Design Interviews, especially by large companies that operate on a massive scale. The skills you will learn in this course will help you in your career both while interviewing and working on real projects\n- Do I need to pay for any software or Cloud account?\nNo. All the technologies covered in the course are free and open-source. The lectures on the cloud don't require you to pay for anything. If you want to follow along, all cloud vendors provide free-tier accounts to play around with and practice for free. Please follow the specific cloud vendor's documentation for guidance.\n- Can I run and develop a Distributed System locally on my personal computer?\nYes. You can develop and run a distributed system on your computer and you don't need to buy any additional hardware. Generally, most distributed computing development is done on a single computer before it goes to QA and production.\n- Is this the right course for me if I want to become a Software Architect or Technical Lead?\nYes. This is the right place for you to gain practical Software Architecture and Distributed Computing skills to become a Software Architect and Technical Lead. Thanks to the advancement of Cloud Computing, most companies today run distributed systems and deploy them on the cloud. So the skills taught in this course are critical to being a successful Software Architect in the modern era.",
      "target_audience": [
        "Students who want to build modern, Distributed Systems at scale",
        "Students who want to acquire new practical skills in Distributed Computing & Cloud Technologies",
        "Students proficient in Java who want to take their Software Engineering skills to a new level"
      ]
    },
    {
      "title": "Learn Entity Framework Core 2.0 (EFC2) using ASP.Net Core",
      "url": "https://www.udemy.com/course/learn-entity-framework-core-2-efc2-using-aspnet-core/",
      "bio": "This course will give you a low level understanding of Entity Framework Core 2 & how to use it ASP.Net Core.",
      "objectives": [
        "Perform CRUD operations",
        "Code First & Data First Approach",
        "Migration & Seeding",
        "Advance Model Designing",
        "Advance Data Operations"
      ],
      "course_content": {
        "Introduction": [
          "What is Entity Framework Core",
          "Development Approaches",
          "Setting up Environment for Entity Core"
        ],
        "Code First Approach": [
          "Create First Model & Create Context",
          "Use Dependancy & Create DB"
        ],
        "CRUD Operations": [
          "Create - Insert Data into Database",
          "Read- Retrive Data into Database",
          "Update - Update Record to Database",
          "Delete - Delete Record from Database"
        ],
        "Data First Approach": [
          "Assignment",
          "Database First Approach",
          "Quiz Part - 1"
        ],
        "Advance Data Operations": [
          "Sort & Filter Data",
          "Entity State & Attach",
          "Native SQL Statements",
          "Using Store Prodedure",
          "Quiz Part - 2"
        ],
        "Migrate & Seed": [
          "Migration - 1",
          "Migration - 2",
          "Seed Data"
        ],
        "Advance Model Design": [
          "Data Annotation - 1",
          "Data Annotation - 2",
          "Modify Column name & type",
          "Modify Table Name",
          "ModelBuilder",
          "Quiz Part - 3"
        ],
        "What is New in 2.0": [
          "HasQueryFilter()",
          "EF.CompileQuery()",
          "EF.Function()",
          "String interpolation",
          "OwnOne()"
        ],
        "Advance Entity concepts": [
          "Concurrency",
          "Manage Transactions",
          "Manage Logs",
          "Quiz Part - 4"
        ],
        "More on": [
          "Conclusion",
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "Basic Asp. Net development & C# concepts",
        "Basic knowledge of SQL server"
      ],
      "description": "The Entity Framework is a set of technologies that support the development of data-oriented applications to work with relational data. It is is an ORM.\nThe Entity Framework provides services like tracking, identity resolution, lazy loading, and query translation so that developers can focus on their application-specific business logic rather than the data access fundamentals. It  enables developers to work with data in the form of domain-specific objects and properties.\n\nEntity Framework (EF) Core is a lightweight, extensible, and cross-platform version of the Entity Framework data access technology.Entity framework supports various database provider including Microsoft SQL Server, SQLite, PostgreSQL, MySQL. We can use EFC2 in Full .Net Application, UWP, and .Net Core.\nThrough this series we will learn how to handle CRUD operations, Code First & Data First Approaches, Migration & Seeding, and Advance Data, Entity, Model concepts.\nAlong with this we will also see how to send request from PCM & dotnet ef commands.\nWe will learn all above things through this video series. If you have any doubts then you can contact me via mail and Q & A.",
      "target_audience": [
        "This is for newbies who want to learn Entity Framework Core 2.0",
        "Newbies for Object/Relational Mapping (ORM)",
        "Perform operations on MS SQL Server using EFC2"
      ]
    },
    {
      "title": "Data Structures and Algorithms In C++ ( DSA )",
      "url": "https://www.udemy.com/course/data-structures-and-algorithms-in-c-plus-plus/",
      "bio": "Data Structures and Algorithms in C++ Using C++ DSA C++ DSA and Data Structures Algorithms with C++ DSA in C++ DSA C++",
      "objectives": [
        "Understand the details of Data Structures and Algorithms (DSA) through animations",
        "Learn to write programs for different Data Structures and Algorithms in C++",
        "Get the confidence to face programming interviews",
        "Test your knowledge with over 100 Quiz questions",
        "Learn how to analyse algorithms",
        "Get the ability to write and trace recursive algorithms"
      ],
      "course_content": {
        "Introduction": [
          "Introduction to Data Structures and Algorithms Through C++"
        ],
        "Introduction to Data Structures and Algorithms": [
          "Important : Source Code Repository required for course",
          "Data Structures and Algorithms",
          "Measuring Running time of Algorithms",
          "Asymptotic Analysis",
          "Big O Notation",
          "Finding Big O",
          "Tight and Loose Upper Bounds",
          "Introduction Quiz A",
          "Big O analysis of Algorithms",
          "Finding Time Complexity",
          "Big O analysis of Algorithms: Examples",
          "Worst case, Best case and Average Case Analysis",
          "Common Complexities",
          "Abstract Data Types",
          "Introduction Quiz B"
        ],
        "Linked List": [
          "Introduction",
          "Traversing and Searching a Single Linked List",
          "Finding pointers in a Single linked list",
          "Difference between while(p!=NULL) and while(p->link!=NULL)",
          "Insertion in a Single Linked List",
          "Insertion in a Single Linked List..contd",
          "Deletion in a Single Linked List",
          "Copy Constructor, Destructor and Assignment Operator",
          "Linked List Quiz A",
          "Your Review Matters!",
          "Reversing a Single Linked List",
          "Finding and Removing a cycle in a Linked list",
          "Sorting a Linked list using Bubble Sort",
          "Merging of sorted Linked lists",
          "Sorting a Linked list using Merge Sort",
          "Doubly linked list",
          "Insertion in a doubly linked List",
          "Deletion from doubly linked list",
          "Reversing a doubly linked list",
          "Circular linked list",
          "Insertion in a circular Linked List",
          "Deletion in a circular linked list",
          "Concatenation",
          "Linked List with Header Node",
          "Sorted linked list",
          "Linked List Quiz B"
        ],
        "Stack and Queue": [
          "Introduction",
          "Stack",
          "Array Implementation of Stack",
          "Linked List Implementation of Stack",
          "Queue",
          "Array Implementation of Queue",
          "Circular Queue",
          "Linked List implementation of Queue",
          "Queue through Circular Linked List",
          "Deque",
          "Priority Queue",
          "Checking validity of an expression containing nested parentheses",
          "Evaluating Arithmetic Expressions",
          "Polish Notations",
          "Converting infix expression to postfix expression",
          "Evaluation of postfix expression",
          "Stack and Queue Quiz"
        ],
        "Recursion": [
          "Introduction",
          "Flow of control in Recursive functions",
          "Winding and unwinding phase",
          "Factorial",
          "Printing numbers from 1 to n",
          "Sum of digits of an integer",
          "Base conversion",
          "Finding nth power of a number",
          "Euclids Algorithm",
          "Fibonacci Series",
          "Tower of Hanoi",
          "Tail recursion",
          "Recursion vs. Iteration",
          "Recursion Quiz"
        ],
        "Binary Tree": [
          "Introduction to Trees",
          "Binary Tree",
          "Strictly Binary Tree and Extended Binary Tree",
          "Full binary tree and Complete Binary Tree",
          "Array Representation of Binary trees",
          "Linked Representation of Binary Trees",
          "Binary Tree Quiz A",
          "Binary Tree in C++",
          "Traversal in Binary Tree",
          "Preorder Traversal",
          "Inorder Traversal",
          "Postorder Traversal",
          "Level order traversal",
          "Finding height of a Binary tree",
          "Constructing Binary tree from Traversals",
          "Constructing binary tree from inorder and preorder traversals",
          "Constructing binary tree from postorder and inorder traversals",
          "Binary Tree Quiz B"
        ],
        "Binary Search Tree": [
          "Introduction",
          "Traversal in Binary Search Tree",
          "Searching in a Binary Search Tree",
          "Nodes with Minimum and Maximum key",
          "Insertion in a Binary Search Tree",
          "Deletion in a Binary Search Tree",
          "Copy Constructor and Destructor",
          "Binary Search Tree Quiz"
        ],
        "Heap": [
          "Introduction",
          "Heap Representation",
          "Insertion in Heap",
          "Deletion",
          "Building a heap",
          "Heap Applications",
          "Heap Tree Quiz"
        ],
        "Sorting": [
          "Introduction",
          "Sort Stability",
          "Selection Sort",
          "Selection Sort Example",
          "Selection Sort in C++",
          "Analysis of Selection Sort",
          "Bubble Sort",
          "Bubble Sort in C++",
          "Improvement in Bubble Sort",
          "Analysis of Bubble Sort",
          "Sorting Quiz A",
          "Insertion Sort",
          "Insertion Sort Example",
          "Insertion Sort in C++",
          "Analysis of Insertion sort",
          "Shell Sort",
          "Shell Sort Example",
          "Shell Sort in C++",
          "Analysis of Shell Sort",
          "Merging two Sorted Arrays",
          "Recursive Merge Sort",
          "Recursive Merge Sort in C++",
          "Analysis of Merge Sort",
          "Iterative Merge Sort",
          "Iterative Merge Sort in C++",
          "Quick Sort",
          "Quick Sort in C++",
          "Analysis of Quick Sort",
          "Binary tree sort",
          "Binary Tree Sort in C++",
          "Analysis of Binary Tree Sort",
          "Heap Sort : C++ implementation and Analysis",
          "Radix Sort",
          "Radix Sort : C++ implementation and Analysis",
          "Address Calculation Sort",
          "Address Calculation Sort in C++",
          "Analysis of Address Calculation Sort",
          "Sorting Quiz B"
        ],
        "Searching": [
          "Linear Search",
          "Variations of Linear Search",
          "Binary Search",
          "Implementation of Binary Search",
          "Analysis of Binary Search"
        ]
      },
      "requirements": [
        "Basic knowledge of programming in any language"
      ],
      "description": "This \"Data Structures and Algorithms In C++\" course is thoroughly detailed and uses lots of animations to help you visualize the concepts.\nInstructor is author of book Comprehensive Data Structures and Algorithms in C++.\nThis \"Data Structures and Algorithms in C++\" tutorial will help you develop a strong background in Data Structures and Algorithms (DSA). The course is broken down into easy to assimilate short lectures, and after each topic there is a quiz that can help you to test your newly acquired knowledge. The examples are explained with animations to simplify the learning of this complex topic. Complete working programs are shown for each concept that is explained.\nThis Data Structures and Algorithms using C++ course provides a comprehensive explanation of data structures like linked lists, stacks and queues, binary search trees, heap, searching and hashing. Various sorting algorithms with implementation and analysis are included. Concept of recursion is very important for designing and understanding certain algorithms so the process of recursion is explained with the help of several examples.\nThis Data Structures in C++ course covers following DSA topics in C++ with implementation :\nAlgorithm Analysis, Big O notation, Time complexity, Singly linked list, Reversing a linked list, Doubly linked list, Circular linked list, Linked list concatenation, Sorted linked list.\nStack, Queue, Circular Queue, Dequeue, Priority queue, Polish Notations, Infix to Postfix, Evaluation of Postfix, Binary Tree, Binary Search Tree, Tree Traversal (inorder, preorder, postorder, level order), Recursion, Heap, Searching, Hashing\nSorting : Selection, Bubble, Insertion, Shell, Merging, Recursive Merge, Iterative Merge, Quick, Heap, Binary tree, Radix, Address calculation sort\nHere are the DSA topics in course-\nAlgorithm Analysis\nLinked List\nStack and Queue\nRecursion\nBinary Tree\nBinary Search Tree\nHeap\nSorting\nSearching\nHashing\nThroughout this Data Structures and Algorithms with C++ course, a step by step approach is followed to make you understand different Data Structures and Algorithms. You will see code implementation of different data structures in C++ and algorithms are explained in step-wise manner. Through this course you can build a strong foundation and it will help you to crack Data Structures and Algorithms in C++ coding interviews questions and work on projects. Good foundation on Data Structures and Algorithms in C++ interview topics helps you to attempt tricky interview questions.\nIn this Data Structures and Algorithms Through C++ In Depth course, C++ language programs are used for implementing various concepts, but you can easily code them in any other language like Java, C#, or Python.\nThis Learn Data Structures and Algorithms In C++ online course on udemy will help software developers to refresh the concepts studied in Data Structures and Algorithms in C++ book / pdf and also to students learning from referred book / pdf.\nThis DSA Self Paced course helps students to have great foundation to solve DSA In C++ problems. This will help them to solve LeetCode problems and in google faang coding interviews.\nWhat Students Say-\n\"Teaches the material on a university level, and clearly explains the theory behind each DSA topics in C++ with an example of the code.\"\n\"This is amazing course. thank you mam i really enjoyed this course.\"\nSo what are you waiting for, click on Buy button to enroll now and start learning.",
      "target_audience": [
        "Programmers looking for jobs",
        "Programmers wanting to write efficient code",
        "Computer Science students having Data Structures as part of their curriculum",
        "Non Computer science students wanting to enter IT industry"
      ]
    },
    {
      "title": "ROS For Beginners (ROS Noetic, Melodic, Kinetic)",
      "url": "https://www.udemy.com/course/ros-for-beginners/",
      "bio": "Master the Key ROS (Robot Operating System) Concepts to Create Powerful and Scalable Robot Applications, Step By Step",
      "objectives": [
        "Master ROS basics",
        "Create, build, run, and debug your ROS program",
        "Master ROS core functionalities",
        "Learn ROS best practices to make your application readable and scalable",
        "Create reusable code for any robot powered by ROS",
        "Write ROS code with both Python and C++",
        "Learn by doing, not just watching"
      ],
      "course_content": {
        "Introduction": [
          "Welcome !",
          "What is ROS, When to use it, and Why ?",
          "How to get the most out of this course"
        ],
        "Install ROS and Setup Your Environment": [
          "Intro",
          "[UPDATE] Quick note on versions - please read",
          "Which ROS Version to Use ? Kinetic, Melodic, Noetic ? What about ROS2?",
          "Install Ubuntu 20.04 on a Virtual Machine",
          "Install ROS Noetic on Ubuntu 20.04",
          "Launch Your First ROS Master",
          "Section Conclusion"
        ],
        "Run Your First ROS Program": [
          "Intro",
          "Create a Catkin Workspace",
          "Additional Note about Setting Up your ROS Environment",
          "Create a ROS Package",
          "What is a Node ?",
          "Your First Python Node",
          "Your First C++ Node",
          "Debug Your Nodes With Command Line Tools",
          "Visualize Your ROS Graph With rqt_graph",
          "Experiment on Nodes With Turtlesim",
          "Section Conclusion"
        ],
        "Communicate With ROS Topics": [
          "Intro",
          "What is a Topic ?",
          "Create a Python Publisher",
          "Create a Python Subscriber",
          "Create a C++ Publisher",
          "Create a C++ Subscriber",
          "Use Anonymous Nodes to Launch Multiple Publishers/Subscribers",
          "Debug Topics With Command Line Tools",
          "Visualize Topics With rqt_graph",
          "Experiment on Topics With Turtlesim",
          "Topic Activity",
          "Topic Activity - Solution",
          "Section Conclusion"
        ],
        "Communicate With ROS Services": [
          "Intro",
          "What is a Service ?",
          "Create a Python Service Server",
          "Create a Python Service Client",
          "Create a C++ Service Server & Client",
          "Debug Services With Command Line Tools",
          "Experiment on Services With Turtlesim",
          "Service Activity",
          "Service Activity - Solution",
          "Section Conclusion"
        ],
        "Customize Your Application With Msg and Srv Files": [
          "Intro",
          "What are Msg and Srv Definitions ?",
          "Create and Build Your Own Custom Msg",
          "Use Your Custom Msg in Your Code",
          "Create Your Own Custom Srv",
          "Debug Msg and Srv With Command Line Tools",
          "Msg & Srv Activity",
          "Msg & Srv Activity - Solution",
          "Section Conclusion"
        ],
        "Make Your Application Scalable With ROS Params and Launch Files": [
          "Intro",
          "What is a ROS Parameter ?",
          "Manipulate Parameters With Command Line Tools",
          "Handle Parameters With Python",
          "Handle Parameters With C++",
          "What is a Launch File ?",
          "Create a Launch File to Start all Your Parameters and Nodes",
          "Section Conclusion"
        ],
        "Extra": [
          "Replay a Topic With ROS Bags",
          "Use OOP With ROS - Python",
          "Use OOP With ROS - C++",
          "Work With Multiple Catkin Workspaces"
        ],
        "Conclusion": [
          "What You've Learned",
          "What to Do Next ?",
          "Useful Resources",
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "Basic programming knowledge (Python or C++)",
        "You are familiar with Linux and how to use a terminal"
      ],
      "description": "(Updated with ROS Noetic - This course is now valid for ROS Kinetic, ROS Melodic, and ROS Noetic)\nLearning ROS is hard, and you know it. But why should it be that way?\nThere is a lack of structured resources for beginners. You can find some explanations and programming tutorials online about Robot Operating System, but they won’t really tell you which path to follow when you begin, where to go, what to focus on, etc.\nThat’s why I’ve created this course, that I wish I had when I begun. So you can learn ROS much faster than I did.\nThe goal of this course is to remove the big learning curve that you face when you start to learn ROS by yourself. I will show you, step by step, what you need to know to get started and master ROS basics.\nThis course is:\nStructured in a way that is easy to follow for a beginner\nGoing through all ROS core concepts that you need, step by step\nGoing to the point. No useless and over-complicated stuff that you won’t use anyway.\nFull of practice and challenges to make you progress faster\nNow, why should you choose my course?\nIn the past I have developed a complete ROS software for an entire 6 axis robotic arm. I’m telling you that because by developing this robot, I learned (the hard way) what I really needed to know to build things that actually work.\nMy experience with ROS is not only about university work or a weekend hobby: I actually co-founded a business with a robot powered by ROS. By doing so, I had to focus on going to the point, finding what is useful, and what is not.\nSo today, with the practical vision that I’ve developed, I know exactly what you need to learn at the beginning if you want to get serious about building robotic applications.\nWhat is this course about?\nThis course will guide you, step by step, through all the ROS core functionalities. We’ll focus on ROS basics, communication tools, and also on how to build a scalable application with Robot Operating System.\nFor each section, I will explain one concept in a way that is easy to understand, and then you will practice with me by writing, building, and running some code. I will show you what you need to pay attention to, what you need to focus on, and how to avoid common mistakes.\nAnd, more importantly, I will give you some activities and challenges to make you practice on the concepts that you’ve just seen.\nNote that all the code written in this course will be both in Python and C++, so you can decide to learn ROS with those 2 languages, or only one of them.\nSo.. Start your learning today and build awesome robotic applications with ROS !\nAfter installing ROS on a Ubuntu OS, you will learn the following ROS key concepts :\nNodes\nTopics\nServices\nMsg and Srv definitions\nParameters\nLaunch Files\nAnd much more!\nBy mastering those concepts, you will be 100% ready to start any other robotic application and build complete software from scratch using Robot Operating System.\nYou will also learn how to :\nDebug your program\nUse command-line tools for each key concept\nBuild your application\nCorrectly set up and manage your project structure\nAnd as I want to make you develop great (not just good, because “good” is not good enough) and scalable robotic applications, I will share with you the best practices that I’ve learned from my own experience.\nUPDATE:\nNote: this course targets the first version of ROS, or \"ROS1\". This is not a ROS2 course.\n- Should you learn ROS1 or ROS2?\nAs of today, you should learn ROS2. ROS1 is not supported anymore and won't receive new official updates.\nNow, having said that, lots of companies are still using ROS1 on legacy projects, and you might need to work with a ROS1 codebase at some point. If that's the case, then this course will help you.\nNote that if you already know ROS1 or ROS2, switching to the other version won't be that hard, as most of the concepts are identical.",
      "target_audience": [
        "Students who want to learn ROS without wasting time",
        "Developers who want to join the robotic side",
        "Researchers/Teachers who want to use a great robot framework for teaching and testing",
        "Engineers who want to create robot softwares faster",
        "And anyone who wants to build scalable robot applications with ROS"
      ]
    },
    {
      "title": "Devops: Jenkins Pipeline As Code: All you need to know A - Z",
      "url": "https://www.udemy.com/course/jenkins-pipeline-as-code-all-you-need-to-know-from-a-z/",
      "bio": "Accelerate your learning with easy to understand examples and real time demonstrations of Jenkins Pipeline Scripts.",
      "objectives": [
        "Understand the difference between declarative pipeline syntax and scripted pipeline syntax",
        "In depth knowledge of both syntax styles",
        "Learn how to write common code to be shared across multiple jenkins jobs",
        "Learn how to trigger jobs using pipeline scripts",
        "Learn how you can make use of public java libraries in your pipeline script to be more productive",
        "Learn how you can use docker in your pipeline script",
        "Be confident in using Jenkins Pipeline as Code",
        "And many, many more"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Declarative Pipeline": [
          "Overview Of Pipeline Syntax",
          "Hello World Pipeline Script",
          "Pipeline > Agent",
          "Pipeline > Stage > Steps > Script",
          "Pipeline > Stage > Steps > Retry/Timeouts",
          "Pipeline > Tools",
          "Pipeline > Stage > Options > Error/Retry",
          "Pipeline > Stage > Options > Timeout",
          "Pipeline > Stage > Options > Timestamps",
          "Pipeline > Stage >Options > Timestamps (alternative method)",
          "Pipeline > Stage > Options > SkipDefaultCheckout",
          "Pipeline > Stage > Environment Credentials",
          "Pipeline > Stage > When (Part 1)",
          "Pipeline > Stage > When (Part 2) > Branch",
          "Pipeline > Stage > When (Part 2) > BuildingTag and Tag",
          "Pipeline > Stage > When (Part 2) > Changelog",
          "Pipeline > Stage > When (Part 2) > ChangeRequest",
          "Pipeline > Stage > When (Part 2) > Changeset",
          "Pipeline > Stage > When (Part 3) > BeforeAgent",
          "Pipeline > Stage > Parallel/FailFast",
          "Pipeline > Stage > Input",
          "Pipeline > Stage > Post",
          "Pipeline > Options > BuildDiscarder",
          "Pipeline > Options > DisableConcurrentBuilds",
          "Pipeline > Options > OverrideIndexTriggers",
          "Pipeline > Options > SkipStagesAfterUnstable",
          "Pipeline > Options > CheckoutToSubdirectory",
          "Pipeline > Options > NewContainerPerStage",
          "Pipeline > Parameters",
          "Pipeline > Pipeline Triggers > Cron",
          "Pipeline > Pipeline Triggers > PollSCM",
          "Pipeline > Pipeline Triggers > Upstream",
          "Pipeline > Agent > Docker > Image",
          "Pipeline > Agent > Docker > Args",
          "Pipeline > Agent > Docker > AlwaysPull",
          "Pipeline > Agent > Docker > CustomWorkspace",
          "Pipeline > Agent > Docker > RegistryUrl/CredentialsId",
          "Pipeline > Agent > Docker > Label",
          "Pipeline > Agent > Docker > ReuseNode",
          "Pipeline > Agent > Dockerfile",
          "Pipeline > Agent > Dockerfile > Dir",
          "Pipeline > Agent > Dockerfile > Filename",
          "Pipeline > Agent > Dockerfile > AdditionalBuildArgs",
          "Pipeline > Agent > Dockerfile > CustomWorkspace",
          "Groovy Script Outside of Declarative Pipeline Script",
          "Test Your Knowledge!"
        ],
        "Shared Libraries": [
          "Global Libraries",
          "Importing Libraries",
          "Importing Class Libraries",
          "Importing Static Libraries",
          "Custom Steps",
          "Closures",
          "Importing Third Party Libraries",
          "Loading Resources",
          "Defining Pipeline Script In Call Method",
          "Test Your Knowledge!"
        ],
        "Scripted Pipeline": [
          "Introduction",
          "Docker > Image",
          "Docker > Args",
          "Docker > AlwaysPull",
          "Docker > CustomWorkspace",
          "Docker > RegistryUrl/CredentialsId",
          "Dockerfile",
          "Dockerfile > Dir",
          "Dockerfile > Filename",
          "Dockerfile > AdditionalBuildArgs",
          "Dockerfile > CustomWorkspace",
          "Stage > Options > Error/Retry",
          "Stage > Options > Timeout",
          "Stage > Options > Timestamps",
          "Stage > Environment Credentials",
          "Stage > When (Part 1)",
          "Stage > When (Part 2) > Branch",
          "Stage > When (Part 2) > BuildingTag and Tag",
          "Stage > When (Part 2) > Changelog",
          "Stage > When (Part 2) > ChangeRequest",
          "Stage > When (Part 2) > ChangeSet",
          "Stage > Parallel/FailFast",
          "Stage > Input",
          "Stage > Post",
          "Options > BuildDiscarder",
          "Options > DisableConcurrentBuilds",
          "Options > OverrideIndexTriggers",
          "Options > SkipStagesAfterUnstable",
          "Options > CheckoutToSubdirectory",
          "Options > NewContainerPerStage",
          "Parameters",
          "Tools",
          "Triggers > Cron",
          "Triggers > PollSCM",
          "Triggers > Upstream",
          "Test Your Knowledge!"
        ],
        "End of Course": [
          "Congratulations!"
        ],
        "Bonus Lectures": [
          "How To Get Output Of Shell Script",
          "How To Create Env Variables For Shell Script",
          "Pipeline Maven Integration (Part 1)",
          "Pipeline Maven Integration (Part 2)",
          "Pipeline Maven Integration with Jacoco",
          "Pipeline Maven Integration with SonarQube",
          "Triggering and Passing Parameters Between Jobs",
          "Lockable Resources",
          "Extended Choice Parameter",
          "More lectures coming..."
        ]
      },
      "requirements": [
        "Prior understanding of how Jenkins work",
        "An existing Jenkins setup",
        "Some programming knowledge. it would be even better if you already know Groovy but that's not a strong requirement as you should be able to follow what the Groovy code is doing and I will explain more on Groovy during the course."
      ],
      "description": "*** Please note that this is NOT a how to set up Jenkins course. This is a course for people who ALREADY knows what jenkins pipelines are used for, want to use it and want to get up to speed with the syntax or learn more about it quickly.***\n\n*** Get latest course updates in the readme when you search for user pipelineascodecourse in github ***\n\nAre you looking to use Jenkins pipeline as code FAST?\n\"With Pipelines, organisations can define their delivery pipeline through a DSL (Pipeline-as-code). Pipelines, thus, can be versioned, checked into source and easily shared within an organisation. \"\n\n\"The Pipeline DSL helps you capture complex process requirements through code - thus you can try-catch on deployment failures, loop through deployments, run tests in parallel. It brings the power of a programming language (groovy) to do so. At the same time, the DSL is simple enough to capture simple cases easily without having to touch groovy code. You can capture common patterns in functions and keep them in a global library so that new applications can build on these functions rather than re-invent.  \"\nSource: Cloudbees - Jenkins Pipeline - Software Delivery Made Easy\n\nJenkins Pipeline as Code allows you to define and automate pipelined job processes with code. Code that can be stored and versioned in a repository which allows you to track changes over time and used by jenkins to run build jobs. If you are already using Jenkins, you should have already heard of pipeline as code but if you have not, this course will help you learn what it is, and also help you to get started quickly with it to make your life as a devops practitioner much easier. This course will help you understand and use both declarative and scripted pipeline scripts and how to use shared libraries for common code across build jobs with realtime demonstrations of the pipeline scripts.",
      "target_audience": [
        "Beginners who are just starting out on jenkins pipeline as code",
        "Intermediate people who want to have more knowledge on implementing pipeline as code in jenkins"
      ]
    },
    {
      "title": "Data Structures & Algorithms, Level-up for Coding Interviews",
      "url": "https://www.udemy.com/course/cpp-data-structures-algorithms-levelup-prateek-narang/",
      "bio": "Master problem solving for Coding Interviews, ace Data Structures and Algorithms with over 150 challenges!",
      "objectives": [
        "Accelerate your algorithmic thinking",
        "Learn to optimise brute force solutions",
        "Learn to apply data structures",
        "Learn to write complex codes",
        "150+ carefully curated problems",
        "Analysis of space-time complexity",
        "Using C++ Standard Template Library",
        "Become a 10x Problem Solver",
        "Sliding Window, Hashing, Maps & Sets",
        "Master Dynamic Programming & Graphs",
        "BONUS : Build a LRU Cache",
        "Practice Questions on all important topics"
      ],
      "course_content": {
        "Welcome to Course!": [
          "Course Orientation!",
          "How to do this course?",
          "C++/Java Code Repository!",
          "TA Hours/ Doubt Support Guidelines",
          "Exercise Solutions!",
          "Q/A Section"
        ],
        "Arrays & Vectors": [
          "Introduction",
          "Vector STL - Demo",
          "Vector of Vector - Demo",
          "How to submit coding exercises?",
          "FizzBuzz Test",
          "A Note on Sorting!",
          "Helpful Webinars [Optional]",
          "Pairs",
          "Pairs Code",
          "Triplets",
          "Triplets Code",
          "Mountain",
          "Mountain Code",
          "Longest Band",
          "Longest Band Code",
          "Rains",
          "Rains Code",
          "Subarray Sort",
          "Subarray Sort Code",
          "Minimum Swaps",
          "Minimum Swaps Code",
          "Maximum Subarray Sum",
          "Minimum Difference",
          "Array Products",
          "Busy Life",
          "Arrays & Vectors Quiz!"
        ],
        "String Problems": [
          "Strings Introduction",
          "Searching Inside String!",
          "Warm Up - Search All!",
          "Space20",
          "Space20 Implementation",
          "Tokenisation (using sstream)",
          "Tokenisation (using strtok)",
          "Designing our own String Tokeniser!",
          "String Key Sort",
          "String Key Sort Implementation",
          "Check Subsets",
          "Check Subsets Implementation",
          "Sort Subsequences",
          "Sort Subsequences Code",
          "Digital Clock",
          "Biggest Number String",
          "Run Length Encoding",
          "Palindrome Break",
          "String Normalisation",
          "Solution : String Normalisation",
          "Strings Quiz!"
        ],
        "Bit-manipulation Techniques": [
          "Bitwise Operators",
          "Left Shift & Right Shift",
          "Check Odd/Even",
          "Get ith Bit",
          "Set ith Bit",
          "Clear ith Bit",
          "Update ith Bit",
          "Clear last i Bits",
          "Replace Bits Challenge",
          "Two Power",
          "Counting Set Bits",
          "Counting Bits Hack",
          "Fast Exponentiation",
          "Problem - Decimal to Binary",
          "Earth Levels"
        ],
        "Sliding Window Problems": [
          "Sliding Window Introduction",
          "Housing (Two Pointer)",
          "Housing Implementation",
          "Unique Substring (Hashing)",
          "Unique Substring Implementation",
          "String Window",
          "String Window Implementation",
          "Smallest Distinct Window",
          "Sliding Window Maximum",
          "Count Subarrays with Target Sum",
          "Sliding Window Quiz"
        ],
        "Sorting & Searching": [
          "Merge Sort",
          "Merge Sort Code",
          "Inversion Count",
          "Inversion Count Code",
          "Quick Sort",
          "Quick Sort Code",
          "Quick Select",
          "Quick Select Code",
          "Smallest String",
          "Smallest String Code",
          "Sparse Search",
          "Sparse Search Code",
          "Staircase Search",
          "ICPC Standings",
          "Juggling Balls",
          "Sorting Subarray",
          "Sorting & Searching Quiz"
        ],
        "Binary Search": [
          "Binary Search - Recap!",
          "Frequency Count",
          "Frequency Count Code-I",
          "Frequency Count Code-II",
          "Rotated Search",
          "Rotated Search Code",
          "Finding Roots",
          "Square Roots Code",
          "Aggressive Cows [Spoj]",
          "Aggressive Cows Code",
          "Min Pairs",
          "Min Pairs Code",
          "Game of Greed",
          "Game of Greed Concept",
          "Solution - Game of Greed",
          "Solution : Game of Greed",
          "Reading Books",
          "Binary Search Quiz"
        ],
        "Recursion Problems": [
          "Recursion Recap",
          "Ladders Concept",
          "Ladders Code",
          "Subsequence Based Problems",
          "Subset Sum to X",
          "Subset Sum to X Code",
          "Generate Brackets",
          "Generate Brackets Code",
          "Smart Keypad",
          "Smart Keypad Code",
          "Permutations",
          "Sorted Permutations",
          "N-Queen Problem",
          "N-Queen Code",
          "N-Queen Code",
          "Sudoku",
          "Sudoku Code",
          "Modulo Exponentiation",
          "Sudoku Solver",
          "N-Queen",
          "Game of Coins",
          "Game of coins - Advanced",
          "Rat in a Maze",
          "Longest Possible Route",
          "Recursion Quiz!"
        ],
        "Linked Lists Problems": [
          "Linked List Section Introduction",
          "Warm Up - Search!",
          "Warm Up - Creating a Linked List",
          "Practice - Insertion in the Middle",
          "Recursive Reverse a Linked List",
          "Recursively Reverse a Linked List Code",
          "Iterative Reverse",
          "Iteratively Reverse a Linked List Code",
          "K-Reverse a Linked List",
          "K-Reverse Code",
          "Merge Two Sorted Linked Lists",
          "Merge Two Sorted Linked Lists Code",
          "Runner Technique",
          "Middle Element",
          "K-th Last",
          "Merge Sort on Linked List",
          "Merge Sort Linked List Code",
          "Detect Cycle in a Linked List"
        ],
        "Stacks & Queue Problems": [
          "Stacks, Queue, Deque Recap",
          "Balanced Paranthesis",
          "Balanced Paranthesis Code",
          "Redundant Paranthesis",
          "Redundant Paranthesis Code",
          "First Non-Repeating Letter",
          "First Non-Repeating Character",
          "First Non-Repeating Code",
          "Max Subarray (Sliding Window + Deque)",
          "Simplify Path",
          "Simplify Path",
          "Simplify Path Code",
          "Stock Span Problem",
          "Solution : Stock Span"
        ]
      },
      "requirements": [
        "Ability to write & understand code",
        "Understanding of data structures",
        "Time & space complexity analysis"
      ],
      "description": "Do you find yourself feeling like you get \"stuck\" every time you get a coding question?\n\nWelcome to Data Structures & Algorithms, Level up Course the only course that provides you an ultimate practice on problem solving process and helping you to take your data structures & algorithms to the next level.  The course is taught by an expert instructor Prateek Narang from Google, who is not just a software engineer but also has mentored thousands of students in becoming great programmers & developers.\n\nThe Course contains 25+ hours of interactive video content & dozens of coding exercises, teaching you the right tips & tricks in problem solving in a most concise way. Every problem discussion starts with a brute force approach, optimisations and ends with hands-on-coding video in C++ as well.\n\nHere is what you will learn -\nProblems on Data Structures\n* Arrays, Strings, Vectors\n* Hashing (Unordered Maps, Maps, Sets)\n* Stacks, Queues, Linked Lists\n* Binary Trees, BSTs, Heaps\n* Graphs, Tries\nProblems on Algorithms\n* Brute force, Backtracking\n* Sliding Window Algorithms\n* Sorting, Searching, Binary Search\n* Dynamic Programming Fundamentals\n* Important Graph Algorithms\n* BFS & DFS, Shortest Paths\n\n\nCourse exercises are in C++ but programmers having experience in one or more languages (C++/Java/Python/JavaScript) can definitely do this course, provided they have fundamental understanding of data structures. The course covers both breadth & depth of topics, diving deep where-ever needed. You will also learn how to apply techniques involving like - sorting & searching algorithms, sliding window, binary search, hashing which are very important for problem solving. For advanced topics like Dynamic Programming & Graphs, the course starts from the basics & helps you master these topics from the very fundamentals.\n\nUnlike most instructors, I am not a salesperson or a marketer. My job is to help you build strong fundamentals in programming & be  a successful developer. Through Udemy, I am providing this course to you at a fraction of cost of its original cost, so that anyone who is interested to learn can take their skills to the next level. So I hope you sign up today, and I will see you in the course.",
      "target_audience": [
        "Students pursuing Computer Science or related fields",
        "Beginner-Intermediate level programmers with basic knowledge of data structures",
        "Developers who want to excel in problem solving skills & competitive coding",
        "Students who know theory of data structures, but find hard to implement in problems"
      ]
    },
    {
      "title": "Getting Started .NET Core Microservices RabbitMQ",
      "url": "https://www.udemy.com/course/getting-started-net-core-microservices-rabbitmq/",
      "bio": "Build .NET Core Microservices using RabbitMQ Messaging",
      "objectives": [
        ".Net Core Microservices",
        "RabbitMQ",
        "Messaging",
        "Architecture"
      ],
      "course_content": {
        "Introduction": [
          "Microservices, EventBus, RabbitMQ Architecture Overview"
        ],
        "RabbitMQ Setup": [
          "RabbitMQ Installation",
          "RabbitMQ Dashboard Overview",
          "RabbitMQ Basic Commands"
        ],
        "Producers and Consumers": [
          "RabbitMQ Messaging Overview",
          "Basic Producer Part 1",
          "Basic Producer Part 2",
          "Basic Producer Part 3",
          "Basic Consumer Part 1",
          "Basic Consumer Part 2",
          "Basic Consumer Part 3"
        ],
        "Microservice Solution": [
          "Microservice Solution Overview",
          "Initial Solution Folder Structure"
        ],
        "Domain Core Project": [
          "Add Domain Core Project",
          "EventBus Event Handler Interfaces",
          "Bus Commands",
          "Bus Events and Messages"
        ],
        "RabbitMQ Event Bus": [
          "Infrastructure RabbitMQ Bus",
          "RabbitMQ Bus Constructor",
          "Implement Publish Method",
          "Implement Subscribe Method",
          "Start Basic Consume",
          "Consumer Receiver Delegate",
          "Process Events"
        ],
        "Inversion of Control": [
          "Infrastructure IOC Project",
          "Dependency Container",
          "Commit Dependency Project"
        ],
        "Banking Microservice": [
          "Banking Service Overview",
          "Banking Folder Structure",
          "Banking Initial Projects",
          "Banking Domain Folder Structure",
          "Banking Model",
          "Banking Repository Interface",
          "Banking Database Context",
          "Banking Repository Implementation",
          "Banking Application Layer",
          "Banking Updated IOC Container",
          "Banking Api AppSettings",
          "Banking Configure Api Startup",
          "Banking Configure Swagger MediatR",
          "Banking Implement Controller",
          "Launch Banking Microservice",
          "Commit Banking Microservice"
        ],
        "Banking Commands and Publishing Events": [
          "Account Transfer Endpoint",
          "Account Transfer Service Method",
          "Transfer Commands",
          "Transfer Command Handler",
          "Service Send Command",
          "Publish Transfer Event",
          "Update Account Service IOC",
          "Launch Banking and Check Queue",
          "Commit Banking Microservice"
        ],
        "Transfer Microservice": [
          "Transfer Initial Projects",
          "Transfer Initial Project Folders",
          "Transfer Nuget Packages",
          "Api Startup Configuration",
          "DbContext and Domain Model",
          "Database Migrations",
          "Application Data Domain",
          "Update Dependency Container",
          "Controller Configuration",
          "Event Handler",
          "Update Dependency Container",
          "Configure EventBus Subscription",
          "Launch Banking and Transfer Microservices"
        ]
      },
      "requirements": [
        "Visual Studio",
        "SQL Server",
        "Basic Technical Background"
      ],
      "description": "Get Started with .NET Core Microservices using RabbitMQ!\nAre you a student or professional in the field of software engineering or maybe contemplating an educational or career move to the software engineering world? Have you been looking for a quick and easy way to get up and running with .NET Core coupled with Microservices using RabbitMQ messaging and don't want to go through an overwhelming amount of material just to get your environment setup and ready for building your own apps that interact with data? Don't worry as THIS IS THE COURSE FOR YOU!\nIn my course, I will teach you how to get your environment setup for .NET Core Microservices utilizing RabbitMQ messaging, and help you to build your first set of apps that apply a Microservice Architecture design pattern through a step-by-step guided approach.\n\nTake this course and feel proud of the fact that you will be one step closer towards the rewarding field of Software Engineering using .NET technologies!",
      "target_audience": [
        "Students and Professionals who want to master .Net Core Microservices using RabbitMQ"
      ]
    },
    {
      "title": "User Story Mapping Simplified",
      "url": "https://www.udemy.com/course/user-story-mapping-simplified/",
      "bio": "A comprehensive guide to User Story Maps",
      "objectives": [
        "Discover how user story map fits in the big picture",
        "Distinguish between product discovery and delivery in the context of user story map",
        "Map each stage of product discovery to user story map",
        "Build foundation needed to develop Journey maps and personas",
        "Relate journey maps and persona to user story map",
        "Build user story map from scratch",
        "Generate user stories from user story map",
        "Determine MVP release from user story map",
        "Apply advanced cases of user story maps such as handling branching etc",
        "Identify anti-patterns in user story maps"
      ],
      "course_content": {
        "Introduction": [
          "Getting Started",
          "Introduction",
          "Introduction - Quiz"
        ],
        "Framing idea": [
          "Framing the idea - Part 1",
          "Framing the idea - Part 2",
          "Framing the idea - Quiz"
        ],
        "Understanding users and customers": [
          "Personas",
          "Personas - Quiz",
          "Journey maps",
          "Journey maps - Quiz"
        ],
        "Envisioning Solution": [
          "User Story Map tasks",
          "User Story Map - Tasks",
          "User Story Map steps",
          "User Story Map Steps - Quiz",
          "Constructing user stories for product backlog",
          "Constructing user stories for product backlog - Quiz",
          "Envisioning Solution - Parallel activities",
          "Envisioning Solution - Parallel activities - Quiz"
        ],
        "Minimize and Plan": [
          "Minimize and Plan - Part 1",
          "Minimize and Plan - Part 1 - Quiz",
          "Minimize and Plan - Part 2",
          "Minimize and Plan - Part 2 - Quiz"
        ],
        "More about User Story Maps": [
          "User Story Map As Information Radiator",
          "User Story Map As Information Radiator - Quiz",
          "User Story Map - Anti-patterns",
          "User Story Map - Anti-patterns - Quiz",
          "Build Your Own Map"
        ]
      },
      "requirements": [
        "Familiarity with agile project",
        "Familiarity with user stories"
      ],
      "description": "- Are you looking for a comprehensive course on user story maps?\n- Have you been eager to learn about user story maps but wondering why there are so few courses dedicated to user story map?\n- Are you better able to understand the concepts through interesting examples, diagrams & visual effects?\n\n\nIf you relate to one or more of the above criteria then this course is for you.\nThis course on user story maps is delivered with crystal clear communication.\nBy the end of the course, you will learn about:\n- Where does user story map fit in the big picture of product lifecycle\n- How to build user story map from scratch\n- Different ways  in which you can use user story maps\n- What not to do with the user story maps\n\n\nThe course begins with an example and systematically takes you through all the steps of building user story map using the example. Throughout the course, you will have questions that prompt you to pause and reflect and quizzes to assess your knowledge. The course also has one major assignment where you have an opportunity to apply everything you learned about user story map. The solution given for the assignment will enable you with the thought process that goes into building a map.\nThe diagrams and the visual effects help you focus on the exact part of the presentation that the trainer is conveying.\n\n\nThough the course is primarily for product owners and business analysts, anyone who is willing to learn about user story maps can take advantage of the course.\nJoin the course with a visually stimulating and engaging content!\n\n\nWho the course is not for:\nThe course is not for those new to user stories. This course does not teach you about user stories though it definitely will change your mindset about what user stories are. Expectation is that you are already familiar with the concept of or worked with user stories.",
      "target_audience": [
        "Business Analysts, Product Owners, Product Managers, Agile Team"
      ]
    },
    {
      "title": "Agile Business Analysis: Getting / Writing Lean Requirements",
      "url": "https://www.udemy.com/course/getting-and-writing-it-requirements-in-a-lean-agile-world/",
      "bio": "How to Discover Requirements, User Stories, Features, and Gherkin (G-W-T) Tests - Now with ChatGPT!",
      "objectives": [
        "Assess how ChatGPT and other AI Writing tools can improve Business Analysis",
        "Define the capabilities and challenges of Lean and Agile software development philosophies",
        "Adapt 10 different requirements gathering (elicitation) techniques to Lean, Agile, and Continuous Delivery software development environments",
        "Leverage ChatGPT's ability to apply the Cynefin framework for revealing uncertainties in business and user requirements",
        "Reduce the time wasted on miscommunication between stakeholders of IT projects by recognizing and removing terms and phrases that can be easily misinterpreted",
        "Drill-down into requirements, features, user stories, and functions to identify and express test scenarios in G-W-T statements to facilitate automated testing",
        "Identify 17 types of Non-Functional Requirements (NFR) and develop Given-When-Then (GWT) test scenarios for them",
        "Leverage the learning curve to incorporate the presented techniques into your job"
      ],
      "course_content": {},
      "requirements": [
        "No technical background required",
        "Interest in the field of business analysis",
        "No additional materials are required",
        "The course has no prerequisites"
      ],
      "description": "Meeting the Agile, Lean, and DevOps Requirements Challenge - Now with ChatGPT\nProblem solvers are in demand in every organization, large and small, from a Mom and Pop shop to the federal government. Increase your value to yourself and to your group or organization by improving your ability to extract, express, and analyze business needs in formats that are supported by Agile, Lean, and DevOps philosophies.\nThe single largest challenge facing organizations around the world is how to leverage their Information Technology to gain a competitive advantage. This is not about how to program the devices, it is about determining what the devices should do. The skills required to identify and define the best IT solutions are invaluable for every role in the organization. These skills can propel you from the mail room to the boardroom by making your organization more effective and profitable.\nAn Agile Approach for Getting from Visions and Requirements to Test Scenarios\nImprove your business analysis and requirements engineering skills with this comprehensive online training course. With its balance of theoretical knowledge and hands-on application, this course gives you a deeper comprehension of Agile and Lean methodologies within the sphere of business analysis.\n\n\nSection 1 lays the foundation, outlining the course, framing the learning objectives, and offering a glimpse into your instructor's rich expertise.\nIn Section 2, immerse yourself in Agile and Lean philosophies, learn to articulate business needs powerfully in such dynamic environments, and leverage the Cynefin framework for effective prioritization and analysis of features, user stories, and requirements. Witness the transformative potential of ChatGPT within this framework, providing novel solutions to manage complexity in requirements analysis.\nSection 3 covers requirements discovery for Agile and Lean IT projects. Acquire mastery over a myriad of elicitation techniques, stay on top of your progress with a question file, and engage with an illuminating AI demonstration featuring ChatGPT. Through hands-on assignments, refine your elicitation skills and uncover essential aspects of stakeholder interaction.\nIn Section 4, gain insights into crafting business and stakeholder requirements and features, highlighting the central role of user stories and helping you understand how they directly contribute to delivering business value.\nSection 5 focuses on eliminating ambiguity and subjectivity. Understand the root causes of requirement ambiguity and arm yourself with effective tools, including AI-powered ChatGPT-4, to eradicate them.\nSection 6 introduces you to the art of identifying test scenarios in a Lean, Agile setting. Discover the vital role of test scenarios, learn to apply the Given-When-Then format, and explore diverse techniques for test scenario identification.\nFinally, in Section 7, delve into Non-Functional Requirements (NFR), understanding their categories, characteristics, and the art of discovering them. By course completion, you will command a robust toolbox to identify and test NFRs effectively.\nWhether you're a beginner entering the field of Agile Business Analysis or a seasoned professional seeking to upgrade your skills, this thorough course offers invaluable, implementable insights to propel your career. Enroll today and chart your path to professional excellence.",
      "target_audience": [
        "Anyone wanting to learn how to communicate business needs and wants to Agile or Lean software development teams",
        "Practicing business analysts, product owners, project leaders, and product managers who want to learn more about how lean and agile approaches affect their business analysis processes",
        "Anyone interested in how emerging AI technologies like ChatGPT will impact business analysts"
      ]
    },
    {
      "title": "Blind 75 LeetCode Questions: Ace Algorithms Coding Interview",
      "url": "https://www.udemy.com/course/blind-75-leetcode-questions-ace-algorithms-coding-interview/",
      "bio": "Top 75 LeetCode Data Structures and Algorithms Questions for Coding Interviews. Get a job offer from MAANG company.",
      "objectives": [
        "Ace coding interviews given by some of the top tech companies",
        "Strengthen problem-solving skills and build confidence.",
        "Dive into a most frequently asked Blind 75 LeetCode questions.",
        "Improve problem-solving skills and identify patterns.",
        "Build your strong foundation in data structures and algorithms.",
        "Learn, implement, and use different Data Structures and Algorithms",
        "Become more confident and prepared for your next coding interview"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Source Code"
        ],
        "Array": [
          "Two Sum",
          "Practice - Two Sum",
          "Best Time to Buy and Sell Stock",
          "Practice - Best Time to Buy and Sell Stock",
          "Contains Duplicate",
          "Practice - Contains Duplicate",
          "Product of Array Except Self",
          "Practice - Product of Array Except Self",
          "Maximum Subarray",
          "Practice - Maximum Subarray",
          "Maximum Product Subarray",
          "Practice - Maximum Product Subarray",
          "Find Minimum in Rotated Sorted Array",
          "Practice - Find Minimum in Rotated Sorted Array",
          "Search in Rotated Sorted Array",
          "Practice - Search in Rotated Sorted Array",
          "3 Sum",
          "Practice - 3 Sum",
          "Container With Most Water",
          "Practice - Container With Most Water"
        ],
        "Binary": [
          "Sum of Two Integers",
          "Practice - Sum of Two Integers",
          "Number of 1 Bits",
          "Practice - Number of 1 Bits",
          "Counting Bits",
          "Practice - Counting Bits",
          "Missing Number",
          "Practice - Missing Number",
          "Reverse Bits",
          "Practice - Reverse Bits"
        ],
        "Dynamic Programming": [
          "Climbing Stairs",
          "Practice - Climbing Stairs",
          "Coin Change",
          "Practice - Coin Change",
          "Longest Increasing Subsequence",
          "Practice - Longest Increasing Subsequence",
          "Longest Common Subsequence",
          "Practice - Longest Common Subsequence",
          "Word Break Problem",
          "Practice - Word Break Problem",
          "Combination Sum IV",
          "Practice - Combination Sum IV",
          "House Robber",
          "Practice - House Robber",
          "House Robber II",
          "Practice - House Robber II",
          "Decode Ways",
          "Practice - Decode Ways",
          "Unique Paths",
          "Practice - Unique Paths",
          "Jump Game",
          "Practice - Jump Game"
        ],
        "Graph": [
          "Clone Graph",
          "Practice - Clone Graph",
          "Course Schedule",
          "Practice - Course Schedule",
          "Pacific Atlantic Waterflow",
          "Practice - Pacific Atlantic Waterflow",
          "Number of Islands",
          "Practice - Number of Islands",
          "Longest Consecutive Sequence",
          "Practice - Longest Consecutive Sequence",
          "Alien Dictionary",
          "Practice - Alien Dictionary",
          "Graph Valid Tree",
          "Practice - Graph Valid Tree",
          "Number of Connected Components in an Undirected Graph",
          "Practice - Number of Connected Components in an Undirected Graph"
        ],
        "Interval": [
          "Insert Interval",
          "Practice - Insert Interval",
          "Merge Interval",
          "Practice - Merge Interval",
          "Non-overlapping Intervals",
          "Practice - Non-overlapping Intervals",
          "Meeting Rooms",
          "Practice - Meeting Rooms",
          "Meeting Rooms II",
          "Practice - Meeting Rooms II"
        ],
        "Linked List": [
          "Reverse a Linked List",
          "Practice - Reverse a Linked List",
          "Detect Cycle in a Linked List",
          "Practice - Detect Cycle in a Linked List",
          "Merge Two Sorted Lists",
          "Practice - Merge Two Sorted Lists",
          "Merge K Sorted Lists",
          "Practice - Merge K Sorted Lists",
          "Remove Nth Node From End Of List",
          "Practice - Remove Nth Node From End Of List",
          "Reorder List",
          "Practice - Reorder List"
        ],
        "Matrix": [
          "Set Matrix Zeroes",
          "Practice - Set Matrix Zeroes",
          "Spiral Order Traversal (Spiral Matrix)",
          "Practice - Spiral Order Traversal [Spiral Matrix]",
          "Rotate Image",
          "Practice - Rotate Image",
          "Rotate Image - Easy Solution",
          "Practice - Rotate Image (anti-clockwise)",
          "Word Search",
          "Practice - Word Search"
        ],
        "String": [
          "Longest Substring Without Repeating Characters",
          "Practice - Longest Substring Without Repeating Characters",
          "Longest Repeating Character Replacement",
          "Practice - Longest Repeating Character Replacement",
          "Minimum Window Substring",
          "Practice - Minimum Window Substring",
          "Valid Anagram",
          "Practice - Valid Anagram",
          "Group Anagrams",
          "Practice - Group Anagrams",
          "Valid Parentheses",
          "Practice - Valid Parenthesess",
          "Valid Palindrome",
          "Practice - Valid Palindrome",
          "Longest Palindromic Substring",
          "Practice - Longest Palindromic Substring",
          "Palindromic Substrings",
          "Practice - Palindromic Substrings",
          "Encode and Decode Strings (Leetcode Premium)",
          "Practice - Encode and Decode Strings"
        ],
        "Tree": [
          "Maximum Depth of Binary Tree",
          "Practice - Maximum Depth of Binary Tree",
          "Same Tree",
          "Practice - Same Tree",
          "Invert/Flip Binary Tree",
          "Practice - Invert/Flip Binary Tree",
          "Binary Tree Maximum Path Sum",
          "Practice - Binary Tree Maximum Path Sum",
          "Binary Tree Level Order Traversal",
          "Practice - Binary Tree Level Order Traversal",
          "Serialize and Deserialize Binary Tree",
          "Practice - Serialize and Deserialize Binary Tree",
          "Subtree of Another Tree",
          "Practice - Subtree of Another Tree",
          "Construct Binary Tree from Preorder and Inorder Traversal",
          "Practice - Construct Binary Tree from Preorder and Inorder Traversal",
          "Validate Binary Search Tree",
          "Practice - Validate Binary Search Tree",
          "Kth Smallest Element in a BST",
          "Practice - Kth Smallest Element in a BST",
          "Lowest Common Ancestor of a BST",
          "Practice - Lowest Common Ancestor of a BST",
          "Implement Trie (Prefix Tree)",
          "Practice - Implement Trie (Prefix Tree)",
          "Design Add and Search Words Data Structure",
          "Practice - Design Add and Search Words Data Structure",
          "Word Search II",
          "Practice - Word Search II"
        ]
      },
      "requirements": [
        "A Computer or Laptop with internet connections.",
        "Fundamental knowledge of any one programming language."
      ],
      "description": "Welcome to the \"Blind 75 LeetCode Questions: Ace Algorithms Coding Interview\" course!\nThis course is specifically designed for individuals who are seeking employment at product-based companies and students who want to enhance their coding interview skills.\n\n\nWhat is Blind 75 LeetCode Questions?\nBlind 75 LeetCode questions is curated list of the 75 most frequently asked LeetCode algorithms questions. This list has helped numerous engineers successfully clear interviews at top companies like Google, Facebook/Meta, Amazon, Microsoft, Netflix, and more. It has been tried and tested, with thousands of testimonials available on public review platforms (Quora, Teamblind, and Reddit).\n\n\nBy following these 75 questions, we can effectively cover a wide range of coding concepts. Mastering these questions will give us a solid foundation to handle most coding interview scenarios. In this course, we will guide you through the Blind 75 LeetCode questions. You will learn effective problem-solving strategies, optimize time and space complexity, and understand the optimal approaches.\n\n\nIs Blind 75 enough to ace any coding interview?\nYeah it’s enough. You’ll definitely fail some interviews but it’s ultimately a numbers game. If you can code and explain all of those Qs you’re going to be able to pass an interview or two. Just remember that 25% is a great success rate overall. - FriendOfEvergreens (reddit)\n\n\nI did Blind 75 and got faang offer\nThough my friend sent me screenshots of LC premium and a lot of those questions I saw in my interviews, so maybe that's worth checking out. - bloom_boing (reddit)\n\n\nCourse Highlights:\n# Top 75 LeetCode algorithms questions to ace any interview.\n# Expert-led explanations to help you grasp complex concepts easily.\n# Proven techniques to optimize time and space complexity.\n# Step-by-step problem-solving strategies and code walkthrough.\n\n\nBy the end of this course, you will have developed a strong foundation in algorithms and data structures. You will be well-prepared to tackle coding interviews, efficiently solve complex problems, and increase your chances of to get job offers from product-based companies (MAANG).\n\n\nSee you inside the course.",
      "target_audience": [
        "Anyone who wants to improve their coding interviewing skills.",
        "Anyone who wants to become a MAANG Engineer.",
        "Anyone who want to developed their problem solving skills."
      ]
    },
    {
      "title": "Low Level System Design, Design Patterns & SOLID Principles",
      "url": "https://www.udemy.com/course/low-level-system-design/",
      "bio": "Master Proven Design Techniques and SOLID Principles to Build Robust and Scalable Systems!",
      "objectives": [
        "Understand Core Design Patterns: Learn the most widely-used design patterns in Java, including Creational, Structural, and Behavioral patterns",
        "Apply SOLID Principles: Master the SOLID design principles to write cleaner, more maintainable, and scalable code in your software projects",
        "Improve Low-Level Design: Gain the ability to design efficient, flexible, and robust object-oriented systems through low-level design practices.",
        "Build Scalable Applications: Learn how to use design patterns to create scalable and extensible Java applications that can adapt to changing requirements"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Course Logistics",
          "Github Repository",
          "PDF Notes"
        ],
        "Object Oriented Programming Recap": [
          "OOPS - Classes, Objects, Interfaces, Inheritance & Polymorphism",
          "Small Note on Access Modifers",
          "Unified Modelling Language (UML)",
          "Object Oriented Programming Quiz"
        ],
        "SOLID Principles": [
          "SOLID Principles",
          "Single Responsibility Principle (SRP)",
          "Open Close Principle (OCP)",
          "Liskov Substiution Principle (LSP)",
          "Interface Segregation Principle (ISP)",
          "Dependency Inversion Principle (DIP)",
          "SOLID Quiz"
        ],
        "Part-I Behavioural Design Patterns": [
          "Introduction to Design Patterns",
          "Introduction to Behavioural Design Patterns"
        ],
        "Memento Pattern": [
          "Undo/Redo Problem Statement",
          "Solution using Memento Pattern",
          "Memento Pattern Summary",
          "Graphic Editor Application Exercise",
          "Memento Pattern Quiz"
        ],
        "Observer Pattern": [
          "Problem - Publisher Subscriber Model",
          "Solution - Observer Pattern",
          "Implementation - Observer Pattern",
          "Observer Pattern Benefits & Use Cases",
          "Stock Price Monitoring System Application Exercise",
          "Observer Pattern Quiz"
        ],
        "Strategy Pattern": [
          "Strategy Pattern - Problem Statement",
          "Strategy Pattern - Solution",
          "FlexiText Formatter Application Exercise",
          "Strategy Pattern Quiz"
        ],
        "Command Pattern": [
          "Command Pattern - Problem Statement",
          "Command Pattern - Solution",
          "Command Pattern - Benefits & Use Case",
          "Remote Control System Application Exercise",
          "Command Pattern Quiz"
        ],
        "Template Method Pattern": [
          "Template Method Pattern - Problem Statement",
          "Template Method Pattern - Solution",
          "Report Generator Application Exercise",
          "Template Method Pattern Quiz"
        ],
        "Iterator Pattern": [
          "Iterator Pattern - Problem Statement",
          "Iterator Pattern - Solution",
          "Iterator Pattern - Benefits & Java Iterables",
          "Notification Management System Application Exercise",
          "Iterator Pattern Quiz"
        ]
      },
      "requirements": [
        "Basic Knowledge of Java: A fundamental understanding of Java programming, including object-oriented concepts such as classes, inheritance, and interfaces.",
        "A Computer with Java Installed: You'll need a computer with Java and a development environment (such as IntelliJ IDEA or Eclipse) to practice coding examples"
      ],
      "description": "Are you looking to take your Java programming skills to the next level and master the art of designing scalable, maintainable, and efficient software systems? In this course, Low Level System Design, Design Patterns & SOLID Principles, Prateek Narang, an experienced Software Engineer and Instructor and having worked with companies like Google, Scaler, Coding Minutes etc will guide you through the world of object-oriented design patterns, essential for building robust applications in real-world scenarios.\nWhat You’ll Learn:\nUnderstand the fundamental design patterns used in software engineering and how to apply them effectively in Java.\nExplore creational, structural, and behavioral patterns, and their practical use cases.\nWrite cleaner, more efficient code by leveraging well-established design principles.\nLearn how to improve low-level design for building scalable and maintainable applications.\nSolve complex design problems with ease using proven design techniques.\nBenefits of Doing a Design Patterns Course\nImproved Software Design Skills:\nLearn how to build flexible, maintainable, and scalable software systems by applying proven design solutions.\nDesign Patterns are tried-and-tested solutions that help you handle recurring problems in software design.\nEnhances Problem-Solving:\nAcquire a deeper understanding of common software design challenges and how to solve them using structured approaches.\nPatterns provide frameworks for thinking about structural, creational, and behavioral issues in software.\nBetter Code Readability and Maintenance:\nPatterns lead to code that is more understandable and self-explanatory.\nBy following widely known design patterns, your codebase becomes easier for other developers to read and maintain.\nCode Reusability:\nDesign patterns encourage reusability, which reduces redundancy and makes your codebase more efficient and concise.\nPatterns like Factory, Prototype, and Singleton encourage the creation of reusable objects and solutions.\nAlign with Industry Best Practices:\nDesign patterns are a fundamental part of object-oriented design and are widely adopted by the industry. Mastering them shows you’re following industry standards.\nIn interviews and workplace challenges, design patterns often serve as best practices when architecting solutions.\nBetter Team Collaboration:\nDesign patterns provide a shared vocabulary for discussing design problems and solutions with other developers.\nThis common language improves collaboration within teams and makes communication more effective.\nPreparation for System Design Interviews:\nMany technical interviews for mid-to-senior roles focus on system design questions where knowledge of design patterns is essential.\nMastering the foundational concepts of design patterns is crucial for successfully handling these interviews and presenting scalable, optimized solutions.\nHandle Complex Systems:\nGain the ability to break down complex systems into smaller, manageable pieces using patterns like Composite, Facade, and Bridge.\nStructural patterns allow you to design systems that are easier to extend and maintain.\nBuild Scalable and Extensible Architectures:\nBy using design patterns, you can create systems that can scale with increasing complexity and adapt to changing requirements.\nPatterns like Decorator and Strategy support adding functionality or swapping algorithms without modifying existing code.\nImproved Decision-Making:\nBy understanding the pros and cons of each design pattern, you'll be better equipped to make decisions about which approach suits a specific situation.\nIt enables you to evaluate different design options and pick the most optimal solution.\nFramework and Library Understanding:\nModern frameworks and libraries heavily rely on design patterns (e.g., Singleton in Spring Framework, Factory in GUI toolkits).\nA strong grasp of design patterns helps you better understand how these frameworks work under the hood.\nCareer Growth and Opportunities:\nMastery of design patterns is often expected for senior-level roles (e.g., architect, tech lead), improving your chances for career advancement.\nIt increases your confidence to tackle complex design problems and lead teams in making architectural decisions.\nDesign patterns are the foundation of good software design. They help you solve recurring problems and improve the structure and quality of your code. This course offers hands-on examples and real-world scenarios to help you understand and implement these patterns effectively.\nWhether you’re preparing for technical interviews or aiming to write better software, this course will give you the practical skills and confidence you need to level up your design capabilities.",
      "target_audience": [
        "Aspiring Software Developers: Individuals who are new to programming or transitioning to Java and want to build a solid foundation in software design principles.",
        "Junior to Mid-Level Software Engineers: Developers with some experience in Java who wish to deepen their understanding of design patterns and improve their ability to create maintainable and scalable software.",
        "Computer Science Students: University students or self-learners seeking to supplement their academic knowledge with practical skills in low-level design and object-oriented programming."
      ]
    },
    {
      "title": "Ace Your Coding Interview & Land Your Dream Developer Job",
      "url": "https://www.udemy.com/course/programming-code-interview/",
      "bio": "Comprehensive prep covering data structures, algorithms, portfolio tips, salary negotiation and more",
      "objectives": [
        "Master a proven step-by-step framework for solving any coding interview problem",
        "Practice applying essential data structures, algorithms, and design patterns to real-world problems",
        "Learn strategies for optimizing your resume, personal website, and side projects to stand out",
        "Gain confidence in negotiating salaries and showcasing your skills in the interview process"
      ],
      "course_content": {
        "Introduction": [
          "What You'll Learn",
          "The Preparation Mindset",
          "How to Approach your Preparation"
        ],
        "Extra: Approaching your Job Search and Applying to Jobs": [
          "Your Personal Website",
          "Your Online Presence",
          "Finding Jobs",
          "How to Write Cover Letters",
          "Resume Tips and Tricks"
        ],
        "Getting Ready: Before the Interview": [
          "Choosing which Language to Use",
          "How to Choose Practice Problems",
          "Sources of Practice Problems",
          "Just Before your Interview"
        ],
        "During the Interview: Tips and Tricks": [
          "Questions to Ask your Interviewer",
          "What can go wrong?",
          "Ethics: Seen Question Before?"
        ],
        "After the Interview: So you got the job...": [
          "Negotiation"
        ],
        "Learn to Apply the Practice Problem Formula": [
          "The 7 Essential Steps to Acing a Problem",
          "Applying the Problem Solving Formula: Queue with Two Stacks",
          "Applying the Problem Solving Formula: Reverse a Linked List",
          "Code Solution Review: Reverse a Linked List",
          "Applying the Problem Solving Formula: Linked List Has Cycle",
          "Code Solution Review: Linked List Has Cycle",
          "Applying the Problem Solving Formula: Uncoupled Integer",
          "Code Solution Review: Uncoupled Integer",
          "Applying the Problem Solving Formula: Balanced Delimiters",
          "Code Solution Review: Balanced Delimiters",
          "Applying the Problem Solving Formula: Target Sum",
          "Code Solution Review: Target Sum",
          "Applying the Problem Solving Formula: Minimum Stack",
          "Code Solution Review: Minimum Stack",
          "Applying the Problem Solving Formula: BST Height",
          "Code Solution Review: BST Height",
          "Applying the Problem Solving Formula: BST Count",
          "Code Solution Review: BST Count",
          "Hands-on Problem: FizzBuzz Question",
          "Hands-on Problem: FizzBuzz Solution",
          "Hands-on Problem: Factorial Question",
          "Hands-on Problem: Factorial Solutions"
        ],
        "Essential Review: Data Structures": [
          "Linked Lists",
          "Arrays",
          "Array Practice Problems",
          "Binary Search Tree",
          "Tries (prefix trees)",
          "Hash Tables: Why Review?",
          "Hash Tables: More Questions than Answers!",
          "Hash Tables: Deep Dive",
          "Hash Tables",
          "Stacks"
        ],
        "Essential Review: Algorithms": [
          "Tree Traversals (the big 3 depth-first)",
          "Breadth-first Search and Traversal",
          "Breadth-first Search Practice Problems",
          "BFS / DFS quiz",
          "Merge Sort",
          "Quicksort"
        ],
        "Essential Review: Algorithmic Problem Solving": [
          "Recursion Quiz",
          "Dynamic Programming",
          "Dynamic Programming Practice Problems",
          "Bit Manipulation",
          "Bit Manipulation",
          "Bit Manipulation Quiz"
        ],
        "Essential Review: Design Patterns and Architecture": [
          "Software Architecture + Design",
          "The Singleton",
          "Factory"
        ]
      },
      "requirements": [
        "Basic proficiency in at least one programming language (e.g., Python, Java, C++)",
        "Familiarity with fundamental programming concepts (variables, loops, functions, etc.)",
        "A computer with an internet connection and a code editor installed",
        "Willingness to practice and apply the problem-solving strategies taught in the course",
        "No prior code interviewing experience required - this course is suitable for all levels!"
      ],
      "description": "Want to land your dream job at a top tech company like Google, Amazon, or Facebook? Acing the coding interview is the key, and this comprehensive course will teach you exactly how to do it.\nYour instructor, an experienced software engineer and educator, has conducted dozens of interviews at top companies, written practice problems for InterviewCake and HackerRank, and successfully navigated the interview process himself. He even taught a wildly popular \"Hacking a Google Interview\" workshop at MIT.\nIn this course, you'll learn a proven, step-by-step framework for tackling any coding problem you might face in an interview. You'll practice applying this formula to 10 real-world problems that have been asked at major tech companies, mastering essential data structures, algorithms, and design patterns along the way.\nBut landing your dream job requires more than just coding skills. That's why this course also covers how to:\nOptimize your resume and create a standout personal website\nChoose and discuss impactful side projects\nPrepare mentally and physically for interview day\nStrategically schedule interviews to maximize your chances\nNegotiate your salary (the instructor used these techniques to achieve a 40% increase!)\nWhether you're cramming for an upcoming interview or planning ahead for your job search, this course is suitable for anyone pursuing a software engineering role. You'll get lifetime access to cheat sheets, tips and tricks, and extra practice problems, plus a supportive community of peers and instructors.\nEnroll now and start preparing for the coding interview that could change your life. The dream job you've always wanted is within reach - let's get you ready to grasp it.",
      "target_audience": [
        "Software engineering students preparing for internship or full-time job interviews",
        "Working professionals looking to switch jobs or advance their careers in software development",
        "Anyone who wants to improve their problem-solving skills and coding interview performance",
        "Developers who want to best showcase their skills and experience"
      ]
    },
    {
      "title": "Advanced C# Course : Become a Backend Developer",
      "url": "https://www.udemy.com/course/advanced-csharp-course/",
      "bio": "Learn how to implement layered architecture, repository, Ninject, Fluent Validation, AOP, Postsharp, web api and more",
      "objectives": [
        "You will learn how to implement an effective application with layers.",
        "You will learn how to implement AOP techniques",
        "Learn how to implement Validation, Caching, Performance, Logging, Transaction Management, Authorization",
        "You will learn what a cross cutting concern is and how to implement it.",
        "You will learn how to implement Ninject as an IoC Container.",
        "You will learn how to implement Entity Framework",
        "You will learn how to implement Repository Pattern",
        "You will learn how to implement IoC using Ninject",
        "You will learn how to implement Validation using Fluent Validation"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Implementing Entities and DataAccess Layers": [
          "Creating The Solution and Layers",
          "Implementing The Entities Layer",
          "Implementing The Data Access Layer"
        ],
        "Implementing the Repository Pattern": [
          "Implementing Repository Pattern Interface",
          "Implementing The Repository in DataAccess"
        ],
        "Implementing Entity Framework": [
          "Implementing Entity Framework For Our Repository",
          "Implementing The Context Class",
          "Implementing Mappings For Entity Framework",
          "Configuring Context to Use Mappings"
        ],
        "Implementing Business and Console UI Layers": [
          "Implementing The Business Layer",
          "Implementing The Console UI"
        ],
        "Impelementing MVC Web UI Layer": [
          "Installing Northwind Database",
          "Configuring Connection String",
          "Implementing The MVC Web UI"
        ],
        "Impelementing Ninject as IoC Container": [
          "Implementing Ninject Configuration",
          "Implementing IoC for MVC"
        ],
        "Implementing Fluent Validation": [
          "Implementing Fluent Validation"
        ],
        "Understanding Cross Cutting Concerns": [
          "Validation as a Cross Cutting Concern"
        ],
        "Implementing AOP using Postsharp": [
          "Installing Postsharp",
          "Understanding AOP and Validation Aspect"
        ]
      },
      "requirements": [
        "This course assumes you know C# and OOP Concepts"
      ],
      "description": "Are you ready to reach upper levels of software development industry?\n\n\nDo you know how to create application layers? You will learn how to implement an effective application with layers.\nDo you know what AOP is and how to implement it? This course will teach you how to implement Validation, Caching, Performance, Logging, Transaction Management, Authorization\nDo you know what Cross Cutting Concerns is for a project? You will learn what a cross cutting concern is and how to implement it.\nDo you know how to configure a professional IoC container for your project? You will learn how to implement Ninject as an IoC Container.\n\n\nDuring the course you will learn how to implement\nLayered Architecture\nEntity Framework\nRepository Pattern\nAOP using Postsharp\nIoC using Ninject\nValidation using Fluent Validation\nWeb API Implementation",
      "target_audience": [
        "Students who want to reach upper levels of software development industry."
      ]
    },
    {
      "title": "Building a Serverless AWS lambda API on AWS in java",
      "url": "https://www.udemy.com/course/serverless-api-aws-lambda-for-java-developers/",
      "bio": "Build a productive serverless AWS Lambda API on the Amazon Web Services platform in hours for Java developers.",
      "objectives": [
        "Grasp how aws lambda works and its fundamental concepts.",
        "Create a real world API using aws lambda functions and Amazon API Gateway.",
        "Avoid common pitfalls and mistakes.",
        "Understand the security concept around AWS services.",
        "Understand and use triggers for lambda aws functions.",
        "Learn how to call lambda functions directly from java code."
      ],
      "course_content": {
        "Introduction to Amazon Web Services Lambda": [
          "Introduction to AWS Lambda",
          "Tools and accounts needed to develop aws lambda functions in Java",
          "AWS lambda Course Overview"
        ],
        "Creating A Serverless Function on AWS Lambda": [
          "Setting up the AWS Lambda Project in the IDE",
          "Implementing the AWS Lambda Function",
          "Java concepts for AWS lambda functions",
          "Deploying the AWS Lambda Function on AWS",
          "Creating a AWS Lambda serverless function"
        ],
        "Calling the serverless function": [
          "Set up AWS IAM permissions",
          "Direct Java Call to an AWS Lambda function",
          "API gateway Call to an AWS Lambda function",
          "Calling an AWS Lambda function from other AWS Services"
        ],
        "A more advanced AWS lambda function": [
          "A dynamic image resizer using Amazon Web Services",
          "Creating an Amazon Web Services S3 bucket to store resized images",
          "Setting up the project and creating the input class",
          "The Resizer Class Design",
          "The Resizer Class",
          "The createUrl Method",
          "The readImage method",
          "The resizeImage method",
          "The storeImageInS3 Method",
          "The alreadyExists Method",
          "Tying it all together",
          "Deploying the AWS Lambda Function on Amazon Web Services",
          "Creating the API on Amazon API Gateway",
          "Testing the API on AWS API Gateway"
        ]
      },
      "requirements": [
        "You should have some experience with java",
        "You should have internet access, and be able to install software on your pc",
        "Having some familiarity with Amazon AWS is a plus, but not absolutely necessary."
      ],
      "description": "Building a Serverless AWS lambda API on AWS  in java is a great way to get started to develop applications on the AWS lambda platform that scale without the hassle of managing servers.\n\nThis course is intended for every Java developer that wants to be able to build a productive serverless API within a few hours, using aws lambda and Amazon API Gateway.\n\nThe Amazon aws cloud platform offers a lot of amazing services.\nHowever, each one of those services has a learning curve, and it can cost a lot of time become productive with any of these services just by reading the developer guides and taking the Trial and Error approach.\n\n\nIn this course you’ll learn how to write and deploy a aws lambda functions and how to create an AWS API Gateway endpoint to use that AWS lambda function.\nAt the end of the course you’ll learn to  create a production ready webservice on the Amazon Web Services platform that can be used to resize any image on the fly.\nWe discuss all of the aws-lambda configuration options, how to configure the IAM (AWS Identity and access Management) to give your aws lambda function access to Amazon Web Services such as AWS s3, AWS Cloudwatch, ... and we'll configure AWS API Gateway to create a REST api endpoint for our serverless aws lambda function.\n\n\n\nOverview of the Course\nIntroduction to AWS Lambda\nTools and accounts needed to develop aws lambda functions in Java\nAWS lambda Course Overview\nSetting up the  AWS Lambda Project in the IDE\nImplementing the AWS Lambda Function\nQuiz : Java concepts for AWS lambda functions\nDeploying the AWS Lambda Function on AWS\nQuiz : Creating a AWS Lambda serverless function\nSet up AWS Identity and Access Management IAM permissions\nDirect Java Call to an AWS Lambda function\nAPI gateway Call to an AWS Lambda function\nCalling an AWS Lambda function from other AWS Services\nA dynamic image resizer using Amazon Web Services\nCreating an Amazon Web Services S3 bucket to store resized images\nSetting up the project and creating the input class\nThe Resizer Class Design\nThe Resizer Class\nThe createUrl Method\nThe readImage method\nTying it all together\nDeploying the AWS Lambda Function on Amazon Web Services\nCreating the API on Amazon API Gateway\nTesting the API on AWS API Gateway",
      "target_audience": [
        "Java developers that want to write serverless code"
      ]
    },
    {
      "title": "Building Recommender Systems with Machine Learning and AI",
      "url": "https://www.udemy.com/course/building-recommender-systems-with-machine-learning-and-ai/",
      "bio": "How to create machine learning recommendation systems with deep learning, collaborative filtering, and Python.",
      "objectives": [
        "Understand and apply user-based and item-based collaborative filtering to recommend items to users",
        "Create recommendations using deep learning at massive scale",
        "Build recommendation engines with neural networks and Restricted Boltzmann Machines (RBM's)",
        "Make session-based recommendations with recurrent neural networks and Gated Recurrent Units (GRU)",
        "Build a framework for testing and evaluating recommendation algorithms with Python",
        "Apply the right measurements of a recommender system's success",
        "Build recommender systems with matrix factorization methods such as SVD and SVD++",
        "Apply real-world learnings from Netflix and YouTube to your own recommendation projects",
        "Combine many recommendation algorithms together in hybrid and ensemble approaches",
        "Use Apache Spark to compute recommendations at large scale on a cluster",
        "Use K-Nearest-Neighbors to recommend items to users",
        "Solve the \"cold start\" problem with content-based recommendations",
        "Understand solutions to common issues with large-scale recommender systems"
      ],
      "course_content": {
        "Getting Started": [
          "Udemy 101: Getting the Most From This Course",
          "Note: Alternate dataset download location",
          "[Activity] Install Anaconda, course materials, and create movie recommendations!",
          "Course Roadmap",
          "What Is a Recommender System?",
          "Types of Recommenders",
          "Understanding You through Implicit and Explicit Ratings",
          "Top-N Recommender Architecture",
          "[Quiz] Review the basics of recommender systems."
        ],
        "Introduction to Python [Optional]": [
          "[Activity] The Basics of Python",
          "Data Structures in Python",
          "Functions in Python",
          "[Exercise] Booleans, loops, and a hands-on challenge"
        ],
        "Evaluating Recommender Systems": [
          "Train/Test and Cross Validation",
          "Accuracy Metrics (RMSE, MAE)",
          "Top-N Hit Rate - Many Ways",
          "Coverage, Diversity, and Novelty",
          "Churn, Responsiveness, and A/B Tests",
          "[Quiz] Review ways to measure your recommender.",
          "[Activity] Walkthrough of RecommenderMetrics.py",
          "[Activity] Walkthrough of TestMetrics.py",
          "[Activity] Measure the Performance of SVD Recommendations"
        ],
        "A Recommender Engine Framework": [
          "Our Recommender Engine Architecture",
          "[Activity] Recommender Engine Walkthrough, Part 1",
          "[Activity] Recommender Engine Walkthrough, Part 2",
          "[Activity] Review the Results of our Algorithm Evaluation."
        ],
        "Content-Based Filtering": [
          "Content-Based Recommendations, and the Cosine Similarity Metric",
          "K-Nearest-Neighbors and Content Recs",
          "[Activity] Producing and Evaluating Content-Based Movie Recommendations",
          "A Note on Using Implicit Ratings.",
          "[Activity] Bleeding Edge Alert! Mise en Scene Recommendations",
          "[Exercise] Dive Deeper into Content-Based Recommendations"
        ],
        "Neighborhood-Based Collaborative Filtering": [
          "Measuring Similarity, and Sparsity",
          "Similarity Metrics",
          "User-based Collaborative Filtering",
          "[Activity] User-based Collaborative Filtering, Hands-On",
          "Item-based Collaborative Filtering",
          "[Activity] Item-based Collaborative Filtering, Hands-On",
          "[Exercise] Tuning Collaborative Filtering Algorithms",
          "[Activity] Evaluating Collaborative Filtering Systems Offline",
          "[Exercise] Measure the Hit Rate of Item-Based Collaborative Filtering",
          "KNN Recommenders",
          "[Activity] Running User and Item-Based KNN on MovieLens",
          "[Exercise] Experiment with different KNN parameters.",
          "Bleeding Edge Alert! Translation-Based Recommendations"
        ],
        "Matrix Factorization Methods": [
          "Principal Component Analysis (PCA)",
          "Singular Value Decomposition",
          "[Activity] Running SVD and SVD++ on MovieLens",
          "Improving on SVD",
          "[Exercise] Tune the hyperparameters on SVD",
          "Bleeding Edge Alert! Sparse Linear Methods (SLIM)"
        ],
        "Introduction to Deep Learning [Optional]": [
          "Deep Learning Introduction",
          "Deep Learning Pre-Requisites",
          "History of Artificial Neural Networks",
          "[Activity] Playing with Tensorflow",
          "Training Neural Networks",
          "Tuning Neural Networks",
          "Activation Functions: More Depth",
          "Introduction to Tensorflow",
          "Important Tensorflow setup note!",
          "[Activity] Handwriting Recognition with Tensorflow, part 1",
          "[Activity] Handwriting Recognition with Tensorflow, part 2",
          "Introduction to Keras",
          "[Activity] Handwriting Recognition with Keras",
          "Classifier Patterns with Keras",
          "[Exercise] Predict Political Parties of Politicians with Keras",
          "Intro to Convolutional Neural Networks (CNN's)",
          "CNN Architectures",
          "[Activity] Handwriting Recognition with Convolutional Neural Networks (CNNs)",
          "Intro to Recurrent Neural Networks (RNN's)",
          "Training Recurrent Neural Networks",
          "[Activity] Sentiment Analysis of Movie Reviews using RNN's and Keras",
          "Tuning Neural Networks",
          "Neural Network Regularization Techniques",
          "Generative Adversarial Networks (GAN's)",
          "GAN's in Action",
          "[Activity] Generating images of clothing with Generative Adversarial Networks"
        ],
        "Deep Learning for Recommender Systems": [
          "Intro to Deep Learning for Recommenders",
          "Restricted Boltzmann Machines (RBM's)",
          "[Activity] Recommendations with RBM's, part 1",
          "[Activity] Recommendations with RBM's, part 2",
          "[Activity] Evaluating the RBM Recommender",
          "[Exercise] Tuning Restricted Boltzmann Machines",
          "Exercise Results: Tuning a RBM Recommender",
          "Auto-Encoders for Recommendations: Deep Learning for Recs",
          "[Activity] Recommendations with Deep Neural Networks",
          "Clickstream Recommendations with RNN's",
          "[Exercise] Get GRU4Rec Working on your Desktop",
          "Exercise Results: GRU4Rec in Action",
          "Bleeding Edge Alert! Generative Adversarial Networks for Recommendations",
          "Tensorflow Recommenders (TFRS): Intro, and Building a Retrieval Stage",
          "Tensorflow Recommenders (TFRS): Building a Ranking Stage",
          "TFRS: Incorporating Side Features and Deep Retrieval",
          "TFRS: Multi-Task Recommenders, Deep & Cross Networks, ScaNN, and Serving",
          "Bleeding Edge Alert! Deep Factorization Machines",
          "Neural Collaborative Filtering (NCF)",
          "Introducing the LibRecommender Python package",
          "[Activity] Movie Recommendations with Neural Collaborative Filtering",
          "More Emerging Tech to Watch"
        ],
        "Scaling it Up": [
          "WARNING: Don't install Java 16!",
          "[Activity] Introduction and Installation of Apache Spark",
          "Apache Spark Architecture",
          "[Activity] Movie Recommendations with Spark, Matrix Factorization, and ALS",
          "[Activity] Recommendations from 20 million ratings with Spark",
          "Amazon DSSTNE",
          "DSSTNE in Action",
          "Scaling Up DSSTNE",
          "AWS SageMaker and Factorization Machines",
          "SageMaker in Action: Factorization Machines on one million ratings, in the cloud",
          "Other Systems of Note (Amazon Personalize, RichRelevance, Recombee, and more)",
          "Recommender System Architecture"
        ]
      },
      "requirements": [
        "A Windows, Mac, or Linux PC with at least 3GB of free disk space.",
        "Some experience with a programming or scripting language (preferably Python)",
        "Some computer science background, and an ability to understand new algorithms."
      ],
      "description": "Updated with Neural Collaborative Filtering (NCF), Tensorflow Recommenders (TFRS) and Generative Adversarial Networks for recommendations (GANs)\nLearn how to build machine learning recommendation systems from one of Amazon's pioneers in the field. Frank Kane spent over nine years at Amazon, where he managed and led the development of many of Amazon's personalized product recommendation systems.\nYou've seen automated recommendations everywhere - on Netflix's home page, on YouTube, and on Amazon as these machine learning algorithms learn about your unique interests, and show the best products or content for you as an individual. These technologies have become central to the  largest, most prestigious tech employers out there, and by understanding how they work, you'll become very valuable to them.\nWe'll cover tried and true recommendation algorithms based on neighborhood-based collaborative filtering, and work our way up to more modern techniques including matrix factorization and even deep learning with artificial neural networks. Along the way, you'll learn from Frank's extensive industry experience to understand the real-world challenges you'll encounter when applying these algorithms at large scale and with real-world data.\nHowever, this course is very hands-on; you'll develop your own framework for evaluating and combining many different recommendation algorithms together, and you'll even build your own neural networks using Tensorflow to generate recommendations from real-world movie ratings from real people. We'll cover:\n\n\nBuilding a recommendation engine\nEvaluating recommender systems\nContent-based filtering using item attributes\nNeighborhood-based collaborative filtering with user-based, item-based, and KNN CF\nModel-based methods including matrix factorization and SVD\nApplying deep learning, AI, and artificial neural networks to recommendations\nUsing the latest frameworks from Tensorflow (TFRS) and Amazon Personalize.\nSession-based recommendations with recursive neural networks\nBuilding modern recommenders with neural collaborative filtering\nScaling to massive data sets with Apache Spark machine learning, Amazon DSSTNE deep learning, and AWS SageMaker with factorization machines\nReal-world challenges and solutions with recommender systems\nCase studies from YouTube and Netflix\nBuilding hybrid, ensemble recommenders\n\"Bleeding edge alerts\" covering the latest research in the field of recommender systems\nThis comprehensive course takes you all the way from the early days of collaborative filtering, to bleeding-edge applications of deep neural networks and modern machine learning techniques for recommending the best items to every individual user.\nThe coding exercises in this course use the Python programming language. We include an intro to Python if you're new to it, but you'll need some prior programming experience in order to use this course successfully. Learning how to code is not the focus of this course; it's the algorithms we're primarily trying to teach, along with practical examples. We also include a short introduction to deep learning if you are new to the field of artificial intelligence, but you'll need to be able to understand new computer algorithms.\nHigh-quality, hand-edited English closed captions are included to help you follow along.\nI hope to see you in the course soon!",
      "target_audience": [
        "Software developers interested in applying machine learning and deep learning to product or content recommendations",
        "Engineers working at, or interested in working at large e-commerce or web companies",
        "Computer Scientists interested in the latest recommender system theory and research"
      ]
    },
    {
      "title": "Build Your Own RealTime OS (RTOS) From Ground Up™ on ARM 2",
      "url": "https://www.udemy.com/course/build-your-own-realtime-os-rtos-from-ground-uptm-on-arm-2/",
      "bio": "Practice on STM32. Build Your Own RealTime Operating Systems from first principles .",
      "objectives": [
        "Build a Real-Time Operating System from Scratch",
        "Be able to build Priority Schedulers",
        "Be able to build Sporadic Schedulers",
        "Be able to build Fixed Schedulers",
        "Be able to build Periodic Schedulers using 4 different algorithms",
        "Be able to implement and explain popular scheduling algorithms",
        "Be able to explain the Cortex-M Architecture",
        "Be able to give a lecture on Real-Time Operating Systems"
      ],
      "course_content": {
        "Introduction": [
          "Getting the best out of this course"
        ],
        "Round Robin Scheduler Recap": [
          "Review on basic RTOS concepts",
          "Coding : Creating osKernel files",
          "Coding : Writing the osKernel Initialization functions",
          "Coding : Writing the osKernelAddThreads function",
          "Coding : Writing the osKernelLaunch function",
          "Coding : Writing the osSchedulerLaunch routine in Assembly (Part I)",
          "Coding : Writing the osSchedulerLaunch routine in Assembly (Part II)",
          "Coding : Cooperate Schedulers",
          "The PendSV Thread Switcher"
        ],
        "Period Scheduling": [
          "Coding : Type 1 Periodic Scheduling",
          "Coding : Type 1 Periodic Scheduling with Multiple Periodic Threads",
          "Coding : Type 2 Periodic Scheduling : Using Hardware Interrupts",
          "Coding : Type 3 Periodic Scheduling : Using Thread Control Blocks",
          "Coding : Type 4 Periodic Scheduling : Using TCB and Hardware Interrupt"
        ],
        "Board Support Package (BSP)": [
          "Coding : Developing the GPIO Output Board Support APIs (Part I)",
          "Coding : Developing the GPIO Output Board Support APIs (Part II)",
          "Coding : Testing the GPIO Output Board Support APIs",
          "Coding : Developing the ADC Board Support APIs",
          "Coding : Testing the ADC Board Support APIs",
          "Coding : Developing the TIMER Board Support APIs",
          "Coding : Developing the GPIO Input Board Support APIs",
          "Coding : Setting Up Probes"
        ],
        "Inter-Thread Communication": [
          "Semaphores Recap",
          "Coding : Creating a SpinLock Semaphore",
          "Coding : Using Semaphores for Mutually Exclusive LCD Access",
          "Coding : Synchronizing Tasks using Semaphores (Rendezvous)",
          "Coding : Creating a Cooperative Semaphore",
          "Coding : Creating the osThreadSleep API"
        ],
        "Inter-Thread Data Transfer": [
          "Coding : Sending Data between Threads using Mailboxes",
          "Coding : Sending Data between Threads using FIFO Queues"
        ],
        "Priority Scheduling": [
          "Coding : Developing A Priority Scheduler"
        ],
        "Sporadic Scheduling": [
          "Coding : Scheduling Sporadic Threads"
        ],
        "Fixed Scheduling": [
          "Coding : Developing a UART Driver for monitoring results",
          "Coding : Building a Finite State Machine",
          "Coding : Building a Finite State Machine (continued)",
          "Coding : Implementing a Fixed Scheduler with a Finite State Machine"
        ],
        "ARM Design Philosophy and RISC Architecture": [
          "The RISC Design Philosophy",
          "The ARM Design Philosophy",
          "Embedded Systems with ARM Processors",
          "ARM Bus Technology and AMBA Bus Protocol",
          "Memory",
          "Peripherals",
          "Von Neumann and Harvard architecture",
          "Cache and Tightly Couple Memory",
          "Memory Management extensions",
          "Co-processor extensions"
        ]
      },
      "requirements": [
        "It is recommended to complete the Build Your Own RTOS From Ground Up 1 course before this one"
      ],
      "description": "Welcome to the Build Your Own RealTime OS (RTOS) From Ground Up™ on ARM 2 course\nThis course teaches you how to build  Real-Time Operating Systems through intensive practice and theory. It starts by getting you excited through an introduction to the internals of a Real-Time Kernel on ARM Processors, which you shall implement yourself in code.Then we move on to learn all there  is about Real-Time Operating Systems, their various parts, how they work and then we finally build our own Real-Time Operating System exploring different scheduling algorithms and Inter-Thread communication tools.\nThis course is a two part series. This is the second part of the series.\nAt the end of this course you should be able to build your own Real-Time Operating System from scratch, give your own lecture on Real-Time Operating Systems, be able to build a Round-Robin Scheduler, Priority Scheduler, Sporadic Scheduler, Periodic Scheduler, be able to calculate the CPU utilization of your RTOS, be able to build an OS Kernel etc. Please see the course curriculum section to find out all the amazing content awaiting you.",
      "target_audience": [
        "Embedded Systems Engineers",
        "Embedded System students",
        "Computer Engineering students",
        "Hobbyists"
      ]
    },
    {
      "title": "Apache Spark 3 - Spark Programming in Scala for Beginners",
      "url": "https://www.udemy.com/course/apache-spark-programming-in-scala/",
      "bio": "Data Engineering using Spark Structured API",
      "objectives": [
        "Apache Spark Foundation and Spark Architecture",
        "Data Engineering and Data Processing in Spark",
        "Working with Data Sources and Sinks",
        "Working with Data Frames, Data Sets and Spark SQL",
        "Using IntelliJ Idea for Spark Development and Debugging",
        "Unit Testing, Managing Application Logs and Cluster Deployment"
      ],
      "course_content": {
        "Understanding Big Data and Data Lake": [
          "Section Overview",
          "What is Big Data and How it Started",
          "Hadoop Architecture, History, and Evolution",
          "What is Data Lake and How it works",
          "Introducing Apache Spark and Databricks Cloud",
          "Source Code and Other Resources"
        ],
        "Installing and Using Apache Spark": [
          "Spark Development Environments",
          "Apache Spark in Local Mode Command Line REPL",
          "Apache Spark in the IDE - IntelliJ IDEA",
          "Apache Spark in Cloud - Databricks Community and Notebooks",
          "Check your knowledge",
          "Apache Spark in Hadoop Ecosystem - Zeppelin Notebooks"
        ],
        "Spark Execution Model and Architecture": [
          "Execution Methods - How to Run Spark Programs?",
          "Spark Distributed Processing Model - How your program runs?",
          "Spark Execution Modes and Cluster Managers",
          "Check your knowledge",
          "Summarizing Spark Execution Models - When to use What?",
          "Working with Spark Shell - Demo",
          "Installing Multi-Node Spark Cluster - Demo",
          "Working with Notebooks in Cluster - Demo",
          "Working with Spark Submit - Demo",
          "Section Summary",
          "Check your knowledge"
        ],
        "Spark Programming Model and Developer Experience": [
          "Creating Spark Project Build Configuration",
          "Configuring Spark Project Application Logs",
          "Check your knowledge",
          "Creating Spark Session",
          "Configuring Spark Session",
          "Check your knowledge",
          "Data Frame Introduction",
          "Data Frame Partitions and Executors",
          "Spark Transformations and Actions",
          "Spark Jobs Stages and Task",
          "Understanding your Execution Plan",
          "Unit Testing Spark Application",
          "Debugging Spark Driver and Executor",
          "Spark Application Logs in a Cluster",
          "Rounding off Summary"
        ],
        "Spark Structured API Foundation": [
          "Introduction to Spark APIs",
          "Introduction to Spark RDD API",
          "Dataset Vs Dataframe",
          "Working with Spark Dataset",
          "Working with Spark SQL",
          "Spark SQL Engine and Catalyst Optimizer",
          "Section Summary"
        ],
        "Spark Data Sources and Sinks": [
          "Introduction to Spark Sources and Sinks",
          "Spark DataFrameReader API",
          "Reading CSV, JSON and Parquet files",
          "Creating Spark DataFrame Schema",
          "Spark DataFrameWriter API",
          "Writing Your Data and Managing Layout",
          "Spark Databases and Tables",
          "Working with Spark SQL Tables"
        ],
        "Spark Dataframe and Dataset Transformations": [
          "Introduction to Data Transformation",
          "Working with Dataframe Rows",
          "Dataframe Rows and Unit Testing",
          "Dataframe Rows and Unstructured data",
          "Working with Dataframe Columns",
          "Creating and Using UDF",
          "Miscellaneous Transformations"
        ],
        "Aggregations in Apache Spark": [
          "Aggregating Dataframes",
          "Grouping Aggregations",
          "Windowing Aggregations"
        ],
        "Spark Dataframe Joins": [
          "Dataframe Joins and column name ambiguity",
          "Outer Joins in Dataframe",
          "Internals of Spark Join and shuffle",
          "Optimizing your joins",
          "Implementing Bucket Joins"
        ],
        "Keep Learning": [
          "Final Word",
          "Bonus Lecture : Get Extra"
        ]
      },
      "requirements": [
        "Programming Knowledge Using Scala Programming Language",
        "A Recent 64-bit Windows/Mac/Linux Machine with 8 GB RAM"
      ],
      "description": "This course does not require any prior knowledge of Apache Spark or Hadoop. We have taken enough care to explain Spark Architecture and fundamental concepts to help you come up to speed and grasp the content of this course.\n\n\nAbout the Course\nI am creating Apache Spark 3 - Spark Programming in Scala for Beginners course to help you understand the Spark programming and apply that knowledge to build data engineering solutions. This course is example-driven and follows a working session like approach. We will be taking a live coding approach and explain all the needed concepts along the way.\nWho should take this Course?\nI designed this course for software engineers willing to develop a Data Engineering pipeline and application using the Apache Spark. I am also creating this course for data architects and data engineers who are responsible for designing and building the organization’s data-centric infrastructure. Another group of people is the managers and architects who do not directly work with Spark implementation. Still, they work with the people who implement Apache Spark at the ground level.\nSpark Version used in the Course\nThis Course is using the Apache Spark 3.x. I have tested all the source code and examples used in this Course on Apache Spark 3.0.0 open-source distribution.",
      "target_audience": [
        "Software Engineers and Architects who are willing to design and develop a Bigdata Engineering Projects using Apache Spark",
        "Programmers and developers who are aspiring to grow and learn Data Engineering using Apache Spark"
      ]
    },
    {
      "title": "[Active Directory] Management using Windows PowerShell",
      "url": "https://www.udemy.com/course/active-directory-management-using-windows-powershell/",
      "bio": "Simplified practical knowledge for automation & management of [Active Directory] using Windows PowerShell",
      "objectives": [
        "Full of hands-on instructions, interesting and illustrative examples, clear explanations",
        "Ability to automate common tasks in Active Directory",
        "Active Directory Installation & Configuration",
        "Build your own Active Directory Automations Solutions",
        "Clear understanding of Active Directory Concepts",
        "Underlying concepts of PowerShell & Active Directory",
        "Take your PowerShell skill to the next level"
      ],
      "course_content": {
        "Course Overview & Setting the Expectation": [
          "Course Introduction",
          "Course Overview",
          "Frequently Asked Questions",
          "Optional Lab1: Create a Virtual Machine in a public cloud - Azure",
          "Optional Lab2: Create a Virtual Machine in a public cloud - AWS",
          "Course Material",
          "Lab3 Create a Virtual Machine in your local machine",
          "Lab3: Install & Configure Active Directory",
          "Your Voice Matters"
        ],
        "Understanding Active Directory": [
          "Disclaimer",
          "What is Active Directory",
          "Active Directory Basics",
          "Active Directory Structure",
          "Active Directory Components-I",
          "Active Directory Components-II",
          "Designing the AD Organization Units"
        ],
        "Understanding The Power of PowerShell": [
          "PowerShell Help & Get-Command",
          "Comparison Operators",
          "CSV File Handling",
          "Working With Objects",
          "Views & Pipeline",
          "Formatting & Converting"
        ],
        "Working with AD Users using PowerShell": [
          "PowerShell AD Module",
          "PowerShell Essential Understanding-I",
          "PowerShell Essential Understanding-II",
          "Access AD Users using PowerShell",
          "Distinguished name & Filters",
          "Automate user provisioning of Active Directory accounts",
          "Automate User modification using PowerShell"
        ],
        "Working with Active Directory Groups": [
          "Create an AD group",
          "Add/Remove members from AD Group",
          "Get members from an AD Group",
          "Modify AD Group and Delete AD Group",
          "S05L05 Automation of bulk group operations"
        ],
        "What is Next?": [
          "More Lectures",
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "Basic PowerShell Understanding",
        "Basic idea of Active Directory",
        "Some basic understanding of command line (Win CMD/Unix Shell) will help quickly picking up",
        "PC/Laptop installed with Windows OS. You should be able to use PC/laptop comfortably"
      ],
      "description": "THIS COURSE IS FREQUENTLY UPDATED. LAST UPDATED IN OCTOBER 2022\n\n\n*** This Course purchase includes video lectures, practice files, quizzes, & assignments, 1-on-1 instructor support, LIFETIME access, and a 100%MONEY-BACK GUARANTEE***\n\n\nPlease note that this course will be continuously getting updated with more lectures to keep you up to date on [Active Directory ]and Windows [PowerShell ]scripting. You will lot of new lectures covering new features of [PowerShell] Scripting. Please encourage the instructor by enrolling and providing your honest reviews & ratings. You can also demand a lecture on a  specific topic that comes under the scope of this course.\nThis course is designed to take the system administrators to an advanced level in Active Directory Management( AD). You will find ways to automate your daily work related to Active Directory using the advantages of PowerShell scripting. The professional who wants to start with PowerShell automation for Active Directory and have some basic idea of the command line will find it extremely easy to understand and will quickly start with Active Directory Management using PowerShell.\nIf you dedicate 30 minutes per day to this course, within 2 weeks you will find it extremely easy to automate [Active Directory] tasks which eat most of your time using [PowerShell]\n\n\nImportant Content:\n\nLab Setup for Active Directory\nPowerShell Basics\nActive Directory Basics\nActive Directory AD Users Management using PowerShell\nActive Directory Group Management using PowerShell\nActive Directory OU Management using PowerShell\nActive Directory Bulk Request Management using PowerShell\nActive Directory Cleanup Management using PowerShell\nActive Directory Reports using PowerShell\n\n\nBriefly, The knowledge of Windows PowerShell is a must for IT professionals working on [Active Directory] & Windows Server Administration and this course is one-stop-shop for gaining this necessary and in-demand skill\n\n\nLearn [Active Directory] and administer it using [PowerShell]\n\n\n[PowerShell] as a tool for system administrators and to manage the [Active Directory]",
      "target_audience": [
        "Windows Server Administrator",
        "Students",
        "Active Directory Beginners"
      ]
    },
    {
      "title": "Project in DevOps - Build Real World Processes",
      "url": "https://www.udemy.com/course/project-in-devops-build-real-world-processes/",
      "bio": "A comprehensive resource to master DevOps . Learn Vagrant, Docker, Ansible, Git and Jenkins in one single course",
      "objectives": [
        "Learn the entire DevOps process",
        "Work on real world projects",
        "Master Technologies such as Docker, Vagrant, Ansible, Git and Jenkins"
      ],
      "course_content": {
        "DevOps - Concepts and Culture": [
          "Introduction",
          "Devops Concepts",
          "Benefits",
          "The Agile Methodology",
          "How DevOps Fit in",
          "Section 2"
        ],
        "Instant Provisioning using Vagrant": [
          "What is Virtualization",
          "Vagrant in DevOps",
          "Vagrant in Use",
          "Vagrant Continued",
          "Communication using Network Services",
          "Shutting down the Vagrant machine",
          "Prebuilt Environments",
          "Provisioning multiple devices",
          "Section 3"
        ],
        "Docker in DevOps": [
          "What is Docker",
          "Installation",
          "The Dockerfile",
          "Docker in Action",
          "Docker networking",
          "Networking Models",
          "Docker Storage",
          "Docker Volumes",
          "Docker lab",
          "Section 4"
        ],
        "Configuration Management with Ansible": [
          "Configuration Management",
          "Why not a shell script?",
          "The Inventory File",
          "YAML format",
          "Ansible in Action",
          "Lab continued",
          "Installing PHP",
          "Changing Apache",
          "Making CI work",
          "Adding .htaccess",
          "Deploying database",
          "Deployment continued",
          "Integrating Playbooks",
          "Section 5"
        ],
        "Version Control using Git": [
          "The need for version control",
          "Git and Github",
          "Installing Git",
          "Git Setup",
          "Git in Action",
          "Setting Shortcut",
          "Git fetch",
          "Git wrap-up",
          "Section 6"
        ],
        "CI/CD with Jenkins": [
          "The need for continuous integration",
          "Understanding CI and CD",
          "Requirement and Best Practices",
          "Jenkins Installation",
          "Jenkins in Action",
          "Jenkins Dashboard",
          "Section 7"
        ],
        "Final project": [
          "Lab -The Project Map",
          "Lab - Firing up Vagrant",
          "Lab - Installing Jenkins",
          "Lab - Deploying Infrastructure",
          "Lab - Unit Testing",
          "Integration Job",
          "Continuous Delivery",
          "Continous Deployment"
        ],
        "Summary": [
          "Summary",
          "Bonus Lecture: More Interesting Stuff, Offers and Discounts"
        ]
      },
      "requirements": [
        "Basic knowledge of Linux command line is required to complete the course",
        "You will also need basic programming knowledge to complete this course"
      ],
      "description": "The complete comprehensive guide for starting your journey as a DevOps engineer is here! Master DevOps components in this no fuss course!\nThe process of DevOps, which includes combining the process of development and operations into one, helps smooth the process of developing apps, deploying them and even testing them. Time is often an important factor in development, where developers spend days and even months building one app, and even more trying to test it and scale it. This is why automation is amazing, it helps reduce this time significantly.\nDevOps is a set of practice that seeks to reduce the gap between software development and software operation. It focuses on automating and monitoring all steps of software construction, from integration, testing, releasing to deployment and infrastructure management. The objective is to build shorter development cycles, increased deployment frequency, more dependable releases, in close alignment with business objectives.\nDevOps is currently all the rage and the demand for DevOps engineers are high! With a lot of companies focusing on reducing the operational time and costs, DevOps has become an important factor. So, if you want to join one of the most high demanded fields, then we’ve got the tool that can help!\nOur course has been designed as a guide to help you start at the very beginning with DevOps, so even if you are a newbie, you will still be able to grasp a lot of information from this course. However, course does assume a few things such as you are expected to have a basic understanding of Linux, as well as other programming languages such as Java, C#, or Python. Knowledge of PHP and CodeIgnitor are helpful, but they aren’t mandatory.\nThe course will start off by discussing DevOps and the world of automation, where you will learn exactly how to become a DevOps enginner. You will learn the importance of DevOps in today’s development world, as well become familiar with the well known components of the DevOps system such as Vagrant, Docker, Ansible, Genkins and even Git. You will also learn principles such as containerization, version tracking, instant provisioning and so much more.\nAt the end of this course, you will have not only started on your journey as a DevOps engineer but, you will have the confidence to actually achieve complete automation in an Agile development environment.\nSo, what are you waiting for? Enroll now and become a DevOps engineer now!",
      "target_audience": [
        "Anyone who wants to master DevOps processes and tools will find this course very useful"
      ]
    },
    {
      "title": "Autonomous Cars: Deep Learning and Computer Vision in Python",
      "url": "https://www.udemy.com/course/autonomous-cars-deep-learning-and-computer-vision-in-python/",
      "bio": "Learn OpenCV, Keras, object and lane detection, and traffic sign classification for self-driving cars",
      "objectives": [
        "Automatically detect lane markings in images",
        "Detect cars and pedestrians using a trained classifier and with SVM",
        "Classify traffic signs using Convolutional Neural Networks",
        "Identify other vehicles in images using template matching",
        "Build deep neural networks with Tensorflow and Keras",
        "Analyze and visualize data with Numpy, Pandas, Matplotlib, and Seaborn",
        "Process image data using OpenCV",
        "Calibrate cameras in Python, correcting for distortion",
        "Sharpen and blur images with convolution",
        "Detect edges in images with Sobel, Laplace, and Canny",
        "Transform images through translation, rotation, resizing, and perspective transform",
        "Extract image features with HOG",
        "Detect object corners with Harris",
        "Classify data with machine learning techniques including regression, decision trees, Naive Bayes, and SVM",
        "Classify data with artificial neural networks and deep learning"
      ],
      "course_content": {
        "Environment Setup and Installation": [
          "Introduction",
          "Important installation and troubleshooting notes",
          "Install Anaconda, OpenCV, Tensorflow, and the Course Materials",
          "Test your Environment with Real-Time Edge Detection in a Jupyter Notebook",
          "Udemy 101: Getting the Most From This Course",
          "Important note"
        ],
        "Introduction to Self-Driving Cars": [
          "A Brief History of Autonomous Vehicles",
          "Course Overview and Learning Outcomes"
        ],
        "Python Crash Course [Optional]": [
          "Python Basics: Whitespace, Imports, and Lists",
          "Python Basics: Tuples and Dictionaries",
          "Python Basics: Functions and Boolean Operations",
          "Python Basics: Looping and an Exercise",
          "Introduction to Pandas",
          "Introduction to MatPlotLib",
          "Introduction to Seaborn"
        ],
        "Computer Vision Basics: Part 1": [
          "What is computer vision and why is it important?",
          "Humans vs. Computers Vision system",
          "what is an image and how is it digitally stored?",
          "[Activity] View colored image and convert RGB to Gray",
          "[Activity] Detect lane lines in gray scale image",
          "[Activity] Detect lane lines in colored image",
          "What are the challenges of color selection technique?",
          "Color Spaces",
          "[Activity] Convert RGB to HSV color spaces and merge/split channels",
          "Convolutions - Sharpening and Blurring",
          "[Activity] Convolutions - Sharpening and Blurring",
          "Edge Detection and Gradient Calculations (Sobel, Laplace and Canny)",
          "[Activity] Edge Detection and Gradient Calculations (Sobel, Laplace and Canny)",
          "[Activity] Project #1: Canny Sobel and Laplace Edge Detection using Webcam"
        ],
        "Computer Vision Basics: Part 2": [
          "Image Transformation - Rotations, Translation and Resizing",
          "[Activity] Code to perform rotation, translation and resizing",
          "Image Transformations – Perspective transform",
          "[Activity] Perform non-affine image transformation on a traffic sign image",
          "Image cropping dilation and erosion",
          "[Activity] Code to perform Image cropping dilation and erosion",
          "Region of interest masking",
          "[Activity] Code to define the region of interest",
          "Hough transform theory",
          "[Activity] Hough transform – practical example in python",
          "Project Solution: Hough transform to detect lane lines in an image"
        ],
        "Computer Vision Basics: Part 3": [
          "Image Features and their importance for object detection",
          "[Activity] Find a truck in an image manually!",
          "Template Matching - Find a Truck",
          "[Activity] Project Solution: Find a Truck Using Template Matching",
          "Corner detection – Harris",
          "[Activity] Code to perform corner detection",
          "Image Scaling – Pyramiding up/down",
          "[Activity] Code to perform Image pyramiding",
          "Histogram of colors",
          "[Activity] Code to obtain color histogram",
          "Histogram of Oriented Gradients (HOG)",
          "[Activity] Code to perform HOG Feature extraction",
          "Feature Extraction - SIFT, SURF, FAST and ORB",
          "[Activity] FAST/ORB Feature Extraction in OpenCV"
        ],
        "Machine Learning: Part 1": [
          "What is Machine Learning?",
          "Evaluating Machine Learning Systems with Cross-Validation",
          "Linear Regression",
          "[Activity] Linear Regression in Action",
          "Logistic Regression",
          "[Activity] Logistic Regression In Action",
          "Decision Trees and Random Forests",
          "[Activity] Decision Trees In Action"
        ],
        "Machine Learning: Part 2": [
          "Bayes Theorem and Naive Bayes",
          "[Activity] Naive Bayes in Action",
          "Support Vector Machines (SVM) and Support Vector Classifiers (SVC)",
          "[Activity] Support Vector Classifiers in Action",
          "Project Solution: Detecting Cars Using SVM - Part #1",
          "[Activity] Detecting Cars Using SVM - Part #2",
          "[Activity] Project Solution: Detecting Cars Using SVM - Part #3"
        ],
        "Artificial Neural Networks": [
          "Introduction: What are Artificial Neural Networks and how do they learn?",
          "Single Neuron Perceptron Model",
          "Activation Functions",
          "ANN Training and dataset split",
          "Practical Example - Vehicle Speed Determination",
          "Code to build a perceptron for binary classification",
          "Backpropagation Training",
          "Code to Train a perceptron for binary classification",
          "Two and Multi-layer Perceptron ANN",
          "Example 1 - Build Multi-layer perceptron for binary classification",
          "Example 2 - Build Multi-layer perceptron for binary classification"
        ],
        "Deep Learning and Tensorflow: Part 1": [
          "Intro to Deep Learning and Tensorflow",
          "Building Deep Neural Networks with Keras, Normalization, and One-Hot Encoding.",
          "[Activity] Building a Logistic Classifier with Deep Learning and Keras",
          "ReLU Activation, and Preventing Overfitting with Dropout Regularlization",
          "[Activity] Improving our Classifier with Dropout Regularization"
        ]
      },
      "requirements": [
        "Windows, Mac, or Linux PC with at least 3GB free disk space.",
        "Some prior experience in programming."
      ],
      "description": "Autonomous Cars: Computer Vision and Deep Learning\nThe automotive industry is experiencing a paradigm shift from conventional, human-driven vehicles into self-driving, artificial intelligence-powered vehicles. Self-driving vehicles offer a safe, efficient, and cost effective solution that will dramatically redefine the future of human mobility. Self-driving cars are expected to save over half a million lives and generate enormous economic opportunities in excess of $1 trillion dollars by 2035. The automotive industry is on a billion-dollar quest to deploy the most technologically advanced vehicles on the road.\nAs the world advances towards a driverless future, the need for experienced engineers and researchers in this emerging new field has never been more crucial.\nThe purpose of this course is to provide students with knowledge of key aspects of design and development of self-driving vehicles. The course provides students with practical experience in various self-driving vehicles concepts such as machine learning and computer vision. Concepts such as lane detection, traffic sign classification, vehicle/object detection, artificial intelligence, and deep learning will be presented. The course is targeted towards students wanting to gain a fundamental understanding of self-driving vehicles control. Basic knowledge of programming is recommended. However, these topics will be extensively covered during early course lectures; therefore, the course has no prerequisites, and is open to any student with basic programming knowledge. Students who enroll in this self-driving car course will master driverless car technologies that are going to reshape the future of transportation.\nTools and algorithms we'll cover include:\nOpenCV\nDeep Learning and Artificial Neural Networks\nConvolutional Neural Networks\nTemplate matching\nHOG feature extraction\nSIFT, SURF, FAST, and ORB\nTensorflow and Keras\nLinear regression and logistic regression\nDecision Trees\nSupport Vector Machines\nNaive Bayes\nYour instructors are Dr. Ryan Ahmed with a PhD in engineering focusing on electric vehicle control systems, and Frank Kane, who spent 9 years at Amazon specializing in machine learning. Together, Frank and Dr. Ahmed have taught over 500,000 students around the world on Udemy alone.\nStudents of our popular course, \"Data Science, Deep Learning, and Machine Learning with Python\" may find some of the topics to be a review of what was covered there, seen through the lens of self-driving cars. But, most of the course focuses on topics we've never covered before, specific to computer vision techniques used in autonomous vehicles. There are plenty of new, valuable skills to be learned here!",
      "target_audience": [
        "Software engineers interested in learning the algorithms that power self-driving cars."
      ]
    },
    {
      "title": "Master software testing - from zero to Hero QA - 2024",
      "url": "https://www.udemy.com/course/master-manual-qa-testing-from-zero-to-hero-qa/",
      "bio": "Learn the fundamentals of QA testing, best practices, and essential testing techniques.",
      "objectives": [
        "Learn software testing best practices in software development life cycle",
        "How to write test documentation (STP, STD, STR) - best practices",
        "Gain practical experience of writing QA documentation and testing",
        "How to test web applications",
        "How to test mobile applications",
        "Bug life cycle",
        "What is agile methodology and where do manual testers fits in",
        "What is micro-services and monolith and how they affect our testing",
        "How to succeed QA manual job interviews",
        "Learn QA practical and theoretical best practices and methodologies",
        "Creating a professional LinkedIn profile",
        "Get all future course updates for free!",
        "Real Life Examples with practical assignment and Quizzes",
        "NEW! Using ChatGPT for QA testing activities!"
      ],
      "course_content": {
        "Introduction to the course": [
          "Course introduction",
          "What is software QA testing",
          "Is software QA testing the right fit for me?",
          "How to Follow this course?"
        ],
        "Why Testing Is Necessary": [
          "Seven Testing Principles",
          "Testing pyramid",
          "The different roles in hi-tech",
          "Testing pyramid and principles",
          "Advanced: Testing pyramid and principles"
        ],
        "Agile and software development life cycle": [
          "What is software development life cycle (SDLC)",
          "Software development methodologies",
          "Agile & Scrum methodologies",
          "Agile & Scrum Questions",
          "Advanced Level: Agile & Scrum Questions"
        ],
        "QA testing types and techniques": [
          "Why we need testing types and techniques",
          "Test Levels",
          "Testing types and techniques - part 1",
          "Testing types and techniques - part 2",
          "Test levels and test types",
          "Advanced: Test levels and test types"
        ],
        "QA testing Documentation": [
          "Why Do We Need Test documentation",
          "What is SRS",
          "Software Test Plan (STP)",
          "Software Test Description (STD)",
          "Software Test Report (STR)",
          "Writing Test Case",
          "Coffee Machine Test Cases Assignment"
        ],
        "Bug tracking life cycle": [
          "Defect life cycle",
          "How to write a bug report",
          "Reporting Defects Assignment"
        ],
        "Testing Web Applications": [
          "How to test web applications - part 1",
          "How to test web applications - part 2",
          "Dev Tools for QA testers (F12)",
          "Real Project - test a web app"
        ],
        "Testing Mobile Applications": [
          "Introduction to mobile applications",
          "How to test mobile applications",
          "Testing Mobile Applications",
          "Advanced: Testing Mobile Applications"
        ],
        "How to use Jira": [
          "Sign up to Jira",
          "Jira overview"
        ],
        "How software architecture affects our testing": [
          "How software architecture affects our testing",
          "Software architecture basics"
        ]
      },
      "requirements": [
        "Interest in learning manual QA testing",
        "Motivation to learn a new profession",
        "Basic computer understanding"
      ],
      "description": "Embark on a Successful Career in Software Quality Assurance (QA)!\n\nSoftware Quality Assurance (QA) is a vital process that runs parallel to software development, focusing on enhancing the development process to prevent issues before they escalate. As an umbrella activity, QA is applied throughout the software lifecycle.\n\n\nBenefits of a QA profession:\nQA ensures high-quality software, saving time and cost.\nImproved reliability and reduced maintenance over time.\nEnhances commercial software quality, increasing market share.\nDrives continuous improvement in the software creation process.\n\n\nCourse Requirements:\nMotivation and willingness to learn new concepts.\nThink big and embrace continuous learning.\n\n\nWho this course is for:\nBeginners seeking to start their career in Software Testing.\nExperienced QA testers looking to refresh their skills and prepare for Software Testing Certifications.\nDevelopers aiming to gain testing expertise.\n\n\nWhy become a QA?\nFascinating work that makes you an expert on the product.\nConstant learning and growth in your skill set.\nExpanded thinking and problem-solving abilities.\nAttractive average salaries ranging from $70,000 to $110,000 without specific degrees or certifications.\n\n\nCourse Highlights:\nSuitable for all experience levels, from novices to seasoned QA professionals.\nNo technical expertise required to excel in QA testing.\nGain confidence in becoming a skilled tester.\n\n\nWhat you'll learn:\nQA best practices, testing types, and methodologies.\nProper QA document writing and defect reporting.\nTesting Web and Mobile applications.\nHow to use AI - ChatGPT for testing.\nUtilizing Jira, Docker, and SQL for testing.\nUnderstanding Agile and software development phases.\nThe impact of software architecture on testing.\nTips for landing your first QA job.\nRecommended tools for software testing.\n\n\nWhat you'll receive:\nOver 9 hours of valuable and extensive content.\nOngoing support via email for any assistance or concerns.\nHighly recommended tools for software testing.\nRegular updates with the latest innovations and best practices.\nLife-long assistance through Q&A.\nPractical sessions, quizzes, and hands-on assignments to reinforce learning.\nJob interview questions and practical guidance for job hunting in QA.\n\n\nJoin our course and take a significant step towards a rewarding and fulfilling career in Software Quality Assurance!\nEnroll now and unlock your potential as a qualified tester!",
      "target_audience": [
        "Beginners who wants to start their career in Software Testing field",
        "Experienced QA tester - to refresh testing basics and techniques and gear up for Certifications in Software Testing",
        "Developers who want to improve their testing skills"
      ]
    },
    {
      "title": "The Complete Data Structures and Algorithms Course in Java",
      "url": "https://www.udemy.com/course/data-structures-and-algorithms-for-coding-interview/",
      "bio": "Build your strong understanding in data structures and algorithms for coding interview. Get more job offer.",
      "objectives": [
        "Fundamentals of Data Structures and Algorithms",
        "Become Confident in Data Structures and Algorithms",
        "Learn, Implement and Use Different Data Structure",
        "Learn Popular Data Structures and Their Algorithms",
        "Master Algorithms including 7 Sorting Algorithms",
        "Become Confident in Algorithms Coding Interview"
      ],
      "course_content": {},
      "requirements": [
        "Basic understanding of any one programming language",
        "No previous computer science knowledge required",
        "No experience with data structures or algorithms needed"
      ],
      "description": "Welcome to \"Data Structures and Algorithms for Coding Interview\" course.\nWant to land a job at a great tech industry like Google, Microsoft, Facebook, Netflix, Amazon, or other industries but you are intimidated by the foundation of data structures and algorithms skills for the job?\nMany programmers who are \"self taught\", feel that one of the main disadvantages they face compared to college educated graduates in computer science is the fact that they don't have knowledge about algorithms, data structures and the notorious Big-O Notation. Get on the same level as someone with computer science degree by learning the fundamental building blocks of computer science which will give you a big boost during interviews.\nHere is what you will learn in this course:\n>> Algorithm Run Time Analysis - Big O - O(n) Notation\n>> Array (1D, 2D Array)\n>> Linked List (All Types of Linked List)\n>> Stack Data Structure\n>> Queue Data Structure\n>> Binary Tree (Array, Linked List Implementation, BFS/DFS Traversal and more)\n>> Binary Search Tree\n>> Binary Heap\n>> AVL Tree\n>> Trie Data Structure\n>> Searching Algorithms\n>> Recursion\n>> Sorting Algorithms\n>> Dynamic Programming\n>> Hashing\n>> Graph*\nUnlike most instructors, I am not a marketer or a salesperson. I am a self taught programmer(I studied statistics not computer science) who has worked and managed teams of engineers and have been in these interviews both as an interviewee as well as the interviewer.\nTaking his experience in educational statistics and coding, Barik's courses will take you on an understanding of complex subjects that you never thought.\n\n\nWe have 30 days money back guarantee, so nothing to lose here.\n\n\nSee you inside the courses!",
      "target_audience": [
        "Any one who wants to build strong foundation on data structures and algorithms",
        "Anyone who wants to work at FAANG(Facebook, Apple, Amazon, Netflix, Google) Company",
        "Any engineer, developer, programmer, who wants to improve their coding skills",
        "Any self taught programmer who missed out on a computer science degree"
      ]
    },
    {
      "title": "Software Engineering",
      "url": "https://www.udemy.com/course/software-engineering-us/",
      "bio": "Learn Basic and Fundamental of Software Engineering",
      "objectives": [
        "Software Engineering Basics",
        "Software Developments Life Cycles and Models",
        "Factors and cost estimation",
        "Requirement Engineering",
        "Software Testing",
        "Agile",
        "Software Quality",
        "Quality Standards and Principles",
        "Risk Management",
        "Software Configuration"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Before We Start": [
          "Before We Start"
        ],
        "Software Engineering": [
          "Software Engineering",
          "Software Development Life Cycle (SDLC)",
          "Software Development Life Cycle Detailed",
          "3.1 Software Development Life Cycle (SDLC) Example",
          "Waterfall Model",
          "Software Development Models",
          "Iterative Waterfall Model",
          "Prototype Model",
          "Incremental Model",
          "Spiral Model",
          "Rapid Application Development",
          "Software Processes",
          "V- Shaped Model",
          "Fourth Generation Techniques",
          "Model Comparison",
          "Quiz"
        ],
        "Factors": [
          "Factors in Software Engineering",
          "LOC LLOC DSI KDSI",
          "Classification of Softwares",
          "Software vs Hardware Cost",
          "Software Size Factors",
          "Effort and Development Time",
          "Measurement Basics",
          "Software Cost Factors",
          "Management Issues",
          "Models",
          "Models"
        ],
        "Cost Estimation in Software": [
          "Cost Estimation in Software",
          "Quality and Productivity Factors",
          "Basic COCOMO",
          "Intermediate COCOMO",
          "Advanced COCOMO",
          "Staffing Level Estimation",
          "Software Maintenance Cost"
        ],
        "Requirement Engineering": [
          "Requirement Engineering",
          "SRS Document",
          "Characteristic of Good SRS Document",
          "Formal Specification",
          "Algebraic and Model Based Formal Techniques"
        ],
        "Software Testing": [
          "Software Testing",
          "Static vs Dynamic Testing",
          "Review and Its Types",
          "Static Analysis",
          "Cyclomatic Complexity",
          "Black Box Testing",
          "White Box Testing",
          "Unit Integration and System Testing"
        ],
        "Software Quality": [
          "Software Quality",
          "Software Quality Factors",
          "Software Quality Assurance",
          "Software Quality Control",
          "Difference Between SQA and SQC",
          "Explaining SQA vs SQC"
        ],
        "ISO (International Organization for Standardization)": [
          "ISO",
          "ISO 9001",
          "ISO 9126",
          "CMM (Capability Maturity Model)",
          "TQM (Total Quality Management)",
          "TQM Principles",
          "Six Sigma"
        ],
        "Risk": [
          "Risk",
          "Risk Management"
        ]
      },
      "requirements": [
        "No prior knowledge needed you will learn everything you need to know",
        "You need a mobile, Tablet or Laptop"
      ],
      "description": "Well, come to the Software Engineering course with certification\nThis course is for anyone who wants to learn software and its processes or who is interested in computer science and for everyone who is enrolled in the computer science field\nThis course is going to help students in their academic and competitive examinations.\nI have made the use of illustration, smart figures, and animations everything with examples, I have designed this course in such an easy-to-understand manner that even if you know nothing about the software you would be able to understand and grape the concepts.\nSo check out some lectures below and I'm pretty much sure you will like this course, do enroll.\n\n\nThis course is for anyone who wants to learn software and its processes or who is interested in computer science and for everyone who is enrolled in the computer science field\nThis course is going to help students in their academic and competitive examinations.\nI have made the use of illustration, smart figures, and animations everything with examples, I have designed this course in such an easy-to-understand manner that even if you know nothing about the software you would be able to understand and grape the concepts.\nSo check out some lectures below and I'm pretty much sure you will like this course, do enroll.",
      "target_audience": [
        "Anyone who wants to learn Software Engineering",
        "Beginner who are curious about Software Engineering and its processes",
        "Computer Science Students"
      ]
    },
    {
      "title": "Java Sorting Algorithms for Newbs",
      "url": "https://www.udemy.com/course/java-sorting-algorithms-for-newbs/",
      "bio": "Scared of algorithms? Fear no longer as you learn how to implement various non-threatening sorting algorithms.",
      "objectives": [
        "Implement basic sorting algorithms into their own programs",
        "Understand the procedure and theory behind sorting algorithms",
        "Determine the relative speed of basic sorting algorithms"
      ],
      "course_content": {
        "Basic Sorting Algorithms": [
          "Introduction",
          "Bubble Sort Overview",
          "Bubble Sort: The Code",
          "Insertion Sort Overview",
          "Insertion Sort: The Code",
          "Merge Sort Overview",
          "Merge Sort: The Code",
          "Comparing the Speed of the Sorting Algorithms",
          "Basic Sorting Algorithms"
        ]
      },
      "requirements": [
        "You should have either a background in Java, or another programming language you feel is similar to Java syntax.",
        "Make sure you already have a programming environment (like and IDE) already set up and ready to go."
      ],
      "description": "Does the word \"algorithm\" intimidate you? Well, it shouldn't! Algorithms are incredibly powerful programming tools, and once you pick up the basics of sorting algorithms, you'll be on your way in no time.\nBegin Your Algorithm Journey With This Course Designed Specifically for Algorithm Newbies.\n\nLearn the basic sorting algorithms first so you can eventually move on to more complicated algorithms\nImplement the algorithms in Java code to see how they look in practice\nDistinguish between the various features of basic sorting algorithms\n\n\nSorting Algorithms are Your Friends.\nSorting algorithms are not scary beasts; they are very practical programming tools. They can sort many different data sets: a basic integer array, a database of names, or a deck of cards. Nearly any large program could, and should, implement sorting algorithms.\nThat being said, algorithms are very important to software engineers. Let's say you're a video game programmer. You're going to need to be able to sort your hero's inventory or bank. Or, let's say you're a web developer. You're going to want to sort your content in a specific order.\nContent and Overview\n\nThis course is designed for the average programmer who has absolutely no experience with algorithms. Although I recommend that you have some programming experience, particularly in Java, I assume no prior knowledge of algorithms.\nYou'll go through 8 lectures and 1 hour of content to get your feet wet in these sorting algorithms. Throughout the duration of the course, I'll focus on bubble sort, insertion sort, and merge sort - 3 beginner friendly sorting algorithms.\nI take a two-pronged teaching approach. First, you'll see a definition and visual demonstration of each algorithm. This facilitates the second prong: the code. I'll take you step-by-step through the code implementation, explaining every line I type.\nIf you're looking to deepen your programming experience, and you're willing to learn, I recommend this course!",
      "target_audience": [
        "This basic Java sorting algorithms course is intended to provide an easy introduction into algorithms. Every algorithm will be implemented from scratch, so students should be willing to build from the ground-up.",
        "This course is not for programmers who only want to utilize Java's included algorithmic methods."
      ]
    },
    {
      "title": "Introduction to Concurrency in C# - Async and Parallelism",
      "url": "https://www.udemy.com/course/introduction-to-concurrency-in-c-async-and-paralellism/",
      "bio": "Learn to develop scalable and fast applications using concurrency",
      "objectives": [
        "Use asynchronous programming in C#",
        "Improve the speed of your programs with parallelism",
        "Patterns and antipatterns of asynchronous programming and parallelism"
      ],
      "course_content": {
        "Introduction - Basic Concepts": [
          "Introduction",
          "What is Concurrency?",
          "Introduction to Parallel Programming",
          "Introduction to Asynchronous Programming",
          "CPU vs I/O Bound Operations",
          "Sequential Programming, Concurrency, Multi-threading, Parallelism, Multi-tasking",
          "Determinism vs Non-Determinism",
          "Preparing the Development Environment",
          "Source Code of the Course",
          "Conclusion"
        ],
        "Asynchronous Programming": [
          "Introduction",
          "async-await",
          "Creating the Project",
          "Non-Freezing UI",
          "Task",
          "Task That Returns a Value",
          "Tasks with Errors",
          "Executing Multiple Tasks - Task.WhenAll",
          "Offloading the Current Thread - Task.Run",
          "Limiting the Amount of Concurrent Tasks - SemaphoreSlim",
          "Using the Response Task.WhenAll",
          "Reporting Progress with IProgress",
          "Reporting Progress in Intervals - Task.WhenAny",
          "Cancelling Tasks",
          "Cancelling Loops",
          "Cancelling with a Timeout",
          "Creating Finished Tasks - Task.FromResult and Friends",
          "Using the Same Thread - SynchronizationContext",
          "Ignoring the SynchronizationContext - ConfigureAwait",
          "Retry Pattern",
          "Only-One Pattern",
          "Controlling the Result of a Task - TaskCompletionSource",
          "Cancelling Non-Cancellable Tasks with TaskCompletionSource",
          "Understanding and Consuming ValueTask",
          "Conclusion"
        ],
        "Asynchronous Streams": [
          "Introduction",
          "Reviewing IEnumerable and yield",
          "Asynchronous Streams",
          "Cancelling Asynchronous Streams",
          "Cancelling Through IAsyncEnumerable - EnumeratorCancellation",
          "Conclusion"
        ],
        "Antipatterns in Asynchronous Programming": [
          "Introduction",
          "Deadlocking the App - sync-over-async",
          "async-over-sync",
          "Highly Dangerous - async void",
          "Avoid Task.Factory.StartNew",
          "Dispose CancellationTokenSource",
          "Correctly Dispose Streams",
          "Conclusion"
        ],
        "Parallelism": [
          "Introduction",
          "Parallelism Review",
          "Simultaneous Tasks - Task.WhenAll",
          "Understanding Parallel.For",
          "Parallel.For - Speed Improvement",
          "Task.WhenAll vs Parallel.For",
          "Iterating Collections - Parallel.ForEach",
          "Speed Benefits",
          "Parallelizing Different Methods - Parallel.Invoke",
          "Cancelling Parallel Operations",
          "Maximum Degree of Parallelism",
          "Atomic Methods",
          "Thread-Safe",
          "Race Conditions",
          "Updating a Variable Atomically - Interlocked",
          "One Thread at a Time - Locks",
          "Each Thread Gets One - ThreadStatic",
          "Introduction to PLINQ",
          "Doing Aggregates in PLINQ",
          "Processing as Soon as it is Ready - ForAll",
          "Conclusion"
        ],
        "Parallelism Antipatterns": [
          "Introduction",
          "Unnecessary Parallelism",
          "Race Conditions",
          "Too Much Can Be Bad - Oversaturation",
          "Using a Non-Thread-Safe Class",
          "Misuse of Locks",
          "Conclusion"
        ]
      },
      "requirements": [
        "Knows the basics of C# (knows about loops, methods, classes)"
      ],
      "description": "In this course you will learn how to use asynchronous programming and parallelism in C #.\nWe will look at both patterns and antipatterns of concurrency. That is, we will see what things we should do, but we will also see what things we should not do.\nWith asynchronous programming we can:\nRun a set of I / O tasks at the same time\nPrevent the UI of our applications from freezing\nScale up our ASP.NET and ASP.NET Core applications\nCancel tasks so that the user does not have to wait for their completion\nImplement generic retry logic\nCreate asynchronous streams\nWith parallel programming we can:\nAccelerate the execution of certain algorithms\nApply transformations to a set of images in parallel\nUse synchronization mechanisms to avoid race conditions\nDefine the maximum degree of parallelism\nConfigure instances of a class by threads\nUse LINQ in parallel\nWe'll also see:\nDeterminism vs Non-Determinism\nHandling errors in asynchronous programming\nUsing Task.WhenAll to wait for the execution of multiple tasks\nReporting progress of multiples tasks\nRetry pattern for handling momentaneous errors\nUnderstanding and consuming ValueTask\nUsing Asynchronous streams\nWhat does it mean for an app to be deadlocked\nWe will learn all of this in this course!",
      "target_audience": [
        "C# developers who want to use asynchronous programming and parallelism in an effective way"
      ]
    },
    {
      "title": "AI Agents & Workflows - The Practical Guide",
      "url": "https://www.udemy.com/course/ai-agents-workflows-the-practical-guide/",
      "bio": "Understand and build agentic systems and AI-powered applications to automate tasks & unlock opportunities.",
      "objectives": [
        "Describe & Build AI Agents",
        "Construct AI-powered Workflows to automate tasks",
        "Build Multi-Agent Systems",
        "Understand the difference between AI Agents & Workflows",
        "Leverage tools like web search in your AI Workflows",
        "Use the OpenAI API & SDK via AI Agents & Workflows",
        "Equip LLMs with Tools",
        "Build your own Agents or use tools like CrewAI"
      ],
      "course_content": {
        "Getting Started": [
          "Welcome To The Course!",
          "What Are AI Agents & Workflows?",
          "An AI Agent You All Know",
          "About This Course - What To Expect"
        ],
        "Building AI Workflows & Applications": [
          "Module Introduction",
          "No Code vs With Code",
          "Building AI Apps & Using AI Programmatically",
          "Proprietary vs Open (Local) LLMs",
          "Using Open LLMs",
          "Understanding Our Development Environment",
          "Creating a New Python Project (using \"uv\")",
          "OpenAI Setup & Pricing",
          "Getting Started With A First Example Workflow",
          "Preparing HTTP Requests For The OpenAI API",
          "Choosing & Using a Model",
          "Prompt Engineering",
          "Extracting & Using the LLM Response",
          "More on the OpenAI API & SDK",
          "Code Deep Dives vs Provided Code Snippets",
          "Use Those Docs!",
          "Using The OpenAI Python SDK",
          "Leveraging Few-Shot Prompting",
          "Generating Prompts Dynamically With Dynamic Content",
          "Building Multi-Step & Multi-Model Workflows",
          "Workflows vs Agentic Systems",
          "Using Locally Running Open Models via Ollama",
          "Enforcing & Using Structured Outputs",
          "More On JSON Schemas & Structured Outputs",
          "Structured Outputs via SDK & Pydantic",
          "Using Prompt Engineering To Control Output",
          "Onwards To Another Example",
          "Generating Images In a Workflow",
          "Controlling Workflow Execution with Control Flow Adjustments",
          "Control Flow In Action",
          "Adding a \"Human In The Loop\"",
          "Integrating External Services - Example: Slack",
          "Important: Potential Problems & Security Risks"
        ],
        "Building AI Agents": [
          "Module Introduction",
          "How LLMs (Do Not) Use Tools",
          "Implementing Tool Use From Scratch",
          "Using OpenAI's Function Calling Feature",
          "Building a Multi-Tool Versatile Agent",
          "Using Advanced AI Models",
          "Building Reusable Elements With Classes",
          "Getting Started with a Multi-Agent System",
          "Building & Connecting Specialized Agents",
          "Extracting Website Content",
          "Universal vs Specialized Agents",
          "Agent Memory: Short-Term & Long-Term",
          "Wrap Up"
        ],
        "Using CrewAI: A Third-Party AI Agents SDK": [
          "Module Introduction",
          "Getting Started With CrewAI",
          "Understanding CrewAI Agents",
          "Using CrewAI Tasks",
          "Adding Tools To Agents",
          "Running The Crew"
        ],
        "Roundup": [
          "Course Roundup",
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "Basic programming knowledge is required",
        "NO advanced AI or programming experienced is needed"
      ],
      "description": "\"AI Agents\" is a buzzword.\nThat's a pity, because AI powered workflows and agentic systems can unlock an entire new world of opportunities.\nFrom data transformation to content generation, customer service or automated research. Your imagination is the limit!\nAnd this course will get you there: You'll be able to build your own AI-powered applications and agentic systems!\nThis course will teach you what exactly \"AI Agents\" are, how they differ from (and still relate to) \"AI Workflows\" and how you can build and use both.\nWith this course, I decided to take a step back from the buzzwords and instead give you all the crucial theory, plenty of examples and concrete code snippets to ensure that you fully understand how LLMs, \"normal code\" and data work together to bring AI-powered applications to life.\nWith this course, you'll get:\nA thorough explanation of \"AI Workflows\" & \"AI Agents\"\nLots of examples (incl. content generation, customer support, automated research)\nDetailed explanations that allow you to apply the knowledge no matter which programming language you're using\nYou'll learn:\nHow to build AI Workflows & Agents from scratch\nHow to use OpenAI's models (via API & SDK) programmatically\nHow to transform input data with AI\nHow to build AI-powered automations\nHow to interact with third-party services like Slack\nHow use AI for self-evaluation\nHow to manage short- and long-term memory for your AI Agents\nHow to build Multi-Agent systems and share data between agents\nHow to split work between universal and specialized Agents\nHow to add a Human-in-the-Loop step to your workflows\nAnd so much more!\nAll code examples in this course use Python and the OpenAI API / SDK but you'll be able to apply the knowledge to any programming language or model you're using in your day-to-day work.",
      "target_audience": [
        "Developer who want to build AI-powered workflows & applications",
        "Everyone who wants to automate work with AI workflows & agents"
      ]
    },
    {
      "title": "Data Structures and Algorithms Bootcamp",
      "url": "https://www.udemy.com/course/data-structures-and-algorithms-bootcamp/",
      "bio": "How to ace your Silicon Valley style coding interview",
      "objectives": [
        "How to answer commonly asked Silicon Valley style interview questions",
        "Demonstrate knowledge and mastery of data structures and algorithms",
        "How to pass Silicon Valley style technical interviews",
        "Interview confidently",
        "Land your dream job"
      ],
      "course_content": {
        "Welcome": [
          "How to get the most out of this course",
          "Where to get the code",
          "Link to Github Repo",
          "Help Setting Up intelliJ"
        ],
        "Arrays": [
          "What's so special about Arrays?",
          "Data Structures vs APIs",
          "Three things you need to know about Arrays",
          "The Array's Killer Feature",
          "How to insert into an Array",
          "How to delete an Array element",
          "Deleting the Last Element",
          "How to resize Arrays dynamically",
          "Lab: Let's build a Dynamic Array from scratch",
          "What about error handling?",
          "What you need to know for the interview"
        ],
        "Linked Lists": [
          "What is a Linked List?",
          "What makes a Linked List different from an Array?",
          "Add Front",
          "Get First / Get Last",
          "Add back",
          "Size",
          "Clear",
          "Delete With Value",
          "Double Linked Lists",
          "What you need to know for the interview",
          "Super Common Interview Question"
        ],
        "Big O Notation": [
          "What is Big O Notation?",
          "Must know Big O runtimes",
          "The Big O Cheat Sheet",
          "Lab: Testing ourselves on our Big O Notation",
          "What you need to know for the interview"
        ],
        "Stacks & Queues": [
          "What are Stacks and Queues?",
          "What is the Stack and Queue killer feature?",
          "How to push and pop onto a Stack",
          "How to add and remove from a Queue",
          "Visualizing adding to a Queue",
          "Runtime characteristics of Stacks and Queues",
          "What you need to know for the interview"
        ],
        "Hash Tables": [
          "What so great about Hash Tables?",
          "How does hashing work?",
          "How do you convert a hash into its index?",
          "Beep beep! How to deal with collisions",
          "Runtime characteristics of Hash Tables",
          "Lab: How to build a Hash Table from scratch",
          "What you need to know for the interview"
        ],
        "Binary Trees": [
          "What is a Binary Tree?",
          "How does find work?",
          "How do you insert into a Binary Search Tree?",
          "How do you find the minimum in a Binary Search Tree?",
          "How does delete work in a Binary Search Tree?",
          "Links that help",
          "What are some different ways you can traverse Binary Trees?",
          "Runtime characteristic of Binary Search Tree",
          "What you need to know for the interview"
        ],
        "Binary Heaps": [
          "What are Binary Heaps and what are they good for?",
          "How do Binary Heaps work?",
          "How do you insert into a Binary Heap?",
          "How do you extract the max?",
          "Larger Nodes Near the Bottom",
          "What makes the Binary Heap so amazing?",
          "Lab: How to build a Binary Heap from scratch",
          "Runtime characteristics of Binary Heap",
          "What you need to know for the interview"
        ],
        "AVL & Red-Black Trees": [
          "What is an AVL Tree?",
          "AVL Tree in code",
          "AVL Delete",
          "What you need to know about AVL for the interview",
          "What is the Red-Black Tree?",
          "AVL Red-Black Tree Interview Questions",
          "What you need to know about Red-Black for your interview"
        ],
        "Fibonacci Series & Memoization": [
          "Houston we have a problem",
          "What's a Fibonacci series?",
          "What's memoization and how can it help?",
          "Lab: How to build a memoized Fibonacci series from scratch",
          "Lab: Real Life Recursion",
          "What you need to know for the interview"
        ]
      },
      "requirements": [
        "Basic programming",
        "Familiarity with Java"
      ],
      "description": "This course is about getting you up-to-speed quickly on the fundamental computer science concepts you are going to be expected to know if you want interview at any large Silicon Valley tech company (Google, Apple, Facebook, Amazon, or Spotify).\nTopics include\nArrays\nLinked Lists\nBig O notation\nStacks & Queues\nHash Tables\nBinary Trees\nBinary Heaps\nDynamic Programming & Memoization\nBubble Sort / Merge Sort / Quick Sort\nGraphs\nBreadth First Search\nDepth First Search\nMore...\nWhat you get\nWith this course you get\nOver 115 beautifully hand crafted HD videos walking you through every aspect of how all these data structures and algorithms work\nPractices questions and personal walkthroughs of the most commonly asked interview questions\nMy personal notes on interviews I have personally had with Spotify, Facebook, Amazon, and others\nA section called The Classics where we walk through classic interview questions no interviewee should be with out\nInterview tips on soft skills big tech companies look for when hiring and techniques on how to answer\nWhat you save\nBy investing in yourself with this course you are saving yourself the most precious thing you’ve got - time. I have spent a year scouring the web looking for the best examples, the simplest explanations, the best visualizations on how to explain how this stuff works, and assembled it all into one, quick, easy to digest place.\nLet's do this together\nLearning data structures and algorithms doesn’t have to be a chore. It can be fun. And I want you to know I am here for you every step of the way. Ask me any question. I usually get back to my students with 24 hrs. And together, we will get you the understanding behind how these things work.\nI also don’t have a formal computer science background\nLook. I know what it’s like not to know how this stuff works. And, like you, I have had to learn this stuff from scratch.\nBut I am here to tell you it can be done. I have no formal computer science background. I am not classically trained as a computer scientist. But by learning this material, I landed my dream job as an engineer at Spotify in San Francisco. And so can you.\n\n\nSo what are you waiting for? Sign up and get started on your journey today.\n\n\nTestimonials\nHere are some testimonials from students who have taken the course.\nTiffany Scott\nBest $10 I've ever spent. The explanations are concise and are giving me confidence for my upcoming Microsoft and Facebook interviews. Planning on finishing the course in 4 days to give me ample time to practice problems.\n\n\nSaif Addin Ellafi\nReally, this will sound like exaggeration. But this course is perfect, 5 stars falls short. The instructor puts the content in a an easy to follow order, videos are short to keep attention and leave you wanting to know more. Concise and important points are made very clear, with zero repetition. Native speaker offers no challenge for understanding, especially if you are not a native speaker. Answers questions very quickly. The course WONT teach you how to program, so forget about 100% coding from scratch or having pedagogical exercises. It relies on you to check out the code, re-write it, practice and research deeper the concepts. Examples are written in Java, but they are very agnostic to the language (aside of having to setup a java environment to run tests). Huge focus on acing interviews. A clear target of the course makes it great and an example. Time and pacing are perfect, no need to slow down or speed up. Overall 10 out of 5.\n\n\nAnna Teittinen\nI completed this course in my busy schedule within 3 weeks of learning I will have technical phone interviews with both Google and Facebook. I learned so much and understood everything without memorizing, unlike when I was in school. I recently learned I did well on both phone interviews. I will have a second technical phone interview with both companies again in mid Jan. I highly recommend this course! Thank you very much Jonathan!\n\n\nRick A\nI took your course in the very beginning of my interview prep to refresh all my concepts. I think you've done a great job in this course. After a lot of practice using these concepts I got pretty good at it. I got multiple offers from big N including Google, Facebook, Amazon and Microsoft. I would like to take this moment to thank you for creating the course and being available to answer our queries.\n\n\nLuciano Sa\nAmazing course! Very well explained, great didactic which makes it very easy to follow and understand! I wish these stars were exponential. :)\n\n\nKavitha Bhasker\nI am really thankful I found this course on Udemy. It has been 15 years since I learnt these concepts during my engineering college days and needed to brush up on them for interview prep. This course really nailed the contents and exercise that are asked in tech interviews these days. The tone of the instructor is very friendly and calm and make you think rather than put you in a spot. I was asked for a interview query on whether to use an array vs hashmap in a certain scenario and was able to nail the answer and also give the Time complexity with confidence . I landed the job and will be starting next week. Thank you so much!\n\n\nEyal Carmi\nGreat. I like the that Jonathan filters what we actually need for an interview - instead of being flood with lot's of data, he notes you what worth remembering. His explanations are clear, and if you don't understand something, just ask him and he explains it to you.\n\n\nFlavio Marques Migowski Carvalho\nOne of the best course I've had. It's very well explained, each step in the coding is shown and explained with drawings. I think some design and architecture problems would be very handy! Thank you for making this course for us!\n\n\nAbhishek Sengupta\nI think this is the best course on DSA I have ever seen. The reason i am saying this is because in previous courses I used to understand a write the code but soon after a day or so it was like 'what was that?' , but here every topic even after learning many other topics I can recall and code it. And I feel the reason for strong foundation is how Jonathon approaches and teaches the topic. In such a less duration he was able to solidify the concepts from scratch. BEST COURSE IN DSA! Jonathan Please do more courses on algorithms or Blind 75 topics. It will help engineers crack the interview easily after learning from you.\n\n\n\n\nMadhu\nI love the course overall. Very engaging. The Instructor, Jonathan is a great mentor and has this calm and assuring voice that puts the confidence in anyone who does not have programming experience before. He not only covered the technical aspects of almost all the important algorithms but also added a great ending with the interviewing tips which is really helpful. I would recommend this course to everyone who want to brush up on algorithms and just be ready enough to start with their interview.\n\n\nJuwan Turner-Howard\nI can program. I thought I \"knew\" about arrays, but this helping me to know the why which can allow me to make better tradeoffs when it's time to choose between linkedlist(probably O(n) get and set time) versus the O(1) array get and set time. If the rest of the course is consistent with the style and value of information in this first module... whew... I'm in for a good ride. So happy and excited about this course thus far though.\n\n\nAung Khant Nyra\nI would say Jonathan has done a great job of showing you how to prepare for interview problems by giving you a touch of basic data structures and a bird's eye view of the a typical interview. I am in the bay area and personally for me, this course is pretty basic and I am preparing for interviews myself, so this course was helpful for me although it didn't include advanced topics like dynamic programming and so on. Of course, there are countless interview practice problems online so I understand, it's impossible for him to cover everything. Anyways, I love the course . It is better to learn from a professional who is in the field instead of learning from a professor or a lecturer.\n\n\nRamachandran Rajagopalan\nGood course to wrap your head around DSA if you are a beginner. For others who have a got a week's time for the interview and need a refresher then grab this. Thanks, Jonathan. Good work.",
      "target_audience": [
        "Anyone applying for a software engineering role in Silicon Valley",
        "Anyone who wants to quickly learn the fundamentals of computer science",
        "Anyone looking to work at Google, Facebook, Amazon, Apple, Spotify"
      ]
    },
    {
      "title": "QC201 : Advanced Math for Quantum Computing",
      "url": "https://www.udemy.com/course/qc201-advanced-math-for-quantum-computing-mathematics-physics/",
      "bio": "Learn the Advanced Math you need for later courses on Quantum Computing Algorithms",
      "objectives": [
        "Advanced Math Techniques for Quantum Computing"
      ],
      "course_content": {
        "Introduction and Prerequisites": [
          "Welcome",
          "Recap & Revision of Concepts"
        ],
        "Core Math Techniques": [
          "Probability of Measurement",
          "Orthonormality",
          "Orthonormality in Bracket Notation",
          "Introduction to Basis Vectors",
          "Basis Vectors for Spin",
          "Introduction to Degrees of Freedom",
          "Degrees of Freedom for a Single Qubit",
          "Global & Relative Phase",
          "Bloch Sphere",
          "Tensor Products",
          "Tensor Products of Matrices",
          "Multi-Qubit Basis Vectors",
          "Brackets of Tensor Terms",
          "Multi-Qubit Tensor Algebra",
          "Entanglement & Degrees of Freedom",
          "Entanglement in Bracket Notation",
          "Change of Basis",
          "Multi-Qubit Measurements",
          "Partial Measurement of Multiple Qubits",
          "Square Matrices in Bracket Notation",
          "Multi-Qubit Transformation Matrices",
          "Cryptography with Entanglement",
          "Expected Value of Measurables",
          "Expected Value in Matrix Form",
          "Deconstruction of Hermitians",
          "Deconstruction of Unitary Matrices"
        ],
        "Applications": [
          "Proof of No-Cloning Theorem",
          "Superdense Coding",
          "Quantum Teleportation",
          "Bell's Theorem - 1 - Statement",
          "Bell's Theorem - 2 - Lemma",
          "Bell's Theorem - 3 - Proof"
        ],
        "Conclusion": [
          "Conclusion"
        ],
        "Appendix A": [
          "Slides"
        ]
      },
      "requirements": [
        "Complete QC051, QC101, and QC151 before taking this course"
      ],
      "description": "This course covers the Math you need to begin learning about quantum algorithms and applications of quantum computing.\nThis is primarily a Math course. It doesn't cover any quantum algorithms or applications. This course teaches you the Math you need to begin learning about quantum algorithms. Quantum algorithms will be covered in later courses.\nAlmost everything in this course is explained with rigorous proofs. After you complete this course, quantum physics will not seem so mysterious.\n\n\nPREREQUISITES\nTo get the most from this course, you must be completely familiar with all the topics covered in the earlier prerequisite courses:\nQC051 ,\nQC101 ,\nand QC151 .\n\n\nMATH TECHNIQUES COVERED IN THIS COURSE\nOrthonormality\nBasis Vectors & Change of Basis\nBloch Sphere\nTensor Products\nMulti-Qubit Tensor Algebra\nEntanglement in terms of Degrees of Freedom\nPartial Measurements\nCryptography with Entanglement\nDeconstruction of Hermitian and Unitary Matrices into a Sum of Outer Products\n\n\nQUANTUM APPLICATIONS COVERED IN THIS COURSE\nSuperdense Coding\nQuantum Teleportation\nProof of No-Cloning Theorem\nBell's Theorem (Statement and Proof)\n\n\nHOW TO GET THE MOST FROM THIS COURSE\nThe material presented here is significantly more advanced than my previous courses on QC.\nTo get the most from this course, you might need to rewind and repeat each lesson 2-3 times.\nIt is a good idea to pause the lessons frequently and follow along with the Math.\nGive yourself breaks between lessons. After you complete a lesson, wait a day, or at least an hour before moving on to the next lesson.\n\n\nEnroll today and I will see you in class.",
      "target_audience": [
        "Students who have completed my earlier courses and want to move to the next level in Quantum Computing"
      ]
    },
    {
      "title": "Core Java Made Easy (Covers the latest Java 18)",
      "url": "https://www.udemy.com/course/corejavamadeeasy/",
      "bio": "Master java in quick and simple steps",
      "objectives": [
        "Learn the fundamentals of java and oops",
        "Learn the building blocks of a java program",
        "Handle Exceptions",
        "Use flow control and looping statements",
        "Implement encapsulation polymorphism inheritance and abstraction",
        "Read and Write files",
        "Write multi threaded programs",
        "Understand and use Garbage Collection",
        "Learn and create the different types of inner classes",
        "Understand and master Strings",
        "Learn collections in depth",
        "Use functional interfaces and lambda expressions",
        "Understand the internal of JVM",
        "Interview Questions updated regularly",
        "Use Concurrent Collections and Enums",
        "Implement Internationalization and also use annotations",
        "See how reflection API can be used to dynamically load classes ,create objects and invoke methods",
        "Gain debugging skills",
        "Work on various usecases and coding problems",
        "Understand and use Wrapper Classes and Autoboxing",
        "Use Datatypes, Literals, Variables and Typecasting",
        "Implement Inter Thread Communication",
        "Specify different access modifiers",
        "Use Datatypes, Literals, Variables and Typecasting",
        "Master Java 8 Features",
        "Learn new features as a newer version of Java is released",
        "Use Regular Expressions",
        "All in quick and easy steps"
      ],
      "course_content": {
        "Start Here": [
          "Course and Instructor Introduction",
          "Private Course Feedback Link",
          "Making the best of this course",
          "Full Stack Developer Path",
          "Slides used in the course",
          "Download Theory Notes"
        ],
        "Introduction to Java and OOPS": [
          "Java Development Kit",
          "Java Platform Independency",
          "Object Oriented Programming Introduction",
          "The 4 Object Oriented Principles",
          "Encapsulation",
          "Inheritance",
          "Abstraction",
          "Polymorphism",
          "Procedure Oriented vs Object Oriented",
          "Building Blocks of a Java Program",
          "Methods",
          "Introduction to Java and OOPS"
        ],
        "Software Installation and First Java Program": [
          "Installing Java",
          "Windows Only - Install Java",
          "Installing Eclipse",
          "Configuring JDK in eclipse",
          "Latest Eclipse Installation",
          "Downloading the completed projects",
          "Download the assignment solutions",
          "Create a Hello World Program",
          "Hello World Explained",
          "First Java Program"
        ],
        "Static Members and their execution control flow": [
          "Static and Non Static Contexts",
          "Static Blocks",
          "Static Methods",
          "Static Variables",
          "Static Memebers"
        ],
        "Non-Static Members and their execution control flow": [
          "Non Static Members",
          "Create Non Static Variables Blocks and Constructor",
          "Static vs Non Static Blocks",
          "Default Constructor",
          "Create a object reference",
          "Create object reference in a static block",
          "Create a static reference directly",
          "The this Keyword",
          "Create a reference in a static method",
          "Invoking a non static method",
          "Static vs Non Static a Summary",
          "Constructor vs Method",
          "Non Static Members"
        ],
        "Datatypes, Literals, Variables, Type Conversion, Casting & Promotion": [
          "Data Type Introduction",
          "Data Type In Action",
          "Type Casting",
          "Implicit Type Casting",
          "Explicit Type Casting In Action",
          "Explicit Type Casting In Action Beyond Range",
          "Identifiers",
          "Additional Content - Variable Types",
          "Data Types",
          "Variables",
          "More Programs - Data Types"
        ],
        "Wrapper Classes with Auto boxing & unboxing": [
          "Wrapper Classes Introduction",
          "Primitives and Objects",
          "Primitives and String",
          "String and Objects",
          "Wrapper Type Constructors",
          "Wrap up the wrapper types",
          "Command Line Arguments",
          "More Programs - Command Line Arguments",
          "Wrapper Classes"
        ],
        "Operators and Assignments": [
          "Increment and Decrement Operators",
          "Arithmetic Operators",
          "String Concatenation Operator",
          "Relational Operators",
          "bitwise operators",
          "short circuit operators",
          "assignment operator",
          "Ternary Operator",
          "More Programs - Operators and Assignments",
          "Operators and Assignments"
        ],
        "Flow Control Statements": [
          "Flow Control Statements Introduction",
          "IF-ELSE",
          "If Else Ladder",
          "Switch",
          "Switch Fall Through",
          "While",
          "Do-While",
          "For Loop",
          "Break",
          "Labelled Blocks and Break",
          "Continue",
          "Flow Control Statements",
          "Loops",
          "More Programs - If Else Ladder",
          "Switch",
          "More about Switch",
          "Switch Problem",
          "While Loop",
          "Do While Loop",
          "For Loop"
        ],
        "Access Modifiers": [
          "Introduction",
          "private",
          "default",
          "protected",
          "Acces Modifiers"
        ]
      },
      "requirements": [
        "Internet"
      ],
      "description": "Sample of the reviews:\nCrisp and clear explanation, loving it. Every complicated topic has been clearly explained with easy examples. Best part is the duration of the video, it is shot and right to the point with no unnecessary explanations that usually confuse students. Love to see more lectures from you Bharath, specially advanced topics of Java. - Nagesh Phaniraj\nA very nice explained all the concepts ...Helped to understand core java concepts thoroughly ... Very nice distribution of chapters ...   -Anil Suresh Choundaj\nThe course is detailed. The instructor is always ready to help you with a different problem and also advise you about java courses and java certification required to be a successful java developer. - Tshering Gurung\n---\nWhether you are a College student learning the fundamental of java or a Big Data Developer writing java map reduce programs or Test Automation engineer who requires java to write your test scripts or a Experienced java developer who wants to fill in the gaps and also master the JVM Internals and the cool features Java 15 introduces this course will help you accomplish your goals.\nLearn and use the top features all the way  java 17\nMaster the Object Oriented Features and Java Language\nInstall JDK and the Eclipse IDE\nExecute your first java program and understand the building blocks of a java program\nLearn Static and Non Static Contexts used in every java program\nUse Datatypes, Literals, Variables and Typecasting\nUnderstand and use Wrapper Classes and Autoboxing\nSpecify different access modifiers\nDefine logic using conditional statements, looping constructs\nUse packages to organize code\nImplement inheritance ,abstraction, polymorphism and encapsulation\nUnderstand interfaces, their importance, and their uses\nUse abstract classes and interfaces to implement abstraction\nDevelop Multithreaded applications.\nImplement Inter Thread Communication\nUse Executor Framework to easily spawn off threads\nHandle Exceptions\nRead and Write files using the I/O Streams API\nUnderstand and use the various Java Collection Classes\nUse Concurrent Collections and Enums\nImplement Internationalization and also use annotations\nSee how reflection API can be used to dynamically load classes ,create objects and invoke methods\nGain debugging skills\nWork on various usecases and coding problems\nLearn and use the java 8 features such as lambdas, functional interfaces, predicates etc in simple terms\nLearn the internals of the Java Virtual Machine\n\n\nWhat are the requirements?\nJava,Eclipse IDE(Installation is covered in easy setup section)",
      "target_audience": [
        "Developers who are getting started with java",
        "Testers who want to learn java quickly and in depth",
        "Experienced developers who want to learn latest java features",
        "Experienced developers who want to understand the internals of JVM",
        "Anyone who want to learn java quickly and in depth"
      ]
    },
    {
      "title": "Generative AI for .NET Developers with Google AI",
      "url": "https://www.udemy.com/course/generative-ai-for-dotnet-developers-with-google-palm-api/",
      "bio": "Power your .NET applications with Google's advanced GenAI capabilities",
      "objectives": [
        "How to add Generative AI capabilities to your .NET applications",
        "Integrating the Vertex AI SDK into your C# code",
        "Consuming the Gemini API in your C# code",
        "Consuming the Vertex AI REST API in C# code",
        "Develop a GenAI Bot in C# with ASP .NET Core MVC",
        "Understand the fundamental concepts of Generative AI from a Developer's perspective",
        "Learn about prompt engineering best practices",
        "Learn about different prompt design strategies",
        "Learn how to use Vertex AI Studio to design prompts",
        "Understand how LLM model parameters affect creativity in responses"
      ],
      "course_content": {
        "Introduction": [
          "Course Introduction",
          "AI vs. ML vs. GenAI",
          "Google Gemini LLMs",
          "How Does Generative AI Generate New Content?",
          "Quiz: Important GenAI Concepts",
          "Explaining GenAI to a Non-Technical Product Manager"
        ],
        "Setup & Configuration": [
          "Setup & Configuration Overview",
          "Installing .NET SDK + IDE",
          "Signing Up for a Google Cloud Platform (GCP) Account",
          "Installing the gcloud CLI",
          "Navigating the Google Cloud Console + Vertex AI Studio",
          "Enabling the Vertex AI and Cloud Storage APIs",
          "Enabling the Generative Language API",
          "Creating a GCP Service Account"
        ],
        "Prompt Engineering": [
          "What is Prompt Engineering?",
          "Prompt Design Strategies",
          "Zero-Shot Prompting",
          "One-Shot Prompting",
          "Few-Shot Prompting",
          "Testing Your Prompts with cURL",
          "Quiz: Prompt Engineering"
        ],
        "API Integration": [
          "The Game Plan",
          "Vertex AI REST API Integration",
          "Gemini REST API Integration",
          "Vertex AI SDK Integration",
          "Creating Your Own GenAI Bot"
        ],
        "Conclusion": [
          "Recommended Further Study",
          "Course Summary"
        ]
      },
      "requirements": [
        "Basic proficiency in C#",
        "No prior knowledge of ML or Data Science is needed"
      ],
      "description": "Welcome to the \"Generative AI for .NET Developers with Google AI\" course!\nAre you a .NET developer looking to harness the power of Generative AI in your applications without diving too deep into the complexities of Machine Learning and Data Science? If so, this course is tailor-made for you!\nIn this comprehensive course, you'll discover how to seamlessly integrate Google's advanced Generative AI capabilities into your C# code through the Vertex AI API. Designed by a developer, for developers, no prior knowledge of Machine Learning (ML) or Data Science is needed. It focuses on practically, giving you just enough of the what and why, and then a lot of the how.\nThroughout the course, you'll gain a strong foundation in Generative AI, understand the mechanics of how generative AI generates new content, and explore the driving force behind it all—the Google Gemini Large Language Models. You'll also learn the art of prompt engineering, using Vertex AI Studio, you will engineer prompts that yield impressive results tailored to your specific use cases.\nThe core of the course focuses on practicality. You'll be guided through the process of seamlessly integrating the Google Vertex AI and Gemini APIs into your .NET applications. And the best part? You'll build your very own generative AI application to practice your newly acquired Gen AI skills.\nCourse Highlights:\nLearn how to integrate the Google Vertex AI API into your C# code\nLearn how to integrate the Gemini API into your C# code\nDevelop a GenAI Bot in C# with ASP .NET Core MVC\nUnderstand the fundamental concepts of Generative AI from a Developer's perspective\nLearn how to use Vertex AI Studio to design prompts\nLearn about Prompt Engineering best practices\nUnderstand how LLM model parameters affect creativity in responses\nDon't miss this unique opportunity to expand your .NET development toolkit with the creative possibilities of Generative AI. Enroll today and unlock a new dimension of software development!",
      "target_audience": [
        "Software Engineers",
        "Software Developers"
      ]
    },
    {
      "title": "TDD Fundamentals in C#",
      "url": "https://www.udemy.com/course/tdd-fundamentals-in-csharp/",
      "bio": "This course covers the fundamentals of Test Driven Development using C# as the language of practice",
      "objectives": [
        "Structure a unit test (Understand the anatomy of a good test)",
        "Structure Test Classes and projects",
        "Understand Testing Strategies and approaches",
        "Identify Boundaries and Equivalence Partitions",
        "Name a Test",
        "Break dependencies with Test Doubles",
        "Grow a requirement using TDD",
        "Balance high level design with TDD practice",
        "Recognize the Flow/Cadence/Rhythm of TDD",
        "Understand how bad tests show high code coupling and how good tests show low coupling"
      ],
      "course_content": {
        "The What and the Why of TDD": [
          "Introduction and Course Structure",
          "What is TDD?",
          "Why TDD?",
          "Course Notes and Exercises",
          "Extension Exercises",
          "Extra - Why Write Tests: ChilliTalk Podcast",
          "Extra - Why TDD: A Discussion"
        ],
        "Intro to Unit Testing": [
          "A Note About Versions of Visual Studio and .NET",
          "Getting Setup with C# and NUnit",
          "Test Frameworks and Runners",
          "Anatomy of a Test, Naming",
          "Anatomy of a Test, Arranging",
          "Anatomy of a Test, Structure",
          "F.I.R.S.T Principles, Intro",
          "F.I.R.S.T Principles, Fast",
          "F.I.R.S.T Principles, Isolated",
          "F.I.R.S.T Principles, Repeatable",
          "F.I.R.S.T Principles, Self-Validating",
          "F.I.R.S.T Principles, Thorough",
          "F.I.R.S.T Principles, Summary"
        ],
        "The Test Driven Development Cycle": [
          "The Structure of Each Section",
          "Kata Intro: Rock, Paper, Scissors",
          "The 3 Laws of TDD",
          "Red, Green, Refactor Cycle",
          "Fake it Green Bar Pattern",
          "Kata Worked Examples Intro",
          "Getting Started on the Rock, Paper, Scissors Kata",
          "Rock, Paper, Scissors: Worked Example",
          "Rock, Paper, Scissors Solution"
        ],
        "Boundaries, Equivalence Partitions and the Triangulation Pattern": [
          "Kata Intro: Fizz Buzz",
          "Boundaries and Equivalence Partitions",
          "Triangulation Green Bar Pattern",
          "Test Cases",
          "Getting Started on the Fizz Buzz Kata",
          "Fizz Buzz: Worked Example",
          "Fizz Buzz - Solution"
        ],
        "Naming Tests": [
          "Kata Intro: Age Calculator",
          "Three Stages of Naming",
          "Getting Started on the Age Calculator Kata",
          "Age Calculator: Worked Example",
          "Age Calculator - Solution"
        ],
        "Green Bar Patterns and TDD Gears": [
          "Kata Intro: String Calculator",
          "One-to-Many Green Bar Pattern",
          "Obvious Green Bar Pattern",
          "Backout Green Bar Pattern",
          "Learning Test Green Bar Pattern",
          "TDD Gears",
          "Getting Started on the String Calculator Kata",
          "String Calculator Kata: Worked Example",
          "String Calculator - Solution"
        ],
        "Using Test Doubles": [
          "Kata Intro: Character Copy",
          "Test Doubles",
          "Getting Started on the Character Copy Kata",
          "Character Copy Kata: Worked Example",
          "Character Copy - Solution"
        ],
        "SOLID and Putting it All Together": [
          "Kata Intro: CSV File Part 1",
          "S of SOLID Principles",
          "O of SOLID Principles",
          "L & I of SOLID Principles",
          "D of SOLID Principles",
          "Getting Started on the CSV File Kata Part 1",
          "CSV File #1 - Solution",
          "The CSV File Kata Part 2",
          "The CSV File Kata Part 3",
          "The CSV File Kata Part 4",
          "The CSV File Kata Part 5",
          "The CSV File Kata Worked Example: Requirement 1",
          "The CSV File Kata Worked Example: Requirement 2",
          "The CSV File Kata Worked Example: Requirement 3",
          "The CSV File Kata Worked Example: Requirement 4",
          "The CSV File Kata Worked Example: Requirement 5",
          "CSV File Kata - Complete Solution"
        ],
        "Closing and What Next?": [
          "Closing and What Next?"
        ]
      },
      "requirements": [
        "Developers must be able to code in C#",
        "Visual Studio"
      ],
      "description": "TDD stands for Test-Driven Development. It is a software development process for developing an application by using automated tests as the primary tool for development. These tests are written before coding and are the primary unit of quality ensuring that coding is correct, reliable and bug-free.\nTDD has become widely accepted by the .NET developer community as an essential skill in today's world of web applications, service-oriented architectures and desktop application development. The TDD Fundamentals in C# course is a step-by-step C# programme designed to make you a more proficient C# Developer by teaching you the skill of TDD. It covers the fundamentals of Test-Driven Development enabling you to get up to speed quickly within the practice of TDD in C#.\nThe TDD Fundamentals in C# course is very hands-on: you will spend your time learning the practice of Test Driven Development through a sequence of coding exercises interspersed with theory. This course has been run in person dozens of times with a variety of groups, and through this process we have honed the process of teaching and learning TDD.\nTarget outcomes:\nUnderstand what TDD is and why you would want to practice it\nUnderstand the anatomy of a test, and how to write good unit tests\nUnderstand and use the flow of Test-Driven Development and to use a toolbox of tools and techniques on what to do if they are not experiencing this rhythm.\nUnderstand how high-level design and TDD work together to achieve great designs\nWrite Unit Tests for a reasonably complex solution that are maintainable into the future.\nTake a requirement (User Story/Use Case) and implement the relevant tests and code.\nWrite far more loosely coupled code by using the appropriate Test Doubles.\nUse the appropriate mocking framework for dynamically creating the appropriate test doubles",
      "target_audience": [
        "Software developers who have at least two years production programming experience with C#."
      ]
    },
    {
      "title": "The Complete Coding for Beginners Course (2025)",
      "url": "https://www.udemy.com/course/the-complete-coding-for-beginners-course/",
      "bio": "Learn to Code From Scratch: Become a Developer with this Step-by-Step Coding Course - Includes Many Coding Projects!",
      "objectives": [
        "Learn how to code, and even better, understand what you’re doing!",
        "Get the programming fundamentals you need before going any further",
        "Learn by doing: Build many real apps with fun coding projects",
        "Variables, Lists, Conditions, Loops, Functions, Libraries, … All the coding basics are covered + more.",
        "Master the coding process: Transform your ideas into code",
        "Break down any coding project into smaller steps",
        "Create decision algorithms",
        "Learn with block programming first, then switch to text programming",
        "Code with Python 3",
        "Become more independent when learning any other programming language",
        "Start directly with the best coding practices",
        "Develop a problem-solving mindset",
        "Understand the “why” behind things",
        "Practice, practice, practice, and more practice - tons of activities and projects"
      ],
      "course_content": {
        "Introduction": [
          "Welcome!",
          "How to Follow the Course (Structure)",
          "How to download additional resources"
        ],
        "Your First Program": [
          "Intro",
          "Your First Algorithm - How to Transform an Idea into Code",
          "Create and Setup a free Scratch Account",
          "Your First Scratch Program",
          "[PLEASE READ] Note on Replit and online Python websites",
          "Create and Setup a free Replit Account",
          "Your first Python Program",
          "Control the Program Execution Speed",
          "Activity 1 - Ask a Question and Reply to the User",
          "Activity 1 - Scratch Solution",
          "Activity 1 - Python Solution"
        ],
        "Project - Cooking Pasta!": [
          "Intro - Project Overview",
          "Scratch Solution",
          "Python Solution"
        ],
        "Variables - Save Values to Reuse Later": [
          "Intro",
          "Create a Variable",
          "Data Types",
          "Operations on Variables",
          "Variables in Python",
          "Cast Between Data Types",
          "Tip (bonus): Comment Your Code",
          "Activity 2 - Add 2 Numbers",
          "Activity 2 - Scratch Solution",
          "Activity 2 - Python Solution"
        ],
        "Project - Available Study Hours Calculator": [
          "Intro - Project Overview",
          "Create the Algorithm",
          "Scratch Solution - Step 1",
          "Scratch Solution - Step 2",
          "Python Solution - Step 1",
          "Python Solution - Step 2"
        ],
        "Conditions - Add Decisions and Logic to Your Programs": [
          "Intro",
          "Booleans - Conditional Statements",
          "Combine Multiple Conditional Statements",
          "Create a Condition With If",
          "Else, else if",
          "Conditions in Python - Booleans",
          "Conditions in Python - if/elif/else",
          "Introduction to Flowchart Programming",
          "Activity 3 - Regulate Room Temperature",
          "Activity 3 - Flowchart Solution",
          "Activity 3 - Scratch Solution",
          "Activity 3 - Python Solution"
        ],
        "Project - Are You Old Enough to Drive in This Country?": [
          "Intro - Project Overview",
          "Flowchart Solution - Step 1",
          "Flowchart Solution - Step 2",
          "Scratch Solution - Step 1",
          "Scratch Solution - Step 2",
          "Python Solution - Step 1",
          "Python Solution - Step 2"
        ],
        "Lists - Manage Collections of Values": [
          "Intro",
          "Create a List",
          "Lists in Python",
          "Counting From Zero",
          "Check if a List Contains an Element",
          "Activity 4 - Validate User Input",
          "Activity 4 - Flowchart Solution",
          "Activity 4 - Scratch Solution",
          "Activity 4 - Python Solution"
        ],
        "Project - Guess Recipe Ingredients": [
          "Intro - Project Overview",
          "Flowchart Solution",
          "Scratch Solution",
          "Python Solution"
        ],
        "Loops - Repeat a Set of Instructions": [
          "Intro",
          "Repeat an Instruction x Number of Times",
          "Repeat an Instruction Until a Condition is True",
          "For Loop in Python",
          "While Loop in Python",
          "Flowchart of a Loop",
          "Activity 5 - Improve the Previous Project With Loops",
          "Activity 5 - Flowchart Solution",
          "Activity 5 - Scratch Solution",
          "Activity 5 - Python Solution",
          "Combine Lists and Loops",
          "Activity 6 - Create a List From Another List",
          "Activity 6 - Flowchart Solution",
          "Activity 6 - Scratch Solution",
          "Activity 6 - Python Solution"
        ]
      },
      "requirements": [
        "Absolutely NO experience required.",
        "Just a strong will to learn and a computer.",
        "All the tools we use in the course are free, and I will explain how to set them up step by step."
      ],
      "description": "Do you want to learn to code in 2025, and start a developer career?\nOr have you already started and feel lost because you don’t really understand what you’re coding?\nWelcome to the most comprehensive Coding for Beginners course - Zero experience needed!\nAt the end of the course, you will become a developer. You will be able to create your own algorithms to solve any problem, and turn those algorithms into real code (Python, …).\nIf you have to take any coding course first, this is the ONE.\n\n\n→ Why this coding course?\n\n\nCoding can be quite hard when you get started. You have to learn so many things at the same time: coding logic, syntax, developer tools, frameworks, and much more.\nBecause of this, it’s easy to get lost. And I realized that many people start their coding journey not really knowing what to do. Then the questions appear: Should you start with a language such as Python or Java? Should you go with web development or mobile apps? Which code editing software is the best?\nThe truth is, those questions are not that important when you get started.\nWhat’s important at the beginning is to make progress on the programming fundamentals.\nWith those fundamentals, everything else - for example programming languages - will be easier to learn. And you will be able to truly kick-start your developer career.\nIt’s not just about the syntax of a language. Let’s say you learn the Python language. Well, you might learn the syntax, but then, how does this teach you how to code? Coding is not about syntax, coding is about solving real problems.\nThat's why in this course, I focus on this problem-solving part. To give you the thinking tools you really need to become a great developer. Once you have this training, you can then expand on it to learn anything else.\nNow, how to learn those fundamentals the right way? That’s where things get complicated. When searching on the Internet, I didn’t find a lot of resources talking about this in a clear way, without focusing so much on one particular language. And that’s why I’ve created this course, which is the one I wish I had when I got started.\n\n\n→ How will you learn to code?\n\n\nI’ve been a beginner myself, and I first learned the coding fundamentals. Today, I know this was the right way, although how it was taught in school was a bit boring.\nFrom this experience, and after many years coding and teaching coding, I’ve come up with a simplified approach to code that is going to give you not only the fundamentals you need, but that is also fun, step by step, and project-based. You will build real applications right from the start.\nIn this course, I’m deconstructing programming by removing everything you don’t need at the beginning. I will teach you the very basics without any distraction. And then, little by little, we will add more things, until you reach a point when you can call yourself a developer.\nThe method I use is simple, but efficient:\nWHY: Focus on the “why” first so you understand what you’re doing.\nHANDS-ON lessons to learn in a better way.\nSTEP BY STEP: Every lesson is built on top of previous ones.\nPRACTICE with many activities and projects.\nNO COPY AND PASTE!!! I write all the code from scratch.\nThis teaching method actually works: I have already taught 100 000+ students in 150 countries, with 23 000+ reviews over 4.7/5.\nAnd don’t take my word for it - here are some reviews from my students on Udemy:\n“Simple and great course, learning while doing.” — Jose Almeida\n“Halfway and still loving this course. The instructor is clear and teaches in such a way that you actually learn how to navigate, conceptualize, and write your own code rather than teaching from premade code.” — Westley Bolton\n“Really happy with the course. Exactly what I paid for and am pretty happy with my progress. I am getting exactly what is promised. Edouard is an excellent teacher.” — Jihad Anbous\n“Really step by step. It’s what I was needing. Extremely clear, with no blind spots in the lectures. Definitely worth it.” — Nicolas Hernandez\n\n\n→ What will you do in the course?\n\n\nYou will first learn about the programming process - how to:\nDefine what problem you’re really trying to solve.\nCreate an algorithm to solve that problem.\nImplement the algorithm with code (Scratch and Python).\nThen we will apply this coding process in many activities and projects, step by step, while learning the coding fundamentals: variables, conditions, lists, loops, functions, libraries, etc.\nFor each coding fundamentals, you will get:\nReal life analogy to explain the “why”.\nFlowchart programming to create algorithms using this concept.\nBlock programming to start implementing the algorithm with code (in an easy way).\nText programming with Python (“real” programming).\nAn activity directly related to the concept you’ve just learned.\nAfter each coding concept, you will create a complete project to build a real app, which will allow you to consolidate your knowledge by practicing on the new concept you’ve discovered, combined with all the previous concepts you’ve learned in the course.\n\n\n→ Start to code Now!\n\n\nSo, do you want to finally become a developer and understand what you’re doing? Enroll in this course and start your programming journey TODAY!\nAfter this course, you will feel much more confident when writing code. You will really understand the “why” behind what you’re doing, and also you will have a much better idea of what you can do next.\nThat’s not all: right from the start you will get the best practices I personally use when coding. My goal is not to make you become good, I want to make you become great at what you do.\nYou also get a 30 days money-back guarantee if you’re not fully satisfied. So just get started now, and if I don’t deliver on what I said, feel free to get the refund without having to justify yourself. No risk here, only a great opportunity to learn a life-changing skill.\nSee you in the course! :)",
      "target_audience": [
        "Anyone starting a developer journey with no experience.",
        "New developers who are lost because they don’t really understand what they’re doing.",
        "Anyone a bit afraid of starting coding with text programming and who wants a more beginner-friendly way to get started."
      ]
    },
    {
      "title": "Ultimate Clean Code Masterclass for 2026",
      "url": "https://www.udemy.com/course/ultimate-clean-code-masterclass/",
      "bio": "Write high-quality code no matter the language. Follow SOLID principles and avoid common code smells and antipatterns.",
      "objectives": [
        "Write code of excellent quality",
        "Understand the importance of clean code",
        "Master SOLID principles and refactor code accordingly",
        "Design code that's easy to extend and modify",
        "Identify and avoid common code smells and antipatterns",
        "Practice improving existing code with in-browser refactoring challenges and advanced refactoring case studies"
      ],
      "course_content": {},
      "requirements": [
        "Basic knowledge of any programming language"
      ],
      "description": "Welcome to the \"Ultimate Clean Code Masterclass\"—your practical guide to writing better code.\n\n\nClean code isn’t just about aesthetics—it’s about writing software that is easy to read, modify, and scale. This course will teach you the principles, patterns, and practices that top developers use to write high-quality code.\n\n\nWith 13 hours of video content, 21 quizzes, and 8 real-world refactoring case studies, this is the highest-rated clean code course on Udemy.\n\n\nYour path to writing professional code\nI'm a .NET Technical Lead with 10+ years of experience, and I’ve seen firsthand how clean code can make or break a project.\nThis course distills years of industry knowledge into practical, actionable lessons that will transform how you write code.\nI will help you on this journey every step of the way, no matter if you're a beginner looking to form good habits or an experienced developer aiming to sharpen your skills.\n\n\nWhat makes this course different?\nHands-on practice – Refactor messy, hard-to-maintain code into clean, professional solutions. This course includes 5 in-browser refactoring challenges and 8 real-world refactoring case studies.\nReal-world focus – The techniques you learn are immediately applicable to professional projects.\nThorough, practical exploration of SOLID principles – Unlike quick, surface-level tutorials, we dive deep into SOLID principles with real-world examples, ensuring you truly understand and can apply them confidently in your projects.\n\n\nMastering clean code will save you time, make you a more efficient developer, and help you stand out in technical interviews. By the end of the course, you'll have the knowledge and confidence to write clean, elegant code that will stand the test of time. Whether you’re working on a small side project or collaborating on large enterprise-level applications, mastering clean code will take your development skills to the next level.\n\n\nThis course is designed for programmers of any language, with all examples demonstrated in C#.\n\n\nSee it in action\nCurious to see the impact of clean code? Watch free preview lessons and start improving your code today!\n\n\nAdditional perks:\nFull Git repository with all the code shown in the course.\n30-day money-back guarantee—if you're not satisfied, get a full refund, no questions asked.\n\n\nEnroll now and start coding like a professional.",
      "target_audience": [
        "Any developer who wants to create the code of better quality"
      ]
    },
    {
      "title": "[NEW] Spring Boot 3, Spring Framework 6: Beginner to Guru",
      "url": "https://www.udemy.com/course/spring-framework-6-beginner-to-guru/",
      "bio": "Spring 6, Spring Boot 3, Spring MVC, JPA/Hibernate, Mongo, Spring Security, OAuth2 JWT, MySQL, Docker/K8s, Microservices",
      "objectives": [
        "Learn to Build a Spring Boot Web Applications with Spring Boot 3, Spring Framework 6 and Java 21",
        "Create Spring Boot RESTful Web Services using SpringMVC, Spring Webflux, Spring WebFlux-fn, and Spring Data REST",
        "Secure APIs with Spring Security, OAuth 2.0, and JWT using Spring Authorization Server",
        "Consume RESTful APIs using Spring RestTemplate, Spring WebClient, and Spring RestClient (new in Spring 6.2)",
        "Use Spring Data JPA with Hibernate, Spring Data Mongo, and Spring Data R2DBC",
        "How to build Event Driven Microservices with Spring Boot and Apache Kafka",
        "Test Spring MVC using Spring MockMVC, JUnit 5, and Mockito",
        "Run Spring Boot Applications with Docker, Docker Compose, and Kuberentes",
        "How to Access a MySQL Database with Spring Boot",
        "Use Flyway Under Spring Boot for Database Migrations",
        "Use Project Lombok and MapStruct to Speed Up Your Development",
        "Configure HTTP Basic Auth with Spring Security",
        "Use Spring AI to add Generative AI to your Spring applications",
        "How to Configure Spring Cloud Gateway",
        "Validate Data using Bean Validation",
        "How to Use and Configure Spring Authorization Server",
        "Learn Functional Reactive Programming"
      ],
      "course_content": {},
      "requirements": [
        "Basic Java knowledge is required",
        "HTTP and HTML Knowledge is very helpful",
        "Knowledge of SQL and databases is helpful",
        "No prior Spring Boot or Spring Framework experience required!"
      ],
      "description": "This course is All Things Spring!\nDo you wish to Master Spring Boot 3 and Spring Framework 6? Then this is the course for you.\nThis comprehensive course is for developers with no previous Spring Framework or Spring Boot experience.\nYou will master developing RESTful APIs with Spring Framework. Spring has three different options of creating RESTFul APIs: Spring MVC, Spring WebFlux, and Spring WebFlux.fn. You will see how to use each, and how to secure each using OAuth 2.0 with JWT.\nAlso covered in the course are popular persistence technologies. You will learn to use Spring Data JPA with Hibernate, Spring Data MongoDB, and Reactive with Spring R2DBC with MySQL.\nYou will see how to build event driven microservices using Spring Boot and Apache Kafka. You will be guided step by step to implement the event driven microservice example Spring Integration Cafe Sample project which was inspired by Gregor Hohpe’s classic post “Starbucks Does Not Use Two-Phase Commit”.\nAll examples in the course use Java 21 and Spring Boot 3.4.0 (Released November 2024).\nInside this course, you will learn about:\nBuild a Spring Boot Web App\nUse Spring for Dependency Injection\nCreate RESTful Web Services with Spring MVC\nCreate RESTful Web Services with Spring Webflux\nCreate RESTful Web Services with Spring Webflux.fn\nLearn Best Practices using Project Lombok with Spring\nCreate MapStruct Mappers as Spring Components\nSpring MockMVC with Mockito and JUnit 5\nSpring Data JPA\nSpring Data MongoDB\nSpring Data R2DBC (Reactive)\nSpring RestTemplate\nSpring RestClient\nSpring WebClient\nSpring WebTestClient\nSpring Security HTTP Basic Authentication\nSpring Security OAuth2 Authentication w/ JWT\nSpring Authorization Server\nSpring WebMVC OAuth2 Resource Server\nSpring WebFlux OAuth2 Resource Server\nSpring Cloud Gateway\nSpring Boot Actuator\nSpring AI\nSpring Kafka\nSpring Caching\nSpring Application Events\nSpring Boot Maven Plugin\nSpring Boot Gradle Plugin\nSpring Boot Test Containers\nSpring Boot Docker Compose\nUse Java Bean Validation with Spring\nSpring Boot Auto-Configuration with MySQL\nUse Spring Boot and Flyway for Database Migrations\nHibernate Database Relationship Mapping with Spring Data JPA\nBuild Docker Images using Spring Boot\nRun Spring Boot Applications in Docker Containers\nUse Docker Compose to run Spring Boot Applications\nDeploy Spring Boot Applications to Kubernetes\nStructured Logging with Spring Boot\nSpring AI - Learn to use OpenAI with Spring!\nThis is the first major Spring course to include a section on Spring AI. You will learn how to leverage OpenAI's ChatGPT API using Spring AI.\nCourse Updates\nApril 2024 - Introduction to Spring AI added to Course\nMay 2024 - Course Updated to Java 21 and Spring Boot version 3.3.0\nMay 2024 - Spring RestClient - NEW to Spring Framework 6.1\nJune 2024 - Using Spring Boot with Docker, Docker Compose and Kubernetes\nNovember 2024:\nAdding Spring Professional Certification Practice Test - 100 questions to test your Spring knowledge!\nCourse Updated to Spring Boot version 3.4.0, includes content on the new Structured Logging feature.\nAdded section on using Spring Boot Test Containers and Spring Boot Docker Compose\nDecember 2024 - Add content for building microservices with Spring Boot and working with Apache Kafka\nJune 2025 - Added extra section for Introduction to Junie and JetBrains AI. Catch the vibe with agentic coding!\nSpring Core\nAt the core of the Spring Framework is the Spring IoC Container. Inversion of Control is a design pattern where control is inverted compared to procedural programming. In procedural programming, the software calls reusable components to complete tasks. In contrast, with IoC it is the framework which calls the reusable libraries. Development with IoC becomes very efficient since the focus is more on the custom business logic and common logic is left to the framework to perform.\nSpring MVC\nSpringMVC is Spring Framework's original web application framework. Spring MVC implements the model-view-controller design pattern, where a model (data) is shared with with a controller which presents the data to the end user in the view (HTML, JSON, XML, etc).  In this course you will learn how to develop RESTful APIs using Spring MVC.\nSpring Webflux\nSpring Webflux was introduced to the Spring Framework in version 5. Spring Webflux is a reactive web application framework using non-blocking Java components for building efficient and scalable web applications.  Like Spring MVC, Spring Webflux also implements the model-view-controller design pattern. Spring Webflux closely follows the familiar syntax of Spring MVC. In this course you will learn to use Spring Webflux to create modern RESTful APIs.\nSpring Webflux.fn\nSpring Webflux.fn was also introduced in Spring Framework version 5. Spring Webflux.fn follows a functional programming paradigm. Through the use of functional programming, you can rapidly develop API endpoints. In this course you will learn how to use the functional programming paradigm of Spring Webflux.fn to develop RESTful APIs.\nSpring Data\nSpring Data is a family of Spring Framework projects for persistence operations to SQL and NoSQL databases. The Spring Data projects implement the easy to use Repository Pattern to persist objects to the database. In this course you will see how to use Spring Data JPA for persistence with SQL databases, how to use Spring Data Mongo for persistence to the NoSQL Mongo Database, and how to use Spring Data R2DBC for reactive/non-blocking SQL database persistence.\nSpring Security\nSpring Security is commonly used to secure Spring Framework applications. You will see how simple it is to use Spring Security for HTTP Basic authentication. You will also learn how to use Spring Security with OAuth 2.0 authentication.\nSpring Authorization Server is a recent addition to the Spring Framework family of projects. Spring Authorization server is a lightweight alternative to other identity providers, such as Keycloak. You will learn to implement the OAuth 2.0 Client Credentials flow to obtain a JWT authorization token from the Spring Authorization Server and how to configure RESTful APIs in Spring MVC, Spring Webflux, and Spring Webflux.fn as OAuth 2 Resource Servers.\nSpring Rest Clients\nSpring Framework 6 now has 3 different rest clients which may be used to interact with RESTful APIs.\nSpring RestTemplate was originally was introduced in Spring Framework version 3. You will learn to use Spring RestTemplate to authenticate with OAuth 2.0 and interact with RESTful APIs.\nSpring WebClient was introduced in Spring Framework version 5. Spring WebClient is a reactive/non-blocking rest client. Like Spring Webflux.fn, Spring WebClient uses an efficient fluent API. In this course you will learn to use Spring WebClient to authenticate with OAuth 2.0 and interact with RESTful APIs.\nSpring RestClient is the latest Rest Client for the Spring Framework. Spring RestClient was introduced to the Spring Framework with Spring Framework 6.1 in November of 2023. Spring RestClient uses the same synchronous libraries as Spring RestTemplate. But Spring RestClient uses the same functional API as Spring WebClient. You will learn to use Spring RestClient to authenticate with OAuth 2.0 and interact with RESTful APIs.\nSpring Boot\nSpring Boot was added to the Spring Framework family of projects in 2014. Spring Boot brings sensible 'convention over configuration' to the Spring Framework. Spring Boot helps minimize configuration tasks by providing an opinionated configuration through the use of Spring Boot starters. For many 3rd party libraries, Spring Boot will automatically provide sensible defaults and configuration of components.\nSpring Boot also provides production-ready features such as metrics, health checks and externalized configuration.\nDocker with Spring Boot\nA very common way to deploy Spring Boot applications is to use Docker containers. You will see how easy it is to use the Spring Boot Maven plugin to generate a Docker image for your application. Once the image is created, you can run the image in a Docker container. You will learn the Docker commands to start 5 different Spring Boot applications.\nDocker Compose with Spring Boot\nDocker Compose is a tool for running multi-container applications. You will learn how to start the 8 different Spring Boot Applications you build in this course, plus how to run MySQL and Mongo DB inside of a Docker network. Spring Cloud Gateway is used to control ingress to the RESTful Spring Boot services running in side the Docker network.\nKubernetes with Spring Boot\nKubernetes is a popular container orchestration platform. Originally developed by Google, Kubernetes is being adopted by companies all over the world. Using the same applications you learned to deploy with Docker and Docker Compose, you will learn how to deploy them in a Kubernetes context.\nSpring Boot Microservices with Apache Kafka\nLearn about creating event driven microservices using Spring Boot and Apache Kafka. You will learn about the concepts behind using microservices and how to develop microservices using Spring Boot. See how you can use asynchronous messaging with Apache Kafka to send and consume messages from microservices.\nAll Source Code in Github\nIn this course you will build 18+ Spring Boot projects. Each project is maintained in a GitHub repository. When you enroll in this course, you will have access to all 18+ Github repositories. Each lesson in the course contains links to the relevant Github repository for the lesson.\nCourse Extra - IntelliJ IDEA Ultimate\nStudents enrolling in the course can receive a free 4 month trial license to IntelliJ IDEA Ultimate! Get hands on experience using the Java IDE preferred by Spring Framework professionals!\nCourse Extra - Access to a Private Slack Community\nYou're not just enrolling in a course --> You are joining a community learning Spring.\nWith your enrollment to the course, you can access an exclusive Slack community. Get help from the instructor and other Spring Framework Gurus from around the world - in real time! This community is only available to students enrolled in this course.\nThis is a very active Slack community with over 19,000 Spring Framework Gurus!\nThis is the largest online community of people learning Spring in the world.\nWith your enrollment, you can join this community of awesome gurus!\nCourse Extra - Spring Professional Certification Practice Test\nWhen you've completed this course, at the end you will have access to a Spring Professional Certification Practice Test. Test your Spring knowledge! The test is designed to help you prepare for the Spring Professional Certification, or maybe to get ready for an interview as a Spring Developer! This test has 100 random questions about the Spring Framework and Spring Boot.\nCourse Extra - Introduction to Junie and JetBrains AI\nJunie is a modern AI enabled agent to assist you with coding tasks.  See how you can use Junie to complete Spring Boot coding tasks, such as creating JPA Entities and Spring MVC controllers.\nClosed Captioning / Subtitles\nClosed captioning in English, Spanish, French, German, Dutch, Polish, Portuguese, Chinese, and Turkish is available for all course videos!\nPDF Downloads\nAll keynote presentations are available for you to download as PDFs.\nLifetime Access\nWhen you purchase this course, you will receive lifetime access! You can login anytime from anywhere to access the course content.\nNo Risk - Money Back Guarantee\nYou can buy this course with no risk. If you are unhappy with the course, for any reason, you can get a complete refund. The course has a 30 day Money Back Guarantee.\nYour Learning Outcomes of this Course\nCompleting this course you will be:\nComfortable managing Dependency Injection with Spring.\nProficient writing RESTful APIs using all three Spring web frameworks: Spring MVC, Webflux, and Webflux.fn\nAble to consume RESTful APIs using all three clients in the Spring Framework: RestTemplate, WebClient, and RestClient\nUse non-blocking reactive programming for RESTful APIs and database persistence\nUse Spring Security to secure RESTful APIs using QAuth 2.0 and JWT\nProficient persisting data to SQL databases like MySQL using JPA and Hibernate\nUse NoSQL databases like MongoDB for persistence operations\nSend and receive messages with Apache Kafka\nUse Spring Cloud Gateway to secure and route traffic to microservices\nDeploy Spring Boot applications using Maven, Gradel, Docker, Docker Compose, and Kubernetes\nDevelop microservices using Spring Boot and asynchronous messaging with Apache Kafka\nAble Easily manage database migrations using Flyway\nReady to use Spring Boot to build real world applications!\nBuild event driven microservices using Spring Boot and Apache Kafka.\nAre You Ready to Become a Spring Framework Guru?\nJumpstart your career as a Spring Developer and enroll in this today! You're not going to find a more comprehensive Spring Course than this one!",
      "target_audience": [
        "This course is ideal for Java developers who wish to use the Spring Framework for enterprise application development"
      ]
    },
    {
      "title": "Spring Boot 2 & React FullStack Development",
      "url": "https://www.udemy.com/course/fullstack-development-springboot/",
      "bio": "Build and deploy FullStack applications",
      "objectives": [
        "Full Stack Development",
        "Spring Boot 2",
        "React JS",
        "Docker",
        "PostgreSQL",
        "Databases",
        "Manage Database Schemas With Flyway",
        "Package Application For Deployment",
        "AWS Elastic Beanstalk"
      ],
      "course_content": {
        "Getting Started": [
          "Bootstrap Application with Spring Initializr",
          "Project Walkthrough",
          "Starting The Server",
          "Defining The Main Model For Our Backend",
          "Creating Endpoint To Retrieve Students"
        ],
        "React Frontend": [
          "Setting up React Frontend",
          "React App File Structure",
          "GET Request From Frontend to Backend",
          "Adding React State",
          "Antd (UI Framework)",
          "Antd Table Component",
          "Custom Container Component",
          "Avatar Component",
          "Loader / Spin Component",
          "Servlet Context Path"
        ],
        "Database & Docker": [
          "Intro to Docker",
          "Docker and Postgres",
          "Bash into Postgres Container & PSQL",
          "Create database with PSQL",
          "Create Hikari Datasource",
          "Flyway and Migrations (CREATE TABLE ...)",
          "Describing Tables with PSQL",
          "Start and Stop Docker Containers"
        ],
        "N Tier Architecture & Dependency Injection": [
          "Service Layer",
          "Data Access Layer"
        ],
        "JDBC Template": [
          "JDBC Template & Result Sets",
          "SELECT Statement",
          "Row Mappers",
          "Refactor Row Mappers",
          "Adding Students to Database"
        ],
        "Submitting and Handling Form Requests": [
          "Adding Footer",
          "Modals",
          "Forms With Formik",
          "Adding Form Text Fields",
          "Form Validation",
          "Styling Validation Errors",
          "Handle On Submit",
          "POST Mapping (Server Side)",
          "Client Side POST",
          "Submitting Form to Backend",
          "Service for Adding New Students",
          "SQL Insert",
          "Testing For Submission End to End",
          "On Form Success & Stateless Component"
        ],
        "Error Handling": [
          "Exceptions and Error Handling",
          "Handle Errors with Promise",
          "Catching Errors with Promise",
          "Notifications Errors",
          "Adding Footer When No Students",
          "Custom Exceptions and Exception Handlers",
          "Sending Empty Object to Server",
          "Java Bean Validation"
        ],
        "Exercise 1": [
          "Exercise 1",
          "Exercise 1 Solution + Unit Tests",
          "Exercise 2",
          "Exercise 2 Solution"
        ],
        "Managing Databases Schemas With Flyway": [
          "Flyway",
          "How Migrations Work",
          "Creating and Running Migrations",
          "Exercise - Set Not Null Constraints",
          "Exercise - Set Not Null Constraints Solution",
          "Postgres Enums",
          "Dropping Constraints (Solution)",
          "PostgreSQL Casting"
        ],
        "PostgreSQL Joins and Link Tables": [
          "Joins Intro and Generate UUIDs",
          "Insert Course Record",
          "Insert Into Link Tables",
          "Join With 1 Table",
          "Join with 2 Tables"
        ]
      },
      "requirements": [
        "Be able to use computer",
        "Some Java Knowledge",
        "Be able to use terminal/cmd"
      ],
      "description": "Spring Boot 2 allows to take an idea/prototype and turn it into a real thing in matters of hours. A lot of companies use Spring Boot because it's easy to setup, learn and write code very fast without having to setup the low level platform code. Recently, Netflix has decided to switch their entire backend to Spring Boot 2. This shows that Spring Boot is a must if you are or want to become a software engineer in the Java/Kotlin world.\n\n\nThis course teaches how to build a full stack application from the ground up and touches on very import concepts used in real live software development. Concepts such as:\nBackend with Spring Boot 2\nFontend with React.js\nDatabases\nManaging Database Schemas\nDocker\nError Handling\nPackaging applications for deployment\nDeploying FullStack apps using AWS Elastic Beanstalk\nDependency Injection\n\n\nThis course focus on teaching you the process needed to build your own apps and deploy to real users. The skills gained at the end of this can be applied immediately on your own projects, university projects and at your work place.\n\n\nWhat are you waiting for? I shall see you inside...",
      "target_audience": [
        "Beginners",
        "Junior Developers",
        "Senior Developers"
      ]
    },
    {
      "title": "Learn By Example : Apache Flink",
      "url": "https://www.udemy.com/course/learn-by-example-apache-flink/",
      "bio": "30 solved examples on Stream and Batch processing",
      "objectives": [
        "Use the DataStream API for transforming streaming data",
        "Use the DataSet API for batch processing",
        "Apply window operations on Streaming data",
        "Use Flink-ML for Machine Learning",
        "Use Gelly for Graph processing"
      ],
      "course_content": {
        "Introduction": [
          "You, This Course and Us"
        ],
        "Flink's Stream Processing Architecture": [
          "What is stream processing?",
          "Stream processing vs Batch processing",
          "Requirements of a Streaming Architecture",
          "Stream processing with Apache Flink"
        ],
        "Getting Started with Flink": [
          "Installing Flink",
          "Setting up your Flink project with Maven"
        ],
        "Hello World!": [
          "Data Representation and Programming Model",
          "Example 1: Writing a Flink program"
        ],
        "Transformations using the DataStream API": [
          "Example 2: The Filter operation",
          "Example 3: The Map operation",
          "Example 4: The FlatMap operation",
          "Stateless and Stateful Transformations",
          "Keyed Streams",
          "Example 5: Creating a stream of Tuples",
          "Example 6: Transformations on Keyed Streams",
          "Example 7: Number aggregations",
          "Example 8: The Reduce Operation"
        ],
        "Window Operations": [
          "Windows Transformation",
          "Example 9 and 10: Keyed vs NonKeyed, Sliding and Tumbling Windows",
          "Example 11: Count Windows",
          "Example 12: Session Windows",
          "Understanding the Window API",
          "Example 13: Implementing a Custom Window Function",
          "Example 14: Changing the time characteristic",
          "Example 15: Twitter Streaming Window"
        ],
        "Custom Sources": [
          "Example 16: Custom Sources"
        ],
        "State and Checkpointing": [
          "Example 17: Value State",
          "Example 18: List State",
          "Example 19: Reducing State",
          "Example 20: Checkpointing and Restart strategies"
        ],
        "Operations on Multiple Streams": [
          "Example 21: Unions",
          "Example 22: Joining Streams",
          "Example 23: coGroup",
          "Example 24: coMap",
          "Example 25: Iterate",
          "Example 26: Split"
        ],
        "Transformations in the DataSet API": [
          "Example 27: Applying Transformations on DataSets"
        ]
      },
      "requirements": [
        "Experience in Java programming and familiarity with using Java frameworks",
        "Building Jars with Maven, Compiling Java code and debugging",
        "Install an IDE like IntelliJ IDEA or Eclipse for Java and Scala programming"
      ],
      "description": "Flink is a stream processing technology with added capability to do lots of other things like batch processing, graph algorithms, machine learning etc.  Using Flink you can build applications which need you to be highly responsive to the latest data such as monitoring spikes in payment gateway failures or triggering trades based on live stock price movements.\nThis course has 30 Solved Examples on building Flink Applications for both Streaming and Batch Processing\nWhat's covered?\n1) Transformations in the DataStream API : filter, map, flatMap and reduce\n2) Operations on multiple streams : union, cogroup, connect, comap, join and iterate\n3) Window operations : Tumbling, Sliding, Count and Session windows; the notion of time and how to implement custom Window functions\n4) Managing fault-tolerance with State and Checkpointing\n5) Transformations in the DataSet API : filter, map, reduce, reduceGroup\n6) Applying ML algorithms on the fly using Flink-ML\n7) Representing Graph data using Gelly",
      "target_audience": [
        "Yep! Engineers looking to set up end-to-end data processing pipelines that react to changes in real time",
        "Yep! Folks familiar with Batch processing technologies like Hadoop who want to learn more about Stream processing"
      ]
    },
    {
      "title": "Qt 5 C++ GUI Development For Beginners : The Fundamentals",
      "url": "https://www.udemy.com/course/qt-c-gui-tutorial-for-complete-beginners/",
      "bio": "Build Cross Platform C++ GUI Applications with Qt, Run them on Windows, Mac, Linux, Android, iOS and Embedded Devices",
      "objectives": [
        "The fundamentals of working with Qt to build C++ Gui Applications",
        "Working with Qt Widget Classes",
        "Working with Dialog Classes",
        "Using the Qt Resource System",
        "Styling Qt Applications",
        "Working with Networks to fetch HTTP Data",
        "Working with the File System",
        "Model View Architecture"
      ],
      "course_content": {
        "Getting Started": [
          "Important Notice: PLEASE READ!",
          "Getting Started",
          "Get Help (Fast)",
          "Installing & Tools on Windows",
          "Teaser : Build your First Qt Gui App in 10 minutes!",
          "Installing & Tools on Linux",
          "Join the Official Support Channels",
          "Qt-An Overview of Qt Creator and Tooling (Compilers,Debuggers)",
          "About Qt Technologies"
        ],
        "C++ Beginner Crash Course": [
          "Your First C++ console Program",
          "Streams-Input and Output",
          "C++ Variables and Data Types",
          "C++ Operators and Flow Control",
          "C++ Demo Game Program : Guess My Number",
          "Qt5.12 With srand()",
          "C++ Functions",
          "C++ Classes Part 1 of 3",
          "C++ Classes Part 2 of 3",
          "C++ Classes Part 3 of 3",
          "Your First Qt Gui Application",
          "Demo-Guess Numbers Gui"
        ],
        "Signals And Slots": [
          "C++ Lambda Basics",
          "Connecting Signals to Slots : 3 Different Ways",
          "Demo -Your Try on Signals and Slots"
        ],
        "A Tour of Qt Widgets": [
          "QWidget Class Part 1 of 2",
          "QWidget Class Part 2 of 2",
          "QMainWindow Class",
          "QMessageBox Class",
          "QPushButton Class",
          "QLineEdit Class",
          "QTextEdit Class",
          "QLabel Class",
          "Qt Layouts",
          "QHBoxLayout",
          "QVBoxLayout",
          "Size Policy and Stretches",
          "QGridLayout",
          "QCheckBox and QRadioButton Classes",
          "The QList Class : Store your Objects in a List",
          "QComboBox Class",
          "QListWidge Class",
          "QTabWidget Class",
          "Menus and Toolbars : QAction, QMenu, QToolbar"
        ],
        "Working With Dialogs": [
          "QDialog Part 1 of 2",
          "QDialog Part 2 of 2",
          "QDialogButtonBox",
          "QMessageBox",
          "File Dialogs",
          "Font Dialog",
          "Color Dialog",
          "QInputDialog"
        ],
        "Working with Resources": [
          "The Qt Resource System Explained",
          "Working with Resource Files in your Qt Application"
        ],
        "Styling your Qt Applications": [
          "An Overview on Qt Styling Offerings",
          "QPalette Used Right",
          "Working with Style Sheets",
          "Style Sheets in External Files",
          "Demo : Doing More with Style Sheets"
        ],
        "Working with Settings": [
          "QSettings Explained",
          "Working with QSettings in Qt App"
        ],
        "Working with Files and Directories": [
          "QFile: Reading and Writting Files",
          "QDir : Manipulating Directories"
        ],
        "Model View Architecture Framework": [
          "Introduction to the Model View Framework of Qt",
          "Your first try on QModelIndexes",
          "Working with QFileSystemModel",
          "Working with QStandardItemModel",
          "Working with QStringListModel",
          "Building your Custom Model",
          "Working with Roles in the Model",
          "Notifying the view of Changes in the Model",
          "Managing View Header Data",
          "QStandardItem API and QSelectionModel"
        ]
      },
      "requirements": [
        "Basic knowledge of working with Computers",
        "Open mind and strong willingness to learn how to build Qt C++ Gui applications",
        "Basic understanding of programming will be useful but not required"
      ],
      "description": "Important note : There is an update of this  course to Qt 6. If  you're just starting out, that's what you should take. Take this if you have a specific reason to target Qt 5.\nThis course will take you from zero to a level where you can write any Qt C++ Gui application you may want. It is aimed at complete beginners but people with varying levels of experience wishing to learn Qt C++ Gui will equally find it useful.\nQt is second to none in the field of building cross platform GUI application based on C++. It can currently be used to build software that runs on virtually any platform out there: Windows, Mac, Linux, Android, IOS and even embedded systems. You basically build your software once and all you have to do is build it for your desired platform and voila !\nThe course starts with a complete beginner to both C++ and Qt in mind, and we take  you through the the process of getting your environment set up on your platform of choice :\nWe do a live install of Qt Creator on Windows\nWe do a live install of Qt Creator on Linux\nWe guide you though how you would install Qt Creator on a Mac\nWe guide you through Qt Creator showing you the tools that work together to get your application built\nWe then take you on a tour of the C++ programming language, covering the concepts deemed important to start working with Qt to build your shinny GUI applications. You don't need to be a C++ wizard to start writing your applications using Qt. One of the goals behind Qt itself is to be as easy to use as possible, helping you to focus on your application logic rather than the C++ complex plumbing. This does not mean that you can do with zero C++ knowledge though. That's why we take you on a tour to cover the basic concepts of the language covering topics like:\nRunning your first console application and understanding the main function\nStreams that help you write and read data from your C++ applications\nVariables and Data Types\nBasic C++ Operators and Control flow where among other things you learn about if clauses and loops\nBuild an app to guess numbers and put together the concepts learned so far\nC++ Functions\nC++ classes\nBuilding your first Qt C++ GUI Application\nBuilding a GUI Version of your Number guessing game\nWe then visit the fascinating concept signals and slots in Qt where  you learn the most flexible way to respond to events :\nWe'll explore lambda functions in C++ in general, we'll need them to use their SIGNAL SLOT syntax\nWe explore different ways to connect signals to slots in Qt\nWe then do a concept enforcing demo for you to try them out\nNext we dive in the Qt Widgets section and visit some of the most important widget classes in Qt :\nQWiget\nQMainWindow\nQMessageBox\nQPushButton\nQLineEdit\nQTextEdit\nQLabel\nQHBoxLayout, QVBoxLayout, QGridLayout\nWe visit size policies and stretches and how they help tie the knots in  your layouts\nQCheckBox and QRadioButton\nQList\nQComboBox\nQListWidget\nQTabWidget\nQMenu, QToolBar, QAction\nDialogs are explored next , we look at QDialog and how to build  your own custom dialog class from scratch , QDialogButtonBox, QMessageBox, QFontDialog, QFileDialog, QInputDialog and how they add a layer of interactivity to your Qt GUI applications.\nWe then go on and explore how to work with the Qt Resource System , Styling your Qt applications with QStyle, QPalette and Style Sheets, Saving your application settings with QSetting, Working with Files and Directories using QFile and QDir and we wrap up the course with a tour of the network capabilities of Qt where we :\nSee the different classes that are available to work with networks in Qt\nBuild an application to download web pages in our Qt Applications\nBuild an application to consume Rest APIs in your Qt Applications\nThis course was designed to help you succeed in becoming a Qt Gui application developer regardless of your current level of expertise. The only requirement is to bring in an open mind and a strong willingness to learn. Now, please check out some of the preview videos andl let's get you STARTED building cross platform GUI applications using Qt.",
      "target_audience": [
        "Anyone willing to Build Cross Platform Gui Software using Qt",
        "Complete Beginners",
        "Anyone willing to get a job building Qt Gui Applications",
        "Students and Researchers willing to use Qt Gui features in their projects"
      ]
    },
    {
      "title": "DevOps Fundamentals: Gain Solid Understanding",
      "url": "https://www.udemy.com/course/devops-fundamentals/",
      "bio": "Learn the fundamentals of DevOps including the entire software development lifecycle. Agile, Scrum, and CI/CD with Demos",
      "objectives": [
        "You will gain a solid understanding of what DevOps is all about and core concepts",
        "Gain valuable skills and concepts regarding agile, scrum framework and how is fits with DevOps",
        "Learn about Continuous Integration and Delivery and its role in DevOps",
        "Learn complete DevOps life cycle"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Meet Your Instructor and Course Structure"
        ],
        "DevOps Essentials": [
          "Software Development Lifecycle (SDLC)",
          "What is DevOps?",
          "Value of DevOps",
          "Measuring DevOps - Metrics",
          "How Agile Practice Applies to DevOps",
          "Concept of Source & Version Control",
          "DevOps Automation",
          "Kubernetes - A complete Understanding",
          "*NEW* Important DevOps Guiding Principles"
        ],
        "DevOps In Action - Putting Things In Perspective. Bringing It Together": [
          "Cluster Creation In Action - Google Cloud Platform & Kubernetes",
          "Unified Processes Between Development & Operations",
          "Concept Of Git",
          "Continuous Integration and Delivery in DevOps",
          "Continuous Testing",
          "Configuration Management in DevOps",
          "Release Management",
          "Application Performance Management (APM)"
        ],
        "Conclusion and Learning Resources": [
          "Course Conclusion",
          "Deep Dive Kubernetes Architecture",
          "DevOps Salary Survey Latest",
          "DevOps Best Practices",
          "Difference Between CI-CD: AWS DevOps CodePipeline",
          "Understanding DevSecOps"
        ]
      },
      "requirements": [
        "You should be able to use a PC at beginner level",
        "Basic knowledge of software and hardware including IT Networking fundamentals"
      ],
      "description": "DevOps Fundamentals: Gain Solid Understanding (Updated Course - New Lectures Added)\n\nDevOps is the union of people, process, and products to enable the continuous delivery of value to end users. It aims to create a culture and environment where building, testing, and releasing software can happen rapidly, frequently, and more reliably, so you can innovate like a startup and scale for the enterprise. By taking this introductory DevOps course, you’ll be able to define DevOps, understand why you need DevOps, and learn how you can get started with DevOps. You’ll learn the key ideas and techniques to bring development and operations together to produce higher-quality software and deliver it more quickly.\nLearning Objectives\nAfter completing this course, you will be able to:\nDefine DevOps and describe its value, history, and building blocks.\nDescribe how to unify processes and improve collaboration between development and operations.\nIdentify areas to consider when incorporating DevOps practice for continuous improvement.\nExplain the key concepts and benefits of Continuous Integration (CI), continuous testing, and continuous deployment.\nIdentify tools and practices for implementing CI, testing, and continuous deployment.\nExplain the key concepts and benefits of Release Management, configuration management, and monitoring in DevOps.\nIdentify tools and practices for implementing Release Management, configuration management, and monitoring.\nThank you and see you in class.\nSyed",
      "target_audience": [
        "Anyone who wants to learn about DevOps",
        "Beginner, Intermediate, or Expert level developers",
        "Project Managers and Consultants",
        "Network professionals, engineers, and network analysts",
        "Quality Assurance Testers"
      ]
    },
    {
      "title": "Git by Example",
      "url": "https://www.udemy.com/course/git-version-control/",
      "bio": "Learn Git for teamwork and error control, in the terminal and a visual interface",
      "objectives": [
        "Acquire one of the most important skills for software development",
        "Fully understand how Git works, instead of just having a high-level knowledge of it",
        "Learn about branches, merging, and merge conflicts",
        "Use remote repositories with GitHub to store your code",
        "Learn about the industry-standard GitFlow workflow for managing branches and contributions"
      ],
      "course_content": {
        "What is version control?": [
          "What is Version Control?",
          "We will be learning Git",
          "Markdown and the README.md file",
          "What is the .gitignore file?",
          "The structure of a repository"
        ],
        "Basics of the terminal": [
          "What is the terminal?",
          "Moving around the file system using the terminal",
          "Moving and copying files with the terminal",
          "Displaying and replacing file contents",
          "Basics of VIM - a very powerful text editor!",
          "Inserting text in VIM"
        ],
        "Basics of Git": [
          "Configuring Git",
          "Initialising a Git repository: git init",
          "Initialising a Git repository (terminal video)",
          "Adding files to the staging area: git add",
          "Adding files to the staging area (terminal video)",
          "Committing files to the local repository: git commit",
          "Committing files to the local repository (terminal video)",
          "Writing appropriate commit messages: this is VITAL if working in teams!",
          "Adding a remote to your repository",
          "Pushing and pulling to and from the remote repository",
          "Pushing and pulling (terminal video)"
        ],
        "Branches and workflows": [
          "What is a branch?",
          "Creating branches in Git",
          "Creating branches (terminal video)",
          "Pushing branches to origin",
          "Bringing in branches from origin",
          "Deleting local and remote branches",
          "Merging branches: presentation",
          "Merging branches (terminal video)",
          "Reverting changes: git revert and git reset",
          "Reverting changes (terminal video)",
          "What is the \"Gitflow\" workflow?"
        ],
        "Gitflow and SourceTree": [
          "Using SourceTree to initialise a git-flow repository",
          "Creating our first Gitflow feature",
          "Finishing (and publishing) our first feature",
          "Stashing changes with SourceTree",
          "Adding remotes in SourceTree",
          "Cloning a remote repository in SourceTree",
          "Bonus lecture"
        ]
      },
      "requirements": [
        "A computer running Windows, Mac OS, or any Linux distribution",
        "The free Git software, which I show you how to install"
      ],
      "description": "Git is an essential skill for all team members of a technology company. In order to survive, technology companies are increasingly depending on continuous delivery to give customers a better experience. Git or other methods of Version Control are necessary in order to do this.\n\nGit is necessary for teamwork, organisation, and management of projects. It is much easier to work when all team members can immediately see code changes and can follow what others have done.\nIt’s difficult to go wrong with Git. You can always roll back if someone deletes code, changes the structure of your project, or sends out incomplete code. Everyone makes mistakes, but when using Git properly, no mistake is fatal.\nToday we will make sure you get familiar, understand, and then master the extremely popular Version Control system called Git. This was originally used in the Linux project, so it is lightweight, but able to cope with the largest of projects.\nThroughout the course we will learn:\nWhat is Version Control, a gentle introduction for those not familiar with it.\nMarkdown: what it is and how to use it.\nThe basic structure of a repository. Vital to understand how everything works on a low level.\nUsing the terminal/console properly.\nUsing VIM, a great text editor within the console. We will use this to write commit messages when not using a GUI.\nConfiguring Git. We will get it to work on any system.\nBasic Git commands that you will use in every project you are part of: git add, git commit, git push, git pull, git fetch.\nWriting meaningful commit messages. This is vital, so that everyone looking at the project can see what’s going on.\nBranches. What are branches?\nOrganising branches via the Gitflow workflow. Ensuring your project has a great and easy to work with structure.\nMerging two branches together.\nDealing with merge conflicts. We won’t have many of these!\nUsing SourceTree for Git outside an IDE.\nNow you can acquire a vital and in-demand skill to boost your CV and development abilities, help your team deliver working software, and make companies love you.",
      "target_audience": [
        "Software developers of any level",
        "Project managers wanting to understand how the software development workflow goes",
        "Anyone wanting to read and understand software development projects"
      ]
    },
    {
      "title": "Projects in Hadoop and Big Data - Learn by Building Apps",
      "url": "https://www.udemy.com/course/projects-in-hadoop-and-big-data-learn-by-building-apps/",
      "bio": "A Practical Course to Learn Big Data Technologies While Developing Professional Projects",
      "objectives": [
        "Understand the Hadoop Ecosystem and Associated Technologies",
        "Learn Concepts to Solve Real World Problems",
        "Learn the Updated Changes in Hadoop",
        "Use Code Examples Present Here to Create Your own Big Data Services",
        "Get fully functional VMs fine tuned and created specifically for this course."
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Virtual Machines for the Projects"
        ],
        "Add Value to Existing Data with Mapreduce": [
          "Introduction to the Project",
          "Build and Run the Basic Code",
          "Understanding the Code",
          "Dependencies and packages"
        ],
        "Hadoop Analytics and NoSQL": [
          "Introduction to Hadoop Analytics",
          "Introduction to NoSQL Database",
          "Solution Architecture",
          "Installing the Solution"
        ],
        "Kafka Streaming with Yarn and Zookeeper": [
          "Introduction to Kafka Yarn and Zookeeper",
          "Code Structure",
          "Creating Kafka Streams",
          "Yarn Job with Samza"
        ],
        "Real Time Stream processing with Apache Kafka and Apache Storm": [
          "Real Time Streaming",
          "Hortonbox Virtual Machine",
          "Running in Cluster Mode",
          "Submitting the Storm Jar"
        ],
        "Big Data Applications for the Healthcare Industry with Apache Sqoop and Apache S": [
          "Introduction to the Project",
          "Introduction to HDDAccess",
          "Sqoop, Hive and Solr",
          "Hive Usage"
        ],
        "Log collection and analytics with the Hadoop Distributed File System using Apach": [
          "Apache Flume and HCatalog",
          "Install and Configure Apache Flume",
          "Visualisation of the Data",
          "Embedded Pig Scripts"
        ],
        "Data Science with Hadoop Predictive Analytics": [
          "Introduction to Data Science",
          "Source Code Review",
          "Setting Up the Machine",
          "Project Review"
        ],
        "Visual Analytics with Apache Spark on Yarn": [
          "Project Setup",
          "Setting Up Java Dependencies",
          "Spark Analytics with PySpark",
          "Bringing it all together"
        ],
        "Customer 360 degree view, Big Data Analytics for e-commerce": [
          "Ecommerce and Big Data",
          "Installing Datameer",
          "Analytics and Visualizations",
          "Demonstration"
        ]
      },
      "requirements": [
        "Working knowledge of Hadoop is expected before starting this course",
        "Basic programming knowledge of Java and Python will be great"
      ],
      "description": "The most awaited Big Data course on the planet is here. The course covers all the major big data technologies within the Hadoop ecosystem and weave them together in real life projects. So while doing the course you not only learn the nuances of the hadoop and its associated technologies but see how they solve real world problems and how they are being used by companies worldwide.\nThis course will help you take a quantum jump and will help you build Hadoop solutions that will solve real world problems. However we must warn you that this course is not for the faint hearted and will test your abilities and knowledge while help you build a cutting edge knowhow in the most happening technology space. The course focuses on the following topics\nAdd Value to Existing Data - Learn how technologies such as Mapreduce applies to Clustering problems. The project focus on removing duplicate or equivalent values from a very large data set with Mapreduce.\nHadoop Analytics and NoSQL - Parse a twitter stream with Python, extract keyword with apache pig and map to hdfs, pull from hdfs and push to mongodb with pig, visualise data with node js . Learn all this in this cool project.\n\nKafka Streaming with Yarn and Zookeeper - Set up a twitter stream with Python, set up a Kafka stream with java code for producers and consumers, package and deploy java code with apache samza.\n\nReal-Time Stream Processing with Apache Kafka and Apache Storm - This project focus on twitter streaming but uses Kafka and apache storm and you will learn to use each of them effectively.\n\nBig Data Applications for the Healthcare Industry with Apache Sqoop and Apache Solr - Set up the relational schema for a Health Care Data dictionary used by the US Dept of Veterans Affairs, demonstrate underlying technology and conceptual framework. Demonstrate issues with certain join queries that fail on MySQL, map technology to a Hadoop/Hive stack with Scoop and HCatalog, show how this stack can perform the query successfully.\n\nLog collection and analytics with the Hadoop Distributed File System using Apache Flume and Apache HCatalog - Use Apache Flume and Apache HCatalog to map real time log stream to hdfs and tail this file as Flume event stream. , Map data from hdfs to Python with Pig, use Python modules for analytic queries\n\nData Science with Hadoop Predictive Analytics - Create structured data with Mapreduce, Map data from hdfs to Python with Pig, run Python Machine Learning logistic regression, use Python modules for regression matrices and supervise training\n\nVisual Analytics with Apache Spark on Yarn - Create structured data with Mapreduce, Map data from hdfs to Python with Spark, convert Spark dataframes and RDD’s to Python datastructures, Perform Python visualisations\n\nCustomer 360 degree view, Big Data Analytics for e-commerce - Demonstrate use of EComerce tool ‘Datameer’ to perform many fof the analytic queries from part 6,7 and 8. Perform queries in the context of Senitment analysis and Twiteer stream.\n\nPutting it all together Big Data with Amazon Elastic Map Reduce - Rub clustering code on AWS Mapreduce cluster. Using AWS Java sdk spin up a Dedicated task cluster with the same attributes.\n\n\n\nSo after this course you can confidently built almost any system within the Hadoop family of technologies. This course comes with complete source code and fully operational Virtual machines which will help you build the projects quickly without wasting too much time on system setup. The course also comes with English captions. So buckle up and join us on our journey into the Big Data.",
      "target_audience": [
        "Students who want to use Hadoop and Big Data in their Workplace and want to learn the implementation details for big data technologies."
      ]
    },
    {
      "title": "Object Oriented Programming and Design Crash Course",
      "url": "https://www.udemy.com/course/object-oriented-programming-design-course/",
      "bio": "Learn the core features and the best practices of Object Oriented Programming",
      "objectives": [
        "Why Object Oriented Object isn't analogous to a real-world object",
        "Object as a container for behavior and state",
        "Objects vs Data Structures",
        "What Composition is and how it works in a big codebase",
        "What Inheritance is and why it's not about code reuse",
        "Favor Composition over Inheritance rule and when it doesn't apply",
        "The importance of good naming",
        "Object Oriented Design best practices",
        "The most useful Design Patterns and their respective use cases"
      ],
      "course_content": {
        "Introduction": [
          "The Main Goal of Object Oriented Programming",
          "Udemy Review System"
        ],
        "Object": [
          "Real World Object vs OOP Object",
          "Object vs Class",
          "The Importance of Object's State",
          "Responsibility",
          "Single Responsibility Principle",
          "OOP Object Summary"
        ],
        "Composition": [
          "Composition Introduction",
          "Composition Goals and Benefits",
          "Composition Challenges",
          "Dependency Injection",
          "Composition Summary"
        ],
        "Inheritance": [
          "Inheritance Introduction",
          "Inheritance in Statically vs Dynamically Typed Languages",
          "The Main Benefit of Inheritance in OOP",
          "Inheritance and Code Reuse",
          "Favor Composition over Inheritance",
          "Inheritance Summary"
        ],
        "Object Oriented Design": [
          "Object Oriented Programming vs Object Oriented Design",
          "Large System Problem",
          "Abstractions",
          "Naming",
          "Objects vs Data Structures",
          "Uniquely Identifiable Entities",
          "Object Oriented Design Summary"
        ],
        "Design Patterns": [
          "Introduction",
          "Observer Design Pattern",
          "Facade Design Pattern",
          "Strategy Design Pattern",
          "Singleton Design Pattern",
          "Design Patterns Summary"
        ],
        "Course Summary": [
          "Course Summary"
        ]
      },
      "requirements": [
        "Basic experience with at least one Object Oriented programming langugage"
      ],
      "description": "Most top programming languages today support Object Oriented Programming: Python, Java, TypeScript, etc. It's a powerful paradigm that helps you write clean code and handle the complexity of the modern sofware development.\nIn this course, you'll master the core principles of Object Oriented Programming and learn to design clean, reliable and maintainable Object Oriented systems. These tools will make you a more productive developer and open a new, intriguing perspective into the realm of software design.\nYou'll learn:\nWhat an Object is: adopt the right Object Oriented mindset and treat objects as containers for state and behavior.\nCore Principles of Object Oriented Programming: understand Encapsulation, Abstraction, Composition, Inheritance and Polymorphism, which are the backbone of Object Oriented Programming.\nDependency Injection: learn how Dependency Injection architectural pattern enables proper use of Composition in real projects.\nObject Oriented Design: leverage higher-level Object Oriented principles to design software, focusing on creating modular and maintainable systems.\nDesign Patterns: discover the most useful Design Patterns and undestand their role in addressing common technical tasks quickly and efficiently.\nThis course was designed for professional developers who want to know Object Oriented Programming and Object Oriented Design at a fundamental level. From beginners, to experienced programmers, everyone will find new practical insights in this material.\nCome join me on this epic journey into the depths of Object Oriented Programming and Design in this course!",
      "target_audience": [
        "Software developers who use Object Oriented programming langugages"
      ]
    },
    {
      "title": "#2 Scrum Product Owner -A Practical Guide For Product Owners",
      "url": "https://www.udemy.com/course/product-owner-a-practical-way-to-scrum-product-ownership/",
      "bio": "Product Owner Masterclass : Essential Skills for Product Owner, Scrum FW from Product Owner Viewpoint + Short PO Quiz",
      "objectives": [
        "Straightaway Play the Role of Product Owner in Scrum Teams",
        "Earn the Scrum Product Owner Certificate (You will receive a certificate after completion of the course and Quiz)",
        "Understand and teach scrum basics to your team.",
        "Manage product in an agile environment.",
        "Lean the Practical skills to succeed in the role of Product Owner.",
        "You will know how to plan your day for different product owner activities.",
        "You will clearly understand how to adjust your execution style based on organisation expectation from product owner role.",
        "You will know the product backlog structure.",
        "Know \"How to get the highest value from the scrum team?\"",
        "You will understand clearly product owner career path.",
        "What NOT to do as a Product Owner",
        "You will know the required theory as well as real-life industry experience behind scrum product ownership."
      ],
      "course_content": {
        "Introduction": [
          "What are we going to cover as part of this course?",
          "Who is a Product Owner?",
          "Course Material For Download"
        ],
        "Scrum Framework": [
          "What is Scrum?",
          "Scrum Roles",
          "Scrum Events",
          "Artifacts",
          "Definition of Done and Acceptance Criteria",
          "Scaling",
          "Terminology",
          "Scrum Glossary"
        ],
        "Key Interfaces and Meetings for the role of Product Owner": [
          "Interaction and interfaces of a Product Owner",
          "My Interfaces Template for Download",
          "What meeting to be arranged by Product Owner and Why are those needed?",
          "Personal Note",
          "Product Backlog Identification Meeting",
          "Product Backlog Refinement Meeting",
          "Technical Sync With Product Manager",
          "Customer Feedback Gathering",
          "PO Sync"
        ],
        "Role and Key Tasks of A Product Owner": [
          "Role of Product Owner in each scrum events",
          "Role of Product Owner in product vision",
          "Role of Product Owner in product road-map",
          "Role of Product Owner in release planning",
          "Backlog structure and phases of backlog",
          "A typical day schedule for a Product Owner",
          "Minimum Viable Product (MVP) - What can you do as a Product Owner?",
          "7 things that you should NOT do as a Product Owner?"
        ],
        "Expectation and Skills required for Product Owner role in detail": [
          "What is the Role of Product Owner from the prospective of Agile Manifesto?",
          "6 Must-have Skills To Be A Good Product Owner",
          "Product Owner Job Profile As Per Industry Standard"
        ],
        "Product Owner Career related questions": [
          "Product Owner Career Ladder",
          "Can product owner and scrum master be same?",
          "What is the difference between product owner and product manager?"
        ],
        "Quiz for Practical Product Owner Role": [
          "Must Read Before You Start The Quiz",
          "Quiz for Practical Product Owner Role"
        ],
        "Conclusion": [
          "Summary",
          "Bonus Lecture: You as A Product Owner - Master the Practical Skills Needed"
        ]
      },
      "requirements": [
        "Absolutely NO expertise on Product Management required to get started with this course.",
        "If you are working in IT, Telecom or related sector for 5-6 years then you are good to go.",
        "An open mind, ready to learn and practice"
      ],
      "description": "Welcome to The Practical Product Owner (PO) Course. In this Agile world, the scrum product owner is a critical responsibility and it needs to be played well for the success of the organization.\n\n\nIn this course, I will provide you the real-world skills and experience which are needed to excel in the role of Agile Product Owner.\n\n\nWhy should you take this course?\nAfter taking this course you will be able to implement the techniques and skills right away and excel in the role of the product owner.\nYou will have Lifetime Access to all video lectures and all your queries/doubts will get a detailed answer if required with an additional video tutorial also!!\n\n\nWho should take this course?\nThis course is for anyone who wants to play the role of Product Owner in a Scrum project.\nOr who is aspiring for the role of Product Owner\n\n\nContent and overview\nThe course covers all concepts which are required for a product owner in a scrum project. Below are the topics covered as part of this agile product owner course\n\n\nOverview of Scrum framework: As part of this section we cover the concept of the scrum roles, scrum events, definition of done(DoD), acceptance criteria, scaling of the scrum, etc.\n\n\nKey Interfaces and Meetings for the role of Product Owner: In this section, we are discussing the stakeholders with whom the Product Owner needs to interact on a daily basis. And also we are discussing different meetings that need to be hosted by the Product Owner with a special focus on product backlog refinement meeting.\n\n\nRole and Key Tasks of A Product Owner: This section is dedicated to discussing the role of Product Owner in defining the product vision, product road-map and release management. Also, we're covering a day's schedule of a product owner, product backlog structure and minimum viable product.\n\n\nExpectation and Skills required for Product Owner role in detail: Here we are discussing the Product Owner job profile as per industry standard.\n\n\nProduct Owner Career-related questions: This section is dedicated to informing about the career path of the product owner. Also here we are addressing the common confusions like\nAre the product owner and scrum master the same?\nWhat is the difference between a product owner and product manager?\n\n\nSo this course covers almost everything required to perform the role of Product Owner well and progress in your career.\n\n\nYou can get a full refund within 30 days and no question asked if you didn't like the course.\nSo, what are you waiting for? Enroll now and demystify the Product Owner role!!!",
      "target_audience": [
        "New Product Owners, who want to excel in their role",
        "Product Owners who want to refine their approach as per organisation expectation and create more value",
        "Scrum masters who are aspiring for the product owner role.",
        "Anyone who want to understand about the pratical approach to product ownership in scrum framework."
      ]
    },
    {
      "title": "Windows Service Programming, Debugging, Installing in C#.Net",
      "url": "https://www.udemy.com/course/windows-service-programming/",
      "bio": "Windows Service Tutorial: How to Create Windows Services in C# .Net/Visual Studio, Windows Service debugging techniques",
      "objectives": [],
      "course_content": {
        "Introduction to Windows Service Programming in C#": [
          "Introduction to Windows Service Programming in C#",
          "What are Windows Services",
          "Windows service statuses, start-up types, and login accounts",
          "Difference between console applications and Windows Services",
          "Basic concepts about Windows Services"
        ],
        "Windows Service Programming in C# .Net Primer": [
          "Your first Windows Service Visual Studio C# .Net Project",
          "Adding an installer, Service Process Installer & Service Installer in C# .Net",
          "Brief overview of the Windows service code in C# .Net",
          "Demo: Installing the service with InstallUtil.exe in Windows",
          "Demo: Events logged related to Windows Service in the Event Viewer in Windows",
          "Uninstall a Windows Service",
          "Windows Service Programming Primer"
        ],
        "Windows Service Debugging Techniques in Visual Studio and C# .Net": [
          "Launching debugger on service runtime",
          "Attach debugger to an already running process",
          "Why add a text logging library?",
          "Apache Log4Net Library: add a reference & setup config file",
          "How to write information to text log file with Debug and Error methods",
          "Demo: Using Log4Net logging library in Windows Service",
          "Debugging Windows Services"
        ],
        "Practical usages of Windows Service": [
          "Creating a Periodic Data Update Windows Service in Visual Studio & C# .Net",
          "Demo: Periodic Data Update Windows Service in C# .Net",
          "Creating a File System Watcher Windows Service in Visual Studio & C# .Net",
          "Demo: File System Watcher File Synchronization Windows Service in C# .Net"
        ],
        "Advanced Windows Service Programming": [
          "Change service settings in config file to change service behavior on start",
          "Exploring the Windows Service config file XML",
          "Interacting with Windows Service using ServiceController in C# .Net",
          "Using ServiceController to Start/Stop a Windows Service in C# .Net"
        ],
        "Installing a Windows Service with Inno Setup": [
          "Install a Windows service with SC.exe from command prompt",
          "Introduction to InnoSetup free installer building toolkit software",
          "Creating a Windows Service installer with Inno Setup",
          "Demo: This is how the installer works(nothing technical)",
          "Bonus: Introduction to TCP/IP socket programming in C# .Net for coders & student"
        ]
      },
      "requirements": [
        "Basic C# .Net programming language"
      ],
      "description": "This course teaches you how to create Windows services in Visual Studio in C# .Net. Multiple techniques to debug a Windows Service in Visual Studio. Windows Services are a vital component of the Microsoft Windows operating system.\nThe course is divided into various sections.\nIntroduction to Windows Service Programming in C#\nYou will learn the definition and anatomy of a Windows Service application. In the past, NT service was used for a Windows Service. You will also understand the difference between a Windows Service and other application types like console applications. This section is not dependent on any programming language like C#.Net or C++. Finally, you will learn what Windows Service Control Manager(SCM) is and how to run it from the run prompt. SCM shows a Windows Services List.\nWindows Service Programming in C# .Net Primer\nIn section two, you will create a new Windows Service project in Visual Studio and utilize installation to install or uninstall a Windows Service. InstallUtil comes bundled with the .Net framework. Next, I'll show you what Windows Service Control Manager is. What are Windows Service statuses, login types, and service startup types? A Windows server service is the same as a Windows NT service.\nAfter this, you will open the Windows Event Viewer to see the events generated by your newly born service.\nWindows Service Debugging Techniques in Visual Studio and C# .Net\nSection three will teach you how to debug a C# .Net-based Windows Service program in Visual Studio.\nTechniques for setting breakpoints and getting inside the C# .Net code to add watches for debugging will be shown.\nYou will also see how to integrate the Apache Log4Net logging library into your C# .Net Windows Service project. Apache Log4Net is a free & open-source library that lets you generate rolling log files based on the Log4J library.\nPractical Use of Windows Service\nIn the next section, you will look into a few real-world scenarios like a file synchronization Windows service with FileSystemWatcher and a periodic data update service(similar to an ETL) with System.Threading.Timer. File sync-type services were once top-rated among password synchronization applications for updating domain passwords into online portals based on password filter-related events.\nAdvanced Windows Service Programming\nThe following section concerns changing values in Windows Service configuration(app. config) and using the .Net framework ServiceController class. This section will create an admin application for a Windows Service. This application will be able to start/stop service and get service status as well. We will use C# .Net and WinForms for this purpose. The concepts shown herein will apply to WPF applications as well.\nInstalling a Windows Service with Inno Setup\nThe last section was added on student demand. It is about creating an installer to install Windows Service on a client machine. We will use the free software InnoSetup for this purpose. Then, A Windows service is a program that runs in the background of a Windows operating system and performs specific tasks. It is designed to start automatically when the computer boots up and can operate without any user interaction. Windows services are typically used to provide functionality to other programs or to perform system-level tasks. They can be managed through the Windows Services console, which allows users to start, stop, pause, and resume services as needed. Overall, Windows services are an essential part of the Windows operating system and help to ensure that it runs smoothly and efficiently. I'll show you how to use SC.exe to perform Windows Service control-related operations from the command line. It is mandatory to know how to create a Windows service command line using the SC command. I will also show you how to install a Windows service without installation.\nCreating & maintaining Windows Services in C# .Net is easier than C++-based services. Windows Services are run not only on Windows Servers but on desktop machines. Their usefulness is universal.\nWindows Services is an advanced C# and OS concept. I learned Windows Service programming the hard way, on my own. You can take advantage of my experience and learn it quickly by joining this course. So sign up, and I will see you inside!\n\n\nIt is possible to create a Windows Service in VB .Net too but it is not recommended.",
      "target_audience": [
        "Fresh or experienced programmers with little to no experience in C# .Net Windows Service programming",
        "Programming students who want to learn how background services work"
      ]
    },
    {
      "title": "AWS Serverless REST APIs for Java Developers. CI/CD included",
      "url": "https://www.udemy.com/course/aws-serverless-rest-apis-for-java-developers/",
      "bio": "Build Serverless REST APIs with Java. AWS Lambda, Amazon API Gateway, AWS SAM, AWS Developer Tools.",
      "objectives": [
        "REST API and its design principles",
        "Building Serverless REST APIs in AWS with Java",
        "Amazon API Gateway",
        "Build and deploy API with AWS SAM",
        "AWS Lambda",
        "Implement User Sign-up, Sign-in and Conformation features",
        "Amazon Cognito",
        "Learn to use Cognito Authorizers",
        "Implement custom Lambda Authorizer to validate JWT",
        "Learn to Encrypt & Decrypt sensitive environment variables",
        "Learn to use API Keys and Usage Plans",
        "Unit Test AWS Lambda functions",
        "AWS CI/CD",
        "AWS CodeCommit, AWS CodeBuild, AWS CodePipeline"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Welcome from the instructor"
        ],
        "Introduction to REST API": [
          "What is an API?",
          "Introduction to REST API",
          "REST API Resources & URIs",
          "API Operations and HTTP methods"
        ],
        "Introduction to AWS Serverless": [
          "The multi-tier architecture and Microservices",
          "AWS Serverless services overview",
          "AWS Serverless architecture example"
        ],
        "AWS API Gateway": [
          "Introduction",
          "Import from Swagger or Open API 3",
          "Method execution flow overview",
          "Method request overview",
          "Integration request overview",
          "Integration response overview",
          "Method response overview",
          "Trying how it works"
        ],
        "Creating Mock API Endpoints": [
          "Introduction",
          "Creating a new API",
          "Creating a new Resource",
          "Creating HTTP Method",
          "Returning Mock Data",
          "Path parameter",
          "Reading the path parameter",
          "Query String Parameters",
          "Reading Query String Parameter in a Mapping template",
          "Deploying Mock API",
          "Documenting API"
        ],
        "Exporting API": [
          "Introduction",
          "Export API and Test with Swagger",
          "Export API with Gateway Extensions",
          "Export API and Test with Postman"
        ],
        "Validating HTTP Request": [
          "Introduction",
          "Validating Request Parameters & Headers",
          "Validating Request Body - Creating a Model.",
          "Associate Model with HTTP Request",
          "Validating Request Body - Trying how it works."
        ],
        "Introduction to Lambda": [
          "Function as a Service(SaaS)",
          "Lambda function & other Services",
          "Anatomy of a Java Lambda function handler",
          "Lambda Execution Environment",
          "Cold start, warm start & provisioned concurrency",
          "Pricing"
        ],
        "Create Java Lambda using Maven and IDE": [
          "Introduction",
          "Creating new Maven project",
          "Adding Maven dependencies",
          "Maven Shade Plugin",
          "Creating Lambda function",
          "Reading Request returning Response",
          "Creating function in AWS Console",
          "Deploying Lambda function",
          "Testing Lambda function with Input Template",
          "Create new API project",
          "Assigning Lambda function to API Endpoint"
        ],
        "AWS SAM - Tools to create & deploy Lambda functions": [
          "Introduction",
          "Creating a new IAM User",
          "Installing AWS SAM",
          "Installing AWS CLI",
          "Configure AWS Credentials on your computer",
          "[Updated] Creating a new project with SAM",
          "Refactor project to use a different name",
          "Read User Details JSON and return HTTP Response",
          "SAM template file overview",
          "SAM template - Resources",
          "SAM template - Outputs",
          "The event.json file",
          "Install Docker",
          "Invoke Remote Lambda function from local computer",
          "Debug Lambda function locally",
          "Deploy Lambda function to AWS",
          "Invoke public API Endpoint",
          "Viewing logs",
          "Delete AWS SAM application"
        ]
      },
      "requirements": [
        "Basic knowledge of Java",
        "AWS Account"
      ],
      "description": "AWS Serverless is probably the quickest way to build a very stable REST APIs that scale to serve millions of users. A very simple Mock API can be created and deployed in minutes. An API that uses AWS Lambda compute service will take longer but how much longer will depend on the business logic that you need to write.\nIn this video course, you will learn what is REST API and how to create one using AWS Serverless Services.\nYou will learn in detail how to use Amazon API Gateway to create REST APIs, and AWS Lambda Compute Service to execute business logic. The course is designed for absolute beginners, so you do not need to have any experience with AWS Serverless.\nBy the end of this course, you will be able to:\n\nCreate RESTful API endpoints,\nBuild and deploy API with AWS SAM,\nValidate HTTP request body and request parameters,\nTransform HTTP request body into a different model,\nTransform HTTP response JSON into a different one,\nDeploy APIs into different stages,\nPerform Canary Release Deployments and shift traffic between different versions of APIs,\nPublish multiple versions of Lambda functions and shift traffic between these functions,\nDocument and Export REST API,\nImplement User Sign-up with Amazon Cognito,\nLearn to use Cognito Authorizer to control who can access your API in Amazon API Gateway,\nImplement custom Lambda Authorizer that validates JWT,\nSecure API endpoints with API Keys and learn to configure requests Throattling and Quota,\nUnit Test AWS Lambda functions,\nBuild CI/CD Pipeline using AWS CodeCommit, AWS CodeBuild and AWS CodePipeline developer tools.\nIf you want to learn how to build REST APIs quickly, without starting, configuring, and managing any servers, then this course is for you.",
      "target_audience": [
        "Beginner Java developers interested in learning how to build Serverless REST APIs in Amazon Cloud"
      ]
    },
    {
      "title": "DYDX Pairs Trading Bot Build in Python Running in the Cloud",
      "url": "https://www.udemy.com/course/dydx-pairs-trading-bot-build-in-python-running-in-the-cloud/",
      "bio": "Develop an advanced decentralised trading bot which runs on AWS and sends private messages to your Telegram account",
      "objectives": [
        "Develop an end-to-end decentralised trading bot using Python",
        "Interact with automating Telegram messages directly from your bot",
        "Run your code directly in the cloud 24/7 using AWS",
        "Discover cryptocurrencies which are strongly linked for pairs trading",
        "Learn how to statistically arbitrage cryptocurrencies on the DYDX decentralised platform",
        "Learn about Pairs Trading for absolute beginners",
        "Work with GitHub and manage a virtual private machine in the cloud via Amazon Web Services"
      ],
      "course_content": {},
      "requirements": [
        "Basic programming experience using Python and experience in debugging your own code",
        "Have used GitHub to submit and download code in the past",
        "Understand what a crypto wallet and private key are and general basic knowledge of cryptocurrencies",
        "No experience in Pairs Trading is needed"
      ],
      "description": "Learn how to interact with the DYDX Layer 2 Ethereum trading exchange using Python by running a trading bot on AWS Elastic Cloud Compute (EC2). Your bot will be highly advanced in trading in being able to take advantage of statistical arbitrage opportunities in Pairs Trading. This is a great strategy to know given how closely linked many cryptocurrencies are in price behaviour.\n\n\nYour bot will be able to message you via Telegram so that you can receive live notifications on how well the script is performing (or not performing). It will enable you to:\n\n\n- Automatically close all existing open positions\n- Find cointegrated (linked Crypto pairs) for trading and ascertain whether statistically it makes sense to open a trade\n- Manage any open positions and look for exits\n- Find and place new trading opportunities\n- Alert you if something goes wrong\n- Run your bot without your laptop whilst you sleep\n\n\nOur Python code will interact heavily with the DYDX API and to ensure you understand how to use the API, a cheatsheet has been provided to fast-track you onto being able to use DYDX.\n\n\nTo do this course, you should have used Python in the past, having created and installed packages in a virtual environment and be familiar with basic programming concepts.\n\n\nThat said, you do NOT need to be an advanced Python programmer or advanced trader to do this course. Our strategy uses statistical arbitrage for Pairs Trading, of which you will be walked through the strategy and theory in the beginning in reasonable detail so you understand the nature of what is going on.\n\n\nSee you in Class!\n\n\nAbout Your Instructor: Shaun McDonogh has been developing tools for traders for over 5 years at Crypto Wizards and is very close to where the action is in regards to trading Crypto. Shaun's passion is developing applications and teaching others and is delighted to bring this information to the retail market.",
      "target_audience": [
        "Near-beginner, intermediate or advanced Python developers who want to work on an interesting project",
        "Crypto enthusiasts who have very basic programming experience",
        "Trading enthusiasts who have very basic programming experience",
        "Both experienced traders or programmers who want to learn an advanced and objective trading strategy",
        "Coders and traders from the Crypto Wizards community"
      ]
    },
    {
      "title": "Learn Unit Testing with NUnit and C#",
      "url": "https://www.udemy.com/course/unit-testing/",
      "bio": "Learn unit testing, TDD, mocking and Dependency Injection: techniques that you'll need to build reliable software.",
      "objectives": [
        "Write Unit Tests",
        "Run and Debug Unit Tests",
        "Write Manual Mocks",
        "Write Mocks with Mocking Framework",
        "Practice Test-Driven Development (TDD)",
        "Apply Best Practices of Writing Unit Tests"
      ],
      "course_content": {
        "Before taking the Course": [
          "How to Ask Questions",
          "Download Source Code and Slides",
          "English Subtitles",
          "Join .NET Community of Students"
        ],
        "Getting Started": [
          "Outline",
          "What is a Unit Test?",
          "Unit-Testing Frameworks",
          "Your First Unit Test",
          "Naming Conventions",
          "Running and Debugging Unit Tests",
          "Benefits of Unit Testing",
          "Who Should Write Unit Tests and When",
          "Programmer's Oath",
          "Exercise: Degree Converter",
          "Solution: Degree Converter",
          "Conclusion"
        ],
        "NUnit Framework": [
          "Outline",
          "Assert Introduction",
          "Assert Demo",
          "Arrange-Act-Assert",
          "Running Tests from the Console",
          "SetUp and TearDown",
          "OneTimeSetUp and OneTimeTearDown",
          "Parameterized Unit Tests",
          "Grouping and Ignoring Unit Tests",
          "Code Coverage",
          "Exercise: FizzBuzz",
          "Solution: FizzBuzz",
          "Exercise: Roman Numerals",
          "Solution: Roman Numerals",
          "Exercise: Stack",
          "Solution: Stack",
          "Conclusion"
        ],
        "Test Doubles": [
          "Test Doubles and Dependency Injection",
          "Outline",
          "Demo of a Testing Problem",
          "Refactoring to Make Code Testable",
          "Test Doubles",
          "Hand Rolled or Manual Test Doubles",
          "Problems with Manual Test Doubles",
          "Mocking Frameworks",
          "Writing Unit Tests with a Mocking Framework",
          "NSubstitute Mocking Framework. Key Features. Demo",
          "Detroit School vs London School of Unit Testing",
          "Conclusion"
        ],
        "Test-Driven Development": [
          "Outline",
          "What is TDD?",
          "Red \\ Green \\ Refactor",
          "TDD and Design Upfront",
          "Regular Agile Process in 200 Words",
          "VS and R# Shortcuts",
          "Refactoring Commands Built-In VS 2017",
          "Fibonacci Numbers",
          "Three Main TDD Techniques",
          "Grabbing the Gold",
          "FizzBuzz",
          "Reading Roman Numerals",
          "UpdateableSpin",
          "Continuous Testing",
          "Tic-Tac-Toe (Crosses and Noughts)",
          "Assert First",
          "TDD Demo - Game in Sticks",
          "Conclusion"
        ],
        "Best Practices of Unit Testing": [
          "Outline",
          "Do Unit Tests Guarantee the Success?",
          "Pragmatic Unit Testing",
          "Integration Tests",
          "Singletons and Static Classes",
          "Header Interfaces",
          "Demo of Refactoring to a Testable Design",
          "How Much Test Coverage is Enough?",
          "Testing Trivial Code",
          "The Rule of Testing a Single Concern",
          "More on Best Practices",
          "Generating Unit Test Method Signatures",
          "Conclusion",
          "Final Quiz",
          "BONUS LECTURE"
        ],
        "Appendix. Intro to Dependency Injection": [
          "Outline",
          "Definition of DIP",
          "Dependencies",
          "Volatile and Stable Dependencies",
          "Definition of IoC and DI",
          "DIP Violation Demo",
          "Refactoring to a Better Design",
          "Dependency Injection Techniques",
          "Architectural Implications",
          "Common Smells of DIP Violation",
          "Conclusion"
        ],
        "Appendix. Intro to DI. IoC-Containers": [
          "Outline",
          "Pure DI and IoC-Containers",
          "Building a Simple IoC-Container",
          "Service Locator",
          "Demo with an IoC-Container",
          "Conclusion"
        ]
      },
      "requirements": [
        "You should already be familiar with the basics of C#"
      ],
      "description": "Learn deeply the concepts and tools that you will need to build maintainable and reliable software.\nTeaching Approach\nNo fluff, no ranting, no beating the air. I respect your time. The course material is succinct, yet comprehensive. All important concepts are covered. Particularly important topics are covered in-depth.\nTake this course, and you will be satisfied.\nBuild a solid foundation in Unit Testing with this course\nThis course is all about writing effective unit tests using C# programming language and NUnit as a unit testing framework. Along the way, we will learn the concepts related to unit testing. Today unit testing is an absolutely required skill from any professional developer. Companies expect from developers to know how to write unit tests including all the most important topics such as mocking and test driven development (TDD in short). This course does not cover all the features of NUnit. This course is way more interesting.\nLearning unit testing puts a powerful and very useful tool at your fingertips. Being familiar with unit testing you can write reliable and maintainable applications. It is very hard to lead a project which is not covered by unit tests.\nContent and Overview\nThis course is primarily aimed at beginner developers. It provides solid theoretical base reinforced by tons of practical material.\nWe start with basics of unit testing. What is a unit test? What unit testing frameworks exist? How to run and debug unit tests. After getting acquainted with the basics, we will get to the NUnit framework. Here you’ll learn how to install the framework, set the runner. Then you’ll learn the basics of assertions and arrange-act-assert triplet. Other key features of NUnit are also covered:\nRunning tests from the console\nSetup and teardown unit tests\nParameterized tests\nGrouping and ignoring\nPracticing writing of unit tests, it’s impossible to avoid applying mocks. I like the word “test double” more, in general. By the way, you’ll learn what the difference between the following notion is:\nTest double\nFake\nDummy\nStub\nMock\nYou’ll learn how to write test doubles manually. You will also see a simple example of how to use a mocking framework for using mocks. I’ll use NSubstitute mocking framework for demonstration.\nAt the end of this section, you’ll get acquainted with two key approaches to unit testing, Classic or Detroit School and London School of unit testing.\nYou’ll separately learn the basic of test-driven development. It is hard to imagine a modern professional developer who doesn’t know about TDD, so you’ll learn what it is and what it is about. You’ll see the Red-Green-Refactor triplet in action.\nI could not complete the course avoiding the best practices of writing unit tests. You’ll learn the basic concepts of the modern approach to unit testing called “pragmatic unit testing”. You’ll see what problems static classes and singletons bring regarding the unit testing. They make code harder to unit test. After that, you’ll learn the problem of extracting interfaces just for the sake of introducing shims for injecting dependencies.\nYou’ll know should you write unit tests for the trivial code. You’ll learn a lot more in the course.\nSo, in short, the course covers the following topics:\nBasic notions of Unit Testing\nNUnit and its features\nTest Doubles including fakes, dummies, stubs, spies and mocks\nHow to write manual test doubles and how to use a mocking framework  (NSubstitute)\nTDD, red-green-refactor triplet\nA great number of best practices of writing unit tests\nIntroduction to Dependency Injection\nIn the end, we will recap what you have learned, and you will try to understand where you have to go further with the intention to master your skills.\nHow long is this course: The course is around 7.5 hours. All are video lectures. You will be able to download all the slides and code samples used in the course.\n------------------------------------------------------------\nKeywords related to the course:\nVisual Studio unit testing tutorial\nNUnit unit testing tutorial\nDot Net testing framework\nC# unit test framework\nVisual Studio unit testing framework tutorial\ncsharp unit testing tutorial\nTDD in C#\nNSubstitute\nTDD\nTest Driven Development\nunit testing C#",
      "target_audience": [
        "Beginners who want to write better code",
        "Anyone who is interested in Unit Testing"
      ]
    },
    {
      "title": "Mastering CI/CD with TeamCity and Octopus Deploy",
      "url": "https://www.udemy.com/course/mastering-cicd-with-teamcity-and-octopus-deploy/",
      "bio": "Continuous Integration and Delivery (CI/CD) with TeamCity and Octopus Deploy from absolute beginner to advanced",
      "objectives": [
        "Installing TeamCity on Windows, Linux (Ubuntu) and Mac",
        "Installing Octopus Deploy to Windows and Linux (Ubuntu)",
        "Creating and Managing Flexible Build Projects in TeamCity",
        "Triggering Automated Builds",
        "Checking and Approving Pull Requests",
        "Pushing TeamCity Artefacts to Octopus Deploy",
        "Creating Flexible Deployment Projects in Octopus Deploy",
        "Using Life Cycles and Channels to Control Deployments",
        "Using Variables, Variable Scopes and AWS/Azure Accounts",
        "Tenants and Tenanted Deployments in Octopus Deploy"
      ],
      "course_content": {
        "Introduction": [
          "Continuous Integration and Delivery with TeamCity and Octopus Deploy"
        ],
        "TeamCity Level 1": [
          "Architecture of TeamCity",
          "Installing TeamCity on Windows",
          "Installing TeamCity on Ubuntu",
          "Installing TeamCity on Mac",
          "About TeamCity Build Agents",
          "Installing TeamCity Build Agent on Windows",
          "Installing TeamCity Build Agent on Ubuntu (Linux)",
          "Projects in TeamCity",
          "Build Configurations in TeamCity",
          "Build Steps",
          "Build Artefacts",
          "Parametrising Build Configurations Part 1",
          "Parametrising Build Configurations Part 2"
        ],
        "Octopus Deploy Level 1": [
          "About Octopus Deploy",
          "Installing Octopus Deploy on Windows",
          "Working with Environments in Octopus Deploy",
          "Installing Octopus Deploy Tentacles on Windows",
          "Installing Octopus Deploy Tentacles on Ubuntu (Linux)",
          "Working with Packages in Octopus Deploy",
          "Preparing TeamCity Artefact for Octopus Deploy",
          "Publishing TeamCity Artefacts to Octopus Deploy",
          "Defining the Deployment Process",
          "Deploying Projects",
          "Working with Variables in Octopus Deploy",
          "System Variables in Octopus Deploy"
        ],
        "TeamCity Level 2": [
          "Cloud Build Agents in TeamCity",
          "Build Triggers",
          "Working with Build Features in TeamCity",
          "Connecting to GitHub via SSH Keys",
          "Users, Groups and Roles in TeamCity",
          "Logging to TeamCity using Google (Open Authentication)"
        ],
        "Octopus Deploy Level 2": [
          "Controlling Deployments with Life Cycles",
          "Controlling Package Deployments with Channels",
          "Tenants and Tenanted Deployments",
          "Transforming Configuration Files",
          "Connecting to AWS and Azure using Accounts",
          "Working with Filters in Octopus Deploy",
          "Users, Roles, Groups and Audits in Octopus Deploy"
        ]
      },
      "requirements": [
        "No pre-requisite is needed"
      ],
      "description": "Are you interested in learning about Continuous Integration and Delivery (CI/CD) using the powerful combination of TeamCity and Octopus Deploy? Look no further than this comprehensive course on Udemy!\n\n\nWith TeamCity and Octopus Deploy, software development teams can launch their CI/CD ecosystem quickly and efficiently, just like Microsoft, NASA, and Stackoverflow (the three users of Octopus Deploy) did.\n\n\nThis course is designed for developers and DevOps engineers who want to learn the essential skills of Continuous Integration and delivery skills.\n\n\nThe course is structured into four sections, starting with the basics and progressing to more advanced topics. You'll begin with TeamCity Level 1, designed for beginners, before moving on to Octopus Deploy Level 1 for a quick and easy launch of your CI/CD. From there, TeamCity Level 2 and Octopus Deploy Level 2 cover more advanced topics such as Life Cycles, Cloud Support, and Channels.\n\n\nNo prior knowledge about TeamCity, Octopus Deploy, or CI/CD is required, and you don't need an AWS or Azure account to get started. You can set up everything on your local machine, making it easy to follow.\n\n\nThis course teaches you how a CI/CD system is implemented and how to deploy one for free without requiring a license if you follow the architecture offered in this course. It was produced by a CI/CD expert who implemented CI/CD with TeamCity and Octopus Deploy for many renowned companies.\n\n\nDon't miss out on the opportunity to master CI/CD with TeamCity and Octopus Deploy—enroll in this course today and take your skills to the next level!",
      "target_audience": [
        "All developers e.g. Java, .NET, PHP etc"
      ]
    },
    {
      "title": "How To Become An Outstanding Solution Architect",
      "url": "https://www.udemy.com/course/how-to-become-an-outstanding-solution-architect/",
      "bio": "Learn all the soft and hard skills you need to take your architect design skills to the next level",
      "objectives": [
        "What is a solution architect?",
        "Soft skills that will make you a great architect",
        "Common pitfalls in large IT projects",
        "Master architectural patterns",
        "A hands-on case study to hone your skills",
        "Learn Unified Modeling Language",
        "Design for quality attributes",
        "Design for deployment and testing",
        "... and much more!"
      ],
      "course_content": {
        "Introduction": [
          "Course Introduction"
        ],
        "The Architect And The Team": [
          "Section Introduction",
          "Software Team Roles",
          "The Functional Analyst",
          "The Lead Developer",
          "The Solution Architect",
          "Section Recap",
          "Test Your Skills",
          "Hands On - Assessing Your Team",
          "Hands On - My Homework",
          "You've Earned A New Badge",
          "Your Skill Progress"
        ],
        "What Makes A Great Architect?": [
          "Section Introduction",
          "The Architect Job Description",
          "Responsibilities Of Great Architects",
          "Personality Traits Of Great Architects",
          "Common Pitfalls For Architects",
          "Section Recap",
          "Test Your Skills",
          "Hands On - Discover Your Strengths And Weaknesses",
          "Hands On - My Homework",
          "You Have Earned New Badges",
          "Your Skill Progress"
        ],
        "Designing A Software Architecture": [
          "Section Introduction",
          "What Is A Software Architecture?",
          "Key Principles Of Software Architectures",
          "Guidelines For Software Architectures",
          "Introduction To UML",
          "Seven Popular UML Diagrams",
          "Designing Architectures With UML",
          "The Process For Designing Architectures",
          "Section Recap",
          "Test Your Skills",
          "Hands On - Introducing Our Case Study",
          "Hands On - My Homework",
          "You Have Earned A New Badge",
          "Your Skill Progress"
        ],
        "Architecture Design Patterns": [
          "Section Introduction",
          "Layered Architecture Patterns",
          "Structural Architecture Patterns",
          "Presentation Architecture Patterns",
          "Service Architecture Patterns",
          "Hybrid Architecture Patterns",
          "Section Recap",
          "Test Your Skills",
          "Hands On - Create The Baseline Architecture",
          "Hands On - My Homework",
          "You Have Earned A New Badge",
          "Your Skill Progress"
        ],
        "Designing Layers, Components, And Services": [
          "Section Introduction",
          "Choosing The Right Patterns",
          "Designing Layered Architectures",
          "Designing Component Architectures",
          "Designing Service-Oriented Architectures",
          "Section Recap",
          "Test Your Skills",
          "Hands On - Create A Candidate Architecture",
          "You Have Earned New Badges",
          "Your Skill Progress"
        ],
        "Architecture Considerations": [
          "Section Introduction",
          "Design Quality Attributes",
          "Runtime Quality Attributes",
          "Planning For Caching",
          "Planning For Exceptions",
          "Planning For Deployment",
          "Section Recap",
          "Test Your Skills",
          "Hands On - Plan For Quality Attributes",
          "You Have Earned New Badges",
          "Your Skill Progress"
        ],
        "In Conclusion": [
          "Final Words",
          "Course Recap",
          "Bonus Offer"
        ]
      },
      "requirements": [
        "You need a Windows, Mac or Linux laptop",
        "You should be a beginner, intermediate, or advanced IT professional",
        "Optional: Knowledge of C# and .NET - this course is language-agnostic!",
        "Optional: Visual Studio 2017 Ultimate for creating UML diagrams",
        "Optional: Rational Rose for creating UML diagrams",
        "If you don't have Visual Studio or Rational Rose, you can use a free online UML design tool",
        "That's it!"
      ],
      "description": "Last updated on November 21, 2017 - added homework results\nAre you a developer, or a lead developer, or a solution architect in an IT project team? Would you like to learn how to become an outstanding solution architect?\nThe solution architect is the person who creates the high-level abstract technical design of the entire solution, and this design is then handed over to the the development team for implementation. The architect is responsible for all technology decisions in the project. This is an extremely important role.\nThe job also has a really nice pay, it comes with a lot of responsibility, and you get to talk to pretty much everybody in the organization, including the executives and the CEO. This is an extremely high-level and important function to be in.\nWould you like to learn how to become an outstanding architect?\nLet me help you!\nI will teach you all the skills you need to become an outstanding solution architect. I will not only teach you how to create an awesome architecture design, but I will also teach you all the soft skills you will need to really shine in this role and make an impression on your peers.\nThis course contains a lot of material to get you on your way. We'll cover how the architect operates in an IT team, which soft skills are required to become an outstanding architect, and which extra responsibilities you can take on to really make an impression on your peers.\nI will teach you how to create great architectures, we will discuss all common architecture design patterns, and I will also show you how to design these patterns in UML. And we're going to look at all important quality attributes and architecture concerns. Finally, we'll take a closer look at caching, exception management, and deployment scenarios.\nWhy should you take this course?\nAre you preparing for a job interview? Or are you in a large IT project right now? Are you the lead developer and do you wish to become a solution architect? Or are you already an architect and want to take your skills to the next level? Then this is the course for you!",
      "target_audience": [
        "Beginner, intermediate, and advanced IT professionals who want to learn how to become an outstanding solution architect",
        "Professionals who are about to take an architect job interview and need to prepare",
        "Solution architects in large IT projects who want to brush up their skills"
      ]
    },
    {
      "title": "Getting Started with .NET Core SignalR",
      "url": "https://www.udemy.com/course/getting-started-with-net-core-signalr/",
      "bio": "Real-Time Development with SignalR",
      "objectives": [
        ".Net C# Programming",
        "Real-Time Programming",
        "SignalR",
        "Web Sockets"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Required Software"
        ],
        "SignalR Demo Application": [
          "Demo Application Project Setup",
          "Add SignalR Client Libraries",
          "Create a Hub",
          "Add SignalR to Startup",
          "Import Client Side SignalR Libraries",
          "SignalR Client Connectivity",
          "Dependency Injection HubContext",
          "Server To Client Launch Mvc",
          "Broadcast From Client",
          "Client Side Connect to Hub",
          "Client To Server Launch Mvc",
          "Commit Demo App"
        ],
        "SignalR Real-Time Chat App": [
          "Add MVC Chat Project",
          "Define Chat Models",
          "Apply Database Migrations",
          "SignalR Client Side Libraries",
          "Chat Controller and Secure View",
          "Chat Page Client Libraries",
          "Chat Index Page Part 1",
          "Chat Index Page Part 2",
          "Chat Index Page Part 3",
          "Chat Hub Dependency Injection",
          "BroadcastToClient Hub Method",
          "Connected Disconnected Async",
          "Chat Client Part 1",
          "Chat Client Part 2",
          "Broadcast Event Handler",
          "Connected Event Handler",
          "Launch And Test Chat App",
          "Commit Chat to GitHub"
        ]
      },
      "requirements": [
        "Basic Programming Background",
        "Visual Studio",
        "Sql Server",
        "Software",
        ".NET Core SDK"
      ],
      "description": "Get Started with .NET Core SignalR!\nAre you a student or professional in the field of software engineering or maybe contemplating an educational or career move to the software engineering world? Have you been looking for a quick and easy way to get up and running with .NET Core coupled with SignalR Real-Time Development and don't want to go through an overwhelming amount of material just to get your environment setup and ready for building your own apps that interact with data? Don't worry as THIS IS THE COURSE FOR YOU!\nIn my course, I will teach you how to get your environment setup for .NET Core SignalR, and help you to build your first set of apps that apply Real-Time Development through a step-by-step guided approach.\n\nTake this course and feel proud of the fact that you will be one step closer towards the rewarding field of Software Engineering using .NET technologies!",
      "target_audience": [
        "Students and Professionals who want to master SignalR"
      ]
    },
    {
      "title": "AWS Identity Access Management (IAM) Practical Applications",
      "url": "https://www.udemy.com/course/aws-identity-access-management-practical-applications/",
      "bio": "Learn IAM User, Group, Policy, Roles and AWS Organization to solve real world problems. Lots of hands on demo!",
      "objectives": [
        "Fundamentals of AWS Identity & Access Management",
        "IAM User, Group, Policy and Roles",
        "IAM use cases and when to apply IAM solutons",
        "AWS Organization",
        "IAM Best Practices",
        "Learn how to learn more about IAM"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "IAM Primer",
          "IAM Primer Quiz"
        ],
        "IAM Users and Groups": [
          "IAM User",
          "IAM User Quiz",
          "Create an IAM User",
          "Real World Users",
          "My Use Cases",
          "Access Key",
          "Access Key Quiz",
          "Use Access Key and AWS CLI to access your account resources",
          "IAM Group",
          "IAM Group Quiz",
          "Create IAM Group and Add IAM Users"
        ],
        "IAM Policy": [
          "IAM Policy Introduction",
          "IAM Policy Quiz",
          "IAM Policy Structure",
          "IAM Policy Structure Quiz",
          "Statement ID",
          "Statement ID - SID Quiz",
          "Effect",
          "Statement Element - Effect Quiz",
          "Action",
          "Action Quiz",
          "AWS Service Action Reference",
          "Resource",
          "Resource Quiz",
          "Condition",
          "Principal",
          "Principal Quiz",
          "Policy statement with Principal"
        ],
        "IAM Role": [
          "Assuming IAM Role",
          "Assuming IAM Role",
          "Assume IAM Role",
          "Cross Account Access using Role",
          "IAM User Cross Account Access using IAM Role",
          "Federated Access using Role",
          "Federated Access using Role"
        ],
        "IAM Full Picture": [
          "AWS Organization",
          "AWS Organization Quiz",
          "Policy Evaluation Logic",
          "IAM Best Practice",
          "Summary"
        ]
      },
      "requirements": [
        "AWS account to follow along the demo",
        "Basic understanding software & IT",
        "Familiarity with JSON"
      ],
      "description": "Welcome to Amazon Web Service’s Identity and Access Management course with focus on practical application to solve real word problems.  The goal of this course is to give you hands on knowledge to use on your AWS project. By the end of this course, you will have skills to know how to build solutions using IAM and more importantly why you should apply certain design patterns to solve your problems.\nThe course is designed to start with the basic IAM building blocks that build upon one another towards more advanced concepts. There are a lot of demonstrations with quizzes and exercises to help you learn by doing. The major topics include IAM User, Group, Policy, Roles and AWS Organization Service. This course includes a lot of demonstrations on how to apply these features in the real world use cases such as tag based policy, cross account roles, federated access and much more.\nThis course is intended for a technical audience with some familiarity with AWS. Ideal learners are software engineers, solution architects and anyone who is building solutions in AWS. There is no prerequisite other than your curiosity and willingness to learn.",
      "target_audience": [
        "Developers",
        "Solution Architect",
        "Anyone building on AWS"
      ]
    },
    {
      "title": "Data Visualization with Kibana",
      "url": "https://www.udemy.com/course/data-visualization-with-kibana/",
      "bio": "Visualize and analyze data with Kibana, part of the ELK stack (Elasticsearch, Logstash & Kibana) and Elastic Stack.",
      "objectives": [
        "Fundamentals of Kibana",
        "Securing Kibana (users, roles, and spaces)",
        "Creating basic & advanced visualizations",
        "Kibana Query Language (KQL)",
        "Creating and interacting with dashboards",
        "Reporting and Alerting"
      ],
      "course_content": {
        "Getting Started": [
          "Introduction to the course",
          "Introduction to Kibana",
          "Overview of installation options",
          "Running Elasticsearch & Kibana in Elastic Cloud",
          "Setting up Elasticsearch & Kibana on macOS & Linux",
          "Setting up Elasticsearch & Kibana on Windows",
          "Activating trial license",
          "The Console tool",
          "Adding index templates",
          "Importing test data",
          "Introduction to the test data",
          "Creating data views",
          "Data views used to be called index patterns"
        ],
        "Introduction to the interface": [
          "Overview of apps",
          "Setting the time filter",
          "Kibana Query Language (KQL)",
          "Discover app",
          "Saving queries",
          "Inspecting requests",
          "How Kibana handles time zones",
          "Changing Kibana’s time zone"
        ],
        "Visualizations": [
          "Introduction to visualizations",
          "Introduction to aggregations",
          "Updates to the user interface",
          "Metric visualization",
          "Formatting numbers",
          "Vertical Bar",
          "Area chart",
          "Line chart",
          "Changing the chart type",
          "Pie chart",
          "Splitting with KQL filters",
          "Working with numeric ranges",
          "Working with dynamic ranges (histograms)",
          "Customizing visualizations",
          "Data tables",
          "Heat maps",
          "Tag clouds",
          "Goals & Gauges",
          "Linking visualizations to saved searches",
          "Applying saved queries to visualizations"
        ],
        "Dashboards": [
          "Introduction to dashboards",
          "Creating a dashboard",
          "Editing visualizations",
          "Filtering documents",
          "Inspecting panels",
          "Creating the access logs dashboard",
          "Interactivity",
          "Drilldowns"
        ],
        "Users, Roles & Spaces": [
          "Introduction",
          "Enabling security features",
          "Introduction to spaces",
          "Copying objects between spaces",
          "Creating and managing users",
          "Introduction to roles",
          "Configuring privileges with custom roles",
          "Combining space and role privileges",
          "How role privileges are merged",
          "Wrap up"
        ]
      },
      "requirements": [
        "Basic understanding of Elasticsearch"
      ],
      "description": "Are you a software developer, and do you want to learn Kibana? Then look no further — you have come to the right place! This course is the best way for you to quickly learn Kibana and put your knowledge to use within just a few hours. Forget about watching countless of YouTube tutorials, webinars, and blog posts; this course is the single resource you need to learn Kibana. In fact, this is by far the most comprehensive course on Kibana you will find!\nSo what is Kibana, and why should you take the time to learn it? Kibana is part of the ELK stack (Elasticsearch, Logstash, Kibana) and the Elastic Stack. It's often referred to as the window into Elasticsearch. With Kibana, you can visualize the data stored within an Elasticsearch cluster. This includes everything from running ad hoc queries, creating visualizations such as line charts and pie charts, and displaying data on dashboards. Kibana enables you to easily interact with your data, providing a much better experience than writing Elasticsearch queries. Slicing and dicing data is easy, and navigating between different datasets can be done without losing context. As such, Kibana is an excellent tool for data analysis, exploration, and investigation. Dashboards are a key feature, enabling us to provide ourselves and teams with overviews of relevant data. For instance, we could create a dashboard for a sales department, and another for software engineers.\nKibana is also commonly used for monitoring data, for instance in the context of observability. By using Kibana and the Elastic Stack for observability, you can gain insight into the performance of applications (APM), monitor service uptime, keep an eye on hardware and service utilization, etc. Apart from that, Kibana is also frequently used for security analysis and managing machine learning jobs.\nNeedless to say, Kibana is an incredibly powerful tool for visualizing, analyzing, and monitoring Elasticsearch data.",
      "target_audience": [
        "Developers wanting to work with and visualize Elasticsearch data"
      ]
    },
    {
      "title": "Implementing Software Architecture of a Large-Scale System",
      "url": "https://www.udemy.com/course/implementing-software-architecture/",
      "bio": "A hands-on approach to Software Solution Architecture of large-scale systems using modern methods & open source products",
      "objectives": [
        "Understand through code, the architectural challenges of developing large-scale systems - Scalability, Reliability, Deployment, Observability",
        "Code implementation of various tools and technologies used for making large-scale systems - Redis, RabbitMQ, Netflix, Fluentd, Elasticsearch, Kubernetes & more",
        "Downloadable code along with configuration, scripts and instructions to run a mini system on your laptop and on a cloud environment",
        "A practical demonstration of how systems are scaled and operated on both On-Premises environment and in Cloud environments"
      ],
      "course_content": {
        "Course Overview": [
          "Introduction",
          "Course Overview",
          "Course Content Pdf"
        ],
        "Work Environment Setup": [
          "Work environment",
          "Create Linux workstation VM on cloud",
          "Build code",
          "Workstation VM backup"
        ],
        "System Components - Languages & Frameworks": [
          "System components overview",
          "Running the system on cloud Linux VM",
          "Web app architecture and technology selection",
          "Python Django web app code overview",
          "Services architecture",
          "Services technology selection",
          "Java SpringBoot services code overview",
          "Database technology selection",
          "Postgres RDBMS schema overview",
          "Single page app technology selection",
          "ReactJS SPA architecture"
        ],
        "Docker Containers - Isolating component dependencies and environment": [
          "Why containerize application components?",
          "System with docker containers",
          "Dockerize django webapp",
          "Docker compose for automation",
          "Dockerize postgres database",
          "Dockerize java springboot services",
          "Dockerize reactjs single page app",
          "Running all dockerized components",
          "Running system with docker network",
          "Docker network and volumes",
          "System review with docker containers"
        ],
        "Microservices - Gateway, Discovery & Load Balancing": [
          "Client routing challenge & Gateway services",
          "Netfix Zuul gateway service code and configuration",
          "Running system with Netfliz Zuul gateway service",
          "Static routing challenge & Discovery services",
          "Netflix Eureka discovery service code and configuration",
          "Running system with Netflix Eureka discovery service",
          "Client based & Server based Load balancing",
          "Netflix Ribbon load balancer code and configuration",
          "Running system with Nginx & Ribbon load balancers"
        ],
        "Centralized Logging with Elasticsearch, Fluentd & Kibana (EFK stack)": [
          "System Observability - Logging, Tracing and Monitoring",
          "Logging challenges in large-scale systems",
          "Centralized logging architecture",
          "Incrementing VM capacity",
          "Configuration of Elasticsearch, Fluentd & Kibana (EFK stack)",
          "Observing system with Elasticsearch, Fluentd, Kibana stack"
        ],
        "Distributed Tracing with Uber Jaeger": [
          "Tracing challenges in large-scale systems",
          "Distributed tracing architecture",
          "Distributed tracing with Uber Jaeger",
          "Distributed tracing core mechanism",
          "Uber Jaeger instrumentation code and configuration",
          "Observing API latency using Jaeger tracing"
        ],
        "Metrics Monitoring with Prometheus": [
          "Metrics for large-scale systems",
          "Exposing application component metrics for Prometheus",
          "Prometheus configuration for metrics",
          "Observing system metrics through Prometheus"
        ],
        "Data Caching with Redis Cache": [
          "Challenges of high request and data volume",
          "Caching for managing read only load",
          "Caching technology selection",
          "Service code changes for Redis cache",
          "Redis cache configuration",
          "Running system with Redis cache"
        ],
        "Asynchronous Processing with RabbitMQ": [
          "Managing write only load for Async workflows",
          "Messaging queue technology selection",
          "Service code changes for RabbitMQ",
          "RabbitMQ configuration",
          "Running system with RabbitMQ"
        ]
      },
      "requirements": [
        "A little knowledge of Java will be helpful in understanding code. If you do not know Java, then a good experience with any other modern programming language will also do.",
        "Familiarity with very basic Linux shell commands and scripting will be helpful. If you haven't worked on Linux, then a good scripting experience on any other platform will also do."
      ],
      "description": "The best way to learn software development is to write code. The best way to learn software architecture is to build and run a system. This is exactly what you are going to do as part of this course!\nThis course is the next in the series of Developer to Architect courses. The previous course 'Software Architecture & Technology of Large-Scale Systems' was focused on the concepts and principles of software architecture that govern modern large-scale systems.\nThis course 'Hands-On Implementation of Large-Scale Software Architecture', is focused on implementing those software and solution architecture principles in a mock large-scale system (mini system or simply minisys) by using open source technologies.\nIt starts with a downloadable code base of a mini system. We evolve this mini system into a full-fledged large-scale system implementation as we move along with the course. Our goal is to learn the typical architectural challenges that are faced by any large-scale system and solve these challenges using modern tools, technologies, and methods.\nYou can learn about these challenges and their solutions by actually working on a live system. For the same, you can download a mini system code-base provided by NewTechWays on Bitbucket or Github. You can follow the instructions to download, build and run this codebase. Although the instructions and code automation is platform-agnostic, this course will make use of Google Cloud Platform using a Linux machine as our test environment for building and running the system. Later we will put our system in a Production kind of environment using Kubernetes on Google Cloud Platform.\nAs we move along with this course we will cover the following architectural challenges and use the following technologies as their solutions:\n3 Tier Application\nWebapp – Python Django\nRESTful Service – Java Spring Boot\nDatabase – PostgreSQL & Cassandra\nSPA - ReactJS\nContainerization of System\nDocker Containers\nDocker Compose\nRequest Routing in Microservices\nDiscovery – Netflix Eureka\nGateway – Netflix Zuul\nClient-Side Load Balancer – Ribbon\nServer-Side Load Balancer - Nginx\nSystem Observability\nLogging – Elasticsearch, Fluent, Kibana\nTracing - Jaeger\nMonitoring & Alerts – Prometheus\nLarge-scale Data Management\nCaching - Redis\nAsynchronous Processing - RabbitMQ\nHorizontal Data Partitioning - Cassandra\nProduction Deployment\nCloud Deployment – Kubernetes on GCP\nAuto-scaling – Kubernetes\nHigh Availability - Kubernetes\nRolling Upgrades - Kubernetes",
      "target_audience": [
        "Developers and Architects who want to learn the fine details of architecting large-scale systems"
      ]
    },
    {
      "title": "Apache Spark 3 & Big Data Essentials in Scala",
      "url": "https://www.udemy.com/course/spark-essentials/",
      "bio": "Learn practical Big Data with Apache Spark DataFrames, Datasets, RDDs and Spark SQL, hands-on, in Scala",
      "objectives": [
        "apply Spark big data principles",
        "practice Spark DataFrames operations with 100+ examples and exercises",
        "practice type-safe data processing with Spark Datasets",
        "work with low-level Spark APIs with RDDs",
        "use Spark SQL for data processing",
        "migrate data from various data sources, including databases"
      ],
      "course_content": {
        "Welcome": [
          "Welcome!",
          "How to Make the Best out of This Course",
          "Scala Recap",
          "Spark First Principles"
        ],
        "Spark Structured API: DataFrames": [
          "DataFrames Basics",
          "DataFrames Basics: Exercises",
          "How DataFrames Work",
          "Data Sources",
          "Data Sources, Part 2 + Exercises",
          "DataFrames Columns & Expressions",
          "Columns & Expressions: Exercise",
          "DataFrame Aggregations",
          "DataFrame Joins",
          "DataFrame Joins: Exercise"
        ],
        "Spark Types and Datasets": [
          "Working with Common Spark Data Types",
          "Working with Complex Spark Data Types",
          "Managing Nulls in Data",
          "Type-Safe Data Processing: Datasets",
          "Datasets, Part 2 + Exercise"
        ],
        "Spark SQL": [
          "Spark as a \"Database\" with Spark SQL Shell",
          "Spark SQL",
          "Spark SQL: Exercises"
        ],
        "Low-Level Spark": [
          "RDDs",
          "RDDs, Part 2 + Exercise"
        ],
        "Epilogue": [
          "You Rock!"
        ]
      },
      "requirements": [
        "Scala fundamentals, at the level of the Rock the JVM beginners course",
        "Scala advanced - implicits"
      ],
      "description": "In this course, we will learn how to write big data applications with Apache Spark 3 and Scala. You'll write 2000+ lines of Spark code yourself, with guidance, and you will become a rockstar.\nThis course is for Scala programmers who are getting started with Apache Spark and big data. The course is not for advanced Spark engineers.\nWhy Spark in Scala:\nit's blazing fast for big data\nits demand has exploded\nit's a highly marketable skill\nit's well maintained, with dozens of high-quality extensions\nit's a foundation for a data scientist\nI like to get to the point and get things done. This course\ndeconstructs all concepts into the critical pieces you need\nselects the most important ideas and separates them into what's simple but critical and what's powerful\nsequences ideas in a way that \"clicks\" and makes sense throughout the process of learning\napplies everything in live code\nThe end benefits are still much greater:\na completely new mental model around data processing\nsignificantly more marketable resume\nmore enjoyable work - Spark is fun!\nThis course is for established programmers with experience with Scala and with functional programming at the level of the Rock the JVM Scala beginners course. I already assume a solid understanding of general programming fundamentals.\nThis course is NOT for you if\nyou've never written Scala code before\nyou don't have some essential parallel programming background (e.g. what's a process/a thread)\nThe course is comprehensive, but you'll always see me get straight to the point. So make sure you have a good level of focus and commitment to become a badass programmer.\nI believe both theory and practice are important. That's why you'll get lectures with code examples, real life code demos and assignments, plus additional resources, instructions, exercises and solutions. At the end of the course, you'll have written thousands of lines of Spark.\nI've seen that my students are most successful - and my best students work at Google-class companies - when they're guided, but not being told what to do. I have exercises waiting for you, where I offer my (opinionated) guidance but otherwise freedom to experiment and improve upon your code.\nDefinitely not least, my students are most successful when they have fun along the way!\nSo join me in this course and let's rock the JVM!",
      "target_audience": [
        "Future data scientists",
        "Programmers getting into the field of Big Data",
        "Engineers wanting to learn Spark in Scala, its native language"
      ]
    },
    {
      "title": "Introduction to Platform Engineering",
      "url": "https://www.udemy.com/course/introduction-to-platform-engineering/",
      "bio": "Master the key concepts and frameworks of the emerging discipline of Platform Engineering",
      "objectives": [
        "Platform Engineering Principles",
        "Technologies you need to learn to become a Platform Engineer",
        "How to build an Internal Developer Platform",
        "Why are companies adopting Platform Engineering",
        "Platform Engineers vs DevOps Engineers vs SREs",
        "How to get a job in Platform Engineering"
      ],
      "course_content": {
        "Introduction": [
          "Introduction to Platform Engineering"
        ],
        "What is Platform Engineering?": [
          "From DevOps to Platform Engineering",
          "Platform engineering: key definitions",
          "What does an internal developer platform look like?"
        ],
        "Platform as a Product": [
          "The key to platform engineering : product management",
          "Platform as a product is the key",
          "10 product management best practices"
        ],
        "Value of Platform Teams": [
          "Value of your platform",
          "Improve developer productivity",
          "Standardize infrastructure & increase ops efficiency",
          "Cut time to market"
        ],
        "Platform Tooling": [
          "The tools you need as a platform engineer",
          "Platform engineering blueprints",
          "Architectural patterns and best practises"
        ],
        "Different Kinds of Platform Engineers": [
          "Different kinds of platform engineers",
          "Developer experience (DevEx) platform engineer",
          "Infrastructure platform engineer"
        ],
        "Platform Engineering Industry": [
          "Platform engineering industry status quo",
          "What analysts say"
        ],
        "How To Get Started On Your Platform Engineering Journey": [
          "How to get started?"
        ]
      },
      "requirements": [
        "Basic knowledge of programming and software engineering"
      ],
      "description": "This course offers a thorough and engaging introduction to the foundational principles of platform engineering, helping you with the essential knowledge and practical skills needed to kickstart your career in this fast growing field.\nPlatform engineering is a cornerstone of modern software development, enabling organizations to build scalable, reliable, and efficient infrastructures that empower development teams. In this course, you’ll explore a wide range of key concepts, tools, and industry best practices that form the backbone of platform engineering. From mastering the basics of building internal developer platforms and understanding containerization, to delving into DevOps methodologies and different toolchains, you'll gain valuable insights into how platform engineers create robust environments that streamline and enhance the software development lifecycle.\nWhat You Will Learn:\nCore Concepts of Platform Engineering: Grasp the fundamental principles that define platform engineering and its importance in software development.\nDevOps vs. Platform Engineering: Understand the key distinctions between DevOps practices and platform engineering, and how they complement each other.\nInternal Developer Platforms: Learn what internal developer platforms are, and how they revolutionize the way teams build, test, and deploy software.\nPlatform-as-a-Product Approach: Discover the value of treating platforms as products, and how this mindset drives innovation and continuous improvement.\nThe Value of Platform Engineering: Explore how platform engineering delivers immense value by optimizing operations, reducing bottlenecks, and enhancing developer productivity.\nDifferent Types of Platform Engineers: Gain insights into the various roles within platform engineering and the skills needed for each specialization.\nEssential Tools for Platform Engineers: Get familiar with the must-have tools and technologies that every platform engineer should know.\nIndustry Status of Platform Engineering: Stay up-to-date with the current trends and developments shaping the platform engineering landscape.\nBy the end of this course, you will have a deep and practical understanding of platform engineering, enabling you to confidently take the next step in your career. Whether you're aspiring to work in innovative startups, established enterprises, or pursue opportunities as a freelancer, this course will equip you with the foundational expertise to succeed in the platform engineering field.",
      "target_audience": [
        "Beginners eager to break into platform engineering and DevOps.",
        "DevOps professionals looking to expand their knowledge of platform engineering",
        "Students interested in technology infrastructure, cloud computing, and automation",
        "Anyone curious about the role of platform engineers in modern software teams"
      ]
    },
    {
      "title": "Clean Code",
      "url": "https://www.udemy.com/course/writing-clean-code/",
      "bio": "Learn how to write readable, understandable and therefore maintainable code - step by step, in an example-driven way",
      "objectives": [
        "Learn how to write code which is readable and understandable",
        "Keep code alive by increasing maintainability with clean code",
        "Learn about key principles, rules and concepts that allow you to write clean code",
        "Learn with hands-on examples and \"bad to good code\" transformations"
      ],
      "course_content": {
        "Getting Started": [
          "Welcome to the Course!",
          "What is \"Clean Code\"?",
          "Clean Code - Key Pain Points & How To Write Clean Code",
          "How Is This Course Structured?",
          "Course Prerequisites",
          "Clean Code & Strongly Typed Languages",
          "About The Course Code Examples",
          "Join Our Learning Community!",
          "Functional, OOP, Procedural: The Course Concepts Always Apply!",
          "Clean Code, Principles & Patterns & Clean Architecture",
          "Clean Code vs Quick Code",
          "Module & Course Resources",
          "Course Setup"
        ],
        "Naming - Assigning Names to Variables, Functions, Classes & More": [
          "Module Introduction",
          "Why Good Names Matter",
          "Choosing Good Names",
          "Casing Conventions & Programming Languages",
          "Naming Variables & Properties - Theory",
          "Naming Variables & Properties - Examples",
          "Naming Functions & Methods - Theory",
          "Naming Functions & Methods - Examples",
          "Naming Classes - Theory",
          "Naming Classes - Examples",
          "Exceptions You Should Be Aware Of",
          "Common Errors & Pitfalls",
          "Demo Time!",
          "Your Challenge - Problem",
          "Your Challenge - Solution",
          "Module Resources"
        ],
        "Code Structure, Comments & Formatting": [
          "Module Introduction",
          "Bad Comments",
          "Good Comments",
          "What is \"Code Formatting\" Really About?",
          "Vertical Formatting",
          "Formatting: Language-specific Considerations",
          "Horizontal Formatting",
          "Your Challenge - Problem",
          "Your Challenge - Solution",
          "Module Resources"
        ],
        "Functions & Methods": [
          "Module Introduction",
          "Analyzing Key Function Parts",
          "Keep The Number Of Parameters Low!",
          "Refactoring Function Parameters - Ideas & Concepts",
          "When One Parameter Is Just Right",
          "Two Parameters & When To Refactor",
          "Dealing With Too Many Values",
          "Functions With A Dynamic Number Of Parameters",
          "Beware Of \"Output Parameters\"",
          "Functions Should Be Small & Do One Thing!",
          "Why \"Levels of Abstraction\" Matter",
          "When Should You Split?",
          "Demo & Challenge",
          "Stay DRY - Don't Repeat Yourself",
          "Splitting Functions To Stay DRY",
          "Don't Overdo It - Avoid Useless Extractions",
          "Understanding & Avoiding (Unexpected) Side Effects",
          "Side Effects - A Challenge",
          "Why Unit Tests Matter & Help A Lot!",
          "Module Resources"
        ],
        "Control Structures & Errors": [
          "Module Introduction",
          "Useful Concepts - An Overview",
          "Introducing \"Guards\"",
          "Guards In Action",
          "Extracting Control Structures & Preferring Positive Phrasing",
          "Extracting Control Structures Into Functions",
          "Writing Clean Functions With Control Structures",
          "Inverting Conditional Logic",
          "Embrace Errors & Error Handling",
          "Creating More Error Guards",
          "Extracting Validation Code",
          "Error Handling Is One Thing!",
          "Using Factory Functions & Polymorphism",
          "Working with Default Parameters",
          "Avoid \"Magic Numbers & Strings\"",
          "Module Summary",
          "Module Resources"
        ],
        "Objects, Classes & Data Containers / Structures": [
          "Module Introduction",
          "Important: This is NOT an OOP or \"Patterns & Principles\" Course!",
          "Objects vs Data Containers / Data Structures",
          "Why The Differentiation Matters",
          "Classes & Polymorphism",
          "Classes Should Be Small!",
          "Understanding \"Cohesion\"",
          "The \"Law Of Demeter\" And Why You Should \"Tell, Not Ask\"",
          "The SOLID Principles",
          "The Single-Responsibility-Principle (SRP) & Why It Matters",
          "The Open-Closed Principle (OCP) & Why It Matters",
          "The Liskov Substitution Principle",
          "The Interface Segregation Principle",
          "The Dependency Inversion Principle",
          "Module Resources"
        ],
        "Summary & Checklist": [
          "Concepts Summary & Checklist"
        ],
        "Course Roundup": [
          "Staying Clean!",
          "Possible Next Steps",
          "Course Roundup",
          "Bonus!"
        ]
      },
      "requirements": [
        "Basic programming knowledge (no matter which language) is required",
        "NO prior experience on the topic of clean code is required",
        "You DON'T need to know a specific programming language or paradigm"
      ],
      "description": "As a developer, you should be able to write code which works - of course!\nA lot of developers write bad code nonetheless - even though the code works. Because \"working code\" is not the same as \"clean code\"!\nThis course teaches you how to write clean code - code that is easy to read and understand by humans, not just computers!\nIn this course, you'll learn what exactly clean code is and, more importantly, how you can write clean code. Because if your code is written in a clean way, it's easier to read and understand and therefore easier to maintain.\nBecause it's NOT just the computer who needs to understand your code - your colleagues and your future self needs to be able to understand it as well!\nIn this course, we'll dive into all the main \"pain points\" related to clean code (or bad code - depending on how you look at it) and you will not just learn what makes up bad code but of course also how to turn it into clean code.\nSpecifically, you will learn about:\nNaming \"things\" (variables, properties, classes, functions, ...) properly and in a clean way\nCommon pitfalls and mistakes you should avoid when naming things\nComments and that most of them are bad\nGood comments you might consider adding to your code\nCode formatting - both horizontal and vertical formatting\nFunctions and how to limit the number of function parameters\nHow to write clean functions by focusing on \"one thing\"\nHow levels of abstraction help you split functions and keep them small\nHow to write DRY functions and avoid unexpected side effects\nAvoiding deeply nested control structures with guards and by extracting functionality into functions\nErrors and error handling as a replacement for if-statements\nObjects & data containers/ data structures and why that differentiation could matter\nCohesion and how to write good (small!) classes\nThe Law of Demeter and why it matters for clean code\nWhat the SOLID principles are and why they matter when it comes to writing clean code\nMuch more!\nThis course is a compilation of common patterns, best practices, principles and rules related to writing clean code.\nIn this course, you'll learn about a broad variety of concepts, rules, ideas, thoughts and principles and by the end of course, you'll have a good idea of what to keep in mind when it comes to writing clean code.\nThis is not a design patterns or general patterns course though - we will entirely focus on patterns, rules and concepts that help with writing clean code specifically.\nAll these concepts and rules are backed up by examples, code snippets and demos. And to ensure that you get the most out of this course, and you don't just learn a bunch of theory which you forget soon after, there also are plenty of challenges for you to apply what you learned!\nThis course uses Python, JavaScript and TypeScript for code examples but you don't need to know these languages to follow along and get a lot out of the course. In addition, the course does not focus on a specific programming style or paradigm (like functional programming, object-oriented programming etc) but instead covers general concepts and techniques which will always apply.\nWhat are the course prerequisites?\nBasic programming knowledge (no matter which language) is required!\nYou don't need to know any specific programming language or programming paradigm to follow along\nNO prior experience with writing clean code is required",
      "target_audience": [
        "Developers who want to ensure that their code does not just work but it also easy to read, understand and maintain",
        "Everyone who's serious about development and writing real-life code"
      ]
    },
    {
      "title": "The Software Development Process - The Complete Course",
      "url": "https://www.udemy.com/course/the-software-development-process-the-complete-course/",
      "bio": "Learn how to select the right software development model and process, the tools and resources for your software projects",
      "objectives": [
        "how to setup a software development process and model",
        "How to organize a software development project",
        "How to specify a software product or project",
        "How to collect the requirements from customers and translate them into technical requirements",
        "How to write user stories for your software requirements",
        "How to manage and deploy software releases",
        "How to verify a software solution",
        "How to validate a software solution",
        "How to prepare, release and manage documents in a software project",
        "How to manage the versions of a software system",
        "How to implement incident management in a software project",
        "How to implement change management in a software project",
        "How to use Git and Github for your versioning management",
        "How to implement risk management in a software project",
        "How to plan and control a software project",
        "How to implement agile methodologies to specify and manage a software project",
        "How to use the kanban boards in a software project",
        "How to create software platforms and implement customizations",
        "How to develop the code of a software product",
        "How to setup and run the user acceptance tests (UAT) in a software project",
        "How to setup the infrastructures for a software project"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Course Structure",
          "The software Development Process - definitions",
          "The software Development Process - overview",
          "Design Pattern - definition",
          "The scenario in a software project",
          "Roles & Responsibilities",
          "The problem: understand the customer requirement",
          "Presentation of a case study"
        ],
        "Software development models": [
          "General",
          "Software Development Life Cycle (SDLC)",
          "What are the Software Development Life Cycle (SDLC) phases?",
          "1. Waterfall model",
          "2. V model",
          "3. Incremental model",
          "4. RAD model",
          "5. Agile model",
          "6. Iterative model",
          "7. Spiral model",
          "8. Prototype model",
          "How to select the right Software Development Life Cycle Model",
          "Which factors determine the selection of the development model - general",
          "Which factors determine the selection of the development model - Uncertainty",
          "Which factors determine the selection of the development model - Criticality",
          "Which factors determine the selection of the development model - Complexity",
          "Which factors determine the selection of the development model - Team Size",
          "Which factors determine the selection of the dev. model - Customer Involvement",
          "Which factors determine the selection of the dev model - Previous Experience",
          "Which factors determine the selection of the dev. model - Development Costs",
          "Which factors determine the selection of the dev model - Organizational Culture",
          "Which factors determine the selection of the development model - More factors"
        ],
        "Phase 1 - Requirement Gathering": [
          "What is requirement gathering?",
          "Initial Requirements",
          "Uncertainty in Technology",
          "Case Study - An eLearning membership website - customer requirement (Part I)",
          "Case Study - An eLearning membership website - customer requirement (Part II)",
          "Case Study - An eLearning membership website - customer requirement (Part III)",
          "Case Study - An eLearning membership website - customer requirement (Part IV)",
          "Case Study - An eLearning membership website - customer requirement (Part V)",
          "Case Study - An eLearning membership website - customer requirement (Part VI)",
          "Identify the solution",
          "Identification of the skills and technologies",
          "Work organization",
          "Ways to collect the requirements",
          "Analyze the requirements",
          "Review the customer processes and define what to automate and what not",
          "Agreement and sign off"
        ],
        "Phase 2 - DESIGN - The Unified Modeling Language (UML)": [
          "Introduction, UML Diagram Types",
          "Class Diagrams",
          "Relationships between classes",
          "UML Relationships",
          "UML Packages",
          "UML Composite Structures",
          "Component diagrams",
          "Use case diagrams",
          "Use cases",
          "How to draw a use case diagram",
          "Use case modelling",
          "Use case document",
          "Interaction & Collaboration Diagrams",
          "Statechart Diagrams",
          "Activity Diagrams"
        ],
        "Phase 2 - DESIGN - Software Architecture and design definition": [
          "What is software architecture?",
          "What is software design?",
          "Software architecture: basics",
          "Software architecture vs Software design",
          "Components",
          "Packages",
          "Interactions",
          "Interaction Oriented Architecture",
          "MVC Pattern",
          "Security",
          "Security Architecture",
          "Performance",
          "Fault-tolerance",
          "Robustness",
          "Extensibility",
          "3rd party usage",
          "High level design",
          "Case Study - An eLearning membership website - high level design",
          "Low level design - use cases (I)",
          "Low level design - use cases (II)",
          "Case Study - An eLearning membership website - use cases",
          "Low level design - detailed process descriptions (the technical briefing)",
          "Case Study: An eLearning membership website: detailed process descriptions (I)",
          "Case Study: An eLearning membership website: detailed process descriptions (II)",
          "Case Study: An eLearning membership website: detailed process descriptions (III)",
          "Case Study: An eLearning membership website: detailed process descriptions (IV)",
          "Case Study - An eLearning membership website - Wireframes (I)",
          "Case Study - An eLearning membership website - Wireframes (II)",
          "Case Study - An eLearning membership website - Wireframes (III)",
          "Case Study - An eLearning membership website - Wireframes (IV)",
          "Case Study - An eLearning membership website - Wireframes (V)",
          "Back end design",
          "Difference between back end and admin panel",
          "Example of CMS Back End",
          "Example of admin panel - system information",
          "Example of admin panel - management of payment information",
          "Example of admin panel - complex admin systems",
          "Specify the back end",
          "Specify the back end: case study - elearning platform (I)",
          "Specify the back end: case study - elearning platform (II)"
        ],
        "Phase 2 - DESIGN - Database Architecture": [
          "What is a database",
          "Relational database",
          "Define a database",
          "Primary key",
          "Foreign key",
          "Roles and privileges",
          "Case Study - Database structure (1)",
          "Case Study - Database structure (2)",
          "Case Study - Database structure (3)",
          "Case Study - Database structure (4)",
          "Case Study - Database structure (5)",
          "Case Study - Database structure (6)",
          "Case Study - Database structure (7)",
          "Case Study - Database structure (8)"
        ],
        "Phase 2 - DESIGN - Technical Requirements": [
          "What is a technical requirement (I)",
          "What is a technical requirement (II)",
          "What is a technical requirement (III)",
          "Case Study - An eLearning membership website - technical requirement (I)",
          "Case Study - An eLearning membership website - technical requirement (II)",
          "Case Study - An eLearning membership website - technical requirement (III)",
          "Case Study - An eLearning membership website - technical requirement (IV)",
          "Case Study - An eLearning membership website - technical requirement (V)",
          "Scrum - the requirements",
          "Scrum - User Story",
          "Scrum - the definition of done",
          "Case Study - An eLearning membership website - user stories",
          "Case Study - An eLearning membership website - definition of done (I)",
          "Case Study - An eLearning membership website - definition of done (II)",
          "Case Study - An eLearning membership website - definition of done (III)"
        ],
        "Phase 3 - Implementation - Development": [
          "Introduction",
          "Installations",
          "Configurations",
          "Customizations",
          "Integrations",
          "User Training",
          "Structured Programming",
          "Functional Programming",
          "Programming style",
          "Examples of programming style guidelines",
          "Code re-use",
          "Multi-site Distributed Software Development",
          "Development environments and IT infrastructures"
        ],
        "Phase 3 - Implementation - Version Management": [
          "What is Version Control?",
          "Git and GitHub",
          "Git branching",
          "Create a Git branch",
          "Delete a Git branch",
          "Application of Git branching in a specific development model",
          "Git Terms: Repository, Staging, Commit, Push, Pull",
          "Git in action",
          "Software versioning"
        ],
        "Phase 3 - Implementation - Risk assessment": [
          "Introduction",
          "Software Risk Identification",
          "Software Risk Analysis",
          "Software Risk Planning",
          "Software Risk Monitoring"
        ]
      },
      "requirements": [
        "Basic knowledge of software programming",
        "use the computer",
        "use windows or MAC OSX"
      ],
      "description": "The software development process is what software developers have to know when developing a software system\nBut it is also something that software project managers have to know to have software projects under control\nIf you launch a software business this is the process you need to get familiar with in order to manage your suppliers, your customers, third parties and have elements to understand your business and its performances\nIt is not only related to develop a software product but also to specify it, verify and validate it and set it available for use and maintain it\nThe software development models are the various processes or methodologies that are being selected for the development of the project depending on the project’s aims and goals\nThere are many development life cycle models that have been developed in order to achieve different required objectives\nThe models specify the various stages of the process and the order in which they are carried out\nThe selection of model has very high impact on the testing that is carried out\nThe aim of this course is to help students to identify their software development model and provide them with all the tools and knowledge on the processes and phases related to it\nIn details the course covers the following topics:\n\n\nSoftware development models\nRequirement Gathering\nDESIGN - The Unified Modeling Language (UML)\nDESIGN - Software Architecture and design definition\nDESIGN - Database Architecture\nDESIGN - Technical Requirements\nImplementation - Development\nImplementation - Version Management\nImplementation - Risk assessment\nImplementation - Change management\nImplementation - The deployment process (…,regression tests)\nQuality Assurance - Verification\nQuality Assurance - Validation\nQuality Assurance - Incident Management, debugging and bug fixing\nGo Live\nSoftware Maintenance\nSoftware Platform Development\nAgile Frameworks: SCRUM & Kanban\nObject-Oriented Programming Concepts\nProject Management\nDocumentation management",
      "target_audience": [
        "Software architects",
        "Scrum Masters",
        "Software project managers",
        "Solution architects",
        "Software developers",
        "Software methodologies students"
      ]
    },
    {
      "title": "Using SOLID Principles to Write Better Code - A Crash Course",
      "url": "https://www.udemy.com/course/1-hour-crash-course-using-solid-to-write-better-code/",
      "bio": "Software Architecture: A rapid, hard-hitting introduction to designing great object-oriented code in Java, C# and more.",
      "objectives": [
        "Apply SOLID principles in order to write better code.",
        "Use SOLID principles to evaluate existing code.",
        "Understand the long-term benefits of writing good code.",
        "Understand the characteristics that help differentiate good code from bad code.",
        "Understand software architecture principles that can help you produce well-structured code."
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "SOLID Principles": [
          "Single Responsibility Principle",
          "Open/Closed Principle",
          "Liskov Substitution Principle",
          "Interface Segregation Principle",
          "Dependency Inversion Principle",
          "Review: SOLID Principles",
          "Quiz: SOLID Principles",
          "Quiz - Refactoring"
        ],
        "Summary": [
          "Summary",
          "SOLID Principles in Practice",
          "Quote/Reference List",
          "Bonus Lecture: Discount Coupon"
        ]
      },
      "requirements": [
        "You should have experience with an object-oriented programming language, such as Java or C#.",
        "You should have an understanding of object-oriented programming principles, such as inheritance."
      ],
      "description": "Write Better Code\nIt's easy enough to write code that works - however, code that simply 'works' just isn't good enough.  Is it easy to understand?  Is it easy to maintain?  Is it easy to change?  Is it easy to test?  In other words - does it employ good software architecture principles?\nThis course is about helping you to learn how to write good code using tried-and-tested principles from the world of object-oriented software development in languages like Java and C#.  Specifically, we'll unpack what SOLID means, what its benefits are, and how you can apply SOLID principles in order to improve the architecture of your own code - regardless of which object-oriented programming language you use.  You'll learn how to look at code, identify problems, and how to improve the code by using SOLID principles.  To help you with this, the course also contains a quiz that is focused on refactoring code to conform to SOLID principles.\nIt's a short course that you can work through in an hour, but it's intended to equip you with skills that you can apply throughout a lifetime of programming!\nSome Review Feedback\n\"The content is structured, step by step is laid out clearly and concisely, the code examples are definitely the icing on the cake as it takes the principles into real world examples which are very valuable.\"\n\n\"Great course with easy to understand examples. Good for first time explanation and as a refresher\"\n\"Firstly, the course focuses on a really important topic that most developers usually skip over, and secondly the course itself is really well thought through with the examples explaining exactly how code can be improved for readability, testing, and to ensure the code is easy to change later on.\"\n\"The salient points were well covered, and the code examples are clear enough to illustrate and support each SOLID principle discussed. As a student, we’re able to understand and appreciate the benefit of applying SOLID principles, and writing better code.\"\nThis course includes the option of a 30-day, no-questions-asked refund if you're not happy with it.",
      "target_audience": [
        "Object-oriented programmers who want to learn how to write better code.",
        "Junior- to intermediate Java and C# developers.",
        "Anyone with an interest in software architecture and the structure of good code."
      ]
    },
    {
      "title": "Algorithms and Data Structures in C#: Complete Tutorial",
      "url": "https://www.udemy.com/course/algorithms-data-structures-csharp/",
      "bio": "Learn data structures and algorithms in C# from A to Z. Pass coding interview. Learn unit testing and TDD in addition.",
      "objectives": [
        "Implement all the common data structures such as List, Stack, Queue and others understanding how they work under the covers",
        "Use available data structures built-in .NET correctly: choose right data structures, understanding how they work under the covers",
        "Pass coding interviews where interviewers torture you by asking to implement different algorithms and data structures",
        "Solve custom problems related to algorithms and data structures, so you'll be able to combine data structures and re-implement algorithms suiting them for concrete cases",
        "Implement Binary Search Tree",
        "Understand and Apply Hash Tables",
        "Understand and Apply Symbol Tables",
        "Understand and Apply Heaps"
      ],
      "course_content": {},
      "requirements": [
        "Some experience in C# or Java",
        "Tooling: a free version of Visual Studio (Community Edition)"
      ],
      "description": "Why learn about data structures and algorithms?\nAlgorithms and data structures constitute the fundamentals of programming.\nGood understanding of algorithms and data structures is one of the most important requirements for a great number of work positions. You'll have to solve  many problems related to algorithms and data structures at coding interviews. Indeed, you can live without an understanding of algorithms and data structures, in general. However, you can do that until you face a real problem which requires to choose right data structures and implement custom algorithms. If you haven't ever faced such problems, believe me, this is just a matter of time. One day, you'll face such a problem and if you don't understand algorithms and data structures in depth, you'll feel yourself ashamed and helpless. You'll be stuck.\nIf you're not good at algorithms and data structures, you'll never pass a coding interview in a decent company. Almost all the companies   prefer to hire those developers who have good understanding of algorithms and data structures, remember that.  Do not delay the study of fundamental concepts.\nBetter hardware is not a solution  for all the performance-related problems. Sometimes, you need to write software for very slow devices. And that very often depends on the budget of a customer, by the way, so you don't have a control over it.\nYou'd better to understand what's going on under the hood at least one level in-depth. Indeed, if you don't understand how List works, sometimes you'll make sub-optimal or completely wrong decisions.\nWhy this course?\nYou may ask me \"why should I take exactly your course?\" And here is my answer:\nThis course is a comprehensive tutorial which covers a great number of topics\nI tried to do my best to make this course not dry\nThis course concentrates not only at algorithms and data structures in general but it uncovers the internals of data structures and algorithms built-in .NET BCL (.NET Core's BCL is the same regarding fundamental data structures and algorithms)\nThis course is practical with exercises and solutions\nThis course will definitely help you to pass technical interviews\nThis course is made by a professional software developer with more than 10 years of real-world experience\nand many other reasons :)\nWhat's in the Course?\nFor now, the course covers:\nIntroduction to Algorithms and Data Structures: what is a data structure, abstract data type and what's the difference between these notions. What is an algorithm and why they are important to us?\nIntroduction to Algorithm Analysis:  determine how long will a program work, build a log-log plot, approximations, order of growth (Big-O notation), memory consumption\nArrays: arrays in C#, arrays in memory, time complexity of operations on arrays\nSort Algorithms: bubble sort, selection sort, insertion sort, recursion, shell sort, merge sort, quick sort, stability of sort algorithms\nLists: List built-in .NET BCL, nodes, linked list including singly and doubly linked lists, linked list built-in .NET\nStacks: theory and practice; stack based on array, stack based on a linked list, stack built-in .NET\nQueues: theory and practice; queue based on array, circular queue, queue based on linked list, queue built-in .NET BCL\nSearch Algorithms: linear search, binary search (more will be added in the future)\nSymbol Tables: intro, API, sequential search-based, binary search-based\nHash Tables: intro, hash functions, GetHashCode, approaches to collisions resolving: separate chaining and linear probing, Dictionary built-in BCL, Sets in BCL\nTrees: binary search tree (BST), implementing BST (more will be added in the future)\nHeaps: intro, heaps and arrays, implementation, Heap Sort (more will be added in the future, specifically about Priority Queues)\nImmutable Collections: immutability and memory pressure, immutable stacks and queues, immutable list, immutable sets, immutable dictionaries, builders in immutable collections\nDifferent Algorithms. This section will include different algorithms as you might guess. For now it convers the Sieve of Eratosthenes.\nTake this course now and you'll be satisfied! Don't forget that Udemy provides 30-day money back refund policy, so if you don't like the course, you just click on a couple of buttons and get your money back!",
      "target_audience": [
        "C# developers who want to learn algorithms and data structures in their beloved programming language",
        "Junior developers (C# or Java) who want to successfully pass programming interviews"
      ]
    },
    {
      "title": "The Complete UML Course: Learn to Design UML Diagrams",
      "url": "https://www.udemy.com/course/unified-modeling-language-uml-course-uml-diagram-software-enginnering/",
      "bio": "Master Latest version UML, Learn to draw UML diagram Use case Diagram, UML Sequence Diagram, Activity Diagram +11 other",
      "objectives": [
        "Everything about UML to work efficiently in software projects",
        "Different Types of UML Diagrams - 14 Types of UML diagram",
        "Software design in the form of UML diagrams",
        "Common Mistakes people do during designing UML Diagrams",
        "Learn Most used uml diagram like use case diagram, sequence diagram, activity diagram, component diagram, deployment diagram, state machine diagram",
        "Best Practices of UML designing and managing",
        "UML design tools like StarUML"
      ],
      "course_content": {
        "Introduction": [
          "Welcome to UML Course",
          "How I have structure this course"
        ],
        "UML Unified Modelling Language": [
          "Why you should learn UML",
          "What is UML Unified Modelling Language",
          "Different Types of UML Diagrams",
          "Tools for Designing and Drawing UML Diagrams"
        ],
        "UML Class Diagram": [
          "Class Diagram",
          "Class Diagram Examples",
          "Common Mistakes in UML Class Diagrams",
          "Quiz",
          "Implement Relationships in Code"
        ],
        "UML Object Diagram": [
          "Object Diagram",
          "Object Diagram Examples",
          "Common Mistakes in UML Object Diagrams",
          "Quiz"
        ],
        "UML Component Diagram": [
          "Component Diagram",
          "Component Diagram Examples",
          "Common Mistakes in UML Component Diagrams",
          "Quiz"
        ],
        "UML Package Diagram": [
          "Package Diagram",
          "Package Diagram Examples",
          "Common Mistakes in UML Package Diagrams",
          "Quiz"
        ],
        "UML Deployment Diagram": [
          "Deployment Diagram",
          "Deployment Diagram Examples",
          "Common Mistakes in UML Deployment Diagrams",
          "Quiz"
        ],
        "UML Composite Structure Diagram": [
          "Composite Structure Diagram",
          "Composite Structure Diagram Examples",
          "Common Mistakes in UML Composite Structure Diagrams",
          "Quiz"
        ],
        "UML Profile Diagram": [
          "Profile Diagram",
          "Profile Diagram Examples",
          "Common Mistakes in UML Profile Diagrams",
          "Quiz"
        ],
        "UML Use case diagram": [
          "Use Case Diagram",
          "Use Case Diagram examples",
          "Common Mistakes in UML Use case diagrams",
          "Quiz"
        ]
      },
      "requirements": [
        "NO Pre-requisite knowledge needed , everything is covered from scratch"
      ],
      "description": "Welcome to the Complete Unified Modeling Language (UML) course! In this course, We are going to learn everything you need to know about UML. you'll gain the knowledge and skills needed to master UML, from the basics to the most advanced concepts. By the end of this course, you'll have the confidence to design UML diagrams like a pro.\nIf you're searching for a comprehensive, easy-to-follow, well-organized, and practical course that takes you from zero to hero, then you've come to the right place. You don't need any prior knowledge of UML, everything you need to know is all in one place. No more jumping back and forth between random tutorials, everything is right here for you.\n\n\nIn this course we will start with understanding what is UML and WHY one should use UML then gradually will start understanding the different types of UML Diagrams and UML Tools\n\nWe are going to cover the LATEST VERSION OF UML THAT IS UML 2.5 . I will walk you through all the 14 Different types of UML Diagrams one by one and step by step.\n\nStructure Diagrams\nClass Diagram\nComponent Diagram\nDeployment Diagram\nObject Diagram\nPackage Diagram\nProfile Diagram\nComposite Structure Diagram\nBehavioral Diagrams\nUse Case Diagram\nActivity Diagram\nState Machine Diagram\nSequence Diagram\nCommunication Diagram\nInteraction Overview Diagram\nTiming Diagram\n\nEvery diagram we will understand from basics like Basic building blocks or essentials component of the diagrams ,\nthen we will take the real life case study and try to understand how to draw the UML diagram and how to read and interpret the UML diagram. In this you will learn how to design the UML diagram efficiently and effectively .\n\n\nthen we will see COMMON Mistakes people usually do during designing the UML diagrams and how to avoid these. all mistake we will understand through examples.\n\n\nthis sequence we will follow for each uml diagram.\n\n\nLastly we will see\n\n\nBEST PRACTICES of UML . In this we will cover what are the best practices one should follow during designing and managing the UML diagram while working in the software projects.\n\n\nand finally we will see resources one should follow to get to know about the UML advancement early and stay up to date in the UML.\n\n\n\n\nAll above things  are covered in just over 3+ hours of high-quality content. This is equivalent to a book with more than a thousand pages!  in  very clear and concise manner doesn't waste a single minute of your precious time!\n\n\nYou're not going to get this information at One Place Anywhere over the Web.\n\n\nAnd on top of all these, you'll get:\nClosed-captions generated by a human, not a computer! Currently only the first few sections have closed-captions but new captions are being added every week.\nOffline access: if you are traveling or have a slow connection, you can download the videos and watch them offline.\nDownloadable resource\n\n\n\n\nPREREQUISITES\nThere is no such Prerequisite for this course anybody who is using google search for finding answers to their personal and professional problem can take up this course. We will learn everything from the scratch in this course.\n\n\n30-DAY FULL MONEY-BACK GUARANTEE\nThis course comes with a 30-day full money-back guarantee. Take the course, watch every lecture, and do the exercises, and if you are not happy for any reasons, contact Udemy for a full refund within the first 30 days of your enrolment. All your money back, no questions asked.\n\n\n\n\nABOUT YOUR INSTRUCTOR\nHi! My name is Yogesh Dahake ! I'm a passionate Lead Software engineer with a decade of experience and I've taught over thousand  of people over Udemy on the Software Development Life Cycle  and on self and office productivity  techniques and obviously on Coding as well through my YouTube channels like vibranthinking and Codekranti\n\nMy goal is to enable people not just learn but in Optimal, efficient and effective way and Generate that Spark of learning .That's why my courses are simple, pragmatic and free of clutter\n\n\n\n\nSo, what are you waiting for? Don't waste your time jumping from one tutorial to another. Enroll in the course Acquire the LIFE Changing Skill in just 3+ hours",
      "target_audience": [
        "Students of Software Engineering",
        "People who are starting their career in the software industry.",
        "People who are already working in the software company.",
        "Developer, Lead, Technical Architect ,Tester anybody who is directly or indirectly involved in the process of software development",
        "People who wants to design software and define software architecture",
        "People who wants to develop the quality software's",
        "Anybody who has interest in Software's"
      ]
    },
    {
      "title": "Software Architecture for the Enterprise Architect",
      "url": "https://www.udemy.com/course/software-architecture-for-the-enterprise-architect/",
      "bio": "Learn software architecture skills required by an enterprise architect including UML modelling and architecture patterns",
      "objectives": [
        "Learn about the enterprise architect role",
        "Enhance your technical skills required to be a good enterprise architect",
        "Learn about different types of UML modelling, and gain experience developing UML diagrams",
        "Learn about different software architecture patterns and where they should be used",
        "Learn to examine a business case and determine key quality attributes from business requirements"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "The Role",
          "Understanding Business Requirements",
          "Key Quality Attributes",
          "Business Requirements and Key Quality Attributes",
          "Team Dynamics"
        ],
        "UML": [
          "UML Introduction",
          "Kruchten's 4 + 1 Model",
          "LucidChart Introduction - the Free tool we'll be using",
          "Component Diagrams",
          "Class Diagrams",
          "Activity Diagrams",
          "Deployment Diagrams",
          "Use Case Diagrams",
          "UML Diagrams"
        ],
        "Architecture Patterns": [
          "Introduction to Software Architecture Patterns",
          "Multi Tiered Architecture",
          "Client - Server Architecture",
          "Model - View - Controller Architecture",
          "Service Oriented Architecture",
          "Microservices Architecture",
          "Domain Driven Architecture",
          "Event Driven Architecture",
          "Software Architecture Patterns"
        ]
      },
      "requirements": [
        "Basic experience developing software is recommended"
      ],
      "description": "In this course you will learn in detail  the software architecture skills required by an enterprise architect, and gain practical experience through course assignments for each section which I will give you feedback on.\nWe will go through all of the core skills that are required in enterprise architecture including :\nDifferent architecture patterns and where they should be used\nUML modelling of a system from different perspectives\nIdentifying business requirements\nIdentifying non-functional requirements\nTeam Dynamics\nand more !\nThe course is structured around both video tutorials explaining different techniques and architecture patterns, together with practical demonstration sessions for the applicable sections to make sure that we are able to apply what we have learnt.\n\nI'm also available to answer any queries you may have regarding any course material which you didn't understand or would like further detail on.\n_______\nJust in case you're still not convinced if you should take this course, here are a couple of positive reviews from the hundreds I have received on my bestselling, top rated Udemy courses:\n\"The course is comprehensive and well explained through clear and concise examples, and shows that the instructor is highly experienced in their field. Overall this course is excellent and highly appropriate for software developers looking to improve their architectural and programming skills, both beginners as well as more advanced programmers. I will be looking forward to more courses by the author in the future.\" - J. Fusselberg\n\"High quality videos, lectures are clear and to the point. This course is highly recommended for any developer who wants to move on to a senior position or software architect role. However, it will also be a good start for beginner to introduce them to proper coding practices early on.\" -  Roberto de Souza\nI look forward to seeing you in my course and hearing how the course has helped you progress in your career !",
      "target_audience": [
        "Software developers who want to improve their software architecture skills",
        "Software developers who are aiming to take on an enterprise architect role in the future",
        "Software architects who want to be more effective in their role"
      ]
    },
    {
      "title": "Deploy Fargate ECS Apps & Infrastructure: AWS with Terraform",
      "url": "https://www.udemy.com/course/deploy-fargate-ecs-apps-infrastructure-aws-with-terraform/",
      "bio": "Learn to work with AWS ECS Fargate, implement complete infrastructure deployment using Terraform with an AWS Architect!",
      "objectives": [
        "Learn how to work and code against AWS using Terraform!",
        "Learn how to work with AWS Fargate using Terraform!",
        "Implement ECS Fargate Applications on AWS using Terraform with Infrastructure-as-Code (IaC)!",
        "Learn how to register a domain with Route53 and use with Application Load Balancer for AWS ECS Fargate!",
        "Learn how to create an SSL HTTPS Certificate for your Route53 domain!",
        "Learn to implement 3-Layered Production-Grade Infrastructure for your Applications on AWS using Terraform IaC!",
        "You'll be confident to work with AWS using Terraform for any kind of AWS Resource on VPC and ECS Fargate!",
        "Learn how to Dockerize your Spring Boot Applications",
        "Learn how to create a Dockerfile for your application",
        "Learn how to create a Task Definition for your AWS ECS container application",
        "Learn how to develop end-to-end pipeline with Shell Scripting for application deployment!",
        "Learn how to read and code against an Terraform HCL language!",
        "You'll be able to launch your own infrastructure on AWS without even signing-in to AWS!",
        "Learn the AWS Well-Architected Framework Best-Practices while implementing!"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "About This Course",
          "What We Will Build In This Course?",
          "What Do You Need For This Course?"
        ],
        "Preparing The Environment for Development": [
          "Create an AWS Account If You Don't Already Have It!",
          "Logging into AWS Console and a Walkthrough"
        ],
        "Linux Environment Setup": [
          "Installing Terraform and IntelliJ Plugin",
          "Installing Docker",
          "Installing AWS SDK (CLI)",
          "Preparing AWS Credentials for Environment"
        ],
        "Windows Environment Setup": [
          "Installing Terraform and IntelliJ Plugin",
          "Installing Docker",
          "Installing AWS SDK (CLI)",
          "Preparing AWS Credentials for Environment"
        ],
        "MacOS Environment Setup": [
          "Installing Terraform and IntelliJ Plugin",
          "Installing Docker",
          "Installing AWS SDK (CLI)",
          "Preparing AWS Credentials for Environment"
        ],
        "Terraform and Fargate 101": [
          "Terraform 101",
          "Fargate Basics"
        ],
        "Virtual Private Cloud (VPC) Network Infrastructure with Terraform - Part 1": [
          "Creating S3 Bucket for Terraform Remote State",
          "Creating Our Project",
          "Defining Our Remote State Configuration",
          "Creating a Virtual Private Cloud (VPC)",
          "Creating Public Subnets",
          "Creating Private Subnets",
          "Creating AWS VPC Infrastructure with Terraform"
        ],
        "Virtual Private Cloud (VPC) Network Infrastructure with Terraform - Part 2": [
          "Creating a Route Table for Public Routes",
          "Creating a Route Table for Private Routes",
          "Associating Route Tables with Subnets",
          "Creating an Elastic IP for NAT Gateway",
          "Creating the NAT Gateway and Adding to Route Table",
          "Create an Internet Gateway (IGW) and Adding to Route Table",
          "Executing Terraform and Outputting Variables for Remote State Reading"
        ],
        "Elastic Container Service (ECS) Platform Infrastructure with Terraform": [
          "Registering a Domain on Route53 for Our ECS Platform",
          "Defining Backend and Reading Remote State for Layer 1 Infrastructure",
          "Creating ECS Cluster",
          "Creating Application Load Balancer (ALB) with Security Group for ECS Cluster",
          "Creating HTTPS Domain SSL Certificate and Validating for ECS Cluster",
          "Adding Route53 Record for ALB Domain Name",
          "Creating a Default Target Group for ECS Cluster",
          "Creating an HTTPS ALB Listener for Load Balancer for ECS Cluster",
          "Creating IAM Role for ECS Cluster",
          "Attaching IAM Policy to ECS Cluster Role",
          "Executing Terraform and Outputting Variables for Remote State Reading"
        ],
        "ECS Fargate Application Deployment with Terraform": [
          "Taking a Look at Spring Boot Application We Will Deploy",
          "Defining Backend and Reading Remote State for Layer 2 Infrastructure",
          "Creating ECS Task Definition",
          "Resolving Template and Creating ECS Task Definition",
          "Creating IAM Task and Execution Role and Policy for ECS Tasks",
          "Creating Security Group for ECS Service",
          "Creating ALB Target Group for ECS Service",
          "Creating ECS Service",
          "Creating ALB Listener Rule for ECS Service",
          "Creating CloudWatch Log Group for ECS Service",
          "Reviewing Our Code and Infrastructure Before Execution",
          "Providing Tfvars for Terraform Variables"
        ]
      },
      "requirements": [
        "An AWS Account - Free Tier Available!",
        "General Knowledge on AWS Model would be nice",
        "Theoretical Knowledge on VPC and ECS Concepts would be nice but not necessary!",
        "Any IDE or even a text-editor, recommend with a Terraform Plugin"
      ],
      "description": "Learn to implement production-ready infrastructure with AWS ECS Fargate container platform using Terraform today with an AWS Certified Solutions Architect!\nDo you want to implement your complete infrastructure as code? Do you want to learn the coolest and most popular infrastructure configuration management tool on the market, Terraform and make a huge contribution to your skillset?\nThen this course is what you need! You will not only learn how to implement Terraform code but also implement an AWS Well-Architected Framework recommended deployment model which will be Highly-Available, Scalable, Fault-Tolerant and Resilient!\nIn this course, we will start by exploring the tools we need throughout the course. Just to note here too, we will need an IDE with a proper Terraform plugin available. An AWS account is also necessary so I will show you how to get one if you do not already have it. Sure we will set up our environment variables for Terraform deployments and also configure our IDE to use Terraform efficiently by installing a Terraform Plugin which will highlight the syntax and auto-complete everything we intend to do.\nIn between all these, I will also give you a crash course on Terraform where you will gain all the information you need to implement this infrastructure!\nOnce we have everything set up, now is time to get our hands dirty and write some Terraform code to implement our cool, shiny architecture!\nWe will start off with implementing our remote state and obtaining a key pair which we will use to connect to the instances we will launch. Once we get these done, we will first create the Virtual Private Cloud (VPC) environment. To meet the demands of high-availability, we will spread our private and public subnets to three different availability zones inside a region. We will also create our Private and Public Route Tables to manage the routing between our resources inside VPC.\nWe’ll also make sure to attach an Internet Gateway (IGW) to our VPC to use with public subnets so the resources in those will be able to access and receive public internet traffic. Our private subnet also need some form of internet connection but not both ways; we want only internet access for outgoing connections from our resources in private subnets! To satisfy this requirement, we will launch and attach a NAT Gateway to our private route table.\nNow is the time to develop our AWS ECS platform! To start with, we will first register ourselves a domain which we will use for our Spring Boot application. Then we will create an ECS cluster, Target Group, Application Load Balancer, HTTPS Listener and Certificate and IAM roles for ECS cluster to prepare for application deployment.\n\n\nNext up is to check out the Spring Boot application that we will deploy to AWS ECS Fargate! We will take a quick look and start by implementing our ECS Fargate Task Definition. We will move on to create our IAM Role and Policy, ECS Service, Target Group, Listener Rule and CloudWatch Log Group to finish up with getting ready to deploy our application!\n\n\nIn the next chapter, we will script the whole pipeline of our application from building with Maven to pushing Docker image to AWS Elastic Container Registry (ECR) and then to deploying to AWS ECS Fargate! We will create ourselves a shell-script to implement everything as a different stage and develop the whole pipeline!\n\n\nOnce we're satisfied with the pipeline, we'll start executing our stages one by one! We'll first build the code, build and push our Docker image to AWS ECR and finally we will deploy our Spring Boot application to AWS ECS Fargate to have it up and running with our registered domain!\nThere are much more to come in this course and I cannot wait for you to come and learn the best practices from an AWS Certified Solutions Architect!",
      "target_audience": [
        "Who wants to learn AWS ECS Fargate; one of the best container environments out there!",
        "Who wants to design and develop AWS ECS Fargate deployment from zero-to-hero using Terraform!",
        "Who wants to learn how to implement Infrastructure-as-a-Code (IaaS) with Terraform on AWS",
        "Who wants to learn Terraform, infrastructure configuration language from Terraform",
        "Who wants to learn how to launch Virtual Private Clouds, Public-Private Subnets and more with Terraform code on AWS",
        "Who wants to learn and launch Highly-Available, Scalable, Fault-Tolerant and Resilient architectures on AWS!",
        "Beginners on AWS who wants to put their theory in practice"
      ]
    },
    {
      "title": "Red Hat OpenShift With Jenkins: DevOps For Beginners",
      "url": "https://www.udemy.com/course/red-hat-openshift/",
      "bio": "Learn from scratch Red Hat OpenShift with Jenkins Continuous Integration with DevOps and Command Line Tools (CLI)",
      "objectives": [
        "Build Jenkins Pipeline in OpenShift using Web Console",
        "Work with Command Line Interface Tools (CLI) within OpenShift Origin Server",
        "Create PHP projects and apps in Red Hat OpenShift Online and OpenShift Origin Server",
        "Understand OpenShift Functionality and Comparison with Google Cloud Platform",
        "Work with GitHub",
        "Understand YAML file basics",
        "Know DevOps life cycle and understand learn fundamentals of Kubernetes and Docker",
        "Create Red Hat account and download required software"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Structure of the Course & Meet Your Instructor",
          "Updated Lectures"
        ],
        "First OpenShift PHP Project Using GitHub Source": [
          "*NEW* Downloading Container Platform",
          "*Updated* OpenShift Online Login",
          "*NEW* First Project PHP Application from scratch",
          "Your feedback: Updates - Let us know!",
          "OpenShift-Online-GUI-Interface-WebConsole",
          "First PHP App Project",
          "First PHP Project: Make Changes to PHP Code",
          "First PHP Project: Creating Route (Public URL)",
          "First PHP Project: Autoscale Pods",
          "First PHP Project: Health Check & Storage",
          "First PHP Project: Deploying New Image Django Py"
        ],
        "OpenShift Origin Server Command Line Tools (CLI)": [
          "OpenShift Origin Server: OC Tools-Download CLI",
          "*Updated* Download Latest OC Tools:Download Red Hat OpenShift Container Platform",
          "OC Tools: Create Project and New App"
        ],
        "Jenkins Continuous Integration Pipeline Workflow Build": [
          "Jenkins Continuous Integration Pipeline Workflow Build - Part 1",
          "Jenkins Continuous Integration Pipeline Workflow Build - Part 2"
        ],
        "All About Jenkins - Learn Fundamentals Including Installations": [
          "Installing Java For Jenkins Requirement",
          "Downloading Virtual Box",
          "Downloading Linux ISO",
          "Installing Virtual Box",
          "Running Linux ISO",
          "Installing Jenkins",
          "Configuring IP Addresses",
          "Installing Ubuntu",
          "Working With IP Tables",
          "Installing Jenkins Plugins",
          "Creating Admin User",
          "First Jenkins Job",
          "Building Jenkins Project",
          "Installing Git With Apache",
          "Creating SSH Keys",
          "Jenkins Git Job",
          "Build Git Project"
        ],
        "Red Hat OpenShift Online Account Creation": [
          "What is Red Hat: Creating an Account",
          "What is Red Hat OpenShift Online?"
        ],
        "DevOps Fundamentals: Software Development Life Cycle": [
          "SDLC (Software Development Life Cycle)",
          "What Is DevOps?",
          "What is DevOps Best Practice?",
          "What is Kubernetes & Container?",
          "DevOps Automation",
          "Red Hat Container Platform",
          "Difference Between Red Hat OpenShift & Google Cloud Platform",
          "Principles of Container Based Design",
          "Docker Fully Explained",
          "Concept of Git"
        ],
        "Learning Resources": [
          "Downloadable Resources",
          "Learning Resources"
        ]
      },
      "requirements": [
        "Red Hat OpenShift Account is required. You can register for free",
        "Tech savvy",
        "No prior knowledge or experience is necessary",
        "DevOps basics are desirable but not required"
      ],
      "description": "In the world of Enterprise Cloud Applications, Data Analytics, Big Data, Data Security and and compliance, especially with Big Data lurking all around us within the realm of DevOps & Cloud Computing - Learn Red Hat OpenShift With Jenkins: DevOps For Beginners step-by-step, complete hands-on OpenShift and OpenShift Origin with Jenkins CI/CD - Bringing you the latest technologies with up-to-date knowledge.\nAre you facing issues with monolithic app development within the enterprise arena? Look no further - develop, manage, and monitor enterprise app development with DevOps. Use the Red Hat OpenShift platform to manage everything, and Jenkins to build pipelines so developers can easily provide their input. Hence, the complete Software Development Life Cycle (SDLC) automated\nCourse Description\nAre you a company or a Web developer, IT administrator, data center architect, consultant, enterprise architect, data protection officer, programmer, data security specialist, or big data analyst and want to gain fundamental and intermediate level skills and enjoy a fascinating high paying career?\nOr maybe you just want to learn additional tips and techniques taking to a whole new level?\nWelcome to Red Hat OpenShift With Jenkins: DevOps For Beginners. A one of its kind course\nIt is not only a comprehensive course, you are will not find a course similar to this. The flipped classroom model with hand-on learning will help you experience direct  into the course as your begin your learning journey.\nIn this course, you'll learn and practice:\nInstall Red Hat OpenShift Origin Server CLI Tools\nInstall Java, Virtual Box, Ubuntu, and Jenkins\nCreate PHP projects and apps using command line tools and OpenShift Web Console\nBuild Jenkins pipelines\nLearn DevOps fundamentals, Kubernetes and Docker architecture\nUnderstand Pods and Docker Daemon concepts, best practices, and much more\nYou will also get complete resources, toolkit, and code where applicable with this course! We've built this course with our Team ClayDesk of industry recognized developers and consultants to bring you the best of everything\nSo, if you would like to:\nstart your freelancing career and consult companies, this course is for you\ngain marketable skills as an IT expert and professional, this course is for you\nThis course is not designed for advanced level students\nThis Red Hat OpenShift With Jenkins: DevOps For Beginners course is exactly what you need, and more. You’ll even get a certification of completion\nWe’ve left no stone unturned.\nSee what our students say “It is such a comprehensive course that I don’t need to take any other course but this one to learn all new compliance areas including Red Hat OpenShift With Jenkins: DevOps For Beginners, and I would without a doubt recommend it to anyone looking for a complete Red Hat OpenShift With Jenkins: Master DevOps For Beginners course.” Michael Mann\n“This is such an awesome course. I loved every bit of it. Wonderful learning experience!” Christopher Hill.\nJoin thousands of other students and share valuable experience\nWhy take this course?\nAs a senior Project Manager managing and deploying enterprise level IT projects, along with a Microsoft Certified Systems Engineer & Trainer, my experience with Red Hat OpenShift has been phenomenally great. I am excited to share my knowledge and transfer skills to my students.\nEnroll now in Red Hat OpenShift With Jenkins: DevOps For Beginners today and revolutionize your learning. Stay at the cutting edge of enterprise app development and DevOps life cycle and enjoy bigger, brighter opportunities.\nSee you in class\nSyed and Team ClayDesk",
      "target_audience": [
        "Anyone who wants to learn Red Hat Openshift Online and OpenShift Origin CLI Tools",
        "Beginner level students who wish to learn about the the Jenkins CI/CD Pipeline within OpenShift",
        "Network Administrators",
        "Enterprise Architects",
        "Web Developers and Programmers",
        "DevOps Professionals",
        "This course is not for advanced users"
      ]
    },
    {
      "title": "Bluetooth Low Energy (BLE) From Ground Up™",
      "url": "https://www.udemy.com/course/bluetooth-low-energy-ble/",
      "bio": "Build BLE Firmware for Microcontrollers. Practices on STM32 boards.",
      "objectives": [
        "Build Bluetooth Low Energy (BLE) Firmware for different use cases",
        "Create your own Services and Characteristics",
        "Understand the Build Bluetooth Low Energy (BLE) stack",
        "Build Bluetooth Low Energy (BLE) Embedded Devices",
        "Send sensor data between devices using Build Bluetooth Low Energy (BLE)"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Modules Required for the Course",
          "Downloading an Integrated Development Environment (IDE)",
          "Installing the Integrated Development Environment (IDE)",
          "Setting Up STM32CubeMX 5",
          "Downloading the LightBlue Application",
          "Getting the most out of this course"
        ],
        "Introduction to Bluetooth Low Energy (BLE)": [
          "What is Bluetooth Low Energy (BLE) ?",
          "The Bluetooth Low Energy Stack and Stack Splits"
        ],
        "The Bluetooth Low Energy (BLE) Architecture": [
          "Overview of the Physical Layer (PHY)",
          "Overview of the Link Layer (LL)",
          "Understanding the Link Layer Packets",
          "Overview of the Host Controller Interface (HCI) Layer",
          "Overview of the Logical Link Control and Adaptation Protocol(L2CAP) Layer",
          "Key Features of Bluetooth Low Energy (BLE) 5"
        ],
        "The Generic Access Profile (GAP)": [
          "Overview of the Generic Access Profile (GAP)",
          "Advertising States, Scan Request and Response",
          "Understanding Advertising Events",
          "Understanding Advertising and Scanning Parameters",
          "Connection and Broadcasting",
          "Understanding Modes and Procedures"
        ],
        "The Attribute Protocol (ATT)": [
          "Overview of the Attribute Protocol",
          "Analyzing the parts of an Attribute"
        ],
        "The Generic Attribute Profile (GATT)": [
          "Overview of the Generic Attribute Profile (GATT)",
          "The Mandatory GAP Service Implemented on all GATT Servers"
        ],
        "Developing Bluetooth Low Energy (BLE) Firmware with STM32 BlueNRG-MS": [
          "Overview of the BlueNRG-MS Stack",
          "Installing the X-CUBE-BLE2 Package",
          "Coding : Configuring the BLE Hardware",
          "Coding : Analyzing the BLE Hardware Configuration code",
          "Coding : Initialization the BLE Device",
          "Coding : Implementing the mandatory GAP Service",
          "Coding : Advertising and Testing the BLE Device",
          "Coding : Creating Custom Services",
          "Coding : Creating Custom Characteristics",
          "Coding : Sending Data to the Client",
          "Coding : Creating UUIDs and Handles for multiple Services and Characteristics",
          "Coding : Implementing multiple Services and Characteristics",
          "Coding : Updating Characteristic Values",
          "Coding : Developing a BLE Chat Firmware-Pt.1 : Creating the Characteristics",
          "Coding : Developing a BLE Chat Firmware-Pt.2 : Processing Rx and Tx Events",
          "Coding : Developing a BLE Chat Firmware-Pt.3 : Testing the Firmware"
        ],
        "Bluetooth Low Energy (BLE) Security": [
          "Some Bluetooth Low Energy Security concepts"
        ],
        "[START OF OLD VERSION OF THE COURSE] Introduction to Bluetooth Low Energy (BLE)": [
          "What is Bluetooth Low Energy (BLE) ?",
          "Key features of Bluetooth LowEnergy",
          "Some frequently used terms"
        ],
        "Set Up": [
          "Required Microcontroller",
          "Notice",
          "Setting Up STM32CubeMX",
          "Setting Up STM32CubeMX Bluetooth Low Energy Package",
          "Download Keil uVision 5",
          "Installing Keil uVision 5",
          "Installing more Packs",
          "Testing the Setup",
          "Overview of Keil uVision"
        ]
      },
      "requirements": [
        "No prior knowledge is required. I will teach you everything from scratch.",
        "NUCLEO-F411RE",
        "X-NUCLEO-BNRG2A1"
      ],
      "description": "Welcome to the Bluetooth Low Energy (BLE)  From  Ground Up™  course.\n\n\nThis practical Bluetooth Low Energy (BLE) course will provide you with a solid in-depth training to be able to build BLE embedded devices and use them to communicate with other smart devices and mobile phone apps. This course aims to provide a solid practical understanding of Bluetooth Low Energy: the protocol, how data is organized, and the key design trade-offs that were made in the creation of the protocol.\nBy the end of this course you should be able to build your own BLE enabled embedded devices and give a lecture on the BLE protocol.\n\n\nREMEMBER : I have no doubt you will love this course. Also it comes with a  FULL money back guarantee for 30 days!  So put simply, you really have nothing to loose and everything to gain.\nSign up and lets start transmitting some packets.\n\n\n-------------------Some highlights----------------------\nBuild Bluetooth Low Energy (BLE)  firmware for different use cases\nUnderstand the Bluetooth Low Energy (BLE)  Stack\nCreate your own Services and Characteristics\nBuild Bluetooth Low Energy Embedded Devices\nGive a lecture on the Bluetooth Low Energy (BLE) Architecture\n------\nNo prior knowledge is required. I will teach you everything from scratch.\n------\nIf you are thinking about developing a product that incorporates Bluetooth Low Energy then take this course.\nIf you are an embedded engineer who wants to create Bluetooth Low Energy (BLE) firmware then take this course.\nIf you just want to learn how to code and build BLE devices then take this course.\n-------",
      "target_audience": [
        "If you are thinking about developing a product that incorporates Bluetooth Low Energy then take this course.",
        "If you are an embedded engineer who wants to create Bluetooth Low Energy (BLE) firmware then take this course.",
        "If you just want to learn how to code and build BLE devices then take this course."
      ]
    },
    {
      "title": "Practical Java : Spring Boot 3 REST API with Elasticsearch 8",
      "url": "https://www.udemy.com/course/practical-java-spring-boot-rest-api-with-elasticsearch/",
      "bio": "Java (Spring Boot 3), REST API, Elasticsearch, Kibana, Github to develop & monitor back-end applications",
      "objectives": [
        "Various tricks offered by Spring to ease your programming effort",
        "Practical Knowledge of Spring Boot : REST API, Unit test",
        "Document your REST API and keep your source code sync with documentation",
        "Learn the basic of source code version control",
        "Understand basic usage of Elasticsearch & Kibana, and how to integrate java code with them",
        "Create basic data visualization & dashboard using Elastic search & Kibana"
      ],
      "course_content": {
        "Introduction": [
          "Welcome!",
          "Before You Start : Reccomendation and Tips",
          "Course Structure",
          "Technology In This Course"
        ],
        "Installation": [
          "Download Links",
          "Installation (Windows)"
        ],
        "REST API & JSON": [
          "REST API Basic Concept",
          "JSON Overview"
        ],
        "First Java Code With REST API": [
          "More About Spring Framework",
          "Why Spring Boot?",
          "Hello Spring Boot",
          "Try API Using Postman",
          "HTTP Method for Hello World",
          "Practical Tips : Using Eclipse",
          "Gradle",
          "Tips : Semantic Versioning",
          "Automatic Reload with Spring Boot Devtools"
        ],
        "Application Deployment": [
          "Create Executable Jar",
          "Create Deployable War",
          "Deploy as Docker",
          "Spring Boot Configuration"
        ],
        "Version Control Using Git": [
          "Version Control, Git, & Github",
          "Git Basic Commands",
          "Creating Github Repository",
          "Git Basic Usage"
        ],
        "Log": [
          "What is Log?",
          "Log & Version Control"
        ],
        "Spring REST Server - Producing JSON (Part One)": [
          "What We Will Build : JSON",
          "Creating JSON Response",
          "Practical Tips : Eclipse Package Presentation",
          "Creating Request with JSON Body",
          "Fixing Car API : Public Constructor"
        ],
        "Spring REST Server- Producing JSON (Part Two)": [
          "What We Will Build (Part 2)",
          "Why the JSON response does not show new attributes",
          "Fixing Car & Generate Random Car",
          "Working With Collection",
          "Java Class as JSON Attribute",
          "Practical Tips : Validate JSON String",
          "More Jackson Annotations",
          "Jackson Annotations"
        ],
        "Working With HTTP Request & Spring Data Elasticsearch": [
          "Elasticsearch Security",
          "Elasticsearch & Spring Data",
          "Consuming API & Elasticsearch Data Source",
          "Basic Elasticsearch Operation Using Postman",
          "Spring Data & Http Variables",
          "Spring Data Query - Theory",
          "Spring Data Query - In Action",
          "Practical Tips : Spring Data - Method Name Cheat Sheet & Elasticsearch Query",
          "Pagination & Sorting"
        ]
      },
      "requirements": [
        "Familiar with basic Java Programming. You need to know the basic concept (class, interface, constructor) + basic syntax (loop, statements)",
        "Windows 10 laptop / PC. The content of this course is applicable on Mac / Linux, but for installation section, I only provides Windows.",
        "A willingness to learn and a good spirit"
      ],
      "description": "New Update on July 2023\nUpdated to Elasticsearch 8.x and Spring Boot 3.x\nUpdated all videos with better audio\n\n\nAs a developer, we need to work productively. In Java programming, one way to achieve this is by Using Spring Framework. Recognized as one of the popular framework in Java world, Spring will increase developer productivity a lot. It has wide arrays of technology that can be used on almost any enterprise use-cases.\nThis course is suitable for you, if you already write codes (especially Java) for some times, and want to know new things, that relevant to today's job demand. Or you just tech savvy that want to sharpen your Java programming skills to get more advanced level. In some of companies, you might have been work with legacy Java systems that already 5 years old or more. In that case, this course is suitable to refresh your mind, keep updated and get ready to adapt to new technology.\nYou don't have to be advanced Java programmer to learn this course, although some basic Java programming is required. I will teach you step by step, started from little theory to give you some clarity, and most of the times we will do practical hand-codes, or using tech-related-tools.\n\n\nWhat Will You Learn?\nIn this course, we will use following technologies\nJava\nSpring & Spring Boot\nEclipse & Spring Tools Suite\nGradle\nPostman\nElasticsearch\nSpring Data for Elasticsearch\nGit & Github\nLogging with logback\nAutomatic API documentation with Swagger\nYou will get introduction and practical lesson how to using them during your journey as Java developer.\n\n\nNote for Non-Windows Users\nI’m very sorry, but currently I don’t have Mac or Linux environment, so I can’t show you step-by-step video to install our tools in environment other than Windows. You can find step-by step installation guide on each product's page but currently not in this course. However, the content of the course is applicable for any operating system.\n\n\nWhat \"Practical\" Means?\nAs the title says, we will learn practical things about Java, especially Spring Framework. This course's purpose is preparing you to be ready to handle  real-life applications. Of course, real-life applications has a lot more complexity and a lot more difficult that what we will learn in this course. Java framework itself has been around for 20 years, with Spring Framework has been live since 2003. With such long history, it is impossible to tell everything in just one course. This course is to preparing you to take the first few steps for begin journey as advanced Java developer, particularly using Spring Framework.\nIn this course, you will get several hand-on code, and tips for best-practice in REST API programming with Spring Boot.\n\n\nIs This Course Suitable for You?\nTo answer this, please see the preview video on section 1.\nIf you have basic understanding of Java, and eager to learn, then this course is suitable for you. But if you are a seasoned Java developer that constantly update your knowledge, you might even smarter then me, and this course might be too easy for you.\nPlease check the course content to find out if this course can meet your expectation.\n\n\nYou Get Involved in This Course\nBeing a programmer need discipline and persistence. You need to learn. You will get errors, fix, and improve it -again and again- until you become good. This course will give you some quizzes and coding exercises, where you can get involved, and practice what you have learned. Of course, not all of you happy with this approach. So I design the quiz and coding exercises to be optional. Work with them if you like, or straight to the answers and practice directly.\n\n\nWhy Choose Me as Your Instructor?\n-- Experience --\nI have been developing Java apps for enterprise since early 2010, from old-style JSP & JDBC, up to Spring framework which is currently most popular Java framework. Based on real-life experience, I know what should be done to create program that not just functionally runs, but also technically good. I experience programmers pain point, or operation team pain point and how to handle them.\nI have been lead team as Engineering Manager & Architect for several years, and as a part of responsibility, coaching and teaching tech skills also part of my job. So I can deliver good lectures, based on real-life experience on Java programming.\n-- Serious --\nI became instructor not for social purpose, but to earn some money. Thus, you are my customers, and I try my best not to disappoint you. I will try to give best value for you, so you feel happy spend your money, and take another of my course. I will try to answer your question, as long as it still in this course's scope.\n\n\nElasticsearch & Kibana for Java Developers\nIn this course, I will introduce you to technology that maybe you're not familiar with: Elastic search & Kibana.\nThese two technologies are quite popular. Knowing those two things will be an added value for every developer. Elasticsearch is commonly used as search engine because it is very fast. We will learn basic data manipulation with Spring Data Elasticsearch.\nWe will also learn about Kibana, an open source tools to visualize data (example : create real-time chart) and creating dashboard from several charts.\n\n\nAPI Unit Testing & Documentation\nYou will learn how to write unit testing. That is a source code to test source code. We can do unit testing for repetitive test tasks, and helping make sure that no broken code due to some changes.\nAlso, in this course we will learn how to create API documentation with almost no effort, because we will use library to help us create API documentation automatically. The API documentation output are: HTML, or JSON format that can be transferred to more sophisticated API documentation tools.\n\n\nFull English Subtitle\nThis course comes with perfect English subtitle. I myself not a native English speaker, so to give better experience for students (you), I provides accurate English subtitle for all lectures.\n\n\nThis course is safe!\nThis course comes with a 30 day money-back guarantee. That means if you are not satisfied with this course, just let me know and I’ll give your money back 100%. So no risk at your side for taking this Java course. You can be equip yourself with knowledge for real-world: Java, Spring, database, version control with github, REST API, and many more. You can go on, develop good enterprise or start-up software, potentially make an awesome career (and money) for yourself. Or you get your money back if you don’t like it.\nOf course, you can see some preview course, all for FREE. Just find out the course content marked as Preview and play the video. No credit card required, no question asked, just play the video.\n\n\nRoad to Microservice\nREST API is one important pillar of microservice architecture. In micro service, we use REST API and asynchronous messaging for inter-service communication. Services communicating by exchanging messages over REST API, or messaging channels like RabbitMQ.\nIn this course, you will learn the theory and hand-code of messaging with REST API your one step ahead toward modern micro service architecture.",
      "target_audience": [
        "Anyone with some basic knowledge in Java and an interested in web programming",
        "You wants to learn about technology REST API using Java, as a learning path toward microservice architecture",
        "Java Developer who wants to improve their skill & efficiency by using Spring Framework",
        "Those who curious about Elasticsearch and Java code to work with it"
      ]
    },
    {
      "title": "Data Structures and Algorithms In C# ( DSA )",
      "url": "https://www.udemy.com/course/data-structures-and-algorithms-in-csharp/",
      "bio": "Data Structures and Algorithms in C# Using DSA C# and DSA in C# Data Structures Algorithms DSA with C# DSA in C# DSA C#",
      "objectives": [
        "Understand the details of Data Structures and algorithms (DSA) through animations",
        "Learn to write programs for different Data Structures and Algorithms in C#",
        "Get the confidence to face programming interviews",
        "Test your knowledge with over 100 Quiz questions",
        "Learn how to analyse algorithms",
        "Get the ability to write and trace recursive algorithms"
      ],
      "course_content": {
        "About course": [
          "Introduction to Data Structures and Algorithms Through C# In Depth"
        ],
        "Introduction to Data Structures and Algorithms": [
          "Important : Source Code Repository required for course",
          "Data Structures and Algorithms",
          "Measuring Running time of Algorithms",
          "Asymptotic Analysis",
          "Big O Notation",
          "Finding Big O",
          "Tight and Loose Upper Bounds",
          "Introduction Quiz A",
          "Big O analysis of Algorithms",
          "Finding Time complexity",
          "Big O analysis of Algorithms: Examples",
          "Worst case, Best case and Average Case Analysis",
          "Common Complexities",
          "Abstract Data Types",
          "Introduction Quiz B"
        ],
        "Linked List": [
          "Introduction to Linked List in C#",
          "Traversing and Searching a Single Linked List",
          "Finding references in a single linked list",
          "Difference between while(p!=NULL) and while(p.link!=NULL)",
          "Insertion in a Single Linked List",
          "Insertion in a Single Linked List ..contd",
          "Deletion in a Single Linked List",
          "Your Review Matters!",
          "Reversing a Single Linked List",
          "Linked List Quiz A",
          "Sorting a Linked list using Bubble Sort",
          "Merging of sorted Linked lists",
          "Sorting a Linked list using Merge Sort",
          "Finding and Removing a cycle in a Linked list",
          "Doubly linked list",
          "Insertion in a doubly linked List",
          "Deletion from doubly linked list",
          "Reversing a doubly linked list",
          "Circular linked list",
          "Insertion in a circular Linked List",
          "Deletion in a circular linked list",
          "Concatenation",
          "Linked List with Header Node",
          "Sorted linked list",
          "Linked List Quiz B"
        ],
        "Stack and Queue": [
          "Introduction",
          "Stack",
          "Array Implementation of Stack",
          "Linked List Implementation of Stack",
          "Queue",
          "Array Implementation of Queue",
          "Linked List implementation of Queue",
          "Queue through Circular Linked List",
          "Circular Queue",
          "Deque",
          "Priority Queue",
          "Checking validity of an expression containing nested parentheses",
          "Evaluating Arithmetic Expressions",
          "Polish Notations",
          "Converting infix expression to postfix expression",
          "Evaluation of postfix expression",
          "Stack and Queue Quiz"
        ],
        "Recursion": [
          "Introduction",
          "Flow of control in Recursive functions",
          "Winding and unwinding phase",
          "Factorial",
          "Printing numbers from 1 to n",
          "Sum of digits of an integer",
          "Base conversion",
          "Finding nth power of a number",
          "Euclids Algorithm",
          "Fibonacci Series",
          "Tower of Hanoi",
          "Tail recursion",
          "Recursion vs. Iteration",
          "Recursion Quiz"
        ],
        "Binary Tree": [
          "Introduction to trees",
          "Binary Tree",
          "Strictly Binary Tree and Extended Binary Tree",
          "Full binary tree and Complete Binary Tree",
          "Array Representation of Binary trees",
          "Linked Representation of Binary Trees",
          "Binary Tree Quiz A",
          "Binary Tree in C#",
          "Traversal in Binary Tree",
          "Preorder Traversal",
          "Inorder Traversal",
          "Postorder Traversal",
          "Level order traversal",
          "Finding height of a Binary tree",
          "Constructing Binary tree from Traversals",
          "Constructing binary tree from inorder and preorder traversals",
          "Constructing binary tree from inorder and postorder traversals",
          "Binary Tree Quiz B"
        ],
        "Binary Search Tree": [
          "Introduction",
          "Traversal in Binary Search Tree",
          "Searching in a Binary Search Tree",
          "Nodes with Minimum and Maximum key",
          "Insertion in a Binary Search Tree",
          "Deletion in a Binary Search Tree",
          "Binary Search Tree Quiz"
        ],
        "Heap": [
          "Introduction",
          "Heap Representation",
          "Insertion in Heap",
          "Deletion",
          "Building a heap",
          "Heap Applications",
          "Heap Tree Quiz"
        ],
        "Sorting": [
          "Introduction to Sorting Algorithms",
          "Sort Stability",
          "Selection Sort",
          "Selection Sort : Example",
          "Selection Sort in C#",
          "Analysis of Selection Sort",
          "Bubble Sort",
          "Bubble Sort : Example",
          "Bubble Sort in C#",
          "Improvement in Bubble Sort",
          "Analysis of Bubble Sort",
          "Sorting Quiz A",
          "Insertion Sort",
          "Insertion Sort : Example",
          "Insertion Sort in C#",
          "Analysis of Insertion sort",
          "Shell Sort",
          "Shell Sort : Example",
          "Shell Sort in C#",
          "Analysis of Shell Sort",
          "Merging two Sorted Arrays",
          "Recursive Merge Sort",
          "Recursive Merge Sort in C#",
          "Analysis of Merge Sort",
          "Iterative Merge Sort",
          "Iterative Merge Sort in C#",
          "Quick Sort",
          "Quick Sort in C#",
          "Analysis of Quick Sort",
          "Binary tree sort",
          "Binary Tree Sort in C#",
          "Analysis of Binary Tree Sort",
          "Heap Sort",
          "Heap Sort : C# implementation and Analysis",
          "Radix Sort",
          "Radix Sort : C# implementation and Analysis",
          "Address Calculation Sort",
          "Address Calculation Sort in C#",
          "Analysis of Address Calculation Sort",
          "Sorting Quiz B"
        ],
        "Searching": [
          "Linear Search",
          "Variations of Linear Search",
          "Binary Search",
          "Implementation of Binary Search",
          "Analysis of Binary Search"
        ]
      },
      "requirements": [
        "Basic knowledge of programming in C#"
      ],
      "description": "This \"Data Structures and Algorithms In C#\" course is thoroughly detailed and uses lots of animations to help you visualize the concepts.\nThis \"Data Structures and Algorithms in C#\" tutorial will help you develop a strong background in Data Structures and Algorithms (DSA). The course is broken down into easy to assimilate short lectures, and after each topic there is a quiz that can help you to test your newly acquired knowledge. The examples are explained with animations to simplify the learning of this complex topic. Complete working programs are shown for each concept that is explained.\nThis Data Structures and Algorithms using C# course provides a comprehensive explanation of data structures like linked lists, stacks and queues, binary search trees, heap, searching and hashing. Various sorting algorithms with implementation and analysis are included. Concept of recursion is very important for designing and understanding certain algorithms so the process of recursion is explained with the help of several examples.\nThis Data Structures in C# course covers following DSA topics in C# with implementation :\nAlgorithm Analysis, Big O notation, Time complexity, Singly linked list, Reversing a linked list, Doubly linked list, Circular linked list, Linked list concatenation, Sorted linked list.\nStack, Queue, Circular Queue, Dequeue, Priority queue, Polish Notations, Infix to Postfix, Evaluation of Postfix, Binary Tree, Binary Search Tree, Tree Traversal (inorder, preorder, postorder, level order), Recursion, Heap, Searching, Hashing\nSorting : Selection, Bubble, Insertion, Shell, Merging, Recursive Merge, Iterative Merge, Quick, Heap, Binary tree, Radix, Address calculation sort\nHere are the DSA topics in course-\nAlgorithm Analysis\nLinked List\nStack and Queue\nRecursion\nBinary Tree\nBinary Search Tree\nHeap\nSorting\nSearching\nHashing\nThroughout this Data Structures and Algorithms with C# course, a step by step approach is followed to make you understand different Data Structures and Algorithms. You will see code implementation of different data structures in C# and algorithms are explained in step-wise manner. Through this course you can build a strong foundation and it will help you to crack Data Structures and Algorithms in C# coding interviews questions and work on projects. Good foundation on Data Structures and Algorithms in C# interview topics helps you to attempt tricky interview questions.\nIn this Data Structures and Algorithms Through C# In Depth course, C# programs are used for implementing various concepts, but you can easily code them in any other programming language like C++, Java or Python.\nThis Learn Data Structures and Algorithms In C# online course on udemy will help software developers to refresh the concepts studied in Data Structures and Algorithms In C# books / pdf and also to students learning from referred book / pdf.\nWhat students are saying about this course-\n\"Very knowledgeable tutor. So much better than reading a book. It is really helpful for coding assessment.\"\n\"Clear and concise explanation of basic to advanced data structures. I was able to utilize this knowledge in refactoring my application to perform faster. Lot of DSA topics concepts were covered in this course which helps in tackling interview questions.\"\n\"This course is good and really demonstrates what should the developers know before the technical interview with top companies such as Amazon , Google , Microsoft  \"\n\"I really like this course and am learning a lot, even though I studied Data Structures during my college days no one explained like this way. Very detail oriented and simply superb! Keep up the great work!\"\n\"This course is extraordinary i recommend for all data structure and algorithm beginner who study any programming language  \"\n\"This is an excellent course - very similar to the Intro to Data Structures and Algorithms course I took in college. The diagrams and pictures are very helpful. The examples are all written out in clear and simple C# code. If your goal is to be able to whiteboard coding algorithms this course is a good place to start.\"\n\"Yes its really helpful to understand Algorithms and Data structures being a programmer me.\"\n\"short and precise introduction, author is convincing as efficient instructor\"\n\"Very informative and the visual style helped picture it better.\"\n\"Nice explanation of Trees and Binary Tree\"\n\"Very clear and concise explanations and examples. I learned a lot of data structures.\"\n\"the explanation is clear and easily understandable\"\n\"Concepts explained neatly !!\"\n\"The lectures are clear and precise.\"\n\"Great tutorial\"\n\"The author is doing a superb job so far at explaining the concepts behind algorithms and data structures.\"\n\nSo what are you waiting for, click on Buy button to enroll now and start learning.",
      "target_audience": [
        "Programmers looking for jobs",
        "Programmers wanting to write efficient code",
        "Computer Science students having Data Structures as part of their curriculum",
        "Non Computer science students wanting to enter IT industry"
      ]
    },
    {
      "title": "gRPC Masterclass with Java & Spring Boot [ Hands-On]",
      "url": "https://www.udemy.com/course/grpc-the-complete-guide-for-java-developers/",
      "bio": "Highly Scalable, Performant Modern APIs for Microservices - Master gRPC for Building Microservices Architectures",
      "objectives": [
        "Master gRPC for Microservices: Learn how to leverage gRPC to build high-performance, scalable microservices.",
        "Comprehensive gRPC Coverage: Explore all aspects of gRPC, from basics to advanced topics.",
        "Unlock the Power of Protocol Buffers: Understand how Protocol Buffers enable efficient data exchange.",
        "Achieve Superior Performance: Experience up to 10x faster performance compared to REST APIs.",
        "Build Scalable Microservices: Learn effective load balancing strategies for handling increased traffic.",
        "Ensure Data Security: Implement robust authentication mechanisms to protect your microservices.",
        "Handle Errors Gracefully: Master error handling techniques for a resilient microservices architecture.",
        "Spring Boot Integration: Discover how to integrate gRPC with Spring Boot for efficient development.",
        "Gain Real-World Insights: Learn from practical examples and best practices.",
        "Performance Optimization: Learn techniques to optimize gRPC performance.",
        "Practical Examples: Apply gRPC concepts to real-world scenarios."
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "[OPTIONAL] - gRPC-vs-REST - Performance Comparison"
        ],
        "Protocol Buffers": [
          "Introduction",
          "*** Resource ***",
          "Project Setup",
          "Creating First Proto",
          "Generated Source",
          "Creating An Instance From Generated Source",
          "Proto Java Option - Package",
          "Proto Java Option - Multiple Files",
          "Immutable, Equals & Clear Methods",
          "Adding Comments",
          "Scalar Types",
          "Scalar Demo",
          "Serialization & Deserialization",
          "Correction - Try With Resources",
          "JSON vs Proto - Performance - Part - 1",
          "JSON vs Proto - Performance - Part - 2",
          "JSON vs Proto Encoding",
          "Composition",
          "Collections",
          "What About Set?",
          "Map",
          "What About Complex Data Structure?",
          "Enum",
          "Default Values",
          "OneOf",
          "Importing Modules",
          "GCP - API",
          "Wrapper / Well Known Types",
          "Scalar Optional",
          "How Proto Works",
          "Message Format Changes - Part - 1",
          "Message Format Changes - Part - 2",
          "Message Format Changes - Part - 3",
          "Message Format Changes - Part - 4",
          "Proto - CI/CD",
          "Summary",
          "Quiz"
        ],
        "gRPC - Unary": [
          "Introduction",
          "Communication Patterns",
          "How gRPC Performs Better",
          "Unary API",
          "Adding gRPC Java As Source Root",
          "Stream Observer",
          "Unary Service Implementation",
          "Unary API Demo via Postman",
          "Account Repository",
          "gRPC Server Refactor",
          "Client Server Communication",
          "gRPC Client Demo",
          "Channel / Stub - Clarification",
          "Blocking vs Async Stub",
          "How Async Stub Works",
          "Listenable Future",
          "Abstract Test",
          "Unary API - Integration Test",
          "Get All Accounts - API",
          "ASSIGNMENT - Integration Test",
          "Async Stub - Integration Test",
          "Response Observer - Test Utility",
          "Async Stub - Integration Test - Refactor",
          "What About CRUD Using gRPC?",
          "Summary"
        ],
        "gRPC - Server Streaming": [
          "Introduction",
          "Streaming Possible Outputs",
          "Service Definition",
          "Server Streaming RPC Implementation",
          "Demo via Postman",
          "Blocking Stub - Integration Test",
          "Async Stub - Integration Test",
          "*** FAQ *** - Ordering Of Messages",
          "*** FAQ *** - Unary vs Streaming",
          "*** FAQ *** - Stream Observer Thread Safety",
          "*** FAQ *** - Sequential vs Parallel Processing",
          "*** FAQ *** - Streaming Backpressure",
          "Quiz"
        ],
        "gRPC - Client Streaming": [
          "Introduction",
          "Service Definition",
          "Why We Return Stream Observer?",
          "Streaming Request Handler Implementation",
          "Demo via Postman",
          "Integration Test",
          "Cancel Stream"
        ],
        "gRPC - BiDirectional Streaming": [
          "Introduction",
          "Service Definition",
          "BiDirectional Streaming Service Implementation",
          "Demo via Postman",
          "Independent Stream Demo",
          "Integration Test",
          "Interactive Stream",
          "Flow Control - Service Implementation",
          "Flow Control Demo via Postman",
          "Manual Flow Control Client - Part 1",
          "Manual Flow Control Client - Part 2",
          "Manual Flow Control Client - Part 3"
        ],
        "Client/Server - Interactive Game - ASSIGNMENT": [
          "Introduction",
          "Resource - Proto",
          "Game Implementation"
        ],
        "Input Validation / Error Handling": [
          "Introduction",
          "Resource- gRPC Status Codes",
          "Project Setup",
          "Request Validator Utility",
          "Input Validation Implementation",
          "Demo via Postman",
          "Unary Error Handling - Integration Test",
          "Server Streaming Error Handling - Integration Test",
          "What About Server Error?",
          "What About Other Communication Patterns?",
          "Trailer Metadata",
          "Service Definition",
          "Project Setup",
          "Trailer Metadata Implementation",
          "Demo via Postman",
          "String Metadata",
          "Accessing Trailer via Status",
          "ASSIGNMENT - Trailer For Server Streaming",
          "Error Message via OneOf",
          "Summary"
        ],
        "Deadline": [
          "Introduction",
          "Integration Testing",
          "Streaming Deadline Issue",
          "Streaming Deadline Issue Fix",
          "WaitForReady",
          "WaitForReady & Deadline"
        ],
        "Channel / LoadBalancing": [
          "Introduction",
          "Persistent Connection",
          "Lazy Channel Creation",
          "Eager Channel Creation",
          "Server KeepAlive Configuration",
          "KeepAlive - Demo",
          "Load Balancing",
          "Resource - Docker Compose",
          "Load Balancing - Demo",
          "Streaming Request Load Balancing - Clarification",
          "gRPC On Kubernetes",
          "Summary"
        ]
      },
      "requirements": [
        "Knowledge on Java 8 or above",
        "Comfortable with Indian Accent"
      ],
      "description": "Master gRPC for High-Performance Microservices with Spring Boot & Protocol Buffers\nEmpower yourself to build next-generation microservices with this comprehensive gRPC course. Learn how to leverage Protocol Buffers and Spring Boot to create scalable, efficient, and performant applications.\nKey Takeaways:\nMaster Protocol Buffers: Gain a solid understanding of Google's language-neutral data format for seamless data exchange.\nUnlock gRPC Potential: Explore the benefits of gRPC for microservices communication, achieving up to 10x faster performance compared to REST APIs.\nDemystify RPCs: Dive deep into different RPC types (Unary, Streaming) and their effective implementation.\nConquer Load Balancing: Address load balancing challenges and implement effective strategies for optimal performance.\nSecure Your Services: Implement robust authentication mechanisms using user and service tokens.\nHandle Errors Confidently: Master error handling techniques with gRPC and Protobuf OneOf.\nSpring Boot Integration: Seamlessly integrate gRPC with Spring Boot for efficient microservice development.\nBest Practices & Real-World Insights: Learn industry best practices and overcome real-world challenges in gRPC deployments.\nJoin this course and unlock the power of gRPC to build highly performant, scalable, and efficient microservices using Protocol Buffers and Spring Boot. Gain the skills necessary to overcome common challenges in microservices communication, achieve superior performance, and streamline your API design with gRPC.",
      "target_audience": [
        "Any Developer / Architect who is interested in Microservice Development / Architecture"
      ]
    },
    {
      "title": "AWS Fundamentals for Beginners",
      "url": "https://www.udemy.com/course/aws-fundamentals-for-beginners/",
      "bio": "Learn to use the popular AWS services to build your infrastructure on cloud",
      "objectives": [
        "Learn about basic AWS services",
        "Learn to build your infrastructure in AWS",
        "Learn the best practices for AWS infrastructure managment",
        "Learn services such as IAM, EC2, S3, Dynamo DB and Aws lambda"
      ],
      "course_content": {
        "Introduction to AWS": [
          "Introduction",
          "Introduction to AWS",
          "Creating an AWS Account",
          "Introduction to AWS Management Console",
          "AWS Documentution overview"
        ],
        "AWS IAM ( Identity & Access Management )": [
          "IAM Overiew What & Why?",
          "IAM User & Group",
          "IAM Policies + a Quick Lab",
          "IAM Roles overview & How to Create a Role",
          "IAM Best Practices"
        ],
        "EC2": [
          "EC2 Basics",
          "AMIs",
          "EBS",
          "Security Groups",
          "Lab : Launching an EC2 Instance",
          "EC2 Lab Demo",
          "Lab : Use an EC2 Instance Part 1",
          "Lab : Use an EC2 Instance Part 2",
          "Summary"
        ],
        "Amazon S3 Simple Storage Service": [
          "S3 Basics",
          "S3 Storage Classes",
          "S3 Lab"
        ],
        "AWS Database Services": [
          "AWS Database Services Introduction",
          "Lab : Launch RBS DB Instance",
          "DynamoDB Introduction",
          "Lab : Dynamo DB",
          "Modifying + Cleaning up the Resources"
        ],
        "Other Services": [
          "Cloud Watch",
          "Elastic Load Balancing",
          "EC2 Auto Scaling",
          "Amazon Route 53",
          "AWS Lambda",
          "Bonus Lecture: More Interesting Stuff, Offers and Discounts"
        ]
      },
      "requirements": [
        "Access to an AWS account is required to complete this course and follow along the instructor."
      ],
      "description": "The introduction of cloud computing has revolutionized the tech world. The easy accessibility of large storage options and cheap computing power has resulted in the Cloud becoming one of the most popular forms of data storage and computational infrastructure. In addition to data storing, cloud computing has also become a standard for creating manageable and scalable web application services.\nAmazon entered the cloud market in 2006 and has turned into the most popular public cloud service provider with its current AWS (Amazon Web Services). Many organizations have now moved their servers on the cloud and are additionally opting for building applications on borrowed servers to save time and money.\nOur course on Amazon Web Services tutorial for beginners is absolutely for anyone seeking to learn the basics of AWS. Even if you have never logged into the AWS platform before, we’ll guide you through the fundamentals, until you become more confident with the concepts and terminology.  No programming knowledge or AWS experience is required for completing this course.\n\nThis step by step course will cover everything from Introduction to AWS, a detailed description on concepts such as EC2 (Elastic Cloud Compute). It will also include going over Amazon’s Databases such as Amazon RDS, DynamoDB, and other related technologies including IAM (Identity and Access Management) along with the S3 basics (simple storage service).\nAlong these lines, this course will cover topics such as Cloud watch, Elastic load balancing, Auto scaling, Cloud 53, and the latest hot topic i.e. AWS lambda. At the end of this course you will be able to apply AWS skills and best practices in your own projects. This course is the perfect stepping stone on your journey to master AWS.\nWith so much packed in this course, what are you waiting for? Let’s get geared up for acing AWS!",
      "target_audience": [
        "This course is for absolute beginners who will like to use AWS for their infrastructure needs."
      ]
    },
    {
      "title": "Mastering Data Structures & Algorithms using C and C++",
      "url": "https://www.udemy.com/course/datastructurescncpp/",
      "bio": "Learn, Analyse and Implement Data Structure using C and C++. Learn Recursion and Sorting.",
      "objectives": [
        "Learn various Popular Data Structures and their Algorithms.",
        "Develop your Analytical skills on Data Structure and use then efficiently.",
        "Learn Recursive Algorithms on Data Structures",
        "Learn about various Sorting Algorithms",
        "Implementation of Data Structures using C and C++"
      ],
      "course_content": {
        "Before we Start": [
          "Instructor's Note",
          "Introduction"
        ],
        "Essential C and C++ Concepts": [
          "Arrays Basics",
          "Practice : Arrays Basics",
          "Structures",
          "Practice : Structures",
          "Pointers",
          "Practice : Pointers",
          "Reference in C++",
          "Practice : Reference",
          "Pointer to Structure",
          "Practice : Pointer to Structure",
          "Functions",
          "Practice : Functions",
          "Parameter Passing Methods",
          "Practice : Parameter Passing Methods",
          "Array as Parameter",
          "Practice : Array as Parameter",
          "Structure as Parameter",
          "Practice : Structure as Parameter",
          "Structures and Functions (Must Watch)",
          "Converting a C program to a C++ class (Must Watch)",
          "Practice : Monolithic Program",
          "Practice : Modular Program",
          "Practice : Structure and Functions",
          "Practice : Object-Oriented Program",
          "C++ Class and Constructor",
          "Practice : C++ Class",
          "Template classes",
          "Practice : Template Class"
        ],
        "Required Setup for Programming": [
          "Online C and C++ compiler",
          "Setup CodeBlocks and Settings",
          "Setup Dev-C++ and Settings",
          "Debugging using Dev-C++",
          "Debugging using CodeBlocks",
          "Setup Visual Studio",
          "Debugging using Visual Studio",
          "Setup Xcode"
        ],
        "Introduction": [
          "Introduction",
          "Stack vs Heap Memory",
          "Stack vs Heap. Continued...",
          "Physical vs Logical Data Structures",
          "ADT",
          "Time and Space Complexity",
          "Time and Space Complexity from Code"
        ],
        "Recursion": [
          "How Recursion Works ( Tracing )",
          "Generalising Recursion",
          "How Recursion uses Stack",
          "Recurrence Relation - Time Complexity of Recursion",
          "Lets Code Recursion",
          "Static and Global Variables in Recursion",
          "Let's Code Static and Global in Recursion",
          "Tail Recursion",
          "Head Recursion",
          "Tree Recursion",
          "Let's Code Tree Recursion",
          "Indirect Recursion",
          "Let's Code Indirect Recursion",
          "Nested Recursion",
          "Let's Code Nested Recursion",
          "Sum of Natural Number using Recursion",
          "Let's Code Sum of N using Recursion",
          "Factorial using Recursion",
          "Let's Code Factorial using Recursion",
          "Power using Recursion",
          "Let's Code Power Recursion",
          "Taylor Series using Recursion",
          "Let's Code Taylor Series using Recursion",
          "Taylor Series using Horner's Rule",
          "Let's Code Taylor Series Horner's Rule - Recursion",
          "Let's Code Taylor Series Iterative",
          "Fibonacci Series using Recursion - Memoization",
          "Let's Code Fibonacci",
          "nCr using Recursion",
          "Let's Code nCr using Recursion",
          "Tower of Hanoi Problem",
          "Let's Code Tower of Hanoi",
          "Recursion",
          "Quiz 1 Solutions"
        ],
        "Arrays Representations": [
          "Introduction to Array",
          "Declarations of Array",
          "Demo - Array Declaration",
          "Static vs Dynamic Arrays",
          "Demo - Static vs Dynamic Array",
          "How to Increase Array Size",
          "Demo - Increasing Array Size",
          "2D Arrays",
          "Demo - 2D Array",
          "Array Representation by Compiler",
          "Row Major Formula for 2D Arrays",
          "Column Major Formula for 2D Arrays",
          "Formulas for nD Arrays",
          "Formulas for 3D Arrays",
          "Arrays Representation",
          "Solutions for Quiz 2"
        ],
        "Array ADT": [
          "Array ADT",
          "Demo - Array ADT",
          "Inserting in an Array",
          "Let's Code Insert",
          "Deleting from Array",
          "Let's Code Delete",
          "Linear Search",
          "Improving Linear Search",
          "Let's Code Linear Search",
          "Binary Search",
          "Binary Search Algorithm",
          "Let's Code Binary Search",
          "Analysis of Binary Search",
          "Average Case Analysis of Binary Search",
          "Get( ) Set( ) Avg( ) Max( ) functions on Array",
          "Let's Code Get() Set() Max() on Array",
          "Reverse and Shift an Array",
          "Lest's Code Reversing an Array",
          "Check if Array is Sorted",
          "Let's Code to check if Array is Sorted",
          "Merging Arrays",
          "Let's Code to Merge Arrays",
          "Set operations on Array - Union, Intersection and Difference",
          "Let's Code Set operations on Array",
          "Let's Code a Menu Driver program for Arrays",
          "Let's convert C program for Array to C++",
          "Let's Put all together in C++ program for Array",
          "Student Challenge : Finding Single Missing Element in an Array",
          "Student Challenge : Finding Multiple Missing Elements in an Array",
          "Student Challenge : Finding Missing Element in an Array Method 2",
          "Student Challenge Finding Duplicates in a Sorted Array",
          "Student Challenge : Finding Duplicates in Sorted Array using Hashing",
          "Student Challenge : Finding Duplicates in a Unsorted Array",
          "Student Challenge : Finding a Pair of Elements with sum K",
          "Student Challenge : Finding a Pair of Elements with sum K in Sorted Array",
          "Student Challenge : Finding Max and Min in a single Scan",
          "Array ADT",
          "Solutions for Quiz 3"
        ],
        "Strings": [
          "Introduction to Strings",
          "Finding Length of a String",
          "Changing Case of a String",
          "Counting Words and Vowels in a String",
          "Validating a String",
          "Reversing a String",
          "Comparing Strings and Checking Palindrome",
          "Finding Duplicates in a String",
          "Finding Duplicates in a String using Bitwise Operations",
          "Checking if 2 Strings are Anagram (distinct letters)",
          "Permutation of String"
        ],
        "Matrices": [
          "Section Introduction",
          "Diagonal Matrix",
          "Let's Code Diagonal Matrix",
          "C++ class for Diagonal Matrix",
          "Let's Code C++ class for Diagonal matrix",
          "Lower Triangular Matrix Row-Major Mapping",
          "Lower Triangular Matrix Column-Major Mapping",
          "Let's Code Lower Triangular Matrix in C",
          "Let's Code Lower Triangular Matrix in C++",
          "Upper Triangular Matrix Row-Major Mapping",
          "Upper Triangular Matrix Column-Major Mapping",
          "Symmetric Matrix",
          "Tri-Diagonal and Tri-Band Matrix",
          "Toeplitz Matrix",
          "Menu Driven Program for Matrices",
          "Menu Driven Program for Matrices using Functions",
          "How to Write C++ Classes for All Matrices",
          "Matrices"
        ],
        "Sparse Matrix and Polynomial Representation": [
          "Sparse Matrix Representation",
          "Addition of Sparse Matrices",
          "Array Representation of Sparse Matrix",
          "Let's Code to Create Sparse Matrix",
          "Program for Adding Sparse Matrix",
          "Let's Code to Add Sparse Matrix",
          "Let's Code Sparse Matrix using C++",
          "Let's Code Sparse Matrix using C++ Continued.....",
          "Polynomial Representation",
          "Polynomial Evaluation",
          "Polynomial Addition",
          "Let's Code Polynomial"
        ]
      },
      "requirements": [
        "Previous knowledge of Programming in C and C++"
      ],
      "description": "You may be new to Data Structure or you have already Studied and Implemented Data Structures but still you feel you need to learn more about Data Structure in detail so that it helps you solve challenging problems and used Data Structure efficiently.\n\nThis 53 hours of course covers each topic in greater details, every topic is covered on Whiteboard which will improve your Problem Solving and Analytical Skills. Every Data Structure is discussed, analysed and implemented with a Practical line-by-line coding.\nSource code for all Programs is available for you to download\n\n\nAbout Instructor\nI am the Instructor of this course, I have been teaching this course to university students for a long period of time, I know the pulse of students very well, I know how to present the topic so that it’s easy to grasp for students.\nI know how to use White board to explain the topic and also to make it memorable. Remembering the thing and using them in right place is more important than just understanding the topic.\nAfter Completing Course\nAfter completing this course you will be confident enough to take up any challenging problem in coding using Data Structures.\n\n\nCourse Contents\n1. Recursion\n2. Arrays Representation\n3. Array ADT\n4. Linked List\n5. Stack\n6. Queues\n7. Trees\n8. Binary Search Tree\n9. AVL Trees\n10. Graphs\n11. Hashing Technique",
      "target_audience": [
        "Developer who want to get Deepest knowledge of Data Structure",
        "Undergraduate who want to Learn Data Structures Perfectly"
      ]
    },
    {
      "title": "Creating A Chip-8 Emulator In C",
      "url": "https://www.udemy.com/course/creating-a-chip-8-emulator-in-c/",
      "bio": "Learn to create an emulator for a 1970s machine!",
      "objectives": [
        "How to create an emulator for the Chip-8 machine",
        "Knowledge of how instruction sets work",
        "Understanding of how machines work"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Setup And Structure": [
          "Chip-8 Emulator Overview",
          "Setting Up Our Project And SDL",
          "Structuring Our Project"
        ],
        "Implementing Virtual Hardware And Essentials": [
          "Implementing The Memory",
          "Creating The Registers",
          "Creating The Stack",
          "Creating The Keyboard",
          "Initializing The Chip-8",
          "Creating The Default Character Set",
          "Creating The Display",
          "Drawing Sprites To The Screen",
          "Implementing The Delay Timer",
          "Implementing The Sound Timer"
        ],
        "Simulating The Instruction Set": [
          "Starting The Creation Of The Instruction Set Simulator",
          "Implementing The Chip-8 Instruction Set"
        ],
        "Finishing Up": [
          "Speeding Up Our Emulator"
        ],
        "Bonus Section": [
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "You must be confident in the C programming language",
        "You must understand hexadecimal",
        "You must understand bitwise operators and bit shifting"
      ],
      "description": "In this fantastic course you will learn how to create your very own emulator for the Chip-8 in the C programming language. The Chip-8 is a virtual machine from the mid 1970s designed to make game development easier.\nThis course is great for anyone who has programming experience and would love to create an emulator but just does not know where to start or has attempted to do it but ran into problems\nYou are taken through every step of emulator creation, throughout this course we start by setting up our project, then we start writing code to emulate the display and keyboard from the era. We soon move to simulating the entire Chip-8 instruction set.\nAfter you complete this course you will have a fully functioning Chip-8 emulator that can run space invaders, pong and many other classic games.",
      "target_audience": [
        "People interested in learning how to create an emulator"
      ]
    },
    {
      "title": "Testing React and Redux Applications - Unit and Integration",
      "url": "https://www.udemy.com/course/testing-react-and-redux-applications-unit-and-integration/",
      "bio": "Learn how to write quality tests for React and Redux applications using Enzyme, jsdom, and React testing library",
      "objectives": [
        "React",
        "Redux",
        "Unit Testing",
        "Integration Testing",
        "Enzyme",
        "React Testing Library",
        "DOM Integration Testing"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Environment Setup": [
          "Setting up our developer environment"
        ],
        "React Redux Sample Application Overview": [
          "Sample application source code",
          "Application walk through: UI",
          "Application walk through: Code"
        ],
        "Unit Tests for React Components": [
          "Creating our first test file",
          "Installing Enzyme testing utility",
          "First unit test for React component",
          "Unit test for React components: Part 2",
          "Unit test for React components: Part 3",
          "Setup and Tear down",
          "Unit tests for Styling and Business logic"
        ],
        "Unit Tests for Action Creators": [
          "Unit tests for action creators"
        ],
        "Unit Tests for Reducers": [
          "Quick Recap",
          "Reducer unit tests"
        ],
        "Integration Tests": [
          "Introduction to Integration tests",
          "Integration tests for Redux Store",
          "Integration tests for Redux Store: Part 2",
          "Installig React testing library and jsdom",
          "Full DOM Integration Tests"
        ],
        "Including and Excluding Tests": [
          "Including and Excluding Tests"
        ],
        "Test Coverage Report": [
          "Test Coverage Report"
        ],
        "Next Steps": [
          "Next steps and recommendations"
        ]
      },
      "requirements": [
        "Basic Knowledge of React",
        "Basic Knowledge of Redux",
        "Redux Store and State Management"
      ],
      "description": "This course will give you the skill set that you would need to write high quality tests for your React Redux application. The course will cover writing unit tests for react components, unit tests for action creators, unit tests for reducers, integration tests for the Redux store, and full DOM integration tests using libraries such as Enzyme, React Testing Library, and jsdom. You will also learn how to run these tests using the Jest framework.",
      "target_audience": [
        "React Redux Developers interested in unit and integration testing",
        "Frontend Software Engineers curious about different testing strategies",
        "Developers interested in UI testing frameworks"
      ]
    },
    {
      "title": "Developing with S3: AWS with Python and Boto3 Series",
      "url": "https://www.udemy.com/course/aws-with-python-and-boto3-implementing-solutions-with-s3/",
      "bio": "Learn multi-part file uploads, host a static website, use Route53 to route traffic to your S3 website and much more!",
      "objectives": [
        "You'll be able to host your own website with S3!",
        "You'll learn and be able to use a real domain of yours using Route53 on S3 to route traffic to your website!",
        "You'll be able to upload any-size file to S3 by implementing Multi-Part Upload!",
        "You'll learn how to create buckets, upload files, apply lifecycle policies and much more!",
        "You'll be able to implement any sort of infrastructure with S3 on AWS with Python!",
        "You'll learn how to code against AWS API using Python and Boto3!",
        "You'll be confident to work with AWS APIs using Python for any kind of AWS Resource on S3!"
      ],
      "course_content": {
        "Introduction": [
          "Welcome",
          "About This Course",
          "What We Will Build in This Course",
          "What Do You Need For This Course"
        ],
        "Preparing The Environment for Development": [
          "About Tools and Environment",
          "Create an AWS Account If You Don't Already Have It!",
          "Logging in to AWS Console and A Walkthrough",
          "Let's Create Our AWS Credentials!"
        ],
        "Windows Environment Setup": [
          "Installing Python 3 and Pip",
          "Installing AWS SDK (CLI)",
          "Prepapring CLI with AWS Credentials",
          "Installing Boto3",
          "Verifying The Setup"
        ],
        "MacOS Environment Setup": [
          "Installing Python 3 and Pip",
          "Installing AWS SDK (CLI)",
          "Prepapring CLI with AWS Credentials",
          "Installing Boto3",
          "Verifying The Setup"
        ],
        "Simple Storage Service (S3) with Boto3: Bucket Operations": [
          "Setting Up Our Project with PyCharm IDE",
          "Creating a Bucket",
          "Creating a Bucket Policy",
          "Listing Buckets",
          "Getting Bucket Properties",
          "Updating Bucket Properties",
          "Encrypting Bucket Objects with Server-Side Encryption",
          "Deleting Buckets"
        ],
        "Simple Storage Service (S3) with Boto3: Object Operations": [
          "Uploading Small Files",
          "Uploading Large Files with Multi-Part Upload - Part 1",
          "Uploading Large Files with Multi-Part Upload - Part 2",
          "Reading Objects and Files",
          "Versioning Bucket Files",
          "Uploading a New Version",
          "Lifecycle Policy Configuration for Buckets"
        ],
        "Simple Storage Service (S3) with Boto3: Static Website Hosting": [
          "Hosting a Website in S3 Bucket - Part 1",
          "Hosting a Website in S3 Bucket - Part 2",
          "Route53 DNS Binding for Bucket-Hosted Website"
        ],
        "Wrapping Up": [
          "Thank You!"
        ]
      },
      "requirements": [
        "Little to no experience with Python",
        "Any Python interpreter. Default is fine but I recommend PyCharm",
        "An AWS Account - Free Tier Available!",
        "General knowledge on AWS would be nice",
        "Not necessary but theoretical knowledge on S3 would be nice!"
      ],
      "description": "S3 is by far the most popular AWS service out there and the demand is only increasing! Most of the Fortune 500 companies, mid-size companies and startups are making use of it heavily!\nIf you want to learn ins and outs of S3 and how to implement solutions with S3, come join me in this course!\nS3 is Simple Storage Service from AWS and has many great features you can make use of in your applications and even in your daily life! You can use S3 to host your memories, documents, important files, videos and even host your own website from there!\nJoin me in this journey to learn ins and outs of S3 to gain all the necessary information you need to work with S3 using Python and Boto3!\nLet’s take a closer look at what we’re going to cover in this course step-by-step.\nIn this course, we’ll start of with what we’ll build throughout the course and what you need to have on your computer to follow along with me.\n\n\nDon’t worry; I’ll explain everything you need very clearly and I’ll show you what you need to install and setup on your computer to work with S3. There will be two different sections for Windows and MacOS users. These sections are basically identical and show how you can prepare your computer environment to be ready to work with S3! I’ll show you how to install Python, Boto3 and configure your environments for these tools. I’ll also show you how you can create your own AWS account step-by-step and you’ll be ready to work AWS in no time!\n\n\nWhen we’re done with preparing our environment to work AWS with Python and Boto3, we’ll start implementing our solutions for AWS.\n\n\nFirst and foremost, we’ll create a Bucket; Bucket is the fundamental part of S3 and its designed all-around buckets. We’ll build on top of that by adding a Bucket Policy. With bucket policies, you can decide who accesses and can do what on your bucket and objects inside it. Then we’ll learn how to do basic operations around buckets like listing the buckets, getting bucket properties, Encrypting Bucket Objects with Server-Side Encryption and much more!\n\n\nThen we’ll move on to another important part of working with S3 and that is uploading. We’ll start of with learning how to upload a small file to S3. You’ll learn how easy it is to do so. Next up is Multi-Part Upload for large files! I’ll show you how to implement Multi-Part Uploads and make use threading and parallelization so you can boost the upload speeds for your objects!\n\n\nVersioning is another key aspect of S3 and it has various benefits. For example, with versioning enabled, your objects are near impossible to delete so you won’t lose them with accidental deletes! Versioning provides a safe-way to version your files so you upload onto to the same object over and over again and keep track of all along the process! I’ll show you how you can enable versioning on your buckets and how you can upload new versions for your objects.\n\n\nWe’ll also configure lifecycle policies for our buckets to manage our objects present and the future. With lifecycle policies, you can decide when and what to do with your objects. For example, you can decide to move your unused files to a cheaper storage class like Glacier. So I’ll show you how you can design your own lifecycle policies on your buckets and objects and apply them with your code.\n\n\nAnd here comes S3 Static Website Hosting! Apart from many other great benefits of using S3, you can use it to store your static HTML, Javascript and CSS based websites on it! S3 even gives you a URL so everyone can access it anywhere in the world! We’ll not stop there of course; we’ll learn that Route53 can be used to route traffic to our S3-Hosted Website using our own custom domain!\n\n\nSo we’ll implement our S3 Static Website Hosting from scratch. We’ll design a simple website and configure it as a website inside our Bucket. Once we have our website up and running and accessible via a URL, we’ll move on to Route53 to configure our own Domain Name or DNS to route traffic to our S3 Hosted Website from our own custom domain!\nAgain, S3 is an amazing service from AWS and there are hundreds of ways you can make use of it. Let’s not lose more time and jump right into the implementation with S3 so I’ll see you in the course!",
      "target_audience": [
        "Beginners on AWS who wants to put their theory in practice",
        "AWS Cloud Architect Associate Exam Preppers who wants to practice their theories with real projects",
        "Who wants to learn how to Host Static Websites with S3!",
        "Who wants to learn Multi-Part Upload!",
        "Who wants to learn how to work with S3",
        "Who wants to learn how to implement Infrastructure-as-a-Code or IaaS on AWS",
        "Who wants to learn how to develop infrastructures on AWS using Python",
        "Who wants to learn AWS Python API or namely Boto3"
      ]
    },
    {
      "title": "Mendix : Low-code Application Development Course",
      "url": "https://www.udemy.com/course/mendix-low-code-application-development-course/",
      "bio": "Learn How to develope Low Code Mobile and Web Applications with Mendix.",
      "objectives": [
        "Students will learn how to develope low code applications with Mendix."
      ],
      "course_content": {},
      "requirements": [
        "Object Oriented Programming Concepts",
        "HTML",
        "CSS"
      ],
      "description": "Mendix is a high productivity app platform that enables you to build and continuously improve mobile and web applications at scale. The Mendix Platform is designed to accelerate enterprise app delivery across your entire application development lifecycle, from ideation to deployment and operations.\nMendix enables you to implement both Agile and DevOps best practices. It even goes beyond that by involving business stakeholders in the actual development of the applications.\nMendix offers both no-code and low-code tooling in one single fully integrated platform:\nNo code – Mendix provides a web-based visual app-modeling studio that is tailored toward business domain experts\nLow code – an extensive and powerful desktop-based visual app-modeling studio is also provided, which is tailored towards professional developers and can be integrated with coding IDEs to extend capabilities\nThe result of this no-code and low-code combination is that business domain experts (like analysts and citizen developers) can work alongside expert developers to achieve much greater levels of alignment and accelerated delivery. Moreover, the Mendix Platform’s cloud-native architecture and automation tools support the deployment, management, and monitoring of highly available enterprise-grade applications.\nSo In this course you will learn;\n- How to create beautiful User Interface with Mendix\n- Domain Model\n- Microflows\n- Security\n- Rest Services\n- RDBMS\n- OOP",
      "target_audience": [
        "Software Engineers",
        "IT employees who wants to learn mendix."
      ]
    },
    {
      "title": "Zynq Training - Learn Zynq 7000 SOC device on Microzed FPGA",
      "url": "https://www.udemy.com/course/zynq-training-learn-zynq-7000-soc-device-on-microzed-fpga/",
      "bio": "Learn the Basics of Xilinx Zynq® All Programmable System on a Chip (SoC) Design in Xilinx SDK.",
      "objectives": [
        "Use Vivado to Create a Zynq Hardware Design",
        "Understand the Fundamentals of Zynq design in Xilinx SDK",
        "Undetstand Structures for Processing Logic",
        "Learn the difference between Processing Logic (PL) and Processing Systems (PS)",
        "Go from Hello World to Blinking an LED to Reading and Writing from Memory to Exploiting Timers"
      ],
      "course_content": {
        "Introduction to Course": [
          "Introduction",
          "Before you embark on this course",
          "Downloading and Installing the Xilinx Vivado Design Suite",
          "Unboxing and Setup of the MicroZed Zynq Development Kit",
          "Adding Board Definition Files in Vivado for MicroZed",
          "Download the Zynq Source C Files from GitHub"
        ],
        "Lab1": [
          "Adding a Zynq Processing System in Vivado IP Integrator",
          "Hello World UART Lab On Zynq Processor in Xilinx SDK"
        ],
        "Lab2": [
          "Understanding Structs in XIlinx SDK",
          "How to blink an LED on Zynq Devices (Part1)",
          "How to blink an LED on Zynq Devices (Part2)",
          "Delay function in C Xilinx SDK for Zynq Boards",
          "Feedback on the Course"
        ],
        "Lab3": [
          "Debugging on Zynq in Xilinx SDK"
        ],
        "Lab4": [
          "Expanding Zynq with AXI BRAM and SPI Programmable Logic"
        ],
        "Lab5": [
          "Read GPIO on Zynq with MIO PushButtons Xilinx SDK"
        ],
        "Lab6": [
          "Reading and Writing to Memory in Xilinx SDK"
        ],
        "Lab7": [
          "Timers (Polled) in Xilinx SDK Zynq Training",
          "Zynq Timers Using Interrupts (Theory and Code)"
        ],
        "Conclusion and Bonus Section": [
          "Conclusion to the Zynq Course",
          "Cool Resources for Students"
        ]
      },
      "requirements": [
        "A Zynq Device (Microzed Board from Avnet Recommended but can use any Zynq Board)",
        "Vivado Design Suite 2015.4 or higher",
        "Xilinx SDK Installed (included with Vivado)",
        "PC with Internet Connection",
        "C/ C++ Programming Experience"
      ],
      "description": "Course Update:\nNote! This course price will increase to $210 as of 1st February 2019 from $200. The price will increase regularly due to updated content. Get this course while it is still low.\nLATEST: Course Updated For January 2019  OVER 3316+ SATISFIED STUDENTS HAVE ALREADY ENROLLED IN THIS COURSE!\n----------------------------------------------\n\nDo you want to learn the new Zynq Development in Xilinx SDK?  Are you lost when it comes to getting started with Zynq Training? Or are you new to FPGA's? This course will teach you all the\nfundamentals of the Zynq Design and Vivado in the shortest time so that you\ncan get started developing on (Field-programmable gate array) FPGA (System of Chip) SOC.\nNow why should you take this course when Xilinx Official Partners already offer training? Most of their course are held bi-annually which means you will have to wait at most 6 months before starting the basic training. Also these courses can cost over thousands of dollars.\nI am an FPGA Designer with a Masters Degree in Electronic Engineering. I have over 20000 students on Udemy.This course is designed to help you understand the fundamentals of Zynq Design through practical and easy to understand labs. This class covers these capabilities, including BSP creation, built-indrivers, example C code, interrupts, debugging, flash programming. You will learn all the fundamentals through practice as you follow along with the training. Together we will build a strong foundation in SOC Development in Xilinx SDK with this training for beginners. This Course will enable you to:\nImport Board Definition Files\nUse the Vivado to build, synthesize, implement, and download a design to your FPGA.\nHow to use Xilinx SDK\nLearn how to access memory modules and GPIO from Xilinx SDK\nDebugging in Xilinx SDK\nUnderstand Stucts or Structure in C programming and why they are important\nTraining Duration:\n2 hour\nSkills Gained\nAfter Completing this Training, you will know how to:\nDesign for 7 series+ FPGAs (System on Chip) SOC,\nLearn how to set up the Zynq in Vivado,\nCreate a Simple Hello world App in Xilinx SDK,\nAccess GPIO to blink an LED,\nLearn how to read from GPIO button peripherals,\nUnderstand Structures in C or C++ and how to use them in Xilinx SDK,\nDebug your design and understand how to step through lines in your code,\nLearn how to add more hardware in Processing Logic,\nUse the Processing logic to create a Block RAM memory,\nLearn to Read and Write from internal memory,\nCreate your own timing App using both polled and interrupt methods\nGet an indepth insight into interrupts and how they work on Zynq devices\nSkills Gained\nThis course only costs less than 1% of the Official XIlinx Partner Training Courses which has similar content. Not only will you save on money but you will save on Time. Similar courses usually run over 2 days. This course, however, you will be able to complete in under 2 hours, depending on your learning speed.\nYou will receive a verifiable certificate of completion upon finishing the course. We also offer a full Udemy 30 Day Money Back Guarantee if you are not happy with this course, so you can learn with no risk to you.\nSee you inside this course.",
      "target_audience": [
        "Digital designers who have a working knowledge of HDL (VHDL) and who are new to Xilinx FPGAs",
        "Designers who are already using Zynq for design should not take this course unless they are struggling with the basics.",
        "Take this course if you want save $3200 in training costs of similar training material",
        "Take this course if you want to get started with Zynq devices",
        "Want to learn how to use Xilinx SDK"
      ]
    },
    {
      "title": "Data Structures and Algorithms In Python ( DSA )",
      "url": "https://www.udemy.com/course/data-structures-algorithms-in-python/",
      "bio": "Data Structures and Algorithms in Python using Python DSA and Data Structures DSA with Python DSA in Python DSA Python",
      "objectives": [
        "Understand the details of Data Structures and algorithms (DSA) through animations",
        "Learn to write programs for different Data Structures and Algorithms in Python",
        "Get the confidence to face programming interviews",
        "Test your knowledge with over 100 Quiz questions",
        "Learn how to analyse algorithms",
        "Get the ability to write and trace recursive algorithms"
      ],
      "course_content": {
        "About course": [
          "Introduction to Data Structures and Algorithms Through Python In Depth"
        ],
        "Introduction to Data Structures and Algorithms": [
          "Important : Source Code Repository required for course",
          "Data Structures and Algorithms",
          "Measuring Running time of Algorithms",
          "Asymptotic Analysis",
          "Big O Notation",
          "Finding Big O",
          "Tight and Loose Upper Bounds",
          "Introduction Quiz A",
          "Big O analysis of Algorithms",
          "Finding Time Complexity",
          "Big O analysis of Algorithms: Examples",
          "Worst case, Best case and Average Case Analysis",
          "Common Complexities",
          "Abstract Data Types",
          "Introduction Quiz B"
        ],
        "Linked List": [
          "Introduction to Linked List in Python",
          "Traversing and Searching a Single Linked List",
          "Finding references in a single linked list",
          "Difference between while p is not None: and while p.link is not None:",
          "Insertion in a Single Linked List",
          "Insertion in a Single Linked List ..contd",
          "Deletion in a Single Linked List",
          "Your Review Matters!",
          "Reversing a Single Linked List",
          "Linked List Quiz A",
          "Sorting a Linked list using Bubble Sort",
          "Merging of sorted Linked lists",
          "Sorting a Linked list using Merge Sort",
          "Finding and Removing a cycle in a Linked list",
          "Doubly linked list",
          "Insertion in a doubly linked List",
          "Deletion from doubly linked list",
          "Reversing a doubly linked list",
          "Circular linked list",
          "Insertion in a circular Linked List",
          "Deletion in a circular linked list",
          "Concatenation",
          "Linked List with Header Node",
          "Sorted linked list",
          "Linked List Quiz B"
        ],
        "Stack and Queue": [
          "Introduction",
          "Stack",
          "Array Implementation of Stack",
          "Linked List Implementation of Stack",
          "Queue",
          "Array Implementation of Queue",
          "Circular Queue",
          "Linked List implementation of Queue",
          "Queue through Circular Linked List",
          "Deque",
          "Priority Queue",
          "Checking validity of an expression containing nested parentheses",
          "Evaluating Arithmetic Expressions",
          "Polish Notations",
          "Converting infix expression to postfix expression",
          "Evaluation of postfix expression",
          "Stack and Queue Quiz"
        ],
        "Binary Tree": [
          "Introduction to trees",
          "Binary Tree",
          "Strictly Binary Tree and Extended Binary Tree",
          "Full binary tree and Complete Binary Tree",
          "Array Representation of Binary trees",
          "Linked Representation of Binary Trees",
          "Binary Tree Quiz A",
          "Binary Tree in Python",
          "Traversal in Binary Tree",
          "Preorder Traversal",
          "Inorder Traversal",
          "Postorder Traversal",
          "Level order traversal",
          "Finding height of a Binary tree",
          "Constructing Binary tree from Traversals",
          "Constructing binary tree from inorder and preorder traversals",
          "Constructing binary tree from inorder and postorder traversals",
          "Binary Tree Quiz B"
        ],
        "Binary Search Tree": [
          "Introduction",
          "Traversal in Binary Search Tree",
          "Searching in a Binary Search Tree",
          "Nodes with Minimum and Maximum key",
          "Insertion in a Binary Search Tree",
          "Deletion in a Binary Search Tree",
          "Binary Search Tree Quiz"
        ],
        "Heap": [
          "Introduction",
          "Heap Representation",
          "Insertion in Heap",
          "Deletion",
          "Building a Heap",
          "Heap Applications",
          "Heap Quiz"
        ],
        "Sorting": [
          "Introduction to Sorting Algorithms",
          "Sort Stability",
          "Selection Sort",
          "Selection Sort : Example",
          "Selection Sort in Python",
          "Analysis of Selection Sort",
          "Bubble Sort",
          "Bubble Sort : Example",
          "Bubble Sort in Python",
          "Improvement in Bubble Sort",
          "Analysis of Bubble Sort",
          "Sorting Quiz A",
          "Insertion Sort",
          "Insertion Sort : Example",
          "Insertion Sort in Python",
          "Analysis of Insertion sort",
          "Shell Sort",
          "Shell Sort : Example",
          "Shell Sort in Python",
          "Analysis of Shell Sort",
          "Merging",
          "Recursive Merge Sort",
          "Recursive Merge Sort in Python",
          "Analysis of Merge Sort",
          "Iterative Merge Sort",
          "Iterative Merge Sort in Python",
          "Quick Sort",
          "Quick Sort in Python",
          "Analysis of Quick Sort",
          "Binary tree sort",
          "Binary Tree Sort in Python",
          "Analysis of Binary Tree Sort",
          "Heap Sort",
          "Heap Sort : Python Implementation and Analysis",
          "Radix Sort",
          "Radix Sort : Implementation and Analysis",
          "Sorting Quiz B"
        ],
        "Searching": [
          "Linear Search",
          "Linear Search in Sorted List",
          "Binary Search",
          "Implementation of Binary Search",
          "Analysis of Binary Search"
        ],
        "Hashing": [
          "Direct Addressing",
          "Hashing",
          "Collisions",
          "Hash Functions",
          "Open Addressing : Linear Probing",
          "Open Addressing : Quadratic Probing",
          "Open Addressing : Double Hashing",
          "Deletion in Open Addressed Tables",
          "Implementation of Open Addressing",
          "Separate Chaining",
          "Implementation of Separate Chaining"
        ]
      },
      "requirements": [
        "Basic knowledge of programming in Python"
      ],
      "description": "This \"Data Structures and Algorithms In Python\" course is thoroughly detailed and uses lots of animations to help you visualize the concepts.\nThis \"Data Structures and Algorithms In Python\" tutorial will help you develop a strong background in Data Structures and Algorithms (DSA). The course is broken down into easy to assimilate short lectures, and after each topic there is a quiz that can help you to test your newly acquired knowledge. The examples are explained with animations to simplify the learning of this complex topic. Complete working programs are shown for each concept that is explained.\nThis Data Structures and Algorithms in Python course provides a comprehensive explanation of data structures like linked lists, stacks and queues, binary search trees, heap, searching and hashing. Various sorting algorithms with implementation and analysis are included in this tutorial.\nThis Data Structures in Python course covers following DSA topics in Python with implementation :\nAlgorithm Analysis, Big O notation, Time complexity, Singly linked list, Reversing a linked list, Doubly linked list, Circular linked list, Linked list concatenation, Sorted linked list.\nStack, Queue, Circular Queue, Dequeue, Priority queue, Polish Notations, Infix to Postfix, Evaluation of Postfix, Binary Tree, Binary Search Tree, Tree Traversal (inorder, preorder, postorder, level order), Heap, Searching, Hashing\nSorting : Selection, Bubble, Insertion, Shell, Merging, Recursive Merge, Iterative Merge, Quick, Heap, Binary tree, Radix, Address calculation sort\nHere are the DSA topics in course-\nAlgorithm Analysis\nLinked List\nStack and Queue\nBinary Tree\nBinary Search Tree\nHeap\nSorting\nSearching\nHashing\nThroughout this Data Structures and Algorithms in Python course, a step by step approach is followed to make you understand different Data Structures and Algorithms. You will see code implementation of different data structures in python and algorithms are explained in step-wise manner. Through this course you can build a strong foundation and it will help you to crack Data Structures and Algorithms in Python coding interviews questions and work on projects. Good foundation on Data Structures and Algorithms in Python interview topics helps you to attempt tricky interview questions.\nIn this Data Structures and Algorithms Through Python In Depth course, Python programs are used for implementing various concepts, but you can easily code them in any other programming language like C++, Java or C#.\nThis Data Structures and Algorithms In Python online course on udemy will help software developers to refresh the concepts studied in Data Structures and Algorithms In Python book / pdf and also to students learning from referred book / pdf.\nThis DSA Self Paced course helps students to have great foundation to solve DSA In Python problems. This will help them to solve LeetCode problems and in google faang coding interviews.\nWhat students are saying about this course -\n\"Very detailed and covers a wide range of DSA topics so far. Great content and explanations. \"\n\"This is an excellent course. One of the best I've seen in udemy. The lecturer's use of visuals is refreshing. Her step-by-step explanations are very clear.\"\n\"The examples are really good, which further make the explaining of concept a lot easier. I would highly recommend this class to whoever has not learned any data structures before. \"\n\"The course meets my expectations. Much of this material is review for me, but I am still learning quite a bit. Deepali's accent is hard for me to understand at first, but I got use to it fairly quickly. I try to code the examples myself while Deepali is presenting them. I am enjoying the course.\"\n\"I got the C Data Structures book by Deepali Srivastava earlier and it was a great book. So I had no doubt while purchasing this Data Structures course in Python and the course is great. Absolutely 5 star experience.\"\n\"It's a great course. I love it!\"\n\"good explanation. good lectures\"\n\"Properly explained each and every DSA topics in python with in-depth knowledge as well as example. happy to take this course\"\n\"The pace is about right and everything is explained clearly and concisely with relevant examples.\"\n\"Excellent stuff!!\n\"I have been a programmer for a few years, and have learned a lot of these concepts \"on the job.\" But this is helping give me a much better foundation.\"\n\"Easy language. Understandable. Good use of interactive examples after every theory for explanation.\"\n\"Yes, it was more than what I've expected.\"\n\"Excellent teaching and demonstration of the material. It is more beneficial for learners to develop their own codes or at least mimic the ones described in the tutorial. I highly recommend this course for anyone interested in Data Structures and Algorithms\"\n\"She was explaining it quite clearly\"\n\"good explanation. good lectures\"\n\"The instructor has selected the DSA topics very intelligently, so that core of data structures is covered. She does not confuse you with plenty of topics. Also for a given problem the internet is full of code examples that are not very straightforward. The instructor of this course has selected the code examples that are very clear. I am discarding tens of python books in favor of her examples. I wish she finds time to give a second volume of the lessons that can cover more topics.\"\n\n\nSo what are you waiting for, click on Buy button to enroll now and start learning.",
      "target_audience": [
        "Programmers looking for jobs",
        "Programmers wanting to write efficient code",
        "Computer Science students having Data Structures as part of their curriculum",
        "Non Computer science students wanting to enter IT industry"
      ]
    },
    {
      "title": "Data Structures and Algorithms In C ( DSA )",
      "url": "https://www.udemy.com/course/data-structures-and-algorithms-in-c/",
      "bio": "Data Structures and Algorithms in C Using C DSA C Data Structures Algorithms with C LeetCode C DSA in C DSA and C DSA C",
      "objectives": [
        "Understand the details of Data Structures and algorithms (DSA) through animations",
        "Learn to write programs for different Data Structures and Algorithms in C language",
        "Get the confidence to face DSA programming interview questions",
        "Over 100 Data Structures and Algorithms (DSA) MCQ / interview questions",
        "Learn how to analyse algorithms",
        "Get the ability to write and trace recursive algorithms"
      ],
      "course_content": {
        "About course": [
          "Introduction to Data Structures and Algorithms Through C In Depth"
        ],
        "Introduction to Data structures and Algorithms": [
          "Important : Source Code Repository required for course",
          "Data Structures and Algorithms",
          "Measuring Running time of Algorithms",
          "Asymptotic Analysis",
          "Big O Notation",
          "Finding Big O",
          "Tight and Loose Upper Bounds",
          "Introduction Quiz A",
          "Big O analysis of Algorithms",
          "Finding Time Complexity",
          "Big O analysis of Algorithms: Examples",
          "Worst case, Best case and Average Case Analysis",
          "Common Complexities",
          "Abstract Data Types",
          "Introduction Quiz B"
        ],
        "Linked List": [
          "Introduction to Linked List in C",
          "Traversing and Searching a Single Linked List",
          "Finding pointers in a Single linked list",
          "Difference between while(p!=NULL) and while(p->link!=NULL)",
          "Insertion in a Single Linked List",
          "Insertion in a Single Linked List..contd",
          "Deletion in a Single Linked List",
          "Your Review Matters!",
          "Reversing a Single Linked List",
          "Linked List Quiz A",
          "Doubly linked list",
          "Insertion in a doubly linked List",
          "Deletion from doubly linked list",
          "Reversing a doubly linked list",
          "Circular linked list",
          "Insertion in a circular Linked List",
          "Deletion in a circular linked list",
          "Concatenation",
          "Linked List with Header Node",
          "Sorted linked list",
          "Merging of sorted Linked lists",
          "Sorting a Linked list using Bubble Sort",
          "Sorting a Linked list using Merge Sort",
          "Finding and Removing a cycle in a Linked list",
          "Linked List Quiz B"
        ],
        "Stack and Queue": [
          "Introduction",
          "Stack",
          "Array Implementation of Stack",
          "Linked List Implementation of Stack",
          "Queue",
          "Array Implementation of Queue",
          "Linked List implementation of Queue",
          "Queue through Circular Linked List",
          "Circular Queue",
          "Deque",
          "Priority Queue",
          "Checking validity of an expression containing nested parentheses",
          "Function calls",
          "Evaluating Arithmetic Expressions",
          "Polish Notations",
          "Converting infix expression to postfix expression",
          "Evaluation of postfix expression",
          "Stack and Queue Quiz"
        ],
        "Recursion": [
          "Introduction",
          "Flow of control in Recursive functions",
          "Winding and unwinding phase",
          "Factorial",
          "Printing numbers from 1 to n",
          "Sum of digits of an integer",
          "Base conversion",
          "Finding nth power of a number",
          "Euclids Algorithm",
          "Fibonacci Series",
          "Tower of Hanoi",
          "Tail recursion",
          "Recursion vs. Iteration",
          "Recursion Quiz"
        ],
        "Binary Tree": [
          "Introduction to Trees",
          "Binary Tree",
          "Strictly Binary Tree and Extended Binary Tree",
          "Full binary tree and Complete Binary Tree",
          "Array Representation of Binary trees",
          "Linked Representation of Binary Trees",
          "Binary Tree Quiz A",
          "Traversal in Binary Tree",
          "Preorder Traversal",
          "Inorder Traversal",
          "Postorder Traversal",
          "Level order traversal",
          "Finding height of a Binary tree",
          "Binary Tree in C",
          "Constructing Binary tree from Traversals",
          "Constructing binary tree from inorder and preorder traversals",
          "Constructing binary tree from postorder and inorder traversals",
          "Binary Tree Quiz B"
        ],
        "Binary Search Tree": [
          "Introduction",
          "Traversal in Binary Search Tree",
          "Searching in a Binary Search Tree",
          "Nodes with Minimum and Maximum key",
          "Insertion in a Binary Search Tree",
          "Deletion in a Binary Search Tree",
          "Binary Search Tree Quiz"
        ],
        "Heap": [
          "Introduction",
          "Heap Representation",
          "Insertion in Heap",
          "Deletion",
          "Building a heap",
          "Heap Applications",
          "Heap Tree Quiz"
        ],
        "Sorting": [
          "Introduction to Sorting Algorithms",
          "Sort Stability",
          "Selection Sort",
          "Selection Sort Example",
          "Selection Sort in C",
          "Analysis of Selection Sort",
          "Bubble Sort",
          "Bubble Sort Example",
          "Bubble Sort in C",
          "Improvement in Bubble Sort",
          "Analysis of Bubble Sort",
          "Sorting Quiz A",
          "Insertion Sort",
          "Insertion Sort Example",
          "Insertion Sort in C",
          "Analysis of Insertion sort",
          "Shell Sort",
          "Shell Sort Example",
          "Shell Sort in C",
          "Analysis of Shell Sort",
          "Merging two Sorted Arrays",
          "Recursive Merge Sort",
          "Recursive Merge Sort in C",
          "Analysis of Merge Sort",
          "Iterative Merge Sort",
          "Iterative Merge Sort in C",
          "Quick Sort",
          "Quick Sort in C",
          "Analysis of Quick Sort",
          "Binary tree sort",
          "Binary Tree Sort in C",
          "Analysis of Binary Tree Sort",
          "Heap Sort",
          "Heap Sort : C implementation and Analysis",
          "Radix Sort",
          "Radix Sort : C implementation and Analysis",
          "Address Calculation Sort",
          "Address Calculation Sort in C",
          "Analysis of Address Calculation Sort",
          "Sorting Records",
          "Sorting Quiz B"
        ],
        "Searching": [
          "Linear Search",
          "Variations of Linear Search",
          "Binary Search",
          "Implementation of Binary Search",
          "Analysis of Binary Search"
        ]
      },
      "requirements": [
        "Basic knowledge of programming in any language"
      ],
      "description": "This \"Data Structures and Algorithms In C\" (DSA) course is thoroughly detailed and uses lots of animations to help you visualize the concepts.\nThis \"Data Structures and Algorithms in C\" (DSA) course will help you develop a strong background in Data Structures and Algorithms (DSA). The course is broken down into easy to assimilate short lectures, and after each topic there is a quiz that can help you to test your newly acquired knowledge. The examples are explained with animations to simplify the learning of this complex topic. Complete working programs are shown for each concept that is explained.\nThis Data Structures and Algorithms in C (DSA) course provides a comprehensive explanation of data structures like linked lists, stacks and queues, binary search trees, heap, searching, hashing. Various sorting algorithms with implementation and analysis are included in this tutorial. Concept of recursion is very important for designing and understanding certain algorithms so the process of recursion is explained with the help of several examples.\nThis Data Structures and Algorithms in C (DSA) course covers following DSA topics in C language with implementation :\nAlgorithm Analysis, Big O notation, Time complexity, Singly linked list, Reversing a linked list, Doubly linked list, Circular linked list, Linked list concatenation, Sorted linked list.\nStack, Queue, Circular Queue, Dequeue, Priority queue, Polish Notations, Infix to Postfix, Evaluation of Postfix, Binary Tree, Binary Search Tree, Tree Traversal (inorder, preorder, postorder, level order), Recursion, Heap, Searching, Hashing\nSorting : Selection, Bubble, Insertion, Shell, Merging, Recursive Merge, Iterative Merge, Quick, Heap, Binary tree, Radix, Address calculation sort\nHere is the DSA topics in course-\nAlgorithm Analysis\nLinked List\nStack and Queue\nRecursion\nBinary Tree\nBinary Search Tree\nHeap\nSorting\nSearching\nHashing\nThroughout this Data Structures and Algorithms in C (DSA) course, a step by step approach is followed to make you understand different Data Structures and Algorithms (DSA). You will see code implementation of different data structures in C language and algorithms are explained in step-wise manner. Through this course you can build a strong foundation and it will help you to crack Data Structures and Algorithms in C (DSA) coding interviews questions and work on projects. Good foundation on Data Structures and Algorithms in C (DSA) MCQ / interview questions topics helps you to attempt tricky dsa MCQ / interview questions.\nIn this Data Structures and Algorithms In C (DSA) course, C language programs are used for implementing various concepts, but you can easily code them in any other programming languages like C++, C#, Java, Python.\nThis Learn Data Structures and Algorithms In C (DSA) online course on udemy will help software developers to refresh the concepts studied in Data Structures and Algorithms In C (DSA) books / notes / pdf and also to students learning from referred book / notes / pdf.\nThis DSA Self Paced course helps students to have great foundation to solve DSA in C problems. This will help them to solve LeetCode MCQ / problems and in google faang data structures and algorithms in C (DSA) MCQ / interview questions.\nWhat students are saying about this course-\n\"Till now I felt Data Structures is a complex subject. But this course is helping to understand how simple they are.\"\n\"This is exactly how I hoped to learn data structure and algorithm, PLUS, it's using C!!\"\n\"Instructor is teaching in very well and efficient manner with a good pace ,clears every doubts and teaches concepts deeply.\"\n\"Great class, explains all DSA topics very well, better than any college class I ever took.\"\n\"yes this course has helped me a lot in discovering new topics and the example programs are also quite helpful.\"\n\"I really appreciate the way the steps are broken down incrementally.\"\n\"Deepali does a great job in explaining all the concept and the course is very well organized. First the concept is explained on paper and then there is a walk through of the code, and then execution of the code. I have learnt a great deal from this course.\"\n\"I am taking notes and writing code side by side watching videos which makes it beneficial to understand the code and easier to grasp the concept of the topic rather than just copying the source code. Thank you Deepali Mam for not giving the source it was better to write the code by myself. The videos are informative, detailed and right on point with step by step code programs and I feel learned a lot taking your course then the class which I took at University. This course made my base of data structures in C pretty strong thank you for that.\"\n\"This is an awesome course. If you need to understand then try to write every code yourself then try to analyze it. that's how you can gain confidence.\"\n\"I'm re-learning something what I am learn years ago, and this course is perfect for my need.\"\n\"Its quite helpful, it nicely supplements what you have studied in the book.\"\n\"Excellent presentation and content. Easily comprehensible. Since Data Structures and Algorithms are heart of computer science will give a 5 star for this kind of knowledge resource.\"\n\"It is one of the best courses that I have ever taken in Data Structures and C.\"\n\"Good foundation course covering the fundamentals of data structures in C.\"\n\"It's definitely a good course for beginners who have basic knowledge in C and want to learn Data Structures and Algorithms. Really good explanation by the instructor with experience of even writing a book on Data structures.\"\n\"Till now its above expectations. Mam I am also following your both book \"C in Depth\" and \"Data Structure Using C\".\"\n\"Great in depth explanations of the data structures and algorithms covered.\"\n\"good and perfect teaching for basic levels for beginners in data structures.\"\n\"Very good clarification and reference for common data structures and algorithms.\"\n\"The Course material was very good and the concepts and the logical reasons behind the algorithm is explained.\"\n\"It was a great experience\"\n\n\nSo what are you waiting for, click on Buy button to enroll now and start learning.",
      "target_audience": [
        "Programmers looking for jobs",
        "Programmers wanting to write efficient code",
        "Computer Science students having Data Structures as part of their curriculum",
        "Non Computer science students wanting to enter IT industry"
      ]
    },
    {
      "title": "Interview Preparation for SDET (Java)",
      "url": "https://www.udemy.com/course/interview-sdet-java/",
      "bio": "Comprehensive interview preparation for SDET/Test Automation roles",
      "objectives": [
        "Java theoretical interview questions",
        "Top Java coding challenges for SDET interviews",
        "Big O Notation runtime complexity",
        "QA interview questions",
        "General test automation interview questions preparation",
        "Selenium interview questions with explanations",
        "SDLC and Agile interview questions",
        "Cucumber interview questions",
        "JUnit/TestNG interview questions",
        "Maven interview questions",
        "Framework interview questions",
        "How to pass recruiter call"
      ],
      "course_content": {
        "Downloadable Resources": [
          "Resources"
        ],
        "Java Theoretical Questions": [
          "What are JDK, JRE, and JVM?",
          "What does the Java compiler do?",
          "What makes Java platform independent?",
          "What’s new in Java 8? Java 11?",
          "What are the primitives in Java?",
          "String, StringBuilder, and StringBuffer?",
          "How to find a number of characters in the String?",
          "What does == work and compare two Strings on equality?",
          "What are the wrapper classes in Java for primitives?",
          "When do you use a while loop? And when do you use it for loop?",
          "What’s the difference between Array and ArrayList?",
          "What’s Varargs in Java?",
          "What's constructor in Java?",
          "What is a static keyword in Java?",
          "What’s the final keyword in Java?",
          "What is static block and what is initializer block?",
          "What OOP concepts do you know in Java?",
          "What’s encapsulation in Java?",
          "What’s inheritance in Java?",
          "What is super Object class? And why do we need it?",
          "What happens when child class defines the same method or property?",
          "Abstraction and Polymorphism?",
          "What’s the difference between overriding and overloading?",
          "Array and ArrayList related questions",
          "What's Set in Java?",
          "What's Map in Java",
          "How do you iterate over the Map? HashMap vs Hashtable?",
          "What's the helper class for arrays? And what's for collection framework in Java?",
          "How do you handle exceptions in Java?",
          "What's the difference between runtime and checked exceptions?",
          "Can we handle multiple exceptions with the same try-catch?",
          "What is try with resources?",
          "What is an Error in Java?"
        ],
        "Java Coding Challenges": [
          "String reverse",
          "Practice: String reverse",
          "Array reverse",
          "Practice: Array reverse",
          "Reverse words",
          "Practice: Reverse words",
          "Prime number",
          "Practice: Prime number",
          "Two string anagram",
          "Practice: Two string anagram",
          "String palindrome",
          "Practice: String palindrome",
          "Number palindrome",
          "Practice: Number palindrome",
          "Max/min number from an array",
          "Practice: Max number from an array",
          "Practice: Min number from an array",
          "Find the second min/max number from an array",
          "Practice: Find the second max number from an array",
          "Practice: Find the second min number from an array",
          "Practice: Find n max number from an array",
          "String Pool and == operator to compare references in Java",
          "Practice: String Pool and == operator to compare references in Java",
          "Swap values of two variables",
          "Practice: Swap values of two variables",
          "Remove duplicates from a string",
          "Practice: Remove duplicates from a string",
          "Count letters (Map)",
          "Practice: Count letters (Map)",
          "FizzBuzz",
          "Practice: FizzBuzz",
          "Even or Odd",
          "Practice: Even or Odd",
          "Sum of two",
          "Practice: Sum of two",
          "The Fibonacci",
          "Practice: The Fibonacci",
          "Balanced String",
          "Practice: Balanced String",
          "Sort array without built in sort methods (Bubble Sort)",
          "Practice: Bubble Sort",
          "Sort array without built in sort methods (Selection Sort)",
          "Practice: Selection Sort",
          "Binary search",
          "Practice: Binary search"
        ],
        "Big O Notation: Time Complexity": [
          "Big O notation: Time Complexity",
          "Time Complexity Practice 1",
          "Time Complexity Practice 2",
          "Time Complexity Practice 3"
        ],
        "QA Questions": [
          "What is a defect?",
          "What is a test plan and what does a good test plan include?",
          "What is a test case and what does an excellent test case include?",
          "What is a Software Testing Life Cycle (STLC) for your team?",
          "What is a defect life cycle?",
          "What is Requirements Traceability Matrix (RTM) in testing?",
          "What is a regression suit and why do we need it?",
          "How big is your regression suit, and how often do you run it?",
          "How do you determine which test case should be part of the regression suit?",
          "What is a smoke test?",
          "What kind of different testing technics do you know and use it?",
          "What are the black and white box testing?",
          "What is a performance testing?",
          "What is 508 compliance testing and how do you do it?",
          "Tell me about your latest defect you discovered?",
          "How do you create your test data for your app?"
        ],
        "Test Automation: General Questions": [
          "General questions",
          "Introduction to example framework and application"
        ],
        "Test Automation: Selenium Questions": [
          "What are the advantages and disadvantages of Selenium?",
          "What is Document Object Model (DOM) in the UI?",
          "What kind of locators do you know in Selenium? And which one you prefer?",
          "What’s the difference between absolute and relative paths?",
          "What is the difference between xpath and css?",
          "How do you handle dynamic elements?",
          "Implicit vs explicit waits?",
          "What's fluent wait in Selenium?",
          "What’s the difference between findElement and findElements?",
          "How do you check if element exist in the DOM?",
          "How do you work with multiple windows in Selenium?",
          "How do you work with iFrames in Selenium?",
          "How do you work with UI dropdown in Selenium?",
          "How do you work with popups in Selenium?",
          "How do you type text in an input box in Selenium?",
          "How do you upload file in Selenium?",
          "What does Actions class do in Selenium?",
          "What is Page Object Model (POM)?",
          "How do you deal with stale element exceptions in Selenium?",
          "What is Remote WebDriver?",
          "What is Selenium Grid?",
          "What is SauceLabs and BrowserStack?"
        ],
        "Test Automation: Cucumber Questions": [
          "What is Cucumber in test automation?",
          "What are the benefits of using Cucumber?",
          "What is Gherkin language?",
          "What are the main components of Cucumber?",
          "What does the runner class do? Can you describe what is inside?",
          "What are the Feature, Scenario, and Steps keywords in Cucumber?",
          "What is the Step Definition?",
          "What is Scenario Outline in Cucumber?",
          "What is the Background in Cucumber?",
          "What are the Hooks in Cucumber?",
          "How does parameterized step work in Cucumber?",
          "How would you run only smoke test scenarios or only regression test scenarios?"
        ],
        "Test Automation: JUnit/TestNG Questions": [
          "What are the JUnit and TestNG?",
          "Why do you need JUnit / TestNG in your framework?",
          "What is the difference between TestNG and JUnit?",
          "What is the difference between soft and hard assert?",
          "What kind of annotations do you know in JUnit? What do they do?"
        ],
        "Test Automation: Maven Questions": [
          "What is Maven? And what role does it play in your framework?",
          "What Maven lifecycles do you know?",
          "What Maven command do you use to run your test?",
          "How can you pass value from maven command to your code?"
        ]
      },
      "requirements": [
        "Programming 101"
      ],
      "description": "Hey everyone, my name is Bek and welcome to my Interview Preparation for SDET course with Java. I work as SDE-T at Amazon and I have been teaching Java for SDET position in the coding bootcamp for the last 4 years.\nInitially, this course was on Java coding interview challenges, but it is a lot more now. You will learn top Java theoretical questions, top coding challenges, Big O Notation, QA questions, Test Automation general questions, Selenium, Cucumber, JUnit/TestNG, Maven, and framework interview questions,  questions,  SDLC, and Agile questions.\nThis course will work best for people who are already working in IT and preparing to go to the job market. Also, if you are in the last stage of your boot camp for SDET, this is a great course to review and prepare for the job market.\nOverall, my vision for this course is to make one place for interview prep for SDET. I am working hard to include extra content like API, Git, and SQL.\nIf you took this course and have questions, please reach out to me. I will be happy to connect with you.\n\n\nThank you for your time and attention. I can't wait to see you in my course!",
      "target_audience": [
        "Coding bootcamp graduates",
        "QA/SDET who needs to prepare for the market"
      ]
    },
    {
      "title": "Code Reviews for Secure, Clean, and Scalable Code",
      "url": "https://www.udemy.com/course/code-reviews-learnit/",
      "bio": "Enhancing Code Quality: Effective Reviews, Tools, and Collaborative Practices for Secure, Clean, and Scalable Software",
      "objectives": [
        "Understanding the importance of code reviews for ensuring secure, clean, and scalable code",
        "How to conduct effective and efficient code reviews",
        "Different types of code reviews and their respective goals and benefits",
        "Roles and responsibilities of code reviewers and authors in the review process",
        "Strategies and techniques for developing a constructive reviewer mindset",
        "Utilizing code review tools and automation for comprehensive code analysis",
        "Integrating automated tools into the development workflow for enhanced efficiency",
        "Checkstyle Tool",
        "Best practices for writing secure and scalable code",
        "Establishing review guidelines and expectations for fair and objective evaluations",
        "Providing constructive feedback and techniques for delivering criticism positively",
        "Effective communication strategies during code reviews to promote collaboration",
        "Overview of coding standards and adherence to best practices for different programming languages",
        "Creating a positive code review culture to encourage teamwork and mutual learning",
        "Building trust among team members through collaborative code reviews",
        "Setting and enforcing coding standards to maintain code quality and consistency",
        "Creating a code standards checklist to ensure adherence to best practices",
        "Understanding scalability principles and applying best practices for scalable code development",
        "Identifying common scalability challenges and addressing them effectively",
        "Importance of security in software development and its integration into code reviews",
        "Recognizing common security vulnerabilities and best practices for mitigation",
        "Analyzing code for scalability issues and implementing improvements",
        "Providing additional resources for ongoing learning and development in code review practices",
        "Reviewing key concepts covered in the course and answering common questions in a Q&A session",
        "Understanding development metrics and key performance indicators (KPIs) related to code quality",
        "Participating in coding exercises to reinforce learning and practical application of concepts"
      ],
      "course_content": {
        "Introduction": [
          "Communication plan",
          "Tips to Improve Your Course Taking Experience",
          "Free AI Bot for My Students Only – No Sign-Up, FREE, Just Practice"
        ],
        "Code Review Fundamentals": [
          "Introduction to Code Reviews",
          "Basics of Code Review Process"
        ],
        "Tools, Automation, and Industry Best Practices": [
          "Tools for Code Review and Code Analysis",
          "Important Note before the Next Lesson",
          "Overview of Pull Requests and Code Review Interface in GitHub",
          "Important to read before the next lesson",
          "Part 1 - Checkstyle: Adhering Coding Standards",
          "Part 2 - Checkstyle: Adhering Coding Standards",
          "PMD: Static Code Analysis"
        ],
        "Advanced Code Review Strategies": [
          "Code Review Guidelines & Contribution Policy",
          "Coding Standards, Code Quality & Consistency",
          "Provide Feedback like a Pro",
          "Security Considerations During Code Review",
          "Scalability Principles in Code"
        ],
        "PRACTICE: Coding exercises to practice Code Review & Refactoring Skills": [
          "Why this section is important for this course?",
          "Single Responsibility Principle: User Registration and Authentication Refactoring Exercise",
          "Open / Closed Principle: Shape Refactoring Challenge",
          "Liskov Substitution Principle: Square and Rectangle Refactoring Challenge",
          "Interface Segregation Principle: Worker Refactoring Challenge",
          "Dependency Inversion Principle: Car-Engine Refactoring Challenge"
        ],
        "Development Metrics & KPIs to Verify During the Code Review and Merge Requests": [
          "Why this section is important for this course?",
          "Metric, KPI & OKR",
          "RAG Status to Present KPI",
          "Introduction to Engineering Excellence Metrics & KPIs",
          "Development Metrics & KPIs: Tech Debt Ratio & Index, Cyclomatic Complexity",
          "Development Metrics & KPIs: Unit Test Related Metrics - Part 1",
          "Development Metrics & KPIs: Unit Test Related Metrics - Part 2",
          "Development Metrics & KPIs: Duplicate Code & Commented Code Index",
          "Development Metrics & KPIs: Code Review Feedback Loop Time & Code Reviews",
          "Development Metrics & KPIs: Rules Compliance Index (RCI) & Violations",
          "Development Metrics & KPIs: Integration Test Coverage & End-to-End Test Coverage",
          "Build Metrics & KPIs: Time to Build, Build Verification Time & Pipeline Exec.",
          "Build Metrics & KPIs: Green & Broken Builds",
          "Release Metrics & KPIs: Cycle Time & Release Candidates",
          "Release Metrics & KPIs: Release Candidates Metrics"
        ],
        "Quality Assurance - Defect Management: Metrics & KPIs": [
          "Why this section is in this course and why it is important?",
          "Defect Management Metrics & KPIs: Number of Open Defects & Defect Leakage",
          "Defect Management Metrics & KPIs: Defects per Severity/Priority/Env/Root cause",
          "Defect Management Metrics & KPIs: Defect Density, Non-Resolved Blockers & Others",
          "Defect Management Metrics & KPIs: Quality Debt Index, Bug Fixing Projection",
          "Defect Reopen, Defect Rejection, Open Defects Change Rate, Removal Efficiency",
          "Defect Resolution Time, Defect Age, Detection to Resolution Ratio"
        ],
        "Quality Assurance - Testing: Metrics & KPIs": [
          "Test execution coverage, Cost of Quality & Test Design Coverage",
          "Testing Metrics & KPIs: Regression Time, Verified Issues Rate, Pass Rate"
        ],
        "Quality Assurance - Test Automation: Metrics & KPIs": [
          "% of Poduct, Automation, System Issues & Execution Frequency",
          "Execution Time, Test Success Ratio & % of Results Analyzed",
          "Regression Effectiveness, Percentage of Automated Tests & Auto Savings"
        ],
        "Resilient, Scalable & Secure Systems with Spring Boot": [
          "Why this section is part of the course - and why it is improtant",
          "OAuth, OAuth 2.0, JWT & OpenID Connect, Identity Provider",
          "Practice: Auth0 - Configuration of Identity Provider",
          "OAuth & Open ID Connect Configuration in Spring Boot - Part 1",
          "OAuth & Open ID Connect Configuration in Spring Boot - Part 2",
          "Testing Security: Testing of Spring Boot Endpoints - Part 1",
          "Testing Security: Testing of Spring Boot Endpoints - Part 2",
          "Protecting APIs with Rate Limiting",
          "Rate Limiting Practical Guide: Bucket4j",
          "Building Resilient Services with Resilience4j in Spring Boot. Circuit Breaker",
          "Circuit Breaker - Practice",
          "Spring Boot + Resilience4j: Retry Pattern",
          "Spring Boot + Resilience4j: Time Limiter Pattern",
          "Spring Boot + Resilience4j: Rate Limitter Pattern",
          "Spring Boot + Resilience4j: Bulkhead Pattern",
          "Microservices Patterns in Practice: Exploring API Gateway",
          "Spring Cloud Gateway: Practice",
          "Understanding Load Balancing: Concepts, Strategies, and Use Cases",
          "Implementing Load Balancing with Spring Cloud LoadBalancer"
        ]
      },
      "requirements": [
        "Basic understanding of programming concepts",
        "Proficiency in at least one programming language",
        "Basic Familiarity with software development processes and version control systems (e.g., Git)",
        "Prior experience in software development or related fields is recommended",
        "Willingness to learn and actively engage in simulated code review exercises and collaborative activities"
      ],
      "description": "Start a journey into the world of code reviews, where you'll learn why it's important to ensure your code is secure, clean, and scalable. This course will teach you how to conduct effective reviews that improve code quality and team collaboration. Explore different types of code reviews and understand the roles of reviewers and authors in the process.\nLearn the basic principles and goals of code reviews, and discover strategies to develop a strong reviewer mindset. Through interactive exercises and simulations, you'll practice evaluating code efficiently, giving helpful feedback, and communicating effectively during review sessions. Explore industry tools and automation that make code analysis easier and integrate smoothly into your development process.\nMaster the art of conducting fair, objective, and constructive code reviews by setting clear guidelines and expectations. Learn techniques for giving feedback that encourages improvement and fosters a supportive team environment. Gain insights into coding standards and best practices across various programming languages to ensure consistent code quality.\nDiscover how to create a positive code review culture that promotes trust, teamwork, and continuous improvement among team members. Engage in team-based review simulations to enhance collaborative skills and use coding exercises to identify scalability and security concerns. By the end of this course, you'll be ready to lead effective code reviews and enhance software development within your organization. Join us to create secure, clean, and scalable code that drives innovation and excellence.",
      "target_audience": [
        "Software developers and programmers seeking to enhance their skills in code quality and collaboration through effective code reviews",
        "Team leads, project managers, and software architects responsible for implementing best practices in code review processes",
        "Quality assurance professionals interested in understanding code review strategies for improving software quality",
        "Students and recent graduates looking to gain practical knowledge and hands-on experience in conducting code reviews",
        "Anyone involved in software development who wants to learn about secure, clean, and scalable coding practices"
      ]
    },
    {
      "title": "Design Patterns Simplified - Part 1",
      "url": "https://www.udemy.com/course/software-design-patterns-simplified/",
      "bio": "A Comprehensive Guide for Software Developers and Aspiring Architects",
      "objectives": [
        "Get a strong software design foundation required to move up in technical ladder",
        "Get an in-depth understanding of the most useful design patterns"
      ],
      "course_content": {
        "Introduction": [
          "About the course"
        ],
        "Strategy Pattern": [
          "Example",
          "Alternative Designs",
          "Alternative Designs - Quiz",
          "Solution",
          "Solution - Quiz",
          "Definition",
          "Conclusion"
        ],
        "Factory Pattern": [
          "Example",
          "Solution",
          "Solution - Quiz",
          "Definition",
          "Definition_Quiz",
          "Comparison",
          "Comparison-Quiz",
          "Conclusion"
        ],
        "Decorator Pattern": [
          "Example",
          "Example-Quiz",
          "Alternative2",
          "Alternative2 -Quiz",
          "Solution",
          "Solution-Quiz",
          "Sequence Diagrams",
          "Sequence Diagrams - Quiz",
          "Definition",
          "Definition - Quiz",
          "Conclusion"
        ],
        "State Pattern": [
          "Conclusion - Quiz",
          "Example",
          "State Example - Quiz",
          "Initial Design",
          "Initial Design - Quiz",
          "Solution",
          "Solution - Quiz",
          "Incorporating Elite Status",
          "Elite Status - Quiz",
          "Definition",
          "State Definition - Quiz",
          "Conclusion"
        ],
        "Observer Pattern": [
          "Example",
          "Example-Quiz",
          "Solution",
          "Solution - Quiz",
          "Conclusion",
          "Conclusion - Quiz"
        ],
        "Command Pattern": [
          "Example",
          "Example - Quiz",
          "Fundamentals",
          "Fundamentals - Quiz",
          "More Uses",
          "More Uses - Quiz",
          "Supporting Undo",
          "Undo - Quiz",
          "Multiple Undo's",
          "MultipleUndos - Quiz",
          "Definition",
          "Conclusion"
        ],
        "Adapter Pattern": [
          "Example",
          "Example - Quiz",
          "Solution",
          "Solution - Quiz",
          "Adapter Types",
          "Adapter Types - Quiz",
          "Conclusion"
        ],
        "Composite Pattern": [
          "Example",
          "Example - Quiz",
          "Initial Design",
          "Adding Grouping Functionality",
          "Operating as a Group",
          "Operating as a Group - Quiz",
          "Solution - Part1",
          "Solutions - Part1 - Quiz",
          "Solution - Part2",
          "Definition",
          "Conclusion"
        ],
        "Facade Pattern": [
          "Example",
          "Example - Quiz",
          "Solution",
          "Solution - Quiz",
          "Definition",
          "Definition - Quiz",
          "Conclusion"
        ]
      },
      "requirements": [
        "Understanding of object-oriented concepts and at least one object oriented language such as C++, C# or Java",
        "Basic understanding of UML notations"
      ],
      "description": "- Are you looking for a different, yet deep and engaging course on design patterns?\n- Are you better able to understand the concepts through interesting examples, diagrams & visual effects?\n- Have you struggled to understand design patterns from the books?\n\n\nIf you relate to one or more of the above criteria then this course is for you.\nIt is a comprehensive course on design patterns delivered with crystal clear communication.\nThe diagrams and the visual effects help you focus on the exact part of the presentation that the trainer is conveying.\n\n\nHere are just few feedbacks from the students of this course:\n\"Your pedagogy skills are amazing, and i have to say that i love your teaching style, everything is so clear and detailed, exactly what i wait for, as a learner. I already knew these patterns but Not as much as you made me understand the deep of some, always by using your smooth progressive/near learner, and logical approach. I really want to point out, how much learning with your course is pleasant and kind of easy. I'd like to thank you for being part of the instructors here, and i hope one day you will create, the same way, a course about the other (GoF) Design Patterns, and then, still other courses about software Design subjects. Be sure i'll be there to pick them again ! :)\"\n\n\n\"This course does exactly as described and goes through the theory of design patterns and simplifies the concepts by showing real world examples using minimal pseudo coding. This allows you to concentrate on the concepts taught. Some of the ideas may leave you scratching your head for a while and maybe a few more examples would help with this but that’s not a major issue as you can just rewatch and relearn or apply the concepts. The presentation style is clear and precise and very understandable. If you want to learn design patterns for your projects then here is a perfect place to start\"\n\n\n\"I find this course very useful and practical. As it explains all important design patterns with real world example projects. I would always like to keep it in my library for future reference.\"\n\n\n\"I have completed uml/design patterns courses before but this adds a lot of thinking to the design process\"\n\n\n\"Wow, i'm amazed This course is really well done. I have tried so many books to understand design patters, even for dummie books, but not was really working for me. Because even the simple books that explain by example were using complicated examples. In this course the examples were also explained. For example instead of showing me all the classes of an example, she also explains what those example classes are used for. I also like that she speaks very clearly and slow enough. Thirdly I like didactic tricks she uses, for example the animations,litle tests,the music makes it fun to learn. lastly what I like the most was that she really gave good examples on where to use these patterns and how to regnise them and even show how to decide which one to use in which situation (very very important) I hope that she'll add a singleton in the future. The pattern is simple but I never found good examples when to use the singlton. Thank you for this wonderfull course, i'll recomend it to all my friends\"\n\n\nThe course follows a step-wise approach where you will begin every pattern with a unique and interesting example problem.\nThe course then begins with a design to solve the problem, without applying a pattern.\nAfter you have understood the shortcomings of the design, the course then applies the design pattern by altering the design.\nThis approach helps you clearly understand and appreciate the usage of the pattern.\nYou will be able to assess your knowledge by answering several quizzes & questions that pop up throughout the course.\nNote this course needs you to have a prior experience in software development.\nIf you have registered for this course with an intention to strengthen your base for software design patterns, you will never lose interest during the course.\nJoin the course with a visually stimulating and engaging content!",
      "target_audience": [
        "Experienced Software developers",
        "Aspiring software architects",
        "Junior software architects"
      ]
    },
    {
      "title": "Quantum Computing for Beginners",
      "url": "https://www.udemy.com/course/quantum-computing-quantum-physics/",
      "bio": "Learn Quantum Computing from Quantum Physics, Superposition, Entanglement, Cryptography, Quantum Mechanics, Teleport",
      "objectives": [
        "Learn about Quantum Computing and its super-powers",
        "Quantum Superposition, Entanglement",
        "Qubit, Quantum Gates and Algorithms",
        "Create Quantum Circuit and run on IBM Quantum Computers",
        "Quantum Teleportation",
        "Bloch Sphere",
        "Hadamard Gate, Paulli Gates, Toffoli Gate",
        "Quantum Cryptography"
      ],
      "course_content": {
        "Introduction to Quantum Computing": [
          "Course Introduction",
          "Classical Computing Vs. Quantum Computing",
          "Quantum Computing and Its Applications",
          "Classical Computing & Quantum Tunneling",
          "Quiz 1"
        ],
        "Bit vs Qubit, Superposition & Measurements": [
          "Classical Bits and Gates",
          "Qubit or Quantum Bit & State Notations",
          "Quantum Physics, Superposition & Mathematical Model",
          "Qubit Measurements",
          "Quiz 2",
          "Test1",
          "Rate Your Experience"
        ],
        "Math Refresher for Quantum Computing": [
          "Complex Number Basics",
          "Algebra of Complex Numbers",
          "Complex Number Conjugates & Divisions",
          "Matrix Addition, Subtraction & Multiplication",
          "Matrix Transpose & Conjugate Transpose"
        ],
        "Quantum Gates, Bloch Sphere & Qubit Manipulation": [
          "Quantum Gates",
          "Bloch Sphere Representation",
          "Paulli Gates",
          "Hadamard Gate",
          "CNOT Gate",
          "CCNOT Gate - Toffoli",
          "Quantum Gate Properties",
          "Test on Quantum Gates"
        ],
        "Experience IBM Quantum Computer": [
          "IBM Quantum Experience 1",
          "IBM Quantum Experience 2"
        ],
        "Quantum Entanglement & Teleportation": [
          "Quantum Entanglement",
          "Bell State (Entanglement )",
          "Quantum Teleportation Explained",
          "No-Cloning Theorem"
        ],
        "Qunatum Algorithms & Quantum Cryptography": [
          "Qunatum Algorithms & Deutsch-Jozsa",
          "Shor's and Grover's Algorithms",
          "Quantum Cryptography",
          "More Lectures to Come"
        ],
        "Conclusion": [
          "Books and Resources",
          "Conclusion"
        ]
      },
      "requirements": [
        "High-school Math and Physics"
      ],
      "description": "Build a Solid Foundation on Quantum Computing\nQuantum Computing has immense power. Classical computers are reaching their limits. Quantum computing is built on Quantum Physics, and uses properties like Superposition, Entanglement to do the computation.\nIn this course you will learn about:\nWhat is Quantum Computing?\nHow to design Quantum circuits and run in IBM Quantum  Computer\nSuperposition, Entanglement & Teleportation concepts\nApplications of Quantum Computing\nQubit and Various Quantum gates, comparison with classical gates",
      "target_audience": [
        "Software and IT professionals who wants to learn Quantum Computing",
        "Science students curious about Quantum Computing"
      ]
    },
    {
      "title": "ASPICE 4.0 - Automotive SPICE",
      "url": "https://www.udemy.com/course/aspice-automotive-spice/",
      "bio": "Learn with real world examples for better understanding of ASPICE including Machine learning & Hardware Engineering.",
      "objectives": [
        "Automotive SPICE framework and expectations for Automotive Industry where Embedded Systems being developed",
        "ASPICE Assessment techniques, criteria and guidelines",
        "Scope of definition for assessment",
        "Assessment rating criteria",
        "At the End of this course, you will be understood the ASPICE concept for process definition, deployment and assessment."
      ],
      "course_content": {
        "Introduction_General": [
          "Introduction and Importance of ASPICE",
          "Course content details",
          "Course design",
          "Motivation",
          "Automotive Software Complexity",
          "Vehicle system development hierarchy",
          "Illustration of Requirements Management Structure to achieve traceability",
          "Software complexity",
          "System levels"
        ],
        "Functional Safety Knowledge along with ASPICE": [
          "ASPICE for Functional Safety relevant Product Development"
        ],
        "ASPICE_The Pupose": [
          "The cost of Failure",
          "Failure mitigation by ASPICE"
        ],
        "Overview of Automotive SPICE": [
          "Background or History of ASPICE",
          "Process Assessment Model (2 dimensional)",
          "ASPICE Measurement Framework",
          "Application of ASPICE Capability Levels",
          "ASPICE PRM Life Cycle Processes",
          "Automotive SPICE Abbreviations",
          "Abbreviation",
          "Process",
          "DOORs Tool Application"
        ],
        "Assessment Rating method and Rating Scale": [
          "Process Attribute with Example",
          "Rating method and Rating scale with Example",
          "Capability determination based on ASPICE Assessment Consolidated Report",
          "Process Attribute",
          "Rating scale",
          "Rating method",
          "ASPICE Capability determination",
          "Rating Method"
        ],
        "How to read the Automotive SPICE PAM 4.0": [
          "Levels of Abstraction of a Automotive SPICE PAM",
          "How to read the ASPICE 4.0 PAM",
          "Levels of Abstractions",
          "Does Really ASPICE add Value to Organization?"
        ],
        "Acquisition process group (ACQ)": [
          "ACQ.4 Supplier Monitoring"
        ],
        "System engineering process group": [
          "SYS.1 Requirements Elicitation",
          "SYS.1 Requirements Elicitation process_Assessment techniques",
          "SYS.2 System Requirements Analysis",
          "SYS.2 Assessment Example",
          "SYS3. System Architectural Design",
          "Sys4. System Integration and Integration Verification",
          "SYS5. System Verification",
          "System Test Cases or Verification measures using Microsoft Excel",
          "System Requirements Analysis",
          "System Architecture design",
          "System Verification",
          "System Integration and Integration verification"
        ],
        "Software Engineering Process Group": [
          "SWE.1 Software Requirements Analysis",
          "SWE2. Software Architectural Design",
          "SWE3. Software Detailed Design and unit construction",
          "SWE4 Software Unit Verification",
          "SWE.5 Software Component Verification and Integration Verification",
          "SWE6. Software Verification",
          "Software Detailed Design and unit construction",
          "Software verification",
          "Component Integration"
        ],
        "Management Process Group": [
          "MAN.3 Project Management_1",
          "MAN.3 Project Management_2",
          "BP5 Project Estimates",
          "MAN.3 ASPICE Assessment Example",
          "MAN.3 ASPICE Assessment"
        ]
      },
      "requirements": [
        "Able to understand the English, Self Motivation to Learn ASPICE"
      ],
      "description": "This course provides a comprehensive introduction to the Automotive SPICE (ASPICE) framework, a key standard for assessing and improving software development processes in the automotive industry. Participants will gain an understanding of the ASPICE model, including its structure, key processes, and assessment criteria with real world examples. You will be able to correlate with actual projects and understand in better way.\nKey Topics Covered:\n\n\n1. Overview of ASPICE and its relevance in the automotive industry.\n2. Detailed understanding of the ASPICE Process Reference Model (PRM) and Process Assessment Model (PAM).\n3. In-depth exploration of the key processes: Requirements Management, Design, Implementation, Testing, and more.\n4. Understanding of process capability levels and how they impact software development.\n5. Practical guidance on implementing ASPICE practices in real-world scenarios.\nLearning Outcomes:\n\n\nDevelop a clear understanding of ASPICE and its application in automotive software development.\nIdentify and implement key processes to improve software quality and project outcomes.\nPrepare for ASPICE assessments by understanding criteria and process expectations.\nTarget Audience: This course is designed for automotive software engineers, project managers, system engineers,  requirement managers, Hardware engineers, Support process roles, of course quality assurance professionals, and anyone involved in the development and assessment of automotive software systems.",
      "target_audience": [
        "Beginners, Experienced professionals and domain experts"
      ]
    },
    {
      "title": "Design Patterns & Antipatterns & Solid in JavaScript 2024",
      "url": "https://www.udemy.com/course/mastering-design-patterns-with-javascript/",
      "bio": "Complete Guide to Gang Of Four Design Patterns, SOLID Principles and Object Oriented Programming Using Javascript.",
      "objectives": [
        "Get a complete understanding of Javascript design patterns & understand where to use them in Javascript code",
        "How Design Patterns Solve Design Problems",
        "Learn the differences between competing design patterns to choose correct solution to your problem",
        "Master the Structural Design Patterns (Adapter, Bridge, Composite, Decorator, Facade, Flyweight, Proxy)",
        "Master the Creational Design Patterns (Factory, Abstract Factory, Builder, Prototype, Singleton)",
        "Comprehensive knowledge about limitations, comparisons, real world usage & hand on examples of design patterns using Javascript"
      ],
      "course_content": {
        "Introduction": [
          "What is Design Patterns?",
          "Don't reinvent the wheel",
          "Object Oriented Design",
          "Categories Of Design Patterns",
          "Why Every Developer Needs to Know Design Patterns",
          "The Historical Evolution Of Design Patterns in Computing : A Quick Dive",
          "Definition Of Antipatterns",
          "Congratulations"
        ],
        "SOLID Design Principles": [
          "What are Solid Principles",
          "Why is it important to follow SOLID principles",
          "Single Responsibility Principle",
          "Refactoring for Single Responsibility Principle in JavaScript",
          "Open/Closed Principle",
          "Report Generator: Open/Closed principle",
          "LSP",
          "Applying the Liskov Substitution Principle in JavaScript",
          "ISP",
          "Implementing the Interface Segregation Principle in JavaScript",
          "DIP",
          "Practicing Dependency Inversion Principle in JavaScript"
        ],
        "Creational Design Patterns: Builder": [
          "Builder Introduction",
          "Create Task Builder",
          "Maze Game With Builder",
          "Consequences",
          "Quiz1",
          "Summary"
        ],
        "Creational Design Patterns: Abstract Factory": [
          "Abstract Factory",
          "Car Factory",
          "Maze Game",
          "Maze",
          "Complete and Play Maze Game",
          "Mock I",
          "Summary"
        ],
        "Creational Design Patterns: Singleton": [
          "Singleton Introduction",
          "Advantages Of Singleton Design Pattern",
          "Disadvantages of Singleton Design Pattern",
          "Use cases of Singleton Design Pattern",
          "Singleton Printer",
          "Summary",
          "Summary",
          "Singleton In Real Life",
          "Singleton Quiz",
          "Database Connection Coding Exercise"
        ],
        "Creational Design Patterns: Prototype": [
          "Prototype Introduction",
          "Create a music note with prototype pattern",
          "Summary",
          "Summary"
        ],
        "Structural Patterns: Adapter": [
          "Adapter Introduction",
          "Calculator",
          "Adapter Summary",
          "Summary"
        ],
        "Structural Patterns: Bridge": [
          "Bridge Introduction",
          "MMORPG Game",
          "Bridge Summary",
          "Summary"
        ],
        "Structural Design Patterns: Composite": [
          "Composite Introduction",
          "Ordering System",
          "Summary"
        ],
        "Structural: Decorator Pattern": [
          "Decorator Introduction",
          "Email Problem Coding",
          "Summary"
        ]
      },
      "requirements": [
        "No programming experience needed. You will learn everything you need to know",
        "Basic Javascript knowledge is good but not must",
        "Familiarity with latest JavaScript language features"
      ],
      "description": "Unlock the Power of Design Patterns and SOLID Principles\nAre you ready to elevate your software engineering skills and become a proficient developer? Join our comprehensive course on Design Patterns and SOLID Principles, tailored for beginners and intermediate developers. This course is designed to provide you with the fundamental concepts crucial for writing clean, maintainable, and scalable code.\nCourse Overview\nThis course starts with a thorough introduction to SOLID Design Principles, which are essential for every developer aiming to write reusable and clean code. You'll learn how to refactor existing JavaScript code and apply these principles through hands-on exercises.\nWhat are SOLID Design Principles?\nSOLID design principles are almost a mandatory skill for every Java developer. These principles enable you to write most reusable & clean Java code in your projects.\nYou'll learn SOLID Principles which are:\nSingle Responsibility Principle\nOpen-Closed Principle\nLiskov Substitution Principle\nInterface Segregation Principle\nDependency Inversion Principle\nWhat is covered in this course?\n\nThis course covers SOLID Design Principles and design patterns in all. We'll cover following:\n\nSOLID Design Principles: Learn about Single Responsibility, Open-Closed, Liskov substitution, Interface segregation & Dependency Inversion principles.\nCreational Design Patterns: Simple Factory, Abstract Factory, Factory Method, Singleton, Builder, Prototype & Object Pool\nStructural Design Patterns: Object & Class Adapters, Decorator, Bridge, Facade, Static & Dynamic Proxy, Flyweight & Composite\nBehavioral Design Patterns: Chain of Responsibility, Command, Interpreter, Mediator, Iterator, Memento, Observer, State, Strategy, Template Method, Visitor, & Null Object\nEach design patterns is also implemented in a follow along coding lecture.\n\n\nWhy Take This Course?\nIn-Depth Coverage: This course covers both SOLID principles and a wide array of design patterns, providing a comprehensive understanding.\nPractical Coding Exercises: Engage in hands-on coding exercises to apply what you learn in real-world scenarios using JavaScript.\nQuizzes and Practice Tests: Test your knowledge with quizzes and practice tests to reinforce learning.\nReal-World Examples: Implement design patterns in practical, real-life examples.\nComprehensive Anti-Patterns Section: Learn to identify and refactor common antipatterns, improving your code quality.\nWho Should Enroll?\nBeginner and Intermediate Developers: Ideal for those who want to strengthen their foundational skills in software design.\nSoftware Designers and Architects: Perfect for professionals looking to enhance their design pattern knowledge and application.\nAspiring Developers: Anyone interested in writing clean, maintainable, and scalable code.\nWhat You Will Gain\nBy the end of this course, you will have a robust understanding of SOLID principles and design patterns, enabling you to solve complex software design problems efficiently. You'll be equipped to write cleaner code that is easy to maintain and extend, making you a more effective and valuable developer.\nWhy This Course?\nComprehensive Content: Covering all key aspects of design patterns and SOLID principles.\nHands-On Approach: Practical coding exercises to apply theoretical concepts.\nStructured for Easy Reference: Each design pattern and principle is discussed in its own section for easy navigation and future reference.\nEnroll today and start mastering the essential principles of software design and development. Write better code, improve your problem-solving skills, and become a proficient developer with our Mastering Design Patterns and SOLID Principles in JavaScript course!",
      "target_audience": [
        "If you are just beginning your career, then you must take this course. It'll benefit you most",
        "If you are preparing for interview, this course is a must for you.",
        "If you are experience developer, this course will help you brush up your software design skills",
        "Software Designers & Architects.",
        "If you are a JavaScript developer who is familiar with basic JavaScript syntax, seeking further exposure to real-world object-oriented programming, then this is the course for you!"
      ]
    },
    {
      "title": "Unified Modeling Language (UML): Complete Guide & Examples",
      "url": "https://www.udemy.com/course/uml-the-complete-uml-unified-modeling-language-reference/",
      "bio": "An online course to Learn how to read UML diagrams, interpret every UML notation and build them using practical examples",
      "objectives": [
        "Gain a working knowledge UML 2.0",
        "Apply knowledge of OOAD to design an object-oriented system which can be implemented in an object-oriented language",
        "Learn the meaning of every UML notation and when to use them",
        "Learn the industry best practices to build UML",
        "Interpret any UML diagram effectively",
        "Increase your software development productivity"
      ],
      "course_content": {},
      "requirements": [
        "Basic Object Oriented knowledge is preferable."
      ],
      "description": "Last updated: 14-Oct-2017 Added a new lecture \"Guidelines for building quality Class Diagrams\"\nCurrently The course contains The Use Case diagram, Use case description, activity diagram, class diagram, object diagram, package diagram, sequence diagram and state transition diagram.\n\n\"Outstanding explanations and examples. Taught in an insightful and practical manner. The teacher is an obvious expert in the field.\"---Sean ODonnell\n\n\"Nice and easy to follow. The instructor engages effectively and reinforces the topics.\"---Ishaq Aslam\n\n\nSoftware practitioners have used modeling languages for decades to specify, visualize, construct, and document systems. UML which stands for The Unified Modeling Language (UML) is one of those languages and today UML is the most used standard modeling language for software and systems development. Even though not everyone need to write UML diagrams , Most software practitioners, if not all of them, need to interpret and read diagrams written by others.\nUML is used to express software or system requirements, architecture, and design. After taking this course. UML will make it easy for you to communicate technical matters with other developers, analysts, designers, testers and even your clients. So it improve your ability to communicate with others and will also improve your team productivity as it will be easier to use UML to express complicated technical matters with others in much less time.\n\nIn this course, I talk about all the different UML diagrams Use cases, class diagrams, sequence diagrams, activity diagram and more. I will talk about each of them in detail. You will learn how to read and comprehend any UML diagram and you also learn the important guidelines to build them provided by subject matter experts. We will have workshops to read and build diagrams together. All these can be achieved with little effort just by watching this course.\nIn this course, we will learn by example, starting by quickly demonstrate some the notations of a diagram then explain in detail the variations of each of those notations. Then will introduce more notations and then discuss them and so on.\n\nWhen done learning how to read any diagram, We will explain how to build diagrams using those notations and the guidelines that we should follow to use each notations.\nJoin this course now and I promise that you will be able to read any UML diagram and build neat , quality UML diagrams in no time",
      "target_audience": [
        "Software practitioners : developers, testers, managers",
        "Anyone interested in learning how to interpret UML diagrams"
      ]
    },
    {
      "title": "Data Structures & Algorithms Essentials using C++",
      "url": "https://www.udemy.com/course/cpp-data-structures-algorithms-prateek-narang/",
      "bio": "Master core computer science concepts by mastering data structures, algorithms and practice problem solving in C++",
      "objectives": [
        "Core concepts & internals of Data Structures",
        "Trees, Linked Lists, Heaps, Graphs",
        "Build all data structures from scratch",
        "Object Oriented Programming Basics",
        "Brute Force & Optimisation Techniques",
        "Space Time Complexity Analysis",
        "Hash Functions, Collision Handling",
        "Recursion & Backtracking",
        "Dynamic Memory & Pointers",
        "Create your own DS library!",
        "C++ Standard Template Library Basics",
        "Project - Design & Implement Shopping Cart"
      ],
      "course_content": {},
      "requirements": [
        "Familiarity with any one programming language",
        "Ability to understand & write code (preferably C/C++)",
        "Understanding of Loops, Variables, Conditional Statements"
      ],
      "description": "Are you a beginner looking to enter the world of Data Structures or intermediate programmer wondering what happens behind a Hash-table?\n\nWelcome to Data Structures & Algorithms, Essentials Course - the only course you need to understand the core concepts behind Data Structures & build a solid programming foundations using C++ . The course is taught by an expert instructor Prateek Narang from Google, who is not just a software engineer but also has mentored thousands of students in becoming great programmers & developers and is top rated on Udemy for his amazing teaching skills.\nEvery software application revolves around data, performing different operations like Insert, Delete, Update & Search. To be a great software developer, understanding of Data Structures & Algorithms is must and this course provides you a deep understanding of the topic by covering both the theory and hands-on-implementation of each data structure from scratch.\nThe Course contains 20+ hours of interactive video content & dozens of coding exercises, teaching you all essential concepts starting from ground zero. Each section covers data structure in great detail, with Coding Exercises & real life examples. Here is what you will learn -\nProgramming Concepts\nBit masking\nObject Oriented Programming Basics\nPointers & Dynamic Memory (C++)\nRecursion\nData Structures Foundation\nArray, 2D Array, Strings, Vectors\nLinked Lists, Stacks, Queues\nTrees, BST, Tries\nHeaps/Priority Queues\nHash-tables, Collision Handling\nGraphs\nAlgorithms Foundation\nBrute Force, Backtracking\nSorting & Searching\nDivide & Conquer\nDynamic Programming\n\n\nThe course is designed for beginner & intermediate programmers. We try to make not so easy topics look easy with intuitive explanations & interactive video lectures with dozens of memes ;) The course finishes with a final mini project - a command line app for an online shopping cart combining principles from Object Oriented Programming & Data Structures.\nUnlike most instructors, we are not a salesperson or a marketer. My job is to help you build strong fundamentals in programming & be a successful developer. Through Udemy & Coding Minutes, I am providing this course to you at a fraction of cost of its original cost, so that anyone who is interested to learn can take their skills to the next level. So I hope you sign up today, and I will see you in the course.",
      "target_audience": [
        "Beginner level programmers",
        "Students who want to learn data structures",
        "Students from Computer Science & related branches",
        "Working professionals who want to brush up internals of hashmaps, heaps, graphs etc"
      ]
    },
    {
      "title": "Python Mastery with Tabnine: AI-Enhanced Coding Efficiency",
      "url": "https://www.udemy.com/course/python-mastery-with-tabnine-ai-enhanced-coding-efficiency/",
      "bio": "Tabnine AI assistant for software developers - Code faster with whole-line & full-function code completions",
      "objectives": [
        "Learn fundamentals of Tabnine AI Assistant",
        "Write Efficient code completion with Tabnine AI",
        "How to Code faster with whole-line and full-function code",
        "Building inheritance and polymorphism concepts",
        "Create functions and modules with Generative AI code",
        "Learn Python basic fundamentals like variables, datatypes, type casting",
        "Solid understanding of Object Oriented Programming",
        "Using Tabnine effectively, avoiding common pitfalls on source code writing",
        "Optimizing its usage to improve your overall coding efficiency and productivity",
        "Maximizing productivity with Tabnine: Discover tips, techniques, and workflows for incorporating Tabnine into your coding routine to maximize productivity",
        "Learn to Take support from AI assistance for software development",
        "Learn What is Generative AI / Gen AI",
        "Participate in Practice test to test your learning skills"
      ],
      "course_content": {},
      "requirements": [
        "No programming experience is needed, You will learn everything you need to know",
        "You need a computer system with an active internet"
      ],
      "description": "Unlock the full potential of Python programming with the power of Tabnine AI. Join our comprehensive online course, \"Python Mastery with Tabnine,\" and elevate your coding efficiency to new heights.\n\n\nIn this immersive course, you will delve into the world of Tabnine AI assistance and discover how it can revolutionize your Python coding experience. Whether you're a beginner or an experienced Python developer, this course is designed to enhance your skills, accelerate your coding workflow, and boost your productivity.\nLearn What is Generative AI / Gen AI\n\n\nParticipate in Practice test to test your learning skills\n\n\nThrough hands-on exercises, practical examples, and expert guidance, you will learn how to leverage Tabnine's advanced AI capabilities to generate accurate and contextually relevant code completions. You will gain a deep understanding of how Tabnine's AI models work, empowering you to write code faster, reduce errors, and explore new possibilities in your Python projects.\n\n\nKey Course Highlights:\n\n\nIntroduction to Tabnine: Get started with Tabnine by understanding its features, installation process, and integration with popular Python development environments.\n\n\nHarnessing AI-Powered Code Completions: Dive into the core functionality of Tabnine and learn how to effectively leverage its AI-powered code completion suggestions to write code faster and with greater accuracy using Generative AI techniques.\n\n\nCustomizing Tabnine for Your Workflow: Discover how to configure and tailor Tabnine to your specific coding style, preferences, and project requirements, ensuring it becomes an indispensable tool in your Python development toolkit.\n\n\nAdvanced Features and Techniques: Explore Tabnine's advanced features, such as support for different Python libraries and frameworks, refactoring assistance, and error handling, to further enhance your coding efficiency.\n\n\nBest Practices for Tabnine Integration: Learn industry best practices for integrating Tabnine seamlessly into your coding workflow, avoiding common pitfalls, and maximizing its effectiveness in various coding scenarios.\n\n\nReal-World Applications and Projects: Apply your Tabnine skills to real-world Python coding scenarios, working on practical projects that demonstrate the power of AI-enhanced coding efficiency.\n\n\nTroubleshooting and Optimization: Gain insights into troubleshooting common issues, fine-tuning Tabnine's settings for optimal performance, and resolving any challenges that may arise during the usage of AI assistant for software developers.\n\n\nFuture Trends and Developments: Stay up to date with the latest advancements in AI-assisted coding and explore the future possibilities and potential of Tabnine.\n\n\nSupercharge your Python coding efficiency and elevate your skills with Tabnine AI. Enroll in \"Python Mastery with Tabnine\" today and gain the confidence and expertise to write code faster, smarter, and with increased productivity. Unleash the full potential of Python development with the help of AI-enhanced coding efficiency.\nEnroll now and start your journey towards Python mastery with Tabnine!",
      "target_audience": [
        "Anyone who wants to win a career as a Python professional using Tabnine AI Assistant",
        "Beginners Software developers curious about Python for artificial intelligence",
        "Who wants to learn to master skills in Python for machine learning",
        "Who wants to start a career in Python programming",
        "Beginner Python Developer curious about Data Science",
        "Who wants to start learning Python using Generative AI",
        "Any one who wants AI Assistant for software development"
      ]
    },
    {
      "title": "Data Structures and Algorithms C++ : Zero to Mastery in 2025",
      "url": "https://www.udemy.com/course/data-structures-algorithms-using-c-zero-to-mastery/",
      "bio": "Ace the Google, Amazon, Facebook, Microsoft, Netflix coding interviews. Step by step guide for their toughest questions!",
      "objectives": [
        "Learn the strengths and weaknesses of a variety of data structures, so you can choose the best data structure for your data and applications",
        "Learn many of the algorithms commonly used to sort data, so your applications will perform efficiently when sorting large datasets",
        "Code an implementation of each data structure, so you understand how they work under the covers",
        "Develop your Analytical skills on Data Structure and use then efficiently.",
        "Improve your problem solving skills and become a stronger developer",
        "Learn everything you need to ace difficult coding interviews"
      ],
      "course_content": {},
      "requirements": [
        "Basic knowledge of Programming in C++",
        "NO experience with data structures or computer science needed!"
      ],
      "description": "Brand new course ready for the 2024 hiring season! Join a course taught by industry experts that have actually worked both at top tech firms. Graduates of this course are now working at Google, Tesla, Amazon, Apple, IBM, JP Morgan, Facebook + other top tech companies.\nThis is the ultimate resource to prepare you for coding interviews. Everything you need in one place!\nWHAT OUR LEARNERS ARE SAYING:\n5 STARS - This was an amazing course. I was a beginner in data structures and algorithms, but I have learned so much that I would consider myself intermediate-advanced. For anyone looking to deepen their understanding of these data structures, their implementation, or their real-world use, I completely recommend buying this course.\n5 STARS -  This is the best course on data structure compare to all data structure course .all the topic of data structure has been completed in this course .if anyone want to learn data structure then you can go for it. thank you sir for making this course on udemy\n5 STARS -  I liked this course very much! It clears out your basics quite well and is does totally what Harsh and Ankit claim they'll do. I would recommend this to everyone who wants to learn Data Structures and Algorithms, especially if you had a phobia for coding like I did. I now love coding! All thanks to them.\n5 STARS -  This course is really amazing. instructor is going beyond and beyond each and every thing was my beyond expectations. really mastery course it is.\n5 STARS -  Hands-on course. The teaching style is excellent. If you are looking for a DSA course and a beginner then your search end here. Just go for it guys. Many thanks to the instructor for creating this course\n5 STARS - This is the best computer science course I've taken. If you need to learn C++ and pass your technical interviews, this is the course to take. The explanations in the videos are extremely thorough, and I have reached out to the instructor several times on various questions, and he's always quick to respond and very helpful. In my experience, every MOOC that said its instructors would actively help you with problems lied, EXCEPT FOR THIS COURSE. TAKE THIS COURSE!\n5 STARS - This is the BEST COURSE on C++ Data Structures & Algorithms. The Instructors are the BEST. They Draw Everything out and Then EXPLAIN THE CONCEPTS VERY WELL & then CODE it. Also I Love Doing the LEETCODE ProblemSets. Absolutely Fantastic. Above my Expectations. I am taking this course for COMPETITIVE PROGRAMMING. It is the BEST COURSE. Thank you very much Ankit and Harsh. You guys are the BEST!\nCourse Highlights\nQuality Problems with hands-on code\nIntuitive & Detailed Explanations\nHD Videos\nDeep focus on Problem Solving\nBroaden your mindset\nSTL Powerful features\n250+ HD Lectures\n200+ quality Problems\n60+ hours of interactive content\nCode Evaluation Exercises\nDoubt Solving within 6 hours\nPractice Exercises\nReal Time Feedback\nLifetime Access\nIndustry vetted curriculum\nCompletion Certificate\nOverview of Topics\nArrays, Strings, Vectors, Binary Search\nStacks, Queues, Linked Lists\nBinary Trees, BSTs, Heaps\nHashing, Pattern Matching, Tries\nBrute force, Recursion\nSliding Window, Two Pointer\nSorting & Searching, Greedy\nGraphs Algorithms, Dynamic Programming\nSo you want to learn and master Data Structure and Algorithm , I have done it. I have cracked interviews of top product based companies and landed job offers from many companies (Amazon, Samsung , Microsoft, Flipkart ...)\nThis course is totally designed, with interative lectures, good quality problems, and is deeply focussed on problem solving. If you want to learn  breath & depth of topics, this course is for you.\nSo i have created this course keeping in mind university syllabus and also to make you ready to get those valuable internships and placements.\nYou will top your university exams and will become interview ready at the same time.\nI know how professors teach in colleges , they just discuss theory , but hey I am not a professor instead a bro. I will teach you things which really matter . Also i have shared many tips and tricks in the course .\nSo what are you waiting for ??\nMaster Data Structure and Algorithms , top you university exam and get those valuable internships and placements\nStill have doubt , see the course content , no one is teaching you variation of binary search , every other instructor will teach you standard binary search. I am also teaching Dynamic Programming which is difficult to teach and other instructors are not teaching this but its a very important topic and you must know it.\nWe are solving 30+ problems on Recursion ,\nNote :  This course is 100% practical\nMy approach is very simple : discuss the relevant theory and then solve lots of problems . I teach concepts by solving lots of problems  and you should be ready to solve lots of problems as Assignments , Quizzes etc\nEvery Data Structure is discussed, analysed and implemented with a Practical line-by-line coding.\nSource code for all Programs is available for you to download\nWith this complete course, you will become an expert in the core fundamentals of programming, Data Structures, Algorithms and its functioning with one of the most popular programming languages,C and C++. The involvement of the practical technique of problem-solving will give learners a better understanding of the concepts of the course. Learn to design efficient algorithms and become ready for future best jobs in the industry.\nAs if this was not enough , I have shared tips and tricks on how to become good in competitive programming ( yes i have did CP in college)\nSource code for all Programs is available for you to download\nSign up today!",
      "target_audience": [
        "Undergraduate who want to Learn Data Structures Perfectly",
        "Developer who want to get Deepest knowledge of Data Structure",
        "Anyone interested in improving their problem solving skills",
        "Anyone preparing for programming interviews"
      ]
    },
    {
      "title": "Flume and Sqoop for Ingesting Big Data",
      "url": "https://www.udemy.com/course/flume-and-sqoop/",
      "bio": "Import data to HDFS, HBase and Hive from a variety of sources , including Twitter and MySQL",
      "objectives": [
        "Use Flume to ingest data to HDFS and HBase",
        "Use Sqoop to import data from MySQL to HDFS and Hive",
        "Ingest data from a variety of sources including HTTP, Twitter and MySQL"
      ],
      "course_content": {
        "You, This Course and Us": [
          "You, This Course and Us"
        ],
        "Why do we need Flume and Sqoop?": [
          "Why do we need Flume and Sqoop?"
        ],
        "Flume": [
          "Installing Flume",
          "Flume Agent - the basic unit of Flume",
          "Example 1 : Spool to Logger",
          "Flume Events are how data is transported",
          "Example 2 : Spool to HDFS",
          "Example 3: HTTP to HDFS",
          "Example 4: HTTP to HDFS with Event Bucketing",
          "Example 5: Spool to HBase",
          "Example 6: Using multiple sinks and Channel selectors",
          "Example 7: Twitter Source with Interceptors",
          "[For Linux/Mac OS Shell Newbies] Path and other Environment Variables"
        ],
        "Sqoop": [
          "Installing Sqoop",
          "Example 8: Sqoop Import from MySQL to HDFS",
          "Example 9: Sqoop Import from MySQL to Hive",
          "Example 10: Incremental Imports using Sqoop Jobs"
        ]
      },
      "requirements": [
        "Knowledge of HDFS is a prerequisite for the course",
        "HBase and Hive examples assume basic understanding of HBase and Hive shells",
        "HDFS is required to run most of the examples, so you'll need to have a working installation of HDFS"
      ],
      "description": "Taught by a team which includes 2 Stanford-educated, ex-Googlers. This team has decades of practical experience in working with Java and with billions of rows of data.\nUse Flume and Sqoop to import data to HDFS, HBase and Hive from a variety of sources, including Twitter and MySQL\nLet’s parse that.\nImport data : Flume and Sqoop play a special role in the Hadoop ecosystem. They transport data from sources like local file systems, HTTP, MySQL and Twitter which hold/produce data to data stores like HDFS, HBase and Hive. Both tools come with built-in functionality and abstract away users from the complexity of transporting data between these systems.\nFlume: Flume Agents can transport data produced by a streaming application to data stores like HDFS and HBase.\nSqoop: Use Sqoop to bulk import data from traditional RDBMS to Hadoop storage architectures like HDFS or Hive.\nWhat's Covered:\nPractical implementations for a variety of sources and data stores ..\n\nSources : Twitter, MySQL, Spooling Directory, HTTP\nSinks : HDFS, HBase, Hive\n.. Flume features :\nFlume Agents, Flume Events, Event bucketing, Channel selectors, Interceptors\n.. Sqoop features :\n\nSqoop import from MySQL, Incremental imports using Sqoop Jobs",
      "target_audience": [
        "Yep! Engineers building an application with HDFS/HBase/Hive as the data store",
        "Yep! Engineers who want to port data from legacy data stores to HDFS"
      ]
    },
    {
      "title": "RabbitMQ: The Complete Guide with Software Architecture Applications",
      "url": "https://www.udemy.com/course/rabbitmq-the-complete-guide-with-software-architecture-applications/",
      "bio": "Learn how to use Rabbit MQ effectively with ANY programming language and use it to design scalable and robust systems.",
      "objectives": [
        "Learn what is RabbitMQ and where it can be used",
        "Install RabbitMQ and navigate the interface",
        "Make use of the different configurations, routing functionality, exchange types and queues provided by RabbitMQ to design the best solution possible",
        "Make use of plugins that will add important features to the RabbitMQ installation",
        "Architect and design enterprise solutions using RabbitMQ"
      ],
      "course_content": {
        "Introduction": [
          "Course Introduction",
          "Introduction to RabbitMQ"
        ],
        "Installation and Setup": [
          "Installing RabbitMQ",
          "Demo Session: Using the Management UI"
        ],
        "Messages, Queues and Exchanges": [
          "Introduction to Messages, Queues and Exchanges",
          "Message Acknowledgements",
          "Queues",
          "Demo Session: Queues and Messages"
        ],
        "Exchanges and Complex Routing": [
          "Exchanges and Complex Routing",
          "Demo Session: Exchanges and Complex Routing"
        ],
        "Plugins": [
          "Consistent Hash Exchange Plugin",
          "Demo Session: Consistent Hash Exchange Plugin",
          "Shovel Plugin (including Demo Session)"
        ],
        "Software Architecture Applications": [
          "How should Rabbit MQ be used in Software Architecture?"
        ]
      },
      "requirements": [
        "Basic programming knowledge will help understand some concepts but is not a requirement"
      ],
      "description": "In this course you will learn about RabbitMQ, explore its functionality in detail and learn how it can be used to build scalable and robust systems.\nWe will go through all of its core features including:\nInstallation\nQueues\nDurability\nAcknowledgements\nDifferent exchange types ( fanout, direct, topic, headers)\nPopular plugins\nSoftware architecture and design applications\nThe course is structured around both video tutorials explaining different features, together with practical demonstration sessions to make sure that we are able to apply what we have learnt.\nPractical demonstrations are done using the RabbitMQ Management UI, a very useful plugin which will also be explained in detail in the course. In this way, demonstrations are easy to follow by programmers of all programming languages .\nI'm also available to answer any queries you may have regarding any course material which you didn't understand or would like further detail on.",
      "target_audience": [
        "Anyone who wants to learn how to use the RabbitMQ Message Broker effectively",
        "Experienced developers and architects who want to learn how RabbitMQ can fit into their enterprise systems"
      ]
    },
    {
      "title": "Learn To Build Trading Indicators for NinjaTrader",
      "url": "https://www.udemy.com/course/learn-to-build-trading-indicators-for-ninjatrader/",
      "bio": "Learn to develop NinjaTrader Indicators from scratch",
      "objectives": [
        "Learn the basics of setting up the NinjaTrader Platform",
        "Learn about the key features and tools of NinjaTrader",
        "Learn how to build NinjaTrader Indicators using NinjaScript",
        "Learn to export your indicators for others to use"
      ],
      "course_content": {
        "Introduction": [
          "Course Overview",
          "Instructor Introduction",
          "Why Learn NinjaScript?",
          "What you will learn"
        ],
        "Getting Started with NinjaTrader": [
          "NinjaTrader Platform Overview",
          "Key Features and Tools",
          "Advanced Trade Management (ATM)"
        ],
        "Introduction to NinjaScript": [
          "What is NinjaScript?",
          "NinjaScript Syntax and Structure",
          "Basic Programming Concepts in NinjaScript"
        ],
        "Creating Custom Indicators": [
          "Overview of Indicators in NinjaTrader",
          "Steps to Develop a Custom Indicator",
          "Building a Sample Indicator: Three EMAs",
          "Exporting Our Indicator",
          "Creating a Supply/Demand Zone Indicator",
          "Add different ZoneSizes for your supply zone and demand zone.",
          "VolumeBasedBuySellSignals Indicator",
          "Bonus Indicator (Fair Value Gap Finder)",
          "Fair Value Gap Finder Settings"
        ],
        "Conclusion": [
          "Next Steps in Your NinjaScript Journey"
        ]
      },
      "requirements": [
        "Very basic programming knowledge of C# is helpful but not necessary."
      ],
      "description": "In this comprehensive course, we will delve into the world of NinjaTrader, a powerful and popular trading platform, and focus on utilizing its proprietary scripting language, NinjaScript, to develop custom indicators. NinjaScript is based on the versatile C# programming language, which is tailored specifically to the needs of traders and developers working within the NinjaTrader ecosystem.\nThroughout the course, we will provide an in-depth overview of the NinjaTrader platform, highlighting its key features, tools, and functionalities. This will enable you to gain a solid understanding of the platform's capabilities and how it can be harnessed to enhance your trading experience. We will also explore some of the most useful built-in indicators available in NinjaTrader, which can serve as a foundation for creating your own unique tools.\nThe core of this course will be dedicated to developing several custom indicators for NinjaTrader from scratch. By guiding you step by step through the process of creating these indicators, we aim to equip you with the necessary skills and knowledge to design, implement, and optimize your own trading tools using NinjaScript. This hands-on approach will ensure that you gain practical experience in working with the language and mastering its various aspects.\nAnother important aspect of this course is teaching you how to export your custom indicators, allowing other traders and developers to benefit from your work. We will cover the process of packaging and sharing your indicators, ensuring that they are easily accessible and compatible with the NinjaTrader platform. By the end of this course, you will not only have a solid understanding of the NinjaTrader platform and NinjaScript but also possess the skills to create, optimize, and share your own custom indicators, giving you a competitive edge in the world of trading.",
      "target_audience": [
        "NinjaTrader users who wish to learn the basics of how to create indicators for NinjaScript"
      ]
    }
  ]
}