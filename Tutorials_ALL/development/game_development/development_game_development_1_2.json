{
  "courses": [
    {
      "title": "Unity Turn-Based Strategy Game: Intermediate C# Coding",
      "url": "https://www.udemy.com/course/unity-turn-based-strategy/",
      "bio": "Learn to create turn-based gameplay with multiple Units, along with grid-based movement and logic!",
      "objectives": [
        "Take your Skills from Beginner to Advanced.",
        "Learn to manage and organize a complex project.",
        "Advanced Programming concepts, such as; C# generics, C# events, and custom structs.",
        "Create a custom Grid System.",
        "Learn A* Pathfinding.",
        "Create Actions while writing good high quality code."
      ],
      "course_content": {
        "Introduction": [
          "Promo",
          "Welcome To The Course",
          "Community & Support",
          "Set Up Unity & VS Code",
          "IntelliSense Issues?",
          "Reminder Of C# Fundamentals",
          "Accessing Our Projects",
          "Project Setup",
          "Render Pipeline and Assets",
          "Post Processing"
        ],
        "Unit Movement & Selection": [
          "Intro - Unit Movement and Selection",
          "Unit Base Setup",
          "Unit Move",
          "Mouse Raycast",
          "Mouse World Position",
          "Unit Click to Move",
          "Public vs SerializeField Private",
          "Unit Animations Setup",
          "Unit Animator",
          "Unit Animator Parameters",
          "Unit Rotate when Moving",
          "Unit Selection",
          "Unit Selected Visual, Events",
          "Unit Selected Visual, Singleton"
        ],
        "Grid System & Camera": [
          "Intro - Grid System and Camera",
          "Grid System Design",
          "Grid System",
          "Grid Object",
          "Grid Object Debug",
          "Level Grid",
          "Cinemachine",
          "Camera Move and Rotate",
          "Camera Zoom"
        ],
        "Actions & UI": [
          "Intro - Actions and UI",
          "Move Action",
          "Move Action Validate",
          "Grid Visual",
          "Base Action Class",
          "Single Active Action",
          "UI Setup",
          "Unit Action System UI",
          "Click UI to Select Action",
          "Generic Take Action",
          "Selected Action UI Visual",
          "Action Busy UI",
          "Action Points",
          "Turn System"
        ],
        "Enemies & Combat": [
          "Intro - Enemies and Combat",
          "Enemy",
          "Shoot Action",
          "Unit Animator",
          "Shooting Bullet Visual",
          "Health System",
          "Ragdoll",
          "Unit World UI",
          "Action Camera",
          "Grid Visual Colors",
          "Enemy AI Basic",
          "Enemy AI Complex"
        ],
        "Pathfinding": [
          "Intro - Pathfinding",
          "C# Generics",
          "Grid System Generics",
          "Pathfinding Overview",
          "Pathfinding Script",
          "Pathfinding Implementation",
          "Pathfinding Obstacles",
          "Level Design",
          "Unit Move with Pathfinding"
        ],
        "Polish": [
          "Intro - Polish",
          "Screen Shake",
          "Grenade Action",
          "Grenade Visuals",
          "Destructible Crate",
          "Destructible Crate Parts",
          "Sword Action",
          "Interact Action",
          "Interface IInteractable",
          "Input Refactoring",
          "Input System",
          "Final Level",
          "Congratulations! What’s Next?"
        ],
        "Bonus: Hex Grid System": [
          "Intro - Hex Grid System",
          "Hex Grid System Design",
          "Hex Grid System Implementation",
          "World Position to Grid Position",
          "Hex Grid Pathfinding"
        ],
        "Bonus: Multi-Floors": [
          "Intro - Multi-Floors",
          "Multi-Floors LevelGrid",
          "Multi-Floors GridSystemVisual",
          "Multi-Floors Pathfinding",
          "Multi-Floors Pathfinding Links",
          "Multi-Floors Jump-Fall Animation",
          "Multi-Floors Shoot Action",
          "Multi-Floors Visibility",
          "Multi-Floors Visibility Colliders",
          "Multi-Floors Done"
        ]
      },
      "requirements": [
        "Familiar with the Unity editor",
        "Basic to intermediate knowledge of C#",
        "If you've taken any of our Complete Unity 2D or 3D courses you'll be good to go!"
      ],
      "description": "Are you looking to level up your game development skills and take your projects to the next level?\nDo you like games like XCOM2 or Final Fantasy Tactics?\nIn this course, you’ll take your skills from beginner to advanced, learn to manage and organise a complex project. You’ll create a custom Grid System and learn advanced Programming concepts, such as; C# generics, C# events, and custom structs. Plus A* Pathfinding!\nEven if you’re not interested in turn-based strategy games, these skills are transferable to other types of games.\nYou’ll create turn-based gameplay with multiple Units, along with grid-based movement and logic. You’ll also add enemy AI and with all the actions you create, you’ll be writing good high quality code.\n\n\nWriting reusable and easily extendable code\nLearn to organise a complex project\nSeparate gameplay logic from animation and visual components\nLearn to write clean code, how to keep all systems decoupled\nYou’ll need to be familiar with the Unity editor, and have a basic to intermediate knowledge of C#. If you’ve taken any of our Unity courses (or the equivalent) you’ll be good to go.\nYou’ll get full lifetime access for a single one-off fee. The creators are qualified and experienced coders, so are able to explain complex concepts clearly, as well as entertain along the way. We’re thrilled to have teamed up with Code Monkey to bring you this course.\nAll students have access to the Q&A forums where our Instructors, Teaching Assistants and Community are ready to help answer your questions and cheer on your success.\nReady to create your own Turn-Based Strategy game? Come join the course now!",
      "target_audience": [
        "If you're looking to take your skills from Beginner to Advanced",
        "If you want to improve your coding skills and take your projects to the next level",
        "If you want to create a turn based strategy game :)"
      ]
    },
    {
      "title": "Learn To Create A Roguelike Game In Unity",
      "url": "https://www.udemy.com/course/unityroguelike/",
      "bio": "Game development made easy. Learn C# using Unity and create your very own classic RPG!",
      "objectives": [
        "Learn C#, a modern versatile programming language.",
        "Understand the capabilities of 2D development in Unity.",
        "Develop strong and transferrable problem solving skills.",
        "Gain an understanding of the game development process.",
        "Learn how object oriented programming works in practice."
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Setup": [
          "The Unity Layout",
          "Project Setup",
          "Setting Up Spritesheet"
        ],
        "Controlling The Player": [
          "Creating The Player",
          "Intro to Scripting",
          "Moving the Player",
          "Hitting Solid Objects",
          "Aiming The Gun",
          "Switching Directions",
          "Animating The Player",
          "Limiting Player Movement"
        ],
        "Shooting": [
          "Making Bullets",
          "Shooting Bullets",
          "Auto-Firing Bullets",
          "Bullet Impact Effects"
        ],
        "Making Enemies": [
          "Creating & Moving Enemy",
          "CHALLENGE - ANIMATE THE ENEMY",
          "Damaging Enemies",
          "Death Splatters",
          "CHALLENGE - ENEMY HURT EFFECTS",
          "Making Enemies Fire",
          "Enemy Bullets",
          "Collision Layers",
          "Shooting While In Range"
        ],
        "Health & Damage": [
          "Player Health System",
          "Setting Up Healthbar UI",
          "Improving Healthbar appearance",
          "Showing Death Screen",
          "Adding Temporary Invincibility",
          "Adding Static Dangers"
        ],
        "Dashing & Smashing": [
          "Dashing",
          "Animating The Dash",
          "CHALLENGE - MAKE THE PLAYER INVINCIBLE WHILE DASHING",
          "Breaking Boxes",
          "Adding Broken Pieces",
          "Moving Broken Pieces"
        ],
        "Pickups": [
          "Assigning Sprite Layers",
          "Automatically Assigning Sort Order",
          "Creating Health Pickups",
          "Dropping Items Randomly"
        ],
        "Audio": [
          "Adding Music",
          "Adding Sound Effects",
          "CHALLENGE - ASSIGN SOUND EFFECTS",
          "Fixing Object Interactions"
        ],
        "Making Rooms": [
          "Making Rooms with Tilemaps",
          "Making Tiles Solid",
          "Setting up Multiple Rooms",
          "Creating the Camera Controller",
          "Entering Rooms",
          "Making Doors",
          "Clearing A Room",
          "CHALLENGE - MAKE A SIMPLE LEVEL SEQUENCE"
        ]
      },
      "requirements": [
        "Mac or PC capable of running Unity 3D",
        "A copy of Unity 2019.2 or newer"
      ],
      "description": "Learn how to create and program your very own Roguelike Dungeon Crawling game using Unity, an industry-standard game development program used by large gaming studios and indie developers across the world.\nIn this course you won’t just be learning programming concepts, but tying these concepts to real game development uses. You will have access to a course forum where you can discuss the topics covered in the course as well as the next steps to take once the course is complete.\nThis course has been designed to be easily understandable to everyone, so whether you’re a complete beginner, an artist looking to expand their game development range or a programmer interested in understanding game design, this course will help you gain a greater understanding of development.\n\nAt the end of this course you will have developed the ability to create such game elements as:\nFull top-down character movement with Dashing\nGenerating Procedural Levels\nFull Weapon Collection & Switching System\nEnemies with different movement and firing patterns\nMultiple Characters & Character Switching\nShooting System\nComplete Health System\nCreating tile-based maps in Unity\nShop system\nIn-Game Maps\nBoss Battles\nAnd more!...\n\n\nStart learning today and let me help you become a game developer!",
      "target_audience": [
        "Anyone who wants to make their own 2D games.",
        "People who want to create and publish their own games.",
        "Complete beginners with an interest in learning game development.",
        "Developers who want to re-skill across to game development.",
        "People interested in working in the game design industy.",
        "Competent and confident with using a computer."
      ]
    },
    {
      "title": "Make Games without Code? Master Visual Scripting in Unity!",
      "url": "https://www.udemy.com/course/make-games-without-code-unity-visual-scripting/",
      "bio": "Learn to make awesome games without Coding!",
      "objectives": [
        "Learn from a Professional Indie Game Developer",
        "Learn how to make games without writing code!",
        "Students will learn how to make several complete games from start to finish",
        "Learn Visual Scripting, Shader Graph, Particle System, UI, Game Design, and more!"
      ],
      "course_content": {
        "Introduction": [
          "Welcome",
          "Important Note on Versions",
          "Overview",
          "New Project",
          "Unity Layout",
          "Render Pipeline",
          "Bolt Setup"
        ],
        "Platformer (Visual Scripting Basics)": [
          "Platformer Start",
          "Platform Game Design",
          "Visual Scripting Basics",
          "Physics",
          "Player Movement",
          "Player Movement Speed",
          "Player Jumping",
          "Is Grounded",
          "Super Units",
          "Visual Scripting Groups",
          "Animations",
          "Cinemachine",
          "Platform Visuals",
          "Spikes",
          "Death Scene Management",
          "Visual Scripting Events",
          "UI",
          "Player Fall to Death",
          "Coins",
          "Level Win",
          "Multiple Levels",
          "Lava Particle System",
          "Post Processing",
          "Shader Graph",
          "Sound",
          "Music",
          "Options Menu Volume",
          "Game Win",
          "Main Menu",
          "Polish",
          "Player Win Death Particles",
          "Coin Animations",
          "Face Last Move Dir",
          "Trail",
          "Double Jump",
          "Moving Platforms",
          "Moving Hazards",
          "Touch Input",
          "More Levels",
          "Final Showcase"
        ],
        "Action RPG (Visual Scripting Advanced)": [
          "Action RPG Welcome",
          "Action RPG Overview",
          "Action RPG Start",
          "Action RPG Game Design",
          "Player",
          "Player Animator",
          "Player Sword Attack",
          "Cinemachine",
          "Tilemap",
          "Post Processing",
          "Health System",
          "UI",
          "Sound Music Options",
          "Spikes",
          "Player Death Scene Management",
          "Enemy",
          "Visual Scripting State Machines",
          "Enemy AI",
          "Enemy Patrolling AI",
          "Enemy Attack Player AI",
          "Enemy Health System",
          "Player Block",
          "Coins",
          "Health Pickup",
          "Visual Scripting Return Events",
          "Player Dash",
          "Weapon Arrows",
          "Enemy Arrow",
          "Enemy Manager",
          "Battle Spawner",
          "Key Door System",
          "Dungeons",
          "Coin Spawner",
          "Chest",
          "Cannon",
          "Lava",
          "Fire Arrows",
          "Extra Pickups",
          "Shop",
          "Buttons",
          "Star",
          "Game Win Scene",
          "Main Menu",
          "Polish",
          "Tint Flash Damage",
          "Dissolve Shader Spawn",
          "Coin Key Animations",
          "Destructible Pots",
          "Arrow Trails",
          "World Building",
          "Dash Trail",
          "Stop While Attacking",
          "Star Glow Outline",
          "Lava Emission",
          "Fireballs Dont Vanish",
          "Camera Shake",
          "Respawn",
          "Sword Slash",
          "Grass Wind Shader",
          "World Populate",
          "Final Showcase"
        ],
        "FPS (Visual Scripting Advanced)": [
          "Welcome",
          "Start",
          "Game Design",
          "Player Look",
          "Player Character Controller",
          "Player Shoot",
          "Enemy",
          "Shoot Damage",
          "Shield",
          "Weapon Zoom",
          "Weapon Ammo Reload",
          "UI",
          "Enemy Health Bar",
          "Enemy Fast",
          "Enemy Ragdoll",
          "Shotgun",
          "Rocket Launcher",
          "Weapon Manager",
          "Health Pickup",
          "Weapon Pickup",
          "Coins",
          "Hookshot",
          "Enemy Spawner",
          "Level",
          "Fall Death",
          "Key Door System",
          "Boss Enemy",
          "Sound Music",
          "Options Pause",
          "Main Menu Win",
          "Screen Shake",
          "Double Jump",
          "Visuals",
          "Final Showcase"
        ],
        "CONGRATULATIONS": [
          "Congratulations!"
        ],
        "EXTRAS": [
          "Unity Basics",
          "Tint Shader",
          "Outline Shader",
          "Dissolve Shader",
          "Grass Wind Shader",
          "Visual Scripting changes in Unity 2021",
          "Shader Graph in URP 10",
          "Continue Your Learning Journey (Bonus Lecture)"
        ]
      },
      "requirements": [
        "Very basic knowledge of Unity",
        "Use the Q&A Section if you have any questions and Download the included Complete Project Files"
      ],
      "description": "Hello and Welcome!\nI'm your Code Monkey and in THIS course you will learn how to make Games without writing any code!\nThis course features multiple games all made completely using Unity Visual Scripting and without a single line of code.\nI specifically designed it to include multiple games so you can learn to use Visual Scripting and apply it to any genre you can think of.\nWith the knowledge you will learn from this course you will then be able to make any game you want!\n\n\nAbout me, I'm a Professional Indie Game Developer with several successful games published on Steam covering a wide range of genres, I've been Programming for over 20 years and using Unity for almost 10.\nAlso a couple of years ago I started a YouTube channel making Free Video Tutorials to share the knowledge I have accumulated to help you learn how to make YOUR OWN games.\nIf you'd like to try out my learning style before purchasing the course you can watch the over 350 Videos available for Free on the YouTube channel. They are presented as clear step-by-step tutorials just like this course.\n\n\nThe course also includes the Complete Project Files for every single lecture.\n\n\nA bit more about the games...\nFirst we start off with a Simple Platformer in order to learn the basics of Visual Scripting.\nThe course is designed with a smooth learning curve in mind so you will learn how to use the Visual Scripting Tools as they are needed.\nThe platformer features: Physics, Platforms, Coins, Hazards, Multiple Levels, Moving Platforms, Moving Hazards and more.\n\n\nThe second game is the Action RPG\nThis one builds on the knowledge gained while making the Platformer so the design is more complex.\nThere's tons of features in the final game.\nSwords, Arrows, Enemies, Dungeons, Keys, Doors, Buttons, Lava, Fireballs, Hearts, Coins, Shops, and much more.\n\n\nThe third game is a First Person Shooter FPS\nIt features multiple weapons, enemies, pathfinding, coins, keys, Boss fight and a really awesome Hookshot mechanic.\nAll made without a single line of code!\n\n\nAll 3 games have tons of effects and lots of awesome features. You can see some cool Shaders, Glow, Screenshake, Post Processing, Animations, lots of UI elements, smooth Camera, Particles and so on. The final games play really great and feel very satisfying.\nThis course starts with a completely empty project starting completely from scratch and step-by-step we will get to the final games.\nEverything is built in an understandable way so you can easily take this as a base and expand upon it with more Hazards, Enemies, Weapons, Levels and so on.\n\n\n\n\nThis course is presented as a thorough step-by-step guide where I will show you exactly how to do what I'm doing and why it is that I'm doing it so you can learn how to think like a game developer.\n\n\nThis course will cover a bunch of topics including:\nHow Visual Scripting works\nHandle Player Movement and Physics\nVisual Scripting Variables, Events, Super Units, State Machines...\nHandle Enemy AI with Attack Logic and a Health System\nBuild up the World using a Tilemap\nLearn the basics of Unity tools like Shader Graph, Post Processing, Particle System...\nAnd much much more!\n\n\nAs for requirements you really just need to know the absolute basics of Unity.\nIf you've never touched Unity before then there is a lecture in the extras section which covers the basics.\nIf you feel confused or lost at any point in the course make sure you post your questions in the Q&A section.\nI will be there to help with whatever issues you may have.\n\n\nAlright so go ahead join me on the course and let's learn how to build some awesome games together!\n- Code Monkey",
      "target_audience": [
        "Beginners who want to make games without code",
        "People who want to see how a Professional Indie Game Developer structures a game",
        "Beginners who want to make complete games",
        "People who want to make a Platformer or Action RPG game",
        "Anyone interested in learning and exploring the power of Visual Scripting",
        "Anyone interested in learning from a Professional Indie Game Developer"
      ]
    },
    {
      "title": "Little Adventurer: Learn to make a 3D action game with Unity",
      "url": "https://www.udemy.com/course/project-little-adventurer-learn-to-create-a-3d-action-game/",
      "bio": "Make your first Unity 3D game with good-looking game asset!",
      "objectives": [
        "How to create a complete 3D action game from scratch with high-quality game assets",
        "Install, and setup Unity & Visual Studio Code",
        "Code basic character movement, attack, shoot and dodge abilities",
        "Create a simple combo system",
        "Control animations with animator controller, override animator controller, and animation event",
        "Control VFX via script",
        "Create AI with NavMesh system to control enemy behaviors",
        "Use a basic state pattern to control the character's status",
        "Create basic health & damage system",
        "Create basic health & damage system",
        "Create pickups & bullets",
        "Game logic control & enemy spawn",
        "How to use Gizmo to debug",
        "Basic level design",
        "Create main menu and game menu with Unity UI system"
      ],
      "course_content": {
        "Introduction & Setup": [
          "Learn to create a 3D action game with high-quality game asset",
          "Installing Unity Hub and Unity (version 2021)",
          "Installing Visual Studio Code & .Net SDKCode",
          "Creating Our New Unity project",
          "Setting up Visual Studio Code",
          "Game Asset",
          "Importing Game Asset Package",
          "Installing Unity Packages & Setting up The Render Pipeline"
        ],
        "Setting up the Game Scene": [
          "Setting up the Game Scene"
        ],
        "Setting Up The Player Gameobject": [
          "Setting Up The Player Gameobject",
          "Setting The Virtual Camera"
        ],
        "Handling The Player's Basic Movement": [
          "Adding Character Controller Component",
          "Creating The Scripts",
          "Writing Player Input Script",
          "Basic Movement 01",
          "Basic Movement 02"
        ],
        "Handling The Player's Animations": [
          "Creating The Animator Controller",
          "Attaching The Swords To The Player",
          "Running Animation & Script",
          "Falling Animation & Script"
        ],
        "Creating The Player Footstep VFX": [
          "Setting Up Footstep VFX",
          "Writing PlayerVFXManager Script",
          "Writing Player_Run behaviors Script"
        ],
        "Creating The Enemy": [
          "Creating The Enemy GameObject",
          "Creating Animator Override Controller"
        ],
        "Handling Enemy AI Using NavMesh": [
          "Baking NavMesh",
          "Adding Nav Mesh Agent Component",
          "Writing Enemy Movement Code"
        ],
        "Creating The Enemy Movement VFX": [
          "Enemy Movement VFX"
        ],
        "Implementing states for the player": [
          "Introduction To A Simple State pattern",
          "Updating Player Input script",
          "Creating State Enum and SwitchToState()",
          "Updating Character Script"
        ]
      },
      "requirements": [
        "Mac or PC capable of running Unity 2021",
        "Some very basic understanding of Unity editor, such as navigating in the scene, and using basic manipulation tools (Translate, Rotate and Scale)",
        "You should have an understanding of the basics of C#, such as how variables and functions work"
      ],
      "description": "Before I became a programmer, I had been working as a digital artist for a really long time, how games look really matters to me. So when I started creating this tutorial, I really wanted to make the whole experience enjoyable, not only mentally, but also visually. I want you to see a product-level video game building up in your hands while you go through this tutorial, and I believe that will make the how learning experience more immersive.\nThis course comes with a production-level game asset package, including high-quality models with 4K textures, animations, environment models, a pre-constructed level prefab, and VFX prefabs.\nIn this course, we will build a basic 3D action game from scratch with high-quality game assets. I will provide you with all the character models, animations, environment, VFX, and Post-Process settings (sound & music not included so far) to make you feel like you are building a professional game from the beginning.\n\n\nI will try to focus on every detail, but at the same time, it's better that you have some basic experience in Unity & C#, such as how to navigate the scene, move and rotate GameObjects, and understand how variables and functions work.\n\n\nAt the end of this course, you will be able to create game elements such as:\nInstall, and setup Unity & Visual Studio Code\nCode basic character movement, attack, shoot and dodge abilities\nCreate a simple combo system\nControl animations with animator controller, override animator controller, and animation event\nControl VFX via script\nCreate AI with NavMesh system to control enemy behaviors\nUse a basic state pattern to control the character's status\nCreate basic health & damage system\nCreate pickups & bullets\nGame logic control & enemy spawn\nBasic level design\nHow to use gizmo to debug\nCreate main menu and game menu with Unity UI system\nPlease NOTE that this course DOES NOT contain any sound and music assets so far.\n*All of the assets (meshes, animations, VFX, etc.) provided in this course are only for educational purposes, please do not use them in any commercial projects.\n\n\nBy the end of this course, you will have a 3D action game that you can show off to your friends and experiment with your unique ideas.\nPlease enroll today, I'm looking forward to seeing you in the course.",
      "target_audience": [
        "Anyone who wants to make their own 3D action game with good looking",
        "Beginners with some basic C# and Unity experience",
        "Anyone who wants to get into game development careers"
      ]
    },
    {
      "title": "Start Augmented Reality & Virtual Reality Metaverse Business",
      "url": "https://www.udemy.com/course/businesses-in-augmented-reality-virtual-reality/",
      "bio": "Learn basics of Augmented Reality (AR), Virtual Reality (VR), and learn what business ideas to start in the Metaverse",
      "objectives": [
        "Understand the AR/VR industry, and create your own start-up in it!",
        "Introduction to Virtual Reality (VR)",
        "Introduction to Augmented Reality (AR)",
        "Business ideas for apps in AR",
        "Correct developer outsourcing to create AR apps",
        "How to sell freelancing services in AR and VR",
        "PERSONALIZED HELP from the instructor: Join OFFICE HOURS Zoom call with the instructor and students to ask questions directly",
        "WORLD-CLASS student support: I answer 99% of student questions within 24 hours"
      ],
      "course_content": {},
      "requirements": [
        "Computer and willingness to learn new things"
      ],
      "description": "This is a 2-part course. The first part is for beginners in Augmented Reality and Virtual Reality to get a good grasp for what these spaces represent and where they are heading as a business. If you are new to Augmented Reality and Virtual Reality, you must learn about them because very soon they will be everywhere. Culturally and financially you can't afford to become left behind.\nThe second part of the course focuses on different business ideas possible to get into in Augmented Reality and Virtual Reality.\nFor possible business ideas, you will learn about creating Augmented Reality mobile apps for different industries and how to effectively outsource the development of such apps.\nYou will also learn the differences in business ideas and potential markets for Augmented Reality and Virtual Reality.\nThese are exciting new fields which represent a lot of business opportunity because they are still new and there is not a lot of competition. There will be 5-10 years of rapid growth in this industry and that is why it is great to get in on the ground floor in this industry and grow with it.\nABOUT THE INSTRUCTOR\nAlex Genadinik is a successful online entrepreneur with 15+ years of experience and a veteran instructor with 7 years of experience teaching online. Alex specializes in forward-looking online businesses, marketing, and explaining complex concepts in easy-to-understand manner.\nInvest in your future. Enroll today!",
      "target_audience": [
        "Aspiring online entrepreneurs",
        "Engineers without much entrepreneurship experience"
      ]
    },
    {
      "title": "Master Visual Scripting in Unity by Making Advanced Games",
      "url": "https://www.udemy.com/course/master-visual-scripting-in-unity-by-making-advanced-games/",
      "bio": "The Ultimate Guide to Game Development in Unity Visual Scripting - Unity Bolt, Make Games from Scratch (Without Coding!)",
      "objectives": [
        "Learn how to make games without writing code!",
        "Learn Visual Scripting, Shader Graph, UI creation, Game Design, and more!",
        "Learn Unity Visual Scripting from scratch. No prior programming experience is necessary.",
        "Get experience using Unity 2021.1 or later.",
        "Master Visual Scripting, like variables, events, loops, List and Dictionary, and much more...",
        "Get A Solid Understanding of Visual Scripting in Unity",
        "Use Visual Scripting for Building Mobile / Android Games",
        "Learn Visual Scripting With Practical Examples in Unity",
        "Build Real 2D Game With Visual Scripting & Unity",
        "Use Visual Scripting Skills in Unity for Building Mobile (iOS and Android Games)",
        "Learn Unity Bolt the best visual programming tool for Unity",
        "How to create games for beginners in Bolt Unity visual scripting"
      ],
      "course_content": {
        "Course Introduction": [
          "Course Preview",
          "Course Introduction"
        ],
        "Unity Short Introduction": [
          "Unity Hub Introduction",
          "Unity Introduction"
        ],
        "Visual Scripting In Unity": [
          "Visual Scripting Introduction",
          "Visual Scripting vs Coding",
          "Nodes and Fuzzy Finder Overview",
          "Connecting the Flow",
          "Variables Types",
          "Difference Between Embed and Graph Source",
          "Subgraphs (Super Units)",
          "Debugging Graphs and Null Check",
          "Graph Reevaluation and Cache Node",
          "Reduce Graph Size with Control Nodes",
          "Events and Custom Events",
          "Collections And Loops",
          "Script Machine vs State Machine"
        ],
        "Universal win loose panel": [
          "Reusable Panel UI Creation",
          "Reusable Panel Script Machine",
          "Reusable Panel Animation And Export"
        ],
        "Bridge Building Game with Visual Scripting": [
          "Bridge Builder Overview",
          "Starting and Background Creation",
          "Grid Shader with Shader Graph",
          "Bridge Connector Creation",
          "Bridge Bars Creation",
          "Bridge Creation State Machine",
          "Creating Bridge Bars with Connectors",
          "Fixing Position, Rotation and Size",
          "Multiple Bridge Bars at Once",
          "Reusing Bridge Connectors",
          "Fixing Bars Overlapping",
          "Fixing Bars Overlapping Optimization",
          "Clamping Max Length",
          "Creating Physics Joints",
          "Testing Physics",
          "Changing Bar Types",
          "Show Bridge Load Shader",
          "Creating Game Environment",
          "Bridge Budget Options",
          "Budget Slider Colors",
          "Adding Win Loose Panel"
        ],
        "Bridge Building Game With C#": [
          "Bridge Building Game with C# part1",
          "Bridge Building Game with C# part2"
        ]
      },
      "requirements": [
        "Mac or PC capable of running Unity 2021.1 or later.",
        "No previous programming experience is required",
        "A passion and willingness to learn how to program with visual scripting"
      ],
      "description": "Hello And welcome.\nIn this course, you will learn everything you need to know how to use visual scripting (previously known as Bolt) in unity and how to create your own advanced games without writing a single line of code. This course will teach you how Master Visual scripting even if you don't have any previous experience with unity in general.\nLittle about me. Before I become a game developer, I was working as a movie Visual effects artist but later I found Unity 3d engine, which I really liked and I slowly started to switch my focus on game development.\nDuring my career as a game developer, I released a couple of mobile games in Unity for iOS and Android, And I Still like to develop tools so I released a couple of assets in the Unity asset store and I created some Unity courses and video tutorials.\nThe course starts with the introduction of unity for absolute beginners, so if you never used Unity before you can start learning the basics. Then we will start learning the basics of visual scripting (previously known as unity bolt). And slowly we will be discussing more intermediate and advanced stuff, and together we will touch all aspects of visual scripting (previously known as Bolt visual scripting).\nDuring the course, you will learn the difference between writing a code and creating your graph visually. In the end, you will be able to grab C# code from the internet and use it inside your own visual scripting graph. We will finish our course by creating your own Bridge Building game from start to finish, complete with visual scripting (previously known as bolt unity).\nBut even If you get stuck, don't worry, you can check the finished project in the resources or you can always ask me in Q and A section.\nThe visual scripting for unity was previously known as Unity Bolt or bolt unity. Unity Bolt was acquired by Unity and it is extensively developed to provide the best solution for visual programming in unity. Unity bolt or bolt unity or unity visual scripting is the same names for perfect visual programming solution for making games inside unity without coding\n\n\nKey Aspects of the Course:\nUnity basics for absolute beginners\nLearn how to make games without code\nLearn the difference between visual scripting and coding\nLearn how to convert C# code to visual scripting graph\nUnderstand loops, collections, events, and much more...\nLearn how to debug your graphs and fix errors\nUnderstand the difference between script machine and state machine\nLearn to minimize your graphs with the control nodes\nunderstand every variable type inside visual scripting\nLearn almost every aspect of game development\nCreate a bridge-building game from start to finish\nCreate advanced games without coding\nUse Visual Scripting Skills in Unity for Building Mobile (iOS and Android Games)\nGet experience with shader creation in Unity Shader Graph\nGet experience with Unity UI creation\n\n\nWhy learn from me?\nI created this course to share my passion for making games and help others to simplify their work.\nI am trying to find effective and fast methods to solve problems, so I hope you will find some of my techniques and tips, and tricks useful also for you.",
      "target_audience": [
        "Beginners who want to make advanced games without single line of code",
        "Anyone who want to learn Visual scripting in Unity",
        "Anyone interested in learning and exploring the power of Visual Scripting",
        "Complete beginners who are willing to know how to use Unity Visual Scripting",
        "Anyone who wants to Build Games using Unity Visual Scripting",
        "Anyone who likes unity Bolt"
      ]
    },
    {
      "title": "ARKIT & Unity 3D, creating Augmented Reality Apps with C#",
      "url": "https://www.udemy.com/course/arkit-unity-3d-creating-augmented-reality-apps-with-c/",
      "bio": "Learn to code by making your own Augmented Reality First Person Shooter /Survival Game, Mobile Development with Unity 3D",
      "objectives": [
        "Learn C# combined with Unity 3D",
        "Basics about the ARKit Plugin in Unity3D",
        "Learn how object oriented programming works in practice",
        "create a First Person Shooter in Augmented Reality"
      ],
      "course_content": {},
      "requirements": [
        "Mac capable of running Unity 3D",
        "Xcode 9",
        "iPhone 6s or above, running iOS 11 either released or Beta"
      ],
      "description": "Become an Augmented Reality Developer!\nThis Tutorial about Augmented Reality shows you all basics about Unity3D, coding in C# and the ARKit Plugin in less than 3 hours!\nWhy should you learn something about Augmented Reality?\n-Augmented Reality is in it's early stages.\n-There is still much potential to create awesome Applications.\n-The demand for Augmented Reality apps is bigger than ever before\n-Break into a brand new industry expected to be worth $165 billion by 2024\n-The world tracking of Apples ARKit is amazing\nThanks to the powerful GameEngine Unity3D combined with C# it's really easy to create Augmented Reality Apps.\n\nIn the first 30 minutes we will learn all the important basics about the object oriented programming language C# combined with Unity3D.\nThen we will create the main project from scratch! You will learn all the important basics about:\n-ARKit Plugin\n-Raycasting\n-Animation\n-Animator-Controller\n-Audio Sources\n-Unity UI-System\n-Particle System\n-Moving GameObjects\n-Instantiating GameObjects\n-Scene Manager\n-Physics\n-And much more\nSo what are you waiting for? Be one of the first person ever who will create Augmented Reality Apps like this!",
      "target_audience": [
        "To all who are interested in learning how to code Augmented Reality Apps"
      ]
    },
    {
      "title": "Unreal Engine 5 C++ Inventory Systems",
      "url": "https://www.udemy.com/course/unreal-engine-5-inventory-systems/",
      "bio": "Create a multiplayer-ready functional spatial inventory with equippables, stackables, and craftable items!",
      "objectives": [
        "Create and manage inventory systems in Unreal Engine",
        "Code item interaction systems in a robust and scalable way",
        "Code multiplayer inventory and item systems",
        "Create spatial inventory grids with item categories",
        "Implement stackable, consumable, and equippable items"
      ],
      "course_content": {},
      "requirements": [
        "Knowledge of Unreal Engine C++ required",
        "Disk space for Unreal Engine 5 and debugging symbols",
        "Use of Rider IDE (it's free for non-commercial use!)"
      ],
      "description": "In this course, you will learn how to create inventory systems for your games in Unreal Engine 5 using C++ and Blueprints.\nWe will create a spatial inventory with item grids for different categories (Equippable, Consumable, and Craftable) and the ability to switch between grids filled with items. Items can be different sizes, each taking up a different number of squares in the grid, and items can be stackable, allowing for splitting, combining, consuming, and dropping items.\nThis inventory system is architected for scalability, modularity, and uses Unreal Engine C++ best practices. The inventory is coded in its own separate plugin, which can be added to multiple game projects or simply kept in a single project.\nAssets are provided for this course, including:\nAll 3D meshes for items used, including consumable potions, equippable cloaks, masks, and weapons, and craftable foraging materials.\nAll 2D textures for icons, widgets, menus, borders, and messages.\nNiagara effects for picking up items\nThis project uses Unreal Engine 5.5 and works in Unreal Engine 5.6 - you may use the latest version of Unreal Engine for this course!\nFeatures of this course include:\nSpatial inventory grids and the ability to switch between multiple grids in the inventory to house items of different categories (we implement Equippables, Consumables, and Craftables),\nAn Item Fragment system whereby items can be customized by adding modular \"Fragments\" to give them functionality (a well-established software pattern in the games industry). Add a Grid Fragment to make the item capable of taking up multiple squares on the grid - add an Equippable Fragment to make the item equippable, etc.,\nItem tooltip popups showing item attributes and the use of design patterns to make a highly-flexible system where tooltips adapt to an item's fragments to display item information,\nThe ability to move items in a spatial inventory,\nStackable items with stack counts (just add a Stackable Fragment), supporting max stack sizes, and the ability to split, combine, and drop items in the inventory,\nConsumable items, the ability to consume and apply custom behaviors upon item consumption (we will implement potions),\nEquipment with equippable slots, and actually equipping items of different types (we will implement cloaks, masks, and weapons),\nAssets will be provided for this course, including the character, weapons, equipment, potions, and craftables, as well as all UI textures for inventory menu widgets. Though you are free to use your own assets!\nEverything is programmed to work in a multiplayer environment, both Listen Server and Dedicated Servers. It also works in single-player, Standalone games.\nItems are functional - not just affecting what we see in the menus, but also what happens in the game - the system is coded to be flexible, allowing you to program your own functionality when items are consumed/equipped/used, including incorporation with the Gameplay Ability System (GAS).\nMy students have easily incorporated this inventory into their own projects with little effort.\nWe will cover topics from intermediate to advanced Unreal Engine C++. If you have taken my course titled Unreal Engine 5 C++ The Ultimate Game Developer Course or have equivalent knowledge, you are ready for this course!\nYou will also have access to the Druid Mechanics Discord Community, a community I have created for my students, designed to be your most helpful resource when learning. We are going on 35,000 students and climbing! We're all here to help each other out!\nI hope you enjoy this course as much as I did while creating it!\nJump in, and let's make some inventories!",
      "target_audience": [
        "UE5 devs who want to implement inventory systems in their games",
        "Those who want to learn how items are handled in serious games",
        "Those who want to implement equipment systems",
        "Those who need multiplayer solutions to items, inventory, and equipment"
      ]
    },
    {
      "title": "Code Ninja : 10X Your Game Dev Speed",
      "url": "https://www.udemy.com/course/unity-code-ninja/",
      "bio": "7 ways that will help you make games FASTER in Unity",
      "objectives": [
        "Increase your Coding speed",
        "Master Integrated & Custom Snippets",
        "Create your own Utility Classes",
        "Create your Own Component Extension Methods",
        "Learn how you can make a Code Library",
        "Learn the importance of having a Graphics Library",
        "Extend the Unity Editor",
        "And More..."
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Snippets": [
          "Integrated Snippets",
          "Custom Snippets"
        ],
        "Your Custom Libraries": [
          "Utility Classes",
          "Extension Methods",
          "Graphics Library",
          "Assets Library"
        ],
        "Extending the Editor": [
          "Extending the Unity Editor"
        ],
        "Getting Assets": [
          "Graphical Assets",
          "Tools & Systems"
        ],
        "Artificial Intelligence": [
          "ChatGPT"
        ],
        "Additional Resources": [
          "Project Files",
          "A Very Basic Unity Interface Tutorial"
        ],
        "Bonus Section": [
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "No requirement for this course, Take it & Enjoy it"
      ],
      "description": "After many years making games, I have been able to compile a variation of ways to improve my workflow when making games, and you can learn all of them in this course!\n\n\nDon’t judge a course by its length.\n\n\nEven though the course is short, after watching all of the lessons, you will make games way faster!\nRemember, it’s about Saving Time ;)\n\n\nBut wait, why would you like to make games faster in the first place ?\n\n\nI can imagine multiple reasons, and here are some of them\n\n\nYou can spend more time on Game Design\nYou will have more time for Ideation & Polish\nYou can spend more time with your Family & Friends, or do other things you enjoy in Life\nMaybe you are a freelancer, you can charge more per hour as you will accomplish more in less time. Or if you see it from another angle, you will provide the same results in less time. So you need to be paid more. You will also be able to save time to for your clients, which is the most crucial resource.\nIf you work for a studio, you can get promoted to a higher position, experiment more, Test more gameplays and mechanics.\nIf you are a solo indie game dev, you will have more time for other aspects of game dev such as improving your art skills, master sound design, be better at marketing and building an audience\n\n\nOverall, Speed when making games is really important.\n\n\nIf you think this is for you, feel free to start the course today ;)",
      "target_audience": [
        "Anyone craving for Making Games Faster & Save Time"
      ]
    },
    {
      "title": "Learn How to Make Trading Card Game Menus With Unity 3D",
      "url": "https://www.udemy.com/course/learn-how-to-make-trading-card-game-menus-with-unity-3d/",
      "bio": "A full guide on menus and collection management in trading card games with Unity 3D.",
      "objectives": [
        "Create beautiful custom cards and creatures for your game.",
        "Show enlarged previews when you are hovering over a card or a creature.",
        "Enable card rotation and design a custom card back.",
        "Highlight cards that your players can play and creatures that can attack this turn with glows around their border.",
        "2 different ways to drag cards in trading card games: just dragging cards onto the battlefield area to play them, or dragging onto a specific target to cast spell or attack with creatures.",
        "Show targeting gizmo with an arrow and a target icon when attacking with creatures or casting spells.",
        "Create adaptive layouts for your player`s hand and table areas. We are not using pre-determined places for cards. All the creatures and cards will always remain centered.",
        "Make a Hearthsone-styled mana pool with 10 mana crystals. Players start the game with 0 mana and in the start of each turn they will receive 1 mana crystal.",
        "Create framed Hero portraits and round Hero Power buttons.",
        "Create a burning rope that will measure time left until the end of the turn.",
        "Create decks with variable thickness. The more cards your deck contains – the thicker it looks.",
        "Separate Visual and Logical part of your game (aka server – game client).",
        "Create a simple system to manage, edit and create new cards, creatures or Hero classes.",
        "Manage turns in trading card games.",
        "Establish the most basic game mechanics of playing creatures and attacking opponent`s creatures or opponent`s Hero.",
        "Create custom effects for your spells and Hero Powers.",
        "Create diverse creature effects that might be triggered: when the creature enters the battlefield, when the creature dies, when the turn starts or ends or even when certain events occur in the game (like: when your Hero takes damage, draws a card, etc…).",
        "Determine “game over” conditions and show some end game animations or events.",
        "Create a simple computer AI that will control opponent`s Hero."
      ],
      "course_content": {
        "Introduction": [
          "Introduction to the Course",
          "Saved Projects"
        ],
        "Card Collection and Main Menu Layout": [
          "Introduction to Section 2",
          "Storing Cards as ScriptableObject Assets: Part 1",
          "Storing Cards as ScriptableObject Assets: Part 2",
          "The CardCollection class: Part 1",
          "The CardCollection class: Part 2",
          "Making a Menu and Establishing the Scene Layout"
        ],
        "Pack Opening": [
          "Introduction to Section 3",
          "Making the Money and Dust or Spare Parts HUD",
          "The ShopManager Script",
          "Making a Layout of the Pack Opening Screen",
          "Pack Opening Screen Adjustments and Overview of Dragging",
          "Custom Scripts for Pack Dragging and Pack Opening",
          "Prefabs of Creature and Spell Cards from Packs",
          "Connecting Everything in Unity and Testing Pack Opening",
          "Inspecting the PackOpeningArea Script"
        ],
        "Browsing the Card Collection": [
          "Introduction to Section 5",
          "Crafting Screen",
          "Character Selection Screen",
          "HeroInfoPanel and Transmitting Data to the Next Scene",
          "Deck Selection Screen",
          "Scrollable Lists of Decks and Cards in Collection",
          "Scripts that Control the List of Pre-Made Decks",
          "Scripts that Control the List of Cards in Deck",
          "Conclusions"
        ]
      },
      "requirements": [
        "First couple of Sections in this course are very beginner friendly. In these Sections we spend most of the time working in Unity Editor. So anyone can learn how to make and rotate cards, create other visual elements that are used in this game.",
        "In Sections 4-6 we use some advanced scripting techniques to establish all the processes that happen in our game Logic, write AI scripts and so on. So for the final lectures of this course it is best if you have some previous experience with C#. I try to explain everything that I am doing as much as I can.",
        "You should install the latest version of Unity3D to work on this course and open example projects that are provided with this course (to develop this game I used Unity 5.4 beta, so any version of Unity after 5.4 will do)."
      ],
      "description": "This course provides a full guide on trading card game menus. In the video Lectures we cover only the process of making menus, collection browsing, deck building, pack opening, etc… But the battle mechanics part is also included into the Unity project that is provided with the course. So, you`ll have an opportunity to play the game with the cards that you create yourself or even use this application as a foundation for your own trading card game.\nThe material in this course is divided into 5 Sections. Section 1 features a short introduction to the course.\nSince the Unity project that we are developing in this course can be treated as an extension of the course that we have made earlier about card game battle mechanics, in Section 2 we will make a recap of the techniques that we use in both courses to store cards in the project. You will learn about ScriptableObjects and ScriptableObject assets and how you can use them to store cards in your project. We`ll take a look at a very useful script CardCollection.cs that will be used in the project to filter the cards in our collection and get certain sub-sets of cards that satisfy certain criteria. In the last Lecture of Section 2 we`ll do some UI work in Unity and assemble the general layout of our menu scene.\nSection 3 will be entirely dedicated to buying and opening booster packs with cards. It makes sense to make the card pack opening part early in the course because it`s both the most exciting part of the project and at the same time the most isolated from other code. We`ll create a separate screen for the shop / pack opening area and explore all the scripts that make it possible to buy and open card packs. We`ll cover advanced topics like: drag and drop code for the unopened packs, using DOTween to automate movement of unopened packs and cards that we get from packs, displaying hover over effects, generating cards of certain rarity based on customizable probability coefficients. By the end of this Section we`ll have a fully functioning pack opening screen for this project.\nIn Section 4 we will start making the collection screen – the most complicated screen in the menus for any trading card game. Our goal for this Section is to be able to launch the game and see the cards laid out in a grid on the collection screen, be able to use pagination buttons and switch pages in the collection, be able to use all the custom filters (mana, keyword, belonging to one of the character classes) to filter the card collection and display certain sub-sets of our collection.\nIn the final section of this course we will continue exploring our collection screen and cover more advanced objects that are featured on the screen: crafting screen that allows us to craft new cards for one of the in-game currencies, scrollable lists with deck icons and card icons that will be displayed on the side of our deck building screen. We will discuss the topic of transferring data between the scenes and being able to use the deck that your players have pre-configured in the battle scene. In the final lecture of the course I`ll demonstrate how you can set up a game against a simple AI opponent. We saved the project a couple of times while we were making the course and you`ll have these saved projects available for download. I would recommend to download the final project first, check out how it works and start your exploration of this app from the final version. All the art assets that are used to create cards, creatures, hero powers and other game elements are free for commercial use. You can find detailed info on art and scripting assets and links to some other useful resources in the Credits file that you can download with this course (included in the root of the Assets folder in any of the saved projects).",
      "target_audience": [
        "This course is for trading card game enthusiasts and for people who are interested in making card games like Hearthstone and Magic the Gathering. It will help you both build your own trading card game and explore what happens behind the scenes in your favorite trading card games."
      ]
    },
    {
      "title": "Unity Game Development : Build 5 Games With Unity & C#",
      "url": "https://www.udemy.com/course/unity-2d-game-development-by-example/",
      "bio": "Learn Unity Game Development & C# Scripting. Build 5 Complete 2D & 3D Games with Unity & C#.",
      "objectives": [
        "Build 5 Simple Fun Game With Unity",
        "Finish Your First Game in One Hour",
        "Create Animated Game Menu and UI",
        "Create Awesome Visuals using Particle Effects",
        "Learn 2D Features Of Unity",
        "Learn C# From Scratch",
        "Create fully Functional Games",
        "Learn Useful Unity Tips & Tricks"
      ],
      "course_content": {
        "Introduction & Installing Unity 2023": [
          "Introduction To This Course",
          "Installing & Setting Up Unity 6",
          "Creating Your First C# Script in Unity 6",
          "Installing and Setting Up Unity 2023",
          "Installing and Setting Up Unity 2022"
        ],
        "Game 1 - 2D Target Shooting Game in One Hour": [
          "Build A Complete 2D Shooting Game With Unity in 1 Hour"
        ],
        "C# Scripting in Unity - Absolute Beginners Guide": [
          "Let's Get Started With C# in Unity",
          "How a C# Script is Structured in Unity",
          "Understanding Event Functions in Unity C#",
          "Working With Variables in C#",
          "Public and Private Variables in C#",
          "Complete Guide To Update Function in Unity",
          "Basics of Functions in C# & Unity",
          "Returning Values and Passing Parameters to Functions",
          "Checking Conditions with If Else in C#",
          "Various Conditions and Equality Checking",
          "Boolean Variables in C#",
          "Introduction to Arrays in C# & Unity",
          "Diving Deep into Arrays in Unity",
          "For Loops in C# Complete Explanation",
          "Working with While Loops in C#",
          "How To Work With foreach Loops in C#",
          "Check Conditions Using Switch Case in C#"
        ],
        "Game 2 - Save The Bunny": [
          "Setting Up The Game",
          "Setting Up The Player",
          "Creating Player Movement",
          "Restricting Player Movement",
          "Setting Up The Enemy Spikes",
          "Spawning The Enemies",
          "Spawning Enemies from Random Position",
          "Repeatedly Spawning Enemies",
          "Detecting Collisions With The Enemies",
          "Adding Cool Trail Effects",
          "Adding Dust Particle Effects",
          "Checking For GameOver",
          "Keeping Score",
          "Displaying Score on Screen",
          "Creating The GameOver Panel",
          "Creating A Restart Button",
          "Designing The Main Menu",
          "Creating Cool Looking Main Menu Animations",
          "Creating Game Over Panel Animations"
        ],
        "Game 3 - Santa Run Endless Runner Game": [
          "Lets Import The Assets and Start Building Santa Run Game",
          "Setting Up The Game Background",
          "Creating Background Scrolling and The Illusion of Movement",
          "Creating and Moving The Grounds",
          "Setting Up The Player Character",
          "Lets Make The Player Jump",
          "Fixing Player Jump with Ground Check",
          "Adding The Jump Animation",
          "Setting Up The Obstacles in The Game",
          "Adding Movements To The Obstacles",
          "Spawning The Obstacles",
          "Random Obstacle Spawning",
          "Spawning Obstacles with Random Delay",
          "Destroying Obstacles On Collision",
          "Creating Player Death Animation",
          "Stop Spawning The Obstacles",
          "Stop Background Scrolling",
          "Creating Game Over Panel",
          "Adding Functionalities To GameOver Menu Buttons",
          "Designing The Main Menu",
          "Adding Functionalities To The Main Menu",
          "Creating Menu Screen Animations",
          "Creating Snow Falling Effect",
          "Counting and Displaying The Score"
        ],
        "Game 4 - Monster Eats Candy Game": [
          "Lets Setup The Sprites For Using In The Game",
          "Creating The Candies",
          "Coding Player Controller and Controlling The Player",
          "Adding Some Restrictions To Player Movement",
          "Checking If Player Eats Candy",
          "Removing Candies When Out Of Screen",
          "Spawning Random Candy",
          "Spawning Candy at Random Position",
          "Spawning Candies Repeatedly",
          "Checking For Score",
          "Displaying Score On Screen",
          "Creating A Lives Counter To Keep Track of Lives",
          "Showing Available Lives UI",
          "Stopping Candy Spawning On GameOver",
          "Creating Game Over Panel",
          "Creating A Main Menu",
          "Writing Code for The Game Over Menu",
          "Animating The Game Over Panel"
        ],
        "Game 5 : 3D Endless Game with Unity": [
          "Gettting Started and Setting Up",
          "Writing First Code and Controlling the Player",
          "Moving After First Touch",
          "Fall Checking With Raycasting",
          "Smooth Camera Follow",
          "Platforms falling",
          "Platforms Spawning",
          "Random Spawning",
          "Some Small Fixes",
          "Creating Collectibles",
          "Destroying On Collision",
          "Adding Particle Effects",
          "Creating Text Animations",
          "More Animations",
          "Creating GameOver Menu",
          "Coding The UIManager",
          "Keeping Score and Highscore",
          "Creating The GameManager",
          "Finishing The Game",
          "Publishing The Game"
        ],
        "Basics of Android Game Development With Unity": [
          "Detecting Touch Inputs",
          "Raycasting and Destroying Objects on Touch",
          "Detecting Accelerometer Inputs - Part 1",
          "Detecting Accelerometer Inputs - Part 2",
          "Swipe Detection",
          "Creating Screen Resolution Independent UI",
          "Touch Joystick Input Controller"
        ],
        "Source Control With Github Bitbucket and SourceTree": [
          "The Need of Version Control",
          "Creating First Repository",
          "Practical Example With A Real Project",
          "Creating Branches",
          "Pushing Local Repository to Remote"
        ],
        "Basics of Game AI in Unity": [
          "Getting Started With Navigation Mesh",
          "Agent Moving and Avoiding Obstacles",
          "Understanding Navmesh Agent",
          "Moving On Ramp and Narrow Places",
          "Intelligent Agent Moving Upstairs",
          "Intelligent Agent Jumping With Off Mesh",
          "Manually Creating Off Mesh Links"
        ]
      },
      "requirements": [
        "Unity Personal Edition and Visual Studio or Any other Compatible code editor is required to follow along",
        "Basic knowledge of Unity & C# is helpful but not mandatory"
      ],
      "description": "Want to Learn How to build Games by actually building Small , Simple and Fun Games?\nThen this is the perfect course for you.\nAfter Finishing this course You will be able to build 5 Fully functional Games with Unity and C#.\nList Of The Games You Will Build:\n2D Target Shooting Game\nSave The Bunny Game\nSanta Run Endless runner Game\nMonster Candy Eater Game\n3D Endless Game\nI have taught Unity Game Development & C# Scripting to thousands of people on my Youtube Channel: Charger Games. I love teaching complex concepts in a simple way, so even if you have no previous coding experience, no need to worry, I'm gonna teach you everything step by step in the perfect order.\nLearn the basic concepts, tools, and functions that you will need to build fully functional Games with C# and the Unity game engine.\nBuild a strong foundation in Unity Game Development with this course.\nGet Started with Unity's 2D Components\nBuild 5 Fully functional Games with Unity\nLearn Basics of C# Programming\nCreate your first working game in 1 Hour\nLearn to Build a finished game\nCreate your portfolio of Game Projects\nA Powerful Skill at Your Fingertips  Learning the fundamentals of Unity 2D & 3D Game Development puts a powerful and very useful tool at your fingertips. Unity is free, easy to learn, has excellent documentation, and is the game engine used for building games.\nJobs in unity game development are plentiful, and being able to learn C# Scripting along with Unity game development will give you a strong background to more easily build awesome games.\nContent and Overview  Suitable for beginning programmers, through this course of 100+ lectures and 20+ hours of content, you’ll learn all of the Unity 2D Game Development fundamentals and establish a strong understanding of the concept behind Game Programming , Design and Development .\nStarting with the installation of the Unity , Visual Studio , this course will take you through the process of learning game development with unity by building 5 awesome 2D & 3D Game Projects . You will build your first 2D game in 1 hour.\nFor the beginner programmers there's a separate section about C# Scripting, which will teach the fundaments of C# Scripting for game development in Unity.\nWith these basics mastered, the course will take you through building different example games with unity to learn more about the process of creating mobile android games with unity.\nStudents completing the course will have the knowledge to create fully functional Games with Unity and C# or use their C# skills to Build any other useful thing that they want.\nComplete with working files, you’ll be able to work alongside the author as you work through each concept, and will receive a verifiable certificate of completion upon finishing the course.",
      "target_audience": [
        "Anyone who wants to Learn Game Development by building real practical projects",
        "Beginner C# Programmers who are curious about Game Development",
        "Unity & C# Developers willing to Brush up their Skills"
      ]
    },
    {
      "title": "Reinforcement Learning: AI Flight with Unity ML-Agents",
      "url": "https://www.udemy.com/course/ai-flight/",
      "bio": "Teach airplanes to fly with Unity's Reinforcement Learning platform",
      "objectives": [
        "Learn how to install, run, and train neural networks with Unity ML-Agents",
        "Train airplane agents to fly with Reinforcement Learning, specifically PPO",
        "Create a full, playable airplane racing game in Unity with incredibly challenging AI opponents",
        "Integrate trained neural networks in a game that can be built and deployed cross-platform",
        "Utilize Machine Learning at a high level (no need to write training algorithms)",
        "Lots of opportunities to customize the project and make it your own"
      ],
      "course_content": {
        "COURSE UPDATES": [
          "❗❗❗COURSE UPDATE - Unity ML-Agents v1.0",
          "A Note on Newer Versions",
          "1080p Videos"
        ],
        "[v1.0] Unity ML-Agents - Introduction & Setup": [
          "Unity Hub & Anaconda",
          "New Project, Install ML-Agents, & Import Examples",
          "3D Ball Example",
          "Training 3D Ball Example"
        ],
        "[v1.0 & v0.11] Asset Creation in Blender": [
          "Introduction",
          "Important Resources & Assets",
          "Low-Poly Terrain: Setup",
          "Low-Poly Terrain: Subdivide, Triangulate, & Sculpt",
          "Low-Poly Terrain: Sculpt the Racetrack",
          "Low-Poly Rocks: Medium Rock",
          "Low-Poly Rocks: Tall & Flat Rocks",
          "Low-Poly Rocks: Colliders",
          "Low-Poly Rocks: Export",
          "Checkpoint: First Piece",
          "Checkpoint: More Pieces, Collider, & Export",
          "Finish Line Checkpoint",
          "Low-Poly Airplane: Reference Images",
          "Low-Poly Airplane: Body (Part 1)",
          "Low-Poly Airplane: Body (Part 2)",
          "Low-Poly Airplane: Body (Part 3)",
          "Low-Poly Airplane: Wings",
          "Low-Poly Airplane: Horizontal Stabilizer",
          "Low-Poly Airplane: Landing Gear",
          "Low-Poly Airplane: Propeller",
          "Low-Poly Airplane: Export"
        ],
        "[v1.0] Project Setup & ML-Agents Installation": [
          "ML-Agents v1.0 Note",
          "Important Resources & Assets",
          "New Project",
          "Project Clean-up & Install ML-Agents"
        ],
        "[v1.0 & v0.11] Desert Race Path Creation": [
          "Import 3D Meshes",
          "Desert Terrain & Rock Prefabs",
          "[v0.11] Airplane Prefab",
          "[v1.0] Airplane Prefab",
          "Checkpoint Prefabs",
          "Desert Area Prefab",
          "Placing Rocks in the Desert Environment",
          "Complete Rock Placement",
          "Race Path",
          "Complete Race Path",
          "Boundaries"
        ],
        "[v1.0] Aircraft Area": [
          "Variables",
          "Awake() & Start()",
          "ResetAgentPosition()",
          "Race Condition Fix",
          "AircraftArea Prefab Setup",
          "Rotate.cs"
        ],
        "[v1.0] Aircraft Agent & Aircraft Player": [
          "AircraftAgent.cs: Variables",
          "AircraftAgent.cs: Initialize()",
          "AircraftAgent.cs: OnActionReceived()",
          "AircraftAgent.cs: ProcessMovement()",
          "AircraftPlayer.cs: Input System & Variables",
          "AircraftPlayer.cs: Heuristic()",
          "AircraftPlayer.cs: Airplane Prefab Setup",
          "AircraftPlayer: Input Bindings",
          "AircraftPlayer.cs: Follow Camera, DecisionRequester, & Test Flight",
          "AircraftAgent.cs: More Variables",
          "AircraftAgent.cs: Training Logic in Initialize() & OnActionReceived()",
          "AircraftAgent.cs: VectorToNextCheckpoint()",
          "AircraftAgent.cs: GotCheckpoint()",
          "AircraftAgent.cs: OnEpisodeBegin()",
          "AircraftAgent.cs: Freeze() & Thaw()",
          "AircraftAgent.cs: OnTriggerEnter()",
          "AircraftAgent.cs: OnCollisionEnter & ExplosionReset()",
          "AircraftAgent.cs: CollectObservations() & Heuristic()",
          "AircraftAgent: RayPerceptionSensor3D & AircraftAgent Components",
          "AircraftAgent: Behavior Parameters, AircraftAgent, & Explosion"
        ],
        "[v1.0] Training the Aircraft Agents": [
          "New Training Scene",
          "Config Files",
          "Start Training",
          "Tensorboard & Training Progress",
          "Training Results",
          "Introducing Randomness",
          "Race Your ML-Agents"
        ],
        "[v1.0 & v0.11] Game Logic & Menus": [
          "Introduction",
          "GameManager.cs: Enums & StateChangeHandler",
          "GameManager.cs: Accessors & Singleton Logic",
          "GameManager.cs: Level Loading Logic",
          "Main Menu Scene + Layout",
          "Main Menu Content",
          "MainMenuController.cs: Variables & Dropdown Lists",
          "MainMenuController.cs: Interaction Logic",
          "MainMenuController.cs: Hook Up UI, Build Manager, & Game Manager",
          "Create RaceManager & Other UI Scripts",
          "RaceManager.cs: Variables & Hook Ups",
          "RaceManager.cs: More Variables & Accessors",
          "RaceManager.cs: Awake() & Start()",
          "RaceManager.cs: Start() Continued",
          "RaceManager.cs: OnStateChange()",
          "RaceManager.cs: StartRace()",
          "RaceManager.cs: PauseInputPerformed()",
          "RaceManager.cs: FixedUpdate()",
          "RaceManager.cs: PlaceComparer()",
          "RaceManager.cs: GetAgentCheckpoint()",
          "RaceManager.cs: OnDestroy(), GetAgentLap(), GetAgentPlace()",
          "RaceManager.cs: GetAgentTime()",
          "Heads Up Display UI",
          "HUD Checkpoint Indicator",
          "HUDController.cs: Variables",
          "HUDController.cs: UI Update Functions",
          "HUDController.cs: Hook Up to UI",
          "Pause Menu",
          "PauseMenuController.cs",
          "Countdown UI & CountdownUIController.cs",
          "Gameover Screen & GameoverUI.cs",
          "Play Testing",
          "Pause Button Bugfix",
          "RaceManager Prefab",
          "Adding Randomness",
          "Post Processing",
          "Making the Main Menu More Interesting",
          "Creating a Snow Scene",
          "Flying in Snow",
          "Adding Water, Rocks, & Updating the Race Path",
          "Complete Snow Level & Add Snow to Levels List",
          "Fixing Snow Level Loading Bug",
          "Build & Play Complete Game",
          "Section Quiz"
        ]
      },
      "requirements": [
        "Intermediate programming skills (Unity uses C#)",
        "A computer that can run Unity 2019.2 or above",
        "Basic Unity skills (how to navigate and use the interface)",
        "Optional: Basic Blender skills (how to navigate and use the interface)",
        "Optional: Prior Machine Learning experience - It will help with understanding, but isn't necessary"
      ],
      "description": "Interested in the intersection of video games and artificial intelligence? If so, you will love Unity ML-Agents.\nReinforcement Learning with ML-Agents is naturally more intuitive than other machine learning approaches because you can watch your neural network learn in a real-time 3d environment based on rewards for good behavior. It's more fun because you can easily apply it to your own video game ideas rather than working with simplified example problems in a library like OpenAI Gym.\nIn this course, we will create a complete game with incredibly challenging AI opponents.\nWe'll start with an introduction to ML-Agents, including how to use and train the example content.\nThen, we'll use Blender to make custom assets for our game (you can skip that part if you just want to code).\nNext, we'll create a full environment for the airplane agents and train them to fly through checkpoints without crashing into obstacles.\nFinally, we'll take our trained agents and build a full game around them that you can play, including menus for level and difficulty selection.\nImportant note 1: We DO NOT cover the foundations of deep learning or reinforcement learning in this course. We will focus on how to use ML-Agents, which abstracts the hard stuff and allows us to focus on building our training environment and crafting rewards.\nImportant note 2: While the course was originally recorded with ML-Agents version 0.11, we have updated it for version 1.0.\nAs you work through the course, you'll have plenty of opportunities to customize it and make it your own. At the end, you'll have a complete game that you can share with friends, add to your portfolio, or sell on a game marketplace.",
      "target_audience": [
        "Intermediate software developers with an interest in AI in the Unity3d Game Engine",
        "Developers that want to use Reinforcement Learning, but don't need to know the low level details",
        "Game developers interested in adding neural network AI to their games"
      ]
    },
    {
      "title": "Ultimate Game Development and Design with Unity 2020",
      "url": "https://www.udemy.com/course/indie-unity-game-dev/",
      "bio": "Become an Indie Developer! Programming, art and animation all in one",
      "objectives": [
        "Game development with Unity 2020 for PC, iOS, Android etc.",
        "C# programming guide from beginner to advanced",
        "Inkscape to create 2D vectorized game characters and items",
        "Photopea art for animation in your games",
        "Art and animation essentials and asset creation",
        "Indie development workflow to create games fully from scratch"
      ],
      "course_content": {
        "Intro, Prep and Install": [
          "Introduction Video",
          "Community and Discord",
          "Get organized for class",
          "Preparation and Installation"
        ],
        "Beginner fun with blocks": [
          "Basic basics",
          "Fun with Variables",
          "Combining Variables",
          "if statements",
          "Hacker skillz test number One",
          "Public Variables",
          "Vector 3's and stuff",
          "Moving a GameObject",
          "Homework Review"
        ],
        "Intro Lessons: Learn Unity and C# Programming": [
          "Unity basics and project creation",
          "Make a table and Material",
          "Review and test prep",
          "Your first Unity quiz!",
          "Visual Studio and C# basics",
          "Movement through code",
          "WASD Movement",
          "Camera Follow and Animation",
          "Motivational talk",
          "Variables",
          "Code Cleanup Time!",
          "Course review Unit 1.0.0.4.5.1.2...",
          "Section One Homework",
          "Review - Homework for Section One",
          "Congratulations! Now, onto the next section!"
        ],
        "More fun with Blocks": [
          "Collisions, Timers and Triggers Intro",
          "Setting the Scene",
          "Moving our Vampire",
          "OnCollisionEnter() and how it works",
          "Fixing our Collisions",
          "Switch Statements",
          "Arrays",
          "Better code"
        ],
        "2.5D Platformer": [
          "Intro to our platformer",
          "Basic game setup",
          "Intro to Rigidbody movement",
          "Rigidbody Movement",
          "Rigidbody homework session",
          "GetComponent",
          "Rigidbody Questions",
          "Jump and Variables",
          "Velocity Restrictions",
          "Code review",
          "Fixing our hops",
          "Finalizing Movement and Jumping",
          "Making Coins",
          "Collecting coins",
          "Prefab and homework",
          "Player Death",
          "Losing your coins (Script Comms)",
          "Creating levels homework",
          "Building our project levels",
          "LoadScene with SceneManager",
          "LoadNextScene",
          "Almost there!",
          "Main Menu creation (Buttons, Canvas)",
          "Community Feedback"
        ],
        "Top Down zombie shooter 3D": [
          "Temporary intro video to this section",
          "Character Controller",
          "Raycasting a point",
          "Shooting Bullets (Instantiate)",
          "Destroy(GameObject);",
          "Making our Enemy (Navmesh and follow)",
          "Zombie Quiz 1",
          "Kenney assets",
          "Destroy our Enemy",
          "For loops and spawning",
          "Waves and wavecount",
          "Random Spawn Location",
          "Enemy Health",
          "Floating Text Animation",
          "Floating Text ToString",
          "Quick refactoring",
          "Death animation",
          "Walking Animation Homework review",
          "Enemy Knockback",
          "AudioSource and playing clips",
          "Player health and death",
          "Death particles (Explosion!)"
        ],
        "Animation in Unity": [
          "Intro to Animation",
          "Make our Robot",
          "Sprite and Package Manager",
          "Creating Bones",
          "Renaming and Depth (Layering)",
          "Putting our character together",
          "Inverse Kinematics (Easy Limb Movement)",
          "Idle animation (Do robots breathe?)",
          "Animation Homework",
          "Free Assets for your homework",
          "Running Animation",
          "Fist pump",
          "Change animations with key presses",
          "Sideways movement with animation",
          "Sprite sheet animation",
          "Breaking up a Sprite Sheet"
        ],
        "Inkscape - 2D asset creation": [
          "Inkscape Intro",
          "Basic tools",
          "Cut it out!",
          "Shading with Difference",
          "Popsicle!",
          "Save your file!",
          "Two more fast popsicles",
          "One fast monster",
          "Pre-Character design chat",
          "Character creation (20min)",
          "Have a heart"
        ],
        "Photopea - 2D asset creation": [
          "Download and Install Photopea",
          "Basics and Layers",
          "Homework Review (primitive shapes and layers)",
          "2D Character Design",
          "Merge and Export for Unity"
        ],
        "Tutorial bucket": [
          "Parent the Platform"
        ]
      },
      "requirements": [
        "PC to run Unity 2020, three button mouse helps to navigate most art programs",
        "Basic computer knowledge"
      ],
      "description": "Become an Indie developer. In this Ultimate course we cover it all! Unity as our Game Development Platform, Visual Studio for c# programming to bring the mechanics into our games, Photopea for handdrawn assets and Inkscape for professional looking 2D vector art! You'll learn to do it all yourself, from scratch! Start making games, today.",
      "target_audience": [
        "Game enthusiasts interested in a new career",
        "Beginner level Unity programmers",
        "Novice developers moving towards Unity for game creation",
        "Curious about game development with little to no knowledge on the subject"
      ]
    },
    {
      "title": "Unity UI Toolkit",
      "url": "https://www.udemy.com/course/unity-ui-toolkit/",
      "bio": "Build UI common across all games using an HTML inspired markup language & stylesheets",
      "objectives": [
        "How to build UI using the UI Toolkit package",
        "How to implement a save system using ScriptableObjects",
        "How to manage scenes using the Addressables package",
        "How to implement a UI to configure visual and audio settings"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "UI Toolkit Overview"
        ],
        "Basics": [
          "Unity 2021.2 Is Now Available",
          "Download Unity",
          "Download Rider",
          "Project Setup",
          "Hello World",
          "Executing Code",
          "Custom Control",
          "Import Package"
        ],
        "USS Styles": [
          "Display",
          "Position",
          "Flex",
          "Align",
          "Size + Padding & Margin",
          "Text + Background + Slice",
          "Border+ Cursor"
        ],
        "HUD": [
          "Health Bar",
          "Hearts"
        ],
        "Main Menu": [
          "UI",
          "Quit Game",
          "Scene Management",
          "Start New Game",
          "Continue Game",
          "Quit Game Confirmation Modal"
        ],
        "Pause Menu": [
          "Input System",
          "Pause Menu",
          "Pause Menu Main Menu Button",
          "Pause Menu Styles"
        ],
        "Settings Menu": [
          "Open & Close The Settings UI",
          "Audio Source & Audio Mixer",
          "Audio Settings",
          "Save Audio Settings",
          "Visual Settings",
          "Save Visual Settings",
          "Settings Styles",
          "In Game Settings"
        ],
        "Loading Screen": [
          "Remote Catalog",
          "Loading Screen Styles",
          "Loading Screen Implementation"
        ],
        "Editor": [
          "PropertyDrawer & PropertyAttributes",
          "PropertyDrawer & Custom Class",
          "CustomEditor & List",
          "Editor Window"
        ]
      },
      "requirements": [
        "In depth knowledge of Unity",
        "A solid understanding of C#"
      ],
      "description": "In this course, we will design and implement user interfaces that are common across all games, using the Unity UI Toolkit package. The UI Toolkit makes it easier for people with a web developer background to create user interfaces in Unity.\nWho is this course for?\nThis is an advanced course designed for those who already have a fundamental grasp of Unity, and want to learn how to add user interfaces to their game using SOLID design principles.\nAre there any course requirements?\nA solid understanding of C#\nPrevious experience using Unity\nWhat you will learn:\nHow to work with Unity's new UI Toolkit and UI Builder\nHow to implement a save system using ScriptableObjects\nHow to manage scenes using ScriptableObjects\nHow to use Unity's Addressable Asset System\nHow to create custom controls\nHow to create a loading screen that displays the progress of assets being downloaded from Google's Cloud Platform\nHow to design a main menu\nHow to implement a health bar\nHow to write code that's efficient and modular\nHow to create a settings screen that can be used to adjust the game’s volume and resolution\nHow to implement a pause menu that pauses the game as long as it remains open\nHow to make use of USS properties\nHow to create responsive user interfaces that adjust to various screen sizes\nIf all this sounds appealing to you, please join me, and I’ll see you inside the course.",
      "target_audience": [
        "Indie game developers",
        "Programmers"
      ]
    },
    {
      "title": "Learn To Create A Minigolf Game In Unity & C#",
      "url": "https://www.udemy.com/course/unity-minigolf/",
      "bio": "Game development made easy. Learn C# using Unity and create your own fun and friendly golf game!",
      "objectives": [
        "Learn C#, a modern versatile programming language",
        "Understand the capabilities of 3D development in Unity",
        "Develop strong and transferrable problem solving skills",
        "Gain an understanding of the game development process",
        "Learn how object oriented programming works in practice",
        "Learn to create a fun to play game"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Project Assets"
        ],
        "Getting Started": [
          "Getting The Project Set Up",
          "Setting Up The Test Scene",
          "Adding The Golf Ball"
        ],
        "The Golf Ball": [
          "Moving The Ball",
          "A Better Looking Ball",
          "Stopping The Ball",
          "Slopes & Stopping"
        ],
        "Camera Control": [
          "Making The Camera Follow",
          "Setting up Rotation",
          "Applying Rotation to Our Camera",
          "Handling Vertical Rotation",
          "Controlling The Camera With The Mouse",
          "Using Both Methods",
          "Firing In The Camera's Direction",
          "Adding An Aim Indicator"
        ],
        "Hitting The Ball": [
          "Controlling The Shot",
          "Preventing Shots While Moving",
          "Picking Shot Power",
          "Setting Up Shot Power UI",
          "Controlling Shot UI",
          "Resetting Shot Power"
        ],
        "Get In The Hole!": [
          "Setting Up A Hole",
          "Detecting The Cup",
          "Preventing Shots In The Cup"
        ],
        "Keeping Score": [
          "Tracking Shots Taken",
          "Displaying Shots Taken",
          "CHALLENGE - Adding Par"
        ],
        "Getting Results": [
          "Setting Up The Results Screen",
          "Displaying The Result",
          "Delaying The Result",
          "Showing Text Results",
          "Play Again",
          "Preventing Camera Movement",
          "In Hole Effects",
          "Bugfix: Low Power Shots"
        ],
        "Out Of Bounds": [
          "Detecting Out Of Bounds",
          "Resetting Position",
          "Adding An Out Of Bounds Shot",
          "CHALLENGE - Out Of Bounds Message"
        ],
        "Making Levels": [
          "Making A Level Kit",
          "Setting Up A New Hole",
          "CHALLENGE - Making More Holes",
          "Windmill Spinner"
        ]
      },
      "requirements": [
        "Mac or PC capable of running Unity 3D",
        "A copy of Unity 2023.2 or newer"
      ],
      "description": "Learn how to create and program your very own fun and friendly golf game using Unity, an industry-standard game development program used by large gaming studios and indie developers across the world.\nIn this course you won’t just be learning programming concepts, but tying these concepts to real game development uses. You will have access to a course forum where you can discuss the topics covered in the course as well as the next steps to take once the course is complete.\nThis course has been designed to be easily understandable to everyone, so whether you’re a complete beginner, an artist looking to expand their game development range or a programmer interested in understanding game design, this course will help you gain a greater understanding of development.\nAt the end of this course you will have developed the ability to understand such game elements as:\nHitting The Ball\nAiming And Camera Control\nGoing Out Of Bounds\nFull Golf Scoring System\nAudio Systems\nDisplaying A Scorecard\nSwitching Between Multiple Courses\nSystems To Make Level Creation Easier\nAnd much more...\nThe course also includes a complete version of the project to use for your own reference to ensure everything in your game works as it should!\n\n\nStart learning today and let me help you become a game developer!",
      "target_audience": [
        "Anyone who wants to make their own golf games",
        "People who want to create and publish their own games",
        "Complete beginners with an interest in learning game development",
        "Developers who want to re-skill across to game development",
        "People interested in working in the game development industry",
        "Competent and confident with using a computer"
      ]
    },
    {
      "title": "GameMaker 2D RPG: Craft Your Adventure from Code to Combat",
      "url": "https://www.udemy.com/course/gamemaker-rpg/",
      "bio": "Master GameMaker: From coding fundamentals and sprite art to AI, combat, UI design and more in your own RPG",
      "objectives": [
        "Master the fundamentals of GameMaker Studios 2's coding language (GML) for dynamic game development.",
        "Gain a solid understanding of GameMaker’s Sprite Editor to bring your characters and worlds to life.",
        "Learn the process of importing sprite sheets effectively to enhance the visual appeal of your game.",
        "Develop skills in creating fluid player movement that enriches the gaming experience.",
        "Discover techniques for basic object animation and sprite importing to animate your game world.",
        "Implement simple enemy A.I. and combat mechanics, making your game challenging and engaging.",
        "Design intuitive user interfaces (UI) and pausing systems that ensure a seamless player interaction.",
        "Translate your game ideas into playable realities, from concept to completion, with practical, step-by-step guidance."
      ],
      "course_content": {
        "Introduction & Setup": [
          "Welcome to the Course",
          "Download Gamemaker",
          "Exploring the Editor",
          "Community & Support",
          "Accessing Our Projects"
        ],
        "Gamemaker Fundamentals": [
          "Section Intro - Gamemaker Fundamentals",
          "Making Your First Sprite",
          "What Are Objects?",
          "Your First Line Of Code",
          "Setting Up Our Player",
          "Creating Your First Room",
          "Import Sprites & Assets"
        ],
        "Player Movement": [
          "Section Intro - Player Movement",
          "Moving Our Player",
          "Animating Objects",
          "Creating Collisions",
          "Implementing Sprinting",
          "Adding Dodge Rolling",
          "Stamina & Exhaustion"
        ],
        "Combat & Enemies": [
          "Section Intro - Combat & Enemies",
          "Creating Attacks",
          "Attacking Animation",
          "Designing A Health System",
          "Damage & Death",
          "Enemy Creation: Bats",
          "Enemy Creation: Slimes",
          "Enemy Collisions",
          "Enemy Customization",
          "Attacking Enemies"
        ],
        "Interactions": [
          "Section Intro - Interactions",
          "Creating Depth",
          "Items & Inventories",
          "Treasure Chests & Loot",
          "Using Items & Doors"
        ],
        "Stages": [
          "Section Intro - Stages",
          "Rooms & Transitions",
          "Stat Persistence",
          "Setting Up Tilesets",
          "Decorating Your Levels"
        ],
        "UI & Menus": [
          "Section Intro - UI & Menus",
          "Adding Custom Fonts",
          "Dialogue & Signs",
          "Creating a Pause Screen",
          "Exporting Your Games!"
        ]
      },
      "requirements": [
        "While this course is a beginner friendly, a basic understanding of coding would be helpful. But mainly you just need a passion to learn!"
      ],
      "description": "Ever dreamt of creating your own RPG and mastering GameMaker?\nWelcome to our GameMaker Top-down 2D RPG course, where you’ll unlock the full potential of GameMaker Studios 2.\nDive deep into the world of GML (GameMaker Language), master the Sprite Editor, and become a sprite sheet importing wizard. But it’s not just about coding—it’s about bringing your visions to life.\nYou’ll learn to create fluid player movement, animate objects, and import sprites with ease. Tackle enemy AI and combat, turning complex challenges into captivating quests. Plus, we'll guide you through designing intuitive UI and pausing systems to ensure your game is as enjoyable to navigate as it is to play.\nThis course is perfectly tailored for beginners. If you’ve sketched out game ideas in your notebooks, wondering how to breathe life into them, this is your moment. All you need is a basic understanding of coding and a boundless passion for game development.\nAdvanced developers looking to publish on Steam or consoles will find invaluable insights too. Your instructor, Reece, has walked this path, launching a successful commercial 2D pixel game. Learn from someone who’s already turned their dream into reality!\nEmbark on this journey not just to learn, but to create. Turn your fantastic ideas into playable realities. It'll be challenging, enlightening, and, above all, a bunch of fun. Let’s build something extraordinary together.\nWhy us? Because we make the daunting doable. From crafting user-friendly UI and pausing systems to creating worlds players will never want to leave, we’re your cheat code to game development.\nYou’ll get full lifetime access for a single one-off fee. The creators are qualified and experienced with modelling and coding, so are able to explain complex concepts clearly, as well as entertain along the way.\nAnd you’ll get access to our active Q&A where our Instructors, Teaching Assistants and Community are ready to help answer your questions and cheer on your success.\nReady to start your epic RPG coding adventure? Join us now and begin building your dream game in GameMaker today!",
      "target_audience": [
        "If you're new to game development, or simply new to GameMaker, then this course is a great place to start!",
        "If you're an advanced developer looking to publish on Steam or consoles, you'll find invaluable insights"
      ]
    },
    {
      "title": "Publish Games on Android, iTunes, and Google Play with UE4",
      "url": "https://www.udemy.com/course/3dmotive-publish-games-on-android-itunes-and-google-play-with-ue4/",
      "bio": "Understand the Complete Process to Publish Games and Apps with UE4!",
      "objectives": [
        "How to package your Unreal game for iOS and Android",
        "How to set up your game on Google Play",
        "How to set up you game on Apple iTunes Connect",
        "Learn to work with common issues in getting your game working on mobile"
      ],
      "course_content": {
        "Introduction to Publishing Games and Apps with Unreal 4": [
          "Download Course Files Here!",
          "Introduction to the Course",
          "Engine Limits for Mobile",
          "Setting Up For Development On Android",
          "Setting Up For Shipping On Android",
          "Setting Up For In-App Purchases",
          "Summary Of Setting Up For Android",
          "Developing for IOS",
          "Setting Up Mobile Provisions",
          "Uploading to Itunes Connect",
          "Conclusion and Course Wrapup",
          "Bonus Lecture: Further Learning with 3dmotive"
        ]
      },
      "requirements": [
        "Unreal Engine 4.11 or Higher for Android",
        "Unreal Engine 4.12 or Higher for iOS"
      ],
      "description": "This lesson summarizes all that I have learned from my experience in publishing our first mobile game so your experience in making your own mobile game will go more smoothly. In this lesson, I’ll show you some of the issues I had building a game on mobile. We will discuss things like limitations in joint count, polygon count, and shader complexity. Then we will go through the process of setting up Unreal for developing for Android. We’ll show how to install the correct Android SDK for Unreal and how to move from development to deployment. We’ll upload our game to the Google Play store and set up things like achievements, leaderboard, and in-app purchases. From there we’ll port our project over to the Mac using Mac-In-Cloud, get our mobile provisioning profiles from the Apple Developer site, and upload our game to iTunes Connect.\nMore about the Instructor:\nChad Morgan started his career at LucasArts where, as a newbie to the industry, was fortunate enough to work with some very talented mentors who taught him how to use Maya. Ever since then, Chad has been trying to pay it forward by sharing what he has learned, first by giving lectures at Autodesk Master Classes, then publishing an article in #d world Magazine, posting tutorials on YouTube, and finally teaming up with 3dmotive. Chad Morgan currently lives in Lake Forest, CA with his wife Carol and his son Xander.",
      "target_audience": [
        "Anyone who is interested in making mobile games with Unreal Engine 4"
      ]
    },
    {
      "title": "Honouree's Unreal Engine Quick Start",
      "url": "https://www.udemy.com/course/unreal-engine-quick-start-from-scratch/",
      "bio": "Learn Unreal Engine Game Development",
      "objectives": [
        "Describe Unreal Engine and its advantages",
        "Illustrate how to use Unreal Engine",
        "Combine the different features of Unreal Engine",
        "Develop a game using Unreal Engine"
      ],
      "course_content": {
        "Introduction": [
          "Opening",
          "About Unreal Engine",
          "Advantages of Using Unreal Engine",
          "System Requirements"
        ],
        "Download, Install, and Run": [
          "Installing Unreal Engine",
          "Setting Up Visual Studio for Unreal Engine",
          "Content Browser UI"
        ],
        "C++ Programming and Blueprints": [
          "Create a New Project",
          "Programming Quick Start",
          "Level Designer Quick Start",
          "Blueprints Quick Start"
        ],
        "Artificial Intelligence": [
          "Behavior Tree Quick Start",
          "Environment Query System Quick Start"
        ],
        "Game Networking": [
          "Client-Server Model",
          "Networking Overview",
          "Multiplayer Programming Quick Start",
          "Closing"
        ],
        "Bonus Content": [
          "Landscape Quick Start"
        ]
      },
      "requirements": [
        "None"
      ],
      "description": "Hi to my valued students, welcome to my Unreal Engine Quick Start online course. In this course, you will learn how to use Unreal Engine by following easy-to-understand step-by-step tutorial videos to create a full yet simple video game.\nNEW BONUS Video Content: Landscape Quick Start\nLearn and Master Game Development Quickly Using Unreal Engine in this Comprehensive Course\n· Familiarize the User Interface (UI)\n· Build Level Design\n· Use C++ programming language or the state-of-the-art Blueprints\n· Construct Behavior Tree\n· Create Environment Query System\n· Learn Multiplayer Programming\nQuickly Develop Games using Unreal Engine\nThe course topic is essential in every Unreal Engine game development. The purpose is to familiarize with the commonly used features in Unreal Engine. All levels from the beginners up to the more advanced game developers can benefit form this. This course is in chronological order, cohesive, and comprehensive which is very different from the other courses out there. Being knowledgeable in this course will get you the different types of jobs such as game developer and game designer. Every game developer who wants to try Unreal Engine and understand it quickly has to start with this course.\nI designed this Unreal Engine game development course to be easily understood and followed by everyone.\nAt the end of this course, you will be able to build a video game using Unreal Engine.\nKeep learning.\nI have added a bonus video content about Landscape Quick Start, check it out!",
      "target_audience": [
        "Unreal Engine developers"
      ]
    },
    {
      "title": "Unity 3D Make A Complete Racing Game",
      "url": "https://www.udemy.com/course/unity-3d-make-a-complete-racing-game/",
      "bio": "How to Build a full car racing game",
      "objectives": [
        "Students will Learn Unity Game engine and C# by making a complete racing game."
      ],
      "course_content": {
        "Game Basic setup": [
          "Installing Unity",
          "Vehicle Tools",
          "Standard Assets",
          "Skyboxes",
          "Replacing Sky Car",
          "Camera Script",
          "Stting Up Ai Car"
        ],
        "Developing Racing Elements": [
          "Checkpoints System",
          "Checkpoints Script",
          "Testing Checkpoints",
          "Showing Warning on missing checkpoint",
          "Fixing The Bug",
          "Resetting Ai Car",
          "Calculating Car Positions",
          "Car Positions Text",
          "Stopping Player Car",
          "Stopping Ai Car",
          "Correcting Position Calculation",
          "Showing Final Position Of The Car",
          "Pausing Game"
        ],
        "Main Menu and Options Scene": [
          "Main Menu",
          "Choose Car Scene",
          "Script For Selecting Car",
          "Loading Different Scenes",
          "Playing With The Selected Car",
          "Making Options Scenes",
          "Changing Number Of Opponents"
        ],
        "Virtual Currency to Buy Cars": [
          "Making Virtual Money System",
          "Playerprefs",
          "Displaying Earned Coins",
          "Setting Scene To Buy The Car",
          "Buying Cars",
          "Removing Some Bugs"
        ],
        "Gaming Tracks and Laps": [
          "Selecting track",
          "Playing With Selected Track",
          "Choosing No Of Laps"
        ]
      },
      "requirements": [
        "3D Game Development"
      ],
      "description": "Learn Unity Game engine and C# by making a complete racing game. What can be more fun way of learning programming by making your own racing game? In this course we will start from scratch and at the end we will have a complete racing game developed. We will develop AI which will compete with players. You will learn how to make a virtual currency system in your game to buy and unlock cars. You will also learn how to implement unity ads in your game. We will implement reward ads which player will be able to watch to earn in game virtual currency. That is not all, there is lot more to learn in this course.\n\n\n8 Gamedev & Unity Essential Beginner Tips!\n\n\n1. Don’t reinvent the wheel, use the built-in engine tools\n\n\nWhen working on any engine, as Unity or Unreal Engine, some developers, mainly coming from a computer science field, can have a tendency to head down and start working on huge algorithms or structures without knowing if they already exist in the engine.\n\n\n2. Google is your friend, documentation too\n\n\nOnce you start your game production up, you will encounter problems and lack experience in many things. When you do, your first reflex should be to look into the documentation.\n\n\n3. Share your experience with others\n\n\nAnother great source of help and inspiration is of course other creatives, from your surroundings or on the internet. Indeed, game development as many other activities can take so many forms and projects that you’ll always have something to learn.\n\n\n4. Do Game Jams\n\n\nGame jams’ process isn’t classic game development but that’s all its force. Indeed, as it takes place during a really short and fixed period of time, you must prototype, think and decide quickly.\n\n\n5. Constantly re-evaluate your work\n\n\nAlways remember to re-evaluate and criticize what your have created! With a fresh eye you can analyse your previous work, observe its forces and flaws, and improve it based on your new knowledge.\n\n\n6. Be organized and rigorous\n\n\nSome people have an organized nature, and others not, but you must be rigorous and organized, otherwise you (or your team) may encounter trouble down the road.\n\n\n7. Use versioning tools\n\n\nOnce you’ve settled down on your hierarchy and you’re ready to work, you should use a versioning tool to easily merge everyone’s work.\n\n\n8. Plugins can save your life\n\n\nLast but not least, use plugins! Especially when working on Unity, search in the Asset Store what plugins may be useful or even save your life!",
      "target_audience": [
        "Unity Game developers"
      ]
    },
    {
      "title": "Learn To Program Tic-Tac-Toe with C# and Visual Studio",
      "url": "https://www.udemy.com/course/learn-to-program-tic-tac-toe-with-csharp-and-visual-studio/",
      "bio": "Build a complete desktop game in Winforms using Visual studio and C#.NET on Windows!",
      "objectives": [
        "Learn the basics of building a WinForms Application on Windows using C#",
        "Build a fully functional Tic Tac To Game as a Windows Application in C#",
        "Learn how to build game logic and develop simple games"
      ],
      "course_content": {},
      "requirements": [
        "Installation of Visual Studio (Recommended: Free Community Edition 2015 or 2017 or any other version)",
        "Understanding of Windows environment and applications",
        "MUST HAVE Basic knowledge of C# language like writing functions, if conditions and loops",
        "MUST HAVE Basic Familiarity with .NET Framework and Winforms"
      ],
      "description": "LEARN HOW TO QUICKLY BUILD A TIC-TAC-TOE GAME ON WINDOWS USING VISUAL C# and WinForms\nAre you curious to learn what it takes to build a game with Visual C# on Windows?\n\nIf you say yes then I am hoping you will find this course as exciting as it is informational.\nWHAT YOU ARE GOING TO LEARN:\nThe techniques  you need to build a complete Tic Tac Toe game with Visual C# on Windows\nUnderstand how to use WinForms and how to create desktop applications using C#\nHow to prompt the user for messages and how to use MessageBox API\nHow to load images and display images using WinForms\nYou have 30-day money back guarantee from Udemy, so there is nothing to lose! I made my best efforts to provide high quality content and to make this both useful and fun to watch.\n\nLet’s get started today! Enroll now!\nWHAT'S IN THE COURSE?\nOver 10 lectures of video content\nComplete Tic-Tac-Toe Project in C# on Windows\nUnderstand how to write efficient C# code\nLearn how Windows applications work\nWHAT'S NOT IN THE COURSE?\nThis course DOES NOT teach AI and it is only a basic game for two players. You won't learn how to make the computer as one of the players as part of this course.\nCOURSE REQUIREMENTS:\nBasic knowledge of C# (or any similar language like C/C++, Java....etc)\nBasic understanding of loops, functions, variables and if conditions...\nWindows 7 or newer\nVisual Studio installation – Visual Studio 2015 Community Edition (Recommended) or Newer\nENROLL TODAY TO LEARN HOW TO BUILD YOUR OWN TIC-TAC-TOE!",
      "target_audience": [
        "This course is an easy step by step instructions to build a simple Windows application in C#",
        "Anyone with some basic knowledge on Programming"
      ]
    },
    {
      "title": "Creating 2d games in Unity",
      "url": "https://www.udemy.com/course/3dmotive-creating-2d-games-in-unity/",
      "bio": "Learn to create a 2D Shooting Gallery game with the Unity Game Engine from scratch!",
      "objectives": [
        "Learn the basics of building a 2d shooting game in Unity",
        "Learn the methods to create a custom 2d style game, and apply them to your own"
      ],
      "course_content": {
        "Overview and the UI": [
          "Download Course Files Here!",
          "Introduction",
          "Project Overview",
          "Configuring the Interface",
          "Setting Game Tab Resolution",
          "Orthographic Cameras",
          "Pixel Coordinates",
          "Generating Planes",
          "Draw Calls and Batching",
          "Customizing the Unity Interface"
        ],
        "Building our custom game!": [
          "Moving Forward with ScriptableWizard",
          "Configuring 2D Textures for Atlasing",
          "Automating Texture Configuration",
          "Generating Atlas Textures",
          "Recording UV Data",
          "Creating the Final Atlas Texture",
          "Editing UVs"
        ],
        "Coding, Scripting, and bringing it all together": [
          "Starting the Shooting Gallery",
          "Coding the Mouse Cursor",
          "Creating a Game Manager",
          "Checking for a Win Condition",
          "Creating Moving Enemies",
          "Bringing it all Together",
          "Bonus Lecture: Further Learning with 3dmotive"
        ]
      },
      "requirements": [
        "A free copy of the Unity game engine"
      ],
      "description": "In this tutorial, instructor Alan Thorn takes us through the process of creating a 2D Shooting Gallery game with the Unity Game Engine. You'll learn the ins and outs of creating your interface, building 2d targets, the scripting and coding needed to bring it all together, and much more. At the end of this course, you'll be on your way to creating your own 2d games inside of Unity!In this tutorial series, instructor Alan Thorn takes us through the process of creating a 2D Shooting Gallery game with the Unity Game Engine.\n(Students - please look under Section 1 / Lecture 1 downloads for the source files associated with the lesson.)\nMore about the Instructor:\nAlan Thorn is a game developer, author and educator with 15 years industry experience. He makes games for PC desktop, Mobile and VR. He founded 'Wax Lyrical Games' and created the award-winning game 'Baron Wittard: Nemesis of Ragnarok', working as designer, programmer and artist. He has written sixteen technical books on game development and presented ten video training courses, covering game-play programming, Unity development, and 3D modelling. He has worked in game development education as a visiting lecturer for the 'National Film and Television School', as a Lead Teacher for 'Uppingham School', and is currently a Senior Lecturer at 'Teesside University' where he helps students develop the skills needed for their ideal role in the games industry.",
      "target_audience": [
        "Beginners to Unity and game making who want to create their own"
      ]
    },
    {
      "title": "Learn Mobile Game Programming from Scratch",
      "url": "https://www.udemy.com/course/learn-mobile-game-programming-from-scratch/",
      "bio": "Build Games for Mobile, Smartphones and Tablets",
      "objectives": [
        "To Master Corona SDK",
        "To Master Unity 3D game engine",
        "To Learn the Game Development and Production Process",
        "To Help you Build the next Block Buster Game"
      ],
      "course_content": {
        "Introduction to Game Programming using Corona": [
          "Introduction",
          "Introduction to Corona SDK",
          "Setting up the SDK",
          "Corona applications",
          "Corona Sample Applications",
          "Editing an Application",
          "Corona Editor",
          "Hello World",
          "Corona Resources"
        ],
        "Introduction to Lua programming": [
          "Intro to Lua",
          "Lua Syntax and Conventions",
          "Variables",
          "Expressions",
          "Statements",
          "Functions",
          "Lua Data Types & Scope",
          "Lua API"
        ],
        "Basic Corona": [
          "Display Objects",
          "Display Groups",
          "Events and Listeners",
          "Widgets",
          "Timers",
          "Transitions"
        ],
        "Advanced Corona": [
          "Animation",
          "Audio",
          "Media",
          "Physics",
          "Serialization",
          "Menu States"
        ],
        "Game In Corona": [
          "Gameplay",
          "Project Setup",
          "Game Objects",
          "Controls",
          "Timer",
          "Score",
          "Game Over",
          "Final"
        ],
        "Unity Programming": [
          "Intro To Unity3D",
          "Intro To The Editor",
          "Intro To The SceneView",
          "Components",
          "Adding Components",
          "Prefabss",
          "CreatingAssets",
          "Scenes",
          "Building"
        ],
        "Unity 3D Primer": [
          "Intro To Scripting",
          "Variables And Functions",
          "Public vs Private",
          "Modifying Game Objects",
          "Instantiating Game Objects",
          "Capturing Input"
        ],
        "Collosion detection and Character Control in Unity 3D": [
          "Intro to Advance concepts",
          "Collision Detection",
          "Advanced Collision",
          "Terrain",
          "Character Controller",
          "Animations And Gem Collection"
        ],
        "Unity 3D - Important Features": [
          "Intro To Section",
          "Building The Scene",
          "Ball Spawning",
          "Buckets",
          "Detection And Score Keeping",
          "GUIText"
        ],
        "Unity 3D - Advance Features": [
          "Section Intro",
          "MainMenu And Touch Input",
          "GameLogic And GUI",
          "Audio",
          "Advanced Game Logic",
          "Building For Android",
          "Building For iOS"
        ]
      },
      "requirements": [
        "Programming knowledge is a must"
      ],
      "description": "Get to build your own mobile games and launch them in apps store with this course. This extensive course covers the two most powerful and popular game engines for building games for mobile devices. You will learn both Unity 3D and Corona SDK. This course will help you create games for multiple platforms and will provide you necessary training to design, develop and launch the next block buster game. Mobile games are the most popular apps category world wide and you can be part of that market fairly easily with this course.\nThis course covers both Corona SDK and Unity 3D in ten sections with five units dedicated to both of them respectively. The first five units cover Corona SDK the cross platform game engine which can help you build games for iOS, Android, Kindle and Nook. This platform will help you build games quickly and you can implement powerful monetizing APIs like in app purchase and advertisements. The first five units will make you master of this SDK and you can quickly start building games that will sell.\nThe last five units covers the powerful Unity 3D engine. It is one of the most popular game engines in the market and you can make highly advance games using this engine. You will start with basic Unity concepts and then will advance to use advance features like collision detection, character control and terrain handling. You will further learn about handling physics and other game properties. You will surely be a Unity 3D master by the end of this course.\nWhy this course is for you?\nCovers two of the most powerful cross platform engines in one course\nCourse developed and designed by real game developers\nProvides you real insight to game development process\nRequires no prior game development experience\nEasy to follow process which gets you started quickly\nGet started and bring all your game ideas to life..",
      "target_audience": [
        "Programmers who want to build Mobile games",
        "Game designers"
      ]
    },
    {
      "title": "Create 2D Multiplayer Game with photon in unity",
      "url": "https://www.udemy.com/course/create-2d-multiplayer-game-with-photon-in-unity/",
      "bio": "Create 2D Multiplayer Game with photon in unity",
      "objectives": [
        "Learn C#,a modern Programming Language",
        "Understanding the capabilities in 2D development in Unity",
        "Gain an understanding of the game developement progress",
        "Gain understanding of Multiplayer game function with photon"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Photon Setup",
          "New 2D Project Setup",
          "Network Manager"
        ],
        "Main Menu": [
          "Menu UI Part 1",
          "Menu UI Part 2",
          "Menu Script",
          "Lobby Script",
          "Lobby browser Script"
        ],
        "Game Setup": [
          "Game Manager"
        ],
        "Player": [
          "Player Controller Varriables",
          "Player Movement",
          "Player Animation",
          "Player movement script",
          "Player Attack",
          "Player Take Damage & Hurt & Die Function",
          "Initialize Players in scene"
        ],
        "Camera": [
          "Camera controller"
        ],
        "Game UI": [
          "Health UI",
          "Health UI Script",
          "Game UI Script",
          "Getiing Gold &Saving Gold & Healing",
          "Pickup Items"
        ],
        "Enemy": [
          "Enemy Setup",
          "Enemy Take damage",
          "Enemy movement",
          "Enemy spawner",
          "Fixing all bugs"
        ],
        "Environment": [
          "Importing Environment",
          "Player name and room"
        ],
        "Player Selection": [
          "Making more players",
          "Player Selecttion UI",
          "Player Selection Script"
        ],
        "Shop System": [
          "Upgrade Stats UI",
          "Detecting Shopkeeper",
          "Health Upgrade",
          "Attack & def Upgrade",
          "Def Upgrade"
        ]
      },
      "requirements": [
        "mac or pc"
      ],
      "description": "Welcome to the Course!\nyou will learn how to create player\nWe are going to be creating a multiplayer RPG inside of Unity, using Photon.\nPhoton Unity Networking is a popular networking framework for Unity.\nWe will be creating a player controller, allowing you to move around and attack enemies.\nPickups will grant the player either gold or health.\nusing coin in shop to increase player stats\nPlayer Selection which players can pick their favorite character\nWe’ll be making a lobby system, allowing players to find games to connect up with each other.\nplayer stats and level up system which with every level up player become stronger\nThis will be done using Unity’s UI system.\nLet’s have a look at what we learned and made.\nWe learned how to use Photon inside of Unity We created a player controller which can move, attack, get gold and heal Pickups which can give the player health or gold  A lobby system for players to team up together before entering the game This was all done using Unity’s UI system.\nthis course has been designed to be easy understanding to everyone so whether you are beginner or advance  programmer\nLet’s get started  on the project today level up your skill with this course!",
      "target_audience": [
        "Beginner to advance"
      ]
    },
    {
      "title": "Unreal Engine 5 Blueprints & Blender: Learn Game Development",
      "url": "https://www.udemy.com/course/how-to-make-your-first-game-with-blender-and-unreal-engine-5/",
      "bio": "Make your first game from scratch with Unreal Engine 5 and Blender!",
      "objectives": [
        "Using Blueprints to make game mechanics",
        "Creating Game art with Blender and Exporting to unreal engine",
        "Making your own game environment",
        "Creating your own game character and enemies",
        "Common Blueprint Practices",
        "Making complex HUDs with widgets",
        "Creating Dynamic adjustable materials",
        "Develop Strong problem solving skills",
        "Create a fully playable game from start to finish"
      ],
      "course_content": {
        "Game Showcase": [
          "CompletedGameShowcase"
        ],
        "Creating the Game ( Project Files included )": [
          "Downloading unreal and level setup",
          "Creating a Blueprint Actor and Intro to nodes",
          "Modeling your first game asset : A Coin",
          "UV Mapping and Game Texturing",
          "Creating your first Character Controller",
          "Introduction to Variables and the branch node",
          "Timelines, Functions and Events",
          "Creating Children Blueprints",
          "Creating a Crosshair Mesh and Material",
          "Creating the Mouse controller for Crosshair",
          "Creating a basic enemy AI to follow Player",
          "Creating a Player Widget Health bar and taking damage",
          "Projectiles and creating Timers by Function names",
          "Damaging Enemies and enemy Health bars",
          "Material Animations for damaged enemies and playing sounds",
          "Creating enemy Widget animations and Damage Numbers",
          "Create our own tiling textures and landscape",
          "Creating foliage grass",
          "Using Quixel Megascans",
          "Creating light Functions and Hanging particles",
          "Slime Texturing",
          "Modeling Slime Variations",
          "Modeling the character",
          "Modeling the staff and UV mapping the character",
          "UV Mapping and Baking Bevels",
          "Texturing our character",
          "Rigging, Posing and Cloth Simulation",
          "Creating the Fireball VFX",
          "Enemy Loot, Basic Level up system",
          "Designing our levelup HUD",
          "Bringing up and Removing HUD for level up",
          "Spell Level up system",
          "Creating the Slime Spawner",
          "Creating Widgets for Kill Count, Level and Timer Display",
          "Creating the Game timer",
          "Creating the Skill Level Indicator Widget",
          "Creating the Fire Spell level up system",
          "Creating the Ice Spell Levelup System",
          "Creating the Orb Spell Leveling System",
          "Creating the Wind Spell and Leveling System",
          "Spawning different enemy types",
          "Player Death and Screen",
          "Winning the game",
          "Post process volumes.mp4",
          "Pause Menu",
          "Main menu",
          "Balancing the Game",
          "Creating health pickup",
          "Adding Sounds and Creating a volume slider",
          "Conclusion"
        ]
      },
      "requirements": [
        "Basic Navigation in Blender and Unreal engine"
      ],
      "description": "The unreal engine project file and exported game is included in the first video\n\nIntroduction\n\nGame development is a fun and creative profession but it can be quite hard to learn especially if you want to do it alone in the indie space. That's where I come in, in this course, not only will I teach you how to make a game with unreal engine blueprints from start to finish but instead of asset flipping or using premade assets you will also learn how to create your own characters and environment using the free software blender! We will start from a blank template and work towards making a 10 minute survival game with Zelda like aesthetics.\n\nWhat you will Learn\n\nIn Unreal Engine\n\nCreating Blueprints for game mechanics and controllers\nLearn to communicate between different blueprints\nDynamic and Modular Materials\nMaking Complex interactive widgets\nCreating a Main and Pause Menu\nMaking various common game and RPG mechanics\n\nIn Blender\n\n3D Modeling in Blender\nUV Mapping\nTexturing Game Assets\nBaking and exporting Game Ready textures to Unreal from Blender\nExporting Meshes to Unreal\nCreating Props, Environments and Characters\n\nWho is Course for?\n\n\nBeginners and Intermediate users who want to streamline Blender and Unreal for their Game dev workflow\nPeople who want to know the full pipeline of making a game from scratch",
      "target_audience": [
        "For beginner or intermediate game developers looking to improve their skills"
      ]
    },
    {
      "title": "Unreal Engine 5: VFX with Niagara from Beginner to Pro",
      "url": "https://www.udemy.com/course/unleashfx-unreal-engine-niagara-fx-and-sequencer/",
      "bio": "Learn real time VFX with Niagara and how to create cinematics with Sequencer in Unreal Engine 5",
      "objectives": [
        "How to navigate in Unreal",
        "How to create real time FX in Niagara",
        "How to create different materials for VFX in Unreal and Photoshop",
        "How to create action and environment FX like explosions, helicopter landing smoke, molotov cocktail, etc",
        "How to use Sequencer to create stunning sinematics",
        "How to create full CG cinematic scene with FX inside"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "How to install Unreal Engine 5.1",
          "How to navigate in Unreal Engine 5.1",
          "What is Quixel Bridge and how to use it for cinematics",
          "Understanding VFX in Unreal Engine"
        ],
        "Chapter 1: Smoke - Very Beginners FX": [
          "Creating Realistic Smoke Steam",
          "Simulating Bullet Impact Smoke",
          "Creating a Basic Smoke Texture with Embergen",
          "Creating a Basic Smoke Texture with Embergen - 2",
          "Creating a Basic Material for Niagara",
          "Designing Helicopter Landing Smoke"
        ],
        "Chapter 2: Environment FX - Beginners FX": [
          "Generating Realistic Fog",
          "How to create Snow Texture",
          "Bringing Snow to Your Scenes",
          "Crafting a Dynamic Dust Storm"
        ],
        "Chapter 3: Fire": [
          "Building a Cozy Campfire",
          "Crafting Explosion",
          "Simulating a Molotov Cocktail Explosion"
        ],
        "Chapter 4: Liquid": [
          "Creating Realistic Water Splashes",
          "Crafting Epic Water Explosions",
          "Designing Dramatic Blood Splashes"
        ],
        "Chapter 5: Action FX": [
          "Electrifying Cable Sparks",
          "Mastering Muzzle Flash Effects"
        ],
        "Working with Sequencer": [
          "Sequencer for Beginners: Getting Started",
          "Creating a Full CG Scene with Sequencer (Part 1)",
          "Creating a Full CG Scene with Sequencer (Part 2)"
        ]
      },
      "requirements": [
        "It's for beginners, but it is beneficial for participants to have a basic understanding or a little bit of prior experience in the Unreal Engine.",
        "Sometimes it contains a quick and specific explanation of things."
      ],
      "description": "Welcome to the ultimate journey into the realms of Unreal Engine 5.1, where cinematic storytelling and breathtaking visual effects converge!\nAre you ready to bring your creative visions to life? In this comprehensive Udemy course, you'll dive deep into the powerful tools of Unreal Engine 5.1 to master two essential aspects of game development and filmmaking: creating stunning visual effects using Niagara and crafting cinematic scenes with Sequencer. This Udemy course is a hands-on exploration divided into six captivating chapters, driven by the inspiration of famous games.\nChapter 1: Smoke - Very Beginners Speed and Explanation\nBegin your voyage into the mesmerizing realm of FX by mastering smoke simulations.\nExplore the intricacies of smoke creation, from ethereal wisps to dense billows.\nAchieve cinematic-quality smoke that adds depth and drama to your projects.\nChapter 2: Environment FX - Very Beginners Speed and Explanation\nTransform ordinary environments into extraordinary worlds using Unreal Engine's environmental FX.\nDesign breathtaking weather systems and atmospheric effects.\nElevate your scenes to cinematic quality with environmental FX mastery.\nChapter 3: Fire - Regular Speed and Explanation\nIgnite your imagination as you dive into the art of crafting stunning fire effects.\nLearn the science behind fire behavior and control its every aspect.\nCreate realistic and cinematic flames that sizzle on the screen.\nChapter 4: Liquids - Regular Speed and Explanation (it is explained step by step but no time is wasted on unnecessary explanations)\nDive into the fascinating world of liquid FX.\nUncover the magic of fluid dynamics and apply them to your projects.\nCraft lifelike liquid visuals that enhance the immersive quality of your scenes.\nChapter 5: Action FX - Regular Speed and Explanation (it is explained step by step but no time is wasted on unnecessary explanations)\nElevate your skills with advanced techniques and insider tips in this chapter.\nGain industry insights that set your work apart from the rest.\nTake your FX and cinematic scenes to professional levels.\nChapter 6: Sequencer Cinematics\nLearn to weave cinematic stories by mastering Unreal Engine's Sequencer.\nMaster the art of camera work and scene composition.\nTurn your creative visions into cinematic masterpieces.\n\n\nThe more difficult effects are strictly made for the situation we use them for.\nWhether you're a game developer, filmmaker, or visual effects enthusiast, this course equips you with the skills to create stunning visual effects and cinematic scenes that captivate and inspire. Enroll now to embark on this exciting journey, and let's bring your creative visions to life together!\nAnd don’t worry if you’re using an older version of Unreal Engine 5—everything we cover in this course works just fine in earlier 5.x versions too, also 5.6 is fine.",
      "target_audience": [
        "This course is tailored for individuals who are eager to learn and passionate about Niagara FX, whether you're an absolute beginner or someone with some prior knowledge looking to deepen your expertise."
      ]
    },
    {
      "title": "Unreal Engine 5 - The Complete Automotive Cinematic Course",
      "url": "https://www.udemy.com/course/unreal-engine-5-the-complete-automotive-cinematic-course/",
      "bio": "Learn how to create photo-realistic Automotive Cinematics with Unreal Engine 5 and Sequencer from Scratch.",
      "objectives": [
        "Mastering Unreal Engine Fundamentals",
        "Automotive Rigging and Animation",
        "Level Building and Cinematic Camera Settings",
        "Post-Processing and Visual Enhancements",
        "Material Creation and Shader Development"
      ],
      "course_content": {
        "Introduction": [
          "Intro",
          "How to Install Unreal Engine 5.3",
          "Navigation in Unreal Engine 5.3",
          "Plugins in Unreal Engine",
          "Quixel Bridge Intro",
          "Marketplace Assets Navigation"
        ],
        "Project Preparation": [
          "Creating a Project",
          "Marketplace Assets for the Project",
          "How use sketchfab and finding a car",
          "Preparing the first Scene",
          "Importing the car into the project",
          "Importing the car into the project for Unreal 5.5-5.6"
        ],
        "Car Rigging": [
          "Blender Installation",
          "Add-ons Installation",
          "Car Rig in Blender",
          "Car Blueprints in Unreal Engine p1.",
          "Car Blueprints in Unreal Engine p2."
        ],
        "Building the Level": [
          "Adding materials on the car",
          "Collecting Assets for the Level",
          "Creating the Road",
          "Placing the Sidewalks",
          "Creating the Road Turn",
          "Adding Traffic Barriers",
          "Buildings",
          "Export from Blender to Unreal",
          "How to make assets materials and adding them to the buildings",
          "Еasier way to texture assets",
          "Adding the last assets",
          "How to add Decals"
        ],
        "Intro to Sequencer and Cameras": [
          "Adding a Camera",
          "Sequencer Introduction",
          "Camera Rig Rail",
          "Camera Rig Crane"
        ],
        "Creating the Scenes": [
          "Scene 1",
          "Scene 2",
          "Scene 3",
          "Scene 4 and Camera Shake Blueprint",
          "Scene 5",
          "Scene 6",
          "Scene 7",
          "Scene 8",
          "Scene 9"
        ],
        "How to use Niagara and how to make Drift Smoke FX": [
          "Intro to Niagara",
          "How to create Smoke Material",
          "Niagara Basic Smoke Practice",
          "Creating a Drift Smoke FX",
          "Adding the FX in the drift scene",
          "Importing the wroking files with .uasset format"
        ],
        "Render Settings": [
          "Post Process Volume",
          "Path Tracer Render Settings"
        ],
        "After Effects Compositing": [
          "After Effects Compositing"
        ]
      },
      "requirements": [
        "This course requires no prior skills or experience with Unreal Engine or 3D animation. You will learn everything you need to know from the ground up, ensuring you gain the knowledge and skills to create stunning automotive cinematics."
      ],
      "description": "Unlock the potential of Unreal Engine 5 - 5.6 to create photorealistic automotive cinematics with our comprehensive course. This course is designed to take you from the basics to advanced techniques, providing you with all the skills needed to produce stunning automotive visuals.\nWhat You Will Learn:\nBuilding Immersive Scenes:\nBegin with the fundamentals of Unreal Engine 5, learning how to build detailed and realistic scenes that serve as the perfect backdrop for your automotive cinematics.\nCar Rigging in Blender and Unreal Engine:\nDiscover how to rig your car models in Blender and seamlessly import them into Unreal Engine. You'll learn to set up functional suspensions, steering, and other dynamic elements for authentic vehicle animations.\nVehicle Control Techniques:\nGain expertise in controlling your car's movements within Unreal Engine, ensuring smooth and lifelike animations. Learn how to create and manage realistic driving sequences that bring your vehicles to life.\nMastering Camera Tools and Sequencer:\nExplore Unreal Engine’s powerful camera tools and Sequencer to capture cinematic shots. You’ll learn about camera placement, movement, and how to create compelling sequences that elevate your automotive cinematics.\nCreating Smoke Tire Effects with Niagara:\nDive into the Niagara visual effects system to design and implement smoke tire effects. Understand how to create dynamic and realistic particle effects that enhance the drama and realism of your scenes.\nPerfect Render Settings:\nLearn to optimize your render settings for the best visual quality. You'll discover how to balance performance and quality, ensuring your cinematics look professional and polished.\nColor Correction in After Effects:\nFinally, take your cinematics to the next level with professional color correction techniques in After Effects. Enhance the visual appeal of your renders with precise color grading and finishing touches that make your work stand out.\nBy the end of this course, you'll have the knowledge and skills to create breathtaking photorealistic automotive cinematics from start to finish. Whether you’re a beginner eager to explore the world of 3D animation or a seasoned artist looking to refine your techniques, this course is tailored to help you achieve your creative vision. Join us and transform your passion for cars and cinematic storytelling into stunning visual masterpieces.\nAnd don’t worry if you’re using an older version of Unreal Engine 5—everything we cover in this course works just fine in earlier 5.x versions too, also 5.6 is fine.",
      "target_audience": [
        "This course is designed for anyone who wants to learn how to create automotive cinematics, regardless of their prior experience. Whether you're a beginner or looking to expand your skills, you'll gain all the knowledge needed to produce professional-quality visual content."
      ]
    },
    {
      "title": "Scrum for Indie Game Development",
      "url": "https://www.udemy.com/course/scrum-for-indie-game-development/",
      "bio": "Plan, Lead, and Ship Your Game with Agile",
      "objectives": [
        "Build Your Indie Game Development Framework",
        "Essential Tools for Indie Game Management",
        "Implementing Scrum for Long-Term Success",
        "Managing External Stakeholders and Finalizing Your Game"
      ],
      "course_content": {
        "Welcome to Indie Game Management": [
          "Introduction",
          "Course goals",
          "Why Scrum matters - Case Study: Duck Paradox - From Chaos to Coordination"
        ],
        "Building Your Indie Game Development Framework": [
          "Introduction to Scrum and the Agile Mindset",
          "The Role of Scrum in Project Management",
          "Why Scrum is Perfect for Game Development and Scrum as Your Studio’s Secret Weap",
          "Scrum Values",
          "Scrum Roles",
          "Scrum Gameboard",
          "Scrum Meetings",
          "Importance of the meetings and key takeaways"
        ],
        "Essential Tools for Indie Game Management": [
          "Communication Tools: Staying Connected Across the Globe",
          "Tools for Tracking Tasks",
          "Estimation Tools: Simplifying Sprint Planning",
          "Documentation Tools: Keeping Everything Clear and Accessible",
          "Scheduling Tools: Managing Your Meetings and The Right Tools for Your Studio"
        ],
        "Implementing Scrum for Long-Term Success": [
          "Defining the Game’s Vision",
          "Sprint Planning and Tracking Progress",
          "Conducting Effective Meetings",
          "Building Team Trust and Growth",
          "The Bigger Picture"
        ],
        "Managing External Stakeholders and Finalizing Your Game": [
          "Collaborating with Publishers and Partners",
          "Plan for Polish and Finalization",
          "Final Thoughts"
        ],
        "Conclusion": [
          "Conclusion and Final Encouragement"
        ]
      },
      "requirements": [
        "Previous knowledge of anyone looking to master the art of managing an indie game studio with a small to mid-sized team. Scrum and management is not necessary, this course will teach you everything you need to get started."
      ],
      "description": "Eighty percent of indie game developers never finish their game. Many projects fail due to poor planning, lack of structure, and scope creep—not because of a lack of talent or ideas.\nBut your game does not have to be one of them.\nWith Scrum, you can stay on track, manage your team effectively, and successfully ship your game without the chaos.\nWhat You Will Learn in This Course\nMaster Scrum and Agile, the number one framework used by game studios for efficient development\nPlan and track progress using Jira, Notion, and Slack\nOrganize sprints and meetings, set clear goals, and run efficient standups, refinements, and retrospectives\nManage a remote or small team and keep everyone aligned and working productively\nWork with publishers and stakeholders and communicate progress and expectations effectively\nAvoid scope creep and crunch by planning realistically and staying on schedule\nWho Is This Course For\nIndie developers, whether working solo or leading a small team, who want to structure their workflow and avoid common pitfalls\nProject managers and Scrum Masters looking to transition into game development project management with confidence\nGame designers and developers who want to work efficiently within Scrum frameworks to boost productivity\nAnyone interested in game production, even those just starting out, who need a clear roadmap for managing game projects effectively\nWhy Take This Course\nOnly a small amount of indie developers finish their games. Learn how to be among them\nBased on real experience, covering the exact Scrum framework used to develop Duck Paradox and other indie titles\nActionable, no-fluff lessons that provide practical templates, real-world examples, and step-by-step guidance\nStrategies to avoid costly mistakes, manage projects efficiently, and prevent burnout and budget overruns\nBuild Better Games with Smarter Development\nBy the end of this course, you will have a fully functional Scrum system tailored for indie game development, helping you stay focused, organized, and ready to ship your game.\nDo not become part of those who never finish. Take control of your project today. Enroll now and start building smarter.",
      "target_audience": [
        "An indie developer with a budget, ready to manage a team and bring your dream game to life.",
        "A newly appointed project manager or Scrum Master tasked with leading a team to complete a game.",
        "A developer joining a team and needing to understand Scrum principles to organize yourself.",
        "Someone curious about managing an indie project efficiently to start your own studio someday."
      ]
    },
    {
      "title": "Learn 2D Character Animation for Games with Blender & Unity",
      "url": "https://www.udemy.com/course/3dmotive-learn-2d-character-animation-for-games-with-blender-unity/",
      "bio": "Explore how to build, animate, and setup 2D game characters for your games!",
      "objectives": [
        "Learn how to model and texture map 2D Characters",
        "Learn how to animate a walk cycle",
        "Learn how to import and use 2D Characters for games"
      ],
      "course_content": {
        "Understanding the Interface and Controls": [
          "Download Source files here!",
          "Introduction to 2D Character Animation for Games",
          "Introducing Pendragon",
          "User Preferences",
          "Maya Controls",
          "Image Packing",
          "Importing References",
          "Arm Modelling",
          "Depth Sorting",
          "Torso Modelling",
          "Configuring The Viewport",
          "Conclusion"
        ],
        "Texturing and Materials": [
          "Introduction",
          "Recapping and Preparation",
          "Joining with Vertex Groups",
          "Unwrapping",
          "Texture Mapping",
          "Completing the Texture Map",
          "Blender Render and Materials",
          "Cycles Render and Materials",
          "Starting to Remap Textures",
          "Texture Painting",
          "Texture Atlas and Conclusion"
        ],
        "Setting up our Character for Animation with Rigging and Weights": [
          "Introduction",
          "Introducing Rigging",
          "Working with Armatures",
          "Rigging the Upper Body",
          "Rigging the Legs",
          "Skinning and Deformations",
          "Weight Painting",
          "Continuing with Weight Painting",
          "Getting Started with Inverse Kinematics",
          "Rigging the Legs with Inverse Kinematics",
          "Bone Layers",
          "Conclusion"
        ],
        "Setting up for Animation and Basic Edits": [
          "Introduction",
          "Preparing to Animate",
          "Walk Poses",
          "Contact Pose",
          "Passing Pose",
          "Refining Poses",
          "Down Pose",
          "Up Pose",
          "Editing Animation Curves",
          "Exporting to FBX",
          "Conclusion"
        ],
        "Full Animation Refinement and Blending": [
          "Introduction",
          "Asset Importing",
          "Configuring Animations",
          "Configuring Materials",
          "Creating a Blend Tree",
          "Reviewing",
          "Reading Input",
          "Creating Motion Fields",
          "Controlling Parameters",
          "Assigning Controllers",
          "Coding Movement",
          "Creating a Script File",
          "Player Scale",
          "Accessing Components",
          "Conclusion",
          "Bonus Lecture: Further Learning with 3dmotive"
        ]
      },
      "requirements": [
        "Access to Blender",
        "Unity 5"
      ],
      "description": "Learn how to create and animate 2D game characters in Blender, for use in the Unity Game Engine. In this course for intermediate users, Alan Thorn outlines a solid, step-by-step workflow for building, mapping and animating appealing game characters that perform well and work effectively in a game engine. See how to model precisely from imported reference images to make an interesting character. Learn how to unwrap and texture character models using Blender's powerful mapping tool-set. Then explore how to rig and configure your character, complete with Inverse Kinematics, to create realistic motion. And then animate a walk cycle for your character, which can be repeated seamlessly. Finally, see how to import your character to the Unity engine for performance in-game. By the end of this course you'll understand a flexible and powerful workflow for making 2D characters that bring your games to life...\nMore about the Instructor:\n\nAlan Thorn is a multidisciplinary game developer, author and educator with 16 years industry experience. He makes games for PC desktop, Mobile and VR. He founded 'Wax Lyrical Games' and created the award-winning game 'Baron Wittard: Nemesis of Ragnarok', working as designer, programmer and artist.   He has written twenty-two technical books on game development and presented eighteen video training courses. These courses cover game-play programming, Unity development, 3d modelling and animation.  Additionally, he has worked in game development education as a Senior Lecturer at Teesside University and a Lead Teacher for Uppingham School. He is currently a Visiting Lecturer at the National Film and Television School and a Visiting Lecturer at London South Bank University.",
      "target_audience": [
        "Students, Hobbyists, Professionals, and generally Blender and Unity users seeking to create games.",
        "This course is not intended for for Blender beginners"
      ]
    },
    {
      "title": "Intro To Ruby For Game Development",
      "url": "https://www.udemy.com/course/ruby-for-game-development/",
      "bio": "Game Development With Ruby Gosu",
      "objectives": [
        "Understand Ruby programming and Game Development using the Gosu Library"
      ],
      "course_content": {
        "Beginner Ruby Programming Concepts": [
          "Installing Ruby On Your Computer",
          "First Things First: How To Get Support Fast!",
          "Installing The Sublime Text Editor",
          "Hello World",
          "Variables",
          "Comments and Errors",
          "Math Operators",
          "Math Order of Operations",
          "Comparison Operators",
          "Assignment Operators",
          "Getting User Input With Gets",
          "If Else Statements",
          "Multiple Conditionals",
          "String Manipulation"
        ],
        "Intermediate Ruby Programming Concepts": [
          "Arrays",
          "Multidimensional Arrays",
          "While Loops",
          "Until Loops",
          "For Each Loops",
          "Fizz Buzz!",
          "Hashes",
          "Hash Manipulation",
          "Methods Part 1",
          "Methods Part 2",
          "Random Numbers"
        ],
        "Advanced Ruby Concepts": [
          "Intro To Ruby Classes",
          "Creating Classes",
          "Class Getters",
          "Class Setters",
          "Adding More Methods to Our Class",
          "Attr_Accessor",
          "Create a Draw Method in our Class",
          "Class Inheritance"
        ],
        "Ruby Game Programming With Gosu": [
          "Intro To Gosu",
          "Gosu: Create A Window",
          "Gosu: Add A Background Image",
          "Gosu: Player Class 1",
          "Gosu: Player Class 2",
          "Gosu: Player Class 3",
          "Gosu: Star Class 1",
          "Gosu: Star Class 2",
          "Gosu: Score And Sound",
          "Gosu: Finishing Up"
        ],
        "Whack 'a Mole With Gosu": [
          "Intro To Whack a Mole",
          "Whack a Mole Setup",
          "Whack a Mole - Draw the Mole",
          "Whack a Mole - Move Our Mole",
          "Whack a Mole - Make the Mole Blink",
          "Whack a Mole - Draw Our Hammer",
          "Whack a Mole - Button Clicking",
          "Whack a Mole - Keeping Score",
          "Whack a Mole - End The Game",
          "Whack a Mole - Space Bar to Restart Game"
        ],
        "Making Your Games Executable": [
          "Make Your Game Executable With Ocra",
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "You don't need any prior knowledge or programming skills to take this course."
      ],
      "description": "Game design and development with the Ruby programming language is great fun...learn how in this course.\nWe'll be using the Gosu library for Ruby to create a simple 2D spaceship game.  Follow along and build your own copy!\nWe'll start out by learning Ruby. You don't need any prior knowledge of programming to take this course, we'll start from the beginning and teach you everything you need.\nAfter we have a solid understanding of Ruby, we'll move into Game programming using the Ruby Gosu Library. Gosu does most of the heavy lifting for us, allowing us to create games quickly and relatively easily!",
      "target_audience": [
        "Anyone who wants to learn to code Ruby for Game Development"
      ]
    },
    {
      "title": "Unity Game Tutorial: Sudoku 2D",
      "url": "https://www.udemy.com/course/unity-game-tutorial-sudoku-2d/",
      "bio": "Learn how to create your own Sudoku in Unity Game Engine.",
      "objectives": [
        "Learn how to create Sudoku using C# and Unity.",
        "You'll learn to create your Functions.",
        "C# : int, string, array, List, Modulo and some Math",
        "Unity Canvas, Layouts, Buttons and more..."
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "The Concept & Unity Setup": [
          "The Concept",
          "Unity Setup"
        ],
        "Playfield V1 - Mix Version": [
          "Initialize Grid",
          "Debugging Grid",
          "Debugging Grid Seperators",
          "Shuffle Grid",
          "Mixing Grid Cells",
          "Completing the Shuffle",
          "Creating the Riddle Grid"
        ],
        "Game Board Design": [
          "User Interface - The Playfield",
          "User Interface - Number Buttons",
          "Scripting - Number Buttons",
          "Creating the Buttons",
          "Parenting the Buttons",
          "Button Prefab & Board Setup"
        ],
        "Player Inputs": [
          "User Interface - Input Field",
          "Scripting Input Field",
          "Working Input Field",
          "Update The Riddle Grid",
          "Difficulty Levels",
          "Win Check",
          "Show Hints",
          "Finishing Hints"
        ],
        "Main Menu": [
          "User Interface - Menu Scene",
          "Menu Buttons",
          "Connect Difficulty Settings",
          "Debug & Print Clean Up",
          "Win Panel"
        ],
        "Playfield V2 - Recursive Back Tracking": [
          "The Concept",
          "Column Check",
          "Row Check",
          "Block Check",
          "Check All",
          "Valid Grid Check",
          "Fill Grid Base",
          "Solve Grid #1",
          "Check Possibilities",
          "Solve Grid #2",
          "Optimize Create Riddle Grid",
          "Update Start Function"
        ],
        "Conclusion": [
          "Game Ideas",
          "Thanks"
        ]
      },
      "requirements": [
        "Some Unity knowledge will always help.",
        "Unity version 5.6+ is recommended",
        "A PC or Mac.",
        "A passion for games.",
        "The will and mood to finish the course."
      ],
      "description": "In this Course you'll learn how to create a Sudoku in Unity Game Engine.\nWe create 2 different Conzepts. A Fill Mix Method and Recursive Backtracking Method. We create it as a 2D Game.\nThis course is a Beginner/Intermediate Course, so if you have trouble in any case, write me a message or Q&A, and i'll help as best as i can.\nIf you are beginner, you might have some trouble to follow, but the videos will guide you through the complete course. Don't forget you only become better if you repeat things and keep on learning!\nSo we create several Systems which will give us enough freedom to:\nC# (Monodevelop)\ncreate any type of Sudoku in general\ncreate easy to super hard Sudoku Boards\ncreate a Auto Solving System using Recursive Back Tracking later\ncreate Inputs with Buttons to get a working Sudoku Game\nSettings possibility for multiple Game Modes\nUnity (2019.1.8f1)\ncreate a Playfield of your liking\ncreate Inputfield to give the Player Input possibilities\nCreate a simple Win GUI - You may want to create a not solved yet GUI as well\nHint and Check Buttons\ncreating a Menu and the Game Scene\nCourse Material\nI provide no Material since it's not needed for the Course.\nYou have to write the code on your own, i do not provide the final scripts!\nAll other graphics for Menu's, Icons, Images or Buttons need to be created on your own.\nAll Materials i provide are for education only and should not be in your final release!\nConclusion\nIn the end of this course you will have a fully functional Sudoku 2D Game with multiple Game Modes.\nChallenge\nAfter you have created nice Menus, Buttons, and maybe additional content, upload the Game to any Gaming Website, Google Playstore, Apple Store or even Windows Store or Steam.\nSo what are you waiting for?\nLet's make your dream game a reality!!\nLevel: Beginner / Intermediate\nVideo Course Length: ~4 hours\nUnity Version required: 5.3+",
      "target_audience": [
        "Sudoku Intusiasts.",
        "You want to finish your first game ever.",
        "You love games and have passion for creating such.",
        "You always wanted to create your own Sudoku game."
      ]
    },
    {
      "title": "The Godot Bootcamp",
      "url": "https://www.udemy.com/course/the-godot-bootcamp/",
      "bio": "Gaming and Application Development",
      "objectives": [
        "Learn how to create 2D and 3D games using the Godot game engine.",
        "Understand the fundamentals of GUI-based desktop software development with Godot.",
        "Master the GDScript programming language for game development and software engineering.",
        "Explore the use of APIs and web sockets to enhance functionality and interactivity."
      ],
      "course_content": {
        "Introduction": [
          "Course Entailment",
          "Download and Setup",
          "Why are there two Week 1s",
          "Course Material Requests"
        ],
        "Week 1: GDScript(Recommendation: Someone with coding experience)": [
          "Variable Data Types",
          "For loops",
          "While loops",
          "Flow Control",
          "Logical Operators",
          "Match Case",
          "Creating Functions",
          "Object Oriented Programming"
        ],
        "Week 1: GDScript Alt Breakdown(Recommendation: Complete Beginners)": [
          "Alternate Breakdown",
          "Print",
          "Variables",
          "Strings",
          "Integers and Floats",
          "Constants and Comments",
          "Arrays",
          "Adding and Removing",
          "Pushing and Sorting",
          "For loop",
          "Range",
          "Equality",
          "if elif else",
          "Dictionaries",
          "While loops",
          "Functions and Arguments",
          "Function Alias",
          "Classes",
          "Week 1 Alt Wrap Up"
        ],
        "Week 1 Quiz": [
          "Variables and Data Types",
          "Loops",
          "Conditionals",
          "Functions and OOP"
        ],
        "Week 2: Mad Libs": [
          "What is Mad Libs?",
          "Creating the Story Book",
          "Create the Interface",
          "Selecting a Story and Prompting the Player",
          "Ending and Play Again"
        ],
        "Changes Coming": [
          "Course Changes Coming"
        ],
        "Week 3: Pong": [
          "What is Pong",
          "Setting Up The Project",
          "Creating the Paddles",
          "Player Movement",
          "Ball Movement and Collision",
          "Scoring System",
          "Game Over and Restart",
          "Main Menu",
          "Creating the CPU Opponent"
        ],
        "Week 4: Breakout": [
          "What is Breakout",
          "Setting Up the Project",
          "Creating the Paddle",
          "Player Tweak",
          "Creating the Ball",
          "Creating the Bricks",
          "Scoring System",
          "Bug Fix",
          "Ball Count - Lives",
          "Game Over and Win"
        ],
        "Week 5: Flappy Bird": [
          "What is Flappy Bird",
          "Setting up the Project",
          "Creating the Player",
          "Creating the Pipes",
          "Game Over",
          "Game Over Bug Fix",
          "Scoring"
        ],
        "Week 6: Asteroids": [
          "What is Asteroids",
          "Project Setup",
          "Creating the Player",
          "Creating the Projectile",
          "Creating the Asteroids",
          "Asteroid Spawning",
          "Asteroid Destruction",
          "Spawn Timer and Memory Leaks",
          "Update Score",
          "Update Lives",
          "Game Over and Restart"
        ]
      },
      "requirements": [
        "Familiarity with general computer usage and software installation is necessary.",
        "A computer with the Godot game engine installed is required. Godot is available for Windows, macOS, and Linux platforms.",
        "Enthusiasm, curiosity, and a passion for game development and software engineering are essential to make the most of this course."
      ],
      "description": "Welcome to the Godot Bootcamp, where you'll embark on an immersive journey to master game development and create powerful GUI-based desktop software using the versatile Godot game engine. Whether you're a beginner or an experienced developer, this comprehensive course is designed to equip you with the skills and knowledge needed to excel in the world of interactive software creation.\nGodot is a highly regarded game engine known for its flexibility and robust features. In this bootcamp, you'll dive deep into Godot's capabilities, exploring both 2D and 3D game development techniques. From designing captivating gameplay mechanics to implementing stunning visual effects, you'll learn the ins and outs of game development using Godot.\nBut that's not all - this bootcamp goes beyond game development. We'll also venture into the realm of GUI-based desktop software. You'll discover how to craft user-friendly interfaces, create interactive applications, and leverage APIs and web sockets for real-time networking.\nWhat sets this bootcamp apart is its practical and project-based approach. Throughout the course, you'll engage in quizzes, hands-on projects, and collaborative group work, allowing you to apply your newfound knowledge and develop a portfolio of impressive projects.\nBy the end of this bootcamp, you'll have mastered the GDScript programming language and gained proficiency in utilizing Godot's extensive toolset. Whether you aspire to create indie games, pursue a career in game development, or build intuitive desktop applications, the Godot Bootcamp will empower you to turn your ideas into reality.\n\nWhat you'll learn:\nThe Godot game engine and leverage its features for game development\nDive into GDScript, Godot's intuitive scripting language, to build game mechanics and interactions\nCreate captivating 2D games through sprite manipulation, animations, and collision detection\nExplore the realm of 3D game development, including scene creation, lighting, and character controllers\nDevelop powerful GUI-based desktop software with intuitive interfaces and interactive elements\nUtilize APIs and web sockets to implement real-time networking features\nGain hands-on experience through quizzes, and projects\nAccess a wealth of resources, tutorials, and a supportive community of fellow learners\n\nWhether you're a passionate gamer, aspiring developer, or tech enthusiast, the Godot Bootcamp will provide you with the knowledge and skills needed to excel in the dynamic field of game development and GUI-based software creation.\nEnroll now and embark on an exhilarating journey to become a proficient Godot developer!",
      "target_audience": [
        "Beginner game developers who want to learn and master game development using the Godot game engine.",
        "Aspiring software engineers who are interested in creating desktop applications using Godot's GUI-based capabilities.",
        "Students or hobbyists eager to explore the world of game development and software engineering with a focus on Godot.",
        "Individuals with a passion for programming and a desire to build 2D and 3D games or GUI-based desktop software.",
        "Anyone looking to enhance their skills in GDScript, APIs, web sockets, and game development using Godot."
      ]
    },
    {
      "title": "Stylized Game Art: Character Sculpting for Video Games",
      "url": "https://www.udemy.com/course/stylized-game-art-character-sculpting-for-video-games/",
      "bio": "Modern Nextgen Fundamental Workflow Development: Thor Overwatch Style with Zbrush, PBR, Maya, Substance, Unity, Unreal",
      "objectives": [
        "Character Modeling for Video Games",
        "Zbrush for Character Sculpting",
        "Stylized Anatomy Tips & Tricks",
        "ZModeling Hard Surface Armor and Organic Forms",
        "Stylized Hair Sculpting",
        "ZModeling Hard Surface Armor and Organic Forms",
        "Sculpting Stylized Cloth Folds"
      ],
      "course_content": {
        "Project Overview and Setup": [
          "Reference",
          "Course Setup | Industry Resources",
          "Stylized Anatomy",
          "Udemy Rating System Very Important Info!",
          "Base Meshes",
          "Zbrush Config",
          "Installing Brushes"
        ],
        "Zbrush Character Blockin": [
          "Anatomy First Pass",
          "Torso Armor Blockin",
          "Armor Blockin Timelapse",
          "Arms Blockin",
          "Gauntlets Blockin",
          "Head and Hair Blockin Part 01",
          "Head and Hair Blockin Part 02",
          "Shin and Boots Blockin",
          "Full Body and Cape Blockin",
          "Helmet Blockin",
          "Shin Straps Blockin Cont'd",
          "Shoulder Pad and Blockin Complete"
        ],
        "Zbrush Character Polish": [
          "Boot Sole Polish",
          "Boot Polish",
          "Shin Guard Polish",
          "Shin Straps Polish",
          "zModeling the Shin Armor",
          "Placing the Shin Armor",
          "Pants Polish Part 01",
          "Pants Polish Part 02",
          "Skirt and Belt Polish",
          "Torso Armor Polish Part 01",
          "Torso Armor Polish Part 02",
          "Arm Gauntlets Polish",
          "Shoulder Pad Polish"
        ],
        "Zbrush Character Polish Cont'd": [
          "Hand Anatomy Polish",
          "Arm Anatomy Polish",
          "Face Polish",
          "Beard Polish",
          "Hair Polish",
          "Cape Polish"
        ],
        "BONUS LECTURE & NEXT STEPS": [
          "BONUS/Additional Courses from Class Creatives"
        ]
      },
      "requirements": [
        "Zbrush 2019 with minimum version of Zbrush 4R7 is required.",
        "Prior Knowledge of the first Class Creative's Character Creation course is needed.",
        "Beginner level knowledge of any version of Zbrush is highly required."
      ],
      "description": "Hi there! Welcome, and thanks for choosing Class Creative’s Stylized Game Art: Character Sculpting for Video Games | Modern Nextgen Fundamental Workflow Development | Thor Overwatch Style!!\nIn this foundational course, we will be learning the fundamentals of Character Sculpting within Zbrush!!\nPlease note that we will start this course with a pre-made base mesh since this is considered an intermediate level course offering.  We cover the base mesh creation process in some of our beginner courses which you can find on our Udemy profile!\nWhat students are saying about this stylized character sculpting course:\n\"Very powerful course, the instructor is very knowledgeable.\" - Fotis Megas\n\"It helped me to consolidate knowledge that I already knew and to collect other tips and tricks to take into account in my future\" - Alejandro\nWhy Learn From Class Creatives?\nOver 20 years of professional industry experience and nearly a decade of accredited university level instruction. Instructors featured from Studios such as Walt Disney Animation Studios, Walt Disney Television, Google, Nintendo, Naughty Dog, Insomniac, Sony Computer Ent, Sucker Punch, Guerrilla Games, Infinity Ward, and more!\nWho This Course is For:\nThe great thing about this course is that we have something in store for everyone. Whether you are just a beginner interested in Character Creation, or a Master professional looking to brush up on your current skill set, this course has material you surely won’t want to miss!\nAs with all Class Creative’s courses, we’ve laid out a structure that covers the full spectrum of industry-standard character workflows from start to finish.\nPlease remember, if this is your first time creating a 3D character, we highly recommend that you follow the outline carefully, according to how our instructors have structured the course. We wouldn’t want you to miss out on any details!\nHowever, if you are an advanced user and are looking for something specific to add to your repertoire feel free to dive in and skip to any sections you’d like to focus on.",
      "target_audience": [
        "Developers who want to add game development to their skill-set.",
        "Anyone with a passion for learning game development.",
        "Anyone who wants the ability to create assets for games."
      ]
    },
    {
      "title": "Unity Game Tutorial: Black Jack - Card Game",
      "url": "https://www.udemy.com/course/unity-game-tutorial-black-jack-card-game/",
      "bio": "Learn how to create your own Black Jack Card Game using the Unity Game Engine.",
      "objectives": [
        "How to create a Black Jack Card Game in Unity.",
        "C# basics - working with Lists, Arrays, Classes, Strings, Integers",
        "Working with Unity and put all together.",
        "Working UI Elements, Prefabs and more.",
        "Learn to code with C# to create needed Game Logic."
      ],
      "course_content": {
        "Introduction & Basics": [
          "Black Jack - Introduction",
          "Black Jack - Conzept",
          "Black Jack - Unity Basics"
        ],
        "Black Jack - Preparation": [
          "Black Jack - Import & Setup Texture",
          "Black Jack - Background & Canvas",
          "Black Jack - The Card Prefab",
          "Black Jack - The Player Hand",
          "Black Jack - The Dealer Hand"
        ],
        "Black Jack - Core Content": [
          "Black Jack - The Card Script",
          "Black Jack - Card Prefab Update",
          "Black Jack - Card Number & Points",
          "Black Jack - Card Deck",
          "Black Jack - Card Deck Shuffle",
          "Black Jack - Shuffle Explained",
          "Black Jack - Hand Out Cards",
          "Black Jack - Hand Out Multiple Cards",
          "Black Jack - Hide Dealer Cards",
          "Black Jack - The GameManager 1",
          "Black Jack - The GameManager 2",
          "Black Jack - Counting Card Points",
          "Black Jack - Drawing Cards",
          "Black Jack - Game Loop Explained"
        ],
        "Black Jack - Betting System": [
          "Black Jack - Betting System 1",
          "Black Jack - Betting System 2",
          "Black Jack - Betting Panel"
        ],
        "Black Jack - AI": [
          "Black Jack - AI Explaination",
          "Black Jack - AI Turn 1",
          "Black Jack - Button Settings"
        ],
        "Black Jack - Round Result": [
          "Black Jack - Round Result 1",
          "Black Jack - Round Result 2",
          "Black Jack - Round Result 3",
          "Black Jack - New Round Delay"
        ],
        "Black Jack - Message System": [
          "Black Jack - The Message System",
          "Black Jack - Create Messages",
          "Black Jack - More Messages"
        ],
        "Black Jack - Menu & Game Over": [
          "Black Jack - Game Over",
          "Black Jack - Menu Scene",
          "Black Jack - Bug Fixing",
          "Black Jack - Handling the Ace"
        ],
        "Black Jack - Conclusion": [
          "Conclusion"
        ]
      },
      "requirements": [
        "Basic Knowledge about Unity is always a plus, but not neccessary.",
        "Basic Knowledge about C# can help.",
        "PC, Mouse, Keyboard",
        "The mood to learn and complete the course."
      ],
      "description": "In this Unity Video Course you will learn how to create your own Black Jack - Card Game using the Unity Game Engine. For the functionality we write C# Code in Visual Studio  Code or which ever IDE you choose.\nThis course is a Beginner course, so if you have trouble in any case, write me a message or Q&A, and i'll help as best as i can.\nUnity (2021.3.3f1 used in this course)\nYou will learn to create a new Project in Unity and set up everything needed\nI will show you how you can setup cards\nI will show you to interact with Buttons,\nWe talk about how the \"game loop\" and \"AI\" works\nC#\nWe will put in functionality with scripts using Visual Studio Code and C# (you can use any other IDE)\nWe create a Card Deck and learn how to shuffle that\nWe create the game logic and all needed Prefabs\nWe use Text Mesh Pro for beautyful font visuals\nWe create a Betting System - so the player can bet on the next round\nWe create a Message System - to let the Player know what to do or what happends\nWe create a simple AI to play against\nConclusion\nAs a result of this course you should be able to create your own levels with different categories to choose.\nIn the end of this course you will have a fully functional Black Jack - Card Game.\nCourse Material\n1  Texture Atlas with:\nCard Back and Front\nIcons with Spades, Clubs, Diamonds and Hearts\n1  Background\nYou have to write the code on your own, i do not provide the final scripts!\nThe Course Material is for education purposes only, so if you want to release your own game, create your own grafics for that. All Materials i provide are for education only and should not be in your final release!\nChallenge\nAfter you have created nice Menus, Buttons, and maybe additional content, upload the Game to any Gaming Website, Google Playstore, Apple Store or even Windows Store or Steam.\nSo what are you waiting for?\nLet's make your dream game a reality!!\nLevel: Beginner+\nVideo Course Length: ~6h 12mins\nUnity Version required: 5.6+",
      "target_audience": [
        "People you love to create games.",
        "People who are new to Unity / C#.",
        "Card Game lovers who want to learn how Card Games can be created.",
        "Unity Hobbiest who want to learn how Black Jack can be created."
      ]
    },
    {
      "title": "JavaScript Create 5 Fun Word Games make your own Web Games",
      "url": "https://www.udemy.com/course/javascript-games/",
      "bio": "Do you want to create fun games using JavaScript - build 5 amazing interactive games perfect for kids using JavaScript",
      "objectives": [
        "How to create Games using JavaScript",
        "Create Fun interactive complete games from scratch using JavaScript code",
        "Create a Game using JavaScript code and applying Game Logic",
        "Build a Game from scratch",
        "Create Simple Word based games",
        "Step by step how to build a game from scratch"
      ],
      "course_content": {
        "Word Game Introduction": [
          "Create JavaScript Games - 5 JavaScript Word Games From Scratch Introduction"
        ],
        "Introduction to Word Scramble Game creation using JavaScript": [
          "Introduction to Word Scramble Game from scratch Section overview",
          "How to setup and prep your game environment HTML and CSS",
          "resources and source Code",
          "How to setup game Values Setup Game Start Values",
          "Setup Game HTML JavaScript add event listener Source Code",
          "How to add and Setup Words Game.",
          "Code Snippet JavaScript Randomize Array Contents",
          "How to Scramble the Letters with JavaScript Random Array values",
          "Recursive Function check for word scramble JavaScript code snippet",
          "How to update and add content to WebPages Output Scrambled words to Page.",
          "Update Game input Source Code",
          "How to counter letters in a string with JavaScript Letter Counter.",
          "Source Code Check Winner Game",
          "How to add Scoring and GamePlay to your game with JavaScript",
          "Gameplay adjustments restart code snippet",
          "Final Scrambler Game Tweaks",
          "Final Scramble Word Game Code",
          "Scramble Letters Game Review.",
          "Game Source Code with Adjustments",
          "Google Sheets Data as JSON Updated Code",
          "Source Code Google Sheets data as JSON",
          "How to add a Dynamic WordList from Google sheets to your Game",
          "Source Code - Select Values as JSON from Google Sheet use within your Game",
          "How to have multiple word lists to select from all with dynamic content",
          "Dynamic List of Words Source Code",
          "GamePlay Bug Fixes with List.",
          "Source Code GamePlay Bug Fixes with List"
        ],
        "Secret Word Message Game Uncover the Secret words using number values JavaScript": [
          "Introduction to Secret Words Number decoder Game with JavaScript",
          "How to setup Game board Setup Secret Word.",
          "Source Code and Resources",
          "How to Create Interaction for Player",
          "How to setup gameplay and set coded values Create The Coded Values",
          "Source Code for Game and Resources for Regex",
          "How to provide player messages Output Code to Player.",
          "Source Code content loaded and innerHTML code example",
          "How to use array methods Array Map Shorten Code",
          "Array Map method Code Example",
          "How to Make it into a Game JavaScript Word decoder",
          "Create Game Timer for Game Code Example",
          "Where to setup and how to start the game Setup Game Start.",
          "Create Game from Code -Code Example",
          "Game Flow how to Play the Game",
          "Game Source Code - Tweaks and styling adjustments to game play",
          "How to create interaction Player Inputs",
          "Game Inputs Source Code",
          "How to adjust and tweak the game Gameplay tweaks.",
          "Source Code JavaScript Game updates",
          "How to setup winner Game Win Check.",
          "Game Check for winner Source Code",
          "Debugging and final game tweaks and improvements Final Game Tweaks",
          "Final Numbers to Letters Game source Code",
          "Numbers to Letters Game Conclusion",
          "Final Game Source Code",
          "Code Review for Game"
        ],
        "Hangman word guessing Game from Scratch using JavaScript": [
          "Introduction to JavaScript Hangman Game Solve the word Puzzle to win",
          "JavaScript Hangman Game Board Setup.",
          "How to launch app content when DOM loaded DomContentLoaded Run App",
          "Source Code Example Create App launch Self invoking Function",
          "How to create gameplay in JavaScript hangman game Create GamePlay.",
          "Game Setup Source Code",
          "How to create game start Start the Game Setup.",
          "random Array item and array methods Game options source Code",
          "How to setup and build game Build Player Letters",
          "Build Interactive Elements for Game Source Code",
          "How to check correct guess Check Letters to Word",
          "Source Code Game Elements adding secret letters",
          "How to update player Elements and DOM values Update Hidden Letters",
          "Check conditions for correct answers Source Code",
          "How to add Score and Player Score conditions Scoring of Game.",
          "How to add scoring to your game source Code",
          "How to set Game Win Conditions",
          "Final Game over conditions Code Snippet",
          "Final Code Review",
          "Final Game Source Code"
        ],
        "JavaScript WordSearch Game from scratch": [
          "Introduction to Creating a Dynamic JavaScript Word search Game from Scratch",
          "How to Setup Word Search Board with JavaScript and logic for gameplay",
          "How to Create Add Game Elements to page using document CreateElement Method",
          "Start Game - Source Code",
          "How to generate Game Values and Setup Grid.",
          "How to build the game grid Source Code",
          "How to Add Words to Grid for JavaScript word search game",
          "Source Code",
          "How to apply Game Logic in JavaScript Check for existing Letters",
          "Source Code add letters of words for word search game code snippet",
          "How to Add Words Vertically to Word search Grid with JavaScript code logic",
          "Source Code to place words vertically in word search",
          "How to Fill Game Letters automatically populate and build the wordsearch board",
          "Populate letters in cells track hidden word letter positions source code",
          "How to add a player word list to guide player for remaining words List Words",
          "Source Code",
          "JavaScript Game Review Game Tweaks and Adjustments to WordSearch",
          "Game updates source code",
          "How to add player experience Player Interaction",
          "Create Player interaction Source Code",
          "Game logic how to apply win conditions Check Win Condition",
          "Check Game Winner Source Code",
          "JavaScript Wordsearch Game Final Game Tweaks",
          "Final Game Source Code WordSearch Game Code",
          "Final Game Wordsearch code review and explanations"
        ],
        "JavaScript Quiz Questions - Create a dynamic Quiz with JavaScript JSON data": [
          "Introduction to creating Dynamic Data JavaScript Quiz Games",
          "How to setup Quiz files and source html Setup Dev Environment Files",
          "Live Server and Source Code Resources for upcoming Lessons",
          "How to create a JSON data file for your quiz use AJAX Fetch Create JSON Data",
          "Source Code JavaScript Fetch create JSON file get data code snippet",
          "How to Create Quiz Questions within JSON file for JavaScript Quiz Game",
          "Create JSON data for questions code example",
          "How to generate JavaScript Show question to Player.",
          "Source Code for game play output questions to HTML",
          "How to show quiz questions with JavaScript Gameplay Show Question",
          "Source Code Show Quiz questions and options to Player",
          "How to add eventlisteners to game Add Player Interaction to Game",
          "Create interaction for answers Source Code",
          "How to move to the next Question - Automatic Gameplay next JavaScript",
          "Source Code",
          "How to Add Scoring for Quiz Game.",
          "Source Code Adding Scoreboard to game quiz",
          "Final Game Quiz Tweaks",
          "JavaScript Quiz Game Final Source Code"
        ],
        "JavaScript Regular Expressions and Pattern matching within Strings Email Extract": [
          "Project and Section Source Code",
          "Regular Expression with test method",
          "Regular Expression how to use regexp with JavaScript",
          "Regular Expression JavaScript test and exec methods",
          "Regular Expression with replace and replaceAll in string methods",
          "How to use the search method within JavaScript RegExp",
          "Finding patterns JavaScript regexp",
          "Section project build an email extractor"
        ],
        "JavaScript Coding examples and Code Snippets Answers to common Questions": [
          "JavaScript String Methods with Examples of Common String Methods",
          "JavaScript String Methods Example Code snippets Learn JavaScript Strings",
          "JavaScript Template literals",
          "Source Code Template literals",
          "String WhiteSpace Remover",
          "Coding example String WhiteSpace Remover sample code",
          "How to remove duplicate values from an array",
          "Remove duplicates from an array source code example",
          "How to deep clone an object",
          "Useful guides and downloads"
        ]
      },
      "requirements": [
        "HTML CSS and JavaScript fundamental experience",
        "Use of code editor - code writing"
      ],
      "description": "Explore how YOU can build your own games online using JavaScript. Learn about Game design and steps to create a FULLY functional game start to FINISH\n5 AMAZING PROJECTS YOU CAN BUILD - You won't find this anywhere else - all code is unique and built from scratch.\nJavaScript WORDSEARCH GAME\nDynamic QUIZ from Google Sheet Data\nJavaScript HangMan Game\nJavaScript Number Decoder Game\nWord Scramble with DYNAMIC Word list from Sheets\nCreate your own version of the game in just a few hours - source code included try it and play it NOW\n#1 Javascript Game Word Scramble - Select from multiple Word lists - solve the scrambled word with as little wrong guesses as possible.  Scoring and loading dynamic word lists to create a fully interactive and dynamic game from scratch\nHow to setup and prepare game-board\nGame Values and Variable for word game\nAdd words to Game\nScramble the Letters with JavaScript Random Array values\nUpdate and add content to WebPages Output Scrambled words to Page\nCount letters in a string with JavaScript Letter Counter.\nAdd Scoring and GamePlay to your game with JavaScript\nGame debug and how to tweak and improve the game\nAdd a  Dynamic WordList from Google sheets to your Game\nDynamic Content coming from a Google Sheet - Multiple Word lists\n#2 Javascript Game Word Decoder - Every letter has a number associated with it - player needs to solve the phrase using the number codes to letters.  Words and phrases are dynamically loaded.\nGame board Setup Secret Word\nCreate Interaction for Player\nSetup gameplay and set coded values\nHow to provide player messages Output Code to Player.\nUse of Array methods like map to shorten code\nMake it into a Game JavaScript Word decoder\nCreate Game Flow and Values\nCreate interaction Player Inputs\nStart and End game conditions and logic\nDebugging and final game tweaks and improvements\n#3 Javascript Game Hangman Game - Select Letters solve the phrase - player needs to guess the hidden phrase by clicking the available letters.  Solve it will as little missed letters as possible.\nJavaScript Hangman Game Board Setup.\nLaunch app content when DOM loaded DomContentLoaded Run App DOM is ready to write and create Elements\nAdd game logic step by step  to build JavaScript Hangman\nCreate game start Start the Game Setup.\nSetup and build gameplay adding and Building Player Letters\nUse JavaScript conditions check correct guess Check Letters to Word\nUpdate player Elements and DOM values Update Hidden Letters\nadd Score and Player Score conditions\nset Game Win Conditions and use of JavaScript logic to provide gameplay\n#4 JavaScript Wordsearch - Word searches are fun to play and even more fun to build.  This game section will show you how to create a fully functional word search that fills the grid with as many words as possible hidden in the words and ready for the player to be challenged and solve the puzzle.  Dynamic grid automatically populates the words from your list into it.   You select the size and let JavaScript build the game board.\nSetup Word Search Board with JavaScript and logic for gameplay\nCreate Add Game Elements to page using document CreateElement Method\ngenerate Game Values and Setup Grid.\nAdd Words to Grid for JavaScript word search game\nBuilding the board and calculating the available spots on the grid apply Game Logic in JavaScript Check for existing Letters\nAdd Words Vertically to Word search Grid with JavaScript code logic\nWords horizontally - vertically and reversed letters for 4 possible directions to place the word in the word search grid.\nFill Game Letters automatically populate and build the wordsearch board\nAdd a player word list to guide player for remaining words List Words\nHow to test and debug your JavaScript wordsearch Game\nadd player experience Player Interaction\nCreate a dynamic and flexible game to play\nGame logic how to apply win conditions Check Win Condition\n#5 JavaScript Dynamic Quiz Game - JSON data file driving quiz questions and answers.  Create a simple quiz that gets dynamically generated with JavaScript - creates all the DOM elements and interactions depending on the JSON data.\nHow to setup Quiz files and source html Setup Dev Environment Files\nHow to create a JSON data file for your quiz use AJAX Fetch Create JSON Data\nHow to setup HTTP protocol Localhost - needed for AJAX\nCreate Quiz Questions within JSON file for JavaScript Quiz Game\nCreate Gameplay generate player game screens\nCreate player interactive elements with JavaScript generate DOM elements\nadd eventlisteners to game Add Player Interaction to Game\nPlayer movement move to the next Question - Automatic Gameplay next JavaScript\nAdd Scoring for Quiz Game\nTweaks and debugging of JavaScript Quiz Game\nSource Code included - build your own version of the game\nTaught by an instructor with over 20 years of REAL WORLD experience ready to answer any questions you may have.\nYou have nothing to lose - build your own version of the game HAVE FUN - Join NOW>",
      "target_audience": [
        "Web developers and web designers",
        "Anyone who wants to build fun interactive games",
        "Anyone who wants to build challenging word games",
        "Web masters coders application developers",
        "Coder and game builders",
        "Game developers"
      ]
    },
    {
      "title": "Game Development Masterclass: Make Educational Apps & Games",
      "url": "https://www.udemy.com/course/game-development-masterclass-make-educational-apps-games/",
      "bio": "Build your first app and inspire kids. Make education games with coding & artificial intelligence! Perfect for beginners",
      "objectives": [
        "Learn to apps on Unity",
        "Create education programs in Flutter",
        "Make art assets in Adobe Illustrator",
        "Learn the fundamentals of coding",
        "Build multiple apps",
        "And more!"
      ],
      "course_content": {
        "Why you should learn to code": [
          "Why Make Education Apps",
          "Age Ranges",
          "The Tools you need",
          "The Difference between a Game and an App",
          "How to be a good developer"
        ],
        "Build a Simple Flashcard App": [
          "Starting the Project",
          "Formatting the SVG",
          "Setting up the Animations",
          "Picking the Font",
          "Implementing The font",
          "Testing the App",
          "Downloading Audacity",
          "Adding the Sound",
          "Completing the Project",
          "Source"
        ],
        "Unity - Creating a game in Unity - Intro": [
          "Introduction"
        ],
        "Creating a New Project in Unity": [
          "Unity Installation",
          "Creating a New Project",
          "Meeting Unity"
        ],
        "Coding with C# in Unity": [
          "Your First Script",
          "Start and Update",
          "Strings",
          "Numbers",
          "Methods",
          "Conditions"
        ],
        "Building the User Interface in Unity": [
          "Improving Assets",
          "Creating a Canvas",
          "Scaling The Canvas",
          "Stretching Object",
          "Image Slicing",
          "Text Panel",
          "Input Fields",
          "Buttons",
          "Scripting The Welcome Scene",
          "Scene Switching",
          "Menu Scene",
          "Adding New Buttons",
          "Layout"
        ],
        "Adding Game Operations": [
          "Game Scene",
          "Quit Button",
          "Creating Puzzles",
          "Loading Operation Signs",
          "Randomly Generated Questions",
          "Saving Answers on Buttons",
          "Changing Sprites",
          "Correct and Wrong Feedback",
          "Game Flow",
          "Adding Reinforcement Button",
          "Reinforcement Setup",
          "Finishing Reinforcement Mode",
          "Moving Back to the Welcome Screen",
          "Sprite Adjustments",
          "Challenge"
        ],
        "Source Code and Art Assets - Mammoth Interactive": [
          "Assets",
          "Source"
        ],
        "Build and Education App in Flutter.io": [
          "Intro to Short Flutter Course",
          "Flutter SDK"
        ],
        "Beginner's Guide to Flutter": [
          "Intro to Flutter",
          "Installing Android Studio",
          "Installing the Flutter SDK",
          "Exploring Android Studio Flutter",
          "Running First Flutter App",
          "Exploring your First Flutter App",
          "Intro to Flutter Slides"
        ]
      },
      "requirements": [
        "A working computer onto which you can install Kotlin and Android Studio",
        "Java coding skills are helpful but not required"
      ],
      "description": "This course was funded through a massively successful Kickstarter campaign.\nThe mobile app market will be worth $188.9 billion in 2020. The market is just begging for you to make an app. Not a lot of developers make education apps, so there is less supply.\nIf you build an education app that helps a group of people, the chances of big success are higher than a regular app’s. Everyone in that group will share your app and provide an audience.\nThe Best Coding Course: Make Your First Education App\nBuild education games with coding & artificial intelligence. Learn to program step by step in this academy of tutorials for beginners.\nWe at Mammoth Interactive take anyone with no experience and show you step by step how to finish a project.\nWe teach you the functional (coding) and design (art) sides of the process, so you are a well-rounded app and game developer. We’ve been making online courses since 2011, with over 700,000 students in 186 countries.\nCOURSE GOALS\nIf you child is succeeding at school, you can get them to learn ahead. You can make an app that challenges them. If your child has a learning disability you can make apps to help them.\nCOURSE BREAKDOWN\nGame Development Masterclass: Make Educational Apps & Games\nSECTION 1: WHY YOU SHOULD LEARN TO CODE\nLearn why you should build apps for your kids or kids you know or for some need.\nLearn about passive income and how you can maximize your spare time by learning a new in demand skill, helping your child, helping other kids, and making some money on the side.\nSECTION 2: BUILD AN EDUCATION GAME IN CONSTRUCT 3\nLearn how Construct 3 works.\nUnderstand why Construct 3 is the best place for beginner game developers to start.\nLearn how C3 differs from the rest of the topics in this course bundle.\nMake a beginner game from zero to hero.\nAdd artificial intelligence (AI) to improve learning.\nLearn how to implement art and assets.\nSECTION 3: BUILD A GAME IN UNITY\nLearn how to build a simple education game in Unity.\nLearn the ins and outs of coding and Unity’s workflow.\nSECTION 4: BUILD A SIMPLE EDUCATION APP IN FLUTTER.IO\nLearn an easy way to make cross-platform apps.\nLearn all about creating apps with code in more detail than any YouTube tutorial.\nUnderstand the differences between games and apps. Each serves a different purpose, down to the design and usability aspects of your project.\nLEVEL V: ART ASSETS IN ADOBE ILLUSTRATOR\nLearn how to make minimalist and clean designs for your apps and games.\nJohn and Dyslexia: Inspired to Make Games\nOur CEO John Bura had dyslexia growing up, and if there was an app out there that could help him succeed more in school, he’d have been grateful. Now it’s your turn to make the next app to help the world.\nABOUT MAMMOTH INTERACTIVE\nMammoth interactive is the only company that decides that art creation is as important as code creation. Because if you are making an app by yourself, it’s easier for you to make the art for the app than to outsource it or have a friend do it. Your app will be in the store and hands of customers much quicker if you learn these basic steps.\nWe at Mammoth Interactive take anyone with no experience and show you step by step how to finish a project.\nWe teach you the functional (coding) and design (art) sides of the process, so you are a well-rounded app and game developer. We’ve been making online courses since 2011, with over 600,000 students in 186 countries.\nREVIEWS OF MAMMOTH INTERACTIVE\n\"Captivating voice, easy to follow at a rapid pace, get some paper and fasten your seat-belts. I'm enjoying every second of this. Literally, I bought this course for specific lectures of the Python + Tensorflow aspects, and after 2 hours I already know way more than after 10 hours of the Zero-to-Deep-Learning.\" - Philip Murray\n\"This course is a great way to get introduced to coding and bringing the game together from a full SLDC stance. The instructors are responsive, and the Q&A sections are extremely helpful. 100% worth the time invested to learn through this course.\" - Derek Hass\n\"Incredible course. Looking forward for more content like this. Thank you and good job.\" - Joniel Gallo\nEnroll now to join the Mammoth community!",
      "target_audience": [
        "Stay-at-Home Parents",
        "People who wish to make educational Apps for kids"
      ]
    },
    {
      "title": "Best UE5 Beginners Course: Create Your First Project",
      "url": "https://www.udemy.com/course/best-ue5-beginners-course-create-your-first-project/",
      "bio": "Master the Basics of Unreal Engine with Hands-On Projects and Challenges for Newcomers",
      "objectives": [
        "Familiarity with the Unreal Engine editor & interface",
        "Ability to create your own custom materials",
        "Understand how to work with audio and effects",
        "Complete an entire scene from concept to a fully designed level",
        "Understand how to work with features including the landscape and water plugin",
        "Explore the Unreal Engine Framework",
        "Implement basic Blueprint functionality"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Epic Launcher": [
          "Epic Launcher Download",
          "Epic Launcher Overview",
          "Unreal Engine Versions"
        ],
        "First Project": [
          "First Project",
          "Editor Basics",
          "Exploring the Editor",
          "Challenge - Editor Navigtion",
          "Creating Levels",
          "Working with Geometric Shapes",
          "Challenge 2 - Knowledge Check",
          "Challenge 2 - Knowledge Check - Solution (No Cheating!!)"
        ],
        "Project Management and Assets": [
          "Editor Preferences",
          "Importing Assets",
          "Fab",
          "Unreal Marketplace",
          "Migrating Assets",
          "Quixel",
          "OPTIONAL/EXTRA - Custom Template",
          "Challenge - Projects"
        ],
        "Materials": [
          "Material Overview",
          "Creating Materials",
          "Challenge - Different Materials",
          "Textured Materials",
          "Material Instances",
          "Challenge - Different Instances"
        ],
        "Level Design": [
          "Importing Level Assets",
          "Terrain / Landscape",
          "Landscape Material Basics",
          "Landscape Material Improvements",
          "Water Plugin",
          "Level Design - Part 1/2",
          "Level Design - Part 2/2",
          "Landscape Painting",
          "Foliage",
          "Set Dressing & Polish",
          "Lighting & Atmosphere",
          "Migrating Our Final Assets",
          "Challenge - Level Design"
        ],
        "Features & Functionality": [
          "Working With Audio",
          "Niagara Particles",
          "Blueprint Lantern",
          "Blueprint Door",
          "Lantern Functionality",
          "Door Functionality",
          "First Person Character",
          "Flame Pickup",
          "Character Interaction",
          "Challenge - Lantern Interaction",
          "Lantern Challenge Breakdown",
          "Challenge - Door Communication",
          "Door Challenge Breakdown"
        ]
      },
      "requirements": [
        "No experience necessary. Everything is covered from installing Unreal all the way through to completing your first interactive experience."
      ],
      "description": "Unlock the power of Unreal Engine with this comprehensive beginner’s course. Designed specifically for those new to game development, this course guides you through every step, from installing the engine to creating fully interactive levels. Unlike traditional tutorials that simply ask you to follow along, our unique approach includes practical exercises and challenges to reinforce your learning. This ensures you not only understand the ‘how’ but also the ‘why’ behind each step.\nThroughout the course, you’ll explore the core features of Unreal Engine, gaining hands-on experience with its powerful tools. You’ll start by learning how to install and set up the engine, then move on to creating and customizing your own levels. Each module is designed to build on the previous one, gradually increasing in complexity to help you develop a solid foundation in game development.\nOne of the standout features of this course is the inclusion of interactive exercises and challenges. These are designed to test your understanding and help you apply what you’ve learned in a practical context. By the end of the course, you’ll have created a fully interactive level, complete with custom elements and features.\nWhether you’re looking to start a career in game development or simply want to explore a new hobby, this course provides the perfect introduction to Unreal Engine. With clear, step-by-step instructions and plenty of opportunities for hands-on practice, you’ll gain the skills and confidence needed to create your own custom levels. Join us today and take the first step on your game development journey!",
      "target_audience": [
        "Beginner game developers interested in learning all of the core Unreal Engine features"
      ]
    },
    {
      "title": "2D Archery Game In Unity 3D",
      "url": "https://www.udemy.com/course/2d-archery-game-in-unity-3d/",
      "bio": "Learn how to use Unity 3D game engine to design 2D Archery games",
      "objectives": [
        "Basic work with Illustrator and Photoshop and Setting bow and arrow in Illustrator and Photoshop",
        "Setting sprites (slice and rename) in Unity 3D",
        "Working with LineRenderer component and set it's parameters",
        "Creating a bowstring and change it with arrow position",
        "Creating an arrow and set it for Move and Fire",
        "Release the arrow",
        "Rotate the bow",
        "Set the sounds (Drawing, High Fire, Low Fire, and Fizzle)"
      ],
      "course_content": {},
      "requirements": [
        "A basic knowledge of Illustrator (or Corel Draw) and Photoshop",
        "A basic knowledge of Unity 3D and its interface",
        "Not important Unity version, but It's better to use Unity3d 2017 or higher.",
        "A beginner level understanding of C#",
        "Love to making games!"
      ],
      "description": "One of the most popular game styles, especially among mobile games are archery games. Using Unity game engine’s features, you can easily design and simulate such games.\nIn this course, you will learn how to use Unity game engine to design 2D Archery games.\nThis chapter (Chapter 01) includes topics like preparation of bow and arrow in some software like Illustrator, Photoshop, and Unity3d; defining zones, regions, and auxiliary points; simulating bowstring movement; creating arrows; calculating arrow position; shooting a bow; and arrow drop in the game environment.",
      "target_audience": [
        "A beginner to intermediate Unity user",
        "A unity user who would like to gain a better understanding of Unity's Sprite, LineRenderer, physics, and etc.",
        "Anyone who is interested in wanting to build a 2D archery game in Unity",
        "A beginning Unity user who wants to know more about editor scripting"
      ]
    },
    {
      "title": "Substance Designer - Intro to FX Maps",
      "url": "https://www.udemy.com/course/substance-designer-intro-to-fx-maps/",
      "bio": "Making Procedural / Animated Noises and Masks that can be reused in a variety of materials.",
      "objectives": [
        "Build your own procedural noises and animated masks that can then be reused from the Substance Library"
      ],
      "course_content": {
        "Making Masks & Noises with FX Maps": [
          "FX Map Basics",
          "Scratches FX Map & Input Image",
          "Animated FX Map",
          "Using Gradient Maps to Create Color ID & Grayscale Masks",
          "Material Blends & Multi-Material Blends"
        ]
      },
      "requirements": [
        "You should have a good working knowledge of basic Substance Designer concepts."
      ],
      "description": "This series is all about FX Map nodes and how they can be used for more than just making procedural noises.\nWe start with the basics, learning about the FX Map node and exactly how it works. In the second video we dive right in to making an FX Map-driven animated mask.\nFirst we'll start with a simple scratches noise that will be part of a custom image we'll animate with a second FX Map. Once we've got our FX Map animation running, we'll take a look at the Gradient Map node as a way of making both grayscale and color masks that can be used for blending materials. Finally, we'll take a brief look at the Material Blend and Multi-Material Blend nodes to see exactly how the mask we've stored in our Substance Library can be reused to make a variety of different animated materials.",
      "target_audience": [
        "Anyone who wants to learn how to make their own custom noises and procedural masks in Substance Designer"
      ]
    },
    {
      "title": "Unity and MySQL Connection",
      "url": "https://www.udemy.com/course/unity-and-mysql-connection/",
      "bio": "Create a login & registration system for your game",
      "objectives": [
        "How to download and use mysql connector library in Unity",
        "How to create tables and columns in the database",
        "How to read information from the database in Unity",
        "How to add a new information to database tables in Unity",
        "How to edit the information in the database using Unity",
        "How to delete information in the database using Unity",
        "How to create a registration form in Unity",
        "How to work with UI in Unity",
        "How to validate email in Unity",
        "How to validate a password in Unity",
        "How to encrypt a password in Unity",
        "How to move between different scenes in Unity",
        "How to display database errors in Unity"
      ],
      "course_content": {
        "Introduction": [
          "How to download and use mysql connector library",
          "Read information from database",
          "Add new information or edit and delete existing information in the database",
          "Create a registration form in Unity with Unity UI",
          "Validate fields, encrypt password, and store information in a database"
        ]
      },
      "requirements": [
        "Basic Knowledge of MySQL Database",
        "Basic Knowledge of Unity Game Engine",
        "A Free Software Such as Wamp, Xampp, or Laragon for Simulate the Server"
      ],
      "description": "One of the most widely used topics in Unity engine building is the ability to connect to various databases, especially the mysql database. This course will address this issue in detail.\nIn this tutorial you will learn how to use the Mysql connector library to connect the Unity game engine to the mysql database.\nIn the first lesson, you will get acquainted with different versions of this library. In addition, you will be taught how to download and use this library.\nAt the end of the first lesson, you will learn how to create a new database, new table, and table columns in mysql.\nIn the second lesson, using the library, we retrieve the information from the database and display it in Unity.\nIn this lesson, you will also get acquainted with the query related to reading information from the database.\nIn the third lesson we will teach you how to add information to the database or edit or delete existing information.\nThe fourth lesson itself is divided into two parts.\nIn the first part, we will prepare the UI for the registration form in Unity.\nAnd in the second part of this lesson, topics such as: email and password validation using the Regex class, password encoding in MD5 format, storing information in the database, as well as switching between different scenes are discussed.",
      "target_audience": [
        "Game Developers",
        "Tech Oriented People",
        "Software Engineers",
        "Freelancers"
      ]
    },
    {
      "title": "Learn Unity & Game Dev: Code, Design, and Create Like a Pro!",
      "url": "https://www.udemy.com/course/unity3d-indie-basics/",
      "bio": "Master Unity Game Development: Learn C#, 3D Art, Texturing, and Game Design from Scratch! (2025 UPDATE)",
      "objectives": [
        "You will know how to work unity, textures, models, terrain, water, and materials.",
        "Master Unity’s interface and tools with ease, including working with textures, models, terrain, water, and materials",
        "Apply C# programming to create game mechanics, interactive environments, and unique player experiences",
        "Design 3D objects, environments, and lighting to create realistic or stylized worlds",
        "Use terrain editing and advanced materials to enhance the visual appeal of your game",
        "Implement water, dynamic lighting, and shadows to bring your scenes to life",
        "Create custom models and textures to give your game a unique style"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Prerequisites"
        ],
        "Learning Unity": [
          "Basic controls",
          "Getting the right layout",
          "Placing, moving, rotating, and scaling objects.",
          "Terrain painting and creation",
          "Materials",
          "Custom terrrain textures"
        ],
        "Models": [
          "Creating a model and porting to unity"
        ],
        "Programming": [
          "C# Basics",
          "Applying what we have learned"
        ]
      },
      "requirements": [
        "Basic computer knowledge.",
        "A computer that can run Unity."
      ],
      "description": "Master Unity & Game Development – Code, Design, and Launch Your Indie Games!\n\n\nHave you ever dreamed of making your own video games but felt overwhelmed by coding, game design, or 3D modeling? You're not alone. Most aspiring game developers struggle to find a course that covers everything they need—until now.\n\n\nThis all-in-one Unity course will take you from beginner to indie game developer, even if you've never written a line of code before. You'll learn C# programming, Unity 3D game development, basic 3D modeling, and texturing—everything needed to bring your game ideas to life.\n\n\nWhat you'll learn:\nLearn Unity and C# step by step, no prior experience required\nCreate real games while learning essential coding skills\nMaster 3D modeling and texturing basics to design your own game assets\nBuild a strong portfolio to showcase your work\nTurn your passion into a career and even start making money with your games\nUnderstand game mechanics, physics, and UI to create immersive experiences\nWork on hands-on projects to reinforce learning and gain real-world experience\nLearn how to optimize performance and polish your games for a professional look\nDiscover industry tips and best practices to improve your development workflow\n\n\nWith lifetime access and step-by-step guidance, you’ll gain the skills and confidence to build and publish your own games. Don’t wait—start your game development journey today.",
      "target_audience": [
        "Any begginner that wants to be able to create indie games with Unity."
      ]
    },
    {
      "title": "Creating a Text Adventure in Unity Using Scriptable Objects",
      "url": "https://www.udemy.com/course/creating-a-text-adventure-in-unity-using-scriptable-objects/",
      "bio": "Learn Unity scriptable objects from a 40 year programming veteran creating the Castle Buttercup text adventure",
      "objectives": [
        "How to create and use scriptable objects in Unity to mange game data quickly and easily",
        "The advantages of using scriptable objects to manage game data over traditional coding",
        "How to create a text adventure using both scriptable objects and traditional coding approaches",
        "Use cases for scriptable objects in Unity game development"
      ],
      "course_content": {
        "Getting Started": [
          "Introduction",
          "Installing Unity",
          "Create the Project",
          "Set Up User Interface",
          "Get Course Resources",
          "Course Resource Files",
          "Review Course Resource Files"
        ],
        "Creating the Text Adventure Using the Old School Coding Approach": [
          "Create OldSchoolGameLogic Script",
          "Add Navigation Logic to OldSchoolGameLogic Script",
          "Add Story Segment Functions to OldSchoolGameLogic Script",
          "Test and Review the Old School Coding Approach"
        ],
        "Creating the Text Adventure Using the New School Scriptable Objects Approach": [
          "Create Scriptable Objects and Add Story Text",
          "Add Navigation to Scriptable Objects",
          "Create NewSchoolGameLogic Script",
          "Add Navigation to NewSchoolGameLogic Script",
          "Test and Review the New School Scriptable Objects Approach"
        ],
        "Finishing Up": [
          "Build Application",
          "Conclusion",
          "Project Files"
        ]
      },
      "requirements": [
        "No Unity or programming experience needed. You just follow what the instructor does"
      ],
      "description": "All software and resources used in this course are free.\n\n\nIn this course, you will learn from an instructor with 40 years application development experience the advantages of using scriptable objects to manage game data over traditional coding.  You will create a short, humorous text adventure called Castle Buttercup first using traditional coding to manage game data and again using scriptable objects to do the same thing much more quickly and easily.  No unity or programming experience needed.  All you need to do is follow what the instructor does.  This is what you will learn in the course.\n- How to download, install and configure Unity and Visual Studio for C#\n- How to use the different panes in the Unity editor\n- How to create a canvas\n- How to create a panel\n- How to create Text Mesh Pro objects\n- How to create a simple user interface for a text adventure\n- How to assign objects to public variables\n- How to create a text adventure using traditional coding only\n- How to create a text adventure using scriptable objects\n- How to create and assign scripts to objects\n- How to create and populate scriptable objects\n- How to add a scriptable object to a project in the Unity editor\n- How to create scriptable objects within scriptable objects\n- How to investigate and resolve errors\n- How to test the application throughout the development process\n- How to build the application into a stand alone, executable program",
      "target_audience": [
        "Unity game developers looking for a quick, easy way to manage game data",
        "Anyone wanting to learn how to create a text adventure in Unity quickly and easily"
      ]
    },
    {
      "title": "PixiJS The Complete Guide For HTML5 Game Development (2022)",
      "url": "https://www.udemy.com/course/pixijs-course/",
      "bio": "Learn HTML5 Game Development By Building Games",
      "objectives": [
        "Learn Basics Of PixiJS",
        "Learn Building Games With PixiJS",
        "Build Game Animations",
        "Fundamentals of Game Development"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Guide"
        ],
        "Installations": [
          "Installation and Setup",
          "Note",
          "Sample Application"
        ],
        "Basic Topics": [
          "Loader",
          "Textures and Sprites",
          "Animated Sprites",
          "Ticker"
        ],
        "Useful Properties": [
          "Anchor and Rotation",
          "Masks"
        ],
        "Updates": [
          "Content Updates"
        ]
      },
      "requirements": [
        "Basic JavaScript Knowledge is Required",
        "Typescript knowledge not required"
      ],
      "description": "Hey Everyone,\nWe have designed this course for complete beginners who wants to learn PixiJS which is a Rendering Engine that helps to render games on 60FPS.\nPixiJS: PixiJS is a rendering library that will allow you to create rich, interactive graphics, cross-platform applications, and games without having to dive into the WebGL API or deal with browser and device compatibility.\nPixiJS has full WebGL support and seamlessly falls back to HTML5's canvas if needed. As a framework, PixiJS is a fantastic tool for authoring interactive content, especially with the move away from Adobe Flash in recent years. Use it for your graphics-rich, interactive websites, applications, and HTML5 games. Out-of-the-box cross-platform compatibility and graceful degradation mean you have less work to do and have more fun doing it! If you want to create polished and refined experiences relatively quickly, without delving into dense, low-level code, all while avoiding the headaches of browser inconsistencies, then sprinkle your next project with some PixiJS magic!\n\n\nWe will be using Typescript for development and even if you don't know Typescript, you will still be able to understand everything and you will love this course.\nAbout Typescript: TypeScript is a language for application-scale JavaScript. TypeScript adds optional types to JavaScript that support tools for large-scale JavaScript Applications\n\n\nAnd we will be using webpack which is a module bundler that will help us to compile Typescript to JavaScript instantly and helps to auto-reload on file saves.\n\n\nYou will learn\nHow to Build Games With PixiJS\nHow to Animate Objects with PixiJS\nLearn Basic Topics\nLearn All Fundamentals of PixiJS\nLearn to Implement Games and Real Life Scenarios with PixiJS.\nSo now it's too much intro, let's start!!",
      "target_audience": [
        "Beginner Web Developers Who Wants To Learn HTML5 Game Development With PixiJS"
      ]
    },
    {
      "title": "Intro to Python: Learn while developing a pac-man game",
      "url": "https://www.udemy.com/course/python-102-developing-a-text-based-pac-man-game/",
      "bio": "Get more fluent in Python by coding a simple game",
      "objectives": [
        "Get more fluent with Python through a series of coding lectures",
        "Understand and use the main language constructors, such as ifs, for and while loops",
        "Develop and manipulate more complex data structures to support the game",
        "Learn the basics of automated testing",
        "Understand how a professional programmers thinks when programming"
      ],
      "course_content": {
        "Building a pac-man game!": [
          "An introduction to Python 102!",
          "Our first decision: the game map",
          "Finding the pacman in the map",
          "Our first automated test",
          "Moving the pacman to another position",
          "Our first interface with the user",
          "Move the pacman based on the keys of the keyboard",
          "Checking for illegal moves, part 1",
          "Checking for illegal moves, part 2",
          "Did we win the game?",
          "The main loop, part 1",
          "The main loop, part 2",
          "Moving the ghosts, part 1",
          "Moving the ghosts, part 2",
          "Improving the user interface a bit"
        ],
        "Revisiting the solution and conclusions": [
          "Revisiting the entire code",
          "It's time to say good bye!"
        ]
      },
      "requirements": [
        "Basic knowledge of Python."
      ],
      "description": "Did you just learn how to program in Python and needs to practice a bit more? Are you looking for some mildly complex project to challenge your skills? In this Python 102 course, we'll implement a text-based pac-game together, from scratch. Throughout the videos, we'll go together through all the challenges of implementing a game (how to design the map, how to move the characters, how to understand that the game is over) while exercising all the basics of the Python language.\nThis entire course is basically a live coding session. You will see:\nHow to create simple data structures to store things like the map and game points\nHow to write complex ifs to take the different game decisions\nHow to properly use loops, e.g., to control the main game loop\nHow to get data from the keyboard and react to it\nHow to test your program using basic automated unit testing\nHow to make mistakes, understand why your program is failing, and how to learn from the mistakes\nI speak out loud every step I take, including my mistakes. In the end of every video, you are asked to implement the pac-man yourself. Did you get lost? No worries, you can find the source code of the game at every point in time in the resources of the course.\nIf you are looking for a nice way to reinforce your recently acquired Python skills, this is the course for you!",
      "target_audience": [
        "Beginner Python developers that want to get more fluent with programming"
      ]
    },
    {
      "title": "Full Guide To Unity 3D & C#: Learn To Code Making 3D Games",
      "url": "https://www.udemy.com/course/ultimate-guide-to-c-unity-3d-learn-to-code-making-3d-game/",
      "bio": "Learn Unity 3D Engine (2024) and C# Programing By Creating A Fun 3D Rocket Ship Platformer Using Unity 3D Physics",
      "objectives": [
        "Learn the fundamentals of C#. Variables, \"if\" statements, Arrays and creating an object oriented structure. No prior programming experience necessary.",
        "Create a Rocket Ship in 3D with sounds effects, flying abilities, adjustable rotation speed, and particle effects like flames and explosions to conquer the Space Bound around it",
        "Develop NINJA like skills in Unity 3D by Implementing sound effects (SFX), animations, scene lighting, and Cinemachine. And creating levels with 3D game objects",
        "Become a professional programmer by learning \"Version Control\" a tool used by expert engineers. Not only in game development but in all programming based projects.",
        "Build a solid foundation of Game design and Level design by understanding what player experience means and how to create enjoyable and fun levels for anyone looking to play your game",
        "Master the art of problem solving when it comes to game development. By understanding what obstacles you may face and the many ways to research and find solutions for each.",
        "Build Transferable coding skills from this course into any programming language you choose. Like JAVA, JavaScript, Python, C++ and any other object oriented language",
        "Flex your \"Game Developer\" muscles by completing challenges presented to you every video. Enhancing your learning experience and adding your own flavor into the project."
      ],
      "course_content": {
        "Introduction & Setup": [
          "Why You Should Buy This Course",
          "Download Unity & Visual Studio Step-by-Step",
          "Unity & Visual Studio 101",
          "Your First Code"
        ],
        "Magic Shapes 3D - C# and Unity 3D Basics": [
          "Print To Console With Debug.Log()",
          "Variables 101",
          "RigidBodies And Colliders",
          "Prefabs & Basic Input System",
          "If-Else Statements",
          "Arrays & Loops",
          "Creating Chaos",
          "Public Methods & Return Types"
        ],
        "Space Bound Rocket Ship 3D - Creating Our Rocket Ship": [
          "Introduction To Version Control",
          "Shaping Our Rocket Ship",
          "Basic Rocket Inputs",
          "Flying Our Rocket Ship",
          "Rotating Our Rocket Ship",
          "Adding Audio",
          "Solving Movement Bugs",
          "Designers Inspector"
        ],
        "Space Bound Rocket Ship 3D - Level Design": [
          "Using Tags On GameObjects",
          "Level Design 101",
          "Level Design Tuning",
          "Making A Second Level",
          "Prefabs In More Details",
          "Level Loading & Scene Management",
          "Using Coroutines",
          "Level Debug Keys",
          "Looping Through Levels"
        ],
        "Space Bound Rocket Ship 3D - Advanced Rocket Ship Design": [
          "Adding Multiple SFX",
          "Particle Effects 101",
          "Cinemachine Follow Camera",
          "Adding A HealthBar (part 1)",
          "Adding A HealthBar (part 2)",
          "Adding Shaky Cam"
        ],
        "Space Bound Rocket Ship 3D - Advanced Level Design": [
          "Animating Obstacles",
          "Lighting Our Scenes",
          "Making Game Moments",
          "Turning UI On & Off",
          "Creating Title Menu (part 1)",
          "Creating Title Menu (part 2)"
        ]
      },
      "requirements": [
        "A Working Computer or Laptop with minimum requirements to run Unity and Visual Studio (Which aren't too demanding)",
        "The Drive to learn how to create fun 3D games"
      ],
      "description": "This course is made with the latest content and newest technics used in modern Game Development (Unity 2024)\nThe best way to learn anything is by doing it in a really fun way and this is where this course comes from. If you want to learn how all these incredible games you see are made there is no better place to start than this course. We made sure that this course has everything you need to take you from a beginner (even with zero codding experience) and slowly take you to intermediate and finally become a professional.\nThe main project of this course if the Space Bound Rocket Ship 3D and It's the prefect project for students from any level. As it has a ton of options to play around with a discover the ins and outs of Unity Engine, at the same time providing opportunities at every turn to use basic C# coding and advanced C# coding.\nEverything in this course has been meticulously crafted, review and recrafted to provide you with the best experience possible and maximize your learning as much as possible. So not only will you have a great time learning you'll also get the MOST BANG FOR YOUR BUCK by going away from this course with a lot of tools in your arsenal to continue you journey in the wild west of game development.\nSection 1 - Introduction:\nIs where we set everything up. I will take you step by step through the process of downloading Unity, installing it and integrating it with Visual studio. We also talk about how you can use this course and take full advantage of everything in it\nSection 2 - Magic Shapes 3D - Basics of Unity and C#:\nIs where we create the foundation of Unity and C#. If you are new to C3 and Unity and have zero experience this is the perfect place to start as we'll go into everything that we'll need for our future BIG project. You'll learn about the basics of C# such as variables, if statements and arrays while building a fun mini game in Unity to help you get started\nSection 3 - Creating Our Rocket:\nWe begin the process of creating our incredible rocket. We start of by shaping our rocket and you'll create your rocket you can make it whatever your heart desires. We'll learn to fly our rocket based on players Input. We'll also learn to add audio to our rocket and all of that while delving deeper into Unities system and understanding various concepts in C#\nSection 4 - Level Design:\nIs where we start creating our levels. Because every great rocket needs a great Space to fly in. We'll understand the basics of Game Design and how industries look at the basics before before creating levels. We'll understand scene management in Unity and C# and have a fully functioning at the end of the section\nSection 5 - Advanced Rocket Ship Design:\nThis is where we take our rocket to the next level. We add a new dimension to our game with a follow cam. We'll learn about an incredible tool of unlimited creativity called Unity's particle system to help us create explosion effects and flames from our rocket. We'll add even more sound effects. And finally add a health bar to our rocket and have extra game mechanics\nSection 6 - Advanced Level Design:\nWith our new rocket we need new spaces for it to fly in. We'll delve deeper into Unity Engine and learn about lighting our game to make some incredible scenery. We'll learn about animations and apply them to our obstacles to make them more dynamic. And finally we'll create a title Menu for our game with interactable buttons to start off our game\nWhat You Will Learn In This Course:\nDownload and install Unity and Visual Studio\nWhy we need Visual Studio with Unity\nUse Visual Studio with Unity in a simple way\nHow to set a good Game Development environment\nUnity Engine are in a simple and comprehensive way\nThe Basics of C# in the most fun ways possible by creating a game\nUse player input to control the behavior of our game\nAdd different component to game objects\nAdd gravity and other forces to game objects\nMake game objects interact with each other in our game\nCreate a Flying Rocket Ship from basic 3D Shapes\nLearn physics based rotation\nLearn about Unities Particle System\nCreate Explosion effects and flames from our Rocket Ship\nLearn the core of Game Design and what makes levels fun\nCreate multiple levels in game and how to move through them\nUnderstand complex C# coding technics like \"Coroutines\nCreate Debug Keys that allow you to play test your levels fast\nUse Cinemachine a versatile Unity tool to add Follow Camera\nAdd multiple audios to our Game and different ways to do it\nCreate a Health Bar that dynamically changes when Rocket is hit\nShake your camera to create impact forces\nLearn in detail every aspect of lighting in Unity\nUnderstand how to animate to make them rotate, move and translate objects in levels\nCreate an interactable Title Menu with buttons and sliders",
      "target_audience": [
        "Aspiring Game Developers that don't know where to start when it comes to creating games",
        "Young programmers who want to learn the basics of coding in a really fun way by creating their own 3D games using Unity's very simple engine",
        "Anyone who's looking to create a 3D Rockets and doesn't know how to do it easily and efficiently",
        "Game developers that have a solid foundation in Unity but feel they lack enough depth to create a game from A to Z"
      ]
    },
    {
      "title": "Unity Game Course: Brick Breaker 3D",
      "url": "https://www.udemy.com/course/unity-game-course-brick-breaker-3d/",
      "bio": "Learn how to create Break Out / Arcanoid / Brick Breaker 3D with Unity Game Engine.",
      "objectives": [
        "Create a Brick Breaker / Break Out / Arkanoid 3D in Unity",
        "Beginner and Intermediate C# Programming",
        "Physics Rigidbodys and Collisions",
        "Editor Scripting (Advance Topic)"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Brick Breaker Concept": [
          "The Concept of Brick Breaker",
          "Unity Setup"
        ],
        "The Paddle Part 1": [
          "Import 3D Models & Paddle Setup",
          "Paddle Movement"
        ],
        "The Playfield": [
          "Playfield Setup",
          "Automatic Border Setup #1",
          "Automatic Border Setup #2",
          "Automatic Border Setup #3"
        ],
        "The Ball Setup": [
          "Ball Setup",
          "Ball on Paddle Reaction"
        ],
        "The Paddle Part 2": [
          "Resizing the Paddle",
          "Exposing Resize Parameter"
        ],
        "Bricks": [
          "Brick Setup",
          "Brick Script",
          "Destroying Bricks"
        ],
        "Game Flow": [
          "Creating New Balls",
          "Releasing New Ball",
          "Tracking Bricks",
          "Lifes",
          "Reducing Lifes",
          "Reset Paddle Position",
          "Quick Recap"
        ],
        "Score & Lifes": [
          "Score Manager",
          "UI & Show Score",
          "Show Lifes"
        ],
        "Level Designer (Advance Level)": [
          "Intro Level Designer",
          "Scriptable Object Level",
          "Connection to Level",
          "Grid Size Check",
          "Input and Error Handling",
          "Creating the Grid",
          "Display The Grid",
          "Display Grid In Scene",
          "Headers",
          "Brick Sets",
          "Level Designer Final",
          "Ball Start Direction"
        ]
      },
      "requirements": [
        "PC or Mac",
        "Unity 5.6 and over is recommended",
        "The mood to finish the course"
      ],
      "description": "In this Course you'll learn how to create a Break Out / Arcanoid / Brick Breaker 3D with Unity Engine. Those type of games are quite popular since the 1980s. I will show you step by step how you can create Brick Breaker 3D.\nThis course is a Beginner/Intermediate course, so if you have trouble in any case, write me a message or Q&A, and i'll help as best as i can.\nIf you are beginner, you might have some trouble to follow, but the videos will guide you through the complete course. Don't forget: You only become better if you repeat things and keep on learning!\nSo we create Systems which will give us the freedom to:\nC# (Monodevelop)\nA level create system to create our own playfield by simple settings\nEditor Scripting (Intermediate Topic)\nAutomatic Borders which holds the balls and paddle in any screen resolution\nPhysics which handle all ball movement\nUnity (2019.3)\nwe create a playfield\nwe create a GameManager\nwe create a Level Loader\nwe create objects to create quick and fast levels (Intermediate Topic)\nCourse Material\nI provide the following Material with the Course:\n1x Brick 3D Model\n1x Background 3D Model\nseveral 2D Graphics and Masks\nYou have to write the code on your own, i do not provide the final scripts!\nAll other graphics for Menu's, Icons, Images or Buttons need to be created on your own.\nAll Materials i provide are for education only and should not be in your final release!\nConclusion\nIn the end of this course you will have a fully functional Break Out / Arcanoid / Brick Breaker 3D Game.\nChallenge\nAfter you have created nice Menus, Buttons, and maybe additional content, upload the Game to any Gaming Website, Google Playstore, Apple Store or even Windows Store or Steam.\nSo what are you waiting for?\nLet's make your dream game a reality!!\nLevel: Beginner / Intermediate\nVideo Course Length: ~10 hours\nUnity Version required: 5.3+",
      "target_audience": [
        "You ever wanted to complete your own game.",
        "You want to learn how to create Brick Breaker / Arcanoid / Break Out 3D",
        "You want to become an Indie Game Developer.",
        "You love to make Games."
      ]
    },
    {
      "title": "Mobile Game Programming Using Unreal Engine",
      "url": "https://www.udemy.com/course/mobile-game-programming-using-unreal-engine/",
      "bio": "Learn to build Android and IOS games using Unreal Engine",
      "objectives": [
        "Learn to build professional games for IOS and Android devices",
        "Learn core concepts of Unreal Engine",
        "Learn to build a infinite runner game from scratch"
      ],
      "course_content": {
        "Introduction": [
          "Intro"
        ],
        "Setup": [
          "Creating a Project and Importing a Custom Character",
          "Animation Retargeting and Character Blueprint",
          "Camera and Blueprint Setup",
          "Spawning Endless Ground Tiles"
        ],
        "Movement": [
          "Switching Lanes",
          "Downward Movement",
          "Touch Screen Controls"
        ],
        "Interaction": [
          "Obstacle Setup and Spawn Probability",
          "Speed Increase",
          "Point System",
          "Ragdoll Death Physics",
          "Coin Pickup",
          "Coin Magnet",
          "Jump Booster"
        ],
        "User Interface": [
          "HUD and UI",
          "Aspect Ratio and Main Menu"
        ],
        "Finalization": [
          "Quick Fixes",
          "Mobile Integration and Project Packaging"
        ]
      },
      "requirements": [
        "Basic knolwedge of Unreal engine interface is required to start the course"
      ],
      "description": "Unreal Engine 4 is widely held as one of the best game development engines in the world. It entails different game development tools which are capable of producing everything from 2D mobile games to AAA consoles titles. Not only that but its graphical power and user-friendliness makes it ideal for developing high-quality mobile games.\nUnreal Engine 4 is user-friendly, modern, engaging, and immensely powerful. The presence of many efficient functions rendering technology helps speed the gaming platform. With the mere knowledge of C++, you can even make changes to the game without any hindrance. Adding Icing to the cake is the ease of developing a game on Unreal Engine 4 and you can create an entire game without writing a single line of code. What's more? Well, it is the engine behind famous games such as Kingdom Hearts III, ARK, Tekken7 and many others.\nWhy this Course is Important?\nWith the immense amount of migration of users to the mobiles from their computers, the use and demand of high-quality game are at its apotheosis. It seems that high-quality and high-performance games are being launched on a regular basis these days, making game development an essential field for building a promising career. This makes the knowledge of Unreal Engine 4 highly vital in order to have an edge over the evolving competition. Considering all these factors, we have designed this course which will help you to ace all the concepts and skills required for developing a mobile-based game on Unreal Engine 4.\nWhat Makes this Course so Valuable?\nUnreal Engine 4 being one of the best gaming developers available at our disposal, this course includes topics as importing a Custom Character, Character Blueprint, Camera and Blue Print Setups and Speed Increase. These essential topics skyrockets your understanding about the gaming platform. That's not all! You’ll develop a comprehensive knowledge about Obstacle Setup, Ragdoll physics, Jump Booster, HUD and UI. The course explains these vital topics in details.\nThe Course Includes-\n- Learn to create a project\n- import custom characters\n- Animation Retargeting\n- Camera and Blueprint Setup\n- Spawning Endless Ground Tiles\n- Switching Lanes and touch Screen Controls\n- Point System and Powerups\nAnd Much More!\n\n\nIf you share the zeal of gaming, not just playing but also creating, try this course today!",
      "target_audience": [
        "Anyone who wants to quickly build professional mobile games using Unreal will find this course very useful"
      ]
    },
    {
      "title": "How To Make Games With Unity Software",
      "url": "https://www.udemy.com/course/how-to-make-games-with-unity-software/",
      "bio": "Create Your First 2D Unity Game With Ease",
      "objectives": [
        "How to make a simple 2D platformer",
        "How to make a simple puzzle games",
        "How to make a simple endless runner",
        "Basics of game development",
        "Particle system",
        "Animation",
        "C# Scripting",
        "Sound management",
        "Scene management",
        "And many many more!"
      ],
      "course_content": {
        "Введение": [
          "Introduction"
        ],
        "Let's make games!": [
          "Let's make a simple endless runner!",
          "How to make a character die if it falls from high altitude?",
          "How to add step sound effect to your character?",
          "How to load previous scene or quit the game with Android Back button?",
          "How to find the closest enemy?",
          "How to jump with finger swipe in Android game?",
          "What is Order in layer option and how to use it?",
          "How to make falling obstacles trigger zone?",
          "How to set an Android game on pause when phone call is recieved?",
          "How to make an enemy to fire bullets to the player?",
          "How to make a mobile joystick to control 2d aircratf?",
          "How to add force to gameobject with finger swipe to throw it?",
          "How to move a character in 8 directions and fire bullets in top down game?",
          "How to do a double jump?",
          "How to destroy gameobject pressing UI button?",
          "How to make an enemy to jump over the obstacle?",
          "Creating a set of animations: Idle, Walk, Hit.",
          "How to kick enemy?",
          "How to make a character jump higher by holding and releasing UI button?",
          "How to zoom in and zoom out a game view in Android game?",
          "Drag a paddle by the screen with the finger",
          "How to create a health bar above the character?",
          "Creating a healing zone for wounded character",
          "How to climb the wall and jump from it?",
          "How to move a spaceship by the screen using accelerometer input of mobile device",
          "Sinusoidal movement like a ghost.",
          "Hold shift to run.",
          "Let's animate!",
          "Temporary invulnerable feature.",
          "Creating body armor feature.",
          "Dust cloud after jump effect.",
          "Create a falling platform",
          "Create a moving platform",
          "Platform with circular movement",
          "Platform with elliptical movement",
          "How to create a coin magnet?",
          "Dust while running",
          "Creating a toggling platforms",
          "Code lock feature for puzzle game",
          "How to change gameobjects sprite color with C# script?",
          "Music volume slider feature",
          "Make an enemy to follow the path",
          "Calculating a distance to checkpoint 2D",
          "Calculating a distance to checkpoint 3D",
          "Roll the die feature 2D",
          "Creating a simple board game.",
          "Follow Bezier curve",
          "Load next or previous scene",
          "Creating a snow with particle system",
          "Creating a simple puzzle game. Rotate picture pieces.",
          "Creating a simple puzzle. Drag pictures to their slots.",
          "Creating a simple puzzle game. Stacking a pyramid.",
          "Creating a simple slot machine game.",
          "Spawn random prefam with finger touch",
          "Use a mobile joystick to move a rocket.",
          "Move two characters separately with one joystick.",
          "Rotate a barrel and fire bullets with swipe and tap.",
          "Create custom mobile joystick and move a gameobject.",
          "Creating simple puzzle. Ball in a maze.",
          "Creating a simple escape puzzle game. Push button, open door.",
          "Creating a simple escape puzzle game. Take key, open door.",
          "Creating a simple escape puzzle game. Shake the phone, take the key, open door.",
          "Creating a simple escape puzzle game. Move the fridge, push the button.",
          "Creating a simple puzzle game. Pick color to open the door.",
          "How To Rotate 3D Gameobject With Mouse Click Making Simple Memory Puzzle Game",
          "One More Way How To Create Parallax Scrolling Background Effect For 2D Game",
          "How To Create Bullet Hell Feature With Simple Object Pooling System In 2D Game",
          "Play Random Sounds When Player Picks Up Coins",
          "How To Open And Close Door By Clicking A Button With Mouse In 3D Game",
          "How To Fire Bullets With Mouse Click To Mouse Pointer Position Direction In 2D",
          "How To Create A Simple Teleport Effect Button For Your 2D Game",
          "How To Create Simple Portal With Sprite Splitting Feature In 2D Game",
          "How To Create Simple 3 Digit Padlock Combination Feature For 3D Game",
          "How To Make 3D Coins Or Any Gameobject Rotate With Animation",
          "How To Make Gameobject Pulsing When You Hover Mouse Pointer Above It",
          "How To Pick Up Different Items And Make Counter For Each Of Them In 2D Game",
          "How To Pick Up Coins With Different Value And Make A Simple Money Counter",
          "How To Create Simple UI Button Sprite Switching Animation Feature In Unity Game",
          "How To Play Different Sounds When You Press And Release UI Button",
          "How to draw a line between two points when you click and release mouse button",
          "How To Spawn Gameobject At Random Position Excluding Player Position",
          "How To Create Simple 2D Sniper Scope With Blurred Background And Focused Eyepiec",
          "How To Create Score Counter For 2D Unity Game. Pulsating Score Counter Effect",
          "How To Make Bullet Counter And Weapon Reload Feature For 2D Game",
          "How To Make Simple Digital Code Lock With Display And Keypad For 2D Unity Game",
          "Tutorial How To Add Simple Digital Score Counter Into Your Unity 2D Game",
          "How To Move 3D Object With Touch Dragging Finger By The Screen",
          "Simple Click Reaction Time Speed Test Game",
          "Making A Simple Aim Trainer Game",
          "Bullet Hell Feature With Simple Object Pooling System - Pattern 2",
          "Bullet Hell Double Spiral",
          "How To Fire Bullets With Different Fire Rate",
          "How To Rotate 3D Game Object With Swipe And Fire Bullet Or Projectile With Tap",
          "Merge Objects In 2D Unity Game Dragging One Object to Another Combining Them",
          "Enter Secret Password To Continue Playing A Level You Want Feature",
          "Make A Character Climb A Ladder Up And Down In 2D Game",
          "Adding Tooltip Or Hint Feature To Your 2D Game",
          "Jump On Enemy Head To Stomp Squash And Trample Him",
          "Enter A Door And Load Next Or Previous Scene Feature For Your 2D Game"
        ]
      },
      "requirements": [
        "Unity, Visual Studio and Android SDK installed",
        "Basics of C# (what is a class, what is an object, what is variable, what is method, what are \"if\", \"switch\" statements, arrays)",
        "A wish to become a great game developer!"
      ],
      "description": "Here you will find everything you need to start creating 2D computer games with the most popular game engine such as Unity. More than 70 step-by-step video tutorials on different topics will leave no chances for you not to make your first game! All you need is to install Unity and Visual Studio. Once it's done, buckle up and begin your journey to the exciting world of game development!\nEach video has a link to downloadable resources!",
      "target_audience": [
        "If you are new in Unity software then this course is right for you."
      ]
    },
    {
      "title": "Create simple HTML5 Canvas Game with JavaScript Pong Game",
      "url": "https://www.udemy.com/course/html5-game/",
      "bio": "Create an HTML5 Game from scratch using JavaScript to draw on canvas apply animations and interaction with keyboard",
      "objectives": [
        "How to apply JavaScript to make a simple HTML5 canvas game",
        "Draw with JavaScript in HTML5 Canvas",
        "How to plan and create a JavaScript game",
        "Creating games with JavaScript"
      ],
      "course_content": {
        "Introduction to creating a simple game using HTML5 Canvas and JavaScript": [
          "HTML5 Canvas Game Introduction.",
          "Web Development Code Editor Update Information",
          "How to Setup of HTML5 Game Board",
          "Source Code code snippet simple HTML5 Game setup",
          "How to Draw more shapes on Canvas HTML5 and JavaScript coding",
          "Source Code drawing on HTMl5 canvas element",
          "How to add KeyBoard Interaction to your HTML5 Simple Game",
          "Source Code adding keyboard event listeners HTMl5 canvas game",
          "How to create an opponent Second object on Screen HTML5 Canvas game",
          "Source Code adding second player HTML5 game code snippet",
          "How to create smooth animations in an HTML5 Canvas game Animation Frames",
          "Source Code for animation frames with HTML5 example code",
          "How to add collision detection between two objects on Canvas JavaScript",
          "Source Code for HTML5 Collision detection objects Code example",
          "How to add a Bouncing Ball on canvas using JavaScript Code in HTML5 canvas",
          "Source Code code snippet for animation of bouncing ball",
          "JavaScript simple game Final Game Tweaks",
          "Source Code Final Game Code",
          "Create pong game with pure javascript Pong Game Code Review."
        ],
        "Resources and content for additional learning Bonus content Additional Learning": [
          "PDF Guides and resources for additional learning"
        ]
      },
      "requirements": [
        "Basic JavaScript knowledge",
        "Understanding of coding",
        "Editor and ability to write code"
      ],
      "description": "Explore how you can create a quick simple game using JavaScript and HTML5 canvas element\nCreate an HTML5 Pong Game from scratch\nLearn coding with FUN interactive game development - See what you can build in less than 1 hour with JavaScript!!!\nCourse covers all the core functions needed in a game\nBasics of drawing on HTML5 canvas\nHow to create and track key presses\nSetting basic game objects to manipulate and move on screen\nPlanning and game concepts\nAdding second player and creating interaction\nHow to setup collision detection of two objects in canvas\nHow to add a bouncing ball on screen within HTML5 canvas\nHow to create smooth animations with JavaScript request animation frame object\nGame review and how to make tweaks and adjustments\nSource code is included so you can build your own version of the game as you go through the lessons\nQuick straight to the point instruction by professional developer with over 19 years of experience - ready to help you learn and answer any questions you may have.\nLearn and explore what HTML is and how it can be used to create amazing web pages - Hypertext Markup Language is the standard markup language for documents designed to be displayed in a web browser. It can be assisted by technologies such as Cascading Style Sheets and scripting languages such as JavaScript",
      "target_audience": [
        "JavaScript developers",
        "Anyone who wants to create a fun simple game online",
        "HTML5 game developers",
        "Anyone who is starting out with game development"
      ]
    },
    {
      "title": "Advanced Environment Texturing Methods in Photoshop",
      "url": "https://www.udemy.com/course/qte-photoshoptexturing/",
      "bio": "Learn rare and valuable Photoshop processes for creating photoreal diffuse textures from a 13-year Industry Veteran.",
      "objectives": [
        "Achieve more natural, photoreal textures",
        "Attain an incredible amount of fine detail quickly and effortlessly.",
        "Become more comfortable with using Photoshop's unique toolset to get the look you want.",
        "Tile that texture far better than before.",
        "Paint manually with a brush set constructed for texture artists in mind."
      ],
      "course_content": {
        "Setup": [
          "Download Source Content",
          "Preparing the Included Brush Set"
        ],
        "Tools, Techniques, and Approaches": [
          "Layer Masking as Your Bread and Butter",
          "Correctly Tiling a Texture - Part 1",
          "Correctly Tiling a Texture - Part 2",
          "Harness the Power of Smart Objects for Repeating Decoration",
          "The Miracle of Blend-If",
          "Methods of Extracting Foliage from a Photograph",
          "Reveal Hidden Detail in Your Textures",
          "The Benefit of Clipping Masks",
          "Efffortlessly Harmonize Color in Textures with Match Color",
          "Mask and Refine Edge to Transplant Texture Elements",
          "Use Multiple Textures for Fine Detail Painting"
        ],
        "Go from Start to Finish": [
          "Tile Pattern and Base Surface Setup",
          "Adding a Base and Damaging the Tiles",
          "Cracking the Tiles",
          "Color Exploration",
          "Layering in Other Textures for More Detail",
          "Finishing Up With Moorish Patterns for Extra Detail"
        ]
      },
      "requirements": [
        "A version of Photoshop CS.",
        "A good, working knowledge of Photoshop CS.",
        "Pressure-sensitive Tablet (optional, but highly encouraged)"
      ],
      "description": "In this course, I'll take you through the techniques I've used and refined over the years to help me create very high quality, high resolution tiling photoreal diffuse textures using only Photoshop. I'll start by explaining all the techniques individually, then move on to showing how I use all the techniques to take a texture from start to finish.\nBest results are achieved using a pressure-sensitive tablet. Many techniques shown here don't require the latest version of Photoshop.\nThe course won't take hours to complete and you'll see results immediately. I'm confident the methods I use aren't found anywhere else online, so I'm certain you'll learn something new!\nThe series is a work in progress, so expect new videos over time.",
      "target_audience": [
        "This course is targeted specifically for 3D Artists, be it film or video game, who want to really boost their photoreal texturing capabilities inside Photoshop.",
        "Graphic Designers may also see benefits since the tools used can assist them in their work.",
        "The course works with photo-sourced textures. If you only work with hand painted or cartoony textures, this course may only provide minimal benefit.",
        "The course is for advanced users of Photoshop. If you're completely new, you might be a bit lost as you watch."
      ]
    },
    {
      "title": "Publish Stick Hero iPhone game - monetize with Ads - no code",
      "url": "https://www.udemy.com/course/ios-publish-stick-hero-iphone-game-monetize-with-ads-no-code/",
      "bio": "A-Z guide to help you succeed in publishing your very own Stick Hero iPhone game to the iTunes app store. Code included",
      "objectives": [
        "Learn how to get your iOS developer license",
        "Learn how to create your own iPhone game without having to write code",
        "Learn how find free graphic images for games",
        "Learn how to modify and create your own game graphics",
        "Learn how to add your own sound effects",
        "Learn how to publish your very own iPhone game to the iTunes app store in one afternoon"
      ],
      "course_content": {},
      "requirements": [
        "a MAC computer or MacInCloud online virtual MAC"
      ],
      "description": "This course's main objective is to become the go-to source for anyone willing to enter the iPhone app industry.\nThe course starts with us staring at the screen of an Apple computer (or MacInCloud for PC users) and I will guide you through all the step necessary to set up your computer for development. I will also go through each steps to become a licensed iOS developer.\nWe will then install the game from the source code(included with this course), run the game on the simulator, then modify the graphics and sounds to customize the 'Amazing Hero'* game into one of your own.\nThen we will setup the advertising networks to ensure money coming in. Then we will publish the game to the Apple app store.\nThis course is not about theories. Once you complete this course, you have a real product of your own in the app store, bringing in profit. You can't pass this opportunity.\nThere has been plenty of reskins of these apps by myself and by many students.\nGo Take a look at them on the iTunes app store. Look for 'Stick Hero Run - Free' on the itunes app store.\nAlso feel free to ask me anything that goes through your mind, I love to help!\nMake sure to check AppsFresh website, plenty of resources there.\n*The source code mimic mechanics of the original Stick Hero game for iPhone.",
      "target_audience": [
        "People who want to start a mobile app business the inexpensive way, on their own",
        "great course for someone who wants to learn about the iTunes publication process",
        "Computer science students",
        "Graphic design students",
        "Solo / Indi entrepreneurs"
      ]
    },
    {
      "title": "Publish your own Impossible Arrow iPhone game without coding",
      "url": "https://www.udemy.com/course/publish-your-own-impossible-arrow-iphone-game-without-coding/",
      "bio": "Step by step videos to guide you publish your own iPhone game version of Impossible Arrow to the iTunes app store",
      "objectives": [
        "publish your very own iPhone game clone",
        "Learn about making games without coding",
        "Learn about itunes app store terminolgy",
        "Get familiar with XCode, and publishing apps",
        "Familiarize with iTunes Connect",
        "Get your iOS dev license"
      ],
      "course_content": {
        "Initial Setup": [
          "Instructor introduction and course overview",
          "Get the iOS developer license",
          "Create the dev certificate",
          "Download XCode programming tool for free and Open it",
          "Create the App ID and distribution profile",
          "Download source code and verify game works on your environment"
        ],
        "Reskinning Process": [
          "Overview of the source code and its assets",
          "Modifying game walls colors with Photoshop",
          "Verifying the changes in the iPhone simulator",
          "Modify game second walls colors poca dots using Photoshop",
          "Verifying the second walls in the iOS simulator",
          "Modifying the third walls by adding a bubble overlay",
          "Verifying the last walls modifications in the iOS simulator",
          "Modify the main duck character into a rabbit",
          "Test the game with the new bunny character",
          "Modifying the baby ducks into baby rabbits",
          "Change the snake and body into a crab with pebbles",
          "Test the 3 new characters by playing the game",
          "Playing with the new characters in the iPhone 6 simulator",
          "Customize the game menu",
          "Observe the new menu colors in the simulator",
          "Advertising admob banner and interstitial setup"
        ],
        "Icons and Launch Images": [
          "Creating the game app icon",
          "Creating all resized app icons for all iOS devices",
          "Create custom launch images"
        ],
        "iTunes Connect Setup": [
          "Add a new app in iTunes Connect dashboard",
          "Add screenshots to itunes connect for all devices",
          "Fill out the itunes connect content settings",
          "Setup app price in itunes"
        ],
        "Publishing your game to the store": [
          "Modify the app settings in XCode",
          "Start the Archiving Process",
          "Launch the Archiving process in XCode",
          "Successful App Store submission",
          "Add the build and wait for review status",
          "BONUS"
        ]
      },
      "requirements": [
        "a MAC OS computer or virtual image"
      ],
      "description": "***** Have you heard of \"Making iPhone games without coding\" ? *****\nThis course will let you create a game similar to Impossible Arrow, a top chart game in the iTunes app store, all of it without coding. I had many students those who wanted to create game apps but they where not interested to study codes or for some making game app with codes were hard. So here i am introducing a way to create games without coding. This course comes with the source code so you will not have to refer anything from anywhere rather than in this course. Everything you need is included in this course.\nWHAT YOU WILL GET AFTER COMPLETING THE COURSE ?\nYou will be able to make an iPhone game similar to Impossible Arrow, without coding.\nYou will be able to get all free resources, including the source code with an unlimited license.\nYou can publish each app every weekend.\nYou will have the potential to make a lot of passive income.\nYes Here Is The Way To Make iPhone Game Apps Without Coding !\n************ READ ON ! **************\nLooking to boost your income as a App developer? Or maybe you're seeking a career change that gives you more free time and flexibility?\nThen this is the right course for you.\nYOU CAN BECOME AN IOS GAME APP DEVELOPER\niOS has a huge platform where you can sell your game app and make a lot of money . This course will take you from the very basic concepts of game development using the free software given by Apple.\nHOW MUCH DO YOU HAVE TO SPEND?\nThere is actually no more expenses except signing up besides getting the iOS developer license ($99/year). And we will show you the places from where you can get the resources we want without spending a single dollar.\n*********** HOW MUCH YOU CAN EARN *******\nYou can earn more than you think. I am the one example of that after studying this method i could create and publish game app every week . So i could make a lot of money without putting more effort . Join this course and follow me and you will make a lot money than you think.\nENROLL THE COURSE NOW AND PUBLISH YOUR VERY FIRST GAME APP.",
      "target_audience": [
        "people interested in making trendy games the simple way",
        "people interested in learning graphic design tips"
      ]
    },
    {
      "title": "Unity VR: Oculus Quest Bowling Game in 30 Minutes",
      "url": "https://www.udemy.com/course/unity-vr-oculus-quest-bowling-game-in-30-minutes/",
      "bio": "Learn how to utilize Unity's newest features (XRManagement + XRInteractionToolkit) to build grabbing,throwing, UI & more",
      "objectives": [
        "Unity Development for Oculus Quest",
        "Building Blocks of Virtual Reality Development"
      ],
      "course_content": {
        "Introduction": [
          "Welcome to the Course"
        ],
        "Setting up Unity & Oculus Quest": [
          "Seeing Your Content in VR"
        ],
        "Building Blocks of Bowling": [
          "Grabbing & Throwing in VR",
          "Adding Realism to our Throw"
        ],
        "Adding UI + Finishing Gameplay": [
          "Completing the Gameplay Loop",
          "UI in VR",
          "Bonus: Adding Snap Turns + Skybox"
        ]
      },
      "requirements": [
        "Have Unity 2019.3 or higher downloaded and installed"
      ],
      "description": "In this course you will learn how to build a fully functional Oculus Quest bowling application in 30 minutes. The aim of this course is to get you up and running with Oculus Quest development in one sitting.\n\n\nIn this course you will learn how to confidently achieve the following:\nSetup your Unity development environment and your Oculus Quest (with an Oculus Link cable for faster testing)\nLearn how to easily grab and throw objects in VR\nLearn how to create an interactable menu/UI system\nCreate a fully functional bowling mini game and then add visual polish to it with free assets from the Unity Asset Store\nThis course is designed for those of you who want a quick way to dive into virtual reality development and who are tired of following outdated tutorials. This course utilizes the latest VR frameworks (XRManagement & XRInteractionToolkit) for Unity.",
      "target_audience": [
        "Anyone curious about how to get started creating virtual reality experience using Unity"
      ]
    },
    {
      "title": "Learn Modular Environment Building for Games with Blender",
      "url": "https://www.udemy.com/course/3dmotive-learn-modular-environment-building-for-games-with-blender/",
      "bio": "Build game-ready environment models for amazing level designs!",
      "objectives": [
        "Learn how to design and build modular environment sets",
        "Understand core modeling and texturing principles",
        "Learn to prepare and optimize models for a game engine"
      ],
      "course_content": {
        "Introduction to Modeling and Basic Engine Setups": [
          "Download Course Files Here!",
          "Introduction to Modular Building in Blender",
          "Course Overview",
          "Blender Preferences",
          "Customizing the Interface",
          "Maya Style Controls",
          "Blocking in Dimensions",
          "Test Export to the Unity Game Engine",
          "Testing in Unity",
          "Fixing Keyboard Shortcuts",
          "Starting the Straight Section",
          "Using the Mirror Modifier",
          "Creating the Floor Trim",
          "Floor Extrusions"
        ],
        "Refining our Modular Pieces": [
          "Introduction",
          "Modeling the Handrail",
          "Modeling Handrail Attachments",
          "Smooth Shading and Sharp Edges",
          "Layers and Duplication",
          "Starting the End Section",
          "Completing the End Section",
          "Starting the Cross Section",
          "Building the First Intersection",
          "Building the Cross Section Opening",
          "Completing the Cross Section",
          "Cross Section Handrail",
          "Loop Tools",
          "Conclusion"
        ],
        "UV Unwrapping and Texturing our Modular Set": [
          "Introduction to UVs and texturing our assets",
          "Planning to Unwrap",
          "Linked Selection",
          "Separating Meshes",
          "Unwrapping",
          "UV Editor",
          "Building UV Islands",
          "UV Layouts",
          "Building a Door Prop",
          "Creating Materials",
          "Modeling from a Texture",
          "Modeling and UVs",
          "Texture Baking",
          "Conclusion"
        ],
        "Painting Textures with Photoshop": [
          "Introduction to Texture Painting",
          "Configuring Blender for Texture Painting",
          "Creating a Base Layer",
          "2d Texture Painting",
          "3d Texture Painting",
          "Painting from Textures",
          "Starting with the Stencil Brush",
          "Configuring Stencil Brush Controls",
          "Painting the Walls",
          "Painting the Floors",
          "Layered Painting",
          "Flattening Layers and Conclusion"
        ],
        "Refining Materials and Engine Building and Lighting in Unity": [
          "Introduction to setting up in Unity",
          "Preparing to Bump Map",
          "Bump Painting",
          "Bump Texture Painting",
          "Starting the Curved Piece",
          "Creating a Bend",
          "Exporting to FBX",
          "Importing to Unity",
          "Configuring Materials",
          "Level Designing",
          "Organization",
          "Base Illumination",
          "Creating Lights",
          "Lightmapping",
          "Image Effects and Course Conclusion",
          "Bonus Lecture: Further Learning with 3dmotive"
        ]
      },
      "requirements": [
        "Blender",
        "Unity"
      ],
      "description": "In this course intended for intermediate viewers, instructor Alan Thorn explores how to build low-poly environment assets in a dark industrial theme. These meshes fit together seamlessly, like building blocks, for creating expansive and versatile level design in games. Use Blender to model, unwrap, texture-paint, and optimize assets, exporting them to a real-time game engine. Over five, massive chapters you’ll examine:\n1). Polygonal modelling techniques for building complex shapes and designs\n2). NGons and topology optimization for enhancing and refining your meshes\n3). Smooth shading and UV Seams for creating good looking meshes and texture designs\n4). Texture unwrapping and UV layouts, as well as texture baking and painting for developing a smooth and intuitive workflow\n5). Model exporting for game engines, to help bring your models to life inside a real-time game engine\nBy the end of this course, you’ll have a solid foundation for easily building low-poly, modular game assets that can be used and re-used to create potentially limitless level designs.\nMore about the Instructor:\n\nAlan Thorn is a game developer, author and educator with 15 years industry experience. He makes games for PC desktop, Mobile and VR. He founded 'Wax Lyrical Games' and created the award-winning game 'Baron Wittard: Nemesis of Ragnarok', working as designer, programmer and artist. He has written sixteen technical books on game development and presented ten video training courses, covering game-play programming, Unity development, and 3D modelling. He has worked in game development education as a visiting lecturer for the 'National Film and Television School', as a Lead Teacher for 'Uppingham School', and is currently a Senior Lecturer at 'Teesside University' where he helps students develop the skills needed for their ideal role in the games industry.",
      "target_audience": [
        "This course is intended for students, hobbyists, professionals, and Blender users seeking to create game assets for Unity",
        "This course is not intended for beginners or those completely new to 3d modeling"
      ]
    },
    {
      "title": "Unreal 5 Materials - Part 3 VFX Materials",
      "url": "https://www.udemy.com/course/unreal-5-materials-part-3-vfx-materials/",
      "bio": "Your complete course for learning Materials in Unreal Engine 5",
      "objectives": [
        "Understand the basic and advanced setups for building VFX materials in UE5 from scratch",
        "Deep dive into various topics such as Combustion and Water materials with worked examples",
        "Learn industry standard best practices for tools and workflows for VFX materials",
        "Learn where and how we can optimise our materials for best performance in realtime"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Atmospherics": [
          "Lightshafts - Texture Settings",
          "Lightshafts - Panning Textures",
          "Lightshaft - UV Gradient",
          "Lightshaft - Depth Fade",
          "Lightshaft - Fresnel",
          "Dust Motes",
          "Fog Planes"
        ],
        "Combustion": [
          "UV Distortion",
          "Stylised Fire",
          "Candle Flame - Texture",
          "Candle Flame - WPO",
          "Candle Flame - Smoke",
          "Smoke WPO - Setup",
          "Smoke WPO - Shader",
          "6d Lightmap - Setup",
          "6D Lightmap Shader",
          "Campfire - Shaders",
          "Campfire - Fake Lighting",
          "Lightning Mesh Flipbook"
        ],
        "Water Materials": [
          "Simple Opaque Water",
          "Transparent Water",
          "Opacity and Fresnel",
          "Refraction",
          "Depth Fade",
          "SSR and Planar Reflections",
          "Cubemaps",
          "Reflections Recap",
          "WPO",
          "Fixed Depth Setup",
          "Fixed Depth Shader",
          "Flowmap Setup",
          "Flowmap Vertex Painting",
          "Single Layer Water",
          "Flowmap Comparison"
        ],
        "Oceans": [
          "Gerstner Waves",
          "Ocean VAT",
          "Ocean Height Flipbook",
          "Ocean Combined"
        ],
        "Rain": [
          "Rain - WPO",
          "Rain - Splashes and Ripples"
        ],
        "Magic Portal": [
          "Portal Timing",
          "Portal Sphere",
          "Portal Arcs",
          "Portal Tunnel",
          "Portal Plane",
          "Portal Firey"
        ],
        "Snap Card": [
          "Snap Card",
          "Wrap up and Conclusion"
        ]
      },
      "requirements": [
        "Some UE5 Material knowledge will be assumed. Parts 1 and 2 are recommended but not required."
      ],
      "description": "Welcome to Part 3 of my complete Unreal Engine 5 Materials Course, here on Udemy.  Following on from Part 1 - Environmental Materials and Part 2 - Animated Foliage Materials with World Position Offset, this course looks at Visual Effects Materials - using Textures and Shader Math to replicate real world effects.  Over the course of 8.5 hours, all broken down into bite size 10-15 min videos, we cover everything from the basics of Atmospherics, such as Light Shafts and Fog materials, to Fire and Smoke and Water and Magic.\n\n\nEach chapter contains many worked examples, full of handy comments, as well as a corresponding video lecture that explains in detail what is being done and why - so you're learning both the techniques and building up a base of  background knowledge of first principal concepts, allowing you to build up your own shaders in future.\n\n\nWith industry standard practices from my 15 year career, including 5 years of teaching Game Art at a Masters Degree level, this course will cover various uses of Textures, Shader Maths based off UVs, Parameters, and Animation - this course will fully equip you to add some Visual Effects life into your realtime scenes in Unreal Engine 5.",
      "target_audience": [
        "Anyone wanting to learn more about advanced VFX materials in UE5"
      ]
    },
    {
      "title": "Unity Procedural Generation: Build Infinite Game Levels",
      "url": "https://www.udemy.com/course/unity-procedural-generation/",
      "bio": "Code 3D dungeons, generate layouts, create a NavMesh, and fill them with enemies, loot, and decor—while levelling up C#!",
      "objectives": [
        "Create infinite game levels that feel fresh every playthrough.",
        "Generate procedural dungeon layouts with rooms and hallways.",
        "Turn 2D layouts into dynamic 3D levels with Marching Squares.",
        "Implement a runtime NavMesh so players and NPCs can navigate.",
        "Use Scriptable Objects to customise layouts without extra code.",
        "Populate dungeons with treasure, enemies, and decorations.",
        "Apply rule-based systems to avoid repetitive level design.",
        "Master advanced C# techniques to optimise procedural systems."
      ],
      "course_content": {
        "Introduction & Setup": [
          "Welcome to The Course",
          "Setting Up The Project",
          "Intro To Proc Gen",
          "Community & Support",
          "Accessing Our Projects"
        ],
        "Room Layout Generator": [
          "Section Intro – Room Layout Gen",
          "Generate The First Room",
          "Draw Level on Texture2D",
          "Define Data Structures",
          "Stubs & Lambda Expressions",
          "Find All Exits",
          "Enums and Enum Extensions",
          "Expression - bodied Members",
          "Pick Exit Using Linq",
          "Calculate Second Room Position",
          "Object Initializers",
          "Generate Multiple Rooms",
          "Validate Room Positions",
          "Work With Random Seeds",
          "Configure With Scriptable Objects",
          "Generate Different Room Sizes",
          "Limit Room Occurrences",
          "Add Special Rooms Textures",
          "Display Special Rooms",
          "Stub Method For Exit Detection",
          "Detect Exits On Texture"
        ],
        "Generate Level Geometry": [
          "Section Intro - Geometry Gen",
          "The ILevel Interface",
          "Implement Texture Based Level",
          "Marching Squares",
          "Create Tileset",
          "Create Level Geometry",
          "Implement a Singleton",
          "Share Data Using Singleton",
          "Add Variations With TileVariants",
          "Combine Generation : LevelBuilder",
          "Set Up NavMesh",
          "Set Player Start Position",
          "Point - And - Click To Move Player",
          "Animate Player"
        ],
        "Decorate Rooms": [
          "Section Intro - Decorate Rooms",
          "Set Up Room Decorator",
          "Create Decoration Texture",
          "Set Up Rule System",
          "Detect Patterns",
          "Create Pattern Rules in Unity",
          "Apply Rules to Texture",
          "Align Texture with Level",
          "Apply Rules to Level Geometry",
          "Center Pattern in Room",
          "Apply Multiple Rules In A Room",
          "Copy Arrays And Limit Rule Use",
          "Rotate Rules",
          "And Decorator Rule",
          "Or Decorator Rule",
          "The Noop TileType",
          "Create Prop Variations 1",
          "Create Prop Variations 2",
          "Create Prop Variations 3",
          "Working With EnumFlags",
          "Get Room Connectedness",
          "Assign Start and Exit Room",
          "Filtering with Linq",
          "Wrapup"
        ]
      },
      "requirements": [
        "You'll need to know your way round Unitys’ user interface, GameObjects and Prefabs.",
        "You'll need understand basic C# programming skill like classes, for loops and variables."
      ],
      "description": "Want to make game levels using procedural generation? It's one of the most powerful ways to create infinite, dynamic game worlds without designing every single detail by hand.\nLearn how to code your own algorithms and build replayable levels that feel fresh every time! No more designing every corner—let the code do the heavy lifting!\nYou'll start by generating a dungeon layout with rooms and hallways. Using Scriptable Objects, you’ll customise layouts effortlessly, making sure no two levels feel the same. Say goodbye to repetitive level design—your game world will evolve with every play-through.\nNext, you’ll turn your 2D layouts into a fully realised 3D game level. We’ll harness the power of the Marching Squares algorithm to create detailed levels with only 16 tiles. If you’re a solo dev or working with a small team, this trick will save you heaps of time and effort.\nNavigation is key, so we’ll dynamically generate a NavMesh at runtime.This means your player can seamlessly explore every new dungeon layout without breaking immersion. Whether you're building an RPG or a roguelike, this skill will come in handy!\nBut what's a dungeon without loot and baddies? Using a rule-based system, you’ll populate your levels with treasure, enemies, and decorations. You’ll also learn techniques to prevent everything from looking too repetitive—because variety keeps players engaged.\nAlong the way, we’ll level up your C# skills with advanced concepts like lambda expressions, expression-bodied members, and System.Linq. If you've got the basics of C# down and want to push your coding skills further, you’re in for a treat.\nThis course is perfect for anyone who knows their way around Unity’s UI, GameObjects, and Prefabs. If you can handle loops, classes, and variables in C#, you're ready to level up your skills with procedural generation.\nBy the end of this course, you’ll have a robust system for procedural level design, plus a sharper understanding of advanced C# concepts. Ready to apply these techniques to your own projects and build infinite game worlds? Let’s dive in and start coding!",
      "target_audience": [
        "Know the basics of C# and Unity and want to learn advanced C# concepts to level up your coding skills? This is the course for you.",
        "It's also perfect for you if you want to learn about procedural generation approaches."
      ]
    },
    {
      "title": "Unity 3D - Procedural Mesh Generation - The Basics",
      "url": "https://www.udemy.com/course/unity-3d-procedural-mesh-generation-the-basics/",
      "bio": "Learn all the basics of generating procedural mesh using C#",
      "objectives": [
        "How to generate a procedural mesh at runtime using C#.",
        "Learn the basic concepts of the Mesh",
        "Learn how to build the basic 2d Shapes.",
        "Learn how to handle the visual aspects of the Mesh",
        "Learn the concept behind the UVs and how to apply it to the Mesh",
        "Learn the concept behind the Normals and how to apply it to the Mesh"
      ],
      "course_content": {
        "Welcome": [
          "Welcome",
          "Introduction"
        ],
        "Mesh Structure": [
          "Hello Mesh",
          "Hello Mesh Comments",
          "Building a Quad"
        ],
        "Mesh Visual": [
          "Graphical Aspects",
          "UVs -Part-1-",
          "UVs -Part-2-",
          "Normal -Part-1-",
          "Normal -Part-2-",
          "Normal -Part-3-"
        ],
        "Conclusion": [
          "Recap",
          "What is Next ?"
        ],
        "Bonus": [
          "Bonus",
          "External Links"
        ]
      },
      "requirements": [
        "Be able to handle the interface of Unity 3d (Basic knowledge)",
        "Understand the basics of C# programming language (Variables,functions,Classes , Array and List)."
      ],
      "description": "In this course you will learn the following skills:\n1-Understand the concept of the Meshes at Unity 3D.\n2-You will learn how to build your first Mesh using the minimum required code.\n3-You will learn to create the basic 2D shapes (Triangles/Quad) using C#.\n4-You will be introduced to the basic concepts of Mesh visualization.\n5-You will learn the concept of the UVs and how to apply it in your code;\n6-You will learn the concept of the Normals and how to apply it in your code.",
      "target_audience": [
        "Beginner Unity developer curious about Generating a procedural Mesh using C#.",
        "Unity Asset store Developer who want to understand how to generate a procedural Mesh ."
      ]
    },
    {
      "title": "Create Hyper-Casual Games: The Hyper Casual Games Blueprint",
      "url": "https://www.udemy.com/course/hyper-casual-games/",
      "bio": "The Essential Guide to Hyper-Casual Games. Master Game Publishers CPI, Game Retention & designing Hyper Casual games.",
      "objectives": [
        "The Ultimate Blueprint for Hyper Casual games.",
        "Retention Benchmarks that all the Top Mobile Publishers want.",
        "What is CPI and why it's critical to get your game published by top mobile publishers.",
        "Identify Core Features needed to succeed with Hyper-Casual games.",
        "Understand what it takes to make your hyper casual mobile game go Mass Market.",
        "BONUS: Create a Game Logo in Photoshop Like a Pro ( with no experience )"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "The Anatomy of Hyper Casual Games",
          "Publisher Retention Benchmarks",
          "Developer Benefits"
        ],
        "Deconstructed – Hyper Casual Games - Game Elements Breakdown": [
          "Deconstructed – Helix Jump By Voodoo",
          "Deconstructed – Dunk Hit By Voodoo",
          "Deconstructed – Fire Rides By Voodoo",
          "Deconstructed – Sky Rusher By Voodoo",
          "Deconstructed – Splashy By Voodoo",
          "Deconstructed – Rolly Vortex By Voodoo"
        ],
        "Live Boot Camp Workshops Replays": [
          "Week 1 – Live Boot Camp Workshop - Replay",
          "Week 2 – Live Boot Camp Workshop - Replay",
          "Week 3 – Live Boot Camp Workshop - Replay"
        ],
        "Bonus Workshops - RisingHigh Academy Live Sessions": [
          "Hyper Casual Level Progression – Voodoo’s New System Deconstructed +",
          "How to Build a Game for a Publisher – Ketchapp +",
          "Academy Workshop – Create a Game Logo like a Pro in Photoshop",
          "Academy Live Rewind - Looking at Hyper Casual Games - February 2020",
          "Academy Game of the Month May 2020 - Game Design Breakdown - Wobbleman"
        ]
      },
      "requirements": [
        "A love of all things mobile gaming & the interest in becoming a better game designer.",
        "Whilst not essential, to take full advantage of this course, it would highly beneficial if you have basic skills in designing and developing mobile games.",
        "This course does not require any software."
      ],
      "description": "Over 12 hours covering the theory behind the Chart Topping Hyper Casual Mobile Games.\nYou’ll learn the essential game design elements that go into creating the Hit Hyper-Casual Games that you can see right now topping the charts of the App Stores. These games have generated millions of downloads and it's not by luck!\nIn this course, you’ll discover all the ingredients of game design and game theory to put you on the path to success, create your own winning Hyper Casual games and wow potential mobile publishers.\nWe’ve broken down the entire Blueprint of the top Hyper Casual games piece-by-piece and laid out all the information you’ll ever need to create a game that the biggest Mobile Publishers are currently hunting for.\nSome people say you just need downloads, and sure, downloads are of course great, but what if your players are leaving after a day or worse still, a few minutes?\nWhat about CPI, Retention and important KPI's? We answer these questions are more!\nWe’re super passionate about game design and we’ve laid out the bullet proof essentials, broken the whole process down so you don’t waste months or even years figuring this stuff out.\nWho this course is for:\nBeginner and Veteran Mobile Game Designers looking to move into the Hyper Casual space.\nIndie game developers, producers & designers who want to improve their games by having a stronger understanding of hyper casual game design methods and core principles.\nMobile Game Creators who are excited make the hottest game genre on the App Stores today!",
      "target_audience": [
        "Game Developers",
        "Game Designers",
        "Indie Game Developers",
        "iOS Developers",
        "Android Developers",
        "Mobile Game Developers",
        "Mobile Game Designers"
      ]
    },
    {
      "title": "Unreal Engine 5: Make A FirstPerson Game With Blueprints",
      "url": "https://www.udemy.com/course/unreal-engine-5-make-a-firstperson-game-with-blueprints/",
      "bio": "Learn how to build your first complete first-person shooter game using Unreal Engine 5 and Blueprints - For beginners",
      "objectives": [
        "Understand the Basics of Unreal Engine 5 and Blueprints. Students will confidently navigate the Unreal Engine interface and create simple game logic",
        "Set Up a Functional First-Person Character with Animations. Students will build a fully controllable first-person character",
        "Design and Implement Gun Mechanics and Enemy AI. Students will create 6 functional weapons and basic zombie AI, including movement, attacks, and health systems",
        "Build a Complete Wave-Based Zombie Game with Win/Lose Conditions By the end of the course, students will combine everything to create a simple yet complete game"
      ],
      "course_content": {
        "Unreal Engine 5 & Blueprint Basics": [
          "Course Intro",
          "Section Intro",
          "Unreal Engine Version",
          "What Is a Game Engine?",
          "Unreal Engine 5 Installation",
          "Unreal Engine 5 Basics",
          "Importing Assets To Unreal Engine",
          "About Materials",
          "Make A Master Material",
          "Assign Materials To The Assets",
          "Migration ( Adding The Factory Environment to the project )",
          "Blueprint Vs C++",
          "Setting Up A Prototype Map",
          "Level Blueprint And Class Blueprint Introduction",
          "Events And Functions",
          "Variables And Variable types",
          "World, Local and Relative Transforms",
          "Flow Control",
          "Math And Logical Operations",
          "Make A Time Bomb",
          "Blueprint Communication",
          "Enhanced Input System",
          "Widget Blueprints",
          "Blueprint Parent Classes"
        ],
        "Unreal Engine 5 Animation Framework": [
          "Section Intro",
          "Unreal Engine 5 Animation Framework",
          "Importing Firstperson Character",
          "Control Rig Basics",
          "Control Rig Setup And Skeletal Mesh Editor",
          "Ak47 Animations Character Idle",
          "Ak47 Animations Character Equip",
          "Ak47 Animations Character Fire",
          "Ak47 Animations Character And Gun Reload",
          "USP Skeletal Mesh And Control Rig Setup",
          "USP Animations Character Idle",
          "USP Animations Character Equip",
          "USP Animations Character And Gun Fire",
          "USP Animations Character And Gun Reload",
          "AWP Skeletal Mesh And Control Rig Setup",
          "AWP Character Animations Idle",
          "AWP Character Animations Equip",
          "AWP Animation Character And Gun Fire",
          "AWP Animation Character And Gun Reload",
          "AX Animations Character Idle, Equip And Attack",
          "C4 Animations Idle And Equip",
          "First Aid Animations Idle, Equip and Injection",
          "Making Animation Montages"
        ],
        "Bringing It All Together: Wave-Based First Person Zombie Shooter": [
          "Section Intro",
          "First Person Character Setup",
          "Setting Up Enhanced Input Keys",
          "Enums",
          "Equip Guns Setup",
          "Animation Blueprint Setup",
          "Setting Up Walking Animations",
          "Adding VFX Assets",
          "USP Shooting System",
          "Ak47 Shooting System",
          "AWP FIre And Aim System",
          "AX Attack System",
          "C4 Plant System",
          "First Aid Injection",
          "Ak47 Reload System",
          "USP Reload System",
          "AWP Reload System",
          "Adding More Sound Effects",
          "Adding Recoil To The Guns",
          "Importing Zombie Enemies",
          "Zombie Enemies Movements",
          "Zombie Damage Apply And Recieve",
          "Zombie Death",
          "Impact VFX",
          "Completing The Other Guns",
          "Attach C4 Bombs To Zombies",
          "Setting Up The Other Zombies",
          "Fixing HeadShots And Physics Assets",
          "Main HUD Design",
          "Main HUD Logic",
          "Setting Up The Crosshairs",
          "WaveBased Enemy Spawning With Game Mode",
          "Game Mode And HUD Communication",
          "Player Damage And Death",
          "Death Screen",
          "Ammo, C4, First Aid Pickups",
          "A Little Debugging",
          "Factory Level Setup",
          "Blood VFX Fix",
          "Flash Light",
          "Explosive Gas Tanks",
          "Main Menu",
          "Final Touches",
          "Improving PathFinding",
          "Debugging The C4",
          "Packaging The Game",
          "Let's Play Our Game!",
          "Conclusion"
        ]
      },
      "requirements": [
        "No prior experience in unreal engine and programing needed, you will learn everything from scratch"
      ],
      "description": "Do you want to make your first fully functioning game but feel overwhelmed by coding? Well, don’t worry — this course is designed exactly for you!\nIn this hands-on, beginner-friendly course, you'll learn how to create a complete First Person Shooter (FPS) game using Unreal Engine 5 and Blueprints — Unreal’s powerful visual scripting system that lets you build games without writing a single line of code .\n\n\nYou’ll create a zombie survival game  where enemies chase you and attack in waves, testing your skills as you fight to survive. The game will feature 7 switchable weapons, each with its own purpose and personality:\nAK-47 — the iconic assault rifle, reliable, fast, and perfect for mowing down enemies at medium range.\nUSP Pistol — a sleek, semi-automatic sidearm for when you need quick backup and precise shots.\nAWP Sniper Rifle — slow but deadly, perfect for picking off zombies from a distance with one powerful shot.\nAxe — when the ammo runs out, nothing beats the raw satisfaction of getting up close with a heavy melee weapon.\nC4 Explosive — plant it, step back, and enjoy the chaos as you blow up groups of enemies.\nFirst Aid Kit — your lifeline in the heat of battle, quickly restoring health when things get rough.\nFlashlight — not every good thing is in plain sight; light up dark areas and uncover valuable assets.\n\n\nEach weapon comes with its own custom-made animations  for shooting, reloading, and equipping — all of which we’ll create together inside Unreal Engine 5. We’ll also add ammo pickups, win and lose conditions, impact visual effects, and ragdoll effects to bring the world to life .\n\n\nThis course is organized into three structured sections, designed to take you from complete beginner to building your own playable game step by step:\nSection 1: Unreal Engine & Blueprint Basics\nWe’ll start with the foundations. You’ll learn how to navigate Unreal Engine 5, understand the basics of Blueprints, and create your first simple game functionalities without writing any code. We’ll also import all the assets we need for our project, so everything is ready for development.\nSection 2: Unreal Engine Animation Framework\nIn this section, you’ll dive into Unreal’s animation system. You’ll learn how animation assets work, and more importantly, we’ll create the animations we need for our game ourselves. That includes equip, fire, and reload animations for each weapon, so you won’t depend on any external animation packs — everything will be built from scratch.\nSection 3: Putting It All Together\nThis is where it gets exciting! We’ll combine everything we’ve built and bring the game to life. You’ll learn how to set up weapon switching, shooting and reloading mechanics, enemy AI, the game HUD, and a wave-based game mode. We’ll also implement win and lose conditions, and finally, package the project, so you have a complete, polished game ready to play or showcase.",
      "target_audience": [
        "Absolute beginners who want to make their first video game using Unreal Engine 5 — no coding or previous experience required.",
        "Aspiring game developers curious about building a first-person shooter with zombies, guns, and AI.",
        "Artists or 3D enthusiasts who want to see their assets come to life inside an interactive game.",
        "Gamers who always dreamed of making their own playable project but felt overwhelmed by the technical side.",
        "Anyone who wants a fun, beginner-friendly introduction to game development, Blueprints, and animation in Unreal Engine 5."
      ]
    },
    {
      "title": "Rattan Rocker | A Complete Game Asset Workflow",
      "url": "https://www.udemy.com/course/rattan-rocker/",
      "bio": "Learn the full game asset pipeline through modeling a game-ready asset!",
      "objectives": [
        "Full workflow of a game-asset's production lifecycle",
        "Modeling efficiently and non-destructively using modifiers",
        "UV Unwrapping tools, tips and tricks",
        "Flexible, reusable texture and material development in the Substance Suite",
        "High quality portfolio renders in Blender and Marmoset Toolbag"
      ],
      "course_content": {
        "Introduction": [
          "Course Overview",
          "Project Setup"
        ],
        "Modeling": [
          "Horse Body",
          "Wicker Bracers",
          "Closing Geometry"
        ],
        "UV Mapping": [
          "UV Unwraps",
          "UV Texture Set"
        ],
        "Mesh Export": [
          "Export Prep"
        ],
        "Substance Designer Materials": [
          "Plain Weave Height Map",
          "Plain Weave Output Maps",
          "Wicker Straps",
          "Wood Height Map",
          "Wood Output Maps",
          "Material Exports"
        ],
        "Substance Painter Texturing": [
          "Importing Mesh and Materials",
          "Painting Wicker Material",
          "Painting Wood Material",
          "Painting Final Material Details",
          "Exporting Textures"
        ],
        "Post-Texture Modeling & Retopology": [
          "Ankle Connectors",
          "Head Connectors",
          "Retopology"
        ],
        "Renders": [
          "Blender Render",
          "Marmoset Toolbag 4 Render"
        ],
        "Course Debrief": [
          "Closing Remarks"
        ]
      },
      "requirements": [
        "An introductory knowledge of navigating and working in Blender, Substance Designer and Substance Painter will greatly help"
      ],
      "description": "If you have ever been interested in learning how to create game-ready assets using efficient, non-destructive workflow techniques then this is the course you've been looking for! In this course, we will cover the entire game asset workflow from start to finish. We will model, unwrap, texture and finally render out a game-ready rocking horse asset that will also look great for your game-art portfolio.\nIn this course, you will also learn:\nTwo free Blender add-ons to speed up your workflow\nNon-destructive modeling and texturing techniques for flexible designs\nThe complete creation of 3 seamless, high-quality materials using Substance Designer\nTexture development and authoring using Substance Painter\nShooting portfolio renders using both Blender and Marmoset Toolbag 4\nOver our 10 hours together, we will get to rapidly develop our rocking horse asset from initial concept to completed piece. We will learn various modifiers within Blender 3D to quickly iterate on our designs and walk through how we can efficiently unwrap our model for high-quality textures. Using Substance Designer, we will create 3 materials entirely from scratch which we can then add to our material library in Substance Painter for re-use later on any project we choose! Finally, we will use Blender and Marmoset Toolbag 4 to capture excellent renders of our hard work to be able to show our friends, family and future employers exactly how great our game development skills are!",
      "target_audience": [
        "Beginner 3D Game Artists looking to beef up their portfolio and get comfortable with an industry game asset workflow"
      ]
    },
    {
      "title": "Learning Path: Unreal Engine: Master Unreal Engine 4.x",
      "url": "https://www.udemy.com/course/learning-path-unreal-engine-master-unreal-engine-4x/",
      "bio": "Probe deep to enhance your game development proficiency using Unreal Engine 4.x with key elements of C++",
      "objectives": [
        "Work with classes and actors in UE4",
        "Understand memory management in UE4",
        "Learn to use the Unreal Engine C++ API",
        "Navigate the API documentation",
        "Add scripts to the character",
        "Spawn the characters using C++"
      ],
      "course_content": {
        "Basics of Coding with Unreal Engine 4": [
          "The Course Overview",
          "Installing UE 4",
          "Setting Up Your First Project",
          "Logging in Unreal Engine 4",
          "Creating Classes in Unreal Engine 4",
          "Making Classes Editable",
          "Actor and Component Classes",
          "Implementing Actor Functionality",
          "Spawning Actors",
          "Managed Versus Unmanaged Memory",
          "Tracking Objects in Memory",
          "Working with the Garbage Collection System in Unreal Engine 4",
          "Using Profilers and Debugging Your Code",
          "Basics of Coding with Unreal Engine 4"
        ],
        "Unreal Engine 4 Scripting with C++": [
          "The Course Overview",
          "Examples of Using C++ for Scripting in Unreal",
          "Examples of the Unreal Engine Class Hierarchy",
          "Understanding Components in Unreal Engine 4",
          "Manipulating Components to Make Our Ideas Come to Life",
          "Examples of Actors in Unreal",
          "The Benefits of Understanding the C++ Syntax",
          "The Advantages of C++ Over Blueprints",
          "Creating Our First C++ Actor",
          "Adding Some Scripting to Our Actor",
          "Using C++ to Spawn Actors into Our Game",
          "Using a Particle System Component to Create an Explosion",
          "Exposing C++ Code to the Editor Using Macros",
          "Finishing Our Explosive Mine",
          "Unreal Engine 4 Scripting with C++"
        ],
        "Mastering Unreal Engine 4.x Game Development": [
          "The Course Overview",
          "Assets and Resources",
          "Project Setup",
          "Connecting to a Perforce Repository",
          "Connecting to a Git Repository",
          "Navigating the C++ API",
          "Unreal Engine C++ Workflow",
          "Unreal Engine Data Types",
          "Common UE4 Macros",
          "Debugging C++ Projects",
          "Basic Physics",
          "Tuning Physics",
          "Basic Raycasting",
          "Advanced Raycasting",
          "Importing Assets + Level Overview",
          "Character Foundations",
          "Character Input",
          "Character Animations and Particle Effects",
          "Tuning Character Physics",
          "Mastering Unreal Engine 4.x Game Development"
        ]
      },
      "requirements": [
        "Basic programming knowledge of C++ is needed."
      ],
      "description": "Unreal Engine is among the most comprehensive and advanced game engines in the market. It’s a complete suite of game development tools for game developers. Along with the C++ programming language, UE4 will enable you to implement efficient games with unparalleled performance. If you're interested to build complex stunning games with amazing graphics powered by Unreal Engine 4.x, then go for this Learning Path.\nPackt’s Video Learning Paths are a series of individual video products put together in a logical and stepwise manner such that each video builds on the skills learned in the video before it.\nThe highlights of this Learning Path are:\nMaster aspects of game development in Unreal Engine 4.x\nCreating Unreal Engine C++ projects and connecting them to source control\nUnderstanding the relationship between the Unreal Engine blueprint system and the C++ API\nExplore and enhance your game programming skills using Unreal Engine 4\nPacked with exciting and practical recipes, this Learning Path is a guide showcasing techniques to use the power of C++ while developing games with UE4. In this Learning Path, you will learn basic Unreal Engine 4 C++ programming. You will be exposed to the architecture of Unreal Engine 4 classes, memory management, and basic coding utilizing the C++ programming language.\nFurther, you will learn how to add and edit C++ classes from within the Unreal Editor. You will then delve into one of Unreal's primary strengths, the ability for designers to customize programmer-developed actors and components. The Learning Path will help you understand the benefits of when and how to use C++ as the scripting tool. With a blend of task-oriented recipes, this Learning Path will provide actionable information about scripting games with UE4, and manipulating the game and the development environment using C++.\nTowards the end of this Learning Path, you will be empowered to become a top-notch game developer with Unreal Engine 4 using C++ as the scripting language.\nMeet Your Experts:\nWe have combined the best works of the following esteemed authors to ensure that your learning journey is smooth:\nDr. AlirezaTavakkoli is an associate professor of computer science at the University of Houston-Victoria. He is the director of the Digital Gaming and Simulation program. He is also the founding director of the Computation and Advanced Visualization Engineering Laboratory. During his tenure at the university, Dr. Tavakkoli has taught graduate and undergraduate courses in computer science and gaming, including advanced level design, game engines programming, gaming network architecture, artificial intelligence, parallel computing, and theory of computation.\nPaul Mauviel is a freelance contract consultant specializing in virtual reality, Unreal Engine and containerized web application technology. Paul has also worked on multiple containerized application solutions for dynamic web application hosting and deployment.\nReuben Ward has helped people create their dreams in Unreal Engine! Till date, he has helped over 450,000 people learn something about making games using the Unreal Engine with his tutorial videos. When he first started using Unreal Engine, he felt the need for the lack of C++ tutorials for game developers. He wanted to make great games but had no idea where to start. Having mastered the art of game development in Unreal he has set out to make tutorials to help people learn, and help solve this very problem.",
      "target_audience": [
        "This Learning Path is targeted at game developers with a basic knowledge of C++ programming, who wish to explore Unreal Engine 4 as their game development platform."
      ]
    },
    {
      "title": "Create a Start Menu with Bolt in Unity using State Graphs",
      "url": "https://www.udemy.com/course/unity-bolt-visual-scripting-menu/",
      "bio": "Visual Scripting with Bolt for Unity | Bolt Basics: Create a Menu",
      "objectives": [
        "Installing Bolt for Unity",
        "Setting up a working layout",
        "How to use a Flow graph / Flow Machine",
        "How to use a State Graph / State Machine",
        "How to Create a Menu using Unity UI Elements",
        "Set up the Menu Structure for your Main Menu",
        "Set up the Flow / Logic for the State machine"
      ],
      "course_content": {},
      "requirements": [
        "You will need to Purchase Bolt",
        "You will need to download and install Unity",
        "In terms of knowlege, there are no Course Requirements. This course is designed for the complete beginner!!!"
      ],
      "description": "In this course you will be introduced to Bolt, a visual scripting tool built for Unity. Bolt gives you the ability to create Unity scripting without writing one line of code. Bolt is very easy and fun to learn. This course is designed for the complete beginner. It is a basic course that covers Flow Graphs, State Graphs , Variables and The Unity UI. The course is not heavy on programming terms allowing you to learn by doing.\nThis course will show you how to use the State Graph to Create a Menu which can be very helpful for those who are looking for a step by step example.",
      "target_audience": [
        "This course was designed fo those are interested in programming without writing actual code.",
        "For those that may be using Bolt already but wanted to understand and see an example of States being used."
      ]
    },
    {
      "title": "The Complete Course of Microsoft DirectX 2025",
      "url": "https://www.udemy.com/course/directx-course/",
      "bio": "Learn Microsoft DirectX 11 in a Professional way. Become an expert in Game Programming and HLSL, from ZERO to HERO!",
      "objectives": [
        "At the end of the course you will fully master Microsoft DirectX, to be able to create custom rendering solutions or your own games from scratch",
        "You will be able to manage your own projects, understanding all the logic and ending with advanced practical examples & step by step exercises",
        "You will become familiar with the user interface, toolbars and basic commands, and you will master all the phases of the configuration process",
        "You will learn in a professional way the Direct 3D and the Drawing of your First Triangle",
        "You will understand Development of Components in DirectX: Refactoring, Camera, Cube Drawing, Textures...",
        "You will learn the Rendering Engine, Device Components, and System Design for Swapchain, understanding their interpretation",
        "You will understand how to develop Buffers and Pipeline Assets in a professional way, or how to Develop Mesh System",
        "You will perform real practical scenarios to wrap up: Testing the Model System, Creating Pipeline Object, Creating Mesh Object, Adding Diffuse Light",
        "You will master the advanced Tips and Tricks to Master DirectX, and you will discover the best resources to stay updated",
        "You will be able to practice the content learned in a practical way by following all the steps in the complete exercises and the complete projects",
        "You will start with the basics and progressively carry out more complex steps until you reach an advanced level and absolute mastery at the end of the course"
      ],
      "course_content": {
        "Introduction to Window Creation": [
          "Basic Introduction to Project",
          "Welcome Quiz",
          "Installing and Initializing The Project Settings",
          "Initializing Window with GLFW",
          "Learning Git Commands"
        ],
        "Introduction to Direct3D": [
          "Introduction to Direct3D",
          "Basics of Direct3D",
          "Drawing First Triangle",
          "Challenge Solution"
        ],
        "Development of Components": [
          "Refactoring to Create Object",
          "Adding Camera",
          "Camera Challenge",
          "Camera Fix and Cube Drawing",
          "Adding Textures"
        ],
        "Introduction to Rendering Engine": [
          "Introduction to Engine Architecture",
          "Brief Coding of Device Components",
          "System Design for Swapchain"
        ],
        "Development of Buffers": [
          "Design of FrameBuffer",
          "Creation of TextureView",
          "Creation of GraphicsBuffer"
        ],
        "Development of Pipeline Assets": [
          "Creating Shaders Props",
          "Creating Pipeline Assets Part 1",
          "Creating Pipeline Assets Part 2",
          "First test of Engine",
          "Creating Command List"
        ],
        "Developing Mesh System": [
          "Creating Mesh Class",
          "Creating Texture Resource",
          "Creating Resource Importer"
        ],
        "Final exercises": [
          "Testing The Model System",
          "Creating Pipeline Object",
          "Creating Mesh Object",
          "Adding Diffuse Light"
        ]
      },
      "requirements": [
        "Having basic notions of DirectX 11 can help, but if not, do not worry cause the course starts from scratch",
        "Downloading and installing the needed softwares (if you don't know how, don't worry, it's very easy, free, and I'll explain it to you in the course!)",
        "A decent computer and of course, desire to learn!"
      ],
      "description": "Become a DirectX professional and learn one of employer's most requested skills nowadays!\nThis comprehensive course is designed so that software developers, game programmers, graphic programmers, engineers, students... can learn Microsoft DirectX 11 from scratch to use it in a practical and professional way. Never mind if you have no experience in the topic, you will be equally capable of understanding everything and you will finish the course with total mastery of the subject.\nAfter several years working in software engineering, we have realized that nowadays mastering DirectX is very necessary for creating custom rendering solutions, creating your own game from scratch, or other graphic development applications. Knowing how to use this package can give you many job opportunities and many economic benefits, especially in the world of the graphics software engineering.\nThe big problem has always been the complexity to perfectly understand DirectX it requires, since its absolute mastery is not easy. In this course we try to facilitate this entire learning and improvement process, so that you will be able to carry out and understand your own projects in a short time, thanks to the step-by-step and detailed examples of every concept.\nWith almost 18 exclusive hours of video and 31 lectures, this comprehensive course leaves no stone unturned! It includes both practical exercises and theoretical examples to fully master Microsoft DirectX. The course will teach you DirectX 11 in a practical way, from scratch, and step by step.\nWe will start with the installation and setup of needed software to follow the course and then, we'll cover a wide variety of topics, including:\nIntroduction to DirectX and course dynamics\nWork environment set up, configurations and needed installations\nGeneral familiarization with the user interface and elements\nIntroduction to Direct 3D: Fundamentals and Drawing First Triangle\nDevelopment of Components in DirectX: Refactoring, Camera, Cube Drawing, Textures...\nIntroduction to Rendering Engine, Device Components and System Design for Swapchain\nDevelopment of Buffers and Development of Pipeline Assets\nDeveloping Mesh System\nFinal exercises: Testing the Model System, Creating Pipeline Object, Creating Mesh Object, and Adding Diffuse Light\nHow to Troubleshoot Common Problems and Fix Them Fast\nAdvanced Tips and Tricks to Master DirectX11 and the best resources to stay updated\nMastery and application of absolutely ALL the functionalities of Microsoft DirectX and Direct3D\nPractical exercises, complete projects and much more!\nIn other words, what we want is to contribute our grain of sand and teach you all those things that we would have liked to know in our beginnings and that nobody explained to us. In this way, you can learn to manage a wide variety of real applications cases quickly and make versatile and complete use of DirectX11. And if that were not enough, you will get lifetime access to any class and we will be at your disposal to answer all the questions you want in the shortest possible time.\nLearning Microsoft DirectX has never been easier. What are you waiting to join?",
      "target_audience": [
        "Beginners who have never used DirectX11 before",
        "Graphic software programmers, game developers, engineers, students... who want to learn to use a new application programming interface for game programming and video",
        "Intermediate or advanced Microsoft DirectX users who want to improve their skills even more!"
      ]
    },
    {
      "title": "Unreal Engine 5: Ultimate VR Guide",
      "url": "https://www.udemy.com/course/unreal-engine-5-ultimate-vr-guide/",
      "bio": "Learn to build a fully functional VR game in Unreal Engine 5! Master VR locomotion, mechanics, UI, etc.",
      "objectives": [
        "Install and Setup VR/AR Tools for Game Development",
        "Implement Core VR Gameplay Mechanics",
        "Master Shortcuts in VR Development Workflow",
        "Create a Fully Functional VR Game from Start to Finish in Unreal Engine"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Tools and Software Required",
          "Installing Epic Games Launcher",
          "Creating a Project"
        ],
        "VR Setup": [
          "Downloading and Setting up MetaXR",
          "Enabling Developer Mode",
          "Installing Meta Quest Developer Hub and Meta Quest Link",
          "Connecting to Air Link",
          "Enabling MetaXR Plugin",
          "Fixing Crashes"
        ],
        "Project Setup": [
          "Initializing the Project",
          "Updating Project Settings",
          "Mapping Controls to Mouse and Keyboard",
          "Solution to Challenge",
          "Smooth Locomotion & Camera Controls",
          "Adding Grip Functionality",
          "Fixing Character Height"
        ],
        "Game Environment": [
          "Importing Assets and Setting Up the Game Environment",
          "Designing the Level: Backgrounds and Props",
          "Fixing Tree Material",
          "Added Grab Component to the Sword"
        ],
        "Fruit Behavior": [
          "Preparing the Fruit Parent",
          "Preparing the Fruit Children",
          "Preparing the Fruit Spawner",
          "Spawning Fruits in Random Patterns",
          "Implementing Physics for Fruit Movement",
          "Adding Bombs"
        ],
        "Sword Interaction": [
          "Programming Slicing Detection",
          "Creating Slicing Mechanics",
          "Fixing Fruit Cap Material",
          "Adding Haptic Feedback for Slicing Action"
        ],
        "Core Gameplay Mechanics": [
          "Programming Bomb Slice Detection",
          "Creating a Scoring System 1: 3D Widget",
          "Creating a Scoring System 2: Score Increment",
          "Creating a Scoring System 3: Score Display",
          "Implementing a Timed Mode 1: Creating a Countdown Timer",
          "Implementing a Timed Mode 2: Displaying the Timer",
          "Implementing a Timed Mode 3: Stopping the Spawner"
        ],
        "Start and Pause Menu": [
          "Adding a Start Menu Widget",
          "Implementing Slice to Start Functionality",
          "Spawning the StartMenu When the Timer Ends",
          "Creating a Pause Menu Widget",
          "Creating a Controller Laser Using Niagara",
          "Adding Pause and Resume Logic",
          "Enabling UI Laser Interaction",
          "Adding Resume and Restart Button Functionality",
          "Adding Start Menu and Exit Game Functionality"
        ],
        "Audio Enhancements": [
          "Integrating Background Music",
          "Integrating Fruit Slice Sound Effect",
          "Integrating Bomb Slice Sound Effect"
        ],
        "Packaging and Publishing": [
          "Packaging the Game for VR Devices",
          "Packaging Requirements",
          "Installing the Game in Meta Quest Headset"
        ]
      },
      "requirements": [
        "Have a PC that can run Unreal Engine and a VR Headset"
      ],
      "description": "Are you ready to dive into the world of VR game development? This course is your ultimate guide to creating a VR game in Unreal Engine 5 from start to finish. Whether you're an aspiring developer, an indie game creator, or simply passionate about virtual reality, this course will equip you with the skills to build a fully functional VR experience.\n\n\nWhat You’ll Learn:\nSet up Unreal Engine for VR development – Learn how to install, configure, and troubleshoot MetaXR for seamless VR integration.\nDevelop physics-based slicing mechanics – Implement sword slicing, bomb detection, and haptic feedback for an immersive experience.\nCreate interactive fruit physics – Program fruit spawning, movement, and destruction with realistic VR interactions.\nDesign and implement core gameplay mechanics – Build scoring systems, timed game modes, and user-friendly UI elements.\nEnhance the game with visual and audio effects – Add particle effects, sound design, and background music to polish your game.\nPackage and publish your VR game – Learn how to optimize, test, and distribute your game for VR platforms.\n\n\nWho is this Course For?\nAspiring VR Developers – Perfect for those new to VR game development in Unreal Engine.\nGame Developers & Designers – Expand your skill set by learning VR-specific mechanics and interactivity.\nIndie Game Creators – Learn how to take a game from concept to completion, ready for publishing.\nStudents & Hobbyists – If you’re passionate about game development and want to create a fun VR project, this course is for you!\n\n\nThis hands-on course guides you step by step through the entire VR development process in Unreal Engine 5. By the end of this course, you'll have built a fully functional VR Fruit Ninja-style game with all the core features, giving you practical experience and a solid foundation for future VR projects.\n\n\nStart your journey into VR game development today!",
      "target_audience": [
        "Aspiring VR Game Developers – Individuals who want to break into VR game development and create interactive experiences using Unreal Engine.",
        "Unreal Engine Enthusiasts – Developers familiar with Unreal Engine who want to expand their skillset by learning how to build a VR game from start to finish.",
        "Indie Game Developers – Creators looking to develop their own VR projects, implement core gameplay mechanics, and polish their games with immersive visual and audio effects.",
        "Students and Hobbyists – Anyone interested in game development, whether they are students, hobbyists, or professionals transitioning into VR game development.",
        "Game Developers Interested in Physics-Based Gameplay – Learn how to program interactive slicing mechanics, physics-driven fruit movement, and bomb interactions to create an engaging gameplay experience."
      ]
    },
    {
      "title": "Make a 2d Platformer in Unity 2020 using Design patterns",
      "url": "https://www.udemy.com/course/unity-2020-2d-platformer/",
      "bio": "Learn how to architect your codebase for a 2d platformer using design patterns.",
      "objectives": [
        "How to create a 2D platformer in Unity 2020",
        "How to use State Pattern, Strategy pattern and Factory method pattern in a full game project",
        "How to write maintainable C# code",
        "How to save game state",
        "How to create multiple level"
      ],
      "course_content": {
        "Introduction": [
          "Content of this course",
          "Resources used to create this course",
          "How to use project files and ask Questions",
          "How to use github repository",
          "Rating the course and getting a refund",
          "Project setup"
        ],
        "Working with Tilemaps": [
          "Section 2 - Introduction",
          "Exploring the assets",
          "Update - Importing tiles for the Tilemap",
          "Setting up tilemap",
          "Editing tilemap",
          "Creating ground",
          "Adding Background",
          "Sorting Layers",
          "Setting camera",
          "Project files so far"
        ],
        "Basic Character movement": [
          "Section 3 - Introduction",
          "Creating player agent setup",
          "Setting Physics 2D collision layers",
          "Player Input Script 1",
          "Player Input Script 2",
          "Player Input Script 3",
          "Creating Agent scripts to move the player",
          "Animations: Idle & Run",
          "AgentAnimations script",
          "Flipping Player Sprite when moving left",
          "Character gets stuck to a wall!",
          "Full Project so far"
        ],
        "Making character movement system extendable": [
          "Section 4 - Introduction",
          "Problem with extending the character controller",
          "What is state pattern",
          "Creating State script",
          "Creating Idle State",
          "Creating MovementState P1",
          "Creating MovementState P2 - Adding acceleration",
          "Refactoring Agent script to state pattern",
          "Project files so far"
        ],
        "Adding jumping mechanic": [
          "Section 5 - Introduction",
          "Challenge: Adding animations",
          "Solution: Adding animations",
          "Grounded Detector - Idea",
          "Ground Detector - Gizmos",
          "Ground Detector - Detection",
          "Adding jump and fall state",
          "Jump State class - Challenge",
          "Jump State class - Solution",
          "Jump State - Better Jump",
          "Testing Jump",
          "Fall state class - Challenge",
          "Fall State class - Solution",
          "Finishing Fall State",
          "AgentData SO",
          "Project files so far"
        ],
        "Cinemachine camera setup": [
          "Section 6 - Introduction",
          "Creating a 2D Cinemachine camera",
          "Improving the camera setup",
          "Adding Camera confiner",
          "Project files so far"
        ],
        "Creating Level 1": [
          "Section 7 - Introduction",
          "Challenge - Creating more ground",
          "Solution - Creating more ground",
          "Adding platforms - basic setup",
          "PlatformEffector 2D",
          "Adding a ladder",
          "Adding map details",
          "Adding Parallax Effect to the background",
          "Project files so far"
        ],
        "Climbing Mechanic": [
          "Section 8 - Introduction",
          "Adding Climb Animation",
          "Can I climb?",
          "Climbing state - Challenge",
          "Climbing state - Solution",
          "Transitioning to Climbing state",
          "Project files so far"
        ],
        "Adding player UI": [
          "Section 9 - Introduction",
          "Creating Player Canvas",
          "Text Mesh Pro - adding font",
          "Adding Health UI",
          "Challenge - Adding Points UI",
          "Solution - Adding Points UI",
          "Health UI Script",
          "Point UI Script",
          "Player UI Script",
          "Project files so far"
        ],
        "Respawn system": [
          "Section 10 - Introduction",
          "Idea behind respawn system",
          "Respawn Point Script",
          "Respawn Point Manager",
          "Pit Collider",
          "Respawning the Player",
          "Placing Spawn Points on the map",
          "Respawn Helper",
          "Project files so far"
        ]
      },
      "requirements": [
        "Intermediate knowledge of c# language ex how abstract classes / interfaces works",
        "Basic knowledge of Unity 2020 ex Mecanim Animation System",
        "Basic knowledge of Unity 2020 ex How Raycasting / Physics 2D works",
        "Basic knowledge of Unity 2020 - know your way around the inspector",
        "Visual Studio IDE ex 2019 is recommended"
      ],
      "description": "Making games is fun but there is nothing more frustrating than adding new code to create a new game mechanic just to have the old code break. At this point it stops being fun and bug search begin - which honestly is the least fun thing to do when you could instead design a new level for your game. That is why it is so important to learn how to create maintainable and extensible code base for your game. If you search for a solution you will find Design patterns and SOLID principles. If you have every tried to learn design patterns you surely know that it is not intuitive when to use it. Each presents a solution but requires time and additional code to work. Implementing them just for the sake of it is just a waste of time - so when should we use them? The answer is - when adding new features or extending the old ones seems like a lot of work and effort.\n\n\nIn this course you will learn how to use state pattern as a base to create your character controller and how to refactor your code to other design patterns when you can see that adding new feature starts to be \"painful\" and unintuitive. At the end you will know the way of thinking behind the refactoring process and behind the decision when to use design patterns.\nYou will learn how to write decoupled classes - meaning that class A doesn't rely on Class B but if they both exist they can communicate witch each other to create our desired game mechanics.\nThis is an Intermediate course about creating a maintainable and extensible codebase and in effect a full 2d platformer game. You should know your way around Unity and feel comfortable coding in C# using Visual Studio IDE.\nYou will learn how to:\nCreate a character that can move and jump and extend it's character controller with new features like: climbing behaviour, attack logic etc.\nHow to reuse players character controller for enemies\nHow to create 3 types of enemies as well as a end level boss\nHow to use factor method pattern to make your code more maintainable\nHow to use Strategy pattern to implement simple AI system\nSpecific platformer features that we will implement:\npicking up resources\nrespawn system\nadding platforms with one-way collider\ncreating parallax effect for our level\nmelee and throwable weapons\nand much more!\nIf for any reason you don't enjoy the course you have 30 days from the purchased date to get your money back - no questions asked.\nI hope to see you in the course :)\n-Peter",
      "target_audience": [
        "Intermediate Unity Developers",
        "Intermediate C# developers"
      ]
    },
    {
      "title": "Unity Game Tutorial: Tetris 3D",
      "url": "https://www.udemy.com/course/unity-game-tutorial-tetris-3d/",
      "bio": "Learn how to create a Tetris 3D in Unity Game Engine.",
      "objectives": [
        "You'll learn how to create your own Tetris 3D version.",
        "You'll learn how to extend your workflow by coding in Inspector Time.",
        "You'll learn C# - Variables, Arrays, Loops, Functions"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "The Concept": [
          "The Concept",
          "Unity Layout"
        ],
        "The Playfield": [
          "Playfield Setup",
          "Playfield Material",
          "Coding Playfield Grid #1",
          "Coding Playfield Grid #2",
          "Coding Playfield Grid #3",
          "Coding Playfield Grid #4"
        ],
        "The Camera": [
          "Camera #1",
          "Camera #2"
        ],
        "The Blocks": [
          "Creating the Blocks",
          "Moving Blocks Down",
          "Valid Moves - Round",
          "Valid Moves - In Grid",
          "Valid Moves - Update Grid",
          "Tetris Block - Update Grid",
          "Valid Move - Get Grid Position",
          "Block List",
          "Spawning New Blocks",
          "Spawn Block Position Fix"
        ],
        "Movement Inputs & UI": [
          "Movement Input",
          "Rotation Input",
          "Movement UI",
          "Rotation UI",
          "Mini Cleanup UI",
          "Reposition InputHolder 1",
          "Reposition InputHolder 2",
          "Moving Blocks with UI",
          "Rotating Blocks with UI",
          "2-Sided UI Buttons",
          "Switching Inputs",
          "Speed Up Blocks"
        ],
        "Deleting Layers": [
          "Check Full Layer",
          "Deleting Blocks",
          "Move All Down",
          "Bugfixes",
          "Clean Up & Random Start Block"
        ],
        "Ghost Blocks": [
          "Prefabs",
          "Ghost List",
          "Reposition",
          "Move Down",
          "Final Steps"
        ],
        "Score - Layers - Preview Blocks": [
          "UI - Intro",
          "Previewer - Setup",
          "Previewer - Coding",
          "Previewer - Finishing",
          "Score, Level, Layers",
          "Calculate FallSpeed & Score",
          "Calculate Cleared Layers",
          "Text Elements",
          "Update Text Elements",
          "Update FallTime"
        ],
        "Game Over": [
          "Game Over",
          "Game Over Window"
        ]
      },
      "requirements": [
        "A Pc or Mac",
        "Unity 5.6 or higher",
        "The mood to complete the course.",
        "A passion for Games.",
        "The will to learn."
      ],
      "description": "In this Course you'll learn how to create a Tetris 3D in Unity Game Engine.\nWe create the game so, that the player has to fill full 3D Layers instead of rows.\nThis course is a Beginner/Intermediate Course, so if you have trouble in any case, write me a message or Q&A, and i'll help as best as i can.\nIf you are beginner, you might have some trouble to follow, but the videos will guide you through the complete course. Don't forget you only become better if you repeat things and keep on learning!\nSo we create several Systems which will give us enough freedom to:\nC# (Monodevelop)\ncreate any Tetris like game\nyou learn about arrays functions, lists, variables and much more\naccess to other scripts the easiest way\nresize the playfield automatically\nUnity (2018.2.11f1)\ncreate a Playfield of your liking\ncreate Button Inputs to give the Player a way to control the tetris blocks\nCreate a simple Game Ove GUI\nMenu and Game Scene and connect them together\nCourse Material\nI provide:\n5 white grafics as *.png for arrows and frames\nYou have to write the code on your own, i do not provide the final scripts!\nAll other graphics for Menu's, Icons, Images or Buttons need to be created on your own.\nAll Materials i provide are for education only and should not be in your final release!\nConclusion\nIn the end of this course you will have a fully functional Tetris 3D Game.\nChallenge\nAfter you have created nice Menus, Buttons, and maybe additional content, upload the Game to any Gaming Website, Google Playstore, Apple Store or even Windows Store or Steam.\nSo what are you waiting for?\nLet's make your dream game a reality!!\nLevel: Beginner/Intermediate\nVideo Course Length: ~6 hours\nUnity Version required: 5.6+",
      "target_audience": [
        "Want to become a Game Developer.",
        "Want to create your very first game or want to finsh one.",
        "Want to learn Unity and C#.",
        "Want to learn how a Tetris Game in 3D space is created.",
        "Gaming Intusiast."
      ]
    },
    {
      "title": "Create A Hidden Objects Game in Godot",
      "url": "https://www.udemy.com/course/create-a-hidden-objects-game-in-godot/",
      "bio": "Creating Games with Ease",
      "objectives": [
        "The core of a hidden objects game",
        "Layering system for a hidden objects game",
        "Moving from one location/room to another",
        "Saving and Loading Data",
        "Create a lock and key system",
        "Create reusable scripts"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Downloading Godot",
          "Creating Our Project"
        ],
        "Creating the Game": [
          "Scene Layers",
          "Changing the Mouse",
          "Collecting Objects",
          "Visual Inventory",
          "Saving and Loading Data",
          "Loading Data to Inventory",
          "Remove Objects from Scene",
          "Draggable Objects",
          "User Information",
          "Map",
          "Using the Map",
          "Locks",
          "Fixing Lock Signal",
          "Alternative Options",
          "How to Add Audio"
        ]
      },
      "requirements": [
        "Have a working computer"
      ],
      "description": "Learn to create games in the Godot game engine using a python-like programming language, GDscript.\n\nIn this course, we will create a Hidden Objects game that is cross-platform for MacOS, Windows, Linux, Android, IOS or even embed into a browser.\n\nWhile on your game development journey you will gain the skills and ability to create the Hidden Objects game you want.\n\n****If you have no experience in coding or want to familiarize yourself with the language, my course on learning the GDscript language is recommended to help at least learn basic code terminology and structure****\n\n\nYou will learn:\nThe layering of Hidden Object games\nHow to move from one location to another\nSave and Load data\nCreate a key and lock system\nInventory Management\nChange Mouse based on specified conditions\nand more...\n\n****If you have no experience in coding or want to familiarize yourself with the language, my course on learning the GDscript language is recommended to help at least learn basic code terminology and structure****\n\nGodot provides a huge set of common tools, so you can just focus on making your game without reinventing the wheel.\nGodot is completely free and open-source under the very permissive MIT license. No strings attached, no royalties, nothing. Your game is yours, down to the last line of engine code.",
      "target_audience": [
        "Godot developers that want to learn how to make a hidden objects game"
      ]
    },
    {
      "title": "The Complete Unity VR Developer Course",
      "url": "https://www.udemy.com/course/unity-vr-developer-course/",
      "bio": "Learn everything you need to create amazing games using Unity.",
      "objectives": [
        "Import and set up assets for 3D VR game development",
        "Get started with VR development",
        "Design and implement dynamic and responsive User Interfaces",
        "Create characters that act intelligently and make reasoned decisions",
        "Create and handle complex animation systems",
        "Unlock all the potentiality of the physics engine"
      ],
      "course_content": {
        "Welcome": [
          "Introduction",
          "Why becoming a Unity VR developer",
          "How do I get started with VR in Unity?",
          "Exercise Files",
          "What you will learn",
          "Google VR",
          "Import assets",
          "Learn how to set up assets",
          "Set up the seawall asset",
          "Set up the road asset",
          "Set up the buildings asset"
        ],
        "Driver and Car": [
          "Car Asset",
          "Modified Car Asset",
          "First Person Controller"
        ],
        "VR": [
          "Introduction",
          "VR Player Controller",
          "Learning The Cameara Rig",
          "Learning The Unity Player Settings",
          "Learn About VR Walkthru"
        ],
        "Deploying": [
          "Cardboard",
          "Builtin Support"
        ],
        "Course Summary": [
          "Summary",
          "Thank You!"
        ]
      },
      "requirements": [
        "PC or Mac"
      ],
      "description": "Ignite Your Game Development Journey: Become a Master of Unity and Forge Unforgettable Worlds\nHave you ever felt the raw creative power of shaping entire universes, dictating their laws of physics, and crafting the destinies of their inhabitants? Do you yearn to breathe life into complex, multi-faceted characters, weave intricate, branching narratives that respond to player choices, and unleash interactive experiences that not only entertain but also forge lasting memories and leave players breathless with wonder? Your quest ends here. This isn't just a course; it's a launchpad, a crucible where your imagination is forged into the electrifying realm of professional game development.\nPrepare to wield the unparalleled capabilities of Unity, the industry-leading engine that empowers visionary creators like you to construct, deploy, and monetize groundbreaking games with seamless efficiency, reaching a global audience across diverse platforms. We don't just teach Unity; we immerse you in its core mechanics, its hidden potential, and its limitless possibilities, transforming you from a novice into a game development powerhouse, capable of tackling any creative challenge.\nThrough a meticulously structured, project-based curriculum, you'll embark on a thrilling expedition: the creation of a dynamic first-person game, brimming with cutting-edge features, polished mechanics, and innovative design. Our seasoned instructors, veterans of the game industry, will dissect Unity's intricate toolset, revealing the secrets to crafting awe-inspiring VR experiences that redefine immersion, and ensuring you master both the fundamental principles and the advanced techniques of this versatile engine. You'll gain hands-on experience with advanced scripting, shader programming, and optimization techniques that separate amateur projects from professional-grade titles.\nThis course is a deep dive into the very essence of game creation. You'll architect sprawling, visually stunning environments that transport players to other worlds, command advanced rendering effects that push the boundaries of realism and visual fidelity, and weave in unique gameplay elements, innovative mechanics, and compelling challenges that define your signature style and set your creations apart in a crowded marketplace. Each lecture is a concentrated dose of actionable knowledge, a guided exploration of a critical facet of the game development pipeline – every element essential to achieving true mastery of Unity and the art of game development. We'll delve into topics like procedural content generation, advanced AI implementation, and multiplayer networking.\nYou'll architect and assemble individual game components with a focus on modularity and scalability, harness the power of streamlined animation workflows and state machines to create fluid and expressive character movement, and implement robust collision and physics systems that deliver a visceral, believable, and satisfying gaming experience. Beyond the technical skills, you'll also learn the principles of game design, level design, and user experience (UX) to ensure your games are not only technically impressive but also enjoyable and engaging to play.\nBy the culmination of this transformative journey, you won't just understand Unity; you'll command it with authority and finesse. You'll possess the expertise, the creative vision, and the unwavering confidence to independently develop and produce immersive, high-caliber VR games and interactive experiences that captivate, enthrall, and leave a lasting impact on players. You'll have the skills to not only build games but also to market them, monetize them, and build a sustainable career in the game industry.\nThe future of gaming is not a distant horizon; it's a canvas waiting for your unique vision. Are you ready to seize it? Enroll now and embark on your extraordinary adventure to become the game developer you were destined to be, and leave your indelible mark on the world of interactive entertainment.",
      "target_audience": [
        "Anyone who wants to learn VR development"
      ]
    },
    {
      "title": "Learn GDevelop by creating a 2D Platformer Game",
      "url": "https://www.udemy.com/course/learn-gdevelop-by-creating-a-2d-platformer-game/",
      "bio": "Learn How to Develop a Complete 2D Mobile Platformer Game in GDevelop From Start to Launch in Google Play Store",
      "objectives": [
        "Basic fundamentals of game creation",
        "Create a PC and mobile platformer from scratch to launch in Google Play Store",
        "Create, edit and configure Objects",
        "Take practice quizzes after every section",
        "Easily monetize your game with AdMob banner and interstitial ads",
        "Program enemy characters with basic AI",
        "Build & test your game on an Android device",
        "Easily monetize your game with AdMob banner and interstitial ads",
        "Understand best practices of Level Design"
      ],
      "course_content": {
        "Introduction": [
          "Course Introduction",
          "Install GDevelop on Windows",
          "Install GDevelop on Linux",
          "Game assets we would use",
          "Game Properties",
          "Section Quiz"
        ],
        "The Player - Basics": [
          "Creating the Player",
          "Add Behaviours to the Player",
          "Resources"
        ],
        "The Platforms - Basics": [
          "Creating The Platform",
          "Adding Behaviours to the platform - Platform Type",
          "Adding Jumpthru Platform",
          "Adding Ladder Platform",
          "Resources"
        ],
        "The Player - Animations": [
          "Set Custom Controls (W,A,S,D)",
          "Set Walk and Jump Animation"
        ],
        "Organise Events into Groups": [
          "Organise Events into Groups"
        ],
        "Add a Camera to follow the Player": [
          "Add a Smooth Camera Movement"
        ],
        "The Enemies": [
          "Basic Movement",
          "Enemy Death",
          "Enemy Transition Out"
        ],
        "Player - health/lives": [
          "Adding Health System",
          "Health Refill"
        ],
        "Stage Design - First Stage": [
          "Building A game stage",
          "Changing Background Color",
          "Adding Spikes"
        ],
        "Player - Collectables (Coins/Gems)": [
          "Adding in coins"
        ]
      },
      "requirements": [
        "Should have a laptop",
        "Should be ready to learn in fun way"
      ],
      "description": "NOTE\nGet the course update in my profile. It's titled learn how to create a pixel platformer in GDevelop\nDive into the exciting world of game development with \"earn GDevelop by creating a 2D platformer game\" an Udemy course designed to take you from a beginner to a proficient platform game creator. Whether you're an aspiring game developer or simply an enthusiast with a passion for creating games, this course will empower you to bring your ideas to life using the powerful and intuitive GDevelop game engine.\nIn this comprehensive course, you'll be guided by seasoned game developers as you embark on a hands-on journey to build your very own captivating platformer game from scratch. No prior coding or programming experience is required, as GDevelop's visual interface simplifies the game development process, making it accessible to all skill levels.\nCourse Highlights:\nIntroduction to GDevelop: Familiarize yourself with the GDevelop interface, tools, and features, gaining a solid foundation for your game development journey.\nGame Design Essentials: Learn the fundamental principles of game design, including level structure, character mechanics, enemy behavior, power-ups, and more.\nCreating Characters and Environments: Master the art of character design and animation, and design captivating game environments using GDevelop's versatile tools.\nPlayer Controls: Implement smooth and responsive player controls for movements, jumping, and interactions, enhancing the overall gameplay experience.\nLevel Design: Learn how to design, build, and refine captivating platformer levels with balanced difficulty progression and exciting challenges.\nBy the end of this course, you'll have developed a platformer game. Enroll now and start your exciting journey into the world of game development!",
      "target_audience": [
        "Everyone looking to learn game development"
      ]
    },
    {
      "title": "Unity and Playmaker - Make 3D Zombie Shooter Without Coding!",
      "url": "https://www.udemy.com/course/unity-and-playmaker-make-3d-zombie-shooter-without-coding/",
      "bio": "Learn to create a 3D Polished Arcade Zombie Shooter Game Without Writing A Single Line Of Code.",
      "objectives": [
        "They will have a solid understanding of using Playmaker by creating a complete project from beginning to end.",
        "Learn to use Unity 3d and make a game without coding.",
        "Have a strong understanding of game design logic.",
        "Have a solid understanding of FSMs in Playmaker."
      ],
      "course_content": {
        "Creating Our Game Scene by Using Playmaker and Unity Only Without Coding!": [
          "Introduction - Unity Scene Set Up",
          "Rigging The Main Character Using Mixamo and Cinema 4D or any other 3d Software.",
          "Importing The Animations.",
          "Creating The Character Controller",
          "Adding The Running Animation For Our Player.",
          "Fixing The Running Animation",
          "Making The Camera Follow Our Player During Game Play.",
          "Creating The Jumping Action!",
          "Adding A jumping Animation To Our Jump Controller.",
          "Let's Add A Zombie To Our Scene!",
          "Adding A Rifle To Our Player!",
          "Resetting The Running Animation For Our Player!",
          "Add A Muzzle FX To Our Rifle During Shooting!",
          "Running and Shooting At The Same Time!",
          "Creating The Bullet To Actually Shoot Our Zombie Character!",
          "Shooting And Polishing The Look Our Our Game!",
          "Fixing The Spawner Object!",
          "Make Zombie Follow Our Character!",
          "Creating A Health State For Our Zombie!",
          "Adding A Reaction Animation and a Strobe Effect To Our Zombie When He Is Shot!",
          "Destroying The Zombie Character!",
          "Adding A Health Bar To Our Zombie!",
          "Destroying The Bullets!",
          "Zombie Attack!",
          "Fixing The Zombie Attack!",
          "One More Fix On The Bullet!",
          "Zombie Damage System!",
          "Player Health System!",
          "Adjusting The Zombie Attack System!",
          "Setting Up Game Over For Our Game",
          "Adding Player Death Animation",
          "Creating The Zombie Eating Animation",
          "Multiple Munching Zombies",
          "Adding Hud For Our Player",
          "Creating Game Over UI",
          "Adjusting The Player For Game Over",
          "Creating The Title Menu",
          "Setting Up Game Controller",
          "Building A Playable Game",
          "Let's Play Our Game",
          "Conclusion and Final Words"
        ]
      },
      "requirements": [
        "Students Will Need a Basic Understanding Of Unity and Playmaker plus also a 3D Software but this is not totally necessary."
      ],
      "description": "Welcome to No Code Game Development Course.\n\n\nThis course is for people who would like to get into game making with Unity but have zero coding knowledge.\n\n\nEverything in this course will be explained in detail step by step starting from simple to advanced character movement etc So after completing this course you will be making your own game very easily without writing a single line of code.\n\n\nFor this course you will need Playmaker which is a great piece of software created for Unity and it is a visual scripting tool which allows you to create state machines by connecting the nodes with necessary actions in it. So once again you will start seeing your own creations come to life without writing a single line of code.\n\n\nWhat you will learn in this course.\n\n\n-Unity Scene Set Up\n\n\n-Rigging main player and adding character controller\n\n\n-Adding Animations to the player.\n\n\n-Making The Camera Follow Our Player\n\n\n-Creating a Jump Action with animation\n\n\n-Adding Rifle to Our Character\n\n\n-Add a Zombie and set its movement and animations\n\n\n-Shooting Action and animation for our player\n\n\n-Making zombie follow our character\n\n\n-Adding reaction animation to our zombie\n\n\n-Destroying zombie\n\n\n-Adding Health State and a Health Bar UI to zombie\n\n\n-Make the zombie attack and damage the player\n\n\n-Player Health System and setting up HUD to show healthcare\n\n\n-Adding Player Death Animation\n\n\n-Making the zombie eat our character\n\n\n-Game Over Scene\n\n\n-Creating A Title Menu\n\n\n-Setting up Game Controller\n\n\n-Building A Playable Game\n\n\nHope you enjoy the course and if you have any questions please do not hesitate to ask.\n\n\nHappy Game Making",
      "target_audience": [
        "People who are into game making but have no knowledge of coding can easily start creating their basic 3d shooting game by following this course."
      ]
    },
    {
      "title": "Point & Click Game Development Unity & Playmaker: No Code!",
      "url": "https://www.udemy.com/course/point-click-game-development-unity-playmaker-no-code/",
      "bio": "Create Captivating Point & Click Games with Unity & Playmaker - No Code! Perfect for Aspiring Devs, Designers & Indies!",
      "objectives": [
        "Create a fully playable Point and Click Adventure game in Unity with Playmaker.",
        "Getting comfortable with using the powerful FSM Templates in Playmaker.",
        "Utilize Scriptable Object, to create custom Item definition to be used with Playmaker.",
        "Create complex save data structure in Playmaker, that is applicable to different game genre types."
      ],
      "course_content": {
        "Introduction": [
          "Resources Preparation",
          "Project Setup",
          "Pathfinding Setup",
          "Click to Move Behavior",
          "Base Interactable FSM",
          "Base Action FSM",
          "Dialog Manager UI Setup",
          "Dialog Manager FSM Setup",
          "Send Dialog Action",
          "Dialog Options",
          "Activate/Deactivate Multiple FSM",
          "Inventory Item Definition",
          "\"Give Item\" Behavior Template",
          "\"Take Item\" Behavior Template",
          "Tidying FSM Up",
          "NPC Move Action",
          "Add Model and Animation to NPC",
          "Replace Player Model and Add Animation",
          "Inventory UI Panel Setup",
          "Inventory Panel UI Functionality Setup",
          "Save and Load Concept",
          "Save Manager Setup",
          "Record Entity State",
          "Load Entity State",
          "Record Inventory",
          "Audio and Animation Action",
          "Camera Manager",
          "Switch Scene FSM",
          "Door Swing and Transparent Wall",
          "Cursor Manager",
          "City Scene Story Setup",
          "Club Hallway Story Setup",
          "Keep States Between Scenes",
          "Park Scene Story Part.1",
          "Park Scene Story Part.2",
          "Connecting City to Park Scene",
          "Saving Loaded Scene"
        ],
        "Bug Fixes": [
          "NPC Move Template Fix",
          "Player Movement Fix"
        ]
      },
      "requirements": [
        "Basic Unity essentials knowledge is helpful but not required.",
        "An installed Unity Editor (any version that is or above 2020).",
        "A seat of Playmaker add-ons license for Unity"
      ],
      "description": "Join this comprehensive course and learn how to create captivating point and click adventure games without coding using Unity and Playmaker! Whether you're a beginner or an experienced game developer, this course will equip you with the skills to bring your game ideas to life.\nThrough hands-on instruction, you'll delve into Playmaker, a powerful visual scripting tool for Unity, and gain proficiency in creating Finite State Machines (FSMs) to handle game logic and player interactions. Discover how to leverage FSM templates and custom actions for efficient game mechanics and behaviors. Plus, dive into NPC States saving and loading, as well as Inventory and Item mechanics.\nYou'll also master complex save mechanics for persistent player data, implement additive scene management for seamless transitions between game scenes, and utilize Unity's Timeline tool for creating professional cut scenes. With a focus on practical application, this course provides you with the tools and knowledge to create engaging point and click games that will captivate players.\nWhether you're a beginner or an experienced game developer, this course is designed for:\nAspiring Game Developers: If you've always wanted to create your own games but don't have coding experience, this course is perfect for you! Learn how to bring your game ideas to life with Unity and Playmaker's visual scripting, and create engaging point and click adventures.\nUnity Developers: If you're already familiar with Unity but want to expand your skillset and create point and click games, this course is a great fit! Discover how to utilize Playmaker to create custom game mechanics, save systems, and cut scenes.\nVisual Scripting Enthusiasts: If you enjoy visual scripting and want to learn a new tool, this course is for you! Explore Playmaker's powerful visual scripting capabilities and create complex game logic and interactions without writing code.\nIndie Game Developers: If you're an indie game developer looking for efficient and no-code solutions to create point and click games, this course is tailored for you! Learn how to create engaging games with Playmaker's FSMs, save mechanics, scene management, and cut scenes.\nGame Designers: If you're a game designer looking to expand your skillset and learn how to create point and click games, this course is a valuable resource! Gain hands-on experience with Unity and Playmaker, and bring your game design ideas to life.\nEnroll now and unlock your creativity with Unity and Playmaker - no coding required! Get ready to embark on an exciting game development journey and bring your unique game ideas to life.",
      "target_audience": [
        "Intended for aspiring game developers, beginners or experienced, interested in creating point and click adventure games without coding using Unity and Playmaker."
      ]
    },
    {
      "title": "Learn C# by Creating a Fun Life Simulator Game in Unity",
      "url": "https://www.udemy.com/course/learn-csharp-tutorial-create-fun-life-simulator-game-unity-design/",
      "bio": "Learn Important C# Game Design Principals by making a Fun Life Simulator game.",
      "objectives": [
        "Build Life Simulator game from the ground up",
        "Be very comfortable with basic C# development such as defining variables, conditional statements, and calling custom methods",
        "Learn how to re-factor and improve your game design while learning powerful new C# commands and structures",
        "Learn import game design patterns such as the Observer Pattern using event delegates to create well complex well architectured games"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Learning C# by Creating a Fun Life Simulator Game in Unity.": [
          "Creating the Basic Interface for Our Game",
          "Defining Variables to Store the Primary Simulator Attributes",
          "Learn How to Create and Call Custom Methods From Button onClick Events",
          "Use If Statements to Enforce Maximum Health & Food Values",
          "Improve our Game Design by Creating a Class to Manage Items",
          "Create a Method to Buy Items and Prevent Purchase if not Enough Money",
          "Learn to Use a List to Specify Requirements for items",
          "Create a Message Panel to Display The List of Requirements for an Item",
          "Create Graphical Sliders for Health and Food",
          "Improve the Design of our Item Interface and Learn to use Prefabs",
          "Learn How to Programatically Find and Use Game Objects and Components",
          "Handling One Time Purchases and Rentals",
          "Using Delegates to Send Events to Rental Items"
        ]
      },
      "requirements": [
        "Have Unity 3D installed and Understand the Basics of Unity 3D",
        "Basic Computer Skills",
        "Want to Learn C# Fast while making a fun Life Simulator Game"
      ],
      "description": "NEW UPDATE NOV 24th 2021!!!\nLIFE SIMULATOR 2.0! Scriptable Objects, Stats Manager and More!\nFULL SOURCE CODE!  Stats, Stat Modifiers & Item Management\nBETA VERSION AVAILABLE TODAY UNDER RESOURCES IN THE FIRST LECRURE!!!\nNew Code Walkthrough Lecture of New Features Coming Soon!\nIn this course you will learn how to create a fun Life Simulator Game from the ground up that is similar to games such as Homeless?  But more importantly, this course is designed to teach critical game development concepts that will allow you to make your own games.\nLearn Important Unity 5.0 UI Concepts\nGreat for Beginning to Intermediate Level Game Programmers\nStarts off with simple C# that even a beginner can understand... end up with a full featured game!\nLearn how to re-factor the game to improve design and learn more advanced topics and design patterns\nNEW UPDATE - Source Code Updated to Support a modular stat system and scriptable objects\nCourse Overview: This course focuses on core Game Design and Programming Principals. It is designed as a beginner C# course that will take you into advanced topics. We use the tools in Unity 3D to create the Interface and Artwork is all from Creative Commons. Our game design only roughly borrows from many of the Life Simulator games that focus on attributes such as Food, Health, and Money. By the end of the course you will be able to customize the game as you please and we look forward to you sharing your Life Simulator creations with us.\nWhat are People Saying about Odoo Class Videos?\nFirst off I want to comment on all of the quality video editions you have recently added to your library. They have been tremendously helpful and I have been recommending your service to many people.\n\n- John P\nI find your videos real easy to follow and often revert back to them as a point of reference…\n- Peter Y.\nThis course starts at the beginning but ramps up quickly to teach you important Game Design Patterns that you must know to write professional games:\nLearn Important Game Development Skills:\nLearn how to create a Unity3D Project\nThe entire project is created step-by-step. Start at the very beginning!\nPerfect for those that are new to Unity and Programming in General\nStart right away using Unity 3D's newest UI tools to create a working game\nWrite your first C# script and learn the basics of variables, IF statements, Methods, and Managing Lists\nCreate Health and Food bars to visually show the health of the player\nImprove your game design by using events and delegates\nInformal video exercises where we ask you to pause the video along the way help reinforce what you are learning\n\n\nCopyright 2015-2018 First Class Ventures, LLC.  This item is not authorized for posting on Steam, or any other game or game asset site without permission.",
      "target_audience": [
        "Beginning C# developers who want to quickly jump into more intermediate and advanced techniques",
        "Anyone who would like to learn how to build a Life Simulator step-by-step",
        "Developers who want to learn important game design patterns and techniques"
      ]
    },
    {
      "title": "Learn about Game AI with Unity® and Blender!",
      "url": "https://www.udemy.com/course/learn-about-game-ai-with-unity-and-blender/",
      "bio": "Learn about AI Programming with Unity®. Learn all about game development more efficiently than in any YouTube tutorial.",
      "objectives": [
        "Learn to code for game development in Unity C#",
        "Create your own unique Battle Royale system.",
        "Make a game that uses artificial intelligence",
        "Navigate the Unity® editor.",
        "Design large environments for your character to explore in.",
        "Make a path-finding algorithm",
        "Use the A* algorithm to make a 2D game in Unity",
        "Build 3D models for the game in Blender.",
        "Integrate the art from Blender into Unity®."
      ],
      "course_content": {},
      "requirements": [
        "Unity® and Blender are free to download. Please download and install Unity® and Blender before purchasing this course",
        "This course was recorded on a Mac computer, but you can use Unity® and Blender on a PC."
      ],
      "description": "The best coding program online. Beginner's guide for aspiring game developers. Learn C# and programming fundamentals.\nIn this course, you'll learn:\nHow to use Unity\nThe game development process step by step for beginners\nMake a pathfinding game in Unity with a star artificial intelligence\nBuild a battle royale game\nAdd multiplayer functionality to game programming\nLearn the foundations of Blender 3D\nHTML and web programming through tutorials for beginners\nLearn Python through programming examples\nWhat Python is used for\nLearn the best way to learn Python\nData mining techniques with examples\nData mining tools and applications\nJava programming\nGames and Algorithms Tutorials\nWelcome to Mammoth Interactive's A* course with Glauco Pires. You will learn how to make a game that uses artificial intelligence.\nDo you Love Battle Royale games? Do you want to develop your own 3rd person shooter? This is the perfect course for you.\nLearn how to create a full 3D environment. Create and animate characters to wield weapons and run a muck as they try to survive your own Battle Royale.\nA wildly successful Kickstarter funded this course\nIn this course, you learn how to build your own Battle Royale with Unity® and Blender. This course is unique because we make both the code and the art for the game from scratch. We teach you the fundamentals of designing, coding and modeling a 3D game.\nFirst you design the game and its functionality in Unity®. You learn how to code in C# and build video game levels. Don't worry if you've never coded before. We start simple and add more to the game as the course goes on.\nWhy Unity®?\nUnity® is one of the most popular platforms in game development. You can use Unity® to build 2D and 3D games. Unity® is cross-platform, which means it is easy to use with other platforms.\nThen you create the 3D models for the game in Blender. You build all the art assets for the game. You learn how to integrate your art from Blender into Unity®.\nThe Best Blender Course\nBlender, like Unity®, is a popular production suite that is free to download. Blender is a revolutionary tool for making 3D art digitally. With Blender, you can make art assets for games, like we do in this course.\nEven if you're not an artist, you can make basic art models. You may have heard of Axiom Verge and Stardew Valley. These games are million-dollar successes. But did you know that only one person made each?\nTake your first steps in AI here.\nYou will learn how to use the A* algorithm to make a 2D game in Unity 2017.3.0f3. A Super Tank on a maze will find the best way to go to a point you click. The tank will collect objects along its path.\nThis course's topic is bulletproof knowledge.\nGlauco has a decade's experience in game development. He makes games in Unity, Unreal, and HTML languages. He works with languages like C#, C++, and JavaScript.\nstraightforward coding skills\nclean development techniques\nthoughtful developer advice\nWith Glauco you will learn to make games in the most efficient and cleanest way possible.\nWhy you need artificial intelligence in games\nWith artificial intelligence, you can make your games more…\ncomplex\nrandom\ninteresting\nvaluable\n…without putting in more effort thanks to algorithms.\nOld games - the very first computer games - were simple and straightforward.\nThese days, you must make more complex games. Players want to believe they are playing against something complex, something lifelike.\nThe power of the A* algorithm\nThe A* is the base algorithm for path finding. A* is artificial intelligence that will find a path. This algorithm has existed for decades.\nA* is also important to avoid dangers like a cliff while getting to a destination. As well - suppose a game's level has two paths. You can program your artificial intelligence player to think on its own. It can choose a better path to avoid monsters and other obstacles.\nYou must learn to use the A* algorithm. You will become a better game developer.\nIncluded are bonus courses of related topics, including C# and Java! You get more content at a great price.\nWe answer every question within two business days. We want to hear from you. Watch the free lectures and amazing trailer, then jump right in and start participating with the Mammoth community.",
      "target_audience": [
        "Anyone who wants their start at making 3D video games.",
        "People that want to create their own Battle Royale.",
        "People that want to make games with smart automated features",
        "Anyone who wants to learn game development.",
        "Beginners who want to learn how to use Blender.",
        "This course assumes you know a little about Unity®."
      ]
    },
    {
      "title": "Unity Game Analytics",
      "url": "https://www.udemy.com/course/unity-game-analytics/",
      "bio": "Hands on training to get google analytics, reporting, data mining, analysis of your valuable user behavior - Unity 3D 5",
      "objectives": [
        "Integrate Google Analytics within a Unity game",
        "Collect user behavior on iOS, Android, PC, Linux, Playstation, and Xbox",
        "Measure user activity in new environments",
        "tie online to offline behavior",
        "Send data from both the client and server",
        "track user activity",
        "track advertising performance in your games (admob and adwords)",
        "Track which item in your game store are the most popular and which ones need to be replaced",
        "Track how long players stay in one level",
        "Track how many times a player replays each levels of your game"
      ],
      "course_content": {
        "Introduction": [
          "Get to know your instructor",
          "How to take the most out off this course"
        ],
        "Getting started": [
          "Download all the project files",
          "Open the Unity project and get test it",
          "Download the Analytics plugin for Unity",
          "Install the analytics plugin in Unity",
          "Creating the Analytics online account",
          "Reusing your google analytics account",
          "Overview of the analytics dashboard"
        ],
        "Core setup": [
          "Main setup of the analytics plugin in Unity 3D",
          "Preparing to hook a gameobject to the analytics",
          "Adding the analytics instance to the script",
          "Send data to the analytics dashboard",
          "Understanding screen tracking in depth",
          "About Start and Stop session",
          "Understanding Event Tracking",
          "Programming Unity Event Tracking for scores",
          "Analyzing the event tracking report"
        ],
        "Advanced topics": [
          "Advanced tracking for professionals",
          "Bonus section and thank you"
        ]
      },
      "requirements": [
        "Knowing the basic of Unity is a plus but not necessary",
        "love video games!"
      ],
      "description": "Bonus: All assets used in this course are included for free.\nHi, and welcome to the Unity Game Analytics course, my name is Yohann and I'm famous for helping thousands of students makes apps and games and publish them to the app stores while some of my students's games reached the top 10 in iTunes and google play store.\nThis course is all about hands on training, if you're like me and like to learn by doing it yourself rather than listening to a teacher then this course is for you.\nAbout the course:\nBy taking this course, you will learn how to integrate google analytics to any of your Unity games. Thanks to Unity and Google Analytics, you will be able to capture data about your users behavior and user engagement. Then you will be able to analyze this data and find ways to make your game more engaging which will ultimately increase your revenue.\nFor example, when you use analytics in your game, you can figure out if too many players stop playing a certain level in your game, maybe this level has a bug, or it's too hard or even to boring! By adding analytics to your game, you don't have to pray the gods to have users play your game, now you know how to improve your game based on real scientific data.\nBy the way, all the games out there like Minecraft, candy crush,  and clash of clan, they all use analytics in their games.\n\nThe course is broken down in short, easy to digest chunks. Now right at the beginning we go straight into downloading Unity and work on the captain rocket Unity project that's based on a game that is published in the app stores. You get to work on a real professional game, not just some random project. You can follow along whether you're using a Windows computer, Linux or Mac. We'll start with the basics of integrating analytics within your game then we'll go into advances topics such as tracking in-app purchases transactions, code exceptions, bugs, or the time a player spends on a level.\nIf you've never heard of any of these terms or never got to use them, then this mammoth course is for you.\nAs my current students already know, I'm always around in the forums and I'll be there to help you out whenever you get stuck. But you get a lot more than just the best Unity Analytics course available online. As a bonus you get a copy of the Captain Rocket source code that is a professional endless 2D platform runner that you can use any way you'd like.  This bonus is worth well over $500.\nAre you ready to be successful at mastering game analytics in Unity ? Then join this course now. you're gonna love it.\n***\nWhat is Google Analytics?\nGoogle Analytics is a freemium  analytics service offered by Google, originally meant for website that tracks and reports website traffic. Google launched the service in November 2005 after acquiring Urchin. Google Analytics is now the most widely used web analytics service on the Internet.\nThe great thing about Google analytics, is that it's an all-in-one solution, it works for the web, for the Android smartphones and tablets, for the iPad, for the iPhone.\nOn top of that, Google Analytics can be combined with Google Admob advertising networks and Google Adwords too, which means you can analyze and gets pertinent reports about how your app is used as well as how the advertising within your app is working. You get analytics for banner ads, full screen ads, and also analytics for video ads (rewards too!)\n\n\n\nWhy would you want to use Google Analytics in your Unity 3D game ?\nYou need to understand and measure what your users do inside of your game — a key to engaging and monetizing users in the long run. You cannot expect to publish a game and cross your fingers or pray the gods that your game will make money. You need to analyze your user behavior and engagement and update your game to be more attractive and engaging for the game players.\n\n\n\nGoogle Analytics allows developers to send raw user interaction data directly to Google Analytics servers. This allows you, the game developer to measure how users interact with their business from almost any environment. Developers can then use the data to:\n✅ Measure user activity in new environments.\n✅ Tie online to offline behavior.\n✅ Send data from both the client and server\n✅ See how many players come daily to your game.\n✅ Add custom events to track actions that players make on your game.\n✅ See the results of custom events through the funnel.\n✅ See where the players get stuck in your game and fix it\n\n\nThanks to Unity 3D, you can now track user activity on iOS, Android, desktop games ( Windows or Mac or Linux ) Playstation and Xbox ! Even the Apple TV and the Virtual reality devices like Samsung VR and Oculus Rift ! It's it amazing?!\nUnity Analytics works seemlessly with Google Ads\nHave you ever wondered how games such as “Candy Crush” were able to become financially successful? Implement ads that the players would like to see using an ad network targeted specially for gamers, show only game related videos to your player and forget about the intrusive banner ads in this tutorial for intermediate users you will learn in no time how to monetize that free game you have.\nMake revenue out of your game\nTarget the right player audience with pertinent advertising.\nChoose between showing ads that will reward the player or not.\nShow an Ad to the player after he or she performs a specific action.\nNavigate through the ads online dashboard to see the revenue of your game.\nMake money out of your game without affecting the player's experience.",
      "target_audience": [
        "Anyone that uses Unity 3D, this is a must-have tool",
        "Indie developer",
        "Game dev hobbyist",
        "Elon Musk ( I love you)"
      ]
    },
    {
      "title": "UI Toolkit Runtime - Introduction to new Unity UI system",
      "url": "https://www.udemy.com/course/ui-toolkit-for-runtime-unity-introduction/",
      "bio": "How to use UI Toolkit to create Realtime UI. It's not that hard, see for yourself! - Introduction",
      "objectives": [
        "Create a simple UI of a game using new UI Toolkit.",
        "Create and modify styles of different UI elements using stylesheets.",
        "Bind, and connect data with UI.",
        "Learn the basic concepts of the modern UI framework, based on CSS and XML.",
        "Discover UI Builder to create UI documents and styles.",
        "Implement interactive UI elements, like buttons and labels.",
        "Create simple transitions between UI panels and screens.",
        "Learn how to connect data with the UI elements."
      ],
      "course_content": {},
      "requirements": [
        "Basic knowledge of Unity.",
        "Some experience with programming in C#."
      ],
      "description": "Create a runtime interface of a simple game, using UI Toolkit - UIElements.\n\n\nWould you like to be ahead of the recent changes made by Unity and prepare for the future of the UI system?\nWell then welcome to this course!\nYou will learn how to use the UI Toolkit to create runtime interfaces, that you can use in commercial games or applications.\n\n\nUnity introduced the UI Toolkit (previously called UI Elements) to move from the current UGUI and even older IMGUI to a new system, based on standard web technologies: CSS and XML.\n\n\nWhy learn UI Toolkit now?\nIt is still in a beta version, but you can already prepare for the future.\nUnity has decided this new system will eventually become the main supported framework, both for runtime and in the editor.\n\n\nIn this course you will:\nLearn the basic concepts of the modern UI framework, based on CSS and XML.\nDiscover UI Builder to create UI documents and styles.\nImplement interactive elements, like buttons and labels.\nCreate simple transitions between panels and screens.\nLearn how to connect data with the interface elements.\n\n\nThis course is based on one tutorial project.\nYou will go step by step through the complete process of implementing this new system.\nIt does not explain all UI Toolkit elements (e.g. a toggle control, or a text field).\nHowever you will be able to use them as well, after you learn the basics, using a button and a label component.\n\n\nWhy learn from me?\nI have been a Unity programmer for more than 5 years and delivered over 20 different projects.\nI have a lot of experience that I love to share with my coworkers and students to maximize their potential.\nHowever, I also do my best to listen and help students find answers and solutions to the problems they face.\nI know how difficult it sometimes is to implement new frameworks and technologies introduced by Unity.\nEspecially the ones that are still in a beta version.\nThat is why I have created this course.\nI want to help you start using UI Toolkit today and prepare for the transition that will happen soon.\n\n\nStart learning now and I'll see you in the course! :)",
      "target_audience": [
        "Beginner and advanced Unity developers who want to learn new UI system."
      ]
    },
    {
      "title": "The Complete GameMaker Studio 2 Multiplayer Course",
      "url": "https://www.udemy.com/course/gamemakerstudio2multiplayer/",
      "bio": "GameMaker Course; HTML5 Networking, Suspendee Networking, GameMaker Multiplayer, GML Networking, Game Maker Multiplayer",
      "objectives": [
        "Build multiplayer games in GameMaker Studio 2",
        "Build multiplayer web games in GameMaker Studio 2",
        "Build multiplayer games with the Suspendee Studios Networking Engine"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "GameMaker Studio 2 Native Networking": [
          "Servers And Clients",
          "How To Read And Write To Buffers",
          "Sending And Receiving Data",
          "Making A Simple Application",
          "Why You SHOULDN'T Use GameMaker Studio 2 Native Networking For Multiplayer Games"
        ],
        "JSON": [
          "Python 3 JSON",
          "GameMaker Studio 2 JSON"
        ],
        "How To Import Both Networking Engines": [
          "How To Import An Extension Into GameMaker Studio 2."
        ],
        "Networking Suspengine": [
          "Downloads",
          "Set Up Your Environment",
          "How To Create A Server And Connect And Disconnect To It",
          "Send Data To The Server And Handle It",
          "Send Data To The Client And Handle It",
          "Save Variable, Call Variable, Call Variable List",
          "Connecting, Disconnecting, And Closing The Player's Connection"
        ],
        "HTML5 Networking Suspengine": [
          "Downloads",
          "How To Set Up Your HTML5 Game- Creating The Server",
          "How To Set Up Your HTML5 Game - Connecting To The Server",
          "Send Data To The Server And Receive It",
          "Connect Event",
          "Disconnect Event And Broadcast",
          "Sessions"
        ],
        "Multiplayer Platformer - Suspengine": [
          "Multiplayer Platformer - Part 1",
          "Multiplayer Platformer - Part 2",
          "Multiplayer Platformer - Part 3",
          "Multiplayer Platformer - Part 4",
          "Multiplayer Platformer - Complete Overview"
        ],
        "Run Your Server On A VPS Guide": [
          "Run Your Server Script On A VPS"
        ],
        "Chat App - HTML5 Suspengine": [
          "Chat App Part 1",
          "Chat App Part 2",
          "Chat App Part 3",
          "Chat App Part 4"
        ],
        "Congratulations!": [
          "Conclusion"
        ]
      },
      "requirements": [
        "You should have basic knowledge of GameMaker Studio 2",
        "You should have basic knowledge of Python 3",
        "You should own a copy of the desktop license for GameMaker Studio 2"
      ],
      "description": "Want to learn to make multiplayer games in GameMaker Studio 2 the easy way?\nIn this course I'll teach you how to use GameMaker Studio 2's native networking, and, how to use the regular networking engine and the HTML5 Networking Engine we built at Suspendee Studios.\nThe Suspendee Networking Engine allows you to write your servers in Python 3 for GameMaker Studio 2 games.\nUsing the powerful Suspendee Studios Networking Engine, you can make any kind of multiplayer game! With the Suspendee Studios Networking Engine you can build MMOs, create scoreboards, and, multiplayer mobile games.\nIn this course I will teach you how all the functions work and how to use them to make high quality multiplayer games.\n\nBuild a chat app and a platformer using the Suspendee Studios Networking Engine.\nGameMaker Studio 2 is the new version of GameMaker Studio that has many new features, this course is designed for GameMaker Studio 2 users who want to implement the Suspendee Studios Networking Engine into their game.\nYou must have intermediate knowledge in Python 3 and GameMaker Studio 2 to take this course.\nLooking to learn how to make a multiplayer game with the Suspendee Studios Networking Engine? Enroll today!",
      "target_audience": [
        "Intermediate GameMaker Studio 2 users",
        "Intermediate Python 3 Users",
        "Anyone who wants to make a multiplayer GameMaker Studio 2 game."
      ]
    },
    {
      "title": "Create a Mobile Game Like Geometry Dash in Unity",
      "url": "https://www.udemy.com/course/square-dash/",
      "bio": "Learn how to make a kind of Hyper Casual 2D Platformer Mobile Game in Unity in no time!",
      "objectives": [
        "Create precise Physics Movement",
        "Use the Basic Functionalities of Unity's Tilemap System",
        "Smooth / Polish the Player Movement & Animation",
        "Setup a Smooth Camera Follow Logic"
      ],
      "course_content": {
        "The Core - Player Movement": [
          "Project Setup",
          "Move the Player to the Right",
          "Slime is Jumping",
          "Better Jumping Logic",
          "Getting a Good Feel",
          "Adding Rotation to the Player",
          "Polishing the Player Rotation"
        ],
        "The Camera": [
          "Behavior Below the Line",
          "Behavior above the Line"
        ],
        "The Tilemaps": [
          "The Obstacles Tilemap",
          "Interactions with the Player",
          "The Platforms Tilemap",
          "Animating the Tilemap",
          "Polishing the Tilemap Effect"
        ],
        "Improvements": [
          "Another Gameover Detection",
          "Player can Explode ?",
          "Using Way better Graphics"
        ],
        "Spaceship - Spaghetti Code": [
          "Adding the Spaceship Trigger",
          "Things to Know about LayerMasks",
          "Controlling the Spaceship",
          "Fixing the Camera",
          "Enabling the Spaceship",
          "The Spaceship Rotation",
          "Reset"
        ],
        "A Cleaner way to add MotionTypes": [
          "Properties vs Fields",
          "An Abstract Motion Controller has Appeared !",
          "The Square Motion Controller",
          "The Spaceship Motion Controller"
        ],
        "Bonus Section": [
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "Basic C# & Unity Knowledge",
        "If you've already taken one of my courses, that will definitely help",
        "The Love for Experimentation"
      ],
      "description": "Hey There !\n\n\nBefore reading this description, go have a look at the presentation video.\nYou will have a pretty good understanding of what you'll be able to achieve after taking the course :).\n\n\nCan you spot all of the things you will learn ?\n\n\nIf not, let me help you a bit.\n\n\nWe are going to start with the basics, constantly moving the player to the right, in a precise manner.\nThen we will make it jump !\n\n\nAfter that, it will rotate it in a smooth way, we will use a Tweening Library for that.\nWe will test the physics with different world elements to make sure we get the behavior that we want.\n\n\nFor the terrain, we will use Unity’s powerful Tilemap system.\nWe will actually have multiple tilemaps, depending on the nature of the objects we have.\n\n\nWe will then add a reset system, to bring the player back if he hits an obstacle.\n\n\nAnd the special thing here is a Shader, to animate the terrain as we go, without destroying the performance of the game.\n\n\nThis is everything you will learn in this course.\n\n\nAnd you know me, there is more to come !\nBut I’m counting on you to let me know what improvements you would love to see me implement.\n\n\nStart learning now.",
      "target_audience": [
        "Game Developers willing to improve their understanding of Unity",
        "Geometry Dash fans who want to create a similar game",
        "Curious people"
      ]
    },
    {
      "title": "Make 5 Android/iOS Pro Mobile Games in Python",
      "url": "https://www.udemy.com/course/make-5-androidios-pro-mobile-games-in-python/",
      "bio": "Learn to make Awesome Looking Useful High Graphics Android and iOS based Games in Kivy Python",
      "objectives": [
        "Learn to make Android and iOS Based Games in Python",
        "Get a blueprint to making any type of Mobile Game in Python",
        "Learn to deploy Games",
        "Learn to make cool Looking High Graphics Games in Kivy Python"
      ],
      "course_content": {
        "Installing and Setting Python and Kivy": [
          "Installing Python and Setting up the Python IDE",
          "Installing the Kivy Module",
          "Download all Media Files for the Course",
          "Where to Get all the Code Files",
          "Deploying Games on Android/iOS from Windows/Linux and Mac"
        ],
        "Dino Game : Make a Google Dino Game in Python": [
          "Displaying GUI Window and Putting Dino on it",
          "Putting Ground Image on the Game Window",
          "Dino Jump and Apply Gravity on Dino",
          "Ground Movement",
          "Making Clouds Move on the Screen",
          "Displaying and Moving Obstacles on the Game Screen",
          "Displaying and Moving Another Type of Obstacles",
          "Flapping Birds",
          "Game Over and Replay Game"
        ],
        "Space Invader Game : Make a Space Invader Game in Python": [
          "Displaying Game Window and Setting Background on Canvas",
          "Displaying Spaceship on the Screen",
          "Spaceship Movement Login and Collision Detection with Walls",
          "Bullet Fire",
          "Enemies Movement",
          "Killing Enemies",
          "Spaceship and Enemy Collision"
        ],
        "Brick Breaker Game : Make a Brick Breaker Game in Python": [
          "Displaying Game Window and Setting background Image",
          "Displaying the Ball Image on the Game Window",
          "Displaying the Bat Image on the Game Window",
          "Displaying Bricks on Game Window",
          "Ball Movement and Collision Detection Functionality with the Walls",
          "Collision Detection between Ball and Bat",
          "Bat Movement",
          "Bat Collision with Walls",
          "Ball Brick Collision Detection",
          "Game Over Functionality",
          "Game Win Functionality",
          "Game Complete - Final Explanation"
        ],
        "Helicopter Game : Make a Helicopter Game in Python": [
          "Displaying Gaming Window and Helicopter Placement",
          "Title and Instruction Label",
          "Helicopter Move Up and Applying Gravity",
          "Obstacles Movement",
          "Game Over and Restart Game",
          "Helicopter Game - Assignment"
        ],
        "Snake Game : Make a Snake Game in Python": [
          "Displaying the Game Window",
          "Displaying Snake and Food",
          "Snake Movement",
          "Snake Eating Food",
          "Snake Collision with Walls",
          "Snake Collision with itself"
        ],
        "Kivy Crash Course": [
          "Kivy Crash Course"
        ],
        "Python Crash Course": [
          "Python Crash Course Part - 1",
          "Python Crash Course Part - 2"
        ],
        "Deployment Part - Deploy Your Game on Android and iOS Store": [
          "Deployment on Android Play Store",
          "Deployment on IPhone Apple Store"
        ]
      },
      "requirements": [
        "Basic of any Programming Language is required"
      ],
      "description": "Python is the most widely used Programming Language in the World. I have seen thousands of students who have done the Basic part of Python but they have never used their skills and Concepts to make something Professional Looking and of an Advanced Level in Python. Any Programming Language is useless like this. When you go in your Professional Career, you are assigned to make Cool Looking Professional Applications and this is what this course is for. You will be amazed to know that Python is getting super popular in Developing Different kinds of Android and iOS Applications. Different Companies are now shifting towards Python for Mobile App Development.\n\n\nIn this course, we have assumed that you know the basics of Python or any other Programming Language and that our Job is to teach you how to use Python to make Professional Level  Based High Graphics Android and iOS Games. It's time to take your skills up to the Level where you can make Cool Looking Real Time Games. We have used one of the most commonly and popular Module for Mobile Development called the Kivy Module. We will also provide you the blueprint of making any type of Game in Kivy Python so that if you want you can create Games of your choice and of your Idea.\n\n\nWe are pretty sure that after taking this course in Python, you will then feel that you can now make any type of Android and iOS Game using the Python Programming language.  and that you are now a professional programmer who now knows how to use a language to make something real out of it. We are also sure that you will understand concepts taught in this course and that it will also give you a generic idea of Developing Mobile Games in Python. It is so lovely to learn concepts of how different objects move on the screen, how they collide and interact with each other. How different obstacles or enemies can make things harder and interesting for the user to play. There are so many other things you are going to learn in this course and once you continue to learn concepts, you will get more and more interest in this course and new ideas will begin in your mind about creating your own Games using the Kivy Module in Python.\n\n\nIn this Course, if you have any problem you can directly message us or you can ask your question in the Q/A Sections where you will get your Questions Answered as soon as possible. We have provided all the media and code files used in this course as a separate resource next to the lecture where it is used. Simply look for the Resource, Click on the file and the Downloading will begin automatically. We would love to hear your feedback about this course.\n\n\nHope you will have an Awesome Time with this Course.\n\n\nStay Awesome!",
      "target_audience": [
        "Anyone who wants to make Android and iOS Based Games in Python",
        "Anyone who wants to get a blueprint to making any type of Mobile Game in Python",
        "Anyone who wants to deploy Games on Play Store or Apple Store",
        "Anyone who wants to make cool Looking High Graphics Games in Kivy Python"
      ]
    },
    {
      "title": "Unreal Engine 5: Create and Publish a 3D Action Mobile Game",
      "url": "https://www.udemy.com/course/unreal-engine-5-create-and-publish-a-3d-action-mobile-game/",
      "bio": "Create an action combat framework from scratch for mobile in Unreal Engine 5 and Publish it on GooglePlay Store!",
      "objectives": [
        "Create a sekiro-like melee combat system from scratch for PC/Mobile",
        "Create advanced AI with structured behavior logics",
        "Optimization for mobile game with unreal engine 5",
        "Publish your mobile game on GooglePlay Store"
      ],
      "course_content": {
        "Introduction & Setup UE5": [
          "Overview & Promotion",
          "UE5 installation and setup android development environment guidance"
        ],
        "Hints on UE5.1 and reference project": [
          "Reference project (UE5.1, 5.2, 5.4)"
        ],
        "Setup Level and Character Animations": [
          "Project Setup And Import Assets",
          "Setup Main Scene For Mobile Platform",
          "Setup Player Class And Input Keys",
          "Optional - Use Enhanced Input Component",
          "Setup Player Basic Locomotion Animation",
          "Milestone01 Setup Virtual Joystics And Apk Test"
        ],
        "Setup Player Advanced Movement and Dummy AI": [
          "Setup Trainer Class And Basic Animations",
          "Lock_Part1_Get Nearest Enemy",
          "Lock_Part2_Locked Camera Bahavior",
          "Lock_Part3_Toggle Lock Icon And Polishing",
          "Roll_Part1_Setup Rolling Montage",
          "Roll_Part2_Change Rolling Direction When Not Locking",
          "Roll_Part3_Change Rolling Direction When Locking",
          "Attack_Part1_Attack Combo Logic",
          "Attack_Part2_Attack Timing Check",
          "Attack_Part3_Knock BackEffect",
          "Attack_Part4_Head Bar UI",
          "Attack_Part5_Add Sharable Component",
          "Attack_Part6_Move Playing Montage",
          "Hit_Part1_AI Death Event",
          "Hit_Part2_AI Stun Event",
          "Hit_Part3_AI Tyrant And Visual Events",
          "Hit_Part4_AI Blocking React Events",
          "Execution_Part1_Execution Montage And Icon",
          "Execution_Part2_Camera Behavior",
          "Setup Player UI",
          "Milestone02_Add Combat Effects And Apk Test"
        ],
        "Advanced AI and Skills": [
          "AI_Initialize Behavior Tree",
          "AI_Implement Strafing",
          "AI_Complete Attacking Logic Cycle",
          "AI_Add Turn-In-Place Montage",
          "Player_Death Event",
          "Player_Heavy Hit",
          "Player_Normal Hit",
          "Player_Setup Defence Action",
          "Player_Add Defence Reactions",
          "Deflect_Part1_Setup Deflect Timing",
          "Deflect_Part2_Add Deflect Animations",
          "AI_Skill1_Part1_Setup Montage",
          "Player_Add Danger Sign",
          "AI_Skill1_Part2_Add Trace Check",
          "AI_Skill2_Thrust Attack",
          "AI_Skill3_Mikiri Counter",
          "AI_Skill4_Consecutive Deflection",
          "AI_Player_Add Jump",
          "AI_Skill5_Jump Counter",
          "AI_Change Recover Rate",
          "Implement Virtual Joysticks Functions",
          "Setup Menu Level",
          "Setup Menu UI",
          "Milestone03_Final Apk package test"
        ],
        "Bonus": [
          "Signing Game and produce *.aab file",
          "Create Product Page On Google Play Store"
        ]
      },
      "requirements": [
        "Know unreal engine blueprint basics"
      ],
      "description": "[All 54 lessons are uploaded with corrected captions!]\n\n\nIf you're interested in creating a 3D-action singleplayer game on mobile platform and publishing it in online store like google play store, this is the course for you!\n\n\nDeveloping a 3D mobile game in unreal engine is a bit different from developing a game on PC platform. Since player's mobile specifications are quite different, mobile game developers do need to optimize lots of assets and logics including lighting, mesh polygons, textures, tick events etc, which all matter to final game performance. We will take them into consideration during this course.\n\n\nMoreover, we will create your own sekiro-like basic combat mechanism from scratch by using unreal engine 5. We will not only create a game on mobile, but also publish it on google play store for more potential players who like your game!\n\n\nTopics of this course will cover:\n\n\nAndroid development environment\nVirtual joysticks and UI for mobile\nAnimations system in unreal engine\nToggle Locking system\nRolling/Dodge system\nDefence/Parry system\nExecution and special camera transition system\nHP and Posture value stats system\nAttack combos\nKnock back/Stun/Tyrant/Invincible states\nStructured AI system with behavior tree\nCustomized attack patterns (Thrust, Mikiri, Dodge counter, etc.)\nSigning *.aab file for GooglePlay Store\nHow to update new version of your game on googleplay store\n\n\nIf you have any questions, please search Q&A part in Udemy first, someone else might already solve problems similar to you. If there're no similar questions yet, ask question in details there and I will check questions regularly. Moreover, you can join my discord server to find more students who are enrolling in this courses!\n\n\nHappy learning!\n\n\nNOTICE: You need to pay extra fees to GooglePlay to get authorized developer identity to post a game uploading request. This fees vary according to the time and NOT relates with this course.",
      "target_audience": [
        "If you're interested in learning an action combat game on mobile",
        "Unreal engine developers who are interested in creating and publishing games on googleplay store",
        "Any one who loves developing mobile games"
      ]
    },
    {
      "title": "Learn Easy HTML5 Game Development in Construct 2",
      "url": "https://www.udemy.com/course/learn-easy-2d-html5-game-development-in-construct-2/",
      "bio": "Learn Easy 2D Game Development in these Top Construct 2 Game Maker Tutorials",
      "objectives": [
        "Develop Great 2D HTML5 Games",
        "Publish HTML5 Games to Web, Mobile and Desktop Platforms and Devices",
        "Create Game Logic Using Event Sheets Instead of Code",
        "Create Parallax Background Effects",
        "Create Physics Objects and Game Play",
        "Detect and Respond to Game Events",
        "Handle Collision Detection",
        "Play Sound Effects and Music",
        "Switch Between Levels",
        "Implement Game Rules"
      ],
      "course_content": {
        "Introduction": [
          "Introduction: Welcome to The Course!",
          "An Overview of the Construct 2 HTML5 Game Maker",
          "How to Download and Install Construct 2",
          "Taking a Look at the Construct 2 Interface"
        ],
        "The Project: A Run and Shoot Platformer Game": [
          "Let's Start the Game Project",
          "Adding Background Graphics: Space Nebulae and Starscapes",
          "Adding Reusable Terrain Objects",
          "Adding the Player Character",
          "Adding Collision Boxes"
        ],
        "Creating Logic: Events and Actions": [
          "Moving the Player Character with Keyboard Controls",
          "Making the Camera Follow the Player Character",
          "Basic Concepts 1"
        ],
        "Working with Sprite Animations": [
          "Configuring Multiple Animations",
          "State Management: Switching Animations"
        ],
        "Building Core Game Mechanics": [
          "Pin the Gun Arm to the Player Character",
          "Rotate the Gun to Look at the Mouse",
          "Firing Projectiles - Using Image Points",
          "The Bullet Behavior",
          "Platforms and Collision Shapes",
          "Adding Obstacles: Falling Boulders",
          "Basic Concepts 2"
        ],
        "Adding Game Rules and Conflict": [
          "Die On Collision with Obstacle",
          "Adding an Enemy NPC",
          "Making the Enemy Shoot Laser Blasts",
          "Homing Missiles - Seeking Functionality",
          "Shooting Missiles Out of the Sky",
          "Upgrating a Sprites Graphics",
          "Game Rules - Die When Shot",
          "Intermediate Concepts"
        ],
        "Audio - SFX and Music": [
          "Laser Sound Effect",
          "Looping Sound Effects",
          "Explosion and Collision SFX",
          "Playing Music"
        ],
        "Adding Polish - Effects": [
          "Particle Effects"
        ],
        "Graphical User Interace (GUI)": [
          "Start Menu Layout",
          "Clickable Buttons and Layout Transitions"
        ],
        "Heads Up Display (HUD)": [
          "Adding A Custom Cursor - The Crosshair",
          "Hiding the Mouse Cursor"
        ]
      },
      "requirements": [
        "The Free Version of Construct 2"
      ],
      "description": "This course has been designed by industry and education experts to show you how to easily develop a 2D video game in HTML5 completely from scratch, without having to write a single line of code, by using the WYSIWYG game designer, Construct 2. Construct 2 is an extremely easy to use game maker, designed to make it possible for anyone to make a game, so if you are a beginner, artist, designer, hobbyist and student, you can learn how to build your own HTML5 games easily and quickly, without having to learn programming, or hire a programmer, by taking this course. Of all the 2D game creators and game engines available on the software market today, Construct 2 is without doubt one of the easiest and fasted for complete beginners to get started making their own games, and this online game development course, filled with 3 hours of professional HD quality training content, will show you how to use the great features that come with the C2 game engine to make your very own game ideas come to life before your eyes!\nWhat You Will Learn\nThe majority of the course takes the format of a step by step tutorial, whereby you will be guided through the various stages of building a ‘run and gun’, platformer style game. I chose this genre as the development process to create such a game demo covers all of the basic tools, features and concepts which are most fundamental to HTML5 game development with Construct 2. This means that by the end of the course, you will have learned an amazing amount, such as:\nHow to import and configure backgrounds and sprites.\nHow to use layers for organizational purposes.\nHow to create Parallax scrolling effects using layer properties.\nHow to configure multiple frame based animations, and switch between them in-game.\nHow to create game logic and game mechanics without programming, using events and actions.\nHow to craft gameplay.\nHow to implement game rules\nHow to restart, or switch between layouts (game levels)\nHow to import simple NPCs (Non Player Characters)\nHow to import and play Sound Effects\nHow to import and play music\nand much, much more...\nBy the end of this series of over 30 high quality Construct 2 video lessons – which is thought by a game development and game design training expert with over 10 years of game industry experience and 7 years of teaching experience – you will have gained all the fundamental skills and knowledge necessary to start making your own 2D video games! So there’s no longer any need to google things like ‘how to create a game’, or ‘create my own game’, or ‘how to make my own game’. You can start making 2d games right now, just click that 'Start Learning Now' button and you’ll be making computer games in no time at all!",
      "target_audience": [
        "Beginners to game development, looking for the easiest way to get started.",
        "Non programmers, such as hobbyists, artists, designers and students who want to make their own 2D games without programming.",
        "HTML5 game developers, looking for a quicker way to develop their games."
      ]
    },
    {
      "title": "Unity Real Time Strategy: Build Your Own RTS Game",
      "url": "https://www.udemy.com/course/unity-rts/",
      "bio": "Build your own RTS in Unity 6 — smart units, fog of war, dynamic upgrades, and systems that scale as big as your ideas.",
      "objectives": [
        "Build your own RTS game in Unity, from units to buildings to upgrades and more.",
        "Design gameplay systems that scale, so your project won’t buckle as it levels up.",
        "Create unit AI that reacts to player input using behaviour trees (no magic, just logic).",
        "Set up fog of war to keep your players guessing (and scouting like pros).",
        "Develop a config-driven setup to add new units fast—no spaghetti code here.",
        "Use ScriptableObjects to organise your game like a pro dev.",
        "Hook up an event bus system so your units can talk without yelling across the codebase.",
        "Craft upgrade systems that run from the editor, not hard-coded chaos."
      ],
      "course_content": {
        "Introduction and Setup": [
          "Welcome to the Course",
          "Initial Project Setup",
          "Community & Support",
          "Accessing Our Projects",
          "Cinemachine Camera",
          "Top-Down Keyboard Movement",
          "Camera Zoom",
          "Camera Rotation",
          "Mouse Edge Panning",
          "Level Bounds"
        ],
        "Navigation Meshes, NavMeshAgents, and Player Input": [
          "Section Intro",
          "What is a Navigation Mesh?",
          "The NavMeshAgent & Moving on a NavMesh",
          "Unit Selection",
          "Unit & Decal Rendering Layers",
          "Right Click to Move",
          "Drag Selection UI",
          "A Slight Detour: The Event Bus",
          "Deselecting Units with the Event Bus",
          "Drag Select Multiple Units",
          "Add Units to Selection",
          "Areas and Obstacles",
          "A Method to Prevent Unit Dancing",
          "Multiple NavMeshes"
        ],
        "Buildings & Units": [
          "Section Intro",
          "Our First Building - The Supply Hut",
          "Unifying Interactions with Buildings & Units",
          "ScriptableObjects as Configuration",
          "The Command Post",
          "Actions with the Command Pattern",
          "Command Context",
          "Show Commands on the UI",
          "Issue Commands from the UI",
          "The Build Unit Command",
          "Building Queue",
          "Diving into the UI",
          "The Progress Bar",
          "Showing the Build Progress",
          "Cancel Items in the Queue",
          "Even More Buildings & Units"
        ],
        "Behavior Trees": [
          "Section Intro",
          "Using Unity Behavior",
          "Custom Nodes in Unity Behavior",
          "Gatherable Supplies",
          "Unit Commands",
          "Gathering Supplies",
          "Return Supplies",
          "Smooth Gathering Movement",
          "Pick Better Gathering Locations",
          "Pick Only Not Busy GatherableSupplies",
          "Gathering Edge Cases",
          "Synchronize Animations",
          "Using Behavior Events",
          "Player Supplies",
          "Using Conditional Branches",
          "Returning Supplies"
        ],
        "Building Buildings": [
          "Section Intro",
          "Building UI Menus",
          "Split Unit and Building SOs",
          "Placing Buildings",
          "Build Building Action",
          "Parallel Execution in the Behavior Tree",
          "Animate Worker While Building",
          "Manage Competing Parallel Executions",
          "Finalize Building",
          "Cancel Building",
          "Unit Death Event",
          "Building Progress",
          "Resume Building",
          "Building Restrictions",
          "Building Restriction Visuals",
          "Distance Checking Restrictions",
          "Pay for Buildings",
          "Refund Building Cancellation",
          "Lock Unavailable Commands",
          "Lock Tooltips",
          "Dynamic Tooltips",
          "Single Unit Selected UI",
          "Building Under Construction UI",
          "Building Spawn Event",
          "Increase Health While Building",
          "Single Unit Commands",
          "Building Events",
          "Using Sub Graphs",
          "Building Edge Cases",
          "Configure the Buildings",
          "Section Closing"
        ],
        "Military Units": [
          "Section Intro",
          "A New Tree for Military Units",
          "Taking Damage",
          "Sense Nearby Units",
          "AI Unit Awareness",
          "Attack Configuration",
          "The Attack Command",
          "Attack & Apply Damage",
          "Polish the Attack Behavior",
          "Attack-Move",
          "The Grenadier",
          "Grenadier Projectile Visualization",
          "Timing Projectile Damage",
          "Area of Effect Damage",
          "Create the Air Transport",
          "Unit Transport Configuration",
          "Load Units Behavior Tree",
          "Load Unit Command",
          "Load Into & Hidden Commands",
          "Load Multiple Units",
          "Unload Units",
          "Unit Transport UI",
          "Unit Load & Unload Events",
          "Polishing & Clean Up",
          "Section Closing"
        ],
        "Unit Ownership": [
          "Section Intro",
          "Unit Ownership",
          "Event Bus Channels Per Owner",
          "Owners on the Player Input & UI",
          "Track Supplies Per Owner"
        ],
        "The Tech Tree": [
          "Section Intro",
          "Tech Tree Scriptable Object",
          "Unlocking Dependencies",
          "Lock Commands with Unmet Dependencies",
          "Upgrade ScriptableObject",
          "Research Upgrades",
          "Multi-Tier Upgrades",
          "A More Responsive UI",
          "Apply Upgrades",
          "Generify Property Access",
          "Safeguard Base Configurations",
          "Handle Losing Dependencies",
          "Show Dependencies on the UI",
          "Multi-Building Research Locking"
        ],
        "Simple Fog of War": [
          "Section Intro",
          "Fog of War Camera Setup",
          "Render the Fog",
          "Keep Track of Explored Locations",
          "Merge Visible & Explored Fog",
          "Softer Fog",
          "Unit Sight Configs",
          "Sight Ownership",
          "Determine Unit Visibility",
          "Hide Units in the Fog",
          "Hide Buildings in the Fog",
          "Hide Supplies in the Fog",
          "Placeholders in Explored Areas",
          "Placeholder Removal",
          "Block Clicks on Invisible Objects",
          "Unit Fog Amnesia",
          "Clean Up",
          "Prevent Building in the Fog",
          "Section Closing"
        ],
        "Minimap": [
          "Section Intro",
          "Show the Minimap",
          "Unit Minimap Display",
          "Show Camera Bounds on the Minimap",
          "Hide Undiscovered Supplies",
          "Move the Camera with the Minimap",
          "Right Click on the Minimap",
          "Issue any Command on the Minimap"
        ]
      },
      "requirements": [
        "To get the most out of this course you'll need an intermediate understanding of C# and a good grasp of using the Unity Editor."
      ],
      "description": "Ever dreamed of making your own real time strategy game but got totally pwned by the complexity? You’re not alone. RTS games are beasts—but this course is here to help you tame 'em.\nYou’ll build out a full RTS from scratch—units, buildings, upgrades, fog of war, the whole lot. You even get a starter project with models and a level, so you can hit the ground running.\nWanna make your units act less like chaos goblins? You’ll build behaviour trees that respond properly to player input.\nWe’re talking powerful coding stuff too—event buses, ScriptableObjects, config-driven systems—big tools that make your game scalable and pro-level tidy.\nSick of hard coding every single stat or upgrade? We’ve got your back. You’ll make a fully editable system where new units and upgrades can be added in a flash.\nStruggling with scaling your projects or levelling up your dev skills? This course shows you how to build smart systems from the get-go, so your game grows with you.\nIf you’ve already got a decent handle on Unity and C#, and you’re keen to go deeper, this course is perfect for you. RTS fans and future AI masterminds, you’re gonna love it.\nYou’ll need an intermediate knowledge of C# and to be comfy using the Unity Editor—but don’t worry, we’re not gonna spawn you into a boss fight with no gear. So if you get stuck, think of us as your support crew—arming you with the tools and tips to win the fight your way.\nAnd yep, like all GameDev tv courses, you get access to our awesome forums and teaching assistants.\nBy the end, you won’t just have code—you’ll have the bones of your very own RTS game.\nSo, what are you waiting for? Let’s get building!",
      "target_audience": [
        "If you're interested in making a Unity RTS game, then this is quite literally THE course for you!",
        "Equally, if you're looking to learn how to make complex Game AI - sign up now.",
        "And if you're already an intermediate C# / Unity dev and you're looking to expand your skillset, you're totally in the right spot."
      ]
    },
    {
      "title": "Twine 2: Make Simple Games! Step-by-Step Masterclass Harlowe",
      "url": "https://www.udemy.com/course/twine-make-games-advanced-fast-harlowe/",
      "bio": "Create Immersive Stories with Dynamic Text, Audio, Video; Realize your Visions Now!",
      "objectives": [
        "Becoming Ready to build immersive short video games",
        "Becoming Able to integrate audio / video / key commands in your game",
        "Becoming Comfortable with all the features of Game Development in Twine",
        "Becoming Skillful in solving problems related to your game visions"
      ],
      "course_content": {
        "PROLOGUE - Preparation and Basics": [
          "Welcome Message",
          "Install",
          "Browser",
          "The Passage",
          "Basic Stylization",
          "The \" ()[] \" Principle",
          "Tags and Sizing",
          "Basic Link",
          "The CSS",
          "The Javascript"
        ],
        "PART 1 - The Only 20 Functions You'll Ever Need": [
          "Advanced Link",
          "Left-Right Top-Bottom",
          "Global vs Local",
          "Macro Variants",
          "Variables",
          "Randomization",
          "Set vs Put",
          "Delays + Time Cycles",
          "Conditional Statements",
          "More Conditions",
          "Events",
          "\"If\" inside \"Set\"",
          "Hooks",
          "Show/Hide",
          "Code Containers",
          "Replace Content",
          "Reloading a Hook",
          "Targeting a Hook",
          "Datamaps",
          "Arrays",
          "Live Data",
          "Visits vs History",
          "Spacing Optimization"
        ],
        "INTERLUDE 1 - Styling": [
          "Color Change",
          "Dynamic Styles",
          "Size + Opacity",
          "React to Mouse Cursor",
          "Verbatim",
          "Transitions"
        ],
        "PART 2 - Audio Playback Systems": [
          "Install HAL-Audio!",
          "Audio Definitions",
          "Play a Sound!",
          "Stop a Sound!",
          "Retrigger",
          "Basic Audio Loops",
          "Advanced Audio Loops",
          "Fades",
          "Realtime Volume",
          "Crossfades",
          "Playlists",
          "Shuffled Playlists",
          "One-Shot Shuffle (Round Robin-ish)",
          "Groups",
          "Seek",
          "Realtime Monitoring",
          "Global Controls",
          "Format Considerations",
          "Relative Paths",
          "Preloading",
          "Configurator"
        ],
        "PART 3 - Image & Video Playback Systems": [
          "Image Integration",
          "Basic Repositioning",
          "Relative Repositioning",
          "Absolute Repositioning",
          "Video Integration",
          "Video Events",
          "Basic Realtime Media Switching"
        ],
        "PART 4 - Gamepad/Keyboard Control Systems": [
          "Install Mousetrap: Key Commands!",
          "Avoid Key Repeats",
          "Tips and Ideas",
          "Install Spring: Gamepad Support!",
          "Button Up/Down Events (gamepad)",
          "Analogs & Triggers (gamepad)",
          "Vibration Toggle (gamepad)",
          "Vibration Intensity (gamepad)"
        ],
        "INTERLUDE 2 - Advanced & Good-to-Knows": [
          "Maximize Math",
          "Header/Footer",
          "Initial Conditions",
          "Bypass Code & Comments",
          "Spreading Arrays",
          "\"For\" Loops",
          "Sandboxing",
          "Maximize Conditions",
          "Number to String / String to Number",
          "Cloning & Referencing",
          "Custom Macros",
          "Typewriter",
          "Display (Custom Macros 2)",
          "Make a Timer!",
          "Save/Load Progress",
          "Musical Stingers!",
          "Monitor Changes (Typing/Footsteps Sound System)"
        ],
        "EPILOGUE - Exporting The Game": [
          "Final Export : Considerations",
          "Preparing The Game",
          "Exporting Online Versions",
          "Import Fonts",
          "Exporting Offline Versions"
        ],
        "FINAL EXAM!": [
          "TWINE'S FLUENCY TEST"
        ]
      },
      "requirements": [
        "A Computer with internet connection and Will to Master Twine",
        "No programming experience needed",
        "Being able to understand Spoken English (English Captions available!)"
      ],
      "description": "DISCLAIMER: This Course will NOT make you a pro overnight. But it'll get you in the right direction. Becoming a pro requires consistent practice and passion. If you have that, eventually, also thanks to having completed this course, you WILL make it. You have my full, thoughtful support. Alright letsgooo!\n\n\nOk, You are someone who wants to communicate.\n\n\nIt's no secret that Twine is the king of Choose-Your-Adventure Text Games.\n\nWho said that this type of game has to be basic and boring?\nWhat if i told you that in Twine you can also modernize the genre up to incredible levels, i.e. building intricate audio/video systems allowing you to create highly immersive experiences? Well, now you know.\n\n\nCan Twine allow you to make a Triple-A Game? NO!\nCan Twine allow you to make a short and immersive indie game that can already become viral by itself? YES!\n\n\nThe problem with that is that it takes a lot of time to master all the facets of this software for free, and some people don't wanna wait that long, that's why this gig is my present to you:\nYou will take the absolute shortcut to proficiency and reach it in a few classes because i will show you exactly what you need and let your knowledge expand to its max.\n\n\nTwine Harlowe is user friendly but actually very powerful is you find all the ways to squeeze the best out of it, this course will literally guide you from knowing nothing to knowing everything; then you’ll be able yo realize your dreams with the right amount of effort!\n\n\nBe patient, follow the classes slowly and you'll realize your vision; Let's do it.",
      "target_audience": [
        "Creatives who need to master Twine in order to realize successful mini games",
        "Students that need to pass an exam with the highest score possible",
        "People who always dreamt to be able to make games and are motivated to realize that dream"
      ]
    },
    {
      "title": "Publish your own Candy Crush* iPhone Game Today. iOS Code",
      "url": "https://www.udemy.com/course/publish-your-own-candy-crush-iphone-game-today-ios-code/",
      "bio": "A-Z guide to help you publish your own Candy Crush inspired iPhone game mechanics in a day. Source Code included",
      "objectives": [
        "Publish your own Candy Crush inspired Game in the Apple app store",
        "Go through the entire process of making an iPhone game without missing any step"
      ],
      "course_content": {
        "Introduction": [
          "Course Overview"
        ],
        "Initial Setup": [
          "Apple Developer Registration",
          "Get XCode Tool",
          "Game Source Code Setup",
          "Troubleshooting newer XCode with iOS 7.1+",
          "Distribution Certificates",
          "Provisioning Profiles",
          "Advertising Accounts Setup"
        ],
        "Reskinning Process": [
          "Match 3 Game Setup",
          "Modifying Icons and Launch Images",
          "Customizing Game Images",
          "Modifying Game Sounds",
          "Testing the Reskinned Game"
        ],
        "Apple App Store Submission": [
          "Publishing it to the iTunes app Store for Review",
          "Setup Tax & Banking information to get paid"
        ],
        "Conclusion": [
          "What to do next?",
          "Expand Your Reach Horizontally and Vertically"
        ],
        "What to Do Next? Level Up Your Business": [
          "App Store Optimization Techniques (ASO): App Name and Itunes Keywords",
          "Game Analytics",
          "Upcoming Trends Techniques",
          "Get Informed of the Latest Trends and Deals",
          "Going Professional with Top Icon Templates",
          "BONUS"
        ]
      },
      "requirements": [
        "A Mac OS X or MacinCloud.com for PC users"
      ],
      "description": "This course's main objective is to become the go-to source for anyone willing to enter the iPhone app industry.\nThe course starts with us in front of a regular Apple computer (or MacInCloud for PC users) and I will guide you through all the step necessary to set up your computer for development. I will also go through each steps to become a licensed iOS developer.\nWe will then install the game from the source code(included with this course), run the game on the simulator, then modify the graphics and sounds to customize the 'match 3' game into one of your own.\nThen we will setup three advertising channels to ensure money coming in. Then we will publish the game to the Apple app store.\nThis course is not about theories. Once you complete this course, you have a real product of your own in the app store, bringing in profit. You can't pass this opportunity.\nThere has been plenty of reskins of these apps by myself and by many students.\nAlso feel free to ask me anything that goes through your mind, I love to help!\nCheers!\nYohann\n*The sourcecode is not Candy Crush's source code, it does have the same match-3 game mechanics.",
      "target_audience": [
        "Anyone wanting to have a mobile app of their own",
        "People that want an economic way of increasing their mobile app portfolio"
      ]
    },
    {
      "title": "Mastering Entity Framework Core: Mapping & Manipulating Data",
      "url": "https://www.udemy.com/course/mastering-entity-framework-core-mapping-manipulating-data/",
      "bio": "In a step by step manner, master Entity Framework Core and effectively start developing and managing data-driven applica",
      "objectives": [
        "Understand what ORM tools are and what problems they solve",
        "Understand how to persist application data to a database using Entity Framework Api.",
        "Learn how to query the data using Linq and gain insight in how Linq fits into Entity Framework",
        "Learn how about mapping entities explore possible types of relationships for database model",
        "Learn how to create, update and delete data, commonly referred to as CRUD operations"
      ],
      "course_content": {
        "Getting to Know Entity Framework Core": [
          "The Course Overview",
          "Quick Dive into Object Relational Mapping",
          "Understanding Entity Framework Core Concepts",
          "Working with .NET Core",
          "EF Capabilities and Architecture",
          "Prerequisites to Creating an ASP.NET Core Application"
        ],
        "Create New Project with Entity Framework Core": [
          "Command Line Interface for .NET Core",
          "Create New Project Using VS 2017 with Entity Framework",
          "Configure Entity Framework in an ASP.NET Core Project",
          "Creating Simple Model and Create a Database for the Application",
          "Save and Query a New Record"
        ],
        "Mapping Entities and Database Structure": [
          "Mapping Classes to Tables",
          "Mapping Properties to Columns",
          "One-to-many Relationships",
          "Many-to-many Relationships",
          "One-to-one Relationships"
        ],
        "Querying Data": [
          "Using LINQ, Method, and Query Syntax",
          "Simple Queries, Using Order By, and Where Clauses",
          "Aggregations",
          "Using Projections",
          "Including Child Records",
          "Performance Considerations"
        ],
        "Manipulating Data": [
          "Create a Web API Controller with CRUD Operations",
          "Insert Data",
          "Update Data",
          "Delete Data"
        ]
      },
      "requirements": [
        "Familiar with Entity Framework and .NET Core"
      ],
      "description": "Entity framework is an Object Relational Mapping (ORM) framework that offers an automated mechanism to developers for storing and accessing the data in the database. In order to survive in this growing market, the knowledge of a framework that helps provide easy access to databases, that is, Entity Framework has become a necessity. This Video will provide .NET developers with this knowledge and guide them through working efficiently with data using Entity Framework Core.You will start by understanding ORM concepts, before then moving on to discuss advantages of Entity Framework over ADO.NET. Next you will see how.NET Core fits into the overall pictures and go over the environment necessary to follow along with the course. Further you will learn to build your first sample project to see EF in action here you will learn to create database and add data to it. Further you will learn about Mapping Entities and Database structure here you will see how to create mapping between objects and database structures, how to define tables and columns. You will learn the specifics or SQL Server types and how to map them to .NET Types. You will define all possible types of relationships for your database model. Next you will dive into Querying data you will learn the basics of Linq then you will start with simple queries, advance to aggregations and projection techniques. You will see how to obtain object graphs and talk about performance. Next you will learn Manipulating data, you will learn how to create, read, update and delete data, commonly referred to as CRUD operations. You will see the differences between object graphs and individual objects when it comes to CRUD features of Entity Framework Core. Finally you will learn best practices examples.\nAbout the Author :\nSergey Barskiy is an architect with Tyler Technologies. He lives in Atlanta, GA. He has been developing software for almost 20 years. Sergey is a Microsoft MVP. He holds these Microsoft certifications: MCPD, MCTS, MCSD for .NET, MCAD for .NET, MCDBA, and MCP. He has been working with Microsoft Technologies for over 15 years. He is a frequent speaker at various regional and national conferences, such as VS Live, DevLink, CodeStock, and Atlanta Code Camp, as well as local user groups. He is one of the organizers of Atlanta Code Camp. He authored articles for Code Magazine.\nSergey Barskiy has been using Entity Framework since it was first released to the public. He has deployed a number of projects to production that used Entity Framework over the years. He has used the Code-First approach on a few different projects as well. Sergey has produced an online video training course for this technology. He has spoken on Entity Framework Code-First at a number of national and regional conferences and events.",
      "target_audience": [
        "This course is aimed at developers who are somewhat familiar with Entity Framework and .NET Core, and who want to develop or extend their knowledge of Entity Framework Core and see practical examples on how to use it in .NET Core Web applications. Prior knowledge of .NET and C# is assumed."
      ]
    },
    {
      "title": "Advanced Vehicle Systems in Unreal Engine 5",
      "url": "https://www.udemy.com/course/mastering-advanced-vehicle-systems-in-unreal-engine-5/",
      "bio": "Advanced vehicle system in UE5 Blueprint Scripting: drivable, destructible, customizable vehicles with realistic physics",
      "objectives": [
        "Build fully drivable vehicles with custom physics in Unreal Engine 5.",
        "Implement deformable vehicle bodies that react to collisions.",
        "Develop interactive vehicle mechanics like door opening and runtime possession.",
        "Set up advanced vehicle collision and damage systems.",
        "Add breakable glass and realistic windshield effects.",
        "Apply realistic shooting mechanics with bullet decals and damage control.",
        "Create dynamic UIs that adapt to vehicle and character possession.",
        "Create destructible vehicles with realistic breakable parts.",
        "Customize 3D vehicles by importing your own models.",
        "Add vehicle entry and exit animations with door interactions.",
        "Design a complete sound system with engine, collision, and glass-breaking effects.",
        "Implement drifting, braking, and engine start sounds.",
        "Build vehicle damage textures for a realistic experience.",
        "Reuse the code and effects for new vehicles created in Blender.",
        "Master Anim Graphs to handle vehicle animations and interactions."
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Project",
          "Tools",
          "Final Project"
        ],
        "Drivable Vehicles": [
          "Setup the Project",
          "Setup Vehicle Class",
          "Setup Wheels",
          "Setup Input",
          "Attach Wheels"
        ],
        "Destruction System": [
          "Setup Proxy",
          "Deformable Skeletal Mesh Visibility",
          "Fix CR_Frame_Destructable",
          "Storing Skeletal Mesh Values",
          "Decals and Plastic Constraints",
          "Setup Control Rig",
          "Enable physics on parts of car",
          "Plastic Deformation",
          "Deform Vehicle",
          "Deform Vehicle Physics",
          "Vehicle Deformation",
          "ABP Proxy",
          "On Vehicle Mesh Hit",
          "Setting up the Vehicle"
        ],
        "Glass Breaking Effect": [
          "Broken Glass Plugin",
          "Spawn Glass Effect",
          "Spawn Glass Effect Local",
          "Glass Effect Events",
          "Fix Bugs"
        ],
        "Damage System": [
          "Runtime",
          "Anim Node Class",
          "Anim Node Runtime",
          "ABP_Proxy",
          "Possess and Unpossess",
          "Initialize Vehicle Textures",
          "Hit Event",
          "Damage Control"
        ],
        "Setup Character": [
          "Setup Character",
          "Setup Weapon Effects",
          "Setup Bullet",
          "Bullet Rotation",
          "Weapon UI",
          "Spawn Decals",
          "Bullet Color",
          "Fix Bullet Impact"
        ],
        "Enter Exit Vehicle": [
          "Retarget Animations",
          "Character Settings",
          "Interactable Component",
          "On Player Interaction Started",
          "On Player Overlap",
          "Enter Vehicle",
          "Play Animation Montages",
          "Set Character Mode",
          "Set Driver Location",
          "Possess Vehicle",
          "Do Once",
          "Exit Vehicle",
          "View Target Transition"
        ],
        "User Interface": [
          "Speedometer Material",
          "Font Color Material",
          "Create Driving UI",
          "Update Speed",
          "Update Speed Text",
          "Character And Vehicle UIs",
          "Interaction UI"
        ],
        "Sound System": [
          "Plugins and Sounds",
          "Driving State Structure",
          "Fix Audio Component Errors",
          "On Hit Sound Effects",
          "Audio Controller",
          "Event Dispatchers",
          "Update Drifting State",
          "Setup Driving Status",
          "Fire Airborne",
          "Fix Audio Controller",
          "Update Movement Input",
          "Engine and Drifting Sounds"
        ],
        "Custom Vehicle": [
          "Setup Vehicle",
          "Vehicle Weight Paint",
          "Doors and Side Mirrors",
          "Custom Vehicle Blueprint",
          "Setup Wheels",
          "Setup Glasses",
          "Setup Materials",
          "Destructible Visibility Fix",
          "Fix Glass Effects"
        ]
      },
      "requirements": [
        "Basic understanding of Unreal Engine 5.",
        "Experience with Blueprints in Unreal Engine.",
        "Basic game development knowledge.",
        "No advanced coding required; visual scripting is used.",
        "Familiarity with 3D modeling (Blender knowledge helpful)."
      ],
      "description": "Unlock the full potential of Unreal Engine 5 by mastering advanced vehicle systems! This course takes you step-by-step through building drivable, destructible, and customizable vehicles in Unreal Engine 5, with a focus on realism, physics, and interactivity.\nWhat you'll learn:\nComplete Drivable Vehicles: Learn to create fully functional drivable vehicles, including car physics, controls, and animations.\nComplete Destructible Vehicles: Build vehicles that can break apart with realistic physics-driven destruction.\nCustomizable Vehicles: Import your own 3D vehicle models and follow along as you customize and implement them in Unreal Engine.\nDeformable Vehicles: Design vehicles that deform upon collision, creating a more immersive experience.\nRealistic Collisions & Damage System: Implement a sophisticated collision and damage system with breaking glass, windshield effects, and damage textures.\nVehicle Interaction: Add dynamic vehicle interaction such as opening doors, entering/exiting vehicles, runtime possession, and more.\nShooting Mechanics: Create interactions with shooting systems, including bullet decals, damage control, and vehicle destruction.\nUI & Anim Graph: Build vehicle-specific UI showing speed and interaction widgets that adapt based on possession, as well as character UIs for entering/exiting vehicles.\nSound Systems: Develop realistic sound systems including engine sounds, door effects, glass breaking, and collision audio.\nReusing Code for New Vehicles: Apply everything you've learned to new vehicles built in Blender, making the system reusable across multiple vehicle types.\nWhy this course?\nAll resources provided for free: Everything used in the course is freely available, and all assets can be downloaded directly from Udemy resources.\nComprehensive vehicle systems: From collisions to sound effects, this course covers every aspect of vehicle mechanics, making it the most in-depth course on advanced vehicle systems in Unreal Engine 5.\nHands-on learning: You’ll follow along with practical projects that showcase how to apply these mechanics to any vehicle you want to create in Unreal Engine.\nWhether you're a game developer looking to add realistic vehicles to your project or someone interested in learning the ins and outs of vehicle mechanics in Unreal Engine 5, this course will give you the skills you need to bring your vision to life!",
      "target_audience": [
        "Game developers looking to create advanced vehicle systems in Unreal Engine 5.",
        "Unreal Engine users who want to add drivable and destructible vehicles to their projects.",
        "3D artists interested in importing custom vehicles into Unreal Engine.",
        "Developers aiming to master realistic vehicle collisions and damage systems.",
        "Beginners with basic UE5 knowledge looking to expand their skills.",
        "Indie game creators seeking advanced vehicle mechanics for their games.",
        "Blender users who want to apply custom models to game-ready vehicles.",
        "Anyone interested in realistic vehicle interactions, physics, and sound systems."
      ]
    },
    {
      "title": "The Ultimate Unity Coloring & Painting Course",
      "url": "https://www.udemy.com/course/unity-coloring/",
      "bio": "Learn How to Paint & Color in Unity & Create a Kids Coloring Game",
      "objectives": [
        "Learn how to write Clean Code",
        "Learn about Various Painting Techniques",
        "Learn how to Leverage the GPU for Performant Code",
        "Learn how to edit Textures & use Render Textures to your advantage",
        "Learn how to Create a Kids Coloring Game",
        "Learn how to Color Objects Using different Brushes"
      ],
      "course_content": {},
      "requirements": [
        "How to make your way through the Unity Editor",
        "C# Basics",
        "If you've taken some of my courses, it's a plus ;)"
      ],
      "description": "Colors play a huge role in games, and more broadly, in real life.\nMany games revolve around the painting / coloring mechanic.\n\n\nDo you want to create a wonderful game where your players can color your creations, or even color the world they are in ?\nThen look no further, this Course is for You !\n\n\nIn this course, we will explore 5 different techniques you can use to create a coloring game, in Unity.\nEach one of these techniques will see its difficulty level increase.\nAs the level of difficulty rises for each of these techniques, so too does the vast expansion of possibilities they offer.\n\n\nWe will first Start with the most basic one, which is coloring a sprite. We will manage the player input to detect any image and color it with the color of your choice.\nIn that section, we will get to learn about 2D Raycasts, the Input class, and our sprites sorting order.\n\n\nIn the Second Section, we will experiment with “Line Renderers”. This is a built-in component that allows you to draw, well, lines…\nBut we will hack it so that it feels like a paint brush! You will learn how you can apply textures, play with its colored gradient and optimize its performance.\nThis will be an additional arrow to your quiver.\n\n\nThe Third Technique will allow you to create infinite worlds if you get it right ! You will learn how to create procedural meshes, texture them using the uvs, and optimize them.\nThis is a coloring course, so I’ll show you some nice tricks to use them as a paint brush. But you can totally create 3D objects with this technique, go one step further and create infinite procedural terrains. How amazing is that ?\nAdditionally, you will learn how to mask or restraint your drawing to a plane using the Stencil Buffer. That’s a technique that I explain in more details in another course, and you get it for free here.\n\n\nAfter that, you will learn how to manipulate Textures in the Fourth Section. This is such an amazing power that you will have in your hands. It will allow you to edit each and every pixel to your liking.\nUsing that technique, we will first color the whole texture, then draw a square, and finally polish the look with a smooth rounded brush.\nBut that technique has limitations, as you increase the brush size, manipulating textures can be heavy on the processor.\n\n\nThat’s why the Fifth Section will show you how to leverage the GPU to get a much higher frame rate, thus a smoother player experience.\nYou will learn how to create your own shaders, pass a texture to a shader, let it apply some changes, and get your texture back to apply it to your sprites.\nI’ll show you a nice trick to keep the borders of your drawing, even after it’s been colored. You can then decide if you like the look of it or not.\n\n\nTo complete our course, we will add colored pencils to the side of the screen, to allow the player to change the brush color.\nWe will also add a nice way to select the brush size.\nAnd this will make, for an amazing coloring game.\n\n\nThis course will definitely step up your game dev skills, if you’re ready to Become a Color Master,\nGrab it, today.",
      "target_audience": [
        "Anyone who wants to create a Coloring Game",
        "Anyone who wants to Learn about Different Painting Techniques"
      ]
    },
    {
      "title": "Create a Space Pinball Game in Construct 2",
      "url": "https://www.udemy.com/course/construct2pinball/",
      "bio": "Create a pinball game for computers, smartphones, and tablets without code!",
      "objectives": [
        "Use Construct 2 software",
        "Create a pinball game with animation and sounds, playable on computers and mobile devices",
        "Create a fun game without writing code or learning a programming language"
      ],
      "course_content": {
        "Introduction & Software": [
          "Introduction",
          "Software",
          "Resources"
        ],
        "Building the Game": [
          "Title Screen",
          "Instruction Screen",
          "Sounds",
          "Adding Mobile Controls",
          "Heads Up Display",
          "Adding Walls",
          "Adding Barriers",
          "Making the Flippers",
          "Rollovers",
          "Adding the Bumpers",
          "Making Groups in Event Sheets",
          "Start Up Actions",
          "Adding Control Events",
          "The Plunger",
          "Losing the Pinball",
          "Keeping Score",
          "Exporting Your Project"
        ]
      },
      "requirements": [
        "A PC or Mac running a simulated Windows XP, Vista, 7, or 8 environment",
        "Construct 2 (Free or Paid version)"
      ],
      "description": "Have you ever wanted to build a game, but didn't know how to get started making it? Would you like to make computer and mobile games, but don't want to learn a programming language? Well, you've come to the right place!\nIn this video course you'll learn how to:\nCreate a pinball game without writing code\nUse Construct 2 software (FREE!)\nPublish your game to be played on computers and mobile devices\nGo from complete beginner to game developer\nHere's what you'll get:\n2.5+ hours of video tutorials\nAll of the source files\nArtwork, sound effects and music needed to create an interactive, mobile-friendly game",
      "target_audience": [
        "Anyone who wants to make games without code",
        "Anyone interested in Construct 2 software"
      ]
    },
    {
      "title": "Developing HTML5 multiplayer browser game, also known as .io",
      "url": "https://www.udemy.com/course/developing-html5-multiplayer-browser-games-also-know-as-io/",
      "bio": "Ever wondered how the multiplayer browser games are made? Enroll in this course and you'll be developing them.",
      "objectives": [
        "Download & Install NodeJs",
        "Download & Install - express and websockets libraries, and Phaser framework",
        "Basics of OOP(Objected-oriented programming)",
        "Develop and HTML5 game that supports multiplayer and runs in browser",
        "Handling multiplayer movement, synchronizing it via server to clients",
        "Handling shooting etc.",
        "Possibilities of websocket technology",
        "How to get working prototype in less than 2 hours"
      ],
      "course_content": {
        "Introduction": [
          "Resources",
          "Introduction & Downloading NodeJS, NPM init",
          "Install express & websockets"
        ],
        "Server side": [
          "Setup the server",
          "HTML response, Use and Get functions"
        ],
        "File & Server configuring": [
          "Creating clients main JS file",
          "Extending classes, creating player class.",
          "Player update method, required in order to move player",
          "Player input",
          "Player rotation",
          "Player shooting",
          "Websockets - players",
          "Websocket inputs",
          "Websockets - bullets",
          "Player death",
          "Assets, code and whole projects."
        ]
      },
      "requirements": [
        "Computer",
        "Visual Studio Code or any other IDE",
        "Basics of HTML"
      ],
      "description": "My name is Matthew and I'm self-taught developer. I know how hard it can be to achieve some real career in IT and I want to help others to understand a specific topic. You might know games that are usually called \".io\" games, but \".io\" means only the favorite domain that they're hosted on. In the real world, those \".io\" games are browser-based multiplayer HTML5 games. And I want to share with you an authentic course where we will develop our multiplayer browser game. If you ever asked someone “how to make online game” or anything similar, this might be the course you’re trying to find.",
      "target_audience": [
        "Everyone who wants to learn developing HTML5 multiplayer browser games",
        "Developers in NodeJs",
        "Game developers",
        "Students at computer science",
        "Developers in general"
      ]
    },
    {
      "title": "Creating the game cinematic using Unreal and Adobe Premiere",
      "url": "https://www.udemy.com/course/creating-the-game-cinematic-using-unreal-and-adobe-premiere/",
      "bio": "Learn Unreal Engine and Adobe Premier by creating game cinematic scene with the comprehensive guide from begin to finish",
      "objectives": [
        "By the end of the course, you'll have edited your own short cinematic using either the supplied footage (video clips, photos, graphics, music, etc.), or your own footage!",
        "Apply visual effects and making video more cinematic with overlays.",
        "Export and save your videos for HD playback.",
        "Edit an entire video from beginning to end, using professional and efficient techniques.",
        "Start a project with the right settings for any type of video, from any camera.",
        "Edit your videos, and make them more dynamic with cutaway footage and photos.",
        "You will learn how to create a stunning cinematic animation scene in Unreal Engine 4, from beginning to end",
        "You will learn how to create the cinematic scene in the \"Preview This Course\" video, step-by-step",
        "You will learn how to create smooth camera moves inside Unreal Engine 4, giving your scene a professional cinematic look and feel"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Creating our sequence": [
          "Creating our sequence"
        ],
        "Adding some cameras and shots": [
          "Adding some cameras and shots"
        ],
        "Adding a new camera": [
          "Adding a new camera"
        ],
        "Cutting our audio with audacity": [
          "Cutting our audio with audacity"
        ],
        "Adding a new cameras": [
          "Adding a new cameras"
        ],
        "Adding some vfx to our scene": [
          "Adding some vfx to our scene"
        ],
        "Exporting our sequence": [
          "Exporting our sequence"
        ],
        "Importing our audios to premier": [
          "Importing our audios to premier"
        ],
        "Adding some F X in premier": [
          "Adding some F X in premier"
        ]
      },
      "requirements": [
        "Students should have Adobe Premiere Pro installed on their computers to follow along. There are A LOT OF PRACTICE EXERCISES throughout this course with downloadable practice clips. We want you to follow along.",
        "We teach this course using the Adobe Premiere Pro CC (creative cloud) versions, so it would be best if you're using CC. But you can still learn using CS6, CS5, CS4, or even CS3!",
        "Have some basic computer skills; know how to install software and explore a new application with curiosity.",
        "You have Unreal Engine installed (4.17 or higher) and have used it a few times to understand the basics like moving around the viewport and using the Content Browser.",
        "64-bit PC capable of running Unreal 4 (recommended).",
        "Or a Mac capable of running Unreal 4 (must support Metal).",
        "About 30GB of free disc space"
      ],
      "description": "More about the Instructor:\nThis course is designed by Animation Hacks which is the visual effect studio with high-quality skill artist work on numerous unannounced projects. In addition, they enjoy sharing their knowledge with those students who learn 3D online.\nNOTE FOR STUDENTS - please take a look Section 1 / Lecture 1 to downloads for the source attachment link with the lesson.)",
      "target_audience": [
        "You are a video creator (or want to make videos), and are wanting to edit videos with THE BEST video editing application today.",
        "You might know how to edit with Final Cut, iMovie, Sony Vegas, Premiere Elements, Windows Movie Maker, Camtasia, Screenflow, etc. But you want to transition to editing with Premiere Pro.",
        "You are a complete beginner who has never opened Premiere Pro (or have never learned how to use it properly).",
        "You have played around with Premiere Pro, but need some help becoming a more efficient editor.",
        "You wants to learn how to create stunning cinematic animations inside of Unreal Engine 4.",
        "You wants to learn how to animate a cinematic camera inside of Unreal Engine 4."
      ]
    },
    {
      "title": "Building Games with Scratch 2.0",
      "url": "https://www.udemy.com/course/building-games-with-scratch-20/",
      "bio": "Develop fun and engaging games using Scratch 2.0",
      "objectives": [
        "Create and control objects for your game, and write the code for these objects using code blocks",
        "Make in-game objects interact with each other, such as shooting, eating, bouncing, breaking, and much more",
        "Create artwork by importing graphics, using your webcam, or using the in-game graphic editors",
        "Implement score and health attributes for your game/characters",
        "Ramp up the difficulty in a game by carefully introducing new threats in order to keep the game interesting for the player",
        "Learn animation tricks that will give a bouncing ball more convincing weight, or synchronize an animated character’s mouth with recorded speech",
        "Develop your skill at fundamental computer programming concepts, such as if-then loops, iteration, and debugging",
        "Share your games with your friends"
      ],
      "course_content": {
        "Scratch 2.0 - What It Is": [
          "Getting Started: What It Is",
          "Animating and Controlling a Sprite with the Keyboard",
          "Adding Treasures to Collect and Threats to Avoid",
          "Publishing Your Work on the Scratch Website"
        ],
        "Breakout": [
          "Creating a Bouncing Ball",
          "Implementing Ball Interactions with Paddle",
          "A Brick That Vanishes When Hit by the Ball",
          "Creating a Wall of Bricks with Cloning",
          "Adding a \"Win Game\" State"
        ],
        "Catch and Avoid": [
          "Controlling a Character with the Keyboard",
          "Adding Falling Treasures and Threats",
          "Implementing the Score and Health",
          "Reskinning Sprites",
          "Controlling a Character with the Mouse and Webcam"
        ],
        "Escape the Room": [
          "Creating Multiple Backdrops",
          "Creating a Clickable Hotspot",
          "Linking Objects and Events to Create a Puzzle",
          "Creating an Inventory and Winning Game State",
          "Resetting All Objects for a New Level"
        ],
        "Base Defense Game": [
          "Creating a Home Base and Projectiles",
          "Creating Inbound Targets",
          "Keeping Score and Ending the Game",
          "Increasing the Difficulty",
          "Reskinning the Sprites for Visual Variety"
        ],
        "Maze Game - Building, Polishing, and Publishing with Scratch 2.0": [
          "Creating Artwork",
          "Coding the Gameplay for Level 1",
          "Creating a Deathwall for Level 2",
          "Creating a Deathsquiggle Threat for Level 3 and 4",
          "Polishing and Publishing on the Scratch Website"
        ]
      },
      "requirements": [
        "A comprehensive and easy-to-understand set of videos that demonstrate the best practices of game development and designing by showing you how to create five engaging games using Scratch 2.0."
      ],
      "description": "This video course shows you how to design and build several short games, then code and debug them, and finally publish and share them with the world. This course is a beginner’s guide to learning the basics of computer science and creating your own engaging and interactive games.\nYou will learn how to make a character respond to input from your computer keyboard, and how to get onscreen objects to interact with each other in increasingly complex ways. Along the way, you will create more visual variety, more interactive possibilities, and have more fun.\nFollowing on from this, you’ll learn how to create a simple catch-and-avoid game, a ball-and-paddle “Breakout” game, a base-defence game, a point-and-click “escape the room” adventure game, and a maze game. You’ll learn to upload or create the artwork, how to control an onscreen object with a mouse, keyboard, or even by waving your hand in front of a webcam. We’ll also cover how to create some animation tricks, such as making a falling ball squish when it hits the floor, and making a character’s mouth move in synch with your own voice. Along the way, you’ll learn important computer science principles, such as if-then loops, iterative design, object-oriented programming, and debugging strategies.\n\nWhether you are looking for a gentle introduction to computer science, a first step towards learning about the profession of computer programming, or you just want to have fun making games, this video course is here to help you at every step of the way.\nAbout the Author\nDennis G. Jerz, who holds a Ph.D. from the University of Toronto, is a new media practitioner and digital humanities scholar. He has maintained “Jerz’s Literacy Weblog” since 1999. He is an associate professor in the Humanities Division at Seton Hill University, a small liberal arts school near Pittsburgh. He teaches courses in game studies, digital storytelling, new media, journalism, literature, and writing. His professional publications include a study of the Fortran source code for William Crowther’s original “Colossal Cave Adventure” (thought to be lost for 30 years) and a computer simulation of the York Corpus Christi Cycle (a 20-hour medieval religious pageant). He also edited The Inform Beginner’s Guide, a guide to the programming language Inform 6. He has published papers on the history of blogs, teaching with weblogs, and theatrical representations of technology in American literature.",
      "target_audience": [
        "Whether you are new to programming and want a gentle introduction to programming, an educator who is interested in teaching with Scratch 2.0, or someone who wants to make and share fun games and animations, this course is for you. This video tutorial provides you with careful, step-by-step instructions that will unlock the power of your imagination."
      ]
    },
    {
      "title": "Learn How To Code a Hack For ANY Game! - Game Hacking",
      "url": "https://www.udemy.com/course/playhack/",
      "bio": "Learn to create game hacks (PUBG, Free Fire, and others) programmatically, and by using reverse engineering programs",
      "objectives": [
        "game development"
      ],
      "course_content": {
        "hack with game guardian and lau language": [
          "Install tools",
          "Explain the basics of research",
          "Lau basics for game guardian",
          "Create a script template",
          "Searching for an unknown value such as (health/ammo) within the game",
          "Testing on Color fill 3d | UNLIMITED COINS",
          "Testing on sniper 3d | UNLIMITED COINS",
          "How to get lua code from any script"
        ],
        "Game reverse engineering with IDA Pro": [
          "Introducing the program and installing tools",
          "Make a simple crack for the first program"
        ],
        "Game reverse engineering with dnSpy": [
          "#1 Hack first Apk Game",
          "#2 Hack first Apk Game"
        ],
        "ESP Pubg mobile coding": [
          "Preview ESP hack",
          "Install and launch source code"
        ],
        "Helpful resources, references, and websites": [
          "The Ultimate Game Hacking Resource"
        ]
      },
      "requirements": [
        "no"
      ],
      "description": "Do you like hacking games? ?\nDo you want to know how hacker programs are created? ??\n..\nWe have specially designed a course for you at Udemy\nWhich provides you with everything you will need to learn to hack games ?\nThe good news is that a new series has been created to learn to build ESP for the game programmatically\nHacker features, which will be explained and detailed: ?\nPlayer ESP (2d box, 3d box, skeleton, ignore teammate, identify bot)\nItem / Lootbox ESP\nVehicle ESP\nGrenade Alert\nPlayer Health / Name / Distance / Line\nSimple Aimbot\nEnemy State\nEnemy Weapon\n\n\nCourse contents\nExplanation of Game Garden and script construction in Lao language.\nLearn to reverse engineer with powerful software like Idea Pro and DN Spy.\nAll sources and resources are completely free.",
      "target_audience": [
        "Beginner developer"
      ]
    },
    {
      "title": "Vehicles in Unreal Engine 4",
      "url": "https://www.udemy.com/course/vehicles-in-ue4/",
      "bio": "Learn to create wheeled vehicles in Unreal Engine 4",
      "objectives": [
        "Learn how to implement the PhysXVehicles plugin to power your wheeled vehicles"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "The Rough Product": [
          "Project and Classes",
          "Vehicle Mesh Sourcing",
          "DCC Setup Part 1",
          "DCC Setup Part 2",
          "Importing into Unreal",
          "Input Mappings and Bindings",
          "Anim Blueprints and Interactive Camera",
          "Engine Sounds",
          "Creating a test map",
          "The Automotive Materials Pack",
          "Adding a Rev Counter/speedo Part 1",
          "Adding a Rev Counter/speedo Part 2"
        ],
        "Vehicle Stats - Discussion and demonstration": [
          "Stat - Friction",
          "Stat - Suspension",
          "Stat - Engine",
          "Stat - Steering"
        ],
        "Tweaking and adding logic": [
          "(Artistic) Tweaking our stats",
          "Adding brake lights",
          "Enter/Exit Vehicle logic"
        ],
        "Using C++ to expand the possibilities": [
          "Creating our C++ Library",
          "Detecting Landing Impacts",
          "Detecting Contact Surface + Surface FX",
          "Detecting Skid + Skid Audio System"
        ],
        "Race Timers and Checkpoints": [
          "Building the visual element",
          "Adding the Timer Logic",
          "Adding Checkpoints"
        ],
        "Wrap up and conclusion": [
          "Summary"
        ]
      },
      "requirements": [
        "A basic understanding of Blueprints",
        "A vehicle 3D model you wish to use to follow along with",
        "In one section, we use C++ to expand whats available, so if you wish to follow that part, visual studios will be needed."
      ],
      "description": "In this series I will be guiding you though the PhysxVehicle plugin to power your vehicles. This will support vehicles like cars, trucks, vans, and even industrial and agricultural vehicles. Due to a limitation in the system, it will partially support motorbikes, but not fully.\nThis system can be achieved 90% through blueprints alone, and we utilise C++ to provide some totally optional extras at the end of the series.  No C++ is required to get the core product working and this series will focus on blueprint support.\n\n\nWe will be exploring:\nCorrectly orientating and rigging our vehicle without using any bones in a DCC tool\nCreating a vehicle blueprint\nMaking your vehicle fully drive-able, and giving you the knowledge to tweak it to achieve the desired handling.\nExpanding the blueprint system with some c++ extras\nExploring how to argument your vehicle with particles, sound effects, and lights",
      "target_audience": [
        "Unreal Engine developers looking to add vehicles into their game"
      ]
    },
    {
      "title": "Learn Advanced Scripting in Maya by Building Custom Tools",
      "url": "https://www.udemy.com/course/3dmotive-learn-advanced-scripting-in-maya-by-building-custom-tools/",
      "bio": "Build an FBX exporter in Maya while learning some advanced scripting techniques!",
      "objectives": [
        "Understand basic software design",
        "Learn and understand Export Nodes",
        "Understand UI Design",
        "Understand how to create custom procedures",
        "Learn to code and setup animation export settings"
      ],
      "course_content": {
        "Introduction to Basic Scripting Functions": [
          "Download Course Files Here!",
          "Introduction to the Course",
          "Defining the Problem",
          "Design Principals",
          "Low Level Procedures",
          "Tagging Meshes Procedure",
          "Find Objects Procedure",
          "Find Blendshapes Procedure",
          "Clear Garbage Procedure",
          "Export Node Procedures 01",
          "Export Node Procedures 02"
        ],
        "Animation and FBX Basics": [
          "Introduction",
          "Model Procedures",
          "Animation Procedures",
          "Copy and Connect Skeleton Procedure",
          "Transform to Origin Procedure",
          "Anim Layer Procedures",
          "Set Anim Layers From Settings Procedure",
          "Export Procedures",
          "Export FBX Animation Procedure",
          "Export FBX Character Procedure",
          "Errata and Conclusion"
        ],
        "Learning to build the UI and Menus": [
          "Introduction",
          "Creating the Main Window",
          "Creating Animation UI Elements",
          "Setting up Animation Form Layout",
          "Creating Model UI Elements",
          "Setting up Model Form Layout",
          "Pop-up Menus",
          "Populating the Root Joint Panel",
          "Populating Actor Panel",
          "Help Menus"
        ],
        "Improving the UI, Export Settings, and Popup Menus": [
          "Introduction",
          "Defining the UI Behavior",
          "Tag for Origin Button",
          "Populate Model Export Nodes Panel",
          "Populate Geometry Panel",
          "Update Model Export Settings",
          "Export Buttons",
          "Filename UI",
          "Popup Menus Select and Delete",
          "Popup Menus Rename",
          "Conclusion"
        ],
        "Building and Refining the Export Functions and Animation Features": [
          "Introduction",
          "Populate Export Nodes Panel",
          "Create New Export Nodes and Popup Windows",
          "Update UI Settings",
          "Export Node From UI",
          "Anim Layer Buttons",
          "Export Buttons and Popup Menus",
          "Debugging Animation Tab",
          "Debugging Model Tab and Course Wrapup",
          "Bonus Lecture: Further Learning with 3dmotive"
        ]
      },
      "requirements": [
        "Autodesk's Maya"
      ],
      "description": "In Advanced Scripting in Maya, we will use a real-world issue as a teaching case while developing automation and support an FBX exporter. In the first module for this course we will discuss some basic philosophies about software design before we start writing our code. We will then begin our script by starting on some basic lower level functions and ending with the creation of our FBX export nodes. From there we will continue our script by designing all the procedures needed to handle exporting of rigged characters, setting our animation export settings, and managing anim layers per animation.\nWe will also show how to set our FBX export settings and will end the second module with writing the actual calls to the FBX exporter using our animation. Next, we will design our main UI, so all our export code will be easier to use. We will build a tabbed window so we can switch between model and animation export, and include such options as pop-up menus when we right-click for power users. To wrap things up, we will add the functions needed to make our UI work, we will create procedures that will automatically populate the UI depending on what is selected, procedures to support our popup menus, and eventually calling our export code.\n(Students - please look under Section 1 / Lecture 1 downloads for the source files associated with the lesson.)\nMore about the Instructor:\nChad Morgan started his career at LucasArts where, as a newbie to the industry, was fortunate enough to work with some very talented mentors who taught him how to use Maya. Ever since then, Chad has been trying to pay it forward by sharing what he has learned, first by giving lectures at Autodesk Master Classes, then publishing an article in #d world Magazine, posting tutorials on YouTube, and finally teaming up with 3dmotive. Chad Morgan currently lives in Lake Forest, CA with his wife Carol and his son Xander.",
      "target_audience": [
        "Those looking to increase their scripting knowledge base within Maya and become a stronger asset to a tech art and tools development team."
      ]
    },
    {
      "title": "Turn Based Puzzle Game in Unreal With Blueprints & C++",
      "url": "https://www.udemy.com/course/make-a-turn-based-puzzle-game-in-unreal-with-blueprints-c/",
      "bio": "let's start make a Turn Based Puzzle Game like Hitman and Lara Croft Go inside Unreal With Blueprints & C++",
      "objectives": [
        "How to Make a turn based puzzle game",
        "How to code games in Unreal Engine 5",
        "Unreal Gameplay Frame Work",
        "Game Design Patterns",
        "How To Prototype with Blueprints Inside Unreal Engine",
        "Unreal Engine Ai behavior tree",
        "Best Practices' for converting a blueprint project to C++",
        "How To Convert a project with Blueprints to C++"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Welcome & Course Overview"
        ],
        "Setting Up The Project": [
          "Project Files",
          "Blueprint VS C++"
        ],
        "Unreal Gameplay Frame Work": [
          "1.Intro To Unreal Gameplay Framework",
          "2.Gameplay Frame Work Part1",
          "2.Gameplay Framework Part2",
          "Unreal Engine Gameplay Framework"
        ],
        "Game Programming Design Patterns": [
          "0.Intro To Design Patterns",
          "Singleton Design Pattern",
          "State design pattern",
          "Observer design pattern",
          "Component design pattern",
          "Command design pattern",
          "Flyweight design pattern",
          "Object pool design pattern",
          "Game Programming Design Patterns Slides"
        ],
        "Setup Player Movement and Create the Node": [
          "Player Movement Idea",
          "Create the Player Character & Controller",
          "Create the Animation Blueprint",
          "Create The Node Part1",
          "Create The Node Part2",
          "Player Movement Part1",
          "Player Movement Part2",
          "Player Movement Part3",
          "Player Movement Slide"
        ],
        "Create the pickups": [
          "Create The Pickups",
          "Throwable Stone"
        ],
        "Create The Player Abilities": [
          "Create The Fire Ability",
          "Teleport Ability",
          "Complete the player functions",
          "Throw Stone"
        ],
        "Create the Game Mode Functions & Widgets": [
          "Create the Widgets",
          "Create the Game Mode Functions",
          "Complete the Widgets"
        ],
        "Create Khaimera Enemy": [
          "Create The Base Enemy Class",
          "Create Khaimera Animation Blueprint",
          "Complete The Khaimera Blueprint",
          "Setting up the AI Logic",
          "Add Attack Collider"
        ],
        "Create the Turret": [
          "Create the Turret Blueprint"
        ]
      },
      "requirements": [
        "Understanding of the basics of Unreal Engine Blueprint",
        "Understanding of the basics C++ if you want to convert the prototype to C++ .. you can skip that part if you want just Blueprint"
      ],
      "description": "in this course we will create a turn based puzzle game like Lara Croft Go and Hitman Go . we will start by\n- Understanding the different usage of blueprints vs C++ and which one is best to use\n\n\n- Understanding Unreal Engine Gameplay Framework and how these foundation class can help and speed our gameplay programming . I will talk about the Actors , Pawn , Character , Player Controller , Game Mode\n\n\n-Understanding the game programming design patterns how these blueprint solutions can help our code and make it more extendable and reliable\nI will talk about  7 useful patterns that include Singleton , State , Observer , Component , Command , Flyweight , Object pool\n\n\n- I will talk how we can approach this game design with power point slide show\n\n\n- Create our player , Node , Enemies , AI , Game Mode , Widgets in blueprints and in the end you will have fun complete playable turn based puzzle game\n\n\n- if you like to code in C++ then it's time to Convert the project to C++ . What are the best practice's to do that  and my coding style .\n\n\nthe purpose of this game is to enhanced and develop unreal engine users how to understand the engine gameplay framework and how to solve your gameplay programming with these design patterns and learn to prototype first then convert to C++",
      "target_audience": [
        "Unreal Engine Game Developers",
        "Gameplay Programmers",
        "Game Designers"
      ]
    },
    {
      "title": "Learn To Create Mobile Games, Then Sell Them And Earn Money",
      "url": "https://www.udemy.com/course/learn-unity-by-creating-an-android-game/",
      "bio": "Learn How To Create Mobile Games For Android And iOS And Earn Money While You Do It",
      "objectives": [
        "Learn Unity Interface",
        "Learn Basic Scripting",
        "Learn Intermediate Scripting",
        "Sound design",
        "Use mecanim to animate menus and sprites",
        "Create menus and fade between scenes",
        "Implementing ads in games",
        "Create Your own games from scratch"
      ],
      "course_content": {
        "C# Basics": [
          "0 - Introduction",
          "What Is Expected From You",
          "Downloading Unity And Taking A Look At Its Interface",
          "How To Study This Course",
          "Introduction to variables",
          "Operations With Variables",
          "Functions",
          "Conditionals",
          "Loops",
          "Arrays",
          "Classes And Objects",
          "Coroutines and Delegates",
          "Getting Components",
          "Data Encapsulation"
        ],
        "Importing assets, organizing and preparing our project": [
          "Importing assets",
          "Slicing our sprites",
          "Animating the player",
          "Prefabs, colliders, and rigid bodies"
        ],
        "Beginning to create our game": [
          "Scripting player movement for keyboard",
          "Unity remote and Android sdk",
          "Controlling the player animation through code",
          "Screen and World coordinates",
          "Scripting player movement for mobile devices",
          "Scripting the camera movement",
          "Preparing the background",
          "Scripting BGCollector",
          "Scripting BGSpawner",
          "Setting up cloud colliders",
          "Scripting Cloud spawner 1",
          "Scripting Cloud spawner 2",
          "Scripting Cloud spawner 3",
          "Scripting Cloud spawner 4"
        ],
        "Gameplay Logic": [
          "How to test games on devices",
          "Black cloud script",
          "Preparing collectables",
          "Score system",
          "Creating UI for life, coins and score",
          "Displaying score, coins, and lifes with GUIText",
          "Player boundaries",
          "Spawning collectables in game",
          "Scaling camera and background"
        ],
        "A Deeper Look Into New Unity UI": [
          "Note About UI",
          "New UI Intro",
          "Common UI Elements"
        ],
        "Creating Menus": [
          "Preparing Main Menu",
          "Scripting main menu buttons",
          "Navigating between scenes",
          "Scripting options menu",
          "Creating menus with OnGUI",
          "Creating menus with new UI",
          "Animating new UI menus"
        ],
        "Working with player preferences": [
          "Introducing player preferences",
          "Setting up default values for our game preferences",
          "Background music setup",
          "Checking if the music is on or off",
          "MusicOn and MusicOff buttons",
          "Setting the difficulty",
          "Setting up highscore menu"
        ],
        "Finishing gameplay logic": [
          "Setting the speed based on difficulty",
          "Is the game started from main menu or is it restarted after player died",
          "If the player dies",
          "Time scale",
          "Fading our scene",
          "Creating our pause menu",
          "Preview the score after player dies"
        ],
        "Adding ads in our game": [
          "Before we add ads",
          "Implementing ads",
          "Implementing ads in our game"
        ],
        "Publishing our game": [
          "Creating a Keystore for publishing our app on Google Play",
          "Summary"
        ]
      },
      "requirements": [
        "Free Unity3D software"
      ],
      "description": "****** Updated For Unity 5 ******\nOver 3800 Enrolled Students Are Learning To Make Games And Earn Money\nI present to you a course that is project based, and in this course I will cover all the topics that you need to know how to make your own games.\nI'm self taught at programming so I know what problems you are facing and how to overcome them, so I designed this course in that way so that it will help you learn how to make games and earn some cash while you are at it :)\nWe will start with simple things so you will be comfortable if you are using unity for the first time, however I do expect from you that you know the basics of OOP(Object Oriented Programming), you don't have to be an expert programmer but you should have written a couple of simple programs and understand what are classes, objects, constructors, methods, variables, inheritance and other stuff connect to OOP.\nYou will also benefit from my super fast response if you have any issue that you are stuck with(I check Udemy forums every day if someone posts a question). Oh and all the students taking the course will also be there to help you!\nAll project files will be included and you are free to use them for anything that you like, personal or commercial use!\nThis Course is not here to teach you all of the features of Unity, but it will teach you enough so that you will be comfortable to use Unity on your own to create games, and you will be comfortable to look anything up if you feel like the subject is not familiar. Oh and I also have other courses that cover Unity game development so you can check them out and improve your Unity and game development knowledge even further.\nIf you are a beginner then start your game development journey with me, if you already created games you are also welcome to join and learn new techniques that will help you in your further game development career.\nWhat You will learn\nUnity Interface\nBasic C# Programming\nIntermediate C# Programming\nAdvanced C# Programming\nImporting And Organizing Assets\nSlicing Sprites\nAnimating Sprites\nLearn How To Use Unitys New UI System\nCreating Menus\nCreating Cool Animations\nUnderstand And Use Unitys Physics System\nSaving Game Data Using Player Preferences\nPlay Music In Your Game\nImplement Interstitial Ads\nLearn How To Support Multiple Screen Resolutions\nLearn How To Submit Your Game On Google Play Store\nThat And Much More Is Awaiting For You In This Course\nIf You ever had an idea for an awesome game, then enroll in this course and learn the tools that you need to develop Your next hit game!!!\nEnroll Now!! You Will Not Be Disappointed!!",
      "target_audience": [
        "No prior programming experience is needed for this course, however, You will need to understand OOP(Object Oriented Programming) concepts before this course, other than that if You are a beginner or intermediate unity developer feel free to join.",
        "Complete Beginners",
        "Experienced Developers"
      ]
    },
    {
      "title": "UNITY: Develop 3D hyper-casual mobile games with C#",
      "url": "https://www.udemy.com/course/develop-3d-hyper-casual-mobile-games-with-unity-and-c-sharp-tutorial/",
      "bio": "The ultimate 2024 course to learn how to create amazing 3D Hyper Casual mobile games with Unity and C# from A to Z !",
      "objectives": [
        "Develop mobile games with Unity",
        "Create Hyper Casual Games (with good practices)",
        "Use Unity to create a smartphone game",
        "Optimize the project and increase its chances of being published",
        "Add the few details that will make your game a better game",
        "Learn Unity to make mobile games"
      ],
      "course_content": {
        "Introduction to Unity": [
          "About this first section on Unity",
          "Download and install Unity",
          "A new version of Unity HUB with exclusive features",
          "Discover Unity's interface",
          "Software menus and features (part 1/2)",
          "Software menus and features (part 2/2)",
          "Find 3D models online and use them in Unity"
        ],
        "Introduction to C# scripting (programming basics)": [
          "About this section on C# programming in Unity",
          "What is C# programming language? How does it works in Unity?",
          "Variables in C#",
          "Conditions in C# (if/else)",
          "Loops in C# (for/while)",
          "Use arrays with C#",
          "Write functions in C#",
          "Use parameters (variables) in your functions with C#",
          "How inputs (mouse & keyboard) work in Unity with C#",
          "If you want to go further with C#",
          "Coding exercice",
          "A video conference meeting to talk about C#"
        ],
        "How to use Unity for 2D projects?": [
          "Example of a 2D project with Unity"
        ],
        "Create a reusable HyperCasual game template to go faster!": [
          "Creation of a 3D mobile game project to prepare our HyperCasual template",
          "Create a mobile-optimized SkyBox and implement a HyperCasual style",
          "Setup simple shapes to prepare a 3D mini game",
          "Create a canvas for the user interface (UI)",
          "How to organize the UI (user interface) for a hyper casual game?",
          "Working with Unity's Canvas and Anchor System",
          "Color changes with a mobile-friendly cartoon shader",
          "A simple movement script for the character",
          "The script of obstacles and the player's enemies",
          "Spawn function to generate infinite obstacles",
          "Make the prototype Snackable/Juicy with visual effects",
          "Restart the game when you lose (after the 3 second timer)",
          "Compilation and test of the game on mobile to validate our template"
        ],
        "Create a Hyper Casual 3D game: Complete project": [
          "Creation of our Unity hypercasual 3D game project",
          "Preparing the character movement script",
          "Continuation of the motion C# script via touchscreen",
          "Character jump function",
          "3D character animation as it moves",
          "C# script to make the camera follow the character in the level",
          "Improved character script",
          "Level Preparation / 3D Environment",
          "Improvement of our 3D world",
          "Creation of an in-game tutorial + Intermediate test of the project on Android",
          "Understand what a low poly model is and create one in Blender",
          "Setting up a timer",
          "Get additional time if you watch an ad (rewarded video)",
          "Video game main menu",
          "Skin selector screen to be able to customize your character",
          "Configuring Level Interactive Objects",
          "Detection of collisions with objects",
          "Calculation of the player's score during the game",
          "High score management",
          "Earn gold coins during the game to be able to buy items in the store",
          "Design of the store (shop) for the purchase of virtual items in the game",
          "Game Monetization / Business Model",
          "Reward player daily and unlock rare skins/items",
          "Setting up a success/achievements screen",
          "Preparation of a character controlled by the computer (AI)",
          "Artificial Intelligence C# code (autonomous movement)",
          "Improved computer-controlled AI character + some ideas",
          "Display of players' scores at the end of the game",
          "Player progression and levels unlocking",
          "Use Unity Ads to display ads and monetize a mobile game",
          "Install Game Analytics to collect and analyze data",
          "Create media (Images / Videos) of your game to promote it",
          "Create a press kit to present your game to the press or a publisher",
          "Submit a game project to a mobile game publisher and get it published",
          "Using a template from the assets store",
          "Publish an APK on Google Play Store using the Google Play Developer console",
          "Download the complete final Unity project and all game sources"
        ],
        "Casual 3D Mini Golf Project": [
          "[IMPORTANT] About this section",
          "Presentation of the project that we are going to create",
          "About the 3D models of the project",
          "3D modeling of a level + import in Unity",
          "3D modeling of a decorative object with Blender",
          "Preparation of the first level of the game",
          "Adding a trail renderer and skybox",
          "Animation of 3D models",
          "Setting up the camera",
          "Ball shot code",
          "Improved golf ball shot code",
          "Object collision detection",
          "Sound effects",
          "Complete a level and move on to the next",
          "Creation of a main menu",
          "Creating a cutscene at the start of the game",
          "Pausing the game",
          "Creation of the other levels of the game",
          "Creating a level selector",
          "Give player feedback",
          "Creating a parameter to set the volume",
          "Zoom in on the ball when it nears the end of the level",
          "Creation of bonus items to collect",
          "Compiling the project and testing on Android"
        ],
        "The end": [
          "Additional content"
        ]
      },
      "requirements": [
        "No previous knowledge is required to take this course",
        "You need a computer and Internet",
        "You want to create your mobile games",
        "Your goal is to become an independent game developer and make a living from your passion?"
      ],
      "description": "Welcome to this ultra-complete guide that will allow you to learn how to create (Hyper) Casual mobile games and acquire good practices. If you want to learn how to create video games for smartphones, optimize your projects, learn best practices and make a living from your passion, this course is for you.\nIn this tutorial you will learn all the steps of mobile game development from A to Z through a concrete project.\nIt's a comprehensive training that will allow you to learn how to develop video games with Unity and the C# language. We'll put our knowledge into practice by developing a HyperCasual game.\n\n\nYou'll learn how to optimize your projects to:\nCreate many game mechanics\nImprove your retention\nMaximize your income\nChoose the right graphics\nOptimize your game for mobile\nHave an easily exploitable Unity project for a publisher\nDevelop a project from A to Z with all the essential features in a Hyper Casual game\n\n\nThis is an exceptional and very rich course because it covers what the others don't.\nNot only will you have all the knowledge you need to create your mobile games with Unity, but you'll also have all the knowledge you need to maximize your chances of success with your projects.\nYou will learn how to build a project from start to finish. We are going to develop a game together. We are going to learn how to monetize it. We will see how to manage the marketing part, how to create a press kit, how to contact a publisher and finally how to publish a game online.\n\nWhat's more, you'll obtain your certificate of achievement on mobile game development with Unity and C# at the end of this tutorial.\nYou will be by my side as if you were on my development team and in meetings with the publisher. This will give you the confidence and peace of mind you need to get started as an independent game developer.\n\n\nI therefore invite you to join this course if you finally want to get started and make a living from your passion: video game development!",
      "target_audience": [
        "People in retraining who want to move towards mobile video game creation",
        "Unity developers who want to learn how to create Hyper Casual/Mobile games",
        "Developers who want to move towards Hyper Casual",
        "Anyone interested in the world of video game development"
      ]
    },
    {
      "title": "How to Make Games with Unity: A Beginner's Guide",
      "url": "https://www.udemy.com/course/how-to-make-games-with-unity-a-beginners-guide/",
      "bio": "Learn to make a slots game in Unity using retro Nintendo graphics and sound.",
      "objectives": [
        "Make a slots game in Unity.",
        "Navigate the Unity UI.",
        "Learn to use sprites, animations, sounds and more."
      ],
      "course_content": {
        "Intro and Unity UI Overview": [
          "Introduction",
          "Unity UI Overview"
        ],
        "Making Mario Slots": [
          "Importing and Preparing Assets",
          "Scripts, Variables and Models",
          "Singletons and Starting Machine Code",
          "Destroying and Spawning Objects Part 1",
          "Destroying and Spawning Objects Part 2",
          "Setting Up a Slot Face - Textures",
          "Accessing Scripts on a GameObject",
          "Filling Slots and Setting Positions",
          "Configuring a Second Face - Luigi",
          "Working with Sprites - Star",
          "Animations",
          "Sending Messages to Objects and their Children",
          "Moving Slots and Debugging",
          "Slot Face Positioning",
          "Stopping Slot Spins with Coroutine Timers",
          "Slot Alignment",
          "Slowing Down Slots Gradually",
          "Finding Matches Part 1",
          "Finding Matches Part 2",
          "Finding Matches Part 3",
          "Slot Start/Stop Spin Messaging",
          "Reward System Part 1",
          "Reward System Part 2",
          "Calculating Multipliers",
          "Processing Rewards with Case Switch",
          "Outputting Rewards to the Player",
          "Getting Started with UI",
          "UI - Text Updates and Timers",
          "Slot Machine Decorations",
          "UI - Coins Available and Multiple Message Timers",
          "UI - Spin Button",
          "Game Over and Changing Scenes",
          "Game Over Scene",
          "Animating Bowser and Restarting the Game",
          "Start Menu and Play Button",
          "Start Menu Particle System",
          "Cheer Particles",
          "Fixing Rendering Layers",
          "Star Particles Part 1",
          "Star Particles Part 2",
          "Fixing Some Bugs"
        ],
        "Adding Sounds": [
          "Sounds! Start Menu",
          "Sounds! Main Game",
          "Sounds! Triggering Sounds with Colliders",
          "Finishing Up Sounds and Adding Remaining Rewards"
        ],
        "Finishing Up": [
          "Finishing Up UI and Exporting the Game"
        ]
      },
      "requirements": [
        "You do not need any previous knowledge of Unity or programming to take this course."
      ],
      "description": "Presenting the latest course by Nathan Cope, one of Udemy's top instructors:  How to Build Games in Unity. Nathan's other course on building PC's sports a 5-star rating with thousands of satisfied students.\nOver 1500 students signed up in the first 24 hours of course release!\n________________________________________\n\nHave you ever wanted to make your own game?\nThis course is for you. Unity has become one of the top platforms for game development, especially for newcomers to the industry. It is simple and powerful at the same time and very successful high-profile games have been created with it! Ever hear of Hearthstone? ;)\nThis course will begin with an introduction into the Unity UI. In order to keep the course exciting, there is no \"C# Primer\" for new programmers. Instead, Nathan will teach you about basic programming concepts along the way as he uses them to create the game code!\nNathan will take extra care in explaining different programming concepts in different ways in order to get those concepts to 'stick'. Being one of the top instructors on Udemy, he understands that students need to see a problem being solved in a number of ways, as not everyone learns the same way.\nYou will learn things like creating game objects, configuring prefabs, coroutines, timers, animation, UI, sounds and so much more. Nathan responds to questions very quickly, so if you have any trouble along the way, please send him a message!\nStudent Appreciation!\n\nAs a student, you will receive special discounts unavailable elsewhere for Nathan's other courses that are available now or are currently in the works!\nAnd as always, 30-day refunds are 100% guaranteed if your satisfaction is not met!\nThank you! Thank you for taking a look at this course on Udemy!",
      "target_audience": [
        "Anyone who wants to make games with Unity."
      ]
    },
    {
      "title": "Intro to Animated Materials with Substance Designer",
      "url": "https://www.udemy.com/course/intro-to-animated-materials-with-substance-designer/",
      "bio": "A tour through some of the basic nodes and functions used in animating Substance materials",
      "objectives": [
        "You'll be able to create your own animated Substance Designer materials."
      ],
      "course_content": {
        "Introduction": [
          "INTRODUCTION",
          "GETTING ACQUAINTED WITH THE PIXEL PROCESSOR",
          "CARTESIAN FUNCTION & ROTATE POSITION",
          "COMPLETING THE PIXEL PROCESSOR FUNCTIONS",
          "DYNAMIC FUNCTIONS & THE SUBSTANCE NOISE LIBRARY",
          "THE SPLATTER NODE",
          "ADJUSTING THE MATERIAL",
          "THE FX MAP",
          "FINALIZING THE MATERIAL"
        ]
      },
      "requirements": [
        "A beginner's understanding of Substance Designer",
        "Substance Designer, Substance Player"
      ],
      "description": "This course is designed as an introduction to some of the most common Nodes and Dynamic Functions used in animating Substance materials. We'll build an Animation Test material that will incorporate these nodes and functions to see how we can get them to work together to create almost unlimited animation possibilities.\nOne at a time, we'll examine the Pixel Processor, Splatter, Transform 2D and FX Map nodes, noting their strengths and weaknesses in material animation. As we do this, and begin to connect them, we'll also take a look at several other Nodes and techniques we can use to create even more functionality in our material. We'll also take a look at how we can use Dynamic Functions to animate noises in the Substance Library as well as the colors of our material.",
      "target_audience": [
        "Anyone who wants to create animated Substance Materials"
      ]
    },
    {
      "title": "The Complete Agentic AI and ChatGPT for Beginners",
      "url": "https://www.udemy.com/course/the-complete-agentic-ai-and-chatgpt-for-beginners/",
      "bio": "Learn Complete Agentic AI course beginners from scratch and Learn Agentic AI with real world applications!",
      "objectives": [
        "You will learn the Agentic AI in this course",
        "You will learn ChatGPT in this course",
        "You will have real world project that can give the real time knowledge",
        "You will be more proficient in Agentic AI"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Multicollinearity Algorithm in Agentic AI",
          "Agentic AI Project Lifecycle-GENAI",
          "Power Law Distrubition in Agentic AI",
          "Features of Generative AI"
        ]
      },
      "requirements": [
        "No experience is needed - You will learn from very basics"
      ],
      "description": "You will learn Agentic AI in this course with real world examples. The Agentic AI course offers an in-depth exploration into the emerging frontier of artificial intelligence where AI systems are not just tools, but autonomous agents capable of proactive decision-making, long-term planning, and goal-oriented behavior. This course bridges the gap between traditional machine learning models and the new wave of AI agents that operate with autonomy, adaptability, and context awareness.\nThis course begins with foundational concepts, clarifying the distinction between reactive systems and agentic systems. You will be  introduced to the core principles of agentic AI—perception, reasoning, decision-making, memory, and interaction. Through engaging examples and case studies, students gain an understanding of how modern AI agents simulate goal-directed behavior by combining large language models (LLMs) with planning algorithms, tools, and memory systems.\nBy the end of the course, You will have a strong conceptual and practical understanding of agentic AI. They will be capable of designing and deploying autonomous agents for real-world applications across industries such as customer service, content creation, productivity, finance, and more. Whether you're a developer seeking to harness the power of autonomous systems or a researcher curious about the next step in AI evolution, this course pro",
      "target_audience": [
        "This course is for anyone who wants to learn Agentic AI and ChatGPT Programming."
      ]
    },
    {
      "title": "Minecraft: Creating and Developing a Server",
      "url": "https://www.udemy.com/course/minecraftserverdevelopment/",
      "bio": "The full Minecraft backend experience! Developing and creating.",
      "objectives": [
        "Complete understanding of how to install, explore, operate, and setup Minecraft Plugins onto their server.",
        "Highly established understanding of the well known Spigot API to program Minecraft Plugins onto your server.",
        "Lessons on how to monetize these skills into the Minecraft Community and build reputation and experience.",
        "A thorough understanding of the good coding practices, debug, test, and self-teach."
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Setting Up": [
          "Starting a Local Server",
          "Start a Local Server - Common Problems",
          "Server Files Explained",
          "Setting Up Intellij"
        ],
        "Minecraft Server Core": [
          "Ranks",
          "Permissions",
          "WorldEdit",
          "Essentials",
          "Vault",
          "PlaceholderAPI",
          "QuickBoard (Scoreboard)",
          "TAB (Tablist)",
          "Message Of The Day (MOTD Editor)",
          "WorldGuard",
          "Removing PowerRanks",
          "Multiverse Core"
        ],
        "Minecraft Server Games": [
          "Factions",
          "Skywars"
        ],
        "Java Basics": [
          "Variables",
          "Math",
          "Methods",
          "API",
          "Visibility Types",
          "Common Variables"
        ],
        "Plugin Development (Level 1)": [
          "Plugin Setup",
          "Simple Command",
          "Simple Listener",
          "Permissions",
          "Plugin Instance & Constructors",
          "Command Arguments (2019)",
          "Command Arguments - Part #1",
          "Command Arguments - Part #2",
          "Advanced Command Arguments",
          "Configuration - Creating, Reading, Using",
          "Configuration - Setting, Storing, Reloading",
          "Spigot Javadocs",
          "CHECKPOINT: Lobby Command"
        ],
        "Plugin Development (Level 2)": [
          "Intellij Theme (Optional)",
          "Utility Classes",
          "Items & Item Meta's",
          "Entities",
          "Armor Stands",
          "Runnables",
          "Signs",
          "Block Editing",
          "Particles",
          "Auto-Tab Completion"
        ]
      },
      "requirements": [
        "Operating System (..course is taught in Windows, all processes follow very similar instructions)",
        "Capability to host a Minecraft Server, through an online source or locally on your device."
      ],
      "description": "**UPDATED FOR 2023**\nA freshly updated course detailing how you can you start your journey down Minecraft development. The development community is absolutely massive and growing daily! With that, the amount of plugins and competition comes with it. Minecraft is one of the best sources to learn coding and applying it to real monetizable work. With it's kid like simplicity of a game, combined with an advanced and deep backend, it's the perfect starter package.\nWhat can I expect from this course?\n\nLearn how to configure already existing and free Minecraft plugins.\nUnderstanding how to read plugin documentation.\nThinking like a developer to understand the process behind it.\nFinding what you need and comparing alternatives.\n\nProgram and test your own made Minecraft plugins.\nSetup an integrated development environment (IDE) and configure it towards Minecraft.\nCreate efficient coding patterns and well written, reliable code.\nBecome self-sufficient by testing, debugging, solving problems, and managing workload on your own.\n\nGain applicable programming experience and generating revenue.\nBuilding a portfolio, establishing a reputation and building on it, finding clients.\nManaging time, understanding your limits, and avoiding scams.\nUse your knowledge to follow detailed instructions and make a plan.\nLessons in this course contain old and new content, both of which should be helpful. Newer lectures include more detailed instructions, a different learning model, and better knowledge. For more information feel free to watch the introduction video. Thank you for reading!",
      "target_audience": [
        "Minecraft server owners looking to improve their server or add new features.",
        "Developers (java or minecraft) who are looking to further educate their understanding of the game",
        "Minecraft players who are looking to start their own server",
        "Minecraft players who have fairly well established servers, but are missing some features they want to implement themselves."
      ]
    },
    {
      "title": "Level Up Your Mobile Game with Unity Multiplayer [ Netcode ]",
      "url": "https://www.udemy.com/course/unity-mobile-netcode/",
      "bio": "Make your very own Unity Multiplayer Mobile Game in less than 4 Hours ! You'll make a LAN & Online Multiplayer version !",
      "objectives": [
        "Setup Unity's Netcode Solution for GameObjects",
        "Create a LAN Game, to Play with Family & Friends",
        "Use Unity Relay Service to Connect Players across the Globe",
        "Create a simple 2D Game from Scratch"
      ],
      "course_content": {
        "First Game": [
          "The Player Controller",
          "Adding the Egg",
          "The Egg Script",
          "The Walls & the Scene",
          "The Network Manager",
          "Synchronizing Position on the Network",
          "We Start the UI !",
          "The UI Manager & First Test !",
          "Client Authoritative Movement",
          "Colorizing the Client",
          "The Game Manager",
          "Updating our UI Manager",
          "The Egg Manager",
          "Selecting the Active Player",
          "Fixing the Player Selector",
          "Improving the Player Selector",
          "Track the Egg States",
          "The Score Manager",
          "Improving the Score Manager",
          "Recycling the Egg",
          "Win & Lose Panels",
          "Creating the Win & Lose Logic",
          "Connecting via IP ( Creating a LAN Game)",
          "Connecting via Unity Relay Service",
          "Connecting using Lobby 1/2",
          "Connecting using Lobby 2/2",
          "Environement Improvements",
          "Improving the Player Visuals",
          "Player Animations",
          "Player Animations Logic",
          "Bumping the Egg",
          "Adding Sounds"
        ],
        "Bonus Section": [
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "Be familiar with the Unity Game Engine",
        "Have some basic C# knowledge"
      ],
      "description": "Take your mobile game dev skills to the next level with this comprehensive course on Unity Mobile Multiplayer using Netcode for GameObjects!\n\n\nDesigned for both amateurs and experienced developers, this course will teach you how to create exciting and engaging multiplayer mobile games in Unity.\n\n\nYou'll learn everything you need to know to start building and optimizing multiplayer games for mobile devices, including:\n\n\nSyncing player movements and actions\nManaging network latency\nManaging the game logic through the Network\nImplementing game physics\nDebugging your Game\n\n\nThis is only a small overview of what you'll learn, there is so much more in the course!\n\n\nBy the end of the course, you'll have the skills and knowledge to create your own multiplayer mobile games and take your mobile game dev career to new heights.\n\n\nWhether you're a beginner or an experienced game developer, this course will give you the skills and knowledge you need to design and develop your own multiplayer game in Unity.\n\n\nSo if you want to impress your friends, have a good time making your own game, self publish your game and make money, publish the next Hit game with a big publisher, or just add a bunch of information to your brain's knowledge database, this course is for you!\n\n\nEnroll now and start unleashing the full potential of Unity Mobile Multiplayer!",
      "target_audience": [
        "Aspiring devs who want to make their first Online Multiplayer Game",
        "Amateur game devs who want to Increase their knowledge"
      ]
    },
    {
      "title": "Developing an Interactive Menu in Unreal Engine 5",
      "url": "https://www.udemy.com/course/developing-an-interactive-menu-in-unreal-engine-5/",
      "bio": "Master the art of polishing games in Unreal Engine 5 by recreating an interactive Menu in the style of Genshin Impact",
      "objectives": [
        "Learn Blueprints",
        "Learn Niagara and VFX",
        "Learn to make UI Art",
        "Learn to create games in Unreal Engine 5"
      ],
      "course_content": {
        "Project Setup": [
          "Breakdown of the example",
          "Creating the project and adding the character",
          "Setting up the input",
          "Create needed framework and character classes",
          "Menu location teleport and menu character camera"
        ],
        "Classic UI": [
          "Creation of Menu Widget and show it to the player",
          "Add mouse interaction to the menu",
          "Using modularity to our advantage to develop better interfaces"
        ],
        "Spacial UI": [
          "Orb blueprint creation",
          "Using Polar Coordinates to generate the orbs around the character",
          "Attaching orbs to an actor to control their movement",
          "Clicking the orbs and sending information through event dispatchers",
          "Rotating the orbs to the selected one",
          "Idle Orb rotation",
          "Orb rotation state",
          "Creating the orb container class",
          "Orb selection working properly",
          "Creating the sub menu, and opening it through the orbs"
        ],
        "Orb Animation": [
          "Making the orb go up and down",
          "Changing camera settings with each menu option",
          "Orbs should be hidden when I choose another option",
          "Character animations change when we select different options"
        ],
        "Background & Orbs VFX": [
          "VFX Intro",
          "Making the Cloud texture and mesh",
          "Making the Background Material",
          "Making the Colored Cloud",
          "Making the Mesh UVs",
          "Making the Front Cloud Material",
          "Fixes & Making the Star Texture",
          "Star Material & Emitter",
          "Last touches on the background",
          "Making the Ring Texture and Material",
          "Ring noise and Material",
          "Implemeting Glow to the niagara system",
          "Ring spawn Texture & material",
          "Making the Flare Texture",
          "Flare Emitter",
          "Making the Flare stars"
        ],
        "Styling the Widgets": [
          "Analizing our reference for Styling the Buttons",
          "Blocking out our Button",
          "Creating the Button Masks",
          "Animating the arrow",
          "Changing the Text Style",
          "Button Opacity tweaks",
          "Creating the Portrait Textures",
          "Creating the Avatar Material",
          "Creating the Avatar Button",
          "Creating the Avatar Hover Texture",
          "Adding the Hover Button State for Avatars",
          "Changing the Font for Character Menu",
          "Creating the Exit Button Texture",
          "Creating the Exit Button Widget",
          "Adding the Shadow to the Exit Button",
          "Switch Button creation",
          "Creating the Menu Symbol Texture",
          "Menu Symbol Widget",
          "Creating the Extra Menu Button",
          "Extra Menu Widget",
          "Creating the Item Button Texture mask",
          "Testing the First version of the Item color",
          "Painting Icons with fundamentals",
          "Refining the icon values",
          "Coloring our Icon",
          "Importing our UI texture",
          "Creating the Item Widget",
          "Fixing our Widget size",
          "Adding Text to the Item",
          "Using Grid Canvas to organize elements",
          "Polishing the Avatar Background Texture",
          "Creating the avatar image for items",
          "Creating the Star Texture",
          "Changing the Item Widget size",
          "Importing High resolution Item Texture",
          "Adding our Widget to the Orb Blueprint",
          "Fixing the Orb Icon Rotation"
        ],
        "Polishing": [
          "Start the polish pass",
          "Removing the orbs debug number",
          "Adding the Anime Girl Character",
          "Fixing the lightning for the menu",
          "Added return to main menu button logic and fixed menu bug",
          "Added menu states for a smoother experience",
          "Polishing the camera after returning from the menu"
        ]
      },
      "requirements": [
        "A basic understanding on Unreal Engine 5 is required."
      ],
      "description": "Made by UNF Games, the first course taught by 3 veterans in the game industry is now available in Udemy.\nIn this course you will learn how to create a complete Game Feature in Unreal Engine 5 using the Style of Genshin Impact.\nThis course is not about showing you one part of game development, is about showing you the complete picture.\nYou will learn Blueprints, Niagara, Materials, UI and how to make them work together to create an entire Game Feature.\nUI is one of the most least overlooked topics on Game Development and almost all games have one. To make a great UI is all about User Experience and that can make the difference between someone liking or disliking your game.\n\n\nLearn Blueprints:\nYou will learn the best practices used by professionals in Game Dvevelopment to create Widgets and organize them to create any kind of UI. Not only that but you will learn Blueprint Communication and connect your Gameplay with the UI creating a great User Experience.\nLearn Niagara and VFX:\nYou will learn how to decorate your Menu using Niagara and learn Materials to create magical effects. Niagara is one of the most important features in Unreal Engine and learning it can give you a huge advantage to make your games stand out from the croud.\nLearn to make UI Art:\nYou will learn how to decorate your widgets using Photoshop to create nice and stylish themes for your UI and enhance the User Experience.",
      "target_audience": [
        "Beginner Game Developers who want to create games in Unreal Engine 5"
      ]
    },
    {
      "title": "Simple Inventory System - Unreal Engine 5 Multiplayer (2024)",
      "url": "https://www.udemy.com/course/ue5-multiplayer-inventory/",
      "bio": "Make a simple inventory system from scratch with Unreal Engine 5 Multiplayer. Make games without coding.",
      "objectives": [
        "Learn how to design and program an RPG inventory system for multiplayer games.",
        "You'll learn how to easily create inventory categories to sort the items in your inventory.",
        "Learn how to create items you can loot and drop from the inventory.",
        "You'll learn how to move items around in your inventory."
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Downloading the Project",
          "Unreal Engine 5 Overview",
          "What the Project Already Contains"
        ],
        "Designing the UI": [
          "Introduction to Widget Blueprints",
          "Designing the Main UI",
          "Designing the Inventory Category Buttons",
          "Designing the Inventory Slots",
          "Designing the Inventory"
        ],
        "Programming the UI": [
          "Displaying the Main UI",
          "What is Event Replication?",
          "Binding Key to Open Inventory",
          "Introduction to Enumeration",
          "Creating the Open and Close Widget Event",
          "Introduction to Blueprint Communication",
          "Blueprint Interfaces",
          "Displaying the Inventory"
        ],
        "Lootable Items": [
          "Creating the Base Item Blueprint",
          "Introduction to Child Blueprints",
          "Creating the Items",
          "Introduction to Structures",
          "Item Info Structure",
          "Introduction to Data Tables",
          "Item Info Data Table",
          "Item Info Library Function"
        ],
        "Programming the Inventory": [
          "Creating the Inventory Component",
          "Inventory Slot Structure",
          "Inventory Category Structure & Data Table",
          "Creating the Inventory Variables",
          "Resizing the Inventory Category Variables",
          "Displaying the Inventory Categories",
          "Displaying the Inventory Slots",
          "Set Selected Inventory Category",
          "Re-adding Existing Items to Array",
          "Displaying Item in Inventory"
        ],
        "Looting Items to Inventory": [
          "Interacting With the Items",
          "Initial Add to Inventory Logic",
          "Adding Item to Inventory",
          "Creating a New Item Stack",
          "Finding a Partial Stack",
          "Optimizing the Inventory"
        ],
        "Dropping Items from Inventory": [
          "Adding Drag and Drop Operation",
          "Dropping Item From Inventory",
          "Enabling Weapon Physics"
        ],
        "Moving Inventory Items": [
          "Getting Slot Information",
          "Update Slot Information",
          "Dropping Item on Inventory Slot",
          "Updating the Inventory Slots",
          "Adding Sound Effects",
          "Testing Out the Final Product"
        ]
      },
      "requirements": [
        "No requirements. Everyone can take this course."
      ],
      "description": "Simple inventory system with multiplayer.\nMake a simple inventory system from start to finish in Unreal Engine 5 multiplayer. The inventory made in this course is a multiplayer RPG inventory system similar to Zelda, Maplestory, and Minecraft. We will do that without writing a single line of code thanks to Unreal Engine Blueprint.\nThis Unreal Engine course requires no previous game development experience. I will guide you through the process step-by-step. Creating an inventory system is crucial in almost every game. It is crucial to know how to set up an easy inventory system as an Unreal Engine developer, as it is a common feature in almost every game.\nWhether you are a beginner or an experienced Unreal Engine developer, this course is for everyone who wants to learn how to make a simple inventory system in Unreal Engine 5.\nGet started on your simple inventory system today, and let's not waste any time!\nWhat makes me qualified to teach you?\nI am an experienced game developer with nine years of experience. To summarize my work without boring you:\nI have released a Steam game I directed from start to finish with a team of 8.\nI have created 11 game development courses with 40,000+ students and an average rating of 4.8+ out of 5 stars.\nI am currently solo-developing Farmtale 2 from start to finish.\nI also work as a freelancer on various game projects, specializing in programming, lighting, game optimization, and more.\nI am deeply passionate about game development and have made it my full-time job. I would love to teach you everything about Unreal Engine 5 with good game development practices and keep you updated with the latest information.\nIf you want to learn how to publish a game on Steam, check out the course I have released on the topic.\nMake games without coding.\nUnreal Engine Blueprint is the powerful Unreal Engine scripting language used in Unreal Engine 5. It allows you to make games without coding. This means that even if you are a beginner, artist, or designer without programming experience, you can easily create your own online game.\nUnreal Engine Blueprint is just as powerful as any programming language. If you become proficient in Unreal Engine Blueprint, you won't need to learn any other language to develop your game.\nThis course doesn't require any programming or Unreal Engine experience. We will start with the basics of Unreal Engine Blueprint and gradually move on to developing more complex game mechanics. Doing so will teach you how to develop games from start to finish.\nYou can start this Unreal Engine course as a beginner and learn step-by-step how to create a simple inventory system from scratch.\nUnreal Engine 5 multiplayer.\nGetting into online game development in Unreal Engine 5 is very easy. It is similar to the single-player Unreal Engine Blueprint but with an extra step added. When you learn how to make an inventory system, you'll also learn about Unreal Engine 5 multiplayer. Prior experience is optional, as I will guide you through the basics and advanced concepts of Unreal Engine networking.\nMake inventory in games like a pro.\nIn this course, you'll learn everything about making an inventory system in Unreal Engine 5. The inventory is done in multiplayer. It's easy to make mistakes while making a game inventory, which you can see in many indie games. The inventory is either lagging or contains bugs.\nEven though it's a simple inventory system, you will learn complex inventory mechanics during the course. We will make the inventory with optimized code and free from bugs.\nYou will learn the best programming practices when making the RPG inventory and interaction system. Making the simple inventory system will make you skilled enough to create any RPG-style inventory for your future game projects.\nWhat you will go through in this course.\nWhile learning how to set up an inventory system, you will go through many inventory mechanics you will need for your game projects:\nCreate the inventory UI, including the inventory slots and categories.\nLearn to design and program inventory in games using Unreal Engine 5 multiplayer.\nLearn how to move items around correctly in your inventory.\nLearn how to create stackable items with options to adjust the stack amount.\nCreate different item types such as consumables, food, weapons, and more.\nCreate inventory categories to sort the items correctly.\nLearn how to loot and drop items from your inventory.\nLearn to control all inventory and item values, such as item loot amount, item stack size, item inventory icon, and more.\nThe simple inventory system will teach you everything you need to know about creating an inventory system in Unreal Engine 5.\nTake this course and get certified.\nCompleting the simple inventory system course earns you an Unreal Engine certification. You can use it to strengthen your portfolio as an independent game developer or use it when applying for game development jobs. The Unreal Engine certification can be downloaded and saved locally and is valid indefinitely.\nHow do you continue when completing the course?\nThe simple inventory system provides the skills and knowledge to advance toward challenging topics. You can use this RPG style inventory when you create your own online game. For instance, you can use the easy inventory system in the course on learning how to make a Platformer game. You can also use the simple inventory system in the course on how to make a FPS game. If you wish to try out single-player Unreal Engine game development, you can look at how to make a clicker game.\nWhatever you decide, it's important to take more game development courses to further develop your Unreal Engine Blueprint skills. Getting better at game development is all about repetition.\nJoin our supportive community.\nUnreal Engine game development can be a frustrating experience at times. For example, you might need to look for an unchecked box somewhere, leaving you feeling lost for hours. Alternatively, you might require moral support and ideas from fellow game developers like yourself. That's why we offer live support 24/7 in the Q/A section or in our community Discord server. You can also join us to chat casually about game development in general or share your work with others. We are always here to help you whenever you need it.\nLet's start with the simple inventory system without any delay. I am looking forward to seeing you in the first lesson. So, let's begin, and cheers to an exciting learning journey!",
      "target_audience": [
        "Anyone (beginner or intermediate) who wants to make a multiplayer inventory system."
      ]
    },
    {
      "title": "Create a Fun Life Simulator Game using playMaker and Unity",
      "url": "https://www.udemy.com/course/create-a-fun-life-simulator-game-using-playmaker-and-unity/",
      "bio": "Learn the power of PlayMaker and Visual Programming to create a popular Life Simulator game.",
      "objectives": [
        "Make a life simulator type game in Playmaker and Unity",
        "Implement increasingly complex game designs",
        "How to break down problems into finite state machines and develop visual solutions"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Creating the Unity Project and Installing Playmaker",
          "Create a Basic User Interface for our Game in the Unity Editor",
          "Setting up your First playMaker State Machine - Define playMaker Variables",
          "Sending Events to State Machines and Modifying Variables",
          "Improving our Design by Creating State Machines for Game Items",
          "Create Prefabs to Make our Game Items More Reusable",
          "Use the Int Compare Action to Enforce Maximums for Health and Food",
          "Check for Zero Health and Send a Death Event to the Game Manager FSM",
          "Display the Death Panel and Add the Ability to Restart the Game",
          "Adding Graphical Sliders for Health & Food",
          "Create an Array in playMaker to store Item Requirements",
          "Checking the Requirements Array for Purchased Items",
          "Display the Requirements for the Item to the Player",
          "Improve how the Item Requirements are Displayed",
          "Using playMaker FSM Templates to Simplify the Item State Machine",
          "Improve the Design and Layout of our Items",
          "Checking to Make Sure we Have Enough Money to Purchase the Item",
          "Manage Items that can Only be Purchased One Time",
          "Handling Rental Items",
          "Finishing Up Rental Items and Minor Bug Fixes"
        ]
      },
      "requirements": [
        "You should be comfortable using a PC for basic to intermediate tasks",
        "Unity 3D should installed and PlayMaker downloaded from the Unity Asset Store",
        "Be open to a fun new way to learn how to program! Visually!",
        "You must have own playMaker to follow along with this course"
      ],
      "description": "Important! To following along with this course you must own playMaker. It can be purchased on the Unity Asset Store!  It is also one of the best Unity Assets you will find.\nThis game design was inspired by some of the most popular Life Simulator Games. Specifically, in this course we implement many of the features in Homeless?. It is available on the Google Play Store.\nThis course is for anyone who wishes to build a Life Simulator Game in Unity3D using a visual development tool called playMaker.  With playMaker, you can make entire games without writing a single line of code. In fact, in this course we build and entire working Life Simulator game without a single line of C# code. The entire project is 100% playMaker visual diagrams.\nLearn the power of visual programming:\nPerfect for making your very first video game ever! Requires Unity3D (Free to download) & playMaker\nStart from the very beginning and follow step-by-step. The course is designed for complete beginners\nThis course is fast paced and focused on building your game. Although this is for beginners these are not boring lectures with fillers. Each lecture you will be learning to design games and building on your game\nLearn to build a complete game in Unity 3D with no C# programming required for any of the game.\nFocus on incremental development skills will help you create you own games\nClear, easy to understand lectures that are paced to make it fun and easy to learn Unity3d & PlayMaker\nCreated by OdooClass Videos... creator of Idle Business Simulation for C# enjoyed by over 1,000 students\nGreat starting off point for those who wish to get into game development or expand their range of skills\nWhy would an experienced C#, Python, or Javascript programmer be interested in PlayMaker?\n\nThere are several reasons why even experienced programmers may wish to experiment with PlayMaker.\nBuilding games in PlayMaker vs C# allows you to look at game development from a different perspective.\nAs a developer myself who has written code in dozens of languages, it is often refreshing to build games in a visual tool like PlayMaker.  A break from coding and still making games can be fun.\nHow you approach the design and how you build up your game has unique solutions and challenges you will not face  when writing typical C# games.\nIt is relatively easy for an experienced C# developer to write actions that work with PlayMaker. This allows you to use PlayMaker as a state machine and for managing high level functions of your game design while using C# for more complex calculations and algorithms that can be tedious to code using a visual tool.",
      "target_audience": [
        "Anyone who wishes to learn how to create games",
        "Game Developers who learn better visually or who have struggled learning how to code",
        "Experienced developers who wish to look at game development from a different perspective",
        "Anyone interested in learning Unity3d & PlayMaker by making a fun game",
        "Beginning programmers who wish to experiment with visual programming"
      ]
    },
    {
      "title": "Unreal 5 Niagara - Simulation Stages",
      "url": "https://www.udemy.com/course/unreal-5-niagara-simulation-stages/",
      "bio": "Learn the most Advanced Niagara VFX Techniques",
      "objectives": [
        "Learn Advanced Niagara Techniques such as For Loops and Simulation Stages",
        "Build up advanced Reaction Diffusion and Falling Sand simulations using Grid2D",
        "Fake interparticle collisions using Position Based Dynamics",
        "Learn how to Optimise complex effects using Neighbour Grids"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Intro Video"
        ],
        "For Loops": [
          "Intro to For Loops",
          "For Each Loops",
          "Attribute Reader",
          "Get Size",
          "Loop",
          "Mesh Repro - Orbs",
          "Mesh Repro - Mesh Setup",
          "Mesh Repro - Initialisation",
          "Mesh Repro - Update",
          "Mesh Repro - Material",
          "Mesh Repro - Material Alpha",
          "Mesh Repro - Loop Setup",
          "Mesh Repro - Offset",
          "Mesh Repro - Falloff",
          "Mesh Repro - Fade Lerp",
          "Mesh Repro - BugFix Emissive",
          "Mesh Repro - Summary",
          "Mesh Repro - Scale By Size",
          "Chain - Init Data",
          "Chain - Spacing",
          "Chain - Rotation",
          "Chain - First Last",
          "Chain - More Init Data",
          "Chain - Zero First Link",
          "Chain - Reattach",
          "Chain - Presolve",
          "Chain - Solver",
          "Chain - Bug Fixes",
          "Chain - Rotation",
          "Chain - Recap"
        ],
        "Grid 2D": [
          "Grid2D - Intro",
          "Grid2D - Creation",
          "Grid2D - Fill with Texture",
          "Grid2D - Fill Render Target",
          "Grid2D - Bind Render Target to Material",
          "Grid2D - Fade",
          "Grid2D - Distort",
          "Grid2D - Curl Noise",
          "Grid2D - Texture Noise",
          "Grid2D - External Render Targets"
        ],
        "Cellular Automata": [
          "Game of Life - Intro",
          "Game of Life - Setup",
          "Game of Life - Get Data",
          "Game of Life - Reproduction",
          "Game of Life - Death",
          "Game of Life - Bug Fix",
          "Game of Life - Speed Control",
          "Game of Life - Texture",
          "Reaction Diffusion - Intro",
          "Reaction Diffusion - Math",
          "Reaction Diffusion - Setup",
          "Reaction Diffusion - Grid Offset",
          "Reaction Diffusion - Laplacian",
          "Reaction Diffusion - Constants",
          "Reaction Diffusion - Algorithm",
          "Reaction Diffusion - Bug Fix",
          "Reaction Diffusion - Parameters",
          "Falling Sand"
        ],
        "More Grid 2D": [
          "Particle Animation Textures",
          "Read Write Grid 2D",
          "PAT Bugs",
          "Procedural Shapes",
          "Hex Per Particle",
          "World Space to Unit Space",
          "For Loop",
          "Persistence",
          "Rotation"
        ],
        "Neighbour Grids": [
          "Intro",
          "Colour From Closest",
          "Explanation",
          "Setup",
          "Fill HLSL",
          "Read HLSL",
          "Correct HLSL",
          "Bug Fix",
          "Debugger",
          "Positions",
          "Linear",
          "Grid Linear",
          "Fill To Nodes",
          "Checks",
          "Read To Nodes",
          "Recap",
          "Propagate Colour",
          "Propagate Colour Breakdown",
          "Propagate Colour HLSL",
          "PBD Intro",
          "PBD Setup",
          "PBD Gravity",
          "PBD Ground Bounce",
          "PBD Collision Loop",
          "PBD Bug Fix",
          "PBD Collision",
          "PBD Neighbour Grid",
          "PBD Outro"
        ]
      },
      "requirements": [
        "An advanced understanding of the Niagara toolkit and Unreal Engine"
      ],
      "description": "Welcome to my Unreal Engine 5 Niagara Course - Simulation Stages, here on Udemy.  This course will cover some of the most advanced techniques that can be set up in Niagara.  Using For Loops to iterate over Particles in the same or other Emitters and create advanced dynamic effects.  We will also cover Grid 2D in depth, from the basics of setting up and reading and writing data, to using loops to write Particle data to the grid, to complex simulations such as Conway's Game of Life, Reaction Diffusion Simulations and Falling Sand Sims.\nOver the course of 11.5 hours, all broken down into bite size 10-15 min videos, we cover For Loops, Grid 2D, Simulation Stages and Neighbour Grids\n\n\nEach chapter contains many examples, full of handy comments, as well as a many corresponding video lectures that explains in full detail what is being done and why - so you're learning both the techniques being used and building up a base of  background knowledge of first principal concepts, allowing you to build up your own effects in future.\n\n\nWith industry standard practices from my 15 year career, including 5 years of teaching Game Art at a Masters Degree level, this course will cover all various uses of Particle effects and Renderers - this course will fully equip you to add some Visual Effects life into your realtime scenes in Unreal Engine 5.",
      "target_audience": [
        "Advanced VFX artists who want to expand their knowledge with cutting edge techniques"
      ]
    },
    {
      "title": "Build Animated Physics Game with JavaScript",
      "url": "https://www.udemy.com/course/build-animated-physics-game-with-javascript/",
      "bio": "Design fantasy 2D worlds, animate your characters, learn 10 basic game development techniques and build a real project!",
      "objectives": [
        "Use HTML5, CSS3 & JavaScript to build a browser game from start to finish",
        "Learn how to apply collision detection to simulate 2D physics",
        "Animate character sprite sheets and make them interact with each other",
        "Learn how to implement 10 important techniques, useful in any game development project",
        "Apply object oriented programming principles in an interactive animation codebase",
        "Create animated particle systems to enhance interactivity"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Project": [
          "Basic setup",
          "Object Oriented Programming in JavaScript",
          "Drawing the player",
          "Mouse controls",
          "Making the player move",
          "Creating obstacles",
          "Non-overlapping obstacles",
          "Randomized images from a sprite sheet",
          "Positioning rules",
          "Reusable collision detection method",
          "Physics",
          "8 directional sprite animation",
          "Animation angles",
          "Debug mode",
          "Player movement boundaries",
          "FPS",
          "Egg class",
          "Periodically adding new eggs",
          "Egg physics",
          "Draw order",
          "Enemy class",
          "Larva class",
          "Egg hatching",
          "Larva sprites and collisions",
          "Gaining score points",
          "Particle effects",
          "Particle motion",
          "Randomised enemy skins",
          "Win and lose condition",
          "Restart game",
          "Extending enemy class",
          "Simple fullscreen mode",
          "Player sprite sheet full animation",
          "Larva sprite sheet full animation",
          "Enemies sprite sheet full animation"
        ],
        "Bonus project (optional)": [
          "Bonus project introduction",
          "Project setup",
          "Enhancing game worlds",
          "JavaScript setup",
          "Keyboard controls",
          "Player character",
          "4-directional sprite animation",
          "How to control FPS",
          "Randomly positioned game objects",
          "Layering and draw order in 2D games"
        ]
      },
      "requirements": [
        "This course is beginner friendly, basic knowledge of HTML, CSS and JavaScript is needed to get the maximum value"
      ],
      "description": "What makes a great game? Is it about beautiful, polished visuals or about gameplay that feels good and responsive? Is it about unique ideas, or maybe it's the little details, special secrets and Easter eggs? What are the ingredients in a perfect game development recipe?\n\n\nIn this class we will dive deep into sprite animation, interactivity and 2D physics. We will learn 10 important techniques every game developer needs to know and we will apply them in a real project.\n\n\nStudents of this class will get a lot of 2D professional high resolution game art for free. I provide environmental and character art assets in the form of ready to use sprite sheets, as well as source files with separate pieces for those of you who want to edit the colors, piece together your own mushrooms and creatures or to rig your own animations.\n\n\nToday we will learn:\n- How to implement a very simple AI to make the creatures feel alive\n- How to control the FPS of our game and how to measure time to trigger periodic events\n- How to restart the game by pressing a button\n- How to apply collision detection, resolve collisions and use that to simulate physics\n- How to use the built-in drawImage method to draw randomised game environments and animated characters from a sprite sheet\n- How to capture mouse position and animate an 8 directional sprite sheet based on the relative position between the mouse and the player character\n- How to use HTML5, CSS3 and plain vanilla JavaScript to build a game from scratch. We will write and understand every line of code, we will not rely on any external frameworks or libraries\n... and much more\n\n\nThe pace and techniques in this course are beginner friendly. Existing knowledge of HTML, CSS & JavaScript is needed to follow the course. If you understand JavaScript basics and know what functions, for loops and arrays are, you will be able to get the maximum value out of this class.\n\n\nHave fun! :)",
      "target_audience": [
        "Beginner JavaScript developers with an interest in web animation and creative coding"
      ]
    },
    {
      "title": "Unity 3D Game Development: Create an Android 3D Runner Game",
      "url": "https://www.udemy.com/course/unity-create-a-android-3d-runner-game-course-for-everyone/",
      "bio": "Enter the world of Android 3D Game Development with Unity and create and publish a Runner 3D Game for Android PlayStore",
      "objectives": [
        "Implement a 3D Runner game for Android from scratch",
        "Find and import 3D objects and 3D characters in your projects",
        "Publish your 3D Android game in Google Play Store",
        "Learn and understand much better Unity 3D",
        "You will learn the art of 3D Game Development with Unity",
        "You will improve your skills, learn a new job and excel in your career"
      ],
      "course_content": {
        "Introduction to this Unity 3D Android Game Development Course": [
          "Presentation of the 3D Game Development Course",
          "Download and Installation of Unity",
          "ID Creation and Setup of a new project",
          "Let's get to know better Unity interface"
        ],
        "First Settings for the 3D Runner Game for Android": [
          "Resolution setting for our game",
          "3D Character Download",
          "Let's import the character in our project",
          "We prepare the player",
          "Let's make the player run"
        ],
        "First Developing Phase - 3D Game Development": [
          "We create the script for the player",
          "Let's add the RigidBody and let's start with the script",
          "We write the code for moving the player",
          "Let's make the player move",
          "We import the jumping animation",
          "We make the player jump",
          "We set the trigger for jumping animation",
          "We call the animation from the script",
          "We set the script for MainCamera",
          "We write the code for the cam and we test it",
          "We download and Import the platforms for the route",
          "We add colliders to the fences",
          "We test with more platforms"
        ],
        "Second Developing Phase - 3D Unity for Android Games": [
          "Presentation of the new section",
          "We create the Platform Prefab and the PlatformSpawner Script",
          "We start to work on PlatformSpawner script",
          "We write the code in Void Start - Part 1",
          "We write the code in Void Start - Part 2",
          "We create the Void SpawnInitialVertical",
          "We create Pooler Script for vertical platforms",
          "We create the Void for PoolObject",
          "We call the void for pooling the object and we test it",
          "We download, import and set the Idle animation for player",
          "We import image for start animation",
          "We create the animation for startImage",
          "We modify the player script",
          "We make start the game on user click",
          "We create the code for gestures",
          "We block the double jump"
        ],
        "Third Developing Phase - Android Game Development": [
          "We launch the spawning of platforms",
          "We create the Void SpawnVertical",
          "We create the Void for the angles",
          "We create the corners platforms prefabs",
          "We recall right corner from the script",
          "We create Pooler for Corner1 and we test",
          "We create the code for horizontal platforms to the right",
          "We make the player turn left and righ with gestures",
          "We make the spawning of the empty horizontal platform to the right",
          "We create the invisible horizontal platform to the right",
          "We create the corner to the left",
          "We make the spawning of the horizontal platform to the left",
          "We make the spawning of the empty horizontal platform to the left",
          "We make the spawning of corners platforms that go up",
          "We create the poolers for corner3 and corner4",
          "We fix lastPos to have perfect connections",
          "We remove the used platforms",
          "We add the colliders to the corners",
          "We create the platforms with the obstacles",
          "We create the poolers for the platforms with obstacle",
          "We write the Void CreateCombinations",
          "We finish to write CreateCombinations and we test",
          "We put the obstacles in the horizontal platforms"
        ],
        "Fourth Developing Phase - 3D Game with Unity": [
          "Let's set the Player slide animation",
          "We set another type of slide for the player",
          "We change CapsuleCollider to the player while is sliding",
          "We set the animation for when the player fall with an obstacle",
          "We set a second falling animation for when the player hit the fences",
          "We finish to set the colliders to have always the right animations",
          "We assign a score to the player - part 1",
          "We assign a score to the player - part 2",
          "We save the score and the high score",
          "We set the GameOver and the GameOverPanel (Part 1)",
          "We set the GameOver and the GameOverPanel (Part 2)",
          "We create a animation for GameOverPanel",
          "We make appear a HighScore text during the game",
          "We create an animation for HighScore text",
          "We add audio to high score animation",
          "We add diamonds to the game",
          "We make rotate the diamond",
          "We create diamonds randomly along the way",
          "We destroy the diamonds and we add a score and a sound fx",
          "We add a Particle Effect to the diamond",
          "We stop the diamond harvest on Game Over",
          "We insert a button to restart the game",
          "We insert a background with sea and sky",
          "We make the project compatible with Android",
          "We prepare our smartphone for the debug",
          "We test our game on a smartphone",
          "Let's move the Player based on the inclination of the smartphone",
          "We check the frames per second (FPS) of our game",
          "Presentation of the new section"
        ],
        "Preparation of APK file and Publishing - Let's publish our 3D Game in PlayStore": [
          "We install Java JDK",
          "We install Android SDK",
          "Preparation to the creation of APK files - part 1",
          "Preparation to the creation of APK files - part 2",
          "Installation of Inkscape for Mac",
          "Installation of Inkscape for Windows",
          "We create an icon for our game",
          "Creation of a Google account and activation of Google Developer",
          "We create the page for our game in the Google Play Console",
          "We create the graphics for the Play Store",
          "We create a privacy policy for our app",
          "We publish the game",
          "Final greetings and salutations"
        ]
      },
      "requirements": [
        "You need to know how to use a PC with Windows or a Mac",
        "No programming knowledge is required but some basis will certainly help",
        "You need to have an internet connection",
        "You need to have the will and the desire to learn 3D Game Development for Android with Unity3D"
      ],
      "description": "Hello and welcome to this Unity 3D Android Game Development!\nWith this course, you will have the chance to enter for the first time or deepen, in a serious and complete way the art of 3D Game development. You will find out that the educational level of this Unity 3D course is usable by everyone, and thus appreciable by expert programmers and also by absolute beginners.\nWith this course, you will create and publish a complete 3D Infinite Runner Game with Unity for Android PlayStore!\n3D runner games have been very popular for a few years now, an example of these type of games are the classic Temple Run or the famous Subway Surfer.\nBasically,  you'll have to pilot a character in third-person along a continuously changing path that presents a series of obstacles and difficulties as well as gems to collect points.\nStep by step, lesson after lesson, you will build a perfect and complex system for creating the platforms that will form the path for the player.\nWe will take care of all those aspects necessary for the proper functioning of the game, such as player management, jumps, slides,  left-right oscillations, turns, collisions with obstacles and all that is needed to make the 3d game enjoyable and playable.\nThanks to the various dynamics of the game you will be able to deepen important issues that often are not fully explained or understood as colliders and rigid body and their management and many other components available in Unity 3D.\nAt the end of the course, there will be a part entirely dedicated to the publication of the game in the Google Play Store, you'll be guided through all the process till the publication of your game.\nThis is a complete course that will take you from scratch to the creation and publication of a 3D runner game in a simple and direct way.\nYou will also have the security of a money back guarantee. In fact, if for any reason within 30  days you won't be completely satisfied with your purchase, you can \"easily\" request a refund that will be given to you without any kind of question from Udemy!\nWhat to ask more? ;)\n\n\nMusic:\n\"Tech Live” ,  “On The Ground” , “Robobozo”, \"Surf Shimmy\" by Kevin MacLeod (incompetech(dot)com)\nLicensed under Creative Commons: By Attribution 3.0 License\nhttp://creativecommons.org/licenses/by/3.0/",
      "target_audience": [
        "Anyone who wants to learn how to create a \"3D runner game\" for Android",
        "Anyone who wants to increase their knowledge and improve their curriculum",
        "Anyone with ideas for new games to publish in the Google Play Store",
        "Anyone who wants to deepen their knowledge of Unity",
        "Anyone who wants to learn 3D Game Development for Android with Unity 3D"
      ]
    },
    {
      "title": "Make a Ninja Survival game for mobile in Unity® and Blender!",
      "url": "https://www.udemy.com/course/make-a-ninja-survival-game-for-mobile-in-unity3d-and-blender/",
      "bio": "Learn to build a Ninja game for mobile in Unity®. Create the game's art from scratch in Blender.",
      "objectives": [
        "Build a Ninja Survival game for mobile in Unity®.",
        "Code in C#.",
        "Use Blender and navigate its interface.",
        "Integrate art from Blender into Unity®.",
        "Build video game levels.",
        "UV map and unwrap your models.",
        "Create your own materials.",
        "Learn the basics of animation."
      ],
      "course_content": {
        "Introduction": [
          "Download Blender and Unity3D",
          "Gameplay"
        ],
        "T01. Introduction to Unity": [
          "1.1 Introduction",
          "1.2 Unity Editor",
          "1.3 Moving a Cube",
          "1.4 Materials",
          "1.5 Lights",
          "1.6 Particle System",
          "1.7 Applying Physics",
          "1.8 Asset Store"
        ],
        "T02. Introduction to Coding": [
          "2.1 Introduction",
          "2.2 Variables",
          "2.3 Methods",
          "2.4 If Blocks",
          "2.5 Loops"
        ],
        "T03. Introduction to Inputs": [
          "3.1 Introduction",
          "3.2 Key Presses",
          "3.3 Moving a Player",
          "3.4 Jumping",
          "3.5 Moving Forward",
          "3.6 Cycling Cameras"
        ],
        "T04. Introduction to Prefabs": [
          "4.1 Introduction",
          "4.2 Introduction to Prefabs",
          "FAQ on Instantiating Objects",
          "4.3 Random Angles",
          "FAQ on Destroying Objects",
          "4.4 Explosion Effect",
          "4.5 Adding Explosion Effects"
        ],
        "01. Jumpers": [
          "g1.1 Setting up the Project",
          "g1.2 Building a Simple Scene",
          "g1.3 Percentage Coordinates",
          "g1.4 Clicking Variation",
          "g1.5 Player Movement",
          "g1.6 Orthographic Camera",
          "g1.7 Jumping Enemy",
          "g1.8 Jumping Enemy Movement",
          "g1.9 Killing the Player.mp4",
          "g1.10 Canvas",
          "g1.11 End Game Messages"
        ],
        "02. Adding More Functionality": [
          "g2.1 Reusability",
          "g2.2 Dynamically Adding the Enemy",
          "g2.3 Game Mode Switch",
          "g2.4 Setting up the Rolling Enemy",
          "g2.5 Rolling Enemy Movement",
          "g2.6 Enemy Positions",
          "g2.7 Killing the Player",
          "g2.8 Depth Range",
          "g2.9 Horizontal Range"
        ],
        "03. Enemy Logic": [
          "g3.1 Creating the Bouncing Enemy",
          "g3.2 Moving the Bouncing Enemy",
          "g3.3 Diagonal Movement",
          "g3.4 Movement Flip",
          "g3.5 Initial Angle.mp4",
          "g3.6 Enemy Collision.mp4",
          "g3.7 Multiple Bouncers.mp4",
          "g3.8 Depth Walls"
        ],
        "04. Designing the Game": [
          "g4.1 Designing the Crawlers.mp4",
          "g4.2 Crawling Enemy Movement.mp4",
          "g4.3 Player's Rotation.mp4",
          "g4.4 Jumping Force.mp4",
          "g4.5 Finishing the Jumping Logic.mp4",
          "g4.6 Spawning Crawlers.mp4"
        ],
        "05. Turrets": [
          "g5.1 Designing the Enemy Turret",
          "g5.2 Turret States",
          "g5.3 Turrent Movement",
          "g5.4 Smooth Aiming",
          "g5.5 Aiming"
        ]
      },
      "requirements": [
        "To follow along with these tutorials, you will need the following programs: Blender (for 3D modeling and texturing) and Unity® (for game set-up and coding).",
        "Unity® and Blender are free to download. Please download and install Unity® and Blender before purchasing this course.",
        "This course was recorded on a Mac computer, but you can use Unity® and Blender on a PC."
      ],
      "description": "In this course, you learn how to build a Ninja game for mobile using Unity® and Blender. This course is unique because we make both the code and the art for the game from scratch. We teach you the fundamentals of designing, coding, and modeling a mobile game.\n\nFirst you design the game and its functionality in Unity®. You learn how to code in C# and build video game levels. Don't worry if you've never coded before. We start simple and add more to the game as the course goes on.\nWhy Unity®?\nUnity® is one of the most popular platforms in game development. You can use Unity® to build 2D and 3D games. Unity® is cross-platform, which means it is easy to use with other platforms.\nThen you create the art for the game in Blender. You build all the art assets for the game. You learn how to integrate your art from Blender into Unity®.\n\nWhy Blender?\nBlender, like Unity®, is a popular production suite that is free to download. Blender is a revolutionary tool for making 3D art digitally. With Blender, you can make art assets for games, like we do in this course.\nIs this course for me?\nEven if you're not an artist, you can make basic art models. You may have heard of Axiom Verge and Stardew Valley. These games are million-dollar successes. But did you know that only one person made each?\n\nUsually it takes a whole team of people to build a game. But creators Thomas Happ and Eric Barone developed and designed their games by themselves. Now they're millionaires. You can do it, too.\nLet's get started!",
      "target_audience": [
        "Anyone who wants to learn Unity® or Blender.",
        "Anyone who wants to learn game development.",
        "This course assumes you know a little about Unity® and Blender."
      ]
    },
    {
      "title": "Build and model a 3D Super MARLO runner clone in Unity®!",
      "url": "https://www.udemy.com/course/build-and-model-a-super-marlo-runner-clone-in-unity3d/",
      "bio": "Do you want to learn to code and 3D model? Build a simple SUPER MARLO RUN clone with our revolutionary course format.",
      "objectives": [
        "Code in Unity",
        "Know the foundations of 3D model-making in Blender",
        "Unwrap UV's and perform simple texturing of 3D art assets",
        "Build a simple game that is easy to expand on"
      ],
      "course_content": {
        "Introduction to Unity": [
          "Gameplay",
          "01.) Introduction to Unity - Part 1",
          "01.) Introduction to Unity - Part 2"
        ],
        "Movement": [
          "02.) Movement - Part 1",
          "02.) Movement - Part 2",
          "02.) Movement - Part 3"
        ],
        "Blocks": [
          "03.) Blocks - Part 1",
          "03.) Blocks - Part 2"
        ],
        "Speed Blocks and Enemies": [
          "04.) Speed Blocks and Enemies - Part 1",
          "04.) Speed Blocks and Enemies - Part 2",
          "04.) Speed Blocks and Enemies - Part 3"
        ],
        "More Enemies": [
          "05.) More Enemies - Part 1",
          "05.) More Enemies - Part 2"
        ],
        "Powerup and Finish Line": [
          "06.) Powerup and Finish Line - Part 1",
          "06.) Powerup and Finish Line - Part 2"
        ],
        "Background and Interface": [
          "07.) Background and Interface - Part 1",
          "07.) Background and Interface - Part 2",
          "07.) Background and Interface - Part 3"
        ],
        "Fine Tunings": [
          "08.) Fine Tunings - Part 1",
          "08.) Fine Tunings - Part 2",
          "08.) Fine Tunings - Part 3"
        ],
        "Level Design": [
          "09.) Level Design - Part 1",
          "09.) Level Design - Part 2"
        ],
        "Introduction to Blender": [
          "Introduction to Blender"
        ]
      },
      "requirements": [
        "To follow along with these tutorials, you will need the following programs: Blender (for 3D modeling), Photoshop or a free program like Gimp (for 2D art/texturing), and Unity® (for coding).",
        "The tutorials were recorded on a Mac, but Blender, Photoshop, and Unity® can be used with a PC.",
        "Please download and install Unity® and Blender before purchasing this course."
      ],
      "description": "\"Love what I'm doing so far. The game is feeling really satisfying. Things are explained really well.\"\nDo you want to design and build your own 3D game? Even if you have never coded before, with this course you can learn the foundations of making a 3D game. In these tutorials, we will build a SUPER MARLO RUN game in Unity® – from scratch.\nThis course does not assume any prior knowledge and is perfect for beginners. In fact, we begin with an introduction to Unity® for those who have never used it before. This course is unique because you will learn how to make your own 3D art, models, and textures in Blender. We will show you how to integrate the art into Unity®.\nWe take you through all the steps to designing a game from start to finish. This course covers topics including:\nMovement\nBlocks\nSpeed blocks and enemies\nPower-ups and finish lines\nBackground and interface\nFine-tuning\nLevel design\nBy the end of this course, you will have a functioning runner game that you can build on to add your own project ideas! Ready to begin?",
      "target_audience": [
        "Even if you have never coded before, you can use these lessons to get a headstart in the game-making realm! This course is targeted towards beginners to immediate."
      ]
    },
    {
      "title": "Space Invaders with JavaScript and HTML Canvas",
      "url": "https://www.udemy.com/course/space-invaders-with-javascript-and-html-canvas/",
      "bio": "Improve your game-dev skills by learning how to code power-ups, explosions, and more for this classic game type",
      "objectives": [
        "Setup a development environment",
        "Create and move a player's spaceship",
        "Import game images",
        "Generate grids of enemy invaders at set intervals",
        "Shoot projectiles",
        "Remove enemies with precise collision detection",
        "Create bombs that explode multiple invaders at once",
        "Obtain machine gun power-ups that alter your rate of fire",
        "Make enemies progressively harder",
        "Add particle animations that follow your spaceship",
        "Develop a game UI using HTML and CSS",
        "Start and end screens with a restart button",
        "Add custom sound effects and music",
        "Code consistent frame rates for all types of monitors",
        "Deploy to GitHub pages"
      ],
      "course_content": {
        "The Essentials": [
          "Project setup",
          "Create a player",
          "Move player",
          "Create projectiles",
          "Create an invader",
          "Create grid of invaders",
          "Spawn grids at intervals",
          "Shoot invaders",
          "Update grid width",
          "Invader projectiles",
          "Enemy explosions",
          "Background stars",
          "Lose condition",
          "Score",
          "Fixed width canvas"
        ],
        "Premium Features": [
          "Dynamic score labels",
          "Explosive bombs",
          "Machine gun power-up",
          "Progressively harder enemies",
          "Spaceship sprite animation",
          "Start and game over UI",
          "Sound effects and music",
          "Consistent frame rate across screens",
          "Refactor and touch-ups",
          "Deploy",
          "Show score on game over"
        ]
      },
      "requirements": [
        "You should understand basic JavaScript principles like var, let, const, for loops, and functions",
        "Some prior knowledge with HTML canvas will help, although it's not strictly required"
      ],
      "description": "PLEASE READ: This is a freemium course—the first 2 1/2 hours are free (you can watch right here on Udemy [or YouTube] with each video's \"Preview\" button), while the remaining 3 hours require course purchase. I've always been a big advocate of spreading the basics to as many people as possible, as I believe knowledge and personal growth are some of the best ways to better our world as a whole. Enjoy.\nWelcome to the Code Space Invaders course, where you will learn how to create a custom variation of the classic game, Space Invaders. We'll use JavaScript and HTML5 canvas fundamentals to progressively enhance your game development skills, and go all the way 'til you have a full-blown Space Invaders game live on the web.\nMy name is Christopher Lis, and I'm an award-winning Full-Stack Engineer with over ten years of web development experience. I've directly worked with clients like Harvard University, The Basketball Tournament, and premium award-winning agencies like Brave People.\nThe goal of this course is to give you the skillset required to code your own JavaScript games from scratch. Many game dev fundamentals are covered in this course, and much of what you'll learn uses hand-written math functions rather than hidden away abstractions that game dev libraries typically provide.\nIn this course, you'll learn everything from:\n\n\nSetup a development environment\nCreate and move a player's spaceship\nImport game images\nGenerate grids of enemy invaders at set intervals\nShoot projectiles\nRemove enemies with precise collision detectionk\nCreate bombs that explode multiple invaders at once\nObtain machine gun power-ups that alter your rate of fire\nMake enemies progressively harder\nAdd particle animations that follow your spaceship\nDevelop a game UI using HTML and CSS\nStart and end screens with a restart button\nAdd custom sound effects and music\nCode consistent frame rates for all types of monitors\nDeploy to GitHub pages\n\n\nAnd so much more.\nIf you're serious about taking your game dev skills to the next level, then let me guide you through the full production of a 2D Space Invaders game that's ready for production launch.",
      "target_audience": [
        "Beginner game devs looking to bolster their skills and better understand game development in general"
      ]
    },
    {
      "title": "Let's Make Stardew Valley Or Harvest Moon Farming Kind Game",
      "url": "https://www.udemy.com/course/make-your-own-rpg-game-without-coding-drawing-in-hindi/",
      "bio": "ENGLISH : Lets Make Stardew Valley Or Harvest Moon Kind of Game [Farming, Seasons, Relation, House, Cooking Etc...]",
      "objectives": [
        "Game Development",
        "Making Game with Farming, House, Cooking, Crafting, Mining, Fishing, Relation And All Other Systems",
        "Making Systems Like Seasons, Day And Night, Teleportation Etc.",
        "Once Software Teaching Is Completed We Are Going to Make, Game From Start To End"
      ],
      "course_content": {
        "Introduction and What we are going to make in this course.": [
          "Introduction & Where 2 Get RPG Maker MV Software",
          "Custom Title Screen Similar To Harvest Moon",
          "Making Custom Time System Hud And Time System",
          "MAKING DAY & NIGHT SYSTEM AND SESAON SYSTEM CHANGING MAP TO DAY NIGHT AND",
          "BED SYSTEM AND WEATHER SYSTEM AND RAIN AND SNOW FALL ON MAP",
          "Player Health n Stamina Bar UI Making",
          "MAKING PLAYER STAMINA BAR GO DOWN AS HE RUN AND PLAYER INFO SYSTEM",
          "SENDING PLYER HOUSE BACK ONCE HE IS RUN OUT OF STAMINA OR HEALTH",
          "MAKING THE TV SYSTM LIKE STARDEW VALLEY SHOW TODAY N 2MOW WEATHER",
          "Making Character Euip Tools N Item on Press Of E Key and Display Hud",
          "First step to farming using Hoe to make farm plot and Shovel to destory it",
          "Our First Harvest Planting Carrot Watering it after 5 days harvesting it",
          "REGROWING PLANT-TREE AFTER EACH DAY",
          "CUSTOM RELATIONSHIP BOOK",
          "HORSE RIDING MOVEMENT SPEED",
          "Cutscene Bus Moving To Town Similar To Stardew Valley",
          "Shipping System",
          "TODAYS EARNING SYSTEM"
        ],
        "Basic Info and Tools of RPG Maker MV Software How to use it.": [
          "Title Name Changing, Map Making And Transfer Player From One Map To Other",
          "Adding NPC Talking With NPC Show Choices And Movements oF NPC",
          "Door Event Making Quest Give Me 5 Apples",
          "Making Shop Making Fight Battle And Character Generator",
          "Database Section Database Actor Classes Skills Parameters Traits Exp Curve",
          "Switches Variables System Vehicles System Tile set",
          "Common Events Weather Day Night System Characte Section and other things on",
          "Bonus Fun Video For Bus Stop !!! & Town Winter Map"
        ],
        "Learning Most of the system like Time, Weather, Day Night, Bed etc...": [
          "Game Getting All Season Tile set For Game",
          "Making Calendar System",
          "Making Weather System Changing Tileset 2 Snow & Rain Accordingly & Making",
          "Day & Night System Working Properly With Time And Changing Tint Of Screen",
          "Basic Fishing System & Advance Fishing System",
          "Making Wood Cutting - Mining - Collection System",
          "My Custom Art",
          "Making Relation System & Upgrading Hero Skills By Variables",
          "Relation 10 Heart Icons and Marriage System",
          "Crafting and Cooking System",
          "Basic Farming System & Battle on Region ID",
          "Cut-scene Example What You Can Make"
        ],
        "Plugins Explaining the all Plugins": [
          "Four Season Tile set, Plugins And Drawing Town Map",
          "Adding the All Plugins in Game Folder In Correct Order",
          "Explaining Plugins - Yanfly Core, Main Menu Manager, Message Core and Save C",
          "Making Custom Star Skill & Jump Attack Skill - Battle Engine & Action seqence",
          "Animated SV Enemy, Battle AI Core, Buff State Core, Element Core, Lvl Up Eff",
          "Item Core, Item Upgrade Slot, Skill Core and Cooldowns"
        ],
        "Making Game with Graphics": [
          "Making Custom Time System Hud And Time System",
          "MAKING DAY & NIGHT SYSTEM AND SESAON SYSTEM CHANGING MAP TO DAY NIGHT AND",
          "BED SYSTEM AND WEATHER SYSTEM AND RAIN AND SNOW FALL ON MAP",
          "Player Health n Stamina Bar UI Making",
          "MAKING PLAYER STAMINA BAR GO DOWN AS HE RUN AND PLAYER INFO SYSTEM",
          "SENDING PLYER HOUSE BACK ONCE HE IS RUN OUT OF STAMINA OR HEALTH",
          "MAKING THE TV SYSTM LIKE STARDEW VALLEY SHOW TODAY N 2MOW WEATHER",
          "Making Character Euip Tools N Item on Press Of E Key and Display Hud",
          "First step to farming using Hoe to make farm plot and Shovel to destory it",
          "Our First Harvest Planting Carrot Watering it after 5 days harvesting it",
          "REGROWING PLANT-TREE AFTER EACH DAY",
          "CUSTOM RELATIONSHIP BOOK",
          "CUSTOM RELATIONSHIP BOOK ADD NEW PAGES",
          "HORSE RIDING MOVEMENT SPEED",
          "Custom Title Screen Similar To Harvest Moon",
          "Cutscene Bus Moving To Town Similar To Stardew Valley",
          "Shipping System",
          "TODAYS EARNING SYSTEM"
        ],
        "Questions & Answers": [
          "How to stop snow fall inside house & How to disappear character on night",
          "APPLE QUEST ADVANCED",
          "HOW TO MAKE TILESET",
          "HOW TO RESIZE THE TILESET",
          "HOW TO REMOVE EDGE OF CARPET",
          "MAKING RPG MAKER CHARCTER SPRITESHEET AND RESIZING IT"
        ]
      },
      "requirements": [
        "Just Have Basic Knowledge Of Computer And Interest In Video Games",
        "Interested To Make Game",
        "No Programming Experience Needed, You will learn Everything Here."
      ],
      "description": "So far this series I decided why not let all know, that they can make very nice games for pc and mobile without any coding or drawing knowledge and they can make it, all you need is just a very good story and the gut's to start. Yes believe in me you can make the game, and for that, I decided to use this RPG Maker MV software to show you what is potential of this software with just your idea u can make great things.\n\n\nIn this Video tutorials we are going to learn about the RPG Maker MV software and also after learning thing in this software we are going to make the actual game.\nI believe you would love this series and mainly this series is in the English Language for the all peoples.\n\n\nAnd I am always there to support you with your game making even you have any questions just ask me I will be there always to answer you.\n\n\nI Decided to put this lecture series in main 3 sections :\n1) Basic understanding about the software : In this section, I will try to explain the software and its tools and basic functions.\n\n\n2) Making Game : In this section, I will explain every thing with prototype or just examples of every systems and thing but not\nActual Game.\n\n\n3) Actual Game : In this section, Since I have explain the whole software to you, this will be very big section, cause in here we\nare going to make actual game. Where we are going to use every single thing from above 2 sections we learned.\n\n\n\n\nThank you!!!",
      "target_audience": [
        "Beginner Game Developers, Any One Interested In Games Or Any One Who Want To Make Game",
        "Every One Who Love The Game"
      ]
    },
    {
      "title": "Godot: Creating A Platformer",
      "url": "https://www.udemy.com/course/godot-creating-a-platformer/",
      "bio": "Creating Games Made Easy",
      "objectives": [
        "How to create animations",
        "Create a Tileset",
        "Have scripts communicate with eachother",
        "Create enemies with an AI",
        "Creating win conditions",
        "and more..."
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Where To Get GoDot"
        ],
        "Creating A Platformer": [
          "Creating The Project and Export Templates",
          "Importing Assets",
          "Creating the Player and Movement",
          "Jumping",
          "Gravity",
          "Single and Double Jump",
          "Animating the Player",
          "Creating Tilesets",
          "Camera Smoothly Follows Player",
          "Invisible Barriers",
          "Gravity Fixes",
          "Good Coding Practice",
          "Collectibles and Points",
          "Creating The Enemy",
          "Enemy AI",
          "Player Lives",
          "Game Over",
          "Win Condition",
          "GUI",
          "Tileset Collision Fix(if you have any)",
          "Pause Screen",
          "Adding Audio",
          "Bug Fixing",
          "Adding A Background",
          "Main Menu and Fullscreen",
          "Touchscreen Controls",
          "Exporting",
          "Thank You"
        ],
        "Extra/Requested Videos": [
          "Boss Trigger",
          "Camera Tweening",
          "Introducing Bosses",
          "Boss Code Setup",
          "Boss Code Setting Up Phases"
        ]
      },
      "requirements": [
        "Basic Text Editing Skills",
        "Basic computer skills (web browsing, app installation, file navigation)"
      ],
      "description": "Learn to create games in the Godot game engine using a python-like programming language, GDscript.\n\nIn this course, we will create a 2D platformer game that is cross-platform for MacOS, Windows, Linux, Android, IOS or even embed into a browser.\n\nWhile on your game development journey you will gain the skills and ability to create any platformer you want.\n\nYou will learn to:\n\nCreate Animations\nCreate A Tileset\nPass data between scripts\nCreate Simple AI For Enemies\nCreating Win Conditions\nGood Coding Practice\nand more...\n\nGodot provides a huge set of common tools, so you can just focus on making your game without reinventing the wheel.\nGodot is completely free and open-source under the very permissive MIT license. No strings attached, no royalties, nothing. Your game is yours, down to the last line of engine code.",
      "target_audience": [
        "GoDot Developers Who Want To Learn To Make Platformers"
      ]
    },
    {
      "title": "Unreal Engine 5: Create a multiplayer 2D game from scratch",
      "url": "https://www.udemy.com/course/unreal-engine-5-create-a-multiplayer-2d-game-from-scratch/",
      "bio": "Learn how to create a multiplayer 2D game from scratch in unreal engine 5 !",
      "objectives": [
        "You'll learn how to handle 2D animations in multiplayer mode",
        "You'll learn how to design different skills for BOSS",
        "You'll learn creating a multiplayer game from scratch in unreal engine 5",
        "You'll learn how to create tile map based on tile sets and design your level",
        "You'll learn how to add different 2D characters both for players and enemies",
        "You'll learn how to script logics for different actions like rolling, death animation, melee combat, range attack etc.",
        "You'll learn how to add respawn point, teleport portal actors for multiplayer mode",
        "You'll learn how to create health and user interface"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Reference Project And Support"
        ],
        "Project setup and Level creation": [
          "Install Unreal Engine And Create Project",
          "Basic Navigation And Project Setup",
          "Import Free Assets",
          "Create Tile Map (Level design)",
          "Utilize Post Process Volume",
          "Section Review"
        ],
        "Paper ZD animations and Basic Replication": [
          "Create Knight Animations - Part 1",
          "Create Knight Animations - Part 2",
          "Create PaperZD Animation",
          "Parent And Children Classes",
          "Create PaperZD Blueprints",
          "Client Server Model in Unreal Engine 5",
          "Script Input Logics For Player Character",
          "Play Locomotion Animation",
          "Replicate Orientation of Character",
          "Create Follwing Camera And Lock Plane",
          "Smoothing Following Camera Movement"
        ],
        "Player Character Actions": [
          "Add Jump Ability And Animations",
          "Play Jumping Sound And Fix Bugs",
          "Add Rolling Ability",
          "Add Rolling Animation Notifys",
          "Add Attack Ability And Animation",
          "Attack Collision Check"
        ],
        "Attack Reactions of Player Characters and Enemies": [
          "Spawn Damage Text",
          "Change Color And Knockback Reactions",
          "Replicate Death Visual Effect",
          "Mob Cause Damage To Player Character",
          "Player Character Receive Damage",
          "Player UI HP Bar",
          "Death UI And Revive Mechanism",
          "Play Death Animation With PaperZD"
        ],
        "Add More Mobs And BOSS (Ghoul, Wizard, Fallen Angel)": [
          "Apply Behavior Tree to Mob",
          "Create Custom Tasks For AI",
          "Create Enemy with Chasing Mode",
          "Expand Tile map For More Mobs",
          "Add Wizard Enemy",
          "Add BOSS Animations",
          "Add Teleport Portal",
          "Update Respawn Location",
          "Boss SkillA Summon Mobs",
          "Boss SkillB Casting Thunder And Reset Battle",
          "Create Animations of Archer",
          "Create Arrow and Fix Bugs",
          "Create Character Selection UI",
          "Animated Transition When Game Start"
        ]
      },
      "requirements": [
        "Although this course doesn't require you have game development experience, basic blueprint knowledge is preferred.",
        "Some programming/game development experience"
      ],
      "description": "Feel free to check what you will learn in lecture list and watch preview lessons !\n\n\nThis course will teach you how to create a multiplayer 2D platformer from scratch in unreal engine without coding. We'll use powerful visual scripting system called \"blueprint\" to implement all features showing in introduction video.\n\n\nAlthough the main focus is creating Platformer game, you will understand how to handle different 2D assets such as textures, sprites, flipbooks, paperZD, animation notify/state, flipbooks, tile sets, tile maps, integration with EOS etc.\n\n\nFinal source project is also provided in the course, you can download it for learning purpose. If you are stuck on any problems, don't hesitate to ask questions in Q&A part! Remember, I'm always here to help you out and I'm really appreciated if you do so and share your achievement with other students !\n\n\nAlthough this course doesn't require you have game development experience, multiplayer game is generally a bit more complex than single player game. So this course offers many slides to explain what and why we do so before we actually start to script logics. You will be confident in creating unreal 2D games after finishing this course, which is one of main objective of this course.",
      "target_audience": [
        "Game developers who are instersted in creating multiplayer game",
        "Game developers who are looking for 2D game development",
        "People who are interested in game development"
      ]
    },
    {
      "title": "Create a Cyberpunk street in Unreal Engine 5",
      "url": "https://www.udemy.com/course/cyberpunkue5/",
      "bio": "Unreal Engine 5 Beginner Friendly",
      "objectives": [
        "create environment with unreal engine 5",
        "How to use Unreal Engine 5's cinematic sequencer to make CG animation",
        "Installing Unreal Engine 5",
        "Adding and working with cameras",
        "Create animation in unreal engine 5",
        "How to use unreal engine 5",
        "Introduction to unreal engine 5",
        "Introduction to animation in unreal engine 5"
      ],
      "course_content": {
        "Introduction": [
          "Part One"
        ],
        "Part Two": [
          "Part Two"
        ],
        "Part three": [
          "Part three"
        ],
        "Part four": [
          "Part four"
        ],
        "Part five": [
          "Part five"
        ],
        "Part six": [
          "Part six"
        ],
        "Part seven": [
          "Part seven"
        ]
      },
      "requirements": [
        "Computer that can run Unreal Engine 5",
        "NLE software that can import png sequences",
        "12-core CPU at 3.4 GHz, with an NVIDIA RTX 2080 or AMD Radeon 5700 XT graphics card or higher, and 64 GB of system RAM 500GB Hard Drive Space",
        "Operating System Windows 10 64-bit Processor Quad-core Intel or AMD, 2.5 GHz or faster Memory 8 GB RAM Video Card/DirectX Version DirectX 11 or DirectX 12 compatible graphics card"
      ],
      "description": "Now just a disclaimer if you want to use the same exact buildings i used in this course you are going to have to buy two cyberpunk kitbash3d assets but you can also use other free assets from the epic marketplace if you would like. Its totally up to you.\n\n\nHARDWARE I USED FOR THIS COURSE:\nIntel(R) Core(TM) i7-10700K CPU @ 3.80GHz   3.79 GHz\nRTX 3060\n16GB RAM\n1 TB SSD\nWindows OS\n\n\nHARDWARE REQUIREMENTS:\n12-Core CPU @ 3.4 GHz\n64 GB RAM\nGeForce RTX 2080 and up\nAtleast 8GB of VRAM\nWe will be using the free City Sample from the Epic Marketplace in this course so you will need to be able to run and open that project.\n\n\nSo you wanna impress your hot neighbor but you dont know how? Lucky for you today i released my how to make a cyberpunk street in unreal engine 5 for beginners. For the price of 2 gallons of gas and 2 hours of your time you will go from not knowing about unreal engine to creating this an amazing cyberpunk street environment...\n\n\nIve said this last year and I will say it again and again. Unreal Engine 5 is the future so you better get on it your gonna left behind. For my loyal supporters who will purchase this course, thank you. and for you people who wont, i hope your graphics card catch on fire.\n\n\nTable of contents:\n\n\nPart 1\n\n\nInstalling Unreal Engine 5\nCreating project with City Sample Demo (free from Epic Marketplace)\nPurchasing two Cyberpunk assets from Kitbash3d WILL HAVE TO PURCHASE SEPARATELY IF YOU WANT YOUR FINAL PROJECT TO LOOK LIKE MINE) kitbash3d\nMerging Kitbash3d assets with City Sample Demo project\nCreating new blank level\nQuick viewport controls overview\n\n\nPart 2\n\n\nPlacing cyberpunk buildings and props into the level\nWalking around the level for the first time using Third Person Template from City Sample Demo\nCreating road using new Modeling plugin built in UE5\nAdding  vehicles from sample as size reference\nQuixel megascan\nDownloading free Quixel Megascan Assets\nCreating blend materials using Quixel Bridge for the Road\n\n\nPart 3\nEnabling Lumen\nEnabling Virtual Shadow map\nDeleting all default lights from the scene to start from scratch\nCreate post process volume for the level\nSetting base exposure\nAdding street props\n\n\nPart 4\nCreating lights for base exposure\nCreating more lights in the scene\nFinessing the road\n\n\nPart 5\nPopulating the scene with crowd ai from the city sample demo\nPopulating the scene with vehicles from the city sample demo\nAdding more crowd\nadd more props\n\n\nPart 6\nDownloading free high quality characters from the epic marketplace\nGetting rid of the nasty texture streaming error\nEnabling and creating cloth physics\nChecking out the scene statistics by the number\nPart 7\n\n\nCreating movie sequence\nCreating camera\nAnimating and keyframing camera\nEnabling Movie Render Queue\nMovie Render queue settings\nMovie Render queue console variables\nSaving Movie Render queue presets\nRendering the sequence\nChecking out the rendered sequence in NLE\nThank you!",
      "target_audience": [
        "Beginner Unreal Engine 5 users",
        "Unreal Engine 5 students",
        "Animation students",
        "CG animators",
        "Virtual production",
        "Virtual Production students",
        "VFX students",
        "3d modeler",
        "movie previz",
        "Unreal Engine 5 Beginners"
      ]
    },
    {
      "title": "How to Make a Top Down 2D Action RPG in Unity 2022",
      "url": "https://www.udemy.com/course/top-down-rpg-in-unity-2022/",
      "bio": "State Machine Animations, Combat, and Level Building Basics Coded in C#",
      "objectives": [
        "Learn how to create a player character with movement, attacks with knockback, and physics",
        "Make an enemy that will chase and damage players - optionally other enemies too",
        "Build 2D game levels with tilemap and tileset tools",
        "Setup animations for your characters using the unity animation state machine tools",
        "Add floating text to indicate damage dealt to enemies or players",
        "Explore the differences between kinematic and dynamic rigidbody movement and physics",
        "Receive player input through the new InputSystem package"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Part 1": [
          "What to Expect in Part 1",
          "Assets Importing",
          "Creating Player Game Objects",
          "Level Tileset and Tilemap Setup",
          "InputSystem & Player Controller Setup",
          "Player Kinematic Rigidbody Movement & Collisions",
          "Editor Speed Tip & Controlling Sprite Sorting",
          "Sliding Along Walls",
          "Character Animator and Animators Setup",
          "Correcting Collisions",
          "Cinemachine Follow Camera",
          "Player Attack Animation Setup",
          "Attack Hitbox",
          "Controlling Attack Direction",
          "Slime Enemy & Hitting with Sword",
          "Slime Animator & Animations",
          "Part 1 Wrapup"
        ],
        "Part 2": [
          "Character Run and Sprite Flip",
          "Player Controller Starting Point",
          "Transition to Run Animation",
          "Player Attack State",
          "Slime Animator Setup",
          "Slime Script",
          "Sword Swing Hitbox",
          "Receiving Damage",
          "Slime - Hit and Death Animation Transitions",
          "Controlling Sword Hit Direction",
          "Hit Knockback",
          "IDamageable Interface for Damageable Objects",
          "Knockback Force and Direction",
          "Destroy Object",
          "Slime Hit Color Change",
          "Correcting Player Transform for Sword Knockback",
          "Slime Damage to Player",
          "Health Manager Component",
          "Lock Movement on Defeat",
          "Knockback the Player",
          "(Update!) Better Knockbacks using Add Force and Linear Drag Only",
          "Player Movement by Forces",
          "Setting a Max Speed for Player",
          "Slimes Aggro and Chase Player",
          "Floating Damage Numbers with Text Mesh Pro",
          "Fading Text",
          "Instantiating Text Prefabs above Hit Characters",
          "Invulnerability Timer",
          "Course Wrapup"
        ]
      },
      "requirements": [
        "Some programming experience will definitely help. I walk through each line of code to explain things thoroughly.",
        "Make sure you have Unity 2022.1 or newer installed. Best to use stable versions to avoid bugs."
      ],
      "description": "Learn the basics on how to build a Top Down 2D Action RPG (think classic Zelda games) inside of Unity 2022. The main focuses of this course is on creating a working player with a sword attack, a slime enemy to chase and damage the player, and building a level to play on with pixel art tilesets including wall collisions. Another key focus is demonstrating the differences between kinematic physics and unity dynamic rigidbody physics with two versions of the player controller script so you can choose which method works best for you and your own games. Also important is the cinemachine package for creating a follow camera to track your player but maintain pixel perfect settings in Unity to avoid any screen tears or distortions.\nIn this course, we'll cover much of the core gameplay essentials games in this genre will need in their main gameplay cycle\nPlayer Movement and Attacks with new InputSystem package\nBuilding Tilemaps from Tilesets\nMovement with Kinematic and Dynamic Rigidbodies\nMaking a Slime Enemy which can chase player, cause damage, and be slain\nSetting up animations and transitions with Unity animation state machines\nCreating hitboxes for directional attacks\nFloating Damage Text numbers\nEverything is written in C#, the standard language for unity games. You don't have to be a programming master. If you get stuck, feel free to download the finished scripts included in this course so you can get up and running.",
      "target_audience": [
        "Helping you to build your first RPG game",
        "Students somewhere between beginners and intermediate skill level",
        "If you like coding and want to get better at C# especially in Unity engine"
      ]
    },
    {
      "title": "Unity - Beginner Level Build a Game from Start to Finish",
      "url": "https://www.udemy.com/course/unity-beginner-level-game-from-start-to-finish/",
      "bio": "Build a complete game while learning to code",
      "objectives": [
        "How to get started using Unity.",
        "The basic behind 3D game Develpoment.",
        "Learn the powerful programming language C# from scratch.",
        "Learn to solve problems.",
        "Design Terrains.",
        "Animations.",
        "Assets Control",
        "Components",
        "Functions and Variables",
        "Creating UI Menu",
        "Enemy AI - Artificial Intelligence",
        "Fundamentals of building a 3D game."
      ],
      "course_content": {
        "Introduction": [
          "Intro",
          "Expectation",
          "Installing Unity and Visual Studio"
        ],
        "Project Setup": [
          "New Project",
          "Unity Overview"
        ],
        "Character Setup and Movement": [
          "GameObjects and Components",
          "Assest and Folders",
          "Creating a scene for testing",
          "Importing Assets and Materials",
          "Understand Character Movement",
          "Code Evaluation",
          "Script Overview",
          "Character Jump",
          "Camera Follow",
          "Character Controller Script",
          "Import Character",
          "Character Setup"
        ],
        "Character Animations": [
          "Idle Animation",
          "Run Animation",
          "Jump Animation",
          "Animation Handler",
          "Fall and Land Animation"
        ],
        "Triggers and Functions": [
          "Triggers",
          "Function with Parameters",
          "Damage Indecator",
          "Prefabs"
        ],
        "Game Items and Health System": [
          "Health Potion",
          "Player Health Script",
          "Health System Recap",
          "Pickup FX",
          "Health Complete and Working",
          "Animate Pickup Items",
          "Pickup Complete and Working",
          "Heart Icon",
          "Heart Icon Complete and Working",
          "Yay, we did it!",
          "Recap"
        ],
        "Enemy AI - Artificial Intelligence": [
          "First Enemy AI",
          "Enemy Target Player",
          "Enemy Chase Player",
          "Melee Enemy",
          "Range Enemy",
          "Range Enemy Throw Bombs",
          "Bomb Explosion",
          "Bomb Knockback",
          "Player Knockback"
        ],
        "Let's give the Player and Enemy some abilities": [
          "The Turns have Tabled",
          "Fix Respawn Issues",
          "CheckPoint",
          "Player Push Objects",
          "Have Fun",
          "Trigger and Collision",
          "Player Attack",
          "Player Attack Swing",
          "Recap",
          "Sword Hit Detection",
          "Melee Enemy Death",
          "Enemy Recap",
          "Final look at the Enemy script"
        ],
        "Enemy AI - Makeover": [
          "Spider",
          "Spider Behavior",
          "Cannon",
          "Cannon Behavior",
          "Enemy AI Makeover Complete",
          "Sandbox is Complete"
        ],
        "A Break a Coding": [
          "Break from Coding",
          "Outside on the beach",
          "Ocean and Cave",
          "Outside is done.",
          "Inside also Done",
          "Cave One",
          "Cave Two",
          "Cave Three",
          "Terrain Overview",
          "Design it your way"
        ]
      },
      "requirements": [
        "No programming experience is needed. You will learn everything you need to know.",
        "Unity3D Installed",
        "Visual Studio"
      ],
      "description": "This course is a full-packed course filled with lectors that will take you from zero to hero in no time.\nIn this course, we will laugh and have fun while we learn the art of game development. Let’s learn to code using C# and Unity 3D to bring our game idea to life. We will be building a small action RPG still game using a small mouse named Tombo. This course will teach you terrain designing, animations, UI, AI, and much more.\nThis course is perfect for students who have never used Unity before, or students who have done little and would like to learn more. This course is for you if you find Unity3D difficult. It’s all about understanding what you’re doing.\nAfter this course, you will be an unstoppable force of awesomeness, able to build any game ideas that you have in the future. Build your project, learn a new skill, refresh your knowledge, and whatever your goal, get started here.\nAll students will gain permanent access to this course and our Discord channel for constant support. You will also have my YouTube channel that you can follow to learn more during your coding journey.\nAll students will have full support during and after this course.",
      "target_audience": [
        "Mainly for ages 9+ How is interesting in making there very 3D Game.",
        "If you think making games are hard, THIS IS FOR YOU!"
      ]
    },
    {
      "title": "Substance Painter - Rune Sword",
      "url": "https://www.udemy.com/course/substance-painter-rune-sword/",
      "bio": "Create a AAA quality sword asset and import it into Unreal Engine and Unity!",
      "objectives": [
        "Texturing a game asset in Substance Painter",
        "Baking mesh maps from high-poly to low-poly meshes",
        "What the different maps are and what they do for our mesh",
        "How to apply masks to layers and layer groups",
        "Use of paint and fill layers, filters, and generators",
        "Adding color variations, edge wear, dirt, ambient occlusion, post process effects, and more!"
      ],
      "course_content": {
        "Project Setup and Baking Mesh Maps": [
          "Introduction",
          "Project Creation, Baking, Layers, and Layer Groups",
          "Baking Mesh Maps",
          "Viewing Mesh Maps",
          "Layers and Masking",
          "Layer Groups"
        ],
        "Texturing the Blade": [
          "The Blade - Color Variations",
          "The Blade - Edge Wear",
          "The Blade - Ambient Occlusion",
          "The Blade - Dirt",
          "The Blade - Blade Touch Up"
        ],
        "Guard and Disk": [
          "Guard and Disk - Color Variations",
          "Guard and Disk - Edge Wear",
          "Guard and Disk - Dirt"
        ],
        "The Handle Wrap": [
          "Wrap Highlights",
          "Wrap Dirt",
          "Post Process Effects"
        ],
        "Emission, Post Process Effects, and Exporting our Textures for Game Engines": [
          "Emission",
          "Exporting Textures for UE5",
          "Exporting Textures for Unity",
          "Congratulations! Bonus Lecture"
        ]
      },
      "requirements": [
        "No experience in Substance Painter necessary",
        "You must have an active Substance Painter license. You can use a subscription, or buy the course from Steam! Apply for a student license from Adobe for a discount"
      ],
      "description": "Welcome to the Substance Painter – Rune Sword Course!\nThis is a beginner level course teaching the basics of Substance Painter to create a AAA quality rune sword, complete with PBR textures (don’t worry, you’ll learn what those are), with emissive glowing runes that shine their magical light in the dark!\nYou’ll be introduced to Substance Painter and how to get your meshes into the software. This course uses the Rune Sword, modeled in my Blender Sculpting – Rune Sword course, but you’ll be provided with both the high and low poly mesh for this course!\nWe’ll learn all the basics of Substance Painter, including (but not limited to):\n· Importing meshes\n· Baking mesh maps\n· What the mesh maps do for our materials and how to use them\n· Layers\n· The Layer Stack and Layer Groups\n· Masking\n· Adding fill layers and grunge maps\n· Using curvature to get Edge Wear and highlights/shadows\n· Filters, Modifiers, Post Processing Effects\n· Realistic and Stylized techniques\n· Hand-painted looks without the need to hand-paint\n· Emissive materials and painting layers by hand\n· Adjusting bake parameters to get the high-poly details onto the low poly mesh in an efficient manner\n· Exporting textures and importing our meshes into Unreal Engine and Unity\n· Creating the materials and applying the textures in both game engines\nThis course assumes you have access to Substance Painter. You can have a subscription or buy the program with a one-time payment through Steam. Students have also obtained student licenses to get a discount, so look into that!\nBy the end of the course, you’ll be able to professionally texture your meshes to make beautiful game assets! This is a great portfolio piece that you can add to your collection! All skills are explained in depth so you understand everything you’re doing and will be able to recreate these processes with your own models.\nJump in, and let’s create this beautiful Rune Sword together!",
      "target_audience": [
        "Those who wish to use Substance Painter to texture their meshes and create AAA quality assets for their games or animations!"
      ]
    },
    {
      "title": "Making an AI Eight-Ball Pool Game in Unity",
      "url": "https://www.udemy.com/course/eightball-pool-with-unity/",
      "bio": "Learn how to create publishable 3D physics-based mobile games in Unity",
      "objectives": [
        "You will learn transferable skills that will enable you to create publishable 3D physics-based mobile games using Unity",
        "You will learn how to approach planning for your projects",
        "You will learn how to incorporate ads into your Unity project",
        "You will learn how to create reasonably challenging player AI",
        "You will learn how to apply prototyping to create you games incrementally",
        "You will learn how to tweak the physics settings to create realistic behavior"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Lesson 0-1 : Getting Started with Unity"
        ],
        "Getting Started": [
          "[LearningTrack]Lesson 1-1 : Setting Up the Scene",
          "[FastTrack]Lesson 1-1 : Setting Up the Scene",
          "[LearningTrack]Lesson 1-2 : Setting Up the Camera",
          "[FastTrack]Lesson 1-2 : Setting Up the Camera",
          "[LearningTrack]Lesson 1-3: Adding the Cuestick",
          "[FastTrack]Lesson 1-3: Adding the Cuestick",
          "Lesson 2-0: Intro to Game Design"
        ],
        "Adding Game Controls": [
          "[LearningTrack]Lesson 2-1: Rotating the Cuestick",
          "[FastTrack]Lesson 2-1: Rotating the Cuestick",
          "[LearningTrack]Lesson 2-2: Rotating the Cuestick Pt. 2",
          "[FastTrack]Lesson 2-2: Rotating the Cuestick Pt. 2",
          "[LearningTrack]Lesson 2-3: Rotating the Cuestick Pt. 3",
          "[FastTrack]Lesson 2-3: Rotating the Cuestick Pt. 3",
          "[LearningTrack]Lesson 2-4: Rotating the Cuestick Pt. 4",
          "[FastTrack]Lesson 2-4: Rotating the Cuestick Pt. 4",
          "[LearningTrack]Lesson 2-5: Adding Hit Controller",
          "[FastTrack]Lesson 2-5: Adding Hit Controller"
        ],
        "Adding Physics": [
          "[LearningTrack]Lesson 3-1: Adding Colliders",
          "[FastTrack]Lesson 3-1: Adding Colliders",
          "[LearningTrack]Lesson 3-2: Adding Force to the Cueball",
          "[FastTrack]Lesson 3-2: Adding Force to the Cueball",
          "[LearningTrack]Lesson 3-3: Adding Bounciness to the Cueball",
          "[FastTrack]Lesson 3-3: Adding Bounciness to the Cueball"
        ],
        "Adding Game Controls Pt. 2": [
          "[LearningTrack]Lesson 4-1: Adjusting Cuestick Rotation",
          "[FastTrack]Lesson 4-1: Adjusting Cuestick Rotation",
          "[LearningTrack]Lesson 4-2: Adding an Aim Line",
          "[FastTrack]Lesson 4-2: Adding an Aim Line",
          "[LearningTrack]Lesson 4-3: Repositioning the Cueball",
          "[FastTrack]Lesson 4-3: Repositioning the Cueball",
          "[LearningTrack]Lesson 4-4: Repositioning the Cueball Pt. 2",
          "[FastTrack]Lesson 4-4: Repositioning the Cueball Pt. 2",
          "[LearningTrack]Lesson 4-5: Adding Elevation and Spin Controllers",
          "[FastTrack]Lesson 4-5: Adding Elevation and Spin Controllers",
          "[LearningTrack]Lesson 4-6: Adding Custom Event System",
          "[FastTrack]Lesson 4-6: Adding Custom Event System",
          "[LearningTrack]Lesson 4-7: Writing the Elevation Controller",
          "[FastTrack]Lesson 4-7: Writing the Elevation Controller",
          "[LearningTrack]Lesson 4-8: Writing the Spin Controller",
          "[FastTrack]Lesson 4-8: Writing the Spin Controller",
          "[LearningTrack]Lesson 4-9: Repositioning the Cuestick",
          "[FastTrack]Lesson 4-9: Repositioning the Cuestick",
          "[LearningTrack]Lesson 4-10: Fine-Tuning Cueball Spin",
          "[FastTrack]Lesson 4-10: Fine-Tuning Cueball Spin",
          "[LearningTrack]Lesson 4-11: Enabling Jump and Swerve Shots",
          "[FastTrack]Lesson 4-11: Enabling Jump and Swerve Shots"
        ],
        "Fine-Tuning the Visuals and the UI": [
          "[LearningTrack]Lesson 5-1: Replacing the Old Assets",
          "[LearningTrack]Lesson 5-2: Racking the Object Balls",
          "[LearningTrack]Lesson 5-3: Fine-Tuning the Breakshot",
          "[LearningTrack]Lesson 5-4: Fine-Tuning the Visuals",
          "[LearningTrack]Lesson 5-5: Fine-Tuning the Aiming Line"
        ],
        "Building the Game to Android and iOS": [
          "[LearningTrack]Lesson 6-1: Adjusting the UI to Various Screen Resolutions",
          "[LearningTrack]Lesson 6-2: Adding Touch Control",
          "[LearningTrack]Lesson 6-3: Building the Game to Android",
          "[LearningTrack]Lesson 6-4: Building the Game to iOS"
        ],
        "Adding Game Logic": [
          "[LearningTrack]Lesson 7-1: Adding Game Logic",
          "[LearningTrack]Lesson 7-2: Outlining Game Logic",
          "[LearningTrack]Lesson 7-3: Adding Game Logic Pt. 2",
          "[LearningTrack]Lesson 7-4: Adding Game Logic Pt. 3",
          "[LearningTrack]Lesson 7-5: Adding Game Logic Pt. 4",
          "[LearningTrack]Lesson 7-6: Integrating Game Logic",
          "[LearningTrack]Lesson 7-7: Debugging Game Logic"
        ],
        "Improving the UI/UX": [
          "[LearningTrack]Lesson 8-1: Expanding the UI",
          "[LearningTrack]Lesson 8-2: Writing the Turn Indicator",
          "[LearningTrack]Lesson 8-3: Writing the Ball Displays",
          "[LearningTrack]Lesson 8-4: Writing the Message PopUp",
          "[LearningTrack]Lesson 8-5: Debugging Game Logic",
          "[LearningTrack]Lesson 8-6: Adding the Cueball Mover",
          "[LearningTrack]Lesson 8-7: Tweaking the Aiming System",
          "[LearningTrack]Lesson 8-8: Tweaking the Ghostball Behavior",
          "[LearningTrack]Lesson 8-9: Adding the Game Menu",
          "[LearningTrack]Lesson 8-10: Adding Game Restart",
          "[LearningTrack]Lesson 8-11: Adding the Startup Scene"
        ],
        "Adding Audio": [
          "[LearningTrack]Lesson 9-1: Playing Background Music",
          "[LearningTrack]Lesson 9-2: Playing Sound Effects",
          "[LearningTrack]Lesson 9-3: Adjusting SFX Volume",
          "[LearningTrack]Lesson 9-4: Adding SFX for Special Cases",
          "[LearningTrack]Lesson 9-5: Adding UI and Info SFX",
          "[LearningTrack]Lesson 9-6: Muting Audio"
        ]
      },
      "requirements": [
        "This course is designed for people with no prior experience with Unity"
      ],
      "description": "In this course, we’re going to be making a 3D physics-based 8-ball pool game using Unity. With that said, the ultimate goal of this course is not to show you how to make an eight-ball pool game per se, the ultimate goal is to use it to help you learn the basic principles of game-making in Unity that will enable you to create your own games.\n\n\nOne of the prominent features of our game is a real-life physics simulation.\n\n\nIn other words, in the game that we will be making in this course, the player will be able to make jump shots, that make the ball bounce off the table; and swerve shots, that make the ball move in a curve.\n\n\nAnother distinct feature of our game is a pretty hard-to-beat AI player. What’s important about the AI part is that while working on it, you will learn how to code complex data-driven game logic, which is a pretty valuable experience.\n\n\nIn this course we will not only show you how to just make a game in Unity but we will show you how to make a publishable mobile game. The eight-ball pool game that we will use as an example in this course has been published on both Apple’s App Store  and Google’s Play Market and we will be making this game with an ultimate publishing goal in mind so that you can get the full experience.\n\n\nAnd finally, since we aim to show you how to make a publishable game, we will also show you how to incorporate basic monetization by integrating ads into our project.\n\n\nAlright, again, in this course, we’re using eight-ball pool as a learning example, to teach you transferrable skills that you can apply to any other game that you might want to make.\n\n\nIn order to achieve that, we provide what I like to think of as exhaustive explanation, while in reality, for some of you, it might be exhausting explanation. Therefore, the first chapters of this course have two versions of the same lesson, one with detailed explanation, and one with very little explanation.\n\n\nWe call them the Fast Track and the Learning Track lessons. So if you already have some experience with Unity, you might want to go for the Fast Track lessons, and switch to the Learning Track when you feel like you might need additional explanation.\n\n\nAnother feature of this course is based on the idea that learning is never a straight path, meaning quite often when we bump into something new, we cannot fully comprehend it as it requires additional knowledge and practice to become fully palatable.\n\n\nSo, throughout the entire course, we will be guiding you back to the previous lessons and we encourage you to actually do so. To help you navigate through the course, we have Glossary that contains descriptions of important concepts that you need to know to feel more comfortable with Unity. The Glossary also contains a list of references where the concepts are being explained and applied. In addition to Glossary, in some lessons, we also provide links to our YouTube videos that can give you additional information related to the lesson\n\n\nNow, this course is designed for people with no experience with Unity. Zero\n\n\nHowever, if you’re new to programming in general and if you’re not familiar with object-oriented programming, we recommend that you check out our YouTube channel first.\n\n\nThe main reason why we’re not covering programming in general in this course is simply because Unity is not a good choice for that.\n\n\nHowever, this doesn’t mean that this course is not a good fit if you’re completely new to programming. Just go over the videos that we have on our YouTube channel, and you will be fine.\n\n\nAnother feature of this course is the prototyping approach. Even though we’ve made and published the game before we started working on this course, we decided to show you a somewhat more natural process of game development where we start simple, with primitive graphics and simple functionality and expand our project throughout the course.\n\n\nFor example, instead of spending a lot of time perfecting the game controls or the UI, we first create a more primitive version and then polish them in smaller increments. And as we do that, we show you how to fix common bugs and address larger issues that arise when you expand your project.\n\n\nWe believe this approach is more beneficial for learning as the experiences you get in the process will enable you to address similar issues in other projects that you might be interested to be involved in in the future.\n\n\n*Billiard Table Vectors by Vecteezy",
      "target_audience": [
        "This course is for people who wish to learn how to make publishable 3D physics-based mobile games using the Unity game engine."
      ]
    },
    {
      "title": "The Ultimate Input System with Rebinding in Unity",
      "url": "https://www.udemy.com/course/unity-input-system-rebind/",
      "bio": "Set up the new Input System for 2D(RPG,Platformer) and 3D games in Unity and create a fully functional Rebinding system",
      "objectives": [
        "Learn the new Input System and its 4 main ways of implementation",
        "2D Platformer, 2D top down RPG and 3D example",
        "Rebinding System which detects and swaps duplicates",
        "Transfer your project from the old to the new Input System"
      ],
      "course_content": {
        "Introduction and Setup": [
          "Introduction and Project Setup",
          "Documentation Update- Unity 6",
          "Import Input System"
        ],
        "Direct Workflow": [
          "Intro and Keyboard Implementation",
          "Gamepad Implementation",
          "Mouse Implementation",
          "Movement and Examples"
        ],
        "Embedded Workflow": [
          "Embedded set up and Syntax",
          "Embedded Syntax 2",
          "Embedded Example"
        ],
        "Action Asset Workflow [2D PLATFORMER]": [
          "Download Starting Project",
          "Platformer Intro",
          "Input Actions",
          "Control Schemes",
          "Inspector Refference Approach",
          "C# Generated Approach",
          "Player Movement",
          "Flip",
          "Jump",
          "Ground Check",
          "Attack Preparations",
          "Basic Animations",
          "Blend Tree and Jump Animation",
          "Attack Animation"
        ],
        "Interactions and Processors": [
          "Interactions",
          "Processors"
        ],
        "Started vs Performed": [
          "Difference between phases"
        ],
        "Additional Approach": [
          "Additional Approach"
        ],
        "Buttons with Modifiers": [
          "Buttons with Modifiers"
        ],
        "Adjusting Gamepad Behavior": [
          "Adjusting Gamepad Behavior"
        ],
        "Player Input Workflow [2D TOP DOWN RPG]": [
          "Download Starting Project",
          "Player Input Preparations",
          "Send Messages",
          "Broadcast Messages",
          "Invoke Unity Events",
          "Invoke C# Events",
          "Move Animations"
        ]
      },
      "requirements": [
        "Beginner C# knowledge",
        "Unity Editor Basics"
      ],
      "description": "If you struggle with the new Input System, or you want to transfer your projects from the old input system and create a functional rebinding system, then you are at the right place.\nYou can easily follow the course by downloading Unity projects: 2D Platformer and 2D top-down RPG perspective. After you download them, unzip them and open them through Unity Editor. Then you are ready to start following the lectures. Of course, if you wish, you can use your assets. We will also quickly analyze the input of Unity's official 3D asset and see which workflow they use.\nIn this course, you will learn how to use the new Input System in 4 main ways:\nDirect\nEmbedded Actions\nActions Asset\nPlayer Input Component\nSome of the main ways have iterations within them, and of course, we will go through all those iterations. This gives you knowledge and options to choose what is the best option for your game and coding style.\nIn the last part of the course, we will create a custom rebinding system. This system is really important if you want to make serious commercial games.\nTrust me, I have seen it multiple times, you can get negative reviews on Steam if you don't have a rebinding system. User experience is limited if players can't adjust the game and controls for their needs. So, every commercial game needs a rebinding system.\nThe rebinding system from this course is unique, you won't find tutorials about it anywhere else. The system will automatically detect and swap duplicate bindings. The changes are persistent, meaning they will be preserved between play sessions.\nSo, improve your game development skills, learn the new input system in the right way, and create a professional rebinding system that players can use to set up custom controls.\nCustomer Support:\nI respond to all messages if you get stuck anywhere or need help.\nThank you for your time and see you in the course lessons.",
      "target_audience": [
        "Anyone who wants to learn the new input system",
        "Anyone who wants to create commercial games with rebinding system",
        "Anyone who wants to transfer projects from the old to the new input system"
      ]
    },
    {
      "title": "Game Dev Crash Course (Clickteam Fusion 2.5)",
      "url": "https://www.udemy.com/course/game-dev-crash-course-fusion/",
      "bio": "Let's dive in the deep end and get game developing!",
      "objectives": [
        "Level up to Intermediate or Advanced with Clickteam Fusion 2.5",
        "Be able to develop their own game engine systems",
        "Be able to design robust game development routines"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "The Fusion 2.5 Interface",
          "The Common Objects",
          "Creating Active Objects at Runtime",
          "Add Backdrops at Runtime",
          "The Built-in Timer",
          "Flags in Fusion 2.5"
        ],
        "Using Dynamic Expressions": [
          "Creating Objects by Name",
          "Using Basic Variables in the Expression Editor",
          "Left$ - Right$ - Mid$ Sub-string Extraction",
          "Converting Datatypes with Str$ and Val$"
        ],
        "Game Effects": [
          "Score - Fade Effect",
          "The Parallax Effect (Scrolling)",
          "After-Image Effect",
          "Spawning Random Enemies",
          "Using Video (And Green Screen)",
          "Rain Effect in Fusion 2.5"
        ],
        "Scoping": [
          "Manual Parent and Child System",
          "Using the Parent and Child System Further",
          "Speading IDs",
          "Using SpreadID to scope an instance"
        ],
        "The Fundamentals": [
          "Random and RRandom in Fusion 2.5",
          "Only one action when event loops",
          "Restricting Actions",
          "Fire Events (and fire event X times after X delay)",
          "Building a Custom Timer (Part 1)",
          "Building a Custom Timer (Part 2)"
        ],
        "Specific Objects and Extensions": [
          "The Window Object",
          "GET Objects (Referencing an online API)",
          "The FIle-Folder Object (Copying Files)",
          "(ActiveX) Radio Streaming in Fusion 2.5",
          "Android Exporter Properties (and Setup)"
        ],
        "FastLoops in Fusion 2.5": [
          "How does a fastloop work? #1",
          "How does a fastloop work? #2",
          "Another Introduction to Fastloops",
          "An Introduction to the String Tokenizer"
        ],
        "Handling Data": [
          "Part 1 - Creating an Avatar Builder (Save / Load Data)",
          "Part 2 - Creating an Avatar Builder (Save / Load Data)",
          "An Introduction to INI files",
          "Build a Save File Feature",
          "Profile Selection (lists)",
          "A Quiz Editor (String Tokenizer)",
          "A Quiz App (Assignment)"
        ],
        "Conclusion": [
          "Conclusion"
        ]
      },
      "requirements": [
        "Clickteam Fusion Free Edition",
        "Clickteam Fusion 2.5 Standard",
        "Clickteam Fusion 2.5 Developer",
        "Clickteam Fusion Standalone / Steam"
      ],
      "description": "Want to get to grips with designing and coding your own games and apps with Clickteam Fusion 2.5 in no-time at all? This course is for you. This is a no-nonsense crash course in Clickteam Fusion 2.5! Get ahead of the current range of people learning this awesome and powerful development tool with this crash course designed for beginners, intermediates and advanced!\nIn this game development course you will learn a lot of cool Game Development concepts and a lot of Game Design concepts but will also learn how to implement these concepts into your very own games that you design and develop with Clickteam Fusion 2.5. You will have access to the Course Forum where you can also discuss topics covered in the course and topics that aren't covered.\nThis course has been designed to be understandable by anyone including beginners intermediates and advanced users, artists and programmers  alike who wish to expand their knowledge of game design and game development with Clickteam Fusion 2.5.\nBy the end of this crash course you will have developed the ability to:\nUse Clickteam Fusion 2.5\nCreate and use Fastloops\nCreate and use ForEach Loops\nDesign and Develop some cool game effects\nLearn all about timers and developing your own custom timers\nFlags, Alterable Values, Alterable Strings, Global Strings and Global Values\nLearn how to create your own pairing system for Active Objects\nLearn how to create, write, read and share data across multiple objects, frames and files\nLearn how to use and manipulate data with Profile Selection screens etc.\nLearn how to design your own Quiz Editor\nLearn how to develop your own Quiz App\nBuild Save and Load Game routines, saving and loading data\nCreate awesome things like Avatar Systems\nLearn how to make a Radio Streaming app\nManipulate Windows\nSpread IDs, manipulate IDs and so much more!\nEnroll right now and get instant access to this course and get started immediately!\nStart learning more about Game Development today with this course from OneClick Training!",
      "target_audience": [
        "Anyone who wants to learn Game Design",
        "Anyone who wants to learn Game Development",
        "Anyone who wants to learn Clickteam Fusion 2.5",
        "Anyone who wants to learn Mobile Development"
      ]
    },
    {
      "title": "Poser Pro Game Dev Fundamentals",
      "url": "https://www.udemy.com/course/poser-pro-game-dev-fundamentals/",
      "bio": "Bridge the gap between the character and scene modeling in Poser and the game building tools of Unity 3D.",
      "objectives": [
        "how to develop characters and animate scenes with the Poser Pro toolset",
        "how to import Poser creations into Unity to create interactive game content"
      ],
      "course_content": {
        "Introduction": [
          "Important - Download These First - Working Files",
          "Course Overview And About The Author",
          "What Is Not Covered",
          "How To Access Your Working Files"
        ],
        "Before Getting Started": [
          "Keyboard Shortcuts For MAC And PC"
        ],
        "Environment Development": [
          "Using Prebuilt Objects",
          "Creating Scene Colliders",
          "Exporting Static Objects"
        ],
        "Basic Character Preparation": [
          "Understanding The Poser-Unity Relationship",
          "Exporting Andy",
          "Individual Character Animations",
          "Working With Andy In Unity"
        ],
        "Advanced Character Clothing": [
          "Morphing Clothing Types",
          "Adjusting Clothing With The Fitting Room - Part 1",
          "Adjusting Clothing With The Fitting Room - Part 2",
          "Adjusting Clothing With The Fitting Room - Part 3",
          "Hair Selection And Clothing Magnets",
          "Combining Figures",
          "Deleting Unseen Polygons",
          "Reducing Polygons In Figures",
          "Reducing Polygons In Objects"
        ],
        "Optional Handling Of Characters In Unity": [
          "Converting Animation Types",
          "Retargeting",
          "Muscle Setup"
        ],
        "Animation Sets For Motion": [
          "How Animation Sets Work",
          "Individual Action Animations",
          "Walking And Running Cycles",
          "Animating Morphs - Part 1",
          "Animating Morphs - Part 2",
          "Exporting And Importing Animation Sets - Part 1",
          "Exporting And Importing Animation Sets - Part 2",
          "Exporting And Importing Animation Sets - Part 3"
        ],
        "Static Morphs": [
          "Using Static Morphs - Pre-Built",
          "Creating And Saving Static Morphs - New Dials",
          "Creating And Saving Static Morphs - Magnets",
          "Clothing And Magnets"
        ],
        "Adding And Working With Props": [
          "Unity And Prop Switching",
          "Adding A Permanent Prop To A Character",
          "Animation Considerations With Props"
        ],
        "Working With Imported FBX Content": [
          "Verifying Successful Import",
          "Modifying FBX Imports"
        ]
      },
      "requirements": [
        "Some background in Poser, such as our beginners course, would be helpful but is not required.",
        "functioning installations of Poser and Unity 3D"
      ],
      "description": "Do you want to create video game characters and scenes using one of the most affordable and user-friendly 3D animation solutions on the market? Animator Mark Bremmer shows how to develop and animate characters and scenes in Poser, and most importantly, how to import them into Unity 3D. This course is designed for users that already have experience with PoserPro 2014 and Unity. You will start by learning about basic character preparation, then jump into learning about advanced character clothing, including morphing clothing types, adjusting clothing with the fitting room, and hair selection and clothing magnets. From there, Mark will teach you about animation sets for motion, such as walking and running cycles, animating morphs, and importing and exporting animation sets.\nThis video tutorial also covers static morphs, adding and working with props, and working with imported FBX content. Finally, you will learn how to rig custom characters. Once you have completed this computer based training course, you will be fully capable of creating and animating your own characters and scenes. Working files are included, allowing you to follow along with the author throughout the lessons.",
      "target_audience": [
        "Anyone interested in quickly creating characters and scenes for 3D games."
      ]
    },
    {
      "title": "Design Machine Learning and AI Level Augmented Reality Apps",
      "url": "https://www.udemy.com/course/augmented-reality-ar-game-development/",
      "bio": "Build Augmented Reality Games including Real-World Object Scanning, Hand Detection & Plane Tracking from Scratch in 2024",
      "objectives": [
        "Understand Location-based Augmented Reality (AR) Game Mechanics",
        "Learn How to Build Augmented Reality Experiences with No Coding, using State-of-the-art AR Templates",
        "Develop Hand Detection in Augmented Reality with Configurable Confidence Values",
        "Design Location-based Augmented Reality Experiences with Intelligent Real-World Object Detection",
        "Explore Advanced Location-based Augmented Reality Game Development Techniques and C# Scripting",
        "Get Started with Niantic Lightship Visual Positioning System (VPS)",
        "Apply Latest Augmented Reality Game Development Techniques to Solve Real-World Problems"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Getting Familiar with Lightship ARDK": [
          "Important Note",
          "Download Lightship 2.xxx Mock Environments and Mock Meshes",
          "Downloading Lightship Augmented Reality Development Kit",
          "Setting Up Unity 3D to Import Lightship Augmented Reality Development Kit",
          "Importing Lightship Augmented Reality Development Kit to Unity 3D"
        ],
        "Build a Plane Detection and AR Object Placement Experience": [
          "Getting Started with Augmented Reality Plane Detection with Lightship Templates",
          "Introduction to Virtual Studio - In-Editor AR Testing Tool by Lightship",
          "Using Virtual Studio to Test AR Plane Detection",
          "Understanding How Plane Detection AR Project Works and Making Customizations",
          "Building the Plane Detection Code in Unity 3D for Testing",
          "Deploying the Plane Detection Project to a Smart Phone",
          "Customizing Augmented Reality with Intelligent Plane Detection Project",
          "Resources"
        ],
        "Bonus: Making Location based AR Experiences with Real World 3D scanning": [
          "Introduction to the AR project that we are going to build",
          "Creating Unity 3D Project and Setting Up AR Framework",
          "AR Framework Configurations",
          "Using Geospatial Browser to Inspect 3D Meshes of Real World Locations",
          "Scanning the Real World with Your Smart Phone and Creating a 3D Model of It",
          "AR Object Anchoring to Real World",
          "Let's Build the Project and Test the Real World AR Authoring Project"
        ],
        "Augmented Reality Application with Hand Tracking for Immersive AR Experiences": [
          "Basics of Human AR - Hand Tracking with Lightship",
          "Creating a Custom Script to Listen for Hand Tracking Event Data",
          "Adding a 3D Model with Animations to Work with Hand Tracking AR Experience",
          "Integrating the Animated 3D Model with Hand Tracking Data using a Custom Script",
          "Setting Configurations via Unity Inspector Panel and Building the Project",
          "Testing the Augmented Reality Hand Tracking Application in Real-World",
          "Resources"
        ],
        "Detecting Real-World Objects and Attributes within an Augmented Reality App": [
          "Exploring Possibilities of Identifying Real-World Objects in AR",
          "Augmented Reality with Semantic Segmentation in Action in Real-World",
          "Understanding How Semantic Segmentation Works in Lightship Templates",
          "Customizing the Template to Detect More Real-World Objects in AR",
          "Demo of the Project in the Real-World",
          "Open-ended Quiz"
        ],
        "Wrapping Up": [
          "Summary and the Wrap-up"
        ]
      },
      "requirements": [
        "Windows or MacOS Computer with an Internet Connection",
        "Basic Understanding on Unity 3D Editor (If you have zero experience in Unity 3D, but want to learn AR, I can help you by providing additional resources)",
        "(Optional) Mobile Device (iOS or Android) to Test Your AR Applications"
      ],
      "description": "Demand for Augmented Reality (AR) applications is currently growing exponentially, and almost all big companies are investing in AR because they believe it is the future. With the bloom of metaverse and Augmented Reality (AR) glasses on the horizon, AR application development skills will be highly rewarding in the future.\n\nWhat if you can design Augmented Reality (AR) games and experiences with the latest state-of-the-art techniques such as real-world object recognition, hand detection, plane tracking, and more without worrying about image processing, video processing, and machine learning stuff?\n\nBut when you search online, the problem is almost all AR Coding courses are outdated, created years ago, and do not contain updated information.\n\nI am Yasas Sri Wickramasinghe, a Ph.D. student at the University of Canterbury, New Zealand. I am doing my research specifically focusing on Augmented Reality Game Design. I am a lecturer, co-founder of an AR/VR startup, and a lead software engineer.\n\n\nI am presenting you with the easiest and most updated Augmented Reality course. This course is suitable for any level, including beginners. However, it will be easy for you to get started quickly if you know how to work in Unity 3D. (Don't worry. If this is the first time you are going to try Unity 3D, let me know. I will send some resources to get familiar with it).\n\n\nIf you are not familiar with designing Augmented Reality experiences,  I guarantee you will be able to design AR apps upon completing this course! You will realize how easy it is to bring your creative ideas into reality with Augmented Reality.\n\n\nLearn how to build advanced Augmented Reality applications with:\nNiantic Lightship ARDK\nUnity 3D\nHand Detection for AR\n3D AR Object Recognition and Plane Tracking\nConfigurations in AR\nBuilding and Testing AR Applications on Mobile Devices\n\nAlso, suppose you are a research student looking into Augmented Reality, Human-computer interaction, User experience (UX) designing, or User Interfaces (UI) designing. In that case, you can enroll in this course and add a lot of value to your work.\n\nThis course mostly focuses on practical aspects of Augmented Reality, and it will be a great investment. I will be providing all the source code and further resources as well. All the students can reach me for further clarification.\n\nSo, why are you waiting? If all of this sounds great to you, Let's start learning!\n100% money-back guaranteed!\n\n\nCheers,\nYasas",
      "target_audience": [
        "Passionate individuals who want to quickly build Augmented Reality (AR) games and experiences using LATEST industry tools",
        "Students who want to understand Augmented Reality (AR) by practically building AR Apps",
        "Business owners and stakeholders who are looking forward to use Augmented Reality (AR) to their business use-cases to leverage sales",
        "Researchers who are exploring Augmented Reality (AR) related research fields and who want to quickly build prototypes for their user studies and experiements"
      ]
    },
    {
      "title": "Godot C# The Ultimate Metroidvania Developer’s Guide",
      "url": "https://www.udemy.com/course/godot-c-sharp-the-ultimate-metroidvania-developers-guide/",
      "bio": "Learn Everything You Need To Create Your Metroidvania Dream Game",
      "objectives": [
        "Creating a 2D side scrolling MetroidVania game in Godot using C#",
        "Setting up Godot 3.x Tilemaps for Autotiling to build levels",
        "Rope swinging",
        "Rope traversing",
        "2D parallax background scrolling",
        "Setting up character controller using the class state pattern",
        "Setting up Inventory and Equipment",
        "Setting up shop - buying and selling items",
        "Equipping and unequipping items",
        "Customizing gamepad and keyboard controls",
        "Jump buffering",
        "Coyote time",
        "Corner correcting jumps",
        "One-way platforms",
        "Automatic Minimap",
        "Advanced lifebar",
        "Scene transition",
        "Pause game menu",
        "Settings menu",
        "Opening chests",
        "Bow and arrow",
        "Wall crawler AI",
        "Camera setup",
        "And much more...."
      ],
      "course_content": {},
      "requirements": [
        "Godot 3.x .NET version",
        "A PC or Mac"
      ],
      "description": "Are you eager to create your own Metroidvania game but don't know where to start?\nThis course is your step-by-step guide to mastering everything you need to build your dream game. We will use the Godot game engine, and C# as scripting language, so even if you're switching from Unity, you will feel right at home.\nWhy This Course?\nIf you're a passionate programmer eager to dive into game development, this course is your perfect starting point. It offers a structured learning path that guides you from the basics of Godot setup to advanced features, such as rope swinging, and a dynamic mini-map to show where the player is in game. You will build a solid foundation about the Godot game engine, progress quickly with step-by-step lectures on developing every feature and mechanic you need in order to create a complete Metroidvania game, which will deepen your understanding of how to make games with the Godot game engine.\n\n\nWho is this course for?\nThis course is not for complete beginners but is targeted more towards \"beginner+\" and intermediate programmers, so if you have a little, or some experience with the Godot game engine, and are familiar with the C# programming language, this course is perfect for you.",
      "target_audience": [
        "Aspiring indie game developers",
        "Game developers going from Unity -> Godot"
      ]
    },
    {
      "title": "Unity Game Tutorial: Galaga 3D",
      "url": "https://www.udemy.com/course/unity-course-galaga-3d/",
      "bio": "Learn how to create a Space Shooter like Galaga with Unity Game Engine.",
      "objectives": [
        "How to create Quadradic Bezier Curves to move Enemy Ships on.",
        "How to create a moving Formation to put Enemy Ships in.",
        "How to create a State Maschine for the Enemys to make decisions.",
        "About Variables, Arrays, Lists, Loops, Switch and more... in C#"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "The Concept": [
          "The Conzept"
        ],
        "The Path System": [
          "Straight Path",
          "Straight Path 2",
          "Quadratic Bezier",
          "Bezier Curve 1",
          "Bezier Curve 2",
          "Bezier Curve 3",
          "Moving on Path 1",
          "Moving on Path 2",
          "Moving on Path 3"
        ],
        "Formation": [
          "Formation 1",
          "Formation 2",
          "Formation 3",
          "Formation 4",
          "Enemy State Maschine 1",
          "Enemy State Maschine 2"
        ],
        "Spawn Manager": [
          "Spawn Manager Intro",
          "Spawn Waves 1",
          "Spawn Waves 2",
          "Spawn Waves 3",
          "Spawn Waves 4"
        ],
        "Putting all Together": [
          "More Enemies",
          "Updating formation behavior",
          "Spawning Pathes",
          "Clearing Pathes",
          "Fixing Pathes",
          "New Pathes",
          "Validate Amounts"
        ],
        "Player Behavior": [
          "Player behavior 1",
          "Player behavior 2",
          "Shootability",
          "Player Bullets",
          "Damage to Enemies",
          "Tweeking Bullets"
        ],
        "Enemy Formation": [
          "Spread Formation 1",
          "Spread Formation 2",
          "Spread Formation 3",
          "Update Enemy List on Destroy",
          "Automate Spreading",
          "Report To SpawnManager"
        ],
        "Enemy Diving Behavior": [
          "Diving 1",
          "Diving 2",
          "Diving 3",
          "Diving 4",
          "Shoot while Diving 1",
          "Shoot while Diving 2",
          "Shoot while Diving 3"
        ],
        "GameManager & UI Elements": [
          "Game Manager 1",
          "Game Manager 2",
          "Count Enemys",
          "Count Score",
          "UI Elements",
          "UI Script 1",
          "UI Script 2",
          "Winning a Stage"
        ]
      },
      "requirements": [
        "Some Unity knowledge is always helpful.",
        "An open mind to understand and learn the topics.",
        "Unity 4.6+ (The higher the better)",
        "A passion for games or the passion to create them."
      ],
      "description": "In this Course you'll learn how to create a Space Shooter like the amazing Galaga in Unity Game Engine.\nThe concept is based on different behaviors the Enemy Space Ship can be in.\nThis course is an Intermediate course, so if you have trouble in any case, write me a message or Q&A, and i'll help as best as i can.\nIf you are beginner, you might have some trouble to follow, but the videos will guide you through the complete course. Don't forget you only become better if you repeat things and keep on learning!\nSo we create several Systems which will give us enough freedom to:\nC# (Monodevelop)\ncreate our own Pathes the enemies can fly on\ncreate our own Formation system where the enemies go into for their typical left/right movement\ncreate our own diving system to randomize enemies flying around\ncreate our touch/click & and hold movement for the Player and shoot meanwhile holding\nUnity (2018.2)\nmanaging our systems and make them multifunctional\ncreating Space Particles like for Stars & Mist\nusing Trails to make nice visuals for the Space Ships\ncreating Particle Explosions\ncreating a Start and GameOver Scene and of course 1 Game Scene\nCourse Material\nI provide the following Material with the Course:\n4 different Space Ships (3 Enemys, 1 Player) as *.fbx\n1 Star and 1 Cloud Texture as *.png\nYou have to write the code on your own, i do not provide the final scripts!\nAll other graphics for Menu's, Icons, Images or Buttons need to be created on your own.\nAll Materials i provide are for education only and should not be in your final release!\nConclusion\nIn the end of this course you will have a fully functional Galaga Style 3D Game.\nChallenge\nAfter you have created nice Menus, Buttons, and maybe additional content, upload the Game to any Gaming Website, Google Playstore, Apple Store or even Windows Store or Steam.\nSo what are you waiting for?\nLet's make your dream game a reality!!\nLevel: Intermediate\nVideo Course Length: ~10.5 hours\nUnity Version required: 5.3+",
      "target_audience": [
        "You are a fan of Galaga and want to understand the mechanics.",
        "You love space shooter, but you are tired of the boring straight Top Down shooters.",
        "You want to bring your game creating skills to the next level.",
        "You ever wanted to create your own game."
      ]
    },
    {
      "title": "Endless Worlds with Swift and Sprite Kit",
      "url": "https://www.udemy.com/course/endless-worlds-with-swift-and-sprite-kit/",
      "bio": "Create limitless levels in a variety of projects, such as RPG's, endless runners, platform games, Frogger games, & more!",
      "objectives": [
        "Use a world node to move all the visible objects in play",
        "Create level units, or sections of levels, invisibly stitched together, moving at once",
        "Generate parts of levels as needed and remove them when they aren’t in use",
        "Add player controls, like jumping, running, attacking, etc",
        "Program physics objects and detect collisions or contacts",
        "Reset levels when players are killed or move outside of the play area"
      ],
      "course_content": {
        "The Endlessly Moving World Node": [
          "Series Introduction",
          "All Course Projects (For Every Section)",
          "Section Introduction",
          "Quick Overview of the Starting Template",
          "Create a Perpetually Moving World Node",
          "Clearing Unseen Nodes and Adding the Player",
          "Touching Objects to Move them and adding the Contact Listener"
        ],
        "Endless Level Units": [
          "Introduction to Project 2",
          "Creating the Level Unit Class",
          "Moving the World and Platforms within the Level Unit",
          "Centering the World on the Character"
        ],
        "The \"Crossy Frogger\" Project": [
          "Crossy Frog Introduction",
          "Tweaks from the Last Project and Creating Multiple Level Types",
          "Different Objects for Different Level Types",
          "Changing Object Speeds and Repositioning Offscreen Objects",
          "Hopping on Water Objects",
          "Resetting Levels"
        ],
        "Endless RPG Style Level": [
          "Endless RPG Introduction",
          "Adjusting the PlayerClass and Movements",
          "Adding Endless LevelUnits Going North",
          "Adding Endless Levels Units Going North (continued)",
          "Adding All LevelUnits and Clearing Unseen Units",
          "Adding Grass and Water Objects within Each Level Unit"
        ],
        "An Endless Runner": [
          "The Endless Runner Tutorial - Introduction",
          "Initial Setup",
          "Player Setup and Adding Jump Controls",
          "Player Setup and Adding Jump Controls (continued)",
          "Adding Gliding and Sliding Controls",
          "Looping Background and Resetting the World",
          "Looping Background and Resetting the World (continued)",
          "Adjusting the Level Unit Class",
          "Adjusting the Object Class",
          "Contact Testing and Wrap Up"
        ]
      },
      "requirements": [
        "Some fundamentals of programming with Swift",
        "Xcode on a Mac"
      ],
      "description": "****INCLUDES UPDATED SOURCE PROJECTS FOR SWIFT 3 and Xcode 8\nThis six hour Swift and Sprite Kit tutorial series has an one big theme tying each example project together: gameplay that can go on as long as the player can manage to stay alive. The challenge of an endless-style game isn't to beat up as many street thugs as possible, it taps into something more addictive. An endless game tests your reflexes and makes you struggle to best yourself again, and again, and again. Modern classics like Crossy Road or Banana King are two great examples of endless-style games we'll try to emulate in this series. Along the way, you'll learn some key concepts every Swift and Sprite Kit developer should have in their arsenal of knowledg\nSession 1 – The Endlessly Moving World Node\nIn this first project we will populate a perpetually moving “world” node with randomly generated physics objects. We also look at converting CGPoint locations in Swift from the worldNode coordinates to scene coordinates, enumerating through every child in the scene, adding and clearing out nodes as needed, and much more!\nSession 2 – Endless Level Units\nIn this series of videos we will modify the project from the first section and create “level units”, for example, sections or modules of a level that each can contain their own objects and be generated as needed or removed when they become out-of-view. The finished example project creates a kind of elevator style game where the character hops from platform to platform as long as possible. We will also look at the code to randomly move each platform (or any object) up and down and switch direction if it exceeds the visible screen area, as well as some ever-useful code to always center a world node on the player.\nSession 3 – An Endless Frogger Project\nIn these video tutorials we will create an endless game similar to Frogger or Crossy Road. Level units will again be created on the fly, with the distinction now of being either a “road” unit or “water” unit, each one having their own type obstacles. Physics-wise we will have four Body types: road, water, roadObject (cars) and waterObject (lilypads), and leave the door open to many more!\nSession 4 – Endless RPG Style Level\nIn this session we will convert the previous project to an endless top-down viewed RPG style world. The player can wander endlessly through randomly generated worlds, possibly to avoid objects or collect them. We will setup an array to track “level unit” locations that have already been added, then as the character wanders around, create new level units as needed. We will also include the option to remove level units the character has left (which could replace those units when the character walked back to them)\nSession 5 -An Endless Runner\nModeled after the very-popular Banana Kong game, this 5th project builds upon our previous ones in the series with a few notable changes, and ironically some simplifications. This session begins by limiting character movements to only one direction. Then we'll give our character some typical side scroller controls (jumping, running, sliding and gliding). We'll add a looping parallax background, and adjust our LevelUnit and Object classes to create ground/water planes and obstacles for a 2D platform world. And finally we'll finesse our collision detection code so the character can drop down through Platforms when swiping down, break certain objects when sliding, and of course get killed when running into other objects.",
      "target_audience": [
        "Intermediate Swift / Sprite Kit developers"
      ]
    },
    {
      "title": "Mixed Reality Development Fundamentals",
      "url": "https://www.udemy.com/course/mixed-reality-development-fundamentals/",
      "bio": "Develop best-in-class MR Experiences with Meta Quest 2, 3 and Pro and Unity",
      "objectives": [
        "Mixed Reality Concepts",
        "General User Flow in MR",
        "Unity MR Development",
        "Meta XR Packages"
      ],
      "course_content": {
        "Introduction & Project Setup": [
          "Intro to MR",
          "Read Before Begin",
          "Installing Unity & Creating Your First MR Project",
          "Install and Setup Git & GitHub Desktop to Secure Your Project"
        ],
        "Basic MR Setup & Features": [
          "Installing Meta XR Packages & Meta Project Setup Tool",
          "Building Blocks: Create Your First MR Scene in Seconds",
          "Scene Understanding: Room Setup Basics",
          "Meta XR Simulator: Develop even without Device in Hand"
        ],
        "Develop your apps faster and smarter": [
          "Setup Meta Quest Developer Hub for easy Device and App management",
          "Setup Meta Quest Link App for fast iteration"
        ],
        "Basic MR Input": [
          "Controller Tracking Basics",
          "Hand Tracking Basics",
          "Capsense and Multimodal: Seamlessly switch between Controllers and Hands",
          "Unity's Input Action Map: Reading Inputs from Devices with the New Input System",
          "OVR Input: Meta’s way of reading Inputs from controllers",
          "OVR Hand: Hand Physics, Pinch & Pointer Hand interactions"
        ],
        "Back to the Mixed Reality": [
          "Introduction to the Project",
          "Understanding the User Flow in Mixed Reality Experiences",
          "Making a Cool Game Intro: Passthrough Brightness Manager",
          "Spawning Time Machine on the Floor",
          "Ultimate DeLorean Controller Script",
          "Coding the Time Travel",
          "Source Codes"
        ]
      },
      "requirements": [
        "You will need a Meta Quest 3"
      ],
      "description": "Introducing 'Mixed Reality Development Fundamentals'\nWe are Tevfik, an XR developer and online instructor renowned for his best-selling courses on Udemy, and Robi, an XR Engineer at Meta and Mentor at XR Bootcamp, known for his YouTube tutorials and his work on the Meta presence Platform. Today, We are excited to unveil 'Mixed Reality Development Fundamentals', a comprehensive online course crafted to master the art of Mixed Reality development using Unity and the Meta Quest 2, 3 and Pro!\nThis course is not just a learning path; it's an invitation to explore the merger of physical and digital realms, to redefine what's possible. With the Meta Quest 3, we're equipped to bring our wildest dreams to life, creating experiences that were once confined to the realm of imagination.\n\n\n**NEW LECTURES EVERY WEEK**\n\n\nWhat You Will Learn\nStarting from the basics, this course will guide you through setting up Unity for MR development, exploring Meta XR Packages, and building your first MR scene. You'll gain hands-on experience with key MR development concepts, including interactions, controller and hand tracking, and much more.\nWe'll also delve into the world of game development with a walkthrough of \"Back to the Mixed Reality\", a fan-made MR game that brings the iconic DeLorean Time Machine into your living space. This project not only showcases the capabilities of MR but also serves as a practical guide to bringing your own MR visions to life.\n\n\nWhy This Course?\n'Mixed Reality Development Fundamentals' is designed to be more than just an educational course. It aims to inspire, educate, and entertain, providing a comprehensive toolkit for aspiring and seasoned developers alike. Whether you're looking to explore the untapped potential of MR or eager to push the boundaries of what's possible, this course is for you.\nBy joining, you'll gain access to a wealth of resources, including source codes and a community of innovators, all dedicated to exploring the future of MR development.\n\n\nYour Invitation to the Future\nThe future of MR development is unfolding before our eyes, and there's never been a better time to be a part of it. 'MR Development Fundamentals' offers a unique opportunity to transform your imagination into reality and to be at the forefront of the next technological revolution.\nSo, if you're ready to embark on this journey, to explore the intersection of the physical and digital worlds, we invite you to join us in 'MR Development Fundamentals'.\nTogether, we can shape the future of Mixed Reality.\n\n\nSee you in the lectures,\n-Tevfik and Robi",
      "target_audience": [
        "Creators & Developers who want to push the boundaries via MR experiences"
      ]
    },
    {
      "title": "Unity 5 Tutorial: Memory Game",
      "url": "https://www.udemy.com/course/unity-5-tutorial-memory-game/",
      "bio": "In this tutorial series you will learn how to create a memory game from scratch in Unity 5.6",
      "objectives": [
        "You will learn some art basics in Inkscape to create your own graphics.",
        "You will learn basics about reusable and easy systems.",
        "You will learn how to code in C#."
      ],
      "course_content": {
        "Introduction": [
          "Intro"
        ],
        "Design & Layout": [
          "The Cards",
          "The Game Layout"
        ],
        "Programming the Systems": [
          "The Card Manager #1",
          "The Card Manager #2",
          "The Score Manager"
        ],
        "Particle Effect": [
          "The Particle Effect",
          "Using the Particles"
        ],
        "Extras - Requests of Students": [
          "Additional - Hide matching Cards"
        ]
      },
      "requirements": [
        "Basic knowledge in Inkscape and Unity is a plus."
      ],
      "description": "In this Unity Video Course you will learn how to create your own Memory Game or Matching Game using the Unity Game Engine & Inkscape for the Grafics. For the functionality we write C# Code in Monodevelop.\nInkscape\nYou will learn the basics how you can create the cards on your own using Inkscape. You can also use any other software.\nUnity\nYou will learn to create a new 2D Project in Unity and setup everything needed\nI will show you how you can setup the playfield and organize it using the Canvas System which requires Unity 4.6+\nC#\nWe will put in functionality with scripts using Monodevelop and C# (you can also use Visual Studio)\nAlso we implement a Timer, Score, Turns and a Combo System for more User Experience\n\n\nConclusion\nAs a result of this course you should be able to create your own level with different sizes and cards for your Memory Game.\nIn the end of this course you will have a fully functional Memory 2D Game.\nChallenge\nAfter you have created nice Menus, Buttons, and maybe additional content, upload the Game to any Gaming Website, Google Playstore, Apple Store or even Windows Store or Steam.\nSo what are you waiting for?\nLet's make your dream game a reality!!\nLevel: Beginner\nVideo Course Length: ~3hours\nUnity Version required: 4.6+",
      "target_audience": [
        "Anyone who wants to learn how to create memory games.",
        "Unity interested people."
      ]
    },
    {
      "title": "Mechanic Game Design Using Blueprint In Unreal Engine 4",
      "url": "https://www.udemy.com/course/mechanic-game-design-using-blueprint-in-unreal-engine-4/",
      "bio": "Learn Unreal blueprints by developing 3D games with this comprehensive guide from begin to finish",
      "objectives": [
        "How to master beginner blueprint concepts, like variables, \"if\" statements, and arrays",
        "How to create basic material setup",
        "How to use detect collisions, receive user input, and create game mechanics",
        "How to create camera setup and toggle team",
        "How to create level creation",
        "How to create player controller for each player",
        "How to set up the piece parent and create the piece spawning logic on the chess board",
        "How to create dynamic material for chess and board",
        "How to create chess function library",
        "How to create \"HighlightValidPoints\" (without logic, just string input)",
        "How to create piece selected",
        "How to create movement logic for King",
        "How to create movement logic for Queen",
        "How to create movement logic for Bishop",
        "How to create movement logic for Knight",
        "How to create movement logic for Pawn",
        "How to create attack system for King",
        "How to create attack system for Queen",
        "How to create attack system for Bishop",
        "How to create attack system for Knight",
        "How to create attack system for Pawn",
        "How to create Castling logic in \"GetAllPossibleMoves”",
        "How to create Highlight Checked King function",
        "How to create Menu Level",
        "How to create GameOver widget with simple function such as \"Restart\", \"Menu\", \"Quit\".",
        "How to create \"KingDeathCheck\" function",
        "How to create “CheckMate” to end the turn"
      ],
      "course_content": {
        "Part 1: Chess Game": [
          "Introduction"
        ],
        "Project SetUp": [
          "Chess 1 - Project Setup"
        ],
        "Chess Piece Setup": [
          "Chess 2 - Piece Setup"
        ],
        "Path Finding Setup": [
          "Chess 3 - Pathfinding Setup"
        ],
        "Pawn Path Finding And Movement": [
          "Chess 4 - Pawn Pathfinding and Movement"
        ],
        "Finishing Piece Movement": [
          "Chess 5 - Finishing Piece Movement"
        ],
        "Path Highlighting and More Path Finding": [
          "Chess 6 - Path Highlighting and More Pathfinding"
        ],
        "Castling and Turns": [
          "Chess 7 - Castling and Turns"
        ],
        "King Check, Main Menu, and Game Over": [
          "Chess 8 - King Check, Main Menu, and Game Over"
        ],
        "Part 2: Tower Defense Game": [
          "TBGam 00 - Introduction to course"
        ]
      },
      "requirements": [
        "Installed Unreal engine 4.20 or above",
        "A basic understanding of mathematics (order of operations, addition, subtraction, multiplication) will facilitate comprehension of certain coding logic.",
        "A basic understanding of chess game like chess movement, chess attack or castling, and check system, checkmate condition",
        "Before beginning this course, you should be comfortable browsing the Web and working with your OS like Windows, Mac or Linux",
        "No prior programming or Unreal experience is required. If you have worked in C++ or Unreal before, this course can help you fine-tune your game development skills."
      ],
      "description": "Often times, learning a new game engine can be difficult, especially when it comes to Unreal Engine 4. Unreal Engine 4 makes your 3D games stand out, as long as you know how to properly use it.\n\n\nThis course will teach you exactly how to use it. The 8 lectures course (which only takes over three hours of your time) starts off with the basics. It teaches you how to implement the basics to create great visuals that are real to the human mind. From there, you are taught simple, clear concepts. That way it’s easy to follow and Unreal Engine 4 becomes much easier to use.\n\n\nThe best part is, you will use the concepts learned for every single game project that you will ever develop. You will even discover and love using the difficult feature, the marketplace. While others (who didn’t take the course) will find that feature hard to maneuver.\n\n\nBy the end of the course, you will be able to:\n\n\nApply what you learned to build your own games from start to finish.\nOrganize your game development to make your workflow not only quality but faster.\nMake use of Unreal’s blueprints to expand on every game and create new mechanic which works in your game.\n\n\nWhat’s more? If you struggle with programming and coding, you are in luck! This course gives you examples upon examples guiding you through the fundamentals of Blueprint programming. So that in little to no time, you will be able to make magic with Blueprints.\n\n\nYou will finally get a course that teaches you how to build a game, from A to Z. When you are done, you will know how to make quality 3D that sets you apart.\n\n\nDon’t let change stop you from building your skills. Simply click the Enroll Now button to get started right now!\n\n\nMore about the Instructor:\nMerlion SG Academy is an online training website offering video courses taught by industry experts in game development,\nthey has enjoyed sharing their knowledge and has given a way to quickly provide very specific training to those students who learn game development online and helps your career move forward.\nWe believed that Your career is defined by what you know and how well you know it.\n\n\nNOTE FOR STUDENTS - please take a look at Section 1 / Lecture 1 to downloads for the source attachment link with the lesson.)",
      "target_audience": [
        "This course is not for someone who is an advanced game developer. This course is also not for students who are not interested in learning to code as you will get an introduction to the fundamentals of blueprint programming.",
        "Anyone seeking an understanding of best visual coding practices such as organization with your project and optimal development workflow that are essential to game development.",
        "People interested in developing commercial quality 3D games either professionally or as a hobby.",
        "The ideal student for this course is someone who is interested in game development with Unreal and visual programming, C++, blueprint and is looking for an interactive, project-based course.",
        "This course is designed for board gamer who is interested in board games, tic-tac games or turn based strategy games."
      ]
    },
    {
      "title": "Computer Vision Game Development",
      "url": "https://www.udemy.com/course/computer-vision-game-development/",
      "bio": "Build Your Computer Vision Games Step by Step!",
      "objectives": [
        "Pygame,",
        "Computer Vision Game,",
        "Machine Learning and",
        "Image Processing."
      ],
      "course_content": {
        "Installation": [
          "Introduction to Installation Part",
          "Installation of IDE",
          "Installation of Necessary Modules"
        ],
        "Basics of Pygame": [
          "Creating a Game Window",
          "Extra -1",
          "Basic Drawing Operations -1",
          "Extra -2",
          "Basic Drawing Operations -2",
          "Extra 3",
          "Fill Background",
          "Blitting for Images (Copying) -1",
          "Blitting for Images (Copying) -2",
          "Extra 4",
          "Extra 5",
          "Blitting for Text (Reaching Default Font) -1",
          "Blitting for Text (Default Font) -2",
          "Blitting for Text (External Font) -3",
          "Extra 6",
          "Blitting for Background Image",
          "Adding a Music (Free Sounds)-1",
          "Adding a Music -2 (Background)",
          "Adding a Music -3 (Sound Effect)",
          "Keyboard Movements",
          "Mouse Operations",
          "Keyboard Continuity and Setting FPS",
          "Adding Border to Game Window",
          "Collision",
          "Extra 7"
        ],
        "Basics of OpenCV (for Computer Vision Games)": [
          "Image Reading and Showing",
          "Reaching Width and Height",
          "Capturing Frame from Webcam",
          "Setting Up Webcam Size",
          "Color Formats",
          "Creating Circle (for Special Point of Hand)",
          "Creating Hand Model",
          "Reaching Hand Landmarks",
          "Rotating Operation",
          "Using Webcam as a Game Window -1",
          "Using Webcam as a Game Window -2"
        ],
        "Computer Vision Game Project: Destroy the Viruses": [
          "Preview",
          "Game Files",
          "Computer Vision Game (Definitions) -1",
          "Computer Vision Game (Definitions) -2",
          "Computer Vision Game (Game Loop) -1",
          "Computer Vision Game (Game Loop) -2",
          "Computer Vision Game (Game Loop) -3",
          "Final Step (Test Our Game)"
        ]
      },
      "requirements": [
        "Work hard,",
        "Tenacity and",
        "Interest."
      ],
      "description": "Hello,\n\n\nWith Computer Vision Game Development, we will develop our own computer vision game using the Pygame module. In order to create the necessary infrastructure, we will first learn the Pygame module, create our game window with this module, control our keyboard and mouse movements in our games, add our background images, add our internal and external fonts, control our game characters and adjustment of the FPS value and have information about many of our structures. Not limited to this, we will learn about Machine Learning and Image Processing so that we can improve our computer vision game. Moreover, we will be able to control our own characters with our hand gestures.\n\n\nMy Computer Vision Game Development course:\n\n\nThose who want to develop games with Python,\nThose who want to develop a computer vision game,\nThose who want to develop a hand model with machine learning,\nThose who want to learn about image processing,\nThose who want to control the character with the hand model,\nOr, it is suitable for anyone who wants to know about the 5 topics above.\n\n\nThe course content, which you can learn 5 topics together, has been  explained in a comprehensive way without boring the student. In addition, you can ask where you got stuck during the training process and you can get answers in a short time. You will be able to learn and code new technologies with constantly updated content.\n\n\nWelcome to our way of developing ourselves and writing code on the technologies of the future.\n\n\n\"Continuity in work conquers all difficulties.\" -Anthony Trollope\n\n\nLearn by coding!\n\n\nRegards,\nYılmaz ALACA",
      "target_audience": [
        "Those who want to develop games with Python,",
        "Those who want to develop a computer vision game,",
        "Those who want to develop a hand model with machine learning,",
        "Those who want to learn about image processing and",
        "Those who want to control the character with the hand model."
      ]
    },
    {
      "title": "Learn to Develop an Inventory System in Unity 6 & Blender",
      "url": "https://www.udemy.com/course/learn-to-develop-an-inventory-system-in-unity-6-blender/",
      "bio": "Crafting an Inventory System with Unity 6 and Blender: ScriptableObjects, 3D Assets, and Interactive UI Design",
      "objectives": [
        "Understand and implement an organized inventory system using Unity 6, complete with item categories and a custom editor.",
        "Model and texture Viking-themed 3D items in Blender, importing them seamlessly into Unity.",
        "Develop skills to link inventory items to interactive game objects, adding physics and realism to dropped items.",
        "Design an intuitive and visually engaging inventory UI with tabs, toggles, scrollviews, and a 3D preview display."
      ],
      "course_content": {
        "Introduction": [
          "Welcome",
          "Join the H3D Social Community",
          "FAQs"
        ],
        "Section 2: Basic Inventory Algorithms and Data Structures": [
          "An Inventory System Overview",
          "Getting Started with the Unity Package",
          "Item Data Structures with Scriptable Objects",
          "Creating Scriptable Object Assets for Inventory Items",
          "Building an Inventory System",
          "Adding Items to the Inventory",
          "Managing the Item Adding Process",
          "Testing the Item Adding Process",
          "Writing a Custom Editor to View the Inventory Part 1",
          "Writing a Custom Editor to View the Inventory Part 2",
          "Writing a Custom Editor to View the Inventory Part 3",
          "Removing an Item from the Inventory"
        ],
        "Section 3: Player Interaction with the Inventory": [
          "Making Pickup Items",
          "Adding Picked Up Items to the Inventory",
          "Managing Bundle Pickups",
          "Dropping Items Input Setup",
          "Dropping Items from the Inventory",
          "Handling Multiple Item Drops",
          "Placing Items back into the World Part 1",
          "Placing Items back into the World Part 2",
          "Adding Physics to Dropped Items",
          "Aligning Dropped Numbers to Inventory Numbers",
          "Adjusting the Physics on Dropped Items"
        ],
        "Section 4: Building a UI": [
          "Inventory System UI Design",
          "Setting up the UI Elements",
          "Laying out the Inventory UI",
          "UI Resizing Controls UI",
          "Creating a 3D Preview UI Window",
          "Tab Controls for Item Type Selection",
          "Working with Toggle Group Controls Part 1",
          "Working with Toggle Group Controls Part 2",
          "Detecting Toggle Selection",
          "Adding a Scrollbar View for Displaying Items",
          "Designing a Prefab for Inventory Item Display",
          "Instantiating Inventory Item Buttons",
          "Sorting Inventory Items into Tab Categories",
          "Displaying Item Previews in 3D Part 1",
          "Displaying Item Previews in 3D Part 2",
          "Displaying Item Previews in 3D Part 3"
        ],
        "Section 5. Hooking up the UI Inventory to the Player Inventory": [
          "Opening and Closing the Inventory",
          "Freeing the Mouse",
          "Adding Picked Up Items to the Inventory UI",
          "A Better Way to Open and Close the Inventory",
          "Synchronising Picked up Items to Tab Categories",
          "Managing the Visual Display of Item Counts",
          "Dropping Selected Items",
          "Dropping Items back into the World",
          "Specifying Item Drop Numbers",
          "Customisation Challenge",
          "Adding a New Item Challenge"
        ],
        "Scope And Specification": [
          "Project Goal",
          "Scope Of Work",
          "Gather Source Material",
          "Other Recommended Software"
        ],
        "Basic Modelling Setup": [
          "Are You An Absolute Beginner in Blender",
          "Importing Reference Images",
          "Workflow Choices and Q&A"
        ],
        "The Potion Vial (Simple)": [
          "Basic Mesh Modelling",
          "Basic Parametric Modelling",
          "Export Settings Check And Fixes",
          "Basic Material Check",
          "More Parametric Modelling",
          "Adding Details And Unity Test"
        ],
        "The Shield (Basic)": [
          "Multi Object Approach",
          "Defining Materials Early",
          "Sorting Out Details",
          "Radial Arrays And Drivers"
        ],
        "The Sword (Basic)": [
          "Multi Object Approach 2",
          "Adding Form",
          "Finalising The Base Mesh",
          "Materials and Test"
        ]
      },
      "requirements": [
        "Basic Knowledge of Unity: Familiarity with the Unity editor, basic object placement, and navigation.",
        "Fundamental C# Skills: Understanding of C# scripting concepts like variables, methods, and classes in Unity.",
        "Basic Experience with Blender: Some experience using Blender for 3D modeling, such as manipulating objects, applying textures, and exporting assets.",
        "Unity 6 Installed: A setup with Unity 6, as this course will cover features and settings specific to this version.",
        "Desire to Learn and Create: Enthusiasm for learning and building a custom game inventory system in a Viking-inspired setting."
      ],
      "description": "Have you ever wanted to design a game inventory system that’s more than just a simple item list? Are you a programmer or artist wanting to blend code and 3D art to create an interactive and immersive Viking-themed inventory? Then this course is for you! In it, you’ll explore both coding and art creation, giving you the skills to build a professional-grade inventory system that can be adapted to any game project.\nIn this course, Penny and Mike combine their expertise in Unity and Blender to teach you the essential skills for designing, programming, and modeling an immersive inventory system. You’ll benefit from their years of industry experience with detailed explanations and hands-on projects that cover every aspect of development.\nThis course offers over 15 hours of hands-on content, guiding you through the creation of a functional inventory system with Unity 6 and Blender.\nWe’ll start by laying a solid foundation with Unity setup and essential 3D modeling skills, then dive deep into creating a full-featured inventory system—from item data storage and UI design to interactive item management and 3D previews.\nIn this course, you will:\n1) Build a fully interactive inventory system in Unity\n2) Model and texture 3D assets in Blender for use in games\n3) Implement custom editor scripts and UI elements in Unity\n4) Combine all the elements in a third-person 3D game environment\nThe course is broken into two main parts, which can be taken individually or as a complete learning journey:\nPart A\nIn Part A, learn how to program and structure the Inventory System in Unity 6, covering:\nSetting up Unity and Using ScriptableObjects\nEfficiently organize item data using ScriptableObjects for maximum flexibility.\nItem Categorization and Custom Editors\nUse enums to create item categories and develop a custom editor for managing inventory items with ease.\nAdding, Removing, and Stacking Items\nProgram functions to add, remove, and stack items, ensuring a smooth player experience.\nInventory Interactions and Testing\nDesign tests to validate inventory behavior, with runtime testing functions for quick prototyping.\nSetting up the Unity Input System\nAdd custom input actions for interacting with the inventory, such as item dropping and equipping.\nPart B\nIn Part B, learn how to design and integrate 3D items with Blender, covering:\nScope and Specification\nUnderstanding the goals and scope of any project is critical to succeeding. and when it comes to realistic models managing the potential for scope creep is important.\nMaking The Low Poly Assets\nModels have to start somewhere, and making low poly assets allows us to focus on the basics of good topology and form.\nSculpting Details\nSculpting is a fantastic way of adding detail to any model, taking them from basic to unique assets.\nPreparing For Texturing\nUnderstand the texturing process and unwrapping your models is much easier than you think!\nTexturing Models\nFlat models are boring, creating PBR textures bring your models to life.\nBaking Textures\nGames require optimised assets, we'll generate high-quality texture maps to apply to your assets takin models with over 100,000 polygons down to a model in the 1000s without compromising on quality.\n\n\nWhat students are saying about Penny and Mike's other courses:\nThis course was incredibly thorough! Penny’s clear explanations combined with Mike’s art direction really made complex concepts accessible.\nI’ve been using Unity for a few years, but this course gave me new insights into both coding and art integration. The inventory system I built has become the foundation of my latest game!\nI can’t recommend this course enough. It’s perfect if you want to get hands-on with Unity and Blender—everything was so well structured, I felt like I was building a real project from start to finish!",
      "target_audience": [
        "Beginner to Intermediate Unity and Blender Users: Those with some experience in Unity or Blender who want to deepen their skills in game development and 3D asset creation.",
        "Aspiring Game Developers: Anyone looking to build a professional inventory system from scratch, ideal for projects in fantasy or Viking-themed games.",
        "3D Artists Expanding into Game Design: Artists who are comfortable modeling in Blender and want to integrate their assets into an interactive game environment.",
        "Programmers Interested in Game Mechanics: Coders eager to understand how to structure, manage, and visualize game inventory systems.",
        "Indie Developers and Hobbyists: Individuals or small teams looking to enhance their game projects with a fully functional and visually polished inventory system."
      ]
    },
    {
      "title": "Unreal Game Development For Beginners",
      "url": "https://www.udemy.com/course/unreal-game-development-for-beginners/",
      "bio": "Learn to build a complete 3D game using Unreal Engine",
      "objectives": [
        "Learn to build professional games using Unreal",
        "Learn to use materials and textures in your games",
        "Learn to use physics in your games",
        "Learn game design with this course"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Landscape Building"
        ],
        "Materials": [
          "Static Meshes and the Materials Editor",
          "Creating Material Instances",
          "Foliage Tool and Tesselated Materials",
          "Creating a Procedural Racecourse",
          "Blocking Volumes"
        ],
        "Physics": [
          "Custom Vehicle Blueprint and Physics",
          "Dynamic Vehicle Effects",
          "Creating a Race Timer HUD",
          "Refining Race Timer Functionality",
          "HUD Animations- Race Countdown",
          "Vehicle Speedometer",
          "Respawn Function"
        ],
        "Design": [
          "Landscape and Design",
          "Lighting and Post Processing",
          "Cinematics",
          "Packaging Project",
          "Bonus Lecture: More Interesting Stuff, Offers and Discounts"
        ]
      },
      "requirements": [
        "You must have access to Unreal Engine to complete the course"
      ],
      "description": "A complete guide for creating a real professional 3D game using Unreal.\nWe have created a simple and easy to understand course with smart pedagogy to help you quickly master Unreal for making real world games. You will create everything along with the instructor and by the end of the course you will have expertise in Materials, Physics and game design. You can extend the game and add more features as you complete each of the sections.\n\n\nYou will be confident enough to start working on your own games after this Unreal engine course. This course is ideal for new and intermediate developers.",
      "target_audience": [
        "Beginners who want to start building games using Unreal engine will find this course very useful."
      ]
    },
    {
      "title": "Unity and Playmaker No Coding Action Adventure Game Making!",
      "url": "https://www.udemy.com/course/unity-and-playmaker-no-coding-action-adventure-game-making/",
      "bio": "Let's create an Action Adventure game using Unity 3D and Playmaker without Coding!",
      "objectives": [
        "Students will have a solid understanding of using Playmaker and its state machines so they can also create their own creations using the tools used. Also they will learn the basics of Unity like navigating through scenes, creating materials, setting up lights building game and file management."
      ],
      "course_content": {
        "Introduction - Setting Up Playmaker and iTween plugin.": [
          "Introduction - Setting Up Playmaker and iTween for Unity 3d."
        ],
        "Character Set Up and Movement": [
          "Moving Our Character",
          "Character Smooth Look At Settings.",
          "Making The Character Jump!",
          "Making The Camera Follow Our Player"
        ],
        "Level Design!": [
          "Opening A Door With Trigger Event!",
          "Creating A Game Over System",
          "Generating Lighting For Our Scene!",
          "Creating An Enemy Kill System So We Can Hop On Enemies to Destroy Them.",
          "Using A Key To Open A Door!",
          "Creating Traps For Our Scenes."
        ],
        "Coin System and Level Progress": [
          "Creating And Collecting Coins!",
          "Creating a UI System and Displaying The Collected Coins in The UI.",
          "Saving Coin Progress using Player Preferences So Progress is Not Lost!",
          "Creating A Level Progress Event So Players can Jump To Next Level."
        ],
        "Building The Game and Conclusion.": [
          "Building The Game.",
          "Adding Game Over Screen.",
          "Conclusion and Final Words."
        ]
      },
      "requirements": [
        "For this course Students will need Unity 3D Software and Playmaker Plugin for Visual Scripting. They need to have a little basic knowledge of both but not necessary."
      ],
      "description": "Welcome to the course of No Code Action Adventure Game Making. In this course there are lot of thing your will learn. We will start from like almost 0 and I will show you how to get around Unity installing Playmaker and also iTween. Actually you can check the first video right away and get into using Unity and installing Playmaker.\n\n\nWe will create like a casual action adventure game so don't expect high quality graphics the reason is I tried to make this course to teach the basics of Playmaker so even a person without any graphics knowledge can get into the course quickly. Yes we will create like almost everything from basic shapes likes cubes right inside Unity.  I will also provide other 3d models used inside this course like keys or spikes.\n\n\nWhat you will learn in this course.\n1 - Introduction - Setting Up Playmaker and iTween Plugin\n2 - Moving Out Character\n3 - Character Smooth Look At Direction\n4- Making The Character Jump\n5 - Making The Camera Follow Our Player\n6 - Opening A Door By Stepping On A Platform\n7 .- Creating A Game Over System\n8-Generating Lighting in Our Scene\n9 - Creating An Enemy Kill System By Jumping On Top Of It.\n10 - Using A Key To Open The Door\n11 - Creating Traps (Spikes) For Our Scene\n12 - Creating And Collecting Coins\n13 - Creating An UI System So We Can Display Our Coins And Level Progress\n14 - Saving Coin Progress Using Player Preferences\n15 - Creating A Menu Jump Event So Players Can Jump From Level 1 to Level 2\n16 - Building A Playable Version Of The Game!\n17 - Adding A Game Over Screen\n18 - Conclution And Final Words",
      "target_audience": [
        "People who would like to make 3D games with Unity but don't have any programming knowledge!"
      ]
    },
    {
      "title": "Create 3D Survival Game In Unity",
      "url": "https://www.udemy.com/course/create-3d-survival-game-in-unity/",
      "bio": "Create 3D Survival Game In Unity",
      "objectives": [
        "Build 3D Unity Game",
        "progarmming with C#",
        "Making Inventory",
        "Craft System"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "New Project",
          "Project Setup"
        ],
        "Player": [
          "Player Setup",
          "Player Input System",
          "Camera Look",
          "Player Movement",
          "Player Jump",
          "Jump bug fixed"
        ],
        "UI": [
          "UI Setup",
          "Player Needs",
          "Player functions"
        ],
        "Player Take Damage": [
          "Damaging the Player",
          "Damage Indicator"
        ],
        "Sun & Night Cycle": [
          "Sun&Night Part 1",
          "Sun&Night Part 2"
        ],
        "Inventory": [
          "Items",
          "Item Object",
          "Interaction Script",
          "Interaction UI Text",
          "Inventory UI Part 1",
          "Inventory UI Part 2",
          "Inventory Script Properties",
          "Slot UI Script",
          "Inventory Functions Part 1",
          "Inventory Functions Part 2 Add Item",
          "Inventory Functions Part 3",
          "Inventory Functions Part 4",
          "Inventory Functions Part 5",
          "Inventory Functions Part 6 Use Items"
        ],
        "Equip & Resource Gathering System": [
          "Equip Weapon",
          "Equip Weapon Script Part 1",
          "Equip Weapon Script Part 2&& bug fixed",
          "Equip Item Script",
          "Equip Item Animation",
          "Tree & Stone Resource Script",
          "Resource Gathering"
        ],
        "Craft Item System": [
          "Crafting UI",
          "Crafting Recepe Scriptable Object",
          "Crafting Window Script",
          "Crafting Table"
        ],
        "Building": [
          "Building Setup",
          "Building Prefabs",
          "Building Recipe",
          "Building Reipe UI",
          "Placing down puilding Part 1",
          "Placing down puilding Part 2",
          "Placing down puilding Bug Fixed",
          "Placing down puilding Part 3",
          "Firecamp",
          "Sleep in bed"
        ],
        "Enemy": [
          "NPC",
          "Navmesh Movement",
          "NPC Wandering",
          "NPC Fleeing",
          "NPC Taking Damage",
          "NPC Attacking",
          "NPC Animations"
        ]
      },
      "requirements": [
        "Have a PC or Mac"
      ],
      "description": "Are you looking for an intermediate Unity course where you will build a small 3d game, from scratch ? In this course we will create a survival game with first person camera, player movement system, animations, , inventory and crafting system and a Save&Load system to save&Load our progress\n\n\nIf you have completed few beginner courses on Unity and c# and you feel comfortable using them together I believe that you will benefit greatly from this course.\nWe will use multiple 3d models, animations and tools that are free to use.\nMy hope is that at the end of the course you will have a bigger picture on how to structure the code for your game and have a survival game template that you can reuse.\nIf you think that you could benefit from this course don't hesitate to purchase it.  Saying that I have really put a lot of effort to make sure that you will benefit from the course and learn some useful techniques from setting up a simple movement system using a character controller to creating a UI and serializing the data to save it to a JSON file.!\nWhat you will learn at the end of this course\n1)make player with first person camera look from scratch\n2)Player Movement with new input system from unity\n3)Pickup Items\n4)Gathering Resource\n5)Day and Night system\n6)Making Inventory\n7)Equip Items\n8)Drop Items\n9)Craft System\n10)Interact with object\n11)Making Enemies with 3 diffrent state(Scared,Passive,Agressive)\n12)Saving The Game\n13)Loading The Game\n14)and more",
      "target_audience": [
        "Intermediate"
      ]
    },
    {
      "title": "Creating Facebook Instant Games using Unity",
      "url": "https://www.udemy.com/course/creating-facebook-instant-games-using-unity/",
      "bio": "Learn how to create a Facebook Instant Messenger Game using the Unity Game Engine.",
      "objectives": [
        "Be able to build games for the WebGL platform",
        "Be able to build games compatible for Facebook Messenger",
        "Be able to build and manage leaderboards for Facebook Instant games",
        "Be able to interact with the Facebook Instant Library from Unity"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Setting up app for Facebook Developer page & Building game in Unity": [
          "Setting up app for Facebook Developer page",
          "Building a simple Game for WebGL platform"
        ],
        "Modifying build & Uploading and Interacting With Instant Library": [
          "Adding required Facebook libraries and functions",
          "Fixing scaling & removing footer",
          "Interacting with Instant Library for Leaderboards, Ads and other features"
        ]
      },
      "requirements": [
        "Knowledge of Unity Game Engine",
        "Basic knowledge of javascript and html"
      ],
      "description": "The recent popularity in Facebook Instant Messenger Games means a great opportunity for indie developers with Unique ideas. However there is little to no documentation on how to convert a Unity Game to Instant platform, with the only viable option being expensive external softwares.\nThis course provides all the necessary knowledge to students on how to convert a Unity Game to be compatible with Facebook Instant Game Platform and enough knowledge to be able to implement Facebook leaderboards and interact with the Facebook Instant Library for ads and other features.",
      "target_audience": [
        "Unity3D developers who want to learn how to deploy games on Facebook instant game platform"
      ]
    },
    {
      "title": "iOS 11 Reskinning: Create and Publish Unblock Me iOS game",
      "url": "https://www.udemy.com/course/reskinning-create-and-publish-unblock-me-ios-game-in-1-day/",
      "bio": "A-Z guide to build and publish the Unblock Me iPhone game without the need to program Full source code included",
      "objectives": [
        "publish your very own iPhone game clone",
        "Learn about making games without coding",
        "Learn about itunes app store terminolgy",
        "Get familiar with XCode, and publishing apps",
        "Familiarize yourself with iTunes Connect",
        "Get your iOS developer license"
      ],
      "course_content": {},
      "requirements": [
        "a MAC OS computer or virtual image"
      ],
      "description": "***** Do you know you can \"Publish iPhone games without coding\" ? *****\nThis course will let you create a game similar to Unblock me puzzle game, a top chart game in the iTunes app store, all of it without coding. I had many students those who wanted to create game apps but they where not interested to learn programming. So here I am introducing a way to create games without coding. This course comes with the full source code so you will not have to refer anything from anywhere rather than in this course. Everything you need is included in this course. This game has hundreds of levels, which guarantees players to come back to your game which gives you more advertismenet exposure and more chances to sell in-app purchases.\nWHAT YOU WILL GET AFTER COMPLETING THE COURSE ?\nYou will have your very own iPhone game in the iTunes app store (works on iPad too!), ready to bring in revenues from Ads and in-app purchases. The game will contain hundreds of levels to guarantee players to come back and keep playing, which will in turn increase the chance of more profits.\nYou will be able to make an iPhone game similar to Unblock me, without coding.\nYou will be able to get all free resources, including the source code with an unlimited license.\nYou can publish games every weekend, using the same source code, included within this course as a bonus, for free.\nYou will have the potential to make a lot of passive income, awaken the entrepreneur in you.\nYes Here Is The Way To Make iPhone Game Apps Without Coding !\n************ READ ON ! **************\nLooking to boost your income as a App developer? Or maybe you're seeking a career change that gives you more free time and flexibility?\nThen this is the right course for you.\nYOU CAN BECOME AN IOS GAME APP DEVELOPER\niOS has a huge platform where you can sell your game app and make a lot of money . This course will take you from the very basic concepts of game development using the free software given by Apple.\nHOW MUCH DO YOU HAVE TO SPEND?\nThere is actually no more expenses except signing up besides getting the iOS developer license ($99/year). And we will show you the places from where you can get the resources we want without spending a single dollar.\n*********** HOW MUCH YOU CAN EARN *******\nYou can earn more than you think. I am the one example of that after studying this method i could create and publish game app every week . So i could make a lot of money without putting more effort . Join this course and follow me and you will make a lot money than you think.\nENROLL THE COURSE NOW AND PUBLISH YOUR VERY FIRST GAME APP, all it takes is one free afternoon.",
      "target_audience": [
        "entrepreneurs",
        "indie devs",
        "people interested in making trendy games the simple way",
        "people interested in learning graphic design tips",
        "hustlers",
        "computer students",
        "art & graphic design students"
      ]
    },
    {
      "title": "Unity C# Scripting Intermediate - Upgrade Your C# Skills",
      "url": "https://www.udemy.com/course/intermediate-c-scripting-for-unity-game-development/",
      "bio": "Unity C# Scripting Intermediate - Upgrade Your C# Skills , Learn Advanced C# Programming for Unity Game Development",
      "objectives": [
        "Upgrade Your C# Scripting Skills",
        "Implement Different Data Structures in C#",
        "Learn and Implement Vector Maths in C#",
        "Master Object Pooling with Examples",
        "Get A Clear Concept of Quaternions",
        "Learn Object Oriented Programming in C#"
      ],
      "course_content": {
        "Introduction": [
          "Introduction To This Course",
          "Installing & Setting Up Unity 6",
          "Creating Your First Script in Unity 6",
          "Installing & Setting Up Unity 2023",
          "Installing & Setting Up Unity 2022"
        ],
        "Unity C# Scripting Crash Course ( Optional Section )": [
          "Learn C# Scripting Basics with Examples - Part 1",
          "Unity C# Scripting - Part 2",
          "Unity C# Scripting - Part 3"
        ],
        "Working With Data Structures in C# & Unity": [
          "Getting Started with Lists in C#",
          "More About List with Practical Examples",
          "Stack and it's Application in C#",
          "Working with Queues in C#",
          "Implementing Dictionary in C#"
        ],
        "All About Object Pooling with Practical Examples": [
          "Understanding The Need of Object Pooling",
          "Implementing A Simple Version of Object Pool in C#",
          "Creating A Growing Object Pool",
          "Creating an Advanced Generic Object Pool for Multiple Objects",
          "Implementing Multiple Object Pools with an Example"
        ],
        "Vectors and Vector Math in C# & Unity": [
          "Everything You Wanted to Know About Vectors",
          "Unit Vectors & Normalizing",
          "Understanding & Implementing Vector Dot Products",
          "Vector Cross Products with Examples & Visual Demonstration"
        ],
        "Demystifying Quaternions and Rotations in Unity": [
          "Why Are Quaternions Used and How Unity Handles Rotations",
          "Working with Euler Angles in C#",
          "Finding The Angle To A Target with LookRotation",
          "Interpolating Between Two Quaternions using Slerp",
          "Combining multiple Quaternion Rotations in C#"
        ],
        "Object Oriented Programming Concepts in C#": [
          "Understanding Classes & Objects",
          "Constuctors in C# Unity",
          "Initializing Objects with System.Serializable",
          "Enums in C#",
          "Inheritance in C# - Part 1",
          "Inheritance in C# - Part 2",
          "Polymorphism Virtual Functions & Overriding in C#",
          "Using Namespaces in C# & Unity"
        ],
        "Miscellaneous C# Scripting Concepts": [
          "Properties in C# with Examples",
          "Static Variables Functions & Classes in C#",
          "Method Overloading in C#",
          "Working with Attributes in Unity",
          "Understanding Coroutines in Unity C#"
        ],
        "You Have Successfully Finished This Course": [
          "Bonus Lecture : Course End Greetings"
        ]
      },
      "requirements": [
        "Basics of C# Scripting in Unity is All You Need to Know to Join This Course"
      ],
      "description": "Unity C# Scripting Intermediate - Upgrade Your C# Skills.\nThis course is all about Learning Intermediate C# Scripting concepts for Unity Game Development. If you have already learned the Basics of C# Scripting with Unity and are ready to upgrade your C# scripting skills to the next level, then this is the perfect Intermediate C# Scripting Course for you.\n\n\nCourse Curriculum:\n1. Unity C# Scripting Crash Course:\nIn this Section you will brush up your C# Scripting skills for Unity Game Develoment.\n\n\n2. Learn About Data Structures in C#:\nIn this section you will learn about different data structures like List, Stack, Queue, Dictionary and implement them using C# in unity.\n\n\n3. Object Pooling in Unity with C#:\nIn this section you will learn about Object Pooling pattern and implement it using C# scripting. You will also learn how to use it in a real Unity 2D Game project using C#.\n\n\n4. Vectors & Vector Maths:\nIn this section you will Learn about Vectors in Detail and implement them using C# in Unity. You will learn about Vector Dot and Cross products, Normalization and how to use them in real game projects in Unity.\n\n\n5. Quaternions & Rotations:\nIn this section you will learn about Quaternions and how Unity handles rotations internally. You will implement Quaternion functions using C# . You will learn about Euler Angles , Lookrotation , Slerp and more features of the Quaternions in Unity.\n\n\n6. Object Oriented C# Programming:\nIn this section you will learn about different object oriented programming concepts using C# & Unity. You will learn about Classes, Objects, Inheritance, Polymorphism and more in C#.\n\n\n7. Miscellaneous C# Scripting Concepts:\nIn this section you will Learn about different C# Scripting concepts for Unity. You will learn about Namespaces , Co Routines , Static Variables & Functions , Function Overloading and more in C# .\n\n\nKeep Learning",
      "target_audience": [
        "Anyone who wants to Upgrade Their C# Scripting Skills for Unity Game Development"
      ]
    },
    {
      "title": "The Ultimate Guide to Unreal Engine 5 For Complete Beginners",
      "url": "https://www.udemy.com/course/the-ultimate-guide-to-unreal-engine-5-for-complete-beginners/",
      "bio": "Master Unreal Engine 5 (2022) and By Creating A First Person Platformer Game Using Modern Unreal Development Technics",
      "objectives": [
        "Learn the Fundamentals of Blueprint Visual Scripting a Modern and very Powerful programing tool (No prior programing experience needed)",
        "Delve into the world of Unreal Engine, a mighty tool for Game Development that will help you create Real World Games.",
        "Understand the Principles that go into creating Modern AAA games like Call Of Duty.",
        "Flex your \"Game Developer\" Muscles by completing Mini-Challenges presented to you in EVERY VIDEO."
      ],
      "course_content": {},
      "requirements": [
        "A Working Computer or Laptop with minimum requirements to run Unreal Engine",
        "The desire and drive to learn how to create a fun and enjoyable game"
      ],
      "description": "This course is made with the latest content and newest technics used in modern Game Development (Unreal Engine 5 2022)\nThe best way to learn anything is by doing it in a really fun way and this is where this course comes from. If you want to learn how all these incredible games you see are made there is no better place to start than this course.\nWe made sure that this course has everything you need to take you from a beginner (even with zero codding experience) and slowly take you to intermediate level.\nI chose the main project in this course to be a 3D First Person Platformer because it not only has a vast library of game development concepts that we can implement and learn.\nAlso because it's very simple (especially if you are a beginner) to delve in and get started on your game development journey.\nEverything in this course has been meticulously crafted, review and recrafted to provide you with the best experience possible and maximize your learning as much as possible.\nSo not only will you have a great time learning you'll also get the MOST BANG FOR YOUR BUCK by going away from this course with a lot of tools in your arsenal to continue you journey in the wild west of game development.\nSection 1: Introduction\nWe'll start off by downloading Epic Games Launcher. Downloading Unreal Engine 5 and we'll lay the ground. We'll understand a bit of history about the Unreal Engine and we'll make our First Game just to get ourselves into the mood.\nSection 2: Building Virtual Worlds Level Editor\nIn this section we are going to start learning the very basics of the viewport. We'll understand how to move around the viewport, use the various navigations and learn what each every single window we see infront of us does.\nSection 3: Unreal Architecture Actors\nIn this section we will learn about Actors. We'll understand static mesh actors, geometry brushes, volumes and Materials. We finish off by creating and learning to set up the lighting and atmosphere instead of using the one we are given.\nSection 4: CyberSpy 3027 - Building Our World\nThis section will be a culmination of what we learned in the previous 2 sections. We'll be setting up the light, atmosphere and skyline. We'll create our first level and build our inner basic structure to start working with future features.\nSection 5: Blueprint Visual Scripting\nTime to understand the concept of Blueprint Scripting in a very easy way. We'll understand what the windows in the interface mean, go though nodes, connect them and create a flow control between them. We also delve into timelines for simple animations.",
      "target_audience": [
        "Aspiring Game Developers that don't know where to start when it comes to creating games",
        "Young programmers who want to learn the basics of Blueprint Visual Scripting in a really fun way by creating their own games using the Unreal Engine"
      ]
    },
    {
      "title": "Unreal Engine 5, Creating an Alien world for games & Movies",
      "url": "https://www.udemy.com/course/unreal-engine-5-from-introduction-to-creating-alien-world/",
      "bio": "In this course we will start Unreal Engine 5 from complete beginning to creating a large Alien World.",
      "objectives": [
        "We will start from installing unreal engine 5 and creating our first project.",
        "Introduction to unreal engine 5 user interface.",
        "Post process volume and exposure (controlling colors and lights of your world).",
        "Introduction to Materials and textures, and creating Master Material.",
        "Importing 3D objects with its Textures, creating Material for that. And importing 3D objects from Megascans library (15000+ high quality free assets).",
        "Complete introduction to Lumen in Unreal Engine 5 and other lighting settings.",
        "Creating landscape and landscape Material.",
        "Foliage mode in Unreal engine 5 (Painting Trees, stones, grass... on your landscape)",
        "Creating Alien world (We will create this world step by step with no skip). You will learn everything you need to create a world for games or movies.",
        "In Alien world Project (Lighting + Landscape sculpting + Mountains + Good sky + Water + Painting Trees, stones and grass + Post process volume settings + ...",
        "+ Creating planet and moon in sky + house and astronaut + Cinematics (Video shots from our world) + Adding 3rd person game to our world."
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Basics of Unreal Engine 5": [
          "Download and First project",
          "User Interface",
          "Navigation",
          "View port Settings",
          "Creating and Transforming objects",
          "Post Process Volume",
          "Section Quiz 1"
        ],
        "Materials and Textures": [
          "Introduction to Material and Creating a Simple Material",
          "Creating Texture based Material",
          "Material Parameters, instance and Master Material",
          "Section Quiz"
        ],
        "Lumen, Lighting and 3D assets": [
          "Light Basics",
          "Introduction to Lumen",
          "16000+ free assets",
          "Section Quiz"
        ],
        "Landscape and Foliage": [
          "Introduction to Landscape",
          "Landscape Material",
          "Foliage basics",
          "Section Quiz",
          "Do you want to know more about Unreal Engine 5?"
        ],
        "Alien World Project": [
          "Create Project & File Migration",
          "Creating new level and Lighting our world",
          "Landscape creation and sculpting",
          "Mountains + Landscape Material + Atmosphere",
          "Water + Trees + Stones",
          "Post Process volume + lighting settings",
          "Adding Planet + Moon to our world",
          "Adding House + Astronaut to our world",
          "Cinematics (Video shot)",
          "Adding 3rd Person game to our world",
          "Section Quiz"
        ]
      },
      "requirements": [
        "In this course will start from complete beginning (For beginners and intermediate level)"
      ],
      "description": "Unreal Engine is a popular Engine for Game development. Its last version is Unreal Engine 5 released in 2021.\nThis is a complete beginner course of UE5. You will start by downloading and installing it for free. And we will cover all topics you need as a beginner. We start super simple so you need no prior experience of Unreal Engine 5 or any other game development or 3D software! With our online tutorials, you'll be amazed at what you can achieve right from the first moment you start the course.\nWe explained everything in the English language if you had any problem with any option of Unreal Engine 5 or you can't understand any lecture, You can ask in the Q&A part, we will create a new video lecture on that topic immediately.\nUnreal Engine 5 is in early access mode, if there is any change in its official release, I will update this course on time.\nEnvironments created in Unreal Engine 5, can be used in games and in movies. In this course, we will also cover creating cinematics and your first video shot in Unreal Engine 5. In the end, you will learn how to add a third-person game to your world and play it.\nTextures and Materials are the most important part of 3D, in this course, We explained both of them.\nIf you are completely new to Unreal Engine 5, We will teach you all basics. If you already know about unreal engine5, we will teach you how to create large worlds in this program. If you want to create movies, we will teach you how to create your first movie environment and animation in unreal engine 5. if you want to become a game developer, we will teach you how to create environments in Unreal Engine 5 and play the third-person game in your environment.\nDive in and learn Unreal Engine 5 now, you won't be disappointed!",
      "target_audience": [
        "Beginners to Unreal engine 5",
        "Game Developers",
        "Movie Creators",
        "Environment Designers"
      ]
    },
    {
      "title": "Unreal Engine 5 - Beginner Course for Game Development",
      "url": "https://www.udemy.com/course/unreal-engine-5-complete-beginner-course/",
      "bio": "Learn Game Development in UE5 Using Blueprints, No Coding Needed. Build Your First Playable Game from Scratch.",
      "objectives": [
        "Learn how to download and install Unreal Engine 5.",
        "Learn game development using Unreal Engine 5 & Blueprints.",
        "Learn about Actors, Meshes, and Objects essential for building your game.",
        "Use Blueprints to build interactions, events, and Gameplay mechanics - no C++.",
        "How to create Landscape and populate it with Foliage using Master Materials.",
        "Create mini game, interactions, and Gameplay loops."
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "The Basics": [
          "Downloading UE5",
          "Create your Project",
          "UE5 navigation, hotkeys and fundamentals",
          "UE5.6 updates"
        ],
        "Actors & Modeling": [
          "UE5 Actors",
          "Managing Actors & Objects",
          "Modeling",
          "Instructor support"
        ],
        "UE5 Materials": [
          "Working with Materials",
          "Custom Materials"
        ],
        "UE5 Lighting": [
          "Lighting system"
        ],
        "Blueprint system": [
          "Basics",
          "Event Graph",
          "BP Variables",
          "BP Functions"
        ],
        "UE5 Level": [
          "Create Landscape",
          "Master Material",
          "Foliage",
          "Scene Setup",
          "Blueprints for games 01",
          "Blueprints for games 02",
          "Blueprints for games 03",
          "Actor Interactions",
          "Instructor support"
        ],
        "Mini Game": [
          "Blueprint Interface",
          "Gameplay",
          "Third Person Character"
        ],
        "Extra Chapter - Widgets": [
          "Widget BP",
          "Widget Editor",
          "Score System",
          "Timer",
          "Additional Functions",
          "3D College Courses"
        ]
      },
      "requirements": [
        "Recommended: Desktop PC with Windows 10 (or later) 64-bit or a Mac with Mac OS X 10.9.2 or later",
        "Recommended: 8GB RAM",
        "Recommended: Quad-core Intel or AMD processor, 2.5 GHz or faster",
        "Recommended: DirectX 11 or 12 compatible video card",
        "Unreal Engine 5 can run on desktops and laptops with lower specifications, but this may impact performance.",
        "No previous programming experience needed"
      ],
      "description": "Learn Game Development with Unreal Engine 5 – Beginner Course. Start your journey as Game Developer with Unreal Engine 5 - Beginner Course for Game Development - possibly the most up to date and comprehensive course available online. This course is run by an Authorized Unreal Engine Instructor. Learn how to create & use Blueprints, Materials, Lighting, Widgets, and Landscapes with real-world examples. Build a mini game from scratch in UE5!\n\n\nWhy Choose This Course?\nWhen I started my journey with Unreal Engine, I had access to a vast amount of information about working with the engine. However, I quickly noticed that most of the available resources, even full courses failed to describe the entire process in a logical and comprehensible way. That’s why I created this course - to give beginners like you a clear, step-by-step path to mastering the fundamentals.\n\n\nHere’s what makes this course stand out:\nAlways Updated: Regularly refreshed to include the latest Unreal Engine 5 updates, so you’re always learning with the most current tools and techniques. Perfect for Beginner!\nBeginner-Friendly Structure: Start with no prior knowledge. Each lesson builds on the last, ensuring you gain confidence with every step.\nPractical Blueprint Training: Learn how to create, edit, and use Blueprints with real-world examples like opening doors, triggering events, and adding interactivity to your games. Visual Scripting in details.\nMaster the Material System: Create stunning landscapes using Unreal Engine’s material system. Learn to implement an automatic foliage system for detailed and realistic environments.\nLighting System Explained: Understand the lighting tools in Unreal Engine 5, including how to create dynamic, static, and baked lighting for immersive visuals.\nLandscape: You’ll learn how to build vast landscapes and terrains for your projects, then apply the Master Material system to automatically populate your environment with biomes and textures.\nCollision System Mastery: Learn how Unreal Engine handles collisions, from setting up collision meshes to configuring triggers and boundaries for Gameplay functionality.\nThorough Fundamentals: Gain a solid understanding of Unreal Engine 5’s core features, fully preparing you for more advanced topics.\nMini Game: This hands-on project will help you understand the entire workflow in Game Dev - from setting up a project, to creating environments, programming interactions, and finalizing a playable level. By the end of this chapter, you'll have a complete project ready to show off.\n\n\nIf you want to work with Unreal Engine for your projects or even become an indie developer, this course will be the perfect choice for you. Whether you are a complete beginner or looking to sharpen your skills, this course is designed to provide you with the essential knowledge and hands-on experience needed to confidently create and manage projects in Unreal Engine 5 the right way.\n\nLet’s dive in and start creating with Unreal Engine 5!",
      "target_audience": [
        "This course is perfect for beginners looking to create games from scratch with Unreal Engine 5. Whether you're new to game design or aiming to go pro, no programming experience is required!"
      ]
    },
    {
      "title": "The No-Code Revolution: Beginner's Guide to Game Development",
      "url": "https://www.udemy.com/course/the-no-code-revolution-beginners-guide-to-game-development/",
      "bio": "Learn the basics of game development without coding!",
      "objectives": [
        "Utilize the GDevelop game engine to create games without coding",
        "Adopt the thought process behind making game features",
        "Gain the skills & knowledge required to make simple games",
        "Make use of the approaches to further learning to be able to increase your game development skills",
        "Apply the fundamental aspects of game development: variables, collision, movement, music, sfx, & more",
        "Recreate the hit game Pong"
      ],
      "course_content": {
        "Before You Start the Revolution (GDevelop Installation & Asset Downloading)": [
          "Downloading GDevelop",
          "Download Assets"
        ],
        "Getting to Know GDevelop (Introduction to GDevelop)": [
          "Creating & Saving a GDevelop Project",
          "How should I save?",
          "Navigating GDevelop's Interface",
          "Events > Code (Introduction to GDevelop's Event System)",
          "Variables Introduction",
          "Variables Quiz",
          "New Variable System",
          "Using Variables to Trigger Actions",
          "Trigger Once Quiz"
        ],
        "Let's Make Pong! (Basic Movement)": [
          "Player 1 Movement",
          "Player Forcefield",
          "Player 2 Movement",
          "Ball Movement"
        ],
        "Let's Bounce! (Practical Variable Usage & Movement Using Forces)": [
          "Preparing for War (On a Whiteboard)",
          "Confusion On The Next Lesson",
          "Calculating the Ball's Distance from the Paddle (Y Distance)",
          "New Variable System (Reminder)",
          "Ball Angle Prediction (Player 1)",
          "Ball Angle Prediction (Player 2)",
          "Ball Bouncing (Part 1)",
          "Ball Bouncing (Part 2)",
          "Changing the Ball Speed Based on Trajectory",
          "Don't Look At Me (Layers & Layer Visibility)"
        ],
        "I Want to Win! (Scoring System & Finishing Touches)": [
          "Back in the War Room (Preparing to Make the Scoring System)",
          "Scoring System Foundation",
          "Restart Sequence (Part 1)",
          "Restart Sequence (Part 2)",
          "Game Over! (Create a Game Over Screen)",
          "Let's Finish This! (Adding Music & SFX)"
        ],
        "Basic Platformer (This is the Only Level)": [
          "Assets Needed (DOWNLOAD)",
          "Platformer Foundations",
          "Platformer Behavior Properties",
          "Changing Controls & Player Flipping",
          "Adding Animations to the Player",
          "Activating the Animations (Events)",
          "Making Levels Using Tilemaps",
          "Adding Spikes & Killing the Player",
          "This is the Last Level"
        ],
        "The Next Steps & Goodbye (for now)": [
          "How to Learn"
        ],
        "Bonus Lecture": [
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "A working computer (Windows, Mac, or Linux)",
        "An external mouse (highly recommended)",
        "A passion for learning"
      ],
      "description": "What is the No-Code Revolution?\n\n\nWelcome to Season 1 of the No-Code Revolution! The No-Code Revolution is a course series dedicated to helping you master 2D Game Development by recreating the core functionality of hit video games. In future seasons, we will be recreating Super Mario Bros, Tetris, and even Celeste!\n\n\nSeason 1\n\n\nDo you want to create video games without coding? If so, this course is the perfect fit for you. In this course, you will be learning how to use one of the fastest growing open-source game engines in the world- GDevelop! GDevelop has a fast-growing community with hundreds of thousands of users. GDevelop is also being used by major companies such as Google and Amazon. Gdevelop is even being used in a few schools and universities around the world!\n\n\nYou will learn the foundational skills of GDevelop that serve as the stepping stones to game development mastery. But, most importantly, you will learn through the process of doing by creating the notable game of Pong! Recreating Pong will help you learn about:\n\n\nObject Movement\nPlayer Input\nAdding Forces to Objects\nObject Collision\nPractical Math Usage in Games\nProper Variable Usage\nMusic & SFX\nand more!\nSounds good, but is this course for me?\n\n\nThis Course is For:\n\n\nThose who are new to game development\nThose who want to create games without coding\nThose who don't know how to code\nThose who want to learn a new game engine\nThose who are hard-working\nThose who want to join a game development Revolution!\n\n\nThis Course is NOT For:\n\n\nThose who are lazy\n\n\nIf you're ready to learn how to make video games without coding, enroll in the No-Code Revolution today!",
      "target_audience": [
        "Those who are new to game development",
        "Those who want to create games without coding",
        "Those who don't know how to code",
        "Those who want to learn a new game engine",
        "Those who are hard-working",
        "Those who want to join a game development Revolution!"
      ]
    },
    {
      "title": "Create an Open-World Adventure Game in Unreal Engine 5",
      "url": "https://www.udemy.com/course/create-an-open-world-adventure-game-in-unreal-engine-5/",
      "bio": "Master Unreal Engine 5: Build an Open-World Adventure with a Timer System, Enemy AI, and a Dynamic Game Environment!",
      "objectives": [
        "Master the UI, navigation, object manipulation, and essential tools from scratch",
        "Create a playable character with smooth animations for running, jumping, and crouching",
        "Implement intelligent enemies that chase and attack the player",
        "Build a detailed game world with beautiful landscapes, and realistic HDRI lighting"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Basics of Unreal Engine 5": [
          "Note Before Starting the Course",
          "Downloading UE5 and Creating a Project",
          "Basics of the User Interface",
          "Moving, Scaling and Rotating Objects",
          "Viewport Options and Ray Tracing",
          "Importing 3D Models from the Internet",
          "Adding Materials in Unreal Engine 5",
          "Basics of Lighting in Unreal Engine 5"
        ],
        "Making the Third Person Game": [
          "Setting up the Level and Adding the Character",
          "Tweaking the Environment",
          "Building the World for the Game",
          "Intro to Blueprints and Building a Timer System",
          "Creating Widgets and Setting up Win Lose Logic",
          "Importing Enemy Character",
          "(Optional) Adding Custom Characters",
          "Working on the Enemy Attack Logic",
          "Making Final Tweaks Pt.1",
          "Packaging the Game"
        ]
      },
      "requirements": [
        "No Prior Experience with Unreal Engine 5 is Required.",
        "Some Experience with Blender 3D may be Helpful."
      ],
      "description": "Create an Open-World Adventure Game in Unreal Engine 5!\nUnreal Engine 5 is one of the most powerful game engines today, but learning it can feel overwhelming—especially for beginners. That’s why I designed this course to help absolute beginners build an open-world third-person game from scratch! No prior experience with Unreal Engine is needed—anyone can follow along and start creating their own game.\nThis is a project-based course, and we’ll cover everything you need to create an immersive gameplay experience. You'll learn how to:\n\n\nLearn Unreal Engine 5 from scratch—understand the UI, navigate the editor, and set up a project.\nImplement a playable character with fluid parkour movements.\nImplement a dynamic enemy AI system—enemies will chase and attack the player in real time.\nBuild an open-world environment, complete with detailed and realistic landscapes.\nCreate a timer system to add tension and challenge to the game.\nDevelop a functional health system where the player takes damage from the enemies.\nOptimize lighting and post-processing for a cinematic, high-quality look.\n\n\nThis course is designed for absolute beginners, so even if you’ve never opened Unreal Engine before, you’ll be able to follow along. The best part? You’ll get to experience the real development process—solving problems and making creative decisions just like a professional game developer!\nSo what are you waiting for? Start today and bring your dream game to life!",
      "target_audience": [
        "Aspiring Game Developers, Indie Creators, and Anyone who wants to build Games in Unreal Engine 5."
      ]
    },
    {
      "title": "JavaScript Game Code Project make a Breakout Game Exercise",
      "url": "https://www.udemy.com/course/create-javascript-game/",
      "bio": "Learn more about JavaScript functionality how you can make page elements dynamic and interactive all using JavaScript",
      "objectives": [
        "Build a simple interactive JavaScript based Game",
        "Apply JavaScript animations",
        "Apply and practice JavaScript",
        "Learn and explore whats possible with JavaScript and the Document Object Model DOM"
      ],
      "course_content": {
        "Introduction to creating interactive and dynamic content with JavaScript": [
          "JavaScript Breakout Introduction",
          "PreGame HTML page setup",
          "Interactive with JavaScript",
          "JavaScript Functionality",
          "StartGame Animations JavaScript",
          "JavaScript Get Moving",
          "Source Code 5",
          "Bouncing Ball JavaScript",
          "Source Code 6",
          "Detect Collision JavaScript",
          "Source Code 7",
          "Paddle Ball Hits JavaScript",
          "Tweak gameplay update JavaScript",
          "Bring the Bricks create targets to hit",
          "Source Code 10",
          "Brick Collision Detection and Hits",
          "Tweak and Tune our Code",
          "Updates to Game Play - play the game",
          "Source Code Review",
          "Source code and Resources"
        ],
        "Bonus Section": [
          "Bonus Lecture",
          "Extended Study Content"
        ]
      },
      "requirements": [
        "Basic JavaScript HTML and CSS",
        "Computer Access",
        "Desire to learn"
      ],
      "description": "Learn and practice JavaScript with this fun game building exercise course\nBUILD a - JavaScript Breakout game from scratch\nLearn JavaScript and have fun doing it, building an exciting playable game within the course.\nSource Code is included!!!!  Work along side the lessons to build your own version of the game.\nDid you want to PRACTICE and LEARN more about using JavaScript, then this course is perfect for you to advance your skills in a fun step by step course teaching you how to build a game from scratch.\n\nWithin the course we explore animation functionality and how to apply it within your code to make things happen.\nHow you can use JavaScript to create and update elements within your page.  Setup animations and move things around.  JavaScript is designed to make your web content interactive and dynamic which is demonstrated within the building of a game only using JavaScript.\nJavaScript is a prerequisite to this course, The course is designed to practice JavaScript and prior knowledge of JavaScript is needed to take this course.\nAll JavaScript no libraries and no filler, JUST JavaScript !!!!\nThe possibilities are endless, using the DOM and creating elements provides you a wide variety of options where you can take the code provided within this course and extend on it in any number of directions.   Learn practice and have fun.\nSource Code is included to get you started quickly\nFast friendly advice and help is always available within the Q&A section\nTaught by an instructor with many years of web development and teaching experience.\nLearn step by step how to create a simple game from scratch, with helpful tips and resources along to way.   Explore how game logic is applied and tweaks for coding and game improvement.\nNothing to lose, join now and see what you can build with JavaScript.",
      "target_audience": [
        "Anyone who wants to learn how to put together a quick game using only Vanilla JavaScript",
        "Anyone who wants to practice and learn more about how to use JavaScript",
        "JavaScript Beginners"
      ]
    },
    {
      "title": "Android Game development- Beginner's To Pro-Without Coding !",
      "url": "https://www.udemy.com/course/make-android-game-apps-without-coding-everyone-can-make/",
      "bio": "Start A Mobile App Business And Earn Money By Making Android Game Apps - Without Coding. Now Everyone Can Make Games.",
      "objectives": [
        "You will make you own Games",
        "Study how to make Game app with Zero of cost.",
        "Study the easiest and simplest way of making Game app.",
        "Improve your monthly earnings"
      ],
      "course_content": {
        "How to get the Best out of this course & Course structure!": [
          "Remember this",
          "Income Proof : Just to motivate you !",
          "How To get best out of this course ?",
          "Tips For this section.!"
        ],
        "How to start and where to start ?": [
          "How to start Effectively ? : 10000 miles journey begins from a single step !!",
          "Themes or game ideas",
          "Downloading Our app and setting it up ! yeah !!",
          "There was a Doubt and It has been solved here !",
          "Best, Advertisement Companies that Let you Earn more than you think ! Really !!",
          "Basics Or Quick walkthrough !"
        ],
        "Collecting the resources that we need :: Second step of app Making !": [
          "Revealing ::: Where the secret palace of Graphics.!!",
          "Where you should pay for the Graphics . Where Actually ...?",
          "The Sounds that we need......Yes ! Its very Important...!!",
          "Validating and Designing the Name Of the App.",
          "The Main different type of images that we use to make the Game Apps",
          "The Description about the different Images.."
        ],
        "Making Everything Perfect to Move on to the final steps...": [
          "Setting up the background image in the way we need it .",
          "Problem that You are going to Face with the audio & How to solve it easily .",
          "Things to remember ! Do not forget them.",
          "Making the icon perfect ,so that it best suits our game app.!!",
          "Tips and the conclusion of last lectures.",
          "What is S.D.K ( Devkit ) and how we can integrate it with our app ?",
          "Setting up the environment to make the game app !",
          "Putting All the resources together to make our Game App",
          "Building Your APK To Upload in Android Market.",
          "Notes for the last lecture..IMPORTANT !",
          "Updating the Game app that we have just created.",
          "Lets Try This !"
        ],
        "Bonus Section To improve your skills": [
          "How make a 3D promo image for our app. Without spending a single dollar.",
          "Where and how to sell your app for more money ?",
          "Upcomming lectures to help you more ..."
        ]
      },
      "requirements": [
        "A software which is free to download",
        "Passion to create Game Apps"
      ],
      "description": "***********************************************************************************\nCOURSE UPDATES !\n1300+ Students have already enrolled the course !\nTop Rated Udemy game app making course !\nThe price of the course is going to increase from $19 to $99 on 05/08/2015 . So HURRY up and grab a seat and make game apps.\nENROLL The course and publish your game app within hours.\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n***** Have you heard of \"Making android games without coding\" ? *****\nThis course will let you create game apps without coding. I had many students those who wanted to create game apps but they where not interested to study codes or for some making game app with codes were hard . So here i am introducing a way to create game apps without coding from scratch to end you do not have to refer anything from anywhere rather than in this course. Everything you need is included in this course..\nWHAT YOU WILL GET AFTER COMPLETING THE COURSE ?\nYou will be able to make game app without coding.\nYou will be able to get all free resources.\nYou can publish each app every weekend.\nYou will be able to make a lot of passive income.\nYes Here Is The Way To Make Android Game Apps Without Coding !\n************ READ ON ! **************\nLooking to boost your income as a App developer? Or maybe you're seeking a career change that gives you more free time and flexibility?\nThen this is the right course for you.\nYOU CAN BECOME AN ANDROID GAME APP DEVELOPER\nAndroid has a huge platform where you can sell your game app and make a lots of money . This course will take you from the very basic concepts of game development using the easy game app making software to the advanced level .\n************** IS THIS COURSE UNABRIDGED ?\nYES OF COURSE ! This course is an unabridged edition and everything you need to make game app using this software is completely explained in this course so you don't have to study a bit from outside and you don't want any knowledge in game app development . YES this is absolutely right place for BEGINNERS and one who want to make PASSIVE INCOME .\nIf you want to publish android game app without much effort or any types of coding then this is the right course.\nYou can make more money than you really think by selling the app we are making . I will show you multiple ways to make money from the app that you are making .\nHOW MUCH YOU WANT TO SPENT ?\nThere is actually no more expenses except signing up for Google play that will just cost you a $25 (Developer account). And we will show you the places from where you can get the resources we want without spending a single dollar.\n*********** HOW MUCH YOU CAN EARN *******\nYou can earn more than you think. I am the one example of that after studying this method i could create and publish game app every week . So i could make a lot of money without putting more effort . Join this course and follow me and you will make a lot money than you think.\nENROLL THE COURSE NOW AND PUBLISH YOUR VERY FIRST GAME APP.",
      "target_audience": [
        "Who wants to create Game Apps",
        "Game and mobile app developers.",
        "Anyone who wants to make easy money from Game Apps.",
        "Absolute Beginners"
      ]
    },
    {
      "title": "Unreal 5 Blueprint Tools for Artists",
      "url": "https://www.udemy.com/course/unreal-5-blueprint-tools-for-artists/",
      "bio": "Your complete course for learning Blueprints for Artist Tools",
      "objectives": [
        "Learn the basics of the Blueprint toolkit, using industry standard best practices",
        "Understand the powerful concepts of User Exposed Variables, For Loops, Splines, Timelines and much more",
        "Start to understand the performance implications of draw calls and how to best control that when spawning meshes dynamically",
        "Understand the tools and concepts of player based interaction with Blueprints"
      ],
      "course_content": {
        "Source Files": [
          "Introduction"
        ],
        "Introduction": [
          "Introduction to the Course",
          "Introduction to the UI",
          "Material Inheritance",
          "BP Inheritance",
          "Parameter Start",
          "Parameter Material Setup",
          "Exposed Parameters",
          "Colour and Mesh Parameters",
          "Organisation"
        ],
        "Light Prefab": [
          "Prefab Mesh Visibility",
          "Prefab Mesh Location",
          "Prefab Light",
          "Prefab Light Material",
          "Function Setup",
          "Function Between",
          "More Functions",
          "Lamp Function",
          "Events and Inputs",
          "Auto Light",
          "Counter",
          "Destruction"
        ],
        "Book Pile": [
          "Randomisation",
          "For Loops",
          "Loop Index",
          "Random Mesh Array",
          "Save Mesh Array",
          "Random Colour Loop",
          "Seeded Random",
          "Book Pile Loop",
          "Width From Bounds",
          "Cumulative Height",
          "Random Scale and Rotation",
          "Manual Random Index",
          "No Duplicates",
          "Random Scale",
          "Height Scale",
          "Draw Calls Setup",
          "Draw Calls Comparison",
          "Atlasing"
        ],
        "Spline Tools": [
          "Spline Meshes",
          "Spline Components",
          "Spline Loop",
          "Spline Segments",
          "Spline Number of Meshes",
          "Fence Posts Loop",
          "Fence Random Posts",
          "Fence Planks",
          "Fence Planks Alignment",
          "Fence Final Post",
          "Books Setup",
          "Books Cast",
          "Books Child Construction Script",
          "Books Clear Existing Books",
          "Line Traces",
          "Other Traces",
          "Trace Setup",
          "More Traces"
        ],
        "Timelines": [
          "Timeline Introduction",
          "Timeline Lerps",
          "Timeline Random Start",
          "Timeline Random Loop",
          "Timeline Spline",
          "Timeline Rotation Fix",
          "Fire Light and Recap"
        ]
      },
      "requirements": [
        "Some basic understanding of the Unreal Engine"
      ],
      "description": "Welcome to my Unreal Engine 5 Blueprints Course - Blueprints for Art Tools, here on Udemy.  This course will take you from the basics of the Blueprint toolkit and introductory concepts, to a fully interactable dynamic light asset, a book pile spawner, a fence spline tool and an animated fire light. With over 40 example blueprints breaking down each new concept that gets introduced as well as the step by step process of the worked examples. This is the perfect introductory course for someone new to blueprints or someone more experienced looking to expand their skillset.  Over the course of 7 hours, all broken down into bite size 10-15 min videos, we cover everything from the UI, Variables, Events, Triggers, Loops, Randomisation, Splines, Timelines and so much more.\nEach chapter contains many examples, full of handy comments, as well as a many corresponding video lectures that explains in full detail what is being done and why - so you're learning both the techniques being used and building up a base of  background knowledge of first principal concepts, allowing you to build up your own effects in future.\nWith industry standard practices from my 15 year career, including 5 years of teaching Game Art at a Masters Degree level, this course will empower you to make your own Blueprint Tools to speed up your workflow.",
      "target_audience": [
        "Anyone wanting to improve their skills and learn about the powerful Art tools available via Blueprints"
      ]
    },
    {
      "title": "Godot 2D Academy: Create a Brotato style game with Godot 4",
      "url": "https://www.udemy.com/course/godot-2d-academy-create-a-brotato-style-game-with-godot-4/",
      "bio": "Master 2D Game Development with the Latest Version of Godot and GDScript",
      "objectives": [
        "Master Godot 4 and its interface to create 2D games.",
        "Implement a modular spawner.",
        "Create item systems with tiers.",
        "Build interactive panels.",
        "Reuse scenes and classes.",
        "Create a complete weapon system.",
        "Add a Sound Manager",
        "Master the use of Resources"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Game Assets",
          "Important Notes"
        ],
        "UPDATE: New Godot Versions": [
          "Godot 4.5 Beta 1 - 4",
          "Godot 4.5 Official"
        ],
        "Create Player": [
          "Introduction",
          "Create Project",
          "Create Unit Scene",
          "Player Scene",
          "Player Dash",
          "Stats Resource",
          "Create Trail",
          "Create All Players",
          "Add Arena",
          "Fix Parent Node",
          "Section 2 Project"
        ],
        "Add Enemy": [
          "Introduction",
          "Enemy Scene",
          "Follow Player",
          "Hitbox and Hurtbox",
          "Health Component",
          "Health Bar",
          "Add Flash",
          "Block Attacks",
          "Add Floating Text",
          "Section 3 Project"
        ],
        "Melee Weapons": [
          "Introduction",
          "Configure Weapons",
          "Create Weapon Scene",
          "Weapon Position",
          "Equip Weapons",
          "Closest Target",
          "Melee Attack",
          "Knockback",
          "Challenge: Complete Weapons",
          "Review Weapons",
          "Section 4 Project"
        ],
        "Range Weapons": [
          "Introduction",
          "Configure Range Weapon",
          "Create Projectile",
          "Configure Pistol",
          "Add More Projectiles",
          "Challenge: More Weapons",
          "Review Range Weapons",
          "Section 5 Project"
        ],
        "Enemy Attack Behavior": [
          "Introduction",
          "Charge Attack Behavior",
          "Shooting Attack Behavior",
          "Section 6 Project"
        ],
        "Enemy Spawner": [
          "Introduction",
          "Wave Data",
          "Add Spawner",
          "Complete Waves",
          "Clean Arena",
          "Pause State",
          "Section 7 Project"
        ],
        "Upgrade Panel": [
          "Introduction",
          "Stats Container",
          "Update Stats",
          "Upgrade Card",
          "Upgrade Panel",
          "Item Upgrade",
          "Load Upgrades",
          "Continue Waves",
          "HP Regen",
          "Challenge: Add More Upgrades",
          "Calculate Chances",
          "Load Items Using Tiers",
          "Update Item Style",
          "Life Steal and Harvesting",
          "Section 8 Project"
        ],
        "Shop Panel": [
          "Introduction",
          "Shop Card",
          "Shop Panel",
          "Load Weapons",
          "Get Descriptions",
          "Show Shop Panel",
          "Add Coins",
          "Move Coins",
          "Buy Weapons",
          "Check Combine",
          "Combine Weapons",
          "Sell Weapons",
          "Add Passives",
          "Add Tier Outline",
          "Outline Shader",
          "Section 9 Project"
        ]
      },
      "requirements": [
        "Have a solid foundation in Godot 4.",
        "A proactive attitude and willingness to learn.",
        "A PC or laptop capable of running Godot 4.4."
      ],
      "description": "Learn to Create a Brotato-Style Game with Godot 4\nAre you looking to boost your game development skills using Godot 4 and GDScript?\nThis course is for you!\n\n\nNEW SECTION: Save Game State\n\n\nIn this project, we’ll practice the basics of Godot 4 and take our skills further by building a Brotato-style game packed with mechanics and systems found in Bullet Hell or Survivor games. You’ll find everything you need to master Godot—one of the most powerful and fast-growing tools in the industry.\nWhat will you learn in this course?\nScene composition\nScene and class inheritance\nWorking with different nodes\nSave game state\nCreating reusable components\nBuilding user interfaces\nCreating item systems\nBuilding a full weapon system\nCreating entity systems\nDesigning panels and cards\nCreating item tiers\nMaking a complete spawner\nGetting items based on tiers\nBringing enemies to life with abilities\nStructured programming\nAnd much more!\nYou’ll also get access to:\nAll assets and resources used in the course\nFull source code to download and compare\nGodot is growing fast, and now is the best time to learn it.\nBecome a professional game developer and start building your own projects with Godot 4 and GDScript.\nEnroll now and take your passion for game development to the next level!",
      "target_audience": [
        "People interested in 2D game development who want to improve their skills.",
        "Programming and design students who want to apply their knowledge in practical and creative projects.",
        "Developers with experience in other engines looking to expand their skills and explore new capabilities.",
        "Video game enthusiasts who want to understand the creation process and develop their own games."
      ]
    },
    {
      "title": "Unity Game Tutorial: Battleships 3D",
      "url": "https://www.udemy.com/course/unity-game-tutorial-battleships-3d/",
      "bio": "Learn how to create your own Battleships 3D game in Unity Game Engine.",
      "objectives": [
        "How to create a fully working Battleships 3D game with Unity.",
        "We take a look into C# classes, functions, variables, arrays, lists, loops and much more.",
        "Raycasting for physical checks.",
        "Animate UV textures by code for animated Water.",
        "How AI works and plays alone."
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Concept & Unity Setup": [
          "The Concept",
          "Project Setup"
        ],
        "Playfield": [
          "Tile Setup",
          "Tile Info #1",
          "Playfield #1",
          "Animating Water UV"
        ],
        "Placing Manager": [
          "Placing Manager #1",
          "Placing Manager #2",
          "Creating the Ghosts",
          "Ghost Behavior",
          "Activating Ghosts",
          "Checking for Tiles",
          "Placing Manager & Layer",
          "Using Ghosts",
          "Rotating Ghosts",
          "Ship Prefabs",
          "Ship Behavior",
          "Placing Ships"
        ],
        "Placing User Interface": [
          "Placing Button Design",
          "Placing Canvas & Buttons",
          "Button Input",
          "Limit Ship Placement"
        ],
        "Game Manager": [
          "The Tile Class",
          "Player Class",
          "Update Grid",
          "Updating Ship Prefabs",
          "Debug Grid",
          "Testing Debug",
          "Check if Occupied"
        ],
        "Placing Management #2": [
          "Visual Ship Place Amount",
          "Clear All Ships",
          "Check if All Ships placed",
          "Check Own Playfield #1",
          "Check Own Playfield #2"
        ],
        "Battle Preparation Steps": [
          "Game State Maschine #1",
          "Game State Maschine #2",
          "Setting The Game Start",
          "Hiding Panels",
          "Panel Buttons",
          "Ready Button Function 1",
          "Switching Players",
          "Camera Positions",
          "Moving the Camera",
          "Completing Ready Button Function",
          "Auto Place Ships #1",
          "Auto Place Ships #2",
          "Auto Place Ships #3",
          "Auto Place Ships #4"
        ],
        "Game Play": [
          "Shooting Panel Buttons",
          "Updating TileInfo",
          "Calculating Opponent",
          "Check Shot #1",
          "Check Shot #2",
          "Check Shot #3",
          "Check Shot #4",
          "Check Shot #5",
          "Shooting a Rocket",
          "Updating The Check Shot"
        ],
        "AI Programming": [
          "NPC 1 - Check Revealed Tiles",
          "NPC 2 - Neighbour Tile Check",
          "NPC 3 - Shoot a Random Neighbour",
          "NPC 4 - Normal Random Shot",
          "NPC 5 - Bug Fixes - Trigger NPC Shot",
          "NPC 6 - Update GetNeighbours",
          "NPC 7 - Autoplace"
        ]
      },
      "requirements": [
        "PC or Mac.",
        "Mouse & Keyboard",
        "Basic knowledge in Unity is always helpful.",
        "The mood to finish the course.",
        "Unity Version 5.6+ is recommended."
      ],
      "description": "In this Course you'll learn how to create a Battleships 3D with Unity Engine. Pen and Paper games like Battleships are also quite popular even on mobile or pc. I will show you step by step how you can create Batlleships 3D.\nThis course is a Beginner/Intermediate course, so if you have trouble in any case, write me a message or Q&A, and i'll help as best as i can.\nIf you are beginner, you might have some trouble to follow, but the videos will guide you through the complete course. Don't forget you only become better if you repeat things and keep on learning!\nSo we create Systems which will give us the freedom to:\nC# (Monodevelop)\nPlacing mechanism to place all Battleships in a 3D\nA statemaschine to handle all players / cpus\nTurn base game play\nAI which is able to play completely alone\nUnity (2019.1)\nwe create a playfield\nwe create a GameManager\nwe create a main menu scene where we can pick who wants to play\nwe create a game over scene panel\nCourse Material\nI provide the following Material with the Course:\n5x Ship 3D Model\n1x Rocket 3D Model\n7x Button Graphics 2D\n1x Tileable Water Texture 2D\nYou have to write the code on your own, i do not provide the final scripts!\nAll other graphics for Menu's, Icons, Images or Buttons need to be created on your own.\nAll Materials i provide are for education only and should not be in your final release!\nConclusion\nIn the end of this course you will have a fully functional Battleships 3D Game.\nChallenge\nAfter you have created nice Menus, Buttons, and maybe additional content, upload the Game to any Gaming Website, Google Playstore, Apple Store or even Windows Store or Steam.\nSo what are you waiting for?\nLet's make your dream game a reality!!\nLevel: Beginner\nVideo Course Length: ~9.5 hours\nUnity Version required: 5.3+",
      "target_audience": [
        "You always wanted to create your own game.",
        "You want to learn Unity.",
        "You want to finish your first game.",
        "You always wanted to create your Battleship 3D game."
      ]
    },
    {
      "title": "Create 2D Idle Clicker Game With Unity & C#",
      "url": "https://www.udemy.com/course/create-2d-idle-clicker-game-with-unity-c/",
      "bio": "Create 2D Idle Clicker Game With Unity & C#",
      "objectives": [
        "progarmming with C#",
        "work with unity",
        "Develop a complete 2d Game from scratch using C# and Unity",
        "Create a full game"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "New Project",
          "Game Assets"
        ],
        "UI Setup": [
          "UI Setup",
          "Enemy UI Setup"
        ],
        "Enemy": [
          "Enemy Health",
          "Enemy Controller Script",
          "Getting Gold From Enemies",
          "Changing background",
          "Boss enemy"
        ],
        "Auto Clicker": [
          "Auto Clicker Button",
          "Enemy Animation",
          "Convering Gold To Notate Number",
          "Gold Image Animation",
          "Button Clicker Design",
          "Player Health",
          "Player Health/ Magic UI",
          "Health/Magic Regeneration",
          "Lighting Effect"
        ],
        "Save & Load System": [
          "Save & Load Gold in game",
          "Save&Load Buttons Value & fixing Clicker Time"
        ],
        "Ability System": [
          "Ability UI",
          "ability Script Part 1",
          "Ability Script Part 2",
          "Save&Load Ability Stats",
          "Player Death",
          "Enemy Wave System"
        ],
        "Main Menu": [
          "Main Menu",
          "Fixing Click Button",
          "fixing load buttons"
        ]
      },
      "requirements": [
        "Have a PC or Mac"
      ],
      "description": "Learn how to create your very own 2D Idle Clicker game for mobile or PC using Unity2D, an industry-standard program used by many large gaming studios and indie developers across the world.\nYou won’t just be learning programming concepts in this course, but tying these concepts to real game development uses. You will have access to a course forum where you can discuss the topics covered in the course as well as the next steps to take once the course is complete.\nThis course has been designed to be easily understandable to everyone,we start from scrach,easy codes to hard codes and every code will be explained so whether you’re a complete beginner, an artist looking to expand your game development range or a programmer interested in understanding mobile game design, this course will help you gain a greater understanding of development.\nAt the end of this course you will have developed the ability to create such PC game elements as:\nCreating the world\nMake enemy\nMake player units\nMaking diffrent Enemies\nLearning C# codes\n\n\nStart learning today and let me help you become a mobile and PC game developer!\n\n\n\n\nUnderstand how to earn revenue using advertising in their games\nLearn C#, a modern versatile programming language\nUnderstand the capabilities of mobile development in Unity\nDevelop strong and transferable problem solving skills\nGain an understanding of the game development process\n\n\nMac or PC capable of running Unity 2D\nThe latest version of Unity 2019 or 2020\n\n\nAnyone who wants to make their own mobile and pc games\nAnyone interested in learning to publish apps and games to the Play Store or stream\nComplete beginners with an interest in learning mobile and PC game development\nDevelopers who want to re-skill across to mobile development\nPeople who want to create and publish their own mobile or PC games",
      "target_audience": [
        "Beginners to advance"
      ]
    },
    {
      "title": "Python Game Development with Pygame Zero for Beginners",
      "url": "https://www.udemy.com/course/python-game-development-with-pygame-zero/",
      "bio": "for beginners, kids or course tutors.",
      "objectives": [
        "Python programming basics",
        "Building Games with Pygame Zero without needing to know the details of the Pygame API or to write complicated Event Loop",
        "Create simple to complex games with Python and Pygame Zero",
        "Implement simple game mechanics with Pygame Zero",
        "Game Development concepts like collision detection, object movements, object animations and etc.",
        "Adding and Removing Graphics/Sounds Music from the Game",
        "Controlling the Game using Input controls like mouse and the keyboard"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Installation on Window": [
          "Installation on Window 10",
          "Create Your First Pygame Zero Program On Window 10"
        ],
        "Installation on Macbook": [
          "Installation on Macbook",
          "Create Your First Pygame Zero Program on MacOSX"
        ],
        "Learning The Basic": [
          "The Built-in Functions of Python",
          "Variables In Python",
          "Learning Numbers and Operators in Python",
          "Strings",
          "Introduction to List Part 1",
          "Introduction to List Part 2 and Tuple",
          "Boolean Values and Its Operators",
          "Decision Making in Python",
          "Introduction to Loop in Python Part 1",
          "Introduction to Loop in Python Part 2",
          "Build Your Own Function in Python Part 1",
          "Build Your Own Function in Python Part 2",
          "Optional Parameter in Function",
          "Naming Convention in Python",
          "Type of Errors in Python",
          "Scope of Variables in Python"
        ],
        "Your First Python Game - Shoot The Alien": [
          "Shoot The Alien Part 1",
          "Shoot The Alien Part 2",
          "Shoot The Alien Part 3",
          "Shoot The Alien Part 4",
          "Shoot The Alien Part 5"
        ],
        "Busy Bumblebee Collecting Flowers": [
          "Bumblebee Part 1",
          "Bumblebee Part 2"
        ],
        "Connecting The Satellites": [
          "Connecting Satellites Part 1",
          "Connecting The Satellites Part 2",
          "Connecting The Satellites Part 3"
        ],
        "Shooting Stars": [
          "Shooting Stars Part 1",
          "Shooting Stars Part 2",
          "Shooting Stars Part 3",
          "Shooting Stars Part 4",
          "Shooting Stars Part 5"
        ],
        "Quiz Master": [
          "Quiz Master Part 1",
          "Quiz Master Part 2",
          "Quiz Master Part 3",
          "Quiz Master Part 4",
          "Quiz Master Part 5",
          "Quiz Master Part 6",
          "Quiz Master Part 7"
        ],
        "Ballon Flight": [
          "Ballon Flight Part 1",
          "Ballon Flight Part 2",
          "Ballon Flight Part 3",
          "Ballon Flight Part 4",
          "Ballon Flight Part 5"
        ]
      },
      "requirements": [
        "No"
      ],
      "description": "Computer programmers are the unsung heroes of the modern world. From smartphones to laptops, traffic systems to bank cards, their hard work touches almost every aspect of our lives. Behind each technological advance is a team of creative coders.\nOver the past 30 years, computer games have become one of the most exciting and popular areas of the entertainment industry to work in. Becoming a game programmer takes creative talent to help to create the story, graphics, music, and characters you need for your games, and the technical know-how brings them to life. Who knows? This course could be the very first step on your journey from gamer to game maker.\nThis course uses a programming language call Python, a fairly simple text-based language, and is perfect for kids and beginners, or as a step up from Scratch. However, unlike Scratch, it is not a purpose-built language to teach coding. Python is the world's fastest-growing programming language and one of the most widely used professional programming languages in the world among software engineers, mathematicians, data analysts, scientists, accountants, and even kids. In fact, it should be the first programming language to learn.\nThe best way to learn any new language is to get stuck in, and programming languages are no different. Building your own computer games is a fun and immersive way to combine theory and practice. This course is divided into thirteen classes, starting from the basics of Python to building complex games that are enjoyable to learn, and fun to play.\nIn this course, we will use Pygame Zero, a Python library built around the famous and long-lived Python game engine, Pygame for all our game projects. Pygame Zero takes away the complicated interface required by Pygame so that I could focus on the teaching and you could focus on the learning of the gist of Python programming.\nIn total, we will build eleven games in this course, and each of them is treated as a separate game project and is designed in such a way that you will be able to apply and practice the programming concepts and ideas that you have learned in the previous projects into the current one, plus the new techniques in the current project to bring your skills to the next level. So, by the end of this course, you should be able to master the fundamental elements of Python programming.\nIn the last section of the course, there are nine lessons on the introduction to object-oriented programming in Python, the most used programming methodology in the software development world. This section is designed to prepare you for the next level of Python programming.\nThis course will help you start an incredible adventure into the world of programming. Most importantly, have fun while learning, once you have completed the games, you can show them off to your friends and I hope you enjoy playing them as much as I enjoyed creating them for you.\nThis course is intended for purchase by adults.",
      "target_audience": [
        "Beginners Python developers curious about Pygame or Pygame Zero",
        "Trainers or Instructors who are interested to teach Python for beginners",
        "Colleges Students who are interested in Python Programming",
        "Parents who are interested to introduce Python Programming to their children"
      ]
    },
    {
      "title": "Create an Augmented Reality Game using Unity 3D in 1 Hour!",
      "url": "https://www.udemy.com/course/unity3d-create-an-augmented-reality-balancing-game/",
      "bio": "Learn how to create an Augmented Reality game in 1 hour!",
      "objectives": [
        "Incorporate Augmented Reality into their own games."
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Installing and Setting Up Unity",
          "Creating Our Project",
          "Setting Up Vuforia Augmented Reality"
        ],
        "Developing the Game": [
          "Adding a Player-Controlled Platform",
          "Spawning our 3D Objects",
          "Creating a \"Shredder\"",
          "Finishing the Game: Adding Textures and More 3D Objects",
          "Final Build (Android)",
          "Download the Project"
        ],
        "Conclusion": [
          "Conclusion"
        ]
      },
      "requirements": [
        "A little bit of C-Sharp knowledge is advisable"
      ],
      "description": "Learn how to create an amazing augmented reality game in an hour! This is simply done by using Vuforia and its special toolset to help you quickly design a full-fledged game! Surprisingly, not many people have heard of this asset, and that's why we are here. This course is designed to help you integrate augmented reality into one of your games, or create a cool new game easily. To maximize your understanding of everything taught in this course, we recommend you to check out one of the beginners' guides on Unity's website. Finally, a finished copy is provided if you encounter any problems during the course.",
      "target_audience": [
        "Developers with very basic knowledge of Unity, such as what most of the components are and how to use them.",
        "This course isn't for you if you are looking for advanced 3D game programming."
      ]
    },
    {
      "title": "Build a Space Shooter game in Clickteam Fusion 2.5",
      "url": "https://www.udemy.com/course/build-space-shooter-game-clickteam-fusion-25/",
      "bio": "Design and Build a cool Space Shooter game with Clickteam Fusion 2.5",
      "objectives": [
        "Build your very own custom Space Shooter game in Clickteam Fusion 2.5",
        "How to write a custom movement engine",
        "How to design a one-frame game engine",
        "How Fast Loops and ForEach Loops work",
        "How to Save and Load games",
        "Build a cross-platform compatible space shooter game"
      ],
      "course_content": {
        "Course Introduction": [
          "Introduction",
          "Preparing the Content",
          "What will the course consist of?"
        ],
        "Preparing the Game Assets": [
          "Setting up the App",
          "Importing your Player Character and Looking at the Properties",
          "Creating the Space Effect"
        ],
        "Preparing the Playarea": [
          "Creating a Star Field",
          "Spawning Nebulae",
          "Section Review"
        ],
        "Creating the HUD": [
          "What is a Layer in Fusion 2.5?",
          "Importing the HUD Assets and Designing the HUD"
        ],
        "The Basic Implementation": [
          "Custom Spaceship Movement",
          "Shooting Bullets",
          "Enemy Movement - Part 1",
          "Enemy Movement - Part 2",
          "Enemy Eyes - Part 1",
          "Enemy Eyes - Part 2",
          "Finishing Up the Basics"
        ],
        "Implementing the Gameplay": [
          "Destroying an Enemy Ship",
          "Destroying our Ship",
          "Our Health System",
          "Individual Enemy Health"
        ],
        "Special Effects": [
          "Player Hit - Flash",
          "Enemy Hit - Flash",
          "Respawn Our Ship",
          "Player Explosion",
          "Enemy Explosion",
          "Display Scores on Hit",
          "Importing Custom Sprites for Score",
          "Importing Sound Effects",
          "Importing Music"
        ],
        "Gameplay Implementation": [
          "Alternate Controls",
          "Creating the Gameplay System",
          "Designing and Spawning Powerups",
          "Adding a Second Weapon",
          "Putting the game together",
          "Implementing a Save and Load system"
        ],
        "Conclusion": [
          "Conclusion"
        ]
      },
      "requirements": [
        "Clickteam Fusion 2.5 Free",
        "Clickteam Fusion 2.5 Standard",
        "Clickteam Fusion 2.5 Developer"
      ],
      "description": "Learn how to create your very own Space Shooter game using Clickteam Fusion 2.5, an industry-standard, rapid application game development tool from Clickteam used by many Indie Game Developers and Large companies worldwide.\nIn this game development course you will learn a lot of cool space shooter game development concepts but will also learn how to implement these concepts into your very own space shooter game using custom movements, custom firing modes and a whole new game design approach. You will have access to the Course Forum where you can also discuss topics covered in the course and topics that aren't covered.\nThis game design course has been designed with all three levels in mind, beginner, intermediate and advanced. However, this course is geared more towards a whole new design approach with Clickteam Fusion 2.5 that beginners may not be familiar with. The reason this course offers a whole new game design approach is to ready-prepare you to develop a more intuitive game design along with learning some more in-depth routines which will guarantee to take you from beginner level to intermediate.\nIf you consider yourself an already-experienced user with Clickteam Fusion 2.5 then this course will take you to new heights in terms of game design and development. Orientated around designing a one-frame game engine with Clickteam Fusion 2.5, you will be creating an epic Space Shooter game where the entire game consists of just one frame, with potential for unlimited levels.\nBy the end of this course you will have developed the ability to:\nImport a Player Character and Enemies\nCreate a custom player movement engine\nCreate enemies on the fly with their own targets and ship controllers\nLearn to create a dynamic playarea (ie: starfield / nebula clouds)\nLearn Fastloops\nLearn ForEach Loops (pairing of objects - ie: individual enemy health)\nProfessional looking Level Design\nTitle Screen Design\nA Basic Save and Load System\nAnd so much more. This course also contains an additional curriculum section, so when you have completed the course, new ideas, suggestions and new videos will be added so you can further your development with your completed game and add new ideas and polish to your Space Shooter game.\nStart learning more about Game Development today with this course from OneClick Training!",
      "target_audience": [
        "Anyone who wants to build a Space Shooter game",
        "Anyone who wants to learn Game Design",
        "Anyone who wants to learn Game Development",
        "Anyone who wants to learn Mobile Game Development"
      ]
    },
    {
      "title": "Become the Master of Hyper Casual Games Using Unity (2021)",
      "url": "https://www.udemy.com/course/become-the-master-of-hyper-casual-games-using-unity/",
      "bio": "Learn how to create multiple 2D and 3D Hyper Casual Games using Unity Game Engine and Learn how to Monetize them.",
      "objectives": [
        "Fundamental Concepts of Hyper-Casual Games",
        "Create Games using Unity Game Engine and C# Programming Language",
        "Creating Mind Blowing 2D and 3D Hyper-Casual games",
        "How to Monetise your Unity Games using Unity Ads",
        "How to create Endless Gameplay Mechanism",
        "How to perform Post Processing",
        "Create 5 Amazing Hyper Casual Games from Scratch",
        "BONUS SECTION: Create an Epic Cannon Rage Game (Publish Ready) in less than 3 hours"
      ],
      "course_content": {
        "Introduction": [
          "Introduction to the Course",
          "Bonus Section Intro"
        ],
        "Game 1 : Spike Dodge": [
          "Game 1 : Spike Dodge",
          "Game Concept",
          "Player Controller",
          "Enemy AI",
          "Particle Effects",
          "Game Over Functionality",
          "Gear Spawner",
          "Enemy Animations",
          "Game timer",
          "Game Main Menu",
          "Monetize - Add Unity ADs to your Game",
          "Project Files"
        ],
        "Game 2 : Through Wall 3D": [
          "Game 2 : Through Wall 3D",
          "Game Concept",
          "Collecting Assets",
          "Project Setup And Player Controller Script",
          "Endless World",
          "Wall Color Mechanism",
          "Player Color Mechanism",
          "Particle System",
          "Touch Controls",
          "Code Polishing",
          "Game Over Functionality",
          "Score System",
          "Complete Game UI",
          "Music Add on",
          "Final Build",
          "Project Files"
        ],
        "Game 3 : Crazy Ball (2D Game)": [
          "Game 3 : Crazy Ball (2D Game)",
          "Game Concept",
          "Collecting Assets",
          "Player Controller",
          "Endless World",
          "Random Obstacles",
          "Player Burst Effect",
          "Game Over Functionality",
          "Game Score",
          "Obs Animations",
          "Game UI",
          "Bug Fix and Final Build",
          "Project Files"
        ],
        "Game 4 : Endless Runner": [
          "Game 4 : Endless Runner",
          "Game Concept",
          "Player Controller",
          "Endless Runner",
          "Endless Runner Problems Solved",
          "Player Collision",
          "Game Over Functionality",
          "Post Processing",
          "Project Files"
        ],
        "Bonus Section - Game 5 : Cannon Rage": [
          "Bonus Game 5 : Cannon Rage",
          "Game Concept",
          "Cannon Controller",
          "Bullet Script",
          "Zombie Animation",
          "Zombie AI Script",
          "Zombie Spawner Script",
          "Zombie Dead Functionality",
          "Game Over Functionality",
          "Game UI System",
          "Uploading Game",
          "Project Files"
        ],
        "Congratulations!": [
          "Congrats On Completion - Last Words!"
        ]
      },
      "requirements": [
        "Basic knowledge of Unity Engine is required",
        "Basics of C# Programming Language is Required"
      ],
      "description": "Want to learn how to Create Mind Blowing Hyper-Casual Games and rule the Hyper Casual Gaming Industry?\nThe course is completely project based, and we are going to create Five Amazing 2D and 3D Hyper Casual Games from scratch using Unity Game Engine.\n\n\nHyper casual games are ruling the market of mobile game industry since 2014 and this genre is never going to reach saturation point anytime soon. So, it would be a great opportunity for those who want to enter the World of Hyper Casual Games and achieve great returns from your games in terms of Ad Revenue from Unity Ads.\nHyper-Casual Game can easily be build entirely within a Few Hours or a Few Days because of the Gameplay simplicity. It requires very less effort as compared to other indie or AAA title games which are available in the market. That is why I have brought to you this course, which helps you create Amazing Hyper Casual Games.\nWe will be creating 5 Publish Ready Games using Unity 3D Game Engine, C# Language and there would be several new concepts to learn along the way. I will also teach you how you can add Unity Ads to your game so you can begin generating ad revenue from the games that you publish.\n\n\nList Of 2D and 3D Games We are Going to Build together:\nSpike Dodge (2D Game)\nThrough Wall 3D\nCrazy Ball (2D Game)\nEndless Runner (3D Game)\nBonus: Cannon Rage (3D Game)\n\n\nAfter completing this course, students will have the knowledge to create fully functional Hyper Casual Games with Unity and C#, also they would have the skills to add Unity Ads to their games.\nAll that And Much More Is Awaiting For You In This Course!\n\n\nWhat if you are unsatisfied with the course?\nIf you are not satisfied with the course, you can apply for a refund within 30 days after your enrolment and You will receive full refund of your money - No Questions Asked!!\n\n\nSo, Don't wait any longer, Begin your Journey creating Amazing Unity Games.\nEnrol Today!!",
      "target_audience": [
        "Any Beginner or Intermediate who wants to learn about how to create Hyper Casual Games",
        "Anyone who is Passionate about creating games and wants to Enter the huge Gaming Industry",
        "Anyone who wants to publish their Own Games and Monetise them",
        "Android Game Developers, Unity Game Developers, iOS Game Developers and any other Mobile Game Developer who might want to create Hyper Casual Games"
      ]
    },
    {
      "title": "SwiftUI Tic Tac Toe Online Multiplayer Game for iOS 15, MVVM",
      "url": "https://www.udemy.com/course/swiftui-tic-tac-toe-game/",
      "bio": "Develop multiplayer online game with SwiftUI, Firebase and iOS 15. Learn how to write iOS apps with SwiftUI using MVVM",
      "objectives": [
        "SwiftUI",
        "Firebase",
        "iOS 15 game development",
        "MVVM Architechture"
      ],
      "course_content": {
        "Introduction": [
          "Creating Home View",
          "Refactoring home view to MVVM",
          "Creating Game View",
          "Building Game Grid View",
          "Refactoring Game Grid View",
          "Adding Loading Indicator",
          "GameView Model setup",
          "Game Logic and Model Setup",
          "Testing the board with Game Object",
          "Checking for Win and Draw patterns",
          "Finishing Win pattern identification",
          "Saving and loading current user",
          "Adding firebase to our project with Swift Package manager",
          "Firebase helpers setup",
          "Start Game function and Firebase Service",
          "Create game functions",
          "Creating game in firestore",
          "Delete game function",
          "Update game function",
          "Listen to changes and update the game UI",
          "Check player to identify them by X/O mark",
          "Creating Alert object",
          "Showing alerts to user",
          "Reset game function",
          "Game Notifications",
          "Source code"
        ]
      },
      "requirements": [
        "xCode (Free from AppStore)",
        "Basic knowledge of SwiftUI and Swift"
      ],
      "description": "In this course, we will build ios 15 Game of TicTacToe. We will start from scratch and write every single line of code. This course is not for absolute beginners. You need to know your way around XCode and also have experience in application building or general programming experience.\nThe course will cover multiple topics. At the end of this course, you will have a very good foundation to build on more functions in order to make this AppStore-ready game.\nSwiftUI\nXCode\nMVVM\niOS15\nSwift Package Manager\nFirebase Firestore\nData Structuring and transferring in SwiftUI\nCheck out my other reviews and other courses as well. I am teaching since 2012 and have tens of thousands of active and happy students.\nAny questions, just ask in the Q/A section and I will get back to you ASAP.\n\n\nI provide only high-quality courses and super customer service. Don't waste your time on other cheap courses with no support.\nAll the courses are explained throughout and made as clear as possible.\nWe offer 30 days no questions asked money-back for all our courses.\nYou have no risk at all, try our course and you will become one of our many happy students.\n\n\nDon’t forget to check out our other courses as well.",
      "target_audience": [
        "Who has basic knowledge of iOS development and wants to increase his knowledge"
      ]
    },
    {
      "title": "How to create multiplayer card game similar to Clash Royale",
      "url": "https://www.udemy.com/course/how-to-create-multiplayer-card-game/",
      "bio": "A Beginner guide on how to create multiplayer card game similar to Clash Royale from scratch",
      "objectives": [
        "Student will be able to create 3d human from scratch using blender",
        "Student will be able to create path finding script for their character in the game",
        "Student will be able to create multiplayer game from scratch"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Create your character in Blender3D": [
          "Blender 3 basic move",
          "Create Giant using Blender3D",
          "Create bone for Giant",
          "Create animation for Giant",
          "Create Shooter in Blender3D",
          "Create bone for shooter",
          "Create animation for shooter",
          "Create Skeleton in Blender3D",
          "Create bone for skeleton",
          "Create animation for Skeleton"
        ],
        "Learn Path Finding Script": [
          "Path Finding Intro",
          "Creating new project and download 2 zip file",
          "Creating A* object and attach 3 script into it",
          "Putting fox into the game",
          "Scale the fox so it wont block by wall",
          "Explaining Grid and Node",
          "Explaining Grid2",
          "Explaining Grid3",
          "Explaining Heap and IComparable",
          "Explaining Heap add function and sort up function",
          "Explaining Heap sort down function and more",
          "Explaining Unit Script 1",
          "Explaining Unit Script 2",
          "Explaining Path Request Manager Script 1",
          "Explaining Path Request Manager Script 2",
          "Explaining Path Request Manager Script3",
          "Explaining Pathfinding.cs script 1",
          "Explaining Pathfinding.cs script 2",
          "Explaining Pathfinding.cs script 3",
          "Explaining Pathfinding.cs script 4",
          "Explaining Pathfinding.cs script 5",
          "Explaining Pathfinding.cs script 6",
          "Explaining Pathfinding.cs script 7",
          "Explaining Pathfinding.cs script 8",
          "Explaining Pathfinding.cs script 9"
        ],
        "Create single player card games": [
          "Create new project and setup camera and landscape",
          "Create canvas and card into the games",
          "Create drag script that can drag the card in the game",
          "Import your giant into the game",
          "Add path finding script to the game and giant",
          "Let Giant punch when reaching target and avoid river and cross the bridge",
          "Create Building",
          "Create health bar and script for the building",
          "Create health bar for giant and instantiate giant from card drag",
          "Find nearest enemy for giant",
          "Fix Drag problem and give giant tag and color",
          "Let building shoot bullet and giant will get hit and die",
          "Create 6 building and let building shoot within range",
          "Fix giant punching right target and building shooting right target",
          "Adding Control Center to refresh grid after building die",
          "Adding 4 card to team red",
          "Building the skeleton",
          "Drag skeleton from the card",
          "Fix cannon cannot shoot skeleton issue",
          "Detect new card release for all unit using control center",
          "Solving Unit blocking issue",
          "Building the shooter",
          "Fixing the shooter",
          "Fixing the shooter 2",
          "Enable 4 card to drag for red team",
          "Creating FireBall and source code here"
        ],
        "Create multiplayer card game": [
          "Backup Single Player Game and download Photon Unity Networking",
          "Creating networking script",
          "Convert Giant into multiplayer",
          "Fix Multiplayer Giant",
          "Fix Multiplayer Giant 2",
          "Convert Skeleton to multiplayer",
          "Fixing problem",
          "Fix problem2",
          "Convert shooter to multiplayer",
          "Fix shooter and convert fireball to multiplayer",
          "Convert building into multiplayer"
        ]
      },
      "requirements": [
        "Student just need to install free Unity3D on their computer",
        "Student just need to install free Blender software on their computer"
      ],
      "description": "What the course offers:\nMy course will teach you how to create multiplayer card game similar to Clash Royale from scratch. I will first teach you how to create the character from scratch using Blender3D, you will learn how to create 3 character from scratch. Then I will show you how to create the path finding inside the Unity3D with detail explanation. After that I will teach you how to create a single player card game inside Unity3D using the 3 character you created earlier and also the path finding script you created earlier. And finally I will teach you how to convert your single player card game into a multiplayer card game where you can finally play with others.\nI designed this course to be easily understood by absolute beginners. You just need to follow step by step to complete your games. You do not need to buy anything else, every tool and software you needed can be downloaded free.\n\nIf you want to create multiplayer card games quickly, please give it a try and you wont be disappointed.",
      "target_audience": [
        "Student who want to learn how to create walking 3d human from scratch should take this course",
        "Student who want to learn how to create path finding for their character should take this course",
        "Student who want to learn how to create game similar to clash royale should take this course",
        "Student who want to learn how to create multiplayer card game should take this course"
      ]
    },
    {
      "title": "Unreal Engine 5 ByteSize: C++ Delegates",
      "url": "https://www.udemy.com/course/unreal-engine-5-bytesize-c-delegates/",
      "bio": "Learn C++ Delegates from our ByteSize series in the Unreal Engine",
      "objectives": [
        "How to create and use C++ delegates in Unreal Engine 4 and 5 in a short \"ByteSize\" course.",
        "Differences between Single-cast, Multi-cast, and Dynamic delegates.",
        "Utilize the predefined delegates that already exist in the Unreal Engine.",
        "How to communicate C++ delegates with Blueprint.",
        "The best practices for using C++ delegates."
      ],
      "course_content": {
        "Introduction": [
          "Full Introduction",
          "Course Overview",
          "Project Setup"
        ],
        "C++ Delegates": [
          "Explanation of Delegates",
          "Executing delegates",
          "Single-cast Delegates",
          "Multi-cast Delegates",
          "Dynamic-cast Delegates",
          "Predefined delegates in the Unreal Engine",
          "Using predefined delegates"
        ],
        "Extra": [
          "BindStatic, BindLambda, BindRaw"
        ],
        "Outro": [
          "Outro"
        ]
      },
      "requirements": [
        "Unreal Engine 4 or 5. The information in this course is transferrable between engine versions!",
        "At least some knowledge of the C++ language.",
        "You have the means to edit and compile C++ code."
      ],
      "description": "Welcome to the Unreal Engine ByteSize training series, your go-to resource for concise, focused training on specific subjects. This course delves into Unreal Engine's C++ Delegates, designed to provide you with a comprehensive understanding while keeping things short and simple. Stay tuned for more ByteSize training videos in the future!\n\nIn this course, you will explore the various types of delegates created by Epic Games within the Unreal Engine. We will examine their variations, parameters, and the processes involved in binding, broadcasting, and executing them. By the end of this course, you will understand the efficiency of each delegate type and how to leverage their capabilities effectively. Additionally, we will cover the predefined delegates embedded within the engine by Epic Games. These delegates automatically broadcast events during specific engine functions, such as error state shutdowns, application enters the background, and gamepad changes.\n\nOur Extras section includes the final CleanGame project used during the course recordings. You will also have access to the SimpleGame project, a turret-based shooter that requires you to implement delegate bindings and executions. Both projects are provided in separate .zip files for your convenience.\n\nEmbark on this journey to master Unreal Engine's C++ Delegates and enhance your game development skills. Join us in the ByteSize Training Series and take your understanding of Unreal Engine to the next level.",
      "target_audience": [
        "Developers that don't want to watch hours of training content, and get right to the focal subject!",
        "Entry-level developers that want to learn more about Unreal Engine Delegates.",
        "Unreal Engine beginners looking to learn more of what the engine has to offer.",
        "Professional developers looking to refresh their knowledge of C++ delegates in Unreal Engine.",
        "Those who wish to improve the structure of their code with delegates!"
      ]
    },
    {
      "title": "Learn Godot Making a Fun Pirate Trading Game",
      "url": "https://www.udemy.com/course/learn-godot-design-patterns-pirate-trading-game-development/",
      "bio": "The fun way to learn Godot and essential Design Patterns for game development",
      "objectives": [
        "Hands on how to start with nothing and build up a working prototype",
        "How to create games with complex data structures and content",
        "How to use signals and data composition to make a fun game",
        "Learn how to re-factor your games to dramatically improve their design"
      ],
      "course_content": {
        "Create a Fun Pirate Trading Game in GoDot": [
          "Fast Start - Create Project, Scene, and your First GoDOT Script",
          "Use a List for Cities and use Buttons and Signals to Leave Port and Set Sail",
          "Examine Using Dictionaries to Represent our Products",
          "Refactor our Game to use Objects to Represent Cities",
          "Create Product Objects and Extend the Game Design",
          "Create CityProduct Data Structures to Manage Product Pricing by City",
          "Create a ProductPanel Object to Visually Represent the Products in the City",
          "Review of the Current Game Architecture and Prototype",
          "Refactoring Our Product and City Data to Use Dictionaries",
          "Use Custom Signals to Create a Better Game Architecture",
          "Use Static Methods to Further Improve our Game Architecture",
          "Perform a Top Down Re-factor of the Game Code Using What We have Learned so Far",
          "Begin Implementing the Buying Process into the Game",
          "Finish Implementing our Buy Products Method",
          "Implementing the Sell Mechanism for our Game",
          "Creating a Simple Pirate Battle for our Game",
          "Adding Player Ship Health and Checking for the Player Ship to Sink",
          "Improve the Game Appearance, Import Custom Fonts & Create a Game Over Screen",
          "Code Review and Upcoming Lectures"
        ],
        "Improving our Game Design and Adding Features": [
          "Create an AudioStreamPlayer for Sound Effects : Add Explosions to Pirate Battle",
          "Animate our Pirate Battle with a Cool Explosion Effect",
          "Using the GoDot AnimationPlayer to Improve our PIrate Battle Animations",
          "Learn to Call the AnimationPlayer from GDScript",
          "Learn how to Load Game Data from CSV Files"
        ],
        "Godot Pirate Trader 2.0": [
          "Upgrading to GoDot 3.4 - Changes in Object Initialization"
        ]
      },
      "requirements": [
        "Basic Computer Skills",
        "Godot 3 Installed (It is Free and Open Source)",
        "Beginning Programming Skills are Helpful",
        "Willing to learn at a fast pace. We introduce advanced topics in the first hour."
      ],
      "description": "UPDATE  - Source is now 3.4 compatible!\n\n\nTHIS COURSE GETS YOU FROM BEGINNER TO ADVANCED AS FAST AS POSSIBLE\nThis was designed to be a fast based course.  Instead of bumping up the hours of the course, this course is designed to get you into advanced topics quickly. We start out with very beginning topics so even a new programmer can use this course, but we waste no time getting into advanced Godot topics.   I'm aware that many students search for courses with lots of hours in the hopes of equating it to more material. You will often find those courses will spend exhaustive time on basics and editor tools that are available in the community or on YouTube.\nTHIS COURSE FOCUSES ON GAME ARCHITECTURE AND DESIGN\nWhile we begin with simple programming concepts the course continually refactors and improves the game architecture as new functionality is added. Learn how to create a sophisticated game architecture that involves products, cities, prices that can change by city, buying/selling, and of course a prototype of a pirate battle. Learn to use signals decouple objects and refine your game design.\nLEARN PROTOTYPING AND REFACTORING SKILLS\nThis course follows the process you would use in real world iterative game design. We build simple prototypes that we can get up and running quickly. Then as we better define our gameplay we refactor and implement improved game architecture so we can add more features. The result is a course that will help you with any game you wish to build out.  Finding the right balance between rapid progress and prototyping and creating a solid game architecture you can build on is a key to successful game design.\nFOR STUDENTS THAT DON'T WANT TO TAKE A 30 HOUR COURSE TO LEARN ADVANCED TOPICS\nThere are a lot of great courses on here but long 30 hour courses are not for everyone. Instead of lectures that spend a lot of time in theory,  explaining the course itself, or exhaustively covering basic features you will find in other courses... this course just jumps in and starts building a fun Pirate Trading Game like Taipan. We start with very simple features like variables, creating functions, and using basic signals. But we quickly move right into the meat & potatoes of what it takes to make a solid game architecture.\nLEARN TO SEPARATE YOUR DATA OBJECTS FROM USER INTERFACE - And when it may not be worth the time\nThis course takes a practical approach to building game prototypes. That said, there is a time when you must refine your game architecture and work to improve the design patterns you are using to build up your game. In this course we learn how to use signals, static methods, and dependency injection techniques to encapsulate your data making it easier to create far more robust game architectures. We also explore when it useful to break some of the rules in the interest of brevity and creating a working prototype.\nThis course teaches you the skills you need so you can build games in a way that suits your own development style.\n\n\nCONSIDER MY IDLE TYCOON COURSE IF YOU ARE NEW TO GAME ARCHITECTURE AND DESIGN\nMy other Godot course, Idle Business Tycoon course has a bit more simple game design and is likely more suitable to absolute beginners.\nSee the power of Godot first hand\nYou will see quickly why so many game developers are looking to Godot for their indie game projects.  We create the project, the scene and begin scripting in the very first lecture! By the second lecture we are using lists to manage our cities. By the third lecture we are already using objects and building up a complex game architecture.\nThe engine is particularly well suited for games that are interface intensive. There are many user controls and they are very easy to script.\nIf you have ever wanted to learn Godot and enjoy pirate trading games like Taipan you are in luck. This course walks you through the design of making a Pirate Trading Game prototype from scratch. Step-by-Step.",
      "target_audience": [
        "Anyone who wants to learn Godot",
        "Students who want to learn FAST! This isn't a 30 hour course for a reason. I don't hold your hand all the time.",
        "Game designers and developers who want to learn more advanced design patterns",
        "Someone who wishes to learn more about game prototyping and re-factoring"
      ]
    },
    {
      "title": "Unity3D : Build a Fully Featured Mobile Infinite Runner Game",
      "url": "https://www.udemy.com/course/make-infinite-runner-game-unity3d/",
      "bio": "Comprehend Unity Game Engine by Building a Fully Featured Infinite Runner Game with this Project-Centered Course",
      "objectives": [
        "Build a fully featured 3D Infinite Runner Game that is ready to publish",
        "Control and move 3D characters",
        "Utilize external game assets in your projects",
        "Comprehend Unity animation controller",
        "Build endless levels programmatically",
        "Build graphical user interface GUI",
        "Create sound effects",
        "Add advertisments to your game to earn Money !",
        "Manage the level and the player achievements",
        "Building game enemies and challenges",
        "Apply all the skills you will learn from this course into your other games and projects"
      ],
      "course_content": {
        "Get Started": [
          "Project Initialization"
        ],
        "Game Assets": [
          "Project Assets",
          "Importing Assets"
        ],
        "Game Environment": [
          "Main Scene Design",
          "Textures Quality"
        ],
        "Player Controller": [
          "Adding the player to the scene",
          "Player Animation - Run",
          "Player Movement - Run",
          "Player Jump",
          "Player Movement - Right and Left",
          "Player Animation with Blend Tree",
          "Player Slide"
        ],
        "Camera Controller": [
          "Camera Controller"
        ],
        "Level Design": [
          "Level Design - The Ground",
          "Level Design - The Buildings",
          "Level Design - Billboards and Lightposts",
          "Skybox Design"
        ],
        "Enemies": [
          "Car Controller",
          "Car Animation",
          "Car Collider and Player Death",
          "Obstacles"
        ],
        "Collider Issues": [
          "Handling Collider Issues"
        ],
        "Pickup": [
          "Coins",
          "Coin - Particle Effect",
          "Heart",
          "Heart - Particle Effect"
        ],
        "Making the Level Infinite": [
          "Organizing the Level",
          "Infinite Level",
          "Pivot Issue"
        ]
      },
      "requirements": [
        "C# Knowledge is required",
        "Object Oriented Programming OOP understanding is required",
        "Should have Unity 2018 installed"
      ],
      "description": "If you like learning by doing, then this is the right course for you.\nIn this course, we will dive deeply into game development using Unity game engine.\nYou will learn all the powerful features that Unity 3D provides.\nYou will be able to utilize game assets in your future projects.\nYou will be able to apply all the skills gained from this course into your own projects and games.\nYou will build a fully featured infinite runner game from zero, and prepare it for publishing at Play Store.\nYou will learn the following:\nUnity Projects Initialization.\nImporting Assets to your Game.\nGame Environment Design.\nGame Quality.\nScripting in C#.\nPlayer Controller and Movement.\nPlayer 3D Animation in Unity - [Idle - Run - Jump - Slide - Left - Right]\nHandling User Input.\nCamera Controller.\nLevel Design.\nSkybox Design.\nEnemy Controller [Cars and Obstacles]\nEnemy Animation\nAdjusting Collider Size regarding Animations\nGame Pickups [Coins - Hearts]\nDesigning Particle Effects using Particle Systems and Textured Materials.\nMaking the Level Infinite.\nInstantiating new Game Objects Dynamically.\nHandling Pivot issues.\nSwitching between Cameras.\nDesigning Awesome User Interface UI [Player Interface - Main Menu - Pause Menu - Game Over Menu - Help Menu - Developer Menu]\nSwitching between Sprites.\nLevel Management.\nStoring Player Data.\nAdding more Challenges.\nAchievements User Interface.\nLight.\nAudio Effects.\nAndroid Touch Screen.\nLock and Unlock Player Assets.\nAdmob Advertisements.\nLearning all the above-mentioned skills will unleash your creativity and innovation in your future games.\n------\nSo if you are interested in this course. Enroll now to get started!",
      "target_audience": [
        "Students curious about learning Unity 3D by doing real 3D games",
        "Game developers curious about the building a fully featured Infinite Runner Game",
        "C# Developers curious about games development"
      ]
    },
    {
      "title": "Create a Melee Combat System in Unity and C#",
      "url": "https://www.udemy.com/course/unity-meele-combat-course/",
      "bio": "Create a Third-Person Melee Combat System in Unity and C# | Learn Gameplay Programming and Clean Coding Practices",
      "objectives": [
        "Create a third-person meele combat system in Unity",
        "Learn to create scalable, modular and reusable gameplay systems in Unity",
        "Learn to write clean & modular code in C#",
        "Learn to architect data driven systems in Unity using Scriptable Objects",
        "Learn important 3D gameplay programming concepts"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Download the completed project",
          "How to ask questions?"
        ],
        "Third-Person Controller": [
          "Section Intro",
          "Project Setup",
          "Download the third person controller",
          "Camera Controller",
          "Character Movement",
          "Animation Setup",
          "Adding Animations to Character",
          "Collisions and Gravity",
          "Controller Input"
        ],
        "Combat System": [
          "Perfoming Attack",
          "Reacting to Attacks",
          "Attack States",
          "Combos & Architecting Attacks as Scriptable Objects",
          "Different Attack Hitboxes",
          "Enemy AI",
          "Chasing the Player",
          "Combat Movement",
          "Combat Movement || - Circling around the Player",
          "Improving Circling",
          "Attacking the Player One by One",
          "Retreating after Attack",
          "Performing Combos",
          "Counter Attacks",
          "Targeting System",
          "Lock On / Combat Mode",
          "Directional Attacks & Rotating while attacking",
          "Controller Input Setup for Combat",
          "Stunned After Taking Hit",
          "Long Range Attacks",
          "Moving To Target Improvements",
          "Combat Improvements & Edge Case Fixes",
          "Health, Taking Damages & Dying",
          "Alerting nearby enemies when a target is spotted",
          "More to come"
        ],
        "Bonus Lecture": [
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "You should know the basics of C# (if, loops etc)",
        "You should know the basics of Unity"
      ],
      "description": "In this course, you’ll learn to create a third-person melee combat system in Unity with features like combos, counterattacks, intelligent enemy AI, etc. We'll design this system in a modular, data-driven, and scalable way using clean coding practices. So in this course, you’ll not only learn to build this system, but you’ll also learn lots of valuable game programming concepts that you can use throughout your career\n\n\nSo the combat system that we’re going to create will be a free-flow combat system. That means enemies won’t attack the player mindlessly; instead, they’ll attack in a coordinated way by circling the player and attacking one at a time. This is the type of combat used in modern-day games like Assassin's Creed, Batman Arkham series, Marvel’s Spider-Man, etc. This combat system will also be easily customizable, so if you want to use punch and kick attacks instead of sword attacks, you can do that easily without changing a single line of code\n\n\nSo we’ll be building all this step-by-step from scratch. We’ll start by making a basic third-person controller. We’ll not use any assets for it; we’ll build it from scratch because it’s a good way to learn the fundamentals of gameplay programming. And then we'll give our character the ability to attack. We’ll architect the attacks using scriptable objects in Unity so that the designer will be able to create and edit different attack combos without changing the code. Then we'll start building the enemy AI. We'll be architecting the enemy AI using a finite-state machine. It's a technique that’s been used for building AI in games for the last 25 years. It's used in popular games like Last of Us, the Batman Arkham series, and many more. So we'll build a Finite-State Machine from scratch and create our enemies using it. We'll start by creating simple enemy behaviors like Idling and Chasing the player, then we'll implement more advanced behaviors like circling the player and attacking him in a coordinated way. Once we're done with the Enemy AI, we'll implement the counterattacks.\n\n\nThroughout this course, you’ll learn lots of game programming skills. You’ll learn lots of intermediate-level C# concepts like Generic Classes, Dictionary, LINQ, Inheritance, etc. You’ll also learn to use Mathematical concepts like Trigonometry, Dot Product, Cross Product, etc. So the skills and techniques that you learn from this course will be really helpful for you if want to pursue a career as a game programmer.",
      "target_audience": [
        "Beginner Unity developers looking to learn intermediate concepts and create reusable systems"
      ]
    },
    {
      "title": "Master Unity Android Game Development in 30 Days : 15+ Games",
      "url": "https://www.udemy.com/course/master-unity-android-game-development-in-30-days/",
      "bio": "Master Android Game Development with Unity 6 , Build Android Games with Unity6 ,Create 15+ Android Games with C# Unity",
      "objectives": [
        "Master Unity 6 Android Game Development in 30 Days",
        "Build Something New Everyday for 30 Days",
        "Create Your First Android Game in 10 Minutes",
        "Build 15+ Android Games Both 2D & 3D",
        "Create A 3D Endless Ninja Runner Game",
        "Learn Absolute Basics of C# Scripting",
        "Implement Touch Input Controls on Your Game",
        "Build APK and Run Your Game on Android Device"
      ],
      "course_content": {
        "Day 0 : Introduction To This Course": [
          "Introduction To This Course",
          "Section Quiz"
        ],
        "Day 1 : Installing & Setting Up Unity 6 (2025 Updated )": [
          "Installing & Setting Up Unity 6",
          "Setting Up Unity 6 for Android Game Development",
          "Creating A New C# Script in Unity 6",
          "Set Unity Active Input Handling - Unity 6.1 (2025)",
          "Installing Unity 2023",
          "Fixing Visual Studio Auto Completion Problem"
        ],
        "Day 2 : Build Your First Android Game with Unity 6": [
          "Build A 3D Tap Shooter Android Game with Unity 6"
        ],
        "Day 3 : Build A 2D Tap Shooter Android Game with Unity 6": [
          "Play Testing The Game",
          "Setting Up The Project & Importing Sprites",
          "Creating The Target Script",
          "Creating The Game Manager",
          "Randomly Spawning The Targets",
          "Creating The Score UI",
          "Creating The Menu UI",
          "Adding Tap To Start & Finishing The Game",
          "Project Files"
        ],
        "Day 4 : C# Scripting Crash Course ( Coding Exercises )": [
          "Writing Your First C# Code & Creating First Script",
          "Understanding The Structure of a C# Script in Detail",
          "Learning Variables & Datatypes in C#",
          "How To Solve Coding Exercises",
          "Your First Coding Exercise",
          "How To Solve Coding Exercises",
          "Getting Started with if else Statements for Checking Conditions",
          "Working with Boolean Variables in C#",
          "Combining Multiple Conditions Together in C#",
          "If Else Practice",
          "Boolean Variable & Condition Practice"
        ],
        "Day 5 : C# Scripting Crash Course - Part 2": [
          "Creating and Calling Custom Functions in C#",
          "Creating Functions with Parameters and Return Types",
          "Functions, Parameters & Return Practice",
          "Concept of loops and For loop Detailed Explanation",
          "While loop with detailed example",
          "Getting Started with Arrays in C# & Unity",
          "Arrays with More Practical Examples"
        ],
        "Day 6 : 3D Dodging Android Game with Unity 6": [
          "Setting Up The Ground and Player",
          "Creating The Falling Stones",
          "Creating Player Controller",
          "Creating The GameManager",
          "Creating Score Mechanism",
          "Converting The Game To Android",
          "Adding Touch Inputs and Playtesting The Game",
          "Final Tweaks and Building apk",
          "Project Files"
        ],
        "Day 7 : Carrot Collector Android Game with Touch Joystick": [
          "Build A Carrot Collector Android Game with Unity",
          "Project Files"
        ],
        "Day 8 : Build Ninja Runner - 3D Endless Runner Game with Unity 6": [
          "Ninja Run Gameplay",
          "Importing 3D Assets for the Game",
          "Adding The Bridge",
          "Setting Up The Level & Skybox",
          "Importing & Setting Up Ninja Character",
          "Adding Animations To The Player Character",
          "Creating The Player Controller Script",
          "Spawning Bridges Infinitely"
        ],
        "Day 9 : Build Ninja Runner - Part 2": [
          "Creating Obstacles & Detecting Collision",
          "Spawning The Obstacles",
          "Creating The Score UI",
          "Creating The Main Menu",
          "Adding Some Tweaks",
          "Adding Background Music",
          "Project Files"
        ]
      },
      "requirements": [
        "Basic Understanding of Unity & C# Scripting is Expected"
      ],
      "description": "Learn Something New Everyday for 30 Days Step By Step\nMaster Unity6 Android Game Development in 30 Days\n\n\nList Of Projects You Will Build In This Course :\nBuild 3D Ninja Run Android Game\nCreate 2D Tap Shooter Android Game\nBuild A 3D Endless Runner Android Game\nCreate 3D Dodging Game\nCreate 3D Rolling Ball Android Game\nBuild 2D Carrot Collector Game\nMonetize Your Android Games with Video Ads\nLearn C# Scripting from Scratch\nMaster 2D Android Game Development\nCreate Android Games with Unity 6\nand More..\nI have taught Unity Game Development & C# Scripting to thousands of people on my Youtube Channel: Charger Games. I love teaching complex concepts in a simple way, so even if you have no previous coding experience, no need to worry, I'm gonna teach you everything step by step in the perfect order.\nLearn the basic concepts, tools, and functions that you will need to build fully functional Android Games with C# and the Unity game engine.\nBuild a strong foundation in Unity Game Development with this course.\nLearn to build 2D & 3D Android Games with Unity 6\nBuild Fully functional Mobile Games with Unity6\nLearn Basics of C# Programming\nCreate 15+ Android Game Projects in Unity\nLearn to build Mobile Games in Unity\nUse skills learned from this course in any Unity Game project\nA Powerful Skill at Your Fingertips  Learning the fundamentals of Unity 2D & 3D Android Game Development puts a powerful and very useful tool at your fingertips. Unity is free, easy to learn, has excellent documentation, and is the game engine used for building games.\nJobs in unity game development are plentiful, and being able to learn C# Scripting along with Unity game development will give you a strong background to more easily build awesome games.\nContent and Overview  Suitable for beginning programmers, through this course of 150+ lectures and 25+ hours of content, you’ll learn Unity 2D & 3D game development by building 15+ Android Game projects. You can use these skills in any of your Unity projects later on.\nStarting with the installation of the Unity , Visual Studio , this course will take you through the process of learning game development with unity by building 15+ Game projects in unity.\nFor the beginner programmers there's a separate section about C# Scripting, which will teach the fundamentals of C# Scripting for game development in Unity.\nWith these basics mastered, the course will take you through building different example mini projects with unity to learn more about the process of creating games with Unity.\nStudents completing the course will have the knowledge to create fully functional Games with Unity and C# or use their C# skills to Build any other useful thing that they want.\nComplete with working files, you’ll be able to work alongside the author as you work through each concept, and will receive a verifiable certificate of completion upon finishing the course\n\n\nCredits:\nMusic by Bensound\nLicense code: AEDGEIJTKL25XMGX\n\n\nImage Source: AI Generated from Canva",
      "target_audience": [
        "Anyone willing to Master Unity Android Game Development in 30 Days",
        "Android Developers wishing to Build their Portfolio with Multiple Projects"
      ]
    },
    {
      "title": "Unity 2017 - RPG Character Stats and Item Attributes System",
      "url": "https://www.udemy.com/course/unity-2016-rpg-character-stats-and-item-attributes-system/",
      "bio": "Complete training on creating advance game statistics, modifiers and attributes for characters and items, code included",
      "objectives": [
        "Create user interface for character attributes such as strength, intelligence, stamina, health point, damage, and magic spell damage.",
        "Create the user interface for item attributes such as swords, magic orbs, shields, shoulderplates, helmets and more.",
        "Program the logic to equip item that have special attributes that increase your player stats.",
        "Get better at program good code in c# for Unity"
      ],
      "course_content": {},
      "requirements": [
        "know how to install Unity on your machine (windows, linux or MAC)",
        "basic knowledge of coding (you can take my fundamentals of programming free course first)"
      ],
      "description": "Important: all software used are FREE to download and use on PC, LINUX and MAC computers (no need to pay, cheers!)\nIn this course you will learn how to build a system to add attributes, and modifier to game characters, weapons and gear items.\nWhy would you want to learn how to build this? Because it creates engaging games where players get to explore worlds, find items and weapons to make their character stronger, and get to fight enemies and powerful bosses that drop loot when defeated. By the way some of the most common attributes are health points, strength, dexterity, intelligence, spell damage, and attack speed.\nAll the great games out there use stats, look at Zelda, or World of Warcraft or MineCraft or even Star Wars. That's exactly what you will get to build by taking this course.\nThis course can be taken by anyone even if you've got no programming skills. This course is meant for non-artists, meaning you don't have to be an artist to be able to use 3D pixel art graphics since this course provides all the necessary assets for you. The only tool we use in this course is Unity 3D, and it's completely free to use. No need to spend extra money.\nThis course is easy to follow along since all the steps are shown to you in the video lectures, so you can't possibly miss a step, and it's a lot more fun that reading documentation\nThe skills that are taught in this course are the foundation of any professional video games and they can be applied to all your future projects.\nJoin the course now, you've got nothing to lose because if i don't deliver, you'll get a full refund. I'll see you in the videos lectures and in the course forum.",
      "target_audience": [
        "gamers",
        "computer scientists",
        "computer students",
        "anyone who wants to make cool games",
        "artists"
      ]
    },
    {
      "title": "Build NFT metaverse with Unity on Algorand",
      "url": "https://www.udemy.com/course/build-nft-metaverse-with-unity-on-algorand/",
      "bio": "The most comprehensive course to build a metaverse world on a blockchain",
      "objectives": [
        "Foundations to start building a metaverse from scratch on the Algorand blockchain",
        "Create 2-way transactions between Unity3D game and the blockchain",
        "Have players \"play to earn\" crypto tokens",
        "Build a system for players to buy, sell and trade NFTs",
        "multiplayer communication",
        "deploy your metaverse game on iPhones, Android phones, and the web"
      ],
      "course_content": {},
      "requirements": [
        "No programming experience needed, every single steps is shown in the video lectures. You will learn everything you need to know. Works on Mac, Windows and Linus computers"
      ],
      "description": "Hello and thank you for your interest in this course. My name is Yohann. I am course instructor.\nThis course is the only course you need to get the fundamentals to help you build a “play to earn” metaverse world on the blockchain.\n\n\nWith over 20 years of experience as a software engineer combined with my experience as a college instructor, I have no doubt that by taking this course you will have a hands-on experience on how to build your own NFT metaverse world using Unity3D game engine and making transactions of the algorand blockchain, one of the best blockchains there is out there.\nThe course covers a variety of technologies and tools.\nYou will learn how to use Unity to design a game and an NFT store. (non fungible tokens). You will also learn how to make transactions on the algorand blockchain to allow users to play to earn crypto coins, buy, sell and trade NFTs and also how to allow user to connect they crypto wallet the safe and secure way.\n\n\nNow if you don't know much of the above terminology, don’t worry about it, you’re in the right place. I literally have recorded every single details in the video lectures, there is no prior knowledge required, everything is shown to you. And you can pause and replay the videos as many times as you wish to.\nThis course is an “all in one” course, it covers the game design, programming, setup, deployment and the blockchain foundations to make you advance in your career.\nAnd the best part is that I keep adding new content regularly because this field is evolving at light speed.\n\n\nFinally, I am so confident this course will bring you so much value that I’m giving away the first 2 hours at no cost to watch instantly.\nDon’t be the one to get left behind. Get started today and join millions of people taking part in the meta verse revolution.\nStart watching now. Enjoy the course and I wish you good fortune making your own metaverse.",
      "target_audience": [
        "Game developers and hobbyists",
        "Video game lovers",
        "Metaverse enthusiasts",
        "Smart people wanting to build the FUTURE today"
      ]
    },
    {
      "title": "Create A Dedicated Server Multiplayer Shooter in Godot 4",
      "url": "https://www.udemy.com/course/godot-dedicated-server-fps/",
      "bio": "How to create a dedicated multiplayer first person shooter game in Godot 4 with GDScript. Server, clients, lobbies...",
      "objectives": [
        "Creating and hosting dedicated servers",
        "Server-Client communication",
        "Public matchmaking and multiple lobbies",
        "Lag compensation and machine syncing with buffering and interpolation",
        "Shooter mechanics and game rules",
        "Robust system architecture and clean project management"
      ],
      "course_content": {
        "Introduction": [
          "Intro",
          "Checking the Project"
        ],
        "Connections": [
          "Connecting to Server",
          "Lobbies",
          "Client Connection UI",
          "Cancelling Quickplay",
          "Overlapping Lobbies Fix",
          "Loading the Map",
          "Local Game Scene Manager",
          "Syncing the Match Start",
          "Player Spawn Points",
          "Server Map"
        ],
        "Players and Match": [
          "Spawning Remote Players",
          "Remote Player Movement",
          "Remote Player Animations",
          "Player Colors",
          "Remote Player X Rotations",
          "Movement Interpolation",
          "Server-Client Clock Sync",
          "Client Data and Player Names",
          "Choosing Weapons",
          "Showing Weapons",
          "Shooting Weapons",
          "Registering Hits",
          "Bullet Hit Effects",
          "Weapon Config and Accuracy",
          "Health",
          "Damage Fall-off",
          "Health Pickups",
          "Player Eliminations and Respawning",
          "Game Scores",
          "Game Timer",
          "Ending the Match",
          "Grenades",
          "Grenade Explosion Effect",
          "Grenade Warning Prompts",
          "Grenade Pickups"
        ],
        "Effects and Final Touches": [
          "Screen Shake",
          "Health Change Effects",
          "Local Audio",
          "Spatial Audio",
          "Settings and Pause Menu",
          "Elimination Texts",
          "Handling Player Exits 1",
          "Handling Player Exits 2",
          "Final Touches",
          "Server Hosting and Port Forwarding",
          "Outro"
        ]
      },
      "requirements": [
        "I recommend you to have a basic understanding of Godot, nodes, and GDScript. Everything else will be taught in this course."
      ],
      "description": "Upd: Works in Godot 4.5!\nWelcome to the Dedicated Server Multiplayer First Person Shooter course.\n\n\nIn this course, you'll learn how to build your very own multiplayer game using a dedicated server and client architecture, focusing on a casual 4v4 first-person shooter format.\n\n\nThis is an intermediate-level course, so while I recommend you have a basic understanding of Godot, nodes, and GDScript, I'll guide you step-by-step through everything else you need to know.\n\n\nHere's what you’ll master by the end:\n-Setting up a dedicated server and connecting clients\n-Creating efficient communication between server and clients\n-Hosting servers and configuring port forwarding\n-Implementing matchmaking and multiple lobbies per server\n-Applying networked interpolation, lag compensation for smoother gameplay\n-Building a weapon system, including pistol, SMG, and shotgun, with raycasts\n-Adding throwable grenades and explosions\n-Health and damage systems\n-Enhancing the experience with dynamic visual effects\n-Designing a scoreboard\n-Integrating 2D elements within a 3D environment\n-Creating networked audio\n-And much more!\n\n\nBy the end of this course, you’ll be equipped to either create your own multiplayer game or expand on the project we develop together. I'm excited to publish a new course with a new topic. If you're interested in singleplayer survival games, check my other course!\n\n\nSee you in the course!",
      "target_audience": [
        "Aspiring and intermediate-level game devs who want to learn and create networked games."
      ]
    },
    {
      "title": "Projects in Python: Get started with Python game development",
      "url": "https://www.udemy.com/course/projects-in-python-get-started-with-python-game-development/",
      "bio": "Learn the basics of Python game development while you create your very own Space Invaders clone using Python 3.",
      "objectives": [
        "Create a fully featured and working game in Python which you can use for you portfolio.",
        "Take your new knowledge and create more advanced games.",
        "Advance their current knowledge of Python to take on larger more complicated projects."
      ],
      "course_content": {
        "Beginning our game: Creating a ship & firing bullets": [
          "Installing Homebrew and pygame",
          "Our game code structure",
          "How to change our games background colour",
          "Creating a settings class for our game",
          "Creating the ship class",
          "Refactoring part 1",
          "Refactoring Part 2",
          "Moving our ship to the right",
          "Constant movement",
          "Moving our ship to the left",
          "Making our spaceship go faster",
          "Stopping our spaceship at the screen's edge",
          "Creating our bullet settings",
          "Creating our bullet class",
          "Creating our bullets group",
          "Refactoring check events",
          "Firing bullets",
          "Deleting bullets",
          "Updating our delete bullets function"
        ],
        "Invaders from Python: Adding the Invaders": [
          "Creating the alien class",
          "Creating an instance of an alien",
          "Making our alien appear on screen",
          "Creating a row of aliens",
          "Creating the fleet of aliens",
          "Refactoring create alien",
          "Adding in rows of aliens",
          "How to move aliens to the right",
          "How to know when an alien hits the screen's edge",
          "Changing the direction of the fleet",
          "Shooting down aliens",
          "Repopulating the alien fleet",
          "Changing the speed of aliens and bullets",
          "Detecting when an alien and a ship collide",
          "What happens when an alien reaches the bottom of the screen?",
          "It' game over folks",
          "Knowing when different parts of our game should run"
        ],
        "Score: Whats your high score?": [
          "Creating a button class",
          "Creating the play button",
          "How to make our play button work",
          "Resetting our game",
          "Deactivating the play button",
          "Hiding the mouse",
          "Refactoring bullets",
          "Moving our game up a level",
          "Resetting our game's speed",
          "How to add a scoreboard to our game",
          "Assigning points to aliens",
          "Increasing the points score",
          "Rounding out the score",
          "Adding a players high score",
          "Drawing our spaceship to screen",
          "Displaying what level a player is on",
          "Responding to alien ship collisions",
          "How many lives does a player have?"
        ]
      },
      "requirements": [
        "Students should have a basic understanding of the Python language.",
        "Have Python 3 installed."
      ],
      "description": "This course has over 50 lectures, is 4+ hours long and is only $25\nAre you ready to save the earth from invaders from the planet python? If so, then you can take your Python skills from basic to advanced by creating a fully featured and professional Space Invaders clone called Invaders from Python.\nThis course is the follow-up to my hugely successful Python 3: A Beginners Quick Start Guide to Python and will take you the student from knowing the basics of the Python programming language and walk you through creating your very own Python game.\nAlong your journey you will learn:\nThe basic structure for a game written in Pygame\nPython modules to manage graphics and animation\nHow to install Homebrew and Pygame\nHow to add images to your games\nMake game objects move on screen\nRefactoring and bug checking\nHow to respond to game events such as mouse and key presses\nHow to interact between different elements of your game\nWhat are and use nested loops\nHow to create different levels of your game to make it more challenging\nAdd a score board and players high scores\nAnd more...\n\n\nThis course has over 50 lectures and is 4+ hours long. You will start with a blank Python file and when you are finished you will have the skills to create and develop many more games and programmes as the skills you learn here are not just for game development.\nProjects in Python is intended for those who already have a working knowledge of Python programming or general programming, and who want to apply their skills to games development. However, beginners may still be able to follow the course too.\n\nThe main learning drive in this course is in helping you to create your very own Space Invaders clone called Invaders from Python. Each lecture is like a level within a video game, as you move through the course you will be introduced to more and more advanced topics.\nThe skills you picked up along the way will give you a solid groundwork for creating bigger, more complex, and more versatile games that can be run on any platform or any operating system.\n\nThis course is fun and challenging and I am always on hand to answer questions and help out.\nBest of luck!",
      "target_audience": [
        "Students who have completed a beginners Python course and are now looking to explore more advanced topics.",
        "Students who are ready to jump in to Python game development and start learning.",
        "Students who are coming from other programming languages and who don't want to start at the very beginning again."
      ]
    },
    {
      "title": "Unity Multiplayer: Create and host dedicated game server.",
      "url": "https://www.udemy.com/course/unity-multiplayer-create-and-host-dedicated-game-server/",
      "bio": "Learn how to create and host dedicated game server using Low-Level networking via LiteNetLib and Unity3D.",
      "objectives": [
        "Create a low-level dedicated game server using LiteNetLib and .net core 6.",
        "Host the server on Digital Ocean, Azure, AWS or any other cloud platform using Docker and Azure Container Instances.",
        "Create a simple TicTacToe game client that will communicate with the authoritative server.",
        "Create a gameplay lobby to help with matchmaking.",
        "Create a strongly typed networking layer that can be reused for any future game."
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Setting up the developer environment"
        ],
        "Minimal setup of Networking using LiteNetLib": [
          "Create new Unity project.",
          "LiteNetLib - UPDATE(06.2024)",
          "NetworkClient using LiteNetLib.",
          "NetworkServer using LiteNetLib",
          "Client-Server integration",
          "Section Source Code"
        ],
        "Login Scene": [
          "Introduction",
          "Install custom font",
          "Login UI",
          "Login form validation part 1",
          "Login form validation part 2",
          "Loading animation",
          "Login button click",
          "Serializable network packets",
          "OnServerConnected event",
          "Section Source Code"
        ],
        "Server architecture": [
          "Dependency Injection",
          "OnNetworkReceive",
          "Resolving packets using PacketRegistry",
          "Resolving handlers using HandlerRegistry and HandleRegisterAttribute",
          "Dynamic handler registration in DI container",
          "Section Source Code"
        ],
        "User Authentication": [
          "Users repository",
          "Handling user connections",
          "Notify clients for auth outcome",
          "OnAuth packet handler",
          "OnAuthFail packet handler",
          "Section Source Code"
        ],
        "Lobby scene": [
          "Lobby UI",
          "Requesting server status",
          "ServerStatusRequest handler",
          "Rendering top players part 1",
          "Rendering top players part 2",
          "Displaying total players count",
          "Setup ParrelSync",
          "Enable Run in Background",
          "Update other players screens on disconnect",
          "Logging out",
          "Find opponent button UI",
          "Find opponent button onClick and cancelling.",
          "FindOpponentRequest and CancelFindOpponentRequest models and handlers definition",
          "Matchmaking part 1",
          "Matchmaking part 2",
          "Games Manager",
          "Raising OnStartGame event.",
          "OnStartGame packet handler",
          "Section Source Code"
        ],
        "Game scene": [
          "Game UI",
          "[Client] GameManager",
          "Current player turn text logic",
          "Rendering the game Board",
          "MarkCellRequest and OnMarkCell models and handlers definition",
          "MarkCellRequest structure and validation",
          "Checking win condition on the server",
          "Handling different MarkCell outcomes. None, Draw, Win",
          "OnMarkCell handler on the client",
          "Updating current player turn text",
          "Win line",
          "Section Source Code"
        ],
        "EndRound modal": [
          "What are we going to make",
          "Modal UI",
          "Initializing and showing the modal on round end",
          "Modal animation",
          "PlayAgain request model and handler",
          "OnPlayAgain handler",
          "Accepting play again request",
          "Handling OnNewRound",
          "Surrendering",
          "Handling OnSurrender",
          "Quitting",
          "Section Source Code"
        ],
        "Build and Deploy": [
          "Build client executable",
          "Build and push Docker image to dockerhub",
          "Host the server in the cloud using DigitalOcean droplet",
          "Course Source Code"
        ]
      },
      "requirements": [
        "We recommend having basic knowledge of C# language and Unity3D."
      ],
      "description": "I will be completely honest with you.\nIn the past, I have been struggling for months to find good information on internet on how to create and host real dedicated game server. There is hardly any well structured information on this topic. Now that I have a decent understanding on the topic I've decided to share it with you. I really hope this course will help you lay the foundation on your journey in the world of online multiplayer games.\n\n\nHere is what you should expect in the course:\n\n\n1. In the first section we are creating very minimal setup of our client-server communication using Unity3D, .NET 6 and the networking library LiteNetLib.\n\n\n2. After we are done with the proof of concept, or as a like to call it \"walking-skeleton\" project, we will continue by laying the foundation of a strongly typed client to server communication. We will implement packet serialization and deserialization and will make it so the logic that handles different packets is separate in different packet handlers and it will use strongly typed C# structs.\n\n\n3. Once the networking layer is done, we will work on two core scenes that are essential for any multiplayer game. Login and Lobby scenes.\n\n\n4. In the login scene, we will allow the players to identify themselves and register in our server. We will handle user input validation and we will give the user visual feedback in the form of loading animation.\n\n\n5. In the lobby scene we will create a sorted list of the top 10 players and will show their statuses (online or offline). We will also show the current total players count on the server. In addition to that we will update the list on all clients when a new player joins or an existing one turns offline.\n\n\n6. After we are done with that, we will enable the players to register in our matchmaking pool and search for opponents by pressing the \"Find Opponent\" button.\n\n\n7. Once a match is found, we will redirect the players to the actual game scene, where they will be able to play the classic game of Tic Tac Toe.\n\n\n8. We will implement beautiful animations and handle corner cases on both server and client-side.\n\n\n9. After one game session is complete we will allow the players to request to play again and then of course give them the ability to accept or reject the offer.\n\n\n10. And last but not least, once we are ready with the game client and server, we will deploy our server to a cloud provider and will connect to it from the client.\n\n\n11. If there is interest in the course I will expand it with additional bonus sections, depending on the needs of the students.\n\n\nSince this is my first course in Udemy, my presentation skills are far from perfect and I apologize for that, but I still believe that there is valuable information that you can benefit from. I really hope you enjoy it.\n\n\nAre there any course requirements or prerequisites?\nBasic understanding of Unity3D and .NET\nA passion and desire to learn more about how to create online multiplayer game.\n\n\nWho this course is for:\nThis course is intended for anyone that is interested on creating a custom dedicated server using low-level networking. The course itself is not for complete beginners as do not cover very basic concepts like for example: How to install software or the very basics of C# programming. But I still believe that even if you are beginner you will be able to follow up, because the course is basically a step-by-step guide.",
      "target_audience": [
        "This course is for intermediate Unity users who want to create their own multiplayer games using low level networking solution."
      ]
    },
    {
      "title": "Godot 4 Shaders: Write 2D shaders for your game from scratch",
      "url": "https://www.udemy.com/course/complete-godot-4-2d-shader-course-visual-effects-part-1/",
      "bio": "Learn to create visual effects (VFX) with 2D shaders via GDShader language of Godot 4. PART 1: Beginner to intermediate",
      "objectives": [
        "Gain a deep understanding of Godot 4 's shader language, enabling you to leverage its full potential for game development.",
        "Learn the step-by-step process to create canvas_item shaders, laying the foundation for complex visual effects in 2D games.",
        "Learn the skills to design and implement captivating visual effects (VFX) using shaders, enhancing the aesthetic appeal of your games.",
        "Become familiar with industry-standard best practices for efficient and effective shader programming within the Godot engine.",
        "Discover how to integrate shaders with game logic using GDScript and GDShader language, allowing for dynamic and interactive game environments.",
        "Through the Zombie project, apply your learning in a practical context, understanding how to use shaders in real game development scenarios.",
        "You'll have a strong foundation to build upon. Being able to transfer this knowledge to learn 3D shaders or the more general GLSL shader language.",
        "At the end of the course you'll easily gun down and blow up loads of angry zombies using shaders you created on your own"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "What is, and what isn't included in part 1"
        ],
        "First Shader: Theory": [
          "Overview of section",
          "Canvas item shaders & GDShader language",
          "Data-types: Floats, integers & vectors",
          "Vectors, coordinates & color channels",
          "Textures",
          "UV Coordinate system",
          "Normalising textures",
          "Texture mapping",
          "Texture space",
          "Challenge: Quiz & wrap up"
        ],
        "First Shader: Practical": [
          "Overview of section",
          "Create project",
          "Setting up shader",
          "Fragment: RGB colors",
          "Fragment: Swizzling",
          "Fragment: Alpha",
          "Vertex: RGBA",
          "Fragment: Multiplying & dividing COLOR",
          "Fragment: UV Variable",
          "Challenge: Create your own zombie",
          "Vertex: UV",
          "Sampler2D: Texture Sampling & Uniforms",
          "UV Texture mapping",
          "Vertex: VERTEX Manipulation",
          "UV mapping vs VERTEX positioning",
          "Built-in function: Mix",
          "Challenge: Add a third texture"
        ],
        "Shader Essentials: Rendering pipeline": [
          "Overview of section",
          "Rendering phase vertices",
          "Rendering phase vertex shader",
          "Rendering phase primitives generation & rasterisation",
          "Rendering phase fragment shader, testing and blending, framebuffer",
          "Rendering pipeline importance GPU vs CPU",
          "Rendering pipeline relation GPU CPU & pipeline",
          "Rendering pipeline light function",
          "Rendering the end phase",
          "Rendering pipeline"
        ],
        "Shader Essentials: Data-types": [
          "Overview of section",
          "Project setup",
          "Datatypes booleans & bvec",
          "Datatypes integer, uvec & ivec",
          "Datatypes matrices",
          "06 Datatypes Column Major",
          "Datatypes sampler2D (arrays) & texels",
          "It's over type"
        ],
        "Shader Essentials: GDShader language": [
          "GDShader language: Overview of section",
          "GDShader language- Arrays",
          "Array size and read & write",
          "Global arrays",
          "For Loops",
          "While & Do-While Loops",
          "Loops challenge",
          "Custom Functions",
          "If statements & branch divergence",
          "Step function & branchless techniques",
          "Switch & turnary operator",
          "GDShader language: IF section == over"
        ],
        "Shader Essentials: Debugging": [
          "Debugging: Overview",
          "Visual debugging with colors & textures",
          "Frame rate monitoring",
          "Modular workflow",
          "Clean coding- line length, magical numbers, style guide",
          "Preprocessors",
          "Debugging: Wrapping up",
          "Style guide godot"
        ],
        "Zombie Project: Intro": [
          "Intro: Overview",
          "Scope & folder structure",
          "Walk through",
          "Add our zombie shader",
          "Intro: Kill them all!"
        ],
        "Zombie Project: Flash on Hit": [
          "Flash on hit: Overview",
          "Function setup",
          "Flash on Hit Outline",
          "Hint_range and source_color hints",
          "Core logic & limit range",
          "Multiplying, built-in function Clamp & hint_range steps",
          "AnimationPlayer",
          "GDScript call Flash_hit",
          "Testing the shader",
          "Dedicated function",
          "Custom function",
          "Uniform (sub) groups",
          "Flash on hit: Finished in a flash"
        ],
        "Zombie Project: Breath": [
          "Breath: Overview",
          "Vertex Phase & scaling",
          "Built-in TIME & reducing frequency",
          "Sin & Cos",
          "Preprocessor Include",
          "Flipping vertices",
          "Change magnitude",
          "Frequency & magnitude",
          "Shared function with include",
          "Share breath & flash",
          "Dynamic parameters",
          "Uniforms vs Constants",
          "Define breathing pace",
          "Out of breath"
        ]
      },
      "requirements": [
        "Love for shaders and game development",
        "Knowing the basics of a programming language would help",
        "Being able to \"read\" gdscript would help but not required"
      ],
      "description": "Welcome to the \"Godot 4.x Canvas item Shaders\" course on Udemy! This course will guide you through the fascinating world of 2D shaders, where you'll learn everything from the essentials to advanced techniques.\n\nThat being said, the series is split up between a beginner and an intermediate course. You are now looking at the first part of the series. It will take you from a beginner to intermediate in a matters of hours.\n\nWhat makes this series unique is that it covers everything there is to know about 2D shaders in Godot 4. it's the most complete 2D shader series to date.  It starts by teaching you the syntax and formatting rules following the community standards. Then you learn each concept with theoretical and practical examples, slowly building up from simple shaders to more advanced examples. It's also packed with \"try by yourself\" challenges to not just copy and paste the code but really learn how to do it on your own. The goal of this course is to teach you how to create any 2D shader you envision from scratch.\n\nThe content of the course is fully compatible with Godot 4.3!\n\nIn this part of the series we'll start by exploring canvas item shaders, Godot's unique shading language, and look into essential data types like floats, integers, arrays, vectors, matrices, etc. You'll learn concepts like:\n\n\nColor channels\nTexture mapping\nUniforms\nWrapping modes\nFormatting\nBuilt-in functions\nHints\nUV Coordinate system\nFragment & vertex functions\nRender pipeline\nAnd more advanced topics like:\n\n\nPre-processing shaders\nDebugging-shaders & -techniques\nInteraction with GDScript\nRandomness\nAnimation Graphs (CurveTexture)\nInterpolation\nVector operations\nBranch divergence\nAnd the list goes on and on. We will explore these topics through a blend of theory and practical coding exercises.\n\nThe course is structured to provide a comprehensive understanding of shader language. It exists out of two project, a project where we mostly focus on the theory and create random shaders that fit the subject, and we'll have a actual game project, our \"Zombie project\", this is where we learn to apply our knowledge to create visual effects (VFX) for your 2D games. We'll take a detailed look at every built-in shader function that we'll be using in our code, explaining every single line. Every time a new functionality is introduced, We'll have a full explanation using coding examples, slides and follow up questions. Plus, it's important to know that the course follows community best practices.\n\nBy the end of this course, you'll not only have a solid foundation in shader programming in Godot but also a fun, interactive project to showcase your new skills.\n\n\nEnroll now to start our journey into the colourful world of shaders!\n\nIm happy to welcome you to the course!\n\nKind regards,\nSam\n\n\nAs a final note:\n\nAt this point in time the second part of the series is still under development. I will be working on both this course to make sure it's up to date and the new course. This way you will be able to advance from intermediate to advance level once the second part is finished.\n\nTopics that will NOT be discussed in this course, but will be included in the upcoming part 2 are:\n\n\nApplying matrices on vertices\nScreen space shaders\nCanvas space shaders\nScreen texture\nPost-processing shaders\nAdvanced vector operations\nGlobal uniforms\nCoordinate space transformations using transform matrices (world to screen space, etc)\nBack buffer copy\nAdvanced UV mapping\nLight function\nAnd other advanced topics. Those will be discussed in the upcoming course.\n\n\nContact\nI will be available for questions after working hours 8:00 - 17:00 (GMT+1 / EST-5) from Monday to Friday, varying times in the weekends. Always try to respond within 12 hours or less!\n\n\nAny suggestions / feedback please contact me",
      "target_audience": [
        "Anyone wants to learn how to create and use shaders in godot 4",
        "The scope of the course does not include 3D shader, that being said, the fundamentals you learn provide an excellent foundation for mastering 3D shaders",
        "Game Developers and Designers interested in enhancing the visual appeal of their 2D games with custom shaders in Godot 4",
        "Programmers looking to expand their skills in game development by mastering shader programming and visual effects (VFX)",
        "Artists and Animators who want to leverage shaders to bring their art to life in game environments.",
        "Students and Hobbyists in game development seeking a comprehensive guide to utilizing GDShader language for creative expression.",
        "Educators looking for resources to teach advanced game design and programming concepts.",
        "Indie Game Creators aiming to implement high-quality visuals with efficient use of resources in their projects."
      ]
    },
    {
      "title": "The Ultimate Guide to Game Development with Python3 (AI too)",
      "url": "https://www.udemy.com/course/the-ultimate-guide-to-game-development-with-python3-ai-too/",
      "bio": "Build Games like 8 Pool Ball, Chain Reaction, Balloon Shooter, Space Shooter, Racing Car, Angry Bird, Tetris and many!",
      "objectives": [
        "Python basics like data-types, loops, decision-makings, file handling, libraries, modules, date-times etc.",
        "Learn to make real world games using Python",
        "How to use basic AI in the games",
        "How to use best use of data structures using Python",
        "Will learn advanced concepts of python like OOP, Functional Programming, Decorators etc.\\",
        "Make Collision Handler between game objects using maths",
        "Implement Linear Algebra and conditionals from scratch",
        "Learn how to create game objects using pygame",
        "Learn how to use physics and materials using pymunk module",
        "Learn how to use pygame",
        "Learn about framerates and clock",
        "Learn about how to read a documentation"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Introduction to pygame"
        ],
        "Basics of PYTHON: Learning objects and data structures": [
          "Install Python on Windows",
          "Download and setup Pycharm code editor on Windows",
          "Download Visual Studio code editor on Windows",
          "Install python on Linux Machine",
          "Download and setup Pycharm code editon on Linux (optional)",
          "How to read Python documentation",
          "Variables on Python",
          "Data Types: String, Set and Numbers",
          "Data Types: List, Dictionaty and Tuple",
          "Operators and Operands",
          "Logical Operators and Operations",
          "Comments and User Input",
          "Built-in Modules and Creating your own Modules",
          "Python \"List\" Data Structures",
          "Python \"Dictionary\" Data Structures",
          "Learn Strings and String Methods in detail",
          "String Formatting",
          "Python Indentation",
          "Python Conditionals: if...else statements",
          "Looping in Python: while Loops",
          "Looping in Python: for Loops",
          "User Defined Functions in Python",
          "Default Arguments in Python",
          "Anonymous/Lambda functions"
        ],
        "Advanced Python Programming": [
          "Functional Programming: lambda, map and reduce",
          "Iterators in Python",
          "Generators in Python",
          "Decorators",
          "List and Dictionary Comprehensions",
          "Classes and Objects in Python",
          "Basic Inheritance in Python",
          "Multiple Inheritance in Python",
          "Polymorphism in Python",
          "Properties",
          "Operator Overloading in Python",
          "Exception Handling",
          "File Handling",
          "__name__ == \"__main__\""
        ],
        "Python module for Game Developers": [
          "Python \"math\" module",
          "Python \"random\" module",
          "Python \"collection\" module",
          "Python \"os\" module"
        ],
        "Game development (turtle/pygame) module": [
          "Introduction to Game Development",
          "Introduction to turtle module",
          "Computation using vectors and Magic methods (operator overloading)",
          "Start using turtle with simple animation",
          "Introduction to Vector class",
          "Snake Game Capstone: Creating Layouts and Handling Movements",
          "Snake Game Capstone: Make movements of Snake character",
          "Snake Game Capstone: Creating boundaries for game",
          "Pacman Game Capstone: Creating game world",
          "Pacman Game Capstone: Valid and Invalid movements for characters",
          "Pacman Game Capstone: Making movement for Pacman",
          "Pacman Game Capstone: Rendering ghosts and their movements",
          "Introduction to pygame module",
          "Let's talk about frame-rate",
          "Loading images/sprites using pygame",
          "Pygame DODGE CAR CAPSTONE: Render Player and screen",
          "Pygame DODGE CAR CAPSTONE: Rendering Enemies",
          "Pygame DODGE CAR CAPSTONE: Handling Collisions",
          "Pygame PACMAN CAPSTONE: Start creating game characters",
          "Pygame PACMAN CAPSTONE: Learning about Levels",
          "Pygame PACMAN CAPSTONE: Loading sprites and create Game Loop",
          "Pygame PACMAN CAPSTONE: Handle rotations and collisions of Sprites",
          "Pygame PACMAN CAPSTONE: Handling ghost movements",
          "Pygame PACMAN CAPSTONE: Wrap Up!!"
        ],
        "Balloon Shooter Game": [
          "Introduction to the basic maths for Balloon Shooter",
          "Defining Properties for Balloon Class",
          "Making move method",
          "Redering the balloons",
          "Game Loop and rendering balloons",
          "What should happen when balloons hit the boundary?",
          "Creating shooter/Pointer in the Game",
          "Burst the balloons",
          "Extra feature for Pointer",
          "Rendering score"
        ],
        "Chain Reaction Game": [
          "Introduction to Chain Reaction",
          "Basic Math to Know for Chain Reaction game",
          "Creating a spot (in grids) and neighbors grid",
          "Initializing and drawing grid",
          "Game Loop",
          "Drawing atoms and showing present grid",
          "Handling mouse events",
          "Rendering two atoms",
          "Rendering three atoms",
          "Overflow of atoms",
          "Making atoms to vibrate and Wrapping up game!"
        ],
        "8 Pool Ball Game": [
          "Introduction to the 8 Pool Ball Game",
          "Intro to the basic maths -- slope and distance formula",
          "Setting Project and Pygame",
          "Creating Ball class",
          "Creating Pool Table and Cue Ball",
          "Creating Ball class Objects (in Triangular format) initially",
          "Rendering Balls",
          "Adding number to each ball",
          "Adding a Cue Stick",
          "Draw border for Pool Table",
          "Moving the ball",
          "Applying force to the cue ball from cue-stick",
          "Collisions",
          "Normal ball and Cue Ball collisions",
          "Collisions between two ball",
          "Checkput and Wrap Up!!"
        ],
        "Space Shooter Game": [
          "Introduction to the space shooter game",
          "Creating Player",
          "Loading player sprite sheets",
          "Game Loop and Handling input events",
          "Moving Up and Down for Player",
          "Adding Bullets for player",
          "Rendering Enemies for game",
          "Handling collisions between game objects",
          "Rendering score in the game",
          "Rendering \"Game Over\" screen"
        ],
        "Implement Basic AI using Snake Game": [
          "Introduction to Non-Player Character (NPC)",
          "Creating Human Player class",
          "Food (Frog) for the Snake",
          "AI/Computer Player",
          "App class",
          "Check Collisions and Wrap Up!!"
        ]
      },
      "requirements": [
        "Any machine with OS (Windows, MacOSX, and Linux)",
        "No programming background is essential (if there is, it will be useful)",
        "Fair internet connection is required to install some softwares and python libraries",
        "No prior knowledge of Python is required"
      ],
      "description": "Have you ever wanted to build a game with a graphical interface but didn't know how to? Maybe you even know how to create tools on a command line but have no idea how to convert it into a graphical interface that people can click on. In this course, we will be learning Python GUI Programming + Turtle + other advanced python modules to build graphical user interfaces (GUI) and games from scratch.\nGame projects covered:\n1. 8 Pool Ball\n2. Balloon Shooter\n3. Chain Reaction\n4. Space Shooter\n5. Car Racing\n6. Angry Bird and many more.\n\n\nBasic Python course Highlights:\nInstalling Python\nRunning Python Code\nStrings\nLists\nDictionaries\nTuples\nSets\nNumber Data Types\nPrint Formatting\nFunctions\nScope\nargs/ kwargs\nBuilt-in Functions\nDebugging and Error Handling\nModules\nExternal Modules\nObject-Oriented Programming\nInheritance\nPolymorphism\nEncapsulation\nAdvanced Methods\nIterators\nClosures\nand much more!",
      "target_audience": [
        "Students who want to learn python by developing modern day games like 8 Pool Ball, Chain Reaction, Angry Bird and so on"
      ]
    },
    {
      "title": "Scratch 3.0 Masterclass: Build 6 Games and Learn to Code",
      "url": "https://www.udemy.com/course/ultimate-scratch/",
      "bio": "Build real games in Scratch while learning core programming skills, sound effects, and game logic with NO experience",
      "objectives": [
        "Become an expert with block-based programming",
        "Learn to develop your own 2D/3D games and apps",
        "Understand complex computer science concepts by intuitively applying them in games",
        "Build up a solid knowledge of universal computer programming strategies, vocabulary, and logic",
        "Get comfortable with graphic, bitmap, and vector design, no matter your artistic capabilities",
        "Learn text-based programming languages 2x - 10x faster",
        "Compatible with all skill levels and ages"
      ],
      "course_content": {
        "Introduction": [
          "Introduction to Scratch - Making a game",
          "How to make a Top-Down Airplane Shooter - Part 1",
          "How to make a Top-Down Airplane Shooter - Part 2",
          "Scratch Intro"
        ],
        "Introduction to Variables": [
          "What is a variable?",
          "Flappy Bird",
          "Health Bar",
          "Variables"
        ],
        "Geometry Dash": [
          "Geometry Dash - Episode 1",
          "Geometry Dash - Episode 2",
          "Geometry Dash - Episode 3",
          "Geometry Dash - Episode 4",
          "Geometry Dash - Episode 5",
          "Geometry Dash - Episode 6",
          "Scrolling"
        ],
        "Subway Surfers": [
          "Subway Surfers - Episode 1",
          "Subway Surfers - Episode 2",
          "Subway Surfers - Episode 3",
          "What is a Hitbox?"
        ],
        "Minecraft": [
          "Minecraft - Episode 1",
          "Minecraft - Episode 2",
          "Minecraft - Episode 3",
          "Minecraft - Episode 4"
        ],
        "Zombie Shooter Game": [
          "Zombie Shooter - Episode 1",
          "Zombie Shooter - Episode 2",
          "Zombie Shooter - Episode 3",
          "Zombie Shooter - Episode 4",
          "Zombie Shooter - Episode 5",
          "Zombie Shooter - Episode 6",
          "Zombie Shooter - Episode 7",
          "Wait Seconds"
        ],
        "3D Game": [
          "3D Game - Episode 1",
          "3D Game - Episode 2"
        ],
        "Simple RPG": [
          "RPG - Episode 1",
          "RPG - Episode 2"
        ],
        "Scratch Hacks!": [
          "How to create a Profile Picture",
          "How to make an Online Highscore",
          "How to make a highscore",
          "How to make a Number Counter",
          "Assorted Scratch Hacks",
          "How to make a Screen Shake Effect",
          "5 Things I wish I knew Before Starting Scratch",
          "How to make a Main Menu",
          "5 Types of Scratchers"
        ]
      },
      "requirements": [
        "No experience needed! You will learn everything you need to make games."
      ],
      "description": "Learn to Code by Making 10 Real Games in Scratch 3.0!\nWhether you're a parent, teacher, or curious beginner — this course will teach you programming the fun way: by building playable games inspired by Minecraft, Flappy Bird, Subway Surfers, and more!\nThis hands-on, beginner-friendly course introduces kids and adults alike to Scratch 3.0, a visual coding platform trusted by millions.\nWhat You'll Build:\nA Minecraft-style crafting game\nA Subway Surfers-style runner\nA Flappy Bird clone\nA Geometry Dash platformer\n...and more!\nWhat You’ll Learn:\nDrag-and-drop coding with Scratch’s visual interface\nProgramming basics: loops, variables, logic, events\nHow to animate characters and add sound effects\nGame dev essentials: scoring, levels, player control\nHow to share your games online with the Scratch community\nExtras Included:\nInteractive video tutorials\nCreative challenges after every game\nBonus: Certificate of Completion\nAccess to our private Scratch coder forum\nNo prior experience needed. Just bring curiosity — we’ll bring the code!\nBy the end of this course, you'll have built a portfolio of impressive games, gained confidence in your coding skills, and unlocked a creative outlet that can grow with you. Start your journey in game development today — the world of Scratch is waiting!\nHere there and mare.",
      "target_audience": [
        "People wanting to create awesome games in Scratch!",
        "Beginners wanting to learn programming",
        "Programmers who want a fresh grasp on block-based coding"
      ]
    },
    {
      "title": "Build An Online Chess Game",
      "url": "https://www.udemy.com/course/build-an-online-chess-game/",
      "bio": "Learn how to use NodeJs & SocketIO to create online games",
      "objectives": [
        "How to use NodeJs to create a backend",
        "How to use SocketIO",
        "How to use MySQL with NodeJs",
        "How to use Redis with NodeJs",
        "How to create an online game using NodeJs and SocketIO",
        "How to use a view engine with NodeJs",
        "How to use VanillaJs to update or create DOM Elements",
        "How to make client-server communication using SocketIO",
        "How to make a Chess game using Javascript"
      ],
      "course_content": {
        "Introduction & setting up the project": [
          "Introduction",
          "Startup files",
          "Creating the server",
          "Using Nodemon & ENV Variables",
          "Setting up the MySQL Database",
          "Setting up Redis",
          "Connect to Redis example (using current version of npm package)",
          "Setting up Ejs for our view engine"
        ],
        "User Login & Register": [
          "Creating Register & Login Page",
          "Creating user & user_info tables in DB",
          "Creating the register controller",
          "Displaying form error messages",
          "5. Creating the login controller"
        ],
        "Lobby Page": [
          "Creating the lobby page",
          "Connecting to server with socket.io",
          "Creating functions to handle connections",
          "Getting user info from server",
          "Creating our spinner",
          "Implementing the chat functionality"
        ],
        "Games Page": [
          "Creating the games page",
          "Displaying the games page",
          "Creating functions to handle room connections",
          "Adding functionality to games page part-1",
          "Adding functionality to games page part-2",
          "Adding functionality to games page part-3",
          "Adding functionality to games page part-4"
        ],
        "Room Page": [
          "Creating the room page",
          "Initializing game variables",
          "Displaying the chess pieces",
          "user-connected event",
          "Creating functions to handle game start",
          "Displaying pawn possible moves",
          "Moving the pieces",
          "Getting rook possible moves",
          "Getting bishop possible moves",
          "Getting knight possible moves",
          "Getting king & queen possible moves",
          "Continuing with move logic",
          "Checkmate logic",
          "Displaying moves to other player part-1",
          "Displaying moves to other player part-2",
          "Updating the timer part-1",
          "Updating the timer part-2",
          "Fixing timer error",
          "Castling",
          "Finishing room page design",
          "Pawn promotion part-1",
          "Pawn promotion part-2",
          "King under attack warning",
          "El passant part-1",
          "El passant part-2",
          "Draw functionality",
          "Creating a procedure to update scores",
          "Finishing all socket events in the server",
          "Testing & finishing the game functionality"
        ],
        "Stats Page": [
          "Games controller",
          "Creating the stats page",
          "Finishing games controller",
          "Played game moves pages"
        ],
        "Profile Page": [
          "Finishing the user controller",
          "Creating the profile page",
          "Adding functionality to the profile page"
        ],
        "Hosting our game": [
          "Docker files + SQL file + .gitignore file",
          "Hosting on Digital Ocean droplet using Docker"
        ]
      },
      "requirements": [
        "Basics of Javascript",
        "Basics of HTML",
        "Basics of NodeJs",
        "Bsics of SQL",
        "MySQL server installed locally",
        "Redis installed locally"
      ],
      "description": "In this course we are going to create from scratch a complete online chess game. Also we are going to setup a MySQL database to store the users info (username, email, score, played games etc.) and we are going to use also Redis. We are going to set up a basic express server, and for our view engine we are gonna use ejs. For our server we are going to use different routes to displaying the pages and different routes for the api. We are going to use a lot of socket events so by the end of this course you'll have mastered SocketIO. I will provide all the styling in the resources folder in the first section because this isn't going to be a CSS tutorial, because I want this tutorial to help you focus on your javascript skills. What you will learn in this course:\n\n\nHow to create a server with nodejs\nHow to connect to your MySQL database from your nodejs server\nHow to connect to a Redis client from your nodejs server\nHow to use SocketIO for client-server communication\nHow to use VanillaJs to create or update DOM Elements\nHow to create a complete chess game using javascript\nHow to setup a MySQL database for your game\nHow to create and use MySQL procedures\nHow to create middlewares to authenticate users\nHow to store cookies\nHow to use jwt authentication\nHow to hash user passwords\n\n\n*************************************************************************************************\nSince some of the npm packages may have updated when you take this course, it would be better if you used the same versions with me. Also you should have locally installed MySQL and Redis. I use MySQL 8 and Redis 3.0.5 (I used msi installer for redis), but you can use newer versions for redis.\n*************************************************************************************************",
      "target_audience": [
        "Javascript developers who want to learn how to create a server",
        "Javascript developers who want to learn how to use socketio",
        "Javascript developers who want to learn how to create an online game",
        "Javascript developers who want to learn how to use nodejs with mysql, redis and socketio"
      ]
    },
    {
      "title": "Unity Mobile Game Development - Exterminator",
      "url": "https://www.udemy.com/course/complete-game-development-series-03-unity-exterminator/",
      "bio": "Complete Game Development Series 03 - Advance Your Game Dev Jurney on Mobile with Unity and C#",
      "objectives": [
        "Advanced Unity Techniques",
        "Make Mobile Games for Android and iOS",
        "Advanced C# Facilities",
        "Robust Coding Practices",
        "How to Implement Complex Systems Like AI Perception and Behavior Tree."
      ],
      "course_content": {
        "Introduction and Setup": [
          "Introduction",
          "02 Create the Project",
          "03_Setup Unity Remotes with iOS",
          "04 Setup Unity Remote with Android",
          "05 Collect Assets",
          "06 Environment Pieces and Modular Workflow",
          "07 Composing the Environment",
          "08 Basics of Lights",
          "09 Baking"
        ],
        "Basic Touch and Movement Control": [
          "10 Structure the Joystick and Touch Events",
          "11 Move the Joystick with Touch Input",
          "12 Move the Player using Joystick Input",
          "13 Using the Camera Orientation to Calculate Move Directions",
          "14 Make the Camera Move and Turn with the Player and Input",
          "15 Turn the Player Character to Moving Direction",
          "16 Add Aiming Control",
          "17 Refactor and Improve Aiming"
        ],
        "Player Character Animation": [
          "18 Getting Additional Animations",
          "19 Create the Local Motion Blend Tree",
          "20 Update Blend Tree Paramaters",
          "21 Update Turning"
        ],
        "Weapons and Inventory": [
          "22 Layout the Weapon Class Basics",
          "23 Create the Inventory Class",
          "24 Create the Pistol Class",
          "25 Create Animation Override for Different Weapons",
          "26 Implement Tab Weapon Switch",
          "27 Add the Firing Animation",
          "28 Add the Weapon Switching Animations",
          "29 Implement the Aim Component",
          "30 User Animation Event to Trigger Attack",
          "31 Create the Health Component",
          "32 Create the Enemy Class and Animator",
          "33 Create the Health Bar",
          "34 Update the Health Bar with Delegates",
          "35 Create the Bullet Particle VFX",
          "36 Create the Bullet Hit Effect"
        ],
        "AI Perception": [
          "37 Create the Sense Component",
          "38 Create the Sight Sense",
          "39 Create the Forgetting Routine",
          "40 Perception Component and Picking a Data Structure",
          "41 Implementing the Hit Sense"
        ],
        "AI Behavior Tree": [
          "42 Basics of the Behavior Tree",
          "43 Create the Node Class",
          "44 Create the Behavior Tree and Wait Task",
          "45 Basics of Compositors",
          "46 Create the Selector and the Sequencer",
          "47 Create The Blackbard",
          "48 Create The Move To Target Task",
          "49 Implement the Patrolling",
          "50 The Decorator Class",
          "51 Implement the Check Condition and Notifies",
          "52 Sort Priority",
          "53 Implement Abort Lower Priority",
          "54 Add Check Last Seen Location",
          "55 Refactor Rotation Control and Add Behavior Interface",
          "56 Implement Rotate Toward Target",
          "57 Refactoring the Enemy and Chomper Prefab",
          "58 Create the Attack Task",
          "59 Add Running Animation to the Animator",
          "60 Add Team",
          "61 Implement the Damager Component",
          "62 Finish the Chomper Melee Attack",
          "63 Create the Health Bar For the Player",
          "64 Create the Damage Visualizer",
          "65 Create the Damage Visualizer Material",
          "66 Add Camera Shake",
          "67 Add Damage Visualizer the Enemy",
          "68 Add Death Animation to the Player",
          "69 Add the UI Manager",
          "70 Create the Behavior Group Task",
          "71 Refactor Chomper Behavior to Groups"
        ],
        "Spitter": [
          "72 Compose the Spitter Enemy",
          "73 Implement the Projectile Flight",
          "74 Implement the Projectile Damage and Explode",
          "75 Add VFX to the Projectile",
          "76 Implement the Cooldown Decorator"
        ],
        "Spawner": [
          "77 Compose the Spawner Prefab",
          "78 Implement the Spawn Behavior",
          "79 Update the Perception of the Spawned Enemy",
          "80 Finish the Death Logic of the Spawner"
        ],
        "Gameplay Ability System": [
          "81 Basics of Ability and Ability Component",
          "82 Create the Speed Boost Ability",
          "83 Create the Ability UI Widget",
          "84 Create the Ability Doc and UI Class",
          "85 Fire the Ability When Touched",
          "Add the Scaling Effect to the Ability UI",
          "86 Implement the Health Regen Ability",
          "87 Fire Ability Base Classes",
          "88 Compose the Scanner and Fire Ability Assets",
          "89 Apply Damage to the Enemy with the Fire Ability",
          "90 Implement the Stamina Bar"
        ],
        "Shop System": [
          "91 Create the Based Class for the Shop System",
          "92 Test the Shop System with the Rifle",
          "93 Test the Shop System with the Fire Ability",
          "94 Compose the Shop Item UI",
          "95 Compose and Test the Shop UI",
          "96 Create the Credit Button",
          "97 Update Credit and Add the Back Button in Shop UI",
          "98 Implement the Purchase Mechanics",
          "99 Convert All Weapon and Abilities to Items",
          "100 Implement the Reward System"
        ]
      },
      "requirements": [
        "Good Understanding of C#",
        "Good Foundation in Unity",
        "Passion to Game Development",
        "Please checkout the 1st and 2nd Installment of the Series If You Are a Complete Beginner."
      ],
      "description": "This course is the third installment of the Complete Game Development Series and is aimed at covering advanced topics of Unity, and mobile game development.\nStudents will learn how to make a mobile project and set up the testing environment. The modular level creation workflow is then applied to build the level of the game and the lighting. Touch screen-based player controller, along with the camera viewing, and follow control is implemented first, followed by many gameplay systems like inventory, health, and damage system, generic team ID, AI perception, AI behavior Tree, projectiles, ability system, shop system, UI management, level management, and more.\nThe project focuses on implementing independent gameplay systems and making them work together beautifully. Many advanced C# features like interfaces and delegates are utilized to help improve the extensibility of the code as well as reduce code duplication, and dependency. Programming patterns like recursion, tree, and singleton, are utilized to produce cleaner code. Advanced Unity features like scriptable objects are introduced to achieve better data storage and retrieval.\nThe build processes to iOS and Android are covered at the end of the tutorial, and students walk away with a complete mobile game, as well as extended knowledge of Unity, C# and game development.",
      "target_audience": [
        "Unity Developer needs Training on Mobile Development",
        "Students that have the basic knowledge of C# and Unity and are looking for advanced game development tutorials.",
        "Students who finished the first 2 installments of the Complete Game Development Series",
        "Not for complete beginners"
      ]
    },
    {
      "title": "Unity® Game Development Mastery Build 2D & 3D Games",
      "url": "https://www.udemy.com/course/the-unity-game-master-class/",
      "bio": "Learn how virtual reality works. Get a walkthrough of the game development process. Learn how to use Unity in C#.",
      "objectives": [
        "Learn to code for game development in Unity C#",
        "Create your own unique Battle Royale system.",
        "Build Retro 2D Pixel games in Unity®",
        "Navigate the Unity® editor.",
        "Design large environments for your character to explore in.",
        "Build 3D models for the game in Blender.",
        "Integrate the art from Blender into Unity®."
      ],
      "course_content": {
        "Intro to Unity": [
          "Introduction",
          "Unity Editor",
          "Moving a Cube",
          "Materials",
          "Lights",
          "Particle System",
          "Applying Physics",
          "Asset Store"
        ],
        "Intro to Coding": [
          "Introduction",
          "Variables",
          "Methods",
          "If Blocks",
          "Loops"
        ],
        "Intro to Inputs": [
          "Introduction",
          "Key Presses",
          "Moving a Player",
          "Jumping",
          "Moving Forward",
          "Cycling Cameras"
        ],
        "Intro to Prefabs": [
          "Introduction",
          "Introduction to Prefabs",
          "Random Angles",
          "Explosion Effects",
          "Adding explosion effects"
        ],
        "Intro to VR": [
          "Introduction",
          "Activating VR",
          "Building a Castle",
          "Lowering the Door",
          "Triggering",
          "Interface",
          "UPDATE - Using the Unity Package with Unity 5.6"
        ],
        "Let's Make a Game - Double Dragoon": [
          "Introduction",
          "Starting the Project",
          "Player Heirarchy",
          "Player Kick",
          "Identifying Kicked Objects",
          "Grabbing objects",
          "Throwing Objects"
        ],
        "Photoshop Intro": [
          "Build a New File",
          "Navigational Controls",
          "Basic Tools Rundown",
          "Basic Tools Usages",
          "Basic Secondary Tools",
          "Basic Layers"
        ],
        "Creating Assets (Photoshop Project)": [
          "Project Setup",
          "Background Street",
          "Background Sidewalk",
          "Background Wood Fence",
          "Background Chain Fence",
          "Background Cityscape",
          "Cardboard Box",
          "Trash Can",
          "Barrels",
          "Character Idle",
          "Character Punch",
          "Character Kick",
          "Item Hold and Toss",
          "Character Run",
          "Enemy Character",
          "Dragoon Exports"
        ],
        "Finishing the Game (Unity Project)": [
          "Art Integration",
          "Player Animation",
          "Order in Layer",
          "Interface",
          "Player 2",
          "Decrease Health Points",
          "Multiple Hits",
          "Restarting the Game",
          "Audio - Game Sounds",
          "Challenge Time",
          "Source and Assets"
        ],
        "Let's Make a Game - 2D Classic Marlo": [
          "Organizing the Project",
          "Preparing the Player",
          "Walking and Jumping",
          "Raycasting",
          "Raycast Precision",
          "Camera follow",
          "Coins",
          "User Interface",
          "Events",
          "Simple Enemy",
          "Enemy Walking Paths",
          "Jumping over Enemies",
          "Shell Enemy",
          "Shell Bouncing",
          "Pipe Enemy",
          "Blocks",
          "Powerups",
          "Powerup Feedback",
          "Win and Lose the Game"
        ]
      },
      "requirements": [
        "Unity® and Blender are free to download. Please download and install Unity® and Blender before purchasing this course",
        "Adobe Photoshop",
        "This course was recorded on a Mac computer, but you can use Unity® and Blender on a PC."
      ],
      "description": "Learn Unity game design & 2D & 3D game development & make your own C# games in Unity® 3D.\n\"Good straight-forward explanations to follow and like the pace of the instructor.\" -Review from Student Filip\nA runaway success of a Kickstarter funded this Mammoth Interactive course\nBuild 2D games like the classic Mario in Unity\nBuild a battle royale game like Fortnite\nLearn how to add multiplayer functionality\nBuild an unforgettable battle arena\nLearn what Photoshop is used for in game development\nCoding step by step for beginners\nBeginner's game programming in C#\nLearn the foundations of Blender 3D\nComplete your first Unity games for web, Mac & PC. Learn all about game development more efficiently YouTube tutorials. This is the best coding program online and a beginner's guide for aspiring game developers.\nLearn C# and programming fundamentals. Create 2D and 3D games using Unity® and Blender! Note that the VR games we build will not be for a specific headset. This course is unique because we make both the code and the art for the game from scratch. We teach you the fundamentals of designing, coding, and modeling a 3D game. First you design the game and its functionality in Unity®. You learn how to code in C# and build video game levels. Don't worry if you've never coded before. We start simple and add more to the game as the course goes on.\nBest Unity Course: Build Multiple Games in Full\nUnity® is one of the most popular platforms in game development. You can use Unity® to build 2D and 3D games. Unity® is cross-platform, which means it is easy to use with other platforms. Then you create the 3D models for the game in Blender. You build all the art assets for the game. You learn how to integrate your art from Blender into Unity®.\nLearn the Foundations of Blender\nBlender, like Unity®, is a popular production suite that is free to download. Blender is a revolutionary tool for making 3D art digitally. With Blender, you can make art assets for games, like we do in this course.\nThese courses are project-based. You will not learn a bunch of useless coding practices. At the end of this course, you will have an AWESOME game to use in your portfolio. Taking this course means that you learn practical, employable skills immediately.\nLearning how to code is a great way to jump in a new career or enhance your current career. Coding is the new math! Learning to code will propel you forward for any situation. Learn it today and get a head start for tomorrow. People who can master technology will rule the future.",
      "target_audience": [
        "Anyone who wants their start at making 3D or 2D video games.",
        "People that want to create their own Battle Royale.",
        "Anyone who wants to learn game development.",
        "Beginners who want to learn how to use Blender.",
        "Even if you have never coded before, you can use these lessons to get a headstart in the game-making realm! This course is targeted towards beginners to immediate."
      ]
    },
    {
      "title": "Unreal Engine 5: Physics",
      "url": "https://www.udemy.com/course/unreal-engine-5-for-games-physics/",
      "bio": "Learn Advanced Unreal Engine Video Game Physics Simulations Development",
      "objectives": [
        "Learn how the Chaos physics engine works",
        "Define physics bodies, collisions, vectors, traces, forces, and impulses",
        "Use Constraints to create simple physics-based machines such as ziplines, pulleys, catapults, and swings",
        "Use Cables to create cables, wires, ropes, and chains and Cloth to create clothing, flags, curtains, banners, and sails"
      ],
      "course_content": {},
      "requirements": [
        "Some experience with Unreal Engine and basic Unreal Engine knowledge including the basics of Actors and Blueprints."
      ],
      "description": "Learn how to use physics simulations as part of video game development with my Unreal Engine 5: Physics course! This course will teach you basic, intermediate, and advanced Unreal Engine physics. You will learn how to apply movement, forces, and impulses to objects in your game. You will learn how to use the Cloth system to create realistic clothing, flags, curtains, banners, and sails. You will learn how to use Cables to create cables, wires, ropes, and chains. You will learn how to use Constraints to create simple machines such as ziplines, pulleys, catapults, and swings. And much, much more! Make physics an integral part of your Unreal Engine skill arsenal.\n\n\nLearn Basic to Advanced Unreal Engine Physics\nThis course covers several physics topics, ranging from beginning to advanced, including:\nPhysics Bodies\nCollisions\nVectors\nTraces\nForces and Impulses\nPhysical Materials\nPhysics Handles\nPhysics Fields\nConstraints\nCloth\nCables\nDestruction\n\n\nBasic Unreal Engine Physics\nThe first section is all about learning the basics of Unreal Physics.\nIn the Physics Bodies lecture, you will learn the fundamentals of Unreal’s physics engine. You will learn how objects become a part of, and are controlled by, the physics simulation. And how to manipulate an object’s physical properties. And then in the Collision Volumes lecture, you’ll learn how to construct your own physics bodies.\nIn the Collision Events lecture, we’ll take a look at what happens when two objects collide, how the physics simulation handles collisions, and how you can customize how two objects will collide with one another.\nIn the Vectors lecture, I’ll explain how vectors work in general, how they work in Unreal Engine, and how their math works, so that you can use them to control things like velocity, acceleration, and force. And then in the Vector Nodes lecture, we’ll go over several Blueprint nodes that make it much easier to work with vectors.\n\n\nIntermediate Unreal Engine Physics\nNext, we’ll build upon this basic knowledge to learn intermediate Unreal physics.\nIn the Traces lecture, we’ll learn the fundamentals of ray traces and how they are a crucial tool in game design that allow you to do things like determine what a Character is looking at and also to simulate the firing of high-speed projectile weapons such as rifles and pistols.\nIn the Hit Events lecture, we’ll expand our knowledge of collisions even further by taking an in-detail look at all the data you can retrieve from a collision and how you can use that data.\nThe Physics Volume lecture will teach you how to manipulate an area of space so that the physics of that region will affect the Character as if it were a volume of water.\nThe Movement and Forces lecture will explain the difference between kinematic and dynamic movement and will demonstrate several useful nodes that can be used to move objects in your game.\nThe Physics Components lecture will take a look at various components that can be used to manipulate physics in your game, including the Rotating Movement Component, the Projectile Component, and the Physics Thruster Component.\nThe Physical Materials lecture will teach you how to give your Materials physical characteristics such as friction, bounciness, and more.\nAnd then the final lecture in this section will show you how you can use Physics Handles to grab, hold, drop, and throw objects in your game.\n\n\nAdvanced Unreal Engine Physics\nAnd then, with all that knowledge under your belt, you will finally be ready to tackle advanced Unreal physics, which will allow you to do really cool things.\nIn the Physics Constraint lecture, you will learn how you can bind objects together in various ways to create simple machines that will operate as part of the physics simulation. You can connect objects as if they were joined by a track, joint, or cable, allowing you to create an endless amount of physics-based objects such as ziplines, pulleys, catapults, swings, and much, much more.\nIn the Cables lecture, you will learn how to accurately simulate objects such as cables, wires, ropes, and chains.\nThe Cloth Physics lecture will teach you how to create realistic clothing, flags, curtains, banners, sails, or anything else made out of cloth. You will learn how to manipulate its properties to create anything from silk to leather.\nThe Destruction Physics lecture will teach you how to simulate the destruction of meshes in your game. It will show you all the different ways you can customize how the object will fracture apart and how to control how weak or strong the object is.\nThe Physics Fields lecture will explain how you can manipulate the physics of a particular region of space. For example, you can add velocity, force, strain, or torque to a certain area. Or you can disable the physics in a particular area, and so on.\nAnd finally, the Balloon Gun lecture will tie all the other lectures together by using all the knowledge we’ve learned up to that point to create a gun that will spawn and attach a helium-filled balloon to whatever it shoots. This will cause the object to float away if enough balloons are attached.\nI hope to see you in the course soon!",
      "target_audience": [
        "Unreal Engine developers interested in becoming experts in Unreal Engine physics"
      ]
    },
    {
      "title": "Making Your First Game: GameMaker Studio 2",
      "url": "https://www.udemy.com/course/makegames/",
      "bio": "Create your own games using Drag & Drop, and learn to program without writing code! Become a game developer today.",
      "objectives": [
        "Creating games from scratch",
        "Practical game development & concepts",
        "Visual programming, without coding"
      ],
      "course_content": {
        "Introduction to GameMaker": [
          "Interface & Resources",
          "Objects & Events",
          "Don't forget to save!"
        ],
        "Theory of Drag & Drop Programming": [
          "Actions: Moving Instances",
          "Variables"
        ],
        "Building an Arcade Shooter": [
          "Intro & Course Structure (Resources)",
          "Player Ship",
          "Key Events",
          "Room Boundary",
          "Scrolling Background",
          "Manager & Alarms",
          "Shooting"
        ],
        "Enemy AI": [
          "Introduction to Conditions",
          "More About Conditions",
          "Enemy Ships",
          "Shooting the Enemies",
          "AI Shooting"
        ],
        "Player Health & Loops": [
          "Player Cooldown",
          "While & For Loops",
          "Health GUI",
          "Losing",
          "Why oManager for the Alarm?"
        ],
        "Game Essentials, Pt. 1": [
          "Player Points",
          "Scripts",
          "Score Indicators",
          "Health Power-up",
          "Speed Power-up",
          "Main Menu",
          "Game Over Screen"
        ],
        "Game Essentials, Pt. 2": [
          "INI Saving",
          "High Score System",
          "Music & Sound Effects",
          "Building an Executable"
        ],
        "Dynamic Features": [
          "Difficulty Scaling",
          "Enemy Horizontal Movement",
          "More Player Ships!"
        ],
        "Conclusion": [
          "Conclusion",
          "Bonus Lecture: Upgrade to GML"
        ]
      },
      "requirements": [
        "Windows PC, Laptop or Mac",
        "Free Version of GameMaker Studio 2"
      ],
      "description": "Learn to make games as a complete beginner, using GameMaker's visual programming tool known as Drag & Drop. No need to learn coding!\n♦ Manually-written subtitles/captions available for all lectures ♦\n~~    The Course    ~~\nIn this course, we'll build our own game from scratch, using GameMaker Studio 2. This course is perfect for complete beginners, as you don't have to deal with any coding.\nGameMaker Studio 2's Drag & Drop system makes it easy for anyone to create their own games. You can program your game using simple \"actions\", and add functionalities such as moving the player, collecting a power-up, killing an enemy, and much more.\nWhile Drag & Drop is easy to use and get started with, it still takes a lot of practice and knowledge to use it effectively and build a complete game. This course will help you understand how GameMaker Studio 2 and Drop & Drop work, and in 2 hours, take you to a level where you can start creating your own games.\n~~    The Instructor    ~~\nI'm Gurpreet Singh Matharoo, a professional GameMaker developer and instructor. I've been teaching game development for over 4 years and making games for longer than that.\nI've taught GameMaker lessons on Udemy and Skillshare, and have a tutorial blog called GameDev Palace and a YouTube channel called \"GameMakerStation\" with over a thousand subscribers.\nI also programmed Tubetastic World Splashfest (on Steam) and am actively working on another multiplayer project, both made in GameMaker Studio 2.\n~~    Course Content    ~~\nThe course is divided into separate sections, with lectures covering different topics.\nThe first two sections cover the basics of the interface of GameMaker, and some Drag & Drop theory.\nAfter that, we jump into practical game development, by making an Arcade Shooter game from scratch.\nResources for the game (images and audio files) are provided, which you can use for making your game alongside the course.\nSo join in, and let's start making our game!",
      "target_audience": [
        "People with no programming experience",
        "Anyone who wants to make games",
        "Game developers who are new to GameMaker"
      ]
    },
    {
      "title": "Unity Editor Scripting - Beginner to Expert (Updated 2025)",
      "url": "https://www.udemy.com/course/unity-editor-scripting-beginner-to-expert/",
      "bio": "Use C# to customize and extend the Unity Editor to make it easier to use for your projects. Build 10 tools hands-on!",
      "objectives": [
        "Go from little/no Editor Scripting knowledge to advanced by the end of the course",
        "Learn how to build custom tools with Unity Editor Scripting",
        "Create 9 tools you can use in Unity to automate tasks, speed up your workflow, and more",
        "Understand both UI Toolkit and IMGUI and the strengths and weaknesses of both",
        "Create a tool to automate viewing your game across aspect ratios",
        "Build a favorites system that allows you to save objects to favorites to easily instantiate them in other places",
        "Code autosave logic to automatically save any changes you make at regular intervals",
        "Design an automatic file organizer that allows you to sort files of different types into their corresponding folders at the click of a button",
        "Learn techniques that you can apply to the game projects you work on in the future",
        "Become a better, more professionally qualified Unity developer",
        "Understand how asset store tools are created",
        "Get knowledge of industry-standard techniques",
        "Speed up your development process",
        "Take full advantage of the power of Unity"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "What is Editor Scripting?",
          "What will we build in this course?"
        ],
        "Unity Editor Scripting Strategies": [
          "Section Introduction",
          "Immediate Mode GUI (IMGUI) vs. UI Toolkit",
          "Immediate Mode GUI (IMGUI)",
          "UI Toolkit - UI Builder",
          "UI Toolkit - UXML",
          "UI Toolkit - C#",
          "Section Summary"
        ],
        "Custom Hierarchy Tools": [
          "Section Introduction",
          "What will this tool do?",
          "Creating the Editor Script",
          "Editor Script Lifecycle",
          "Adding the active toggle",
          "Adding the info icon",
          "Adding the zoom-in button",
          "Adding the create prefab button",
          "Adding the delete button",
          "Using the final tool",
          "Section Summary"
        ],
        "Batch Rename Tool": [
          "Section Introduction",
          "What will this tool do?",
          "Creating a custom Editor Window",
          "EditorGUILayout class",
          "Adding the Label Fields",
          "Adding the Text Fields",
          "Adding a Foldout",
          "Coding the rename logic",
          "Using the final tool",
          "Section Summary"
        ],
        "Missing References Detector": [
          "Section Introduction",
          "What will this tool do?",
          "Creating the Editor Window",
          "SerializedObjects and SerializedProperties",
          "Rich Text",
          "Coding the logic to detect missing references",
          "Using the final tool",
          "Section Summary"
        ],
        "Auto-linking GameObjects to Inspector Fields": [
          "Section Introduction",
          "What will this tool do?",
          "InitializeOnLoad and InitializeOnLoadMethod",
          "Iterating over each gameObject in the hierarchy",
          "Iterating over each component in the inspector",
          "Coding the auto-linking logic",
          "Using the final tool",
          "Section Summary"
        ],
        "Automatic File Organizer": [
          "Section Introduction",
          "What will this tool do?",
          "Creating the Editor Window",
          "Adding a Toolbar",
          "EditorGUILayout Popup",
          "EditorGUILayout ObjectField",
          "Creating an Asset Type Row",
          "Building an Organizer Row",
          "Add and Remove Row Logic",
          "Coding the organization logic",
          "Using the final tool",
          "Section Summary"
        ],
        "Autosave Logic": [
          "Section Introduction",
          "What will this tool do?",
          "EditorPrefs class",
          "Creating a Toggleable Menu Option",
          "Creating the Editor Window",
          "Laying out the GUI",
          "EditorSceneManager class",
          "Coding the Autosave Logic",
          "Using the final tool",
          "Section Summary"
        ],
        "Favorites System": [
          "Section Introduction",
          "What will this tool do?",
          "Adding a favorite button to the hierarchy",
          "Save logic for favorited game objects",
          "Displaying a favorites menu",
          "Coding the logic",
          "Using the final tool",
          "Section Summary"
        ],
        "Creating a Custom Tool Menu": [
          "Section Introduction",
          "What will this menu do?",
          "Adding the Batch Rename Tool",
          "Adding the Missing References Detector Tool",
          "Adding the Automatic File Organizer Tool",
          "Adding the Favorites Menu Options",
          "Using the final menu",
          "Section Summary"
        ]
      },
      "requirements": [
        "A computer running Windows, Mac or Linux",
        "Have Unity installed on your computer",
        "Basic knowledge of Unity and C#"
      ],
      "description": "If you are looking to learn Unity Editor Scripting to customize the Unity editor, then this course is for you! This course will take you from beginner to expert in Unity Editor Scripting. Throughout the course we will build 10 custom editor tools hands-on that you can use in your game projects, and apply the techniques to create your own custom tools.\n\n\nGet ready to learn:\nWhat editor scripting is and how it can dramatically increase your productivity\nThe different strategies for creating editor scripts using IMGUI and UI Tookit\nGet practice using UI Builder, UXML, and C# to create custom tools\nThe key classes, functions, and other coding constructs to be aware of when creating editor scripts\nGet excited to build:\n10 hands-on custom tools for Unity that you can use in your game projects:\nCustom hierarchy buttons to automate common tasks\nA batch rename tool that allows you to rename groups of game objects at once\nA missing references detector to save time hunting down null reference exceptions\nCode to automatically link game objects to their fields in the inspector so you don't have to manually drag and drop them\nAutosave logic that will continuously save the changes you make\nA favorites system to make reusing common objects easier\nAn art asset optimizer to compress images without jeopardizing quality\nA tool to automate checking your UI across different aspect ratios at once\nA custom GameObject debugger to help you quickly find and fix issues with objects in the scene\nGet empowered to create:\nYou own editor scripts, custom inspectors, and editor tools\nAssets for the Unity Asset Store\n\n\nBy using the techniques taught in this course, you will speed up your development time and customize your Unity workflow.\n\n\nWhat if you have questions?\nAny questions you have can be posted to the Q&A forum or messaged to me on Udemy. I check my Udemy account every day to see if students have questions, and do my best to be as responsive and helpful as possible.\nIf you get stuck at any point during this course, send me a message and I will get you unstuck!\n\n\nThere is no risk in taking this course!\nThis course comes with a full 30 day money-back guarantee. You either end up with Unity Editor Scripting skills, go on to build custom tools and potentially make Asset Store assets, or you try the course and simply get all your money back if you don’t like it…\n\n\nYou literally can’t lose.\nAre you ready to master editor scripting and maximize your potential as a Unity developer? Then enroll now using the “Add to Cart'' button on the right!",
      "target_audience": [
        "Any Unity developer",
        "Hobbyists using Unity to create a game",
        "Students using Unity to build course projects",
        "Indie Developers building a game in Unity",
        "Professional Unity developers",
        "Anyone who wants to take their Unity C# skills up a level",
        "Developers who are interested in making tools for the Unity Asset Store but don't know where to start"
      ]
    },
    {
      "title": "Create Games With C# & WinForms (step by step for beginners)",
      "url": "https://www.udemy.com/course/csharp-game-programming/",
      "bio": "Project-based Learning: Create simple games using C# with WinForms (Windows Forms) without frameworks or libraries",
      "objectives": [
        "You will gain a good grasp of 2D coordinate system",
        "You will be able to manipulate and work with 2D arrays",
        "You will understand how 2D arrays relate to 2D world",
        "You will be able to create a basic path finding algorithm using loops and recursion",
        "You wil understand how to draw objects",
        "You will be able to create a game loop based on Timer tick",
        "You will be able to simulate a simple animation",
        "Tou will be ready to tacke more complex games"
      ],
      "course_content": {
        "Introduction": [
          "Intro To Course"
        ],
        "Hungry Snake Game": [
          "Hungry Snake Game in Action (Introduction)",
          "Coordinate System",
          "Setting Up The Form",
          "Setting Up Variables",
          "Initializing Variables",
          "Painting The Walls",
          "Painting The Snake",
          "Painting The Bonuses",
          "Setting Up Snake Directions",
          "Snake Movement - Theory",
          "Snake Movement - Removing Last Body Piece",
          "Snake Movement - Getting Updated Coordinates For The Snake",
          "Snake Movement - Change Direction Of The Head",
          "Snake Movement - Check Collision With The Walls",
          "Snake Movement - Check Collision With Snake's Body",
          "Snake Movement - Check Collision With Bonus Field",
          "Snake Movement - Draw Snake's Head In Updated Coordinates",
          "Running And Testing"
        ],
        "Bubble Breaker Game": [
          "Bubble Breaker Game in Action (Introduction)",
          "Setting Up the Game Board",
          "Setting Up All Variables",
          "Initializing Variables And Game Board",
          "Populating Game Board With Bubbles",
          "Getting Colors For Each Bubble",
          "Painting Bubbles",
          "2D Coordinate System vs 2D Arrays",
          "Adjusting Bubble Settings",
          "Understanding Game Requirements",
          "MouseDown Event",
          "Main Game Method",
          "Removing Bubbles From The Form",
          "De-Selecting Bubbles",
          "Checking For Game Over Conditions",
          "Displaying Label with the Score",
          "Path Finding - Selecting Bubbles of the Same Color - Theory",
          "Path Finding - Loop Solution - Setting Up Variables",
          "Path Finding - Loop Solution - Selecting Bubbles Above",
          "Path Finding - Loop Solution - Selecting Bubbles Below",
          "Path Finding - Loop Solution - Selecting Left Bubbles",
          "Path Finding - Loop Solution - Selecting Right Bubbles",
          "Path Finding - Loop Solution - Retracing Previous Steps",
          "Path Finding - Recursive Solution",
          "Moving Bubbles Down - Theory",
          "Moving Bubbles Down - Code",
          "Moving Bubbles Down - Replacing Removed Bubbles With Background",
          "Moving Bubbles Down - Move Bubbles Right",
          "Generate More Bubbles",
          "Painting Outline Around Selection - Theory",
          "Painting Outline Around Selection - Left Outline",
          "Painting Outline Around Selection - Right Outline",
          "Painting Outline Around Selection - Top Outline",
          "Painting Outline Around Selection - Bottom Outline",
          "Running and Testing the Game Algorithm",
          "Keeping Scores - Creating Score Class",
          "Keeping Scores - Reading Scores From Text File",
          "Keeping Scores - Get Top 3 Scores",
          "Keeping Scores - Get Player's Position Among All Scores",
          "Keeping Scores - Final Message To Display After Each Game",
          "Keeping Scores - Writing Score Into Text File",
          "Keeping Scores - Game Over Messages",
          "Keeping Scores - Finalizing The Game Board",
          "Keeping Scores - Entering Player's Name",
          "Final Tests"
        ],
        "Pong Game": [
          "Pong Game in Action (Introduction)",
          "Creating the Form",
          "Creating Variables",
          "Initializing Variables",
          "Positioning Elements on the Form",
          "KeyPress Events",
          "Theory - Moving the Ball",
          "Theory - Moving the Paddle",
          "Theory - Ball and Paddle Collision",
          "Theory - Scoring Points",
          "Timer Tick Event - Computer Paddle Movement",
          "Timer Tick Event - Scoring Points",
          "Timer Tick Event - Bouncing Ball Vertically",
          "Timer Tick Event - Bouncing Ball Off the Paddles",
          "Timer Tick Event - Moving Player Paddle",
          "Timer Tick Event - Game Over",
          "Testing and Debugging Our Pong Game",
          "Game Modification - Ball Class",
          "Game Modification - Creating Ball Objects",
          "Game Modification - Moving Each Ball On the Form",
          "Game Modification - Collision With Paddle & Creating New Instance of Ball Object",
          "Game Modification - Final Testing and Debugging"
        ],
        "Arkanoid Brick Breaker Game": [
          "Brick Breaker in Action (Introduction)",
          "Creating The Form Objects",
          "Score Class",
          "Brick Class - Properties and Constructor",
          "Brick Class - Getting All Bricks On The Form",
          "Brick Class - Checking For Overlaping Bricks",
          "Brick Class - Randomly Positioning Bricks On The Form",
          "Brick Class - Generating Colors For Bricks",
          "Brick Class - Instantiating Brick Objects",
          "Theory - Creating The Paddle",
          "Theory - Moving The Paddle",
          "Theory - Bouncing The Ball Off the Paddle",
          "Theory - Moving The Ball",
          "Paddle Class - Creating The Paddle Class",
          "Paddle Class - Setting Paddle Properties and Position",
          "Paddle Class - Moving The Paddle",
          "Paddle Class - Detecting Position Of The Paddle",
          "Paddle Class - Instantiating Paddle Object",
          "Ball Class - Creating The Ball Class",
          "Ball Class - Initializing Variables and Properties",
          "Ball Class - Detecting Game Over Condition",
          "Ball Class - Hitting The Bricks With The Ball",
          "Ball Class - Bouncing Ball Off the Paddle",
          "Ball Class - Correcting Logical Bug For Bouncing The Ball",
          "Ball Class - Bouncing The Ball Off The Form Edges",
          "Ball Class - Moving The Ball On The Form",
          "Tick Event",
          "Testing and Debugging Our Brick Breaker Game"
        ],
        "Conclusion": [
          "Where to go from here",
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "Visual Studio",
        "Basic familiarity with Windows Forms",
        "Basic C# Skills (loops, conditional statements, Enums, basics of OOP etc.)",
        "Basic understanding of 2d coordinate system",
        "Patience to take the time to learn the simple game programming before trying to create the next Call Of Duty",
        "This is NOT a Unity course"
      ],
      "description": "Do you know basic C# concepts, and know your way around loops, conditional statements, arrays, and very basics of object oriented programming, but never really had a chance to incorporate any of it into a game project?. If that describes you, then this is a course for you.\nFull disclosure: we won't be creating any earth shattering games. What we ARE going to be doing is LEARNING how to use with C# in game projects, and how to THINK like a game programmer. All games will use Winforms (Windows Forms) as the game board.\nThe goal of this course is three fold\nFirst, is to show you how things work\nSecond, help you understand how things work under the hood.\nAnd third, to drill the basics so that they become a second nature to you.\nThis course concentrates solely on creating game logic and algorithms in C#.\nWe will use Windows Forms as the game board and we'll use events to code the application logic to. This way, we won't get distracted with million other little things that come into play when you try to learn the game programming and a framework such as Unity at the same time. Like I said, the goal here is to LEARN the basics, and to RETAIN the knowledge. What good is it for a beginner to game programming to watch someone build a complex game when three quarter of the stuff presented goes right over your head? Not in this course.\nIf you go through this course, and if you code along, I am absolutely sure that at the end, you will have great foundation to build on, and you will be able to move to more sofisticated applications and coding styles.\nThe course consists of four games, and more will be added later if there's enough interest.\nThe first is a Hungry Snake game.\nIt's a great game to use to learn basics of drawing on the board, dynamic animated movement, collision, score keeping, dynamic changes to the game, key press events and more. You'll be surprised how little code is needed, yet at the same time, how much of all the mentioned concepts you will understand at the end of this section.\nSecond is a Bubble Breaker game.\nWe'll get into details of defining a path for a selection triggered by a player's mouse click. I will show you both loop and recursive solution. We'll learn how to draw bubbles and paint them using gradient colors. You'll understand how 2D arrays relate to 2D x and y coordinates. We'll go into details of Graphics class of C#. We will make the game dynamic and allow for variety of bubble sizes and number of bubbles on the form. We will learn more about mouse events and how to branch the game logic based on user clicks. We will enhance the game with keeping the historical scores in a text file and allowing player to enter his/her score into the file. And in the process, you will not only learn game programming, but become a master of arrays, loops, and Enums.\nThird is Pong game. (added June 2018)\nA simple game that everyone is familiar with. But, we will go deeper, and I will show - and explain - how to move objects on the form, how to change direction of the movement upon detecting a collision, how to manipulate the speed of an object, how to generate new objects and keep track of their position in real time and much more!\nThird is Brick Breaker (Arkanoid clone) game. (added August 2018)\nA classic game with a little twist. Our version of the game features randomly placed bricks of random colors and sizes. We will also bounce the ball off the paddle based on what part of the paddle intersects with the ball - left part will bounce the ball to the left, right part to the right, and middle part straight up. Our scoring system will be based on brick colors and as the game progresses, the speed of the ball and paddle increases. And everything will be coded using OOP principles.\nThis whole course is designed as follow along course. Meaning, you are encouraged to code along with me. Everything is on the video, there are no code snippets being magically pasted into the Visual Studio. Also, I don't want you to just learn the concepts and then forget them a week later. I want you to remember and retain what you learn in this course.\nAnd let's face it - that is possible only when you code along.\nAnd one more thing that makes or breaks learning to program - using what you learn, and using it frequently. Therefore, I code even the repetitive things from scratch and I don't simply just refer you to previous lessons. But that means, that some parts may feel slow and repetitive. However, if you actually code along, I guarantee you will learn, and also REMEMBER what you learned.\nBut, If you prefer more instructional videos, that show everything once and move faster, then this course is NOT for you. Please keep that in mind before purchasing the course. I encourage you to watch some of the sample videos so you get a feel for the course structure, topic difficulty, and my teaching style.\nNow, I made the videos short and to the point. Most videos are only around 5 minutes long. That is deliberate, so each video is a small learning step that is easy to follow.\nAlright, there's a lot of coding to be done. So let's code some games!",
      "target_audience": [
        "C# enthusiasts who want to make the jump into game programming",
        "Self Taught programmers or students",
        "Students who like hands on approach to learning",
        "Students who like detailed explanation of every line of code"
      ]
    },
    {
      "title": "Unreal Engine 5 Python Automation",
      "url": "https://www.udemy.com/course/unreal-engine-5-python-automation/",
      "bio": "Speed up and automate your Unreal Engine 5 workflow with Python tools.",
      "objectives": [
        "Learn how to automate repetetive manual tasks with Python",
        "Create tools for Unreal Engine",
        "Power up your pipeline with tools that validate and correct assets and actors on the level.",
        "Write commandlets for asset batch processing",
        "Setup startup scripts that execute on each Unreal editor launch.",
        "Extend UE interface with custom menus and menu entries",
        "Combine Scripted Asset Action Blueprints with Python scripts"
      ],
      "course_content": {
        "Overview": [
          "What Can You Automate In Unreal Engine?"
        ],
        "Setup - Prerequisites": [
          "Initial Unreal Engine Setup",
          "Setting Autocompletion in VS Code (Stub file)",
          "Setting Autocompletion in PyCharm (Stub file)",
          "Typing in Python"
        ],
        "Running Scripts": [
          "Make your scripts discoverable by Unreal",
          "Running Scripts From Editor",
          "Running Scripts With Commandline",
          "Startup Scripts and init_unreal.py"
        ],
        "Automation Scripting": [
          "Getting User Selection And Listing Assets",
          "Texture Compression Settings Validator - Accessing Editor Properties",
          "Importance of PropertyAccessChangeNotifyMode in setting editor properties",
          "Editing Material Instance Parameters - Material Editing Library",
          "Find Duplicated Actors On The Level",
          "ImportRules Plugin - Run Custom Post Import Action",
          "Post Import Actions Using ImportSubsystem",
          "Remove Unused Assets",
          "Batch Import FBX Meshes (Asset Import Task)",
          "Batch Import Textures (Automated Asset Import)"
        ],
        "Asset Validation": [
          "Why you need asset validation - Intro to asset validation in Unreal Engine",
          "Naming convention validator",
          "Square texture validator",
          "Power of two texture size validator",
          "Triangle count validator"
        ],
        "Developing Code More Efficiently": [
          "Working with dir() and help()",
          "Remote debugging with VS Code and debugpy",
          "Remote debugging with PyCharm and pydevd"
        ],
        "Creating Better Python Tools": [
          "Adding custom menu actions",
          "Menu Entry Icon",
          "Followup to Menu Entries",
          "Menu Entries - Additional Notes",
          "Progress bars for slow tasks",
          "Undo and Redo operations",
          "Introduction to automation testing in Unreal Engine",
          "Writing your first Python test for Unreal",
          "Appendix: New to automated tests?",
          "Supressing warnings in Python tests."
        ],
        "Releasing Tools": [
          "Packing Python Tool As Unreal Plugin"
        ],
        "Python And Blueprints": [
          "Python Scripts in Asset Scripted Action Blueprints"
        ],
        "Remote Control API": [
          "Remote Control In Unreal - Overview and Quick Setup",
          "Remote Control Preset and WebApp",
          "Remote Control Preset Controllers",
          "Python and Remote Control API + Testing API with Insomnia",
          "Remote Control Python Progress Bar",
          "Direct FBX Mesh Export From Blender To Unreal [Real Life Tool Demo]",
          "Making sure Remote Control calls work in Unreal 5.5+ with correct Object Path"
        ]
      },
      "requirements": [
        "Basic understanding of core Unreal Engine features",
        "Experience working with assets in Unreal",
        "Python programming",
        "Understanding of Object Oriented Programming principles"
      ],
      "description": "Learn how to automate your Unreal Engine 5 workflow and increase your productivity.\nLed by a senior developer with experience in the AAA industry known also as Tech Art Corner, this course will teach you everything you need to know to automate Unreal Engine with Python. You'll learn how to create powerful tools that will perform tedious tasks in the blink of an eye, freeing up your time to focus on more important things.\nBy automating repetitive tasks, you'll not only save time, but also reduce the risk of human error and increase the overall quality of your work.\nThroughout the course, you'll be guided through the setup process, learn basic concepts of automation, and create scripts that operate on both Assets in Content Browser and on Actors on the level.\nYou will also explore different ways of delivering those scripts to the end user, ensuring that your tools are easy to use and accessible.\nBy the end of the course, you'll have a foundation in Python scripting and automation techniques.\nWhether you're a seasoned Unreal Engine developer or just starting out, this course is an essential tool for anyone looking to streamline their workflow and achieve more in less time.\nSign up today and take your Unreal Engine development to the next level!",
      "target_audience": [
        "Unreal Engine users who want to optimize their workflow and pipeline",
        "Technical Artists / Game Developers / Pipeline Engineers who want to speed up their workflow",
        "A technical artist who wants to start with automating UE with Python, has some ideas but you hasn't done it before"
      ]
    },
    {
      "title": "Learn Go in 3 Hours",
      "url": "https://www.udemy.com/course/learn-go-in-3-hours/",
      "bio": "Build efficient applications rapidly with Go",
      "objectives": [
        "Build a completely functional web server in under 20 lines of code!",
        "Explore the basics of the Go programming language for cloud computing and microservices",
        "Work with Go's unique approach to interfaces and how this makes your programs more modular and testable",
        "Explore Go's concurrency model, which provides a simple and powerful way to model your programs for easy scalability",
        "Create your own library that can be shared with the world"
      ],
      "course_content": {
        "Why Go?": [
          "The Course Overview",
          "What Is Go and Where Does It Come From?",
          "Installing Your Go Environment",
          "Validating Your Environment and Go Playground"
        ],
        "Your First Go Program": [
          "Building a Web Server in Go",
          "Declaring Variables",
          "Numeric Types",
          "Strings, Runes, and Arrays"
        ],
        "Control Structures, Functions, and Pointers": [
          "If/Else and For Statements",
          "Switch Statements",
          "Introduction to Functions",
          "Advanced Functions",
          "Pointers"
        ],
        "Packages and Imports, Slices, Maps, and Structs": [
          "Package and Imports",
          "Creating and Using Your Own Packages",
          "Working with Third-party Packages",
          "Slices and Maps",
          "Structs"
        ],
        "Methods, Interfaces, and Errors": [
          "Methods",
          "Interfaces",
          "Errors"
        ],
        "Go Concurrency: Goroutines, Channels, and Select": [
          "CSP and Goroutines",
          "Channels",
          "Select"
        ]
      },
      "requirements": [
        "This course is for developers who want to extend their capabilities and build awesome and efficient applications with Go"
      ],
      "description": "Go is a compiled, statically typed language in the tradition of Algol and C, with garbage collection, limited structural typing, memory safety features, and CSP-style concurrent programming features added.\nMore and more developers are interested in learning Go. It was the language of the year on TIOBE in 2016 and is at the top of the list of languages that developers want to learn next.\nThis course will teach you how to program in Go, building on your existing knowledge of programming languages. It starts by introducing familiar features before moving on to the more unique features that have earned Go its reputation as the language of the cloud. You will learn how to build a completely functional application server in under two dozen lines of code. Then, you'll master structuring and organizing your code, implementing the procedural control structures of every C-inspired language, and breaking your code into separate functions.\nTowards the end of the course, you'll learn how to create your own packages and import them. You'll also explore Go's approach to error handling, Object-Oriented Programming, and concurrency. By the end of the course, you'll be ready to start writing your own Go projects.\nThis course uses Go 1.9, while not the latest version available, it provides relevant and informative content for legacy users of Go.\nAbout the Author :\nJon Bodner has spent the past 20 years working in just about every corner of the software industry including on-line commerce, education, finance, government, healthcare, and internet infrastructure. He is a software engineer, lead developer, and architect and enjoys presenting and discussing open source technology trends, and the future of software engineering. Jon is currently a Lead Software Engineer at Capital One where, along with a co-worker, he recently open sourced checks-out, a fork of the LGTM project\nOver the past two years, Jon has given several public talks on Go. At DevFest DC, he gave introductory and advanced talks on Go concurrency. At GopherCon, he introduced Proteus, a declarative, type-safe, runtime-generated DAO layer for Go and, at GothamGo, he spoke on closures and generics in Go.\nJon has also written a number of posts on Go for Capital One's DevExchange blog.\nIn addition to talking and writing about Go, Jon has also spoken at PyData DC on improving Data Science accuracy via software engineering, took part in a panel on open source in the enterprise at Atlanta Vision Talks, and spoke about Capital One's open source process at the Open Source Leadership Summit and OSCON.",
      "target_audience": [
        "This course is for developers who want to extend their capabilities and build awesome and efficient applications with Go. Programming knowledge is required but no knowledge of Go is needed."
      ]
    },
    {
      "title": "Master GameMaker Studio 2 By Making 5 Games From Scratch",
      "url": "https://www.udemy.com/course/gamemaker-studio-2/",
      "bio": "Make Games With Free Version Of Game Maker Studio 2. Learn To Code And Make Games In One Place.",
      "objectives": [
        "How to navigate Game Maker Studio 2",
        "How to code in GML",
        "How to Drag and Drop",
        "Make games on your own"
      ],
      "course_content": {
        "Introduction": [
          "Preview Of The Course",
          "Downloading Game Maker Studio 2 and Looking At Its Interface"
        ],
        "Learning GML": [
          "Sprite Editor",
          "Sprite Animations",
          "Importing From Sprite Sheet",
          "Objects",
          "Object events",
          "Rooms",
          "Before we code",
          "Drag and Drop",
          "Varibales",
          "If-else",
          "Switch",
          "Built-in Functions",
          "Scripts",
          "Loops",
          "Arrays"
        ],
        "Knife vs Fruits GML": [
          "Preview Of The Knife vs Fruits",
          "Adding Sprites and Adding obj_knife",
          "Knife Shoot",
          "Path And Fruit",
          "obj_gameController",
          "Drawing Score and Lives"
        ],
        "Race GML": [
          "Preview Of The Race",
          "Players Movement",
          "Spawning Cars",
          "Infinitive BG",
          "Score Meter and Speed Modifier",
          "Game Over"
        ],
        "Space Shooter GML": [
          "Preview Of The Space Shooter",
          "Importing Sprites And Adding Player Movement",
          "Player Shoot",
          "Obj Meteor",
          "Spawning Meteors",
          "Obj Enemy And Enemy Laser",
          "Explosion",
          "Infinitive Bg",
          "Player Flash",
          "Score, Highscore And Draw",
          "Adding Sound And Speed Modifier"
        ],
        "Knife vs Fruits DnD": [
          "Preview Of The Race",
          "Importing Sprites and Adding Knife",
          "obj_knifeShoot",
          "obj_fruit and Path",
          "obj_gameController",
          "Game Over And Draw"
        ],
        "Race DnD": [
          "Preview Of The Race",
          "Improting Assets And Player Movement",
          "obj_car",
          "Car Movement",
          "Obj Control",
          "Scoremeter And Speedmodifier",
          "Infinitve Background",
          "Game Over"
        ],
        "Space Shooter DnD": [
          "Preview Of Space Shooter",
          "Importing Assets And Player Movement",
          "Player Shoot",
          "Obj Meteor",
          "Obj Game Controller",
          "Obj Enemy",
          "Explosion Animation",
          "Mask Collsion",
          "Infinitive Background",
          "Player Flash",
          "Score, Highscore And Draw",
          "Soundfx And Speed Modifier"
        ],
        "Top Down Shooter": [
          "Preview Of The Top Down Shooter",
          "Player Movement",
          "8 Direction",
          "Adding The Gun",
          "Shooting",
          "More Guns More Bullets",
          "Enemies",
          "MuzzleFlash SmokeEffect",
          "Rocket Explosion",
          "More Explosion",
          "Adding Base",
          "Monster Spawn",
          "Camera Follow and Bounds",
          "Monster Explosion and Screen Shake",
          "Monster And Healthbars",
          "Coins and Coin Pick-Up",
          "Enemy Knockback",
          "ShopMenu"
        ],
        "2D Platformer": [
          "Preview Of The 2D Platformer",
          "Players Movement",
          "Players Animation",
          "Player Roll",
          "Attack",
          "Combo Attack",
          "Arrow Shoot",
          "Enemy Patrol",
          "Enemy Chase",
          "Enemy Attack",
          "Enemy Cooldown",
          "Collision Detection",
          "obj_damage",
          "Enemy Dead and Hurt State",
          "Level1",
          "Camera Follow",
          "Dragon",
          "Air Attack",
          "ScreenShake",
          "Player HealthBar and Flash",
          "SoundFx and Songs",
          "Title Menu"
        ]
      },
      "requirements": [
        "GameMaker Studio 2"
      ],
      "description": "Learn and Master GameMaker Studio 2 the best game engine for making 2D games used by many successful games and indie-games as well such as: Hyper Light Drifter, Forager, Undertale, Hotline Miami, Nuclear Throne and much more that you can check on their site.\nThis is the course I wanted when I was starting to learn Game Development.\n\n\nWe will begin with learning how to navigate throughout GameMaker Studio 2 and the basics of Game Maker Language or Drag And Drop, once we cover that we will proceed on making some simple games that will eventually expand to something bigger and get to the point where you will make games on your own.\n\n\n*IMPORTANT NOTE* If you want to make 2D Platformer or Top-Down Shooter you will need to learn Game Maker Language, It won't be covered In Drag And Drop style.\n\n\nI structured this course to be easily understandable to everyone, no matter if you are just a complete beginner or someone who is familiar with Game Maker Studio 2, this course will help you gain a better understanding of development.\nSome of the things you will learn in the course:\nGameMaker Studio 2 Interface\nImporting Assets\nOrganizing The Project\nHow To Code\nDrag and Drop\nHow To Use Paths\nBasic And Advanced AI\nShop System\nMelee Battle Systems\nMelee Combo\nSound FX And Music\nHow To Animate\nEnemy Spawning System\n\n\nThat And Much More Is Awaiting You In This Course\nOn top of everything there is 0 chance for RISK, How??\nWell, If You are not satisfied with course there is always an option for a refund within 30 days of enrolling and Its full refund of your money.\nSo what are you waiting for? Enroll now and start making awesome games.",
      "target_audience": [
        "Anyone looking to learn or improve at Game Maker Studio 2",
        "Anyone Who Wants To Learn Game Development"
      ]
    },
    {
      "title": "Hands-on Scratch Programming and Game Development",
      "url": "https://www.udemy.com/course/hands-on-scratch-programming-and-game-development/",
      "bio": "Imagine, Create and Share scratch programming and 2D games (Comprehensive Guide for newbies)",
      "objectives": [
        "Fundamental programming concepts",
        "Real time 2D game development",
        "Animation editing",
        "Story Making and Publishing"
      ],
      "course_content": {
        "Getting start with Scratch 3.0": [
          "How to make free account on Scratch 3.0?",
          "Complete Guided tour of Scratch 3.0 Software.",
          "How to save and load different projects from computer?"
        ],
        "Getting started with Scratch Programming Blocks": [
          "Understand Coordinate system (XY-Grid)",
          "What is the difference between animation and Games ?",
          "Design animated start page of any game"
        ],
        "Create Maze Finder Game Challenge": [
          "Maze Finder game part 1",
          "Maze Finder Game part 2"
        ],
        "Develop Striker/Pong Game": [
          "Striker Game part 1",
          "Striker Game part 2",
          "Striker Game part 3"
        ],
        "Design and Develop Flappy Bird game": [
          "Flappy Bird Part 1",
          "Flappy Bird Part 2",
          "Flappy Bird Part 3",
          "Flappy Bird Part 4"
        ],
        "Hissing snake (Arcade) Game": [
          "Hissing snake part 1 (Control hissing snake)",
          "Snake part 2 (Enable score variable)",
          "Snake part 3",
          "Snake part 4",
          "Snake part 5",
          "Snake part 6"
        ],
        "Scratch Extension Blocks": [
          "PEN: Draw polygonal shapes with your sprites",
          "Video sensing: Sense Motion with onboard camera"
        ],
        "Congratulations": [
          "Achievement Unlocked"
        ]
      },
      "requirements": [
        "Students should have a computer for practice exercises.",
        "Be able to understand English",
        "Prerequisit knowledge of programming is not required"
      ],
      "description": "Programming has never been fun to experience. I am sure you will enjoy as much as I was enthralled while recording lectures for hours on end of this course.  There are endless attributes of this course following are some of the perks and learning outcomes of this amazing crash course.\nThis course is scientifically designed for students with little to no knowledge about programming and who are struggling to understand coding concepts in their schools/high schools.\nStudents will be able to understand and apply coding concepts in no time.\nIt contains complete hands on guide from account creation to game development\nConcepts of coding blocks are explicitly described in each section.\nEach section contains game oriented lectures of programming concepts\nAlmost all the coding blocks are covered in  scratch 3.0 programming course.\nStudents will be able to practically apply the concepts of controls, sensing, functions, variables, mathematical operators etc. in scratch platform.\nStudents will be able to grab the concepts of script programming i.e. python, C,C++ etc. after taking this course.\nThis course is useful for both students and professional instructor because all lectures contain step by step optimized guide to understand functionality of coding blocks rather than just dragging onto the screen.",
      "target_audience": [
        "This course is for absolute begineers with zero programming knowledge",
        "Game developers",
        "Professional Trainers/Instructors with zero coding experiance",
        "Hobbiyst and computer science enthusiasts"
      ]
    },
    {
      "title": "Create Survival 2D Game In Unity",
      "url": "https://www.udemy.com/course/create-2d-top-down-shooter-game-in-unity-c/",
      "bio": "Create Survival 2D Game In Unity",
      "objectives": [
        "Build 2D Game",
        "Making NPC To Follow or Fight Beside Player",
        "progarmming with C#",
        "Making Inventory"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "New Project",
          "Asset Preparation"
        ],
        "Player": [
          "Adding Rigidbody2D component to player",
          "Player Movement",
          "Player Rotation",
          "Player Animation"
        ],
        "Weapon": [
          "Making bullet and weapon",
          "Destroying Bullets"
        ],
        "Enemy Health": [
          "Enemy Health Script",
          "Enemy Health Bar"
        ],
        "Enemy AI System": [
          "Enemy Animations",
          "Enemy Idle AI State",
          "Enemy Walk & Chase State",
          "Player Health & Take Damage",
          "Player Death",
          "Enemy Death"
        ],
        "Weapons": [
          "More Weapons",
          "Switch Weapon function",
          "Weapon Icon & Ammo Text"
        ],
        "Shop System": [
          "Shop Menu UI",
          "Shop Menu Script",
          "Money currency in game",
          "Shop Button Script"
        ],
        "Switch Weapon Animations": [
          "Player Switch Weapon Animation",
          "Shooting Effect",
          "Enemy Death Collider Fixed",
          "Tile Pallet",
          "Bullet push enemy fixed"
        ],
        "Camera Controller": [
          "Camera Follow Player"
        ],
        "Destroying Objects": [
          "Shooting at car and animation",
          "Explosion Effect",
          "Explosion Damage"
        ]
      },
      "requirements": [
        "Have a PC or Mac"
      ],
      "description": "Are you looking for  Unity course where you will build a 2d game, from scratch ? In this course we will create a survival top down shooter game with player movement system,NPC to follow or fight beside player, animations, , inventory and  and a Save system\n\n\nIf you have completed few beginner courses on Unity and c# and you feel comfortable using them together I believe that you will benefit greatly from this course.\nWe will use multiple 2d models, animations and tools which i prepare for you\nMy hope is that at the end of the course you will have a bigger picture on how to structure the code for your game and have a survival game template that you can reuse.\nIf you think that you could benefit from this course don't hesitate to purchase it.  Saying that I have really put a lot of effort to make sure that you will benefit from the course and learn some useful techniques from setting up a simple movement system using a character controller and .....\nWhat you will learn at the end of this course\n1)make player  from scratch\n2)Player Movement\n3)Pickup Items\n4)Making Inventory\n5) use Items\n6)Interact with object\n7)Making Enemies\n8)Make Level Selector\n9)Making Main Menue\n10)Saving The Game\n11)NPC Player\n12)NPC Follow\n13)NPC Fight with Enemies\n14)and more",
      "target_audience": [
        "Beginner & Intermediate"
      ]
    },
    {
      "title": "Mastering Environment Design with Unreal Engine 5",
      "url": "https://www.udemy.com/course/mastering-environment-design-with-unreal-engine-5/",
      "bio": "Learn Unreal Engine 5 and environment design fundamentals through hands-on projects — Creating Liberty Island",
      "objectives": [
        "Students will learn the fundamentals of environment design and why it's important in game development and filmmaking.",
        "They will understand how environment design has evolved over time and its growing role in immersive media.",
        "Students will gain a solid foundation in using Unreal Engine 5, from installation to navigating its interface.",
        "Students will learn how to create landscapes and sculpt terrain to form the foundation of their virtual worlds.",
        "They will discover how to apply materials and textures to bring detail and realism to their environments.",
        "Students will understand the role of lighting and how to create different moods using dynamic and static lighting techniques.",
        "They will learn to add foliage, trees, rocks, and natural elements using UE5’s foliage tools.",
        "Students will practice environment creation through six unique and creative projects, including a special cinematic scene.",
        "By the end of the course, they will be able to design and build complete 3D environments using Unreal Engine 5 with confidence."
      ],
      "course_content": {
        "Introduction": [
          "Intro"
        ],
        "Introduction to Environment Design": [
          "Section Goals",
          "Lesson 1 What is Environment Design in Unreal Engine 5",
          "Lesson 2 Types of Environment Design",
          "Lesson 3 The Importance of Realistic and Immersive Environment Design",
          "Lesson 4 How Can We Evolve to an Advanced Level in Environment Designing",
          "Lesson 5 The Future of Environment Designing",
          "Lesson 6 Overview of Tools and Features in UE5 for Environment Creation",
          "Motivation",
          "Question"
        ],
        "UE5 Basics": [
          "Section Goals",
          "Lesson 1 What is Unreal Engine 5",
          "Lesson 2 Installing Unreal Engine 5",
          "Lesson 3 Open and Creating Your First Project",
          "Lesson 4 Overview of the User Interface",
          "Lesson 5 Navigating the Viewport",
          "Lesson 6 Understandin Outliner Panel",
          "Lesson 7 Understanding the Details Panel",
          "Lesson 8 Choosing the Right Level Type",
          "Lesson 9 Importing Assets to UE5",
          "Lesson 10 Importing Assets from Content Drawer to Your level",
          "Challenge Guide",
          "Challenge Part 1",
          "Challenge Part 2",
          "Motivation",
          "Quiz"
        ],
        "Materials and Textures": [
          "Section Goals",
          "Lesson 1 Introduction to Materials in Unreal Engine",
          "Lesson 2 Introduction to Textures in Unreal Engine",
          "Lesson 3 Creating Basic Materials",
          "Lesson 4 Creating Materials for Special Effects (Stone, Ground and white_stone)",
          "Lesson 5 Using Material Instances",
          "Lesson 6 Downloading Materials",
          "Challenge Guide",
          "Challenge",
          "Motivation",
          "Quiz"
        ],
        "Lighting": [
          "Section Goals",
          "Lesson 1 Introduction to Lighting in Unreal Engine",
          "Lesson 2 What is Directional Light",
          "Lesson 3 Point light",
          "Lesson 4 Spot Light",
          "Lesson 5 Rect Light",
          "Lesson 6 Sky Light",
          "Challenge Guide",
          "Challenge Part 1",
          "Challenge Part 2",
          "Challenge Part 3",
          "Motivation",
          "Quiz"
        ],
        "Landscapes": [
          "Section Goals",
          "Lesson 1 Introduction to Landscapes in UE5",
          "Lesson 2 Creating a New Landscape",
          "Lesson 3 Using Landscape Tools",
          "Lesson 4 Splines",
          "Lesson 5 Mix Material for Landscape",
          "Challenge Guide",
          "Landscape Challenge",
          "Motivation"
        ],
        "Foliage": [
          "Section Goals",
          "Lesson 1 Introduction to the Foliage Tool",
          "Lesson 2 Using the Foliage Tool",
          "Challenge Guide",
          "Foliage Challenge",
          "Motivation"
        ],
        "Water": [
          "Section Goals",
          "Lesson 1 Water",
          "Lesson 2 Water Type",
          "Challenge Guide",
          "Water Challenge",
          "Motivation"
        ],
        "Liberty Island Project": [
          "Create Landscape",
          "Add Walk Way",
          "Add Walk Way Par 2",
          "Add Bridge",
          "Bridge Part 2",
          "Add foliage and Material",
          "Add Street Light and Tree",
          "Add Apartments and ship",
          "Final"
        ]
      },
      "requirements": [
        "No prior experience with Unreal Engine is required — this course is beginner-friendly.",
        "A computer capable of running Unreal Engine 5 (Windows or macOS with recommended system specs).",
        "A stable internet connection to download Unreal Engine and course materials."
      ],
      "description": "Unlock the power of Unreal Engine 5 and bring your imagination to life by mastering the art of environment design. This course is designed for beginners and aspiring creators who want to learn how to build stunning virtual worlds for games, film, or digital storytelling.\nYou’ll begin with the core concepts of environment design — what it is, why it matters, how it has evolved, and its role in modern visual media. Then, you'll dive into the basics of Unreal Engine 5, learning how to install the engine, navigate the interface, and understand the key features that make UE5 the industry standard for real-time environment creation.\nOnce you're familiar with the tools, you'll explore environment design techniques inside Unreal Engine 5, including:\nCreating and sculpting landscapes\nWorking with materials and textures\nSetting up realistic lighting\nAdding foliage such as trees, plants, and grass\nImplementing water features like rivers and lakes\nTo help you apply everything you’ve learned, this course includes six engaging projects that allow you to build unique environments from scratch. These include:\nConstructing an old village\nDesigning a city at night\nBuilding a dramatic mountain landscape\nCreating a rich forest environment\nAnd more — including a special project: Liberty Island\nBy the end of the course, you’ll have a solid understanding of environment design and the skills to create your own high-quality scenes in Unreal Engine 5.",
      "target_audience": [
        "Beginners who want to learn environment design from the ground up using Unreal Engine 5.",
        "Aspiring game developers looking to create immersive worlds for their games.",
        "3D artists and designers interested in building detailed environments for films, animation, or virtual production.",
        "Indie developers who want to enhance the visual quality of their projects.",
        "Content creators looking to design cinematic environments for storytelling."
      ]
    },
    {
      "title": "Create a 2D Isometric game in Godot Engine 4.3",
      "url": "https://www.udemy.com/course/create-a-2d-isometric-game-in-godot-engine-43/",
      "bio": "Learn how to make an 2D isometric game and how to use isometric movement and tilemap",
      "objectives": [
        "Understanding how isometric work in 2D",
        "A deep understanding of GDScript, the programming language of Godot",
        "Learn how to create game object, levels, instance, using Vector and tilemap",
        "Getting used to the fundamentals of game development"
      ],
      "course_content": {
        "Player controller and animations": [
          "Download godot and import the assets",
          "Create the player and fixing blurry pixel art",
          "Create the player movement and a simple camera",
          "Create the player idle animation",
          "Creating the movement and attack animations and sword collision shapes",
          "Create the dead animations",
          "Create the animation tree for idle, move and sword animations",
          "Calling our animations through code",
          "Creating a state machine and input map for triggering our attack",
          "Moving while attacking",
          "Creating a crates and destroy it with our sword and using Ysort",
          "Creating a health system with static class",
          "Displaying the life of our player with a system of heart",
          "Creating a spike trap and losing point of life",
          "Losing a quarter of life instead of a full life",
          "Fixing direction sword issue when we are not moving"
        ],
        "Camera, Tilemap, terrain, background, coins": [
          "Creating an isometric tilemap and saving it as a reusable resource",
          "Creating a isometric terrain with autotile",
          "Creating custom tile collision shape for the isometric tilemap",
          "Camera following the player",
          "Setting up limit to the camera",
          "Creating a houses and sorting the YSort",
          "Making the house transparent when the player move behind",
          "Creating rock and trees using Texture Region",
          "Adding coins to collect",
          "Display the number of coins collected in the GUI",
          "Creating water with animated tilemap"
        ],
        "Enemy, shader, key and doors, changing level, checkpoints": [
          "Creating our enemy and its animations",
          "Making our enemy move and patrol randomly through code",
          "Killing the enemy and hurting the player",
          "Creating a shader for showing the damage of the player",
          "Instancing object when our enemy die (coins)",
          "Create a key that opens a door",
          "Create the door collider logic and the animation and create a label",
          "Opening the door with the key and creating a custom input to open the door",
          "Deactivating the area of the door and deleting the key once it has been used",
          "Spawning a key after all enemies have been killed and creating custom signal",
          "Changing levels and spawning the player at checkpoints",
          "Wrapping up: what to do next?"
        ]
      },
      "requirements": [
        "No programming experience needed, although having some knowledge is always good"
      ],
      "description": "In this course, we are going to learn how to create from scratch a 2D isometric game using Godot Engine 4.3.\nThis course will cover quite a lot of topics:\n- Understanding how to translate Cartesian coordinate into isometric\n- Creating animation that can be display in 4 direction using the AnimationTree\n- Using the built-in Godot Tilemap system for isometric game\n- Learning how to set up collision shape in isometric tilemap\n- Learning how to set up autotile for an isometric terrain\n- Understanding how the new TilemapLayer system of Godot works\n- How to set up layer properly in isometric using YSort\n- How to add object to our game (trees, rocks, houses, coin) that we can interact with\n- How to create an enemy that can patrol through code\n- Create a system of key and door\n- Changing levels\n- Creating checkpoints\n- Learning how to create shader in Godot\n- Creating animated tilemap with the new TilemapLayer in isometric\n...and way much more, for that just check the curriculum of this course to see what we are going to learn.\nI have tailored this course so it is easy to use, most of the video are under 10 minutes to help you learn as much as you can the concept I am teaching you without overloading you with long and heavy videos like it can be the case in many other courses.\nI am providing the asset so you can use everything in this course without other cost, you just have to buy the course, download the asset and start programming for creating your future game.\nThis course is made for beginner in game development that want to learn how to create 2D isometric game using that fantastic open source game engine that is Godot Engine 4.3 as well as more seasoned developer that want to use their skills by learning an exigent and famously known difficult genre of video game like isometric.\nI’ve been enjoying making this new course as I am fascinated by isometric game, and I hope that this course will be the right entry gate for you if you want to go deeper into that segment of programming that is rarely taught in a way that is complete and accessible for beginner programmer.\nSo thank you for reading this and considering buying this course, and I’ll see you in the first lecture!",
      "target_audience": [
        "Beginner in Godot looking to learn how to make game development as well as more seasoned developer looking to learn how isometric game are working in 2D."
      ]
    },
    {
      "title": "Unreal Engine 5 : Fix animations for ladder climbing",
      "url": "https://www.udemy.com/course/unreal-engine-5-control-rig-procedural-mesh-level-sequence-ladder/",
      "bio": "Use procedural mesh coding with Control rig to have perfect animation for climbing ladder and enhance animation in other",
      "objectives": [
        "Procedural Mesh coding",
        "Ladder climbing Logic",
        "Control rig",
        "Linked animations",
        "Level sequence",
        "Modify animation",
        "Create animation",
        "Better way to debug animation"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "02.Import Files ( Absouloute Beginner )": [
          "02.Import Animations",
          "03.Import metal ladder",
          "04.Import Wood ladder"
        ],
        "03.Create Procedural Ladder Blueprint ( Intermediate )": [
          "05.Create Blueprint",
          "06.Create static mesh with code",
          "07.Create side rungs proceduraly",
          "08.Calculate how many rungs we should create",
          "09.Create rungs",
          "10.Have more control on side rungs",
          "11.Side rungs overshoot",
          "12.Create top ladder",
          "13.Create wall connection"
        ],
        "04.Make our project Modular ( Pro )": [
          "14.Create data table and struct",
          "15.Use Data tables",
          "16.Get height of side rung with node"
        ],
        "05.Level Design Helper ( Pro )": [
          "17.line trace in construction script",
          "18.use text renderer",
          "19.Material for wrong placement",
          "20.Use function for wronge placement"
        ],
        "06.Collision checks ( Intermediate )": [
          "21.Player climb check collision",
          "22.Start climbing and stop climbing collision box",
          "23.begin overlap and end overlap check"
        ],
        "07.Climb Ladder component ( Pro )": [
          "24.Create climbing system component",
          "25.Set is on Ground function",
          "26.Pass all stauses to component"
        ],
        "08.Debugs ( Intermediate )": [
          "27.Use format text",
          "28.Debug print boolean",
          "29.Global Time dialation"
        ],
        "09.Ladder climbing Logic ( Pro )": [
          "30.Use cutsom events",
          "31.Get rotator for facing the ladder",
          "32.Calculate Location in front of ladder",
          "33.Timeline with lerp",
          "34.Orient to ladder status",
          "35.Setup climbing system",
          "36.Montage State",
          "37.Go out of ladder system when on ground",
          "38.Anim montages",
          "39.Animation Lag fix"
        ],
        "10.Ladder Climb out From Top logic ( Pro )": [
          "40.Modify Ladder for collision boxes",
          "41.ClimbOut from top logic",
          "42.Climb out collision fix",
          "43.More debug for montag state and collision enabled"
        ]
      },
      "requirements": [
        "basic knowledge of unreal engine 5"
      ],
      "description": "we are not a triple-A company\nwe don't have money to hire animators\nBut\nwe have the unreal engine for free and all its tools\nlet's say we download a free animation and it is not matched with your objects and levels\neverything with that animation looks low-quality\nin this course, I'll show you two important ways that you can use those animations like it was for Triple-A companies\nas an example, we use a ladder climbing system that you can't find good animation out there for it\nfirst, I'll show you how to code procedural mesh generation so your mesh and ladder can match your animation\nour ladder height can be changed. its rungs offset can change it can have a top ladder or not\neven we design  level designer guide so if it is not placed properly it shows the level designer\nat the and I'll show you how to use data tables to have multiple types of ladders inside just one ladder blueprint\n\n\nif with this again your animation was not synced I'll show you how to use control rigs and linked animations to fix whatever problem that animation has\nso first we create a control rig for our character\nnext, we learn about level sequence and curve editor\nwe learn about additive animations\nwe learn about shifting keyframes method as well\n\n\n\n\n\n\nnext, we learn all about anim montages and how to use them properly\n\n\nthis course is all about fixing problems. I'll show you most problems that animation can have and how to fix them either with code or control rig and level sequencer\n\n\nand we will talk about the most important debug options for our project so you can see problems easily, like slow-motion and custom print strings\n\n\nbut at the end, you will have a fully functional ladder climbing system that is modular with component and data tables that help you implement this ladder system in your other games as well\n\n\nso let's learn how to fix the problem",
      "target_audience": [
        "Everybody"
      ]
    },
    {
      "title": "Learn to Build Some Shooter Games with Unity® and Blender!",
      "url": "https://www.udemy.com/course/learn-to-build-some-shooter-games-with-unity-and-blender/",
      "bio": "Do you love Battle Royale games? How about developing your own? Let's build your first 3 games from scratch.",
      "objectives": [
        "Build a 3D Adventure game in Unity® from scratch.",
        "Create your own unique Battle Royale system.",
        "Navigate the Unity® editor.",
        "Design large environments for your character to explore in.",
        "Build video game levels.",
        "Create your own materials.",
        "Build 3D models for the game in Blender.",
        "Integrate the art from Blender into Unity®.",
        "Learn the basics of animation."
      ],
      "course_content": {},
      "requirements": [
        "Unity® and Blender are free to download. Please download and install Unity® and Blender before purchasing this course",
        "This course was recorded on a Mac computer, but you can use Unity® and Blender on a PC."
      ],
      "description": "\"Instructor is very knowledgeable with Unity. Very interesting concepts are presented.\"- Tom L.\nCreate two awesome Shooter Games with Blender and Unity®\nDo you love Battle Royale games? Do you want to give your own spin at the genre? Do you want to develop your own 1st person shooter? Then this is the perfect course for you!\nLearn how to create a full 3D environment as well as Create and Animate characters to wield weapons and run a muck as they try to survive your own Battle Royale!\nA wildly successful Kickstarter funded this course\nIn this course, you learn how to build your own Battle Royale and a Portal-like Game with Unity® and Blender. This course is unique because we make both the code and the art for the game from scratch. We teach you the fundamentals of designing, coding, and modeling a 3D game.\nFirst you design the game and its functionality in Unity®. You learn how to code in C# and build video game levels. Don't worry if you've never coded before. We start simple and add more to the game as the course goes on.\nWhy Unity®?\nUnity® is one of the most popular platforms in game development. You can use Unity® to build 2D and 3D games. Unity® is cross-platform, which means it is easy to use with other platforms.\nThen you create the 3D models for the game in Blender. You build all the art assets for the game. You learn how to integrate your art from Blender into Unity®.\nWhy Blender?\nBlender, like Unity®, is a popular production suite that is free to download. Blender is a revolutionary tool for making 3D art digitally. With Blender, you can make art assets for games, like we do in this course.\nEven if you're not an artist, you can make basic art models. You may have heard of Axiom Verge and Stardew Valley. These games are million-dollar successes. But did you know that only one person made each?\nUsually it takes a whole team of people to build a game. But creators Thomas Happ and Eric Barone developed and designed their games by themselves. Now they're millionaires. You can do it, too!\nLet's get started!\nAlso, Now Included in these bundled Course are Bonus courses of other Related Topics, such as C# and Java! You get more content at a great price!\nWe at Mammoth Interactive value input from students like you. Feel free to leave us your feedback.\nEnroll now to join the Mammoth community!",
      "target_audience": [
        "Anyone who wants their start at making 3D video games.",
        "People that want to create their own Battle Royale.",
        "Anyone who wants to learn game development.",
        "Beginners who want to learn how to use Blender.",
        "This course assumes you know a little about Unity®."
      ]
    },
    {
      "title": "Write Minecraft Mods With Your Kid (1.11.2)",
      "url": "https://www.udemy.com/course/write-minecraft-mods-with-your-kid/",
      "bio": "Learn java in a fun way",
      "objectives": [
        "Write your own mods for minecraft",
        "Know about basic concepts in java programming language",
        "Know about basic concepts in object oriented programming",
        "Know using an integrated development environment (Eclipse)"
      ],
      "course_content": {
        "Introduction": [
          "About Me & About This Course",
          "A Few Words About Minecraft And Mods",
          "A few Words About Java"
        ],
        "Setting Up Development Environment": [
          "Installing Java",
          "Installing Eclipse",
          "Installing Forge",
          "Development Environment Quiz"
        ],
        "Java And Eclipse Introduction": [
          "Java: Helloworld Journey",
          "Java: Cross Platform Feature",
          "Introduction To Eclipse Environment",
          "Quiz"
        ],
        "Write Your First Mod": [
          "Write Your First Mod Section Intro",
          "Java Concepts: package, import, class, fields and methods",
          "Java Concepts: More About Methods & Constructors",
          "Java Types & Variables",
          "Understanding Example Mod",
          "Create Your Project",
          "Your First Mod",
          "Java Concepts: Inheritance and Override",
          "Proxies",
          "Quiz"
        ],
        "Items": [
          "Make Your First Item",
          "Item Models",
          "Localization",
          "Add Your Own Creative Tab",
          "Java : Arrays, Loops & Conditionals",
          "Use Metadata For Multiple Item Creation-1",
          "Use Metadata For Multiple Item Creation-2",
          "Use Your Multiple Items",
          "Quiz"
        ],
        "Blocks": [
          "Make Your First Block",
          "World Generation Ore",
          "Tile Entities"
        ],
        "Recipes": [
          "Add Your First Shapeless Crafting Recipe",
          "Add Your First Shaped Crafting Recipe",
          "Add You Smelting Recipe",
          "Java: Interface Introduction",
          "Quiz"
        ],
        "Crops": [
          "Create Your Crops",
          "Eat The Crop You've Harvested",
          "Quiz"
        ],
        "Tools": [
          "Create Your Own Tools: Sword",
          "Create Your Own Tools: Picaxe, Axe, Showel and Hoe",
          "Refactor Your Code"
        ],
        "Armor": [
          "Create Your Armor-I",
          "Create Your Armor-II"
        ]
      },
      "requirements": [
        "Interest in Minecraft",
        "Interest in Java development"
      ],
      "description": "In this course you will start from scratch and build an amazing Minecraft mod by step by step instructions. Some parts of the mod to show you the basics of Minecraft mod writing but some parts are real fun. You will create your own tools, armor, block, item, crop etc. And you will write your name with blocks in the sky with a command, you will build huge structures just with a few clicks.\nThis course is for especially young people who like playing Minecraft and want to learn programming. As a parent if you are also interested in programming and want to have good time with your kid this course is for you. By taking this course you will learn basics of object oriented programming in Java in a fun way.\nTeachers who want to teach programming to a class, you can also get much benefit from this course.",
      "target_audience": [
        "Parents who want to teach java programming to their kids by exploiting their obsession with minecraft",
        "Teachers who want to teach java using minecraft",
        "Teenagers who want to learn java using minecraft",
        "Developers who want to start minecraft mod developing"
      ]
    },
    {
      "title": "How To Create 2D Defender Game With Unity & C#",
      "url": "https://www.udemy.com/course/how-to-make-main-menu-sound-system-for-your-game/",
      "bio": "How To Create 2D Defender Game With Unity & C#",
      "objectives": [
        "sound system for your game",
        "making Main Menu",
        "understanding a defender game system",
        "UI"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Importing Asset & game Scripts"
        ],
        "Main Menu": [
          "Main Menu UI",
          "Main Menu Script"
        ],
        "Sound": [
          "Sound Mixer Setting",
          "Sound Mixer UI",
          "Sound Mixer Script",
          "Audio Manager Script",
          "Audio sound setups"
        ],
        "Main Menu Design": [
          "Main Menu Design"
        ],
        "Enemies": [
          "Enemy animations",
          "Enemy Spawn Point",
          "Game Manager Script",
          "Enemy Script"
        ],
        "Tower": [
          "Tower UI",
          "Tower Script Part 1",
          "Tower Script Part 2",
          "Tower Projectile",
          "Tower Shoot",
          "Tower eye",
          "Improving shooting system",
          "Enemy Health & Take Damage",
          "small fixes"
        ],
        "Gold System": [
          "Gold UI",
          "Gold UI script",
          "Earning Gold"
        ],
        "Tower Upgrade": [
          "Tower Upgrade part 1 UI",
          "Tower Upgrade part 2 Script",
          "Tower levelup Sound & Effect",
          "Tower Levelup Text",
          "Shoot effect"
        ],
        "Wave System": [
          "Wave Script",
          "Wave System UI",
          "Player Health",
          "Exit Point Effect",
          "Lose & win UI",
          "Lose & win Script",
          "Game Speed",
          "Level Selection"
        ]
      },
      "requirements": [
        "need pc"
      ],
      "description": "Learn how to create and program a complete UI Menu System & Defender Game in  Unity and C# .\nIn this course you won’t just be learning programming concepts, but tying these concepts to real game development uses. You will have access to a course forum where you can discuss the topics covered in the course as well as the next steps to take once the course is complete.\nAt the end of this course you will have developed the ability to create such elements as:\n1)How to make an UI Screen\n2)Options Menu with start and exit button\n3)Complete Audio Control System which you can adjust volume and at the same time it will get saved in player prefs\n4)Adjust Graphics Settings in your games\n5)Pause Menu\n6)How to make enemy and pathfinding\n7)how to make towers with AI system\n8)make Lose & Win Window\n9)Speed you game to make it more intrestinf for players\n10)upgrading towers and boost their powers\n11) and more...\n\n\nStart learning today and let me help you become a game developer!\nWho this course is for:\n1)Anyone who wants to create a UI system in Unity\n2)People who want to create and publish their own games.\n3)Developers who want to re-skill across to game development.\n4)People interested in working in the game design industy.\n5)Competent and confident with using a computer.\n6)and a lots of other things will be added soon to this project",
      "target_audience": [
        "Beginners"
      ]
    },
    {
      "title": "Unity Multiplayer Blockchain Game Course",
      "url": "https://www.udemy.com/course/unity-multiplayer-blockchain-game-course/",
      "bio": "Create an online multiplayer game in Unity and integrate NFTs using the NEAR blockchain.",
      "objectives": [
        "Multiplayer networking using Fish-Net",
        "Remote Procedure Calls, Network Animations, Ownership, Network Instantiation",
        "Blockchain integration using the NEAR blockchain",
        "Animation & 2D character rigging",
        "C# concepts covered such as: variables, events and inheritance"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Prerequisites",
          "Don't miss the downloads!"
        ],
        "Unity Basics": [
          "Project Setup",
          "The Unity Editor",
          "2D vs 3D",
          "Bouncing Ball",
          "First Script",
          "Public Variables",
          "Delta Time",
          "User Input",
          "Collision",
          "Physics Move",
          "Jump around tangent",
          "New input system"
        ],
        "Unity Intermediate": [
          "Starting the game",
          "2D Rigging Cont.",
          "Character Rig Copy",
          "Character Move",
          "Inverse Kinematics",
          "Animations",
          "Flip",
          "Stabby Stabby",
          "Stabby animation",
          "Stabby IK",
          "Walk don't be stabby!",
          "Attack layer",
          "Stab attack input",
          "Character switching",
          "Prefabs",
          "Health",
          "Health bar",
          "Flipping health bar",
          "Damager",
          "Friend saver"
        ],
        "Unity Multiplayer": [
          "Import Fish-Net",
          "Network Manager",
          "ParrelSync",
          "Network Transform",
          "IsOwner & Network Animator",
          "Network Health"
        ],
        "Blockchain": [
          "Creating a Mint Site",
          "NFTs in Unity",
          "NFTs & Multiplayer",
          "Create an NFT Smart Contract"
        ],
        "The End": [
          "The Pub"
        ]
      },
      "requirements": [
        "Some basic programming experience would be advantageous"
      ],
      "description": "Create an online multiplayer game in Unity and integrate NFTs using the NEAR blockchain.\nWhat you’ll learn:\n\nMultiplayer networking using Fish-Net.\nRemote Procedure Calls, Network Animations, Ownership, Network Instantiation\nBlockchain integration using the NEAR blockchain\nAnimation & 2D character rigging\nC# concepts covered such as: variables, events and inheritance\nWhat’s included:\n\nUnique character and environment art usable in your own projects\nFull source code to the finished game\nCertificate of completion\n\n\nHave you always wanted to create a multiplayer game but didn't know how to get started? This course will take you from zero to hero in just a few hours.\nWant to add your game to the blockchain and integrate NFTs right into your gameplay? By the end of this course you will have created your own smart contract, deployed it to the blockchain, and integrated it into your game.\n\n\nTestimonials from other courses:\nExactly what I was looking for. Hooks, canvas, and roguelikes. Lots of good design patterns as well, at least so far. I will be going through this course but trying to implement the features using typescript. Please continue with another intermediate course. Thanks much.\nAlex Barber\nVery cool what you can do in under 3.5hrs! Morgan breaks down core concepts and gives you an overview of all the tooling needed to be successful with your game idea. Nice pacing and fairly comprehensive! Would love to see a more in dept discussion about grouping and managing assets and resources in both Tiled and Phaser. Great Tutorial!\nTech Ninja | Web & IT",
      "target_audience": [
        "Budding game developers that want to get to the next level"
      ]
    },
    {
      "title": "Lighting In Unity | The Art of Lighting for Games",
      "url": "https://www.udemy.com/course/lighting-in-unity-t/",
      "bio": "Learn how lighting works in the Unity game engine and make AAA quality scenes",
      "objectives": [
        "Gain Experience in lighting 3D objects and gorgeous environments in Unity for a variety of platforms including PCs, mobile devices, and XR",
        "Gain complete knowledge about Unity's lighting system by prototyping 3D environments",
        "Gain Experience to be used in game development or other real-time 3D application development such as simulation and design visualization",
        "Make your scenes look more visually appealing with clever lighting strategies",
        "Master the Unity's lighting pipeline",
        "Build artifact and error free lighting",
        "Learn advanced lighting concepts such as Global Illumination, Light baking, Reflections, Light Probes and much more",
        "Learn how to make your games look more interesting and cinematic using lighting",
        "Learn every Minute Detail about Lighting by working on various challenges",
        "Learn Advanced Tech art in unity and create realistic lighting for your games.",
        "Discover the latest environment lighting techniques and different material channels"
      ],
      "course_content": {
        "Introduction": [
          "The Church Scene | Course Teaser | Created and Rendered in real time with Unity",
          "Introduction",
          "Types Of Lights",
          "Basic Settings",
          "Additional Settings"
        ],
        "Shadows In Unity": [
          "Shadow Basics",
          "Quality Settings for Shadows"
        ],
        "Global Illumination": [
          "Basics of Global Illumination",
          "Lighting Window",
          "Light Baking"
        ],
        "Reflections In Unity": [
          "Understanding Reflection Probes",
          "Adding a Reflection Probe to the Church Scene"
        ],
        "Advanced Lighting Concepts": [
          "Emissive Material Lighting",
          "Light Probes"
        ],
        "Challenges, Solutions and Quizzes": [
          "About the Challenges and Solutions",
          "Challenge and Quiz Prerequisites"
        ],
        "The Apartment |Challenge #1| Creating and configuring Skybox": [
          "The Apartment Design Document",
          "Challenge 1| Creating and configuring Skybox",
          "Challenge 1| Creating and configuring Skybox",
          "Solution 1 | Creating and configuring Skybox",
          "Solution 1 | Creating and configuring Skybox",
          "Quiz | Creating and Configuring Skybox"
        ],
        "The Apartment | Challenge #2| Creating and Configuring Lights": [
          "Challenge 2 | Creating and Configuring Lights",
          "Challenge 2 | Creating and Configuring Lights",
          "Solution 2 | Creating and Configuring Lights",
          "Solution 2 | Part A | Creating and Configuring Lights",
          "Solution 2 | Part B | Creating and Configuring Lights"
        ],
        "The Apartment | Challenge #3| Reflections": [
          "Challenge 3 | Reflections",
          "Challenge 3 | Reflections",
          "Solution 3 | Reflections",
          "Solution 3 | Reflections"
        ],
        "Bonus Section": [
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "You will need a Windows PC or a Mac and a free copy of Unity 2018 or above to follow along",
        "Basic knowledge about Unity will be appreciated",
        "knowledge of the Unity Editor and other basic tools",
        "No Programming or Scripting is required",
        "Foundational understanding of Unity programming workflows and terminology"
      ],
      "description": "*NEW* Added Much Awaited Challenges and Solutions that will help students build upon their skills that may help them find employment in roles with titles such as Unity Gameplay Programmer, Unity Artist, 3D Artist, 3D Generalist, Level Designer, and Environmental Artist  -- Extended Content\nMaking AAA quality visuals is not as hard as you think. you don't need to be great at 3D math, programming or art.\nIt all starts with knowing the basics of the game engine you are using. In Unity to make games look high quality, it is necessary to understand how it's subsystems like Lighting work.\nIn this course, we will cover Unity's entire Lighting Pipeline that will help you create more cinematic and immersive games. This course doesn't require you to have any programming or 3D art experience. All you need to know is the basics of the Unity editor.\nWe will kick start by covering the basics of lighting, with a complete dark church scene and as we move further we will add the different type of lights to our scene and continue to learn more advanced lighting concepts such as\nADVANCED LIGHT PROPERTIES like cookies, halos, culling, light flares.\nSHADOWS - cover advanced shadow settings such as shadow cascades, shadow distance and much more.\nDIRECT AND INDIRECT LIGHTING\nGLOBAL ILLUMINATION AND LIGHT MAPPING - will discuss the concept, cover both baked and real-time GI.\nQUALITY SETTINGS\nREFLECTIONS by understanding reflection probes\nLIGHT PROBES\nAnd much more!\nWe will be using a beautiful church scene and as we move through the course you are expected to follow along with us so that you will get a practical knowledge of the Unity's lighting setup. we encourage and expect you to practice all the techniques side by side as we move on. Remember to get good at something it is important to practice it, and If you feel stuck feel free to re-watch the videos or ask a question in the forum section. Our team will try it's best to answer all your questions.\nThis course is perfect for developers working on games that require deep knowledge about Unity's Lighting System. Anyone using the Unity engine will benefit since we comprehensively cover how to correctly use many of its more advanced lighting sub-systems.\nThis course is designed in a short, concise and direct manner. So that you can gain most out of this course without wasting much of your time.\nWhy Learn Game Development with Unity?\nThe gaming industry is a $100 billion industry worldwide. By 2020, that number is expected to near $120 billion. With Unity 5 being the most widely used engine to develop games across multiple platforms, there has never been a better time to get into the field. As you will learn, the types of games you can create with Unity and C# are limitless. Game development makes a great hobby, allowing you to learn a new skill and play your game with family and friends. It is also an exciting and rewarding career, where plenty of successful developers, have learned the fundamentals of game development through courses like this, and not in the traditional classroom setting. Every great game starts somewhere, so why not make it yours? While people often find coding or making games intimidating, this Unity course utilizes a unique teaching method which will allow you to gain a thorough understanding of concepts while you develop your own games. Thanks to the Unity community, you’ll be able to connect with other developers, work together on new projects, and make some incredible games!\n\n\nIf you have a few gaps in your experience, don’t worry. That’s what this course is for! You’ll have the opportunity to gain practice and learn best practices from an expert Unity instructor.\nJoin us on this adventure today!  We’ll see you inside the course.\n\n\nNote :- This course comes with 30 day money back guarantee and lifetime access + support from us.",
      "target_audience": [
        "This course is perfect for developers working on games that require complete knowledge about Unity's Lighting System",
        "Unity Developers/ Environment artists/ 3D technical Artists/ Programmers/ Level Designers interested in Unity's Lighting Pipeline",
        "Students having Foundational understanding of animation and 2D rendering",
        "No Programming or Scripting is required",
        "Anyone using the Unity engine will benefit since we comprehensively cover how to correctly use many of its more advanced lighting systems"
      ]
    },
    {
      "title": "Create A Realistic Environment for your Game using Unity",
      "url": "https://www.udemy.com/course/create-a-realistic-environment-for-your-game-using-unity/",
      "bio": "Learn how to Create Eye feasting realistic environment using Unity's HDRP",
      "objectives": [
        "About Building a Realistic Environment in Unity using HDRP- High Definition Render Pipeline",
        "Creating a Shadergraph for wind",
        "About Unity Basics: How use the software and its tools",
        "About Post-Processing effects",
        "About Lighting and Shadows",
        "About Creating a Terrain and Adding Trees to it",
        "About Using the HDRP Template",
        "Adding HDRI skies to the environment",
        "Creating three different forest states- sunrise, day, night",
        "Making a 3d environment in unity",
        "Using Unity to create High definition graphics",
        "Using the new asset store in Unity",
        "Adding HDRI skies in unity Environment",
        "Using the Terrain tool in unity",
        "Add grass to terrain which is not available in HDRP Unity",
        "Adding trees of different heights and rotation to terrain in unity"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Downloading and creating a unity project",
          "Unity basics",
          "Creating Environment",
          "Sky and Fog volume",
          "Lighting and shadow settings",
          "Post-Processing effects",
          "Wind Shadergraph",
          "Final Tweaks"
        ]
      },
      "requirements": [
        "Basic computer knowledge will be sufficient"
      ],
      "description": "If you are Interested to create eye feasting realistic environments for your games, you have landed on the right course. This course will help you to build realistic environments in Unity using HDRP.\nHigh-quality photo-realistic environments will always get your game to the next level giving the players a sense of realism in the games. many outstanding games have made huge hits because of the realistic graphics they offer for the players. You can also build such photo-realistic environments using Unity HDRP.\nYou will be using the High Definition Render Pipeline(HDRP) for this project as we have to create a high definition realistic environment, you will create an environment using the assets from the default HDRP template in unity and later add lighting, post-processing effects, and wind to the environment.\nThe wind in the Unity HDRP would not be working for the normal trees that are placed on the terrain, in this course you will learn to create your own wind shader which would work with HDRP and also you can control the properties of the wind like direction and speed\n\n\nIn this Course You Will Learn:\nHow to use the terrain to build an environment\nAdding sky and fog volumes to create volumetric lighting\nChange the lighting settings\nAdding post-processing effects\nCreating a shader graph for wind",
      "target_audience": [
        "Students who are curious about building realistic environments",
        "Unity developers who want realistic levels in their game",
        "Who are willing to create high definition graphics in their game",
        "Unity beginners who are excited about creating high definetion realistic environment"
      ]
    },
    {
      "title": "Simple and Advanced Topics of Animating 2D Characters",
      "url": "https://www.udemy.com/course/learn-how-to-make-animated-2d-characters-in-unity3d/",
      "bio": "A comprehensive and easy to learn guide to make 2D bone-based characters from scratch.",
      "objectives": [
        "Create custom bone-based animated characters in Unity 3d",
        "Work with sprite sheets in Unity. We'll cover importing, slicing and setting up the pivot points.",
        "Assemble bone based 2D characters, organize all the body parts in Hierarchy and prepare for animating.",
        "Create Idle, Walk and Jump animations for your character. We'll make a Jump animation with an interesting technique that involves Blend Trees.",
        "Configure transitions between animations in the Animator component.",
        "Write a simple controller script that will let our character move on the level and jump.",
        "Use ScriptableObject assets to store outfits of your character.",
        "Apply outfits from your custom-made assets to your character changing the way he looks.",
        "Display extra clothing and decoration items like bracelets, necklaces as a part of your character's outfit.",
        "Make characters with joints that will be able to “turn into” differently shaped characters while using the same animations."
      ],
      "course_content": {
        "Introduction": [
          "Introduction to This Course",
          "Downloadable materials"
        ],
        "Making a bone-based 2D character in Unity": [
          "Creating a Project and Slicing Sprites",
          "Setting Up Pivot Points and Assembling Character - Part 1",
          "Setting Up Pivot Points and Assembling Character - Part 2",
          "Background and Walk Cycle Animation - Part 1",
          "Background and Walk Cycle Animation - Part 2",
          "Controller Script and Animator Configuration - Part 1",
          "Controller Script and Animator Configuration - Part 2",
          "Bonus - Making a Jump Animation"
        ],
        "Advanced techniques of working with bone-based 2D characters": [
          "Introduction to Section 3",
          "Resolving Sorting Order Issues",
          "Sorting Order Fix Script - Part 1",
          "Sorting Order Fix Script - Part 2",
          "Scriptable Object Assets in Unity",
          "Applying Outfit from Asset",
          "Outfit Applier Script - Basics",
          "Displaying Unique Items",
          "Character with Joints - Part 1",
          "Character with Joints - Part 2"
        ]
      },
      "requirements": [
        "This course is very beginner friendly. We spend most of the time working in Unity Editor. All the scripts that are used in the course are pre-made and explained line by line in lectures. We do not use any paid assets, all the art is free and allowed for commercial use. You will get access to a couple of projects that I've saved during development as well as the final project with all the advanced features.",
        "You should install the latest version of Unity3D to work on this course and open example projects that are provided with this course (the final project was saved in Unity 5.5.1f1)."
      ],
      "description": "Making a 2D platformer game is a nice way to start learning about Unity game development. In this course you will learn how to create so-called “bone-based” 2D characters - characters that are made out of separate body parts. The material in this course is divided into 3 Sections. Section 1 features a short introduction to the course.\nIn Section 2 we will focus on making a simple bone-based character from scratch. We`ll go through the whole process of character creation from setting up an empty Unity project and importing sprite sheets with art to assembling a bone-based character the right way and animating it using Unity`s built-in mechanim animation system. By the end of this Section we`ll have a simple bone-based character that can walk and jump on our improvised level.\nIn Section 3 we will talk about some advanced techniques of working with 2D animated characters. For bone-based characters correct sorting order in the scene is very important, so in our first couple of lectures we`ll talk about resolving all the sorting order issues. Then we`ll discuss how to apply different looks and different clothing items to your character. This approach is very convenient, because you can have all the characters in your game made from a single character prefab, but they can all use different outfits and look differently. It`s also much easier to dress your characters or re-skin your game if you need. We`ll also talk about displaying some unique items on your characters such as bracelets, necklaces, belts, other decorations. The same approach can be used to display other clothing items. We`ll finish this section by making a more complex character that will have “joints”. Joints will allow us to use the same animated model for characters that are differently shaped (wider shoulders, shorter legs, longer arms, etc…).",
      "target_audience": [
        "This course is for people who are starting out with Unity development and want to know more about making 2D platformer characters. It provides some basic info as well as some advanced techniques for making interesting animated 2D characters. You should be familiar with basic C# to read and understand the scripts that we use in this course."
      ]
    },
    {
      "title": "Unity Machine Learning with Python!",
      "url": "https://www.udemy.com/course/unity-machine-learning-with-python/",
      "bio": "Build a Unity game that uses artificial intelligence to control players. Teach AI to catch falling Christmas gifts!",
      "objectives": [
        "Learn to code for game development in Unity C#",
        "Learn to make game elements behave like real-life beings",
        "Train an artificial brain to make a game work"
      ],
      "course_content": {
        "Gameplay": [
          "Gameplay"
        ],
        "Unity Introduction": [
          "Have Unity experience? Jump to Section 6!",
          "Introduction",
          "Unity Editor",
          "Moving a Cube",
          "Materials",
          "Lights",
          "Particle System",
          "Applying Physics",
          "Asset Store"
        ],
        "C# Coding - Unity Introduction": [
          "Introduction",
          "Variables",
          "Methods",
          "If Blocks",
          "Loops"
        ],
        "Inputs - Unity Introduction": [
          "Introduction",
          "Key Presses",
          "Moving a Player",
          "Jumping",
          "Moving Forward",
          "Cycling Cameras"
        ],
        "Prefabs - Unity Introduction": [
          "Section Intro",
          "Prefabs Intro",
          "FAQ on Instantiating Objects",
          "Random Angles",
          "FAQ on Destroying Objects",
          "Explosion Effects",
          "Adding Explosion Effects"
        ],
        "Machine Learning Sled and Presents Game": [
          "Source Files",
          "Introduction",
          "Installing Python: Directory Update",
          "Environment Setup",
          "Generating a Build for Learning",
          "Training Process",
          "Running the Trained Model",
          "Creating an Academy",
          "Making a Playable Scene",
          "Setting Reward Logic",
          "Training Catcher Academy",
          "External Assets",
          "Conclusion and Challenge",
          "Please rate this course",
          "Bonus Lecture: Newsletter"
        ]
      },
      "requirements": [
        "Install Python (free)",
        "Install Unity 2017.3.0f3 or higher (free)",
        "A beginner's familiarity with C# programming is recommended",
        "Beginner knowledge on how to use a command line tool"
      ],
      "description": "\"Good in depth explanations that are quick enough for those that have some familiarity to not get bored but thorough enough for those that have no experience.\" - Anthony Guertin\n\"I love this course.\" - William H Taylor\n--------------------------------------------------------------------------------------------------------------\nLearn to work in an exciting area of computer science and artificial intelligence. Learn techniques of the future of game development.\nIn this course we will train an artificial brain to make the game work. No matter where the present falls, the computer will know exactly how get it.\nThis course was funded by a wildly successful Kickstarter\nMake an AI Christmas game! Our Unity game will have a holiday setting featuring a sled. Presents will fall from the sky. The goal will be to move the sled to catch the falling present. The game will need no human interaction.\nEnroll now to study with 5/5 star-rated instructor Glauco Pires.\nTo catch a present present in the game, you as a player will not have to do any work! We will teach the computer to recognize the present’s location.\nWhile making a simple scene, we will learn many settings and adjust programs. The result will be fantastic.\nYour teacher makes Unity, HTML5, and Unreal games.\nGlauco Pires has been working with games since 2010. His experience in the area he will share with you in this course. You will learn one step after the other at a comfortable pace.\nBesides Unity, we will use Python: a popular programming language for the web.\nEnroll now to join Glauco and tons of other happy students",
      "target_audience": [
        "Take this course if you want to be a game developer with unique skills",
        "Take this course if you want to make games with smart automated features"
      ]
    },
    {
      "title": "Unity 2023 Game Development : Build 6 Games with Unity & C#",
      "url": "https://www.udemy.com/course/learn-unity-game-development-build-games-with-unity/",
      "bio": "Learn Unity Game Development , Build 6 2D & 3D Games with Unity , Learn Unity & C# Scripting By Building Real Projects",
      "objectives": [
        "Build 6 Different Games with Unity",
        "Learn C# by Building Real Games",
        "Create Multiple 2D & 3D Games with Unity",
        "Design Beautiful Animated Main Menu",
        "Build A Portfolio of Different Game Projects",
        "Learn C# Scripting from Scratch"
      ],
      "course_content": {
        "Introduction & Installing Unity 6": [
          "Introduction To This Course",
          "Installing & Setting Up Unity 6",
          "Creating Your First C# Script in Unity 6",
          "Installing Unity 2023",
          "Installing & Setting Up Unity 2022"
        ],
        "Game 1 : 2D Egg Cather Game": [
          "Introduction To The Egg Catcher Game",
          "Setting Up The Scene",
          "Setting Up The Basket",
          "Creating The Basket Controller",
          "Smoothly Moving Basket",
          "Limiting The Basket Movement",
          "Setting Up The Egg",
          "Creating Score Checker",
          "Creating Egg Script",
          "Setting Up The GameManager",
          "Spawning The Eggs",
          "Spawning Eggs at Random Positions",
          "Adding Score Functionality",
          "Designing The Score UI",
          "Designing The Start Menu",
          "Adding Functionalities To The Main Menu",
          "Creating Game Over Menu",
          "Building and Publishing To Android"
        ],
        "Game 2 : Dino Run - 2D Endless Runner": [
          "Playtesting Dino Run Game",
          "Importing Assets & Creating Background",
          "Creating Scrolling Background",
          "Adding The Grounds",
          "Creating The Running Dino",
          "Making The Dino Jump",
          "Adding Dino Jump Animation",
          "Setting Up The Obstacles",
          "Creating The Dino Death",
          "Creating GameManager and Controlling Everything",
          "Randomly Spawning Obstacles",
          "Creating Score UI & Scoring System",
          "Designing Game Over Menu",
          "Adding Functionalities To Game Over Menu",
          "Creating The Main Menu Scene",
          "Animating The Title Text"
        ],
        "Game 3 : Block Dodger Android Game": [
          "Playtesting The Game",
          "Setting Up & Importing Assets",
          "Adding Ground Player & Sky",
          "Creating The Block",
          "Creating The Block Script",
          "Creating The Player Controller",
          "Creating Game Manager & Spawning Blocks",
          "Creating Score & Menu UI",
          "Creating Title Text & Fixing Tap UI",
          "Building For Android & Creating an Apk"
        ],
        "Game 4 : 3D Maze Ball Game": [
          "Introduction To The Maze Ball Game",
          "Setting Up The Game Level",
          "Designing The Mazes",
          "Creating The Player Controller",
          "Adding The Ball",
          "Creating UI Elements",
          "Creating the GameManager and Controlling The Game",
          "Adding a Restart Button",
          "Adding Some Improvements To The Game"
        ],
        "Game 5 : 3D Endless Runner Android Game": [
          "Build Endless Runner Game"
        ],
        "Game 6 : 3D Ball Coin Collecting Game": [
          "Coin Collecting Game"
        ],
        "Learn C# Scripting For Unity ( Optional Section )": [
          "Getting Started with C# Scripting in Unity",
          "Understanding Structure of a C# Script",
          "Event Functions in Unity C#",
          "Variables in Unity C#",
          "Public Variables in Unity C#",
          "The Update Function in Detail",
          "Basics of Functions in C#",
          "Functions with Return Types & Parameters",
          "If Else Statements in C#",
          "More Conditions & Equality Checking",
          "Understanding Boolean Variables",
          "Introduction to Arrays in Unity C#",
          "More About Arrays",
          "Understanding the For Loops in C#",
          "While Loops in Unity C#",
          "Foreach loops in C#",
          "Switch Case Statements in C#"
        ],
        "Course End Greetings": [
          "Congrats You Have Finished This Course"
        ]
      },
      "requirements": [
        "Basic Understanding of Unity & C#"
      ],
      "description": "Learn Unity Game Development : Build 6 Games with Unity 2023\n\n\nList Of Games You Will Build in this Course:\n1. 2D Egg Catching Game\n2. Block Dodging Game\n3. Dino Run Game\n4. 3D Maze Ball Game\n5. 3D Endless Runner Android Game\n6. 3D Ball Coin Collector\n\n\nIn this course You will learn Unity Game Development and C# Scripting by building Multiple different 2D & 3D Games with Unity & C#. You will also learn to build and export your Games to Android Mobile Platform. This course is great for developers who wish to learn Unity Game development and C# Scripting by building real world example projects.\n\n\nYou will start by installing and Setting up Unity . Then you will start building different 2D & 3D Game Projects with Unity & C#.\nThere's a C# Scripting section for beginners as well. If you're new to C#, you can watch these videos before diving into Game Development with Unity.\n\n\nHere's the list of things Your will Learn :\n\n\nBuild 6 Different Games with Unity\nLearn C# by Building Real Games\nCreate Multiple 2D & 3D Games with Unity\nDesign Beautiful Animated Main Menu\nBuild A Portfolio of Different Game Projects\nLearn C# Scripting from Scratch\n\n\nTake this course and start building your own Games Today .\nMaster Unity Game Development and C# Scripting with Unity 2023\n\n\nCredits:\nAudio from Bensound\nArts from Gameart2d",
      "target_audience": [
        "Anyone who wants Learn Unity by Building Multiple 2D & 3D Games"
      ]
    },
    {
      "title": "Creating The Simple Shooting Game With Unreal Engine",
      "url": "https://www.udemy.com/course/unreal-creating-a-first-person-shooter-game-with-unreal-engine/",
      "bio": "How to create a high quality FPS game mechanic in Unreal Engine 4 with this comprehensive guide from begin to finish",
      "objectives": [
        "Create a first-person character that can move and look around.",
        "Create a gun and attach it to the player character.",
        "Shoot bullets using a line trace (also known as a ray cast).",
        "Apply damage to actors."
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Setting the character and camera": [
          "True First Person Camera",
          "How to create Character Health & Armor",
          "How to create regenerating armor & damage function",
          "How to create blood damage effect",
          "How to set up the animation character",
          "How to finish the animation blueprint"
        ],
        "How to creating the weapon and weapon effects": [
          "How to add the AK weapon",
          "How to fire our AK weapon in unreal"
        ],
        "How to add more advance animation for character": [
          "How to create crouching state with animations blueprint",
          "How to add more sprinting state with animations",
          "How to use control rotation"
        ],
        "Adding some function for the weapon": [
          "How to Create Fully Automatic Rifle",
          "How to Create Aiming Down Sights",
          "How to Use Spawning blueprint The Muzzle Flash",
          "Fixing Some Problem In Movement States",
          "How to Set Up Ammo & Reloading",
          "How to Fix The Firing System",
          "Aiming With A Crosshair",
          "How to Create The Dynamic Spread Crosshair",
          "How to Create Picking Up Ammo System"
        ],
        "Creating the AI behavior enemy and obstacles": [
          "How to Set Up AI & Bullet Damage",
          "Enemy AI Following/Chasing",
          "Aiming Fixes",
          "How to Create The Smarter AI Actions",
          "How to Create The Random AI Roaming Setup",
          "How to Create The Smooth Gun Movement",
          "How to Create The Simple Objective System"
        ],
        "Creating the UI for first person shooter game": [
          "How to Set Up Our UI For Game",
          "How to create Enemy kill and feed System",
          "How to Create The Minimap For FPS Game",
          "How to Create The Match Timer",
          "How to Create Hit Marker With Animation"
        ],
        "Creating the UI weapon systems": [
          "How to Create The Weapon System_Part_1",
          "How to Create The Weapon System_Part_2",
          "How to Create The Weapon System_Part_3",
          "How to Create The Weapon System_Part_4",
          "How to Create The Weapon System_Part_5"
        ],
        "Adding more function for the game meachanic": [
          "How to Create The Weapon Line Tracing",
          "How to Create The Ray Tracing While Aiming Down Sight",
          "How to Add The Damage With Line Trace",
          "How to Improve The Damage With Line Trace"
        ],
        "BONUS SECTION: LIMITED TIME OFFER ENDING SOON !": [
          "Limited Time Offer - Ending soon!"
        ]
      },
      "requirements": [
        "Installed Unreal",
        "Basic knowledge of 3D"
      ],
      "description": "More about the Instructor:\nThis course is designed by Animation Hacks which is the visual effect studio with high-quality skill artist work on numerous unannounced projects. In addition, they enjoy sharing their knowledge with those students who learn 3D online.\nNOTE FOR STUDENTS - please take a look Section 1 / Lecture 1 to downloads for the source attachment link with the lesson.)",
      "target_audience": [
        "Beginners to UE4, or Advanced Students who want to expand their knowledge on the engine",
        "Students who are interested in creating game mechanics.",
        "This course is also suit for professional-game UE4 programmer and artist.",
        "Anyone interested in creating a high quality game mechanics",
        "Anyone who wants to learn how an AAA professional game programmer approach game mechanic creation"
      ]
    },
    {
      "title": "The Ultimate Unity Game Developer Course: From Zero to Hero",
      "url": "https://www.udemy.com/course/the-ultimate-unity-game-developer-course-from-zero-to-hero/",
      "bio": "The ultimate path to become a Unity Certified Game Developer and learn to create games for a living and for fun.",
      "objectives": [
        "How to program in C# from scratch through hands-on, practical projects",
        "The complete Unity workflow: from design and programming to deployment",
        "Game mechanics for 2D and 3D games including physics, camera controls, animations, and more",
        "Advanced Unity techniques: lighting, light probes, post-processing, scene optimization",
        "How to build and structure a professional portfolio for the gaming industry",
        "Cinematics with Timeline and Cinemachine",
        "Creating engaging gameplay using prefabs, variants, nesting, and more",
        "Best practices for prototyping and documenting your projects",
        "Optimization techniques for mobile and PC games"
      ],
      "course_content": {
        "Welcome to the Ultimate Unity Game Developer Course": [
          "Welcome to the Ultimate Unity Game Developer Course",
          "About Unity, Unity Hub and other recommended tools for your career"
        ],
        "Installing and running Unity": [
          "Installing Unity and Unity HUB",
          "Rider, the ultimate IDE",
          "Why you should use Rider",
          "Unity Community and Forums",
          "Creating your first project and Types of Projects in Unity",
          "A tour of the Unity Editor",
          "Unity Shortcuts and Tricks (Part 1)",
          "Unity Shortcuts and Tricks (Part 2)",
          "Extra: How to update Unity to a new version"
        ],
        "Project 1 - Player Controller": [
          "Project 1 Assets - Player Controller",
          "The error with the Package Manager (in this version)",
          "More about the Unity package manager",
          "How to place objects in the 3D environment",
          "The controller, your first script",
          "Translate and move the car forward",
          "The equation of rectilinear motion in physics",
          "Rigid bodies and the world of physics",
          "Modify the speed of the car's movement",
          "Unity API Methods",
          "How to make the camera follow the player",
          "The trick of offsetting behind the player",
          "Input Manager",
          "How to rotate an object",
          "The first challenge of the course - Controlling an airplane",
          "Project Challenge 1 - Controlling an Aircraft",
          "Project Challenge 1 - Controlling an Aircraft: Solution"
        ],
        "Lab 1 - Documenting a Video Game Project": [
          "The design document of a project",
          "Delivery times and sketches"
        ],
        "Project 2 - Gameplay Programming and Design": [
          "Project Assets 2 - Gameplay Design",
          "The design of our game scenario",
          "How to move the character from side to side",
          "How to keep the character on the game boundaries",
          "The game range variable trick",
          "Prefabs and Prefab Variants",
          "Throwing pizzas and instantiating food",
          "Generate prefabs with enemy animals",
          "Destruction of bullets outside the playing area",
          "Destruction of enemies outside the play area",
          "Arrays and collections of Game Objects in variables",
          "Spawning objects on screen",
          "Random numbers and dynamic content generation",
          "Orthographic camera vs. perspective camera",
          "InvokeRepeating to execute pre-scheduled tasks",
          "Colliders and triggers and associated events",
          "Events associated with triggers and collisions, and the use of labels",
          "The end of the game and how to stop time",
          "Project Challenge 2 - Mechanics, Gameplay, and Randomness Programming",
          "Project 2 Solution - Mechanics, gameplay and randomness programming"
        ],
        "Lab 2 - Prototyping a project": [
          "Prototyping a videogame"
        ],
        "Project 3 - Physics, Effects and Sounds": [
          "Project Assets 3 - Physics, Effects and Sounds",
          "Skyboxes and HDRI images",
          "How 3D models are created",
          "Physics, movements and rigidbodies",
          "Force Modes",
          "Object collision detection",
          "Label the ground to avoid double jumping",
          "Stage obstacles",
          "Spawning obstacles",
          "The side scrolling of the stage and the obstacles",
          "The Game Over condition",
          "Stop gameplay at Game Over",
          "Getters, Setters, and Auto-Computed Variables",
          "Introduction to the world of animations",
          "Masterclass in Animations with Mecanim",
          "Character's animations and controller",
          "The character's death animation",
          "On the role of music and realism in video games",
          "Particle systems with Shuriken",
          "Challenge: The trail of dirt behind the character when running",
          "Solution: The trail of dirt behind the character when running",
          "Music and sound settings",
          "How to activate sound effects by code",
          "The rolling barrel and physical materials",
          "How to reset the scene with the SceneManager",
          "Bug Fixing",
          "Challenge: The balloon flight over the city",
          "Solution: The balloon flight over the city"
        ],
        "Lab 3 - Prototyping Controls and Constraints": [
          "How to move forward with prototyping without 3D models",
          "Physical controllers vs. transformation methods",
          "Keep the character within a zone"
        ],
        "Project 4 - Advanced Gameplay": [
          "Project 4 Assets - Advanced Gameplay",
          "Rotate the camera around a point",
          "How to move the ball using relative coordinates",
          "Joints in Unity",
          "Designing enemy behavior",
          "Enemy chasing the player",
          "Random Enemy Spawning",
          "The use of functions and their correct documentation",
          "Creating Power Ups",
          "Program the Power Up effect",
          "How to use Coroutines",
          "Power Up usage indicator",
          "Exercise: Switching from one animation to the next with coroutines",
          "Spawn waves of enemies",
          "Ways to program the death zone",
          "The flow zone and difficulty balance",
          "Challenge: Goal!!!!",
          "Solution: Goal!!!!"
        ],
        "Lab 4 - Tools and ways to work professionally": [
          "Input Manager and console controls",
          "Github y los repositorios online",
          "Unity Services and Collaboratory",
          "References for our prototype with different Game Designs",
          "Cinemachine and cinematography techniques in Unity",
          "Timeline and film director techniques",
          "Combining Cinemachine and Timeline to switch cameras"
        ]
      },
      "requirements": [
        "Having completed a basic C# programming course (e.g., Learn C# by Building a Video Game by Juan Gabriel Gomila)",
        "A computer with an internet connection (Windows, Mac, or Linux)",
        "Basic computer usage skills",
        "Ideally, a system with at least an i7 processor and 16 GB of RAM for smoother performance"
      ],
      "description": "Unlock your full potential and dive into the world of game design with Unity — the industry’s leading game engine! Whether you dream of building immersive 3D worlds or want to bring your own game ideas to life, this hands-on course will guide you step-by-step from beginner to professional game developer.\nLed by Unity Certified Instructor Juan Gabriel Gomila, this comprehensive course offers more than 48 hours of video content, real-world projects and challenges to put in practice everything you'll learn with us. By the end, you’ll have a complete game development portfolio and be fully prepared to take the Unity Certified Associate exam.\n\n\nCourse Overview\nThis course is built around a learning-by-doing approach. You’ll complete 5 full game projects and multiple labs covering documentation, prototyping, optimization, and more. By the end, you’ll have all the knowledge and practical experience to build polished games and even work professionally in the gaming industry.\n\n\nModules Include:\nInstalling and setting up Unity\nPlayer control systems\nPhysics, effects, and sound design\nGame design and gameplay mechanics\nFull clone of Fruit Ninja\nCinematic game scenes with Timeline and Cinemachine\n\n\nMeet Your Instructor: Juan Gabriel Gomila - Certified Unity Instructor | CEO at Frogames\nJuan Gabriel has taught over 600,000 students worldwide on platforms like Udemy and Platzi. As a mathematician, game developer, and AI enthusiast, he brings a wealth of interdisciplinary knowledge and teaching experience to the classroom.\n\n\nStudent Testimonials\n\"This course was my first real step into game development. The hands-on projects made everything click, and now I’m building my own games!\" – Gabriela\n\"The course gave me the skills I needed to pass the Unity certification. I’m now confident in my portfolio and ready to work professionally.\" – Alberto\n\"If you're looking for a complete and well-structured Unity course, this is it. The final project alone is worth the price.\" – Francisco\n\n\nStart Your Game Developer Journey Today!\nJoin thousands of students who have transformed their passion into practical game development skills. With step-by-step guidance, practical projects, and an expert instructor, this is the ultimate Unity course to take you from beginner to professional.\n\n\nEnroll now and start creating your first video game today!",
      "target_audience": [
        "Complete Beginners: No prior experience in Unity or programming required. We teach you everything from the ground up.",
        "Aspiring Game Developers: Build real projects to create your own games and showcase them in a professional portfolio.",
        "Experienced Programmers: Take your skills to the next level by mastering Unity’s most powerful tools and workflows.",
        "Students or Professionals: Especially those who want to earn the Unity Certified Associate credential and pursue a career in game development."
      ]
    },
    {
      "title": "Unity Multiplayer Photon Fusion 2 Game Development Course!",
      "url": "https://www.udemy.com/course/unity-multiplayer-photon-fusion-2-game-development-course/",
      "bio": "Build a 3D Online Multiplayer Game In Unity 6 & Photon Fusion 2 ! Learn Photon Fusion 2 networking with C#",
      "objectives": [
        "Learn to implement multiplayer game features in Unity using Photon Fusion 2",
        "Gain practical experience with synchronizing game states across players",
        "Master networked object instantiation and synchronization",
        "Understand how to handle player movement and interactions in a multiplayer setting",
        "Learn core concept of Photon Fusion 2",
        "Understanding of Multiplayer network topology",
        "Character integration on multiplayer",
        "Learn Metaverse and multiplayer Game Development",
        "Become Master on Photon Fusion 2",
        "Cross platform multiplayer development using Photon Fusion 2 share mode"
      ],
      "course_content": {
        "Introduction": [
          "Instructor Intro",
          "Demo : What we are going to Learn and Develope",
          "On Demand to support Mobile Platform and Joystic integration",
          "Multiplayer and Photon Fusion 2 Topology",
          "Install Unity HUB and Unity and Project Create",
          "Photon Fusion 2 and Voice 2 license"
        ],
        "Multiplayer Set up": [
          "Installing Photon Fusion 2 and Voice 2 in Project",
          "Adding Avatar System",
          "Photon Fusion 2 core concept",
          "Authority Explained",
          "Multiplayer Scene Set up and Spawned Script",
          "Multiplayer Player Set up",
          "Player Movement and Camera Set up",
          "Parrel sync Multiplayer Test",
          "Voice chat Integration on Multiplayer",
          "UI and Scene Model Set up",
          "Get Name Input from user and Sync on Network",
          "Authority assign and Fix name sync on Network"
        ],
        "FPS Guidance": [
          "Player Bullet shoot and Health Update on Network"
        ],
        "Converting for Mobile Platform": [
          "How it will look in Mobile ?",
          "Converting input for Mobile Platform"
        ],
        "Final Words": [
          "Thank You"
        ],
        "Extras": [
          "Bonus Section"
        ]
      },
      "requirements": [
        "A basic understanding of Unity (experience with Unity editor and scripting)",
        "No prior knowledge of Photon Fusion 2 is required; the course covers everything from scratch",
        "Need Window or Mac OS to run Unity",
        "Latest Unity 6 LTS",
        "C# basics"
      ],
      "description": "This course is designed for aspiring game developers who want to dive into creating multiplayer games in Unity using Photon Fusion 2 for cross - platform ie Mobile , Window & Web GL . By the end of this course, you'll have a deep understanding of how to integrate networking into your Unity projects, allowing you to build your own multiplayer game from scratch.\nWhat You'll Learn:\nIntroduction to Multiplayer Game Development:\nOverview of Unity and networking principles\nLearn how multiplayer games work and the role of servers in games.\nIntroduction to Photon Fusion 2 and its powerful capabilities for real-time game networking.\nSetting Up the Multiplayer Project and learn core concept of Photon Fusion 2 :\nSetting up Photon Fusion 2 in Unity.\nEstablishing a basic multiplayer environment.\nIntegration of basic assets and game objects in a multiplayer context.\nMultiplayer Setup and Photon Fusion 2 topology:\nUnderstanding Player Prefabs and networked objects & topology.\nManaging player objects across the network.\nImplementing network synchronization (position, health, and status updates) across players.\nCamera Setup for Multiplayer:\nHandling local player camera and remote player camera.\nImplementing smooth camera transitions in multiplayer environments.\nUnderstanding player perspectives and local camera views.\nFirst-Person and 3rd person Setup:\nSetting up the first-person 3rd person view with weapons for the local player.\nActivating the avatar only for the local player.\nSynchronizing animations between the local and remote players.\nAdding Player Movement & Controls:\nImplementing movement for both local and remote players using Photon Fusion 2 .\nHandling player input .\nSyncing movement actions and animations across players.\nShooting Basics:\nShooting bullet in a multiplayer environment.\nSyncing  firing actions across the network.\nApplying damage and hit detection, including spawn and death mechanics.\nAdvanced Features:\nAdding voice chat and communication between players.\nSyncing custom game elements like health and Name.\n9. Mobile Support & Joystic Integration :\nMobile input set up with joystic on demand .\n\n\nUnlock the secrets to multiplayer game development with Unity and Photon Fusion 2 in this comprehensive course! Learn how to build real-time multiplayer games using Unity 6, C#, and Photon Fusion 2. From setting up multiplayer environments to managing camera angles, health systems, and Shooting mechanics, this course covers everything you need to know. Whether you're creating your first multiplayer game or want to refine your skills, this course will guide you through the process, helping you deploy games for multiple players with ease. Join now and become a multiplayer game developer today!",
      "target_audience": [
        "This course is designed for Unity developers looking to build multiplayer games.",
        "Whether you're a beginner or intermediate Unity user, if you're interested in learning how to implement real-time multiplayer features, this course will guide you through the process.",
        "Perfect for those passionate about creating dynamic and interactive game worlds that can support multiple players.",
        "To learn Practical use of world most powerful multiplayer Photon Fusion 2 SDK",
        "Multiplayer lover who want to create multiplayer apps/games",
        "Metaverse developer who want to create multiplayer apps",
        "Any student who want to learn multiplayer",
        "To create mobile multiplayer"
      ]
    },
    {
      "title": "Match 3 Intermediate Game Design and Programming in Unity3D",
      "url": "https://www.udemy.com/course/match3-inter-game-design-and-programming/",
      "bio": "Design and build a Match 3 game from scratch to production",
      "objectives": [
        "Start a game from scratch and take it all the way to production.",
        "Learn to apply coding patterns and object-oriented programming in game development.",
        "Discover how some of Unity's built-in functions work and can be used for your project.",
        "Dissect and analyze the mechanics of a Match 3 game and learn to adapt them into your project.",
        "Sharpen your C# coding skills with advanced algorithms and data structures."
      ],
      "course_content": {},
      "requirements": [
        "Students should know how to use the Unity Editor.",
        "Students should know how to code scripts in C#."
      ],
      "description": "Welcome to my Udemy course on how to make a complete game from scratch in Unity.\nFor this course we will be making a Match3 puzzle game.\nSome of the wildly successful Match 3 puzzle games you may have heard of or played are; Bejewelled, Candy Crush, Anipang, Puzzle & Dragon, and Zookeeper.\n\n\nThese games all contain a grid of matchable objects. The player must swap 2 adjacent objects in the grid to form a matching set of 3 objects in a row or column and is rewarded with an increasing score. If larger matches are formed, the player is awarded a power-up which can help them achieve an even higher score.\n\n\nThese games are extremely simple to play, having very limited input, making them accessible to a wide audience. However, the complexity of the grid system and randomization of the options available make the games difficult to master.\n\n\nIn this course, you’ll learn how to apply coding patterns and object-oriented programming principles in Unity to produce a set of tools that will help you efficiently manage resources throughout the game development cycle. You’ll use these tools to build a Match 3 game from scratch, learning to use many of Unity’s features along the way. Unlike some other game development courses, the scripts you will write in this course will be structured, clean, efficient, and reusable for other projects.\n\n\nUpdated 05/22/23 : Coding segments are zoomed in to improve readability.",
      "target_audience": [
        "Budding indie game developers"
      ]
    },
    {
      "title": "Roblox NPC Quest System",
      "url": "https://www.udemy.com/course/roblox-concepts-01-create-your-own-npc-quest-giver/",
      "bio": "Create a quest engine, capable of serving multiple quests to your players, tracking their progress, and giving rewards!",
      "objectives": [
        "How to manage your project files.",
        "Download and import Models into Roblox Studio correctly.",
        "Enable API Services to make use of Datastores.",
        "Create a Main Script to manage players joining and leaving your game.",
        "Learn to comment your code in a meaningful way.",
        "Create a game currency to reward your players.",
        "How to display game values on the screen using leaderstats.",
        "Create hidden folders to hold values players don’t need to see.",
        "Create “Quest State” variables to track your players progress as they complete their quests.",
        "How to use various data types in different ways to achieve your coding goals.",
        "Create useful print statements joining messages and values to test your game.",
        "Create a quest giver script that allows your players to interact with the quest giver.",
        "Learn to Move,Rotate and Scale parts and models to meet your games needs.",
        "Use Touch functions to trigger code when a player touches a part in your game.",
        "How to access the folders and values you create in different scripts for each player.",
        "Learn what different error messages mean, and how to fix them.",
        "How to access and change text in a GUI using code.",
        "Learn about quest logic to let your quest giver make decisions.",
        "How to use Module Scripts in a number of ways.",
        "Create dictionaries using JSON format to manage quest data in a easy to read and use way.",
        "Create dialogue for your quest giver to say to your players, and how to make it appear one line at a time.",
        "Create an Apple pickup your player can use to complete a quest.",
        "Use code to restrict which players can pickup and use quest items.",
        "Create a functions module to store common functions used by a number of scripts.",
        "Reward your players with in game currency when they complete quests.",
        "Control multiple parts with one script using tagged parts and the Collection Service.",
        "Learn make parts move in the workspace using code.",
        "Spawn functions that control a mini game we create in the project.",
        "Change the colour of the fields in a quest depending on how much they have been watered.",
        "Create new values for parts in the game on the fly using code.",
        "Learn to use Datastores to save and load your players data when they enter and leave your game.",
        "Add sound effects and music to your game using regions that allow the music to change when your players move between different areas."
      ],
      "course_content": {
        "Setup The Project": [
          "Setup The Project",
          "Create The Quest Module",
          "Create The Bill Module",
          "Create The Main Script",
          "Bill’s GUI And Trigger Part",
          "Player GUI And Messages"
        ],
        "The Apple Quest": [
          "The Functions Module",
          "Quest Logic",
          "The Apple Pickup",
          "Spawn The Apples",
          "Running Bill’s Lines"
        ],
        "Stomp The Vermin Quest": [
          "Enter The Quest Data",
          "Spawn And Move A Vermin",
          "Code The Vermin",
          "Test The Quest"
        ],
        "Water The Crops Quest": [
          "Enter Quest Data And Lines",
          "Monitor The Crops Loop",
          "Tagged Script For The Plots",
          "The Well Script"
        ],
        "Saving And Loading Player Data": [
          "Setup Player Datastore",
          "Loading Player Data",
          "Save Game Data",
          "Checking Game After Loading"
        ],
        "Making It Better": [
          "Add A Quest GUI",
          "Rake Tool And Variables",
          "Rake Animation",
          "Animation Module And Controller",
          "Bucket Tool And Variables",
          "Bucket Animation",
          "Using The Bucket Animation",
          "Client GUI",
          "Using The Debris Service",
          "Update The Vermin Script",
          "Update The Watering Game"
        ]
      },
      "requirements": [
        "Have a Mac or PC with Roblox Studio installed"
      ],
      "description": "This course teaches you how to create a quest engine that allows you to create multiple quests, different quest types, and give your player rewards.\nIt involves many Roblox Studio programming techniques, and you will learn how to adapt these to your own games.\nYou will learn to use Scripts, Local Scripts, Module scripts, and a number of Game Services letting you save and load your player data, and control multiple parts using one script.\nLearn how to create your own quests and integrate them into your own unique game idea.\nThe quest engine is adaptable, and completing the course will teach you many programming techniques that can easily be adapted to your own ideas.\nYou will learn to use For loops, While Loops, and Functions\nLearn to understand programming language such as Arguments, objects, and return values.\nEnables you to write your own quest story lines, and have players engage with a quest giver.\nInstall and use Plugins to assist you in completing the project.\nRead and understand error messages, and how to fix them.\nAdd music, and sound effects to add atmosphere and audio cues for your players.\nEnable you to access and use powerful coding concepts linking scripts and module scripts.\nCreate a game currency, and offer it as a reward to your players for completing quests.\nAdjust your code to handle multiple players",
      "target_audience": [
        "Intermediate to advanced Roblox Studio coders"
      ]
    },
    {
      "title": "Creating a Vertex Painter in Unity 3D",
      "url": "https://www.udemy.com/course/creating-a-vertex-painter-in-unity-3d/",
      "bio": "Learn how to create a fully interactive painting tool in Unity 3D, from scratch, using C# and MonoDevelop.",
      "objectives": [
        "Build your own interactive vertex painter tool for Unity 3D",
        "Create complex Scene View Tools with custom interactivity",
        "Understand more advanced Unity Tools development tricks and tips",
        "Utilize your understanding of customizing the user experience with your own tools"
      ],
      "course_content": {
        "Tool Development Basics": [
          "Introduction",
          "Setting up the Dev Environment",
          "Building the Base Editor Window",
          "Working with the Editor GUI - Part 1",
          "Working with the Editor GUI - Part 2",
          "Working with the Scene View GUI",
          "Getting User Inputs"
        ],
        "Building a Painter Tool": [
          "Detecting a Paintable Mesh",
          "Taking Control of the Scene View",
          "Adding Brush Control",
          "Getting Access to the Mesh",
          "Painting Vertex Color",
          "Programming Falloff and Custom Lerping"
        ]
      },
      "requirements": [
        "Need to have a basic understanding of C#",
        "Need to have a basic understanding of Unity 3D",
        "Having a basic understanding of creating custom inspector editors is a plus.",
        "A copy of Unity 3D is needed"
      ],
      "description": "Have you ever wondered how those amazing tools on the Unity Asset Store are created? Have you ever needed a Vertex Painter tool for your own game development projects? Then this course is just for you!\nThroughout this course we will take you step by step through the creation of your very own Vertex Painter tool inside of Unity3D! The tool that we create together will allow you to paint vertex colors, save out colors to color palettes and show you have to create a brush that control falloff, opacity, and size.\nBy the end of this course you will have gained the knowledge and confidence to build your own vertex painter tool inside of Unity3D, and other tools that your game development projects might need!",
      "target_audience": [
        "If you have no prior C# experience, then you might want to brush up a bit on that first",
        "If you have created simple tools in Unity, then this course will take you to the next level of Tools development",
        "If you want to learn how to make tools for Unity then this course is for you!"
      ]
    },
    {
      "title": "Complete 3D Space Shooter in Unity C# For Beginners 2024",
      "url": "https://www.udemy.com/course/complete-3d-space-shooter-in-unity-c-for-beginners-2024/",
      "bio": "3D Space Invaders Game in Unity for Absolute Beginners 2024",
      "objectives": [
        "Understand the basics of the Unity game development environment",
        "Dive into level design principles, including obstacles, and challenges to provide an engaging and dynamic gameplay experience.",
        "Space Shooter Creation: Learn to design and implement core features of a 3D Space Shooter, such as player controls, enemy AI, shooting mechanics",
        "Create a shooting system for the player's spaceship",
        "Introduce basic enemy AI behaviors for navigation and targeting",
        "Implement health and damage systems for both the player and enemies"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Player": [
          "Adding Player",
          "Basic Programming",
          "Player Movement"
        ],
        "Camera": [
          "Camera"
        ],
        "Shooting": [
          "Shooting Mechanics",
          "Bullets",
          "Fix Shooting",
          "Destroying Enemy"
        ],
        "Enemy": [
          "Adding Enemy",
          "Setting up Enemies",
          "Enemy movement part1",
          "Enemy movement part2",
          "Enemy shooting",
          "Randomizing enemies"
        ],
        "Scoring System": [
          "Setting up Scoring",
          "Scoring UI"
        ],
        "Health System": [
          "Health Mechanics",
          "Health UI",
          "Health System"
        ],
        "Extra": [
          "Barricades",
          "Enviroment Design",
          "Player Bullet effects",
          "Enemy Bullet effects",
          "Impact effect",
          "Respawning"
        ],
        "Levels": [
          "Adding Levels",
          "Transition between levels"
        ],
        "Audio": [
          "Setting up Audio",
          "BGM"
        ]
      },
      "requirements": [
        "Mac or PC capable of running Unity 3D",
        "A copy of Unity 2021 or newer"
      ],
      "description": "Embark on an exciting journey into the world of game development with our comprehensive course on creating a 3D Space Shooter Game using Unity and C#. Whether you're a total beginner or a programmer looking to delve into game development, this course is designed to equip you with the essential skills to bring your gaming ideas to life.\nKey Learning Objectives:\nIntroduction to Unity and C#:\nDive into the Unity game development environment and grasp the basics of C# programming for game scripting.\nBuilding the 3D Space Environment:\nSet the stage by creating a visually stunning 3D space environment, complete with dynamic backgrounds and atmospheric effects.\nPlayer Control and Movement:\nLearn how to implement responsive player controls, allowing players to navigate their spaceship smoothly through the vastness of space.\nShooting Mechanics:\nDevelop a shooting system for your spaceship, including the instantiation and destruction of projectiles for an engaging gaming experience.\nEnemy AI and Navigation:\nIntroduce lifelike enemy AI with diverse movement patterns and strategic targeting, making each encounter unique and challenging.\nHealth and Damage Systems:\nImplement health and damage systems for both the player and enemies, enhancing the realism and intensity of gameplay.\nPower-ups and Upgrades:\nDesign power-up items and an upgrade system, allowing players to enhance their spaceship's capabilities as they progress through the game.\nUser Interface (UI) Integration:\nDevelop a user-friendly interface with score displays, health bars, and game over screens, providing players with essential information and feedback.\nLevel Design and Progression:\nCreate multiple levels with increasing difficulty, mastering the art of level design and progression to keep players engaged.\nPolishing and Optimization:\nPolish your game with visual and audio enhancements, and optimize it for performance to ensure a seamless gaming experience.\nTesting and Debugging:\nAcquire essential skills in testing and debugging, addressing common issues and ensuring the stability of your game.\nPublishing Your Game:\nUnderstand the process of packaging and publishing your game on different platforms, making it accessible to a wider audience.\nWho Should Enroll: This course is perfect for beginners, aspiring game developers, and programmers eager to enter the world of 3D game development using Unity and C#. Whether you're a student, hobbyist, or self-learner, this course provides a solid foundation for turning your game development dreams into reality.\nPrerequisites: No prior game development experience is required, but a basic understanding of programming concepts is beneficial.\n\n\nJoin us on this thrilling adventure and unlock your potential as a game developer in 2024!",
      "target_audience": [
        "Those who have little to no experience in game development but are enthusiastic about learning the fundamentals.",
        "Individuals who want to explore Unity as a game development platform and understand its features and capabilities.",
        "Programmers with a background in languages like C# who want to apply their skills to game development.",
        "Students or hobbyists who have a passion for gaming and want to turn that passion into practical skills by building a complete game project.",
        "Individuals who prefer self-paced learning and online courses as a means of acquiring new skills and knowledge."
      ]
    },
    {
      "title": "UE4 Irobelly Gun Mechanics From Scratch",
      "url": "https://www.udemy.com/course/ue4-irobelly-gun-mechanics-from-scratch/",
      "bio": "Ironbelly Gun Mechanics",
      "objectives": [
        "How to create gun mechanics system in unreal engine 4 using the Ironbelly Weapons Pack."
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Lecture 2",
          "Lecture 3",
          "Lecture 4",
          "Lecture 5",
          "Lecture 6",
          "Lecture 7",
          "Lecture 8",
          "Lecture 9",
          "Lecture 10",
          "Lecture 11",
          "Lecture 12",
          "Lecture 13",
          "Lecture 14",
          "Lecture 15",
          "Lecture 16",
          "Lecture 17",
          "Lecture 18",
          "Lecture 19",
          "Lecture 20",
          "Lecture 21"
        ]
      },
      "requirements": [
        "You will need at the very least 1 gun from Ironbelly pack, 3 guns would be ideal."
      ],
      "description": "Many have asked to make this course, and now it is here! You will learn how to set up a great gun mechanics system in unreal engine 4, using there visual scripting. This course will break down the complexity of good gun mechanic system. We will be diving deep into visual scripting, animation, montages, variables, structs, and even curves. There is alot to take from this course.",
      "target_audience": [
        "Beginner and intermediate students."
      ]
    },
    {
      "title": "The Complete Beginner's Guide to Unity for Game Development",
      "url": "https://www.udemy.com/course/3dmotive-the-complete-beginners-guide-to-unity-for-game-development/",
      "bio": "This course gives a complete tour of ALL the key features and aspects of Unity you need to know for building games!",
      "objectives": [
        "By the end of this course, you should have a thorough understanding of the Unity Game Engine",
        "You should understand the principles of the Unity Interface, building terrain and gameplay spaces, lighting, basic scripting, and post processing",
        "You should understand the basics of debugging your game, as well as learn how to deploy and distribute it."
      ],
      "course_content": {
        "Volume 1 - An Introduction to Unity": [
          "Download Course Files Here!",
          "Introduction",
          "Getting Started",
          "Setting Up the Interface",
          "Unity GUI",
          "Viewport Navigation",
          "More Viewport Navigation",
          "The Object Inspector",
          "Translate, Rotate and Scale",
          "Scene vs. Game Mode",
          "Asset Creation 2",
          "Creating a Project",
          "Importing Assets from Maya",
          "Preparing to Build a Scene",
          "Building a Scene",
          "Exploring the Scene in First Person",
          "Lighting the Scene",
          "Finishing the Scene",
          "Unity Fundamental Concepts",
          "GameObjects and Components",
          "Prefabs and Layers"
        ],
        "Volume 2 - Assets, Materials, and Terrain": [
          "Introduction",
          "Assets Overview",
          "Searching for Assets",
          "Asset Browser",
          "Preparing Textures for Import",
          "Asset Packages",
          "Materials Overview",
          "Bumped Diffuse Material",
          "Bumped Specular Material",
          "Moving Further with Materials",
          "Getting Started with Terrains",
          "Sculpting Terrains",
          "Painting Terrain Textures",
          "Adding a Skybox",
          "Adding Trees to the Terrain",
          "Adding Grass to the Terrain",
          "Adding Detail Meshes to the Terrain"
        ],
        "Volume 3 - Lighting and Particles": [
          "Introduction",
          "Light Types",
          "Ambient Light",
          "Render Paths",
          "Lightmapping Overview",
          "Baking Lightmaps",
          "Lightmap Resolution",
          "Lightmap Settings",
          "Dual Lightmaps",
          "Particle Systems Overview",
          "Getting Started with Shuriken",
          "Graphing Particles",
          "Particle Textures",
          "Completing the Particle System"
        ],
        "Volume 4 - Game Scripting and Audio": [
          "Introduction",
          "Creating a Project",
          "Importing Assets",
          "Lights, Camera, Action!",
          "Rigid Body Physics",
          "Physic Materials",
          "Getting Started with Scripting",
          "Hello World",
          "Unity Documentation",
          "Starting to Code the Game Logic",
          "Detecting User Input",
          "Calculating Rotation",
          "Rotating the Maze",
          "Constraining Rotation",
          "Add a Collider",
          "Working with Triggers",
          "Audio Assets",
          "Audio Sources and Listeners",
          "Completing the Game"
        ],
        "Volume 5 - Post Processing, Debugging, Optimization, and Distribution": [
          "Introduction",
          "Preparing for Image Effects",
          "Grayscale and Sepia Tone",
          "Fish Eye and Twirl",
          "Noise",
          "Bloom and Lens Flares",
          "Vignetting and Chromatic Aberation",
          "Toon Shading",
          "Debugging with the Stats Panel",
          "Exploring the Object Inspector",
          "Debug Printing with the Console",
          "The Profiler",
          "Building and Distribution",
          "Bonus Lecture: Further Learning with 3dmotive"
        ]
      },
      "requirements": [
        "A free copy of the Unity game engine, available here - http://unity3d.com/unity/download/",
        "Autodesk's Maya is strongly recommended - thought not mandatory"
      ],
      "description": "In this extensive tutorial series, instructor Alan Thorn takes us through a comprehensive look at the Unity Game Engine. If you've ever been curious about making games, or wondered what Unity has to offer, this course has everything you need to get you started with the engine. Ranging from an overview of the UI, all the way through Terrain, Lighting, Scripting, Post Processing, Debugging, and so much more!\n(Students - please look under Section 1 / Lecture 1 downloads for the source files associated with the lesson.)\nMore about the Instructor:\nAlan Thorn is a freelance game developer and author with over 12 years of industry experience. He is the founder of London-based game studio, Wax Lyrical Games, and is the creator of award-winning adventure game Baron Wittard: Nemesis of Ragnarok.\nHe has worked freelance on over 500 projects worldwide including games, simulators, kiosks and augmented reality software for game studios, museums and theme parks. He has spoken on game development at universities throughout the UK, and is the author of nine books on game development, including Teach Yourself Games Programming, Unity 4 Fundamentals and the highly popular UDK Game Development.",
      "target_audience": [
        "Complete beginners to making games",
        "Anyone new to Unity, or for those interested in brushing up their skillset"
      ]
    },
    {
      "title": "Unity Game Tutorial: Whack A Mole 3D",
      "url": "https://www.udemy.com/course/unity-tutorial-whack-a-mole-3d/",
      "bio": "In this Unity Course i will teach you how to create Whack A Mole 3D Game from scratch.",
      "objectives": [
        "You will have a full Whack A Mole game to publish anywhere.",
        "You will have more knowledge in C#."
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Basic Setups": [
          "Import & Set Mole Animations",
          "Animator Controller",
          "Snapping & Prefabs",
          "Ground & Camera",
          "Come Down Animation"
        ],
        "Scripting with C#": [
          "Spawning Moles",
          "Destroying Moles On Animation End",
          "Prepare Collision Detection",
          "Handling Colliders",
          "Hitting Moles",
          "Destroy Moles On Hit",
          "Quick Recap"
        ],
        "Game Features": [
          "Hit Points",
          "Avoid Double Spawn",
          "Score Manager",
          "UI Manager",
          "Play Timer",
          "Win & Lose Condition",
          "Optimize Show Score",
          "Level Up System",
          "More Moles",
          "Spawn Rarity",
          "More Score for Moles",
          "Pop Up Text Animation",
          "Pop Up Text Coding",
          "Score Fix & Countdown #1",
          "Countdown #2",
          "Particle Effect",
          "Instantiate Particles",
          "Game Over Scene",
          "Reset Score on Restart",
          "Blinking Text in Game Over Scene",
          "Main Scene",
          "Clean Up"
        ],
        "Ideas & Student Requests": [
          "Ideas",
          "Request #1 - Spawning Holes"
        ]
      },
      "requirements": [
        "Basic knowledge with Unity and C# is always a plus but not neccessary.",
        "Unity 5.3 or higher.",
        "Inkscape or any other graphic program to create Icons, Buttons and so on."
      ],
      "description": "In this Unity Video Course i will teach you how to create Whack A Mole 3D Game using the Unity Game Engine. You can later on upload to final Game to a website, build an app from it or even put on Steam if they let you ;).\nThe course topics are the following:\nInkscape\nwe are using Inkscape which is free to create:\nTexture Sheet for the Particles\nTexture Sheet for Countdown Grafics\nUnity\nYou will learn to create the complete process in Unity and setup everything needed\nYou learn how to import and setup the provided Mole 3D Models as well as the Hole\nWe use the Canvas System for Grafics or Score later which requires Unity 4.6+\nWe go over Raycasting, Countdown System, Timer, Score Popups\nC#\nWe will put in functionality with scripts using Monodevelop and C# (you can also use Visual Studio)\nWe will create code for all funtionalitys for all systems as for timer, spawning moles etc.\nIt's time to Whack some Moles ;)\nLevel: Beginnner\nVideo Course Length: ~4hours\nUnity Version required: 5.3+",
      "target_audience": [
        "If you ever want to finish your first game.",
        "If you are new to game developement.",
        "If you want to create a Whack A Mole game."
      ]
    },
    {
      "title": "Learn Unity's New UI Tools",
      "url": "https://www.udemy.com/course/learn-unitys-new-ui-tools/",
      "bio": "An introduction to the UI tools added in Unity 4.6, create a game primarily using those new UI tools.",
      "objectives": [
        "Create a flexible UI (User Interface) in Unity",
        "Create a game from start to finish",
        "Use some advanced C# ideas like yields and coroutines"
      ],
      "course_content": {
        "Introduction": [
          "Welcome!",
          "What are we doing here? Who is this for?",
          "The Game, what is it?"
        ],
        "The Game - Buttons!": [
          "Our First Button",
          "Four Buttons",
          "A Flexible Grid of Buttons",
          "Buttons - Their True Colours"
        ],
        "The Game - A Start Button": [
          "Start Button Anchors",
          "Start Button Text"
        ],
        "The Game - Scripting": [
          "Variables",
          "Start And Bind",
          "The Sequence",
          "Sequence Test",
          "Emulating a Button Press",
          "Handling a Button Press"
        ],
        "The Game - I Can't Hear Anything!": [
          "Sound"
        ],
        "The Game - Finishing Moves": [
          "High Scores",
          "The Need for Speed"
        ],
        "The Game - Settings": [
          "Settings - Title and Volume Slider",
          "Settings - Difficulty Toggle",
          "Settings - Scripting - Settings Manager",
          "Settings - Scripting - Volume Slider",
          "Settings - Scripting - Difficulty Toggle",
          "Settings - Scripting - MenuManager",
          "Settings - Settings Button and Animations",
          "Settings - Scripting - This game is so difficult!"
        ],
        "Conclusion": [
          "Conclusion"
        ]
      },
      "requirements": [
        "You should have Unity 4.6 or greater already installed"
      ],
      "description": "Welcome to this course on Unity3D’s new UI Tools introduced in Unity 4.6.\nIn this course we will create a Simon Says style memory game from scratch primarily using these new UI Tools. You will become familiar with concepts like anchors, rect transforms, canvases and on the way learn some powerful C# scripting techniques like yields and coroutines.\nThis course is aimed at game developers who have a basic understanding of Unity and C# scripting but who need a bit of practice getting to grips with the new UI features.\n\nThankyou for your interest in this course, let’s create a game together.",
      "target_audience": [
        "This Unity course is meant for game developers that have a basic understanding of Unity and C# scripting"
      ]
    },
    {
      "title": "Unity Multiplayer - Create Battle Royale with Photon Quantum",
      "url": "https://www.udemy.com/course/photon-quantum-3-beginner-course/",
      "bio": "Learn the cutting-edge multiplayer framework, without writing any networking code!",
      "objectives": [
        "Create a multiplayer game with writing no netcode",
        "Get the basic understanding of the Photon Quantum",
        "Learn about the ECS design pattern",
        "Create a simple battle royale brawler"
      ],
      "course_content": {
        "Course Prerequisites": [
          "Course Requirements",
          "Accessing The Code Of Each Lecture",
          "Discord community"
        ],
        "Getting Started with Photon Quantum": [
          "Introduction To Photon Quantum",
          "Pros & Cons of Quantum",
          "Importing Quantum and Starter Assets into Unity",
          "Asset Credits",
          "Quantum Folder Structure and Creation of the First System"
        ],
        "Character Setup & Input": [
          "Lesson 5 - Creating Our First Entity and Movable Character",
          "Syntax Highlighting For Quantum Files",
          "Lesson 6 - Reading Users Input & Creating Custom Component",
          "Lesson 7 - Following The Player"
        ],
        "Frames, Spawning & Environment Interaction": [
          "Lesson 8 - Predicted and Verified Frames; Animating Humanoid Character",
          "Lesson 9 - Spawning on Spawn Points",
          "Lesson 10- Rotating the player, populating the environment",
          "Lesson 11 - Hiding in Grass"
        ],
        "Shooting, Asset Objects, Quantum Signals, Data Driven Polymorphism": [
          "Lesson 12 - Shooting Mechanics, Asset Objects",
          "Lesson 13 - Creating Bullets, Introduction to Signals",
          "Lesson 14 - Moving The Bullets, Bullet Collision Detection",
          "Lesson 15 - Damageables",
          "Lesson 16 - Data Driven Polymorphism",
          "Lesson 17 - Reacting to health changes, reading username, fixing animation issue"
        ],
        "Pickup items": [
          "Lesson 18 - Pickup Items",
          "Lesson 19 - Visualizing Pickup Time, Creating Health Pickup",
          "Lesson 20 - Weapon Pickup Part 1",
          "Lesson 21 - Weapon Pickup Part 2",
          "Lesson 22 - Weapon Pickup Part 3",
          "Lesson 23 - Player Sillouete when behind the obstacles"
        ],
        "Shrinking Circle": [
          "Lesson 24 - Shrinking Circle & Union",
          "Lesson 25 - Shrinking Circle Part 2 - Partial structs & Shrinking Circle System",
          "Lesson 26 - Shrinking Circle Part 3 - Updating Radius, Damaging the Player",
          "Lesson 27 - Shrinking Circle Pt4 - Fixing health UI bug, showing circle."
        ],
        "More pickup items, loot drop, different shooting mechanics": [
          "Lesson 28 - Ammo Pickup",
          "Lesson 29 - Loot Drop",
          "Lesson 30 - Shotgun & Other Weapons"
        ],
        "Game State": [
          "Lesson 31 - Game State Part 1",
          "Lesson 32 - GameState Part 2"
        ],
        "Character Selection": [
          "Lesson 33 - Character Selection Part 1",
          "Lesson 34 - Character Selection Part 2 - UI Representation of Character Model",
          "Lesson 35 - Character Selection Part 3 - Creating the Character Selection UI",
          "Lesson 36 - Character Stats"
        ]
      },
      "requirements": [
        "Students should be familiar with the Unity Editor and",
        "Students should be familiar with C# concepts such as : how the memory works (value types vs reference types, pointers), inheritance and polymorphism"
      ],
      "description": "Photon Quantum 3 is the latest and greatest installment of the Deterministic Multiplayer Framework coming from the creators of one of the most popular Multiplayer Frameworks for Unity -> Photon Unity Networking (PUN) and Photon Fusion\nIn this course you will learn how to create a battle royale game using Photon Quantum 3 from the ground up. You don't have to have any previous knowledge in regards to Quantum, you will learn everything you need to know in this course.\nBy the end of the course you will grasp the basic and intermediate concepts of Photon Quantum 3. You’ll have a solid understanding of how to set up core multiplayer features, create engaging gameplay mechanics, and structure your project for long-term scalability. Ultimately, you’ll feel confident applying these techniques to develop your own unique multiplayer experiences.\nYou’ll gain insights into integrating smooth character movement, managing player interactions, and handling game state transitions. Whether you’re looking to build a small prototype or scale up to a fully fleshed-out multiplayer game, this course provides you with a strong foundation to build upon. With what you’ve learned, you’ll be able to try out new ideas, make your game feel better, and keep your players excited and entertained.",
      "target_audience": [
        "For Unity Developers who would like to create a multiplayer game without the need to worry about writing any multiplayer code."
      ]
    },
    {
      "title": "Make A Classic Pong Game, Javascript & P5.js Framework",
      "url": "https://www.udemy.com/course/pong-game-javascript-p5js/",
      "bio": "Learn Javascript By Making Games",
      "objectives": [
        "Be able to declare and assign variables in JavaScript",
        "Be able to use conditional statement and coordinate system in JavaScript",
        "Be able to understand the foundation of 2D game including the setup and draw cycle",
        "Be able to apply new idea to the existing game"
      ],
      "course_content": {
        "A Classic Pong Game": [
          "Introduction",
          "P5.js Basics",
          "Coordinate System",
          "Draw The Line",
          "Draw The Paddle",
          "Move The Paddle",
          "Ball's Collision",
          "Paddle's Collision",
          "Computer AI",
          "Score System",
          "Freeze The Ball",
          "Share Your Project"
        ]
      },
      "requirements": [
        "Basic knowledge of Javascript or coding in general",
        "Basic knowledge of web browser"
      ],
      "description": "Let's make a classic Pong game using free online P5js editor\nHello, my name is Saran. In this class, I will show you how to make a simple, easy to follow, classic Pong game using Javascript and P5js framework.\nIn the class, we will\ndraw lines\nadd paddle\nmake the paddle move using keyboard\nmake a bouncing ball\nadd the computer\nadd the score system.\nIf you are ready, let’s open the next lesson, and get started.",
      "target_audience": [
        "Anyone who wants to learn coding",
        "Anyone who loves games and wants to make games"
      ]
    },
    {
      "title": "Mastering Unity Muse",
      "url": "https://www.udemy.com/course/unity-muse/",
      "bio": "Your complete guide to generative AI tools in the Unity Game Engine",
      "objectives": [
        "Install Unity's Muse Tool Packages for Textures, Sprites, Animations, Behaviours and Chat",
        "Develop effective prompts to use with generative AI to get desired results",
        "Identify uses of generative AI in game development",
        "Complete short Unity projects with generated texture, sprite, animation and behaviour content"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "What is Muse?",
          "Join the H3D Social Community",
          "FAQs"
        ],
        "Textures": [
          "Latent Diffusion",
          "A Quick Glance at Muse Textures",
          "Prompting Like A Pro Part 1",
          "Prompting with Images",
          "Generated Texture Options",
          "Creating a PBR Material from a Generated Texture",
          "Interior Decorating Challenge",
          "Editing a Texture Challenge"
        ],
        "Sprites": [
          "The Sprite Generator",
          "Prompting Like a Pro Part 2",
          "The Style Trainer",
          "Creating 2D Background Illustrations",
          "Editing Sprites"
        ],
        "Animation": [
          "The Animation Generator",
          "Using an Animation on a Character",
          "Editing Muse Animations Part 1",
          "Editing Muse Animations Part 2",
          "Editing Muse Animations Part 3",
          "Manually Customising Muse Animations",
          "Muse Animation Challenge"
        ],
        "Behaviour": [
          "Behaviour Trees",
          "Behaviour Settings and Arguments",
          "Branching to Other Behaviours",
          "The Structure of Behaviours",
          "The Anatomy of an Action",
          "Success or Failure",
          "A Simple AI Generated Action Node Script",
          "Using Generative AI to Create a Complex Action",
          "Exploring the AI Generated Action Node"
        ],
        "Chat": [
          "Installing Muse Chat",
          "Negotiating with the AI",
          "Reading the Fine Print",
          "Expanding on an Idea",
          "Prompting for Development Success Part 1",
          "Prompting for Development Success Part 2"
        ],
        "Working with Muse Chat": [
          "A Worked Example Part 1",
          "A Worked Example Part 2",
          "A Worked Example Part 3",
          "A Worked Example Part 4",
          "A Worked Example Part 5",
          "A Worked Example Part 6"
        ],
        "Conclusion": [
          "Final Words"
        ]
      },
      "requirements": [
        "Familiarity with the Unity Game Engine is recommended"
      ],
      "description": "Welcome to \"Mastering Unity Muse,\" an in-depth course designed to guide you through Unity’s powerful new Muse Generative AI tool, enabling you to create stunning textures, sprites, animations, and more, all within the Unity ecosystem. Unity Muse is available as a 15 day free trial - plenty enough time to get through this course and gain a thorough understanding of how AI is revolutionising game development.\nIn this course, you’ll explore the cutting-edge concept of latent diffusion, gaining a deep understanding of how this AI model is trained to generate high-quality images. Whether you’re new to generative AI or an experienced developer looking to integrate AI into your Unity projects, this course offers something for everyone.\nWith hands-on tutorials, challenges, and walkthroughs, this course provides a thorough grounding in using Muse for creating textures, sprites, and animations. You’ll begin by learning how to use the Muse Texture tool, where you’ll start writing prompts to guide the creation of textures, utilize reference images and patterns, and refine your generated textures using various editing options.\nThroughout the course, you’ll be challenged to create your own set of textures, transforming non-seamless textures into seamless ones and applying these to 3D game objects. You’ll also delve into creating PBR materials from these textures to decorate rooms and furniture in Unity.\nIn the sprite generation section, you’ll learn to install and use the Muse Sprite Generator, explore adding extra characteristics to your prompts, and create your own sprite styles using the Style Trainer. By the end of this section, you’ll have the skills to generate and refine 2D backgrounds, and edit sprites to meet your desired outcomes.\nThe course also covers the Muse Animate module, where you’ll gain a quick overview of its features, set up characters, and use Muse-generated animations. You’ll get a crash course in walk cycles, explore animation curves, and learn how to manipulate and manually adjust animation keyframes to add custom actions.\nFinally, you’ll dive into the Muse Behavior Tree tool, where you’ll create and debug behavior trees, learn how to script custom actions using generative AI and use Muse Chat to create simple scripts, modify code, and even develop procedural terrain.\nThis course concludes with advanced techniques for improving your AI prompts, ensuring you get the most out of Muse Chat.\nCourse Highlights:\nLatent Diffusion & Texture Generation: Understand the fundamentals of generative AI and create seamless textures for your game objects.\nSprite & Animation Creation: Learn to generate and refine sprites, set up character animations, and control animation curves for smooth, lifelike motions.\nBehavior Trees & AI Programming: Build complex behavior trees, script actions using AI, and learn to debug and optimize your code.\nMuse Chat Integration: Create scripts and procedural content with AI assistance, enhancing your coding capabilities and learning how to modify and expand AI-generated code.\nBy the end of \"Mastering Unity Muse,\" you’ll be equipped with the skills to harness the Muse Generative AI tool, bringing your creative visions to life with ease and precision. Join us on this exciting journey into the future of game development with AI!\nWhat others are saying about Penny's courses:\nAndrew C:  Another amazing course. Goes into a lot of depth without feeling overwhelming. Very step by step and easy to follow. The course gives a lot of insight into the math underlying common operations. I will definitely be able to use this to understand what happened when things go wrong, and also build my own lower level code. A+.\nPierce K: Penny's courses are great -- I keep going back for more.\nBertan Ç: As a game developer with 3+ years experience under his belt, I would like to say that I have learned a lot, and also improved on what I knew already before the course. The instructor and the course is very easy to follow, and I believe people from all experience levels could learn something from this course. Thank you!",
      "target_audience": [
        "Any game programmers, artists or hobbyists wanting to keep up to date with the latest AI tools available in Unity."
      ]
    },
    {
      "title": "Modern OpenGL 3.3 with C++/GLSL for beginners",
      "url": "https://www.udemy.com/course/modern-opengl/",
      "bio": "Learn OpenGL through C++ to handle your Application or Game Engine.",
      "objectives": [
        "You will learn how to work with Graphics library.",
        "You will learn how to draw Objects in 2D and 3D spaces.",
        "You will learn how to code for GLSL (Shader language).",
        "You will learn how to make a light for your object.",
        "You will learn how to load your 3D models from other software to your own application.",
        "You will learn Graphics User Interface that includes Button,Slider,Color Editor...etc."
      ],
      "course_content": {
        "Introduction": [
          "[1] [What is OpenGL]",
          "[2] [Github Sources]"
        ],
        "Setup": [
          "[1] [Setup on Visual Studio] (recommended)",
          "[2] [Setup on Visual Studio Code]",
          "[3] [Build on Linux]",
          "[4] [Build on Windows]"
        ],
        "2D Space": [
          "[1] [Hello Window]",
          "[2] [Classic OpenGL] <Optional>",
          "[3] [Vertex] (Theory)",
          "[4] [Vertex Buffer Object]",
          "[5] [Vertex Array Object]",
          "[6] [Rectangle]",
          "[7] [Element Buffer Object]",
          "[8] [What is Shader] (Theory)",
          "[9] [Vertex and Fragment Shader]",
          "[10] [Hello Rectangle]",
          "[11] [Uniforms]",
          "[13] [Sin and Cos]",
          "[13] [Color Attributes 1]",
          "[13] [Color Attributes 2]",
          "[14] [Shader Class 1]",
          "[14] [Shader Class 2]",
          "[14] [Shader Class 3]",
          "[14] [Shader Class 4]",
          "[15] [View Ports]",
          "[16] [User Input]",
          "[17[ [Mouse Cursor]",
          "[18] [Mouse Scroll]",
          "[19] [What is GLM] (Theory)",
          "[20] [Setup glm]",
          "[21] [What is vector] (Theory)",
          "[22] [What is matrix] (Theory)",
          "[23] [glm vector]",
          "[24] [glm matrix]",
          "[25] [Translate]",
          "[26] [Rotate]",
          "[27] [More than 1 object]",
          "[29] [Setup stb_image]",
          "[30] [Texture Coordinates Attribute 1]",
          "[30] [Texture Coordinates Attribute 2]",
          "[31] [Load Texture]",
          "[32] [Flipping Texture]",
          "[33] [Colors and TexCoords Attribute]",
          "[34] [Format]",
          "[35] [Texture Split 1]",
          "[35] [Texture Split 2]",
          "[35] [Texture Split 3]",
          "[36] [Mipmaps] (Theory)",
          "[37] [Filter Options]",
          "[38] [Mix Textures]",
          "[39] [Simple Quiz]",
          "[40] [Triangle Texture]"
        ],
        "3D Space": [
          "[1] [What is Coordinate System] (Theory)",
          "[2] [Jumping to 3D Coordinate]",
          "[3] [Cube]",
          "[4] [Pyramid]",
          "[5] [Line width]",
          "[6] [Mulitple Object]",
          "[7] [lookAt]",
          "[8] [Walk Around]",
          "[9] [Smooth Movement]",
          "[10] [look Around]",
          "[11] [Zoom]",
          "[12] [Camera Class 1]",
          "[12] [Camera Class 2]",
          "[12] [Camera Class 3]"
        ],
        "Graphics User Interface (GUI)": [
          "[1] [Setup Dear ImGui]",
          "[2] [Your first GUI]",
          "[3] [GUI Demo Window]",
          "[4] [Drag Float]",
          "[5] [Drag Float 2-3]",
          "[6] [Slider Float]]",
          "[7] [Color Edit]",
          "[8] [Checkbox]",
          "[9] [Checkbox 2]",
          "[10] [Add a slider for Alpha ]",
          "[11] [Slider Angle]",
          "[12] [ini file]",
          "[13] [Button]",
          "[14] [Button 2]",
          "[15] [FPS]",
          "[16] [Same Line]",
          "[17] [Quiz]"
        ],
        "Lightings": [
          "[1] [Code clean up]",
          "[2] [Light Cube Shader 1]",
          "[2] [Light Cube Shader 2]",
          "[3] [Light and Object color]",
          "[4] [Normals]",
          "[5] [Ambient]",
          "[6] [Diffuse]",
          "[7] [Specular]",
          "[8] [Shininess]",
          "[9] [Moving around object]",
          "[10] [Transpose and Inverse]",
          "[11] [Material Struct]",
          "[12] [Light Struct]",
          "[13] [Material and Light with GUI]",
          "[14] [Diffuse Maps]",
          "[15] [Specular Maps]",
          "[16] [Directional Lights]",
          "[17] [Point Lights]",
          "[18] [Spot Lights]",
          "[19] [Soft Spot Light]",
          "[20] [Directional light function]",
          "[21] [Point light function]",
          "[22] [Spot light function]",
          "[23] [Render multiple lights]",
          "[24] [Project] <optional right now>"
        ],
        "Model Loading": [
          "[1] [Setup Assimp on windows]",
          "[2] [Mesh Class]",
          "[2] [Mesh Class 2]",
          "[3] [Model Class]",
          "[4] [Texture From File]",
          "[5] [Load Material Texture]",
          "[6] [Process Mesh]",
          "[7] [Process Node]",
          "[8] [Load Model]",
          "[9] [Render model]",
          "[10] [Sponza Model]",
          "[11] [Load Model form Blender]",
          "[12] [Light testing for Model 1]",
          "[13] [Light testing for Model 2]"
        ]
      },
      "requirements": [
        "have ability to understand C++ basics",
        "Windows or Linux",
        "Visual Stduio , Visual Studio Code or (TERMINAL)"
      ],
      "description": "Hey this is Modern OpenGL course in this course you will learn how to render in 2D/3D space,\nand one of the best thing of this course it that you can find all source codes from Github and you won't waste so much time to find codes only with one click you can get it :)\nyou will gain a lot of things like ->\n2D Drawing\n3D Drawing\nTexturing\nLighting\n3D Rendering\nShaders/GLSL\nModel Loading\nC++ Programming\nC++ Game Development\nOpenGL is the most popular graphics library in the world, most mobile games use OpenGL and many other applications as well.\nYou will be provided with the full source code to aid in development during and after this course. The source code is free to use in as many projects as you wish.\ndue to the course is free so feel free also to enjoy the course and get a better experience to code\nin c++.\nTo summarise this is what you get:\n• Lifetime access to HD quality videos. No monthly subscription. Learn at your own pace, whenever you want.\n• All videos are downloadable. Learn wherever you want, even without an internet connection!\n• Downloadable starter code and final code for each section.\n• Free helpful support in the course Q&A when you have questions or get stuck.\n• Multiple coding challenges to practice your new skills (solutions included).\n\n\n\"Based on LearnOpenGL\" by Joey de Vries.",
      "target_audience": [
        "Beginners in Graphics programming like OpenGL",
        "Game Developers",
        "Graphic Programmers"
      ]
    },
    {
      "title": "Unreal Engine 5 Blueprints Multiplayer CRASH COURSE",
      "url": "https://www.udemy.com/course/ue5-blueprint-multiplayer-crash-course/",
      "bio": "Quickly learn the fundamentals of Unreal Engine's Multiplayer Framework in this BLUEPRINT ONLY COURSE!",
      "objectives": [
        "Learn how multiplayer works in Unreal Engine 5",
        "Learn how the different core classes work in the engine such as the Game Mode, Game State, Player State, Player Controller, Character, and more",
        "Learn how to replicate variables, send remote events, replicate movement, and travel to different levels in multiplayer",
        "Learn attachment, component replication, replication conditions, and custom replication",
        "Learn the pitfalls of multiplayer and how to avoid them"
      ],
      "course_content": {},
      "requirements": [
        "Basic understanding of Unreal Engine and Blueprints is required"
      ],
      "description": "It's time to learn Multiplayer Gameplay Programming in Unreal Engine! Using 100% Blueprints!\nIn this CRASH COURSE, you will quickly learn the fundamentals of Unreal Engine Multiplayer. You will gain the skills to program multiplayer gameplay in any game genre!\nMany students struggle with multiplayer. Trust me, I've been there! In my 10+ years of experience of Unreal Engine gameplay programming, I've learned many lessons the hard way. I've found that multiplayer gameplay programming can be easy, as long as you understand the core principles behind multiplayer theory and how Unreal Engine's framework is built around multiplayer at its core.\nTo program your games for multiplayer, you don't have to be an expert. You simply need to learn the basic concepts behind what makes multiplayer games work. This course is a condensed summary of the core principles you must understand to program multiplayer games.\nAfter completing this course, you will understand the fundamentals of multiplayer theory, how Unreal Engine implements multiplayer, and how upgrade your single player games to multiplayer, and how to structure your games for multiplayer from the start of your project's creation!\nThis course dives deep into multiplayer theories, and you will be presented with a challenge to test your understanding of each topic so that you can get hands-on experience implementing each technique. After trying out each challenge on your own, you will then watch me solve each challenge and provide you with the steps to complete the problem. Each topic is summarized in a concise recap, and each section ends with a quiz to test your understanding so that you can continue onto the next topic with confidence.\nThis course is structured into the following sections:\nMULTIPLAYER FUNDAMENTALS\nWe will introduce the core multiplayer terms and concepts, including:\nThe Client-Server Model - how it differs from Peer-to-Peer connections, and how Unreal Engine uses this model\nTesting Multiplayer - How you can easily simulate standalone, listen server, and dedicated server games in the engine's Play-In-Editor (PIE)\nLAN Connection - You will create a LAN game, connecting with other computers in your own local network\nListen Servers Via Steam - I provide you with a plugin that allows you to quickly connect to other players via the Steam Online Subsystem\nACTOR REPLICATION\nActors are the heart of Unreal Engine levels. Actors possess the capability to replicate.\nActor Replication - You will see how easy it is to enable replication for Actors, how this allows for the replication of variables, and how to replicate movement to sync the server and client versions of each Actor\nAuthority and Net Role - Once you understand these simple yet crucial concepts, you will understand how to determine which machine a given Actor is on, affording you the power to make important gameplay decisions for your logic\nAttachment - All games involve some form of attachment. You must learn how attachment works in multiplayer for Actors (or doesn't work, if you don't know what you're doing)\nVariable Replication - The crux of multiplayer programming. Replicated variables are the workhorse of all multiplayer games and you will see just how easy it is to make them (and thus how responsible you have to be)\nRep Notifies - Sometimes, you just want to trigger a response of a variable's replication. Rep Notifies are functions designed to trigger in response to variable replication, and even access the pre-replicated value.\nReplication Conditions - Variables replicate when they change. You have the power to decide whether that happens and when, and to which machines, under what circumstances. You learn how in this lecture.\nCustom Rep Conditions - Your games may grow complex. You may find that you need a variable to only replicate sometimes, based on a custom condition you concoct. You will learn how.\nOwnership - You cannot program in multiplayer effectively unless you understand what Ownership means in Unreal Engine. This includes owning connection: which machine is in charge of the object in question. This will be demystified for you in this lecture.\nActor Components - Components can replicate too, but you need to understand how that happens, and how their owning net connection is tied to their owning Actor.\nREMOTE EVENTS\nOne of the most powerful tools in Unreal Engine's multiplayer framework, remote events do what replicated variables cannot.\nRun on Client - When you need to call an event on the server and have it execute on the owning client, Run on Client Events are your go-to.\nRun on Server - While replication only works from server-to-client, Run on Server Events are how you get information from client to server.\nMulticast - With great power comes great responsibility. To call a function on the server and have it run on all clients, Multicast Events are the tool to use.\nRelevancy and Priority - Net updates aren't just always happening - sometimes, Actors aren't relevant to other Actors. In addition, some Actors must replicate more often than others. This lecture shows you how relevancy and priority works.\nCLASS FRAMEWORK\nUnderstanding which class is designed for which task can greatly simplify your project's overall structure. You must understand what each core engine class is used for to program your games for multiplayer effectively.\nThe Game Mode - Avoid noob mistakes like trying to access the Game Mode on clients. Learn how the Game Mode dictates the rules of the game and the default classes that are spawned\nThe Game State - Information about the game, which needs to replicate to clients, is stored on this class.\nThe Player State - Where should you store your players' scores? Their teams? Player-specific data rests on this very important class\nThe Player Controller - Representing you as a player, the Player Controller owns your net connection and your Pawn or Character traces its ownership back to this class\nPawn and Character - Every player needs a visible Avatar. How do they work in multiplayer? This lecture has you covered\nHUD and Widgets - How are these visual elements handled in multiplayer? Can you replicate them? (spoiler: you can't!)\nStatic Accessor Functions - Why do we always call these functions, passing in a 0 for the player index when we don't really know what to pass in? Beware of the pitfalls when using these static accessor functions, and the alternatives you can use instead when unsure\nTRAVEL IN MULTIPLAYER\nAt some point, your game needs to change levels. All connected players in a multiplayer game must be moved to another level. How does this work? You will learn how.\nTravel - We discuss the different travel types and how to implement them.\nImplementing Seamless Travel - The final challenge to this course, you will implement seamless travel, migrating each client in the game to another map without disconnecting them.\nBy the end of this course, you will fully understand the fundamentals of the Unreal Engine multiplayer framework. You will be able to program your games for multiplayer, no matter the genre. This course will serve you as a reference manual you can refer back to, skipping to lectures specific to each topic for a refresher.\nI recommend that all of my students take this course before taking any of my more advanced multiplayer courses!\nThis course assumes you already understand the basics of Unreal Engine Blueprints. If you have made at least one Unreal Engine project, or you have completed my Unreal Engine 5 Blueprints - The Ultimate Developer Course, you're ready.\nReady to finally understand how multiplayer works in Unreal Engine? It's not difficult! You just have to understand the fundamentals.\nI'll see you soon,\nStephen",
      "target_audience": [
        "Those who wish to learn Unreal Engine multiplayer",
        "Those who wish to upgrade their single-player projects for multiplayer",
        "Those who wish to tackle advanced Unreal Engine multiplayer concepts like GAS"
      ]
    },
    {
      "title": "Make 10 Advanced Pro Games in C++ using SDL2",
      "url": "https://www.udemy.com/course/make-10-advanced-pro-games-in-c-using-sdl2/",
      "bio": "Learn to make Professional Level Stunning Games using the most powerful C++ Graphical Library SDL2",
      "objectives": [
        "Learn to make 10 Professional Level Games in C++",
        "Learn SDL2 : The most powerful C++ Graphical Library in C++",
        "Learn to make any type of Game in C++ using SDL2",
        "Learn to have a blueprint of making any type of Game"
      ],
      "course_content": {
        "Setting up C++ and SDL2": [
          "Introduction"
        ],
        "Car Racing Game in C++ using SDL2 Library": [
          "Get All Code and Image Files",
          "Displaying Game Window",
          "Creating Renderer for the Game",
          "Game Loop and Event Handler Function",
          "Road Movement",
          "Grass and Trees Movement",
          "Player Car Movement",
          "Opponent Car Movement",
          "Collision Detection between Opponent and Player Cars",
          "Checking Road Sides Collision",
          "Score Functionality"
        ],
        "Google Dino Game in C++ using SDL2 Library": [
          "Get all Codes and Image Files",
          "Displaying GUI Window",
          "Quit Event",
          "Putting the Dino on SDL2 Window",
          "Handling Dino Jump and Applying Gravity",
          "Creating a Ground Scrolling Effect in the Game",
          "Obstacles Movement",
          "Putting Pteras at Different Altitudes",
          "Collision Detection Function",
          "Game Over Conditions",
          "Replay Game",
          "Complete Game - Final Explanation"
        ],
        "Space Invader Game in C++ using SDL2 Library": [
          "Get all Image Files",
          "Gaming Window - Creation Part",
          "SDL Poll Close Event",
          "Displaying the Spaceship",
          "Spaceship Movement",
          "Spaceship Fire",
          "Enemies Movement",
          "Collision Detection b/w Spaceship and Enemies",
          "Killing Enemies on Bullet Fire",
          "Game Over Functionality",
          "Replay the Game"
        ],
        "Brick Breaker Game in C++ using SDL2 Library": [
          "GUI SDL2 Window Creation Part",
          "Displaying the Ball",
          "Event Handler Function",
          "Setting up the Background Image",
          "Ball Movement",
          "Ball Collision with the Walls",
          "Bat Movement",
          "Bat Ball Collision",
          "Bricks Initialization",
          "Ball Brick Collision",
          "Winning Condition",
          "Freeing up Memory - Destroy Function",
          "Game Over",
          "Completing the Game - Final Explanation"
        ],
        "Tik Tac Toe Game in C++ using SDL2 Library": [
          "Get all Code and Image Files",
          "Drawing Window",
          "Allowing Graphical Content",
          "Close Event Handler",
          "Drawing the Grid",
          "Circle and Cross inside Cells",
          "Draw and Win Conditions"
        ],
        "Helicopter Game in C++ using SDL2 Library": [
          "Displaying the GUI SDL2 Window",
          "Putting Helicopter on SDL2 Window",
          "Collision with Walls",
          "Helicopter Movement",
          "Loading and Moving Obstacles",
          "Helicopter Obstacles Collision Detection",
          "Game Over",
          "Displaying and Rendering Score",
          "Completing the Game - Final Explanation"
        ],
        "Snake Game in C++ using SDL2 Library": [
          "Displaying the GUI SDL2 Window",
          "Displaying Snake on SDL2 Window",
          "Moving the Snake",
          "Collision with Walls",
          "Snake Eating Food",
          "Snake Self Collision",
          "Game Over Condition",
          "Completing the Game - Final Explanation"
        ],
        "Pong Game in C++ using SDL2 Library": [
          "Window Creation Part",
          "Game Renderer",
          "SDL Poll Event",
          "Paddle Placement",
          "Paddle Movement",
          "Ball Movement and Collision Detection with Walls",
          "Collision Detection between Ball and Paddle",
          "Game Over and Resetting Ball Position"
        ],
        "Dice Game in C++ using SDL2 Library": [
          "Displaying Gaming Window",
          "Renderer for the Game",
          "Players Section",
          "Font Library Initialization",
          "Players Text Sections",
          "Random Generator",
          "Dice Creation Part",
          "Winning Draw Condition - Assignment"
        ]
      },
      "requirements": [
        "Basics of any Programming Language is Required"
      ],
      "description": "In this course you will be able to learn about the Game Development concepts in C++ from absolute scratch up to the level where you guys will be able to make Pro Level Games. We are going to do Game development in C++ using the most powerful C++ Graphical Gaming Library SDL2. SDL2 is a very famous and interactive library for Game development in C++. You are going to cover the very latest concepts of Game development using SDL2. In this course where we will be covering 10 different Games using SDL2 each introducing new and interesting concepts for you to learn.\n\n\nEach Game is going to help you to learn more and more interesting concepts. At the end of this course, I assure you that you will be able to create a totally new Games of your own requirements and specifications in SDL2. This course covers the latest concepts of SDL2. I would love to hear your feedback as you're in your journey in taking this course.\n\n\nFor this course to start, you don't need anything. You don't even need to have any past experience of C++ or any other programming Language. We have uploaded a C++ Crash Course at the end that will help you gain knowledge of C++ to start on with the Game Development using SDL2. If you already have the basic knowledge of C++ then you can directly go towards Game Development using SDL2 and learn all the interesting concepts we have got for you here in this course.\n\nYou might encounter problems while taking this course. For this, you can directly message me and I will try my best to get back to you as soon as possible. You can ask your question(s) in Q/A Section where there will be many students who are already taking this course will answer you questions. When you done with any Game, I would definitely recommend you to upload your code and your experience with other students. You can also add more and more functionalities to your game as this is one of the prime objective of this course that you should be able to add your own functionalities in your project(game).\n\nI wish you best of Luck with this course.",
      "target_audience": [
        "Anyone who wants to make Professional Level Games in C++",
        "Anyone who wants to Learn SDL2 : The most powerful C++ Graphical Library in C++",
        "Anyone who wants to make any type of Game in C++ using SDL2",
        "Anyone who wants to get a blueprint of making any type of Game"
      ]
    },
    {
      "title": "iOS iPad Game Development 3D Character Sculpting & Modeling",
      "url": "https://www.udemy.com/course/ios-ipad-game-development-3d-character-sculpting-modeling/",
      "bio": "Forger iOS Workflow, Design, Fundamentals, Game Asset, Basics, Productivity Apps, Sketch Software, Image Processing",
      "objectives": [
        "Model and sculpt high quality assets for game development",
        "Digital Sculpting on iPad and Apple Pencil",
        "Forger iOS",
        "Utilizing Reference in the App and iPad",
        "Learning app brushes/layers"
      ],
      "course_content": {
        "Project Introduction and Overview": [
          "Forger iOS",
          "Course Setup | Industry Resources",
          "Udemy Rating System Very Important Info!"
        ],
        "Forger iOS Interface": [
          "Startup Menu",
          "Viewport Navigation",
          "User Interface"
        ],
        "Foundational Tools Within Forger iOS": [
          "Standard Brush",
          "Clay Brush",
          "Move Brush",
          "Scrape Brush",
          "Inflate Brush",
          "Masking The Clay",
          "Transform Tool"
        ],
        "Forger iOS Menu Overview": [
          "File",
          "Tool",
          "Mesh",
          "Layers",
          "Objects",
          "Materials",
          "Resources",
          "Render",
          "Preferences"
        ],
        "Timelapses": [
          "Final Sculpt"
        ],
        "BONUS & Additional Course from Class Creatives": [
          "BONUS/Additional Courses from Class Creatives"
        ]
      },
      "requirements": [
        "No prior knowledge of Sculpting Needed",
        "The course utilizes Forger iOS, but prior knowledge of a sculpting package is a plus.",
        "Forger iOS is required",
        "No prior knowledge of the software is required"
      ],
      "description": "Hi there! Welcome, and thanks for choosing Class Creative’s iOS iPad Game Development 3D Character Sculpting & Modeling!!\n\nIn this foundational course we will be learning the fundamentals of Character Modeling, where we will cover the following core skill sets:\nSculpting on iPad Pro (iOS 13) with Apple Pencil with the hot app: Forger iOS\n\n\nWhat students are saying about this character sculpting & modeling course:\n\"Great course very informative and pace of the course was good.\" - Curtis Cooper\n\"I appreciate this course because it is pretty much the best one around for this app, that I have been able to find.\" - Kyle Butterfield\n\"I learned so much from this course on how to use this app! I would recommend this course if you are a beginner in 3d or just want to know how to use this app! Thank you for doing it.\" - Conrad Whitcher\n\"The course has all the information you need for starting modeling with forger.\" - Felipe Pinto Farineli Vivas\n\"AMAZING!!!!!!!!!!!!\" - Igor Fridland\n\"I have only just begun this journey of 3d modeling/animation -- I started with Blender, and decided quickly that I'd also like to be able to utilize my iPad and Apple Pencil. I happened upon this course -- and ALREADY -- I can understand exactly what is happening, and I am so excited to be able to use this in tandem with the other courses in my library. Thank you so much!\" - Rae Rains\n\n***DISCLAIMER Course does NOT cover every tool, or option in Forger iOS, instead this course covers a workflow option that the artist chooses and feels fits best to create the final asset.  There are always several ways to reach the end goal, this is simply one of those paths to reach the destination by this artist.\n\n\nWhy Learn From Class Creatives?\nOver 20 years of professional industry experience and nearly a decade of accredited university level instruction. Instructors featured from Studios such as Walt Disney Animation Studios, Walt Disney Television, Google, Nintendo, Naughty Dog, Insomniac, Sony Computer Ent, Sucker Punch, Guerrilla Games, Infinity Ward, and more!\nWho This Course is For:\nThe great thing about this course, is that we has something in store for everyone. Whether you are just a beginner interested in Character Creation, or a Master professional looking to brush up on your current skill set, this course has material you surely won’t want to miss!\n\nUsing Forger iOS on the go will help speed up your workflow!  This is a great tool to have in your repertoire to create characters anywhere you are in the world!\nAs with all Class Creative’s courses, we’ve laid out a structure that covers the full spectrum of industry-standard character workflows from start to finish.\nPlease remember, if this is your first time creating a 3D character, we highly recommend that you follow the outline carefully, according to how our instructors have structured the course. We wouldn’t want you to miss out on any details!\nHowever, if you are an advanced user and are looking for something specific to add to your repertoire feel free to dive in and skip to any sections you’d like to focus on.",
      "target_audience": [
        "Developers who want to add sculpting to their skill-set.",
        "Anyone with a passion for learning game development.",
        "Anyone who wants the ability to create assets for games."
      ]
    },
    {
      "title": "The complete guide to Roblox game development",
      "url": "https://www.udemy.com/course/the-complete-guide-to-roblox-game-development/",
      "bio": "Learn Roblox Game development basics, learn Lua scripting. Everything is done in Roblox Studio.",
      "objectives": [
        "The basic concepts of computer programming",
        "How to set up and use Roblox Studio",
        "How to make interactive games in Roblox Studio",
        "The Basics of Lua programming language"
      ],
      "course_content": {
        "The basics of Roblox Game Development": [
          "Roblox Studio and account setup",
          "Introduction to Roblox Studio",
          "Working with parts",
          "Surface images ( textures and decals )",
          "Working with terrain",
          "Lessons 1-5",
          "Light sources",
          "Effects",
          "Surface GUI",
          "Screen Gui Designing a game shop",
          "Roblox basics",
          "Physics and constraints"
        ],
        "Scripting tutorials - beginner": [
          "Introduction to scripting",
          "Variables",
          "Data Types",
          "Variables and Data types",
          "Operators",
          "Practice 1 - Variables and operators",
          "Scope (Local and Global)",
          "Lessons 14-15",
          "Functions and methods",
          "Practice 2 - Functions and methods",
          "Loops",
          "Practice 3 - Loops",
          "If Statements",
          "Else if statements",
          "Practice 4 - If Else statements",
          "Player, Character, Humanoid",
          "Parent and child concept",
          "How to create new objects with Instance.new()",
          "Lessons 21 -22",
          "Practice 5 - Instance",
          "Working with CFrame",
          "Events",
          "Creating a killing lava floor",
          "Creating a fading platform",
          "Practice 6 - Touched Event",
          "Click Detector",
          "Creating a teleport",
          "Working with tools",
          "Lessons 27 - 29",
          "Attributes - custom properties"
        ],
        "Scripting tutorials - Intermediate": [
          "Leaderboard",
          "How to create clones",
          "Practice 7 - Clones",
          "Client Server Model",
          "Remote events and functions",
          "Lessons 31 - 34",
          "Dialogs",
          "Health Pickups",
          "Practice 8 - Pickups",
          "Animation",
          "Controlling user's camera",
          "Lessons 35 - 37",
          "Creating an inventory",
          "The Minimap"
        ]
      },
      "requirements": [
        "Computer",
        "No programming experience needed"
      ],
      "description": "The Roblox course for beginners is an excellent introduction to the world of game development using the Roblox platform. This course is designed to equip learners with the essential knowledge and skills needed to create fun and engaging games on Roblox.\nThe course covers the basics of Roblox game development, including the creation and manipulation of parts, terrain, effects, constraints, and lighting. Learners will be guided step-by-step through the process of building a game world, including designing terrain and adding game elements such as obstacles and power-ups.\nIn addition to learning the basics of Roblox game development, learners will also receive an introduction to Lua programming. This portion of the course covers the fundamentals of Lua, including variables, conditions, loops, events, functions, and methods. Learners will gain hands-on experience in Lua programming by creating and modifying scripts to control various aspects of their games.\nThroughout the course, learners will be given quizzes and exercises to test their knowledge and help reinforce their understanding of the material. By the end of the course, learners will have gained a solid foundation in both Roblox game development and Lua programming, and will have built a game that includes significant parts of the game world and mechanics.\nOverall, the Roblox course for beginners is an excellent way for anyone interested in game development to get started with Roblox. With its clear and easy-to-follow instruction, engaging exercises, and fun projects, this course is sure to inspire and challenge learners of all levels.",
      "target_audience": [
        "Begginer Roblox developers"
      ]
    },
    {
      "title": "Intro to Game Development using Unity - Part II",
      "url": "https://www.udemy.com/course/intro-to-game-development-using-unity-part-ii/",
      "bio": "Extend the 2D game from Part I and finish the basics by adding more features from Unity",
      "objectives": [
        "Build a complete 2D game using Unity with knowledge and confidence.",
        "Understand additional game creation basics such as physical forces, collisions, particle systems, audio, GUI, scoring, animations, and much more.",
        "Gain the ability to understand the great video tutorials and documentation at Unity including the Unity Certified Courseware plans."
      ],
      "course_content": {
        "Intro and Downloading Scripts": [
          "Introduction"
        ],
        "Adding More Features and Gameplay": [
          "The Bird Understands Physics",
          "Sorting Layers and Bird Under Cover",
          "Colliding with Obstacles",
          "Particle Systems Create Sparks",
          "Audio and Talking Obstacles",
          "GUI and Keeping Score Part I",
          "GUI and Keeping Score Part 2",
          "Prefabs and the Asset Store",
          "Review Questions for Section 2"
        ],
        "Animations and Wrap-up": [
          "Animations and Flying Birds Part I",
          "Animations and Flying Birds Part II",
          "Game Wrap-up and Next Steps",
          "Review Questions for Section 3"
        ]
      },
      "requirements": [
        "Completion of the Intro to Game Development using Unity - Part I course",
        "Curiosity…"
      ],
      "description": "This course continues the development of the 2D game from the Intro to Game Development using Unity - Part I course and you'll learn how to use more of the powerful built-in capability that Unity has by adding exciting features to your game.\nPhysics, particle systems, audio, animations, scoring - these topics may seem complex, but the step-by-step approach in this this course makes them easy to understand. You'll be flying the bird with simple taps (mouse clicks) to catch the worm, and avoid colliding with other game objects along the way. And the fun you'll have by adding a flying animation to the bird and implementing sparks when it hits an obstacle will bring added  excitement to the game while adding to your game development skills.\nMost of the scripting to implement these advanced features is done with just a few lines of code! Once you're finished with this super fun course, you'll be fully prepared to understand the vast amount of documentation and tutorials available on Unity to take your game development skills to the next level if you choose to do so. You'll also be ready to rapidly launch into learning the exciting world of Augmented, Virtual, and Mixed Reality (AR/VR/MR) development and more.\n(BTW, the 2D game developed in this series is based on the Flappy Worms game on Google Play).",
      "target_audience": [
        "Users who have completed the Intro to Game Development using Unity - Part I course"
      ]
    },
    {
      "title": "JavaScript High Low Card Game Project From Scratch",
      "url": "https://www.udemy.com/course/javascript-card-game/",
      "bio": "Explore how to create an interactive dynamic web application from scratch. Built using JavaScript CSS and HTML together",
      "objectives": [
        "create a high low card game from scratch",
        "be able to better apply JavaScript within web games and web applications",
        "use JavaScript along with CSS to design interactive online content"
      ],
      "course_content": {
        "Introduction to Application development": [
          "JavaScript Game Course Introduction",
          "JavaScript Project Resources"
        ],
        "Create JavaScript Game": [
          "Create start screen for players",
          "Create Start event game play start",
          "Build a deck of cards JavaScript Array Objects",
          "How to randomize an array with JavaScript",
          "Add data to an object within the array JavaScript",
          "Output Card value to HTML element JavaScript",
          "Add player gameplay options buttons JavaScript",
          "Source Code",
          "Adding color to output JavaScript",
          "Quick Style your output CSS",
          "Winner Check function JavaScript",
          "Completed Simple Gamplay JavaScript",
          "Simple Game Complete Source Code"
        ],
        "Game Enhancements Fun additions to the game": [
          "Add betting input HTML",
          "CSS to build a card",
          "CSS for Card",
          "Source for Card",
          "Add CSS card debug dashboard",
          "Debug Gameplay cleanup code",
          "Bet adjustments event-listeners JavaScript",
          "How to debug your JavaScript",
          "Button Styling CSS",
          "Debugging JavaScript code",
          "Code Tidy up and game ending"
        ],
        "Course Overview": [
          "Overview Styling CSS",
          "CSS source",
          "Overview JavaScript",
          "Source Code JavaScript",
          "Course Conclusion",
          "Source Code HTML",
          "Course Resources"
        ],
        "Bonus Section": [
          "JavaScript how to randomize an array order",
          "Additional Course Resources: Access to Downloads, Applied Examples"
        ]
      },
      "requirements": [
        "HTML",
        "CSS",
        "JavaScript",
        "Desire to learn how to use the language together"
      ],
      "description": "Learn the steps to create an interactive web based game from scratch, using JavaScript HTML and CSS. This course is designed for beginners who want to explore how to build, debug and enhance web projects.\nExplore how to create applications applying your knowledge of HTML, CSS and JavaScript!\nPlease note that some basic knowledge of these languages is required as the course focus is to cover the development process.  Prerequisites to this course include a basic knowledge of front-end coding.\nStep by step guidance to building interactive applications.\nThe course will walk through how to create a web game and how to debug and address issues when coding applications.\nThe card game that is created within  this course is a simple High Low guessing game.  The objective of the game is to guess if the next card is higher or lower than the current card.  A correct guess is a win and an incorrect guess is a loss.\nLearn how to develop your game and structure your game logic\nbuild needed functionality to performance the game objectives.\ncreate attractive interactive elements\napply game logic as you build your application\ndebug and QA your application\nenhance and add features and functionality\ntest and next steps to application building\nThis course is taught by an instructor with over 18 years of web development experience.  Ready to answer your questions and help you learn more about web development.\nOne of the best ways to learn is to practice and try it for yourself.  Source code is included to get you started quickly.  Code review at the end of the course and a complete overview of the source code.\nWhen you are ready start building your interactive web application today.",
      "target_audience": [
        "Beginners to web development",
        "web application developers",
        "anyone looking for a fun project to build"
      ]
    },
    {
      "title": "Low-Poly Character Modeling & Animation in Blender for Unity",
      "url": "https://www.udemy.com/course/low-poly-character-modeling-animation-in-blender-for-unity/",
      "bio": "Learn how to Model, Color, Rig, Animate and Script a Low-Poly 3D Character in Blender for Unity Video Game Developers",
      "objectives": [
        "Learn how to model a low-poly character in Blender",
        "Learn how to add bones and rigging to a low-poly character model in Blender",
        "Learn how to apply an animation to a Humanoid Rig in Blender",
        "Learn how to export/import a low-poly character model from Blender to Unity",
        "Learn how to configure Unity's Animator to setup a state machine for your character",
        "Learn how to write a script to transition animations for your character in Unity",
        "Learn how to change animation states VIA script in Unity",
        "Learn to use Shape Keys in Blender and Unity"
      ],
      "course_content": {
        "Getting Started": [
          "Course Overview",
          "Resources",
          "Configure Blender"
        ],
        "Character Modeling": [
          "Blocky Foundation",
          "Rounding & Shaping",
          "Bendable Joints"
        ],
        "Bones & Rigging": [
          "Setting The Bones",
          "Naming The Bones",
          "Inverse Kinematics",
          "Symmetry & Automatic Weights"
        ],
        "Floating Parts": [
          "Mouth",
          "Facial Hair",
          "Eyes",
          "Nose",
          "Ears",
          "Hair",
          "Weight Painting"
        ],
        "Separate Objects": [
          "Headgear",
          "Clothing",
          "Armor",
          "Weapons"
        ],
        "Unity Animation Process": [
          "Textures & Materials",
          "Importing Into Unity",
          "Character Prefabs",
          "Model Repairwork",
          "Animator Controller",
          "Control Animations VIA Script",
          "Swapping Weapons"
        ],
        "Extra Credit": [
          "Shape Keys for Hat Hair",
          "BONUS LECTURE"
        ]
      },
      "requirements": [
        "Students should already have a general knowledge of Blender & Unity and be able to navigate, find their way around, and so forth",
        "If you are new to Blender, I highly recommend my first course \"Learn Blender 3D Modeling for Unity Video Game Development\"",
        "A little bit of experience with C# would be useful for following this course, although I do take the time to explain everything in great detail"
      ],
      "description": "Welcome to Low-Poly Character Modeling & Animation in Blender for Unity, a course by Billy McDaniel.\nIn this course, we'll design a low-poly, flat shaded cartoon-style character model in Blender with separate parts for facial features including eyes, nose, teeth, ears, hair, hats & helmets, clothing, armor and melee weapons. We'll setup bones and rigging so that we can fully animate our new model. And then I'll show you how to use a grayscale color atlas material that allows you to create any colored material you desire from within Unity. Next, we'll setup the Animator state machine and write a script that allows us to change animation clips on demand. We'll download a few clips from Mixamo's free website to get started.\nBy the end of this course you should have a good foundation to build a variety of character models in Blender with the freedom to swap out animations however you see fit. My goal is to help you finish this course with all of the experience you need to start making  low-poly, flat-shaded characters and enemies for your Unity video games.\nSo if this sounds like something you'd like to start doing on your own... then welcome aboard. I hope to see you in the next lecture.",
      "target_audience": [
        "Anyone who wants to learn how to make the low-poly, flat shaded, cartoony character designs as seen in this course's preview videos",
        "Anyone interested in a complete walk-through of character modeling, color atlasing, adding bones and rigging, reusing animations, importing into Unity, setting up the state machine and some scripting"
      ]
    },
    {
      "title": "Welcome To Game Design - Introduction to Videogame Design",
      "url": "https://www.udemy.com/course/welcome-to-game-design-digital-games/",
      "bio": "Understand how Digital Games are made from scratch, create prototypes and deconstruct the game components",
      "objectives": [
        "Develop Simple Game Prototypes With Construct 2",
        "What are the main Digital Game Genres and how they work",
        "Create Digital Game Projects with Game Design Document and Canvas",
        "Understand the evolution of the video game consoles",
        "Understand how the Game Industry Works",
        "Know the best ways of monetizing projects",
        "Edit and Export Sprites and Animations",
        "Learn how to apply good game design to your games",
        "Learn about different types of controllers",
        "Create different game Arcs and Loops",
        "Understand when the user needs Feedback",
        "Create a good Progression in Level Design",
        "Edit simple audio tracks with audacity",
        "Organize game ideas",
        "Find free assets for your projects"
      ],
      "course_content": {
        "Introduction": [
          "Download The Class Presentation",
          "Download the Game Design Structure Analysis Template",
          "What is a Game?",
          "History of Video Game Home Consoles - Part 1",
          "How to Rate the course",
          "History of Video Game Home Consoles - Part 2",
          "History of Video Game Home Consoles - Part 3",
          "Join Our Discord Server ?",
          "History of Video Game Home Consoles - Part 4",
          "Game Engines",
          "Game Industry",
          "Inputs and Button Patterns (Biases of Familiarity)",
          "Quizz 1",
          "DISCOUNT COUPON FOR THE MASTER COURSE"
        ],
        "Game Moments": [
          "Game Arcs",
          "Game Loops",
          "Feedback Types",
          "Game Flow and Transitions",
          "Quizz 2"
        ],
        "Game Elements": [
          "Progression and Level Design",
          "Game Elements",
          "Animations",
          "Edit Animations With Gimp",
          "Sound and Music",
          "Edit Audio With Audacity",
          "Digital Game Genres - Part 1",
          "Digital Game Genres - Part 2",
          "Tutorials",
          "Micro Game Design Document and Canvas",
          "Quizz 3"
        ],
        "Prototyping": [
          "Prototyping with Paint and Google Slides",
          "Prototyping with Construct 2 - Installation",
          "Prototyping with Construct 2 - Templates",
          "Prototyping with Construct 2 - Simple Platformer",
          "Prototyping with Construct 2 - Lives and GUI",
          "Construct 2 - Enemies and Shoot Bullets",
          "Playtests",
          "Monetization",
          "Quizz 4",
          "Congratulations"
        ]
      },
      "requirements": [
        "There are absolutely no prerequisites to take this course."
      ],
      "description": "This course's focus is Game Design, but you will also learn Construct 2, to apply the theory you will learn.\nYou will learn about many different aspects of Game Design in Digital Games and how they work, such as:\nThe History of Video Game Consoles\nHow to choose the best Game Engine for your Necessity\nHow to build great tutorials\nHow to give feedback to the player\nHow to structure a Game Flow and it's transitions\nHow to get your player addicted to the game\nWhich are the most common Game Elements and how to organize them\nHow to create prototypes in minutes\nBy the end of some classes, I’ll challenge you to do some exercises, to help you learn better. They are not mandatory, but they can make you become a better game designer.\nYou will also answer some Quizzes, to help you memorize what you learnt even more.\nYou’ll also be able to download the presentation used in this course.\nThis course will help you create a bionic eye, after your know how games are made, playing them will never be the same again.\nEnroll Now and I See you in the course!\nStart creating your own games!",
      "target_audience": [
        "People who want to learn about the Digital Games Creation",
        "People who want to understand Game Theory",
        "Anyone who plans to create quick Prototypes to validate their game ideas",
        "People who want to learn about Video Game History",
        "People who want to become Great Game Designers",
        "People who want to know how to Create Levels and Transitions",
        "Beginner Programmers"
      ]
    },
    {
      "title": "Make 4 games in Unity with Playmaker and include ads.",
      "url": "https://www.udemy.com/course/make-4-games-in-unity-with-playmaker-and-include-ads/",
      "bio": "Make 4 mobile games with NO code and include ads.",
      "objectives": [
        "How to create 4 different games in unity.",
        "How to add unity ads to your games to make money from you game",
        "How to upload your games to an app store like Google Play",
        "How to create different types of FSMs using playmaker to create different features in games."
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Android / iOS Build Set Up",
          "Adding Playmaker To Our Project"
        ],
        "Important! Watch this before starting the course": [
          "Information about Unity Ads in 2023",
          "IMPORTANT Unity ADS 2024"
        ],
        "Game 1 Flappy Game": [
          "Lesson 1 Player Movement",
          "Lesson 2 Spawning Blocks",
          "Lesson 3 Game Over",
          "Lesson 4 Clean Up",
          "Lesson 5 Scoring",
          "Lesson 6 Moving Background",
          "Lesson 7 Saving",
          "Lesson 8 Sound",
          "Lesson 9 Difficulty",
          "Lesson 10 Ads(Outdated Watch Unity Ads 2024(Lecture 61))",
          "Make The Game Your Own"
        ],
        "Game 2 Tapper Game": [
          "Lesson 1 Movement",
          "Lesson 2 Spawning",
          "Lesson 3 Cleaning Up",
          "Lesson 4 Effects and Vibration",
          "Lesson 5 Scoring",
          "Lesson 6 Game Over & High Scores",
          "Lesson 7 Saving",
          "Lesson 8 Background",
          "Lesson 9 Ads(Outdated Watch Unity Ads 2024(Lecture 61))",
          "Lesson 10 Difficulty",
          "Lesson 11 Sound",
          "Personalisation"
        ],
        "Game 3 Endless Runner": [
          "Lesson 1 Player Movement",
          "Lesson 2 Background part 1",
          "Lesson 3 Obstacles",
          "Make Your Own Obstacles",
          "Lesson 4 Spawning Our Obstacles",
          "Lesson 5 Scoring Points",
          "Lesson 6 Game Over",
          "Lesson 7 High Scores",
          "Lesson 8 Saving & Loading",
          "Lesson 9 Background Part 2",
          "Lesson 10 Difficulty",
          "Lesson 11 Sound",
          "Lesson 12 Touch Controls",
          "Lesson 13 Ads (Outdated Watch Unity Ads 2024(Lecture 61))",
          "Task: Personalisation"
        ],
        "Game 4 Zombie Defence": [
          "Lesson 1 Player Movement",
          "Lesson 2 Shooting",
          "Lesson 3 Zombie Spawning",
          "Lesson 4 Damage",
          "Lesson 5 Spawning Part 2",
          "Lesson 6 Game Over",
          "Lesson 7 Scores and Background",
          "Lesson 8 Ammo System",
          "Lesson 9 Enemy Drops",
          "Lesson 10 Sound",
          "Lesson 11 Upgrade System part 1",
          "Lesson 12 Upgrade System Part 2",
          "Lesson 13 Settings Menu",
          "Lesson 14 Save, Load and Title Screen",
          "Lesson 15 Difficulty",
          "Lesson 16 Ads(Outdated Watch Unity Ads 2024(Lecture 61))",
          "Lesson 17 Ads fix (Outdated Watch Unity Ads 2024(Lecture 61))",
          "Lesson 18 Ads Rewarded Ads (Outdated Watch Unity Ads 2024(Lecture 61))",
          "Lesson 19 Touch Controls",
          "Lesson 20 Zombie Spawner Fix",
          "Task 4 Personalisation"
        ],
        "Updating Unity Ads in 2023": [
          "Updating Unity Ads",
          "Unity Ads 2024 With IronSource (Level play) Recommended method"
        ],
        "Publishing your app": [
          "Building your game as an aab ( for Google Play Store)",
          "Building your game as an apk file ( for upload to third party app stores )",
          "How to upload to the Google Play Store",
          "How to upload to itch.io"
        ],
        "The end of the course": [
          "The end of the course"
        ]
      },
      "requirements": [
        "Have Unity, Microsoft Visual Studio (Optional but needed if you want to put ads on your games), a computer, and Playmaker (commercial version is needed to publish your games link to student version is in the course)"
      ],
      "description": "In this course I will show you how to make 4 different games in Unity using the Playmaker add-on.\nWe will make:\nA flappy bird type game.\nA tapping game ( tap the insects to score points)\nAn endless side scrolling runner.\nA topdown style fix movement zombie shooter.\n\n\nIn each game I will show you how to make them step by step and at the end how to put ads in to your game so you can earn some money using Unity ads.\nI will also show you how to upload the games to the Google Play store and itch io and how to update them when you need to fix an issue with the game.\n\n\nIn each game you will learn how to create different FSMs to create different features to your games. I will also show you how to add different types of ads to your games such as a rewarded ad which will only work 1 time a day.\nIf you have ever wanted to make your own games then why not give this course a go? It will help you learn how to use Playmaker and Unity as well as help you overcome issues that you may encounter.",
      "target_audience": [
        "Beginner unity users",
        "All levels"
      ]
    },
    {
      "title": "Unity 2D Ultimate RPG Game Development with C#",
      "url": "https://www.udemy.com/course/create-2d-rpg-game-in-unity-c-part-1inventorycraft/",
      "bio": "Unity 2D Ultimate RPG Game Development with C#",
      "objectives": [
        "Have a PC or Mac",
        "Beginners to advance",
        "progarmming with C#",
        "work with unity"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Game Setup": [
          "New 2D Project",
          "Download Game Asset"
        ],
        "Player Setup": [
          "Player Setup",
          "Player Animations",
          "Animation Blend Tree",
          "Attack Animation"
        ],
        "Enemy Movement": [
          "Enemy Movementt Part 1",
          "Enemy Movement Script Part 2",
          "Enemy Reskin"
        ],
        "Player Canvas UI": [
          "Player Portrait & Health bar",
          "Player Health Script",
          "Player Take Damage (IDamageable Interface)"
        ],
        "Items & Inventory": [
          "Creating Item with Scriptable Object",
          "Interact with objects",
          "Inventory UI Part 1",
          "Inventory UI Part 2",
          "Inventory Script Properties",
          "Item Slot Script",
          "Inventory functions",
          "Inventory Adding Items",
          "Open&Close Inventory Panel",
          "Inventory Selecting Item & Drop the item",
          "Inventory consuming Items",
          "Inventory equip weapon Part 1",
          "Inventory Equip weapon part 2",
          "Inventory Check equip weapon"
        ],
        "Player Damage": [
          "Player Hit Damage Box",
          "Enemy Health",
          "Player damage to Enemy",
          "Weapon State in inventory",
          "Enemy Health UI"
        ],
        "Crafting System": [
          "Item Resources",
          "Crafting Window UI",
          "Crafting Recipe(Scriptable Object)",
          "Crafting Scripts",
          "NPC Healer & Blacksmite",
          "Polishing NPC Crafters",
          "Polishing Craft Items"
        ],
        "Environment": [
          "Environment",
          "Camera Controller"
        ],
        "Loot System": [
          "Looting from Enemies"
        ]
      },
      "requirements": [
        "Have a PC or Mac"
      ],
      "description": "Learn how to create and program your very own 3D Platformer game using Unity, an industry-standard game development program used by many large gaming studios and indie developers across the world.\nIn this course you won’t just be learning programming concepts, but tying these concepts to real game development uses.\nThis course has been designed to be easily understandable to everyone, so whether you’re a complete beginner, Or expand their game development range or a programmer interested in understanding game design, this course will help you gain a greater understanding of development.\n\nAt the end of this course you will have developed the ability to create such game elements as:\n\n\n\n\nFull 2D Character Movement\nFull 2D Enemy Movement\nUnity Installation and setup\nphysics\ncamera\nComplete Health System\nPlayer Attack system\nPlayer diffrent Weapon\nEnemy Attack system\nInventory\nCraft System\nScripting,Scripting and Scripting\nCreating basic 2D RPG  game\nand a tone more\nStart learning today and let me help you become a game developer!\nWho this course is for:\nAnyone who wants to make their own 2D games.\nPeople who want to create and publish their own games.\nComplete beginners with an interest in learning game development.\nDevelopers who want to re-skill across to game development.\nPeople interested in working in the game design industy.\nCompetent and confident with using a computer....",
      "target_audience": [
        "Beginners to advance"
      ]
    },
    {
      "title": "Blender 3D: Hard Surface Modelling",
      "url": "https://www.udemy.com/course/blender-3d-hard-surface-modelling/",
      "bio": "Build a stylised car while mastering Blender’s hard surface tools and gain the confidence to model anything you imagine.",
      "objectives": [
        "Build a stylised car from scratch using Blender’s hard surface modelling tools",
        "Model clean, game-ready geometry using smart topology and edge flow",
        "Use modifiers and non-destructive workflows to speed up your process",
        "Add detail with bevels, edge creases, and support loops",
        "Personalise your model with accessories, colours, and style",
        "Prepare your model for shading, lighting, and final rendering",
        "Gain confidence to design your own 3D models independently",
        "Develop the skills to tackle vehicles, props, environments, and more"
      ],
      "course_content": {
        "Base Shape": [
          "Welcome to the Course",
          "Supporting Loops",
          "Supporting Loops vs Edge Crease",
          "Reference Images",
          "Wheel Arch",
          "Community & Support",
          "Extended Wheel Arch",
          "Headlamp Shape",
          "The Bonnet",
          "Windscreen Window Frame",
          "Side Window Frame",
          "Back Wheel & Boot",
          "Bumpers"
        ],
        "Wheels": [
          "Intro to Section - Wheels",
          "Simple Tyres",
          "Complex Tyres",
          "Alloy Wheel Segment",
          "Alloy Wheel Details",
          "Alloy Wheel Subdivision sharpening",
          "Wheel Nuts",
          "Mirroring the Wheel"
        ],
        "Panel Details": [
          "Intro to Section - Panel Details",
          "Modifiers & Separating",
          "Bonnet Separation",
          "Bonnet Air Intake",
          "Front & Back Windscreens",
          "Side Windows and Door",
          "Side Window Frame",
          "Side Window Seals & Glass",
          "Boot & Bumpers",
          "Tidy Up"
        ],
        "Extra Details": [
          "Intro to Section - Extra Details",
          "Spoiler",
          "Door Handle Dent",
          "Front Bumper Details",
          "Bumper Details Accessories",
          "Headlights",
          "Bonnet Lights",
          "Back Bumper Details",
          "Undercarriage",
          "Door Handle & Number Plate"
        ],
        "Shading & Rendering": [
          "Intro to Section - Shading & Rendering",
          "Workspace & Background",
          "Main Colours",
          "Render Engine",
          "Detailed Textures",
          "Getting Ready for Rendering",
          "Compositor Effects",
          "Rendering Animation",
          "Racing Stripes",
          "Course Wrap Up"
        ]
      },
      "requirements": [
        "Basic knowledge of Blender's interface and navigation",
        "Some experience modelling simple 3D objects",
        "No advanced skills required - just a willingness to learn and create!"
      ],
      "description": "Want to get seriously good at 3D art - and have fun doing it?\nThis course is all about levelling up your Blender skills so you can build awesome models and feel confident creating your own stuff from scratch.\nYou'll build a stylised car, from scratch. All while gaining the tools and techniques to model anything you can imagine - from sci-fi props to whole game worlds.\nLearn how to plan your models properly, use Blender’s modifier stack like a boss and create clean, flexible geometry that’s easy to edit and looks amazing.\nWe’ll cover pro workflows like edge flow, support loops, and non-destructive modelling - so you're not just following along, you're learning how to think like a 3D artist.\nBy the end, you’ll have a finished model you’re proud of - and the skills to start building your own vehicles, environments, robots… whatever your creative brain comes up with.\nWhat you’ll learn:\nBuild a stylised car while learning solid modelling workflows\nMaster Blender’s modifier stack for non-destructive modelling\nCreate clean edge flow with bevels, creases, and support loops\nLearn how to refine and add detail without making a mess\nShade, light and render your final model like a pro\nGain the confidence to model whatever you imagine next\nYou don’t need to be an expert. If you’ve played around with Blender and know the basics, you’re ready.\nAlready done the Blender Creator course? Even better - this is your next step.\nReady to level up your modelling skills? Jump in and get started today.",
      "target_audience": [
        "Blender users who want to level up their modelling skills",
        "Beginners ready to go beyond YouTube tutorials",
        "Students who want to model detailed, stylised 3D assets",
        "Anyone looking to feel confident and independent as a 3D artist"
      ]
    },
    {
      "title": "Multiplayer in Unreal with GAS and AWS Dedicated Servers",
      "url": "https://www.udemy.com/course/multiplayer-in-unreal-with-gas-and-aws-dedicated-servers/",
      "bio": "Create a MOBA Game with Unreal Engine Gameplay Ability System and Build the Dedicated Server infrastructure with AWS",
      "objectives": [
        "Create Multiplayer Game in Unreal Engine",
        "Use the Gameplay Ability System",
        "Build and Deploy Unreal Engine Dedicated Servers",
        "Host Unreal Engine Dedicated Servers on AWS",
        "Make a Comprehensive Inventory and Shop System",
        "AI Perception and Behavior in Unreal Engine",
        "Epic Online Service"
      ],
      "course_content": {
        "Introduction": [
          "01 Introduction"
        ],
        "Basic Character Movement Control and Animations": [
          "02 Install Unreal Engine and Visual Studio",
          "03 Create the Project and Configure Visual Studio",
          "04 Setup Source Control with Git and GitHub",
          "05 Setup the Base Class",
          "06 Add the Basic Components of the Player Character",
          "07 Add the Jump Input Action",
          "08 Add the Look Input Action",
          "09 Add the Move Input Action",
          "10 Create the Animation Instance",
          "11 Add the Speed Attribute to Drive Ground Locomotion",
          "12 Add Jog Stop and Leaning",
          "13 Add the Jumping Animations",
          "14 Add Look Offset",
          "15 Add Foot Tracing",
          "16 Offset the Joints",
          "17 Add Foot IK"
        ],
        "Integrate Gameplay Ability System to the Character": [
          "18 Add the Ability System Component",
          "19 Add the Health and Mana Attribute to the Attribute Set",
          "20 What is a Gameplay Effect and How to Apply Them",
          "21 Setup the Server Client Call Chain",
          "22 Apply the Gameplay Effects and Replicate the Attributes"
        ],
        "Setup Basic UI Widgets": [
          "23 Add the Value Gauge Widget Class",
          "24 Add the Value Gauge Widget Blueprint",
          "25 Add the Gameplay Widget Blueprint",
          "26 Update the Health and Mana In the Gameplay Widget",
          "27 Add the Over Head Status Gauge",
          "28 Make the Over Head Widget Display Hidden for Local Player Character",
          "29 Setup the Visibility Control of the Overhead Stat Gauge"
        ],
        "Implement the Combo Gameplay Ability": [
          "30 Add the Base Ability Class and the Combo Ability",
          "31 Add the Animation Montage Play for the Combo Ability",
          "32 Prevent the Combo From Firing By Using Gameplay Tags",
          "33 Play the Combo Montage on the Upper Body",
          "34 Use an Enum to Represent the Input ID for Given Abilities",
          "35 Add Input Action Binding for Abilities in the Player Character Class",
          "36 Create the Send Gameplay Event Animation Notify",
          "37 Handle the Combo Change Event in the Combo Ability",
          "38 Handle the Combo Transition in the Combo Ability Class",
          "39 Basic Idea of the Melee Target Direction",
          "40 Create the Animation Notify to Send Sweep Location Data in a Gameplay Event",
          "41 Define the Target Sockets and Configure the Target Notifies",
          "42 Implement the Sweep in the CGameplay Ability Class",
          "43 Add and Apply the Damage Effects",
          "44 Clamp the Attributes",
          "45 Add Punch VFX and Gameplay Cue",
          "46 Spawn Hit VFX with Gameplay Cue",
          "47 Add Camera Shake and Hit Reaction Animation"
        ],
        "Setup Death, Respawn and Teams": [
          "48 Add Death Signal With durational Gameplay Effect and Death Tag",
          "49 Implement the Death Sequence",
          "50 Implement the Respawn",
          "51 Enable Ragdoll When Dead",
          "52 Refine the Ragdoll Physics",
          "53 Import Our Game Level",
          "54 Add the TeamID to the Player Controller and Player Character",
          "55 Initialize Team ID and Start Spot for Players",
          "56 Respawn Player Character At Their Start Spot",
          "57 Prevent Player From Damaging Firendly Characters"
        ],
        "Create the Minions with AI Perception and Behavior": [
          "58 Add AI and Configure the AI TeamID and Sight Perception",
          "59 Add the Behavior Tree and Blackboard to the AI and Update the Target",
          "60 Implement the AI Forgetting to Update the Blackboard Target",
          "61 Use the AI Stimuli Source to Control AI Perception",
          "62 Make The AI Forget Dead Targets Immediately",
          "63 Basic Concept of an AI Behavior",
          "64 Implement the Chasing AI Behavior",
          "65 Make the AI Attack",
          "66 Add the Minion Assets and Configure the Animation Blueprint",
          "67 Create the Melee Combo Ability and Montage for the Minion",
          "68 Refine the Minion Health and add Damage VFX",
          "69 Implement the Death and Respawn of the AI Behavior and Perception",
          "70 Change the Skin Based on the TeamID",
          "71 Create the Minion Barrack Class and Implement Basic Minion Spawning",
          "72 Create the Peoridic Spawning of Minions",
          "73 Give a Goal to the Minions",
          "74 Improve the Behavior of the Minions",
          "75 Rfine the Ragdoll Logic and Refactor the Minion Class",
          "76 Adjust the Heath Bar Display of the Minion"
        ],
        "The Upper Cut Ability": [
          "77 Add the Upper Cut Ability and Key Binding",
          "78 Add the Upper Cut Targetting",
          "79 Add and Trigger the Passive Launch Ability",
          "80 Add Damage Cooldown Cost and Stun Effect to Upper Cut",
          "81 Add the Stun Behavior",
          "82 Add the Stun Animations",
          "83 Add the Combo Montages",
          "84 Listen for Basic Attack Input in Upper Cut",
          "85 Add the Upper Cut Combo Damage and Air Hold",
          "86 Refine the Upper Cut Combo Damage and Push Effect",
          "87 Add Upper Cut VFX"
        ],
        "Implement the Ability Gauge Widget": [
          "88 Create the Ability Gauge Class",
          "89 Pass The Abilities from the ASC To The GameplayWidget",
          "90 Add the Ability List View",
          "91 Use Data Table to Store Ability Icon",
          "92 Get and Display the Cooldown and Cost Values",
          "93 Implement the Countdown Logic",
          "94 Add the Count Down Radial Shading"
        ],
        "The Ground Blast Ability": [
          "95 Add the Ground Blast Ability",
          "96 Using an Aimming Tag to Alter the Body Rotation Control",
          "97 Add the Aimming Animations",
          "98 Add the Aim Camera Lerp",
          "99 Add and Spawn the Ground Pick Target Actor",
          "100 Update the Targeting Location to the Player View and Add Trace Channels",
          "101 Find Targets With our Target Actor",
          "102 Apply Damge to Targets",
          "103 Add VFX to Ground Blast",
          "104 Add the Decal to Ground Pick Actor",
          "105 Wrap up the Ground Blast Ability"
        ]
      },
      "requirements": [
        "Basic Understanding of Unreal Engine",
        "Basic Understanding of C++"
      ],
      "description": "This course walks you through the complete process of building a competitive 5v5 multiplayer game using Unreal Engine, the Gameplay Ability System (GAS), and AWS for cloud deployment. You'll learn to implement core gameplay mechanics in C++, design scalable systems with a modular architecture, and deploy dedicated servers using Docker and AWS—allowing players to connect and play from anywhere in the world.\nBy the end of the course, you'll have a fully functional MOBA-style game with:\nUser login and account system\nLobby creation and matchmaking\nCharacter selection\nA complete game loop\nDedicated server deployment on AWS\nThe course starts with implementing the basic character components, enhanced input system and movement control. A proper IK foot will also be implemented with Control Rig. The Gameplay Ability Systems will then be utilized to implement the character attributes and abilities, ensuring multiplayer support from the beginning, and tested throughout the course. The abilities can be learned, upgraded, and their effects are level driven. The ability system also uses attribute driven algorithms to determine character health, regeneration, and many other character properties, following industry standard implementations.\n\n\nTwo fully playable player characters with a total of twelve abilities will be implemented in the game, a melee combo, a ranged attack, four abilities for each of the player characters, and two shared passive abilities. With GAS and a flexible OOP approach, the game can be scaled up with more players with ease.\n\n\nA comprehensive AI driven minion is also implemented with the AI module of Unreal Engine. The AI has proper team id configuration, perception and forgetting routine, and can be reused for other types of games.\n\n\nA Completed inventory and shop system that is fully compatible with the Gameplay Ability is also implemented. The systems support multiplayer, using server authoritative approach, and support item stacking, consumption, granting abilities, and combinations. A combination widget will be implemented to show the entire combination tree of any selected item in the shop.\n\n\nEach of the components of the Game has complete UI implementation and a sophisticated animation blueprint will also be built to ensure the rich visuals of the gameplay.\n\n\nThere are many other systems that are created in the course, explore the course curriculum for a full breakdown of each system covered.\n\n\nThe course primarily uses C++ to implement the gameplay mechanics. With a modular approach, many systems are decoupled and can be repurposed for different types of games.",
      "target_audience": [
        "Game Developers Who Need to Make Solid Multiplayer Games with Unreal Engine",
        "Game Developers Who Need to Setup Dedicated Servers",
        "Game Developers Who Need a Complete and Deep Understanding of the Gameplay Ability System in Unreal Engine and How It Works with the Rest of the Engine",
        "Game Developers Who Want to Improve their Code Quality & Structure with C++",
        "Game Developers Who Need to Adapt to the Epic Online Services"
      ]
    },
    {
      "title": "Unreal 5 Materials - Part 4 Post Process Materials",
      "url": "https://www.udemy.com/course/unreal-5-materials-part-4-post-process-materials/",
      "bio": "Your complete course for learning Materials in Unreal Engine 5",
      "objectives": [
        "Learn industry standard best practices for Post Process Materials in Unreal 5",
        "Understand the different components of the Scene Texture node and what buffers are available",
        "Build up a library of Realtime Blurs and Distortions to replicate real world photography effects",
        "Replicate multiple real world effects, such as Underwater and Night Vision shaders"
      ],
      "course_content": {},
      "requirements": [
        "Some Experience of the Unreal 5 Material Editor"
      ],
      "description": "Welcome to Part 4 of my complete Unreal Engine 5 Materials Course, here on Udemy.  Following on from Part 1 - Environmental Materials and Part 2 - Animated Foliage Materials with World Position Offset and Part 3 - Visual Effects Materials, this course looks at Post Process Materials - using Scene Textures to create full screen effects for your scenes.  Over the course of 4 hours, all broken down into bite size 10-15 min videos, we cover everything from the basics of Post Process, Scene Textures, Depth based Effects and full example Materials for things like Underwater, Night Vision and Stylised Hand Drawn shaders.\n\n\nEach chapter contains many worked examples, full of handy comments, as well as a corresponding video lecture that explains in detail what is being done and why - so you're learning both the techniques and building up a base of  background knowledge of first principal concepts, allowing you to build up your own shaders in future.\n\n\nWith industry standard practices from my 15 year career, including 5 years of teaching Game Art at a Masters Degree level, this course will cover various uses of Post Process Materials - Basics, Scene Depth, Blurs and Distortions, Material Effects, Underwater, Night Vision, Sobel Edge Detection, Fake Lighting and Stylised Hand Drawn effects.",
      "target_audience": [
        "Any one looking to learn more about Realtime Post Process shaders"
      ]
    },
    {
      "title": "Unreal Engine 5 - VFX for Games - Stylized Explosion",
      "url": "https://www.udemy.com/course/ue5-vfx-stylized-explosion/",
      "bio": "Learn how to create an epic Stylized Explosion in UE5!",
      "objectives": [
        "Learn Niagara particle system.",
        "Learn how to create a Stylized Explosion.",
        "Learn Material Editor for stylized visual effects.",
        "Learn Visual Effects for Games.",
        "Learn how to create textures by hand and with Material Maker."
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Project and Niagara Overview": [
          "Download Project",
          "Niagara Overview Part 1",
          "Niagara Overview Part 2 - Sparks Emitters",
          "Niagara Overview Part 3 - Sparks System",
          "Recap of Niagara basics"
        ],
        "Stylized Explosion": [
          "Explosion Studies / Pre-Production",
          "So what's the ... ?",
          "Starting the Explosion",
          "Explosion Mesh",
          "Why is the ... ?",
          "Erosion Material Part 1 - Material Basics and Voronoi",
          "Why are we ... ?",
          "Erosion Material Part 2 - Voronoi Functions and Material Instance",
          "Erosion Material Part 3 - Erosion and Dynamic Parameters",
          "What does a ... ?",
          "Explosion Aspect",
          "Explosion Body",
          "Are you enjoying this course? I would love to have your feedback.",
          "Particles Impact",
          "Particles Floating",
          "Ring Smoke Mesh",
          "Ring Mesh Emitter",
          "Ring Smoke Texture",
          "Try to create another seamless texture for the Smoke Ring!",
          "Texture Erosion Material Part 1 - Pan and Tiling",
          "Texture Erosion Material Part 2 - Color and Erosion",
          "Smoke Waves",
          "Impact Waves",
          "Impact Flipbook Part 1 - Frame 3",
          "Impact Flipbook Part 2 - Frame 1 and 2",
          "Impact Flipbook Part 3 - Last Frame and Export",
          "Applying Impact Flipbook Part 1",
          "Applying Impact Flipbook Part 2",
          "Why did we ... ?",
          "Material Maker Overview",
          "How does ... ?",
          "Ground Crack Texture Part 1 - Voronoi Nodes",
          "Ground Crack Texture Part 2 - Noise Nodes",
          "Ground Crack Texture Part 3 - Glow and Export",
          "How did we ... ?",
          "Applying Ground Crack Part 1",
          "Applying Ground Crack Part 2",
          "Ground Mark Texture",
          "Applying Ground Mark",
          "Let's see the Ground Mark variations you can come up with!",
          "Smoke Trail Mesh",
          "Applying Smoke Trail Mesh",
          "Texture Erosion Material Part 3 - Mask",
          "How did we ... ?",
          "Smoke Trail Improvements",
          "Texture Erosion Material Part 4 - Distortion",
          "Ring 02 Mesh",
          "Orange Floating Rings",
          "Particle Trails Part 1",
          "Particle Trails Part 2",
          "How did we ... ?",
          "Shockwave",
          "Adjustments Part 1",
          "Adjustments Part 2",
          "Color Variations",
          "Do you ... ?"
        ],
        "Conclusion": [
          "Conclusion"
        ]
      },
      "requirements": [
        "Unreal Engine: Basic to Intermediate",
        "Krita or Photoshop: Basic",
        "Blender: Basic",
        "Graphic Tablet Helps",
        "Unreal Engine 5.3 or above"
      ],
      "description": "Get ready to create Stylized Explosions in Unreal Engine 5 with Niagara!\nEmbark on this adventure to build unique explosions for games and dive into the creation of stylized effects. With this techniques you can create a variety of effects and improve your portfolio or your Game Development skills!\nWe will have quick overview of Niagara with a sparks exercise. Then we will move on to the epic process of creating a Stylized Explosion!\n\n\nWith this course you will also learn:\n1) How to create simple and advanced Material/Shader techniques like Pan, Masks, Distortions, Erosions and more;\n2) Create original Textures from scratch and 3D Meshes;\n3) How to use Material Maker to create unique procedural node-based textures;\n4) How to create hand-painted Flipbook animations;\n5) VFX techniques that work in VR;\n6) Create Stylized Smoke;\n7) Improve your skills as a Game Developer.\n\n\nWe will have a look at the workflow of the Material Editor and see how to combine it with Niagara to create fantastic Real-Time visual effects for games!\nWhat are you waiting for? You can learn Stylized VFX for games right now! It will take you from a Beginner standpoint to an Intermediate level in Unreal Engine Visual Effects. Plus you will learn cool tips & tricks and get familiar with the Unreal Engine Niagara, a powerful tool!\n\n\nCourse made with Unreal Engine 5.3. Compatible with more versions too.\nA great addition to your portfolio or a great start! Join now!",
      "target_audience": [
        "Game Developers",
        "Unreal Engine Beginners or Veterans",
        "Unity Beginners or Veterans",
        "VFX Beginners",
        "Programmers",
        "Illustrators",
        "3D Generalists",
        "Digital Artists in General"
      ]
    },
    {
      "title": "Intro to Mobile Game and App Development and Corona SDK 2015",
      "url": "https://www.udemy.com/course/mobile-game-development-and-corona/",
      "bio": "Learn how to make your very own games using Corona SDK. You'll start with the basics and wind up with your own game.",
      "objectives": [
        "Learn about the LUA programming language",
        "Have a better understanding of Corona SDK",
        "Be able to create a catching the coin mobile game",
        "Understand how to create a 2d space shooter"
      ],
      "course_content": {},
      "requirements": [
        "System Requirements: Mac OS® X 10.10 or later, Intel Mac. For iOS builds, requires Xcode 6.3 or later",
        "Corona SDK Device Support: iOS 6.0 or greater. Android OS 2.3.3 or greater (ARMv7). Corona-built apps will not install on ARMv6 devices."
      ],
      "description": "How many apps do you have on your mobile device? And out of those apps, how many are games? Chances are you've probably downloaded more than a few. After all, gaming is one of the most popular uses for mobile devices.\n“According to App Annie Intelligence, games contributed around 80% of revenue and 40% of downloads generated globally on iOS and Google Play combined in December 2014.\" – App Annie\nIf you've always wanted to build and develop mobile games, there's no better time than now to learn and act on that dream. With “mobile gaming [driving] nearly half of all app downloads\" (App Annie), this is a field that is going to continue to grow.\nThink it's an expensive investment? Not at all – it's now possible to start your game development career without breaking the bank, thanks to a recent update from Corona Labs.\nWith the release of Corona SDK Starter – a free tier that allows you to download and use Corona for free, as well as publish your game to Google Play, iTunes, the Amazon App Store, and more – it has never been easier or cheaper to start building mobile games for millions of players worldwide.\nWith Intro to Mobile Game and App Development and Corona SDK 2015, you'll learn about the Lua language, programming concepts, Corona basics, and game development.\nHere's what you will learn in this course:\nThe Programming Language Lua – Build a solid understanding and foundation of the Lua programming language.\nCorona Basics – Here, you will discover some of the foundational pieces that make up Corona SDK, such as display objects, events, widgets, physics, and composer. Put Your\nKnowledge to Work – Learn By Doing. In this section of the course, you'll build a game called Bob the Catcher to help jump-start your game development career.\nBuilding More – This segment will cover how to create a 2D space shooter game filled with spaceships, lasers, and UFOs.\nThis online game development course is recommended for individuals who are just starting out in game development, but it can be just as useful for those who have already started their careers. From beginners to the slightly more advanced, every student will find something useful to take away from this course.\nSome of the topics covered in this course are:\nVariables, Operators, and Tables\nFor and While Loops\nIf/Then Statements\nFunctions\nDisplay Objects\nEvent Listeners and Physics\nWidgets\nComposer Scene Management\nThis course uses the latest public build of Corona SDK, graphics 2.0, and the official scene management tool by Corona – Composer.\nLearn how to build games faster and better with Corona SDK and advance your game development career!",
      "target_audience": [
        "This course is meant for individuals that are looking to create their first mobile game but don't know where to start. Although a basic understanding of programming will help, no programming knowledge is needed for this course.",
        "During this course, we'll cover the basics of programming concepts, the LUA language, and Corona SDK. This course is not meant to cover advanced topics because I want you to focus on releasing your first game."
      ]
    },
    {
      "title": "Make 5 Stunning Awesome Games in C++ using SDL2 Library",
      "url": "https://www.udemy.com/course/make-5-stunning-awesome-games-in-c-using-sdl2-library/",
      "bio": "Learn to Make Incredibly Powerful High Quality Graphic Games in C++ using the most powerful C++ Graphic Library SDL2",
      "objectives": [
        "Anyone who wants to make Pro Level Games in C++",
        "Anyone who want to become an Expert in Game Programming",
        "Anyone who want to make High Quality Graphical Games in C++",
        "Anyone who want to get a kind of a blueprint of making any type of Game in C++"
      ],
      "course_content": {
        "Installing and Setting up SDL2 on a C++ IDE": [
          "Installing and Setting up SDL2 on a C++ IDE",
          "Download all Resource Files"
        ],
        "Google Dino Dinosaur Game in C++ using SDL2 Library": [
          "Dino Game : Displaying the GUI SDL2 Window",
          "Dino Game : The Quit Event",
          "Dino Game : Putting the Dino on SDL2 Window",
          "Dino Game : Handling Dino Jump and Applying Gravity",
          "Dino Game : Creating a Ground Scrolling Effect in the Game",
          "Dino Game : Obstacles Movement",
          "Dino Game : Putting Pteras at Different Altitudes",
          "Dino Game : Collision Detection Function",
          "Dino Game : Game Over Conditions",
          "Dino Game : Replay Game",
          "Dino Game : Complete Game - Final Explanation"
        ],
        "Brick Breaker Game in C++ using SDL2 Library": [
          "Brick Breaker Game : Displaying the GUI SDL2 Window",
          "Brick Breaker Game : Displaying the Ball",
          "Brick Breaker Game : Event Handler Function",
          "Brick Breaker Game : Setting up the Background Image",
          "Brick Breaker Game : Moving the Ball",
          "Brick Breaker Game : Ball Collision with the Walls",
          "Brick Breaker Game : Bat Movement",
          "Brick Breaker Game : Bat Ball Collision",
          "Brick Breaker Game : Bricks Initialization",
          "Brick Breaker Game : Ball Brick Collision",
          "Brick Breaker Game : Winning Condition",
          "Brick Breaker Game : Freeing up Memory - Destroy Function",
          "Brick Breaker Game : Game Over",
          "Brick Breaker Game : Completing the Game - Final Explanation"
        ],
        "The Helicopter Game in C++ using SDL2 Library": [
          "Helicopter Game : Displaying the GUI SDL2 Window",
          "Helicopter Game : Putting Helicopter on SDL2 Window",
          "Helicopter Game : Helicopter Movement",
          "Helicopter Game : Collision with Walls",
          "Helicopter Game : Loading and Moving Obstacles",
          "Helicopter Game : Helicopter Obstacles Collision Detection",
          "Helicopter Game : Game Over",
          "Helicopter Game : Displaying and Rendering Score",
          "Helicopter Game : Completing the Game - Final Explanation"
        ],
        "Space Invader Game in C++ using SDL2 Library": [
          "Space Invader Game : Displaying the GUI SDL2 Window",
          "Space Invader Game : SDL Quit Event Functionality",
          "Space Invader Game : Displaying the Spaceship",
          "Space Invader Game : Spaceship Movement",
          "Space Invader Game : Spaceship Fire",
          "Space Invader Game : Enemies Movement",
          "Space Invader Game : Collision Detection b/w Spaceship and Enemies",
          "Space Invader Game : Killing Enemies on Bullet Fire",
          "Space Invader Game : Game Over Functionality",
          "Space Invader Game : Replay the Game"
        ],
        "Snake Game in C++ using SDL2 Library": [
          "Snake Game : Displaying the GUI SDL2 Window",
          "Snake Game : Displaying Snake on SDL2 Window",
          "Snake Game : Moving the Snake",
          "Snake Game : Collision with Walls",
          "Snake Game : Snake Eating Food",
          "Snake Game : Snake Self Collision",
          "Snake Game : Game Over Conditions",
          "Snake Game : Completing the Game - Final Explanation"
        ],
        "C++ Crash Course": [
          "C++ Crash Video"
        ]
      },
      "requirements": [
        "No Programming Experience Required as we have a separate 7 Hours C++ Crash Course in the last Section of the Course"
      ],
      "description": "In this course you will be able to learn about the Game Development concept in C++. We are going to do Game Development in C++ using the most powerful C++ Graphic Library SDL2. SDL2(Simple Direct Media Layer) is a very famous and interactive module for Game development in C++. You are going to cover the very latest concepts of Game Development using SDL2 in this course where we will be covering 5 Games using SDL2 each introducing new and interesting concepts for you to learn.\n\n\nEach game is going to help you to learn more and more interesting concepts. At the end of this course I assure you that you will be able to create a totally new Game of your own requirements and specifications in SDL2. This course covers the latest concepts of C++ and SDL2. Moreover if you no knowledge of C++ or SDL2 or any other Programming Language then you don't have to worry about it. We have uploaded a C++ Crash Course at the end of this course that will help you gain a good knowledge of  C++before you start on with the game development in SDL2.\n\n\nEach Game that we have made in this course is independent from other games means that you don't have to take the 1st and 2nd Game in order to start the 3rd Game. You can make the Games in any order you see fit. We have talked a lot about SDL2 in this course and what is actually behind the built-in stuff in SDL2. If you already know the basic of C++ then there is no need to take the crash course which is in the last section of the course.\n\nIn the course, if you have any type of Questions or if you are having trouble understanding anything then you can directly reach out to me or you can ask your question in the Q/A section. I have attached the code with each lecture so that if you got stuck somewhere then you can use the code. There is couple of challenging assignments that will test your skills and how much you are learning in the course.\n\nI wish you a very best of Luck with the Course.\n\nThanks!",
      "target_audience": [
        "Anyone who wants to make Pro Level Games in C++",
        "Anyone who want to make High Quality Graphical Games in C++",
        "Anyone who want to get a kind of a blueprint of making any type of Game in C++",
        "Anyone who want to become an Expert in Game Programming"
      ]
    },
    {
      "title": "Unity Game Tutorial: 3D Memory Game / 3D Matching Game",
      "url": "https://www.udemy.com/course/unity-game-tutorial-3d-memory-game-3d-matching-game/",
      "bio": "Learn how to create your own 3D Memory Game or 3D Matching Game using the Unity Game Engine.",
      "objectives": [
        "Learn how to create a 3D Memory or Matching Game in Unity Game Engine.",
        "Learn to Animate Cards in 3D using Unity Tools like the Animator.",
        "Learn to code with C# to create needed Game Logic."
      ],
      "course_content": {
        "Introduction & Preperation": [
          "Introduction",
          "Memory Game Conzept",
          "Basic Unity Setup"
        ],
        "Memory Cards": [
          "Memory Card Sprite Atlas",
          "Memory Card Preparation #1",
          "Memory Card Preparation #2",
          "Animating the Memory Card",
          "Animator Setup",
          "Player Input",
          "The Card Script #1",
          "The Card Script #2",
          "Updating Card Prefab"
        ],
        "Memory Card Manager": [
          "The Card Manager #1",
          "The Card Manager #2",
          "The Card Manager #3",
          "The Card Manager #4",
          "Error Checking Playfield",
          "Camera Setting"
        ],
        "Memory Game Mechanics": [
          "Choose only 2 Cards",
          "Checking for a Match",
          "Checking for Win",
          "Hide or Show Matches"
        ],
        "Simplify Memory Game Setup": [
          "Editor Scripting 1",
          "Editor Scripting 2",
          "Visualize Playfield"
        ],
        "Other Game Elements": [
          "Timer",
          "Timer Graphics",
          "Coding The Timer Bar",
          "Timer Text",
          "Scoring System",
          "Adding Score",
          "Turn System",
          "Game Over Setting"
        ],
        "Effects and UI": [
          "Particle Effect: Confetti",
          "Activate Confetti",
          "Stopping Timer on Win",
          "Picking Random Sprites",
          "Game Over Panel",
          "Fixing Game Over Panel",
          "Win Panel",
          "Win Screen Confetti",
          "Show Hide Panels",
          "Button Script",
          "Menu Scene",
          "Different Game Modes",
          "Website Button",
          "Adding Desk Background",
          "Menu Background",
          "Cleaning Debugs"
        ],
        "Conclusion & Extras": [
          "Conclusion",
          "Bug Fix",
          "Other Fixes"
        ]
      },
      "requirements": [
        "You need Unity Game Engine.",
        "Basic Unity knowledge is always helpful, but not necessary.",
        "A working IDE.",
        "Computer or Mac."
      ],
      "description": "In this Unity Video Course you will learn how to create your own 3D Memory Game or 3D Matching Game using the Unity Game Engine. For the functionality we write C# Code in Monodevelop, Visual Studio or which ever IDE you choose.\nThis course is a Beginner/Intermediate course, so if you have trouble in any case, write me a message or Q&A, and i'll help as best as i can.\nUnity (2020.3 used in this course)\nYou will learn to create a new 3D Project in Unity and set up everything needed\nI will show you how you can setup the playfield and create our own cards.\nI will show you to interact with the cards and flip them using the Animator\nC#\nWe will put in functionality with scripts using Monodevelop and C# (you can use Visual Studio or any other IDE)\nAlso we implement a Timer, Score and Turns for more User Experience\nWe create an Editor Script to simplify our Game Playfield or Grid settings\nWe create some helper fuctions to visualize the playfield as well.\nConclusion\nAs a result of this course you should be able to create your own level with different sizes and cards for your Memory Game.\nIn the end of this course you will have a fully functional 3D Memory Game.\nCourse Material\n1 Card Deck with 10 Animals\n7 UI Atlas with different UI Grafics\n1 Checkerboard Texture\n1 extra Background for UI Menu\nYou have to write the code on your own, i do not provide the final scripts!\nThe Course Material is for education purposes only, so if you want to release your own game, create your own grafics for that. All Materials i provide are for education only and should not be in your final release!\nChallenge\nAfter you have created nice Menus, Buttons, and maybe additional content, upload the Game to any Gaming Website, Google Playstore, Apple Store or even Windows Store or Steam.\nSo what are you waiting for?\nLet's make your dream game a reality!!\nLevel: Beginner+\nVideo Course Length: ~6h 43mins\nUnity Version required: 5.6+",
      "target_audience": [
        "Beginner Game Developers which are interested in Game Creation.",
        "Hobbiests which like to learn how to create a 3D Memory Game.",
        "Beginner which like to learn how to use Unity Game Engine."
      ]
    },
    {
      "title": "How To Make Games with Gamemaker Studio 2 using GML",
      "url": "https://www.udemy.com/course/how-to-make-a-game-with-gamemaker-studio-2/",
      "bio": "Learn How to Create a Game With Gamemaker Studio 2 from Scratch using GML, Game Maker's Programming Language",
      "objectives": [
        "How To Create a Video Game",
        "Programming Video Games Using GML",
        "How To Gain Confidence Using GML"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Developing Your Game": [
          "Creating A Room, Player & Movement",
          "Adding Sprinting, Stamina & Health",
          "Adding Jumping, Obstacles & Damage",
          "Adding Weapons, Ammo & Pickups",
          "Adding Enemies, Loot Drops & Rarities",
          "Adding Mana, Spells & Potions",
          "Adding Menus, Classes & Races",
          "Adding Experience, Levels & Unlocks",
          "Adding Loot Boxes, Rarities & Unlockables"
        ],
        "Conclusion": [
          "Summary"
        ]
      },
      "requirements": [
        "GameMaker Studio 2 is required",
        "We use Photoshop for the menus but you can use Paint or other free alternatives"
      ],
      "description": "What Is Included In This Course?\n· Learn how to make a PC game with GMS2\n· Learn how to program games using GML (Gamemaker Language)\n· Be trained by a serial entrepreneur who does this for a living!\n\n\nThis course does not cover animation or sound, we are focussing primarily on game maker language programming and teaching you pieces of code that you can then take and convert for use in your own games.\n\n\nHere’s what some of my students have to say about my other courses:\n\n\n\"Lee ably shares a step-by-step means of becoming a profitable book publisher using Amazon KDP\"\n\"Very helpful course, thanks Lee! Will be looking out for any follow-up courses Lee puts out to help us publishers become more profitable.\"\n\"Found it very useful as someone with almost no idea about how Kindle publishing works. The instructor is quite straightforward with not just information but also his own experiences and expertise\"\n\"Straightforward, action-based and no BS (something hard to find in \"make money online\" courses these days lol)\"\n\n\nThis course introduces you to the basics of making a platformer game by giving you the ability to take the lessons to your own games\n\n\n· 2023 course!. no outdated content!\n· Get a demonstration of how to get started with game design",
      "target_audience": [
        "Game Developers",
        "Game Designers",
        "Programmers",
        "Developers"
      ]
    },
    {
      "title": "C# & Unity By Example : 20+ Mini Game Development Projects",
      "url": "https://www.udemy.com/course/c-sharp-projects-for-unity-game-development/",
      "bio": "Learn C# scripting by Building Games with Unity . Build 20+ Mini Projects with C# Scripting for Unity Game Development",
      "objectives": [
        "Learn C# by building mini projects",
        "Learn Unity C# Scripting by Example",
        "Create Ready to use C# scripts for Unity",
        "Master essential programming concepts",
        "Build fully functional 2D Games",
        "Get familiar with Unity & Visual Studio",
        "Quickly build mini Game projects",
        "Learn C# by building Games with Unity"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Installing & Setting Up Unity 6",
          "Creating Your First Script in Unity 6"
        ],
        "Absolute Beginner's Guide To C#": [
          "Getting Started With C# & Unity",
          "Understanding Structure of a C# Script",
          "Event Functions in Unity",
          "Variables in C#",
          "Public variables in Unity C#",
          "Understanding The Update function",
          "Basics of Functions in C#",
          "Functions with Parameters & Return types in C#",
          "if else statements in C#",
          "More Conditions & Equality Checking",
          "Boolean variables in C#",
          "Arrays in C# Unity",
          "More about Arrays in C#",
          "For loops in C#",
          "While loops in C#",
          "Learning foreach loops in C#",
          "Switch Case Statements in C#"
        ],
        "Project 1 : Destroying Objects with C# in Unity": [
          "Destroying Objects with C# in Unity"
        ],
        "Project 2 : Detecting Mouse Clicks with C# Practical Example": [
          "Detecting Mouse Clicks with C# in Unity"
        ],
        "Project 3 : Detecting Keyboard Inputs in C#": [
          "Detecting Keyboard Inputs in C# Unity"
        ],
        "Project 4 : Moving Objects with Velocity in Unity": [
          "Moving Objects using Physics Functions in C#"
        ],
        "Project 5 : Moving Objects With Keyboard Inputs": [
          "Moving Objects With Keyboard Inputs in Unity C#"
        ],
        "Project 6 : Flipping Direction of Player with C# in Unity": [
          "Flipping Direction of Player with in Unity"
        ],
        "Project 7 : Detecting Collision & Destroying Objects in C#": [
          "Detecting Collision & Destroying Objects in C#"
        ],
        "Project 8 : Creating Scoring System with C# in Unity": [
          "Creating Scoring System with C# in Unity"
        ]
      },
      "requirements": [
        "No previous programming experience required"
      ],
      "description": "Do you want to skip the boring part and learn C# by lots of practical examples?\nThen this is the perfect course for you.\nList of Things You Will Learn:\nLearn C# with 20+ mini projects\nUnderstand absolute basic concepts of programming\nLearn essential C# Scripting for Game Development\nBuild 2D Games with Unity & C#\nCreate Ready To Use C# Scripts\nMaster C# by building Games with Unity\nI have taught C# Scripting to thousands of people on my Youtube Channel: Charger Games. I love teaching complex concepts in a simple way, so even if you have no previous coding experience, no need to worry, I'm gonna teach you everything step by step in the perfect order.\nLearn the basic concepts, tools, and functions that you will need to build fully functional Games with C# and the Unity game engine.\nBuild a strong foundation in C# Scripting and Unity Game Development with this course.\nGet Started With C# programming\nLearn fundamentals of Unity API\nLearn Object Oriented Programming Concepts\nCreate Reusable C# scripts\nLearn Intermediate C# Concepts in Unity\nTake Your C# Skills to the next level\nA Powerful Skill at Your Fingertips Learning the fundamentals of C# Scripting in Unity puts a powerful and very useful tool at your fingertips. Unity is free, easy to learn, has excellent documentation, and is the game engine used for building games.\nJobs in unity game development are plentiful, and being able to learn C# Scripting along with Unity game development will give you a strong background to more easily build awesome games.\nContent and Overview Suitable for beginning programmers, through this course of 50+ lectures and 10+ hours of content, you’ll learn all of the Unity C# Scripting fundamentals and establish a strong understanding of the concept behind C# programming.\nStarting with the installation of the Unity , Visual Studio , this course will take you through various C# language features and how to use them. By creating example C# Scripts, you’ll a establish a strong understanding of unity game development.\nWith these basics mastered, the course will take you through building different example games with unity to learn more about the process of creating mobile android games with unity.\nStudents completing the course will have the knowledge to create fully functional Games with C# or use their C# skills to Build any other useful thing that they want.\nComplete with working files, you’ll be able to work alongside the author as you work through each concept, and will receive a verifiable certificate of completion upon finishing the course.",
      "target_audience": [
        "Anyone willing to learn C# by building example projects",
        "Unity developers willing to learn C# by building mini projects"
      ]
    },
    {
      "title": "Unreal Engine 5 Create RPG Mobile Game For Play Store",
      "url": "https://www.udemy.com/course/unreal-engine-5-create-rpg-mobile-game-for-play-store/",
      "bio": "Unlock your game development potential with our comprehensive course designed to guide you through the creation of a ful",
      "objectives": [
        "Unreal Engine Advanced Blueprint",
        "Game Quest System",
        "Create Virtual Joystick For Android Inputs",
        "Make Mini Map With Player Location",
        "Export Game For Android",
        "Publish Your Game On Play Store"
      ],
      "course_content": {
        "Setup Unreal Engine 5.4.4 For Android Development": [
          "Install Unreal Engine 5.4.4 For Android Development",
          "Download Android Studio & Java runtime",
          "Setup Android Studio & SDK NDK",
          "Download Missing SDK And Tools",
          "Setup Java runtime",
          "Create New Project For Testing Purpose",
          "Package Project For Android 11",
          "Install Your Game On Android Device"
        ],
        "Setup SDK NDK JDK For Unreal Engine 5.5.4": [
          "Setup SDK NDK JDK For Unreal Engine 5.5.4",
          "Package Apk And Install On Real Device"
        ],
        "Create And Prepare Your 3d Character With Your Own Face": [
          "Make A 3D Character Using Your Own Face",
          "Install Blender To Customize Character",
          "Make Eye And Face Morph Target",
          "Auto Rig On Adobe Mixamo",
          "Get All Animation For Our Game",
          "Use Mixamo Converter To Add Root Motion",
          "Import All Asset In To Unreal Engine"
        ],
        "Setup Player Character": [
          "Create Blueprints",
          "Setup Game Mode Blueprints",
          "Setup Third Person Character",
          "Setup Player Controller",
          "Setup Movement Input",
          "Add Mouse Rotation Input",
          "Setup Android Touch Input",
          "Setup Jump Input"
        ],
        "Setup Animation Blueprint": [
          "Create Animation Blueprint",
          "Setup Blendspace 1D",
          "What Is Get Velocity Node",
          "Setup Walk And Running Input",
          "Add Jump Animation",
          "Optimize Jump Animation",
          "Download 4 Way Movement Aniimation",
          "Setup 4 Way Movement",
          "Add Turn In Place System"
        ],
        "Combat System": [
          "Download Hand Combact Animation",
          "Setup Attacking Animations",
          "Anim Notify State To Block Movement",
          "Optimize Turn animation"
        ],
        "Sword Combat System": [
          "Download 4 Way Axe Movement Animation",
          "Setup 4 Way Axe Movement",
          "Import Weapons And Setup On Player Hand",
          "Setup Blueprint Interfaces",
          "Use Enumeration To Switch Animation Layer",
          "Add Equept Animation",
          "Store Weapon On Back",
          "Adjust Equipt Animation",
          "Setup UnEquept Sword System With Animation",
          "Fixing Turn And Equipt & UnEquipt Animation",
          "Import Sword Attack Animations",
          "Ability Attack Animation With Root Motion"
        ],
        "Bow And Arrow System": [
          "Setup Bow And Arrow Animation",
          "Blend 4 Way Movement Layer Animation",
          "Setup Bow Aim Ofset",
          "Add Camera Moving Animation",
          "Import Bow Model And Add To Player Hand",
          "Create Bow Animation",
          "Setup Bow Animation Input",
          "Setup Arrow",
          "Throw Arrow",
          "Setup Line Trace By Channel",
          "Setup Component Move To",
          "Destroy Arrow After Spawn",
          "Attach Arrow To Hit Actor Bone",
          "Fix Aim Ofset And Camera Pitch Input"
        ],
        "Arrow Counter With Bow Quiver": [
          "Import Arrow Box And Attach To Player Character",
          "Arrow Counter Update Arrow Box"
        ],
        "Ui And Touch Input": [
          "Import Icons",
          "Create Widget Bluprint With Hp And Quest And Setting Icon",
          "Add All Icon In Widget",
          "Add Touch Jump Input",
          "Add Run Walk Button Input",
          "Change Movement Icon Depend On Player Movement",
          "Setup Action Button Input",
          "Create Ui Layer Canvas",
          "Add Inventory Icon In Widget",
          "Add Animations on Inventory Icons",
          "Add Input For Inventory Buttons",
          "Setup Weapon Switcher Logic",
          "Setup Weapon Ui Layer",
          "Setup Bow And Arrow Touch Input",
          "Fixing Sword And Aim BUG",
          "Create One Side Virtual Joystick",
          "Setup Right Hand Touch Input"
        ]
      },
      "requirements": [
        "Example: No programming experience needed. You will learn everything you need to know"
      ],
      "description": "Unlock your game development potential with our comprehensive course designed to guide you through the creation of a fully functional RPG mobile game using Unreal Engine 5. Whether you're a beginner or an experienced developer, this course will provide you with the skills and knowledge needed to bring your game ideas to life and publish them on the Play Store.\n\n\nWhat You'll Learn:\n\n\nIntroduction to Unreal Engine 5: Get familiar with the interface, tools, and features that make UE5 a powerful choice for mobile game development.\nGame Design Fundamentals: Understand the key elements of RPG design, including storytelling, character development, and world-building.\nCharacter Creation and Animation: Learn how to create and animate your own characters, from rigging to applying animations.\nBuilding Environments: Discover how to design immersive game worlds using UE5’s powerful landscape and environment tools.\nGameplay Mechanics: Implement core RPG mechanics such as quests, inventory systems, and combat systems.\nUser Interface Design: Create intuitive and engaging UI elements tailored for mobile devices.\nOptimization for Mobile: Master techniques to ensure your game runs smoothly on a variety of mobile devices.\nPublishing to the Play Store: Step-by-step guidance on packaging your game and preparing it for release on the Google Play Store.\n\n\nWho This Course Is For:\n\n\nAspiring game developers looking to create a mobile RPG.\nHobbyists interested in learning Unreal Engine 5.\nAnyone wanting to understand the game development pipeline from concept to launch.\n\n\nCourse Features:\n\n\nHands-On Projects: Follow along with practical projects that build your skills incrementally.\nDownloadable Resources: Access helpful materials, including assets and templates.\nCommunity Support: Join a vibrant community of learners and receive feedback on your projects.\nLifetime Access: Enjoy lifetime access to course materials and updates.\n\n\nTransform your ideas into an engaging mobile RPG and take your first steps toward becoming a successful game developer. Enroll now and start your journey with Unreal Engine 5!",
      "target_audience": [
        "Anyone interested in mobile game development"
      ]
    },
    {
      "title": "Mastering Coroutines in Unity",
      "url": "https://www.udemy.com/course/mastering-coroutines-in-unity/",
      "bio": "Master Coroutines and create UI Animation system to drive your games",
      "objectives": [
        "Using of coroutines inside Unity with C#",
        "Create state machines with coroutines",
        "Create custom UI animation system",
        "Optimize slow methods with coroutines",
        "Create simple idle clicker game",
        "Programming tips and tricks"
      ],
      "course_content": {
        "Introduction": [
          "Course Preview",
          "Course Overview",
          "Useful Visual Studio Extension"
        ],
        "Basics": [
          "Coroutines Introduction",
          "Yield Instructions",
          "How To Start And Stop Coroutines"
        ],
        "Building UI Animator": [
          "Driver Introduction",
          "Driver Playback Direction",
          "Driver Progress",
          "Driver Looping",
          "Driver Callbacks",
          "Driver Custom Wait Time",
          "Driver Autostart, Pre-Start and Post-Reset",
          "Driver Refactoring",
          "Transform Controller Introduction",
          "Controller Auto Connect To Driver",
          "Controller Animate From Value To Value",
          "Controller Animate In Specific Axes",
          "Controller Animation Curve Easing",
          "Controller Refactoring To Abstract Class",
          "Image Controller",
          "Canvas Group Controller",
          "Controller Preview Animation In Editor",
          "Controller Remote Driver Access",
          "List Player Part 01",
          "List Player Part 02",
          "UI Animator Refactoring And Export"
        ],
        "Animating Game Menu With UI Animator": [
          "Animating Game Menu Part 01",
          "Animating Game Menu Part 02"
        ],
        "Building Idle Clicker Game": [
          "Game Manager Part 01",
          "Game Manager Part 02",
          "Creating Item Data And Item Manager",
          "On Click Process",
          "Creating Item Animations",
          "Item Available Logic",
          "Item Can Buy Logic",
          "Item Can Buy Manager Logic",
          "Finishing Item Prefabs",
          "Robot Animations",
          "Cook Progress Manager Part 01",
          "Cook Progress Manager Part 02",
          "Start Game Animation"
        ],
        "State Machine With Coroutines": [
          "Project Overview",
          "Basic State Machine Part 01",
          "Basic State Machine Part 02",
          "Adding Animations With Variations",
          "Optimizing Slow Methods"
        ],
        "Extras": [
          "Unity Hub Overview",
          "Unity Basics"
        ]
      },
      "requirements": [
        "You should be familiar with C# and the Unity Game Development Engine.",
        "Mac or PC with Unity 3d 2019.1 or later installed",
        "You will need to be able to read and write simple programs"
      ],
      "description": "The course begins with a basic explanation of coroutines and why they are so useful.\nThen you'll learn the difference between normal c# methods, update method and coroutine.\nFollowing on, we will start to build our UI animation system driven by coroutines.\n\n\nOur UI Animation will include some advanced techniques like:\nhow to pause and resume the coroutine\nhow to check if coroutine is running\nhow to delay coroutine\nhow to get a callback from the coroutine\nhow to start multiple coroutines all at once\nhow to write custom yield instruction\nLater when our system is finished we will export it as Unity package so we will be able to use it in our next projects.\nOur first project where we will use our UI Animation system will be simple animated game Menu. Which will show us the flexibility of our system. The second biggest project will be a complete idle clicker game, full of interactive animations. The interesting fact will be that the game is created very effective without any update method.\nIn the end, we will learn how to create State machines with the help of coroutines and also one very cool way how to optimize slow methods.\n\n\nWhy learn from me?\nI created this course to share my passion for making games and help others to simplify their work.\nI am trying to find effective and fast methods to solve problems, so I hope you will find some of my systems and tips and tricks useful also for you.\n\n\nWhat you’ll learn\nWhat are coroutines and what they are good for\nCreate UI Animation System\nCallbacks from coroutines\nTrigger Actions When Property is changed\nProgram Simple Game Without the need of Using Update Method\nOptimize slow methods with coroutines\nWrite custom yield instructions\nCreate simple state machines with coroutines\n\n\nAre there any course requirements or prerequisites?\nMac or PC.\nYou will need to download and install Unity 19.1 or later\nYou should be familiar with C# and the Unity Game Development Engine",
      "target_audience": [
        "Intermediate Unity developers with a basic working knowledge of C# scripting",
        "Anyone keen to find out how coroutines in Unity works",
        "Those wanting to create UI animation system, state machines, and learn how to optimize slow methods."
      ]
    },
    {
      "title": "JavaScript DOM Pacman Game Project Learn JavaScript Code",
      "url": "https://www.udemy.com/course/javascript-game-js/",
      "bio": "Create a JavaScript Pacman game from scratch Vanilla JavaScript using Document Object Model DOM Game source code",
      "objectives": [
        "How to create a JavaScript Game using JavaScript and DOM",
        "How to manipulate DOM elements using JavaScript",
        "Game Development",
        "JavaScript Code Project",
        "How to create a Dynamic Game from scratch"
      ],
      "course_content": {
        "How to Create PacMan using JavaScript and the DOM only course introduction": [
          "Introduction to creating a dynamic Pacman Type game using JavaScript"
        ],
        "Create Game Assets and setup code HTML and CSS": [
          "Game Files Setup and Planning for JavaScript Pacman Game",
          "How to Create Game Assets for Pacman Game in JavaScript",
          "How to create with CSS - CSS Create the Ghosts",
          "Create Pacman ghost with CSS only Source Code Example",
          "How to setup Game assets CSS Create the PacMan",
          "Use CSS create Pacman Wall Power Pellet Dots and game score setup source code"
        ],
        "JavaScript Gameplay create Pacman game with Vanilla JavaScript Code": [
          "How to select elements using JavaScript Select Elements",
          "JavaScript Game Element Selection and Setup Variables Code Example",
          "How to Create Game Board JS.",
          "CSS Grid to Create Main Game Board Grid for Pacman Code Example",
          "Pacman Game how to Add Ghosts to GameBoard",
          "How to add to the game Add Ghosts to GameBoard 2",
          "Add Ghosts and Pacman to Game Board - Source Code Example",
          "How to make animations Add Animation Frame Movement",
          "Add Event Listeners Move on Game Grid for Keypresses Source Code",
          "How to make elements move within the game Movement Parameters",
          "Pacman eat Dots Move and Avoid Walls on Grid Source Code",
          "How to setup Pacman Movement Mouth and Eyes",
          "Grid Movement and Detect Boundaries and Position Pacman Direction Source Code",
          "How to add Ghost Movement JavaScript",
          "Add Ghost Enemy Movement to Game JavaScript Source Code Example",
          "How to make assets move on their own Make The Ghosts Smarter.",
          "Create Smart Ghost Movement and Grid Row and Column Detection Code Example",
          "Adding Stop and Start GamePlay.",
          "Reset and Start Position for Ghosts and Pacman Coding Source Code Example",
          "JavaScript Game code updates Game Tweaks and Fixes",
          "Ghost opacity of elements with JavaScript Source Code example",
          "How to add score to your game Scoring added",
          "Add Game Scoring Source Code Example",
          "Add player options and gameplay concepts Game Over and Start",
          "Adding a start Button Source Code Example",
          "How to setup Game Over and Restart",
          "Game updates and setup restart options for game source code",
          "How to add gameplay Reset Default Values Restart",
          "Reset and reStart game values of arrays source code",
          "How to setup End Game Win Condition",
          "Player Win Condition Source Code",
          "How to add features Player PowerUP.",
          "Source Code Change Ghost Color on PowerUp",
          "Setup player powerup Pacman Eat the Ghost.",
          "GamePlay tweaks and visual adjustments for better gameplay Source Code",
          "Adding new levels and dynamic board generation New Levels and Boards",
          "Game updates and tweaks to code source code example",
          "How to automatically generate gameboards Generate Level Content",
          "How to Generate Level Content 2",
          "Generate Random Levels in JavaScript Game - Source Code Example",
          "Game play Final JavaScript Pacman Test and debug issues",
          "Source Code final Tweaks and Adjustments JavaScript Pacman Code",
          "JavaScript Pacman Game Review."
        ],
        "Coding Examples with JavaScript Common Questions and source code": [
          "Strings and Array methods coding examples with JavaScript",
          "Source Code Strings and Array methods coding examples with JavaScript",
          "Learning Guides and resources PDF guides"
        ]
      },
      "requirements": [
        "HTML CSS and JavaScript Fundamentals",
        "Access to computer",
        "Prior coding experience",
        "Use of a code editor",
        "Running code in a browser"
      ],
      "description": "Explore how YOU can CREATE a PacMan Type Game from scratch using JavaScript and ONLY JavaScript DOM\nPerfect to practice and learn more about web design and web development - create game play directly within your website.  Run in the browser and have fun!   Learn about game design and how you can create a DOM based web game from scratch using JUST JavaScript.\nDOM Manipulation - Event Listeners - Create Elements on the Page - ALL DONE WITH JAVASCRIPT\nStep by step how to create a GAME -\nUsing CSS create game assets\nSetup the game board and select elements using JavaScript\nSOURCE CODE is INCLUDED.....\nExplore how you can create a PacMan type game from scratch using JavaScript\nPractice JavaScript create your own version of the game\nExplore how to manipulate elements on the page using JavaScript\nDOM manipulation and element selection\nMake the enemies smarter detect where the player is located\nScore keeping from the game play\nStart Stop and Restart game\nGenerate dynamic Game boards\nFully Dynamic code that you can update the variables and change the game\nBuild your own version of this game today.",
      "target_audience": [
        "JavaScript Coders",
        "Anyone who wants to create a game on the web",
        "Anyone who wants to practice JavaScript",
        "Anyone who wants to learn how to create a pacman type game"
      ]
    },
    {
      "title": "Make a Unity® Platform Game & Low Poly Characters in Blender",
      "url": "https://www.udemy.com/course/unitygamelowpolycharacters/",
      "bio": "Includes FREE book and access to 6 webinars! Beginner's guide to making a complete game in Unity® & 3D models in Blender",
      "objectives": [
        "Code in Unity®.",
        "Know the foundations of 3D model-making in Blender.",
        "Unwrap UV's and perform simple texturing of 3D art assets.",
        "Build a simple game that is easy to expand on.",
        "Navigate Blender.",
        "Create 5 3D models of different types of characters.",
        "Put the art you make in this course into your portfolio."
      ],
      "course_content": {
        "Introduction to the Course": [
          "Gameplay from the Marlo Game"
        ],
        "Introduction to Unity": [
          "Introduction",
          "Unity Editor",
          "Hello world!",
          "Variables",
          "Methods",
          "Loops",
          "Movement"
        ],
        "Movement for a Super Marlo Runner Game (Unity Project)": [
          "Movement",
          "Acceleration",
          "Camera follow",
          "Jumping",
          "Jump higher",
          "Jumping Area",
          "Multiple Jumps",
          "Wall Jumping",
          "Materials",
          "Sticking to the wall"
        ],
        "Blocks (Unity Project)": [
          "Coins",
          "Score",
          "User interface",
          "Bricks",
          "Coin brick",
          "Pause block"
        ],
        "Speed blocks and enemies (Unity Project)": [
          "Arrow design",
          "Prefabbing the speed area",
          "Speed area collision",
          "Changing the player's movement speed",
          "Property attributes",
          "Long jump block",
          "Simple enemy",
          "Killing the player",
          "Restarting the game"
        ],
        "More enemies (Unity Project)": [
          "Killing enemies",
          "Designing the shell enemy",
          "Shell",
          "Shell movement",
          "Designing the plant enemy",
          "Plant movement"
        ],
        "Power up and Finish line (Unity Project)": [
          "Adjusting shell collision",
          "Designing a powerup",
          "Powerup collection effect",
          "Invincibility",
          "Blinking effect",
          "Different player models",
          "Finish line"
        ],
        "Background and interface (Unity Project)": [
          "Background elements",
          "Building the parallax logic",
          "Mountain parallax",
          "Cloud layer",
          "Moving backgrounds",
          "*We adjust the jumping area in the following lecture.",
          "Jumping area adjustment",
          "Main menu",
          "UI Anchors",
          "Game instructions"
        ],
        "Fine Tuning (Unity Project)": [
          "Smoothing box collisions",
          "Changing the gravity",
          "Wall jumping speed",
          "Brick jumping",
          "Shell collisions",
          "Destroying the shell",
          "Enemy jumping speed",
          "Shell physics",
          "Shell gravity",
          "Horizontal shell adjustment",
          "Horizontal shell adjustment continued"
        ],
        "Level Design (Unity Project)": [
          "Singleton",
          "Saving current level",
          "Level progression",
          "Object consistency",
          "Level 1-1",
          "Level 1-2",
          "Level 1-3",
          "Maximum level"
        ]
      },
      "requirements": [
        "To follow along with these tutorials, you will need the following programs: Blender (for 3D modeling), Photoshop or a free program like Gimp (for 2D art/texturing), and Unity® (for coding).",
        "The tutorials were recorded on a Mac, but Blender, Photoshop, and Unity® can be used with a PC.",
        "Please download and install Unity® and Blender before purchasing this course."
      ],
      "description": "Learn to make games and 3D art! In this course, you build a 2D platform game from scratch and learn how to make 5 different game characters. ⭐ ⭐ ⭐ ⭐ ⭐\n\nSign up now to learn a skill no one can take away from you\nThis course does not assume any prior knowledge and is perfect for beginners. In fact, we begin with an introduction to Unity® for those who have never used it before.\nOur course is unique because you will learn how to make your own 3D art, models, and textures in Blender. We will show you how to integrate the art into Unity®.\nIncluded in this course is material for beginners to get comfortable with the interfaces. Please note that we reuse this content in similar courses because it is introductory material. You can find some material in this course in the following related courses:\nMake a Unity Platform Game & Low Poly Characters in Blender\nMake a Fully Featured Game: Code in C#, Make Low Poly Models\nMake Games and Web Apps: Unity, React and Redux Masterclass\nBuild and model a Super MARLO runner clone in Unity\nBuild 43 Models & a 3D Runner Game in Unity® with C# Code\nUltimate Guide to Blender & Unity: Game Design & Development\nCreate Low Poly Game Characters in Blender3D\nEverything You Need To Make Your Own Games\nWe take you through all the steps to designing a game from start to finish. This course covers topics including:\nMovement\nBlocks\nSpeed blocks and enemies\nPower-ups and finish lines\nBackground and interface\nFine-tuning\nLevel design\nEnroll now to join the Mammoth community",
      "target_audience": [
        "Even if you have never coded before, you can use these lessons to get a headstart in the game-making realm! This course is targeted towards beginners to immediate.",
        "Beginners who want to learn 3D modelling.",
        "Beginners who want to learn how to use Blender.",
        "Game developers who need art assets for a game."
      ]
    },
    {
      "title": "Learning Path: Unreal Engine: Develop Classic and RTS Games",
      "url": "https://www.udemy.com/course/learning-path-unreal-engine-develop-classic-and-rts-games/",
      "bio": "Embrace yourself to learn the art of learning of creating applications and microservices with Akka",
      "objectives": [
        "Understand the foundation of Unreal Engine 4l",
        "Get hands-on with beginner to advanced-level visual scripting via Unreal Blueprints",
        "How to modify Unreal game assets to fit your design",
        "How to implement an RTS-style free roaming cameraselecting non-playablecharacters (NPCs) through mouse input",
        "How to modify Navigation Mesh (Nav Mesh) data to be able to implement varied and interesting gameplay"
      ],
      "course_content": {
        "Unreal Engine 4.x Projects": [
          "The Course Overview",
          "Unreal Engine 4 Navigation",
          "The Fundamentals of Level Design and Unreal Assets",
          "Utilizing Unreal Engine’s Material Editor",
          "Prefabs and Blueprints: A Guide To Efficiency",
          "Design Analysis and Greybox",
          "Ready Player One",
          "Play Ball",
          "A Challenger Approaches",
          "GOOOAL!",
          "Keeping Score",
          "Fun with Physics",
          "Fun with Physics (Continued)",
          "Spawn the Ball",
          "Volley Count for Multiball",
          "Game Time",
          "Wrapping Up",
          "Project Analysis and Level 1",
          "Jumping Around",
          "Implementing the Obstacle",
          "The Platform and the Power-Up",
          "The Platform and the Power-Up (Continued)",
          "Reaching Safety",
          "Raycasting and You",
          "Adding the Scoring System",
          "The Next Level",
          "Creating the Enemy",
          "Spawn the Elevators",
          "Collecting the Coin",
          "Reaching Finish Line Through Obstacles",
          "The Final Level",
          "The Dangerous Obstacle",
          "World Traveler",
          "Insert Coin",
          "Push the Button",
          "Push the Button (Continued)",
          "Bring the Noise",
          "Recap and Polish"
        ],
        "Building an Unreal RTS Game: The Basics": [
          "The Course Overview",
          "Creating a New Pawn Class for Controlling the Camera",
          "Implementing Keyboard Controls through Key Bindings",
          "Implementing Camera Zoom",
          "Modifying the Top DownCharacterTemplate Class",
          "Implementing Selection of NPCs Using Mouse Input",
          "Utilizing Material Instancing & Decals for UserInterface Feedback of Mouse Input",
          "Creating an AIController and Input Action for Controlling NPC Movement",
          "Implementing Responses to Mouse Input through Visual Feedback in UI",
          "Implementing Utilization of AIController to Have NPCs Path to a Desired Location",
          "Utilizing Navigation Settings on Actor's",
          "Modifying Nav Mesh Data with Nav Mesh Bounds Volume",
          "Customizing Pathfinding with Nav Link Proxy"
        ]
      },
      "requirements": [
        "Basic knowledge of Unreal Engine"
      ],
      "description": "Are you a game developer looking to learn gameplay programming in Unreal Engine? Do you want to dive deep into the amazing capabilities of Unreal Engine? If yes, this Learning Path is for you.\n\nUnreal Engine has been awarded by Guinness World Records as \"the most successful video game engine\".\nUnreal Engine: Develop Unreal Classic and RTS Games is Packt’s Video Learning Path that is a series of individual video products put together in a logical and stepwise manner such that each video builds on the skills learned in the video before it.\nThis Path will give you a brief overview of the basics and move quickly to explore the amazing capabilities of Unreal Engine. The design complexity of each game increases gradually to give you a complete overview of Unreal Engine 4 and its amazing features. You will learn to implement advanced shading techniques, create stunning graphics, leverage the rendering power of Unreal Engine to get the best out of it.\nThen, you’ll learn to implement an RTS-style free roaming camera from scratch. From there, you’ll  move on to selecting Non-Playable Characters (NPCs) through mouse input, and using basic Artificial Intelligence (AI) and Pathfinding to have selected NPCs move around a level. Then, you will add a second unit to the game, make a unit attack, create destructible environments, and finally bring everything together with an RTS-style user interface using Unreal Motion Graphics (UMG).\nThe goal of this course is to help you build complex games with Unreal Engine.\nThis Learning Path is authored by some of the best in the field.\nAbout the Author\nMike Sill is a 3D Artist from Cleveland, OH, working in Los Angeles, CA. He has used Epic’s Unreal Engine since 2007 and professionally since 2012. Mike has had the honor of working alongside the likes of Jesse Schell, Patrick Hanenberger, and Dan Gregoire. Mike currently works as an Engine Artist making pre-viz and post-viz sequences for theme parks, Hollywood films, and AAA videogame titles.\nJonathan A. Daley is a co-founder of independent game studio Nacelle Games, which he founded with his wife Carrie Daley, in 2014. Since then they've shipped several games and apps for iOS and tvOS, as well as consulted on several VR projects. Jonathan has programmed and designed over 20 games and apps since 2013, using everything from the Unreal Engine 4 and Unity 3D game engines, to programming games and apps from scratch in Xcode and Visual Studio.",
      "target_audience": [
        "If you’re a game developer looking to learn gameplay programming in Unreal Engine, this Learning Path is for you. Basic knowledge of Unreal Engine is expected to take this Learning Path."
      ]
    },
    {
      "title": "Create 20 sport casino games in Construct 2 / Construct 3",
      "url": "https://www.udemy.com/course/create-20-sport-casino-games-in-construct-2-construct-3/",
      "bio": "Extend your construct 2 /3 knowledge by learning how to create 20 diverse sport , racing and casino games",
      "objectives": [
        "You will gain access to 20 amazing source codes and you will be able to understand then and modify according to your needs know"
      ],
      "course_content": {},
      "requirements": [
        "You need Construct 2 or Construct 3. Some basic knoledge on how to use those programs"
      ],
      "description": "You should buy this course if you would like to extend your construct 2 or construct 3 knowledge  by learning how to create 20 amazing sport/casino/ racing games.\n\nIf you don't have any knowledge of construct game engine, I have a free introduction course and a paid complete course here on Udemy.\nAfter you enroll to this course you will gain access to 20 source codes  of construct 2 games.Games can be imported into construct 3 and exported to all platforms including android ios and windows desktop.\nYou will also gain access to videos where I explain the code and will recreate then from scratch.\n\nThe games that we are going to create include:\nSoccer, Tennis, Basketaball, Baseball, Rugby\nSki, Atheletism: 100 m sprint, Weight Throw\n\nCasino games: Poker Blackjack\n\nRacing games(including a game like CSR)\n\nAll sort of other sport games like doing tricks with skateboard with the football",
      "target_audience": [
        "Any game developer that wants to know how to make sport and casino game"
      ]
    },
    {
      "title": "Unity Game Projects : 20+ Mini Projects in Unity & C#",
      "url": "https://www.udemy.com/course/unity-mini-projects-game-development/",
      "bio": "Learn Unity Game Development & C# Scripting by Building 20+ Mini Game Development & Design Projects",
      "objectives": [
        "Learn Unity 2020 by Building Mini Example Projects",
        "Learn C# Scripting with Mini Examples",
        "Create A 3D Character Controller",
        "Build 2D Platformer Controller",
        "Create 3D & 2D Particle Effects",
        "Create 2D Top Down Car Controller",
        "Build A 2D Top Down Shooter Mechanics",
        "Develop Mini Android Games"
      ],
      "course_content": {
        "Introduction & Installing Unity": [
          "What's Inside The Course",
          "Introduction",
          "Installing & Setting Up Unity 6",
          "Creating Your First C# Script in Unity 6",
          "Installing and Setting Up Unity 2022",
          "Join The Community"
        ],
        "Project 1 : Learn C# Basics for 3D Game Development": [
          "Learn C# for Unity 3D in 15 Minutes"
        ],
        "Project 2 : 3D Character Controller in Unity": [
          "Creating A 3D Character Controller in Unity C#"
        ],
        "Project 3 : Rotating 3D Character towards Mouse Direction": [
          "Rotating Character Towards Mouse Direction"
        ],
        "Project 4 : Creating A 3D Blast Effect in Unity": [
          "Creating A 3D Blast Effect Using Unity Particle System - Part 1",
          "Creating A 3D Blast Effect Using Unity Particle System - Part 2"
        ],
        "Project 5 : Learn C# for 3D Game Development with Mini Examples": [
          "Learn C# for Unity 3D in 15 Minutes - Part 2"
        ],
        "Project 6 : Learn C# for 3D Game Development - Part 3": [
          "Learn C# for Unity 3D in 15 Minutes - Part 3"
        ],
        "Project 7 : 2D Target Shooting in Unity C#": [
          "Creating Simple 2D Target Shooting Mechanism in Unity"
        ],
        "Project 8 : 2D Rain Effect using Unity Particle System": [
          "Creating 2D Rain Effect in Unity using Particle System"
        ],
        "Project 9 : 2D Platformer Player Controller": [
          "Creating A 2D Platformer Controller in Unity C#",
          "Setting Up Animations for Player"
        ]
      },
      "requirements": [
        "Basic Knowledge of Unity & C# Scripting is desirable"
      ],
      "description": "Want to Learn Unity by Building lots of Mini Projects?\nThen this is the perfect course for you.\nAfter Finishing this course You will be able to build 20+ Mini Projects using Unity & C# .\nList Of Mini Projects You Will Build In This Course :\nBuild A 3D Character Controller\nDesign Cool Particle Effects\nCreate A 2D Platformer Controller\nImplement Smooth Following Camera\nDevelop 2D Car Controller\nCreate A Top Down Shooting Mechanics\nBuild An Android Game\nLearn C# Basics with Fun Mini Projects\nCreate An Infinite Scrolling Background\nDevelop an Auto Zooming Camera\nand many many more....\nI have taught Unity Game Development & C# Scripting to thousands of people on my Youtube Channel: Charger Games. I love teaching complex concepts in a simple way, so even if you have no previous coding experience, no need to worry, I'm gonna teach you everything step by step in the perfect order.\nLearn the basic concepts, tools, and functions that you will need to build fully functional Games with C# and the Unity game engine.\nBuild a strong foundation in Unity Game Development with this course.\nLearn to use 2D & 3D features of Unity\nBuild Fully functional Games with Unity\nLearn Basics of C# Programming\nCreate 20+ Mini Projects in Unity\nLearn to build Android Games in Unity\nUse skills learned from this course in any Unity project\nA Powerful Skill at Your Fingertips Learning the fundamentals of Unity 2D & 3D Game Development puts a powerful and very useful tool at your fingertips. Unity is free, easy to learn, has excellent documentation, and is the game engine used for building games.\nJobs in unity game development are plentiful, and being able to learn C# Scripting along with Unity game development will give you a strong background to more easily build awesome games.\nContent and Overview Suitable for beginning programmers, through this course of 100+ lectures and 20+ hours of content, you’ll learn Unity 2D & 3D game development by building 20+ Mini projects. You can use this skills in any of your Unity project later on.\nStarting with the installation of the Unity , Visual Studio , this course will take you through the process of learning game development with unity by building 20+ mini projects in unity.\nFor the beginner programmers there's a separate section about C# Scripting, which will teach the fundamentals of C# Scripting for game development in Unity.\nWith these basics mastered, the course will take you through building different example mini projects with unity to learn more about the process of creating games with Unity.\nStudents completing the course will have the knowledge to create fully functional Games with Unity and C# or use their C# skills to Build any other useful thing that they want.\nComplete with working files, you’ll be able to work alongside the author as you work through each concept, and will receive a verifiable certificate of completion upon finishing the course.",
      "target_audience": [
        "Anyone willing to learn Unity & C# by Building Mini Projects"
      ]
    },
    {
      "title": "JavaScript Memory Game coding project",
      "url": "https://www.udemy.com/course/javascript-memory-game/",
      "bio": "Explore how you can build a custom JavaScript Memory game from Scratch learn JavaScript by working on this project",
      "objectives": [
        "How to use JavaScript",
        "How to build web applications",
        "How to apply JavaScript",
        "Create web applications"
      ],
      "course_content": {
        "Introduction to JavaScript Memory game creation": [
          "Introduction to building JavaScript Memory Game",
          "Resource Setup",
          "Setup HTML Template",
          "Source Code HTML",
          "Loop declare image array",
          "Add Click Event to start Game",
          "Source Code",
          "Array Randomizer explained",
          "Source Code",
          "Build Game Board Dynamically",
          "Make Game interactive flip tiles",
          "Source Code",
          "Check if item is in array",
          "Setup Intervals flip cards back",
          "Gameplay setup match detection",
          "Source Code",
          "Game Tweaks and updates",
          "Course Conclusion",
          "Source Code",
          "Create css and js files"
        ],
        "Resources and Source Code": [
          "Resources and links",
          "Randomize Array with JavaScript",
          "Source code Randomize Array with JavaScript",
          "Supplementary Resource Collection: Access to Downloads"
        ]
      },
      "requirements": [
        "Basic HTML and CSS",
        "Understanding of JavaScript code principles",
        "computer access",
        "editor and browser access"
      ],
      "description": "Learn how to apply JavaScript to build your own version of this Memory game from scratch.  One of the best ways to learn JavaScript is to practice and try the code yourself.  This course has the perfect beginners project to see how to apply JavaScript to make a dynamic and interactive game from scratch.\nSource Code is included with step by step guide on how to create your own game using JavaScript.  See how JavaScript works create an application from scratch.\nBasic understanding of JavaScript is a prerequisite for this course, the focus of the course is learning how to use JavaScript in a real world project.  See how it all fits together...\nLearn about how to use variables, functions, loops, intervals, objects and more.  See how to make your HTML elements interactive set up event listeners and update elements using JavaScript.  By the end of the course you will have the skills to build you own mini projects using JavaScript from scratch.\nSee how JavaScript works ...\nTop resources and how to setup your work environment\ncreate an html template to start any project\nLearn why loops can save time in development\nExplore how click events can be setup and make your content interactive\nLearn how to build a randomizer in JavaScript\nOutput dynamically generated HTML content\nUpdate DOM elements\nUse arrays to store data\nLearn how to shuffle arrays\nApply logic to test if players selections are a win\nDebug and tweak applications\nall this an more\nSource Code is included\nLearn to Create your own JavaScript GAME!!!\n\n\n\nWe show you how to use JavaScript to create an interactive game, everything from creating the game board to messaging, text, timers, and game setup.\n\nWithin this course we show you how to add JavaScript functionality when building out projects and use JavaScript to achieve your goals.\n\nWe have designed this course to optimize practicing JavaScript coding.\nEverything you need to learn about JavaScript is provided within this course.\nquick lessons get right to the point\nsource files downloadable to work along\nchallenges and lessons\n30 day money back guarantee\nnew course material added regularly\ntrusted name in education since 2002\nfull HD easy to read source coding\nTaught by an instructor with over 18 years of web development experience ready to answer any questions you may have. Daily Q&A responses to help you learn.  What are you waiting for join now and learn JavaScript project development today",
      "target_audience": [
        "Anyone learning JavaScript",
        "Web developers",
        "JavaScript beginners"
      ]
    },
    {
      "title": "Using JSON In Unreal Engine 4 - C++",
      "url": "https://www.udemy.com/course/using-json-in-unreal-engine-4/",
      "bio": "This video series will explore how to utilise Json in your Unreal projects, and show how to read/write json to disc",
      "objectives": [
        "In this video series you will learn how to utilise JSON files in Unreal Engine 4, using the built-in JSON libraries to read and write data to disc"
      ],
      "course_content": {
        "Utilising Json in Unreal Engine": [
          "Introduction",
          "UE4 4.24 Fix / Change",
          "Getting started",
          "Producing a JSON Object",
          "Writing Json to disc",
          "Reading Our Json files into Unreal",
          "Improving the workflow",
          "Generating base files",
          "Pretty print vs Condensed",
          "More advanced usage & summary"
        ],
        "Exploring Deeper in Json types": [
          "Other Variables types in Json"
        ]
      },
      "requirements": [
        "A basic understanding of Unreal C++ API",
        "Knowledge of what JSON is will be helpful but not required"
      ],
      "description": "In this course, we will be looking at how to utilise Unreal's Json implementation to create your own Json files for use in your project. Json is a great method for storing certain data types for all manner of projects, such as pipelines, game data, configs, and more. This course will be written in C++ using Unreal Engine 4.22, however it should apply to previous engine iterations fine, as the library has not changed in some time.\nAfter completing this series you should be able to write your own Json systems for your project, build a nice framework from which to automate the process, and be confident in how to approach your json I/O operations.",
      "target_audience": [
        "Unreal Engine developers looking to incorporate a json workflow into their project"
      ]
    },
    {
      "title": "Create Games with Game Maker (no programming) from scratch",
      "url": "https://www.udemy.com/course/create-games-with-graphics-from-scratch/",
      "bio": "Comes with \"Supplied Graphics\". Make games you can sell/share with friends. GM can port to Mobile Devices, Mac & Linux.",
      "objectives": [
        "Use art effectivly in game development",
        "Create a fun game to play with your friends",
        "Make a commercial quality game from scratch",
        "Have fun in a creative and constructive way"
      ],
      "course_content": {
        "Let's Get Started": [
          "Introduction",
          "Rooms & Resolution Setup",
          "Importing Sprites & Setup",
          "Making Objects and Keeping Organized"
        ],
        "Setup Your Player": [
          "Place Objects Into Level",
          "Master Objects and Views",
          "Event's with Actions",
          "Learn Variables & Basic controls",
          "Speed and Engine Flame",
          "Sprite Coloring"
        ],
        "Creating the Environment": [
          "Sparkling Stars",
          "Spawn Stars in View",
          "Encountering Bugs",
          "Sprites as an Animation",
          "Personalize Variables",
          "Fading-In Effect",
          "Repeat to Learn",
          "Fade In and Out Trigger",
          "Object Duplication",
          "Depth or Layers",
          "Transparent Sprite Effects",
          "Distance to Object"
        ],
        "Creating Ai & Interacting with Environment": [
          "Starting Our First Ai",
          "Weapon Properties",
          "Turret Properties (part1)",
          "Turret Properties (part2)",
          "Ship Damage Control",
          "Variables as Triggers",
          "Engine Errors",
          "Introducing the Draw Event",
          "Completing the HUD",
          "Weapon and Effects",
          "Dynamic Origin",
          "Image Angle & Point to Mouse",
          "Finishing up Turret",
          "Finishing up Turret (part2)",
          "Parents and Children",
          "Pirate Ship A.I",
          "Pirate Ship A.I (part2)"
        ],
        "Expanding the Game": [
          "Introducing Scripts",
          "Red Alert! Raise Shields",
          "Shield Reflect Effect",
          "Shield Activation",
          "Shield Activation (part2)",
          "Cracked Screen",
          "Cracked Screen (part2)",
          "Introducing Sounds",
          "Warp Drives",
          "Warp Drives (part2)",
          "Warp Drives (part3)",
          "Warp Drives (part4)"
        ],
        "Finishing Your Game": [
          "Global Variables",
          "Create Application"
        ]
      },
      "requirements": [
        "Download GameMaker:Studio (free) - Link provided (easy installation and download)"
      ],
      "description": "*New In this course, I build a game from the ground up with you. Seriously, I'm doing it from scratch with you while recording with minor editing. This is a great way to learn and troubleshoot problems with me. The game we are making it pretty sweet. This is not a run-of-the-mill game. We are making a keeper.\nI provide all assets needed for you to get started!\nIf you are completely new to game development then use GameMaker: Studio. It may not be as easy as some other engines, but it is feature rich and it will get easier with a little effort and patience. You need these traits to be successful game developer.\nFeatures from Course & GameMaker: Studio:\nGameMaker *free version* has all the features of the complete version\nComplete set of quality (royalty free) assets provided\nGameMaker allows for porting to any device. PC, Mac, Mobile, PS4 and Xbox One. (paid plugin's required)\nCourse will upgrade with more \"Free\" video's with support. I will keep adding features to enrich our game.\nYou get my project files to work with and make your own.\n----\n(Free Preview of Lecture #1 & #48. So you can see where we begin and then some of the features we will work on later)\n[GAME ENGINE INSTALLATION INSTRUCTIONS]\n1) Go to yoyogames(dot)com > click gamemaker menu > download free now > Click to download GameMaker:Studio\n2) Save installer to computer or run from browser.\n3) Double click file once it is downloaded. Accept and click next with all the options you want. It will also install a \"GM player\" if you had that selected.\n4) When you launch, it will update files and ask if you want stable or beta mode. Click stable mode for now.\n5) After you run engine, it will ask you to register for free version. Run through those steps.\n6) Watch the video's and continue on with me\n* The graphic files are included with the lectures they're associated with.\n________________________________________________________________\n*Trailer footage\nGalactic Missile Defense- Black Sheep Games\nThe Savant Accent - DPad Studio",
      "target_audience": [
        "This course is for beginners looking for an experience doing something creative that takes dedication.",
        "Individuals who want to make money off their creation and see others enjoy them.",
        "This couse is for 2D video game developers. Those interested in mobile games would benifit."
      ]
    },
    {
      "title": "Animating in Unreal Engine",
      "url": "https://www.udemy.com/course/animating-in-unreal-engine/",
      "bio": "Learn to animate characters entirely within Unreal Engine 5's Sequencer",
      "objectives": [
        "Animate in Unreal Engine 5",
        "Learn the basic interface and tools for animating",
        "Understand the core principles of animation",
        "Learn various tips and tricks for character animation",
        "See the full process of different animation workflows",
        "Create character animations for any style of character",
        "Object interaction for your character",
        "Export your animations for use in-game, or render for cinematics"
      ],
      "course_content": {
        "Introduction & basic tools": [
          "Introduction",
          "Posing the Character",
          "Gizmo Options",
          "Mannequin Rig Controls",
          "Keyframe Types",
          "Curves",
          "Tweens",
          "Advanced Curves",
          "Arcball & Motion Trails",
          "Animation Layers"
        ],
        "Jump Animation": [
          "Animating a \"Jump\"",
          "Blocking Phase",
          "Adding Interpolation",
          "Base Animation Refinement",
          "Detailing with Animation Layers"
        ],
        "Advanced Animation Techniques": [
          "Constraints",
          "Constraints Advanced & Troubleshooting",
          "Saving & Restoring & Mirroring poses",
          "Curve Editing Tips & Tricks",
          "Workflows & Cameras",
          "Space Switching"
        ],
        "Animating a Walk Cycle": [
          "Calculating the Perfect Walk Cycle Timing",
          "Modular Rigging & Custom Weapon Rig Mesh",
          "Starting the Walk Cycle",
          "Adding Pelvis Motion",
          "Timing & Curve Tweaking",
          "Adding Cycle Variations"
        ],
        "First & Third person Shoot Animation": [
          "Shoot Animation Blocking",
          "Completing the Shoot Animation",
          "\"Shoot to Empty\" Animation Variant"
        ],
        "Inspect Animation": [
          "Blocking the Inspect/Reload Animation",
          "Refining the Animation",
          "Finalising & Cinematic Setup"
        ]
      },
      "requirements": [
        "A basic familiarity with Unreal Engine 5 would help. No prior experience with animation necessary."
      ],
      "description": "In this course you will learn how to animate characters in Unreal Engine 5.\n\nWe begin with the basics of animating within the engine, and then build up your skillset with various tools and techniques. You will explore different workflows as well as seeing full animation processes in action, which you can follow along with, or passively watch to absorb the information and apply to your own project.\n\nThis course is suitable for any recent Unreal Engine 5 version, and will include further updates for 5.6+ specific features.\n\nThroughout the course you will be shown the important tools for character animation, with tricks and tips along the way. This isn't just a list of features, which could be overwhelming, but is instead a gradual build-up of techniques where you will be shown how they can be used in different workflows. You will not only pick up the specifics of animating in Unreal Engine's Sequencer, but you will learn the fundamentals of character animation.\n\nIncluded is a weapon model I have created for the course, where you will be shown the process of rigging it to be ready for animation. You will then be shown how to animate it alongside the character. This method/approach can be applied to any character or weapon model.\n\nWe also cover creating walk cycles and I share my formulaic approach for taking out any guess-work or estimation, freeing you to create the style of animation you need without having to worry about cycle times, distances, loop length and so on.\n\n\nThe examples shown in the course feature the UE5 mannequin for demonstration purposes and mainly focus on more realistic human character movement examples, but the principles taught can be applied to any style of character and any style of animation.\n\n\nAnimation takes time and practice, but this course should get you up to speed with all of the most important tools and how to navigate the interface, as well as many tips and tricks for character animation.",
      "target_audience": [
        "Game developers looking to create their own character animations directly within the engine",
        "Professional animators switching to animating within Unreal Engine",
        "Cinematic/trailer creators",
        "Anyone interested in learning the basics of character animation for games"
      ]
    },
    {
      "title": "Unreal Engine 5 (UE5): the basics of the unreal editor",
      "url": "https://www.udemy.com/course/learn-english-grammar-e/",
      "bio": "Take an open source game to get started and Learn how to use unreal editor and how to make your game in C++",
      "objectives": [
        "Introduction to the unreal engine",
        "Fundamental of C++",
        "BP versus C++",
        "Unreal editor"
      ],
      "course_content": {
        "The viewport": [
          "The viewport",
          "The Static Mesh Actor",
          "Unreal Engine vs the Unreal Editor",
          "Unreal Editor vs the Level Editor",
          "Panels of the Level Editor",
          "Customizing the Interface",
          "Place Mode Tabs",
          "Mouse Navigation",
          "WASD Navigation",
          "Focusing",
          "Going to",
          "Maya Navigation",
          "Camera Speed",
          "Move Tool",
          "Rotate Tool",
          "Scale Tool",
          "World Space vs Local Space"
        ],
        "Fundamental of C++ programming language": [
          "\" Hello world \"",
          "Variables"
        ],
        "Shooter games": [
          "Movement test"
        ]
      },
      "requirements": [
        "No requirements needed"
      ],
      "description": "Ready to make games in the amazing world of Unreal Engine 5?\nIn this course we'll give you a complete project which you can edit it and publish it on any platform with lots of assets you can use them for developing your games.\nLearn how to create and mod video games using Unreal Engine 5, even if you're a complete beginner. Unreal is a free-to-use game development engine used by AAA studios and indie developers worldwide. It is a massive and powerful beast, but we break it down step-by-step so you can tame it.\n\n\nWe start super simple so no prior experience of Unreal or coding is needed!\nAnd we will basically set up the movement functions, the action mappings and also the axis mappings .\nThe whole project and the all functions are going to be made with C++.\nLearn C++, the powerful industry-standard language from scratch. By the end of the course, you'll be very confident in the basics of coding and game development, and hungry to learn more.\n\n\nIn this class we're going to cover the editor basics and how to use every tool in the editor.\nWe're going to give you an overview of how the editor is laid out as well as how to customize it .\n\n\n\n\nThen we're going to go and work on the viewport and what options do we have available inside the viewport and how do we navigate around it .\n\n\nThe world outliner and how it works and what is it good for.\n\n\nThe details panel and what does this do and what features does it give us when we use it .\n\n\n\n\nThe modes panel and what available modes do we have when working in the editor and then an overview of the place mode .\n\n\nThe content browser what is this giant thing for and how do we customize it to make it a little less unwieldy.\n\n\nAnd then finally the main toolbar are shortcuts to our common actions.\n\n\nUnderstanding the editor basics is a great way to get started for that reason we created this class.",
      "target_audience": [
        "All levels"
      ]
    },
    {
      "title": "The Complete GameMaker Studio 2 Course 2019: Learn GML",
      "url": "https://www.udemy.com/course/learngamemaker/",
      "bio": "Learn To Code And Build Games In GameMaker Studio 2",
      "objectives": [
        "Learn To Make Games In The GameMaker Studio 2 Game Engine.",
        "Become A Programmer! Learn To Use GameMaker's Powerful Scripting Language GML.",
        "Make A Top Down Adventure Game, And Learn To Code A Moving Ninja That Can Be Controlled By The Player"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Ninja Adventure": [
          "Sprite Download",
          "Importing Sprites",
          "Setting Up Our Ninja Sprites",
          "Rooms And Objects Explained",
          "Taking Player Input",
          "Checking For Collision",
          "Animating The Ninja",
          "Cameras",
          "Tilemaps",
          "Creating A House And Entering It",
          "Room Persistence and Global Variables",
          "Adding A House And Getting Started On AI",
          "Introduction To The NPC",
          "More On AI",
          "Place Free And Inheritance",
          "Draw GUI",
          "Draw GUI Shurikens",
          "Throwing Shurikens",
          "Sound Effects",
          "Enemy Part 1",
          "Enemy Part 2",
          "Enemy Part 3",
          "Health",
          "Boss Battle Part 1",
          "Boss Battle Part 2",
          "Boss Battle Part 3",
          "Project File Download",
          "Finale"
        ]
      },
      "requirements": [
        "Have a PC",
        "Have GameMaker Studio 2 installed"
      ],
      "description": "Welcome to The Complete GameMaker Studio 2 Course 2019 in this course you will learn how to make 2D games in GameMaker Studio 2!\nYou will be learning how to code, how to use GameMaker Studio 2, and, how to make games, by building a top-down adventure game!\nWe will be learning GameMaker Studio 2, by building one large game, feature by feature. If you don't know how to code, we will go into how to program your game using GameMaker's programming language GML, from scratch.\nThe course is designed to take you on a journey to build a ninja adventure game, where you will learn how to use features of GameMaker Studio 2 to build the game.\nFor the game, we will program a ninja that can run around and throw shurikens, and enemies that will follow and attack the player. We will code all of this from scratch, if you don't know how to code, there's no need to worry, as the course is designed to teach you to code too.\nHere are a few examples of features we will be covering in this course:\nRandom number generation, use randomization in your games to create unique experiences.\nUse GML to program enemies that follow the player\nRoom Persistence\nGUI, show your health on screen as your player moves.\nWork with tilesets, to make your levels\n\n\nAt the end of this course, you will have built a ninja adventure game, where you can fight enemies, and defeat a boss. With this, you will have learned how to program and make games in GameMaker Studio 2.",
      "target_audience": [
        "Anyone who wishes to learn to code",
        "Anyone who wants to make games",
        "Anyone who wants to learn GameMaker Studio 2",
        "Anyone who is starting out in game development, and, wants to learn to become a game developer"
      ]
    },
    {
      "title": "Build Games with Unreal Engine, Unity® and Blender!",
      "url": "https://www.udemy.com/course/build-games-with-unreal-engine-unity-and-blender/",
      "bio": "Create Multiple Games with Unreal! And make a Big Ninja survival game with Unity® and Blender!",
      "objectives": [
        "Build games from scratch",
        "Build a Ninja Survival game for mobile in Unity®.",
        "Learn to make multiple simple games In Unreal Engine",
        "Code in C# in Unity® and C++ in Unreal Engine.",
        "Use Blender and navigate its interface.",
        "Integrate art from Blender into Unity®.",
        "Build video game levels.",
        "UV map and unwrap your models.",
        "Create your own materials.",
        "Learn the basics of animation"
      ],
      "course_content": {
        "Intro to Unity": [
          "Introduction",
          "Unity Editor",
          "Moving a Cube",
          "Materials",
          "Lights",
          "Particle System",
          "Applying Physics",
          "Asset Store"
        ],
        "Intro to Coding": [
          "Introduction",
          "Variables",
          "Methods",
          "If Blocks",
          "Loops"
        ],
        "Intro to Inputs": [
          "Introduction",
          "Key Presses",
          "Moving a Player",
          "Jumping",
          "Moving Forward",
          "Cycling Cameras"
        ],
        "Intro to Prefabs": [
          "Introduction",
          "Introduction to Prefabs",
          "Random Angles",
          "Explosion Effect",
          "Adding explosion effects"
        ],
        "2D Mobile Game - Setup": [
          "Setting Up Project",
          "Building a Simple Scene",
          "Percentage Coordinates",
          "Clicking Variation",
          "Player Movement",
          "Orthographic Camera"
        ],
        "Jumpers": [
          "Jumping Enemy",
          "Jumping Enemy Movement",
          "Killing the Player",
          "Canvas",
          "End Game Messages"
        ],
        "Adding More Functionality": [
          "Reusability",
          "Dynamically Adding the enemy",
          "Game Mode Switch",
          "Setting Up The Rolling Enemy",
          "Rolling Enemy Movement",
          "Enemy Positions",
          "Killing the Player",
          "Depth Range",
          "Horizontal Range"
        ],
        "Enemy Logic": [
          "Creating The bouncing Enemy",
          "Moving the Bouncing Enemy",
          "Diagonal Movement",
          "Movement Flip",
          "Initial Angle",
          "Enemy x Enemy Collision",
          "Multiple Bouncer",
          "Depth Walls"
        ],
        "Designing the Game": [
          "Designing the Crawlers",
          "Crawling Enemy Movement",
          "Player's Rotation",
          "Jumping Force",
          "Finishing the Jumping Logic",
          "Spawning Crawler"
        ],
        "Turrets": [
          "Designing The Turret",
          "Turret States",
          "Turret Movement",
          "Smooth Aiming",
          "Aiming"
        ]
      },
      "requirements": [
        "To follow along with these tutorials, you will need the following programs: Blender (for 3D modeling and texturing) Unity® (for game set-up and coding) and the latest version of Unreal Engine (for the extra smaller Game’s).",
        "These Software are Free to Download online.",
        "This course was recorded on a Mac computer, but you can use a PC"
      ],
      "description": "We at Mammoth Interactive value input from students like you. Feel free to leave us your feedback.\nIn this course, you learn how to build a Ninja game for mobile using Unity® and Blender, you will then make multiple smaller games with Unreal Engine. This course is unique because we make both the code and the art for the game from scratch. We teach you the fundamentals of designing, coding, and modeling a mobile game.\nFirst you design the game and its functionality in Unity®. You learn how to code in C# and build video game levels. Don't worry if you've never coded before. We start simple and add more to the game as the course goes on.\nWhy Unity®?\nUnity® is one of the most popular platforms in game development. You can use Unity® to build 2D and 3D games. Unity® is cross-platform, which means it is easy to use with other platforms.\nThen you create the art for the game in Blender. You build all the art assets for the game. You learn how to integrate your art from Blender into Unity®.\nWhy Blender?\nBlender, like Unity®, is a popular production suite that is free to download. Blender is a revolutionary tool for making 3D art digitally. With Blender, you can make art assets for games, like we do in this course.\nNext you will make a bunch of smaller Games using the latest version Unreal Engine\nThis course is project based so you will not be learning a bunch of useless coding practices. At the end of this course you will have real world apps to use in your portfolio.\nWe feel that project based training content is the best way to get from A to B. Taking this course means that you learn practical, employable skills immediately.\n\"Very good course for those learning how to use C++ with Unreal Engine! The instructor was very clear and easy to understand. Having the multiple games to work on helped me fully understand the concepts. And I liked the fact that each game was a totally independent game and not dependent on the previous one.\"\nYou can use the projects you build in this course to add to your LinkedIn profile. Give your portfolio fuel to take your career to the next level.\nWe go through the content quite quickly! You can pause videos or use the Speed tool at the bottom of a video to slow down or speed up lectures if you want to.\nLearning how to code is a great way to jump in a new career or enhance your current career. Coding is the new math and learning how to code will propel you forward for any situation. Learn it today and get a head start for tomorrow. People who can master technology will rule the future.\nYou will get full lifetime access to this course for a single one off fee. John Bura has created many games, apps and training courses so he is extremely qualified to teach you how to master technology.\nThis is an instructor that does not only teach, he produces apps. This means you get the most relevant information on how to code. Most courses do not show you practical skills and real world examples.\n\"Great for people that know little about programming\"\nLet's get started!\nAlso, now Included in this bundled course are bonus courses of other related topics, such as C# and Java! You get more content at a great price!\nEnroll now to join the Mammoth community!",
      "target_audience": [
        "Anyone who wants to learn Unity®, Blender or Unreal Engine.",
        "Anyone who wants to learn game development."
      ]
    },
    {
      "title": "Godot 4: Create A Third Person Shooter Controller",
      "url": "https://www.udemy.com/course/godot-4-create-a-third-person-shooter-controller/",
      "bio": "Create A Player Controller With A Full Rig and Weapon Manager",
      "objectives": [
        "Create A Third Person Shooter Controller - From non combat movement to switching to full combat mechicanics like Mass Effect, Hell Divers 2 and Fortnite",
        "Create a complex and Dynamic animation state machine, make your characters movements smooth and seemless with a variety of blending and transition techniques",
        "Use Custom Classes and Resources to build a robust system that understands what each component is without directly relying on each component",
        "Learn How To Use Godot Like A Pro - From Scene Structure, Composition, Custom Signals and way more",
        "Master The State Machine - Create a robust finite state machine that will ensure that each action has it's own set of rules and no unexpected transitions"
      ],
      "course_content": {
        "House Keeping": [
          "Getting Help"
        ],
        "Introduction": [
          "Download Godot",
          "Introduction"
        ],
        "Getting Started Creating A Basic Controller": [
          "Set Up A Basic Character",
          "Set Up Basic Camera"
        ],
        "Creating A Third Person Camera System": [
          "Spring Arms",
          "Switching The Camera Alignment",
          "Aiming With The Camera",
          "Adding A Sprint Action",
          "Clean Up"
        ],
        "Creating A Statemachine": [
          "Why Use A Statemachine",
          "Making The State Class",
          "Making the State Machine",
          "Making the Motion Class",
          "Making the Basic States",
          "Making The Sprint State",
          "Linking The Sprint State To The Camera To Change The FOV",
          "Setting A Sprint Duration",
          "Creating An Aim State",
          "Clean Up 1 - Creating Movement Stats",
          "Clean Up 2 - Refactor"
        ],
        "Adding A Rig and Animations": [
          "Getting Animations and Importing them into Godot",
          "Fixing a potential issue with the animation",
          "Creating and Using An Animation Tree",
          "Signalling From The State Machine To The Animation Controller",
          "Preventing The Character From Rotating With The Camera",
          "Rotating The Character On Input",
          "Detecting the ground",
          "Animation Clean Up"
        ],
        "Combat Transitions": [
          "Add Another Animation Tree",
          "Nested State Machines",
          "Creating A Combat Status Enum",
          "Blend Space 2D Blend Position",
          "Adding A Bone Attachement"
        ],
        "Weapon Manager": [
          "Creating A Resource",
          "Weapon Animations",
          "Creating The Weapon Manager",
          "Communicating With The Character Model",
          "Attaching The Weapon Model",
          "Equiping Weapons",
          "Small Refactor",
          "Changing Weapons",
          "Waiting For An Action To End",
          "Fine Tuning The Change Weapon Animations",
          "Shoot And Reload Animations",
          "Fixing The Start Animation",
          "Setting Up The Bullet Spawn Point",
          "Setting Up The Ammo Resource",
          "Setting Up The Ammo UI",
          "Setting Up The Ammo Logic",
          "Setting Up The Projectile (Raycasting)",
          "Setting Up The Projectile (Rigid Body)",
          "Loading The Projectile",
          "Creating A Reticle",
          "Automatic Fire",
          "Detecting Bullets and Hitboxes",
          "Despawning Bullets"
        ],
        "Collectables": [
          "Creating Ammo Pick Ups",
          "Detecting The Ammo Pick Ups",
          "Limiting The Ammo Pick Ups",
          "Limiting The Ammo Pick Ups - Addendum",
          "Weapon Pick Ups",
          "Weapon Drops",
          "Weapon Drops - Controlling The Animations",
          "Weapon Drops - Quick Fix"
        ],
        "Inverse Kinematics": [
          "Setting Up The Hip IK",
          "Making The IK Follow The Camera",
          "Right Hand IK",
          "Left Hand IK"
        ]
      },
      "requirements": [
        "A little bit of Godot Knowledge will be good and a basic understanding of programming."
      ],
      "description": "Have you ever wanted to make a third person shooter in Godot?\n\n\nIt can be challenging to know how to get the actions to work smoothly with a control rig. A careful structure must be created to ensure that the animations do not cut of jump between each other.\n\n\nThis Course will show you how to make a third person controller in Godot from scratch. We’ll go from blank canvas, to capsule, to full control rig and finally a weapon controller. I will show you how and explain why I am making the decision I’m making. Because when you’re making such a complicated controller there isn’t one right way to do it. So I will tell you what I’m doing it and why, occasionally talk about alternatives and then we can move on. Nothing is skipped. Aside from collecting animations, I have included every single decision I made along the way.\n\n\nWe will create:\n\n\nA Camera Controller.\nUsing Spring Arms, we will be able to rotate around our character, without clipping into walls.\nUsing Tweens, we will be able to switch which side we view the character from.\nUsing Tweens, we will be able to Zoom the camera to better aim our weapons.\nWe will also make sure all of these actions can happen smoothly.\nA Node Based Finite State Machine.\nWe Will Create a State machine which will ensure our actions are clearly defined and have clear rules about what can be triggered and when.\nWe have a state machine for both Combat and Non combat enabling you to design dynamic play modes depending on your desires.\nA Full Third Person Character Rig and Animations.\nUsing Blender and Mixamo we will create a rig with a complex set of animations.\nWe will discuss importing a rig into Godot.\nHow to use the Animation Tree Player.\nCreate a complex set of transitions and blends to ensure that each is smooth and seamless.\nA Weapon Manager.\nCreate a dynamic weapon manger.\nusing classes and components create a system that will allow a diverse number of different weapons and projectiles.\nPicking up Ammo and Weapons.\nDropping Weapons.\nWe Will also cover Inverse Kinematics\nEnsure the player is always looking down camera\nAdjust the weapon position to better suit the character pose\nMake sure the left hand is always on the weapon\n\n\nThank you for checking out this course and I look forward to seeing work through this project and creating an amazing game.",
      "target_audience": [
        "Beginners To Godot Looking To Learn About Developing More Complex Projects In Godot",
        "Beginner Programmers",
        "Beginner Game Developers"
      ]
    },
    {
      "title": "Code and Design 2 Games in Unity® & Blender from Scratch",
      "url": "https://www.udemy.com/course/unityblender/",
      "bio": "Beginner's game development and design! Make Portals and Zenda clone games. Learn to make game art from ZERO experience!",
      "objectives": [
        "Build 2 complete games in Unity®.",
        "Code in C#.",
        "Use Blender and navigate its interface.",
        "Build 3D models in Blender.",
        "UV map and unwrap your models.",
        "Integrate the art from Blender into Unity®.",
        "Build video game levels.",
        "Create your own materials."
      ],
      "course_content": {
        "Let's Make Some Games": [
          "Download Blender and Unity3D"
        ],
        "Part 1: Portals Clone Game": [
          "Gameplay: Portals Clone Game"
        ],
        "01G. Introduction to Unity": [
          "1. Downloading Unity",
          "2. Unity Editor",
          "3. Hello World",
          "4. Variables",
          "5. Methods",
          "6. Loops",
          "7. Positioning"
        ],
        "02G. First Person, Boxes": [
          "1. Enabling First Person Mode",
          "2. Adding a Box",
          "3. Clicking Logic",
          "4. Raycasts",
          "5. Grabbing Class",
          "6. Moving the Box",
          "7. Adjustments and Prefabs"
        ],
        "03G. Buttons and Doors": [
          "1. Designing a Button",
          "2. Trigger Colliders",
          "3. Pressure Identification",
          "4. Button Animation",
          "5. Button Color",
          "6. Designing the Door",
          "7. Opening the Door",
          "8. Connecting the Button and the Door",
          "9. Orb"
        ],
        "04G. Portals": [
          "1. Portal Areas",
          "2. Getting the Hit Points",
          "3. Spawning Portals",
          "4. Normals",
          "5. Teleporting",
          "6. Adjusting Teleporting Angles",
          "7. Portal Rendering"
        ],
        "05G. Interface and level management": [
          "1. Game Interface",
          "2. Menu Scene",
          "3. Starting Level 2",
          "4. Finishing Level 2",
          "5. Level Flow"
        ],
        "Introduction to Blender": [
          "Introduction to Blender"
        ],
        "06K. Portal Gun": [
          "1. Gun",
          "2. Gun Unwrap",
          "3. Portal Gun Base Colors",
          "4. Portal Gun UV Saving",
          "5. Portal Gun Texturing",
          "6. Gun Texturing Continued"
        ],
        "07k. Props and Pieces": [
          "1. Button",
          "2. Button UV",
          "3. Button Texturing",
          "4. Button Crazybump",
          "5. Cables",
          "6. Cables Texturing",
          "7. Cables Crazybump",
          "8. Simple Block"
        ]
      },
      "requirements": [
        "To follow along with these tutorials, you will need the following programs: Blender (for 3D modeling and texturing), Photoshop or a free program like Gimp (for 2D art and some texturing), and Unity® (for game set-up and coding).",
        "Unity® and Blender are free to download. Please download and install Unity® and Blender before purchasing this course.",
        "This course was recorded on a Mac computer, but you can use Unity® and Blender on a PC."
      ],
      "description": "Want to make a game? How about two games?\nIn this course, you learn how to build a game using portals and a Zelda clone with Unity® and Blender. This course is unique because we make both the code and the art for the game from scratch. We teach you the fundamentals of designing, coding, and modeling a 3D game.\nFirst you design the game and its functionality in Unity®. You learn how to code in C# and build video game levels. Don't worry if you've never coded before. We start simple and add more to the game as the course goes on.\nWhy Unity®?\nUnity® is one of the most popular platforms in game development. You can use Unity® to build 2D and 3D games. Unity® is cross-platform, which means it is easy to use with other platforms.\nThen you create the 3D models for the game in Blender. You build all the art assets for the game. You learn how to integrate your art from Blender into Unity®.\nWhy Blender?\nBlender, like Unity®, is a popular production suite that is free to download. Blender is a revolutionary tool for making 3D art digitally. With Blender, you can make art assets for games, like we do in this course.\nIncluded in this course is material for beginners to get comfortable with the interfaces. Please note that we reuse this material in similar courses because it is introductory material. You can find some material in this course in the following related courses\nBuild \"The Legend Of Zenda\" Game in Unity and Blender\nMake a 3D Unity Action Game & Low Poly Buildings in Blender\n28 Low Poly Models and a Unity® Game - Complete 3D Developer\nProfessional Game Development: 3D Modeling and Unity C#\nCreate 19 Low Poly Models & Your First 3D RPG In Unity® C#\nComplete Unity and Android Development: Build Games and Apps\nC# Masterclass: Make RPG & Mobile Games in Unity & Blender\nMake a Portals clone in Unity and Blender from scratch\nMake Your 1st 3D Unity® Game & 40 Low Poly Models in Blender\nThe Complete Blender Design & Unity Game Development Course\nC# Unity and Swift 4 Masterclass: Make Games and Apps\nComplete your first FPS and game art in Unity® and MakeHuman\nPractical Unity Developer Academy: Make Fully Featured Games\nThe Complete Real World Game Development and Design Bootcamp\nIs this course for me?\nEven if you're not an artist, you can make basic art models. You may have heard of Axiom Verge and Stardew Valley. These games are million-dollar successes. But did you know that only one person made each?\nUsually it takes a whole team of people to build a game. But creators Thomas Happ and Eric Barone developed and designed their games by themselves. Now they're millionaires. You can do it, too.\nSign up right now to learn a new skill",
      "target_audience": [
        "Anyone who wants to learn Unity® or Blender.",
        "Anyone who wants to learn game development.",
        "This course assumes you know a little about Unity Technologies and Blender."
      ]
    },
    {
      "title": "WebGL 2D/3D Programming and Graphics Rendering For The Web",
      "url": "https://www.udemy.com/course/webgl-programming/",
      "bio": "Become an in-demand WebGL Ninja by learning all the web developments features for 3D online graphics and rendering",
      "objectives": [
        "WebGL Programming",
        "Web Programming",
        "Application Programming",
        "OpenGL Programming",
        "Mobile Development",
        "Cross Platform Development",
        "Web Development",
        "Semantics of General Programming",
        "The Format of Coding Applications",
        "Web Design",
        "All The Features of WebGL & Web Development",
        "JavaScript Programming"
      ],
      "course_content": {
        "Introduction": [
          "WebGL vs OpenGL vs OpenGL ES",
          "Setup Server (Mac, Windows and Linux)",
          "Setup WebGL Project",
          "Quiz - Introduction"
        ],
        "Drawing Objects": [
          "WebGL Rendering Pipeline",
          "Drawing A Point",
          "Normalised Coordinates vs Device Coordinates",
          "Drawing A Simple Triangle",
          "Drawing A Line Using gl.LINES",
          "Drawing A Line Using gl.LINE_STRIP & gl.LINE_LOOP",
          "Drawing A Triangle With Lines Using gl.TRIANGLE_STRIP & gl.TRIANGLE_FAN",
          "Drawing A Quad",
          "Drawing A 3D Cube",
          "Setup Three.js",
          "Loading & Drawing A Model Using Three.js",
          "Drawing Objects"
        ],
        "Colours and Textures": [
          "Applying Color To Shapes",
          "One Color Per Triangle",
          "One Color Per Vertex Using Interpolation",
          "Applying A Texture To Shapes",
          "Texture Coordinates",
          "Quiz - Colours and Textures"
        ],
        "Moving & Transforming Objects": [
          "Moving Objects Using Translation",
          "Left Handed vs Right Handed Coordinate System",
          "Sizing Objects Using Scaling",
          "Orienting Objects Using Rotation",
          "Combining Transformations",
          "Quiz - Moving & Transforming Objects"
        ],
        "Movement & Camera": [
          "Mouse Input",
          "Keyboard Input",
          "Fixing Rotation and Adding Individual Rotation"
        ],
        "Lighting & Shading": [
          "Ambient Lighting"
        ]
      },
      "requirements": [
        "Passion For Learning WebGL",
        "Basic Computer Knowledge and Skills",
        "Passion For Learning Web Development",
        "Basic Knowledge of Computer Science Is Optional"
      ],
      "description": "Learn about everything there is to know about WebGL & 3D Development. A step by step process is used to explain every facet of these topics.\nNOTE: This course includes information on web programming, design, OOP, JavaScript!\nGain a good understanding of the following concepts with this course:\nWhat WebGL is?\nWeb Certifications\nHow to develop websites/applications using WebGL & JavaScript for online 3D rendering\nFeatures of the WebGL language\nCoding semantics\nApplication programming\nWebsite programming\nWebGL is one the most popular graphics API's in the world. It is requested by all companies such as Google, Facebook and Microsoft for development. It powers Facebook and many other popular websites. This course will ensure you are not left out as more and more companies request this awesome and powerful language. This course will teach you everything about programming WebGL applications.\nYou will receive all the knowledge to use and leverage the powerful technology behind these amazing and wonderful platforms.\nOver 475,000 students have enrolled on my courses and all of them are extremely satisfied. You will also be satisfied with this course. If you do not like the course, remember that within 30 days you can request a full refund. I guarantee you satisfaction.\nIf you have any questions regarding the topics covered in this course, please feel free to ask. I'm always happy to help those who want to learn.\n\n\nTo summarise this is what you get:\n• Lifetime access to HD quality videos. No monthly subscription. Learn at your own pace, whenever you want.\n• All videos are downloadable. Learn wherever you want, even without an internet connection!\n• Downloadable starter code and final code for each section.\n• Free helpful support in the course Q&A when you have questions or get stuck.\n• Multiple coding challenges to practice your new skills (solutions included).\nSounds great? Then start this adventure today by clicking the “Take this course\" button, and join me in the only WebGL Programming course that you will need!",
      "target_audience": [
        "Anyone Looking To Learn About WebGL Coding",
        "Developers Looking To Learn The Skills Needed To Utilise WebGL Features",
        "WebGL Developers",
        "JavaScript Developers",
        "OpenGL Developers",
        "Application Programmers",
        "Web Designers",
        "People Looking To Learn About Programming",
        "Those Seeking To Understand How WebGL Programming Works",
        "People Seeking Guidance On How To Create WebGL/OpenGL Websites/Application",
        "Beginners & Experts In This Field",
        "People With a Desire To Improve Their Programming Knowledge"
      ]
    },
    {
      "title": "Scratch games coding for kids - Action game essentials",
      "url": "https://www.udemy.com/course/scratch-games-coding-for-kids-action-game-essentials/",
      "bio": "Scratch coding for beginners, and intermediate coders with some Scratch experience, who want to create action games",
      "objectives": [
        "Coding a template game file with backdrops and a \"How to play\" screen",
        "Coding a player controlled sprite",
        "Throwing and firing",
        "Health and lives - losing HP (health points)",
        "Enemies (attacking)",
        "Automating throwing and firing",
        "Reaction animations (for when sprites are hit)",
        "Health, lives and rewards - gaining HP (health points)",
        "Timers - countdowns and triggered timed events",
        "Sound FX (effects) and music"
      ],
      "course_content": {},
      "requirements": [
        "Be able to use a computer keyboard and mouse"
      ],
      "description": "Help your child learn essential knowledge and skills for coding action games, then use what they have learnt to create their own games.\nThis course is designed for parents of 8-12 year olds who want to re-direct their child's natural enthusiasm for playing games, into creating and coding games.\nStudents will learn essential coding processes and techniques for creating a complete action game including player controlled characters, attacking enemies, throwing and firing, reaction animations, health rewards and hp.\nOur instructor is a qualified and experienced teacher who speaks clearly and precisely, leading the learner through the entire coding process. Each step is explained and demonstrated.\nYour child will build confidence with Scratch, acquire action game coding skills, and improve their creative, math and computational thinking abilities.",
      "target_audience": [
        "Parents who want to transform their children from players of games into creators",
        "Parents who want to give their children a head start in computer studies at school, further and higher eduction, and in the workplace",
        "Anyone who plays games and would like to create their own",
        "Beginners, and intermediate coders who want to extend their skills"
      ]
    },
    {
      "title": "Lets code C# : Candy Crush in Unity",
      "url": "https://www.udemy.com/course/lets-code-csharp-unity/",
      "bio": "A walkthrough on coding a Match-3 game along with bombs and jelly mechanics using Unity and C#",
      "objectives": [
        "Learn Unity with C# scripting",
        "Learn the Basics of Game Development",
        "Implement sound effects, background music",
        "Improve logic",
        "Learn efficient usage of data structures in C#",
        "Refactoring the code",
        "Tranform animations from scripts"
      ],
      "course_content": {
        "Introduction": [
          "Resources",
          "Feel free to contact"
        ],
        "The Game": [
          "Setup and Creating the Level Creator",
          "Fill the level with Candies",
          "Player Controller and Support Scripts",
          "Making the Bombs",
          "Jellies and Game over conditions",
          "Some Clean up and Adding Score",
          "Stability patch and minor additions",
          "Simple Bomb VFX",
          "UI and Map",
          "More UI and Map",
          "Commenting and Refactoring",
          "Music and Sounds",
          "Errors and Testing",
          "Bug Fixes",
          "Building to Windows"
        ],
        "Fun area": [
          "Test 1",
          "Scripts",
          "Project - Unity 2019.1.10f",
          "Scripts - After bug fixes"
        ]
      },
      "requirements": [
        "Have basic understanding of Unity"
      ],
      "description": "Experience coding in C# by creating a game from start to finish in Unity!\n\n\nThis course is a combination of a tutorial and a devlog, that will give you an idea of how to begin with the development, how to stick to the plan, and how to finish the product.\nEven though it was made to build up your logic, it will also give you a vision on solving the problems you face while creating a product. Every mechanic that you add to a game is a problem in itself. Solving number of problems lead you to a polished product.\nThis course is intended to sharpen your problem solving skills. Every step in this game that we will take requires different code, different data structures, different thought process. So the intention is, by watching how the instructor goes about solving the problems, you'll develop the skills yourselves.\nOur starting point will be a blank Unity scene and some pre-made assets in our Assets folder. From there we will go to what you see in the intro.\nAbout the contents of the game, the Course Content section above, is self-explanatory. To wrap that up, it includes some UI, some Audio handling, Script management and the flavor of the course, coding the mechanics.\n\n\nCoding time : 10hrs\nCoding Language : C#\nEnvironment : Unity\n\n\nWe believe adding to your skills has better returns than adding to your knowledge!",
      "target_audience": [
        "Anyone who wishes to practice coding",
        "Anyone who wishes to make games",
        "Intermediate C# developers"
      ]
    },
    {
      "title": "Unity Ability System",
      "url": "https://www.udemy.com/course/unity-ability-system/",
      "bio": "Build an ability system from scratch",
      "objectives": [
        "How to implement an ability system",
        "How to create user interfaces using the UI Toolkit",
        "How to work with Unity’s GraphView API",
        "How to implement a save system"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Unreal Gameplay Ability System",
          "Architecture"
        ],
        "GameplayEffects": [
          "Stat System",
          "GameplayEffect Stat Modifiers",
          "Magnitude Formula",
          "Gameplay Effect",
          "Gameplay Effect Editor",
          "Gameplay Effect Tests"
        ],
        "Gameplay Persistent Effects": [
          "Gameplay Persistent Effect",
          "Gameplay Persistent Effect Tests",
          "Starting Effects",
          "Starting Effects Test"
        ],
        "Abilities": [
          "Save System",
          "Projectile Ability",
          "Remove Effect With Tags - Cleanse",
          "Granted Application Immunity Tags - Shield Aura",
          "Conditional Effects - Burning",
          "Application Must Be Present Tags - Combustion",
          "Uninhibited Must Be Present Tags - Frost Armor",
          "Persist Must Be Present Tags - Frost Aura"
        ],
        "User Interface": [
          "Ability Element",
          "Abilities UI",
          "Abilities UI Tests",
          "Ability Tooltip",
          "Ability Effects"
        ]
      },
      "requirements": [
        "In depth knowledge of Unity",
        "A solid understanding of C#"
      ],
      "description": "In this course, we will implement an ability system in Unity.\nUnlike the Unreal Engine, Unity does not have an ability system package.\nWho is this course for?\nThis is an advanced course designed for those who already have a fundamental grasp of Unity, and want to learn how to implement an ability system using SOLID design principles.\nAre there any course requirements?\nA solid understanding of C#\nPrevious experience using Unity\nPreviously taken the stat system course\nWhat you will learn:\nHow to implement ability costs\nHow to implement ability cooldowns\nHow to implement healing abilities\nHow to implement passive abilities\nHow to implement status effects\nHow to create ability buffs\nHow to create ability de-buffs\nHow to build a user interface to view ability data using the Unity's UI Toolkit\nHow to scale ability effects off of the player’s stats\nHow to level up abilities and scale their effects based on the ability level\nHow to save changes to the ability system components\nHow to create custom editors using Unity’s UI Toolkit\nHow to create custom controls using Unity's UI Toolkit\nHow to write Play Mode tests\nHow to use C# assembly definitions\nHow to work with Unity’s GraphView API\nHow to work with ParticleSystems\n\n\nIf all this sounds appealing to you, please join me, and I’ll see you inside the course.",
      "target_audience": [
        "Indie game developers",
        "Programmers"
      ]
    },
    {
      "title": "Unreal Engine 4: Android & IOS Game Development and Publish",
      "url": "https://www.udemy.com/course/unreal-engine-4-android-ios-game-development-and-publish/",
      "bio": "Develop two games from scratch with UE4 course, publish in Android / IOS market and earn with direct sales or admob!",
      "objectives": [
        "You will also develop games on PC or mobile platforms with Unreal Engine",
        "You will learn how to publish your game on Google Play and the App Store.",
        "You will be able to present your game with advertising revenue and sales revenue models.",
        "You will have a strong problem solving and algorithm skills."
      ],
      "course_content": {
        "First Step": [
          "Progress of this Course",
          "Unreal Engine Installation (Windows)",
          "Other Downloads (Android Studio)"
        ],
        "Panel Interaction": [
          "Basic Unreal Engine Commands",
          "Basic Project Settings",
          "Introduction to Blueprint"
        ],
        "Game Project Information and Introduction to Basic Functions": [
          "First Level and Welcome Screen",
          "Widget Design and Blueprint Connection of the Welcome Screen",
          "Completion of Welcome Screen Designs and Level Entry",
          "Box Trigger, Level Start and End Point, Completion of Settings Menu"
        ],
        "Light, Camera and Sound": [
          "Lighting",
          "Character Over Lighting",
          "Camera",
          "Button Settings",
          "Sound"
        ],
        "Active Blueprint Functions": [
          "Creating Save and Load Files",
          "Registration Interrogation and Levels"
        ],
        "Animations and External Models": [
          "Character Animation",
          "Object Animation",
          "External Model Animation",
          "UE4 Internal Models",
          "Exporting an External Animated Character Model and Free Biped Archive-2"
        ],
        "External Operations": [
          "Health, Score Collection System and Score Screen",
          "Duration System"
        ],
        "Pack the Game": [
          "Game Packaging Processes - PC",
          "Game Packaging Processes - Android",
          "Creating a Key for Google Play",
          "Reducing the File Size of the Game"
        ],
        "Earn Money with Admob": [
          "Create Admob Account and Get Ad Code",
          "Admob Codes"
        ],
        "Publish to Google Play": [
          "Version Management and Store Design",
          "Publish Games on Google Play"
        ]
      },
      "requirements": [
        "PC or Mac",
        "Unreal Engine 4",
        "A strong and sustainable desire to learn"
      ],
      "description": "PRODUCE GAME IN THREE STEPS WITH UE4:\nGet to know the system.\nImprove the game\nPublish and earn money.\nWith the Unreal Engine 4 course you will learn how to develop games on PC or Mobile platforms, publish your games on mobile grocery stores, generate revenue from your game with AdMob ads or direct sales channels.\nDuring the course, I will be showing you 2 ZERO GAME development projects in full detail. In this way, you will consolidate the information you will learn on the course through a published project, and you will understand more clearly how these projects are formed.\nYou will be able to test your knowledge at the end of the episode as well as participate in a mini-award-winning competition by competing your homework with other students with 3 'End-of-Term Projects'.",
      "target_audience": [
        "Anyone who wants to develop mobile games.",
        "Those who want to understand the subtleties of modern game development with Unreal Engine",
        "Anyone who wants to learn how to publish their games.",
        "Those who aim to generate revenue from their games"
      ]
    },
    {
      "title": "Unity 2017 Game Physics",
      "url": "https://www.udemy.com/course/unity-2016-game-physics/",
      "bio": "Unity game physics for all - 2D 3D box - sphere - terrain collider - hinge spring fixed joints - trigger - gravity &more",
      "objectives": [
        "Master Game Physics using Unity 5",
        "Master rigidbodies",
        "Get familiar with box, sphere, terrain, capsule, plane colliders",
        "use buoyancy physics for water, lava, sewers, and slimy stuff",
        "learn how to create swinging objects",
        "make realistic chains effects with hooks and joints",
        "use forces, torque, and gravity",
        "Learn basics of Unity 5 for iOS development and advance techniques to make a professional casual game",
        "Learn how to use 3D pixel art in the game",
        "learn how to import Unity packages"
      ],
      "course_content": {
        "Initial Setup": [
          "About your instructor and the course",
          "Download project files",
          "Open the Unity project and get to test it",
          "Getting familiar with the Unity project assets and level"
        ],
        "Core 3D Physics": [
          "Simulating World Gravity with Rigid bodies",
          "Add the static floor rigid body",
          "How Colliders help objects stand still on the floor",
          "Dealing with multiple rigidbodies and colliders",
          "Interaction of Rigidbodies and Colliders",
          "Simulating colliding objects at full speed",
          "Adding Colliders and Rigidbodies to prefabs",
          "Creating Spherical objects with materials",
          "The trick about making balls bounce off",
          "Activity - 2 bouncing balls with different physics"
        ],
        "Physics: Movement, Forces, Torque and more": [
          "What is Physics Force and how to apply them",
          "The different types of 3D Physic forces",
          "What is Torque and how to use it"
        ],
        "Advanced Physics: Collision, triggers and all joints": [
          "Detecting collisions between game objects",
          "What are triggers and how to use them",
          "How to import Unity Asset packages",
          "Working with Fixed joints and hinge joints",
          "Applying Force to the joint",
          "Choosing the direction of the pivoting joint",
          "Assigning the parent object of a hinge joint",
          "Advanced Chain Physics movement",
          "Activity - Wrecking Ball Crossy Road style",
          "What are RayCasts and how to use them",
          "Using DrawRay to debug ray cast hits",
          "Activity - It's raining chickens and ducks",
          "Quiz time!"
        ],
        "2D Physics and Simulated Physics": [
          "Download open and test Captain Rocket Unity 2d Physics game",
          "2D Rigidbodies and 2D Colliders",
          "Using the OnCollisionEnter 2D",
          "What is an Area Effector and how to use it",
          "Types of effectors point surface area and platform",
          "Create a new scene to apply buoyancy effector",
          "Apply buoyancy to make amazing effects like water and lava",
          "Activity effectors on water",
          "Swinging objects using Target Joints 2D"
        ],
        "Animation Based Physics": [
          "Congratulations",
          "How to rate a course on Udemy",
          "Simulated Character Animation and Physics",
          "Overview of the character animation",
          "Bonus - Files"
        ]
      },
      "requirements": [
        "basic knowledge of Unity is recommended but not needed"
      ],
      "description": "Hi, and welcome to the Unity Game Physics course, my name is Yohann and I'm famous for having enabled my students to make games that reached the top ranks in the itunes app store. My courses have hundreds of 5 star reviews on Udemy alone.\nThis course is all about hands on training, if you're like me and like to learn by doing things yourself rather than listening to a teacher rambling on theory then you're going to like this course.\nAbout the course:\nWhether you're a beginner at making games or not, I will show you how to master game physics just like it's done in professional games. Physics is everywhere, sometimes you don't even know it 's there but trust me it is, it's used in most games.\n\nThe course is broken down in short, easy to digest chunks. Now right at the beginning we go straight into downloading Unity and work on a project that's based on a game that is published in the app stores. You get to work on a real game, not just some random useless project. You can follow along whether you're using a Windows computer, Linux or Mac. We'll start with the basics of physics and then move to advanced techniques like colliders, rigidbodies, triggers, area effectors, fixed joints, hinge joints, raycasting, forces, torques, and even buoyancy! The cool thing is that you don't need to take a physics class nor a game class, it's all in here.\nIf you've never heard of any of these terms or never got to use them, then this mammoth course is for you.\nAs my current students already know, I'm always around in the forums and I'll be there to help you out whenever you get stuck. But you get a lot more than just the best Unity Physics course available online. As a bonus You get a copy of the Unity source code of the Crossy road game clone called Dangerous Lanes that's a famous 3D isometric pixel game. You also get a copy of the Captain Rocket source code that is a fun endless 2D platform runner that you can use any way you'd like. And as a bonus, you get lots of characters and environment object that you can use freely to make your upcoming game look professional. This bonuses are worth well over $500.\nAre you ready to be successful at mastering game physics? Then join me on this exciting journey. Become part of this whole new world of learning skills and fun. The future's bright with Unity Game Physics, you're gonna love it.\n\n\nWhat is game physics ?\nComputer animation physics or game physics involves the introduction of the laws of physics into a simulation or game engine, particularly in 3D computer graphics, for the purpose of making the effects appear more real to the observer\n\n\n\nWhy use Unity 3D to learn about physics in video games ?\nUnity Technologies is shaping a booming global games market and has seen escalating uptake of the Unity engine and its complementary and integrated game promotion, user retention and analytics services.\nThe Unity engine is the mamoth in game dev and by far and away the dominant global game development software. More games are made with Unity than with any other game technology. More players play games made with Unity, and more developers rely on our tools and services to drive their business.\nAlso Unity 3D is free for personal use, so there is no reason not to use it! And thanks to Unity 3D, you can learn about all types of physics, 3D physics, 2D physics, isometric physics, and even simulated physics. You can reuse your knowledge for any other game engines once you've done it with Unity 3D\nUnity 3D for the win! Physics for the win! all free to use for the win!\nNote: course recorded with the latest version of Unity 5.x 2016 which comes with the newest game physics algorithms\nNote: if you already know advanced physics techniques in Unity, this course is NOT for you.",
      "target_audience": [
        "anyone interested in making games",
        "artist that want to make games",
        "gamers that want to learn about how games are made",
        "programmers of all level, wanting to make games"
      ]
    },
    {
      "title": "M.I.T Scratch - Programming and Creating Games - Kids Coding",
      "url": "https://www.udemy.com/course/scratch-programming-and-creating-games/",
      "bio": "Get Help From Funny Animated Cartoons - Learn Programming Basics And Create Awesome Games From Scratch",
      "objectives": [
        "Master M.I.T Scratch",
        "Develop problem-solving skills",
        "Develop critical thinking",
        "Understand technology",
        "Understand that learning from mistakes is vital.",
        "Develop learning by doing skills",
        "Expand your creativity.",
        "Nurture computational thinking",
        "Realize that persistence is rewarded"
      ],
      "course_content": {},
      "requirements": [
        "You have to be able to operate a computer at a basic level",
        "A pair of headphones could be helpful"
      ],
      "description": "Welcome to the exciting world of computer programming! Join Stevie, a delightful and humorous cartoon character, as he guides you through the magical journey of creating electronic games using MIT Scratch. This e-course is designed to be engaging and fun, with a touch of music to make your learning experience even more enjoyable.\nThroughout this series of video lessons, quizzes, exercises, and their solutions, you will gain a solid understanding of programming concepts. The course takes a spirited approach to learning, introducing important principles and reinforcing them through practical application.\nLet's explore the different sections that make up the \"Creating and Programming Games\" e-course:\nSection 1: Introduction Dive into the world of electronic games and their original design. Learn about the Scratch application and its capabilities, providing a solid foundation for your programming journey.\nSection 2: Basic Programming Concepts Cover the essential concepts you need to know to create your own games. Gain a deep understanding of variables, loops, conditionals, and more, empowering you to bring your creative ideas to life.\nSection 3: Animation in Scratch (NEW!) Discover the fascinating world of animation in Scratch. Explore the power of movement, transformations, and effects to bring your games to life. Learn how to create animated characters and dynamic scenes that captivate your players. Delve into advanced techniques like shooting mechanics, allowing your characters to unleash their special powers.\nSection 4: The Banana's Hunt Step by step, create the game \"The Banana's Hunt\" and apply your newfound knowledge to build an exciting and interactive game. Explore sprite movement, collisions, and scoring systems.\nSection 5: Grab the Bone. Learn how to create the game \"Grab the Bone\" where you control a hero sprite with the keyboard and avoid enemies designed to stop you. Master game mechanics, controls, and enemy behavior.\nOur goal is to lay strong foundations so you can unleash your creativity and create even more impressive games with complex character moves, dynamic animations, and stunning graphics in the future. Remember, it all starts with mastering the basics!\nImportant Tips for Success:\nComplete all lessons from start to finish.\nWatch the videos multiple times to reinforce your learning.\nKeep Scratch open while watching the videos and pause frequently to test your ideas.\nDon't hesitate to ask questions. We're here to support you.\nChallenge yourself with quizzes and exercises to solidify your understanding and boost your programming skills.\nGet ready to embark on an exciting journey into the world of programming, game creation, and animation! Enroll today and let Stevie be your guide to unlocking your potential.",
      "target_audience": [
        "Kids or teens aged 8 to 18 years old may attend this course under the supervision of a guardian or a teacher. This course is often used as vital resourse by teachers in class.",
        "Teachers. Ideal for blended learning in flipped classrooms",
        "Fathers, mothers or guardians may purchase this course for their kids"
      ]
    },
    {
      "title": "Learning Verse Programming Language For UEFN",
      "url": "https://www.udemy.com/course/verse-uden/",
      "bio": "Beginner to Master course for Verse",
      "objectives": [
        "Creating your own Verse scripts to enhance your UEFN projects",
        "Learning the basics of Verse syntax",
        "Learn how use for loop, conditionals, arrays, maps, and more advanced concepts",
        "Practical use of Verse with examples on creating your own games"
      ],
      "course_content": {
        "Verse basics": [
          "Basics about programming",
          "Writing your first code",
          "Data types in Verse",
          "Verse functions",
          "Additional coding exercises + solutions for Section 1"
        ],
        "Interacting with the Fortnite world": [
          "Adding devices to Verse",
          "Passing and receiving data types in functions",
          "Optional data type",
          "Interacting with players in Verse",
          "Math data types",
          "Additional coding exercises + solutions for Section 2"
        ],
        "Array´s, Loops, Maps and Tuples": [
          "Arrays",
          "Loops in Verse",
          "Maps",
          "Tuples",
          "Additional coding exercises + solutions for Section 3"
        ],
        "Object-oriented programming": [
          "Classes",
          "Referencing other creative devices",
          "Additional coding exercises + solutions for Section 4"
        ],
        "More advanced Verse concepts": [
          "Random module, function wrappers and printing player names",
          "Functions that return",
          "Enum data type",
          "Creating modules in Verse",
          "Race",
          "Case functions",
          "Creating UI with Verse",
          "Additional coding exercises + solutions for Section 5"
        ],
        "Creating a game with Verse": [
          "Creating an example game with Verse"
        ]
      },
      "requirements": [
        "No prior experience in Verse or any other programming languages needed.",
        "If you do have prior knowledge, the latter part of the course is still very useful on the harder concepts of Verse."
      ],
      "description": "In this Verse course I will guide you through the basics and more advanced concepts in Verse. This course takes a practical approach, showing you examples I have encountered throughout my Verse experience in doing commissions and making UEFN maps myself. On top of that, I've included heaps of coding exercises with sample answers written by me, to compare your work to. These are attached to the simple and advanced lectures. This course requires no prerequisites in coding, but some understanding about UEFN and Fortnite itself is required. On top of that, some coding experience/knowledge will just make you go faster through the course, the basics will be easier to grasp. Don't worry, I've explained everything very slowly, and everything I type has auditory explanation on it.\n\n\nAt the end of this course, you will be able to make your own Verse scripts, useful for enhancing UEFN maps or doing commissions for other people. With the uprise of the AI Verse assistant, it has become easier to implement Verse knowledge. To get ahead of other people, use this course to your advantage to create more complex scripts the AI assistents are not capable of, and launch your UEFN maps to the top!",
      "target_audience": [
        "New or intermediate programmers who are looking to enhance their UEFN projects by creating their own Verse"
      ]
    },
    {
      "title": "Learn to Make a 3D Platformer Game with Unity & C#",
      "url": "https://www.udemy.com/course/learn-to-make-a-3d-platformer-game-with-unity-c/",
      "bio": "3D Unity Game Development for Absolute Beginners 2024 ,Learn to make 3D Platformer game",
      "objectives": [
        "Understand the basics of the Unity game development environment",
        "Dive into level design principles, including obstacles, and challenges to provide an engaging and dynamic gameplay experience.",
        "Enemy AI: Develop basic enemy AI for detecting and engaging the player.",
        "UI and Menus: Create UI elements for health, score, and menus.",
        "Camera Control: Master camera movements to enhance gameplay and provide better views.",
        "Sound and Music: Implement audio features to enhance the game's atmosphere."
      ],
      "course_content": {
        "Introduction": [
          "Setup"
        ],
        "Player": [
          "Player Movement",
          "Jumping",
          "fix jumping",
          "Changing directions",
          "setting up animations",
          "Animations"
        ],
        "Camera": [
          "Cinemachine"
        ],
        "Health": [
          "Setting up health",
          "Health Mechanics",
          "Health UI",
          "Health System",
          "Damage Effect"
        ],
        "Scoring system": [
          "Setting up scoring",
          "Scoring UI"
        ],
        "Environment": [
          "Designing",
          "Skybox"
        ],
        "Enemies": [
          "Adding enemy",
          "Detecting player",
          "Chasing player",
          "Damaging player",
          "Player Attack animation",
          "Detecting enemies",
          "Destroying enemies",
          "Impact Effect"
        ],
        "Menu": [
          "Mainmenu",
          "Pause menu",
          "Fix bug"
        ],
        "Audio": [
          "Adding sounds",
          "Background music"
        ],
        "Levels": [
          "Adding levels",
          "Level Transition"
        ]
      },
      "requirements": [
        "Mac or PC capable of running Unity 3D",
        "A copy of Unity 2021 or newer"
      ],
      "description": "In this comprehensive Unity course for beginners, you will embark on a thrilling journey into the world of 3D platformer game development. Designed for aspiring game developers with little to no prior experience, this course will equip you with the fundamental skills needed to create your own 3D platformer game from scratch.\nYou will start by learning the basics of Unity and how to set up a 3D environment. From there, you will dive into player movement mechanics, designing and implementing various obstacles, and creating engaging levels with checkpoints. You will also explore enemy AI development, UI design, and integrating sound and music into your game to enhance the player experience.\nThroughout the course, you will receive step-by-step guidance and hands-on practice, ensuring that you understand each concept thoroughly. By the end of the course, you will have a complete 3D platformer game that you can customize and share with others.\nWhether you aspire to become a professional game developer or simply want to create games as a hobby, this course will provide you with the skills and knowledge needed to bring your game ideas to life. Join us on this exciting adventure and start creating your own 3D platformer game today!\n\n\nLearning Objectives:\nPlayer Movement: Students will learn how to create responsive and smooth player movement mechanics, including basic controls like running, jumping, and crouching.\nObstacle Interaction: Learners will understand how to design and implement various types of obstacles, such as static platforms, moving platforms, and hazards, and how the player can interact with them.\nEnemy AI: Students will be able to develop simple enemy AI that can detect the player, follow them, and engage in basic interactions, such as attacking or patrolling.\nLevel Design: Participants will learn the principles of effective level design, including creating challenging but fair levels, using checkpoints, and balancing difficulty progression.\nUI and Menus: Learners will be able to create a user interface (UI) for displaying important game information, such as health and score, and design menus for starting the game, accessing settings, and more.\nAnd Lot More",
      "target_audience": [
        "Those who have little to no experience in game development but are enthusiastic about learning the fundamentals.",
        "Individuals who want to explore Unity as a game development platform and understand its features and capabilities.",
        "Programmers with a background in languages like C# who want to apply their skills to game development.",
        "Students or hobbyists who have a passion for gaming and want to turn that passion into practical skills by building a complete game project.",
        "Individuals who prefer self-paced learning and online courses as a means of acquiring new skills and knowledge."
      ]
    },
    {
      "title": "Game Design Concept Art Intro: Digital Environment Drawing",
      "url": "https://www.udemy.com/course/game-design-concept-art-intro-digital-environment-drawing/",
      "bio": "Blender, SketchUp, Fundamentals, Workflow, Sketching, Photoshop, Reference Research, Concept Game Development, 2D, 3D",
      "objectives": [
        "Project setup and best practices before starting your sketch",
        "Photoshop walk through for drawing and painting including, tools, brushes, hotkeys, and other settings",
        "Perspective Grids using Sketchup and Blender",
        "Informative sketching techniques",
        "Design sketching workflows",
        "Understanding of space layout and purpose of 3/4 cutout designs",
        "Modular designs and breakouts",
        "How to refine sketches",
        "Basic Perspective overviews of: 1pt, 2pt, and 3pt",
        "Setting up Environment Perspective",
        "Generating Interior Layout in Perspective"
      ],
      "course_content": {
        "Project Overview": [
          "Purpose of 3/4 Cutaways",
          "Course Setup | Industry Software",
          "What Is Concept Art?"
        ],
        "IDEA GENERATION I": [
          "Brief to Design Board",
          "Mindmap"
        ],
        "IDEA GENERATION II": [
          "Reviewing Your Mindmap",
          "Using Story Routes for Research",
          "Refs",
          "Outro"
        ],
        "PHOTOSHOP WALKTHROUGH": [
          "Overview"
        ],
        "DESIGN RULES": [
          "Design Rules Overview",
          "123's of Details",
          "B, M, S Golden Ratio",
          "Study Sketching",
          "Environment Details"
        ],
        "DESIGN SKETCHING": [
          "Design Sketch Intro",
          "Timelapse",
          "Platform 1",
          "Platform 2"
        ],
        "DESIGN SKETCHING METHODS": [
          "Personalize",
          "Sketching Methods",
          "Timelapse part 1",
          "Timelapse part 2"
        ],
        "LINEAR PERSPECTIVE": [
          "Overview",
          "Point Perspective - 1 VP",
          "Point Perspective - 2 Vps",
          "3 Point Perspective - 3 Vps"
        ],
        "PERSPECTIVE GRID": [
          "Photoshop Hex Method",
          "3D Software Grid 1 - Sketchup",
          "3D Software Grid 2 - Blender"
        ],
        "LAYOUT SKETCHING": [
          "Overview",
          "Walkthrough",
          "Timelapse 1",
          "Timelapse 2",
          "Timelapse 3"
        ]
      },
      "requirements": [
        "No prior knowledge of Photoshop, Blender, Skethup, or Drawing needed.",
        "All concepts taught can be applied to any drawing process of user's choice, this is simply a professional's workflow who currently working in the game design industry at a top tier studio"
      ],
      "description": "Hi there!\nWelcome, and thanks for choosing Game Design Concept Art Intro: Digital Environment Drawing!\nIn this foundational course we will be learning the fundamentals of ¾ cutaway concept art. This type of concept art is great for showcasing an interior environment space making it a great design learning opportunity.\nThe focus will be on generating ideas, creating a relatable entertaining design, and sketching methods to create your concept.\nWhat students are saying about this game design digital drawing course:\n\"Incredibly useful and high quality course, providing you with industry standard workflows and techniques. Concise and to the point.\" - Daniela Draganova\n\"Nice workflow. Exactly what I was looking for\" - Mark Ojar\n\n\nWe will cover the following core skill sets:\n\n\nPhilosophies and mindset of a concept artist\nGenerating ideas for narrative design\nReference Studying\nPhotoshop Basics\nDesign principles\nDesign Sketching\nLinear Perspective\nSpace layout design including floor plans\n\n\nSome of these topics could be courses by themselves so we will look at methods concept artists use to “hack” things like perspective. The most important rules for creating entertaining sound designs will be covered but we will not go in depth over all of the design principles. As for PhotoShop, we will go over the basics needed for this course, with the end goal of a layout sketch in mind. Tools and tips will be covered throughout the course and future ones as needed.\n***NOTE This course shows the workflow for an artist creating a final asset, there are several ways to reach an end goal, this is simply one of those paths.\nWe’ll be utilizing the latest software packages that top tier gaming studios of today use to create all of your favorite titles!\nPhotoshop for the majority of this course, and SketchUp and/or Blender for perspective aids\n\n\nWhy Learn From Class Creatives?\nReide Perigo is an environment concept artist for Sony Interactive Entertainment (SIE) as part of the Visual Arts Service Group. In his time with SIE, Reide has worked on a number of games. Titles that have been released so far include Death Stranding and VR shooter, Firewall:Zero Hour.\nOutside of games, Reide has used his creative talents and design first mentality as a concept artist helping pitch and design Family Entertainment Centers all over the world, a graphic designer -- for companies such as SalesForce -- , and an illustrator for board games and even disc golf stamps.\n\n\nWho This Course is For:\nFrom beginners interested in learning about concept art and what it takes to make it into the industry, to professional concept artists looking to learn more fundamental design.\nAs with all Class Creative’s courses, we’ve laid out a structure that covers the full spectrum of industry standard game design concept art work flows from start to finish.\nPlease remember, if this is your first time creating concept art, environment art, or digital drawing, we highly recommend that you follow the outline carefully, according to how our instructor’s have structured the course. We wouldn’t want you to miss out on any details!\nHowever, if you are an advanced user and are looking for something specific to add to your repertoire feel free to dive in and skip to any sections you’d like to focus on.",
      "target_audience": [
        "Anyone who loves to draw or sketch",
        "Anyone wanting to develop new skills for drawing, sketching, painting, perspective, photoshop, blender, and sketup",
        "Anyone with a passion for learning game development",
        "Anyone who wants the ability to create assets for games",
        "Anyone interested in Environment Art",
        "Competency using a computer"
      ]
    },
    {
      "title": "Programming for Beginners - Build games using Scratch",
      "url": "https://www.udemy.com/course/programming-for-beginners-scratch/",
      "bio": "No Experiance In Programming Needed! - Build your own Flappy Birds game and learn to program games in Scratch",
      "objectives": [
        "Register an account in Scratch",
        "Understand the code building blocks of Scratch",
        "Use motion sensors to track movement",
        "Use controls to make decisions in programs",
        "Use the Pen operator to add some fun",
        "Employ sound code blocks in a game",
        "Adding additional Sprites with controls and sensing",
        "Using randomization in games",
        "Creating and using variables",
        "Using mathematical operators for control",
        "Creating animations by switching constumes",
        "Sharing your program"
      ],
      "course_content": {
        "Programming Basics": [
          "Registering in Scratch",
          "Introduction to this course",
          "Overview of Scratch",
          "Simple Moving",
          "Motion",
          "Sounds",
          "Using pen to draw",
          "Control",
          "Looks",
          "Sensing",
          "Variables",
          "Programming Basics"
        ],
        "Making The Flappy Bird Game": [
          "The Final Game",
          "Downloading Background",
          "Animate Background",
          "Adding Pipes",
          "Animating Pipes 1",
          "Animating Pipes 2",
          "Animating Pipes 3",
          "Adding Flappy Bird",
          "Adding Flap To Flappy Bird",
          "Sensing Objects",
          "Improving Sensing",
          "Making Flappy Bird Game"
        ],
        "Advanced Features": [
          "Adding Sound",
          "Adding Score",
          "Countdown",
          "Display Score",
          "Adding Best Score"
        ],
        "Download the Code": [
          "Review Material - Complete Code with Comments (Scoreboard sprite)",
          "Review Material - Complete Code with Comments (Countdown sprite)",
          "Review Material - Complete Code with Comments (Pipe 1 sprite)",
          "Review Material - Complete Code with Comments (Pipe 2)",
          "Review Material - Complete Code with Comments (Flappy bird sprite)",
          "Flappy Bird Source Code",
          "Quiz Time"
        ],
        "From Scratch to HTML Programming": [
          "Conclusion",
          "An intro to our course",
          "An overview to the text editor",
          "Html intro - Try it out",
          "The skeleton of HTML",
          "The Conclusion HTML",
          "Something special for active learners"
        ]
      },
      "requirements": [
        "All you require is a knowledge of how to operate your computer...nothing more"
      ],
      "description": "A UNIQUE FATHER-SON TAUGHT COURSE\n\n\nWho is this course for?\n\nThis course is specifically designed for people who are wanting to learn to program, especially children, teenagers, university students…oh yes, and those more mature and looking for a change of direction or career!\nWhat's the course about?\n“Everybody in this country should learn how to program a computer…because it teaches you to think\" (Steve Jobs). Steve Jobs is not alone in this thinking. Many of the people who are shaping our modern world are saying the same thing – programming is the language of the future. This course will introduce you to programming in the most fun, easiest, and most unique way possible.\nFun…because you will build a game, a really great game - the famous Flappy Bird game!\nEasiest …because you will learn to program in Scratch, developed by MIT to teach programming.\nUnique…because you will be taught by a unique duo - one with a PhD and one with a Passion\nYou will learn all the basics of programming, and by the end of this course you will be able to push the limits of what can be done in Scratch. You will learn about sprites, about code blocks that control them, about useful elements like sounds, randomization, sensing, and lots more. While the environment is easy to learn in, what you will learn will be amazing.\nWhy this course?\nThere are lots of courses that teach you programming…and of course I suggest you do as many as you can. However, if this is your first time, or if you are wanting to see if programming is for you, or your children, then this is the best course for you. Why?\nFirstly it will be fun! Learning that is not fun is not fun…OK, I suppose that makes sense ;-) Every step of the process is fun, plus what can be more fun than making your very first program a game…and a fun game too!\nSecondly we will be using Scratch to teach you. Sure you will eventually want to learn programming languages like C++ or Swift or Java…as these will allow you to write mobile apps. However, I have seen countless people give up because these environments are so complex. You need to grasp the basics first…and that is exactly why MIT University developed Scratch. This is the best platform, used at schools and universities around the world, to learn to program. From here your options are limitless!\nThirdly when you learn to program you need to learn it in a special way…and that is exactly what we are going to do for you. You will be learning from two people – myself (Craig) and my son, Joshua. I have a PhD in educational technology and have been involved in technology and teaching it for over 30 years. I will share with you the benefit of my knowledge of teaching. Joshua, who began programming at 12, has a passion for programming and sharing it with others. He has written many successful apps and shares his unique skills in this unique course. Together we are going to share with you how you can learn to program and set yourself up for the most needed career of the future. Everything is going to need software to work, whether it's your fridge, watch, phone, car…all of these are programmed. Software is the language of our world, and those who know it hold the key to the future.\nWhat kind of materials are included?\nThe course includes everything you need. The lectures are professionally created, as people have come to expect from my courses. We will explain everything to you and give you access to the source code files in Scratch. Plus in addition to this we have attached additional exercises with solutions to the end of most lessons. This means you can try other things to see if you have grasped the concepts.\nHow long will the course take to complete?\nThere are 3 sections to this course, with each section providing short powerful videos on individual concepts. Learning to become proficient in programming takes time…but this course will give you a jump start into what is one of the most needed and lucrative careers around…ask Mark Zuckerberg if your don't believe us!\nHow is this course structured?\nThis is an action course. So the course starts with getting to the doing straight away. The course starts with setting up your Scratch account and then in no time you have written your first program. The course is structured in the following way:\n1.Section 1 – Introduction to Programming in Scratch - The purpose of this first section is to introduce you to the importance of programming, and the Scratch programming environment.\n2.Section 2 – Making the Flappy Bird game - In this section we will guide you in a step-by-step way through the building of the Flappy Bird game. Here you will learn key programming constructs such as controls, sensing, data, and more.\n3.Section 3 – Advanced Programming Features - This section now introduces some more advanced elements to our game including more on data and variables, sounds, etc.\nWhy take this course?\n\nIt is quite simply the best course, in the best starter programming environment, by the most qualified and unique teaching team!",
      "target_audience": [
        "Would-be programmers",
        "Creative people",
        "Logical people",
        "Students who are using or planning on learning to program",
        "Adults who would like to learn to program",
        "Anyone who wants to learn to code"
      ]
    },
    {
      "title": "Unity Clone the Color Switch Game for iOS and Android phones",
      "url": "https://www.udemy.com/course/unity-clone-the-color-switch-game-for-ios-and-android-phones/",
      "bio": "All in one guide to get you to create and publish pro and addictive games in no time, using Unity",
      "objectives": [
        "build a professional and addictive game with Unity",
        "draw your own graphics in no time, without any artistical skills",
        "program the code logic yourself, without having to hire a developer",
        "publish the game yourself to iTunes app store",
        "publish the game yourself on Google Play (Android)",
        "Make app icons yourself, in no time"
      ],
      "course_content": {
        "Overview": [
          "Get to know your instructor and course overview",
          "Introduction to the project",
          "How to approach the cloning of Color Switch game",
          "Creating the Unity project",
          "Adding the main ball",
          "Adding the base floor",
          "Adding Physics to the Ball",
          "Creating the 2D ball with an image editor",
          "Adding 2D Physics to the ball and floor",
          "Getting the ball to stop after touching the floor",
          "Programming the ball upward jump",
          "Defining the collection of allowed colors",
          "Randomly assigning ball color",
          "Creating the first obstacle",
          "Checking for collision between ball and obstacle",
          "Programming the right and wrong color collision",
          "Checking for the correct color",
          "Programming the bar horizontal movement",
          "Adding multicolor bars to the horizontal obstacle",
          "Programming the ball max speed",
          "Creating multiple obstacles with prefabs",
          "Creating obstacles with quadrilateral shapes",
          "Programming object rotating around their center of gravity",
          "Building Triangular shapes",
          "Adding the rotation to the triangulr shapes",
          "Building the Cross shape and make it rotate",
          "Building the circular tube in the Image Editor (Photoshop)",
          "Designing the multicolor circular shape in Unity",
          "Adding the Star check point to increase score",
          "Programming the player score",
          "Displaying score with UI canvas and Text controls",
          "Adding star checkpoint to each shapes",
          "Adding the star checkpoint to multiple shapes",
          "Adding star checkpoint on circle",
          "Drawing the color switch component",
          "Building the color switcher component",
          "Programming the ball color switch part 1",
          "Programming the ball color switch part 2",
          "Adding the color switcher to different shape objects",
          "Updating the shape prebafs with color shifter components",
          "Designing the Main Menu panel in Unity",
          "Programming the Game Launch function",
          "Freezing the ball prior to tapping the screen",
          "Building the Game Over logic",
          "Working on the Game Restart logic",
          "Making complex multi shapes",
          "Make improvements to the overall gameplay",
          "Drawing the game app icon",
          "Adding the game settings",
          "Compiling the game for iPhones",
          "the iOS dev license",
          "Configuring the app in iTunes Connect",
          "Uploading the game build to iTunes",
          "Publishing to the Google Play store",
          "Add Advertising banner - Google Admob"
        ],
        "Going PRO - Enhancing the video game": [
          "Adding the camera shake effect on game over",
          "Adding a trailing effect to the main ball",
          "Improving the score feedback",
          "How to share app on Twitter using Unity 5 for any platform",
          "Adding the Rate game button to iOS and Android using Unity 5",
          "Unity How to make cool menu buttons",
          "Unity Keep track and show high score",
          "Unity add reward system for high scores (part 1)",
          "Unity reward system User Interface",
          "Unity How to program a reward system to switch character skins",
          "Unity Displaying the new rewards on game over",
          "Unity Adding glowing neon effect to your game",
          "Unity How to play sound effects and background music for video games"
        ],
        "Bonus": [
          "Bonus and project files"
        ]
      },
      "requirements": [
        "have Windows PC, or MAC OS, or Linux and a love for games"
      ],
      "description": "In this course I will show you how to build and program a clone of the top video game called Color Switch where the player controls a ball that bounces which can only pass through obstacles that correspond with a color. We will be Using the Unity game engine to do that.\n\n\nYou don't know what Unity is or you've never used Unity? Or you think you don't know enough to make a professional game with Unity?\nNO PROBLEM.. Hear me:\nI will show you every single steps in the video lectures. You will learn how to program all the code to make the ball bounce, change color, collide with other shapes, build the menu user interface, and control the player score.\nYou will also learn how to draw all types of shapes such as triangles, rectangles, circles and crosses and you will get to animate them.\nFinally, we will go through all the steps to publish the game to the Google Play store and the iTunes app store.\nThis course has all you need to go from zero to hero. come join the community of game students. See you in the course forum.\n\n\nRemember this: Simple games are often the best. Color Switch is a simple premise, you bounce a ball and pass through obstacles that correspond with a color.",
      "target_audience": [
        "people who love playing games and want to make games themselves",
        "computer engineer",
        "computer students",
        "tinkerers",
        "game enthusiats",
        "graphic artists"
      ]
    },
    {
      "title": "Extended Reality (XR) - Building AR | VR | MR Projects",
      "url": "https://www.udemy.com/course/extended-reality-xr-building-ar-vr-mr-projects/",
      "bio": "Build your own projects on VR / AR and MR apps with 3D game development.",
      "objectives": [
        "Get an in-depth understanding of the complex AR|VR|MR landscape",
        "Learn to build exciting AR apps with state-of-the-art tools",
        "Grasp this niche technology by creating AR applications using PlayCanvas engine",
        "Create a festive 3D world and deploy your 1st VR app on-mobile",
        "Publish and deploy your applications on various hardware devices",
        "Create your 1st iOS app using SceneKit, a high-level 3D-graphics framework"
      ],
      "course_content": {
        "Getting Started with Extended Reality": [
          "The Course Overview",
          "The Pilot: Understanding the XR Landscape",
          "Different Industries Leveraging XR"
        ],
        "Bringing AR to Your Web Browsers using PlayCanvas": [
          "Getting Started with PlayCanvas",
          "Understanding the Entity Component Design Pattern",
          "Creating a Browser-Based AR Project",
          "Enhance the Project using Animations, Sound and Scripts",
          "Applications of Web-Based AR"
        ],
        "Creating Complex AR Apps using iOS ARKit": [
          "Installing Xcode and Introduction to Xcode Editor and Swift",
          "Creating AR apps using ARKit",
          "Step up - ARKit Applications",
          "Placing Objects at Different 3D Locations with Tap Gesture",
          "Plane Detection Using ARKit"
        ],
        "Creating VR Experiences and Visualize in Google Cardboard or Daydream": [
          "Installing and Setting Up Unity",
          "Understanding the Unity Editor",
          "Creating a Solar System and Visualize in Google Cardboard",
          "Importing 3D Models in Unity and Using Gaze to Move in 3D World"
        ],
        "Controlling the Virtual Environment with HTC Vive Controllers": [
          "Setting up HTC Vive on Windows",
          "Importing Steam VR and VRTK Packages in Unity",
          "Picking 3D objects with Vive Controllers Using VRTK",
          "Creating a VR Maze in Unity",
          "Creating a Navmesh in Unity",
          "Navigating through the Maze Using Teleportation",
          "Adding Haptic Feedback and Deploying VR Maze in HTC Vive"
        ],
        "Mixed Reality with Microsoft Hololens": [
          "Setting Up Machine for Microsoft Hololens",
          "Using Hololens Device Portal for Sharing Your Hololens View on Desktop",
          "Developing 1st Application in Mixed Reality",
          "Getting a Gaze Cursor on Hologram in Mixed Reality",
          "Playing Animations Using Gestures",
          "Deploying Mixed Reality Application on Hololens"
        ]
      },
      "requirements": [
        "Some prior familiarity with AR/VR frameworks will be useful but not mandatory."
      ],
      "description": "The latest CNBC report suggests that starting salaries for VR and AR developers range from $40,000 to $80,000 a year. The mixed reality market is full of opportunities but finding developers with these skills is a challenge since the industry is still embryonic. If you want to successfully enter the industry, this is the right time to join the AR and VR movement.\nThis course is your chance to benefit from this opportunity by working with these technologies and transforming the way we see and interact with the World. Extended Reality is an umbrella term used for AR, VR, and MR. This course gives you exposure to the Extended Reality world and helps you understand the subtle difference between Augmented Reality, Virtual Reality, and Mixed Reality. Not only this, you'll build a solid foundation by developing applications using the most popular game engines for web and native platforms. By the end of the course, you'll have created your own projects on these platforms and will be ready for the future. Start learning today!\nAbout The Author\nParul Bansal is an Augmented Reality, Virtual Reality, and Mixed Reality expert at Kepler Lab (R&D dept.) at Publicis, Sapient, India. Currently, she is working on exploring how can features from different extended-reality frameworks can be merged for even better experiences. She is a technology enthusiast and loves exploring upcoming technologies.",
      "target_audience": [
        "If you want to strategically move into a career in the VR/AR field and gain the skills to quickly and confidently create your own projects using the industry's leading tools, then this is the course you need!"
      ]
    },
    {
      "title": "Create a Feeding Fish Frenzy Game in Construct 2",
      "url": "https://www.udemy.com/course/fishfrenzy/",
      "bio": "Create an interactive game that is compatible with PCs, Macs, and mobile phones/tablets without having to write code!",
      "objectives": [
        "Use Construct 2 software",
        "Create a game with animation, sounds, music, and different levels playable on computers and mobile devices",
        "Create a fun game without writing code or learning a programming language"
      ],
      "course_content": {
        "Software & Resources": [
          "Construct 2 and VMWare Fusion"
        ],
        "Getting Started": [
          "Setup: Part 1",
          "Setup: Part 2",
          "Adding a Play Button",
          "Detecting the Device and Computer"
        ],
        "Adding Fish": [
          "The Player Fish",
          "Small Fish",
          "Fish Animations & Sounds",
          "Keeping Score",
          "Big Fish: Part 1",
          "Big Fish: Part 2",
          "Medium Fish: Part 1",
          "Medium Fish: Part 2"
        ],
        "Level 2": [
          "Level 2 Setup",
          "Finishing the Game"
        ]
      },
      "requirements": [
        "A PC or Mac running a simulated Windows XP, Vista, 7, or 8 environment",
        "Construct 2 (Free or Paid version)"
      ],
      "description": "Have you ever wanted to build a game, but didn't know how to get started making it? Would you like to make computer and mobile games, but don't want to learn a programming language? Well, you've come to the right place!\nIn this video course you'll learn how to:\nCreate a fish feeding game without writing code\nUse Construct 2 software (FREE!)\nPublish your game to be played on computers and mobile devices\nGo from complete beginner to game developer\nHere's what you'll get:\nOver 3 hours of video tutorials\nAll of the source files\nArtwork, sound effects and music needed to create an interactive, mobile-friendly game",
      "target_audience": [
        "Anyone who wants to make games without code"
      ]
    },
    {
      "title": "RPG Maker For Beginners",
      "url": "https://www.udemy.com/course/rpg-maker-for-beginners/",
      "bio": "Learn to make games without any coding or programming knowledge for Windows, Mac, Linux and Mobile platforms",
      "objectives": [
        "How to create new items, weapons, skills and classes",
        "How to use switches, variables and common events",
        "How to generate new NPCs and add them to the world",
        "How to create and transfer between maps",
        "How to deploy your project"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Where and How To Download RPG Maker"
        ],
        "Creating Games": [
          "How To Create A Map",
          "Transfer Between Maps",
          "Adding Interactable Objects",
          "Adding Interactable NPCs",
          "Dialogue",
          "Character Generator",
          "Creating A Shop",
          "How To Create An Enemy",
          "Battles and Encounters",
          "Stats and Classes",
          "Skills and Items",
          "Weapons and Armour",
          "States and Traits",
          "Switches and Self-Switches",
          "Variables",
          "Common Events",
          "Cutscenes",
          "Background Music and SFX",
          "Project Deployment"
        ]
      },
      "requirements": [
        "Own a copy of or download the trial to any RPG Maker Engine"
      ],
      "description": "Learn how to use any RPG Maker Game Engine in an easy to understand way for beginners to start making their own game without coding. In this course, we will be going over everything you need to create your own game in any RPG Maker. For this course, I will be using RPG Maker MV but all lessons will apply to previous versions of RPG Maker.\nYou can use any version of RPG Maker to follow along as any changes aren't too major however, I will be using the MV version of the Engine for these videos.\n\n\nThroughout this course, some of the things you will learn are:\nWhere and How to download the RPG Maker Engine\nHow to create and transfer between maps\nHow to generate new NPCs and add them to the world\nHow to create new items, weapons, skills and classes\nHow to use switches, variables and common events\nHow to deploy your project",
      "target_audience": [
        "Beginners to any of the RPG Maker Engines"
      ]
    },
    {
      "title": "Unity: Next Level Game Visuals",
      "url": "https://www.udemy.com/course/unity-next-level-game-visuals/",
      "bio": "Learn a suite simple techniques that will allow you to transform the look of your game graphics",
      "objectives": [
        "Be equipped with the knowledge and practical experience to use a range of simple, yet powerful, techniques to dramatically improve game visuals",
        "Understand the terminology used when rendering textures onto game objects",
        "Create your own height and normal maps, to simulate surface detail on a game object (rivets, scratches, seams etc.)",
        "Create seamless textures",
        "Understand tiling and offsetting of textures to achieve more realistic visuals; use simple code to randomize tiling and offset values to reduce the appearance of repeating textures",
        "Understand the benefits and limitations of all the techniques introduced in this course and where they can be applied",
        "Provide you with the suite of techniques to equip you with the confidence to take the 'next steps' in your journey of creativity"
      ],
      "course_content": {
        "Introduction": [
          "Why Buy this Course?",
          "Introduction and Course Overview",
          "Setting up your Software Applications",
          "Faking the Detail - This Course in a Nutshell"
        ],
        "Theory: The Basics & Terminology": [
          "An Image Primer",
          "Images: Test your Understanding",
          "Textures, Materials, Shaders and more....",
          "Textures, Materials & Shaders: Test Your Understanding",
          "Height Maps and Normal Maps Explained",
          "Height Maps and Normal Maps: Test your Understanding",
          "Using an Atlas to Explain Tiling and Offset",
          "Tiling and Offset: Test your Understanding"
        ],
        "Practical Examples: Height Maps and Normal Maps": [
          "Your First Height Map and Normal Map",
          "4 More Examples",
          "Height Maps and Normal Maps from Scratch",
          "Online Map Generator"
        ],
        "Practical Examples: Seamless Textures, Tiling and Offset": [
          "Creating a Seamless Texture",
          "Free Photoshop Seamless Texture Plugin",
          "Randomising Tiling and Offset for More Realistic Effects"
        ],
        "Bringing It All Together": [
          "Closing Thoughts"
        ]
      },
      "requirements": [
        "Working knowledge of the free, personal version, of Unity (We will be using a small amount of C# but no programming knowledge is required)",
        "Working knowledge of Photoshop or other similar image editing application. Free alternatives to Photoshop are presented in the course",
        "This is a beginners course so don't worry I'll walk you through all that you need to know"
      ],
      "description": "By the end of this course you will be able to\nUnderstand the theory behind diffuse maps, height maps and normal maps\nCreate your own height maps and normal maps from textures that will quickly and simply transform the look of your game graphics\nUnderstand the relationship between textures, materials and shaders\nExpress your creativity without needing to be an artist\nCreate your own seamless textures\nUnderstand tiling and offset in order to correctly display textures on game objects\nUnderstand the concept of an texture atlas\nHopefully, along the way, having  fun; equipped and inspired to independently explore your own techniques beyond the boundaries of the course",
      "target_audience": [
        "Anyone who wants to have fun by making your game graphics more realistic",
        "Those who want to express their creativity in games (but don't worry you do not need to be artistic - I'm not!)",
        "Anyone wanting to learn the techniques to create and modify base textures, height maps and normal maps",
        "Anyone wanting to increase the principles and underlying knowledge of textures, materials, height maps & normal maps; what they are and how they work",
        "Game designers who may want to create their own graphical content rather than rely on others or purchases from the Unity Asset Store",
        "Anyone wanting to create their own unique materials for fun or profit (Unity Asset Store and other market places)"
      ]
    },
    {
      "title": "Complete 2D Space Shooter in Unity C# For Beginners 2024",
      "url": "https://www.udemy.com/course/complete-2d-space-shooter-in-unity-c-for-beginners-2024/",
      "bio": "Learn C# with Unity and create your own 2D Space Shooter Game!",
      "objectives": [
        "Fundamental Unity Concepts: Understand the core principles of Unity, including scenes, game objects, components, and the Unity interface.",
        "C# Fundamentals: Develop a foundational understanding of C# programming, covering variables, functions, loops, and conditional statements.",
        "Space Shooter Creation: Learn to design and implement core features of a 2D Space Shooter, such as player controls, enemy AI, shooting mechanics, power-ups",
        "Polished Game Deployment",
        "Learn to create and implement user interfaces for displaying essential information such as scores, lives, and other relevant game data.",
        "Dive into level design principles, including obstacles, and challenges to provide an engaging and dynamic gameplay experience."
      ],
      "course_content": {
        "Player": [
          "Setting up Player",
          "Player Movement"
        ],
        "Obstacles": [
          "Adding Obstacles",
          "Spawning Obstacles",
          "Randomizing Obstacles"
        ],
        "Background": [
          "Background + Particle effect"
        ],
        "Health Mechanics": [
          "Setting up Health",
          "Health Mechanics",
          "Health UI",
          "Coding Health system"
        ],
        "Shooting": [
          "Shooting mechanics",
          "Creating Bullets",
          "Fixing Shooting",
          "Destroying Objects"
        ],
        "Enemies": [
          "Adding Enemy",
          "Enemy Shooting",
          "Fixing Enemy Shooting",
          "Destroying Player",
          "Spawning Enemies"
        ],
        "Respawn": [
          "Respawning"
        ],
        "Scoring System": [
          "Adding Gems",
          "Scoring",
          "Scoring UI"
        ],
        "MENU": [
          "Setting up Buttons",
          "Main Menu Buttons",
          "Setting up Pause Menu",
          "Pause Menu",
          "Fixing Bugs"
        ],
        "Audio": [
          "Setting up Sounds",
          "Adding more Sounds",
          "Background Music"
        ]
      },
      "requirements": [
        "Mac or PC capable of running Unity 3D",
        "A copy of Unity 2021 or newer"
      ],
      "description": "Embark on a captivating journey into game development with our Udemy course, 'Complete 2D Space Shooter in Unity C#.' Whether you're a novice or aspiring game developer, this course is your gateway to mastering Unity and C# programming.\nExplore the fundamentals of Unity, including scenes, game objects, and the Unity interface. Master the intricacies of 2D game development, gaining expertise in sprite management, animations, and effective scene composition. Develop a strong foundation in C# programming, covering variables, functions, loops, and conditional statements.\nThe heart of the course lies in crafting your very own 2D Space Shooter. Learn to design and implement key features such as player controls, enemy AI, shooting mechanics, power-ups, and scoring systems. As you progress, refine your creation with insights into polishing, optimizing performance, and preparing for deployment.\nIn this course, you will learn:\n\n\nUnity basics: Scenes, game objects, and the Unity interface.\n2D game essentials: Sprite management, animations, and effective scene design.\nC# fundamentals: Variables, functions, loops, and conditional statements.\nSpace Shooter creation: Player controls, enemy AI, shooting mechanics, power-ups, and scoring systems.\nPolished game deployment: Refining, optimizing performance, testing, and preparing for publication.\nEnemy AI: Introduce basic enemy AI behaviors, adding challenges and dynamics to your game world.\nPhysics and Colliders: Dive into Unity's 2D physics system to create realistic interactions between game objects, ensuring an immersive gaming experience.\nUI Design: Learn to create user interfaces for displaying scores, lives, and other crucial in-game information.\nSound and Music Integration: Enhance the gaming experience by integrating sound effects and background music seamlessly into your project.\nPublishing and Distribution: Gain insights into the process of publishing your 2D platformer game on various platforms Level mechanics,Game mechanics\n\n\nWith a hands-on approach and step-by-step guidance, this course empowers you to turn your game development dreams into reality. Enroll now and join a community of aspiring game developers ready to soar into the universe of Unity 2D Space Shooter creation!\"",
      "target_audience": [
        "This course is tailored for individuals who are new to game development and want to start with 2D games using Unity.",
        "Ideal for those with a passion for Unity but limited experience, providing a beginner-friendly introduction to game development.",
        "Geared towards individuals who aspire to design their own games and are looking for a foundational course in 2D game development.",
        "Suited for those who may have basic programming knowledge or are entirely new to coding, as the course covers game development concepts in a beginner-friendly manner."
      ]
    },
    {
      "title": "Roblox Studio 2023: Complete Lua Scripting for beginners",
      "url": "https://www.udemy.com/course/roblox-studio-2023-complete-lua-scripting-for-beginners/",
      "bio": "Unlock Your Creativity: Master Roblox Lua Scripting for Beginners",
      "objectives": [
        "Make your own game in Roblox Studio.",
        "Be an experienced developer in Lua.",
        "Make your first robux by finishing your game.",
        "Understanding all important aspects to become good developer."
      ],
      "course_content": {
        "Introduction": [
          "Introduction to this course",
          "Making account and installing Roblox Studio.",
          "How to use Roblox Studio and objects hiearchy explanation.",
          "Different types of scripts and their usage.",
          "Intro to GUI before scripting."
        ],
        "Lua Basics": [
          "Variables",
          "Variables - explaining local",
          "Functions",
          "Conditions",
          "Tables and Loops",
          "Events",
          "Bindable Events",
          "Remote Events"
        ],
        "Lobby System": [
          "Introduction to lobby system",
          "Preparing modules and some loops",
          "Working on invitation phase",
          "Working on notification system",
          "Adding animations to notification system",
          "Working on event invitations",
          "Handling joining event and sending countdown info"
        ],
        "Obby mini game with our lobby system": [
          "Introduction to our mini game",
          "Preparing obby",
          "Communication with lobby service and preparing spawns",
          "Spawning game and preparing players spawn",
          "Finally spawning player",
          "Player death when touching traps",
          "Handle last player",
          "Player finish game",
          "Fixing bugs",
          "Finishing our game - avoiding escaping",
          "Fixing spawning with zero players"
        ],
        "Persistance and more GUI": [
          "Introduction to persistance",
          "Adding profile service and data handler",
          "Preparing money service",
          "Making money service working",
          "Removing wait when trying reach players data",
          "Giving player money after player won mini game"
        ]
      },
      "requirements": [
        "No programming experience is needed."
      ],
      "description": "Are you ready to embark on an exciting journey into the world of game development with Roblox? Look no further! Welcome to our comprehensive and interactive course, where you'll become a master in Roblox Lua scripting, turning your wildest game ideas into reality!\nUnlock Your Creative Genius: With almost 7 hours of engaging content, this course is specifically designed for beginners with little to no coding experience. Get ready to tap into your creative genius as we guide you through the fundamentals of Lua scripting, the programming language behind Roblox Studio.\nLearn by Doing: Our hands-on approach ensures that you won't just learn theory; you'll gain practical experience by working on real-life projects. Throughout the course, you'll build dynamic environments, create captivating gameplay mechanics.\nKey Course Highlights:\nMaster the Basics: Start from scratch and build a solid foundation in Lua scripting, even if you've never written a line of code before.\nDesign Engaging Gameplay: Delve into the secrets of scripting game mechanics that make your games not only fun but also challenging and rewarding for players.\nMultiplayer Adventures: Dive deep into scripting multiplayer functionalities, enabling players to embark on epic adventures together, collaborating or competing in thrilling gameplay scenarios.\nExpert Instruction and Support: You'll be guided by expert instructor, who not only possess an in-depth knowledge of Roblox Lua scripting but also have a knack for making complex concepts easy to understand. They're dedicated to your success, providing personalized support whenever you need it.\nRealize Your Game-Making Dreams: Whether you're a budding game developer or a Roblox enthusiast with a passion for creating, this course will equip you with the essential skills to build and publish your very own Roblox games. Unleash your creativity, learn the art of scripting, and see your game-making dreams come to life!\nEnroll now and join our community of aspiring developers! Let's code, create, and conquer the world of Roblox together!",
      "target_audience": [
        "Beginner roblox developers."
      ]
    },
    {
      "title": "Unreal Engine 4 - Multiplayer Team Based FPS In Blueprints",
      "url": "https://www.udemy.com/course/unreal-engine-4-multiplayer-team-based-fps-in-blueprints/",
      "bio": "Creating A Unreal Engine 4 Team Based FPS With Several Game Modes From Ground Zero In 100% Blueprint Scripting",
      "objectives": [
        "Learn Various Aspects Of Using Unreal Engine 4 By Making An Actual Playable Multiplayer FPS Game",
        "Detailed Explanations Not Just Watching Someone Clicking Buttons",
        "No C++ The Entire Project Is Made Using 100% Blueprint Scripting",
        "Setting Up A Menu With Basic Steam Listen Server Hosting And Joining",
        "Setting Up A FPS Character Using 3 Separate Meshes",
        "Setting Up Weapon Firing For Hitscan And Projectile Based Weapons",
        "Making Team Based Death And Re-spawn System"
      ],
      "course_content": {
        "Beginning At The Beginning": [
          "Initial Project Creation",
          "Basic Character Setup",
          "Character Animation Pt1",
          "Character Animation Pt2",
          "Sprint And Weapon Attachment",
          "Weapon Firing And Project Backup",
          "Health And Damage",
          "Player Name Tag And Graph Cleanup Methods",
          "Adding A Secondary Weapon And Switching",
          "Expanding The Master Weapon To Allow Projectiles",
          "Correcting A Projectile Issue And Adding Fire Weapon Animation",
          "Adding The Ability To Use Various Animation Sets",
          "Making Improvements To Help With Automation And Preparing For More Firing Modes",
          "Making Some Missing Pistol Animations",
          "Making Death Ragdoll And Respawn System",
          "Discussing Lobby Design And Listen Server Limitations",
          "Creating The Ability To Have And Select Teams",
          "Enabling The Steam Plugin And Starting The Main Menu",
          "Continuing The Menu System",
          "Finishing The Menu System And Doing A Test Build"
        ],
        "Expanding To Include More Features": [
          "Implementing Class Selection",
          "Changing Character Visuals Based On Class",
          "Optimizing And Expanding The Weapon",
          "Finishing The Weapon Optimization And Expanding The Projectile",
          "Making A Grenade Launcher",
          "Starting Server Settings Menu To Include Other Game Modes",
          "More Work On The Server Settings Menu",
          "Getting The Game Mode And Map Name To Display In The Level",
          "Making A Match Timer And A Scoreboard",
          "Bug Testing And Fixing Tightening Up The Current Project",
          "Refactoring The Projectile Spawning And Projectile",
          "More Bug Fixing And Polish",
          "Working On Menu To Hide UI Elements Based On Game Mode",
          "Even More Menu Polish And Bug Fixing",
          "Final Bug Testing And Testing A Packed Build",
          "Fixing A Few Issues And Adding A Random Coin Spawner",
          "Finishing The Random Coin Spawner And Adding Directional Animation For Sprinting",
          "Making A Sniper Rifle With A Scope",
          "Making A Character Station For Class Switching In Game",
          "Finishing The Character Station"
        ]
      },
      "requirements": [
        "Basic Understanding Of The UI And Navigation Of Unreal Engine 4"
      ],
      "description": "What Better Way To Learn The Unreal Engine 4, Than By Creating A Fully Playable Multiplayer Team Based FPS Game. This Course Covers The Process Of Going From A Blank Project All The Way To A Playable Packaged Build That Can Be Distributed For Others To Host And Join The Game Using The A Basic Steam Listen Server.",
      "target_audience": [
        "This Course Is Targeted For Beginners To Intermediates",
        "People Interested In The Multiplayer Side Of The Unreal Engine 4"
      ]
    },
    {
      "title": "How to Code JavaScript Games: A 2D Shooter with HTML5 Canvas",
      "url": "https://www.udemy.com/course/javascript-games-101/",
      "bio": "Learn to develop a 2D geometric shooter by combining programming concepts with geometry and physics",
      "objectives": [
        "Project Setup",
        "Player Creation",
        "Projectile Creation",
        "Enemy Creation",
        "Collision Detection",
        "Garbage Collection",
        "Particle Explosion Creation",
        "Score Tracking",
        "Refactoring and Performance Techniques",
        "User Interface Creation",
        "User Interface Animation",
        "Player Movement",
        "Different Types of Enemies (Homing, Spinning, and Homing-Spinning)",
        "Power-Ups",
        "Interactive Background Particles",
        "Sound Effects and Music",
        "Mobile Responsive Techniques",
        "Mobile Events and Testing",
        "Deployment"
      ],
      "course_content": {
        "Basic Game Functionality (player, enemies, shooting, and explosions)": [
          "Project Setup",
          "Create a Player",
          "Shoot Projectiles",
          "Create Enemies",
          "Detect Collision on Enemy and Projectile Hit",
          "Detect Collision On Enemy and Player Hit",
          "Remove Off Screen Projectiles",
          "Colorize Game",
          "Shrink Enemies on Hit",
          "Create Particle Explosion on Hit",
          "Add Score",
          "More Accurate Object Removal",
          "Add Game Over UI",
          "Add Restart Button",
          "Add Start Game Button",
          "UI Animations"
        ],
        "Movement, Enemies, and Enhanced Interaction": [
          "Player Movement",
          "Homing Enemies",
          "Spinning Enemies",
          "Homing-Spinning Enemies",
          "Power-Ups",
          "Dynamic Score Labels",
          "Interactive Background Particles",
          "Sound Effects",
          "Background Music",
          "Mute Button",
          "Screen Resizing",
          "Mobile Events and Performance",
          "Revisiting setInterval",
          "Deployment"
        ]
      },
      "requirements": [
        "A basic understanding of JavaScript (know how to create functions, know differences between var, let, and const; etc.)",
        "How to push to a GitHub repo (only required for the last lesson on deployment)"
      ],
      "description": "PLEASE READ: This is a freemium course—the first 1-2 hours are free (you can watch right here on Udemy [or YouTube] with each video's \"Preview\" button), while the remaining 4-5 hours require course purchase. I've always been a big advocate of spreading the basics to as many people as possible, as I believe knowledge and personal growth are some of the best ways to better our world as a whole. Enjoy.\nWelcome to the JavaScript Games 101 course, where you will learn how to create your very first 2d, geometric, shooter-style JavaScript game.\nMy name is Christopher Lis, and I'm an award winning Full-Stack Engineer with over ten years of web development experience. I've directly worked with clients like Harvard University, The Basketball Tournament, and premium award winning agencies like Brave People.\nThe goal of this course is to give you the skillset required to code your own JavaScript games from scratch. Many game dev fundamentals are covered in this course, and much of what you'll learn uses hand-written math functions rather than hidden away abstractions that game dev libraries typically provide.\nIn this course, you'll learn everything from:\n\n\n- Project Setup\n- Player Creation\n- Projectile Creation\n- Enemy Creation\n- Collision Detection\n- Garbage Collection\n- Particle Explosion Creation\n- Score Tracking\n- Refactoring and Performance Techniques\n- User Interface Creation\n- User Interface Animation\n- Player Movement\n- Different Types of Enemies (Homing, Spinning, and Homing-Spinning)\n- Power-Ups\n- Interactive Background Particles\n- Sound Effects and Music\n- Mobile Responsive Techniques\n- Mobile Events and Testing\n- Deployment\n\n\nAnd so much more.\nIf you're serious about taking your game dev skills to the next level, then let me guide you through the full production of a 2D game that's ready for production launch.",
      "target_audience": [
        "This course is for beginner JavaScript developers looking to get into the realm of game development."
      ]
    },
    {
      "title": "Introduction to Lighting in Unreal Engine 5: Mastering Lumen",
      "url": "https://www.udemy.com/course/introduction-to-lighting-in-unreal-engine-5-mastering-lumen/",
      "bio": "Master Lighting in Unreal engine 5 Using Lumen. Product, Interior, Exterior, Car / Automotive Lighting",
      "objectives": [
        "Lighting Fundamentals",
        "Product Lighting",
        "Automotive Lighting",
        "Interior Lighting",
        "Exterior Lighting"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Course": [
          "Fundamentals of Lighting",
          "Introduction To Lighting In Unreal Engine 5",
          "Product Lighting",
          "Lighting a Car",
          "Interior Lighting",
          "Exterior Lighting"
        ]
      },
      "requirements": [
        "Basic knowledge of Unreal Engine 5"
      ],
      "description": "Introduction to Lighting in Unreal Engine 5: Mastering the Art of Illumination\nWelcome to the world of lighting in Unreal Engine 5, where creativity meets technology to illuminate your virtual worlds like never before. In this comprehensive course, we delve into the fundamentals of lighting, empowering you with the knowledge and skills to bring your scenes to life with breathtaking realism and immersive atmospheres.\nLighting is more than just brightness; it's the essence that defines mood, enhances storytelling, and captivates audiences. Whether you're a seasoned developer or a novice enthusiast, this course is designed to equip you with the essential tools and techniques to harness the power of light within Unreal Engine 5.\nWhat You'll Learn:\nIntroduction to Lighting Fundamentals: Explore the core principles of lighting, from understanding light sources to manipulating shadows and reflections. Gain insights into the physics of light and how it interacts with materials in your virtual environment.\nTypes of Lights and Settings: Dive into the diverse range of lighting options available in Unreal Engine 5, including point lights, spotlights, directional lights, and more. Learn how to fine-tune their settings to achieve the desired mood and ambiance for your scenes.\nProduct Lighting with a Camera as the Focus: Discover techniques for illuminating products within virtual environments, whether you're showcasing a piece of furniture, a consumer gadget, or any other tangible object. Master the art of highlighting key features and textures to enhance visual appeal.\nCar Lighting: Unravel the complexities of lighting automotive scenes, in a sleek showroom presentations. Learn how to accentuate the curves and contours of vehicles while simulating realistic lighting conditions, including reflections.\nInterior Lighting: Step inside architectural spaces and learn how to illuminate interiors with realism and style. Explore the interplay of natural and artificial light sources, and master the art of creating inviting atmospheres that evoke emotion and engagement.\nOutdoor Lighting: Journey into the great outdoors and harness the power of natural light to breathe life into expansive landscapes and outdoor scenes. Learn how to simulate realistic day-night cycles and atmospheric phenomena to create immersive outdoor environments.",
      "target_audience": [
        "Game Developers",
        "3D Artists",
        "Architectural Visualizers",
        "Product Designers",
        "Filmmakers",
        "Enthusiasts Interested in Real-time Rendering"
      ]
    },
    {
      "title": "Game Audio Essentials: Music Production for Video Games",
      "url": "https://www.udemy.com/course/game-audio-essentials-music-production-for-video-games/",
      "bio": "Create custom tracks for your game, from retro to RPG. Compose, mix, and play back music in Unity, Unreal and Godot.",
      "objectives": [
        "Learn to craft custom game music that sets the mood and fits your epic worlds.",
        "Build a playlist-worthy mix of tracks for adventure, horror, boss battles and more.",
        "Create bangers using Reaper, even if “DAW” sounds like a made-up word to you.",
        "Master how to edit tracks so they’re ready to slay in any game engine.",
        "Develop an ear for matching music to genres like platformers or RPGs.",
        "Program virtual instruments to sound like you’ve got a full orchestra in your pocket.",
        "Mix your tracks so every note hits just right—no muddy messes here.",
        "Play back your music in your engine of choice, from Unity to Unreal to Godot."
      ],
      "course_content": {
        "Introduction & Setup": [
          "Welcome to the Course",
          "Community & Support",
          "Installing Reaper"
        ],
        "Your First Song": [
          "Section Intro",
          "A Quick Intro to Reaper",
          "What is MIDI?",
          "The Basics of MIDI in Reaper",
          "Playing a Synthesizer",
          "Using an External MIDI Keyboard",
          "Drums and MIDI",
          "Sampling in Reaper",
          "Intro to Mitch’s Music Kit"
        ],
        "Making a Retro Adventure Song": [
          "Section Intro",
          "Finding Inspiration",
          "Laying Down a Beat",
          "Adding a Bass Line",
          "Adding Chords",
          "Arpeggiating Chords",
          "Finding a Melody",
          "Adding Another Section",
          "Mixing Our Track",
          "Gluing It All Together"
        ],
        "Making an Underwater Song": [
          "Section Intro",
          "Finding Inspiration",
          "Starting With a Melody",
          "Adding Synth Pads",
          "Call and Response",
          "Adding a Bass Line",
          "Adding Sound Effects",
          "Adding a Drum Section",
          "Mixing and Polishing"
        ],
        "Making a Horror Song": [
          "Section Intro",
          "Finding Spooky Inspiration",
          "Generating Terrifying Noise",
          "Building a Scary Soundscape",
          "Adding Frightening Strings",
          "Making a Chilling Beat",
          "Creepy Mixing and Polishing"
        ],
        "Making an Epic RPG Battle Song": [
          "Section Intro",
          "Finding Inspiration",
          "All About VSTs",
          "Starting With a Beat",
          "Adding a Bass Line",
          "Adding a Chord Progression",
          "Adding Strings",
          "Adding a Lead Melody",
          "Adding An Intro",
          "Mixing and Polishing"
        ],
        "Playback of Music in Game Engines": [
          "Section Intro",
          "Looping and Exporting Our Songs",
          "Playing Our Songs in Unity",
          "Playing Our Songs in Unreal",
          "Playing Our Songs in Godot",
          "Outro"
        ],
        "Bonus": [
          "Easy Dynamic Audio",
          "Get Better at Mixing"
        ]
      },
      "requirements": [
        "If you've taken our Game Audio Essentials: Sound Design course that'd be awesome but it's not required."
      ],
      "description": "You’re making a game, and it’s awesome. But let’s be real—does it sound awesome? You could grab some generic tunes off the internet, but where’s the fun in that? Your game deserves music that’s as epic as it is!\nWelcome to our Sound Music Production for Games course! Here, you'll learn how to create custom tracks that fit your game perfectly. From retro adventure vibes to epic RPG boss battle bangers, you’ll craft tunes that level up your game’s atmosphere.\nDon’t worry if you’re starting from scratch. All you need is Reaper (a digital audio workstation), and we’ll hook you up with a sample and preset library to kick things off. No fancy studio? No problem. We’ve got you covered.\nWe’ll take you on a quest through four distinct music genres. First, you’ll create a retro adventure track. Then, dive into the deep with an underwater platformer tune. Feeling spooky? We’ll conjure up an atmospheric horror score. And for the grand finale: an epic RPG boss battle theme. Boom.\nBy the end, you’ll not only have killer tracks but also the skills to edit and prepare them for playback in your game engine of choice. Yes, we’re talking Unity, Unreal and Godot.\nStuck thinking, “But I’m not a musician” or “What even is a DAW?” Chillax. We’ll guide you through using Reaper to program virtual instruments and mix tracks like a pro. Whether you’ve got game engine skills or just a dream to make original music, this course is for you.\nIf the thought of writing music makes your palms sweaty (knees weak, arms are heavy. Vomit on his sweater already, mom's spaghetti...), you’re not alone. That’s why we break everything down step-by-step, so you can start small and build big. No need to spit lyrics like Eminem —just bring your passion for gaming.\nThis course is perfect for aspiring game devs who want to add music to their skill tree. Maybe you’re a coder who’s curious about sound. Or a musician itching to compose for games. Whoever you are, we’re here to help you smash your goals.\nSo, ready to crank up the volume on your game? Let’s make some music that gets players hyped, scared, or maybe even teary-eyed. Grab your copy of Reaper, and let’s do this. Your game deserves a soundtrack that’s as epic as the adventure itself!",
      "target_audience": [
        "If you want to make original music but you don’t know where to start, this course is perfect for you.",
        "If you have game engine experience, but are new to sound design or have sound experience but aren’t a musician - you're in the right place.",
        "If you are a musician, but want to learn how to make music specifically for games - welcome to the course!"
      ]
    },
    {
      "title": "3D Pathfinding with Octrees - Unity 6 Compatible",
      "url": "https://www.udemy.com/course/3d-pathfinding-with-octrees/",
      "bio": "Discover how to carve up 3D space with octrees and implement the A* algorithm to build AI to automatically navigate.",
      "objectives": [
        "Define and Explain the concept of Octrees",
        "Develop an Algorithm to Recursively Divide Space into Octants",
        "Demonstrate the ability to apply the A* algorithm to Pathfinding",
        "Build a simple AI character that can independently navigate through 3D space"
      ],
      "course_content": {
        "Introduction": [
          "Welcome",
          "Join the H3D Student Community",
          "Contacting H3D",
          "FAQs",
          "Updating to Unity 6"
        ],
        "Octrees": [
          "What is an Octree",
          "The Octree Base Classes",
          "Adding a Node",
          "Splitting a Node",
          "Dividing Space",
          "Selectively Dividing Space",
          "Finding Empty Leaves",
          "Splitting for Higher Granularity"
        ],
        "Waypoint Graphs": [
          "Basic Graph Architecture Part 1",
          "Basic Graph Architecture Part 2",
          "Adding Nodes to the Waypoints Graph",
          "Adding Edges to the Waypoints Graph",
          "Reducing Edges"
        ],
        "Pathfinding": [
          "Pathfinding",
          "Implementing A* Part 1",
          "Implementing A* Part 2",
          "Developing a Path Following AI",
          "The First Test Flight",
          "Adding Multiple AI and Paths",
          "Combining A* with Octrees for Pathfinding Part 1",
          "Combining A* with Octrees for Pathfinding Part 2",
          "Combining A* with Octrees for Pathfinding Part 3",
          "Adding Destinations for AI Part 1",
          "Adding Destinations for AI Part 2",
          "Adding Destinations for AI Part 3"
        ],
        "Final Words": [
          "Some Final Words from Penny",
          "Where to now?"
        ]
      },
      "requirements": [
        "A working knowledge of the Unity Game Engine",
        "A working knowledge of C#",
        "An understanding of recursion"
      ],
      "description": "Ever wanted to take navmeshes off the level and extend them into 3D space? The techniques revealed in this course will show you how to use Octrees to recursively divide space for use with the A* algorithm to find paths from one location to another. Throughout, you will follow along in the Unity game engine to develop a project that creates and visualises Octrees in carving up the space around game objects before developing an automatic navigating AI character that uses A* for pathfinding.\nThe course includes:\nOctree and Tree Graph Theory\nWaypoint Graph Theory\nThe practical application of Octrees in space dividing, in a 3D Unity environment\nA close-up look and implementation of the A* algorithm\nThe development of AI characters that independently navigate 3D space\nBy the end of this course, you will have a thorough appreciation of the power of Octrees and their use in 3D pathfinding and be able to implement them in Unity to develop your own AI characters with auto-navigation.\nWhat others are saying about Penny's courses:\nThis course is amazing! Penny has got to be, hands down, one of the best instructors on game development, Unity, and C#! In the span of three hours, I have learned so much that it rivals my graduate program!\nBest Unity class I've taken.\nWow, the most fun I've ever had coding! For the first time since taking numerous online courses over a 4 year span, I took on all of Penny's challenges successfully. Personally, I feel as though I am making progress, and this is thanks to her professional teaching ability.",
      "target_audience": [
        "Intermediate 3d game developers wanting to expand their skillset in AI programming.",
        "Intermediate Unity hobbyists keen on learning more AI techniques."
      ]
    },
    {
      "title": "Blender 4 Visual Effects: Explosions, Destruction & Physics",
      "url": "https://www.udemy.com/course/blender-4-visual-effects/",
      "bio": "Learn to Create Explosions, Break Objects, and Simulate Realistic Physics in Blender",
      "objectives": [
        "Add mind-blowing visual effects to your animations and films.",
        "Learn to create jaw-dropping explosions in Blender 4.",
        "Master the art of breaking and smashing objects.",
        "Develop skills to demolish buildings and other structures.",
        "Create epic splashes and fiery destruction scenes.",
        "Build realistic rigid body and particle systems.",
        "Build realistic rigid body and particle systems.",
        "Make jets soar and carve epic waves across the water."
      ],
      "course_content": {
        "Setting Up Rigid Bodies": [
          "Course Intro",
          "Quick Interface Reminders & Key Info on Simulations",
          "First Look at Rigid Bodies",
          "Setting up Multiple Objects as Rigid Bodies",
          "A Look at Rigid Body Forces",
          "Animating and Directing Physics",
          "Rigid Body Collision Shapes",
          "Using Animated Characters in Rigid Body Simulations",
          "A Look at Rigid Body Constraints",
          "Looking at Fracturing and Breaking Objects"
        ],
        "How To Destroy A Building": [
          "Section Intro - How To Destroy A Building",
          "Modeling a Destroyable Building part 1",
          "Modeling a Destroyable Building part 2",
          "Adding Materials to the Building",
          "Fracturing a Building",
          "Adding Windows to the Building",
          "Adding a Ground Floor And Roof",
          "Adding Rigid Body Constraints to the Building",
          "Timing And Directing a Building Destruction",
          "Baking the Simulation to Keyframes",
          "Adding Extra Particles to the Simulation",
          "Adding Physics to Windows",
          "Shuttering Window Glasses",
          "Adding Smoke and Dust",
          "Adding a Second Layer of Dust"
        ],
        "Making A Fighter Jet VFX Shot": [
          "Fighter Jets Intro",
          "Importing And Animating A Fighter Jet",
          "Creating an Ocean And Environment",
          "Creating a Fighter Jet Chase Animation",
          "Adding Detail to the Fighter Jet Chase Animation",
          "Adding Secondary Wave Displacement",
          "Adding Water Splashes",
          "Creating Materials for the Water Splashes"
        ],
        "Shooting a Car with a Missile": [
          "Section Intro - Shooting a Car with a Missile",
          "Preparing the Project",
          "Adding Physics and Constraints to the Car",
          "Making the Car Move Forward With Physics",
          "Adding An Explosion Force to the Simulation",
          "Breaking the Car Apart",
          "Looking At Collision Layers",
          "Adding deformation to the Car Body",
          "Adding Shattered Glass",
          "Adding a Missile Projectile",
          "Adding Smoke And Fire",
          "Creating A detailed Smoke And Fire Shader",
          "Course Finish"
        ],
        "Adding Cgi In Live Footage": [
          "Motion Tracking Footage",
          "Adding CGI to Live Footage And Compositing"
        ]
      },
      "requirements": [
        "We designed this course for intermediate to advanced Blender users. If you’re a newbie, you can still join in, but having some basic Blender skills will help. Trust us, you don’t want to start with explosions if you’ve never used Blender before!",
        "Visual effects can be a bit heavy on your computer. Make sure you have a reasonably powerful PC to keep up. Blender version 4 is recommended for the best experience."
      ],
      "description": "Ever wanted to blow stuff up without getting in trouble? Welcome to our new Blender Visual Effects course! Dive into the world of splashes, explosions, and ultimate destruction, all from the safety of your computer screen.\nWe’ll kick things off with the basics of breaking stuff up in Blender. You'll learn to create epic explosions and break things like a pro. By the end, you'll be demolishing buildings and making cars go boom. It’s all about making chaos look awesome.\nBut it's not just about explosions. We'll get into the nitty-gritty of Blender's rigid bodies and particle systems. You’ll understand how to make objects collide and interact with realistic physics. It’s like playing with digital Legos that can explode!\nImagine jets flying across water, leaving waves behind. Yeah, we’ll teach you that too. You'll be able to add splashes and other effects to make your scenes come alive. It's all about making your animations or film look as cool as possible.\nThis course is perfect if you’re tired of your scenes looking flat and boring. Adding visual effects and physics simulations can take your work to the next level. You’ll make scenes that feel dynamic and action-packed.\nWe designed this course for intermediate to advanced Blender users. If you’re a newbie, you can still join in, but having some basic Blender skills will help. Trust us, you don’t want to start with explosions if you’ve never used Blender before!\nOne thing to note: visual effects can be a bit heavy on your computer. Make sure you have a reasonably powerful PC to keep up. Blender version 4 is recommended for the best experience.\nBy the end of this course, you'll have a toolkit full of awesome effects. From breaking stuff to making it splash, explode, and more, you’ll be a visual effects wizard. So, if you're ready to add some serious boom to your scenes, let’s get started!\nJoin now and let’s blow some stuff up together!",
      "target_audience": [
        "Anyone wanting to take their Blender skills to the next level!",
        "Ideal if you want to add visual effects and physics simulations to your scenes for ultimate action.",
        "Perfect if you're making visual effects for films to simulate things like explosions or demolitions."
      ]
    },
    {
      "title": "Learn Displacement and Parallax Mapping for UE4",
      "url": "https://www.udemy.com/course/3dmotive-learn-displacement-and-parallax-mapping-for-ue4/",
      "bio": "Create and understand displacement techniques utilizing parallax and tessellation shaders in UE4",
      "objectives": [
        "Create a Parallax Material in UE4",
        "Understand and create Tessellation Materials in UE4",
        "Learn ways of creating Height Maps",
        "Understand the Pros and Cons of using Displacement"
      ],
      "course_content": {
        "Learn Displacement and Parallax Mapping for Unreal 4": [
          "Introduction",
          "What is Displacement?",
          "The Three Types of Displacement",
          "The Pros and Cons of using Displacement",
          "How to Create a Height Map",
          "How to Create a Bump Offset",
          "How to Create a Parallax Material",
          "Learn to Create a Tessellation Material and Course Wrapup",
          "Bonus Lecture: Further Learning with 3dmotive"
        ]
      },
      "requirements": [
        "UE4",
        "Adobe Photoshop (or similar image program)",
        "3ds Max or Maya",
        "A normal mapping software such as Knald or xNormal"
      ],
      "description": "In this course we'll be looking at the various ways of displacing textures within UE4. We will then discuss in detail the pros and cons of each method and the best ways they can be utilised for a video game environments.\nOnce we understand the various methods used we will begin the creation process starting with the Height maps. we'll cover the different methods of creating height maps and the different software available for creating them which will include; using a high to low poly workflow for height maps, creating height maps in photoshop and also generating height maps from images using software like Knald, Crazy Bump and xNormal.\nAfter creating our height maps, we'll cover in detail how to create the individual displacement materials in UE4 which will include; bump offset materials, parallax occlusion materials and tessellation. We'll also walk through each node used in detail and cover ways we can set up an instanced material so that we can edit our displacement material real time in-engine.\nBy the end of the course, you will have a better understanding of the nodes available in the UE4 material editor and be able to utilise them to create much more realistic materials for your video game environments.\n(Students - please look under Section 1 / Lecture 1 downloads for the source files associated with the lesson.)\nMore about the Instructor:\nAsh Thundercliffe has been in the games industry for 3 years now. He started his career teaching at the University of Derby on the Computer games Modeling and Animation Course. After doing this for several months, he moved on to small indie projects as an environment artist for the mobile and PC platform utilising Unity and UDK.\nAfter spending a year teaching and working on indie projects, Ash moved into AAA games working at Rockstar Games as a Technical Content Artist for almost 2 years. Ash has since moved back into freelance and continue to work as an environment artist.",
      "target_audience": [
        "3d and Texture Artists",
        "Tech Artists in the Game Industry"
      ]
    },
    {
      "title": "Unity Programming Fundamentals",
      "url": "https://www.udemy.com/course/unity-programming-fundamentals/",
      "bio": "A beginner's guide to programming in C# with Unity.",
      "objectives": [
        "Write custom C# code from scratch",
        "Enhance your Unity projects with custom components and assets written in C#",
        "Read C# scripts written by others and know what the code is doing"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Who is this course for?",
          "Course outline",
          "Setup: Recommended software versions",
          "Setup: Installing Unity",
          "Setup: Installing Visual Studio",
          "Assumptions & Writing Your First Script",
          "Addendum: Opening Scripts in Visual Studio",
          "Section 1 Review"
        ],
        "Programming Basics": [
          "Introduction",
          "The Four Basic Commands",
          "Command 1: Declaring Variables",
          "Data Types",
          "Command 2: Assigning Data to Variables",
          "Operators",
          "Command 3: Referring to Other Code",
          "Method Return Types",
          "Method Parameters",
          "Method Scope",
          "Command 4: Evaluating Conditions",
          "Conditional Operators",
          "Switches",
          "While Loops",
          "For Loops",
          "Data Collections: Arrays",
          "Data Collections: Lists",
          "Section 2 Review"
        ],
        "C# Specifics": [
          "Section Overview",
          "What is Object-Oriented Programming?",
          "C# Class Structure",
          "Class Declarations",
          "Abstraction: Classes vs. Instances",
          "Inheritance & Polymorphism",
          "Abstract, Virtual & Override",
          "Value Types vs. Reference Types",
          "Structs",
          "Best Practices: Naming Variables, Methods and Classes",
          "Best Practices: Writing Clean Code",
          "Section 3: Review"
        ],
        "Unity-Specific Objects": [
          "Section Overview",
          "API Terminology",
          "Vector2, Vector3 & Vector4",
          "Quaternion",
          "Color",
          "MonoBehaviour",
          "GameObject",
          "Transform",
          "Section 4 Review"
        ],
        "How Scripts Communicate": [
          "Section Overview",
          "Referencing via the Inspector",
          "The GetComponent Method",
          "Using Parent-Child Transform Relationships",
          "Physics, Collisions",
          "Physics, Raycasting",
          "Find Methods",
          "Section 5 Review"
        ],
        "Going from Script to Scene": [
          "Section Overview",
          "From Script to Component",
          "Creating GameObjects in Code",
          "Data Classes",
          "The Serializable Attribute",
          "Scriptable Objects",
          "Section 6 Review"
        ]
      },
      "requirements": [
        "Basic knowledge of Unity and its user interface",
        "A desire to learn how to code in C#"
      ],
      "description": "Do you:\nUse Unity but are uncomfortable with C# scripting?\nHave a game idea want to learn to code it effectively?\nWork with programmers and want to understand the scripts they write?\nWant to learn programming in a fun and game-oriented environment?\nThis course is for you!\nIn Unity Programming Fundamentals, instructor Benjamin Marshalkowski (from Board To Bits YouTube tutorials) takes you through the basics of programming, C# as a language and writing custom scripts to work within the Unity Engine. You'll learn about:\nCourse Introduction\nThis section of the course outlines the rest of the course material and introduces you to the tools with which you'll be working -- including how to get everything installed and running so you can write your first custom C# script.\nProgramming Basics\nBecome familiar with the foundational concepts of programming, including working with data in variables, calling methods, evaluating conditional statements and working with collections of data.\nC# Specifics\nDive into object-oriented programming (the basis of C#), including how things like inheritance and polymorphism make classes more versatile. We'll also cover how to declare and define custom classes, and best practices when writing code in C#\nUnity-Specific Objects\nThis section is a primer on the most commonly used objects that are unique to Unity's environment. It's an essential stepping stone to working with more complex features and classes in Unity\nHow Scripts Communicate\nA program -- particularly one built in Unity -- is a network of various scripts communicating with each other to create an engaging system. Here, we'll cover all the ways that scripts can interact, using explicit commands, manual assignments or relying on events in Unity to connect essential components\nGoing From Script to Scene\nBring your scripts to life as we go in detail on how the classes we write interact with and inform the GameObjects they attach to in the game Scene. We'll also cover non-component elements like data classes and ScriptableObjects to expand our scripting toolkits.\nCourse features:\nLearn at your own pace: Every video is under 15 minutes long, and most are less than 10 minutes, so you can make progress at any time\nIllustrated concepts: In addition to hands-on exercises in most sections, lectures include visual aids to help describe advanced concepts\nAdaptable content: These core fundamentals will help you across all programming, not just a specific feature or project",
      "target_audience": [
        "Aspiring game designers with limited or no programming experience",
        "Artists, designers, level designers or producers who want to build their programming skills",
        "Developers who want to take skills from C# tutorials and adapt them to their own projects"
      ]
    },
    {
      "title": "Ultimate Guide to Debugging in Unity",
      "url": "https://www.udemy.com/course/ultimate-guide-to-debugging-in-unity/",
      "bio": "Learn Industry Standard Techniques to Find and Fix Errors in Unity",
      "objectives": [
        "Be able to identify and fix common Unity errors quickly and effectively",
        "Approach tough errors with a step-by-step strategy leading to the solution",
        "Understand the debugging tools that Unity provides and use them to your advantage",
        "Have hands-on experience fixing errors mimicking real-world scenarios",
        "Be able to write C# code quicker and with less bugs"
      ],
      "course_content": {},
      "requirements": [
        "Unity (Free)",
        "Some Unity C# knowledge"
      ],
      "description": "Do you get frustrated when you run into errors in your code? Do you spend countless hours staring at your computer only to find that you made a small oversight that broke your code? This course will teach you tips, tricks, and techniques that will help you to approach debugging in a strategic manner. No more guess and check or random deletion of buggy parts of code. You will be able to precisely narrow down the cause of an issue and fix it. This course will teach you how to save time by speeding up your debugging workflow using step-by-step techniques.\nThis course has two major parts. In the first part you will learn the basics of debugging and understand the tools that Unity provides you to track down and fix errors. In the second part of the course, you will learn about common errors and how to fix them. We will go through step-by-step looking at each error type, possible causes, and debugging checklist to narrow down the issue. Then I will go through hands-on examples in Unity showing an application of the techniques taught. It’s not about memorizing how to solve each error, it is about understanding the mentality of debugging and applying what you know to each situation.\nAre you ready to become a master of debugging and speed up your development time in Unity? This Ultimate Guide to Debugging in Unity will get you there.",
      "target_audience": [
        "Any Unity developer looking to speed up their development time",
        "Anyone who gets frustrated at errors in their code",
        "Developers who want to learn proven, step-by-step techniques to identify and fix errors",
        "Unity programmers who want to become proficient using the debugging tools Unity provides"
      ]
    },
    {
      "title": "Bust Sculpting in ZBrush",
      "url": "https://www.udemy.com/course/3dmotive-bust-sculpting-in-zbrush/",
      "bio": "This course is designed to de-mystify sculpting a realistic portrait in ZBrush.",
      "objectives": [
        "Students will learn to create areas of focus when working to produce a sculpted mesh.",
        "Students will learn how to easily reshape/reproportion a mesh to more accurately match photo references.",
        "Students will also learn how to use simpler methods and workflows to produce good end results by working smarter with less tools."
      ],
      "course_content": {
        "Introduction to Basic Proportions": [
          "Download Course Files Here!",
          "Intro",
          "Polygroups and Ref Images",
          "Reshaping Foundational Mesh",
          "Using Image Plane for Reshaping",
          "Facial Proportions",
          "Base Sculpting to Assist Reshaping",
          "Using Clay Buildup Brush for Better Proportions"
        ],
        "Blocking in the Main Face Details": [
          "Intro",
          "Reviewing Images and Sculpting Eye Areas",
          "Sculpting Eyes, Forehead and Ears",
          "Mouth, Chin and Cheeks Sculpting",
          "Sculpting Chin and Neck",
          "Using Projection on Mesh to Tweak"
        ],
        "Refining the Sculpt and Polish": [
          "Intro",
          "Adding Details to the Upper Lip",
          "Adding Details to the Lower Lip and Nose",
          "Adding Wrinkles Around the Eyes and Face",
          "Adding Wrinkles to the Ears",
          "Refining Wrinkles Around the Eyes",
          "Adding Skin Aberrations",
          "Adding Pores",
          "Creating Asymmetry and Tweaking the Mesh",
          "Creating Whiskers, Eyebrows and Hair with Fibermesh",
          "Finishing Touches",
          "Bonus Lecture: Further Learning with 3dmotive"
        ]
      },
      "requirements": [
        "A good basic working knowledge of ZBrush is needed as this tutorial doesn't teach beginner sculpting/navigation within ZBrush."
      ],
      "description": "Many 3D artists, even character artists, are often intimidated by the totality of what is required to create a believable character, either reaslitic or stylistic. Even more steer clear of trying to create believable human faces. This course is designed to show how easily one can produce an acceptable model by breaking down the overall view into more 'bite sized' areas of focus to allow one to concentrate only on that singular are before moving onto another area of focus. As the student progresses through this tutorial, they'll learn more confidence in their skills by using fewer tools and some shortcuts to achieve an end result that will help inspire them to continue to tackle more opportunities by looking all the parts that make up the big picture first rather than trying to see the big picture and figure out how to proceed next. By using fewer brushes and some alphas, one can achieve quite a lot in ZBrush.\nMore about the instructor:\nHaving 25 years of experience in the video game development/entertainment arenas, I'm well versed in a variety of programs and production pipelines and strive to work as cleanly and efficiently as possible. Having done pretty much everything, I enjoy getting to share my knowledge and experience in the hopes that I can help students gain a better understanding and appreciation of what 3D computer art (in all its varying forms) has to offer.",
      "target_audience": [
        "This course is designed for anyone who's ever been afraid to tackle head/face sculpting."
      ]
    },
    {
      "title": "Unreal Engine 5 :Create game in C++ and blueprint (Beginner)",
      "url": "https://www.udemy.com/course/unreal-engine-5-create-game-in-c-and-blueprint-beginner/",
      "bio": "Unreal engine 5 C++ and blueprint course to learn game Develop using both tools C++ and blueprint",
      "objectives": [
        "UE5",
        "C++ for Unreal Engine",
        "Blueprint for Unreal Engine",
        "Animations",
        "Logics",
        "Actors"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "01.Setup Unreal engine (^)": [
          "01.Install unreal engine",
          "02.Instal microsoft visual studio",
          "discord link"
        ],
        "02.Create Project (^)": [
          "03.Create project for blueprint",
          "04.Create C++ Project",
          "05.Import Files"
        ],
        "03. ( BP ) Character class in blueprint (^)": [
          "06.Create character class",
          "07.Create gamemode",
          "08.Enhanced input",
          "09.Move Enhanced input",
          "10.Going right or left check",
          "11.Going forward and backward check",
          "12.Move character",
          "13.Control rotation and forward vector and right vector",
          "14.Add controller yaw input",
          "15.Add controller pitch input",
          "16.Make movement better",
          "17.Jump"
        ],
        "04.Character class in C++ (^^^)": [
          "18.Blueprint recap",
          "19.Create character class",
          "20.Build C++ Codes",
          "21.Comments in C++",
          "22.Compare C++ and blueprint",
          "23.Create spring arm variable",
          "24.Initiliza Spring arm component",
          "25.Visulize Our C++ code",
          "26.Add camera in C++",
          "27.Project settings",
          "28.Attach to component",
          "29.Change properties of component in blueprint",
          "30.Change spring arm setting in C++",
          "31.Change default settings in C++",
          "32.Change character movement settings in C++"
        ],
        "05.Enhanced input (^^^)": [
          "33.Create input mapping context and input actions",
          "34.Get player controller",
          "35.Get subsystem",
          "36.Add maping context",
          "37.UPROPERTY",
          "38.UE_Log",
          "39.Show values with UE_LOG",
          "40.Create function",
          "41.Pass input action to C++",
          "42.Bind input action to function",
          "43.Get input values",
          "44.FVector",
          "45.Get forward vector",
          "46.Customize forward vector",
          "47.Right vector",
          "48.Look action",
          "49.Look around",
          "50.Jump action"
        ],
        "06. ( BP ) Animations in blueprint (^)": [
          "51.Import animations",
          "52.Idle state",
          "53.Run state",
          "54.BlendSpaces",
          "55.Lean amount calculation",
          "56.Finterp to",
          "57.Air locomotion state machin",
          "58.Jump state",
          "59.Jump blend space",
          "60.Fall state",
          "61.Land states",
          "62.Land rules"
        ],
        "07.Animations": [
          "63.Anim instance",
          "64.Ground locomotion",
          "65.Native update animation",
          "66.Native initialize animation",
          "67.Get character",
          "68.Character movement component",
          "69.Get velocity",
          "70.Vector length in C++",
          "71.IDLE Run rule",
          "72.Lean animation explained",
          "73.Lean blend space",
          "74.Get character rotation",
          "75.Calculate lean amount",
          "76.FInterpto",
          "77.Air locomotion",
          "78.Jump state",
          "79.Jump blend space",
          "80.Fall state",
          "81.Land states",
          "82.Land rules"
        ],
        "08. ( BP ) Moving platform": [
          "83.Create blueprint",
          "84.Spline points",
          "85.Control points",
          "86.Duration"
        ],
        "09.Moving platform": [
          "87.Create moving platform class",
          "88.static mesh component",
          "89.Uscene Component",
          "90.Spline and interp component",
          "91.Get spline point locations",
          "92.Interp to movement setup",
          "93.Duration"
        ]
      },
      "requirements": [
        "Basic Knowledge of C++ (Important)"
      ],
      "description": "if you want to learn just blueprint this course is for you as beginner as possible\nif you have basic knowledge of C++ and you want to learn Unreal engine 5 again this course is for you\nif you want to be a good game developer both in C++ and blueprint again you can use this course\nBest way to learn unreal engine 5 is to first start with blueprint and when you understand it you can learn C++\nthat's why I'm teaching both Blueprint and C++ in this course\nfirst we see how to implement one thing in blueprint and then we implement same thing in C++ as well\nThe goal is to combine both blueprint and C++ so we can create optimized games\nas you know most AAA game company are using 10% blueprint in unreal engine and 90% C++\n\n\nHow character works in unreal engine\nHow animations works\nwhat is game mode\nEnhanced inputs\nWhat is component and how to use them\nMoving platforms\nElevator\nStomper\nFan\nWidget design UI\nItem\nthis course will be updated and added more obstacles and platform so we can develop it more together\nwe will be like a group working on a game together",
      "target_audience": [
        "Everyone with basic knowledge of C++"
      ]
    },
    {
      "title": "Unity: Building 2D Games From Scratch",
      "url": "https://www.udemy.com/course/unity-building-2d-games-from-scratch/",
      "bio": "Learn To Code In C# By Making Unity 2D Games",
      "objectives": [
        "Learn to code in C#",
        "Learn to create games for PC, Mobile or Console",
        "Create your own 2D games",
        "Create enemies with basic AI (to follow our player)",
        "Get experience using Unity 2017"
      ],
      "course_content": {
        "Introduction": [
          "Introduction To Course",
          "Downloading Unity And Checking Out Its Interface",
          "Ninja Jump, Your First Game"
        ],
        "C#": [
          "Variables",
          "Operations With Variables",
          "Functions",
          "Conditional Statmens",
          "Loops",
          "Arrays",
          "Functions And Arrays",
          "Classes And Objects",
          "Constructions",
          "More About Functions",
          "Data Encapsulation",
          "Inheritance",
          "Monobehaviour",
          "Static Functions",
          "Delayed Function",
          "Delegates",
          "Enums",
          "Arrays and Lists"
        ],
        "Pong Game": [
          "Pong Game Preview",
          "Importing Assets",
          "Player Movement",
          "Enemy Movement",
          "Creating Ball",
          "Enemy AI Movement",
          "Adding UI Elements",
          "Score Controller",
          "Main Menu",
          "Game Controller"
        ],
        "Race": [
          "Race Preview",
          "Importing Assets",
          "Player Movement",
          "Camera Follow",
          "infinity Background",
          "Spawner",
          "Enemy",
          "Gameplay Controller"
        ],
        "Space Shooter": [
          "Space Shooter Preview",
          "Importing Assets",
          "Player Movement",
          "Player Shooting",
          "Camera Follow",
          "Infinitive Background",
          "Adding Enemies",
          "Scripting Enemies",
          "Spawner",
          "Game Controller",
          "Main Menu",
          "Main Menu Animations",
          "Going From Scene To Scene",
          "Music Controller"
        ],
        "Color Switch": [
          "Color Switch Preview",
          "Importing Assets",
          "Player Jump",
          "Obstacle Cirlce",
          "Camera Follow",
          "Obstacle Stripes",
          "Game Controller",
          "Spawner",
          "Collector",
          "Main Menu",
          "Death Menu",
          "Navigating Between Scenes",
          "UI Gameplay",
          "Scripting UI Gameplay",
          "Score Controller",
          "Music Controller",
          "Sound Effects",
          "Scene Fader"
        ]
      },
      "requirements": [
        "Mac or PC capable of running Unity3D"
      ],
      "description": "Ever wanted to create 2D games but didn't know where to start? Well you've come to the right place.\nYou will learn to create 5 2D games that will take you from beginner to creating amazing games in Unity.\n\nAfter enrolling in this course you will start learning c# step by step from scratch and than start using c# programming language in practice so we can create these awesome games. Even if you did not have opened unity once or written any lines of code this course will be perfect for you, i covered everything that is needed for beginners and even experienced programmers/game developers. Going trough course you will get better and better, i have put it like that so that first game is the simplest and every other game is more complicated, because we will always add something knew to the game.\nI have into programming and game development for few years and i took that everything i wanted to know as a beginner i put have put it right here, so you guys can take advantage of that as beginners, but still there are advanced game development techniques if you already know how to make games.\nif ever get any issue or if you are interested in something more than explained, just ask a question i will response as fast as possible.\nThings you will learn in this course:\nHow to use Unity 2017\nImport Assets and Organize Project\nFrom Basic to Advance C# Programming\nSound FX And Music\nBasic AI(Artificial Intelligence)\nCreating Cool Menus And Adding Animations To It\nAnd More!\n0 Chance For Risking, How??\nWell, If You are not satisfied with course there is always option for refund within 30 days of enrolling and of course Its full refund of your money.\n\nSo what are you waiting for? Enroll now and i will see you inside.",
      "target_audience": [
        "Beginners who are interested in programming or game development",
        "Anyone who wants to learn Game Development",
        "Want to create their own games in Unity",
        "Experienced Game Developers"
      ]
    },
    {
      "title": "Making Rocket League in Unreal Engine 5 - Pocket League",
      "url": "https://www.udemy.com/course/remaking-rocket-league-in-unreal-engine-5-pocket-league/",
      "bio": "Learn how to achieve Rocket League like mechanics and create the nearest Rocket League look a like game in a short time.",
      "objectives": [
        "Remake Rocket League in a short period of time.",
        "Handle physics part of a game.",
        "Create custom mechanics for cars.",
        "Learn how to boost and dash just the way like Rocket League.",
        "Go through Niagra system and create beautiful particle systems.",
        "Get used to UE5 and learn how to create a full game in Unreal Engine 5."
      ],
      "course_content": {
        "Introduction": [
          "Introduction & Welcome",
          "1- Project Creation"
        ],
        "Car Mechanics": [
          "2- Infinite Jumps & On Ground",
          "3- Air Control",
          "4- Air Roll",
          "5- Boosting & Speed",
          "6- Ball",
          "7- Forward Release",
          "8- Double Jump",
          "9- Head On Ground",
          "10- Dashing",
          "11- Dashing Enhancement",
          "12- Frames Per Second",
          "13- Dash Limit In Air",
          "14- HOOODL",
          "15- Adding Cars into the Game",
          "16- Octane Wheels Rotation",
          "17- Octane Materials"
        ],
        "Camera Handling": [
          "18- Camera Setup (Part-1)",
          "19- Camera Setup (Part-2)",
          "20- Camera Switching (Part-1)",
          "21- Camera Switching (Part-2)",
          "22- Smooth Camera Switching Transitions"
        ],
        "Visuals & Particle Systems": [
          "23- Ball Indicator Decals",
          "24- Ball Line",
          "25- Niagara System - Ball Trails",
          "26- Ball Trails Based on Speed",
          "27- Boost Particle System",
          "28- Boost Variations",
          "29- Particles for Jump dash"
        ],
        "Sounds": [
          "30- Jump Sounds",
          "31- Dashing Sounds",
          "32- Boost Sounds",
          "33- Landing Sound"
        ],
        "UI - User Interface": [
          "34- Rocket League UI",
          "35- ScoreBoard",
          "36- Minutes System",
          "37- Time System and UI",
          "38- BallCam UI",
          "39- Progress Bar UI (Part 1)",
          "40- Progress Bar UI (Part 2)",
          "41- Progress Bar UI (Part 3)"
        ],
        "Stabilizing our car and fps control": [
          "42 - Physics Introduction",
          "43- FrameRate Solution",
          "44- Rotation Problems",
          "45- Wheel Physics"
        ]
      },
      "requirements": [
        "A basic knowledge of unreal engine is required, if you are new to UE you can take my other course (Unreal Engine 2021 Absolute Beginner Masterclass) then continue with this one.",
        "Basic unreal engine blueprint information is required."
      ],
      "description": "Remake Rocket League on your own in UE5....\n\nContinue your game developing journey with Unreal Engine 5.\n\nIn this course we are going to cover everything you need to know about Rocket League and it's mechanics.\nWe will create a simple and fun version of Rocket League game together that will help you understand the RL's mechanics better, have more knowledge about UE5, be a better game developer, and achieve your first UE5 game.\n\nUnreal Engine 5 is the best FREE game engine that is available right now, which can be used to Create Triple-A Quality games with amazing graphics. This is the game engine that is created by Epic Games and they have created the most popular games with it...… FORTNITE & ROCKET LEAGUE\n\n\nIn this course we will cover :\n- Car Jumps\n- Boosting\n- Air roll\n- Dashes\n- Car double jumps\n- Niagara particle systems\n- Goal system\n- Physics in Unreal Engine 5\n- Handling frames per second\n- Faking Physics\n… Many many more things\n\n\nThis will be a series of courses that will teach you game development from an absolute beginner to a Master.. the levels are\n\n-Absolute Beginner\n-Amateur\n-Intermediate\n-Semi-Professional\n-Professional\n-Master\nThis course is for the Amateur and we will continue with other levels after finishing this course.\n\nI will promise to explain every single step that we will take in order to make you get the most out of this course.\n\nEnroll NOW and lets learn Unreal Engine 5 together.",
      "target_audience": [
        "Game developers who have at least a basic knowledge of Unreal Engine, if you are new to UE you can take my other course (Unreal Engine 2021 Absolute Beginner Masterclass) then continue with this one.",
        "Rocket League players who love playing the game and want to know more about it."
      ]
    },
    {
      "title": "Game Development 2020 : Build an Archery Game with Unity",
      "url": "https://www.udemy.com/course/game-development-2020-build-an-archery-game-with-unity/",
      "bio": "Learn Game Development and C# Programming in no time by building a fun Archery game and publishing it to the world",
      "objectives": [
        "Ceate a full game and share it with the world",
        "Learn and Master C# programming by following this interactive project-based course",
        "Implement sound effects, background music, and particle effects",
        "Know how games are made and experience the process of making a full commercial quality game",
        "Detect collisions, receive user input, and create player movements"
      ],
      "course_content": {
        "Introduction": [
          "Installing Unity"
        ],
        "Setting Up The Game": [
          "Unity UI",
          "Configuring the Project",
          "Importing the Assets and Setting Up the Environment",
          "Setting The Camera",
          "Adding Post Processing Effects",
          "Finishing Up"
        ],
        "Let's get coding": [
          "Introduction to C# Scripting In Unity",
          "Scripting the Bow Movement",
          "Finishing the Bow Movement Script",
          "Setting up the Bow Animation and Shoot Arrow Script"
        ],
        "Working with Targets": [
          "Spawning the Targets",
          "Target Collision",
          "Scripting the Target Movement"
        ],
        "User Interface and Putting the game together": [
          "User Interface features In Unity",
          "Game Manager | Putting the Game Together",
          "Final Touch Up"
        ],
        "Polishing the game with Visual and Sound Effects": [
          "Setting Up The Visual Effects",
          "Music and Sfx",
          "Audio Mixer - The basics of Audio Mixing"
        ]
      },
      "requirements": [
        "You will need a Windows PC or a Mac and a free copy of Unity 2019 or above to follow along."
      ],
      "description": "Making a Video game can be a fun but also very challenging Task. It is all about getting familiar with the process.\nIn this course, we try to breakdown the game development process by building a fun archery game that can be played on both Windows and Mac Os. We will be using the Unity game engine and work with its various subsystems.\nIn this Unity course, you will:\nMaster C# concepts such as variables and if statements\nDetect collisions, receive user input, and create player movements\nCollect and destroy game objects\nBuild the Animation Systems\nControl objects influenced by the physics system\nImplement sound effects, background music, and particle effects\nNavigate the Unity Engine and discover unique features such as the Asset Store\nAnd more!\nIn this course we will first start with a blank project, then set up the environment for our game and later we'll dive into the scripting. We will walk step by step through every line of code we write. Though it is essential to be familiar with scripting to get most out of this course, there is still a lot to learn about programming games as we try our best to cover and explain the absolute basics.\nFurther, we will also learn how to use animated objects with Unity's physics system and learn concepts like Quaternions to deal with rotations. We will also add collectibles in the game and an Enemy bird AI.\nThis course will help you build commercial quality games with polished assets and cinematic effects. Get access to the unique artwork provided by this Unity course and add sophisticated features to your games that make you look like you’ve been programming for years.\nBy the end, we will have a fun game that can be shared with others.\nWhy Learn Game Development with Unity?\nThe gaming industry is a $100 billion industry worldwide. By 2020, that number is expected to near $120 billion. With Unity being the most widely used engine to develop games across multiple platforms, there has never been a better time to get into the field. As you will learn, the types of games you can create with Unity and C# are limitless. Game development makes a great hobby, allowing you to learn a new skill and play your game with family and friends. It is also an exciting and rewarding career, where plenty of successful developers, have learned the fundamentals of game development through courses like this, and not in the traditional classroom setting. Every great game starts somewhere, so why not make it yours? While people often find coding or making games intimidating, this Unity course utilizes a unique teaching method that will allow you to gain a thorough understanding of concepts while you develop your games. Thanks to the Unity community, you’ll be able to connect with other developers, work together on new projects, and make some incredible games!\nEveryone using the Unity engine will benefit since we comprehensively cover how to correctly use many of it's more advanced systems e.g., navigation and pathfinding, animation state machines, physics, and so on.\nJoin us on this adventure today!  We’ll see you inside the course.",
      "target_audience": [
        "People interested in developing commercial quality 2D and 3D games either professionally or as a hobby.",
        "someone who is interested in game development with Unity and C# and is looking for an interactive, project-based course.",
        "Anyone using the Unity engine will benefit since we comprehensively cover how to correctly use many of its more advanced systems."
      ]
    },
    {
      "title": "Unreal Engine 5: Dungeon Crawler(Multiplayer)",
      "url": "https://www.udemy.com/course/unreal-engine-5-dungeon-crawlermultiplayer/",
      "bio": "An Unreal Engine Blueprint Course(Multiplayer)",
      "objectives": [
        "Use Unreal Blueprints visual scripting to create every aspect of your very own Third Person Game.",
        "Make your own complete game in Unreal Engine.",
        "Create your own playable levels, complete with enemies, pickups and interactables.",
        "How to package the project for friends and family to play.",
        "Create a game that can be played online using Steam"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Project Setup": [
          "Initial Project Setup",
          "Creating Base Classes",
          "Setting Up Inputs",
          "Mapping Inputs To Player Controller",
          "Creating The Base Character"
        ],
        "The first Character(Swordsman)": [
          "Create The Swordsman",
          "Add Animations",
          "Setup Character Movement",
          "Setup Base Attack Events",
          "Main Attack Part 1",
          "Main Attack Part 2",
          "Main Attack Part 3",
          "Attack 2 - Blink - Part 1",
          "Attack 2 - Blink - Part 2",
          "Attack 2 - Blink - Part 3",
          "Attack 3 - Block - Part 1",
          "Attack 3 - Block - Part 2",
          "Attack 3 - Block - Part 3",
          "Attack 4 - Smash"
        ],
        "First Enemy": [
          "Setting Up The Enemy Base",
          "Giving The Enemy \"Sight\"",
          "Making The Enemy Move",
          "Chasing The Player",
          "Enemy Attack Part 1",
          "Enemy Attack Part 2",
          "Enemy Death"
        ],
        "Player HUD and Death": [
          "Create The HUD Widget",
          "Updating The HUD On Spawn",
          "Update Mana Used",
          "Player Death",
          "Respawn Player"
        ],
        "Main Menu Setup": [
          "Main Menu Level Setup",
          "Main Menu HUD",
          "Create The Session",
          "Session Widgets",
          "Join Game"
        ],
        "The Second Character(Healer)": [
          "Healer Character Base",
          "Attack 1",
          "Heal Part 1",
          "Heal Part 2",
          "Heal Part 3",
          "Attack 3 - Concentrate",
          "Attack 4 - Projectile Part 1",
          "Attack 4 - Projectile Part 2",
          "Attack 4 - Projectile Part 3",
          "Attack 4 - Projectile Part 4",
          "Attack 4 - Projectile Part 5",
          "Cleanup Animations"
        ],
        "Character Select and Bug Fix and More": [
          "Spawn Bug Fix",
          "Character Select Part 1",
          "Character Select Part 2",
          "Mana Restore"
        ],
        "Second Enemy and Bug Fixes": [
          "Enemy Blueprint and Bug Fixes",
          "Fire Projectile",
          "Kill Enemy"
        ],
        "Rotate Enemy and AI Spawners": [
          "Enemy Rotate Towards Player",
          "AI Spawner",
          "Triggerable AI Spawner"
        ]
      },
      "requirements": [
        "This course is completely in Unreal Blueprints. No programming experience is required, but could be helpful."
      ],
      "description": "Greetings and welcome to the \"Unreal Engine 5: Dungeon Crawler(Multiplayer)\" course!\nThroughout this program, we'll embark on an exhilarating journey crafting a third-person multiplayer game from the ground up, leveraging the formidable capabilities of Unreal Engine 5 and the integration of Steam for multiplayer functionality.\nIn this course, we'll explore the intricacies of game development, focusing on the creation of a thrilling dungeon crawler experience. Utilizing Unreal Engine's Blueprint system, we'll empower you to bring your vision to life with ease and efficiency. Whether you're a seasoned developer or just starting out, visual scripting offers an intuitive pathway to realizing your game mechanics without the complexities of traditional coding.\nOur creative arsenal will be fortified with a wealth of free assets, generously provided by Epic Games, skilled artists, and various other sources. From breathtaking visual effects to immersive soundscapes, we'll harness these resources to elevate the ambiance and immersion of our game world.\nAs we progress through the course, you'll gain invaluable insights into multiplayer game design principles, learning to architect robust networking systems and implement engaging gameplay mechanics tailored for cooperative or competitive experiences.\nBy the end of this journey, you'll have crafted the prototype for your very own third-person multiplayer adventure, replete with intricately designed levels, dynamic combat encounters, and a captivating progression system.\nSo, without further delay, let's dive into the dynamic realm of game development and forge unforgettable experiences together!\nWishing you the best of luck and boundless creativity on your game development endeavors. Enjoy the journey!",
      "target_audience": [
        "Beginner/Intermediate Unreal Engine 5 Blueprint Scripting"
      ]
    },
    {
      "title": "Unreal Engine 4: Top-Down Shooter Using C++ & Blueprint",
      "url": "https://www.udemy.com/course/jeffers-unreal-topdownshooter/",
      "bio": "A Top Down Game Where You Shoot Enemies That Multiply",
      "objectives": [
        "Communication between C++, the Unreal Editor and Blueprint",
        "Declaring and defining functions",
        "Setting function parameters and specifiers",
        "Class referencing and communication",
        "Collision detection with overlap events in C++",
        "Spawn events in C++",
        "Dynamic material parameter setting in C++",
        "Input events in C++",
        "UI Widget communication in C++",
        "Arrays and for loops",
        "Some vector math operations"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Game and class preliminary setup": [
          "Installing visual studio community",
          "Creating a new Unreal Engine project",
          "Creating the game level",
          "Creating the game's classes",
          "Class preparation Blueprint side"
        ],
        "Game start UI": [
          "Adding the game start UI to the screen",
          "Input event to remove the game start UI"
        ],
        "Player class components setup": [
          "Setting up the player class header file",
          "Setting up the player class source file part 1",
          "Setting up the player class source file part 2"
        ],
        "Player movement setup": [
          "Setting up player movement part 1",
          "Setting up player movement part 2"
        ],
        "Player shooting setup": [
          "Projectile class setup part 1",
          "Projectile class setup part 2",
          "Setting up the aiming mechanic",
          "Spawning the projectile",
          "Linking actor scale and colour to shooting events"
        ],
        "Enemy class components setup": [
          "Setting up the enemy class components"
        ],
        "Enemy class behaviour": [
          "Enemy roaming part 1",
          "Enemy roaming part 2",
          "Enemy growth",
          "Enemy damage to player part 1",
          "Enemy damage to player part 2",
          "Player damage to enemy and enemy multiplication part 1",
          "Player damage to enemy and enemy multiplication part 2",
          "Player damage to enemy and enemy multiplication part 3",
          "Player damage to enemy and enemy multiplication part 4"
        ],
        "Pickup class components setup": [
          "Setting up the pickup components part 1",
          "Setting up the pickup components part 2"
        ],
        "Pickup class behaviour": [
          "Spawning the pickup",
          "Pickup player size restoration"
        ]
      },
      "requirements": [
        "Unreal Engine 4 version 4.25.1 installed and ready to go",
        "Visual studio 2017 community installed (if not we will go over the installation for it)"
      ],
      "description": "In this course, you'll be creating an arcade-style top-down shooter game in Unreal Engine 4. The focus is to walk through the basics of major game mechanic implementation using mainly code with minimal contact with Blueprint. By the end of this course, you'll be confident enough with C++ to venture out and see what else is possible with it. Let's bring down that barrier to entry together!",
      "target_audience": [
        "Those who have an interest in computer games creation",
        "Unreal Engine 4 users looking to venture out from Blueprint into the world of C++",
        "Unreal Engine 4 users who want to discover a way of creating a simple game with a core game loop."
      ]
    },
    {
      "title": "How to CODE in Unity",
      "url": "https://www.udemy.com/course/how-to-code-in-unity/",
      "bio": "Master the basics of C# scripting in Unity",
      "objectives": [
        "Start with the basics of scripting in Unity, by learning how to use variables, functions, and loops",
        "Move on to advanced techniques, such as events, inheritance, interfaces, and scriptable objects",
        "You'll learn the fundamentals of C# scripting, so that you can confidently write your own code",
        "As well as best-practice scripting approaches, such as the SOLID principles, and how to actually use them",
        "Become a game developer by mastering the basics of C# scripting in Unity"
      ],
      "course_content": {
        "Welcome": [
          "What you'll learn on this course"
        ],
        "Introduction to scripting in Unity": [
          "Introduction to Scripting",
          "Demonstration"
        ],
        "Anatomy of a Script": [
          "Anatomy of a Script",
          "Demonstration",
          "Code Examples"
        ],
        "Variables": [
          "Variables",
          "Bonus Lesson (List Capacity vs Count)",
          "Lesson Summary"
        ],
        "Functions": [
          "Functions",
          "Demonstration",
          "Lesson Summary"
        ],
        "Operators": [
          "Operators",
          "Lesson Summary"
        ],
        "Conditional Statements": [
          "Conditional Statements",
          "Demonstration",
          "Code Examples"
        ],
        "Loops & Iterators": [
          "Loops & Iterators",
          "Demonstration",
          "Code Examples"
        ],
        "Coroutines": [
          "Coroutines",
          "Coroutines Demonstration",
          "Code Examples"
        ],
        "Timing": [
          "Timing",
          "Demonstration"
        ]
      },
      "requirements": [
        "Made for beginners",
        "Works with all versions of Unity (including Unity 6)"
      ],
      "description": "Escape tutorial hell\nIf you've already tried to learn how to make your own games, but you still feel like you don't have the confidence to start a project of your own, then you might be stuck in tutorial hell, a state where you keep taking on new information, but without ever making any real progress.\nIf this sounds like you, then I want to help you escape.\nLearn how to write scripts of your own\nHow to Code in Unity is a different kind of online course.\nIf you've read any of my articles, or watched my YouTube videos, then you probably already know that I love to do deep-dives into the basics of Unity game development, often tackling the questions that everyone has, but that no one else bothers to answer properly.\nThis is because learning a skill, especially how to write code, isn't as simple as watching someone write a script, or copying an answer from a tutorial.\nWhile it can be useful to see how things are made, if you don't understand when or why you'd do it in that way, when the time comes to write a script of your own, you're probably not going to know where to start.\nSound familiar?\nBecome a developer by mastering the basics\nIn this course, you'll learn the fundamental techniques of writing code that Unity developers use every day to get their projects finished, and you'll learn them in a way that actually sticks, with in-depth explanations, live demonstrations, and one to one support from me whenever you need it.\nYou'll master the core skills that all scripts, methods, and techniques in Unity are built on, and, by the end of this course, you won't need to copy other people's code, instead you'll be able to write your own C# scripts in Unity, with confidence.\nWho this course is for\nThis course is for anyone who's serious about learning to write code in Unity.\nWhether you're a complete beginner who wants to make their first game, or an experienced developer who wants to master the basics, this course can help you do exactly that.\nIf you're sick of learning how to make example projects, and you want to give yourself the skills to build something of your own, How to CODE in Unity will help you to do exactly that.",
      "target_audience": [
        "New Unity developers who are serious about learning how to code in Unity"
      ]
    },
    {
      "title": "Create a 2048 Android Game Clone from Scratch",
      "url": "https://www.udemy.com/course/2048androidgame/",
      "bio": "Build and monetise your 2048 game for Android",
      "objectives": [
        "To Build a 2048 Game Clone from Scratch",
        "To use pure Android Java for Game Development",
        "To Monetize the game using Google AdMob"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Important message about Udemy reviews",
          "Engage on social media",
          "Android Studio",
          "Install Android Studio on a Mac",
          "Install Android Studio on a Windows PC",
          "Setting up the Project"
        ],
        "Building the Game": [
          "Building the Game Engine",
          "Creating the First Sprite",
          "Showing the First Tile",
          "User Interaction and Swipes",
          "Implementing the Game Algorithm",
          "Implementing the Game Algorithm Continued",
          "Creating new Tiles and Playing the Game",
          "Game Over State",
          "Implementing Scoring",
          "Adding Bonuses",
          "Restarting the Game"
        ],
        "Wrapping up": [
          "Checking Compatibility",
          "Monetisation and Google Ads",
          "Personalisation and Next Steps",
          "Further resources",
          "Thank you"
        ]
      },
      "requirements": [
        "Android basics",
        "Android Studio installed"
      ],
      "description": "At the end of this course you will have a working 2048 clone game complete with ads for monetisation.\nWe will go step by step over each line of code, showing you how to think about the game, how to implement it and how to personalise it and make it unique to you.\nWe will be adding banner and interstitial ads so that you can make money from your game.\nWe will only be using the Android system which is free, no external paid libraries like gdx or unity.\nAfter taking this course you will have a working 2048 game that you can publish to the playstore\n\n\nSign up today and learn how to make a 2048 like app for Android.\n\n\n30 day money back guarantee provided by Udemy",
      "target_audience": [
        "Beginner Android Developers",
        "Beginner Game Developers"
      ]
    },
    {
      "title": "Game design & development masterclass: Double Dragoon game!",
      "url": "https://www.udemy.com/course/learntocodeincbymakingaunitygame/",
      "bio": "The ultimate beginner's guide to game development and design! Build a fully functional Double Dragoon Beat Em Up game.",
      "objectives": [
        "Build a 2D Double Dragoon sidescroller Beat Em Up game in Unity®.",
        "Learn the fundamentals of game design.",
        "Code in C#.",
        "Create game art in Photoshop.",
        "Add sound effects to the game."
      ],
      "course_content": {
        "Introduction to Unity's Interface": [
          "Introduction",
          "Unity Editor",
          "Moving a Cube",
          "Materials",
          "Lights",
          "Particle System",
          "Applying Physics",
          "Asset Store"
        ],
        "Introduction to Unity (Coding)": [
          "Introduction",
          "Variables",
          "Methods",
          "If Blocks",
          "Loops"
        ],
        "Introduction to Unity (Inputs)": [
          "Introduction",
          "Key Presses",
          "Moving a Player",
          "Jumping",
          "Moving Forward",
          "Cycling Cameras"
        ],
        "Introduction to Unity (Prefabs)": [
          "Introduction",
          "Introduction to Prefabs",
          "FAQ on Instantiating Objects",
          "Random Angles",
          "FAQ on Destroying Objects",
          "Explosion Effect",
          "Adding Explosion Effects"
        ],
        "Building the Game (Unity Project)": [
          "Introduction",
          "Starting the Project",
          "Player Hierarchy",
          "Player Kick",
          "Identifying Kicked Objects",
          "Grabbing Objects",
          "Throwing Objects"
        ],
        "Introduction to Photoshop (Projects)": [
          "Build a New File",
          "Navigational Controls",
          "Basic Tools Rundown",
          "Basic Tools Usages",
          "Basic Secondary Tools",
          "Basic Layers",
          "Painting Sample",
          "Adjustment Layers (Part 1)",
          "Adjustment Layers (Part 2)",
          "Adjustment Layers (Part 3)",
          "Transform Tool",
          "Transform Tool (Cont'd)",
          "Colour Range Select",
          "Image Settings",
          "Image Adjustment",
          "Photoshop Fun",
          "More Photoshop Fun",
          "Ruler Usage"
        ],
        "Creating Art Assets for the Game (Photoshop Projects)": [
          "Project Set Up",
          "Background Street",
          "Background Sidewalk",
          "Background Wood Fence",
          "Background Chain Fence",
          "Background Cityscape",
          "Cardboard Box",
          "Trash Can",
          "Barrels",
          "Character Idle",
          "Character Punch",
          "Character Kick",
          "Item Hold and Toss",
          "Character Run",
          "Enemy Character",
          "Dragoon Exports"
        ],
        "Finishing the Game in Unity (Project)": [
          "Art Integration",
          "Player Animation",
          "Order in Layer",
          "Interface",
          "Player 2",
          "Decrease Health Points",
          "Multiple Hits",
          "Restarting the Game",
          "Audio - Game Sound FX",
          "Challenge Time!"
        ],
        "Double Dragoon Project Resources": [
          "($2000 value!) Art Assets and Source Code"
        ],
        "MORE! Blender Welcome - Interface Runthrough for Beginners": [
          "Download and Install Blender",
          "Introduction and Setting Changes",
          "Camera Controls",
          "Emulated Numbpad Camera",
          "Basic Object Manipulation",
          "Frequently Used Tools",
          "Mirror Modifier"
        ]
      },
      "requirements": [
        "Download and install Unity® 2017.2.0f3 and Adobe Photoshop CC 2017.",
        "This course was recorded on a Mac, but you can use a PC."
      ],
      "description": "This course was funded by a wildly successful Kickstarter.\nLet's make a sidescroller game with two players! Learn to code, make art, and add sound to build a full 2D Double Dragoon game in Unity® 2017.\n\nIn this course, game developer Glauco Pires from Mammoth Interactive teaches you how to build a game in Unity®. This course is unique because we make both the code and the art for the game from scratch. We teach you the fundamentals of designing, coding, and fine-tuning a game.\nFirst you design the game and its functionality in Unity®. You learn how to code in C#. Don't worry if you've never coded before. We start simple and add more to the game as the course goes on. We interweave theory with practical examples so that you learn by doing.\nMammoth Interactive game designer Kevin Liao teaches you everything you need to know about Photoshop to make game art. One of the best features is that you can watch the courses at any speed you want. This means you can speed up the or slow down the video if you want to.\nThis course is project-based. You will not learn a bunch of useless coding practices. At the end of this course, you will have an AWESOME game to use in your portfolio. Taking this course means that you learn practical, employable skills immediately.\nLearning how to code is a great way to jump in a new career or enhance your current career. Coding is the new math! Learning to code will propel you forward for any situation. Learn it today and get a head start for tomorrow. People who can master technology will rule the future.\nAll source code and art assets are included with your purchase. Enroll today to join the Mammoth community!",
      "target_audience": [
        "Complete beginners. No prior coding or digital art skills necessary.",
        "People who want to make games."
      ]
    },
    {
      "title": "Optimising a mobile game in Unity",
      "url": "https://www.udemy.com/course/optimising-a-mobile-game-in-unity/",
      "bio": "Optimisation tips and techniques for creating mobile games",
      "objectives": [
        "How to optimise graphics and code for mobile games",
        "Strategies for designing for android and IOS",
        "Modifying Unity settings for better performance",
        "Object pooling",
        "C# scripting for a mobile shooting game"
      ],
      "course_content": {},
      "requirements": [
        "A computer capable of running Unity",
        "An android or IOS mobile phone"
      ],
      "description": "Creating games for mobile phones is very different than creating games for computers, they require a lot of optimisation techniques. In this course I am going to be covering those optimisation tips and techniques to optimise a game in Unity that is designed specifically for mobile phones and tablets.\nWe will be designing a Halloween themed shooting game that has an endless wave of enemies that gets faster with each increasing level. I will be showing you how to setup this project correctly, going through the Unity settings, I will be explaining what they do and how to customise for mobile devices.\nThen we will begin creating the game, while using Unity profiler to check performance and look at ways to optimise for smooth gameplay and solid frames per second.\nWe will be focusing on items such as:\nDraw calls\nBatching\nCoroutines\nPooling enemies\nAnd more...\nYou don't need any previous experience in coding as I will be taking you through the process step by step, showing you good practice for developing for mobiles.\nBy the end of this course you will have a fully working game that will easily reach 30 frames per second on older mobiles and 60 frames per second on newer devices, and that's for both Android and IOS mobiles and tablets.\nSo why not enrol today and I look forward to seeing you in my course.",
      "target_audience": [
        "Do you struggle to get good frame rates in your mobile games? This course will show you how to optimise your games for great FPS"
      ]
    },
    {
      "title": "Construct 2 - The Complete Game Creation Learning Tool",
      "url": "https://www.udemy.com/course/construct2-the-complete-game-creation-course/",
      "bio": "You will learn how to create games in Construct2 from zero all the way to uploading to mobile play stores.",
      "objectives": [
        "Create games in Construct 2 export to android and iOS and submit to appstores"
      ],
      "course_content": {},
      "requirements": [
        "Nothing is prerequired. You will learn from zero."
      ],
      "description": "This course is aiming to be a complete guide on how to create games with construct 2 program.\nI am coding game for 5 years and I was using many frameworks and programs but Construct 2 is the best and the fastest way to create games.\nDon't worry if you don't have any experience with programming and/or game development,I will teach you how to create games from scratch.\nWhen you complete the course you will be able to:\ncreate a flappy bird clone\ncreate a fully featured platformer game\ncreate a match 3 game.\nexport construct 2 games to android and iOS\nintegrate mobile ads, gamecenter, google playservices, In-app-purchases\nWhat do you need to complete this course:\na copy of construct 2(paid version for mobile exporting, free for rest)\nintelXDK software(free)(for mobile export)",
      "target_audience": [
        "This course is for every game developer regardless of experience"
      ]
    },
    {
      "title": "Introduction to Editing Audio for Games Course",
      "url": "https://www.udemy.com/course/introduction-to-editing-audio-for-games-course/",
      "bio": "Learn the different tools and effects in the audio program Audacity to edit and manipulate sound effects for your games",
      "objectives": [
        "How to combine and manipulate existing sound effects to create new ones",
        "Process and edit recordings into professional sound effects.",
        "Edit audio with ease"
      ],
      "course_content": {
        "Getting Started with the Course": [
          "Intro to the Course",
          "What You'll need for the Course",
          "Links to Download Free Sounds and Audacity",
          "How to get the Most out of this Course",
          "Section 1 Wrap Up"
        ],
        "Basic tools in Audacity": [
          "Intro to Section 2",
          "Basic tools in Audacity",
          "Cutting and Fading our Audio Files",
          "Layering Sound Effects",
          "The Envelope Tool Indepth",
          "Exporting our Sound",
          "Stereo and Mono Tracks",
          "Section 2 Wrapup"
        ],
        "Frequency and Pitch": [
          "Intro to Section 3",
          "Tools to See Frequency",
          "Free Online Spectrum Analyzer",
          "Learning How to Use Equalizers",
          "Additive EQ",
          "Noise Reduction Tool",
          "Change Speed Tool",
          "Using your Ears!",
          "Section 3 Conclusion"
        ],
        "Dynamic Processing": [
          "What are Dynamics?",
          "How to Use Dynamic Range",
          "Introduction to Compressors",
          "How to Use the Compressor",
          "Compression Quiz",
          "Attack and Release",
          "Making Smaller Sounds more Powerful",
          "Limiters",
          "Workflow with EQ and Compression",
          "Using Quieter Sounds to Change Dynamic Range",
          "Keep Practicing Using your Ears!",
          "Section 4 Wrapup"
        ],
        "Creating a Laser Gun Sound Effect": [
          "Intro to Lecture 5",
          "Where to Start with Creating your Sound",
          "Adding the Laser to our Sound",
          "Adding Layers to our Sounds",
          "Cleaning up our Sound",
          "Section 5 Wrapup"
        ],
        "Creating an Alien UFO Sound Scene": [
          "Intro to Section 6",
          "Making the UFO Sound",
          "Placing the Sounds in our Scene",
          "Volume Mixing our Scene",
          "Adding Extra Sounds",
          "Fixing Repetitive Sounds",
          "Panning our Sound Scene",
          "Adding Reverb and Echo",
          "Conclusion to Section 6"
        ],
        "Wrap Up": [
          "About Recording Equipment and Recommendations",
          "About other DAW and Recommendations",
          "Finding Work as a Sound Designer",
          "Course Wrapup"
        ]
      },
      "requirements": [
        "Download Audacity (Free Download)",
        "Download the free package of sound effects off of blipsounds.com (Free Download)"
      ],
      "description": "Do you want to learn to edit audio to create professional sound effects? Or are you a game developer who loves to make games? But you don’t know where to start with learning about audio and sound? Or maybe you’re a video game composer who wants to dive into the world of sound design.\nIn the Introduction to Audio Editing for Games Course, we will teach you how to edit audio to create sound effects for games with the free program Audacity. We’ll teach about what makes up a sound, the basics of sound, and even create a sound effect with a free package of sounds that you can download from my sound library company website Blipsounds. com. We’ll be using these free sounds throughout the entire course so you can follow along with exactly what I am doing.\nThen we’ll use the tools we learned from Audacity to teach about the different effects that are available in Audacity including Equalizers, Pitch Shifting, Compressors and limiters.\nThen with all that we learned in the previous lectures, we will create a Laser gun sound effect a full audio scene soundscape where an alien UFO is chasing our character and he shoots back at it with his laser gun.\nAnd you’ll get to watch me create all of this step by step so you can follow along and try making it yourself.\nGetting started with making sound effects can be expensive and difficult, so I made this course to help people get started with sound design and audio editing without investing too much time or money.\n\nSo what are you waiting for? Get started and enroll today! Looking forward to seeing you there.",
      "target_audience": [
        "Beginners to Audio Editing",
        "Game developers interested in learning about creating sound effects",
        "Students who have the drive to finish this course as quickly as possible",
        "Music Composers who want to learn about sound design"
      ]
    },
    {
      "title": "iOS Maze Games with Swift, Sprite Kit and Designed in Tiled",
      "url": "https://www.udemy.com/course/ios-maze-games-with-swift-sprite-kit-and-designed-in-tiled/",
      "bio": "Learn how to program a Universal iOS game from scratch using Swift, Sprite Kit and design levels with Tiled or Xcode 6",
      "objectives": [
        "Build an app from scratch",
        "Import a Tiled file into a Swift / Sprite Kit based project",
        "Parse any XML data into a Swift / Sprite Kit based project",
        "Play audio, either through an SKAction or AVAudioPlayer",
        "Setup swipe gestures in an SKView",
        "Pull children from a Sprite Kit Scene file and replace them with custom classes",
        "Setup a SKPhysicsContactDelegate and listen for bodies contacting each other",
        "Center a Sprite Kit world around a specific child"
      ],
      "course_content": {
        "Creating a Hero for the Maze": [
          "Introduction to the Series",
          "Starting Game Assets and source projects",
          "Initial Setup With Xcode",
          "Course Primers",
          "Adding the Hero Class",
          "Moving the Hero",
          "Gestures",
          "Gestures (Continued) and Changing SKTextures",
          "Adding physics to the Hero class",
          "Adding physics (continued)",
          "Section 1 - Quiz"
        ],
        "Boundaries, Contacts, Tiled and Star Classes": [
          "Introduction to Section 2",
          "Creating the Maze Boundaries",
          "Creating the Maze Boundaries (continued)",
          "Adding the Physics Contact Delegate",
          "Introduction to Using Tiled",
          "Parsing the Tiled File (or any XML data)",
          "Parsing the Tiled File (continued)",
          "Centering the Hero",
          "Creating the Star Class (pickup object to pass levels)",
          "Creating the Star Class (continued)",
          "End of Section 2 Quiz"
        ],
        "Sensing Walls and Adding Enemies": [
          "Introduction to Section 3",
          "Adding Sensor Nodes to the Hero",
          "Using the Sensor Nodes to Detect Boundary Contacts",
          "Creating a Mass-less Edge Boundary Around the World",
          "Placing Enemies in the World",
          "Placing Enemies in the World (continued)",
          "Moving Enemies",
          "Moving Enemies (continued)",
          "Adding More Enemy Logic",
          "Refining the Logic More",
          "Reloading the Level and Enemies Bumping Each Other",
          "End of Section 3 Quiz"
        ],
        "Property List, Loading the Next Level, Text, Sounds and More": [
          "Introduction to Section 4",
          "Getting Hero Settings from a Property List File",
          "Getting Hero Settings (continued)",
          "Game Settings from the Property List File",
          "Getting Level Data from the Property List File",
          "Getting Level Data (continued)",
          "Loading the Next Level After Getting All Stars",
          "Adding a Text Label",
          "Including a Parallax Background",
          "Adding Sounds",
          "End of Section 4 Quiz"
        ],
        "Bonus Lessons - Easy extensions with the final project": [
          "Making some Boundaries Dynamic (Pushable)",
          "Using Certain Stars to Auto Advance Levels",
          "Student questions"
        ]
      },
      "requirements": [
        "Have a Mac running Xcode 6 or 6.1",
        "While not required, to test on your actual device you'll need to be Registered Apple Developer"
      ],
      "description": "Classic game concepts. Modern programming.\nWhen you think of maze games, you’ll probably think of Pac-Man, which isn’t hard to argue is the most popular game of all time. At that game’s core is a simple hook. Move at high speeds and don’t get caught, which is a fun concept for any player of any age. Even today some of the most popular games don’t rely on much more than a classic hook: something that is easy to play, but impossible to beat. A game like Flappy Bird is a recent testament to that.\nIn this tutorial series, we’ll look at programming a conceptually simple game, but one that can be expanded in a hundred different directions using Apple’s amazingly easy physics engine. You’ll learn the latest in iOS programming technology: Swift and Sprite Kit. Then for level design, you’ll get two options: create levels within Xcode 6 using the new Scene editor, or take a step outside Xcode and use Tiled, a free level design program which in our opinion, is a tad more refined and speeds up level creation.\nAfter this series, you will be a game developer! Ready to submit your first app for the iPhone, iPad, and possibly even Apple Watch. Plus using software like Apportable, you can even export your app to Android and a plethora of other devices.",
      "target_audience": [
        "Anyone with zero knowledge of Sprite Kit or Swift",
        "Anyone who wants to build great games and get a foundation in solid programming techniques",
        "Anyone that wants to choose between using Tiled or the SpriteKit Scene Editor",
        "Prior programming experience is not required, but won't hurt"
      ]
    },
    {
      "title": "Unity 6: 2D Game Dev Journey — Junior to Pro",
      "url": "https://www.udemy.com/course/metroidvania-rpg-2d/",
      "bio": "Take your C# and Unity 2D knowledge to the next level.",
      "objectives": [
        "Master C# Programming — From Beginner to Expert",
        "Learn the new Input System in the right way",
        "Create Custom State Machine for Player and Enemies",
        "Learn to use the Unity Engine for 2D Game Development",
        "Jump, Dash, Crouch, Climb, Wall Slide, Wall Jump, Variable Jump, Multiple Jumps, Coyote Time",
        "Shooting with different weapons (change weapon, reload weapon) and Update UI",
        "Create levels using Tilemap and Rule Tiles",
        "Minimap which displays player's position and other important objects",
        "Boss Fight",
        "Dialogues",
        "Interfaces, Scriptable Objects and much more"
      ],
      "course_content": {
        "Approach to the Course": [
          "Approach To the Course"
        ],
        "Import Assets": [
          "Project Setup",
          "DOWNLOAD ASSETS and DISCORD",
          "Import Pixel Art",
          "Sprite Editor"
        ],
        "Tilemap": [
          "Tilemap Setup",
          "Rule Tile",
          "Tilemap Colliders and Layers"
        ],
        "Player and New Input System": [
          "Player Preparations",
          "New Input System- Part [1]",
          "New Input System- Part [2]"
        ],
        "State Machine and Abilities": [
          "State Machine Concept",
          "State Machine Setup",
          "Idle Ability",
          "Idle Animation",
          "Move Ability",
          "Flip the Player",
          "Ground Detection",
          "Jump Ability",
          "Blend Tree Animation"
        ],
        "URP, Cinemachine and Pixel Perfect": [
          "Cinemachine Camera",
          "Fix Gaps Between Tiles",
          "Upgrade to URP project",
          "Cinemachine Pixel Perfect Camera",
          "Camera Borders"
        ],
        "More Player Abilities": [
          "Sticky Walls",
          "Detect Walls",
          "Wall Jump Ability",
          "Wall Slide Ability",
          "Wall Slide Animation",
          "STATE MACHINE UPDATE",
          "Wall Jump and Slide Ability Update",
          "Dash Ability",
          "Dash Animation",
          "Ladders (Climb) Ability",
          "Climb Animation",
          "Crouch Ability",
          "Crouch Animation",
          "Crouch Run Ability",
          "Crouch Run Animation"
        ],
        "Controllers (Gamepads)": [
          "Controller Setup"
        ],
        "More Jumps": [
          "Coyote Time",
          "Variable Jump",
          "Multiple Jump Ability",
          "Jump Transition Update"
        ],
        "Parallax Effect": [
          "Basic Parallax Effect",
          "Infinite Parallax Effect"
        ]
      },
      "requirements": [
        "Very basic C# knowledge (variables, functions)"
      ],
      "description": "(*** NEW COURSE ***)\nLet's start your game dev journey. This is much more than an ordinary Unity 2D course — it’s a complete learning journey designed to take you from beginner to advanced game developer, one powerful system at a time.\nYou'll not only learn how to implement core gameplay mechanics but also how to structure your code using clean and reusable systems. Everything you build will be scalable, so you can apply it to your future games, whether they’re Metroidvanias, platformers, top-down, or even RPGs.\nCourse Highlights\nBeginner-Friendly, Yet Deep\nStart from zero and progressively build your skills while creating a full game.\nUnity’s New Input System\nLearn to use Unity’s modern input system to support keyboard, mouse, and controllers with ease.\nCustom Player State Machine\nThis is one of the course’s most powerful systems — it gives you full control over player behavior, allowing you to expand and create complex mechanics with minimal effort.\nVersatile Save and Load System\nSave progress, player data, visited areas, and more using a clean JSON-based system that you can use in almost any game genre.\nModular Weapon System\nCreate and manage both primary and secondary weapons with shooting, cooldowns, and effects — the foundation for action-packed gameplay.\nMinimap and Dialogue Systems\nAdd immersion and guidance with an in-game minimap and trigger-based dialogues for story and gameplay events.\nBoss and Enemy State Machines\nLearn how to design enemies and boss fights using another clean state machine architecture — reusable, scalable, and perfect for creating a variety of AI behaviors.\n\n\nThis Course Will Grow With You\nThe journey doesn’t end here. The course will continue to grow through updates and expansions. The first major update will focus on RPG mechanics, introducing stats, inventory, quests, and more.\nOnce the RPG update is live, the course will be renamed:\nUnity 6: RPG and Metroidvania Master\nBut don’t wait! There’s already a ton of value packed into the course, and by joining now, you’ll get access to all future updates at no additional cost.\nWhether you’re just getting started with Unity or you’re ready to take your skills to the next level with real game systems, this course has everything you need to build a professional-quality 2D game — and the skills to keep going.\nSee you in the course!",
      "target_audience": [
        "Beginners who want to learn Unity 2D through a meaningful project",
        "Intermediate developers looking to improve code structure and game architecture",
        "Anyone who loves Metroidvania (and other 2D) games and wants to make their own"
      ]
    },
    {
      "title": "Unity 2017 - Email List Building - Why and How",
      "url": "https://www.udemy.com/course/unity-2016-email-list-building-why-and-how/",
      "bio": "Step by Step guide on how to build an email list using Unity3D to stay in touch with your players",
      "objectives": [
        "integrate email list capture within Unity3D",
        "capture the player's email address",
        "build an email list to keep in touch with your players"
      ],
      "course_content": {
        "Initial Setup": [
          "Overview and Instructor intro",
          "Introduction to email list building for video games in Unity",
          "Create the mailchimp account and mailing list",
          "Create signup form and extract critical information",
          "Open the Unity project and scene"
        ],
        "Core functionality": [
          "Programming the email capture script",
          "Connect email capture code to user interface in Unity",
          "Add a textfield User Input to capture player email"
        ],
        "Misc. items": [
          "Bonus - Files, and coupon codes",
          "How to download the free version of Unity 3D",
          "Crash course Unity User Interface",
          "How to install Unity 3D Windows and Mac"
        ]
      },
      "requirements": [
        "a MAC, a PC or Linux computer"
      ],
      "description": "WHY YOU MUST BUILD YOUR EMAIL LIST IN YOUR VIDEO GAME—AND HOW TO GET STARTED\nif you are not building an email list, you’re making a HUGE mistake. Your app or game needs to capture the user's information, such as the email address, first name and last name.\n“Why would I EVER want to build an email list?”\nNowadays the app stores are saturated with apps. Take a look at the Google Play store in 2016, there are about 2 millions apps. In 2008 there was less than 100K apps!\nIt's hard to get players to find your game. That's why your game must have a way to capture the player's email address, so that each time you come up with a new set of features, new characters, or even a new game, you can easily spread the word and get a boost in downloads and in user engagement.\nTo put this in perspective, had I started building an email list back in 2010 as I was building dozens of games, when I would release a new game, I could have had 7 to 10 times MORE users, which translates in potentially 10 times money than I would originally get.\nHow dumb, right?\nFast forward to today, I see people making the same mistake I made years ago. Instead of building their email list in their game, they’re focusing on pointless things like paying for ads… or worse… social media (YEAH!!).\nAnd that’s why I want to share this new course with you where I share how to build a system to capture emails using Unity 3D. Now I go through every single steps to create this system, but for the lazy ones, by joining this course, as a bonus, you get the completed bundle that you can in any of your Unity game projects. Life is good!\nWhy Email Marketing crushes Social Media Marketing\nYou might think I'm crazy to say this, everyone says social media is the way to go, you gotta use Facebook and Twitter!\nWell let me tell you something.\nHow many tweets do you receive daily on average? 100, 2000, 5000?\nHow many emails do you receive daily on average? 5, 10, 25?\nOkay, by now I'm sure you get it! Your messages will have more chances to get seen by email that by Tweeting or by posting it on Facebook!!!\nEmail performs so much better than social media.\nBuilding an email list in your video game is easy. Just follow my steps.\nJoin this course now.\n***\nNot convinced yet? it's cool.... listen up...\nHere are 2 tips I'm giving you away that you can implement in your game right now!\n1) Go ahead and place an email capture form when the player kills a boss.\nHuman psychology shows that after \"feeling good\" about reaching an achievement, people are more prone to give back.\nHere, the player's brain is releasing endorphins because he or she is feeling good after having killed the first boss. The player is now ready to give back, by giving away their email address.\n2) Here is another strategy to entice the player to give your their email address:\nYou can use the \"carrot\" system to capture emails. For example: \"Player gets 250 coins for giving away their email\".\nNow that you're all pumped up, let's get started!\nJoin this course now.",
      "target_audience": [
        "anyone making games with Unity3D",
        "computer students",
        "indie developers",
        "graphic designers",
        "game designers"
      ]
    },
    {
      "title": "Unity Tutorial: Mastermind 2D",
      "url": "https://www.udemy.com/course/unity-tutorial-mastermind-2d/",
      "bio": "Learn how to create your own 2D Mastermind game with the use of the Unity Engine.",
      "objectives": [
        "You will learn how to Drag and Drop 2D Elements using Events in the Canvas.",
        "You will learn about for-loops, arrays and lists in C# and all needed coding basics.",
        "Understand Unity even better.",
        "Complete your maybe very first game."
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Basic Game Elements": [
          "Unity Setup",
          "Basic Pearl Setup",
          "Dragging Pearls",
          "Creating the Playfield",
          "Updating the Playfield",
          "Dropping Pearls",
          "More Pearls and Pearl ID's"
        ],
        "Game Systems": [
          "Solution Box - Basic Setup",
          "Solution Box - Scripting #1",
          "Solution Box - Scripting #2",
          "Adding Pearls & Fixing Pearls",
          "The Protector",
          "Dragging Box",
          "Hint Box & Check Button",
          "Set ID's Expression",
          "Check Button",
          "Black Hint Pearl Check #1",
          "Black Hint Pearl Check #2",
          "White Hint Pearl Check",
          "Game Manager #1",
          "Game Manager #2",
          "Basic Win & Lose Conditions",
          "Win & Lose Protector",
          "Show & Hide Solution Box",
          "Coding Show Solution Box"
        ],
        "Ingame Metrics": [
          "Win & Lose Panel",
          "Talking to the Textfields",
          "Show Win Panel",
          "Play Timer",
          "Win Panel Buttons",
          "Calculating Score"
        ],
        "Menus, Modes, Fixes, Cleanup": [
          "Menu Scene & Navigation",
          "Creating a Harder Game Mode",
          "Creating another even Harder Mode",
          "Cleaning Up",
          "Menu Buttons",
          "Updating HideImage"
        ],
        "Conclusion & Bonus": [
          "Conclusion"
        ]
      },
      "requirements": [
        "No requirements, but it always helps if you have some basic knowledge about handling Unity.",
        "You should be able to use the keyboard and the mouse on your computer. ;)",
        "A nice bonus, if you are able to create your own Grafics, to stand out from the mass."
      ],
      "description": "In this Unity course you will learn how to create you own Mastermind Game in Unity Engine. You will learn how to write your own Scripts in C#.\nMotivation\nIf you are struggling to finish your first game, i will lead you through the process of game creation. You will save a lot time, since i show you everything you need to create your own Mastermind Game.\nIf you are new to game creation i will show you how to structure, and work clean in your maybe first game, which you can show to anyone or even let other people play it.\nAbout the Game\nIf you never heard about Mastermind, it is a combination puzzle game, where the player have to find a random \"code\" picked by the computer. They have 10 turns to find out the correct combination. They get hints with black and White pearls which showing up.\nBlack Pearl mean, correct pearl on correct position.\nWhite Peal means, correct pearl on wrong positon.\nBut they don't know which is meant, so they have to find out that on their own as well.\nGraphics\nwill not be covered to much\nare available in the corresponding lessons to have material to work with\nDesign is totally up to you, you can even use your own Graphics\nUnity\nyou will learn about the Inspector\nhow the Canvas System works\nhow to set up GameObjects\nhow to create Prefabs and what they are\nC# (Monodevelop)\nyou'll learn about private and public Variables\nyou'll learn about List's and Array's\nyou'll learn about for-loops and nested for-loops\nyou'll learn how to create your own functions and neccesary arguments\nyou'll learn about Interfaces for Drag and Drop 2D Objects\nyou'll learn about if-conditions  and expressions\nConclusion\nIn the end of this course you will have a fully functional Mastermind Game in 2D which you can (after you have created nice Menus, Buttons, and maybe additional content) upload to any Gaming Website, Google Playstore, Apple Store or even Windows Store or Steam.\nLet's make your dream game a reality!!\nLevel: Beginner\nVideo Course Length: ~5.5 hours\nUnity Version required: 4.6+",
      "target_audience": [
        "You are a beginner in working with Unity.",
        "You want to get your own, maybe first, game done.",
        "You are a game addict and want to create Mastermind.",
        "You want to learn and understand how such games are made."
      ]
    },
    {
      "title": "Build a Platformer Game in Clickteam Fusion 2.5",
      "url": "https://www.udemy.com/course/build-platformer-game-clickteam-fusion-2-5/",
      "bio": "Build your own platformer game in Clickteam Fusion 2.5 from scratch in this course",
      "objectives": [
        "Build your own platformer game with Clickteam Fusion 2.5",
        "How to design a Save and Load System",
        "How to build a cross-platform platformer game",
        "How to add Special FX to your game"
      ],
      "course_content": {
        "Course Introduction": [
          "Introduction",
          "Preparing the Content",
          "What is an Event in Clickteam Fusion 2.5?"
        ],
        "Sprites - Player Character": [
          "Importing your Player Character and Looking at the Properties",
          "Creating a new player animation",
          "Player Character 'Mask' in Clickteam Fusion 2.5",
          "Section Review"
        ],
        "Player and Enemy Movement": [
          "Introducing the Platform Movement Object (PMO)",
          "Assigning Player Movement and Animation",
          "PMO - Tweaking the properties",
          "Enemy Movement",
          "Section Review"
        ],
        "Level Design / HUD Design": [
          "Designing the first level",
          "Playarea Scrolling and Camera",
          "Parallax Background",
          "Designing the HUD"
        ],
        "Making the Magic Happen": [
          "Collecting Coins",
          "Enemy Collision",
          "Double-Jump",
          "End of Level"
        ],
        "Add Some Polish...": [
          "Adding Music and Sound Effects",
          "Add a coin collect special effect",
          "Add an Extra Life",
          "Lose Coins Effect",
          "What is a Fastloop?",
          "Designing a Title Screen",
          "Adding another level",
          "Adding a Game Over Screen and implementing it",
          "Section Review"
        ],
        "Save and Load System": [
          "Implementing the Save/Load System in to your game",
          "Conclusion"
        ],
        "Extra Curricular": [
          "Testing and Debugging"
        ]
      },
      "requirements": [
        "Clickteam Fusion 2.5 Standard",
        "Clickteam Fusion 2.5 Developer"
      ],
      "description": "Learn how to create your very own platformer game using Clickteam Fusion 2.5, an industry-standard, rapid application game development tool from Clickteam used by many Indie Game Developers and Large companies worldwide.\nIn this game development course you will learn a lot of cool game development concepts but will also learn how to implement these concepts into your very own platformer game using the Platform Movement Object. You will have access to the Course Forum where you can also discuss topics covered in the course and topics that aren't covered.\nThis course has been designed to be understandable by anyone including beginners, artists and programmers who wish to expand their knowledge of game design. This course will teach you the fundamentals of a platformer game development in Clickteam Fusion 2.5 and will help you gain a greater understanding of development.\nBy the end of this course you will have developed the ability to:\nImport a Player Character and Enemies\nAssign Movement to the Player Character\nAssign Movement to the Enemies\nPlayer dangers such as Spikes, Gaps and Moving Enemies\nLevel Design\nTitle Screen Design\nA Basic Save and Load System\nStart learning more about Game Development today with this course from OneClick Training!",
      "target_audience": [
        "Anyone who wants to create a platformer game",
        "Anyone who wants to learn game design",
        "Anyone who wants to code their own platformer game"
      ]
    },
    {
      "title": "Adventures In C# Programming",
      "url": "https://www.udemy.com/course/adventures-in-c-sharp-programming/",
      "bio": "Learn C# by programming a text-adventure game",
      "objectives": [
        "Program a text adventure game",
        "Learn Object Oriented programming in C#",
        "Build a complex project from multiple code files",
        "Understand classes, objects and serialization"
      ],
      "course_content": {
        "Starting The Adventure": [
          "Welcome to the course",
          "Read This First",
          "Visual Studio 2019",
          "Code Archive (to download)",
          "Who is this course for?",
          "What I assume you know before starting the course",
          "How to study the course",
          "A short history of adventure games",
          "Rooms – the fundamental objects of a game",
          "Creating a Room",
          "Creating Multiple Rooms",
          "Creating a Map",
          "Moving around the game",
          "Group related classes",
          "Add accessor methods",
          "Create an Actor class",
          "Initializing the Player and Rooms",
          "Moving the player",
          "A Better Map",
          "A Custom RoomList Class",
          "Creating Unique Room Identifiers",
          "Moving to a Named Room",
          "Initializing the adventure",
          "Simplifying Map Construction",
          "Moving Actor objects"
        ],
        "Building the Game World": [
          "ThingHolder Class",
          "ThingList class",
          "Multiple constructors",
          "Taking and Dropping Objects",
          "Describing Objects 1",
          "Describing Objects 2",
          "Describing Objects 3",
          "Describing Objects 4",
          "Adding a File menu",
          "Look At Object",
          "Saving and Loading Games",
          "Serializing With JSON",
          "Making objects serializable",
          "Subclassing Dictionaries",
          "Getting Ready For the Next Step",
          "Human Language Commands",
          "Building a bigger Game",
          "An English Language Parser",
          "Categorising commands",
          "Quiz",
          "Putting Objects into other Objects",
          "What Next?",
          "And Finally"
        ]
      },
      "requirements": [
        "Visual Studio (either the free Community edition or a commercial edition).",
        "Some basic programming knowledge"
      ],
      "description": "Adventures in C# Programming is a programming course like no other! It teaches the features of the C# language by guiding you step-by-step through the development of an exploring-style game.\nYou will learn to…\nWrite a retro-style adventure game like ‘Zork’ or ‘Colossal Cave’\nMaster object orientation by creating hierarchies of treasure objects\nCreate rooms and maps using .NET collections, arrays and Dictionaries\nCreate objects with overloaded and overridden methods\nSerialize networks of data to save and restore games\nWrite modular code using classes, partial classes and subclasses\nProgram user interaction with a ‘natural language’ interface\nPlus: encapsulation, inheritance, constructors, enums, properties, hidden methods and much more…\nIf you are a beginner programmer and already studying another C# course, this will give you hands-on experience of writing a big and complex project.\nIf you are an experienced programmer, this will give you a quick way into the twisty little corners of the C# language.\nIf you are a retro-games fanatic, learn how to write games just like the Infocom classics of the 1980s!\nIn this course you will learn to write C# your own retro text-adventure game using either the free Visual Studio Community Edition or a commercial edition of Microsoft Visual Studio. All the source code of sample projects is provided ready for you to download, run and modify.\nThe course instructor, Huw Collingbourne, is the author of the cult adventure game, The Golden Wombat Of Destiny. A long-established programming teacher online, he is also a well-known programming columnist in the UK and is the author of The Book Of Ruby.\nAdventures in C# Programming is the ultimate fun way to learn the C# language. So, come on in and let’s begin the adventure!",
      "target_audience": [
        "Beginners who have (or are) already studying an elementary C# course",
        "Intermediate programmers ready to dive in to learn C# in depth",
        "Anyone interested in how to create a classic-style text adventure"
      ]
    },
    {
      "title": "Publish your own Spring Ninja* game for iPhone and Android",
      "url": "https://www.udemy.com/course/publish-your-own-spring-ninja-game-for-iphone-and-android/",
      "bio": "Full step by step videos and game code to guide you make your own iPhone and Android game and publish them in app stores",
      "objectives": [
        "publish your very own Spring Ninja iPhone game clone",
        "publish your very own Spring Ninja Android game clone",
        "Create your own iPhone and iPad app",
        "Create your own Android app",
        "Publish your iOS app to the iTunes app store",
        "Publish your Android mobile app and publish it to the Google Play store",
        "Setup Advertising networks to display ads in your game that monetize",
        "Setup in-app purchases",
        "Learn tips and tricks to draw your graphics on your own without having to spend a penny"
      ],
      "course_content": {
        "iOS initial setup": [
          "Who is your instructor and how course overview",
          "Get the Apple Developer License",
          "Download XCode tool and open it",
          "Download the game source code and open it",
          "Create your iOS certificate for distribution",
          "Create your app bundle ID and provisioning profile"
        ],
        "Reskinning process: Customizing the game": [
          "Overview of Image editing tools like photoshop gimp and sumopaint",
          "Run spring ninja game in the iPhone simulator",
          "Overview of the Reskinning Process",
          "Create hero cat character in photoshop",
          "Learn how to reset xcode assets using product build",
          "Verifying the new cat character in the iOS simulator",
          "Changing the background mountains images",
          "Testing the background mountains images in the iphone 6 simulator",
          "Changing the background sky colors",
          "Testing the background skies colors in the simulator",
          "Edit the falling leaf particles images",
          "Change the tree images to lollipop trees",
          "Verifying the stars and lollipop changes in the simulator",
          "Creating your game logo title in photoshop",
          "Create the spring cat jump icon",
          "Resizing all icons to the iphone and ipad dimensions",
          "Create the app launch images",
          "Resizing all launch image iphone dimensions",
          "Edit app settings in xcode",
          "Constants Settings for leaderboard adsmore and apps share",
          "Create app in itunes connect",
          "Adding ITC settings such as title rating description aso keywords and icon",
          "Create a gamecenter leaderboard and sandbox test user",
          "Adding remove ads inapp purchase in ITC and in xcode",
          "Create the admob banner settings and add it to xcode",
          "Add chartboost interstitial ads ID and signature settings",
          "Add chartboost \"more apps\" more free games",
          "Start the archiving process",
          "Uploading the archived ipa file to the itunes connect",
          "Submiting your mobile game for review"
        ],
        "Android version": [
          "Overview: Google Play store Publishing",
          "Get the Android developer license",
          "Add new Application in Google Play Dev website",
          "Work on the Application settings on Google Play Dev site",
          "Download Eclipse tool for MAC or PC",
          "Install Eclipse for Android",
          "Install Android ADT plugin and set it up in Eclipse tool",
          "Open the source code Android project in Eclipse",
          "Adding missing Libraries Google Play services and libcocos2dx to eclipse project",
          "Adding chartboost app id and signature to the android app source code",
          "How to add google admob banner to the android code in eclipse",
          "Rename the android app package name",
          "How to create the key store and apk file in eclipse ADT",
          "How to upload your apk file in the google play developer console"
        ],
        "Android: Misc Knowledge": [
          "Download the Android SDK and Android Studio",
          "(Optional: Eclipse tool) Install and Open Android Studio",
          "Setup Google Play services in the Developer Console",
          "Add Remove Ads inapp purchase to the Google Dev console",
          "Connect the Google Play inapp billing to the source code",
          "Change the app name and title in Eclipse java file 2",
          "Change the game graphics sounds icons and launch images in for Android version",
          "Publish your Android app to the Google Play store",
          "BONUS"
        ]
      },
      "requirements": [
        "For the iOS part, you need a MAC computer or MacInCloud online account (no need for that if you do the Android part only)"
      ],
      "description": "The source code is compatible with iOS 8, and also ready for iPhone 6/6+ and latest Android Phones\nThank you for your interest in this course, this is your instructor Yohann.\nThis course is not just about theory, it's about getting things done.\nWe give you the full source code of a clone of the Spring Ninja game, another top ranking game from Ketchapp. We will go through the process of making your own version of the game, and publish it for iPhones, iPads, Android phones and tablets\nThis course will guide you step by step on how to customize the game graphics, sounds, and settings and you'll magically end up with your own game published in the iTunes app store and the Google Play Store.\nThe game comes with advertising channels so that you can earn money every day while people play your game.\nThis course is the simplest way to get into the mobile app industry and get your first app in both the Apple app store and the Android stores. It's also for anyone who'd like to expand their app portfolio.\nThe source code included with this course comes with an an unlimited license, which means you can keep reusing it and make dozens of games with different themes. It's fun! I know it works because that's what I've been doing myself! Here I will show you how I'm turning the Spring Ninja Game into a Spring Cat Jump game.\nThe process is fun and rewarding, So Don't wait for the next opportunity, now is the time, and please check out the course outline and see all the value that comes with it.\nGet the course now and see you in the classroom.\nDetails:\ngame source codes included for iOS and Android\nUsing cocos2d-x game engine\nGame graphics included\nSounds included\nAdvertising networks banner included (Google Admob)\nAdvertising network full screen included (Chartboost)\nAdvertising network \"More Free Apps\" included (Chartboost)\nGame icons and launch images\nLectures on how to setup your environment for publishing",
      "target_audience": [
        "anyone interested in making games",
        "anyone interested in publishing mobile apps",
        "anyone interesting in learning how to draw game graphics the simple way",
        "computer students",
        "graphic design students",
        "game hobbyist",
        "entrepreneurs"
      ]
    },
    {
      "title": "Master Unreal Engine 5: Build Any Game with Blueprint & C++",
      "url": "https://www.udemy.com/course/master-unreal-engine-5-build-any-game-with-blueprint-c/",
      "bio": "Unlock the Power of Unreal Engine 5: Create Any Game, Master Multiplayer, UMG UI, and More with Blueprint and C++.",
      "objectives": [
        "Basics of Unreal Engine 5 :- Build a solid understanding of the Unreal Editor and the fundamentals of creating games with it.",
        "Writing game logic with blueprints :- Learn how to build any game logic without having to write a single line of code.",
        "Writing game logic in C++ :- Learn how to code game logic and use the engine's API in C++.",
        "Multiplayer and Single player game development :- Understand networking aspects of game development in Unreal Engine 5."
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Course Overview"
        ],
        "Initial Setup": [
          "Installing The Engine",
          "Creating a Project",
          "Initial setup quiz"
        ],
        "Editor Basics": [
          "Editor Layout",
          "Adding Templates",
          "Viewport Navigation",
          "Move, Rotate and Scale",
          "World Space and Local Space",
          "Axis Conventions",
          "Snapping",
          "Duplicate and Moving Objects With the Camera",
          "Orthographic Views",
          "Static, Stationery and Movable",
          "Editor Basics Quiz"
        ],
        "Blueprint Basics": [
          "Blueprint Introduction",
          "Level Blueprint",
          "Variables",
          "Blueprint Data Types",
          "Print String",
          "Blueprint Functions",
          "Custom Events",
          "Macros",
          "Event Dispatchers",
          "Blueprint Basics Quiz"
        ],
        "Blueprint Events, Spawning Actors and Data Structures and Control Structures": [
          "BeginPlay",
          "Tick",
          "Spawn Actor",
          "Arrays",
          "Sets",
          "Maps",
          "Actors",
          "Viewport",
          "Construction Script",
          "Components",
          "Context Sensitive",
          "Branch",
          "Switch",
          "FlipFlop",
          "Gate",
          "Sequence",
          "While Loop",
          "For Loop",
          "For Each Loop",
          "Iterating Through Sets and Maps",
          "Blueprint Events/Data Structures/Control Structures Quiz"
        ],
        "Structures and Data Collections": [
          "Structures",
          "Data Table",
          "Object",
          "Data Asset",
          "Structures and Data Collections Quiz"
        ],
        "Curves and Timers": [
          "Curves",
          "Timeline",
          "Timers",
          "Curves and Timers Quiz"
        ],
        "Strings": [
          "String",
          "String VS Name Vs Text",
          "String Functions",
          "Strings Quiz"
        ],
        "Casting and Interfaces": [
          "Casting",
          "Interfaces",
          "Overlap Events",
          "Casting and Interfaces Quiz"
        ],
        "UI (UMG)": [
          "Widgets",
          "Widget Slots and Canvas Panel",
          "Button",
          "Text Block",
          "Text Box",
          "Vertical Box",
          "Horizontal Box",
          "Scroll Box",
          "Input Modes and Mouse Cursor",
          "Border",
          "Overlay",
          "Progress Bar",
          "Slider",
          "Size Box",
          "Scale Box",
          "Widget Switcher",
          "Spin Box",
          "Set Visibility",
          "Combo Box",
          "Key Selector",
          "Background Blur",
          "Removing Widgets",
          "Getting Widgets Without Reference",
          "Remove All Widgets",
          "Expose on Spawn",
          "UI Quiz"
        ]
      },
      "requirements": [
        "Experience: No experience in game development needed.",
        "System Requirements: A computer with a modern CPU (4+ cores, 2014 or newer) and GPU (GTX 1050TI/RX560 or higher) with 16GB RAM or more and an SSD with at least 100GB free space is recommended."
      ],
      "description": "This course is a comprehensive course designed to equip you with the skills to bring any game concept to life. Unlike many courses that guide you through building a single demo game, this course takes a generalized approach, empowering you to create games of any genre and complexity.\n\n\nWhat You’ll Learn:\nBlueprint & C++ Mastery: Dive deep into both Unreal Engine's Blueprint visual scripting and C++ programming, giving you the flexibility to develop games your way.\nMultiplayer & Singleplayer Development: Learn how to create both single and well as multiplayer games with both Blueprint and C++.\nCreating Plugins & Using Libraries: Discover how to extend Unreal Engine’s capabilities by creating your own plugins and integrating external libraries—a feature often overlooked in other courses.\nFull Course Content: With over 13 hours of in-depth content, this course covers everything you need to know, whether you're a beginner or an experienced developer looking to refine your skills.\n\n\nBy the end of this course, you won’t just be able to build a game—you’ll have the knowledge to build any game. No matter what type of game you want to create, this course will give you the tools and confidence to succeed.\n\n\nJoin now and build your dream game!",
      "target_audience": [
        "Beginner game developers wanting to learn Unreal Engine 5",
        "Developers seeking to make a switch from another game engine to Unreal Engine 5",
        "Game developers wanting to build their dream game"
      ]
    },
    {
      "title": "The Ultimate Blender Masterclass!",
      "url": "https://www.udemy.com/course/the-ultimate-blender-masterclass/",
      "bio": "Learn all the Ins and Outs of 3D modelling with Blender!",
      "objectives": [
        "Build professional 3D models for video games and more.",
        "Create 3D artwork in Blender.",
        "Develop with a creative and technical eye.",
        "Design large environments for your character to explore in.",
        "Build 3D models for games in Blender."
      ],
      "course_content": {
        "3D Modeling Fundamentals": [
          "Download and Install Blender",
          "Setting Up Blender",
          "Camera Controls",
          "Emulated Numbpad Camera",
          "Basic Object Manipulation",
          "Frequently Used Tools",
          "Mirror Modifier"
        ],
        "A Beginners guide to Low Poly models in Blender": [
          "Low Poly House",
          "Project Files - House",
          "Low Poly Large House",
          "Project Files - Large House",
          "Low Poly Castle",
          "Project Files - Castle",
          "Low Poly Church",
          "Project Files - Church",
          "Low Poly Lighthouse",
          "Project Files - Lighthouse",
          "Low Poly Longhouse",
          "Project Files - Longhouse",
          "Low Poly Store",
          "Project Files - Store",
          "Low Poly Office Building",
          "Project Files - Office Highrise",
          "Low Poly Eiffel Tower",
          "Project Files - Eiffel Tower",
          "Low Poly Greek Temple",
          "Project Files - Greek Temple",
          "Low Poly Japanese Pagoda",
          "Project Files - Japanese Pagoda",
          "Low Poly Chinese Pagoda",
          "Project Files - Chinese Pagoda",
          "Low Poly Taipei",
          "Project Files - Taipei"
        ],
        "3D Model 32 Low Poly Buildings in Blender for Beginners!": [
          "Low Poly Tent",
          "Project Files - Tent",
          "Low Poly Windmill",
          "Project Files - Windmill",
          "Low Poly Modern Windmill",
          "Project Files - Modern Windmill",
          "Medieval-Style Low Poly House",
          "Medieval-Style Low Poly House Continued",
          "Project Files - Medieval House",
          "Low Poly Colosseum",
          "Project Files - Colosseum",
          "Low Poly CN Tower",
          "Project Files - CN Tower",
          "Freestyle Moon Base",
          "Project Files - Freestyle Moon Base",
          "Freestyle Space Station",
          "Project Files - Freestyle Space Station",
          "Pyramids of Giza",
          "Project Files - Pyramids of Giza",
          "Low Poly Leaning Tower of Pisa",
          "Project Files - Leaning Tower of Pisa",
          "Arc De Triomphe",
          "Project Files - Arc De Triomphe",
          "Mayan Temple",
          "Project Files - Mayan Temple",
          "Shinto Shrine Gate",
          "Project Files - Shinto Shrine Gate",
          "Low Poly Big Ben",
          "Project Files - Big Ben",
          "Great Wall of China",
          "Project Files - Great Wall of China",
          "Forbidden City Main Building",
          "Project Files - Forbidden City Main Building",
          "Parthenon",
          "Project Files - Parthenon",
          "Greek Amphitheatre",
          "Project Files - Greek Amphitheatre",
          "Renaissance-Themed Building",
          "Project Files - Renaissance-Themed Building",
          "Empire State Building",
          "Project Files - Empire State Building",
          "Greek Building",
          "Project Files - Greek Building",
          "London Bridge",
          "Project Files - London Bridge",
          "White House",
          "Project Files - White House",
          "Peace Arch",
          "Project Files - Peace Arch",
          "Washington Monument",
          "Project Files - Washington Monument",
          "Gateway Arch",
          "Project Files - Gateway Arch",
          "Cathedral of Florence",
          "Project Files - Cathedral of Florence",
          "Basilica Di San Lorenzo",
          "Project Files - Basilica Di San Lorenzo",
          "Basilica Di Santa Croce",
          "Project Files - Basilica Di Santa Croce",
          "Palazzo Pitti",
          "Project Files - Palazzo Pitti",
          "Saint Peter's Basilica",
          "Project Files - Saint Peters Basilica"
        ],
        "Beginner's 3D Modelling - 10 Low Poly Buildings in Blender!": [
          "Lighthouse of Alexandria",
          "Mausoleum of Halicarnassus",
          "Temple of Artemis",
          "Colossus of Rhodes (Part 1)",
          "Colossus of Rhodes (Part 2)",
          "Colossus of Rhodes (Part 3)",
          "Statue of Zeus (Part 1)",
          "Statue of Zeus (Part 2)",
          "Statue of Zeus (Part 3)",
          "Taj Mahal",
          "Brooklyn Bridge",
          "Flatiron Building",
          "Las Vegas Hotel",
          "Chrysler Building",
          "Project Files - Mammoth Interactive"
        ],
        "Beginner's 3D Modelling 14 Low Poly Buildings for Games!": [
          "Sear Tower",
          "Golden Gate Bridge",
          "Project Files - Golden Gate Bridge",
          "GM Renaissance Center",
          "Project Files - GM Renaissance Center",
          "Guggenheim Museum",
          "Project Files - Guggenheim Museum",
          "Moai Easter Island Statue",
          "Project Files - Moai Easter Island Statue",
          "Stonehenge Aoteara",
          "Project Files - Stonehenge Aoteara",
          "Brandenburg Gate",
          "Project Files - Brandenburg Gate",
          "Great Sphinx of Giza",
          "Project Files - Great Sphinx of Giza",
          "Temple of Philae",
          "Project Files - Temple of Philae",
          "Christ the Redeemer",
          "Project Files - Christ the Redeemer",
          "Temple of Heaven",
          "Project Files - Temple of Heaven",
          "Petronas Twin Towers",
          "Project Files - Petronas Twin Towers",
          "Star Shape Fort",
          "Project Files - Star Shape Fort",
          "The Royal Ontario Museum",
          "Project Files - The Royal Ontario Museum"
        ],
        "Character Models": [
          "Low Poly Character Models (Part 1)",
          "Low Poly Character (Part 2 + 3)",
          "Character Base Build",
          "Military Character Clothes",
          "Military Character Basic Rig",
          "Spartan Character Base Build",
          "Spartan Character Clothes",
          "Spartan Character Cloth Effects",
          "Female Body Build",
          "Female Spartan Clothes",
          "Spartan Pose",
          "Spartan Clothes Fix",
          "Female Spartan Bones",
          "Female Spartan Bones (Cont'd)",
          "Crusader Body Part 1",
          "Crusader Body Part 2",
          "Crusader Body Part 3",
          "Samurai Body Part 1",
          "Samurai Body Part 2",
          "Samurai Body Part 3",
          "Samurai Body Part 4",
          "Samurai Soldier Conehat",
          "Samurai Soldier TopKnot",
          "Character Models - Source Files"
        ],
        "Build 3D Models of Trees in Blender": [
          "Tree Assets",
          "Pine Tree Assets",
          "Palm Trees Assets"
        ],
        "Build Desert Models in Blender": [
          "Rock Assets",
          "Dead Tree Assets",
          "Cactus Trees",
          "Island Region",
          "Mountain Region",
          "Desert Region and Plateau"
        ],
        "3D Modeling in Unity": [
          "Snow Mountain Region",
          "Unity Mountain Region",
          "Unity Island Environment",
          "Unity Snow Mountain Region",
          "Boombox Asset"
        ],
        "Source Files - 3D Modeling Environments": [
          "Source Files - 3D Environment Models"
        ]
      },
      "requirements": [
        "Blender is free to download. Please download and install Blender before purchasing this course",
        "This course was recorded on a Mac computer, but you can use Blender on a PC."
      ],
      "description": "We at Mammoth Interactive value input from students like you. Feel free to leave us your feedback.\nCreate a professional 3D model for video games and more! No prior knowledge required. Learn to Use and Master Blender\nLearn how to create a full 3D environment as well as multiple props to use for all your 3D modelling projects!\nA wildly successful Kickstarter funded this course\nWhy Blender?\nBlender, like Unity®, is a popular production suite that is free to download. Blender is a revolutionary tool for making 3D art digitally. With Blender, you can make art assets for games, like we do in this course.\nThese courses are project-based. You will not learn a bunch of useless coding practices. At the end of this course, you will have an AWESOME game to use in your portfolio. Taking this course means that you learn practical, employable skills immediately.\nLearning how to code is a great way to jump in a new career or enhance your current career. Coding is the new math! Learning to code will propel you forward for any situation. Learn it today and get a head start for tomorrow. People who can master technology will rule the future.\nEven if you're not an artist, you can make basic art models. You may have heard of Axiom Verge and Stardew Valley. These games are million-dollar successes. But did you know that only one person made each?\nUsually it takes a whole team of people to build a game. But creators Thomas Happ and Eric Barone developed and designed their games by themselves. Now they're millionaires. You can do it, too!\nLet's get started!\nEnroll now to join the Mammoth community!",
      "target_audience": [
        "Anyone who wants their start at making 3D or 2D video games.",
        "Beginners who want to learn how to use Blender."
      ]
    },
    {
      "title": "The Game Developer Bootcamp",
      "url": "https://www.udemy.com/course/the-game-developer-bootcamp/",
      "bio": "Everything You Need To Become A Game Developer From Scratch - Godot, GameMaker, GML, GDScript, And More!",
      "objectives": [
        "Learn to code, this is the most important skill, as it is a universal skill for working with computers.",
        "Program in Python 3, GDScript, and GML, you will have knowledge of 3 programming languages by the end of this course.",
        "Make games, you will come out a game developer from this course, and, will be able to produce both 2D and 3D games.",
        "Transferable knowledge: Python, GDScript, GML are very similar to other languages, which, allows you to learn other languages rapidly if you have this experience.",
        "Learn to write servers and clients, multiplayer/networking is a highly valuable skill to have in the game development world, as not many people know how to network.",
        "GameMaker and Godot aren't just used to make games! They can even be used to make software! If you know how to make a game in these game engines, you already know how to write software!",
        "Learn to become a game developer in one course! Be able to code, make games, and problem solve, all in one course!"
      ],
      "course_content": {},
      "requirements": [
        "Basic computer knowledge, knowing how to open up a web browser, executing a program, and working with the file manager is good enough!",
        "A desktop computer, we recommend Windows 10, but, any OS that can run the game engines in this course can be used",
        "A copy of Godot Game Engine 3, it's free and open source!",
        "A copy of GameMaker Studio 2, either paid or free trial, although paid is preferred",
        "Download Python 3, to run Python 3 on your PC",
        "Any IDE you like, the Python download comes with an IDE (basically a text editor, but, for coding)"
      ],
      "description": "Welcome to The Game Developer Bootcamp. If you're looking to be not just a gamer, but a game maker, you've came to the right course!\nLearn To Work With\nGodot Game Engine 3 - 2D and 3D engine\nGameMaker Studio 2\nGDScript\nGML\nC# (Coming In The Future)\nPython 3\nBuilding a game doesn't have to be difficult, in The Game Developer Bootcamp we will teach you everything. If you know absolutely nothing about programming and about game development, this is the course for you. We welcome all skill levels to our course!\nThe course will start out by teaching you how to code in Python 3, with your first program where you print Hello World. You will receive the most valuable information in the course, by learning to network by writing a server and client that can communicate with each other. We learn Python as it is nearly identical to GDScript, which has only slight differences. You will then use your Python skills in Godot Game Engine 3. We will go into detail on the node system, which, is a challenging, but an incredibly rewarding object system. Then, we will be building a platformer demo, where will build a player, and AI.\nCOMING IN THE FUTURE\nWe will be building a 3D physics demo which will teach you how to use the 3D functions in Godot. C# will also be taught in the course, using the Mono Version of Godot. You will also get a glimpse of VR in Godot.\nFinally we will go into GameMaker Studio 2, we will go over the features of GameMaker Studio 2, with your already obtained knowledge of Godot, going through GameMaker Studio 2 will be easier. We will be building a multiplayer platformer, making a GameMaker Studio 2 client, and a Python server from scratch to communicate.\nArt assets, and quizzes will be available in the course! Check out the curriculum for more details!\nSkills From This Course Can Be Used For\nBuilding your own game\nCollaborative projects or jobs to program for other people\nLearning other game engines\nLearning other programming languages\nUnderstanding how games work\nWriting software (you don't have to just make games with the knowledge in this course!)\nBuild 4 Demos In The Course : Develop Games\nPlatformer - Learn to use the collision and physics engine\n(COMING IN THE FUTURE) Space Shooter -  Learn the art of instancing, an important asset to object-oriented programming\n(COMING IN THE FUTURE) 3D Demo - We will be learning to use the 3D features in Godot Game Engine, swapping between a first-person and third-person perspective and using the 3D physics engine.\nMultiplayer Platformer - We will build a platformer in GameMaker Studio 2, which,  finally our Python knowledge will be put to full use by upgrading it to multiplayer. We will be making a GameMaker Studio 2 client and a Python server.\nAsk questions, chat with our other students across all of our courses, through our Discord server!\nIf you have a Discord account, you can join our discord server to ask questions, request for us to add new things to the course, get one-on-one support from us and other students.\nWhen you finish the course, you will come out as a true game developer, knowing how to use two of the best game engines to date!\nGet the lifetime access to the course today!",
      "target_audience": [
        "Anyone who wants to make a game, but, doesn't know where to start.",
        "Anyone who wants to learn to code in general, if you are absolute beginners and have no idea what Python is, get this course.",
        "Being familiar with some topics in the course is okay! The course is designed for everyone, not just absolute beginners. You can feel free to skip parts that you may not need!",
        "If you want to be a 2D and/or 3D game developer, and want to learn some of the most challenging topics, such as networking"
      ]
    },
    {
      "title": "Game Development: Stats and Skill Systems",
      "url": "https://www.udemy.com/course/game-development-stats-and-skill-systems/",
      "bio": "Learn how to Create Your Own Stat Systems and Balance Them. Learn how to Create a Modular and Easy to Use Skill System",
      "objectives": [
        "You will learn about the game design aspect of stats",
        "You will learn how to code different types of stat systems",
        "You will be able to balance your game",
        "You will be able to create your skill system",
        "You will be able to create a Turn Order System",
        "You will be able to create a Buff/Debuff System"
      ],
      "course_content": {
        "Introdução": [
          "Intro",
          "Unity and Preparing the Environment",
          "Getting a Text Editor"
        ],
        "Understanding Stats and Their Design": [
          "Creating the Project",
          "Unbalance as a Design Decision",
          "Utility vs Flavor",
          "Numerical Gains or Talents"
        ],
        "Coding a Stats System": [
          "StatEnum",
          "Randomizing Stats and Accessing Them",
          "StatSystem",
          "TryToHit",
          "Using Delegates for Modifiers",
          "Delegates with Reference Types",
          "StatModifiers as Components",
          "Multiplicative Modifiers",
          "Cause Damage",
          "Fight",
          "Project Backup"
        ],
        "Balancing D&D-like Stats": [
          "Hits to Kill",
          "Chance to Hit",
          "Formulas for Hit Chance",
          "Calculating Damage",
          "Beginning the Simulation Table",
          "Accuracy vs Dodge",
          "Calculating Stat Growth",
          "Setting Up Other Classes' Tables",
          "Finding Balance for the Hit Rate",
          "Finding Balance for the Damage and HP",
          "Finding Balance for the Other Classes"
        ],
        "Balancing Another RPG-like Stats": [
          "Another Way of Calculating Damage",
          "Adding the new Damage into the Simulation",
          "DEX vs AGI",
          "Remaking the Hit Rate",
          "Defense",
          "DPS",
          "Starting Stats Balance",
          "Growth Stats Balance"
        ],
        "Coding a Flexible and Balanced System": [
          "Project Backup",
          "HitChance Script",
          "Effect Script",
          "Skill Script",
          "Turning HitChance into a Modular System",
          "Heal Effect",
          "Targeting System",
          "Simulator Choosing Skills Automatically",
          "How Much Each Stat Contributes to the Skill",
          "Reorganizing the Project and Script's Names",
          "Skills that Applies Status Effects",
          "Status Effects Stacking or Not",
          "Adding Controls to Changing HP",
          "Skills that Remove Status Effects",
          "Delegates and Events On Turn Begin",
          "Status with Limited Duration",
          "Reapplying Status Duration",
          "Damage and Heal Over Time",
          "Percentage Effects",
          "Skills with Multiple Effects",
          "Creating other types of Targets",
          "TargetsLowHPAlly",
          "Targets Based On Status Effects",
          "Creating the Classes/Jobs",
          "Turn Order System",
          "Adding the Turn Order to our Simulator",
          "Fixing Bugs",
          "Applying the Stats from the Spreadsheets"
        ],
        "Final Project": [
          "Final Project Backup"
        ]
      },
      "requirements": [
        "You need to have a good grasp on Programming Logic",
        "You need to have a good grasp on C#",
        "You need to have a good grasp on OOP",
        "You need to have knowledge of the Unity environment, equivalent to the course Game Development: Basic Games with C# and Unity 3D"
      ],
      "description": "Have you ever thought about creating a complex stats and skills system? Many games need them and it gets harder to make one that can be used in a variety of situations.\nWhat stats to use? The default strength and dexterity? What formulas should I use for hit chance? Can we make a D&D-like stat system? What about a more classic JRPG one?\nHow to make skills ranging from a fireball to a skill that applies a negative status? How can I make this skill use Intelligence vs Wisdom in its calculations? And what if I just want to use percentages?\nIn this course you'll see in depth how to create and balance stat systems. We will discuss about game design decisions and their consequences, then we will create a spreadsheet with stats and try to keep it balanced as different classes level up.\nYou will also use those same stats in a skill system we will develop from scratch in Unity. This system will be able to create damage skills, healing skills, skills that apply buffs and debuffs, etc. They will also use both percentage-based or stat-based calculations.\nAnd to test everything, we will create a simple automated turn-based system.\nI hope to see you there o/",
      "target_audience": [
        "Game Developers",
        "Recently Graduated Programmers",
        "Programmers with little experience on games"
      ]
    },
    {
      "title": "A Complete Guide to Unity's Universal Render Pipeline, URP",
      "url": "https://www.udemy.com/course/unity-urp/",
      "bio": "Learn how to get the best from URP",
      "objectives": [
        "Learn how to setup a Unity URP project",
        "Learn how to convert a Built-in Render Pipeline project to URP",
        "Learn about Lighting and Shadows when using URP",
        "Learn to use and create Renderer Features",
        "Learn about post processing using URP"
      ],
      "course_content": {
        "Introduction": [
          "Welcome to the course",
          "Getting Started with URP",
          "Converting existing scenes",
          "Adjusting quality settings",
          "What have you learnt"
        ],
        "Lighting": [
          "Lighting basics",
          "Real-time lighting and skyboxes",
          "Shadows",
          "Light baking",
          "Light and Reflection Probes",
          "Lighting effects",
          "What have you learnt"
        ],
        "Shaders": [
          "Introduction",
          "Converting custom unlit shaders to URP",
          "Working with Properties and includes",
          "More tips when updating shaders for URP",
          "A URP Toon Shader",
          "Note about next lecture",
          "Using URP Lighting in a shader",
          "Post processing using Renderer Features",
          "Stencils",
          "What have you learnt"
        ],
        "Shader Graph": [
          "A first example",
          "Rim lighting",
          "Reflections",
          "Custom Functions",
          "Refractive Glass",
          "What have you learnt"
        ],
        "URP Tips and Tricks": [
          "Pipeline callbacks",
          "Post processing",
          "Camera Stacking",
          "VFX Graph",
          "What have you learnt"
        ],
        "Performance, Debugging and Profiling": [
          "Performance",
          "Frame Debugger",
          "Profiling",
          "What have you learnt?"
        ],
        "Conclusion": [
          "More information",
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "A beginner level knowledge of the Unity Editor is assumed",
        "Basic C# knowledge is assumed for some lectures"
      ],
      "description": "Hi, I’m Nik Lever and I’ve been working with the URP team at Unity since September 2021. In this course I’ll show you how to use Unity’s Universal Render Pipeline (URP).\nIn 2018, Unity released two new Scriptable Render Pipelines (SRPs): the High Definition Render Pipeline (HDRP) and the Universal Render Pipeline (URP). At some stage URP will replace the Built-in render pipeline so it makes sense to learn how to use the new pipeline. I’ll show you how easy it is to customise the render using features of URP.\nThis course is intended to help Unity developers and technical artists get the best from the Universal Render Pipeline (URP). You’ll learn how to:\n\n\nSet up URP for a new project, or convert an existing Built-in Render Pipeline-based project to URP.\nHow to set up lighting in URP\nAbout shaders, and special effects for URP.\nWe’ll look at the callbacks in URP and how they differ from the Built-in Render Pipeline.\nAnd we look at performance optimisation in URP, and more.\nAs you’ll learn in this course using SRP architecture provides deep flexibility and customization, enhanced performance across the gamut of supported and future platforms, and quick iteration to unleash your creativity.\nMultiplatform deployment is a key factor in the success of many games. Players often play the same game on different devices, such as console and mobile, meaning Unity developers require rendering options that scale up and down for numerous devices, with as few steps and little complexity as possible. URP is a perfect solution.\nAfter several years of dedicated development, URP technology is now solid and production ready. This course will help you leverage its benefits for the successful development of your games. As I said, in the future the default pipeline for Unity will become URP, so it’s high time you understood this technology.\nTo work along with the course, you’ll need Unity 2021 LTS or more recent.  The course resources come as two projects, URP Course – Complete and URP Course – Code Along. If you want to code along with the videos, then use the code along version. But, I’m guessing you worked that out already.\n\n\nIt's time to make the switch to URP and I'll make it as easy as possible.\n\n\nStudent feedback:\n\"Been fumbling my way around URP on my own for a while. This course clarified a lot of things for me and introduced me to some new options and concepts. ... I learned a lot. More than I was expecting. And I definitely see myself coming back to sections of this course for reference in the future.\"\n\"Great and deep course, including lots of subjects in quite some depth and never going easy on the student. I was hoping to get an overview over what URP was roughly about and instead got a deep dive that I never expected in such a short time, with lots of points for where to go next with web links, PDFs, docs and videos. Highly recommended!\"\n\"Really useful information on Unity's URP. Well presented and clearly explained with lots of practical examples to work through.\"\n\"This is an amazing God send. Knowledge is flowing!!! Awesome course for getting up to speed on URP in the modern age. The Teacher is an expert on the subject matter and if you follow the course you might be too.\"",
      "target_audience": [
        "Developers thinking of moving to using URP from the Built-in Render Pipeline",
        "Developers planning to use URP for a new project",
        "Developers wanting to get the best performance from URP"
      ]
    },
    {
      "title": "Game Development: Pathfinding with Unity",
      "url": "https://www.udemy.com/course/game-development-pathfinding-with-unity/",
      "bio": "Learn How to Develop Pathfinding Algorithms, like A*, Dijkstra, Steering Behaviors and NavMesh for the AI of your Agents",
      "objectives": [
        "You will be able to develop a Steering Behaviour System",
        "You will be able to develop a A* Algorithm",
        "You will be able to code a Dijkstra Algorithm",
        "You will be able to use Pathfinding Systems",
        "You will learn how to use the Tilemap and Grid Systems in Unity",
        "You will be able to use Unit's NavMesh"
      ],
      "course_content": {
        "Introdução": [
          "Introduction",
          "Downloading Unity and Preparing the Environment",
          "Getting a Text Editor"
        ],
        "Steering System": [
          "Preparing the Environment",
          "Gizmos",
          "Creating the Circuit",
          "Basic Rotation",
          "Changing to the Next Waypoint",
          "Sensors and Raycasts",
          "Side Sensors",
          "Improving Sensors Code",
          "Avoid Steering",
          "The Problem with Steerings"
        ],
        "Pathfinding Algorithms": [
          "Creating a New Project",
          "SetTile and SetColor",
          "Board and TileLogic",
          "Algorithm and Finding the Objective",
          "Preparing for the Dijkstra",
          "Dijkstra Algorithm",
          "Blocked Tiles",
          "Different Move Costs",
          "Building the Path Based on the Search",
          "Pathfinder's Inheritance",
          "Coding the A*",
          "Understanding the A* Code",
          "Fixing Bugs and Different Types of Lists"
        ],
        "Applying A* in 3D Environments": [
          "Preparing the Environment",
          "Adapting A* to 3D",
          "Creating the World Positions",
          "Detecting Obstacles",
          "A* Agent",
          "WorldPosition to 2D",
          "Automatically Updating the Path",
          "Agent Controller"
        ],
        "Unity's NavMesh": [
          "Baking",
          "Carving",
          "NavMesh Agent",
          "NavMesh Obstacle",
          "Making a Patrol with NavMeshAgent",
          "How Nav Agents FInd Paths Together and Cost Areas",
          "OffMeshLinks",
          "Adding Links Manually",
          "Adjusting OffMesh Speed"
        ]
      },
      "requirements": [
        "You need to have a good grasp on Programming Logic",
        "You need to have a good grasp on C#",
        "You need to have a good grasp on OOP",
        "You need to have knowledge of the Unity environment, equivalent to the course Game Development: Basic Games with C# and Unity 3D"
      ],
      "description": "Have you ever wondered how NPCs and monsters find paths from one point to another?\nIn this course you are going to learn how to create Steering Systems that avoid obstacles so your agent can run a circuit. As you are learning that, you are also learning how raycasts, sensors and Gizmos work.\nYou will learn to code the Pathfinding Algorithms A* and Dijkstra in C# and Unity. They will be made using Unity's Tilemap System so you can very easily understand how they work and what is going on.\nThen, how to apply the A* Algorithm in tridimensional environments, making a controller of agents that can make those individual agents pursue a Player.\nLastly, you'll learn how to use Unity's NavMesh and create a system where agents can jump over empty spaces, climb ladders and all.",
      "target_audience": [
        "Programmers that want to learn pathfinding algorithms in a visual manner",
        "Game enthusiasts that want to learn more about AI/Game algorithms",
        "Game Developers"
      ]
    },
    {
      "title": "Getting Cozy with Shader Forge for Unity 3D",
      "url": "https://www.udemy.com/course/gametutor-shaderforge-part1/",
      "bio": "Learn to create amazing custom shaders for use in your own game development, without any coding!",
      "objectives": [
        "Learn to create your very own Shaders, using Shader Forge for Unity 3D",
        "Understand how to set up and edit a new shader using the Shader Forge User Interface.",
        "Understand how to create everything from basic lighting to more illustrative lighting."
      ],
      "course_content": {
        "Getting Cozy with Shader Forge": [
          "Introduction"
        ],
        "Intro to Shader Development": [
          "Understanding the Workflow",
          "Building a Basic Shader",
          "Building a Custom Lit Shader",
          "Extending our Custom lit Model"
        ],
        "Lighting Models": [
          "Ambient Cube Maps and Lighting",
          "Ambient Cube Maps and Lighting Cont'd",
          "Texture Splatting and Vertex Color",
          "Fake BRDF",
          "Toon Shader"
        ],
        "Where to go from here": [
          "Conclusion"
        ]
      },
      "requirements": [
        "A basic understanding of Unity 3D and how to create materials in Unity",
        "A copy of Unity 3D - https://unity3d.com/get-unity",
        "A copy of Shader Forge for Unity 3D - http://acegikmo.com/shaderforge/"
      ],
      "description": "Shader Forge has brought node based shader development to new heights in Unity. It is fast, efficient, and includes the latest effects in real time rendering, making it a must have tool for any Unity project development. This course is designed for users new to the tool, and will show you how to get up and running, creating stunning shaders in no time. By the end of the course you will have a set of shaders that you can use in your current unity projects, as well as the knowledge of how to create shaders for yourself, as your project evolves. It also touches on how to optimize your shaders for mobile platforms so you can use your shaders for multiple platforms.",
      "target_audience": [
        "This is course is designed for anyone using Unity 3D to create games. It walks a student through the process of creating shaders in a visual way with no coding necessary.",
        "Anyone interested in wanting create custom shaders but doesnt have the coding knowledge.",
        "Anyone interested in creating shaders using a Visual Node based approach"
      ]
    },
    {
      "title": "Learn to create a strategy game in Unity",
      "url": "https://www.udemy.com/course/creating-level-map-unity-3d/",
      "bio": "Deploy army, Create map, Learn Unity and C#, game architecture and Unity scripting API",
      "objectives": [
        "Learn Unity from scratch",
        "Learn C# and Object Oriented Programming",
        "Create a map for strategy games",
        "Deploy armies on the Battle Field",
        "Learn how to manage data in Unity3D",
        "Learn how to design your code in Unity3D, solve complex problems",
        "A large number of examples and case studies are used (Unity3D and C#)",
        "Make 2D game in Unity",
        "Design Patterns"
      ],
      "course_content": {
        "Creating Map (levels, curved road, player's progress)": [
          "Introduction",
          "Installing Unity",
          "Unity Interface",
          "Canvas, Render Modes",
          "Canvas, Canvas scaler, Canvas Raycaster",
          "Background",
          "Prefabs",
          "Creating Levels",
          "All about UI Image",
          "All about UI Button",
          "Variables. Value and Reference types",
          "Hero is on the Map",
          "OOP, Encapsulation, Inheritance and Polymorphism",
          "Access Modifiers",
          "Methods, Parameters, ref, in, out",
          "If-Else Statement, conditional and ternary operators",
          "Movement_p1",
          "Arrays, Multi-Dimensional array, Creating coordinate system",
          "Understanding the Lerp(), p.1",
          "Understanding Lerp(), p2",
          "Creating a curve",
          "Handling Aspect Ratio",
          "Movement, p.2",
          "Movement, p.3",
          "Animation",
          "Animation, p2, Animation curves",
          "Animating character",
          "Scriptable Objects",
          "Loading the Battle Scene"
        ],
        "Deploy Army": [
          "Intro to the Section",
          "Grid Layout Group",
          "Instantiate Icons",
          "Army Composition",
          "C#. Properties",
          "Dragging Icons",
          "Colliders and Triggers",
          "Layer Collision Matrix",
          "Collision Interaction Matrix",
          "Deployment area",
          "Intersection area of Box Colliders",
          "Extension Methods",
          "ExecuteEvents.Execute()",
          "Coroutines",
          "Manipulating the Grid",
          "Dragging Icons, p2",
          "MoveTowards() vs RigidBody.velocity",
          "Booleans, Booleans, Booleans...",
          "Player actions",
          "Archers, get ready!",
          "My Legions",
          "Collider2D.OverlapCollider()",
          "Enemy Army"
        ],
        "Move and Fight": [
          "Intro to the Section",
          "A bit more about Inheritance",
          "Knights are on the March",
          "Constructors",
          "State Pattern",
          "Animating All Heroes",
          "Your Warriors Have Engaged the Enemy",
          "A Knight is looking for target",
          "OverlapCircleAll()",
          "Strategy Pattern in action",
          "Kill Or Die",
          "Where shall we march?",
          "Archers Have Joined the Battle",
          "Realistic arrow flight",
          "Object Pooling: thousand arrows",
          "Catapult fires. Physics 2D",
          "Catapult Deals Splash Damage",
          "Mages have joined the Battle, p.1",
          "Mages have joined the Battle, p.2",
          "Troll pushes back"
        ]
      },
      "requirements": [
        "You can start from scratch"
      ],
      "description": "Create army, deploy regiments, pick heroes and formation, destroy your enemies. You will be able to create a strategy game from scratch. Learn c# and Unity.  During this course you are going to learn how to create a map where a player can choose levels moving a hero from one level to another. A hero will move along the curved road so you are gonna learn how to move gameobjects along the curved line. You will learn how to deploy your army, create unique behavior for each unit. Throw stones, deal splash damage launch tons of arrows, fire magic balls, etc.\nStrategy genre is very popular. However the knowledge you will gain in this course can be used for other genres as well, for example, for the genre of tower defense where monsters must move according to certain rules. Each video will be either practical or theoretical. You can skip the theoretical videos if you already know the topic of the lecture well.\nEach video has the Unity package attached to it, scripting is supported by comments.\nCaptions:\nEnglish\nSpanish (auto-generated)\nGerman  (auto-generated)\nPolish (auto-generated)\nFrench (auto-generated)\nJapanese (auto-generated)\nRussian (auto-generated)\nPortuguese  (auto-generated)\nTurkish  (auto-generated)\nThe topics covered:\nIdeas shared:\nHow to teach a hero to move along a curved line?\nHow to distinguish completed levels from uncompleted levels?\nHow to manage scripts?\nHow to structure the data correctly?\nHow to make an arrow fly in an arc?\nHow to fire the projectile with Physics (Catapult fires)\nUnity and C# topics\nBasics of OOP\nAnimations\nElse-If Statements\nVariables,  Types\nClasses and Objects\nCanvas and Images, anchors and aspect ratio\nObject Pooling\nSplash Damage\nPrefabs, prefab variants in action\nArrays  multi-dimensional array, jagged array\nDesign Patterns\nScriptable Objects\nPhysics2D;\nVectors\nCollision matrices\nC# Methods, ref, out, in\nCoroutines\netc\nThe course is good for those who wants to save time . The course will be updated frequently for additional ideas.",
      "target_audience": [
        "For beginners and experienced game developers"
      ]
    },
    {
      "title": "Learn Raylib: C++ fast and easy graphics library",
      "url": "https://www.udemy.com/course/learn-raylib-c-fast-and-easy-graphics-library/",
      "bio": "Raylib for graphics and game developments which implements OpenGL by using C++.",
      "objectives": [
        "Will be to understand functionalities in programing.",
        "Learn how to Make your own GUI using custom library.",
        "Get better in coding.",
        "Will be able to make your own application.",
        "Learn about 2D Coordinates.",
        "Will be able to use mathematic functions .",
        "Will be able to detect collisions (2D Only)."
      ],
      "course_content": {
        "Introduction": [
          "What is Raylib",
          "Get resources"
        ],
        "Installation & setup": [
          "Setup on Windows (VS code)",
          "Setup on Windows (Visual Studio)",
          "Setup on Linux"
        ],
        "Shapes": [
          "1- Hello Raylib",
          "Explaining C++ Structs",
          "1-Rectangle",
          "2- Triangle",
          "3- Circle and Ellipse",
          "4- Lines and Curves",
          "Explaining Mathematic sine",
          "5- Polygone",
          "5- Color Level",
          "5- Fade color",
          "Explaining C++ Vector",
          "6- Pixels",
          "Explaining Ternary Operation",
          "7- Texture",
          "7- Texture 2",
          "8- Text and font"
        ],
        "User input and Update": [
          "9- Keyboard input",
          "10- Mouse Cursor Input",
          "11- Sine and Time",
          "12- FPS",
          "13- Velocity (Speed)",
          "14- Sine and Cosine",
          "15- Timer Class"
        ],
        "Collisions & Tilemaps": [
          "16- Collision Recs",
          "17- Collision Detection (Theory and Practice)",
          "18- Collided Rectangle",
          "19- Realtime Collision",
          "19- Collision Bug fixed",
          "20- Circle Collisions",
          "21- Point and Circle Collision",
          "22- Tilemap",
          "23- Tilemap Collision",
          "24- Camera 2D"
        ],
        "Projects": [
          "25- Make your First GUI (No External!)",
          "26- Button Hover",
          "27- Rounded Button",
          "28- Measure Text",
          "29- Tile Colors",
          "30- Random Pixel Walking",
          "31- Camera Rotation and Zoom",
          "32- Snake Example",
          "33- Anti Aliasing",
          "34- Window Options",
          "35- Drag and Drop"
        ],
        "Music and GUI (Quraan Application)": [
          "36- Load Music",
          "37- GUI Slider Music",
          "38- Slider Design",
          "39- Time format",
          "40- GUI Play Button",
          "41- Cursor types",
          "42- Back/Next Track icon",
          "43- Back/Next Track action",
          "44- Dark mode"
        ]
      },
      "requirements": [
        "Having computer.",
        "Knowing some basics in programing.",
        "Having hobbies to start."
      ],
      "description": "Hey this is Raylib course for graphics, games ,audio and GUI in this course we will use C++ to work with the graphics,\nAnd try to learn those things you know but you didn't code before like making music player, GUI Buttons, Sliders, Hovers, loading textures , mathematics in programming and one of the most important thing making a Quraan player which can include several things: Loading Surats (Quraan receptions) , GUI, Design, Responsive and publish it.\nThings you learn in this course and will be able for yourself:\nMaking your application.\n2D Rendering.\nDrawing shapes (Lines,Pixels,Rectangles,Circles,eEllipses,Triangles and Polygones).\nLoading Textures\nInteraction with the application (Mouse or Keyboard).\nChecking Collision Detection.\nUsing mathematics for specific movements.\nDrawing Tilemaps.\nMaking internal GUI.\nMaking button and slider.\nUsing 2D Camera.\nLoading Music.\nMaking quraan player.\nWhat is raylib?\nA\\\\ Raylib is a highly modular library. Everything is contained within a small number of well defined, specific and self-contained modules, named accordingly to its primary functionality. Note that some of those modules can be used in standalone mode, independently of raylib library.\nNOTE for ADVENTURERS: raylib is a programming library to enjoy videogames programming; no fancy interface, no visual helpers, no auto-debugging... just coding in pure spartan-programmers way.\n\n\n\n\nPrepared by: Muhammad Khalid",
      "target_audience": [
        "Intermediate students",
        "Game lovers",
        "Developers who interested in C++"
      ]
    },
    {
      "title": "Maya & Unreal: Complete Guide to Fast 3D Animation & Rigging",
      "url": "https://www.udemy.com/course/maya-unreal-complete-guide-to-fast-3d-animation-rigging/",
      "bio": "From Beginners to Pros: Autodesk Maya, Unreal Engine, Modeling, Texturing, Rigging, Unity, Game Development, & Design",
      "objectives": [
        "Animating with Keyframes using Autodesk Maya",
        "Understanding Unreal Engine's A.R.T. rigging tools for Autodesk Maya",
        "Getting started with Maya and understanding the interface",
        "Creating proper skinning & weights",
        "Joint Placement",
        "Character Setup",
        "Character Rigging to prepare for animation",
        "Animating a Production Ready Walk Cycle",
        "Exporting the character rig, and animation to the Unreal Engine"
      ],
      "course_content": {
        "Rigging Introduction": [
          "Animation Rigging Toolset",
          "Course Setup Getting Started with Autodesk Maya",
          "Documentation",
          "Frequently Asked Questions",
          "Udemy Rating System Very Important Info!",
          "Rig Breakdown"
        ],
        "A.R.T Tool Project Overview and Setup": [
          "Character Setup",
          "Z-Up World Space",
          "What is a Skeleton",
          "Creating the Skeleton",
          "A.R.T File Structures"
        ],
        "Skeleton and Joint Placement Overview": [
          "Skeleton Placement",
          "Joint Mover UI",
          "Joint Outliner",
          "Locking the Geometry",
          "Pivots and Rotations",
          "Placing the Joints",
          "Joint Placement Timelapse",
          "Saving the Joints",
          "Joint Placement Timelapse Cont'd",
          "Joint Placement Final"
        ],
        "Deformation Setup Overview": [
          "Deformation Setup",
          "Rig Pose Theory"
        ],
        "Skinning the Character Rig": [
          "Automated Skin Weights",
          "Skin Weights Tools",
          "Paint Operations",
          "Component Editor",
          "Exporting the Skin Weights",
          "Painting the Skin Weights",
          "Prepping for the Mirror"
        ],
        "The Completed Control Rig Overview": [
          "The Control Rig",
          "Loading the Character",
          "Editing the Skin Weights",
          "Re-Skinning the Character",
          "Editing the Control Rig",
          "Editing the Icons",
          "Exporting the Rig",
          "Final Rig Overview"
        ],
        "Advanced Skeleton | Python 3 Supported Auto Rigging Solution": [
          "Advanced Skeleton Vs. ARTv1 | Python 3 & Post Maya 2022 Unreal Mannequin"
        ],
        "Animation Introduction": [
          "Introduction Overview"
        ],
        "Maya Animation Preferences and Best Practices": [
          "Maya Preferences",
          "Hotkeys",
          "Referencing the Rig",
          "Image Planes",
          "Saving Animation"
        ],
        "Production Ready Walk Animation Lower Body": [
          "Overview Rig Controls",
          "Setting Keys",
          "Side View Contact Pose",
          "Side View Down Pose",
          "Side View Passing Pose",
          "Side View Up Pose",
          "Side View Opposite Contact Pose",
          "Front View Translations",
          "Front View Hips",
          "Front View Knees",
          "Animation Playblast"
        ]
      },
      "requirements": [
        "No prior knowledge of Autodesk Maya, Unity, or Unreal Engine needed.",
        "The course utilizes Maya 2018, but prior knowledge of any 3d animation/modeling package is a plus.",
        "Programming is a plus, but not required."
      ],
      "description": "Hi there!\nWelcome, and thanks for choosing Class Creative’s Maya & Unreal Engine from Beginners to Pros: Complete Guide to Fast 3D Animation & Rigging!!\nIn this foundation course we will be learning the fundamentals of Character Rigging for games (specifically for the Unreal engine, but this method will also work for other game engines such as Unity).\nLearn everything necessary for Character Animation and Rigging utilizing Autodesk Maya taught by a AAA game professional with university level accredited instruction!\nAutodesk Maya is the industry standard 3D animation software, understanding the concepts in this course will help you land a job in the game, film, tv, or music industry.  In this course you will learn how to rig and animate your custom created character from scratch.\n\n\nWe will cover the following core skill sets:\nGetting started with Maya and understanding the interface\nJoint placement and theory\nCreating proper skinning & weights\nCharacter setup and rig pose theory\nUnreal Engine's A.R.T. rigging tools for Autodesk Maya\nUnderstanding hotkeys to animate and rig quickly\nCharacter Rigging to prepare for animation\nAnimating with keyframes\nAnimating a production ready walk cycle quickly and efficiently\nExporting the character rig, and animation to the Unreal Engine\nNOTE - Course does NOT include custom character mesh.  ART tools will include mannequin mesh which will allow all animation and lessons to be animated without a mesh or completing a custom rig.  Course is strictly showing the process of rigging YOUR custom mesh character of choice, and animating a high fidelity walk cycle for ANY character regardless of software or rig limitations.  ART tools requires Python 2 Support.  Maya 2022 for Mac OS (Pc/Linux Maya 2022 both currently support Python 2) currently only supports Python 3; the Art tools will require Python 2 which is currently only supported in Maya 2020 on Mac OS.\nUPDATE  - We now provide and support current versions of Maya with a provided Advanced Skeleton Unreal Mannequin rig for the animation section of the course if you choose not to use the ART tools Mannequin rig for Maya 2022.\nWe’ll be utilizing the latest software packages that top tier gaming studios of today use to create all of your favorite titles!\nAutodesk Maya, Unreal Engine’s Maya Animation Rigging Toolset (A.R.T. for short), and the Unreal game engine.\n\n\nWhy Learn From Class Creatives?\nThis course features an accredited university level animation instructor who has over 15 years of experience animating both keyframe, and motion capture based walk cycles for studios such as Naughty Dog, Insomniac, Guerilla Games, Sucker Punch, Google, Disney and more. Whether it be a complex hyper realistic character walk or a cartoony stylized “Disney” walk it ALL starts with the fundamentals which we cover in these lectures. The rigging instructor also has experience with studios such as Disney and Google creating various kinds of rigs for multiple styles and projects.\nWho This Course is For:\nWhether you are just a beginner interested in Character Rigging and Animation, or a Master professional looking to brush up on your current skill set, this course has material you surely won’t want to miss!\nAs with all Class Creative’s courses, we’ve laid out a structure that covers the full spectrum of industry standard character workflows from start to finish.\nPlease remember, if this is your first time creating rigging or animating a 3D character, we highly recommend that you follow the outline carefully, according to how our instructor’s have structured the course. We wouldn’t want you to miss out on any details!\nHowever, if you are an advanced user and are looking for something specific to add to your repertoire feel free to dive in and skip to any sections you’d like to focus on.",
      "target_audience": [
        "Competency using a computer.",
        "Developers who want to add game development to their skill-set.",
        "Anyone with a passion for learning game development.",
        "Anyone who wants the ability to create assets for games.",
        "Anyone Interested in Character Animation",
        "Anyone Interested in Character Rigging",
        "Anyone Wanting to Develop New Skills for Unreal Engine, or Unity"
      ]
    },
    {
      "title": "Unity 5 for Beginners",
      "url": "https://www.udemy.com/course/unity-5-for-beginners/",
      "bio": "Get up and running with game development in Unity 5",
      "objectives": [
        "Understand the foundations of Unity",
        "Work confidently in the Unity interface",
        "Understand Level Design tools",
        "Learn how to create interactive 3D Worlds",
        "Work with meshes, animations, materials, textures, and more",
        "Learn how to build a simple game",
        "Explore useful tips and tricks for accelerating your workflow",
        "Getting started at creating game logic and functionality"
      ],
      "course_content": {
        "Downloading and Installing Unity": [
          "Course Overview",
          "Downloading Unity",
          "The Download Archive",
          "Installing Unity"
        ],
        "Unity Interface and Navigation Tools": [
          "Creating New Projects",
          "User Interface Basics",
          "The Asset Store",
          "Exploring the Example Project",
          "Viewport Navigation"
        ],
        "Assets, GameObjects, and Level Design": [
          "Creating GameObjects",
          "Prototyping Assets",
          "Object Manipulation",
          "Global and Local Space",
          "Object Hierarchies",
          "Import Custom Assets",
          "Exporting Mesh Assets from Blender"
        ],
        "Playing Games and Component Based Design": [
          "Maximization Trick",
          "Using the Game Tab for Play-Testing",
          "Play Mode Versus Edit Mode",
          "Component Based Design",
          "Building a Custom Object"
        ],
        "Creating a Coin Collection Game": [
          "Creating Unity Project",
          "Exploring the Project Folder",
          "Establishing a Level Floor",
          "Project Organization",
          "Creating World Bounds",
          "Level Design",
          "Starting a Coin Object",
          "Creating a Coin Material"
        ],
        "Creating a Coin Collection Game (Continued)": [
          "Working with Prefabs",
          "Organizing a Scene",
          "Getting Started with Scripting",
          "MonoDevelop and Script Attaching",
          "Object Tagging",
          "Exploring the CountDown Script",
          "Creating Spinning Coins",
          "Using Particle Systems"
        ]
      },
      "requirements": [
        "This course requires no previous Unity or game development experience."
      ],
      "description": "Unity Fundamentals is an easy-to-follow exploration of the Unity foundations. It covers the core features every developer needs to know to work effectively. Using practical and hands-on examples, Alan Thorn explores how Unity can be applied creatively to build exciting games that sell.\nUsing easy-to-follow videos, this course explores step by step how to get started with the Unity engine. It shows how to use the interface and how to build levels, and culminates in the creation of a simple game. The core features and fundamentals are explored in a fun and practical way, encouraging the development of real-world projects while establishing a solid understanding of game development principles.\nAbout The Author\nAlan Thorn is a multidisciplinary game developer, author, and educator with 16 years of industry experience. He makes games for PC desktop, mobile, and VR. He founded 'Wax Lyrical Games' and created the award-winning game Baron Wittard: Nemesis of Ragnarok, working as a designer, programmer, and artist. He has written 20 technical books on game development and presented fifteen video training courses. These cover gameplay programming, Unity development, 3D modelling, and animation. He has worked in game development education as a visiting lecturer for the National Film and Television School, as a lead teacher for Uppingham School, and as a senior lecturer at Teesside University.",
      "target_audience": [
        "Unity Fundamentals is targeted at complete newcomers to the Unity engine, including students and hobbyists seeking to enter the games industry."
      ]
    },
    {
      "title": "Make a game with Procedural Backgrounds in UE4",
      "url": "https://www.udemy.com/course/make-a-game-with-procedural-backgrounds-in-ue4/",
      "bio": "Create a game with procedural backgrounds using Unreal Engine 4 Blueprints",
      "objectives": [
        "Learn Unreal Engine 4 essentials",
        "Create levels using procedural tiles",
        "Save and load certain game elements",
        "Create an endless runner character",
        "Good habits and practices for creating and finishing a game"
      ],
      "course_content": {
        "Introduction": [
          "Introduction and Outline",
          "Project Setup"
        ],
        "Character": [
          "Character Setup",
          "Character Animation",
          "Character Death and other Details"
        ],
        "Environment": [
          "Procedural Floors",
          "Building Materials",
          "Background"
        ],
        "Gameplay Features": [
          "Main Menu and HUD (UMG)",
          "Obstacles to avoid",
          "Saving our High Scores",
          "Adding Sound and finishing the project"
        ]
      },
      "requirements": [
        "Unreal Engine 4.25 or later"
      ],
      "description": "This is a beginners course meant to help you get started with procedural levels, but it doubles as a starter guide to start developing your first game. This course is focused on using Unreal Engine 4 and coding with blueprints (Programming without code). This course is aimed at beginners but expects you to be familiar with UE4 user interface and to know what blueprints are. During this course you will develop your own game that will be complete and ready to publish at the end. We will look at many features, including a death event, procedural background creation( which will be valid for other genre's of games) and a save game system allowing you to save your high scores. We will also cover the basics of an endless runner character, which will apply to other genre's of games, or other styles of endless runners. We will also cover dozens of other beginner aspects of game development that are often looked over by other courses because you are expected to know them already. I also try my best to explain things to you, and explain why they need to be the way they are. I give detailed explanations of everything so you not only know what to do and what scripts to use, but also understand scripting so you are able to better script other projects based on the knowledge gathered from this course.",
      "target_audience": [
        "Game Developers and Designers Looking for a starting point",
        "Beginner Game Developers and Designers Who wants to create their first game",
        "More experienced designers looking for an easy way to do procedural environments"
      ]
    },
    {
      "title": "How to Save the World with Gamification, Behavior & Data Viz",
      "url": "https://www.udemy.com/course/save-the-world-with-gamification/",
      "bio": "How to apply gamification, behavior psychology, and data vizualization to social and environmental change",
      "objectives": [
        "Use simple design tools to easily get people to improve their performance",
        "Develop powerful social change projects that leverage technology, data, behavior change tools that make measurable change",
        "Understand the theory and academic research behind why these techniques work",
        "Create ideas and projects that intensley motivate people",
        "Put the learnings of psychology to use to maximize the action people take",
        "Follow a process that unleashes your own epic creativity",
        "Avoid some of the biggest mistakes that make social change projects and startups fail"
      ],
      "course_content": {
        "Start Here": [
          "Welcome",
          "Introduction",
          "Why Gamification",
          "Technique#1 Data",
          "Technique#2 Behavior",
          "Technique#3 Disclosure",
          "Technique#4 Comparison",
          "Technique#5 Leaderboards",
          "Feedback Time!",
          "Technique#6 Color Grading",
          "Technique #7:Star Rating",
          "Technique #8: Heat Maps",
          "Technique #9 : Progress Bars",
          "Technique#10 : Behavior (Star) Charts",
          "Technique # 11 : Feedback Loops",
          "Technique # 12 : Digital Screens",
          "Technique # 13 : Badges",
          "Technique # 14 : Awards",
          "Technique # 15 : Emotive Avatars",
          "Final Task",
          "Summary and inspirational ending"
        ]
      },
      "requirements": [
        "You'll need to identify a cause or issue in the world that you want to change"
      ],
      "description": "Could saving the world be a game?\nHell yeah it can. But you have to do it right.  We're going to learn how to make saving the world the greatest game we've ever played.\nThis course helps designers, sustainability professionals & social change entrepreneurs learn how to implement 15 unique design, data visualization and gamification techniques so you can powerfully motivate your people to create real and measurable change on the causes you care about.\n\nThe secret behind good game design is that it taps into the motivational core of our being. There are many game mechanics we can apply to social and environmental problems that cause people to change in a way that is fun, inspired, and innovative.\nIn this video-course, I will be teaching you how to implement fifteen specific game mechanics for your cause. We will learn means that are either high-tech (for programmers and UI designers), or low-tech (using no more than a pen and big peice of paper).\nThis course is unique to other courses in game design or gamification because it is centred around making real and measurable change in the world, so we have a few different, yet critical, principles to focus on.\nHere's what people have been saying about it:\n\nRebecca Skinner, Stanford Research Associate in Economics and Technology:\n\"This is a very well-thought-out, detailed presentation of the material. My sense of digital design is far from sophisticated and I was extremely impressed to see the many ways that data visualization may be brought to bear on environmental and other sorts of information. All of the projects include detailed explanation of how to carry out design projects, using photostock, graphics, and data manipulation tools, many free, that I was not aware of. Strongly recommended.\"\nEugene Otto, Computer Programmer, Game Programmer & Entrepreneur:\n\"My background is in software engineering, and although I've applied one or two of these gamification techniques in the past, I've never seen them all tied together in such a logical/repeatable design. The lessons are captivating, and move at a fast but comfortable pace. My favorite thing about this course is how Katie presents each technique with several ideas of hi-tech and lo-tech implementations - everything from stickers on walls to interactive hardware displays. This got me thinking more creatively about what's possible in the real world, and outside the confines of just a laptop screen. I highly recommend this course!\"\nTim Bennet, Agricultural Scientist, Investor, Consultant to the United Nations Center for Alleviation of Poverty by Sustainable Agriculture:\n\"I am a complete novice at game design, yet I have found the course to be well designed, beautifully narrated and explained, crystal clear in terms of explanations and digestible in videos of up to 10 minutes each. Katie presents her material brilliantly and passionately. This course and the games it will enable are a great opportunity to explore real innovation at the edge of how people are learning and changing behavior. And it is ridiculously good value! This is a rare resource and I recommend you get engaged and get it done!\"\nSuZen Marie, Community animal rights activist, producer of \"Circuit Breakers TV (a show about alternative energy), off-grid self-sufficiency home owner:\n\"I am so THRILLED to have learned these techniques of Gamification from Katie and how they can be applied to the various causes I am so passionate about! This course is a breath of fresh CLEAN air as Katie has done the work for us by digging deep and getting to the core of what it really takes to instill change in people. This world-changer is SO passionate, not only to her own cause to make real change but, in teaching others how to get REAL RESULTS. My mind has been opened and, after taking Katie's course, I finally feel that there IS hope for those of us wishing to change the world!\"\n\n\nWhat can gamification do for you? It gets results.\nProviding simple digital award to Wikipedia editors increased thier contributions by 22%.\nBy ranking cities by health data. residents supported a new 1% tax to new build bike paths and urban greening.\nPlacing star ratings on consumer appliances increased water efficiency by 25%.\nA sign that shows to quantity of recycled material increase recycling rates by 77%.\nAn emotive owl avator used in a learning app, increased student scores by 23%.\n\n\nWhat is this funny word \"gamification\"?\n\nIf you're new to the wonderful world of gamification, then you've got a treat ahead of you!\n\"Gamification\" is the process of borrowing features we commonly see in games and applying them to the real world. This means we would give out awards, badges, or stars to encourage our audience to complete a task. We also might leverage social competition, use color to indicate performance, or simply track progress in a public way.\nDid you mother or school teacher ever make you a star chart on the fridge and give you a star for every day that you did a thing? That's gamification! (My mum made me one to stop me sucking my thumb, it worked!) Have you ever used an excercise tracker like a Fitbit? That's gamification too. It can as low tech as putting stickers on paper, or as high tech as smartphone app connected to a electronic sensors.\n\n\nStar charts aren't just for kids. They can also be used in an office to enourage employees' eco-friendly behavior. Each employee gets a cute dolphin sticker for each day they recycle. It works, you'd be suprised how powerfully motivating dolphin stickers are, even in corporate office!\nGamification has been studied by universities all over the world and has been proven time and time again to improve human performance.  Gamification doesn't really mean inventing new traditional games like \"Angry Birds for recycling' or \"Scrabble for doing housework\". It's about understanding how we can drive human motivation to do more good things, and these techniques can be applied to just about anything.\nIn this course, \"Save the World with Gamification\". I explain how you can implement 15 unique gamification techniques. Each gamification technique comes with example designs, case studies and evidence from academic research proving how it works to drive change. If you're in the business of trying to get any kind of humans to do any kind of thing (which most of us are!) then I pinky-swear promise there will be some nuggets of gold in this course that you can apply to your special niche.\n\"Katie's approach to doing valuable and impactful work is very well thought out and put together. Her presentation is entertaining, creative and most importantly informative.\nI love her style - simple and engaging. She will really drive you to figure out how you are making social or environmental change through your own work!\"\n\n- Valentina Ferenac,\nSustainability Strategist\nI look forward to seeing you inside the course!",
      "target_audience": [
        "social change entrepreneurs",
        "civic innovators",
        "start ups",
        "designers",
        "engineers",
        "Chief innovation officers",
        "Software developers",
        "Teachers",
        "Not for profits"
      ]
    },
    {
      "title": "Ultimate Game Bootcamp-Godot/GDScript/Shader/C# The Hard Way",
      "url": "https://www.udemy.com/course/ultimate-godot-game-bootcamp/",
      "bio": "Master Godot & GDScript: Build games from scratch, tackle projects, and advance to pro-level development skills!",
      "objectives": [
        "Get comfy building game scenes and assets in Godot, from start to finish.",
        "Write solid code in both GDScript and C# to bring their game ideas to life.",
        "Master fundamental game mechanics (physics, player controls, AI) like a proper pro.",
        "Polish and package their games for different platforms, ready to wow the world."
      ],
      "course_content": {
        "Introduction and Previews": [
          "Introduction",
          "Intro of me",
          "About Q & A",
          "How to Download Source Code for Each Stage?",
          "Classic Classroom and Project Pipeline",
          "Course Content 5 Levels",
          "C# or GDScript Why not BOTH?",
          "Quick Laugh-Deep Dive-When AI is Laggy",
          "Quick Laugh-Deep Dive-New CTO is an \"AI Programmer\"?!",
          "Extra Lecture: Don't Rely Too Much on AI While Learning",
          "Quick Laugh-Deep Dive-Vibe Coder",
          "The Pomodoro Method - Mastering Time and Focus",
          "(Preview)Let's Enter VR World to Test Interaction and Physics",
          "Coke and Katana",
          "My Thoughts-Game Mechanism-Don't make it boring, make it unconventional(Preview)"
        ],
        "Level 1-1 The Fundamentals: GDScript Intro": [
          "I am recording and Updating this section right now",
          "Download Godot 4.3",
          "Quick concept node scene and tree",
          "In Godot Node Scene and Play",
          "Relationship between GDScript and nodes",
          "Create and Attach your first GDScript",
          "What inside the default script",
          "You can also choose online editor",
          "print()",
          "_delta and not use debugger error",
          "_process and print delta",
          "Number-Int-Comment-Print",
          "Int and Float",
          "Variant.Type Constants",
          "Custom class to make it human readable type",
          "String",
          "Boolean",
          "Variable.Name",
          "[Resources] Download Source Code for This Stage"
        ],
        "Deep Dive: Variable Conventions": [
          "Deep Dive Variable Naming and Conventions 1 Casing",
          "Deep Dive Variable Naming and Conventions 2 abbreviation",
          "Deep Dive Variable Naming and Conventions 3 Prefix",
          "Deep Dive Variable Naming and Conventions 4 Bool prefix",
          "Deep Dive Variable Naming and Conventions 5 Temporary Variables",
          "[Resources] Download Source Code for This Stage"
        ],
        "Level 1-2 The Fundamentals: GDScript Operations": [
          "Int Addition",
          "Float Addition",
          "String Addition concatenation",
          "Vector Addition",
          "Array Addition",
          "Array Addition Chest Loot Example",
          "Subtraction",
          "Multiplication",
          "Divide and remainder",
          "Assignment shortcuts",
          "[Resources] Download Source Code for This Stage"
        ],
        "Level 1-3 The Fundamentals: GDScript Operators": [
          "Boolean operators-And",
          "Boolean operators-logic behind multiple conditions",
          "Or Operator and some use example",
          "Not Operator and some use example",
          "Quiz-Combining and or and not",
          "In Operator",
          "== (Equality)check",
          "!= (Inequality)Check",
          "<, <=, >, >= (Comparison Operators)",
          "[Resources] Download Source Code for This Stage",
          "Basic and Short-Circuit",
          "Basic and Short-Circuit Example",
          "Basic or Short-Circuit Example",
          "Short-Circuit can prevent Crash",
          "Boolean context in conditionals",
          "Boolean context example-enemy spawner",
          "[Resources] Download Source Code for This Stage"
        ],
        "Level 1-4 The Fundamentals: GDScript Functions Basics": [
          "The basic structure of function",
          "Parameters in function and default value",
          "Multiple parameters and your assignment",
          "Quiz-answer-Move the order of parameter",
          "Quiz-answer-make the parameter optional",
          "Return Value-dungeon and Dragon rolling critical hit example",
          "49.Return Value-dungeon and Dragon execute random roll and multiple try"
        ],
        "Level 1-5 The Fundamentals: GDScript Scope": [
          "Scope-script-level variable",
          "Scope-local-level variable(inside functions)",
          "Assignments-Break the Boundary and Access the Local Viable",
          "Assignments-Solution 1-Using Return to Store and Pass Value PART 1",
          "Assignments-Solution 1-Using Return to Store and Pass Value PART 2",
          "[Resources] Download Source Code for This Stage",
          "Assignments-Solution 2-Store It in a Script-Level Variable",
          "[Resources] Download Source Code for This Stage"
        ],
        "Level 1-6 The Fundamentals: GDScript Conditional Statement": [
          "Condition statement-1-If-elif-else",
          "Condition statement-2-If-elif-elif-elif-else"
        ],
        "Level 2: Building Core Skills(Updating)": [
          "I am recording and Updating this section right now"
        ],
        "Level 2-1: Before Player Hit The Start Game Button": [
          "Coke and Katana",
          "Peak Behind the Scene- 1-How did I made the Katana Loop",
          "Peak Behind the Scene- 2-How did I made the Strange Factor",
          "Peak Behind the Scene- 3-How did I made the Crazy Factor",
          "Peak Behind the Scene- 4-How did I made the Full Body Loop",
          "Peak Behind the Scene- 5-How did I add the effect using procreate and fcp",
          "Peak Behind the Scene- 6-Preview of the Menu cinematic"
        ]
      },
      "requirements": [
        "No programming experience needed. I’ll teach you everything you need to know from scratch."
      ],
      "description": "Are you ready to embark on an exciting journey to become a professional game developer? Ultimate Game Bootcamp-Learn Godot / GDScript/ C# The Hard Way is designed to take you from absolute beginner to a top-level game developer. Whether you're starting from scratch or looking to level up your skills, this course has everything you need.\nUsing the powerful and free Godot Engine, you’ll master GDScript while building games step by step. Starting with the basics, you’ll learn how to navigate Godot’s interface, create 2D and 3D projects, and write clean, efficient code. As you progress, you’ll dive deeper into physics, UI/UX design, shaders, multiplayer networking, AI, and optimization.\nThis course takes a hands-on approach, focusing on building real-world projects. You’ll create platformers, roguelikes, multiplayer shooters, and even an open-world RPG. By tackling one project after another, you’ll gain practical experience and learn how to solve problems like a professional developer.\nBy the end of the course, you’ll have a portfolio of completed games, in-depth knowledge of Godot, and the confidence to launch your own projects or pursue a career in game development. No fluff—just a solid path to mastering game creation. Let’s get started! Happy Building Your Dream Game!  Enjoy!",
      "target_audience": [
        "Aspiring Indie Game Developers: Individuals who are eager to create their first 2D or 3D games using Godot, aiming to build engaging and polished gaming experiences from the ground up.",
        "Software Developers Transitioning to Game Development: Experienced programmers—especially those with a background in Python—looking to branch out into GDScript or C#, leveraging their existing coding skills to master game mechanics and engine workflows.",
        "Tech Enthusiasts and Creative Entrepreneurs: Innovators who have a passion for interactive experiences, seeking a comprehensive entry point into Godot to bring their original game concepts to life on various platforms.",
        "Students and Self-Learners in Computer Science: Learners desiring hands-on practice in game design and development, enhancing their academic or personal projects by gaining practical experience in scripting, level design, and asset management within Godot."
      ]
    },
    {
      "title": "How To Program Your Own Breakout Game using Visual C#",
      "url": "https://www.udemy.com/course/how-to-program-your-own-breakout-game-using-visual-csharp/",
      "bio": "Practice C#.NET with WinForms and Visual Studio Building a 2D desktop game with collision detection, sounds and images!",
      "objectives": [
        "Learn the basics of building a WinForms Application on Windows using C#",
        "Build a fully functional Breakout Game Clone as a Windows Application in C#",
        "Learn how to build game logic and develop simple games",
        "Learn how to draw basic graphics inside Winforms applications",
        "Learn how to animate objects on screen",
        "Learn how to use timers to mimic game loops"
      ],
      "course_content": {
        "Breakout Game using Visual C# and Winforms": [
          "Course Overview",
          "About Your Instructor",
          "Download Game Assets (REQUIRED)",
          "Download The Source Files (OPTIONAL)",
          "Creating the C# Project in Visual Studio",
          "Adding Background Image",
          "Adding the Game Paddle",
          "Moving the Game Paddle",
          "Adding the Game Ball",
          "Animating the Game Ball",
          "Detecting collision with game paddle",
          "Adding the Game Blocks",
          "Drawing Blocks Using Graphics",
          "Detecting Ball Collision With Blocks - Part One",
          "Detecting Ball Collision With Blocks - Part Two",
          "Adding the Game Menu - Part One",
          "Adding the Game Menu - Part Two",
          "Implementing Menu Commands",
          "Adding Game Score",
          "Finishing Touches - Part One",
          "Finishing Touches - Part Two",
          "Adding Sounds to our game!",
          "Adding Keyboard Support for Moving the Paddle",
          "Congratulations!",
          "How to fix ball speed?"
        ]
      },
      "requirements": [
        "Installation of Visual Studio (Recommended: Free Community Edition 2015 or 2017 or any other version)",
        "Understanding of Windows environment and applications",
        "MUST HAVE Basic knowledge of C# language like writing functions, if conditions and loops",
        "MUST HAVE Basic Familiarity with .NET Framework and Winforms"
      ],
      "description": "LEARN HOW TO QUICKLY BUILD A BREAKOUT GAME CLONE ON WINDOWS USING VISUAL C# and WinForms\nIf you want to learn and experience what it takes to build a game on Windows using Visual C# and Winforms then I hope you will find this course as exciting as it is informational.\nWHAT YOU ARE GOING TO LEARN:\nThe techniques  you need to build a complete Breakout game clone with Visual C# on Windows\nUnderstand how to use WinForms and how to create desktop applications using C#\nHow to draw graphics inside Winforms\nHow to use timers to mimic game loops\nHow to play sounds\nHow to embed images and sounds as resources inside your application\nHow to handle mouse and keyboard events\nHow to load images and display images using WinForms\nYou have 30-day money back guarantee from Udemy, so there is nothing to lose! I made my best efforts to provide high quality content and to make this both useful and fun to watch.\nLet’s get started today! Enroll now!\nWHAT'S IN THE COURSE?\nComplete Breakout Project in C# on Windows\nUnderstand how to write efficient C# code\nLearn how Windows applications work\nFull source code of the project we will build\nAll game assets used in the game are included for free\nCOURSE REQUIREMENTS:\nBasic knowledge of C# (or any similar language like C/C++, Java....etc)\nBasic understanding of loops, functions, variables and if conditions...\nWindows 7 or newer\nVisual Studio installation – Visual Studio 2015 Community Edition (Recommended) or Newer\nENROLL TODAY TO START BUILDING YOUR OWN BREAKOUT GAME AND HAVE FUN PLAYING IT",
      "target_audience": [
        "This course is an easy step by step instructions to build a simple Windows application in C#",
        "Anyone with some basic knowledge on Programming"
      ]
    },
    {
      "title": "Getting Cozy with Unity UI",
      "url": "https://www.udemy.com/course/gametutor_getting-cozy-with-unity-ui/",
      "bio": "Learn how to utilize the new Unity UI system to build functional User Interfaces for your Unity game development!",
      "objectives": [
        "Create your very own User Interfaces in Unity 5",
        "Understand how to create more advanced Scroller UI",
        "Build your own Screen Manager to switch UI screens",
        "Modify your UI to any style you want"
      ],
      "course_content": {
        "UI Basics": [
          "Course Introduction",
          "Understanding the Canvas",
          "Understanding the Canvas Cont'd",
          "Simple Screen Switching",
          "Understanding Layout Components",
          "Completing the UI Flow",
          "Creating Sliders",
          "Creating Scrollers",
          "Basic UI Animation with Mechanim",
          "Basic Screen Manager",
          "Conclusion"
        ]
      },
      "requirements": [
        "You will need a copy of Unity 4.6 or Higher",
        "Some proficiency with Unity C#"
      ],
      "description": "Well, we finally have a very slick UI system, for Unity 3D. This course is dedicated to Teaching you the basics of using the new UI system. The contents of these lessons is a culmination of learning how to use the new UI system, while it was in Beta, and in final release projects.\nWe will cover the basics of adapting your UI to multiple resolutions, on how to utilize the new Event system, and how to set up more professional UI controls. By the end of this course you will have built your own frontend UI, and learn how to develop a UI system for your own projects.",
      "target_audience": [
        "Anyone interested in Learning the new Unity UI system",
        "If you have no Unity experience, you should start with a basic course first",
        "If you havent used C# in Unity then a quick intro course is recommended"
      ]
    },
    {
      "title": "Learn Construct 2: Creating a top-down shooter in HTML5!",
      "url": "https://www.udemy.com/course/learn-construct-2-creating-a-top-down-shooter-in-html5/",
      "bio": "Construct 2: MADE EASY! How to make a top-down shooter with HUD elements, enemies, dynamic projectiles and more!",
      "objectives": [
        "Implement simple solutions to advanced topics such as Enemy AI and Player Shooting",
        "Learn how to create and separate event sheets for organized and efficient code.",
        "Learn the basic principles of game feel and how to make our game not be dull",
        "Learn the basic principles of game feel and how to make our game not feel dull.",
        "Be comfortable splitting up our game into manageable chunks and adding minor details as you progress.",
        "Learn how to use the shadowcasting abilities to make our levels have more depth.",
        "Create enemy AI that are not overly complicated but complex enough to beat you before you have a chance!",
        "Create a dynamic camera using C2's built in Scroll To and lerp function",
        "Know how to make functions accept parameters for things like bullet accuracy and screenshake!",
        "Push the free edition of C2 to it's limits however leaving a lot of room to tidy up with the personal edition!",
        "Experience very frequent UPDATES to lectures and course downloads!",
        "Learn intuitive ways of programming without actually having to type out code. C2 makes it the perfect balance for those who think logically."
      ],
      "course_content": {
        "Welcome to creating your top-down shooter!": [
          "Introduction / Proof of what we are making!",
          "Who Am I ? Why take this course?"
        ],
        "Setting up our project file": [
          "Setting up our layout",
          "Importing our sounds"
        ],
        "Programming our player": [
          "Player Movement: Part 1",
          "Player Movement: Part 2",
          "Player Movement: Part 3",
          "Player Animations",
          "Player Shooting: Part 1",
          "Player Shooting: Part 2",
          "Player Shooting: Adding a muzzle flash",
          "Player Shooting: Adding bullet accuracy",
          "Player Health & Death",
          "Player programming quiz!",
          "Congratulations!"
        ],
        "Creating our Level": [
          "Adding our level objects",
          "Adding shadows",
          "Adding our dynamic camera",
          "Adding destructible objects and bullet collisions",
          "Adding screenshake",
          "Adding our HUD",
          "Level Design Quiz!",
          "Congratulations!"
        ],
        "Programming our Enemy": [
          "Enemy set-up",
          "Enemy AI: Line of sight",
          "Enemy Behavior: Part 1",
          "Enemy Behavior: Part 2",
          "Enemy AI: Shooting bullets",
          "Enemy Collision",
          "Enemy Tracking",
          "Enemy AI Quiz!",
          "Congratulations!"
        ],
        "What's next?": [
          "Meaning: Game over",
          "Meaning: Random enemy spawning and finale!",
          "Post your projects!"
        ],
        "Updates": [
          "What would you like next?",
          "YOUR FEEDBACK | Quiz",
          "BONUS: Creating an Unbounded layout",
          "BONUS: Adding bullet shells"
        ]
      },
      "requirements": [
        "At least Construct Free Edition",
        "No programming knowledge required although some previous experience is helpful"
      ],
      "description": "==================================================================\n\nHow to make an \"top-down shooter\" in Construct 2!\n==================================================================\nWhat is the course about?\n++++++++++++++++++++++++++++\nThis course is about creating an intense top-down shooter game. By using Construct 2 and it's extremely fast ability to get a thought out of your head and into code, we are going to be diving right into creating our game. This course is about understanding how we can take a very advanced topic and make it simple all thanks to Construct 2.\n=======================\nWhat material is included?\n=======================\nIn the beginning of the course you have access to all of the assets used (art, animations, SFX) so you can make the same game along with me. In the download you will find the .capx we create at the end of the lecture!\n++++++++++++++++++++++++++++\nWhat does this course include?\n++++++++++++++++++++++++++++\nSimulated controls\nConfigurable shooting\nBullet accuracy\nDynamic Camera\nCamera Screenshake\nEnemy AI using Line of Sight\nEnemy tracking\nFunctions and parameters\nMuzzle Flash\nPlayer health and death\nEnd game\nRandom enemy spawning\nInstance variables\nBullet shells\nPushing the limits of Construct Free but great for C2 Personal\nAll assets are free to use for commercial use.\n+++++++++++++++++++++++++++\nThe course is always being updated as is the game engine we are making!\n=======================\nWhy take this course?\n=======================\nThe lectures are quick and easy to understand. If you follow along with the provided assets you will easily find yourself able to create any kind of game once the course is over. I personally think that as soon as you finish the course you are going to want to add so much more to your own game that you are going to have no choice!\n++++++++++++++++++++++++++++\nIs this course right for me?\n++++++++++++++++++++++++++++\nIf you have never programmed before this course is perfect for you. If you have programmed before this course is ALSO perfect for you. Whether you are just starting out or an advanced user you will find some of this information helpful.\n=======================\nHow is this course structured?\n++++++++++++++++++++++++++++\nI have structured this course in a way where we add the important things first and create the gameplay second. By creating and fine tuning the mechanics as we go we are able to understand everything Construct 2 has to offer and create an awesome game on the way!\nI hope to see you in the discussion!\n- Jeremy",
      "target_audience": [
        "This course is for the person who just wants to HONE THEIR CRAFT and make a video game.",
        "If you don't like diving right into the content and want a course that explains every little iota, this course is not for you.",
        "Those who have always wanted to make a game like this but thought it was too complicated will love this course!"
      ]
    },
    {
      "title": "Unit Testing For Unity 6.2 & C# - Lifetime Access",
      "url": "https://www.udemy.com/course/unit-testing-for-unity/",
      "bio": "Learn Unit Testing, Test-Driven-Development (TDD) | Unity-Specific Approach | Unity 6 C# Source-Code",
      "objectives": [
        "All downloadable code updated for Unity 6",
        "Learn unit testing & TDD fundamentals",
        "Create new Unity projects with confidence, performance, and scalability",
        "Avoid the common pitfalls with creating, maintaining, and scaling Unity projects",
        "Plan & create consistently clean code",
        "Reinforce knowledge with assignments",
        "Go deep, included Unity 6 projects",
        "Get your game-dev dream job!"
      ],
      "course_content": {
        "Course Introduction": [
          "Course Overview",
          "Why Unit Testing?",
          "Benefits of Unity Testing",
          "Unit Testing Example & Commentary",
          "Course Philosophy",
          "Course Resources",
          "Udemy's Early Review Prompt",
          "Section Quiz",
          "Section Assignment",
          "Section Summary"
        ],
        "Unity Overview": [
          "Unity Overview",
          "Unity Structure",
          "Unity Code (C#)",
          "Section Quiz",
          "Section Assignment",
          "Section Summary"
        ],
        "Software Design": [
          "Software Design Overview",
          "Section Quiz",
          "Section Summary"
        ],
        "Unit Testing - Fundamentals": [
          "Unit Testing - Overview",
          "Unit Testing - Setup",
          "Unit Testing - Creating Tests",
          "Unit Testing - Test Driven Development (TDD)",
          "Section Quiz",
          "Section Assignment",
          "Section Summary"
        ],
        "Unit Testing - Workshops": [
          "Workshops - Overview",
          "My Math System - Workshop",
          "My Math System - Assignment",
          "My Data Loader (Basic) - Workshop",
          "My Data Loader (Basic) - Assignment",
          "My Data Loader (Advanced) - Workshop",
          "My Data Loader (Advanced) - Assignment",
          "Character (Basic) - Workshop",
          "Character (Basic) - Assignment",
          "Character (Advanced) - Workshop",
          "Character (Advanced) - Assignment",
          "Character (Physics) - Workshop",
          "Character (Physics) - Assignment",
          "Prefab Loading - Workshop",
          "Prefab Loading - Assignment",
          "Scene Loading - Workshop",
          "Scene Loading - Assignment",
          "Workshops - More...",
          "Section Summary"
        ],
        "Unit Testing - Lessons": [
          "Lessons - Overview",
          "Lessons - Pure Functions",
          "Lessons - Test Doubles",
          "Lessons - Unity C# Demo",
          "Section Summary"
        ],
        "Unit Testing - Artificial Intelligence, & ChatGPT": [
          "Unit Testing & AI - Overview",
          "Unit Testing & AI - Creating Production Code",
          "Unit Testing & AI - Creating Unit Test Code",
          "Section Summary"
        ],
        "Unit Testing - Automated Tests, Builds, & CI/CD": [
          "CI/CD - Overview",
          "CI/CD - Unity Cloud Build",
          "Section Summary"
        ],
        "Reference Links": [
          "Reference Links"
        ]
      },
      "requirements": [
        "COMPUTER: Windows or Mac",
        "SOFTWARE: Course includes links. All are free (Unity, C# Editor, & Web Browser)",
        "EXPERIENCE with Unity: Intermediate / Advanced. Including several months or more with Unity fundamentals",
        "KNOWLEDGE with C#: Including Classes, Interfaces, Methods, Properties Events, & OOP"
      ],
      "description": "Welcome to Unit Testing For Unity!\n\n\nUNITY 6:\nCourse Content: These lessons apply to current and future versions of Unity 6\nCourse Downloads: All downloadable source-code has been updated to Unity 6\n\n\nCAPTIONS:\n• English: All videos have English subtitles. (Audio/Video/Text Content is in English)\n• French: Toutes les vidéos sont sous-titrées en Français. (Audio/Video/Text Content is in English)\n• Portuguese: Todos os vídeos têm legendas em Português. (Audio/Video/Text Content is in English)\n• German: Alle Videos haben Deutsche Untertitel. (Audio/Video/Text Content is in English)\n• Spanish: Todos los vídeos tienen subtítulos en Español. (Audio/Video/Text Content is in English)\n• Turkish: Tüm videolar Türkçe altyazılıdır. (Audio/Video/Text Content is in English)\n\n\nWe all start projects with the best of intentions. But during development we often find our projects do not meet our expectations for organization, scalability, and for our quality of life as developers.\n\n\nThis course gives you the training to create and maintain robust Unity classes and architectures.\n\n\nFEATURES:\nRockstar content - Everything you DO need. Just the most relevant, powerful info!\nPunk-rock editing - Nothing you DON'T need. No \"ums\", no waiting, no fluff!\n\n\nBENEFITS OF UNIT TESTING:\nEarly Bug Detection - Running unit tests after every build helps in identifying any breakage at the earliest possible instance, saving time and resources\nRefactoring Confidence - With a comprehensive suite of unit tests, developers can refactor code more aggressively and with assurance, knowing tests will reveal any introduced errors\nBetter Design -Writing unit tests forces developers to consider the modularity and structure of their code, often leading to better-designed and more maintainable software\n\n\nBENEFITS OF TEST-DRIVEN-DEVELOPMENT (TDD):\nImproved Code Quality - TDD encourages simple designs and inspires confidence, as code changes are verified by tests frequently\nDocumentation Benefit - Tests written in TDD can serve as a form of documentation, showing how the system is intended to behave\nReduction in Errors - TDD typically results in a lower bug density in production, as tests are written before the code that must pass them\n\n\nTAKEAWAY:\nAfter this course you will be confident to design and develop well-designed and tested Unity classes. Learn to write robust C# code that your team will be proud of.\n\n\nINCLUDED SECTIONS:\nCourse Introduction - Set the vision and goals for the course. Learn the many benefits of MVC architecture for your projects\nUnity Overview - Review the popularity and power of Unity as a game engine. Discuss the structure of the systems within and how MVC architecture is a welcome addition\nUnit Testing Fundamentals - We'll add the power of Unit Testing and Test-Driven Development ( TDD ). With this training you will naturally produce cleaner, more readable, and manageable code\nUnit Testing Workshops - Take the fundamentals and apply them through a series of isolated demos. Each demo has production code, edit-mode tests, and play-mode tests. Perform assignments based on what you have learned\nUnit Testing Lessons - Dive deep into the art and science of Unit Testing. Get the theory, apply the practices, and explore topics including \"Pure Functions\" & \"Test Doubles\"\nUnit Testing with CI/CD - Master continuous integration, continuous deployment. Learn the benefits and complete the setup for your project\nAnd More!\n\n\nINCLUDED UNITY C# SAMPLE PROJECTS:\n1. Math System - A simple calculator without a rendered view. This is a great place to learn the fundamentals of testing without the complications of Unity MonoBehaviours or rendered graphics\n2. Data Loader Basic - Learn how to handle async/await operations and test for robust results\n3. Data Loader Advanced - We create more stability and confidence with C# code refactors\n4. Character Basic - A game character that moves with user input. Add Unity MonoBehaviours and rendered graphics to the challenges of testing. Learn to master the challenges\n5. Character Advanced - A game character that moves with user input. Learn to test asynchronous methods such as multi-frame movement\n6. Character Physics - A game character that uses physics. Learn to isolate dependencies and refactor systems efficiently\n7. Testing Prefabs - Full demo\n8. Testing Scenes - Tips and tricks\nPlus More!\n\n\nINCLUDED ASSETS:\nSection Videos - High-quality HD video content covering all course topics\nSection Source Code- Full C# scripting and complete Unity projects included for download\nSection Challenge Assignments - Expand your knowledge with practical, relevant coding trials\nSection Quiz  - Ensure you digested all vital info before moving forward\n\n\nWHY LEARN UNITY?\nUnity is a versatile game engine which can be used for creating simulations, prototypes, and games\nOver 70% of the top 1000 mobile games are created using Unity Technology\nDeploys to PC, Xbox, PlayStation, iOS, & Android, WebGL, AR/VR, and more!\n\n\nWHY LEARN UNIT TESTING?\n1. Accelerate new features - With testing, developers focus on a small batch of code at a time, not moving on to the next bit until they are done with their batch. This gets results\n2. Level-up your maintenance - With Test-Driven Development ( TDD ), developers naturally produce cleaner, more readable, and manageable code\n3. Fail fast & Communicate clearly -  Get feedback quickly and improve your solutions. Leave a legacy of unit testing in your codebase which will serve as the best, living documentation\n\n\nWHY LEARN WITH SAMUEL ASHER RIVELLO?\nSam is a Unity Certified Developer with over 20 years of experience creating games and teaching software design\nSam empowers game teams with custom editor tooling for improved workflows ( Game Design, Level Design, 3D Modelers, 3D Animators )\nSam is an author and editor, including Adobe, Future Publishing UK, Packt Publishing, and O’Reilly\n\n\nWHY WAIT?\nAvoid the common pitfalls with creating, maintaining, and scaling your Unity classes\nYou can't afford NOT to use Unit Testing and Test-Driven development on your projects\nLet's do this!",
      "target_audience": [
        "Learn to CREATE Unity projects with confidence, performance, and scalability",
        "You will AVOID the unmanageable challenges of poor class design in Unity projects",
        "You will COLLABORATE on high-quality, profitable Unity projects with talented teams"
      ]
    },
    {
      "title": "Unity Game Development: Build 2D & 3D Games",
      "url": "https://www.udemy.com/course/unity-game-development-build-2d-3d-games/",
      "bio": "Unity Game Development & Design, Learn Unity Android Game Development with C# & Unity",
      "objectives": [
        "Learn to code in C#, a powerful programming language, from 0 to hero.",
        "Get experience using Unity 2018",
        "Create 3D and 2D games that could be used for your portfolio.",
        "Create level lock/unlock system.",
        "Learn how object oriented programming works in practice.",
        "Develop a good logic for game creation."
      ],
      "course_content": {
        "Introduction": [
          "Download Unity And Looking At Its Interface",
          "The Cube, Your First Game"
        ],
        "C#": [
          "Variables",
          "Operations With Variables",
          "Conditional Statments",
          "Loops",
          "Arrays",
          "Functions",
          "Functions And Arrays",
          "Constructions",
          "More About Functions",
          "Data Encapsulation",
          "Classes And Objects",
          "Inheritance",
          "Monobehaviour",
          "Static Functions",
          "Delayed Function",
          "Delegates",
          "Enums",
          "Arrays and Lists"
        ],
        "Brick Breaker": [
          "Importing Assets",
          "Paddle Movement",
          "Ball",
          "Brick",
          "Brick2 And New Level",
          "Main Menu",
          "Gameplay UI",
          "Game Controller",
          "Gameplay Controller",
          "Setting Up Score And HighScore",
          "Life Counter",
          "Changing Levels",
          "Adding Power-Ups",
          "Scripting Power-Ups",
          "Finishing Power-Ups",
          "Adding Sound Effects"
        ],
        "Flappy Bird": [
          "Importing Assets",
          "Bird Jump",
          "Bird Rotation",
          "Bird X Movement",
          "Camera Follow",
          "Adding Ground",
          "Adding in Pipes",
          "Spawner",
          "More Into BirdScript",
          "Gameplay UI",
          "Main Menu UI",
          "Gameplay Controller",
          "Implemeting HighScore",
          "Sound Effects",
          "Filling Up"
        ],
        "3D Runner": [
          "Importing Assets",
          "Player Movement",
          "Player Right or Left Movement",
          "Jump",
          "Jump Animations",
          "Smothering Players Jump",
          "Camera Follow",
          "Adding Background",
          "Coins And Traps",
          "Adding Grounds And Coins",
          "Level Generator",
          "Collectors",
          "Players Death",
          "Score Controller",
          "Speeding Up Player"
        ],
        "Penguien 2D Platformer": [
          "Importing Assets",
          "Adding Player And Players Animations",
          "Player Movement",
          "Continuing With Players Movement",
          "Jump",
          "Smothering Things Up",
          "Setting Up Monsters",
          "Monster Walk",
          "Killing Our Monster",
          "Monster Bird",
          "Monster Pipe",
          "Player Shooting",
          "Star And Fruits",
          "Castle",
          "SawBlade Trap",
          "Fire Trap",
          "Creating Our Level",
          "BackGround And Camera Follow",
          "Before You See Video About UI",
          "UI",
          "Gameplay UI",
          "Menu HomeScreen",
          "Scripting Game Menu",
          "Level",
          "Game Manager",
          "Gameplay UI",
          "Finishing Our UI",
          "World 1-2",
          "World 1-3",
          "World 2-1",
          "Boss",
          "World UI",
          "Menu World Choose",
          "Sound Manager",
          "Music And Sound Buttons",
          "Mobile Movement"
        ]
      },
      "requirements": [
        "Mac or PC capable of running Unity3D"
      ],
      "description": "Want to learn how is one of the most popular games like Flappy Bird, Temple Run, 2D Platformer, Brick Breaker built?\nWell in this course we will be going through these games with ease starting off simple with our first game \"The Cube\" which is made in less than one hour and from there we will create more and more complex games.\nNever coded before, not even one line of code?\n\nIn this course, you will learn C#, as you know one of the most used programming languages in game development and in Unity.\nIt doesn't matter if your a beginner or an advanced game developer information in this course will help you a lot throughout your career as a game developer. Developing awesome, stunning, commercial quality games on a variety of platforms in the latest version of Unity 2018, plus with this knowledge and logic, you will be able to make games on your own, which is pretty amazing right? But there is more to it:\n\nUnity's interface\nImporting Assets\nBasic AI\nSound FX And Music\nBoss Fights\nLearn How To Use Unity's UI System\nProcedural Level Generation\nCreate And Animate Menus\nSave And Load Your Game Data\nLock/Unlock System For Stages\nThat And Much More Is Awaiting You In This Course\nSo if you ever wanted to learn to code and make games this course is right for you no matter if your just a beginner or a bit more advanced developer that knows to code what you will learn is quite amazing.\n\n\nSo if you ever wanted to learn to code and make games this course is right for you no matter if your just a beginner or a bit more advanced developer that knows to code what you will learn is quite amazing.\nIf You ever get any question or if you are interested in something more than explained, just ask a question I will respond as soon as possible.\n0 Chance For Risking, How??\nWell, If You are not satisfied with course there is always an option for a refund within 30 days of enrolling and Its full refund of your money.\nSo what are you waiting for? Enroll now and start making awesome games.",
      "target_audience": [
        "Beginners who are interested in programming or game development",
        "Some experience in programming can help but it's not necessary.",
        "Anyone who is willing to work hard.",
        "Anyone who wants to improve as a game developer or learn such skill.",
        "Experienced Game Developers."
      ]
    },
    {
      "title": "Graphics Programming with Vulkan and C++ [2025]",
      "url": "https://www.udemy.com/course/graphics-programming-with-vulkan-and-cpp/",
      "bio": "Learn graphics programming now using the most popular graphics API",
      "objectives": [
        "Create graphics applications",
        "Apply common rendering math",
        "Use Vulkan for graphics programming",
        "Apply good coding standards",
        "Creating and managing windows",
        "Writing shader code using GLSL",
        "Setting up a project using CMake",
        "Setup a graphics pipeline",
        "Basic graphics theory"
      ],
      "course_content": {
        "Introduction": [
          "Promo",
          "Welcome",
          "FAQ",
          "Course Overview",
          "Installing Vulkan SDK",
          "Can I Run It?"
        ],
        "Setup": [
          "Software Used",
          "Installing Visual Studio",
          "Installing Ninja",
          "Installing CMake",
          "Installing Git"
        ],
        "CMake Configuration": [
          "Creating \"Hello, World!\"",
          "CMake Dependencies & Vulkan"
        ],
        "Coding Standards": [
          "Coding Standard: Numbers",
          "Coding Standard: Microsoft GSL",
          "Commonly Used Types",
          "Coding Style: Google & Clang Formatting",
          "Coding Style: Course Overrides",
          "Coding Style: EditorConfig",
          "Styling is Important!"
        ],
        "Window Creation & Management": [
          "What is a Window?",
          "Initializing GLFW",
          "Using Precompiled Headers",
          "The Coordinate System & 2D Vectors",
          "What are Monitors?",
          "Monitor Functions",
          "Extracting Monitor Functionallity",
          "Creating the Window Class",
          "Adding Precompiled Headers Everywhere",
          "Preparing the Window for Vulkan"
        ],
        "Vulkan Pipeline": [
          "What is Vulkan?",
          "Vulkan Architecture"
        ],
        "The Vulkan Instance": [
          "Creating the Vulkan Instance",
          "Checking Existing Extensions",
          "Refactoring Extensions Check",
          "Functional Programming Tricks",
          "The Instance: Summary"
        ],
        "Error Handling & Validation Errors": [
          "Basic Validation Layers",
          "Adding the Spdlog Library",
          "Setting Up the Debug Messenger",
          "Creating a Glfw Error Callback",
          "Reorganize Code Into Regions",
          "Validation Errors: Summary"
        ],
        "Devices & Queues": [
          "What Are Physical Devices?",
          "Getting Physical Devices",
          "Checking for Queue Family Support",
          "Creating Logical Device",
          "Getting the Graphics Queue",
          "Devices & Queues: Summary"
        ],
        "Presentation & Swap Chain": [
          "Creating the Surface",
          "Creating the Presentation Queue",
          "Checking Device Extension",
          "Getting Swap Chain Capabilities",
          "Choosing Swap Chain Capabilities",
          "Creating the Swap Chain",
          "Getting Swap Chain Images",
          "SwapChain Images Correction",
          "Creating Image Views",
          "Presentation & Swap Chain: Summary"
        ]
      },
      "requirements": [
        "Good Understanding of modern C++ (pointers, references, lambdas)",
        "Basic Understanding of OOP",
        "Knowledge of the Standard C++ Library & Algorithms"
      ],
      "description": "Welcome\nVulkan is the newest and most popular graphics API out there. It is the successor of the already deprecated OpenGL, and it is the future for any kind of cross-platform graphical applications. It is extremely performant, which makes it perfect for game and game engine development.\nWith this course I aim to teach you the very basics of computer graphics with Vulkan in some short and simple lessons. I believe everyone can learn and it is especially important to have easy to understand chunks that can be consumed in short bursts.\nThis course will cover: setting up your C++ project, creating a window, initializing Vulkan, rendering a simple triangle, compiling shaders, debugging issues, rendering vertices, basic transformations for 3D.\nI will not go as far as to teach complex topics like post-processing or shadows since the course aims to be short and accessible. The course will get regular updates, though that will cover any major changes in the specification.\nThe course is taught on Microsoft Windows, but most of the knowledge gained can be used on any platform.\nTechnologies Used\nVulkan SDK—the main topic of the course is the Vulkan graphics library specification. This is what \"talks\" to the GPU of your PC and renders any graphical information that you send to it.\nGLFW—Abstracts handling windows so that we don't have to call native platform functions. This way the course would be mostly accessible to people on any platform.\nGLM—A mathematical library that will help with the transformation of 3D information.\nCMake—for managing and compiling the project. We will use a modern setup that is straightforward to understand and use.",
      "target_audience": [
        "Junior C++ programmers",
        "Game engine programmers",
        "3D graphics programmers switching to Vulkan"
      ]
    },
    {
      "title": "Unreal Engine 4 Absolute Beginner Masterclass",
      "url": "https://www.udemy.com/course/unreal-engine-2020-absolute-beginner-masterclass/",
      "bio": "Start creating your first game and impress everyone around you. Learn game development in less than three weeks..",
      "objectives": [
        "Understand the logic of game development",
        "Developing your first game",
        "Getting familiar with Blueprints",
        "Creating input system",
        "How to create particle systems",
        "Creating game modes",
        "Creating levels",
        "Build your game and publish it",
        "Understanding Material Logic",
        "Sound & Sound system",
        "Basics of Lighting",
        "Understanding UMG and creating interactive UI",
        "Creating Damage, Death, Health, Respawning systems",
        "Adding checkpoints into the game"
      ],
      "course_content": {
        "Introduction": [
          "How Games like Fortnite are made?",
          "Downloading and Installing Unreal Engine",
          "Creating a Project and Introduction to Unreal Engine's UI",
          "Navigation tools and Transform tool"
        ],
        "Rolling Ball": [
          "Setting up the Input System and creating a new level",
          "Creating the Ball Blueprint",
          "Creating the Game Mode",
          "Blueprint Types",
          "Player Start Concept",
          "Asset Migration",
          "Camera Rotation Logic",
          "Changing Ball - Camera direction",
          "Understanding Material and PBR Logic",
          "Setting up the coin system",
          "Creating the Coin System Functions",
          "Creating Health System",
          "Damage System",
          "Environment Tools Part1",
          "Environment Tools Part2",
          "Creating The Environment",
          "Create your Environment",
          "Creating the Door Blueprint",
          "Adding Sounds into the Game",
          "Creating Jump Box Blueprint",
          "Creating the Platforms Blueprint",
          "Basics of Lighting",
          "Creating the Trap Blueprint",
          "Creating Particle systems",
          "Creating Player HUD UI",
          "Updating Coin in the UI System",
          "Updating Health Bar in the UI System",
          "Creating Player Death System",
          "Adding Respawning System",
          "Updating Player Death with zero Health",
          "Restarting the Game",
          "Adding Checkpoints",
          "Creating Pause Menu (Part1)",
          "Creating Pause Menu (Part2)",
          "Win To Next Level"
        ]
      },
      "requirements": [
        "Have a working computer with the minimum requirements for Unreal Engine"
      ],
      "description": "Start your game developing journey with Unreal Engine.\n\nIn this course we are going to cover everything you need to know to develop your first game.\nWe will create a simple and fun Rolling Ball game together that will make you understand the process of game development.\n\nUnreal Engine 4 is the best FREE game engine that is available right now, which can be used to Create Triple-A Quality games with amazing graphics, This is the game engine that is created by Epic Games and they have created the most popular game with it...... FORTNITE\n\n\nIn this course we will cover :\n- Downloading & Installing UE4\n- Getting used to UE4\n- Creating Blueprints\n- Understanding the different types of Blueprints\n- Coin System\n- Health System\n- Damage System\n- Death System\n- Respawn System\n- Creating Checkpoints\n- Wining from a level to another\n- Getting familiar with building an environment\n- Creating Particle Systems\n- Creating HUD & learning Unreal's UMG to create beautiful and interactive UIs\n- Basics of lighting\n- Pause Menu\n- Restarting the game\n- Material & PBR logic\n- .....and many more things like Camera rotation Logic, Sounds, Creating Traps.....etc\n\n\nThis will be a series of courses that will teach you game development from an absolute beginner to a Master.. the levels are\n\n-Absolute Beginner\n-Amateur\n-Intermediate\n-Semi-Professional\n-Professional\n-Master\nThis course is for the Absolute Beginners and we will continue with other levels after finishing this course.\n\nI will promise to explain every single step that we will take in order to make you get the most out of this course.\n\nEnroll NOW and lets learn Unreal Engine together.",
      "target_audience": [
        "Absolute beginners who want to start their game development journey",
        "beginners who want to learn more about Blueprints and other aspects of game development with UE4",
        "Gamers who want to create their own games"
      ]
    },
    {
      "title": "Learn to Build Mobile Games using Unity3D",
      "url": "https://www.udemy.com/course/learn-to-build-mobile-games-using-unity3d/",
      "bio": "Master all the techniques for building best selling mobile games",
      "objectives": [
        "Master Unity 3D",
        "Learn game development process and techniques",
        "Acquire practical know how for game development"
      ],
      "course_content": {
        "Introduction": [
          "Introduction to the Unity3D",
          "Introduction to Unity3D",
          "Intro To Editor",
          "Setting up the Sceneview",
          "Components",
          "Adding Components",
          "Prefabss",
          "Creating Assets",
          "Scenes",
          "Building"
        ],
        "Unity3D Primer": [
          "Intro to Scripting",
          "Variables And Functions",
          "Public vs Private",
          "Modifying Game Objects",
          "Instantiating Game Objects",
          "Capturing Input"
        ],
        "Collosion detection and Character Control in Unity 3D": [
          "Intro To Advance concept",
          "Collision Detection",
          "Advanced Collision",
          "Terrain",
          "Character Controller",
          "Animations And Gem Collection"
        ],
        "Unity 3D - Important Features": [
          "Intro to Section",
          "Building The Scene",
          "Ball Spawning",
          "Buckets",
          "Detection and Score Keeping",
          "GUIText"
        ],
        "Unity 3D - Advance Features": [
          "Introduction to Advance Features",
          "Main Menu and touch Inputs",
          "Game Logic And GUI",
          "Audio",
          "Advance Game Logic",
          "Building for Android",
          "Building for iOS"
        ],
        "Summary": [
          "Summary",
          "Bonus Lecture: More Interesting Stuff, Offers and Discounts"
        ]
      },
      "requirements": [
        "Basic Programming knowledge. Any scripting knowledge will be a great plus",
        "You will need to download the software from Unity website",
        "Creative thinking and gamers will find it easy to absorb the content"
      ],
      "description": "Unity is arguably the most popular cross platform game engine for mobile phones and tablets. You can target both iOS and Android app stores using this single powerful engine. This engine can help you build almost any game you can think of. This powerful engine is great for both 2D and 3D games.\nEduonix have worked with real game developers to bring out a course which is practical and powerful enough to get our students quickly ready for their next block buster title. This course does not assume any game programming experience but it will be great if you know basic of game design. The course starts with basic Unity intro and a detail look into its editor and scripting language. You will then work on actual game code along with the authors. The course will make you the Unity 3D Ninja and you can easily take on any gaming project.",
      "target_audience": [
        "Mobile developers who want to learn Unity 3D"
      ]
    },
    {
      "title": "HTML5 Game Development with Phaser 3 Master Course",
      "url": "https://www.udemy.com/course/html5-game-development-with-phaser-3-master-course/",
      "bio": "Finally a course that really teaches you phaser 3",
      "objectives": [
        "Learn The Best Javascript Game Engine",
        "Learn to read the documentation",
        "Load Assets",
        "Sprites Animations",
        "Transforming Gameobjects",
        "User input",
        "Work with the physics engine",
        "Create animations with tweens",
        "Work with audio in your games",
        "build a tictactoe game to reenforce everything you learned"
      ],
      "course_content": {
        "Basic Setup": [
          "Getting Started with Phaser 3",
          "new Instructions",
          "Going over the starter kit files",
          "Phaser 3 Resources"
        ],
        "Basics: Game Objects": [
          "Loading an Image",
          "All Game Objects have methods",
          "Reminder Notes are easier",
          "Sprites and animations",
          "Atlas sprites and animations",
          "Working with shapes",
          "Creating Text and updating text",
          "Groups",
          "Set Containers",
          "Setting Origin of Game Object",
          "Hidden Zones",
          "what are tiles?",
          "Using tiles in our game",
          "Reminder: Phaser JS is Huge!!!"
        ],
        "Software: Tiled Map Editor App": [
          "Tiled Map Editor part 1",
          "Tiled Map Editor part 2"
        ],
        "Basics User Input": [
          "Getting ready to work with user inputs",
          "Add Key from keyboard",
          "Add cursor keys",
          "Mouse click events",
          "Game Object Mouse events",
          "Dragging game objects and dropping zones"
        ],
        "Basics: Arcade Physics Engine": [
          "Quick Intro to Physics Engines",
          "Using physics for game objects",
          "Working with the world",
          "Colliders and overlaps"
        ],
        "Basics: tweens": [
          "Introduction to tweens",
          "Basic properties to animate your tweens",
          "Controlling your tweens",
          "creating a timeline for multiple tweens"
        ],
        "Software: Shoebox App": [
          "How to make spritesheet with shoebox for phaser 3"
        ],
        "Audio": [
          "Working with Audio"
        ],
        "Tic Tac Toe Championships": [
          "Building a Tic Tac Toe Game",
          "Preload the files for Intro Scene",
          "Placing the images in the right places",
          "animating title screen",
          "Creating input actions on the title screen",
          "Load the files we need for Level 1",
          "Display the initial gameboard and gameobjects",
          "Creating Input Method for boxes",
          "handle click events for the rest of the blank boxes",
          "logic to check if won game",
          "Create winning Animations",
          "Finishing off our game"
        ]
      },
      "requirements": [
        "Know the basics of programming"
      ],
      "description": "Have you ever wanted to create some video games? Well now is the time this course will teach you the #1 HTML5 Game Engine Phaser 3. You will learn not by just creating games and not understanding whats happening but by learning how to use the game engine. This course is different than all the other Phaser 3 courses because we make sure you know how to build your own games not just follow what the instructor is showing you.",
      "target_audience": [
        "Web developers looking to get into game development",
        "beginners",
        "experienced game developers jumping into HTML5 Game Development"
      ]
    },
    {
      "title": "Make your first 2D & 3D games in Unity® & Blender",
      "url": "https://www.udemy.com/course/make-your-first-2d-3d-games-in-unity-blender/",
      "bio": "*includes FREE book! Do you want to learn to code and 3D model? Build a SUPER MARLO RUN clone and Ninja mobile game here",
      "objectives": [
        "Build a Ninja Survival game for mobile",
        "Build a 3D Super MARLO Runner clone in Unity®",
        "Code in C#",
        "Know the foundations of 3D model-making in Blender",
        "Unwrap UV's and perform simple texturing of 3D art assets",
        "Use Blender and navigate its interface",
        "Integrate art from Blender into Unity®"
      ],
      "course_content": {
        "Introduction to the Course": [
          "Gameplay from the Marlo Game"
        ],
        "Super Marlo Runner Game - Introduction to Unity": [
          "01.) Introduction to Unity - Part 1",
          "01.) Introduction to Unity - Part 2"
        ],
        "Movement": [
          "02.) Movement - Part 1",
          "02.) Movement - Part 2",
          "02.) Movement - Part 3"
        ],
        "Blocks": [
          "03.) Blocks - Part 1",
          "03.) Blocks - Part 2"
        ],
        "Speed Blocks and Enemies": [
          "04.) Speed Blocks and Enemies - Part 1",
          "04.) Speed Blocks and Enemies - Part 2",
          "04.) Speed Blocks and Enemies - Part 3"
        ],
        "More Enemies": [
          "05.) More Enemies - Part 1",
          "05.) More Enemies - Part 2"
        ],
        "Powerup and Finish Line": [
          "06.) Powerup and Finish Line - Part 1",
          "06.) Powerup and Finish Line - Part 2"
        ],
        "Background and Interface": [
          "07.) Background and Interface - Part 1",
          "07.) Background and Interface - Part 2",
          "07.) Background and Interface - Part 3"
        ],
        "Fine Tunings": [
          "08.) Fine Tunings - Part 1",
          "08.) Fine Tunings - Part 2",
          "08.) Fine Tunings - Part 3"
        ],
        "Level Design": [
          "09.) Level Design - Part 1",
          "09.) Level Design - Part 2"
        ]
      },
      "requirements": [
        "To follow along with these tutorials, you will need the following programs: Blender (for 3D modeling), Photoshop or a free program like Gimp (for 2D art/texturing), and Unity® (for coding).",
        "The tutorials were recorded on a Mac, but Blender, Photoshop, and Unity® can be used with a PC.",
        "Please download and install Unity® and Blender before purchasing this course."
      ],
      "description": "Do you want to design and build your own 3D game? Even if you have never coded before, with this course you can learn the foundations of making 2D and 3D games!\nIn these tutorials we build a 3D SUPER MARLO RUN game in Unity® – from scratch. You also learn how to build a Ninja Survival game for mobile using Unity® and Blender.\nThis course does not assume any prior knowledge and is perfect for beginners.\nIn fact, we begin with an introduction to Unity® for those who have never used it before. We take you through all the steps to designing a game from start to finish!\nIncluded in this course is material for beginners to get comfortable with the interfaces. Please note that we reuse this material in similar courses because it is introductory material. You can find some material in this course in the following related courses:\nMake a Ninja Survival game for mobile in Unity and Blender\nPractical Unity Developer Academy: Make Fully Featured Games\nA to Z Unity Development: Code in C# and Make Low Poly Art\nC# & Image Processing Masterclass: Make Mobile Games & Apps\nBuild 22 Games in GameMaker Studio, C# Unity® & Blender\nC# Masterclass: Make RPG & Mobile Games in Unity & Blender\nBuild and model a Super MARLO runner clone in Unity\nBuild 43 Models & a 3D Runner Game in Unity® with C# Code\nUltimate Guide to Blender & Unity: Game Design & Development\nMake a Fully Featured Game: Code in C#, Make Low Poly Models\nMake a Unity Platform Game & Low Poly Characters in Blender\nMake Games and Web Apps: Unity, React and Redux Masterclass\nThis course is unique because we make both the code and the art for the game from scratch. We teach you the fundamentals of designing, coding, and modeling a mobile game.\nFirst you design the game and its functionality in Unity®. You learn how to code in C# and build video game levels.\nDon't worry if you've never coded before. We start simple and add more to the game as the course goes on.\nWhy Unity®?\nUnity® is one of the most popular platforms in game development. You can use Unity® to build 2D and 3D games. Unity® is cross-platform, which means it is easy to use with other platforms.\nWhy Blender?\n\nBlender, like Unity®, is a popular production suite that is free to download. Blender is a revolutionary tool for making 3D art digitally. With Blender, you can make art assets for games, like we do in this course.\nIs this course for me?\nEven if you're not an artist, you can make basic art models. You may have heard of Axiom Verge and Stardew Valley. These games are million-dollar successes. But did you know that only one person made each?\nUsually it takes a whole team of people to build a game. But creators Thomas Happ and Eric Barone developed and designed their games by themselves. Now they're millionaires. You can do it, too.\nLet's get started!",
      "target_audience": [
        "Even if you have never coded before, you can use these lessons to get a headstart in the game-making realm! This course is targeted towards beginners to immediate.",
        "This course assumes you know a little about Unity Technologies and Blender."
      ]
    },
    {
      "title": "Game Dev Kickstart: 2D Game Development Using LibGDX & Java",
      "url": "https://www.udemy.com/course/game-dev-kickstart/",
      "bio": "Create a fully functional multi-platform 2D video game for FREE using LibGDX and Java!",
      "objectives": [
        "Create stunning cross-platform 2D games with LibGDX and Java",
        "Learn best practices for using LibGDX",
        "Handle keyboard and touch input from the player",
        "Create a games with multi-screen functionality",
        "Create a fully functional game from the ground up",
        "Render and animate game characters",
        "Add sounds and music to a game"
      ],
      "course_content": {
        "Introduction": [
          "Course Introduction"
        ],
        "The JDK & IntelliJ IDEA": [
          "Install the JDK (Java Development Kit)",
          "Install IntelliJ IDEA",
          "Set a Java Home Environment Variable"
        ],
        "LibGDX": [
          "What Is LibGDX?",
          "Setting Up LibGDX",
          "Note for Next Lecture",
          "LibGDX Basics"
        ],
        "Stick Figure Showdown": [
          "Create & Import the Project",
          "Import & Manage the Assets",
          "Create the Game Screen",
          "Window Size, Cameras & World Units",
          "Viewports",
          "Create the Fighter Class",
          "Draw & Animate the Fighters",
          "Update the Fighters' Facing",
          "Handle Keyboard Input",
          "Define the Ring Bounds",
          "Attacking & Blocking",
          "Getting Hit",
          "Generate the Fonts",
          "HUD (Heads-Up Display) 1: Wins/Loss Ratio and Difficulty Text",
          "HUD (Heads-Up Display) 2: Fighter Health Bars",
          "Set Up the Rounds",
          "Improve the Round Timer",
          "Handle Touch Input",
          "Texture Filters",
          "Texture Atlases & Packing Textures",
          "Game Over",
          "Pausing the Game",
          "Add Sounds & Music",
          "Add Opponent AI",
          "Blood 1: Blood Splatters",
          "Blood 2: Blood Pools",
          "Main Menu Screen 1: Set Up the Widgets",
          "Main Menu Screen 2: Draw the Widgets",
          "Clicking the Buttons",
          "Changing the Fighters",
          "Manage the Settings",
          "Settings Screen 1: Set Up the Widgets",
          "Settings Screen 2: Draw the Widgets",
          "Changing the Settings",
          "Create the Loading Screen",
          "Conclusion"
        ],
        "EXTRA: Adding Android Functionality": [
          "Install the Android SDK",
          "Create & Import a New Project",
          "Running LibGDX on Android",
          "Transfer the Code",
          "Fix the Audio",
          "Change the Settings Screen",
          "Fighter Controls 1: Set Up & Draw the Sprites",
          "Fighter Controls 2: Attacking & Blocking",
          "Fighter Controls 3: Joystick Movement"
        ],
        "Bonus": [
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "Access to a computer with Windows, Mac, or Linux",
        "Basic knowledge of Java",
        "(Optional) Access to an Android device"
      ],
      "description": "Do you want to learn how to create amazing video games for FREE with LibGDX?\nI'm Brandon and I'm going to help you master LibGDX by creating a complete and fully functional cross-platform 2D video game.\nLibGDX is a free and open-source game development framework. Game development frameworks are collections of libraries and tools that provide building blocks that developers can use to create their own games, and are more lightweight and flexible than game engines, like Unity 3D, Unreal Engine, and Godot.\nLibGDX also provides cross-platform deployment, meaning that a game created with LibGDX can be run on multiple platforms, including Windows, Mac, Linux, Android, iOS, and web browsers.\n(NOTE: Please be aware that you will need to know some Java in order to get the most out of this course. Taking a short 2-3 hour Java course on YouTube should be more than enough.)\nThe Game Dev Kickstart course is very comprehensive and is full of extremely valuable information for creating incredible 2D games using LibGDX. We'll begin by installing the JDK (Java Development Kit) and the IntelliJ IDEA IDE, which we'll be using to write the code for our game. After that, we'll jump right into learning all about LibGDX by creating a complete 2D fighting game called Stick Figure Showdown. Among the dozens of topics we will be covering throughout the course, we'll learn how to:\ndraw images to the screen and animate them\nmanage assets (images, audio, etc.) using an asset manager\nwork with cameras and viewports for full control over how our game appears on different screen resolutions\nhandle keyboard and touch input from the player\ngenerate fonts using the Freetype extension\ndisplay a HUD (Heads-Up Display)\ncreate and use texture atlases for enhanced performance\nadd text and clickable buttons to the screen\nadd sound and music to our game\nadd AI (Artificial Intelligence) for the opponent fighter\ncreate and switch between various types of screens (main menu, settings, etc.)\nuse Scene2D for more efficient UI (User Interface) layout\nallow the player to change and save various settings of the game (difficulty, fullscreen mode, etc.)\nEXTRA: add Android functionality to our game!\nYou'll also get access to all of the resources and code for the projects in this course!\nSo what are you waiting for? Join now and let's start developing games today!",
      "target_audience": [
        "Beginner game developers",
        "Anyone who wants to master LibGDX for 2D game development",
        "Anyone who wants to learn how to create a complete 2D game"
      ]
    },
    {
      "title": "Unity : Video Ads, LeaderBoard & Achievement Unlock System",
      "url": "https://www.udemy.com/course/unity-video-ads-leaderboard-achievement/",
      "bio": "Show Video Ads in Unity 2023 Games , Create Online Leader Board and Achievement Unlock System in Unity",
      "objectives": [
        "Integrate Video Ads in Unity Games",
        "Learn Version Controlling",
        "Create Online LeaderBoards",
        "Build Achievement Unlock System in Unity"
      ],
      "course_content": {
        "Introduction & Installing Unity 2023": [
          "Installing and Setting Up Unity 2023"
        ],
        "Monetize Your Games with Unity Ads ( Updated 2023 )": [
          "Setting Up Unity Ads",
          "Implementing Interstitial Ads",
          "Playing Interstitial Ads In Your Game",
          "Displaying Banner Ads In Your Game"
        ],
        "Build Your First Android Game with Unity 2023": [
          "Build Your First Android Game with Unity 2023"
        ],
        "Monetize Your Games with Unity Video Ads ( Updated 2021 )": [
          "Setting Up Unity Ads for Unity 2021",
          "Displaying Interstitial Video Ads",
          "Showing Rewarded Video Ads",
          "Rewarding The Player for Watching The Complete Ad",
          "Showing Rewarded Ads with a Practical Example"
        ],
        "Learn Version Controlling With Unity": [
          "Why Use Version Controlling",
          "Cloning and Creating New Repository For Unity Game Project",
          "Practical Version Controlling Example With a Game",
          "Learn About Branching Your Game Projects",
          "Pushing Your Local Repository To GitHub & BitBucket"
        ],
        "Earn Money From Your Games With Video Ads ( Old Version )": [
          "Integrate Unity Video Ads",
          "Show Ads Every 3 Times in Unity",
          "Integrate Applovin Ads in Unity",
          "Integrate Chartboost Ads in Unity"
        ],
        "Create Online LeaderBoard For Your Games": [
          "Creating Leader Boards in Unity - Part1",
          "Creating Leader Boards in Unity - Part2",
          "Creating Leader Boards in Unity - Part3",
          "Creating Leader Boards in Unity - Part4",
          "Creating Leader Boards in Unity - Part5 - Uploading APK and Linking"
        ],
        "Creating Achievement Unlock Systems For Your Games": [
          "Create Achievement Unlock Systems in Unity",
          "Testing LeaderBoard and Achievement System"
        ],
        "Bonus : Create A Complete 3D Game": [
          "Getting Started Building A 3D Game With Unity",
          "Controlling The Ball",
          "Moving The Ball After First Touch",
          "Checking The Fall Down",
          "Smooth Camera Follow",
          "Fall Down Platforms",
          "Spawning The Platforms",
          "Random Platform Spawning",
          "Fixing Platform Falling",
          "Creating Diamonds and Randomly Spawning",
          "Destroying Diamonds",
          "Creating Particle Effects",
          "Create UiManager and Text Animations",
          "More Main Menu Ui Animations",
          "Game Over Menu and Animations",
          "Scripting The UiManager",
          "ScoreManager Score and HighScore",
          "Creating GameManager",
          "Final Fixes and Finishing The Game",
          "Setting Up For Android Publishing",
          "Updated Process Of Setting Up Android Platform",
          "Building And Publishing The Game"
        ],
        "Bonus Section : Special Discount Coupons": [
          "Bonus : Special Discount Coupons For All Courses"
        ]
      },
      "requirements": [
        "You should have a basic knowledge of unity game engine",
        "you should have some knowledge of unity c# scripting"
      ],
      "description": "List Of Things You Will Learn:\nShowing Video Ads in Unity Games\nIntegrate Unity Video Ads\nIntegrate Chartboost Video Ads\nIntegrate AppLovin Video Ads\nCreate Online LeaderBoard\nCreate Achievement Unlock System\nLearn Version Controlling\nLearn the basic concepts, tools, and functions that you will need to build fully functional Games with the Unity game engine.\nBuild a strong foundation in Unity and Android Game Development with this course.\nLearn Version Controlling\nIntegrate Video Ads\nCreate Online Leaderboards\nBuild Achievement Unlock System\nA Powerful Skill at Your Fingertips  Learning the fundamentals of Unity Android Game Development puts a powerful and very useful tool at your fingertips. Unity is free, easy to learn, has excellent documentation, and is the game engine used for building android games.\nJobs in unity android game development are plentiful, and being able to learn unity android game development will give you a strong background to more easily build awesome android games.\nContent and Overview  Suitable for beginning programmers, through this course, you’ll learn all of the unity android game development fundamentals and establish a strong understanding of the concept behind android game development. Each chapter closes with quizes, putting your new learned skills into practical use immediately.\nWith these basics mastered, the course will take you through building different example games with unity to learn more about the process of creating mobile android games with unity.\nStudents completing the course will have the knowledge to create fully functional and ready to publish android games with unity.\nComplete with working files, you’ll be able to work alongside the author as you work through each concept, and will receive a verifiable certificate of completion upon finishing the course.",
      "target_audience": [
        "This course is for anyone who wants to earn money from their games",
        "Anyone who wants to create Leaderboard & Achievement System in Unity"
      ]
    },
    {
      "title": "Oculus Quest: Create VR games using html and javascript",
      "url": "https://www.udemy.com/course/oculus-create-vr-games-using-html/",
      "bio": "Learn to create immersive VR games and experiences using html, javascript and the A-Frame library",
      "objectives": [
        "using html and javascript to build VR games",
        "using the A-Frame library",
        "using Oculus Quest touch controllers in your game",
        "navigation using Oculus touch controllers in your games",
        "locomotion using the thumbsticks",
        "forward and backward movements and snap turns",
        "rapid terrain environment generation",
        "adding physics to your game",
        "adding sound effects and background music",
        "reusable game mechanics",
        "controller interactions",
        "raycasting and object selection",
        "distance grabbing of objects in the VR world",
        "instant publishing to the web using glitch",
        "testing and debugging using your Oculus Quest headset",
        "collision and intersection detection",
        "automatic object creation and removal",
        "adding cameras to the scene",
        "trigger button applications",
        "adding animations",
        "game project - beat saber clone",
        "adding haptic feedback",
        "creating 3D models using a-frame",
        "and more..."
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Setting up your development environment": [
          "Creating a glitch account for games development",
          "Accessing your games from the oculus headset",
          "Using a local webserver with xampp"
        ],
        "Creating a VR World": [
          "What are entities",
          "Adding a camera to the scene",
          "Adding Oculus Touch Controllers to the scene"
        ],
        "Adding locomotion": [
          "How to create components using javascript",
          "Adding atext for debugging and hud",
          "Detecting thumbstick movements",
          "Snap-turns and forwards-backwards movements"
        ],
        "Physics and interactions": [
          "Adding physics",
          "Adding raycasters",
          "Detecting the grip button presses",
          "Distance grabbing"
        ],
        "Collision detection and entity removal": [
          "Introduction to collision detection and entity removal",
          "Example of collision detection and entity removal"
        ],
        "Trigger button detection and its applications": [
          "Detecting trigger button presses",
          "Object removal with trigger press and raycasting"
        ],
        "Playing sounds": [
          "Adding sound effects",
          "Adding background music"
        ],
        "Animations": [
          "Position animations",
          "Auto-generating objects"
        ],
        "A game project": [
          "Introduction to the game project",
          "Example of a game project: music fencing (inspired by beat saber)"
        ]
      },
      "requirements": [
        "Windows PC",
        "HTML and Javascript is helpful but not necessary",
        "Oculus Quest 2 headset"
      ],
      "description": "Interest in the metaverse and rapid adoption of Oculus Quest headsets has spawned a lot of interest in VR applications and games. If you are looking for a quick and easy way to build VR games and experiences, then this course is for you. In this course we will use just html and javascript to create immersive VR games and experiences. There exists a VR javascript library called A-Frame which is specially created for making VR applications.  lt is fast and easy to use. You can create an immersive VR scene in just 10 lines of code. Building VR apps using A-Frame is just like adding lego blocks components together to create an experience.  And it is totally free. If you already know html, then this will be right at home with you. You an create a VR experience for A-Frame simply by using html tags.\n\n\nIn this course, I will only be using free tools:\n\n\nchrome browser\nglitch website\nfree assets\n\n\nThe glitch website allows you to build and publish on the web in one go. No vetting or approval needed. Just upload and share your links with anyone you like. Using the Oculus Quest's browser, just visit your website and select VR mode and you will enter the immersive experience instantly. No need to build any apk files to sideload to your Oculus headset, nor do you need to use any link cable to connect to your PC. This is possible because most web browsers, eg, Chrome and Firefox are already VR capable (WebVR). The immersive VR experience is no different from a native VR app created by Unity and Unreal.\n\n\n8 Special Features of this course:\n\n\nCreated with beginners in mind\nBuild experiences in small bite-sized chunks, then gradually add more components\nMinimalist, i.e. simplicity in coding and design\nFree tools and assets - nothing to install\nApps are instantly deployed on the web - not controlled by vendor specific app stores.\nNo need to install  or sideload  the games you created onto your Oculus headset\nJust visit your published website (game) using the Oculus Browser and enter VR mode.\nEach section teaches a specific game mechanic. Combine them in different ways to create your unique game.\n\n\nSuitable for:\n\n\nWeb developers who want to leverage their existing skill to create VR games and experiences\nStudents who want to get started in HTML and Javascript by building VR apps\nAnyone interested to learn how to create VR games using html and javascript\nThose who have tried Unity or Unreal, and want something simpler and faster to develop\nSchools and academia looking to introduce VR concepts into the curriculum",
      "target_audience": [
        "Web developers who want to leverage their existing skill to create VR games and experiences",
        "Students who want to get started in HTML and Javascript by building VR apps",
        "Anyone interested to learn how to create VR games using html and javascript"
      ]
    },
    {
      "title": "Learn To Make Stylized Low Poly Characters [Beginner]",
      "url": "https://www.udemy.com/course/lowpolycharacters/",
      "bio": "Learn To Model Characters From Scratch (Beginner Friendly Course)",
      "objectives": [
        "Folder Management [This will help you organized the crap out of your work space]",
        "Modeling Character From Scratch [we start everything from scratch here #BEGINNER",
        "Zbrush Workflow from brush settings, selection, masking, and more ~ literally MORE",
        "We will also create armors and weapon #SWAG",
        "Retopologize Mesh in Maya 2018",
        "Create Textures in Photoshop",
        "Map character, Clean Outliner, Proper Exporting ~",
        "Rendering in Keyshot ~",
        "Please just watch the Promotional Vid, so much stuff to list here like save me the effort luv ~"
      ],
      "course_content": {
        "Resources & Community": [
          "Welcome! xD",
          "Wacom Tablets",
          "Softwares",
          "Finding The Right Reference [skip]",
          "Folder Management"
        ],
        "Creating the Assassin": [
          "Asset Listing [Photoshop]",
          "Zbrush Beginner Controls [skip]",
          "Setting Up Character Frame [Zbrush]",
          "Sculpting Base Character Body [Zbrush]",
          "Brush Settings | Hair [Zbrush]",
          "Masking & Selection | Hair [Zbrush]",
          "Extract | Bad & Good Topology [Zbrush]",
          "Jacket | Pants [Zbrush]",
          "Belt | Shoes [Zbrush]",
          "Shoulder Pads | Clothe Tie [Zbrush]",
          "Knee Caps | Hands [Zbrush]",
          "Side Flaps [Zbrush]",
          "Armor | Mask [Zbrush]",
          "Materials | Colors | Transpose Master [Zbrush]",
          "Projecting Texture | Spotlight Image [Zbrush]",
          "Zmodeler | Refining Topology [Zbrush]",
          "Maya Basic Controls [Skip]",
          "Retopology |Zremesh-Loops-QuadDraw| [Maya]",
          "Retopology Part 2 [Maya]",
          "Retopology Part 3 [Maya]",
          "Retopology Part 4 [Maya]",
          "Retopology Part 5 [Maya]",
          "Texturing | Mapping [Photoshop|Maya]",
          "Finalizing",
          "Rendering",
          "What's Next?"
        ]
      },
      "requirements": [
        "Basic knowledge of computer navigation & common sense",
        "Tablet with a pen sensitivity for sculpting in Zbrush"
      ],
      "description": "Watch the course's free preview videos before buying, especially the 1st one. The 1st video will show you how to save money and get the best savings especially if you are buying by bundles. Take advantage of this while it's still there.\n\n\nWelcome Amigos. In this course, you will learn the following:\n\n\nResources\n-You will learn how to properly compile your ideas so you can get fast and concise results. [we will use Photoshop this time]\n-You will be expose to different art resources and game development community so not only me but other professionals can help you.\n\n\nLow Poly Character Creation From Scratch\n-You will create a Low Poly Stylize characters with me using Zbrush.\n-You will learn the basics and workflow of modeling in Zbrush. [warning: TMI]\n-You will learn how to freestyle, find your own art style & most specially enjoy working on your craft.\n-Creating textures and poly painting in Zbrush.\n-You will learn to Map and Retopologize your character.\n-You will learn how to clean your sexy Outliner because your boss will be super into that. If not, well, I'll be.\n\n\nRender\n- We will render in Keyshot.\n\n\nThe ones that you have read on top are the main things you will learn in this course. But, with all seriousness there's so much things I've went through in this course. It's a bit overkill and I agree. But for the people that are mainly targeted for this course you guys will shine and learn the most. The same workflow is used on creating AAA type characters in Zbrush and even stylized. If you get through this course, you will get through any intermediate AAA or stylized character course creation or any courses I will put here in the future that is about characters. There are free gems in this course that will take you places :) Take it and run. Have fun !\n\n\nIf you are a complete beginner don't worry, everything will be made from scratch and easy to understand. You don't need to be a senior artist or an expert to be able to achieve great results! Join me, I got chu~~.\nSee ya! :)",
      "target_audience": [
        "This course is targeted for people that are super beginners who:",
        "Anyone who wants to learn Low Poly 3D Modeling",
        "Anyone who wants to learn Zbrush 4r7 and 4r8",
        "Anyone interested in the whole character pipeline production",
        "If you are already intermediate this might be not anything new to you, please check the curriculum"
      ]
    },
    {
      "title": "Develop Mobile Games for Android and iOS with Stencyl",
      "url": "https://www.udemy.com/course/advanced-cross-platform-computer-game-development-design-with-stencyl/",
      "bio": "learn to create amazing cross-platform computer games for Windows, Mac, Linux, IOS, Android & Flash with Stencyl 3!",
      "objectives": [
        "Develop entire, professional quality game from start to finish.",
        "Learn all the intermediate and advanced concepts necessary to create and publish a top quality mobile game.",
        "Learn how to develop your games for multiple platforms easily with Stencyl.",
        "Learn design theories and best practices",
        "Understand marketing techniques and how to use them"
      ],
      "course_content": {
        "Introduction": [
          "Welcome to the Course",
          "The Structure of the Lectures",
          "Overview of Software & Tools",
          "What's New in Stencyl 3.x and Beyond?",
          "What's New in Stencyl 3.x pt 2"
        ],
        "Marketing & Monetisation": [
          "Monetisation Strategies & Methods",
          "Game Marketing: What, Why & How",
          "Game Marketing p2",
          "Licenses & Pricing Options",
          "Marketing & Monetisation Core Concepts"
        ],
        "An In-depth Look at Stencyl": [
          "Looking At Stencyl - Part 1",
          "Looking At Stencyl - Part 2",
          "A Look At the Stencyl Tool Pt 3"
        ],
        "Game Design Theory - An Overview": [
          "What is Play?",
          "What is a Game?",
          "Theory Review"
        ],
        "Building the Bones of the Game - Let's Get Practical!": [
          "Game Data Folder",
          "The Game Concept - Mudslide Cowboy",
          "UPDATE: Background System Changed as of Stencyl 3.2",
          "Setting Up the Game Project",
          "Setting up the Game Project Pt. 2",
          "Setting Up the Game Project Pt. 3",
          "Setting up the Game Project Pt. 4",
          "More Actors - Simple & Complex Pt. 1",
          "More Actors Pt. 2",
          "Populating the Level",
          "Making the Balloon Move 1",
          "Making the Balloon Move 2"
        ],
        "Programming Core Functionality & Mechanics": [
          "The Player Handler - Handling User Interactions Pt. 1",
          "Player Handler Pt. 2",
          "Adding the Adaptive Cursor",
          "State Management & Movement Controls Pt. 1",
          "Movement Controls Pt. 2",
          "Movement Controls Pt. 3",
          "Refining the Controls",
          "An Object Lesson in Software Development - Build Bugs",
          "Cursor Handler - Sharing Attributes Between Actors",
          "Cursor Handler Pt. 2",
          "Debugging - The Cursor Handler",
          "Debugging - The Player Handler"
        ],
        "Crafting the Aesthetic Experience: Various Experiential Embellishments": [
          "Refining Obstacle Interactions",
          "Exercise: Create a More Elaborate Camera Follow Behaviour",
          "More Elaborate Camera Follow: Solution",
          "Handling Collisions Properly: Configuring and Using Collision Groups",
          "Reaction to Collision Events: Destroying Obstacles",
          "Reaction to Collision Events: Adding Some Eye Candy",
          "Eye Candy: Dust Behind Player Avatar",
          "Exercise: Finish Player Eye Candy",
          "Solution: Finish Player Eye Candy",
          "Directional Click Handling Fix",
          "Collecting Coins 1",
          "Collecting Coins 2",
          "Animating HUD Elements"
        ],
        "Finishing Touches": [
          "Using Fonts and Tracking Score",
          "Adding Main Menu & Buttons",
          "Level Selection Screens"
        ],
        "Google Play Store": [
          "Preparing the Game for Google Play",
          "Creating an Android Certficate",
          "Building the APK",
          "Uploading the APK to Google Play"
        ],
        "Bonus Lessons: Social Buttons, Ads and In-App Purchases, Saving and Loading": [
          "Social Buttons",
          "Signing Up for Admob",
          "Showing Ads in Your Game to Make Money",
          "In App Purchases - Selling Virtual Products",
          "Saving and Loading the Game"
        ]
      },
      "requirements": [
        "Basic computer skills.",
        "Sticking power",
        "A good work ethic",
        "Some knowledge of Stencyl would be an advantage. See 'Create your First Computer Game with Stencyl' for details."
      ],
      "description": "This course has been especially designed to take your complete beginner or intermediate level skills in Stencyl and build them up to the level required of a professional indie mobile game developer. Where as the foundation course (Create your First Computer Game with Stencyl), teaches you many important skills, concepts, and techniques necessary to implement core gameplay, utilize sound, and implement some basic AI, this course will teach you how to Create a complete, professional grade computer game which can be published on all the most popular platforms -- Google Play, IOS, Windows, Linux, Mac, Flash etc.\nFrom start to finish, you will develop a complete, playable game including all the advanced features and polish you would expect, such as:\nstart menu\nsocial link buttons\nmultiple, playable levels\nlevel selection screens\nsaving and loading\nin-app purchases and ads (for revenue generation)\nbeautiful, unique art and animations\nparallax scrolling\nsophisticated gameplay\nWe also cover less technical -- but none the less essential -- subjects such as marketing, design theory, game monetization paradigms and various other business and design tips and tricks for game development . After the core game has been developed, the course leads into sections on what it takes to publish it to the various Stencyl supported platforms (Desura, Steam, Google Play, Samsung Apps, IndieCity etc), including platform specific details such as certificates, marketplace restrictions, monetization methodologies etc.\nIn short, when you've finished this course, you will have learned everything you need to know to start developing, publishing and monetizing professional quality desktop and mobile games with Stencyl. So let's get started!",
      "target_audience": [
        "Beginners",
        "Those with some experience with Stencyl, who want to take their skills to the next level",
        "Graduates of 'Create your First Computer Game with Stenyl', who want to learn even more amazing game development skills.",
        "People excited about a possible career in indie game development",
        "Artists and designer who want an easy and fast way to develop their own games"
      ]
    },
    {
      "title": "Unity3D: Mobile Game Development From Unity to App Store",
      "url": "https://www.udemy.com/course/unity3d-mobile-game-development-from-unity-to-app-store/",
      "bio": "Learn how to create and publish a game for both Android and iOS from the Unity3D Game Engine.",
      "objectives": [
        "How to create and publish a game for the Android and iOS app stores made with Unity3D",
        "How to make money off your games with ads!",
        "How to implement Google Play Services",
        "How to debug deployment errors for Android and iOS"
      ],
      "course_content": {
        "Introduction": [
          "Welcome and Thank You",
          "Setup Android SDK, NDK, JDK"
        ],
        "The Wheel": [
          "Import Assets and Organize Them",
          "Setup Game Scene",
          "Construct The Wheel",
          "Script the Wheel Rotation",
          "Separate the Wheel Into Four Colors"
        ],
        "Balls": [
          "Setup Ball Prefab and Ball Script",
          "Ball Spawn System",
          "Create Special Balls"
        ],
        "Scoring and Menu Systems": [
          "Scoring System Pt.1",
          "Scoring System Pt.2",
          "Game Over Script and Animation Pt.1",
          "Game Over Script and Animation Pt.2",
          "Pause Menu Script and Animation Pt.1",
          "Pause Menu Script and Animation Pt.2",
          "Main Menu Script and Animation Pt.1",
          "Main Menu Script and Animation Pt. 2",
          "Scene Transitions With Animation",
          "Sound System Pt. 1",
          "Sound System Pt. 2"
        ],
        "Finishing Touches and Publishing": [
          "Setup Google Play",
          "Setup Apple Developer",
          "Google Play Games and Leaderboard",
          "Integrate Admob Ads",
          "Publish to Google Play Store",
          "Create and Setup iOS copy of project",
          "Export to Xcode and fix bugs",
          "Publish to Apple App Store"
        ]
      },
      "requirements": [
        "Basic understanding of the Unity3D Game Engine",
        "Basic understanding of the C# programming language",
        "Windows PC",
        "Macbook or Mac"
      ],
      "description": "** THIS COURSE IS NOT MEANT FOR BEGINNERS, so be sure you have a prior knowledge of Unity, game development and programming before you join this course **\n** FINALLY LEARN HOW TO PUBLISH YOUR UNITY3D GAME ON BOTH ANDROID AND APPLE APP STORES **\n\n\nHave you been looking for a course that teaches you how to create a game on Unity3D that can be published for both the Google Play and Apple app stores? Well look no further than this course. In this course you will learn how to go from nothing to a fully-fledged game that works on both Android and iOS. You will learn how to implement ads and Google Play services. Then you will learn how to publish the game you created on both the Android and Apple app stores.\n\n\nMatchy Wheel:\n\n\nMatchy Wheel is the game you will be making in this course. It is an addicting game where your objective is to tap either right or left to spin a wheel 90 degrees which is split into 4 different colors. Balls spawn and try to get to the middle of your wheel! If any one get's to the middle the game is over. To eliminate these balls you must spin the wheel so the color on the wheel matches with the same colored ball, if this occurs you score one point. If you match correctly with a special ball you earn 2 points.\nAdMob ads\nGoogle Play Services\nPublish to Android App Store\nPublish to Apple App Store\nHow to fix common Xcode errors when porting a Unity3D project to Xcode",
      "target_audience": [
        "Anyone who wants to be able to create a game for Android and iOS with Unity3D",
        "Anyone who wants to learn more about the Unity Animation System"
      ]
    },
    {
      "title": "Complete Action Game Development in UNITY for Beginners 2024",
      "url": "https://www.udemy.com/course/complete-action-game-development-in-unity-for-beginners-2024/",
      "bio": "Learn C# with Unity and create your own 2D Action Game for Absolute Beginners",
      "objectives": [
        "Unity Fundamentals: Learn Unity basics and navigation",
        "Sword Mechanics: Implement player movement, sword attacks, and combat systems.",
        "2D Environment Design: Create immersive 2D environments using Unity's Tilemap system.",
        "Polished Gameplay: Enhance gameplay with visual effects and audio cues.",
        "Enemy AI Integration: Incorporate AI behaviors for engaging enemy encounters.",
        "Audio Atmosphere Design: Craft immersive audio experiences for heightened gameplay immersion."
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Player": [
          "Adding the Player",
          "Basic Programming",
          "Player Movement",
          "Jumping",
          "Fix Jumping",
          "Changing Directions",
          "Adding Animations",
          "Setting up Animator",
          "Animations code",
          "Attack Animation",
          "Detecting enemies",
          "Fixing bugs"
        ],
        "Camera": [
          "Camera"
        ],
        "Enviroment": [
          "Tile Pallete",
          "Creating Enviroment",
          "Decorations"
        ],
        "Health": [
          "Setting up Health",
          "Health Mechanics",
          "HealthUI",
          "Health System",
          "Immortality",
          "Visual Effects"
        ],
        "Respawning": [
          "Respawn",
          "CheckPoint"
        ],
        "Scoring": [
          "Scoring system",
          "Scoring UI"
        ],
        "Enemies": [
          "Setting up enemy",
          "Patrolling",
          "Damaging Player",
          "Enemy Health",
          "Death Animation",
          "Setting up Boss",
          "Boss AI",
          "Fixing Movement",
          "Boss health",
          "Destroy Boss enemies",
          "Damaging player with Boss enemies",
          "Challenge",
          "Solution"
        ],
        "Menu": [
          "Main Menu",
          "Pause",
          "Fixing bugs"
        ],
        "Levels": [
          "Adding more levels",
          "Level Transition"
        ]
      },
      "requirements": [
        "Mac or PC capable of running Unity 3D",
        "Unity 2021 or Higher"
      ],
      "description": "Embark on an exhilarating journey into the world of game development with our comprehensive course on creating 2D action sword games in Unity. Whether you're an aspiring game developer, a seasoned programmer, or simply a gaming enthusiast eager to bring your ideas to life, this course is designed to equip you with the skills and knowledge needed to develop captivating sword-based gameplay experiences.\nThroughout this immersive learning experience, you'll delve deep into Unity, the industry-standard game development platform, mastering its essential features and tools. From setting up your project to navigating the Unity interface, you'll build a solid foundation in game development that will serve you well throughout your career.\nBut the heart of this course lies in the creation of dynamic sword mechanics. Guided by expert instructor, you'll learn to implement a wide range of swordplay mechanics, including player character movement, attacks and damage calculation. With hands-on projects and practical exercises, you'll gain invaluable experience in developing fluid and responsive combat systems that will keep players engaged and immersed in your game.\nIn addition to mastering sword mechanics, you'll explore the art of level design, crafting immersive 2D environments using Unity's powerful Tilemap system. From designing terrain and obstacles to integrating background elements, you'll learn to create visually stunning worlds that enhance the overall gaming experience.\nBut we don't stop there. This course goes beyond gameplay mechanics, teaching you how to polish your game with captivating visual effects and immersive audio. You'll discover how to add particle systems, animations, dynamic lighting, and sound effects to breathe life into your game world, creating an unforgettable gaming experience for your players.\nWhether you're dreaming of creating your own indie masterpiece or pursuing a career in the gaming industry, our course on 2D action sword game development in Unity provides the perfect launching pad for your journey. Enroll now and unlock the secrets to creating thrilling sword-based adventures that will leave players craving for more.\nThis course is suitable for beginners and intermediate game developers alike. No prior experience with Unity or game development is required; however, familiarity with programming concepts is beneficial. Get ready to unleash your creativity and embark on an epic quest to become a master game developer!\n\n\nBy the end of this course, you will:\nMaster the fundamentals of Unity game development, including project setup and navigation.\nImplement intricate swordplay mechanics, such as player movement, attacks, combos, and blocking.\nDesign immersive 2D environments using Unity's Tilemap system, including terrain, obstacles, and background elements.\nEnhance gameplay immersion with visual effects, animations, dynamic lighting, and sound effects.",
      "target_audience": [
        "Individuals new to game development looking to learn Unity and create their first 2D action game.",
        "Developers with some experience in Unity seeking to expand their skills in creating action-packed gameplay mechanics.",
        "Those interested in understanding the intricacies of designing and developing 2D action games, from mechanics to level design.",
        "Anyone passionate about game development as a hobby or potential career path, eager to delve into the specifics of creating sword-based action games in Unity."
      ]
    },
    {
      "title": "Complete Virtual Reality Developer Course",
      "url": "https://www.udemy.com/course/virtual-reality-developer-course/",
      "bio": "Virtual reality, Unity game engine,distributed virtual reality, advance virtual reality,Creating Avatars, Unity Audio",
      "objectives": [
        "Principles of Virtual Reality",
        "Major VR Platforms",
        "Mobile VR vs Desktop VR",
        "Virtual Reality tools and software installation",
        "Introduction to Unity Game Engine",
        "Developing Hello World app with Unity",
        "Deploying the application on Mobile",
        "Distributed Virtual Reality",
        "Getting dirty with Unity",
        "Getting familiar with Unity UI",
        "Debugging using Unity",
        "Project",
        "Variables in Unity",
        "Scripting Animations",
        "Rays in Physics",
        "Advance virtual reality",
        "Shaders in Unity",
        "Applying Shaders in a Project",
        "Understanding the Unity Physics",
        "Using Unity Animator",
        "Scripting Animations",
        "Arrays in Unity",
        "Creating Avatars",
        "Building and publishing a VR Unity game for Oculus",
        "Quiz ( MCQ) Virtual reality developer course"
      ],
      "course_content": {
        "Introduction to virtual reality course": [
          "Introduction",
          "Introduction to virtual reality",
          "History of virtual reality and HMD",
          "Mobile VR vs Desktop VR",
          "Virtual reality tools",
          "Virtual Reality Prerequisites and metaverse platforms"
        ],
        "Unity Game Engine": [
          "Introduction to Unity Game Engine",
          "Developing Hello World app with Unity",
          "Adding an AdMob app open ad to a Unity app",
          "Arrays in Unity",
          "Scripting Animations",
          "Coding for Animations",
          "Simple Animations and Unity animator",
          "Shader in Unity",
          "Understanding the Unity Physics",
          "Raycast in Unity and how can be used for 2D and 3D animation",
          "Working with Audio in Unity",
          "Adding Songs to the Unity"
        ],
        "Distributed virtual reality , VR applications": [
          "Distributed Virtual Reality Overview and its applications"
        ],
        "How to create Avatar using Unity and SDK": [
          "How to create Avatar",
          "Building and publishing a VR Unity game for Oculus"
        ],
        "Quiz (MCQ) virutal reality course": [
          "Virtual reality",
          "VR stimulation",
          "Virtual reality",
          "VR device",
          "VR in Industry application",
          "Virtural reality",
          "VR tools",
          "VR tools",
          "virtual reality environment",
          "VR in flight",
          "VR techonology",
          "VR limitations",
          "depth and dimension in virtual reality",
          "VR user interaction",
          "VR tool",
          "VR application in healthcare",
          "VR limitations",
          "Augmented Reality vs Virtual Reality",
          "Virtual reality",
          "Virtual reality"
        ]
      },
      "requirements": [
        "Learner should be from engineering / technical backgroud."
      ],
      "description": "This course will cover following topis\n1. Introduction to Virtual Reality\n•Principles of Virtual Reality\n•History of Virtual Reality\n•Major VR Platforms\n•Head Mounted Displays\n•Mobile VR vs Desktop VR\n•Top Development Platforms\n•Virtual Reality Prerequisites\n•Virtual Reality tools and software installation\n2. Unity Game Engine\n•Introduction to Unity Game Engine\n•Developing Hello World app with Unity\n•Deploying the application on Mobile\n3. Distributed Virtual Reality\n•Distributed Virtual Reality Overview\n•Virtual Reality in Flight Simulation\n•Military applications of Virtual Reality\n•Getting dirty with Unity\n•What are Unity Scripts?\n•Major Elements of Scripts\n•Animating Objects using Scripts\n•Changing Scenes using Scripts\n•Getting familiar with Unity UI\n•Events, Inputs and Methods\n•Debugging using Unity\n•Variables in Unity\n•Arrays in Unity\n•Scripting Animations\n•Simple Animations\n•Using Unity Animator\n•Understanding the Unity Physics\n•Why use Physics?\n•Rays in Physics\n•Working with Audio in Unity\n4. Advance virtual reality\n•Introduction to Advance VR Concepts\n•Shaders in Unity\n•Applying Shaders in a Project\n5. Creating Avatars\n6. Building and publishing a VR Unity game for Oculus\n\n\n\n\nBy knowing virtual reality can be appplied in below mentioned fields.\n1) It can be used in medical studies to enable students to know the human body structure.\n2) It can be used in scientific research laboratories so that scientist can easily research on a specific topic.\n3) It can be used for entertainments like in games and movies to make the gaming experience more real and to allow individual to experience adventures under extreme conditions.\n4) It can be used in driving schools as it give a real look of roads and traffic.\n5) It can be used in military training for the soldiers to get familiar with different areas in the battlefield.These are the thing about virtual reality.",
      "target_audience": [
        "Those who want to marke carreer in metaverse/ virual reality , will be helpful to buid career in the field."
      ]
    },
    {
      "title": "UE5 Sci-Fi VFX Series - Part 1 - Respawn & Ammo Pickup VFX",
      "url": "https://www.udemy.com/course/ue5-sci-fi-vfx-3-part-series/",
      "bio": "Create & Prototype Real-Time VFX for Game Production",
      "objectives": [
        "Create Real-Time VFX in UE5 using current video game studio production pipeline practices",
        "Understand FX asset creation using Blender, Houdini, Substance Designer and EmberGen",
        "Become proficient in Unreal materials using industry techniques for FX creation",
        "Create Blueprint logic and Niagara Systems for executing FX in gameplay"
      ],
      "course_content": {
        "Series Introduction and Setup": [
          "Series Introduction",
          "VFX Production Process and Pipeline",
          "Unreal Project Setup"
        ],
        "Respawn VFX": [
          "Section Introduction",
          "Concept Overview",
          "Concept Timelapse",
          "Texture Creation - Substance Designer",
          "Mesh Creation - Blender",
          "Importing Assets to Unreal",
          "Materials Part 1 - Scrolling Energy for Base Mesh",
          "Materials Part 2a - Character Overlay",
          "Materials Part 2b - Character Overlay Erosion and Distortion setup",
          "Materials Part 3 - Polygon Spawn Particles",
          "Niagara Part 1 - Platform Energy Base",
          "Niagara Part 2 - Character Polygon Spawn Particles",
          "Blueprints Part 1 - Level BP for Slow Motion and Respawn",
          "Blueprints Part 2 - Character BP Spawn Logic",
          "Blueprints Part 3 - Platform BP interactivity",
          "Assignment"
        ],
        "Ammo Pickup FX": [
          "Section Introduction",
          "Concept Overview",
          "Concept Timelapse",
          "Texture Creation - Substance Designer",
          "Mesh Creation - Blender",
          "Importing Assets to Unreal",
          "Materials Part 1 - Ammo Icons",
          "Materials Part 2 - Energy Cone",
          "Materials Part 3 - Material Instances and Finalization",
          "Niagara Part 1 - Continuous Polygon Particles",
          "Niagara Part 2 - Energy Cone and System Balance",
          "Niagara Part 3 - Rotating Ammo Icons",
          "Niagara Part 4 - Deactivation Polygon Particles",
          "Blueprints Part 1 - Preparing Ammo Pickup Material",
          "Blueprints Part 2 - Construction Script",
          "Blueprints Part 3 - Gameplay Logic",
          "Blueprints Part 4 - Child Blueprint",
          "Assignment"
        ],
        "Series Part 1 Conclusion": [
          "Part 1 Conclusion"
        ]
      },
      "requirements": [
        "Basic knowledge of Unreal",
        "Beginner level experience with modeling, creating textures and simulations."
      ],
      "description": "This is part 1 In a 3 part series where you will learn how to take an effect from a concept to ready for gameplay implementation. You will learn my production pipeline that has been used in many of my FX throughout AA and AAA game production.\nYou will learn how to create assets in industry software packages and prepare them properly to be imported into Unreal with optimization and performance in mind. Then you will learn different techniques to build simple to complex materials for FX that will give you great amounts of control for satisfying gameplay and art direction. These materials will also communicate with Niagara and Blueprints through the use of carefully planned parameters and bindings.\nThis course will also show you how to prototype Blueprint logic that will enable you to connect your effects to your character, props and weapons in order to run them in a gameplay ready gym for proper testing of functionality, timing, gameplay communication and visualization that satisfies art direction.\nYou will receive a project file with game ready assets to use along with this course. You will also be given score and sound design elements, courtesy of the talented Brian Michael Fuller, to hook up to your effects for a complete and well rounded prototype. The assets you will have at your disposal will simulate what it is like to work with other disciplines in a production.\nThis is a feature rich course and by the end of the series you should have a more advanced knowledge of how to pull off AAA quality FX for Game Production.",
      "target_audience": [
        "Advanced beginners to intermediate",
        "Those looking to get a job in the game industry as a VFX Artist",
        "VFX Artists looking to develop their skills further in Unreal",
        "VFX Artists looking to switch to Unreal and understand pipelines for game production"
      ]
    },
    {
      "title": "Unreal Engine 5 Co-op Multiplayer Game For Intermediate",
      "url": "https://www.udemy.com/course/unreal-engine-5-co-op-multiplayer-game-for-intermidate/",
      "bio": "Create Your First 2 Player Coop Game , Multiplayer Support RPG in Unreal Engine 5 using Blueprint.",
      "objectives": [
        "Create Your First Character With Animation And Inputs",
        "How To Use Mixamo Animations Root Motion",
        "Online Subsystem Steam For Multiplayer",
        "Add different sound effects to the engine based on Player Actions",
        "Create Save Game System To Store Coin",
        "Create mini game with checkpoints and best lap time"
      ],
      "course_content": {
        "Setup Character And Basic Animations": [
          "Download And Install Unreal Engine 5",
          "Import All Continent In To Projects",
          "Creating a New Project & Import Character",
          "Third Person Character & Movement Input",
          "Add Look inputs & Jump input",
          "Download Animation For Character",
          "Setup Idle And Walking Animations",
          "Setup Jump Animations",
          "Setup Sprinting And Running to Jump Animation",
          "Setup Crouch And Slide Animation"
        ],
        "Chracter Flying System": [
          "Setup Flying System And Animation",
          "Setup Flying To Fall And Ground Impact System With Animation",
          "Block Movement In Selected Animation",
          "Add Running To Stop Animation With Rootmotion",
          "Gadget System Coptor Animation"
        ],
        "Long Jump Ability System": [
          "Setup Long Jump System And Animation",
          "Setup Long Jump Counter System"
        ],
        "Hand Combact System": [
          "Random Punching Animation Setup",
          "Punching Damage System",
          "Area Damage With Animation",
          "Add VFX While Area Damage Event Start"
        ],
        "Sword And Shild System With Damage": [
          "Sword And Shild Animation Download And Import",
          "Download Infinity Blade Weapons And Setup Equept System",
          "4 Way Animation Setup For Sword And Shild",
          "IN Place Turn Animation Setup",
          "Sword Attack System With Root Motion",
          "Add Sword Damage System",
          "Add Shhild On Character Left Hand Socket"
        ],
        "Character Health Damage Ability System With UI": [
          "Add Health And Damage System",
          "Setup Health And Damage System UI",
          "Add UI For Ability And Inventory System",
          "Setup Ability Rule With UI",
          "Setup Inventory Ui",
          "Setup Inventory Rules",
          "Shield Reduced Damage System",
          "First Aid Kits Inventory System",
          "Pick Up First Aid Kit System",
          "Add Text Over Ui",
          "Add Input For Equipt Items",
          "Coin Collecting System With Counter",
          "Create Inventory Widget Wit UI",
          "Add Rule In Inventory"
        ],
        "In Game Purchase System": [
          "Setup Basic Purchase Logic",
          "Setup All Items Blueprint Node",
          "Fix And Optimization"
        ],
        "Game Save System": [
          "Create A Save Game Bluprint And Setup Rules",
          "Store Shop Items In Save Game BP",
          "Auto Save Coin And Hp Items"
        ],
        "Create City Map": [
          "Create New Level And Import House Model",
          "Import Wall And Road",
          "Wall And Road Setup",
          "Setup All House And Wall Using Group Link",
          "Import Trees And Place On City Map",
          "Setup Park Grass And Imports Props",
          "Import Hill Model And Block Volume",
          "Landscape Paint Materials"
        ],
        "Add Vehicle In To City Map": [
          "Import Vehicle Models And Setup Spline Movement",
          "Add Car Break Ability With Hit By Car Damage",
          "Duplicate Car Blueprint With Different Speed",
          "Add Ai Car All Around The City Road"
        ]
      },
      "requirements": [
        "Example: No programming experience needed. You will learn everything you need to know"
      ],
      "description": "In this comprehensive course, you’ll dive into the exciting world of online multiplayer game development using the latest features of Unreal Engine 5 and the power of Unreal Engine Blueprint . Whether you’re an intermediate developer or a seasoned enthusiast, this course equips you with the knowledge and skills to create your own captivating online adventures.\nCourse Highlights:\nCutting-Edge Technology: Leverage the latest Unreal Engine 5 features to build a robust online co-op game.\nTwo-Player Co-op Adventure: The main project centers around a thrilling two-player action-adventure game, but the principles you learn apply to any type of multiplayer experience.\nLevel Design: Master the art of level design, creating immersive environments that enhance gameplay.\nGameplay Features: Implement essential gameplay features such as pressure plates, movable platforms, doors, and collectible keys.\nOnline Interaction: Understand how to synchronize data between clients and servers, ensuring a seamless multiplayer experience.\nFriendship-Driven Fun: By the end of the course, you’ll have a fully functional co-op adventure game ready to play with friends online. Collaborate with a friend over the internet in a 2-player co-op adventure game.\nJoin me on this exciting journey as we unlock the secrets of multiplayer game development in Unreal Engine 5. Enroll now and start creating your own online co-op masterpiece!",
      "target_audience": [
        "No programming experience needed. You will learn everything you need to know"
      ]
    },
    {
      "title": "Master UNO Game Development: Build with Unity & C#",
      "url": "https://www.udemy.com/course/master-uno-game-development-build-with-unity-c/",
      "bio": "Learn to develop a full-featured UNO game in Unity using C#. Enhance your game development skills with hands-on project.",
      "objectives": [
        "Understand the rules of UNO and strategic gameplay.",
        "Develop AI logic for card games using C# and Unity.",
        "Implement Single Player functionality, including human and AI and players.",
        "Create a polished UNO game with UI elements and game mechanics in Unity."
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "#02 - Uno - Conzept",
          "#03 - Uno - New Project Overview",
          "#04 - Uno - Preparing Texture Atlas",
          "#05 - Uno - The Canvas"
        ],
        "The Uno Card": [
          "#06 - Uno - Card Prefab 1",
          "#07 - Uno - Card Prefab 2",
          "#08 - Uno - Card Prefab 3",
          "#09 - Uno - Display Card 1",
          "#10 - Uno - Display Card 2",
          "#11 - Uno - Display Card 3",
          "#12 - Uno - Display Card 4",
          "#13 - Uno - Display Card 5",
          "#14 - Uno - Display Card 6"
        ],
        "Uno Deck and Playfield": [
          "#15 - Uno - Initialize Card Deck1",
          "#16 - Uno - Init Card Deck2 & Shuffle",
          "#17 - Uno - Drawing a Card",
          "#18 - Uno - Player Classes",
          "#19 - Uno - GameManager Base",
          "#20 - Uno - Creating Hand Transforms",
          "#21 - Uno - Card Prefab Update",
          "#22 - Uno - Card Layout Update"
        ],
        "Uno Gameplay Mechanics": [
          "#23 - Uno - Prepare Dealing Cards",
          "#24 - Uno - Testing Deal Cards",
          "#25 - Uno - Dealing Cards Time based",
          "#26 - Uno - Dealing Cards Visually",
          "#27 - Uno - Show Hide Cards",
          "#28 - Uno - Card Interaction 1",
          "#29 - Uno - Card Interaction 2",
          "#30 - Uno - Discard Pile",
          "#31 - Uno - Playing a Card",
          "#32 - Uno - Playing a Card Visually",
          "#33 - Uno - Draw Card from Deck",
          "#34 - Uno - Game Loop",
          "#35 - Uno - Allow Player Inputs",
          "#36 - Uno - Switching Players",
          "#37 - Uno - The First Card",
          "#38 - Uno - Checking Playable Cards",
          "#39 - Uno - Block Unplayable Cards",
          "#40 - Uno - Apply Card Effects",
          "#41 - Uno - Skip Player Card",
          "#42 - Uno - Next Player Draw Cards",
          "#43 - Uno - Reverse Cards",
          "#44 - Uno - Switch Player Update",
          "#45 - Uno - Update Color Behavior",
          "#46 - Uno - Wild Panel",
          "#47 - Uno - Wild Cards and Colors",
          "#48 - Uno - Game Over Check",
          "#49 - Uno - Uno Button",
          "#50 - Uno - Bring Back Used Cards",
          "#51 - Uno - Only Draw One Card"
        ],
        "Uno AI": [
          "#52 - Uno - AI Playable Cards",
          "#53 - Uno - AI Descisions 1",
          "#54 - Uno - AI Descisions 2",
          "#55- Uno - AI Descisions 3",
          "#56 - Uno - Fixing Switch Players",
          "#57 - Uno - Random Start Color",
          "#58 - Uno - AI Wish Color",
          "#59 - Uno - AI Calls UNO"
        ],
        "Uno Final Touches": [
          "#60 - Uno - Game Over",
          "#61 - Uno - Player Highlight & Card Count",
          "#62 - Uno - Message Box",
          "#63 - Uno - Main Menu",
          "#64 - Uno - Creating A Webbuild",
          "#65 - Uno - Some Extras"
        ],
        "Conclusion and Thank you": [
          "#66 - Uno - Conclusion & Thank you"
        ]
      },
      "requirements": [
        "Basic understanding of C# is a plus, but not a must.",
        "Basic Unity knowledge: Experience with Unity's interface and basic features is a plus but not a must.",
        "PC or Mac: A computer capable of running Unity and Visual Studio.",
        "Unity and Visual Studio: Pre-installed Unity and Visual Studio or another C# IDE.",
        "No prior experience required!",
        "This course is beginner-friendly, and you'll learn everything you need to know step by step."
      ],
      "description": "Are you ready to build a complete card game from scratch? This course will guide you through the process of developing a fully functional UNO game in Unity using C#. Whether you're a beginner looking to break into game development or an experienced developer wanting to enhance your skills, this course is designed to take you step-by-step through every aspect of creating a professional-quality UNO card game.\nWhat You'll Learn:\nUnity Game Development: Get hands-on experience with Unity, one of the most popular game engines in the industry.\nC# Programming: Enhance your C# coding skills by applying them to real-world game development scenarios.\nGame Logic Implementation: Understand and implement the core mechanics of an UNO game, including turn management, card effects, and AI behavior.\nUI Design & Integration: Learn how to create and integrate user interfaces to display player hands, card effects, and game status.\nWhy Take This Course?\nHands-On Projects: This course is project-based, ensuring you gain practical experience by building a UNO game from start to finish.\nStep-by-Step Guidance: Each section is carefully structured to provide clear instructions and explanations, making it easy to follow along.\nDevelop Key Skills: By the end of this course, you will have a solid understanding of game development with Unity and C#, as well as the ability to create other card games and more complex projects.\nImportant Note:\nEducational Use Only: The materials and assets provided in this course are for educational purposes only. To stand out in the competitive game development market, students are encouraged to create their own unique assets and designs.\nWho This Course Is For:\nAspiring Game Developers: Those who are new to game development and want to build a strong foundation in Unity and C#.\nIntermediate Programmers: Developers who are familiar with C# and want to apply their skills to game development.\nIndie Game Creators: Individuals looking to expand their portfolio with a well-known card game.\nUnity Enthusiasts: Anyone interested in creating fun, interactive games with Unity.\nEnroll Now!",
      "target_audience": [
        "Aspiring Game Developers: Individuals looking to enter the world of game development and want to start with a fun, interactive project.",
        "Unity Enthusiasts: Developers familiar with Unity who want to create a complete card game project from scratch.",
        "C# Programmers: Coders who are interested in applying their C# skills to game development and learning about game mechanics.",
        "Game Design Beginners: Learners with no prior experience in game development who want to explore the fundamentals through a structured, hands-on project."
      ]
    },
    {
      "title": "Unity Game Boost: Build a Video Reward System",
      "url": "https://www.udemy.com/course/unity-build-video-reward-system/",
      "bio": "Boost your ROI from Unity games by learn how to build and reuse a Video Reward plugin in Unity 5 2015",
      "objectives": [
        "boost your revenues with the video reward system",
        "make unity bundles and packages to reuse in other unity projects",
        "design UI menus, buttons and panels",
        "master unity advertising quickly",
        "play video ads",
        "reward the player for watch the ads"
      ],
      "course_content": {
        "Getting started": [
          "Get to know your instructor",
          "Overview of the video reward system",
          "Assets overview and add them to new project",
          "Adding background and switch to platform"
        ],
        "User Interface Design": [
          "Designing the reward button UI",
          "UI of play video button"
        ],
        "Programming the logic": [
          "Add Script to play video reward action",
          "Adding the Unity Ads plugin to the project",
          "Program the Advertising initialization",
          "Integrate Game project in online Unity Ads dashboard",
          "Show the video reward zone id",
          "Write code to reward player for watching video",
          "Displaying the rewarded item panel",
          "Tweak the unity video reward UI",
          "Saving the player score increase"
        ],
        "Packaging": [
          "Export a Video Reward Ads package",
          "Importing the package in any Unity game project"
        ],
        "Bonus - Files, and coupon codes": [
          "Bonus - Files"
        ]
      },
      "requirements": [
        "have a mac, pc or linux",
        "have unity 3d installed",
        "know basics of unity"
      ],
      "description": "In this course, you will learn how to create a \"Rewarding video\" advertising system. I'm sure you've seen it in many video games, especially on iPhones and Android phones where you can press a button to \"watch a video advertisement\". Once you've finished watch the video ad, you are rewarded with in-game money, or gems, or a new character or a new virtual item.\nIt turns out to be one of the best ways for anyone making game to also make money.\nThat's right, as a game developer, you will make money each time the player watches the video advertisement, and your player is more than happy to do so since he or she is rewarded for doing so. It's a WIN-WIN.\nIn this course, you will learn how to create the video reward system using Unity 3D. Now we're going to build it from scratch, step by step so that you can recreate it yourself and understand the whole process.\nBut we're also going to create this the smart way, we're going to bundle the final system as a Unity package so that you can reuse the system easily in any of your Unity projects just by importing the package.\nWhat a great time saver.\nIf you want to make games the right way, just like professionals do, then you need to take this course.\n*** Bonus included! ***\nBy the way, as a bonus for joining this course, you get all the files of the finished reward system package, ready to use in your games. Sweeeet!\nI intentionally priced this course in a way that anyone can afford it. You'll get your money back just by joining this course and applying the package to your games. Get in here and let's get started.\n***\nThe Power of Video Game Reward Systems*\nVideo games contain elaborate reinforcement and reward schedules that have the potential to maximize motivation. Neuro-imaging studies suggest that video games might have an influence on the reward system. However, it is not clear whether reward-related properties represent a precondition, which biases an individual toward playing video games, or if these changes are the result of playing video games. Therefore, we conducted a longitudinal study to explore reward-related functional predictors in relation to video gaming experience as well as functional changes in the brain in response to video game training. Fifty healthy participants were randomly assigned to a video game training (TG) or control group (CG). Before and after training/control period, functional magnetic resonance imaging (fMRI) was conducted using a non-video game related reward task. At pretest, both groups showed strongest activation in ventral striatum (VS) during reward anticipation. At posttest, the TG showed very similar VS activity compared to pretest. In the CG, the VS activity was significantly attenuated. This longitudinal study revealed that video game training may preserve reward responsiveness in the VS in a retest situation over time. We suggest that video games are able to keep stratal responses to reward flexible, a mechanism which might be of critical value for applications such as therapeutic cognitive training.\n\n*Source: US National Library of Medicine - National Institutes of Health\nJoin now and have neuroscience work for you $\nNote: Using Unity version 5 2016",
      "target_audience": [
        "anyone with an interest in making games",
        "unity user",
        "computer student",
        "game developer",
        "game student",
        "artists",
        "serious gamers"
      ]
    },
    {
      "title": "Learn JavaScript in unity 3d in 1 hour for beginners",
      "url": "https://www.udemy.com/course/learn-javascript-in-unity-3d-in-1-hour-for-beginners/",
      "bio": "Most of John Bura's courses are on sale for 9 dollars! https://www.udemy.com/u/johnbura/ Sale ends Oct 31 2013! Act now!",
      "objectives": [
        "To learn JavaScript for Unity3D",
        "To learn good development techniques"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Course requirements"
        ],
        "Let's learn Unity 3D": [
          "Creating a javascript file",
          "Mono develop and JavaScript",
          "Functions",
          "The Start function",
          "The update function",
          "Adding in comments",
          "Calling a function",
          "Variables",
          "Initializing a variable",
          "Building your solution",
          "Variables and functions",
          "Adding Variables"
        ],
        "Game objects in unity 3d": [
          "Adding in game objects",
          "Adding in the script to the cube",
          "Rotating an object",
          "More on variables, boolean variables",
          "If Statements",
          "If statements",
          "The else statement",
          "Else if statement",
          "Passing variables to functions",
          "Thoughts about game development and becoming a good devleoper"
        ],
        "Congratulations you are finished": [
          "Course conclusion"
        ]
      },
      "requirements": [
        "Unity3D the free version",
        "A computer that can run Unity3D"
      ],
      "description": "Learn how to code in JavaScript for Unity3D. Unity 3D is best engine to make your brilliant game a reality and get it to market as quick as possible. Unity 3D is the best user friendly 3D engine on the market and if you want to learn how to command its power you have to learn how to code. This course will show you how to code in JavaScript in 1 hour. This course shows you the basics of JavaScript for Unity3D and it will tell you some fantastic software development tips that you can't get anywhere else. This course is the first course you need to take in order to get your game to market.",
      "target_audience": [
        "Complete beginners",
        "People who have never coded before"
      ]
    },
    {
      "title": "Metaverse Architect: Building Virtual Space with No Code",
      "url": "https://www.udemy.com/course/metaverse-architect-building-virtual-space-with-no-code/",
      "bio": "Learn how to build and design metaverse using Blockade Labs, Metaverses IO, and Spatial IO",
      "objectives": [
        "Learn how to build metaverse using Blockade Labs and Skybox AI",
        "Learn how to build metaverse using Metaverses IO",
        "Learn how to build metaverse using Spatial IO",
        "Learn how to customise and design metaverse avatars",
        "Learn how to build metaverse cinema using Spatial IO",
        "Learn how to invite friend to your metaverse"
      ],
      "course_content": {
        "Introduction": [
          "Introduction to the Course",
          "Table of Contents",
          "Whom This Course is Intended for?"
        ],
        "Tools & Resources": [
          "Tools & Resources"
        ],
        "Introduction to Metaverse": [
          "Introduction to Metaverse",
          "Technologies Behind Metaverse",
          "Metaverse Project Ideas"
        ],
        "Blockade Labs & Skybox AI": [
          "Exploring Skybox AI Features",
          "Generating Metaverse with Skybox AI",
          "Downloading Metaverse & Convert It to 3Ds"
        ],
        "Metaverses IO": [
          "Signing Up on Metaverses IO",
          "Exploring Metaverses IO",
          "Building Metaverse Room",
          "Testing Metaverse Room"
        ],
        "Spatial IO": [
          "Signing Up on Spatial IO",
          "Exploring Spatial IO Metaverse",
          "Creating Metaverse on Spatial IO",
          "Adding 3D Objects to Metaverse"
        ],
        "Customising Your Metaverse Avatars": [
          "Customising Your Metaverse Avatars"
        ],
        "Project: Building Metaverse Cinema on Spatial IO": [
          "Building Metaverse Cinema on Spatial IO"
        ],
        "Inviting Friends to Metaverse": [
          "Inviting Friends to Metaverse"
        ],
        "Strategies to Monetise Metaverse": [
          "Strategies to Monetise Metaverse"
        ]
      },
      "requirements": [
        "No previous experience in metaverse is required",
        "Willingness to learn and be innovative"
      ],
      "description": "Welcome to Metaverse Architect: Building Virtual Space with No Code course. This course is a comprehensive project based course where you will be fully guided step by step on how to build metaverse projects without having to write a single line of code. In the introduction session, you will be introduced to the basic fundamentals of metaverse, technologies behind metaverse, as well as some metaverse project ideas to build. Then, once you got into the project, you will extensively learn how to utilise three metaverse builder tools, the first one is Blockade Labs which is text to metaverse AI generator where you will be able to input text prompts and Blockade Labs will be able to generate you a 3D metaverse virtual reality space based on the given prompt. So, it is extremely similar to Midjourney or Stable Diffusion, the only difference here is Blockade Labs generates a 3D metaverse space instead of arts or images. Meanwhile, the second one is Metaverses IO which is no code builder platform where you can easily customise free metaverse template to build your own space, you will be guided step by step on how to use all features available on this platform as well as building and designing several interesting metaverse projects to make yourself more familiar with this tool. Lastly, the third metaverse builder tool that you will learn is Spatial IO which is actually pretty similar to Metaverse IO when it comes to features and functionalities, but Spatial IO concentrates more on virtual space design. Once all the metaverse projects have been built, we will continue by conducting testing to make sure the metaverse is comfortable to be used, easy to navigate from the perspectives of the user. Last but not least, the course will be ended by sharing several strategies that can be implemented to potentially monetise metaverse as well as some metaverse based business models you can consider to start.\nFirst of all, before getting into the course, we need to ask ourselves these questions: why should we learn about the metaverse? Why should we build a metaverse? I don’t know about you but to me, it really seems that we are slowly moving and transforming into that direction as more and more companies starting to implement work from home policy, more and more schools, colleges, universities starting to offer online classes, and in overall, like it or not, the time we spend online in most cases is way longer compared to the time we spend offline. Therefore, by knowing and understanding how to build a metaverse, you will not only get a high demand skill set in today’s economy but also you will be able to innovate your own product to fill the gap in the market. In addition to that, oftentimes people see metaverse as the main product, even though it is actually not, metaverse is simply just a platform or place to be on, just like social media, and let the people inside do what they want to do there.\nBelow are things you can expect to learn from this course:\nLearn the basic fundamentals of metaverse\nLearn the technologies behind metaverse\nLearn how to use Blockade Labs and Skybox AI to generate metaverse background from text prompt\nLearn how to use Metaverses IO to build and customise a metaverse template\nLearn how to use Spatial IO to build metaverse\nLearn how to customise avatar on Spatial IO\nLearn how to build a metaverse cinema\nLearn how to build a metaverse art gallery\nLearn how to add 3D objects to the metaverse\nLearn several different ways to monetise metaverse",
      "target_audience": [
        "People who are interested in building metaverse without code",
        "People who are interested in creating virtual space to to hold virtual events"
      ]
    },
    {
      "title": "Learn To Create Artificially Intelligent Games Using Python3",
      "url": "https://www.udemy.com/course/learn-to-create-artificially-intelligent-games-using-python3/",
      "bio": "Learn to implement basic to advanced deep learning, artificial intelligence algorithms for real world games!",
      "objectives": [
        "Learn to implement MinMax algorithm",
        "Learn about Q-Learning by implementing games",
        "Learn about Artificial Intelligence in games",
        "Learn about gym module",
        "Implement Deep Q-Learning",
        "Implement Deep convolution Q-Learning",
        "Learn about Tensorflow and Keras",
        "Learn to build complex AI player player",
        "Learn about Bellman equation and Dynamic Programming",
        "Learn about Monte-Carlo simulation",
        "Learn to implement Neural Network from Scratch"
      ],
      "course_content": {},
      "requirements": [
        "High school Mathematics: Basic Probability and Statistics",
        "No programming experience required."
      ],
      "description": "If you’re interested in learning how to make your own Artificially Intelligent games using Python, then this is the course for you!\nThis course is full of tutorial videos along with materials which one can run to get familiar with this discipline. You no longer need to read complex research papers and have a solid foundation in mathematics to get going. Just follow this course and materials and you’re on your way.\nLet's take a look at the structure of this course:\nWe are going to start with a simple game that implements popular board game algorithm: MinMax. In this game we are going to create TicTacToe and write an algorithm that plays against human player and tries to beat human player.\nNext we are going to learn about gym module: a popular library which can be used to write and test our AI algorithms.\nAfter that, we are going to learn about Bellman Equation and Dynamic Programming. We are going to learn how to find the optimal value of the states using Bellman equations through model dynamics. We are going to implement maze game to implement Q-learning algorithm.\nThen, we are going to learn about Monte-Carlo Simulation. We are going to check how value function can be predicted using Monte Carlo simulation when model dynamics is unknown.\nSimilarly, we are going to implement following games throughout this course:\n1. BlackJack game using Monte-Carlo and Q-Learning\n2. Pacman using Deep Convolution Neural Network\n3. Make unbeatable AI TicTacToe player using Tensorflow and Keras (Human Vs AI)\n4. MinMax algorithm for Board game\nGeneral Q/A's:\nWhen most people hear the term artificial intelligence, the first thing they usually think of is robots. That's because big-budget films and novels weave stories about human-like machines that wreak havoc on Earth. But nothing could be further from the truth.\nArtificial intelligence is based on the principle that human intelligence can be defined in a way that a machine can easily mimic it and execute tasks, from the most simple to those that are even more complex. The goals of artificial intelligence include mimicking human cognitive activity. Researchers and developers in the field are making surprisingly rapid strides in mimicking activities such as learning, reasoning, and perception, to the extent that these can be concretely defined. Some believe that innovators may soon be able to develop systems that exceed the capacity of humans to learn or reason out any subject. But others remain skeptical because all cognitive activity is laced with value judgments that are subject to human experience.\nArtificial intelligence (AI) refers to the simulation of human intelligence in machines that are programmed to think like humans and mimic their actions. The term may also be applied to any machine that exhibits traits associated with a human mind such as learning and problem-solving.",
      "target_audience": [
        "Beginners who want to learn to create Artificially intelligent games",
        "Programmers who want to implement AI algorithms",
        "Beginners who want to learn complex algorithms in fun way by creating games",
        "Anyone who want to learn python, pygame (game development tool) and Artificial Intelligence in general."
      ]
    },
    {
      "title": "Learn Python by making games with Pygame Zero of Mu Editor",
      "url": "https://www.udemy.com/course/learn-to-code-with-python-and-pygame-zero-for-everybody/",
      "bio": "You can enhance your Python programming skills by exploring game development with Pygame Zero and the Mu Editor.",
      "objectives": [
        "Python Programming",
        "Game Development",
        "Mu Editor",
        "Object Oriented Programming (OOP)"
      ],
      "course_content": {},
      "requirements": [
        "No programming experience needed."
      ],
      "description": "Introducing our latest video course - Learn Python Programming from Scratch through Game Development!\n\n\nThis exciting course is designed to help you learn Python programming in a fun and engaging way, by developing your very own games from scratch. No prior programming experience is required, as we will guide you through each step of the process, from setting up your development environment to coding your first game.\n\n\nUsing the user-friendly Mu Editor, which is compatible with both Mac and Windows, you will have no trouble following along with the tutorials and exercises. The step-by-step instructions are easy to understand, even for beginners, and you'll quickly gain confidence in your coding abilities as you build simple games.\n\n\nThis comprehensive course will cover a wide range of essential Python topics, including but not limited to:\n- An understanding of all datatypes, such as integers, strings, floats, booleans, lists, tuples, and dictionaries.\n- Mastering the art of classes and object-oriented programming.\n- Comprehensive coverage of inheritance, including both simple and complex concepts.\n- Learning to control the flow of your code using conditional statements like if, while, for, and match.\n- Understanding the power of functions and how to effectively pass information between them.\n\n\nBy taking this course, you will gain a solid foundation in Python programming and be well-equipped to tackle any programming challenge that comes your way. So why wait? Enroll now and start your journey towards mastering Python!",
      "target_audience": [
        "Python Beginners curious about game development"
      ]
    },
    {
      "title": "The Data Structures, Algorithms and Time Complexity Guide",
      "url": "https://www.udemy.com/course/the-data-structures-algorithms-and-time-complexity-guide/",
      "bio": "The Definitive Coding Interview Guide: Crack Whiteboard Questions in C# & Recognize Patterns in the Most Popular Topics",
      "objectives": [
        "Land a high paying role as a software developer/programmer.",
        "Analyze the time complexity of various algorithms",
        "Refresh your C# knowledge in the 10 most popular topics asked at the coding interview",
        "Learn the most commonly asked questions by the likes of Facebook, Google, Amazon and Spotify for beginners.",
        "Learn not only concepts but also be able to articulate your thought process as you plan and execute a solution.",
        "Learn how to recognize patterns for solutions to coding interview questions.",
        "Learn the best way to answer an interview question",
        "Learn through hands-on coding examples and learn to solve problems quickly"
      ],
      "course_content": {},
      "requirements": [
        "No IDE necessary. We'll run C# in the browser with Repl.",
        "Experience with object-oriented programming fundamentals. If you need experience, enroll in C# Fundamentals: Learn Coding for Game Development by Mammoth Interactive"
      ],
      "description": "Data Structures + Algorithms to Crack the Coding Interview\nOnly in The Data Structures, Algorithms and Time Complexity Guide, learn the best way to answer an interview question, look at the most commonly asked questions, and analyze time complexity of various algorithms.\nInterview Question Solutions and Time Complexity\nLearn through hands-on coding examples and learn to solve problems quickly.\nRefresh your C# knowledge and solve new problems with the most common beginner interview questions asked by FANG companies.\nAlgorithms & Data Structures - Ultimate Coding Interview Prep\nLearn the most commonly asked questions by the likes of Facebook, Google, Amazon and Spotify for beginners.\nPreparing for the C# interview is hard. You need to understand not only concepts but also be able to articulate your thought process as you plan and execute a solution.\nCOURSE BREAKDOWN\nSection 0: Introduction to Interview Questions\n\nCourse Overview\nFizzBuzz: Print the numbers from 1 to 100 and for multiples of '3' print \"Fizz\" instead of the number and for the multiples of '5' print \"Buzz\".\nTypes of Time Complexity: Learn the types of time complexity in Big-O Notation in order of horrible to good.\nSection 1: String/Array Interview Questions\n\n01 Reverse Words in a String: Given an input string, reverse the string word by word.\n\n02 Rotate Array: Rotate an array of n elements to the left by k steps.\n\n03 Isomorphic Strings: Given two strings a and b, determine if they are isomorphic.\n\n04 Kth Largest Element in an Array: Find the kth largest element in an unsorted array. Note that it is the kth largest element in the sorted order, not the kth distinct element.\nSection 2: Matrix Interview Questions\n\n01 Set Matrix Zeroes: Given a 2D matrix, if an element is 0, set its entire row and column to 0. Do it in place.\n\n02 Spiral Matrix: Given a 2D matrix, return all elements of the matrix in spiral order.\n\n03 Number of Islands: Given a 2D grid map of 1s (land) and 0s (water), count the number of islands.\n\nSection 3: Linked List Interview Questions\n\n01 Implement a Stack Using an Array: Implement a stack using an array.\n\n02 Add Two Numbers: You are given two linked lists representing two non-negative numbers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.\n\n03 Reverse a Linked List: Reverse a singly linked list.\n\nSection 4: Tree Interview Questions\n\n01 Inorder Traversal: Perform inorder traversal on a binary tree.\n\n02 Preorder Traversal: Perform inorder traversal on a binary tree.\n\n03 Postorder Traversal: Perform inorder traversal on a binary tree.\n\n04 Binary Tree Maximum Path Sum: Given a binary tree, find the maximum path sum.\n\nSection 5: Graph Interview Questions\n\n01 Clone an Undirected Graph: Each node in the graph contains a label and a list of its neighbors.\nSection 6: Sorting and Time Complexity\n\n01 Bubble Sort Algorithm: Sort a list with bubble sort.\n\n02 Selection Sort Algorithm: Sort a list with selection sort.\n\n03 Insertion Sort Algorithm: Sort a list with insertion sort.\n\n04 Quick Sort Algorithm: Sort a list with Quick Sort.\n\n05 Merge Sort Algorithm: Sort a list with Merge Sort.\n\n06 Time Complexity of Different Sorting Algorithms\n\nSection 7 Dynamic Programming Interview Questions\n\n01 Coin Change: You are given coins of different denominations and a total amount of money amount. Write a function to compute the fewest number of coins that you need to make up that amount.\n\n02 Edit Distance: Find the edit distance between two strings.\n\n03 Distinct Subsequences: Given a string S and a string T, count the number of distinct subsequences of T in S.\n\n04 Maximum Sum Subarray: Find the sum of contiguous subarray within a one-dimensional array of numbers which has the largest sum\nSection 8 Bit Manipulation Interview Questions\n\n01 Bitwise and Shift Operators: Manipulate bits and shift bits to change values.\n\n02 Single Number: Given an array of integers, every element appears twice except for one. Find that single one.\n\n03 Sum of Two Integers: Calculate the sum of two integers a and b, but you are not allowed to use the operator + and -.\n\n04 Number of 1 Bits: Take an unsigned integer and return the number of ’1' bits it has (also known as the Hamming weight.)\n\n05 Reverse Bits: Reverse the bits of a given 32 bit unsigned integer.\n\n06 Bitwise AND of a Range: Given two non-negative long integers, a and b and given a <= b, find the bitwise AND of all integers from a and b.\nSection 9 Combinations and Permutations Interview Questions\n\n01 Permutations: Print all permutations of a given string.\n\n02 Distinct Permutations of a String: Print all distinct permutations of a string that contains duplicates.\n\n03 Letter Combinations of a Phone Number: Given a digit string, return all possible letter combinations that the number could represent on a phone board.\n\n04 Factor Combination: Return all possible combinations of an integer n’s factors.\nSection 10 Math Interview Questions\n\n01 Reverse Integer: Reverse the digits of an integer n.\n\n02 Palindrome Number: Determine whether an integer is a palindrome. Do this without extra space.\n\n03 Excel Sheet Column Numbe: Given a column title from an Excel sheet, return its corresponding column number.\nA SCHOOL YOU CAN TRUST\nLifetime access that never expires\nProject-based curriculum to superboost your portfolio\nGraduation certificate for every course\nAbsolute beginner-friendly\nNew courses every month\nEfficient lectures with step by step explanations\nRelevant industry topics 8 years of award-winning course delivery\n800,000 students in 186 countries\nLearn with free tools and affordable courses\nREVIEWS OF MAMMOTH COURSES\nCaptivating voice, easy to follow at a rapid pace, get some paper and fasten your seat-belts. I'm enjoying every second of this.\n— PHILIP MURRAY\nI have completed many Udemy tutorials. This one is the most outstanding one that I have seen thus far. It is doubtful that it could be topped. This is a superior tutorial. Amazing.\n— JOSEPH APPLEGARTH\nCOURSE AUTHOR\nAlexandra Kropova, Software Developer at Mammoth Interactive INC.\nAlexandra Kropova is a software developer specializing in OOP and JavaScript, with extensive experience in full-stack web development and app development. She has helped produce courses for Mammoth Interactive INC. since 2016, including the Coding Interview series in Java, JavaScript, C++, C#, Python and Swift.",
      "target_audience": [
        "You have a C# interview coming up and need to learn how to answer questions properly",
        "You need to learn the most popular questions that you might be asked",
        "You need to learn the top 10 most common topics asked about and sample questions for each",
        "Anyone learning C#",
        "You haven't used C# in a while and want to refresh your knowledge"
      ]
    },
    {
      "title": "How to Make Video Games: The Smarter, Faster Way",
      "url": "https://www.udemy.com/course/make-video-games/",
      "bio": "Learn to Design and Develop 3 Games From Scratch (no experience needed)",
      "objectives": [
        "How to Create Awesome Characters",
        "How to Use GameMakerStudio 2",
        "Video Game Programming",
        "Basic 2D Animation",
        "How to Find and Fix Bugs",
        "How to Storyboard Your Game",
        "Where to Get Game Assets (for free)",
        "How to Add Sound Effects",
        "How to Develop Your Game Ideas",
        "Game Design Mechanics",
        "How to Make Fun Levels",
        "How to Set Game Difficulty",
        "How to Add Visual Effects",
        "How to Use a Game Design Document",
        "How to Create a Points System",
        "How to Stay Focused and Motivated"
      ],
      "course_content": {},
      "requirements": [
        "GameMaker Studio",
        "PC running Windows XP, Vista, 7, or later",
        "A DirectX 9 (or later) compatible graphics card with at least 32MB of memory",
        "A screen resolution of at least 1024x768 and 65536 (16-bit) colours (but preferably 32-bit true colour)"
      ],
      "description": "In this course, we'll teach you the exact process needed to create as many video games as you want. All with NO EXPERIENCE or coding knowledge required.\nWhy GameMaker Studio?\nGame Maker Studio is one of the most popular engines for 2D top-down or side-view games. GameMaker Studio 2 is a fantastic option for those just beginning their journey.\nOne of the things that GMS spearheaded, is game creation with minimal coding skills.\n\nWhere Do You Start?\nThere's so much information available that it can seem overwhelming. That's why we built this course. We've broken down and organized everything you NEED to know and removed all that you don't.\n\n\nNo more wasting time ...\nlooking through support doc's\ntrying to teach yourself to code\nreading forum threads\nwatching old youtube videos\nWe'll hold your hand and walk you through every step of the process.\n\n\nWho Should Take This Course?\nIf you've been dreaming of making your own video games but held back because you didn't know how to start, then this course is for you!\n\nWhat's Included:\nEverything you'll need to make awesome video games will be included in this course.\nThe GameMaker Studios Software and the asset programs you'll use are free to start.\n\n\nAlso included are:\nHours of fun, over-the-shoulder video tutorials.\nAccess to all course materials from ANYWHERE in the world.\n100% ownership of your game and intellectual property.\n\n\nWhat You'll Learn:\nWe've broken down this course into easy-to-understand modules and lessons that you can revisit as many times as you'd like.\nLearn the ins and outs of what goes into making a character. The character is the most important part of a video game, so we'll want to spend plenty of time learning how to create great characters. Explore all the options GameMaker Studio 2 has to offer to get our character moving around. By the end of this module, we'll have a character running and jumping around.\nWe'll also spend some time learning how to create animations (like fireballs) for our character.\nNow that we have a character moving around the screen, let's build some spaces for them to move around in!\nWe'll go over how to create level layouts and add some fun mechanics to our environment.\nEvery game needs a title screen, and we can create ours using GameMaker Studio 2!\nWe'll also use GameMaker to save and load game data.\nGiving the player goals is a crucial part of any game, so let's explore a few ways to do that in our games!\nYou'll learn all about collectibles, enemies, and creating big boss battles.\nThe difference between a good game and a great game is its audio. You'll learn how to implement great sound, and we'll go over the best ways to add sound effects and music to add life to your game.\nMuch like sound effects, adding visual effects to our game makes the overall experience much better. Even tiny visual effects can make a feature of the game come to life!\nBy the end of this course, you'll learn to add effects and animations your players will love.\n\n\nFrequently Asked Questions\n\n\nWhen does the course start and finish?\nThe course starts now and never ends! It is a completely self-paced online course - you decide when you start and when you finish.\nWhat if I am unhappy with the course?\nWe want you to be satisfied, so all eligible courses purchased on Udemy can be refunded within 30 days. For whatever reason, if you are unhappy with a course, you can request a refund, provided the request meets the guidelines in The Udemy refund policy.\nDo I need to know how to code?\nNope! This course is for anyone, including beginners with no experience.",
      "target_audience": [
        "Beginner"
      ]
    },
    {
      "title": "Procedural Weapon Generation with Blender 4.4",
      "url": "https://www.udemy.com/course/making-procedural-weapons-in-blender-3/",
      "bio": "Build 100s of Game-Ready Assets Instantly with Geometry Nodes & Python",
      "objectives": [
        "Make python scripts in blender to speed up your work flow",
        "Learn about Geometry Nodes in Blender 3",
        "Make 100s of weapons in just one click",
        "Create many game assets in a short amount of time."
      ],
      "course_content": {
        "Welcome and Setup [NEW Blender 4.4 Content]": [
          "Welcome To The Course",
          "Suitability Of Procedural Generation",
          "Setting Project Goals",
          "Outlining Our First Specification",
          "Gather Reference Material",
          "Use PureRef For Images",
          "Modelling Your First Components",
          "3 Axe Challenge",
          "Materials and Material Slots",
          "Preparing Your Models For Export",
          "Export Your Models and Testing",
          "Section Wrap Up"
        ],
        "Assembling Using Geometry Nodes [NEW Blender 4.4 Content]": [
          "Welcome To Section 2",
          "Origin Manipulation",
          "Geometry Nodes Overview",
          "Instancing On Points",
          "Collection Info",
          "Random Values",
          "Managing External Input Values",
          "Using A Grid For Displaying Models",
          "A Random Seed Using Time",
          "A Random Seed Using Position",
          "Organising Nodes",
          "Fake Users",
          "A Random Seed Using Scripting",
          "Exporting Random Axes",
          "Section Wrap Up"
        ],
        "Automation With Python [NEW Blender 4.4 Content]": [
          "Welcome To Section 3",
          "The Sections Journey",
          "Finding Code - References",
          "Finding Code - In Blender",
          "Pseudo Coding",
          "Importing Modules",
          "Clearing The Console",
          "Finding An Object Using Python",
          "Selecting An Object By Name",
          "Applying A Modifier",
          "Making A Single Point",
          "A Quick Code Check And Tidy",
          "Save and Revert",
          "Adding a Modifier In Python",
          "Exporting As A Glft In Python",
          "Creating An Export Folder",
          "Creating A For Range Loop",
          "Refactoring Our Code & Functions",
          "Section Wrap Up"
        ],
        "Adding More Elements [NEW Blender 4.4 Content]": [
          "Section Introduction",
          "What Problem Are We Solving",
          "Using A Bounding Box",
          "Creating Vertex Groups",
          "Instancing On A Vertex Group",
          "Exportable Attachment Points",
          "Setting Up A New Export Script",
          "Selecting Objects In A Collection",
          "Selecting Children Of An Object",
          "Exporting Individual Weapon Components",
          "Exporting Components - Using A List (EXTRA)",
          "Section Wrap Up"
        ],
        "Section 1 Welcome And Setup [Blender 3 Content -Being Removed May 2025]": [
          "Welcome To The Course",
          "Suitability Of Procedural Generation",
          "Setting Project Goals",
          "Outlining Our First Specification",
          "Gather Reference Material",
          "Use PureRef For Images",
          "Modelling Your First Components",
          "Materials and Material Slots",
          "Preparing Your Models For Export",
          "Export Your Models and Testing",
          "Section Wrap Up"
        ],
        "Assembling Using Geometry Nodes [Blender 3 Content -Being Removed May 2025]": [
          "Welcome To Section 2",
          "Origin Manipulation",
          "Geometry Nodes Overview",
          "Instancing On Points",
          "Collection Info",
          "Random Values",
          "Managing External Input Values",
          "Using A Grid For Displaying Models",
          "A Random Seed Using Time",
          "A Random Seed Using Position",
          "Organising Nodes",
          "Fake Users",
          "A Random Seed Using Scripting",
          "Exporting Random Axes",
          "Drag, Drop & Search - New in Blender 3.1",
          "Section Wrap Up"
        ],
        "Section 3 Automation In Blender [Blender 3 Content -Being Removed May 2025]": [
          "Welcome To Section 3",
          "The Sections Journey",
          "Finding Needed Code",
          "Pseudo Coding",
          "Auto-Close Brackets And Quotes",
          "Importing Modules",
          "Clearing The Console",
          "Finding An Object Using Python",
          "Selecting An Object By Name",
          "Applying A Modifier",
          "Making A Single Point",
          "A Quick Code Check And Tidy",
          "Exporting As A GLTF in Python",
          "Creating An Export Folder",
          "Creating A For Range Loop",
          "Creating And Assigning A Node Tree",
          "Time For A Refactor",
          "Section Wrap Up"
        ],
        "Adding More Elements [Blender 3 Content -Being Removed May 2025]": [
          "Section Introduction",
          "What Problem Are We Solving?",
          "Using A Bounding Box",
          "Refactoring Our Nodes (Node Groups)",
          "Creating Vertex Groups",
          "Instancing On A Vertex Group",
          "Using Python To Toggle And Populate Fields",
          "Using Attribute Names Blender 3.2 Onwards",
          "Checking And Fixing Our Code",
          "Exportable Attachment Points.",
          "Setting Up A New Export Script",
          "Looping Through Objects In A Collection",
          "Selecting Children Of An Object",
          "Exporting Individual Weapon Components",
          "Section 4 Wrap Up"
        ]
      },
      "requirements": [
        "A basic knowledge of Blender would be helpful to get going quickly"
      ],
      "description": "THE COURSE HAS BEEN UPDATED TO BLENDER 4.4\n\nWant to generate hundreds of unique weapons at the click of a button? This is the course for you.\nBlender is an incredibly powerful tool, perfect for building game-ready 3D assets. In this course, you'll use Blender 4.4 alongside the free and open-source Godot game engine — although the techniques you learn will transfer easily to Unity, Unreal, or any engine of your choice.\nYou’ll learn:\nWhen and why to use procedural generation\nThe core workflow for exporting to game engines\nHow to use Geometry Nodes to automatically assemble unique weapons\nHow to write a simple export script to save hours of manual work\nWhat skill level is this course?\nThis is an intermediate-level course — but don’t let that scare you. Every concept is introduced clearly, and I talk through all the steps. If you’re completely new to Blender or 3D, you may find some parts challenging. But if you have any basic familiarity with Blender, you’ll be able to jump in and follow along.\nHere’s how it works:\nWe start by manually building modular weapon parts and walking through the process to make sure your final exports work smoothly in-engine. Every time you learn a new technique, you'll:\nApply it immediately in a hands-on project\nBe challenged to use the concept creatively\nBe shown the full step-by-step build\nReuse and reinforce previous skills throughout\nYou’ll get lifetime access to the course and all project files, reference materials, and resources. Every lesson includes screencasts and talking-head videos to keep things clear and engaging.\nBuilt for the Blender 4.4 workflow\nThe course content is now fully updated for Blender 4.4, so you’ll be learning with the most recent tools and improvements. You’ll be using the latest Geometry Nodes workflows and Blender features as we build procedural assets ready for export.\nCommunity & Support\nYou’ll also get access to our private community site where you can share your creations and ask questions, plus our active Discord server for live support and student chat.\nLet’s hop into Blender 4.4 and start creating!",
      "target_audience": [
        "Blender Users want to make game assets quickly without compromising on quality"
      ]
    },
    {
      "title": "Full BabylonJS Game Dev (2D, 3D, Online with ColyseusJS)",
      "url": "https://www.udemy.com/course/full-babylonjs-game-dev-2d-3d-online-with-colyseusjs/",
      "bio": "Create solo and online multiplayer games with Typescript, Babylon JS and Colyseus JS for web including mobile design.",
      "objectives": [
        "Babylon JS Framework for 2D & 3D Web Videogame Development",
        "Colyseus JS Framework for Online Multiplayer Videogame Development",
        "Discover Basic Components of 3D Engine (Materials, Textures, Interaction Systems etc.)",
        "Two Complete Projects in 2.5D and 3D (Hide&Seek, Pandas Love You)",
        "Learn Good Practices and Tips for Online Videogame Development",
        "Learn Responsive Design approach with BabylonJS for Computer and Mobile",
        "Theoretical and Practical approaches to Build Videogames",
        "Discover Coding Practices to make Complete Web Videogames in Typescript",
        "Create Projects with or without BabylonJS Editor",
        "First insights in Project Production for Indie Game Development"
      ],
      "course_content": {
        "Introduction & BabylonJS Overview": [
          "Introduction",
          "Presentation of BabylonJS",
          "Engine & Scene classes",
          "Cameras & Lights",
          "Textures & Materials",
          "Physics & Particle Systems",
          "Inputs & GUI & Asset Management"
        ],
        "Hide&Seek - Our first 2.5D Game !": [
          "Presentation of Hide&Seek",
          "Project Setup",
          "Setup Canvas & Window",
          "Import Assets",
          "Architecture & Gameloop",
          "Setup Start UI",
          "Finish Start UI",
          "Resize Screen & Multi Navigator Display",
          "Main Menu Setup & Change Scene",
          "Context inside Component & Function",
          "Helper Functions",
          "Main Menu Buttons",
          "Animated Background with SpriteManager",
          "Animated Background with SpriteMap",
          "Animated Background with SpritePackManager",
          "Animated Player Mesh Part1",
          "Animated Player Mesh Part2",
          "Follow Camera and Transparency Issues",
          "Solo Menu Title",
          "Solo Menu UI",
          "Game Scene preload",
          "Game Scene Environment",
          "Game Scene Environment Integration",
          "Game Scene Skybox",
          "Game Scene Particle Effects",
          "Game Scene Move Player",
          "Game Scene Animate Player",
          "Invisible Walls",
          "NPCs & Behaviors",
          "HUD Timer Part 1",
          "HUD Rabbit Counter Part 2",
          "UI Pause Menu",
          "UI Exit Button",
          "Interaction with NPCs",
          "Interaction Feedback",
          "Win & Loose Conditions",
          "Local Multiplayer Menu",
          "Local Multiplayer Views & Interactions",
          "Local Multiplayer Feedbacks",
          "Sound Class for Musics",
          "Sound Class for Sfx",
          "Sounds Options",
          "Controls Options",
          "Start Mobile UI",
          "Ingame Mobile UI",
          "Release & Production",
          "Conclusion"
        ],
        "Pandas Love You - 3D Online Multiplayer Shooter Game": [
          "Presentation of Pandas Love You",
          "Presentation of BabylonJS Editor",
          "BabylonJS Editor - Main Files",
          "BabylonJS Editor - Scripts",
          "Global Architecture of our Project",
          "Import Assets",
          "Setup Start UI",
          "Start UI Change scene",
          "Setup Menu UI",
          "Menu UI Lobby and Room",
          "Environment Map Integration",
          "Setup GameManager & Player & Enemy classes",
          "Import Enemy Mesh",
          "Basic AI Enemy Behavior",
          "Optimize import with Asset Container",
          "Import Player Paws Mesh",
          "Enemy Death with new Bounding Box",
          "ColyseusJS - Presentation",
          "ColyseusJS - Setup",
          "Setup NetworkManager",
          "Create Room",
          "Join or Create Room",
          "Room List",
          "Player Instantiation",
          "Player Position Synchronization and Interpolation",
          "Player Rotation Synchronization",
          "Player Projectile Synchronization",
          "Enemy Apparition Synchronization",
          "Enemy Killing Synchronization",
          "Waves of Enemies Synchronization",
          "Master Role",
          "Enemy Position Synchronization",
          "Killing Players",
          "Win & Loose & Restart",
          "SoundManager for Musics",
          "SoundManager for Loop & Sfx",
          "[Extra] Blender & Mixamo - Setup 3D Model",
          "Player Animation States Attack & Idle",
          "Player Animation Movements",
          "Global Conclusion"
        ]
      },
      "requirements": [
        "Basic programming experience needed in Javascript or Typescript.",
        "No specific knowledge is required in Videogame Design.",
        "Computer capable of running BabylonJS 5.0",
        "Internet access to import packages"
      ],
      "description": "Welcome to my Babylon JS course, where you will learn everything you need to know about creating 2D and 3D web games, including solo and local multiplayer development, using TypeScript and BabylonJS for graphics and game features, and ColyseusJS for the online multiplayer part.\n\n\nThe course is divided into three main parts.\n\n\nIn the first part, we will provide a quick theoretical overview of BabylonJS as a 3D web engine. This will include its features, capabilities, and limitations. You will have a presentation of the main classes and components of this framework.\n\n\nIn the second part, we will put our newfound skills to the test by creating a 2.5D game called 'Hide&Seek'. This game will feature mobile-responsive design principles and a local multiplayer approach, allowing players to cooperate together to win. You'll have tips and coding practices to create 2D and 2.5D games, with a proper architecture and satisfying graphics.\n\n\nIn the final part of the course, we will explore the world of 3D online multiplayer game dev by creating a first person shooter game called 'Pandas Love You'. Using ColyseusJS to handle the online multiplayer part, we will use the BabylonJS Editor to create an environment and discover coding practices using this specific tool.\n\n\nIt is important to note that this course does not cover topics such as :\nDeep performance optimization\nMarketing\nCommunication strategy\nGraphic asset creation\nSound asset creation\nHowever, you will understand and learn the essential skills to create high-quality games  from a coding perspective and how to find appropriate asset resources.\n\n\nLastly, I want to emphasize that all the assets used in the projects are free to be used, as long as the creators are cited and all conditions of their respective license are filled. I really want to encourage the use of free resources and the support of talented creators in the game development community.\n\n\nWhether you are a beginner or an experienced game developer, this course is designed to help you master the art of creating web games using BabylonJS and ColyseusJS. By the end of the course, you will have the skills and knowledge you need to take your game development career to the next level.\n\n\nSo, let's get started!",
      "target_audience": [
        "Beginner Typescript or Javascript developers curious about Videogame Development",
        "Curious learners about Videogame Development",
        "Curious learners about Web 3D Engine"
      ]
    },
    {
      "title": "Unreal Engine 5: Easy Cinematic Environments",
      "url": "https://www.udemy.com/course/unreal-engine-5-easy-cinematic-environments/",
      "bio": "Learn the basics of Unreal Engine 5 by making Natural Environments",
      "objectives": [
        "Learn the basics of using Natural Environments in Unreal Engine 5 with a Project based approach",
        "Learn the basics of Lighting in Unreal Engine 5 with a Project based approach",
        "Learn the basics of Camera Animation in Unreal Engine 5 with a Project based approach",
        "Learn the basics of Rendering in Unreal Engine 5 with a Project based approach"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Scene 01: Road in Forest": [
          "Setting up the Scene and Making the Road",
          "Adding Foliage and Lighting the Scene",
          "Adding the Car and Rendering"
        ],
        "Scene 02: Tree on Concrete": [
          "Setting up the Scene and Adding the Tree",
          "Adding details and Rendering"
        ]
      },
      "requirements": [
        "Some experience with Unreal Engine 5 will be helpful"
      ],
      "description": "Unreal Engine 5 is very high in demand right now especially because you can make game levels and virtual movie sets very easily but learning it can be a little intimidating for beginners, which is why I made this class just to show you guys how to make natural environments in unreal engine 5!\nMaking natural environments in unreal engine 5 is easier than ever because of the new Lumen lighting system combined with Megascans asset library and in this class, I am going to be showing you the whole process of creating hyper realistic natural environments from finding inspiration to blocking out the first draft of the scene to adding Megascans assets and finally post processing and rendering!\nNow this tutorial is extremely easy and is made for Unreal beginners who have very little experience, however, you are expected to know how to navigate the UI of Unreal Engine and use basic tools.\nThe good thing about this class is that this class will show you the raw process of a 3D artist in\ncreating art. We will be solving all problems and making all creative decisions together!\nSo what are you waiting for? Just start this class today and take your Unreal skills to a whole new level!",
      "target_audience": [
        "Artists wanting to learn Unreal Engine 5 with a project based approach"
      ]
    },
    {
      "title": "Racing Car and Epic Online Services \"EOS\" in Unreal Engine 5",
      "url": "https://www.udemy.com/course/racing-car-and-epic-online-services-eos-in-unreal-engine-5/",
      "bio": "Creating a Racing Game, Managing Player Data with Epic Developer Portal Integration in C++ and Unreal Engine Blueprints",
      "objectives": [
        "Mastering Unreal Engine 5 for racing games.",
        "Integrating seamlessly with Epic Games developer portal.",
        "Secure sign-in and player data management with C++ and Blueprints.",
        "Uploading and Retrieving Player Data using Epic Game Online Services Developer Portal.",
        "Crafting achievements and stats for player engagement.",
        "Comprehensive hands-on game development journey.",
        "Building and publishing games on Epic Games Store.",
        "Setting up wheeled vehicle blueprints for dynamic play.",
        "Utilizing enhanced input methods for precise control.",
        "Implementing car animations and snowy map collisions.",
        "Creating pickups, Niagara effects, and immersive sounds."
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Racing Car": [
          "Creating Unreal Engine 5 Project",
          "Setup Car",
          "Input Action",
          "Animation Blueprint",
          "Player Collision",
          "Pickup Class",
          "Destroy Effects"
        ],
        "Developer Portal": [
          "Developer Portal Organization",
          "Creating Product",
          "Developer Portal and Unreal Engine"
        ],
        "Log In": [
          "Player Controller",
          "Login Function",
          "Handle Login",
          "PlayerController header file",
          "PlayerController cpp file",
          "Login and Game Mode",
          "EOS Dev Auth Tools"
        ],
        "Upload Player Data": [
          "Upload Player Data Function",
          "Converting Data",
          "Upload Save Game file"
        ],
        "Load Player Data": [
          "LoadPlayerData()",
          "Blueprint Load Data"
        ],
        "User Interface": [
          "Widget Blueprint",
          "Updating UI"
        ],
        "Achievements and Stats": [
          "Creating Achievements and Stats",
          "RacingCarPlayerState.h file",
          "Updating Stats",
          "RacingCarPlayerState.cpp file",
          "Updating Stats Blueprints",
          "Unlock Achievements"
        ],
        "Build and Publish": [
          "Building the Game for Windows",
          "Publishing the Game on Epic Games Store"
        ]
      },
      "requirements": [
        "Basic Unreal Engine knowledge."
      ],
      "description": "Are you ready to unleash your creativity and take your game development skills to the next level with Unreal Engine 5? Look no further! This comprehensive course covers everything you need to know, from creating your Unreal Engine 5 project to publishing your masterpiece on the Epic Games Store.\nYou'll start by diving into the fundamentals of Unreal Engine 5, learning how to set up a wheeled vehicle sports car blueprint and implement input actions using the latest enhanced methods. Explore the intricacies of car animation blueprints and tackle player collision on dynamic snowing maps for added realism.\nBut that's just the beginning! We'll delve into advanced topics such as creating a pickup class for in-game items, unleashing destructive Niagara effects and immersive soundscapes, and seamlessly integrating with the Epic Games developer portal.\nDiscover the power of the Epic Games developer portal as we guide you through organization, product setup, and connecting it to your Unreal Engine 5 project. Learn to implement secure sign-in functionality to players' Epic Games accounts using a combination of C++ and blueprint scripting, and explore essential tools like EOS Auth for authentication.\nBut wait, there's more! Dive deeper into player engagement with features like uploading player data using save game objects, storing and retrieving player data from the developer portal, and dynamically updating widget blueprints with new cloud-loaded data.\nAchievements and stats are crucial for player progression and satisfaction. Learn to create and manage achievements and stats in the Epic Games Store, and update them seamlessly from your game using C++ functions and blueprint scripting.\nFinally, we'll guide you through the process of building your game for Windows and publishing it on the Epic Games Store, reaching millions of players worldwide.\nJoin us on this epic journey and turn your game development dreams into reality with Unreal Engine 5!",
      "target_audience": [
        "Individuals keen on integrating with Epic Games developer portal.",
        "Intermediate developers seeking advanced game dev skills.",
        "Those interested in crafting immersive racing games.",
        "Epic Games Online Services.",
        "Learning how to build and publish your final game on Epic Games Store."
      ]
    },
    {
      "title": "Unity Android : Build 3D Endless Runner Hyper Casual Game",
      "url": "https://www.udemy.com/course/unity-android-3d-runner-hyper-casual-game/",
      "bio": "Build A 3D Endless Runner Game with Unity & C#. Create Hyper Casual Runner Game for Mobile and PC with Unity",
      "objectives": [
        "Build 3D Endless Runner Game",
        "Learn to Create 3D Games in Unity",
        "Spawn Random Enemies",
        "Implement Mobile Touch Inputs",
        "Learn to Build & Publish Android Game",
        "Learn C# Basics from scratch"
      ],
      "course_content": {
        "Introduction": [
          "Introduction To This Course",
          "Installing & Setting Up Unity 6",
          "Creating Your First C# Script in Unity 6",
          "Setting Up Unity 6 for Android Game Development",
          "Build Your First Android Game Start to Finish in 40 Minutes"
        ],
        "C# Scripting Basics for Absolute Beginners": [
          "Getting Started With C# Scripting in Unity",
          "Understanding Structure of a C# Script",
          "Event Functions in Unity",
          "Variables in C#",
          "Public variables in Unity C#",
          "The Update Fuction in Detail",
          "Function Basics in C#",
          "Functions with Parameters & Return types in C#",
          "if else statements in C#",
          "More Conditions & Equality Checking",
          "Boolean variables in C#",
          "Arrays in C# Unity",
          "More about Arrays in C#",
          "For loops in C#",
          "While loops in C#",
          "foreach loops in C#",
          "Switch Case Statements in C#"
        ],
        "Getting Started With 3D Endless Runner Game": [
          "Setting Up The Game",
          "Adding The Player",
          "Creating Player Controller Script",
          "Limiting Player Position"
        ],
        "Adding Obstacles To The Game": [
          "Creating Enemies",
          "Spawning Enemies from Random Position",
          "Restarting The Game on Collision with Enemies"
        ],
        "Creating User Interface and Score": [
          "Creating The Score System",
          "Press Any Key To Start The Game",
          "Creating Animated Blinking Text",
          "Creating The Main Menu",
          "Saving Score and Creating High Score",
          "Adding Fog Effect"
        ],
        "Building and Publishing to Android": [
          "Adding Touch Input Controls The Simplest Way",
          "Creating Screen Independent UI that Scales Automatically",
          "Converting To Android & Running on Mobile Device"
        ],
        "Android Game Development Basics in Unity": [
          "Understanding Touch Inputs in Unity",
          "Touch & Destroy Objects with RayCasting in Unity",
          "Accelerometer Inputs in Unity",
          "Creating Responsive User Interface in Unity",
          "Touch Swipe Input Controls in Unity",
          "Touch Joystick Input control in Unity",
          "Creating Your First Android Game (2018)",
          "Setup Unity and Build your first Android Game(2017)"
        ],
        "Course End Greetings": [
          "Congrats You have finished The Course"
        ]
      },
      "requirements": [
        "Basic understanding of Unity & C# scripting is helpful but not necessary"
      ],
      "description": "Do you want to Learn how to build a 3D Android Hyper Casual Game for Android?\nThen this is the perfect course for you.\nList of Things You Will Learn:\n1. Build a 3D Endless Runner Game in Unity\n2. Create an Android Game from Scratch\n3. Learn C# Basics for Absolute Beginners\n4. Implement Touch Input controls for Mobile\n5. Create Controls that work on Both PC & Mobile\n6. Design Responsive UI Elements\n7. Add Polish to your Game and Make it Stand out\n\n\nA Powerful Skill at Your Fingertips  Learning the fundamentals of Unity Android Game Development puts a powerful and very useful tool at your fingertips. Unity is free, easy to learn, has excellent documentation, and is the game engine used for building android games.\nJobs in unity android game development are plentiful, and being able to learn unity android game development will give you a strong background to more easily build awesome android games.\nContent and Overview   Suitable for beginning programmers, through this course of 20+ lectures and 10 hours of content, you’ll learn all of the unity android game development fundamentals and establish a strong understanding of the concept behind android game development.\nIn The Beginning you'll learn to setup Unity 2019 for Android Game Development and create your first game quickly. You'll also build and install the android game on your android device.\nThen you'll learn absolute basic concepts of C# scripting for Unity Game development which will really help the beginners to progress in the course.\nStudents completing the course will have the knowledge to create fully functional and ready to publish android games with unity.\nComplete with working files, you’ll be able to work alongside the author as you work through each concept, and will receive a verifiable certificate of completion upon finishing the course.",
      "target_audience": [
        "Anyone willing to build 3D Endless Runner Game for Android or PC"
      ]
    },
    {
      "title": "Complete guide: Action horror 3D game in Unity 2020",
      "url": "https://www.udemy.com/course/make-a-3d-game-in-unity-2020-from-scratch-with-free-assets/",
      "bio": "In this course we will use only freely available models, textures and sounds to create an action horror 3D game!",
      "objectives": [
        "Game development basics",
        "Use Unity 2020 and Rider for C# development",
        "Code a basic 3D player controller",
        "Import 3D models from Sketchfab",
        "Use Unity Asset store",
        "Import animations from Mixamo",
        "Handle input controls",
        "Implement gravity",
        "Design gameplay and add special powers",
        "Code TELEKINESIS as a special power",
        "Add zombie enemies",
        "Code enemy spawner/generator",
        "Code basic enemy AI",
        "Code a health system for the player",
        "Tweak the game to look amazing",
        "Use sound effects and create a sound system",
        "Model the terrain, paint trees and grass",
        "Add atmosphere with the lighting system",
        "Enable CLOTH SIMULATION for the player's cape",
        "Design GUI elements for health etc.",
        "Import extra fonts, sounds and music",
        "Create a score system, win and lose scenarios",
        "Build the game into an executable"
      ],
      "course_content": {
        "Introduction, objectives and preparing your workspace for development": [
          "Introduction",
          "Install Unity 2020 and Rider for C# development"
        ],
        "Create your first game": [
          "Animate your first 3D model: import animations, models and use unity asset store",
          "Code a basic 3D player controller: handle input, control animations from script",
          "Advanced animation states and gravity"
        ],
        "Design gameplay and add special powers": [
          "Add zombie enemy spawner and code simple artificial inteligence",
          "Code TELEKINESIS as a special power",
          "Zombie attacks, player health system, death animations and UI"
        ],
        "Tweak the game to look amazing": [
          "Enable CLOTH SIMULATION for the player's cape, use better models for the player",
          "Atmosphere: Model the terrain, paint trees and grass",
          "Design GUI elements, create a score system and win/lose scenarios",
          "Use sounds effects and create a sound system. (Optional: Add fog with AURA 2)",
          "Final build: Tweak the gameplay and the sounds of walking and build the game!"
        ]
      },
      "requirements": [
        "At least minimal knowledge of coding - if conditions, for loops"
      ],
      "description": "Hi, my name is Jan Jileček and I am a professional game developer with master's degree in computer science and I've been developing games since 2011.  My most well known game is Jung's Labyrinth, a kind of a psychological exploration game, developed in Unity.\nWe will go through everything you need to create a mature 3D game, where you have the special power of telekinesis to defend yourself against hordes of enemies. I will take you through every step of the creation process and we will create the game together from scratch.\nThis course will teach you how to:\nPrepare your environment\nInstall Unity 2020 and Rider for C# development\nSet up your game development environment\nCreate your first game\nUse Unity Asset store\nImport 3D models from Sketchfab\nImport animations from Mixamo\nControl animations from a script\nHandle input controls\nCode a basic 3D player controller\nImplement gravity\nDesign gameplay and add special powers\nAdd zombie enemies\nCode enemy spawner\nCode basic enemy AI\nCode a health system for the player\nCode TELEKINESIS as a special power\nTweak the game to look amazing\nUse sound effects and create a sound system\nModel the terrain, paint trees and grass\nAdd atmosphere with the lighting system\nEnable CLOTH SIMULATION for the player's cape\nDesign GUI elements for health etc.\nImport extra fonts, sounds and music\nCreate a score system, win and lose scenarios\n(Optional) AURA 2: Add fog and volumetric light\nand finally build the game into an executable and have some fun with it!",
      "target_audience": [
        "Beginning and Intermediate game developers",
        "Unity beginners",
        "Curious artistic types"
      ]
    },
    {
      "title": "The Complete Beginners Guide: Make Unity Games from Scratch",
      "url": "https://www.udemy.com/course/the-complete-beginners-guide-make-unity-games-from-scratch/",
      "bio": "Complete your first Unity games for web, Mac & PC. Learn all about game development more efficiently YouTube tutorials.",
      "objectives": [
        "Learn C#, the most popular and modern language, from scratch. No programming experience is necessary.",
        "Create your own unique Battle Royale system.",
        "Build a solid foundation for game design and game development with best-selling instructors.",
        "Become excellent at using the Unity game engine and other programs.",
        "Add coding, 3D modelling, and game development to your resume and LinkedIn portfolio.",
        "Build a platform shooter game in Unity®.",
        "Create playable game projects, models and environments.",
        "Create artwork in MagicaVoxel and Photoshop.",
        "Integrate the art from Blender into Unity®.",
        "Join a huge and supportive community of people similar to you.",
        "Develop problem-solving skills transferable form coding."
      ],
      "course_content": {
        "Build A Megadude Game From Scratch": [
          "Welcome - Let's Build A Megadude Game",
          "Introduction and Downloading Unity",
          "3D Elements",
          "Building a Player",
          "Enabling Player Input",
          "Horizontal Movement",
          "Jumping"
        ],
        "Shooting": [
          "Game Camera",
          "Shooting Bullets",
          "Particle Effects",
          "Multiple Bullets",
          "Charging Bullets"
        ],
        "Building Enemies": [
          "Base Enemy Class",
          "Hurt Animation",
          "Killing Effect",
          "Destroying Particle System",
          "Walking Enemy",
          "Knockback Effect",
          "Physics Materials",
          "Collision Improvements"
        ],
        "Flame Thrower, Enemies And More": [
          "FlameThrower Enemy",
          "Flames",
          "Shooter Enemy",
          "Enemy Bullet",
          "Spawn Enemy Bullets",
          "Burst Fire",
          "Shooter Enemy Adjustment",
          "Turrets"
        ],
        "Doors and Buttons": [
          "Doors",
          "Button",
          "Trigger Elements",
          "Timed Button"
        ],
        "Platforms and Teleportation": [
          "Moving Platforms",
          "Teleporter",
          "Teleporter Loop",
          "Triggering Teleporters",
          "Triggering Platforms"
        ],
        "Cutscenes and PowerUps": [
          "Cutscene Trigger",
          "Input Lock",
          "Powerups",
          "Powerup Routine",
          "Super Charge Powerup",
          "Invincibilty Powerup"
        ],
        "Health, Time, And The Interface": [
          "Canvas",
          "Health and Time texts",
          "Designing the Powerup bar",
          "Events",
          "Animating the Power up Bar"
        ],
        "Animations, Pausing, And Navigation": [
          "Custscene Animations",
          "Pausing the Game",
          "Scene Navigation"
        ],
        "MagicaVoxel Crash Course - Free Art Editor": [
          "Introduction to MagicaVoxel",
          "MagicaVoxel Tools Crash Course"
        ]
      },
      "requirements": [
        "Unity® and Blender are free to download. Please download and install Unity® and Blender before purchasing this course",
        "MagicaVoxel and Adobe Photoshop CC 2015.5 (for creating art)",
        "This course was recorded on a Mac computer, but you can use Unity® and Blender on a PC."
      ],
      "description": "\"Just amazing. Great job man.\" -Review from Student Hamza\nThe best coding program online. Beginner's guide for aspiring game developers. Learn C# and programming fundamentals. Create epic 2D and 3D games using Unity® and Blender!\nA runaway success of a Kickstarter funded this Mammoth Interactive course\nGame development & design\nLearn how to use Unity in C#\nMake games like Mega Man\nLearn what Photoshop is used for in game development\nThe game development process step by step for beginners\nMake your own shooter game in Unity\nBuild a battle royale game like Fortnite\nAdd multiplayer functionality to game programming\nLearn the foundations of Blender 3D\nBasic C# programming for beginners\nLearn how to create a full 2D and 3D environment. Create and animate characters to wield weapons and run a muck as they try to survive your own Battle Royale!\nThe Best University-Level Game Programming Course\nIn this course, you learn how to build your own Battle Royale and a 2D platform shooter Game with Unity® Blender, Adobe Photoshop and MagicaVoxel. This course is unique because we make both the code and the art for the game from scratch. We teach you the fundamentals of designing, coding, and modeling a 3D game.\nWhy Learn From Us\nGlauco Pires takes you through the process of coding a game in Unity® from scratch. Kevin Liao teaches you how to create all the artistic elements you will need to complete the game. Kevin will teach this section of the course in MagicaVoxel and Photoshop to make original art.\nFirst you design the game and its functionality in Unity®. You learn how to code in C# and build video game levels. Don't worry if you've never coded before. We start simple and add more to the game as the course goes on.\nBest Unity Course: Build Multiple Games in Full\nUnity® is one of the most popular platforms in game development. You can use Unity® to build 2D and 3D games. Unity® is cross-platform, which means it is easy to use with other platforms.\nThen you create the 3D models for the game in Blender. You build all the art assets for the game. You learn how to integrate your art from Blender into Unity®.\nAll About Blender and Things to Do in PhotoShop\nBlender, like Unity®, is a popular production suite that is free to download. Blender is a revolutionary tool for making 3D art digitally. With Blender, you can make art assets for games, like we do in this course.\nWe answer every question within two business days. We want to hear from you. Watch the free lectures and amazing trailer, then jump right in and start participating with the Mammoth community.",
      "target_audience": [
        "Anyone who wants their start at making 3D and 2D video games.",
        "People that want to create their own Battle Royale.",
        "Anyone who wants to learn game development.",
        "Beginners who want to learn how to use Blender.",
        "This course assumes you know a little about Unity®."
      ]
    },
    {
      "title": "Unity 3D Game Development | 3D Engine Fundamentals",
      "url": "https://www.udemy.com/course/game-development-3d-engine-fundamentals/",
      "bio": "Understand how 3D game engines really work so you can create better games.",
      "objectives": [
        "To understand what a game engine is and does",
        "To understand how you can use game engines to create games"
      ],
      "course_content": {
        "Introduction to the Course": [
          "Introduction"
        ],
        "3D Game Engine Fundamentals": [
          "Rotation Techniques",
          "Mipmaps",
          "Rendering Paths",
          "Topology"
        ],
        "Conclusion": [
          "Conclusion"
        ],
        "Bonus Material": [
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "Free version of Unity 3D"
      ],
      "description": "* This course teaches Unity version 4.x\nIn this course you will explore one of the most powerful game creation tools available, and one that game developers can't live without -- the Game Engine. In this course, we will look at the Unity Game Engine.\nBy the end of this course you will understand what a game engine is, how it works and how you can use game engines to create incredible realistic games. If you're interested in Unity game development, the information in this course is very valuable.\nYou don't need to know a single thing about game development to take this course.\nSo What Is a Game Engine?\nA game engine is framework which facilitates the kinds of tasks which need to be done when writing a game. So what are the kinds of tasks we want to do? We would probably want to display images on the screen (in game terminology, an image which is displayed on the screen is called a sprite). We may need to draw menus or text on the screen. We might want to organise our sprites so that some are behind others. Often games use realistic physic so objects collide or fall with gravity. A game engine will help us do these things and many more.",
      "target_audience": [
        "Beginning game developers",
        "Experienced game developers",
        "Unity developers"
      ]
    },
    {
      "title": "Building 2D Games with Ebitengine in Go (Golang)",
      "url": "https://www.udemy.com/course/building-2d-games-with-ebitengen-in-go-golang/",
      "bio": "Create games in Go for the desktop (Windows, macOS, Linux, and FreeBSD), web browsers, mobile devices, and even Steam.",
      "objectives": [
        "Learn how to build a simple 2D Game in Go",
        "Learn how to animate sprites in your game",
        "Implement a collision engine in your game",
        "Add audio effects to your game",
        "Learn how to deploy your game as an application, or as a web page using WASM"
      ],
      "course_content": {},
      "requirements": [
        "Familiarity with the Go programming language is required."
      ],
      "description": "In this hands-on course, you will learn how to create a classic 2D space shooter game, Asteroids, using the powerful and lightweight Ebitengine library in Go. Whether you’re a beginner to game development or looking to expand your skills in a new language and framework, this course will guide you through the entire process of building your own version of this iconic arcade game.\nEbitengine's easy to learn and use API allows you to develop 2D games quickly and easily. Games can be deployed across multiple platforms, including Windows, Mac, Linux, FreeBSD, the Web, iOS and Android. You can even deploy your game to Steam!\nGo is fast, and so is Ebitengine. While Ebitengine's drawing API is very simple, games developed in it run very quickly with GPU power.\nIn this course, we'll learn how to:\n\nIntroduction to Ebitengine: Get familiar with the basics of how to set up Go and use Ebitengine for 2D game development.\nGame Design Fundamentals: Understand core game mechanics like player movement, object collisions, game states, and rendering.\nCreating the Game World: Learn how to design the asteroid field, ship controls, and space physics—like rotation, thrust, and inertia.\nRendering and Animation: Master how to draw and animate your ship, asteroids, bullets, and explosions using Ebitengine’s powerful drawing functions.\nGame Logic: Implement the game loop, scoring system, levels, and spawn mechanics for asteroids. Learn how to create enemies and manage the player’s health.\nSound and Music: Add sound effects for shooting, explosions, and background music to enhance the player's experience.\nBuilding a Playable Game: Integrate everything to create a fully functional, interactive game that runs in the browser or on desktop platforms.\nBy the end of this course, you will have developed your own playable Asteroids clone, gaining the knowledge and confidence to create more complex 2D games in Go. Whether you want to add new features or make your own game from scratch, this course will equip you with the foundational skills needed for game development in Go using Ebitengine.\n\n\nPrerequisites:\nA basic knowledge of the Go programming language.\nTools Used:\nGo\nEbitengine (a 2D game engine for Go)\nVisual Studio Code (or your favourite IDE)\n\n\nTake your first step into the world of game development with Go!",
      "target_audience": [
        "This course is for Go developers who want to learn how to build 2D games."
      ]
    },
    {
      "title": "Cocos2d-x v3 JavaScript - Game Development Series",
      "url": "https://www.udemy.com/course/cocos2d-x-javascript/",
      "bio": "Learn how to create games for pretty much every platform from phones to tablets to desktop computers.",
      "objectives": [
        "Know the basic skills of making a game in Cocos2d-x",
        "Improved JavaScript Skills",
        "Game Development Skills",
        "Games Programming Skills",
        "Cross-platform Game Development Skills"
      ],
      "course_content": {
        "Introduction & Setup": [
          "Introduction",
          "What Is Cocos2d-x JavaScript?",
          "Setting Up For iOS",
          "Setting Up For Android On Mac",
          "Setting For Android on Windows",
          "Setting Up For The Web",
          "Multi Resolution Support",
          "Adding A Sprite"
        ],
        "Positioning": [
          "Positioning Using MoveTo",
          "Positioning Using MoveBy",
          "Positioning Using JumpTo",
          "Positioning Using JumpBy",
          "Positioning Using BezierTo",
          "Positioning Using BezierBy",
          "Positioning Using Place"
        ],
        "Repeating Actions": [
          "Repeat",
          "RepeatForever"
        ],
        "Advanced Actions": [
          "Scaling Using ScaleTo",
          "Scaling Using ScaleBy",
          "Tinting Using TintTo",
          "Tinting Using TintBy",
          "Fading Using FadeTo",
          "Fading Using FadeIn",
          "Fading Using FadeOut",
          "Skewing Using SkewTo",
          "Skewing Using SkewBy",
          "Rotating Using RotateTo",
          "Rotating Using RotateBy",
          "Sequence"
        ],
        "Playing Audio": [
          "Playing Sound Effects",
          "Playing Sound Effects Repeatedly",
          "Setting Sound Effect Volume",
          "Stopping Sound Effects",
          "Playing Music",
          "Stopping Music",
          "Pausing and Resuming Music",
          "Setting Music Volume"
        ],
        "Touch Events": [
          "Setting Up Single Touch Events",
          "Single Touch Began",
          "Single Touch Moved",
          "Single Touch Ended",
          "Setting Up Multi Touch Events",
          "Multi Touch Began",
          "Multi Touch Moved",
          "Multi Touch Ended"
        ],
        "Mouse Events": [
          "Setting Up Mouse Events",
          "Mouse Button Pressed",
          "Mouse Button Released",
          "Mouse Moved",
          "Mouse Wheel Scrolled"
        ],
        "Keyboard Events": [
          "Setting Up Keyboard Events",
          "Keyboard Key Pressed",
          "Keyboard Key Released"
        ],
        "Accelerometer Events": [
          "Setting Up Accelerometer Events",
          "Using The Accelerometer"
        ],
        "Menu Systems": [
          "Setting Up A Menu",
          "Adding A Menu Font Item",
          "Adding A Menu Image Item",
          "Menu Alignment"
        ]
      },
      "requirements": [
        "Programming",
        "Passion for game development",
        "Computing basics",
        "Love for games"
      ],
      "description": "Learn how to make cross platform games using the immensely successful game engine Cocos2d-x. A step by step process is used to show everything from project setup to essential game design technique\nGain a good understanding of the following concepts:\nJavaScript Game Programming\nVideo Game Logic\nCocos2d-x Game Programming\nGame Mechanics\nGame development\nGame design\nMobile development\nMobile design\nCross platform development\nCocos2d-x is one of the easiest game frameworks in the world and will provide you with a solid foundation for your game development journey. The gaming industry is bigger than Hollywood and is constantly growing, start your journey now.\nYou will be provided with the full source code to aid in development during and after this course. The source code and artwork is free to use in as many projects as you wish.\nCocos2d-x is a free open source game engine used by indie developers and companies such as Bandai Namco and Zynga.\n\n\nOver 205,000 students have enrolled on my courses and all of them are extremely satisfied. You will also be satisfied with this course. If you do not like the course, remember that within 30 days you can request a full refund. I guarantee you satisfaction.\nIf you have any questions regarding the topics covered in this course, please feel free to ask. I'm always happy to help those who want to learn.\n\n\nTo summarise this is what you get:\n• Lifetime access to HD quality videos. No monthly subscription. Learn at your own pace, whenever you want.\n• All videos are downloadable. Learn wherever you want, even without an internet connection!\n• Downloadable starter code and final code for each section.\n• Free helpful support in the course Q&A when you have questions or get stuck.\n• Multiple coding challenges to practice your new skills (solutions included).\nSounds great? Then start this adventure today by clicking the “Take this course\" button, and join me in the only course that you will need!",
      "target_audience": [
        "People looking to create games",
        "Budding game developers",
        "People looking for a refresher for Cocos2d-x",
        "People who want to create mobile games",
        "Gaming aficionados"
      ]
    },
    {
      "title": "Ren'Py Minigames 101",
      "url": "https://www.udemy.com/course/renpy-minigames/",
      "bio": "Learn to build minigames in Ren'Py & Python by building a Rhythm Game from scratch",
      "objectives": [
        "Building minigames in Ren'Py",
        "Creating custom displayables in Ren'Py"
      ],
      "course_content": {
        "Introduction": [
          "How to Use the Course Material",
          "Introduction to Screens and Displayables in Ren'Py",
          "Implement Creator-Defined Displayables"
        ],
        "Rendering the Game View": [
          "Render the game screen and the tracks on which notes will appear",
          "Render the moving music notes",
          "Time the music notes according to the custom music file",
          "Generate beat maps using Aubio in Python",
          "Generate beat maps using Librosa in Python",
          "Play music and read the beat map files into Ren'Py"
        ],
        "Detecting Player Interaction Events": [
          "Detect events with PyGame",
          "Zoom in on the notes when they are within the hit threshold",
          "Score hits and misses on a Heads-Up Display"
        ],
        "Bonus Features, Course Recap and Conclusion": [
          "Adjust the difficulty level of the game",
          "Other features: Pausing the minigame, finer-grained scoring, etc.",
          "Course Conclusion and Resources"
        ]
      },
      "requirements": [
        "Basic knowledge of Ren'Py",
        "Basic knowledge of Python strongly recommended",
        "Basic knowledge of programming"
      ],
      "description": "Are you interested in game development and want to create engaging 2D minigames? Are you a Ren'Py developer looking to implement minigames in your projects? This is the course for you.\nThis course, Ren'Py Minigames 101, covers all the fundamentals you need to build your own minigame in Ren'Py.\nWe will develop a Rhythm Game from scratch and in this process, you will learn all the necessary Ren'Py and Python skills for working with Ren'Py's Creator-Defined Displayables.\nIn each lecture, we will make incremental changes to our code, and, at the end of every lecture, we will have a runnable Ren'Py project that shows tangible progress towards the final completed project.\nSome topics that we will cover:\nRen'Py Screens\nRen'Py Creator-Defined Displayables\nRendering the game view\nImplementing player controls with PyGame\nTiming the music notes to any song with Python packages like Aubio and Librosa\nEnhancing player experience with a Heads-Up Display (HUD) and other visual cues\nDesigning bonus features for the Rhythm Game\nSome experience with Ren'Py, Python, and programming is strongly recommended. This course assumes Python knowledge including data structures (list, dictionaries), functions, and classes (Object-Oriented Programming).\nIf you need to brush up on your Python skills, check out my tailored Python for Ren'Py course on Udemy.\nBy the end of this course, you will:\nHave implemented a rhythm game from scratch\nBe able to build bonus features for the rhythm game if you wish\nHave the skills to build your own minigame in Ren'Py and Python\nJoin me in this course to level up your programming and game development skills and develop a minigame for your next Ren'Py project!",
      "target_audience": [
        "Beginner Python developers looking to create games",
        "Ren'Py developers looking to add minigames to their projects",
        "Anyone interested in 2D game development"
      ]
    },
    {
      "title": "Developing Metaverse: Your first VR Game in Unreal Engine",
      "url": "https://www.udemy.com/course/developing-metaverse-your-first-vr-game-in-unreal-engine/",
      "bio": "Learn how to develop games for Oculus Quest with zero programming background",
      "objectives": [
        "Building applications for Oculus Quest",
        "Designing and developing VR games",
        "Working in Unreal Engine",
        "Working with materials and textures",
        "Optimizing content for fast performance in mobile and VR games"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Getting to know Unreal Engine": [
          "Getting the Unreal Editor. UE4 or UE5?",
          "Creating first project",
          "Basics of working in Unreal Engine 4",
          "Lightning basics",
          "Materials basics",
          "Textures basics",
          "First look at Blueprints"
        ],
        "Introduction to VR development": [
          "Configuring Unreal Engine for VR development",
          "Building for Oculus Quest",
          "Overview of Unreal Engine VR Template",
          "Overview of VR Template Blueprint code",
          "Let's fight motion sickness!"
        ],
        "Making first VR Game": [
          "Cleaning up existing VR template",
          "Adding sword",
          "Create our Level",
          "Setting up VR Pawn",
          "Adding fruits",
          "Destruction system",
          "Adding real assets",
          "Optimizing Marketplace assets",
          "Working with Child Actors - Create Watermelon",
          "Adding other fruits",
          "Creating custom destruction system",
          "Improving visuals",
          "Adding new hand model",
          "Despawning fruits",
          "Adding sound effects",
          "Making our custom sword model",
          "Working with sounds",
          "Adding sound to sword",
          "Score system",
          "Input system and animation blueprints",
          "Starting & Ending game, Triggers",
          "Super secret hint - fake lightning",
          "Adding Environment assets",
          "Using SceneCaptureCube",
          "Optimizing Environment",
          "Adding game logic",
          "We've done it!"
        ]
      },
      "requirements": [
        "No programming background needed. You can start from complete scratch",
        "Windows based PC + Oculus Quest or any other VR headset"
      ],
      "description": "Start one of the most promising careers in IT - become a VR developer. You will learn how to create your first Oculus Quest game, even if you have zero background! You will know the essential parts of Unreal Engine - from level design, to materials and textures, from lightning setup to visual programming in blueprints.\nWe will learn:\nHow to install and configure Unreal Engine for VR development\nWhy we should not start learning from Unreal Engine 5\nBasics of creating maps and level design\nMaterial shaders and textures\nSounds and music\nBlueprints visual coding\nWorking with assets\nOptimizing performance for VR and mobile\nDesigning and developing our VR game\nPackaging app for Oculus Quest\nTons of tips, tricks and workarounds which you can not find in official documentation\nWhy you should take this course?\nStart one of the most promising and highly-paid careers ever - Unreal Engine and VR developer!\nVR is the next web: in the coming 5-10 years, most of the web would transform into Metaverse. We would transfer from 2d websites and mobile apps to interactive world in Virtual and Augmented reality. The biggest companies nowadays - such as Meta (Facebook), Apple, Epic Games, Tencent, Microsoft and hundreds of others make their bet on virtual reality.\nUnreal Engine is one of the most powerful and versatile tools nowadays - it is widely used in a range of industries - from games to VR development, from industrial training to virtual movie production, from architectural design to automotive user interfaces.\nStart now and be the one to build products of the future!\nWhat do you need to take this course:\nWindows based PC (No, Mac is not suitable for VR development)\nOculus Quest or any other VR headset",
      "target_audience": [
        "Anyone who wants to start a VR/AR developer career",
        "Web developers who want to investigate new opportunities"
      ]
    },
    {
      "title": "2.5D Game Dev Beginner Friendly Course - Unreal Engine 5.6",
      "url": "https://www.udemy.com/course/25d-platformer-unreal-engine-like-a-professional-game-dev/",
      "bio": "Skills To Make A 2.5D Game In Unreal Engine 5.6",
      "objectives": [
        "Use Unreal Engine 5 and all its 2D and 3D base features for creating games.",
        "Create A Fully Packaged Game",
        "Use Sprite Art and Sound for game design",
        "Beat procrastination and finish your game development projects by using the power of Planning and Scoping."
      ],
      "course_content": {
        "Course Overview": [
          "Version 2.0 Update Overview"
        ],
        "V 2.0 - Setup and Planning Phase": [
          "Get Unreal Engine And Start The Project As A Blueprints Project",
          "Setting Up The Developer Level",
          "Installing Paper ZD and Change Unreal's Starting Level",
          "Adding A Player Character Blueprint to the world",
          "Importing Art into Unreal Engine for the player character",
          "How to manage sprites and flipbooks",
          "How to plan out your game using DCAA principles"
        ],
        "V 2.0 - Creating A Fun And Well Rounded Player Character": [
          "In depth explanation of how to add controller inputs.",
          "Left and Right movement with Keyboard and Controller",
          "Add constraint, fix stick drift and set player position",
          "Setting Up PaperZD for animation management",
          "Play Idle Animation through PaperZD",
          "Play The Run Animation through PaperZD",
          "Changing sprite direction based off movement direction",
          "Adding The Audio Files For The Footstep sounds and how to make your own audio",
          "Adding Spatial Running Sound When The Sprite Foot Lands",
          "Using Comments to organize blueprints nodes",
          "Control Setup and Code For Adding A Jump",
          "Adding A Jump-Start animation",
          "Jump Animation Transitions logic",
          "Adding a Jump Landing Sound",
          "Creating Platforms For your platformer",
          "How to Customize Player Movement and the player jump"
        ],
        "Adding in 3D Environment Elements": [
          "Adding Platformer 3D Assets From Quixel",
          "Adding a Simple 3D Environment to your 2.5D Platformer Part 1",
          "Addins a Smple 3D Environment to your 2.5D Platformer Part 2",
          "Watch Me Do Some Basic Level Design",
          "Knowledge Check Before Moving Forward",
          "Share Feedback On Course And Learning Quality"
        ],
        "V 2.0 - Creating A Simple Health System": [
          "Resetting the developer Level to clear",
          "Creating A Simple Health System Part 0 - How to create a Widget",
          "Creating A Simple Health System Part 1",
          "Creating A Simple Health System Part 2",
          "Adding an Object that reduces the players health. AKA. Does Damage.",
          "Checking if the player is Alive or Dead after they take damage",
          "Creating A Death Screen User Interface",
          "Adding the death screen on death"
        ],
        "V 2.0 - Creating A Combo System": [
          "Adding Functionality to the death screen",
          "Adding A Player MeleeAttack event",
          "Creating A Combat Dummy Part 1",
          "Making A Player Attack Part 1",
          "Making A Player Attack Part 2 - Code Changes",
          "Player Sword Attack Animation Part 1",
          "Player Sword Attack Animation Part 2",
          "Air Sword Attack Animation",
          "Using Custom Animation Notifies For the Sword Hitbox",
          "Adding More Attack Animations For The Combo System",
          "Getting Started With Input Buffering",
          "Setting Up The Grounded 3 Hit Combo with Hard Input Lockout",
          "A brief Overview Before Greater Integration for the Combo System",
          "Adding A Combo Link to the first Sword Attack",
          "Adding A Combo Link to the Second Sword Attack",
          "Polish and Finalize Links For Grounded 3 Hit Combo",
          "Setup For Air Sword Attack Combo - Checking if the player is grounded",
          "Setting Up Animation Blueprints For Air Combo",
          "Setting Up Air Combo Logic",
          "Polishing The Structure of the Air Combo Logic"
        ],
        "V 2.0 - Melee Enemy Design": [
          "Enemy AI - Detecting When The Player is in range",
          "Moving towards the player when the player is in detection range",
          "Adjusting AI Movement Towards The player",
          "Explaining Component Timing and Tick Rate in Video Games",
          "Adding Art To The Melee Enemy",
          "Adding A Walking Animation through Paper ZD",
          "Adding the Attack Animation Sprites By Extracting Sprites",
          "Melee Enemy AI Overview and Code Comments",
          "Adding damage hitbox for Melee Enemy attack",
          "Linking Attack Animation with Code For Melee Enemy",
          "Adding Attack State Reset Function",
          "Stop player from running through AI Enemy",
          "Nerfing the melee enemy ai",
          "Death Animation for AI and some HitStun Theory Crafting",
          "Making AI Health Bar Visible And Some Adjustments before moving forward",
          "Melee Enemy Hitstun and Death all in one"
        ],
        "V 2.0 - Ranged Enemy Design": [
          "Setting Up The Sprites For The Ranged Enemy",
          "Ranged Enemy Basic Idle Animation",
          "Spawn in a Projectile that goes to the player location on launch",
          "Animation Blueprint Setup for the ranged enemy",
          "Linking Throw Animation with Projectile Spawn",
          "Adjusting Sprite Direction to player Direction",
          "Adding A Fireball Sprite To The enemy Projectile",
          "Changing Direction Of The Magic Ball sprite",
          "Setting Up Hit And Death Animation Combo",
          "Ranged Enemy Enters Hitstun on Taking Any Damage",
          "Adding Attack Delay After Ranged Enemy Takes A Hit",
          "How to prevent enemies from getting stuck on each other"
        ],
        "V 2.0 - Adding Your Game Components To A Level": [
          "A look at the level",
          "Making The Player Sprite React To Light",
          "General Touches To The Level"
        ],
        "V 2.0 - Final Practise And Game Development Recommendations": [
          "Make A Boss Enemy As Your Final Practice"
        ]
      },
      "requirements": [
        "A good grasp of the English Language as a first or second language."
      ],
      "description": "Made for absolute beginners getting into Game Development Unreal Engine. Learn how to create a 2.5D platformer in Unreal Engine.\n\n\nPlatformers are one of the best ways to get into game design. Learn how to get a platformer up and running in a fully playable state. You will go from a blank project through all the steps a good game developer takes to make a fully playable game.\n\n\nThe pacing is set just right so you never get confused or go into a topic without the right amount of knowledge.\n\n\nThrough the course you aren’t just going to make a copy paste of what I make. Instead, I’m going to teach you how to think like a game designer so you will be able to create the games that you want to.\n\n\nMy hope for you is that after this course you will go out and finish the game idea that you have had on your mind and launch it. As an avid gamer myself, I can’t wait to go on the journey you will create.\n\n\nFor anyone coming from UNITY ENGINE, this is the right course for you. It teaches everything you need to get up to speed using blueprints to create the games you want to make. Built by a company run by Game Developers.\n\nGood luck.",
      "target_audience": [
        "Unity Developers shifting to Unreal Engine",
        "Beginners looking to learn how to use Unreal Engine",
        "Tutorial Hoppers who are looking for a more rounded course about game development where you make a small but satisfying game."
      ]
    },
    {
      "title": "HOT & NEW : Build a Full Platform Game With Construct 2 or 3",
      "url": "https://www.udemy.com/course/build-a-platform-game-with-construct-2-or-3/",
      "bio": "Complete walkthrough of a Platform game using the Construct 2 platform. Follow along as you take the course and learn.",
      "objectives": [
        "Learn to build a complete platform game using Construct 2 or Construct 3.",
        "Learn the basics of how a video game is put together"
      ],
      "course_content": {
        "Build Cave Slayer": [
          "Introduction to Cave Slayer Game",
          "Creating our Background",
          "Adding our Hero",
          "Applying the Ground",
          "Animating our Hero",
          "Creating the Platforms and Lava",
          "Building the Falling Platforms",
          "Implementing our Hero's Sword",
          "Adding our Enemy, the Shroom",
          "Killing the Shrrom and adding a lifebar",
          "Respawning our Hero When he Dies",
          "Adding Vases to Crush",
          "Keeping our Hero Out of the Lava",
          "Adding Lava Balls",
          "Creating a Gem for Life",
          "Add a Save Point for our Hero",
          "Constructing a Boss, Kong",
          "Create a Door to Take You to the Second Level",
          "Building a Second Level",
          "Fix Some Logic with Kong",
          "Conclusion!!"
        ],
        "Building My Templates (BONUS MATERIAL)": [
          "Part One Walkthrough",
          "Part Two Walkthrough"
        ]
      },
      "requirements": [
        "Be able to download and install Construct 2 on a Windows computer.",
        "Have a general knowledge of Construct 2, check out my other course for a full complete guide."
      ],
      "description": "Take a journey with me while we build a complete video game using the Construct 2 platform. The game is called Cave Slayer and includes a hero, enemy, boss, artificial intelligence, hot lava, and multiple levels. Learn the process from start to finish while you have fun learning the logic behind video games. This is a beginner to intermediate course. Enjoy!",
      "target_audience": [
        "Beginners to the Construct 2 gaming platform. Those who are interested in following a step-by-step guide to build a complete platform video game."
      ]
    },
    {
      "title": "Unity Tutorial: PacMan 3D",
      "url": "https://www.udemy.com/course/unity-tutorial-pacman-3d/",
      "bio": "In this course you will learn how to create a 3D PacMan game from scratch in Unity.",
      "objectives": [
        "You'll learn about pathfinding in a grid.",
        "You'll have a complete PacMan Game in the end."
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "The Playfield": [
          "Intro Section 2",
          "Playfield #1 - The Playfield",
          "Playfield #2 - Setting up Walls & Create Measure Objects"
        ],
        "Coding A*": [
          "Intro Section 3",
          "A* Explanation",
          "Coding #1 - The Nodes",
          "Coding #2 - Grid #1 - Creating The Grid",
          "Coding #3 - Grid #2 - Physical Playfield Check",
          "Coding #4 - Grid #3 - Visualise the Grid",
          "Coding #5 - Pathfinding #1 - Calculate Node Positions",
          "Coding #6 - Pathfinding #2 - Find Goal & Check Neighbour Nodes",
          "Coding #7 - Pathfinding #3 - Find the Optimal Path",
          "Coding #8 - Pathfinding #4 - Trace Path",
          "Coding #9 - Pathfinding #5 - Make Path Visible"
        ],
        "PacMan": [
          "Intro Section 4",
          "PacMan #1 - Initial Setup",
          "PacMan #2 - Keyboard Inputs",
          "PacMan #3 - Physical Collision Check",
          "PacMan #4 - Time To Move"
        ],
        "The Ghosts": [
          "Intro Section 5",
          "Ghost #1 - Clydes first thinking",
          "Ghost #2 - Clyde Can Move",
          "Ghost #3 - Clydes Look direction",
          "Ghost #4 - Clyde Don't Move Backwards",
          "Ghost #5 - Statemaschine #1",
          "Ghost #6 - Statemaschine #2",
          "Ghost #7 - GhostTargets",
          "Ghost #8 - Changing Appearance",
          "Ghost #9 - Scatter State",
          "Prepare a bigger Scene & Bug Fix",
          "Ghost #10 - Optimize Scatter State",
          "Ghost #11 - Home State",
          "Ghost #12 - Frightend State",
          "Ghost #13 - Got Eaten State",
          "Ghost #14 - Cleaning Up",
          "Ghost #15 - Home & Frightend Timer",
          "Ghost #16 - Chase & Scatter Timer",
          "Ghost #17 - Prepare the other Ghosts",
          "Ghost #18 - Visualize all Ghost pathes",
          "Ghost #19 - Clydes Personality",
          "Ghost #20 - Pinky Personality",
          "Ghost #21 - Inky Personality"
        ],
        "Game Play Features": [
          "PelletFiller",
          "Filler Object",
          "Editor Script #1",
          "Editor Script #2",
          "GameManager & Eat Pellets",
          "Score",
          "Inky Bug Fix",
          "Timing Again",
          "Power Pellets",
          "Eating Ghosts",
          "Win Condition",
          "Lose Life #1 & Reset Ghost",
          "Lose Life #2 - Reset PacMan",
          "Lose Condition",
          "Game Over Scene",
          "Score for Ghosts",
          "Pick ups #1 - Create Pickable Objects",
          "Pick ups #2 - Pickup Spawner",
          "Extra Lifes"
        ],
        "User Interface - Final Touches": [
          "User Interface #1 - Canvas",
          "User Interface # 2 - UI Manager",
          "Camera Follow",
          "Main Scene",
          "Final Touches"
        ],
        "Bonus Section": [
          "Bonus Info Material"
        ]
      },
      "requirements": [
        "Unity 4.6+ is a must have, older versions are not working with the Canvas System.",
        "Some basic C# knowledge is a Plus, especially when it comes to debugging.",
        "A 3D Software to create your own 3D Grafics if you like to.",
        "Inkscape or any other Grafics Software you can create grafics in for later UI stuff."
      ],
      "description": "In this Course you will learn how to create your own PacMan Game using the Unity Game Engine & Inkscape for the  Grafics. For the functionality we write C# Code in Monodevelop.\nThis course is an Intermediate course, so if you have trouble in any case, write me a message or Q&A, and i'll help as best as i can.\nIf you are beginner, you might have some trouble to follow, but the videos will guide you through the complete course. Don't forget you only become better if you repeat things and keep on learning!\nUnity (5.6)\nYou will learn to create the complete process in Unity and setup everything needed\nI will show you how you can setup the playfield and organize the Hierarchy.\nWe use the Canvas System for Grafics or Score later which requires Unity 4.6+\nC# (Monodevelop)\nWe will put in functionality with scripts using Monodevelop and C# (you can also use Visual Studio)\nWe will implement A* to simplify pathfinding for the ghosts\nWe will create all other behaviors the ghosts had in the original game\nInkscape\nYou will learn the basics how you can create the Grafics on your own using Inkscape. You can also use any other software.\nCourse Material\nAssets separately available! Feel free to create your own.\nConclusion\nAs a result of this course you should be able to create your own levels for a PacMan Game in 3D.\nSo what are you waiting for?\nLet's make your dream game a reality!!\nLevel: Intermediate\nVideo Course Length: ~8hours\nUnity Version required: 4.6+",
      "target_audience": [
        "If you are interested into creating your games.",
        "If you ever wanted to create your own Pac Man.",
        "If you want to learn Pathfinding."
      ]
    },
    {
      "title": "Android Game Development : Build & Monetize Complete 3D Game",
      "url": "https://www.udemy.com/course/android-game-development-unity/",
      "bio": "Build & Publish A Complete 3D Android Game With Unity & C# , Monetize Your Game With Video Ads , Android Development",
      "objectives": [
        "Build A Complete 3D Android Game",
        "Learn Android Game Development Step By Step",
        "Learn Unity 3D & C#",
        "Monetize With Video Ads",
        "Learn Version Controlling",
        "Create LeaderBoard & Achievement Unlock System"
      ],
      "course_content": {
        "Getting Started With Android Game Development": [
          "Introduction To This Course",
          "Build & Run Your First Android Game"
        ],
        "Start Builing a 3D Android Game": [
          "Setting Up Game Level, Player and Platform",
          "Controlling The Ball",
          "Moving The Ball After First Touch",
          "Checking When The Ball Falls Off The Platform",
          "Camera Following The Ball Smoothly",
          "Make The Platforms Fall Down After Ball Goes Away",
          "Spawning The Platforms",
          "Random Platform Spawning Algorithm",
          "Fixing Platform Falling",
          "Creating Diamonds and Randomly Spawning",
          "Destroying Diamonds On Collision",
          "Creating Awesome Particle Effects",
          "Create UiManager and Text Animations",
          "More Main Menu Ui animations",
          "Game Over Menu and Animations",
          "Scripting The UiManager",
          "ScoreManager Score and HighScore",
          "Creating Game Manager and Controlling The Whole Game",
          "Final Fixes and Finishing The Game",
          "About The Setup Process",
          "Build & Run Your First Android Game",
          "Updated Process Of Setting Up Android",
          "Building and Publishing To Android"
        ],
        "Learn Version Controlling To Manager Large Projects": [
          "Why You Should Use Version Controlling",
          "Cloning And Creating New Repository",
          "Practical Version Controlling Example",
          "Branching Your Game Projects",
          "Pushing Your Local Repository To Github & Bitbucket"
        ],
        "Monetize Your Android Games With Video Ads": [
          "Integrating Unity Videos Ads In Android Game",
          "Show Ads Limited Number Of Times",
          "Integrating Applovin Ads To Your Game",
          "Integrate Chartboost Ads To Your Android Games"
        ],
        "Create Leader Board & Achievement System For Your Games": [
          "Creating Leader Boards - Part 1",
          "Creating Leader Boards - Part 2",
          "Creating Leader Boards - Part 3",
          "Creating Leader Boards - Part 4",
          "Creating Leader Boards - Part 5 - Uploading & Linking",
          "Creating Achievement Unlock System In Games"
        ],
        "Bonus Section : Special Discount Coupons": [
          "Bonus : Special Discount Coupons For All Courses"
        ]
      },
      "requirements": [
        "You Should Have Some Basic Idea About Unity",
        "You should be familiar with using a computer with internet",
        "You should have some very basic knowledge of programming"
      ],
      "description": "List Of Things You Will Learn:\nBuild A Complete 3D Android Game\nLearn Unity Basics\nLearn C# Scripting\nPublish an Android Game\nMonetize With Video Ads\nCreate Leaderboards\nCreate Achievement System\nLearn the basic concepts, tools, and functions that you will need to build fully functional 3D Games with the Unity game engine and C#.\nBuild a strong foundation in Unity and 3D Game Development with this course.\nUnity Installation & Setup\nLearning Unity Editor\nUnity Physics\nUnity Animations\nUnity UI\nUnity C# Scripting\nA Powerful Skill at Your Fingertips  Learning the fundamentals of Unity Android Game Development puts a powerful and very useful tool at your fingertips. Unity is free, easy to learn, has excellent documentation, and is the game engine used for building 3D games.\nJobs in unity android game development are plentiful, and being able to learn unity android game development will give you a strong background to more easily build awesome android games.\nContent and Overview  Suitable for beginning programmers, through this course of 4 hours of content, you’ll learn all of the unity 3D game development fundamentals and establish a strong understanding of the concept behind android game development.\nStarting with the installation of the Unity , Java Development Kit and Android SDK , this course will take you through various unity features and how to use them. By creating example games, you’ll a establish a strong understanding of unity game development.\nWith these basics mastered, the course will take you through building different example games with unity to learn more about the process of creating mobile android games with unity.\nStudents completing the course will have the knowledge to create fully functional and ready to publish 3D games with unity.\nComplete with working files, you’ll be able to work alongside the author as you work through each concept, and will receive a verifiable certificate of completion upon finishing the course.",
      "target_audience": [
        "Anyone Who Wants To Build Android Games"
      ]
    },
    {
      "title": "Build a Tower Defence Game with Unity 6 and Blender",
      "url": "https://www.udemy.com/course/tower_defence/",
      "bio": "Explore Tower Defence Game Mechanics through the creation of a game level by learning the programming and art creation.",
      "objectives": [
        "Work with pathfinding to create autonomous characters that navigate a 3D environment.",
        "Translate Tower Defence Game Mechanics into C# Code in Unity",
        "Use Blender to create modular 3D game objects for use in level design",
        "Design and develop moveable 3D models that can be programmatically moved with C# code in Unity"
      ],
      "course_content": {
        "A01/B01 Introduction": [
          "Introduction",
          "Join the H3D Social Community",
          "FAQs",
          "Tower Defence Game Mechanics",
          "Setting up Pathfinding in Unity",
          "Updating to Unity 6"
        ],
        "Part A.02 Building A Tower Defence World": [
          "A Quick Introduction to Navigation Meshes",
          "Creating a Navmesh Agent",
          "Spawning Agents",
          "Timing and Limits"
        ],
        "Part A.03 Developing Tower Placement Mechanics": [
          "Programming Turret Drop Functionality",
          "Programming Turret Drag Functionality",
          "Controlling Turret Placement",
          "Tweaking for Turret Models"
        ],
        "Part A.04 Creating a User Interface": [
          "Adding Buttons to Select Turret Type",
          "Instantiating a Turret from a Button",
          "Developing a Turret Upgrade Menu",
          "Activating and Closing the Upgrade Menu",
          "Challenge: Add a new type of turret"
        ],
        "Part A.05 Tower Defence Artificial Intelligences": [
          "Aiming at the Enemies",
          "Tower Horizontal Targeting",
          "Tower Vertical Targeting",
          "Resetting Turrets to Original Positions"
        ],
        "Part A.06 Building Destructible Enemies": [
          "Using Scriptable Objects to Hold Enemy Data",
          "Displaying a Healthbar",
          "Reducing Enemy Health",
          "Improving Shooting Accuracy"
        ],
        "Part A.07 Customising with Scriptable Objects": [
          "Customising Turret Properties",
          "Programming with Turret Properties",
          "Defining Individual Turret Types",
          "Defining Individual Creep Types",
          "Manually Working with Colliders"
        ],
        "Part A.08 Sounds and Visual Effects": [
          "Building the Environment",
          "Placing Platforms",
          "Finessing Shooting Sounds",
          "Particle System Flames",
          "Switching Particle Systems on and off.",
          "Adding Shooting Effects for Two-Gun Towers",
          "Enemy Death Explosions Part 1",
          "Enemy Death Explosions Part 2",
          "Enemy Death Explosions Part 3"
        ],
        "Part A.09 Tower Defence Game Mechanics": [
          "Waves Part 1",
          "Waves Part 2",
          "UI Layout for Game Information",
          "Displaying Wave Counts",
          "Making Money",
          "Counting Lives",
          "Changing the Game Timescale",
          "Spending Money on Towers",
          "Upgrading and Removing Towers",
          "Game Over"
        ],
        "Part 2 B.02 Orientation": [
          "Project Overview",
          "Reference Material",
          "Our Workflow",
          "Multiple Approaches",
          "Are You Stuck?",
          "Share Your Work",
          "Course Resources",
          "Help, I Have Made a Complete Mess!"
        ]
      },
      "requirements": [
        "Student will require a working knowledge of C# and Unity. No prior experience with Blender is required."
      ],
      "description": "Have you ever wanted to create your own computer game from scratch?  Are you a programmer that would like to also create your own 3D art assets?   Then this course is for you.  In it, you will follow along learning both the coding and art side of game development giving you the necessary skills required to be an independent game developer.\nDive right into over 20 hrs of hands-on content.\nThis course takes a holistic view at creating a Tower Defence game level through the examination of game mechanics, coding exercises in C# with the Unity Game Engine (works in all versions of Unity including Unity 6!), and 3D art asset creation in Blender.\nThrough the investigation of this simple but compelling casual gaming genre, the course is broken into 2 parts that can be taken separately or together:\nIn Part A learn how to program and work with:\nPathfinding\nCharacter Animation\nUser Interface Development and Programming\nEconomy systems including player lives, and money accumulation & spending\nSpecial effects including sound effects, particle systems, and explosions\nAutomated enemy-sensing towers\nIn Part B learn how to design and work with:\nBlender\nModular 3D art assets for game level design\nProcedurally Generated Textures\nA multipart game character with sub-meshes that can be independently controlled with code in Unity\nIn this course, Penny and Mike teach all the invaluable skills you will require to design, program, and model your own Tower Defence game from scratch.  You will learn from their combined 40 years of knowledge about Unity and Blender through detailed descriptions and hands-on workshops.\nWhat students are saying about Penny and Mike's other courses:\nAs a game developer with 3+ years experience under his belt, I would like to say that I have learned a lot, and also improved on what I knew already before the course.\nThis course is absolute gold! I am a Software Engineering Teacher as well as a solo game developer, and of all the courses I have taken on Udemy, this is has been the most useful and eye opening by far.\nI've taken some great courses on this site, this has to be the best in terms of volume, clarity and thoroughness. In this course you will: 1) Learn several procedural generation methods 2) Learn some cool Blender functionality 3) Learn how to make a pathfinding algorithm I was only expecting number 1) but seeing how much extra stuff is here, I'm definitely coming back to go deeper and help some of the trickier stuff sink in. Can not recommend enough. Do this course now!",
      "target_audience": [
        "Beginner game development students who want to learn about tower defence mechanics.",
        "Programmers who want a gentle introduction to creating their own 3D art assets."
      ]
    },
    {
      "title": "10 Killer Tips and Tricks for Unity",
      "url": "https://www.udemy.com/course/3dmotive-10-killer-tips-and-tricks-for-unity/",
      "bio": "Learn essential tips and tricks you need to know when working with the Unity Game Engine!",
      "objectives": [
        "Learn some killer tips you need to know when working with Unity!"
      ],
      "course_content": {
        "Introduction and Tips 1-4": [
          "Download Course Files Here!",
          "Introduction",
          "Tip #10 Cameras and Depth",
          "Tip #9 Singleton Objects and Persistent Data",
          "Tip #7 Lists and Arrays"
        ],
        "Tips 5-8": [
          "Tip #8 Coroutines and Yield",
          "Tip #6 Dynamically Loading Images",
          "Tip #5 Mesh Import Workflows",
          "Tip #4 Collision and Mouse Picking"
        ],
        "Tips 9-12": [
          "Tip #3 Alpha Textures",
          "Tip #2 Procedural Geometry",
          "Tip #1 GameObjects and Broadcasting",
          "Bonus Lecture: Further Learning with 3dmotive"
        ]
      },
      "requirements": [
        "A free copy of the Unity game engine"
      ],
      "description": "In this course, Alan Thorn takes us through some great tips and tricks you need to know when working with Unity! We'll look at all sorts of handy features inside this powerful Engine to help accelerate your workflow, and really power your work inside of Unity!\n(Students - please look under Section 1 / Lecture 1 downloads for the source files associated with the lesson.)\n\nMore about the Instructor:\nAlan Thorn is a game developer, author and educator with 15 years industry experience. He makes games for PC desktop, Mobile and VR. He founded 'Wax Lyrical Games' and created the award-winning game 'Baron Wittard: Nemesis of Ragnarok', working as designer, programmer and artist. He has written sixteen technical books on game development and presented ten video training courses, covering game-play programming, Unity development, and 3D modelling. He has worked in game development education as a visiting lecturer for the 'National Film and Television School', as a Lead Teacher for 'Uppingham School', and is currently a Senior Lecturer at 'Teesside University' where he helps students develop the skills needed for their ideal role in the games industry.",
      "target_audience": [
        "Beginners or Advanced learners of Unity who are looking for some new tricks to add to their pipeline"
      ]
    },
    {
      "title": "Scratch Saga: A Journey Into Game Development",
      "url": "https://www.udemy.com/course/scratch-saga/",
      "bio": "Learn computer programming by creating exciting games in Scratch!",
      "objectives": [
        "Navigate and use Scratch’s interface effectively, including its tools for coding, animating, and designing games.",
        "Apply foundational programming concepts like loops, variables, conditionals, and events to create interactive and engaging game mechanics.",
        "Design and customize characters (sprites) and backgrounds, giving each game a unique look and feel.",
        "Create animations and movement patterns to enhance gameplay, adding smooth, interactive elements to their projects.",
        "Develop complete game projects with multiple levels and scoring systems, understanding how to structure games from start to finish.",
        "Problem-solve and debug code confidently, troubleshooting common errors to improve and polish game functionality."
      ],
      "course_content": {
        "Introduction to Scratch": [
          "Welcome!",
          "Getting Started with Scratch",
          "The Scratch Editor",
          "The Building Blocks of Scratch",
          "Clones and Variables"
        ],
        "Smack Some Moles": [
          "Smack Some Moles Introduction",
          "Draw the Hammer Sprite",
          "Code the Hammer Sprite",
          "Draw the Background",
          "Draw the Mole Costumes",
          "Animate the Mole Sprite",
          "Handling Layers",
          "Smack the Moles",
          "Improve the Smacking",
          "Add Hit Effects",
          "Create the Pow Sprite",
          "Using Variable Lists",
          "Fix the Pow Clones",
          "Score Points",
          "Add a Countdown Timer",
          "Add a Game Over Screen",
          "Restarting the Game",
          "Finish Up the Moles",
          "Increase the Difficulty",
          "Spruce Up the Score",
          "Fix the Score Bug",
          "Spruce Up the Timer",
          "Add Flying Stars",
          "Add Sound Effects"
        ],
        "Cosmic Havoc": [
          "Cosmic Havoc Introduction",
          "Initial Setup",
          "Draw the Player Costumes",
          "Move the Player",
          "Smoothen the Player Movement",
          "Implement Wraparound",
          "Create the Laser",
          "Draw the Asteroid Costumes",
          "Spawn the Asteroids",
          "Improve the Asteroid Movement",
          "Shoot the Asteroids",
          "Give the Asteroids Health",
          "Split Up the Asteroids",
          "Add Explosion Flashes",
          "Add Particle Effects",
          "Destroy the Player",
          "Create a Player Hitbox",
          "Create the Thruster Flame",
          "Draw the Pickup Costumes",
          "Spawn the Pickups",
          "Create the Laser Powerup",
          "Create the Shield",
          "Create the Bomb",
          "Using the Pen Extension",
          "Create the Stars",
          "Animate the Stars",
          "Keeping Score",
          "Create the Start Button",
          "Create the Logo",
          "Switch Player Costumes",
          "Track the High Score",
          "Add Sounds and Music",
          "Create the Audio Toggles",
          "Implement Audio Toggling"
        ],
        "Glim's Adventure": [
          "Glim's Adventure Introduction",
          "Load the Starter Project",
          "Game Loop and Control Handling",
          "Add Player Movement",
          "Add Gravity",
          "Let the Player Jump",
          "Walking on the Level",
          "More Level Collisions",
          "Use the Player Hitbox",
          "Bug Fix and Coyote Time",
          "Idle and Walk Animations",
          "Jump, Fall, and Land Animations",
          "Let the Player Crouch",
          "Sliding on Slopes",
          "Sliding on Walls",
          "Jumping on Walls",
          "Generate the Levels",
          "Scrolling a Level",
          "Improve the Scrolling",
          "Fix Some Bugs",
          "Restarting a Level",
          "Switching Levels",
          "Sort the Layers",
          "Add Environment Objects",
          "Create a Scrolling Background",
          "Add Some Liquid",
          "Enable God Mode",
          "Add the Coins",
          "Collect the Coins",
          "Exiting a Level",
          "Implement Auto Scrolling",
          "Create a Screen Transition",
          "Add the Locks and Keys",
          "Add the Snail Enemy",
          "Bounce the Player",
          "Getting Hurt",
          "Killing the Player",
          "Respawn the Player",
          "Add the Bee Enemy",
          "Add the Fly Enemy",
          "Add the Fish Enemy",
          "Add the Jump Pads",
          "Create the Slope Slide Effect",
          "Create the Dust Particles",
          "Pausing the Game",
          "Create the Pause Overlay",
          "Create the Heart Display",
          "Create the Coin Display",
          "Set Up the Boss",
          "Make the Boss Fly",
          "Shooting Rockets",
          "Seeking the Player",
          "Striking the Player",
          "Add Rocket Explosions",
          "Hurting the Boss",
          "Winning the Game",
          "Create the Boss Health Bar",
          "Add Some Sounds",
          "Add Some Music",
          "Create the Title Screen",
          "Fix the Green Flag Glitch",
          "Create the Text Overlay"
        ],
        "Conclusion": [
          "Congratulations!"
        ],
        "Bonus": [
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "A computer with access to the Internet",
        "No programming experience needed--you will learn everything you need to know!",
        "A desire to make awesome games!"
      ],
      "description": "Unlock your creativity and learn to code through game development with Scratch Saga: A Journey into Game Development! This course is designed for beginners, young coders, and anyone curious about game design. My name is Brandon, and I will be your guide on this step-by-step course, in which we'll create three complete games in Scratch, each one more exciting and complex than the last. You’ll learn how to bring your ideas to life in a fun, interactive way—no prior experience needed!\nWhat You'll Learn\nThroughout Scratch Saga, you’ll gain hands-on experience in game development while learning key programming concepts. Here’s what you’ll master along the way:\nScratch Basics: Understand Scratch’s block-based interface, and learn how to navigate the tools you’ll use to code, design, and animate.\nCore Programming Concepts: Grasp the essentials like loops, variables, conditionals, and event handling in a visual, easy-to-follow format.\nCharacter and Sprite Design: Create and customize characters and objects to bring your game’s story and interactions to life.\nAnimations and Movements: Learn how to animate characters, add smooth movements, and enhance gameplay with dynamic interactions.\nGame Mechanics: Implement mechanics like scoring, leveling, and winning conditions, giving your games clear objectives and challenges.\nProblem-Solving and Debugging: Tackle common coding issues and learn how to identify, troubleshoot, and fix errors in your code.\nGame Design Principles: Discover what makes a game fun, how to balance challenge and playability, and how to keep players engaged.\nCourse Highlights\nBy the end of Scratch Saga, you’ll have created three fully functional games, gained a solid understanding of coding and game design, and developed the skills to bring your own game ideas to life. Plus, you’ll be ready to share your projects with others or dive into more advanced coding!\nGet ready to embark on your journey into game development—join Scratch Saga today and start creating games from scratch!",
      "target_audience": [
        "Beginner Coders: Anyone new to coding who wants to learn programming in a fun, interactive way without diving into complex syntax.",
        "Young Creatives and Gamers: Kids and teens interested in games who want to understand how games are made and create their own.",
        "Teachers and Educators: Educators looking to incorporate coding and game design into their classroom activities with a hands-on, accessible tool.",
        "Aspiring Game Designers: Individuals curious about game design fundamentals who want an easy-to-follow introduction to mechanics, animations, and player engagement.",
        "Parents and Guardians of Young Learners: Parents looking for a safe and educational course that introduces coding to their children in a visual and fun way.",
        "Hobbyists Exploring Scratch: Anyone interested in Scratch as a platform who wants to explore its potential for creating interactive projects beyond simple animations."
      ]
    },
    {
      "title": "Build & 3D Model Huge and Complete Unity® Games from Scratch",
      "url": "https://www.udemy.com/course/build-and-model-3d-unity-games-from-scratch/",
      "bio": "Create full 3D environments. Animate characters to wield weapons and run a muck. Survive your own battle royale.",
      "objectives": [
        "Learn to code for game development in Unity C#",
        "Create your own unique Battle Royale system.",
        "Build a platform shooter game in Unity®",
        "Navigate the Unity® editor.",
        "Design large environments for your character to explore in.",
        "Build 3D models for the game in Blender.",
        "Integrate the art from Blender into Unity®."
      ],
      "course_content": {
        "PROJECT 1 - Gameplay": [
          "Gameplay"
        ],
        "Introduction to Unity": [
          "Introduction to Unity - Part 1",
          "Introduction to Unity - Part 2",
          "Unity Support"
        ],
        "Movement": [
          "Movement - Part 1",
          "Movement - Part 2",
          "Movement - Part 3"
        ],
        "Building Blocks": [
          "Blocks - Part 1",
          "Blocks - Part 2"
        ],
        "Speed Blocks and Enemies": [
          "Speed Blocks and Enemies - Part 1",
          "Speed Blocks and Enemies - Part 2",
          "Speed Blocks and Enemies - Part 3"
        ],
        "More Enemies": [
          "More Enemies - Part 1",
          "More Enemies - Part 2"
        ],
        "Powerup and Finish Line": [
          "Powerup and Finish Line - Part 1",
          "Powerup and Finish Line - Part 2"
        ],
        "Background and Interface": [
          "Background and Interface - Part 1",
          "Background and Interface - Part 2",
          "Background and Interface - Part 3"
        ],
        "Fine Tuning the Game": [
          "Fine Tunings - Part 1",
          "Fine Tunings - Part 2",
          "Fine Tunings - Part 3"
        ],
        "Level Design": [
          "Level Design - Part 1",
          "Level Design - Part 2"
        ]
      },
      "requirements": [
        "Unity® and Blender are free to download. Please download and install Unity® and Blender before purchasing this course",
        "This course was recorded on a Mac computer, but you can use Unity® and Blender on a PC."
      ],
      "description": "Best Unity Course: Game Developer Training Videos\nA runaway success of a Kickstarter funded this Mammoth Interactive course\nGame development & design.\nLearn how to use Unity in C#.\nBuild 3D games like Super Mario in Unity\nLearn what Photoshop is used for in game development\nThe game development process step by step for beginners\nMake your own shooter game in Unity\nBuild a battle royale game like Fortnite\nAdd multiplayer functionality to game programming\nLearn the foundations of Blender 3D\nThe best coding program online. Beginner's guide for aspiring game developers. Learn C# and programming fundamentals. Create epic 2D and 3D games using Unity® and Blender!\nThis course is unique because we make both the code and the art for the game from scratch. We teach you the fundamentals of designing, coding, and modeling a 3D game.\nFirst you design the game and its functionality in Unity®. You learn how to code in C# and build video game levels. Don't worry if you've never coded before. We start simple and add more to the game as the course goes on.\nComplete your first Unity games for web, Mac & PC. Learn all about game development more efficiently YouTube tutorials.\nUnity® is one of the most popular platforms in game development. You can use Unity® to build 2D and 3D games. Unity® is cross-platform, which means it is easy to use with other platforms.\nThen you create the 3D models for the game in Blender. You build all the art assets for the game. You learn how to integrate your art from Blender into Unity®.\nLearn the Foundations of Blender\nBlender, like Unity®, is a popular production suite that is free to download. Blender is a revolutionary tool for making 3D art digitally. With Blender, you can make art assets for games, like we do in this course.\nWe answer every question within two business days. We want to hear from you. Watch the free lectures and amazing trailer, then jump right in and start participating with the Mammoth community.",
      "target_audience": [
        "Anyone who wants their start at making 3D video games.",
        "People that want to create their own Battle Royale.",
        "Anyone who wants to learn game development.",
        "Beginners who want to learn how to use Blender.",
        "Even if you have never coded before, you can use these lessons to get a headstart in the game-making realm! This course is targeted towards beginners to immediate."
      ]
    },
    {
      "title": "Python Game Development for Beginners",
      "url": "https://www.udemy.com/course/python-game-development-for-beginners/",
      "bio": "Create Interactive User Interfaces and Games with the Turtle Module",
      "objectives": [
        "Once you have completed this training course, you will be fully capable of creating your own user interfaces and games with the turtle module."
      ],
      "course_content": {
        "Introduction": [
          "Important - Download These First - Working Files",
          "Course And Author Overview",
          "Using Trinket",
          "Why Code A Game Using Pythons Turtle?",
          "My Approach To Learning",
          "Using The Working Files Outside Of Trinket"
        ],
        "Simple User Interfaces - Keys And Clicks With Turtle": [
          "Screen Key And Click Events",
          "Turtle Click, Release And Drag Events",
          "Game Sketch - Drawing App - Part 1",
          "Game Sketch - Drawing App - Part 2"
        ],
        "Make Your Own Game Objects With Class Inheritance": [
          "Object Review - Extending The Turtle Class - Part 1",
          "Object Review - Extending The Turtle Class - Part 2",
          "Displaying Information With Custom Turtle Objects - Part 1",
          "Displaying Information With Custom Turtle Objects - Part 2",
          "Game Sketch - TurtleChase! - Part 1",
          "Game Sketch - TurtleChase! - Part 2",
          "Game Sketch - TurtleChase! Finishing Touches - Part 1",
          "Game Sketch - TurtleChase! Finishing Touches- Part 2"
        ],
        "Using State": [
          "The Game State Dictionary - Part 1",
          "The Game State Dictionary - Part 2",
          "Checking For Intersection - Part 1",
          "Checking For Intersection - Part 2",
          "Displaying Game State - Part 1",
          "Displaying Game State - Part 2"
        ],
        "Fun With Games - Making And Breaking Rules": [
          "Autonomous Turtles - Part 1",
          "Autonomous Turtles - Part 2",
          "Surprises With Pythons Random",
          "Increasing Challenge With Levels - Part 1",
          "Increasing Challenge With Levels - Part 2"
        ],
        "Extras And Advanced Topics": [
          "Controlling Animation With Screen.Tracer",
          "Screen.Setworldcoordinates",
          "Adding Images To Turtle",
          "Private Methods And Attributes"
        ],
        "Conclusion": [
          "Wrap-Up"
        ]
      },
      "requirements": [
        "This course is designed for the absolute beginner, meaning no Python or game development experience is required"
      ],
      "description": "In this Python Game Development for Beginners training course, expert author Elliottt Hauser will teach you how to build your own game sketches using Python's built-in turtle module. This course is designed for the absolute beginner, meaning no Python or game development experience is required.\nYou will start by learning about simple user interfaces, then jump into learning how to make your own game objects with class inheritance. From there, Elliott will teach you about the game state dictionary, how to check for intersection, and how to display game state. Finally, this video tutorial covers some advanced topics, including adding images to Turtle and private methods and attributes.\nOnce you have completed this computer based training course, you will be fully capable of creating your own user interfaces and games with the turtle module. Working files are included, allowing you to follow along with the author throughout the lessons.",
      "target_audience": [
        "This course is geared towards individuals wanting to learn how to develop games using Python"
      ]
    },
    {
      "title": "Unreal Engine 5 Steam Multiplayer - Advanced sessions (2024)",
      "url": "https://www.udemy.com/course/how-to-add-steam-multiplayer-unreal-engine-5-blueprint/",
      "bio": "Learn how to add Unreal Engine 5 Steam multiplayer to your own game using the Advanced Sessions Plugin.",
      "objectives": [
        "How to Install the Steam Advanced Sessions plugin.",
        "How to host an online server on Steam.",
        "How to design & create a fully functional Server Browser.",
        "How to filter for servers through server names, languages & more.",
        "How to create, search and join online game servers.",
        "How to package the project for friends and family to play together."
      ],
      "course_content": {
        "Initial Setup": [
          "COURSE MATERIALS",
          "Introduction",
          "VS, .NET Core, .NET Framework & DirectX",
          "Converting the project to C++",
          "Adding Steam Advanced Sessions Plugin",
          "Building in Visual Studio",
          "Enabling Steam Advanced Sessions Plugin",
          "Editing the DefaultEngine.ini file",
          "Creating the Main Menu Map",
          "Main Menu Game Mode & Player Controller"
        ],
        "Main Menu": [
          "Introduction to Widget Blueprints",
          "Importing a Custom Font",
          "Designing the Main Menu",
          "Player Name UI Animation",
          "Creating the Enumeration",
          "Show & Hide Widget Function",
          "Blueprint Communication - Casting",
          "Blueprint Communication - Interfaces",
          "Programming the Main Menu",
          "Programming the Steam Name",
          "Designing the Main Menu Background",
          "Adding Button SFX"
        ],
        "Create Server": [
          "Creating the Create Server Widget",
          "Designing the Create Server Widget",
          "Getting the Server Name & Selected Map",
          "Getting the Slots, Language & Privacy",
          "Programming the Back Button",
          "Create Advanced Session",
          "Programming the Create Server Button",
          "Adding Create Server UI Animation"
        ],
        "Server Browser": [
          "Creating the Server Browser Widget",
          "Designing the Server Browser Widget",
          "Designing the Server Card Widget",
          "Adding the Server to the List",
          "Adding a Refreshing Servers Indicator",
          "Show Sessions Result Function",
          "Filtering for Server Language",
          "Filtering to LAN Servers Only",
          "Hiding Empty Servers",
          "Filtering for Server Name",
          "Getting the Extra Settings for Server Card",
          "Updating the Server Card Info",
          "Joining the Session",
          "Server Browser Back Button",
          "Testing the Final Result",
          "Packaging the Project"
        ]
      },
      "requirements": [
        "No requirements. Everyone can take this course."
      ],
      "description": "Unreal Engine 5 Steam Multiplayer - Learn Everything\nThis FREE course will teach you how to add Unreal Engine 5 Steam Multiplayer into your game using the advanced sessions plugin. You can accomplish all this without writing any code, as it is done entirely using Unreal Engine Blueprint.\nYou don't need previous experience in the advanced sessions plugin or in Unreal Engine 5 Multiplayer. We will go through everything from scratch, step by step. For this Unreal Engine course, you can use your own custom project if you have one. Or you can follow along with one of the standard unreal engine game development templates.\nThe main objective of this course is to teach you how to implement advanced sessions to your game project as well as the Unreal Engine Steam integration process. At the end of this course, you'll have the skills to create your own online game with a server browser, join and host servers, and more.\nLet's not waste any time and jump right into the process of integrating Unreal Engine 5 Steam Multiplayer.\nWhat makes me qualified to teach you?\nI have nine years of experience as a game developer. To summarize my work without being boring:\nI directed a team of 8 to release a game on Steam.\nI have taught over 40,000 students game development through 11 courses, earning an average rating of 4.8+ stars out of 5.\nI am currently developing Farmtale 2 all by myself, from the beginning to the end.\nI work as a freelancer on game projects, specializing in programming, lighting, and optimization.\nI am a full-time game developer passionate about teaching everything about Unreal Engine 5 with good game development practices and keeping you updated with the latest information.\nLearn all about Unreal Engine 5 Steam Multiplayer.\nThis course will teach you every step of using Advanced Steam Session for Unreal Engine 5 Steam Multiplayer. Many game development courses online lack detail and don't go in-depth with the subject. They also teach bad coding practices, leaving your game unoptimized.\nThis course will cover everything in detail and help you do things correctly. The key steps covered in this course:\nLearn to install Steam Advanced Sessions.\nLearn to add the Advanced Sessions plugin to your project.\nYou'll master Unreal Engine UI design and create the Main Menu, Host Server, and Server Browser UI.\nLearn to program the functionality of the Main Menu.\nLearn to host an online server on Steam.\nLearn to join a hosted game server through the Server Browser.\nYou'll learn to update values dynamically in real-time, such as the number of players in the server and the game map being played.\nLearn advanced mechanics such as searching for a specific game server, refreshing the server browser, or hiding empty servers.\nLearn to package the project for friends and family to play together.\nBy the end of this course, you'll be equipped with everything you need to know about Unreal Engine 5 Steam Multiplayer and the Advanced Sessions plugin. As a result, you'll gain a comprehensive understanding of how to make a game on Steam with multiplayer.\nLet's begin the course without delay and begin our work!\nMake games without coding.\nUnreal Engine blueprint is the powerful Unreal Engine scripting language used in UE5. It allows you to create your own online game from start to finish without writing a single line of code. That means you can easily create your own online game even if you are a beginner, artist, or designer without programming experience.\nThis course doesn't require any programming or Unreal Engine experience. We will go through the Unreal Engine blueprint basics and slowly advance to developing more complex game mechanics. By doing so, you will learn how to develop games from start to finish.\nYou can jump into this course as a beginner as you will learn how to add Unreal Engine 5 Steam multiplayer step-by-step.\nUnreal Engine 5 multiplayer.\nGetting into online game development with Unreal Engine 5 is very easy. It is similar to the single-player Unreal Engine blueprint but with an extra step added. While learning how to implement Unreal Engine 5 Steam multiplayer, you will learn everything you need to know about Unreal Engine 5 multiplayer. You don't need prior experience as I will teach you basic and advanced Unreal Engine networking.\nAfter this course, you'll be able to learn how to add Steam Multiplayer and everything about releasing a game on Steam.\nLearn how to publish a game on Steam from any platform.\nThis Unreal Engine course is about adding the Advanced Sessions plugin for UE5. That will allow you to create servers on Steam as well as join them.\nHowever, if you wish to learn how to publish a game on Steam, check out my new course on the subject. You'll learn everything about publishing a game on Steam.\nEven though the course is about publishing on Steam through Unreal Engine, you can do the same process using other game engines such as Unity, Godot, or Game Maker.\nI recommend taking Unreal Engine 5 Steam multiplayer first and then afterward continuing with the course on how to publish a game on Steam. With these two courses combined, you'll be able to get into Steam online game development as well as publishing and playing with friends and family.\nHow do I continue after this course?\nWhen finishing this Unreal Engine course, you can apply the Unreal Engine 5 Steam multiplayer to any multiplayer game. You can continue with the multiplayer courses I have released. The first is how to make a FPS Game, and the second is a multiplayer 2d course on how to make a Platformer game.\nFor multiplayer, you can also continue making a simple inventory system, which is needed in most games today. You can use the inventory system for both 2D and 3D games.\nIf you wish to get into single-player, it's worth looking at how to make a Clicker Game in 2D.\nWhatever you decide, it's always good to continue with another course to keep developing your Unreal Engine skills. Keep up the excellent work, and you'll be a pro in no time. Practice and repetition are key.\nTake this course and get certified.\nCompleting the Unreal Engine 5 Steam multiplayer course earns you an Unreal Engine certification. You can use it to strengthen your portfolio as an independent game developer or use it when applying for game development jobs. The Unreal Engine certification can be downloaded and saved locally and is valid indefinitely.\nJoin our supportive community.\nUnreal Engine game development can be a frustrating experience at times. For example, you might need to look for an unchecked box somewhere, leaving you feeling lost for hours. Alternatively, you might require moral support and ideas from fellow game developers like yourself. That's why we offer live support 24/7 in the Q/A section or in our community Discord server. You can also join us to chat casually about game development in general or share your work with others. We are always here to help you whenever you need it.\nLet's begin adding Unreal Engine 5 Steam multiplayer without any delay. I am excited to see you in our first lesson. Let's get started!",
      "target_audience": [
        "Anyone (beginner or intermediate) who wants to add Steam multiplayer in Unreal Engine 5.",
        "Anyone who want to learn how to make multiplayer games in Unreal Engine 5.",
        "Experienced developers who want to brush up on their skills.",
        "Game designers and artists who want to get into game programming."
      ]
    },
    {
      "title": "Game Math and Physics Basics in 2D",
      "url": "https://www.udemy.com/course/gamemathandphysics/",
      "bio": "Learn Useful Computer Game Math",
      "objectives": [
        "describe unit vectors",
        "describe vectors in general",
        "describe scalars",
        "describe distance",
        "describe speed",
        "describe velocity",
        "understand coordinate transformations",
        "describe world space",
        "describe object space",
        "describe forces",
        "describe acceleration",
        "describe displacement",
        "describe the z axis in unity vividly",
        "describe rotations",
        "work with square roots as needed",
        "describe vector components",
        "describe magnitudes",
        "describe motion on a circle",
        "understand angles",
        "add vectors",
        "subtract vectors",
        "multiple vectors by scalars",
        "find unit vectors",
        "find vectors of a desired magnitude and direction",
        "understand weighted averages",
        "describe average speed",
        "describe average velocity",
        "and many others!"
      ],
      "course_content": {
        "2D coordinate and vector concepts": [
          "Displacements/distances along x",
          "Displacements/distances along y",
          "Unit vectors along each axis in 2D space",
          "Relative positions along coordinate axes",
          "World space vs. object space, part 1",
          "World space vs. object space, part 2",
          "Vector components in mathematical form",
          "Vector components in unity, 2 objects",
          "Displacements for tilted objects",
          "Displacements and scenes translations",
          "Z axis basics with physical model",
          "Effect of rotation on one object",
          "Vectors/vector components under rotations",
          "Vector components in unity, 3 objects",
          "Difference between distance and displacement vector length",
          "0 magnitude displacements vs big distances",
          "Distance at tiny scales",
          "Angle basics in unity",
          "Magnitude and angle of displacement on unit circle",
          "Vectors from unit vectors",
          "Components from angles and length",
          "Unit vectors from math",
          "Vector addition for displacements, graphical rules",
          "Vector addition math",
          "Graphical vector subtraction",
          "Mathematical vector subtraction",
          "Midpoint of a segment",
          "Centroids of point distributions",
          "Weighted average, basic demo",
          "Weighted average, multiple objects, unity",
          "Simulation of coordinate translations, horizontal and vertical line segments",
          "Diagonal translations on coordinates",
          "2D balance point, physical model",
          "Rotations and translations",
          "Constant speed in 2D, line segments",
          "Square roots in more detail",
          "Constant speed, diagonal movements",
          "Constant velocity in 2D, horizontal and vertical",
          "Constant velocity, slanted segments",
          "Speed vs. velocity for line motions",
          "0 velocity",
          "Average concepts",
          "Average speed in 2D, horizonital segments",
          "Average speed, slanted segments",
          "Average velocity in 2D, horizontal segments",
          "Calculations involving speed and velocity",
          "Average velocity for slanted movements",
          "Displacement vector from given velocity",
          "Desired velocity from object to object",
          "Constant acceleration changing speed",
          "Visualizing acceleration",
          "Average acceleration",
          "Constant acceleration changing velocity",
          "Visualize acceleration",
          "Position vector",
          "Final velocity vector",
          "Basic vertical acceleration",
          "Physical introduction to forces",
          "Cancelling horizontal/vertical forces",
          "Cancelling slanted forces",
          "Cancelling four forces graphically",
          "Unbalanced forces",
          "Summation notation applied to forces",
          "Finding a missing vector graphically",
          "Finding a missing force mathematically",
          "Finding a force in a given direction",
          "Force equals mass times acceleration",
          "Velocity from force",
          "Position vector from initial position, velocity and acceleration",
          "Projectile motion summary",
          "Projectile motion specific example",
          "Decomposing projectile motion into individual functions",
          "Understanding x(t)",
          "Understanding y(t)"
        ],
        "Other Ideas": [
          "Dot product basics",
          "Scalar projections with dot products",
          "Projecting velocity components with dot products along x and y axes",
          "Projecting velocity components along slanted vectors",
          "Course Summary"
        ]
      },
      "requirements": [
        "It's helpful to have the latest version of the Unity installed.",
        "You should already know how to work with signed numbers.",
        "You should already have seen the concept of a two dimensional coordinate space."
      ],
      "description": "1. Friends, please take the time to review the curriculum carefully before buying so you can see exactly whether this is the right course for you. Please do not join until you have completed this step.\n2. Please watch the free preview videos so you can see whether the presentation style works for you. Please remember  I am just one person, and I make my videos often after I have been working for many hours already.  Please do not join until you have completed this step.\n3. If something needs fixing, please let me know. Again, I'm just one person and not a big team of people. I will try to fix it as quickly as possible. Thank you.\n\n\n\n\nCourse Overview:\n1. This course is for those who already know how to make a simple 2D project in unity. I'm assuming you can figure out how to do this. Please remember, however, that using Unity is NOT the main objective of this course.\n2. This course focuses only on two dimensional math and physics concepts related to game programming.\n3. In some of the videos you see how to use unity.\n4. In some of the videos I use physical demonstrations to illustrate mathematical concepts related to game development.\n5. In some of the videos I write by hand on paper because this is faster than writing on the computer screen.\n6. You should be mentally prepared to work with square roots, vectors and units of various kinds like m/s and m/s^2 and kg.\n7. I draw a lot in this course to illustrate various vector concepts. In other words, I use a variety of teaching methods.\n8. There are a variety of exercises placed throughout the videos. Please try to complete every exercise. Practice, of the right kind, counts!:)\n9. These videos focus primarily on understanding the concepts of vectors, distances, angles, transformations, speeds, velocities, accelerations, forces, and related concepts.\n10. You should already be able to solve basic linear equations like 2+4+x=10  and you should understand how to compare numbers with ratios, as in 10kg/2kg. I do, however, still explain these too.\n11. Please be sure to read the curriculum with meticulous care before enrolling so you can be sure this is truly the right course for you.\n12. If you are already a great physics/math expert, please do not join this course. It will not help you.\n13. For the hearing-impaired, closed-captions are added automatically. I do not have control over those, so they might not be perfect.\n14. Thank you for reading, and see you inside!",
      "target_audience": [
        "This is a course for those are interested in understanding the mathematics of 2D game development.",
        "This is a course for those who are interested in understanding the basic physics of 2D game development."
      ]
    },
    {
      "title": "Learn how to create a 2D Action game with Unity",
      "url": "https://www.udemy.com/course/learn-how-to-create-a-2d-action-game-with-unity/",
      "bio": "Learn video game development by creating a cool 2D Action Game like Soul Knight in Unity",
      "objectives": [
        "Learn C#, a modern versatile programming language.",
        "Learn clean code and how to design scalable systems",
        "Gain an excellent general knowledge of video game programming.",
        "Learn how object oriented programming works in practice.",
        "Build a combat system with multiple weapons",
        "Beginner to Intermediate C# fundamentals"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Join Our Discord Community!",
          "Download Assets"
        ],
        "Player": [
          "Introduction",
          "Create Project",
          "Player Movement",
          "Player Dash",
          "Add Rotation",
          "Animations",
          "Challenge: Complete Animations",
          "Section 2 Project"
        ],
        "Player Configuration": [
          "Introduction",
          "Player Scriptable Object",
          "Player Health",
          "Player Energy",
          "Player UI",
          "UI Manager",
          "Section 3 Project"
        ],
        "Create Dungeons": [
          "Introduction",
          "Structure Dungeon",
          "Create Rooms",
          "Create 2C Rooms",
          "Complete Rooms",
          "Create Corridors",
          "Build Dungeon",
          "Create Doors",
          "Add Props",
          "Section 4 Project"
        ],
        "Generate Dungeons": [
          "Introduction",
          "Review Templates",
          "Store Templates",
          "Get Tiles",
          "Load Templates",
          "Add Doors",
          "Challenge: Complete Rooms",
          "Close Doors",
          "Instantiate Dungeons",
          "Load Dungeons",
          "Position Player",
          "Add Fade",
          "Section 5 Project"
        ],
        "Weapons": [
          "Introduction",
          "Configure Weapons",
          "Create Weapons",
          "Add Animations",
          "Equip and Rotate Weapon",
          "Shoot Gun",
          "Use Energy",
          "Melee Weapon",
          "ITakeDamage Interface",
          "Section 6 Project"
        ],
        "Pick Items": [
          "Introduction",
          "Create Chest",
          "Pickable Items",
          "Pick Up Weapons",
          "Change Weapons",
          "Show Item Name",
          "Show Weapon Name",
          "Chest Items",
          "Game Manager",
          "Singleton Pattern",
          "Section 7 Project"
        ],
        "Main Scene": [
          "Introduction",
          "Create Main Scene",
          "Create Selectable Players",
          "Instantiate Players",
          "Player Selection UI",
          "Load Player Config",
          "Select Player",
          "Coin and Upgrade",
          "Update Bars",
          "Load Dungeon",
          "UI Manager",
          "Section 8 Project"
        ],
        "Cinemachine": [
          "Add Cinemachine",
          "Follow Player",
          "Section 9 Project"
        ],
        "Enemies": [
          "Introduction",
          "Create Enemy Prefabs",
          "Enemy Health",
          "Detect Enemy",
          "Enemy in Line of Sight",
          "Create AI System",
          "Random Wander",
          "Detect Obstacles",
          "Instantiate Enemies",
          "Tile Wander",
          "Detect Player",
          "Decision Player in Sight",
          "Refactor Player Weapon",
          "Enemy Weapon",
          "Attack Player",
          "Deal Damage",
          "Rotate Weapon",
          "Sword Weapon",
          "Section 10 Project"
        ]
      },
      "requirements": [
        "PC or Mac capable of running Unity 2021 or later",
        "Basic C# knowledge"
      ],
      "description": "Welcome to the exciting world of game development with Unity! In this comprehensive Udemy course, you will delve into the process of creating a Soul Knight-style game using the powerful Unity development platform.\nThroughout this learning journey, you will discover how to create an action-packed game filled with action elements and exciting challenges, similar to the popular game Soul Knight.\nOur unique approach focuses on making the complex game development process accessible to all skill levels. From beginners to more experienced developers, this course is designed so that anyone interested in game development can dive in and learn effectively. The clarity of instructions and the logical structure of the course ensure that you can easily understand and apply the presented concepts.\nBelow, we present a brief introduction to the main topics that we will address throughout the course:\nState-based AI System (FSM)\nMaster Scriptable Objects\nDesign a Weapon System\nCreate custom Dungeons u\nCreate Enemies\nCreate Boss\nCreate Players\nDesign UI\nUse Tilemaps\nGood Programming Practices\nBy the end of this course, you will gain a deep understanding of Unity's fundamental principles and learn how to implement them effectively.\nWhether you're a novice or an experienced game developer, this course will equip you with valuable insights and practical skills that will empower you to create your own captivating game experiences. Get ready to embark on a thrilling journey of game development and unlock your potential in the world of Unity!\nLet´s start making games!",
      "target_audience": [
        "Anyone who wishes how to learn how to create their own Soul Knight-style game using Unity.",
        "Anyone who wants to make their own 2D games.",
        "People who want to create and publish their own games.",
        "Beginners with an interest in learning game development.",
        "Aspiring indie game developers looking to enhance their game development skills"
      ]
    },
    {
      "title": "Unity Game Tutorial: Monopoly 3D - Board Game",
      "url": "https://www.udemy.com/course/unity-game-tutorial-monopoly-3d-board-game/",
      "bio": "Master Unity 3D Game Dev: Build Monopoly 3D Worlds!",
      "objectives": [
        "How to create a Monopoly 3D game in Unity.",
        "How to use some advance coding techniques like delegates.",
        "A lot c# fundamentals.",
        "A lot of Unity features, like working with Prefabs, and more."
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "#2 - Monopoly - Conzept",
          "#3 - Monopoly - New Project"
        ],
        "Course Assets & Extras": [
          "Course Assets"
        ],
        "The Monopoly Game Board": [
          "#4 - Monopoly - Basic Node",
          "#5 - Monopoly - Node Design",
          "#6 - Monopoly - More Nodes",
          "#7 - Monopoly - Last Nodes",
          "#8 - Monopoly - Board Route",
          "#9 - Monopoly - Node Images",
          "#10 - Monopoly - Full Gameboard"
        ],
        "The Monopoly Node": [
          "#11 - Monopoly - Node Name",
          "#12 - Monopoly - Node Price & Rent",
          "#13 - Monopoly - Mortgage & Owner"
        ],
        "Player Class and Info": [
          "#14 - Monopoly - Player Class 1",
          "#15 - Monopoly - Player Info 1",
          "#16 - Monopoly - Player Info 2",
          "#17 - Monopoly - Initialize Player"
        ],
        "Game Manager": [
          "#18 - Monopoly - GM 1 - Properties",
          "#19 - Monopoly - GM 2 - Init Player Info",
          "#20 - Monopoly - GM 3 - Player Token",
          "#21 - Monopoly - GM 4 - Create Token",
          "#22 - Monopoly - GM 5 - Roll Dice"
        ],
        "Player Movement & Ownership": [
          "#23 - Monopoly - Move Player 1",
          "#24 - Monopoly - Move Player 2",
          "#25 - Monopoly - Node Owner",
          "#26 - Monopoly - Switching Player",
          "#27 - Monopoly - Get Go Money"
        ],
        "Property Nodes": [
          "#28 - Monopoly - PN 1 - Switch Node Type",
          "#29 - Monopoly - PN 2 - AI and Human",
          "#30 - Monopoly - PN 3 - Calculate Rent",
          "#31 - Monopoly - PN 4 - Node Sets",
          "#32 - Monopoly - PN 5 - Node Sets Check",
          "#33 - Monopoly - PN 6 - Correct Rent",
          "#34 - Monopoly - PN 7 - Buy Property",
          "#35 - Monopoly - PN 8 - Bug Fixes",
          "#36 - Monopoly - PN 9 - Show Owner Bar",
          "#37 - Monopoly - PN 10 - Editor Script Colors",
          "#38 - Monopoly - PN 11 - Validate Update",
          "#39 - Monopoly - PN 12 - Pay Rent"
        ],
        "Utility & Railroad & Tax": [
          "#40 - Monopoly - Utility Nodes",
          "#41 - Monopoly - Utility & Railroad Price",
          "#42 - Monopoly - Railroad Node",
          "#43 - Monopoly - Tax & Free Parking"
        ],
        "Go to Jail": [
          "#44 - Monopoly - Go To Jail 1",
          "#45 - Monopoly - Go To Jail 2",
          "#46 - Monopoly - Go To Jail 3",
          "#47 - Monopoly - Go To Jail 4",
          "#48 - Monopoly - Go To Jail 5",
          "#49 - Monopoly - Go To Jail 6",
          "#50 - Monopoly - Go To Jail 7"
        ]
      },
      "requirements": [
        "Computer with a reliable internet connection.",
        "Basic computer skills, including file management and navigation.",
        "Programming knowledge or willingness to learn programming languages.",
        "Understanding of game design principles and concepts.",
        "Knowledge of game engines and development tools.(Not a must, but always good to have)",
        "Creativity and passion for game development.",
        "Patience and persistence to overcome challenges and setbacks.",
        "Willingness to continuously learn and stay up-to-date with industry trends and technologies.",
        "Strong problem-solving and critical thinking skills."
      ],
      "description": "Discover the secrets of game development with our Unity Game Tutorial: Monopoly 3D - Board Game course! Dive into the world of 3D game design and learn to create your own Monopoly experience from scratch. Master Unity programming and game mechanics as you bring this classic board game to life. Perfect for beginners and enthusiasts, this course offers hands-on learning, expert guidance, and the skills you need to craft interactive 3D games. Enroll now and unleash your creativity in the exciting realm of game development!\n\n\nIn this course, you will learn:\nUnity Basics:\nSetting up a game field in Unity 3D environment.\nCreating interactive 3D game boards for Monopoly.\nC# Fundamentals:\nImplementing essential functions using C# programming language.\nMastering delegates and events for robust game interactions.\nDebugging techniques for efficient bug fixing.\nUI Design:\nBuilding user interfaces from scratch.\nIntegrating prepared textures to enhance UI aesthetics.\nCreating interactive buttons, menus, and HUD elements.\nYour Benefits:\nGain practical experience in game development from scratch, suitable for beginners with no prior experience.\nMaster Unity basics and C# fundamentals, laying a strong foundation for future game development projects.\nFollow a well-organized curriculum designed to ease beginners into complex concepts, ensuring a smooth learning curve.\nUnleash creativity by designing your own 3D game boards and interactive interfaces, fostering artistic and technical skills. By implement your own grafics and 3d Models.\nReceive guidance from experienced instructors, providing personalized feedback and support throughout the learning journey.\nBuild a comprehensive portfolio with a fully functional Monopoly 3D game, showcasing skills to potential employers or clients.\nReady to transform your game development dreams into reality? Don't miss out on this exciting opportunity! Enroll now to embark on your journey in creating immersive 3D games. Let's bring your ideas to life together!\n\nImportant Notice:\nScripts are not provided in this course. I focus on teaching you to create scripts from scratch, enhancing your coding skills.\nAdditionally, the 3D models and graphics included are for educational purposes only. They serve as examples, encouraging you to develop your unique designs.\nEnroll now to learn, create, and innovate in the world of game development!\nSee you in couse!",
      "target_audience": [
        "Beginners and Intermediates interested in learning game development from scratch.",
        "Game enthusiasts looking to transition to a career in game development.",
        "Students pursuing a degree in game design or computer science.",
        "Freelance game developers seeking to improve their skills and knowledge.",
        "Independent game developers looking to create games for mobile or PC platforms.",
        "Small game development studios looking to upskill their team.",
        "Hobbyists who want to create their own games as a creative outlet.",
        "Educators who want to incorporate game design into their curriculum.",
        "Entrepreneurs who want to start their own game development studio."
      ]
    },
    {
      "title": "Create & Polish a Hyper Casual Mobile Game in Unity with me",
      "url": "https://www.udemy.com/course/unitysuikagame/",
      "bio": "An Interactive Course where you decide the Features I add to this Hypercasual Mobile Game :)",
      "objectives": [
        "Learn how to write Clean Code",
        "Learn the Mobile Game Creation Process",
        "Learn how to Polish a 2D Game",
        "Learn how to Code Independent Reusable Systems"
      ],
      "course_content": {
        "Main Gameplay": [
          "Project Setup",
          "The Game Plan",
          "Spawning the First Fruits",
          "The Spawn Line",
          "The Falling Fruit Line",
          "Better Fruit Spawning",
          "Adding a Spawn Delay"
        ],
        "Advanced Steps": [
          "The First Animation",
          "Adding More Fruits"
        ],
        "The Merge Mechanic": [
          "Detecting Collisions",
          "Better Collision Detection",
          "Merging Fruits",
          "Improvements & Bug Fixes",
          "Adding More Fruits",
          "Controlled Fruit Spawning",
          "Next Fruit Hint"
        ],
        "Making Art": [
          "Drawing the First Fruit",
          "Drawing More Fruits",
          "Even More Fruits"
        ],
        "More Features": [
          "Configuring the New Fruits",
          "Next Fruit Hint (Image Version)",
          "A Good Coding Practice",
          "Detecting Gameover",
          "Gameover Timer"
        ],
        "The Core Loop": [
          "UI & Buttons",
          "The UI & Game Manager",
          "Our First Singleton",
          "Adding a Merge Delay",
          "Closing the Core Loop"
        ],
        "Improvements": [
          "Merge Particles",
          "Fruit Prefab Variants",
          "Score UI",
          "Score Manager",
          "Adding a Best Score",
          "Merge Push Effect",
          "Adding Sounds"
        ],
        "The Settings Panel": [
          "The Settings Panel / Popup",
          "Open & Close the Settings Panel",
          "Reset Progress Setting",
          "Push Force Setting",
          "SFX Toggle Setting",
          "Project Files"
        ],
        "More Improvements": [
          "Fixing the Walls",
          "Hiding the Deadline (Part 1)",
          "Hiding the Deadline (Part 2)"
        ],
        "The Skin Shop": [
          "The Plan",
          "Using Scriptable Objects for Skin Data",
          "Adding a Skin",
          "Drawing The Shop Layout",
          "Building the Shop in Unity",
          "The Skin Button Prefab",
          "Procedural Skin Buttons",
          "Selecting a Skin",
          "Purchase Button Visibility",
          "Switching Skins",
          "Unlocking Skins",
          "Saving our Data",
          "The Skin Label",
          "Open / Close the Shop",
          "Planning the Next Steps"
        ]
      },
      "requirements": [
        "The desire to learn !",
        "C# Basics",
        "If you've taken some of my courses, it's a plus ;)"
      ],
      "description": "Hey there !\n\n\nIf you’re watching this video, it means that you are interested in the Interactive part of the course, and want to be part of it.\nIf not, you can still take the course & Learn by being a spectator.\n\n\nAnd that’s okay ! Because you and me, are going to make an Amazing Game.\n\n\nWe are first going to create the Suika Game, also know as the Watermelon Game.\nIt’s basically a Merge Game, similar to 2048, but with Kawaii fruits !\n\n\nThis is not your usual type of course. I wanted this one to be kind of like a LiveStream, so that you can “Enter in my head” and Learn about the thought process of an Professional Game Developer.\nThis means that you will learn how to Organize your ideas, create an MVP (Most Viable Product) of your game, and Improve on it.\n\n\nIt also means that we will have Bugs ! And I’ll show you how to Track These Down.\n\n\nYou will learn about Good OOP Practices (Object Oriented Programming), how, and when to use them.\n\n\nWe will also tackle a very important part of Game Dev, POLISH.\n\n\nI’ll show you how you can turn a simple 2D Game into an Addictive, Highly Satisfying Hyper Casual Game.\n\n\nWait, I did not talk about the interactive part of the course yet, did I ?\n\n\nWell, anytime you have an idea to improve the game, you can Leave a Review with the feature you want, and I’ll try and Implement it !\nIt can be anything reasonably possible of course, from Expanding the game map, Adding more fruits, Adding themes, More effects or whatever you can imagine.\n\n\nSo if you feel like this is something for you, Enroll Now, and Let’s Do This !",
      "target_audience": [
        "Anyone who wants to Start Making Mobile Games",
        "Avid Developers eager to Learn how to Polish their Game",
        "Hyper Casual / Hybrid Casual Game Developers",
        "Mobile Game Devs in General"
      ]
    },
    {
      "title": "Complete Unity 2018 - Coding Games in C#",
      "url": "https://www.udemy.com/course/complete-guide-to-making-2d-games-in-unity/",
      "bio": "Code and build your way to a finished 2D cross-platform game with a wide variety of core game development topics",
      "objectives": [
        "Build a 2D game with working physics, enemies, and projectiles",
        "Create triggers and events to make the game progress at the right time",
        "Work with sprite renderers to achieve appealing visual effects",
        "Save and load game data from and to files",
        "Manage player inventories with item pickups or powerups",
        "Loosely couple your scripts with dependency injection for better code management",
        "Run tests on your game without hitting play every time with the Unity Test Runner"
      ],
      "course_content": {
        "Basics of Unity 2018": [
          "Components vs GameObjects & How They Work Together",
          "Differences between Canvas GUI Elements and Gameplay Objects",
          "All UI Components Explained",
          "MonoBehaviours and Unity Lifecycle Hooks (Update, Start, Awake)"
        ],
        "Scriptable Objects (C#)": [
          "Scriptable Objects Introduction",
          "Random Color Changing - Simple Beginners C# Script",
          "Adding Timer to Random Color Change Script - Tracking deltaTime in Script",
          "Making Items in Scriptable Object Inventory System",
          "Nested Scriptable Objects & Adding Objects to MonoBehaviour Scripts in Inspector",
          "Creating Shops & Shop Inventory from ScriptableObjects"
        ],
        "Pixel Art Tools (Aseprite)": [
          "Aseprite vs Pyxel Edit - Pixel Art Tool Comparison",
          "Import and Create Custom Color Palettes"
        ],
        "2D Visuals inside of Unity Engine": [
          "Best Way to Import 2D Sprites & Pixel Art",
          "Control Sprite Rendering Order",
          "Create Shadows for 2D Game Sprite Images",
          "Baked Lighting for 2D Pixel Sprite Games",
          "Make a Simple 2D Tiled Background",
          "Hide Part of Sprite Animation with Sprite Mask"
        ],
        "Dynamic Rigidbody Movement": [
          "How to Move Left and Right with Input & Rigidbody 2D Forces",
          "Limit Run Speed Velocity Cap",
          "Jump Forces and How to Check If Player is Standing on Ground Collider"
        ],
        "2D Kinematic Movement": [
          "Collider.Cast - Best Easy Way to Check for Collision",
          "Eliminate Jitter by Clamping to Sprite Pixels"
        ],
        "Making Projectiles": [
          "Fireball: Setup for Spritesheet Animation",
          "Creating a Fireball Projectile with Movement, Collision, and Sound",
          "Projectile Physics Guide - Curved Path & Returning Projectiles Back",
          "Control Kinematic Object Movement with Animation Curves (The C# Class)"
        ],
        "Making UI Menus": [
          "Make a Main Menu Screen - Part 1 Setup",
          "Make a Main Menu Screen - Part 2 Coding Menu Buttons",
          "Make a Main Menu Screen - Part 3 Load Menu Popup, Close Menu Button",
          "Pause Menu with Prefabs & Singleton Menu Manager Script - Part 1 Setup",
          "Pause Menu Prefab & Menu Manager - Part 2 MonoBehaviour Manager Script",
          "Menu Prefabs & Manager - Part 3 Singleton System - Unity 2018 Tutorial",
          "Menu Prefabs & Manager - Part 4 Seperating Data from Singleton System",
          "Menu Prefabs & Manager - Part 5 Control UI Menus in Singleton System",
          "Customize GUI Positions in Options Menu"
        ],
        "Audio": [
          "Create Character Talking Blip Sound Effects in BFXR"
        ],
        "Events": [
          "Spawn Copies of Enemies or Projectiles at Mouse Cursor Point",
          "Actions on Event Triggers Script & Inspector",
          "Animated 2D Door Trigger with Example & Scripts"
        ]
      },
      "requirements": [
        "Unity 2018 or Above",
        "An image editing program like Photoshop, Pyxel Edit, or GIMP to create or edit your sprites in",
        "Knowing a little bit of programming and C# will help a lot"
      ],
      "description": "Learn the ins and outs of building 2D games in Unity 2018 from the ground up. We will cover working in the engine, GameObjects & Components in detail, many coding topics, and building art assets from a technical perspective.\nWe will start from basics and there will be example scripts for you to download, test, and use if you wish throughout many of the tutorials provided in the course.\nWith a focus on coding, I will be showing you advanced techniques such as Dependency Injection to make your scripts more loosely coupled and easier to make changes to later on and Unit testing through the Unity Test Runner.\nSeveral external tools will be covered as well to help you in creating your game (Pyxel Edit for Pixel Art, BFXR for Sound Effects, etc).\nHere are some of the Unity basics that will be covered in the course\nRigidbodies and 2D kinematic game physics\nAdding, using, and manipulating components on game objects\nWorkflows in Unity and learning how to work more efficiently\nManipulating audio sources for sound playback during events and animation\nAdding lighting to 2D sprite objects in the game engine.\nUsing the Unity Tilemapping Tools to Create Game Maps with easy collision setup\nStep A to Z in Creating Prefabs for your game like a Giant Animated Fireball\nHere are some of the coding topics covered in the course\nCollision checking for walls and event triggers\nUI Menus - How to create and navigate between menu using the UI components available inside of unity\nSaving and Loading Game Data to Permanent or Temporary Files on Any Platform\nOdin Inspector - a Premium addon that makes it easy to design inspectors for your scripts so designers can make changes to your game and also opens up serialization for important C# objects like Dictionaries.\nManaging character inventories including items and money\nRemembering the state of objects in the game when the player leaves and reenters a scene\nHow to Use Scriptable Objects - Storing important game data like settings in an asset file that you can easily edit with the Unity inspector\nCustom unity events and making outside scripts react to them\nEnemy and Projectile spawning scripts\nUnit Testing and Scene Testing with the Unity Test Runner\nDependency Injection with Zenject\nMusic Used: Beauty Flow by Kevin Macleod (CC-BY 4.0 License)",
      "target_audience": [
        "People who want to build their own games in a robust and extendable game engine",
        "Anyone who may know a little code, but wants to learn how to C# libraries specific to the Unity Engine",
        "Lovers of 2D Pixel Art Games",
        "C# learners or developers who want to follow good design practices like Dependency Injection and Unit Testing while building their games"
      ]
    },
    {
      "title": "Ultimate Game AI for Godot Beginners",
      "url": "https://www.udemy.com/course/ultimate-game-ai-for-godot-beginners/",
      "bio": "Your Own Game AI. From 0 to Hero",
      "objectives": [
        "What is a Game AI and how can it improve your game",
        "What are the main components of a Game AI",
        "How to implement different Game AI Systems",
        "How to put everything together in a Game Project"
      ],
      "course_content": {
        "Game AI - Introduction": [
          "Don't Skip This!",
          "What is Game AI and Why should You Care?",
          "Different Types of Game AI",
          "Decision Systems"
        ],
        "Understanding the Environment": [
          "Navigating the Game World",
          "Grids",
          "Graphs",
          "Navmesh"
        ],
        "Finite State Machines": [
          "General Concepts",
          "Implementing a FSM in Godot",
          "FSM Example in Godot"
        ],
        "From A to B - Pathfinding!": [
          "How Pathfinding actually works",
          "Anatomy of a Pathfinder",
          "Breadth First Search Example",
          "Godot's Navmesh"
        ],
        "Sensors": [
          "Sensing the Game World",
          "Implementing Range Detection",
          "Implementing Field of View",
          "Implementing Raycasts",
          "Implementing Hit Detection"
        ],
        "Downloadables": [
          "How to get the most out of the project (downloadables here)"
        ],
        "Full Game AI Project. Explained": [
          "Main Player Overview",
          "Tank Projectiles",
          "The Sensor Manager",
          "HP System",
          "AI Overview",
          "System / Tank Mover",
          "System / Waypoints",
          "System / Communication",
          "System / Target Handler",
          "System / Cover",
          "FSM / Patrol",
          "FSM / Retreat",
          "FSM / Attack"
        ],
        "Extra": [
          "GDScript Intro / Variables",
          "GDScript Intro / Operators",
          "GDScript Intro / Flow Control",
          "GDScript Intro / Functions",
          "Data Structures"
        ]
      },
      "requirements": [
        "Basic understanding of the Godot Engine. Lightweight or no programming skills."
      ],
      "description": "By the end of this course you will implement your own AI System.\n\n\nFind out the key components of a professional Game AI: Decision Making, Pathfinding and Compete & Collaborate.\n\n\nDecision Making\nRealtime decision making is one of the key components when creating a solid Game AI.\nThere are many ways to achieve this, be it either Finite State Machines, Behavior Trees, Planning.\nThe course focuses on Hierarchical Finite State Machines, an improvement over the original State Machines.\nHFSM are currently used in modern games like Doom 2016. They are easy to understand and powerful.\n---\nLearn how a Finite State Machine works and how to use a Hierarchical State Machine for your own game project.\n\n\nPathfinding\nOnce a decision is made, the AI Agent needs to move from A to B. Here is where pathfinding comes into play.\nIn these days, the pathfinding component is integrated in the game engine itself.\nIn the hands-on project we will make use of Godot's Navmesh System.\nThis course also focuses on teaching the core concepts of how a pathfinder works.\n---\nLearn how a pathfinder works and how to create one from 0.\nFind out how to use Godot's Navmesh in a Game AI project.\nDiscover how to create cover points and use them accordingly when picking a final destination.\n\n\nCompete & Collaborate\nThe last piece of the puzzle of a great AI is also in this course!\nHaving the AI Agents not only detect what's around them by using sensors but also communicate between is a must in modern games.\n---\nLearn how to implement range, field of view, raycast, hit detection and communication.\n\n\nFind out how to give unique personalities to your AI Agents for a superior game experience\n\n\nAI Personality: Aggressive\nMeet the Agressive AI! Made to seek & kill with a low chance of retreat, this is the perfect killing machine!\nIt's main features are a linear projectile, a range sensor combined with raycast and a low chance of retreat.\n---\nLearn how to put together an AI Agent that seeks to kill.\n\n\nAI Personality: Defensive\nCombining attacking with defense is another way to approach a fight. And this is how this AI operates.\nIts main features are rocket projectiles, range/raycast sensors and a 50-50% attack/retreat chance.\n---\nLearn how to put together a balanced AI Agent that not only seeks the target but also the nearest good cover.\n\n\nAI Personality: Tactical\nThis AI never attacks directly. By having a long range sensor and no raycast, once the enemy is detected a vantage point will be also determined.\nThe Tactical AI goes to cover, adjusts for missed hits and fires a long-range projectile.\n---\nLearn how to put together an AI Agent that uses long-range projectiles, adjusts for errors.\n\n\nFull Game AI Project Included\nYou will get not only the examples, but also a full project that features an AI System ready to be used in a game - yes, yours included!\nWhat you will be getting:\nRelevant examples for each implementation part\nFull modular project that you can explore and reuse for your game\nHierarchical Finite State Machines are used to implement the AI logic\nDocumented Source Code files in C#\n3 Types of AIs: Aggressive, Defensive and Tactical\n3 Projectile Types: Shell, Rocket and Mortar\n2 Types of Firing mode: Normal and Burst\n2 Patrol modes: Waypoints, Random Movement (interchangeable at runtime)\nAI Communication System - propagate information between agents\nFull Player Movement and Firing System\nGame Assets - Buildings, Tanks and props\nEverything properly organized in a tidy file structure, prefabs, modular components and more",
      "target_audience": [
        "Beginners with Artificial Intelligence in Godot"
      ]
    },
    {
      "title": "2D Platformer for Beginners in Unity : Master Game mechanics",
      "url": "https://www.udemy.com/course/2d-platformer-for-beginners-in-unity-master-game-mechanics/",
      "bio": "Mastering 2D Platformers in Unity: Game Mechanics, Visual Scripting, and Level Design for Beginners",
      "objectives": [
        "Understand Unity Basics",
        "Create Physics-Based Games",
        "Implement Procedural Level Generation",
        "Develop AI and Shooting Mechanics",
        "Build a Complete 2D Platformer",
        "Game Mechanics",
        "Unity Visual Scripting",
        "Level Design"
      ],
      "course_content": {
        "Introduction": [
          "Create project",
          "Unity interface"
        ],
        "Basic Programming": [
          "Variables",
          "Functions",
          "Methods",
          "Rigidbody",
          "Bodytypes",
          "OncollisionEnter",
          "If/else statements",
          "Moving objects"
        ],
        "Player": [
          "Adding player",
          "Setting up player",
          "Jumping",
          "Better jumping",
          "Changing directions",
          "Challenge",
          "Solution"
        ],
        "Animations": [
          "Basic animations",
          "Solution",
          "Player animations",
          "Animator controller"
        ],
        "Environment": [
          "Tilemap",
          "Creating environment",
          "Setting up environment",
          "Quick update",
          "Background"
        ],
        "Health": [
          "Setting up player health",
          "Damaging player",
          "Health UI",
          "Health system",
          "Immortality",
          "extra Immortality",
          "Visual effects",
          "Extra health"
        ],
        "Camera": [
          "Cinemachine"
        ],
        "Scoring system": [
          "Adding coins",
          "Scoring system",
          "Prefabs",
          "Solution",
          "Score UI"
        ],
        "Enemies": [
          "Adding enemy",
          "Enemy movement",
          "Solution",
          "Damaging player"
        ],
        "Player Shooting": [
          "Player Shooting",
          "Creating bullets",
          "Better shooting",
          "Fix shooting direction"
        ]
      },
      "requirements": [
        "Mac or PC capable of running Unity 3D"
      ],
      "description": "Learn to Create Stunning 2D Platformer Games in Unity with Game Mechanics, Visual Scripting, and Level Design\nAre you ready to start your game development journey? This course is perfect for complete beginners eager to create their first 2D platformer in Unity. No coding experience is required—Unity Visual Scripting allows you to bring your ideas to life with simple drag-and-drop tools!\nIn this course, you’ll learn the fundamentals of game mechanics that make platformers fun and engaging. From precise player movement to collectible items and enemies, you’ll create features that make your game stand out. Using Unity’s Visual Scripting, you’ll implement these mechanics without writing a single line of code.\nLevel design is key to crafting an unforgettable gaming experience. You’ll master the principles of level design, learning to create levels that are challenging yet enjoyable. We’ll guide you through the process of planning, prototyping, and polishing your levels to captivate players.\nBy the end of this course, you’ll have a complete, polished 2D platformer to showcase in your portfolio. You’ll also gain a solid foundation in Unity, game mechanics, and level design—ready to create more games in the future!\nWhether you’re an aspiring game developer or a hobbyist, this course makes learning Unity easy and fun. Enroll now and start building your dream 2D platformer today!\nWhat You Will Learn:\nHow to create a complete 2D platformer game in Unity from start to finish.\nThe basics of Unity Visual Scripting to build games without coding experience.\nEssential game mechanics for 2D platformers, including player movement, jumping, and more.\nLevel design fundamentals to create fun and engaging 2D levels.\nHow to add collectibles, enemies, and obstacles to enhance gameplay.\nTips for using Unity’s tools to build and optimize 2D environments.\nHow to design interactive elements using Unity Visual Scripting.\nStep-by-step guidance to polish and finalize a professional-quality game.\nTechniques for troubleshooting and fixing common Unity development issues.\nHow to prepare and showcase your 2D platformer game",
      "target_audience": [
        "Complete Beginners: This course is perfect for anyone who has never used Unity before and wants to learn 2D game development from scratch.",
        "Aspiring Game Developers: If you have a passion for games and want to turn your ideas into playable projects, this course will provide the essential skills and knowledge you need.",
        "Hobbyists and Enthusiasts: Whether you're a hobbyist looking to develop your first game or an enthusiast wanting to deepen your understanding of Unity, this course offers step-by-step guidance.",
        "Students and Educators: This course is suitable for students seeking practical experience in game development and educators looking for structured content to teach Unity in their classrooms.",
        "Students who want to learn game mechanics,level design and unity visual scripting"
      ]
    },
    {
      "title": "Houdini 18 - Procedural Prop Modeling - Skate Ramp",
      "url": "https://www.udemy.com/course/houdini-18-procedural-prop-modeling-skate-ramp/",
      "bio": "Create a Procedural Skate Ramp with Houdini 18, Mixer 2020, Unity and Unreal!",
      "objectives": [
        "Learn how to model Procedural Props with Houdini 18",
        "Learn how to use the Free 3D Painter, Mixer 2020",
        "Learn how to Bake Textures using Houdini 18",
        "Learn how to set up your Props in Unity and Unreal"
      ],
      "course_content": {
        "Getting Set Up!": [
          "Section Introduction",
          "Requirements for this Course",
          "Creating a Houdini Project",
          "Creating a Unity Project",
          "Creating an Unreal Project",
          "Section Conclusion"
        ],
        "Houdini Basics - User Interface": [
          "Section Introduction",
          "Houdini User Interface - Main Menu",
          "Houdini User Interface - Shelves",
          "Houdini User Interface - Scene View",
          "Houdini User Interface - Scene View Configurations",
          "Houdini User Interface - Toolbox",
          "Houdini User Interface - Operation Toolbar",
          "Houdini User Interface - Display Options",
          "Houdini User Interface - Network Editor",
          "Houdini User Interface - Parameter Editor",
          "Houdini User Interface - The Playbar",
          "Houdini User Interface - Cook Controls",
          "Houdini User Interface - Customizing your Desktop",
          "Installing the Side FX Labs Toolkit",
          "Creating Houdini Projects",
          "Houdini Contexts",
          "Section Conclusion"
        ],
        "Creating the Ramp": [
          "Section Introduction",
          "Building the Initial Ramp Angle",
          "Building the Ramp Geo",
          "Building the Coping",
          "Building the Deck",
          "Building the Railing",
          "Section Conclusion"
        ],
        "Exporting and Baking": [
          "Section Introduction",
          "Creating the High Resolution Mesh",
          "Assigning Color ID's",
          "Baking our Maps",
          "Exporting the Game Mesh",
          "Section Conclusion"
        ],
        "Texturing the Ramp": [
          "Section Introduction",
          "Getting Familiar with Mixer 2020",
          "Creating the Wood Layer",
          "Creating the Metal Layer",
          "Adding Decals",
          "Creating the Dust Layer",
          "Saving Smart Materials",
          "Exporting our Textures",
          "Section Conclusion"
        ],
        "Importing into Unity & Unreal": [
          "Section Introduction",
          "Import into Unity",
          "Import into Unreal",
          "Section Conclusion"
        ]
      },
      "requirements": [
        "Basic Knowledge of Houdini Interface",
        "Basic Knowledge of Unity or Unreal Interface",
        "Installed the Mixer 2020 Application"
      ],
      "description": "Throughout this mini course we will learn to build a procedural prop with Houdini 18 and look at a bunch of techniques that help us procedurally model and generate uvs. We then will wrap everything up into a Digital Asset so we can make unlimited variations of our Ramp model and prep them for texturing in Mixer 2020.\nOnce we bake and export everything out from Houdini, we will then learn how to use Mixer 2020 from the ground up. We will learn to create clean texture layers, place decals, and apply imperfections elements to our ramp model in Mixer 2020.\n\nOnce we are finished with our Ramp model we will then get it into Unity and Unreal and get it set up with materials and lighting.\nBy the end of the course you will have a solid understanding of modeling procedurally with Houdini 18 and how to use Mixer 2020 for texturing.",
      "target_audience": [
        "Beginner Houdini users who would like to learn more about Procedural Modeling",
        "Individuals who want to learn how to use Mixer 2020",
        "Artists who want to add Procedural Modeling to their Skill Sets"
      ]
    },
    {
      "title": "The Scratch Academy - Entry Level Computer Programming",
      "url": "https://www.udemy.com/course/scratch-beginner-to-scratch-expert/",
      "bio": "Give your yourself a head start - learn to code by starting with the basics!",
      "objectives": [
        "Create all types of 2D games including shooter, puzzle, animations, and much more.",
        "Gain the skills necessary to create anything you can imagine on Scratch",
        "Make it easier to learn more advanced languages in the future",
        "Get your projects noticed as soon as you publish them",
        "Discover a new way to unleash your creativity"
      ],
      "course_content": {
        "Who will be teaching this course?": [
          "Hey I'm Ben! This is how you know if this course is for you",
          "What can be created on Scratch?",
          "What value will this course provide?"
        ],
        "Here’s what you will take away from this course!": [
          "Not just another lecture.",
          "You will become the next big Scratcher!",
          "This is how Scratch will help you!",
          "The Most Important Part of the Course!"
        ],
        "[Important] You Have to Install Before Use!": [
          "Let’s Grab a Free Copy of our Own!",
          "Now Let’s Install Scratch!",
          "Congratulations, here’s what we’re doing next!"
        ],
        "Knowing How to use Scratch helps, here’s how!": [
          "Getting to know the user interface",
          "Creating your first Sprite",
          "Scripts, Costumes, and Sounds, a basic overview!"
        ],
        "Did you know I could make programming this simple?": [
          "The types of controls simplified!",
          "How to create your own scripts.",
          "This is how you know what you can put together.",
          "I want our kitty to move, so let’s make it move!",
          "Our cat has to tell us something, let’s help it speak!",
          "We made a cat, so we have to feed it!"
        ],
        "Okay the kitty is saved, now let’s save our game!": [
          "Here’s how to save your hard work."
        ],
        "Let's Share our Game with the World!": [
          "Saving your game on the Scratch Website",
          "Getting other people to play your game | Title and Description"
        ],
        "Congratz! You are now an Advanced Scratcher!!!!": [
          "Are you ready for more advanced Scratching?",
          "What can you do with your new skills?",
          "What to do next!",
          "I want to see what you can make!",
          "When you understand this, you are a true Scratch Expert!"
        ]
      },
      "requirements": [
        "You will need access to the Scratch editor + - I will guide you through download and installation.",
        "Have an open mind and be ready to have fun while learning!"
      ],
      "description": "The Mission:\nThis is the first time in history you can truly express yourself to thousands of others. The goal of this course is to turn you into an innovator. I will give them the tools necessary to put what is on their mind on the screen.\n\nHow?\nThe Scratch programming software was developed by a team at the Massachusetts Institute of Technology and has proven to be very effective for entry-level programmers. We will start by learning about the user interface. You will quickly build the confidence needed to start creating games by yourself!\nWhen?\nNow! You will go from loving and playing video games to loving and creating them! If you become a proficient programmer now they will create amazing things in the future! Technology will improve, let you improve with it.\n\nNever Stop Learning!\nI am always improving on this course! I add, revise, and optimize content constantly. To keep you updated, I make regular announcements on the awesome innovations I find on Scratch.\nScore!\nYou will have the ability to share your game with thousands of other like-minded individuals. Scratch is a community of people that are always looking to improve! If you enjoy building things, they will enjoy this community.  This is the future.\n\nI am excited to get started, see you soon!",
      "target_audience": [
        "Anyone can learn how to program a computer by using this course.",
        "Anyone new to programming and computer design.",
        "Anyone who is ready to unleash their creativity!"
      ]
    },
    {
      "title": "Master C# Scripting in 30 Days : C# Unity 6 Game Development",
      "url": "https://www.udemy.com/course/master-c-sharp-scripting-for-unity-in-30-days/",
      "bio": "Learn Something New Everyday for 30 Days , Master C# Scripting for Unity Game Development Step By Step ( Unity 6 )",
      "objectives": [
        "Master C# Scripting for Unity in 30 Days",
        "Learn Something New Everyday for 30 Days",
        "Learn C# from Absolute Basics",
        "Build 2D & 3D Games using C#",
        "Learn Object Oriented Programming Concepts",
        "Explore Unity 2D & 3D Programming Essentials",
        "Build 2D & 3D Endless Runner Games",
        "Learn Intermediate C# Scripting Concepts"
      ],
      "course_content": {
        "Day 0 : Introduction To This Course": [
          "What's Inside The Course",
          "Section Quiz"
        ],
        "Day 1 : Installing & Setting Up Unity 6 (2025)": [
          "Installing & Setting Up Unity 6 (2025)",
          "Installing & Setting Up Unity 2023",
          "Installing & Creating Your First Project with Unity 2022",
          "Fix Visual Studio Auto Completion Problem",
          "Set Unity Active Input Handling - Unity 6.1 (2025)",
          "Section Quiz"
        ],
        "Day 2 : Getting Started with C# in Unity 6": [
          "Creating Your First C# Script in Unity 6",
          "Writing Your First C# Code & Creating First Script",
          "Understanding The Structure of a C# Script in Detail",
          "Learning Variables & Datatypes in C#",
          "Section Quiz",
          "How To Solve Coding Exercises",
          "Your First Coding Exercise",
          "Project Files"
        ],
        "Day 3 : Taking Decisions and Condition Checking with C# in Unity": [
          "Getting Started with if else statements for Checking Conditions",
          "Working with Boolean Variables in C#",
          "Combining Multiple Conditions Together in C#",
          "If Else Practice",
          "Boolean variable & Condition Practice",
          "Section Quiz",
          "Project Files"
        ],
        "Day 4 : Learning All About Functions in C#": [
          "Creating and Calling Custom Functions in C#",
          "Creating Functions with Parameters and Return Types",
          "Functions, Parameters & Return Practice",
          "Project Files"
        ],
        "Day 5 : Learning About Loops in C# with Examples": [
          "Concept of loops and For loop Detailed Explanation",
          "While loop with detailed example",
          "Project Files"
        ],
        "Day 6 : Arrays in C# with Practical Examples": [
          "Getting Started with Arrays in C# & Unity",
          "Arrays with More Practical Examples",
          "Project Files"
        ],
        "Important Setting for the Upcoming Days": [
          "Set Unity Active Input Handling Settings - Unity 6.1"
        ],
        "Day 7 : Unity C# Scripting Quickstart Guide": [
          "Unity C# Quickstart - Part 1",
          "Unity C# Quickstart - Part 2",
          "Unity C# Quickstart - Part 3",
          "Project Files"
        ],
        "Day 8 : Unity C# Scripting Quickstart Guide Continued": [
          "Learning Foreach Loop , Array and Find with Tags",
          "Learning Coroutine , Invoke and Adding Delay",
          "Project Files"
        ]
      },
      "requirements": [
        "No Prior Programming Experience Required, You'll Learn C# from Scratch"
      ],
      "description": "Learn Something New Everyday for 30 Days Step By Step\nMaster C# Scripting for Unity Game Development in 30 Days\n\n\nList Of Things You Will Learn In This Course :\nLearn C# from Scratch\nBuild Your First 3D & 2D Games\nLearn Essential C# Scripting for Unity\nLearn Object Oriented Programming Concepts\nCreate 3D Character Controller\nBuild 2D Platformer Game Prototype\nLearn About Data Structures with C#\nMaster Vector Maths easily\nWork with Quaternions in Unity\nImplement Object Pooling using C#\nand More..\nI have taught Unity Game Development & C# Scripting to thousands of people on my Youtube Channel: Charger Games. I love teaching complex concepts in a simple way, so even if you have no previous coding experience, no need to worry, I'm gonna teach you everything step by step in the perfect order.\nLearn the basic concepts, tools, and functions that you will need to build fully functional Games with C# and the Unity game engine.\nBuild a strong foundation in Unity Game Development with this course.\nLearn to Implement 2D & 3D Game features using C#\nBuild Fully functional Games with Unity\nLearn Basics of C# Programming\nMaster Essential C# for Unity Game Development\nLearn to build Android Games in Unity\nUse skills learned from this course in any Unity project\nA Powerful Skill at Your Fingertips  Learning the fundamentals of Unity 2D & 3D Game Development puts a powerful and very useful tool at your fingertips. Unity is free, easy to learn, has excellent documentation, and is the game engine used for building games.\nJobs in unity game development are plentiful, and being able to learn C# Scripting along with Unity game development will give you a strong background to more easily build awesome games.\nContent and Overview  Suitable for beginning programmers, through this course of 100+ lectures and 20+ hours of content, you’ll learn C# Scripting for Unity Game Develoment . You can use these skills in any of your Unity projects later on.\nStarting with the installation of the Unity , Visual Studio , this course will take you through the process of learning c# scripting for game development with unity.\nYou will learn C# from scratch, so even if you are an aboslute beginner programmer, you can learn C# programming from basics step by step.\nWith these basics mastered, the course will take you through building different example mini projects with unity to learn more about the process of creating games with Unity.\nStudents completing the course will have the knowledge to create fully functional Games with Unity and C# or use their C# skills to Build any other useful thing that they want.\nComplete with working files, you’ll be able to work alongside the author as you work through each concept, and will receive a verifiable certificate of completion upon finishing the course\n\n\nCredits:\nArt Assets Taken From:\nKenny, gameart2d, gamedeveloperstudio, freepik, flaticon",
      "target_audience": [
        "Anyone willing to Master C# Scripting in 30 Days",
        "Programmers looking to Get Started with C# by Building Games with Unity",
        "Unity Developers wishing to Brush up their C# Skills with Multiple Projects"
      ]
    },
    {
      "title": "How to create a Flappy Bird inspired iPhone game in Swift 2",
      "url": "https://www.udemy.com/course/how-to-create-a-flappy-birds-inspired-iphone-game-with-swift/",
      "bio": "See how I create a socially integrated and monetized game. Everything you need to create an immersive game using Swift 2",
      "objectives": [
        "Create a Flappy Bird inspired iPhone game in swift 2",
        "Learn how to program an iPhone game with Swift 2",
        "Learn the Xcode 7 environment",
        "A complete and working iPhone game that is monetised and socially integrated.",
        "After taking this course you will be confident enough to start creating your very own iPhone game.",
        "The skills you will attain from taking this course will be valuable and viable for years to come.",
        "Learn how to use Apple's SpriteKit framework",
        "Learn how to use Apple's AVFoundation framework",
        "Learn how to use Apple's Social framework",
        "Learn how to use Apple's Accounts framework",
        "Learn about GameViewControllers and SKScenes",
        "Learn how to integrate an iPhone game with Facebook",
        "Learn how to integrate Chartboost Ads into an iPhone game",
        "Learn about storing data on the iPhone with NSUserDefaults",
        "We will learn how to connect our game up to a Game Center Leaderboard",
        "We will learn how to save the user's high score to NSUserDefaults so the score will not be lost if the game is closed and re-opened.",
        "We will learn how to update a third party SDK framework in your project, we will use the Chartboost SDK as an example.",
        "Learn how to integrate an iPhone game with Twitter"
      ],
      "course_content": {},
      "requirements": [
        "MAC OSX",
        "Xcode 7",
        "Beginner level of programming knowledge",
        "Or no programming knowledge",
        "To complete the Game Center Leaderboard part of this course (section 9). You will need to have an Apple Developer Account."
      ],
      "description": "LATEST UPDATE: Integrating our iPhone game with Twitter\n\nPREVIOUS UPDATE: Saving the user's High score to local storage using NSUserDefault and updating a third party SDK in your project (Chartboost SDK).\nThe “How to create iPhone Flappy Birds inspired iPhone game with Swift” Course is a comprehensive step by step course. You will learn how to put a modern, socially integrated and monetised iPhone game together. The inspiration for the course comes from the world famous game Flappy Birds. Let me be very clear on my next point. The concepts you will learn in this course can be applied to any idea you have for an iPhone game.\nIn the 40 lectures and over 7 hours of content, we will start by covering off all the basis to get you going. We will install Xcode and run through the basics of the Xcode environment. We will then moving on quickly to start building the scenes and background to our game. After that we will build the pipes and the main character. Not long after that we will look at introducing physics properties to our game objects. Now are our game is starting to take shape. We can them look at how our user is going to score in the game. Once that is all done we will introduce Chartboost ads to monetise our game. Then we will integrate our game with two the biggest and best social media networks… Facebook and Twitter. We will also connect our game up to a Game Center Leaderboard to track our users high scores.\nOnce we have complete all of that I will finish off on talking the next steps I think you should take...\nI’ve done all the research, read the Swift documentation, searched the web for how to perform certain functions in an iOS game and put all the ideas and concepts into one complete package. There is no need to look any further: This course is a one stop shop to get you started in building your own unique iPhone game.\n\nThis course will continue to grow and be updated with new trends and to accommodate for new software version updates.",
      "target_audience": [
        "Do you want to develop an iPhone game but you're just not sure where to start?",
        "Have you already started to create a game and need some help?",
        "Do you find yourself trawling the internet for hours but you just can’t find the solution you are looking for?",
        "People who want to make money from building their own iPhone game",
        "This course has been designed for someone with a beginner or intermediate level of programming knowledge."
      ]
    },
    {
      "title": "Unity 5 Host Your Game Server Online like a PRO",
      "url": "https://www.udemy.com/course/unity-5-host-your-game-server-online-like-a-pro/",
      "bio": "step by step video guide with complete Unity project to help you master the process of hosting online game servers",
      "objectives": [
        "Host your unity game server online",
        "Be able to connect game clients to your main server",
        "know how to connect and disconnect players",
        "have a professional understanding of online multiplayer."
      ],
      "course_content": {},
      "requirements": [
        "basic use of Unity",
        "have Unity Editor installed",
        "works for Mac, Linux, and Windows"
      ],
      "description": "Important: all software used are FREE to download and use on PC, LINUX and MAC computers (no need to pay, cheers!)\nBy taking this course, you will learn how to host multiplayer game servers online.\nNowadays, the majority of games need an online server where players get to connect to to be able to interact with eachother.\nAll the top video games we all play have online servers, to name a few, games like Pokemon Go, MineCraft or Battlefield, all uses online servers to connect people together and allow them to fight eachother, chat, and explore the world together.\nI believe the best way to learn is by doing it yourself and that's why by joining this course, I offer you the full source code of a multiplayer game made with Unity, free of charge, that you will get to transform it into an online game server.\nIn fact you can play the game right now which connects to the game server, just go to my AppsFresh website\nThe skills you'll learn in this course are great to add to your skillset, as it can be applied to so many projects, whether you'll work on video games or applications.\nJoin the course now, you've got nothing to lose because if i don't deliver, you'll get a full refund. I'll see you in the videos lectures and in the course forum.",
      "target_audience": [
        "people using Unity",
        "MMO fans",
        "gamers",
        "computer science students",
        "developers"
      ]
    },
    {
      "title": "Unity Mobile Game - Master Hyper Casual Word Game Mechanics!",
      "url": "https://www.udemy.com/course/word-finder/",
      "bio": "Learn, Create, Prototype a cool Hyper Casual Word Mobile Game from scratch!",
      "objectives": [
        "Make a Sweet Word Game",
        "How to setup your project for mobile",
        "Automate Word Search",
        "Create a Logic for your Game"
      ],
      "course_content": {
        "Introduction": [
          "Project Setup"
        ],
        "The Keyboard": [
          "Keyboard Canvas",
          "Key Prefab & Lines",
          "KeyboardKey Script",
          "KeyboardKey Event"
        ],
        "The Word Containers": [
          "The First Letter Container",
          "Word Containers Objects",
          "WordContainer Script"
        ],
        "The Core": [
          "The Input Manager",
          "Receiving events from the Keyboard Keys",
          "The Word Manager",
          "Automatic Word Checking",
          "The Try Button",
          "The Backspace Key",
          "Bug Fixing"
        ],
        "First Graphics Improvements": [
          "Small Graphics Improvements",
          "Coloring the Letter Container",
          "Coloring the Keyboard",
          "Fixing the Keyboard Colors"
        ],
        "Creating The User Interface": [
          "Creating The Game Manager",
          "Adding The Game Panel",
          "Making The Level Complete Panel",
          "Creating The UI Manager",
          "Showing The Level Complete",
          "Saving Our Data",
          "Updating The Level Complete",
          "Increasing The Player Score",
          "Perfecting The Core Loop",
          "Adding The Gameover Panel",
          "Adding The Gameover Logic"
        ],
        "Helping The Player": [
          "Creating The Hint Manager",
          "Adding The Keyboard Hint",
          "Adding The Letter Hint",
          "Improving The Letter Hint",
          "Getting The Secret Word From A Dictionnary"
        ],
        "Adding More User Interface Elements": [
          "Adding The Menu Panel",
          "Creating The Menu Logic",
          "Resetting Everything",
          "Adding The Hint Prices",
          "Creating A Background Shader",
          "Improving The Overall Look With Icons"
        ],
        "Adding Some Settings": [
          "Creating The Settings Panel",
          "Showing / Hiding The Settings Panel",
          "Creating The Settings Manager",
          "Adding Vibrations To Our Game",
          "Adding Sounds To Our Game",
          "Adding Even More Sounds"
        ],
        "Congratz !": [
          "Congratulations !"
        ]
      },
      "requirements": [
        "A Computer with an internet connexion",
        "Some basic Unity knowledge is appreciated but not compulsory",
        "The will to understand and finish your game"
      ],
      "description": "Wordle took the world by storm, in less than 3 months, people started to talk about it everywhere. Youtube, The news, and especially, the app stores.\nThe game has made more than $3 million dollars, and has been downloaded more than 19 million times. Amazing !\nI had to make a course on this game, so let’s explore behind the scenes of this game, and see how it could’ve been made.\n\n\nIn this course, You will learn how to\nCreate a Keyboard Input\nAdd the Word Containers to display the word entered by the player\nManage the Player Input\nChecking the word entered with some simple algorithms\nSmash Bugs !\nColorize the Letters\nColorize the keyboard\nSet the Secret Word From a Large Dictionnary\nAdd a Keyboard Hint System\nAnd a Letter Hint System\nAnd More ! [ Including a Shader Graph mini Lesson ]\n\n\nThis is just a small sneak peek of the content of this course !\n\nPlus, if you have already taken my previous course, this one will be a breeze !\nFor the new ones of you, everything is explained step by step for you to understand.\n\n\nIf you want to make a word game, this course is for you ! We’ll explore all of these points step by step so that you don’t miss anything.\nThe course if full of checkpoint packages that you can download, and if it’s not enough, I’ll be here to help you understand each and every step of this course =D\n\n\nSo don’t wait anymore, Enroll Now !",
      "target_audience": [
        "Humans eager to learn how to make their own mobile game from scratch",
        "Humans eager to create something they can share with their family and friends",
        "Humans eager to make Game Dev a Full Time Job"
      ]
    },
    {
      "title": "Unity for NON-CODERS - Learn 2d and 2.5d Game development",
      "url": "https://www.udemy.com/course/unity-for-non-coders-2d/",
      "bio": "Learn to create games in Unity without the steep learning curve when learning to code",
      "objectives": [
        "Make a 2d game in Unity without coding",
        "Make a 2.5d game in Unity without coding"
      ],
      "course_content": {
        "Space shooter project": [
          "Download and install Unity",
          "Setup Unity project and Asset store",
          "Unity UI - Hiearchy, Inspector and Layout windows",
          "Unity UI - Scene, Game and Project windows",
          "Create the Background",
          "Create the Player",
          "Add camera movement",
          "Add Asteroid obstacles",
          "Make Asteroid Prefab variations",
          "Make a win condition",
          "Create an enemy",
          "Add the ability to shoot",
          "Create explosions for the enemies",
          "Add sound effects",
          "Add enemy lasers",
          "Add animation to the player and enemies",
          "Make Level 2",
          "Make a build of the game",
          "Add a start scene to the game",
          "Add animation to the start screen",
          "Add parallax and final touches",
          "Make a 3d player",
          "Make 3d asteroids",
          "Make 3d enemies",
          "Make particle explosion",
          "Make particle explosion part 2",
          "Add a particle Asteroid field",
          "Make final adjustments to Level 1",
          "Make final adjustments to Level 2",
          "Compile final build",
          "Congratulations! - What to learn from here"
        ]
      },
      "requirements": [
        "Unity 2017.3.1"
      ],
      "description": "Have you ever wanted to make a game in the Unity game engine, but found the coding learning curve too steep?\nThis is the course for you! I have designed this course for complete beginners to Unity and game development. We will make a space shooter game from scratch without any coding! Instead we will use modular components which will add the functionality that we need. You will learn fundamentals like the 2d physics system, shaders, lighting and particles FX that can be applied to making your own games. Sign up today and lets make a game!",
      "target_audience": [
        "Anyone who wants to learn 2d game development using Unity without coding"
      ]
    },
    {
      "title": "Unreal Engine 5: Creating Main Menu",
      "url": "https://www.udemy.com/course/unreal-engine-widget-blueprint/",
      "bio": "Create Optimized and Professional Menus with Widget Blueprints from scratch (Beginner to Advanced).",
      "objectives": [
        "Fundamentals for creating Professional and game-ready Main Menus.",
        "UI Animation for Beginners: Hover Buttons, Dialog Boxes and more.",
        "Optimization techniques and best practices that are not shown on Youtube!",
        "Responsive UI for all devices: Mobile/Tablet/PC/Laptop/TV.",
        "Nesting Widgets (in depth explanations).",
        "Import and play Videos and Background Music in game.",
        "Change the Video Settings in game.",
        "Animated Logo Splash Screen.",
        "Game Intro with Video and a Skip Button.",
        "Custom Events, Functions, Variables, Timers."
      ],
      "course_content": {
        "Introduction and Setup": [
          "Introduction",
          "Getting Started: Project Setup",
          "Download Free Assets",
          "Reducing Image Size (Compressing)",
          "Converting MP3 to WAV Files",
          "Assets Import and Folder Structure"
        ],
        "Widget Blueprint Fundamentals": [
          "Our First Widget Blueprint",
          "Fundamentals: Text,Buttons,Layers",
          "Fundamentals: Images",
          "Fundamentals: Progress Bar",
          "QUIZ",
          "Fundamentals: Horizontal/Vertical Box",
          "Fundamentals: Spacers",
          "Fundamentals: Scroll Box",
          "Fundamentals: Overlay",
          "Fundamentals: Widget Switcher",
          "Fundamentals: Nesting",
          "Responsive UI and Anchors"
        ],
        "UI Optimization (HIGHLY IMPORTANT)": [
          "Avoid using Canvas Panel !",
          "Optimizing the UI elements",
          "Replacing the Canvas Panel",
          "Practical Mini-Assignment",
          "Practical Assignment (Solution)",
          "Quiz"
        ],
        "Creating Main Menu (Programming/Design)": [
          "Main Menu Buttons (Design)",
          "Main Menu Buttons Variations",
          "Start Game Button (Programming)",
          "Quiz",
          "Mini Assignment",
          "Exit Game Button (Programming)",
          "Making the \"Settings\" Screen (Design)",
          "Making the \"Settings\" Screen (Programming)",
          "Enable/Disable Buttons (Functions)",
          "Making the \"Credits\" Screen",
          "Making the \"Level Select\" (Design)",
          "Making the \"Level Select\" (Programming)",
          "Import And Play Videos",
          "Replace Existing Video",
          "Practical Task",
          "Polishing Main Menu (Design)",
          "Polishing Main Menu (Programming)",
          "\"Quit Game\" Dialog Box",
          "Animating Buttons (Basics)",
          "\"Level Select\" Dialog Box (Animated)"
        ],
        "Creating Splash Screen + Loading Screen": [
          "Splash Screen",
          "Game Intro",
          "Game Intro (Skippable)",
          "Game Intro Background Music",
          "Start Game with \"Intro\" or Loading Screen",
          "Loading Screen (Progress Bar)",
          "Blueprints cleanup and bug fix",
          "Final Lecture (summarise)"
        ],
        "Bonus Lecture": [
          "Continue your Gamedev Journey"
        ]
      },
      "requirements": [
        "No programming knowledge is required, you will learn how to create Menus from scratch.",
        "You must have installed Unreal Engine 4 or 5 (we will start working immediately).",
        "Basic Viewport navigation in Unreal Engine would be beneficial."
      ],
      "description": "In this course you will learn how to create Main Menus for your games, using Unreal Engine 4/5.\nThe Menus you are going to create will be fully responsive for EVERY screen size, such as: Mobile/Tablet/PC/Laptop/TV.\nThis means, the Menus you are going to create will look beautiful and organized on every device.\n\n\nWhy this Course is special:\nYou can use any versions of Unreal, from UE4, UE5 and newer\nYou will learn Optimization techniques and best practices that are not shown on Youtube\nLearn how Canvas Panels are used everywhere, but it should be avoided\nThis Course is for very Beginners and Advanced users\nWe are gradually increasing the complexity as we progress\nEach and every lesson explained in great detail, in easy to follow and understandable way\nThe goal for this Course is to ensure that you'll understand each and every UI element and Blueprint we do\n\n\nBy the end of this Course, you will master the following and more:\nWidget Blueprint Fundamentals:\nDesign captivating, highly optimized, professional and production-ready Menus.\nBlueprint Programming:\nNavigate through screens, change Video Settings, UI animation, Loading screens and more.\nBlueprints best practices and optimization:\nWhat can cause unnecessary draw calls and impact performance\nHow to optimize UI elements to improve performance\nHow to avoid using Canvas Panel and what you should use instead\nClean, tidy and organized Blueprints for readability and performance\nWe are going to start from the very beginning with the design first, by learning the most important UI elements:\nLayer hierarchy\nLearn why you should never use Canvas Panel\nText\nButton\nImage\nProgress Bar\nHorizontal Box\nVertical Box\nSpacer\nScroll Box\nOverlay (most important)\nWidget Switcher\nNesting\nResponsive UI and Anchors\nNext, we are going to learn Blueprints programming, slow paced and well explained:\nButtons: Hover/Unhover, Click Events, SFX and more\nNavigating from one screen to another, BACK Buttons etc\nPlay videos and set to Loop or not\nAdd background music, Mute/Unmute functionality\nUI animation for beginners\nCreate new Levels and open them\nApplying best game settings\nand much more!",
      "target_audience": [
        "If you want to learn how to create professional Menus from scratch in Unreal 4/5, this is the Course for you.",
        "Beginners, Intermediate and Advanced Students will all benefit from this course.",
        "Students who want to learn how to Optimize their User Interface (UI).",
        "Are you switching from Unity , Godot or other Engine to Unreal? This is the Course for you."
      ]
    },
    {
      "title": "Unity + NoSQL DynamoDB Player Management Leaderboards + More",
      "url": "https://www.udemy.com/course/unity-nosql-dynamodb-player-management-leaderboards-more/",
      "bio": "Allow Players to Sign in, track their scores and build a leaderboard for players around the world with an NoSQL database",
      "objectives": [
        "Unity",
        "AWS",
        "DynamoDB",
        "Unity Databasing",
        "Unity Web Requests",
        "Unity Player Management",
        "Unity Leadboards",
        "Unity Sign In Users",
        "Game Databasing",
        "Game Dev",
        "NoSQL"
      ],
      "course_content": {
        "Introduction": [
          "Introduction and About this Course",
          "Meet Your Instructor / My Teaching Methodolgy",
          "Is this Course Right for You? More Course Details",
          "Video Speed"
        ],
        "AWS and DynamoDB Basics": [
          "Into To AWS",
          "Case Studies",
          "Making an AWS Account + Basic Security",
          "AWS Regions",
          "Making Our First DynamoDB Table",
          "DynamoDB Table Settings",
          "Inserting Information Into Our Table"
        ],
        "AWS Lambda Basics": [
          "Lambda Introduction",
          "Building Our First Lambda Function",
          "Taking In Information to Use in Our Lambda Function",
          "Basic If Statements for Lambda Functions",
          "Deploying Our Lambda Function to an API Gateway"
        ],
        "Unity Networking Basics": [
          "Unity Networking Basics",
          "Interacting with Our Lambda Function From Unity",
          "JSON Overview",
          "Sending JSON information to our Lambda Function From Unity"
        ],
        "Basic App Set Up": [
          "App Welcome Scene Set Up",
          "Create New User Scene UI Set Up",
          "Create New User Front End Scripting",
          "Create New User Lambda Script Creation",
          "Check If Email Already Exists",
          "GSI Set Up For Username",
          "Check If Username already Exists Lambda Script",
          "Username Hook Up In Create New User Lambda Functionality",
          "Adding Password Element to Our Create New User Script",
          "Hashing User Passwords",
          "Front End Create User Hook Up",
          "Front Error Codes Create User",
          "API Key Set Up"
        ],
        "Player Log in / Log Out": [
          "Log In Scene UI Set Up",
          "Lambda Login Function",
          "Removing Info From Response",
          "Deploying Login Lambda Function to API Gateway",
          "Front End Login Hook Up Part 1",
          "Front End Login Hook Up Part 2",
          "Front End Login Hook Up Part 3",
          "New User Sign Up + Auto Login",
          "Player Log Out"
        ],
        "User Welcome Scene Set Up / Saving User Info To The Cloud": [
          "User Welcome Scene Set Up",
          "Game Scene Set Up",
          "Game Scene Button Set Up",
          "Building Update Lambda Function",
          "Front End Update Scripting",
          "Customize Scene Set Up",
          "Front End Ninja Color Scripting Part 1",
          "Front End Ninja Color Scripting Part 2",
          "Ninja Color Save to Database",
          "Assigning Ninja Color from database to the Player At Runtime",
          "Inventory UI Set Up Part 1",
          "Inventory UI Set Up Part 2",
          "Inventory Front End Scripting",
          "Lambda Script for Adding to Players Inventory",
          "Front End Inventory Hook Up Part 1",
          "Front End Inventory Hook Up Part 2"
        ],
        "Guest Feature Set Up": [
          "Guest Feature Scene Set Up",
          "Guest Feature Storing Info In Database",
          "Guest Feature Saving Info In Playerprefs."
        ],
        "Leader Board Set Up": [
          "Leaderboard Scene Set Up",
          "Leaderboard Player Prefab",
          "Leaderboard Front End Scripting",
          "Leaderboard Player Prefab Script",
          "Lambda Leaderboard Script",
          "Instantiating Leaderboard Player Prefabs at Run time",
          "Details Panel Set Up",
          "Lambda Script for Getting Details About Player",
          "Front End Details Hook Up",
          "Search Function Lambda Script",
          "Search Function Hook Up"
        ],
        "Conclusion And Thank You!": [
          "Conclusion and Where to Go From here",
          "Thank you!"
        ]
      },
      "requirements": [
        "Basic Unity"
      ],
      "description": "Take your games to the next level with this course!! Connect your Unity project with a backend database! There is so much that you can do with the information that you will learn from this course. You can track players scores, allow users to sign in and sign out, build a leaderboard of players and connect them from around the world!\nTopic Covered:\nUnity\nUnity Networking / Webrequests\nUnity Database\nUnity Player Management\nNoSQL Database\nLambda\nAPI\nNodeJS\nUnity UI Work\nUnity Leaderboards\nDatabase Security\nPassword Security\nWorking with JSON\nAND SO MUCH MORE!!\nSo come along for the ride and take your Unity projects to a whole new level!!!\n\n\n--Austin Patkos (eJPT, CCP, SAA, DVA, SOA, BCCe) has taught over 30,000 students on Udemy. He is passionate not only about tech but about teaching tech too. Knowing that remembering information isn't enough, you have to have a deeper understanding to be able to retain all of the information. He teaches in a manner that is sure to help you develop your skills and take you to the next level as a developer. He teaches a careful balance of giving enough information but also taking time to practice it too. Austin has developed these courses to teach people just like how to become better developers.",
      "target_audience": [
        "Unity Developers",
        "Game Devs"
      ]
    },
    {
      "title": "Unity Tutorial: Asteroids 3D",
      "url": "https://www.udemy.com/course/unity-tutorial-asteroids-3d/",
      "bio": "Learn how to create an Asteroids 3D Spacer Shooter Game in Unity.",
      "objectives": [
        "You will have a complete Game like the Asteroids in 3D like in the 1970's.",
        "You will learn basic coding in C#. (coroutines, enum, transforms, keyboard inputs....)"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "The Playfield & The Player": [
          "Import Assets, Camera and Playfield setup",
          "Player Movement #1",
          "Player Movement #2",
          "Wrapping Objects in the Playfield"
        ],
        "Bullets": [
          "Shooting Bullets #1",
          "Shooting Bullets #2"
        ],
        "Asteroids": [
          "Spawning Asteroids #1",
          "Spawning Asteroids #2",
          "Spawning Asteroids #3",
          "Spawning Asteroids #4",
          "Spawning Asteroids #5",
          "Spawning Asteroids #6",
          "Asteroid Explosions"
        ],
        "Scene Updates": [
          "Playfield Clean Up",
          "Starfield"
        ],
        "GameManager": [
          "Game Manger #1 - Asteroid Amount",
          "Game Manager #2 - Score",
          "Game Manager #3 - Win Condition",
          "Game Manager #4 - Increment Levels & Asteroids",
          "Game Manager #5 - Lose Condition",
          "Game Manager #6 - No Velocity"
        ],
        "User Interface & Visuals": [
          "User Interface #1 - Canvas",
          "User Interface #2 - UI Manager",
          "Game Over Scene #1 - The Scene",
          "Game Over Scene #2 - Scoreholder",
          "Disable Shooting when Dead Fix"
        ],
        "Ufo Enemy": [
          "Ufo Setup #1 - Variables",
          "Ufo Setup #2 - Move & Shoot",
          "Ufo Setup #3 - Collisions",
          "Ufo Setup #4 - Final Setup",
          "Ufo Setup #5 - Spawn Ufos",
          "Ufo Setup #6 - Bullet Damage to Player"
        ],
        "Menu Navigation & Final Setups": [
          "Menu Scene & Navigation",
          "Extra Lifes",
          "Reset on Restart",
          "Final Touches"
        ]
      },
      "requirements": [
        "You need Unity 4.6 + since we will make use of the Canvas System.",
        "Some basic knowledge in Unity & C# is always helpful especially when it comes to debugging.",
        "For menus and possible graphics, any graphics program knowledge is always helpful."
      ],
      "description": "Create Your Own Asteroids 3D Space Shooter Game with Unity\nAre you ready to embark on an exciting journey into game development? This Unity video course will guide you through the process of creating your very own Asteroids 3D Space Shooter Top Down Game using the powerful Unity Game Engine. From setting up the game environment to implementing advanced game functionalities, you'll learn everything you need to know to bring your game vision to life.\nCourse Highlights:\nUnity Game Engine Mastery\nIn this course, you'll delve deep into the Unity Game Engine, learning how to harness its full potential to create a stunning and functional 3D space shooter game. Here's what you can expect:\nComplete Unity Setup: Learn to create the entire game process within Unity, ensuring you have everything you need to get started.\nPlayfield Configuration: Discover how to set up the playfield and effectively organize the Hierarchy for optimal game performance.\nCanvas System for Graphics and Score: Utilize Unity's Canvas System to design and implement game graphics and scoring systems, requiring Unity version 4.6+.\nMastering C# Programming\nC# is a versatile and powerful language, and in this course, you'll use it extensively to add functionality to your game:\nScript Writing with Monodevelop or Visual Studio: Whether you prefer Monodevelop or Visual Studio, you'll learn to write effective C# code to bring your game mechanics to life.\nKeyboard Input Implementation: Implement keyboard controls to steer your spaceship, providing an engaging and responsive gaming experience.\nAsteroid Wrapping System: Create a dynamic \"wrapping\" system to keep asteroids in play, ensuring a continuous and challenging gameplay environment.\nUFO Enemy AI: Develop simple yet effective AI for UFO enemies, adding an extra layer of challenge and excitement to your game.\nCourse Outcomes:\nBy the end of this comprehensive course, you'll have a fully functional 3D Space Shooter Game inspired by the classic Asteroids game. You'll not only understand how to create this specific game but also gain the skills and confidence to customize and optimize it, transforming it into a unique shooter game in any style you desire.\nAdditional Information:\nLevel: Intermediate\nVideo Course Length: Approximately 3.5 hours\nUnity Version Required: 4.6+\nWhy Enroll in This Course?\nHands-On Learning: Engage in practical, hands-on tutorials that make complex concepts easy to grasp.\nExperienced Instructor: Learn from an expert with years of experience in Unity and game development.\nFlexible Learning: Access course materials anytime, anywhere, and learn at your own pace.\nStart Your Game Development Journey Today!\nUnlock your potential as a game developer and bring your creative ideas to life. Enroll in this course now and take the first step towards creating amazing 3D games with Unity.",
      "target_audience": [
        "Beginners in Unity which are interested into making games.",
        "If you want to get at least any Game done you can start here."
      ]
    },
    {
      "title": "Unreal Engine 5: RTS game (Real Time Strategy)",
      "url": "https://www.udemy.com/course/unreal-engine-5-rts-game-real-time-strategy/",
      "bio": "UE5: Mini resource game in RTS style, AI workers, Building placement, Resources, advance data management, collisions",
      "objectives": [
        "Master Unreal Engine 5's Blueprint system to create reusable and modular game logic.",
        "Learn how to design dynamic UIs using widgets and event-driven updates.",
        "Understand the fundamentals of AI systems and character control in Unreal Engine 5.",
        "Gain expertise in working with meshes, animations, and data tables to manage game assets efficiently."
      ],
      "course_content": {
        "Setting up project": [
          "Final game",
          "Creating new project",
          "Camera Pawn",
          "Player controller",
          "Move vertically",
          "Move horizontally",
          "Camera zoom"
        ],
        "UI setup": [
          "Landscape material",
          "Build widget",
          "Toggling widget",
          "Animate widget",
          "Building button",
          "Building list",
          "Dynamic buttons",
          "Buttons info"
        ],
        "Buildings": [
          "Import building meshes",
          "Building actor",
          "Building clicked",
          "Spawning building",
          "Collisions",
          "Moving building",
          "Releasing building",
          "Overlapping materials",
          "Overlapping building",
          "Restoring original material",
          "Construction progress",
          "Update Progress",
          "Finish construction",
          "Adding sounds"
        ],
        "Resources": [
          "Resource type",
          "Building cost",
          "Styling Menu",
          "Game instance",
          "HUD",
          "Resources in HUD",
          "Checking resources",
          "Show affordability",
          "Alter resources",
          "Update resource",
          "Resource actor",
          "Interface",
          "Child resources"
        ],
        "Workers": [
          "Import skeletal mesh",
          "Spawn worker",
          "Setting up AI",
          "Move character with AI",
          "AI sequence",
          "Import animations",
          "Worker state",
          "State sequence",
          "Find nearest resource",
          "AI Task",
          "NavMesh",
          "Animation instance",
          "State machine",
          "Collecting state",
          "Attach worker's tool",
          "Chop",
          "Collecting resource fix",
          "Worker's home",
          "Returning home",
          "Worker resource type",
          "Collecting resources",
          "Hide and Show components",
          "Tool and home fixes"
        ],
        "Manual control": [
          "Selecting worker",
          "Selected workers",
          "Change worker targets"
        ]
      },
      "requirements": [
        "No previous experience is needed but helpful to know basics of Unreal Engine",
        "Computer capable of running Unreal Engine 5"
      ],
      "description": "In this tutorial, I’ll show you how to build a Smart RTS Game in Unreal Engine 5, covering everything from core gameplay systems to advanced mechanics. Here's what you'll learn:\nCamera Setup: Configure a top-down camera, add zoom functionality, and implement smooth camera movement.\nControls: Set up input to control the game, placing buildings and controlling workers.\nResource Management: Create a system for tracking and managing in-game resources efficiently with Game Instance, Game mode, Player controller, etc.\nTrace Channels and Collisions: Set up custom collision and trace channels for precise game interactions.\nWidgets & UI Updates: Build a dynamic UI with widgets and learn how to update elements based on game events.\nBlueprints with Inheritance: Use inheritance to create reusable and modular logic in your Blueprints.\nData Tables: Organize and manage game data efficiently using Unreal Engine’s data table system.\nStatic & Skeletal Meshes: Work with assets to bring objects and characters into your game world.\nAnimations: Add movement and life to your characters with animations.\nInterfaces: Implement interfaces for communication between different game elements.\nAI & Manual Character Control: Set up AI systems for automated character behaviours and integrate manual input for player control.\nAll assets needed for the tutorial are provided for free, so you can focus on learning and creating without worrying about sourcing additional resources.\nThis course isn’t just about making a specific RTS game—it’s about mastering versatile techniques and workflows that can be applied to any game you create in Unreal Engine 5. The RTS game is simply a framework to explore key concepts, like camera control, UI design, AI systems, resource management, and collision setups, but the skills you’ll gain are universal. By the end, you’ll have a deeper understanding of Unreal Engine’s tools and features, enabling you to adapt these techniques to any game type or genre you choose to develop.",
      "target_audience": [
        "This course is for beginner to intermediate developers who want to learn Unreal Engine 5 by building practical game systems. It’s ideal for those interested in mastering Blueprints, AI, UI design, and modular game logic."
      ]
    },
    {
      "title": "C# Fundamentals for Game Development",
      "url": "https://www.udemy.com/course/complete-game-development-series-01-c-fundamentals/",
      "bio": "Complete Game Development Series 01 - Start Your Game Dev Jurney with C#",
      "objectives": [
        "C# Programming Language.",
        "Fundamentals of Programming.",
        "Grasp important programming concepts like Functional Programming & OOP",
        "Ready to Jump to Game Development with Unity.",
        "Able to Apply Effective Programming Patterns.",
        "Create General Purpose Applications."
      ],
      "course_content": {
        "Introduction & Setup": [
          "Introduction",
          "Install Visual Studio"
        ],
        "Basic of C#": [
          "01 Our First C# Project",
          "02 Console Write Line and the String Variable",
          "03 Different Type of Variables",
          "04 Operators",
          "05 Array",
          "06 If Statement",
          "07 Swith and Enums",
          "08 While Loop",
          "09 For Loop",
          "10 Foreach Loop",
          "11 Get Input"
        ],
        "Simple Text Based Games": [
          "12 Rock Papper Scissors",
          "13 Use Loops to Restart the Game",
          "14 Rule of the Bulls and Cows Game",
          "15 Generate the Secrete Number",
          "16 Get and Validate the Player Input",
          "17 Compare the Player Guess with the Secrete Number"
        ],
        "Functions": [
          "18 Introduction to Functions",
          "19 Function Arguments and Return Value",
          "20 Use Functions to Simplify the Bulls and Cows Game",
          "21 Pass Function as Arguments",
          "22 Pass by Reference and the Out Keyword",
          "23 Create Functions to Generate Computer Move and Get Player Input",
          "24 Finish the Rock Paper Scissors Game",
          "25 Review the Fundamentals"
        ],
        "Object Orient Programming": [
          "26 Introduction to OOP and Classes",
          "27 Member Functions and Protection Level",
          "28 The Importance of Protection Levels",
          "29 Setters Getters and Properties",
          "30 Inheritance and Polymorphism",
          "31 Virtual Function and Overrides",
          "32 Abstract Classes",
          "33 Constructors",
          "34 Destructors"
        ],
        "Text Adventure Game": [
          "35 Base Class of the Adventure Game",
          "36 Implement the Run Function",
          "37 Make a Game Using our Classes",
          "38 Static Classes",
          "39 Delegates and Events",
          "40 Struct vs Class"
        ],
        "Advanced Topics": [
          "41 Interfaces",
          "42 Generics",
          "43 List",
          "44 Dictionary",
          "45 Replace Option with Dictionary",
          "46 The IEnumerable Interface",
          "47 Mimic the List Class",
          "48 Yield Return",
          "49 Congrats and Final Remarks"
        ]
      },
      "requirements": [
        "No programming experience needed, everything will be taught from the beginning."
      ],
      "description": "This course is the first installment of the Complete Game Development Series and is dedicated to helping beginners get up to speed with coding and game development. The course covers all fundamentals of C#, the essentials of programming, good coding practices, and many advanced language features.\nBasic programming concepts like variables, Operators, Containers, Flow Control, Inputs, and Functional Programming are thoroughly explained and practiced. Object-Oriented Programming concepts like Classes, Constructors, Destructors, Protection Levels, Inheritance, Polymorphism, and struct are demonstrated in depth. Advanced topics like Interfaces, Delegates, Generics, Enumerable, and Data Structures are also covered to ensure the student has deep knowledge of the inner working of the facilities of C# and are equipped to start jumping into game development with confidence.\nThe course includes various challenges and text-based game projects to explain general programming patterns. Projects are often created first and refactored when new concepts are introduced, helping students see the application and significance of every language feature, and are encouraged to apply these concepts further. Good programming practices are also constantly being introduced and applied to consolidate the student’s coding skills.\nAfter taking the course, students walk away with a deep understanding of C# and programming, and solid coding skills.",
      "target_audience": [
        "Beginner who want to jump into game development but have no experience in programming.",
        "Beginner who wants to start learning programming in general.",
        "Programmers from other languages who need a crash course of C#.",
        "Unity Developers who what to consolidate their C# knowledge."
      ]
    },
    {
      "title": "Creating Games in Multimedia Fusion 2: Beginner Course",
      "url": "https://www.udemy.com/course/creating-games-in-multimedia-fusion-2-beginner-course/",
      "bio": "Learn the basics of MMF2 and get off to the right start in creating your own games for Windows, Mobile, Flash and HTML5!",
      "objectives": [
        "In this course you will learn the storyboarding, frame editing and importing your game's assets",
        "In this course you will learn how the Event Editor works, where all the magic happens to make your game run the way you want.",
        "In this course you will learn how to evaluate expressions and use built in functions like Random()",
        "Ultimately you will be taught how to create a set of games from scratch with visuals and supplementary material for you to download"
      ],
      "course_content": {
        "An Introduction to Multimedia Fusion 2": [
          "The Main Interface / The Editors / The Objects / Introduction",
          "The Event Editor – An Overview",
          "Application Properties and their Functions",
          "Basic Object Properties / Active Objects / Backdrops / Strings / Counters",
          "The Action List Editor – An Overview",
          "The Art Editor / Importing Graphics / Creating Graphics",
          "The menus / workspace layouts / phrases / abbreviations"
        ],
        "Introduction to the Built-In Movements, Collision Detection and Sounds": [
          "Introduction to the Basic Built-In Movements (including Path)",
          "Introduction to Collisions and Collision Detection",
          "Introduction to Samples / Sound effects and Midis",
          "Introduction to displaying scores and lives",
          "Introduction to the Platform Movement (Specific)",
          "Introduction to Scrolling and Play-area sizes",
          "Putting together your first platform game"
        ],
        "Getting to know Multimedia Fusion 2": [
          "The Debugger",
          "A lesson on Global Values and Strings (Variables)",
          "Alterable Values and Alterable Strings for Objects",
          "The expression editor and retrieving object data",
          "Creating an Object (including standard/relative creation)",
          "Expressions with Functions",
          "The Timer Object",
          "The Random() Function",
          "Creating Backdrops at Runtime",
          "True or False? Let's cover flags!",
          "Putting together and compiling your first EXE (Executable Game)"
        ],
        "Let’s Create Our First Games": [
          "Let’s Create ChocoBreak",
          "Let’s Create a Scrolling Platform Game",
          "Let’s Create a Pong Game",
          "Conclusion"
        ],
        "Beginners: Tips n Tricks": []
      },
      "requirements": [
        "Multimedia Fusion 2 Standard",
        "Multimedia Fusion 2 Developer"
      ],
      "description": "Have you ever wanted to create your own computer games but have no programming experience? Do you want to create computer games without having to learn all about programming? Well, if so, this Udemy course is for you.\nMultimedia Fusion 2 is a game and application authoring tool that allows you to design, build and develop your very own computer games and applications for:\n· Windows XP, Windows Vista, Windows 7, Windows 8\n· iOS (iPhone / iPad / iPod)\n· Android (Phones / Tablets)\n· Xbox 360 and Windows Mobile\n· HTML5 (Web Browser Games)\n· Flash (Web Browser Games)\n· Java / Blackberry Games\n· Macintosh / Linux Supported\n· DirectX 9 Powered Games with Shader Effects (Hardware Accelerated)\nMultimedia Fusion 2 is a very powerful authoring tool that enables you to create quick prototypes or full-blown game developments cutting down timescales massively and allowing you to export all your games across the above platforms with just a few clicks of the mouse!\nSome products always like to claim 'No Programming Required' then when you dig deeper you find there is a 'scripting language' you need to learn or some other syntax. With Multimedia Fusion 2 it is exactly that, No Programming or Scripting Required. Multimedia Fusion 2 caters for both beginners and already-established programmers alike. It contains every feature you could ask for when developing a computer game or application.\nThis course is made up of over 3.5 hours of Video Content, complete walk-through via video for each lecture complete with running commentary in English. The course will introduce you to MMF2, it’s interfaces, editing, the objects, the extensions and literally, everything you will need to know to get you on your way with the best start to create your own computer games and applications, cross-platform.\nThis Multimedia Fusion 2 course can be taken completely at your own pace. You will have access to the content around the clock and can access this course from any computer. You can follow along with the video lectures and you can download supplementary material that is provided. I will also be allocating a weekly time-slot exclusively for this course to answer any questions you may have and also provide some live-tutoring along the way.\nThis Multimedia Fusion 2 course is already packed with everything you need to get you going with the ultimate goal being to create your own computer games and be more knowledgeable in using MMF2 to do that. There are goals set along the route to ensure you're keeping up with the courses pace. In addition to it already being packed out with exclusive to Udemy content, I will also be adding content on a weekly basis to ensure you're always getting the best value that this course can offer you.\nThis course is ideally aimed towards beginners of MMF2 or maybe those that have used it before but cannot get to grips with some of the fundamentals. Do not worry, everybody has their own way of learning and I hope I can bring the best out in everyone who takes part in this course to get you on the right track to create your own computer games.\nI would recommend this Multimedia Fusion 2 course for beginners as the structure is laid out in a fashion that covers each step, right from covering the entire user manual, every property and the basic functions right through to ultimately creating your first set of games including Platform Games, Pong-Like Games, Breakout Clones and much more.\nCheck out some of the free lectures today to see how this course can further your development with Multimedia Fusion 2.\n</p>",
      "target_audience": [
        "Anybody can achieve success with this course, however it is primarily aimed towards Beginners and/or people with no prior experience of MMF2"
      ]
    },
    {
      "title": "A Gentle Intro To Game Development Using C# and MonoGame",
      "url": "https://www.udemy.com/course/a-gentle-intro-to-game-development-using-c-and-monogame/",
      "bio": "Creating 2D Games in a Non-Intimidating Fully Coded Experience Way for Beginners",
      "objectives": [
        "Create 2D Winform games in C#",
        "Create 2D games using MonoGame",
        "Create a Graphics program which simulates an \"Etch-A-Sketch\" drawing program",
        "Create Graphics applications which incorporate drag and drop events",
        "Create a simple object animation then use it as the basis for a car race game",
        "Create a slot machine game",
        "Create a falling objects games ... where you move an object around with the keyboard and catch objects falling from the sky for points",
        "Create a Space shooter game",
        "Create several 2d Game Applications which incorporate flicker free animation and allow the user to use the keyboard and mouse to control movement.",
        "Create A Cannon Shooting Game",
        "Create a Vertical Scroller Game"
      ],
      "course_content": {
        "Course Information": [
          "Welcome",
          "Why MonoGame? ... Some Background",
          "What You Need",
          "What You are Going to Learn"
        ],
        "Graphics Basics": [
          "The Graphics Class ... Using the Form Paint Method",
          "Using The Panel Control",
          "The Checkerboard Challenge ... Your Turn",
          "Mouse Events ... Part 1 Introduction",
          "Mouse Events ... Part 2 Using Classes and Data Structures",
          "Drag and Drop Events ... And A Challenge ... Your Turn",
          "Graphics Basics Quiz"
        ],
        "Animation Basics": [
          "Image Arrays and Timers",
          "Creating Your Own Animations",
          "Sample Application... The Slot Machine Game",
          "Moving Objects using .Left and .Top",
          "The Car Race Challenge ... Your Turn",
          "Moving Objects using DrawImage",
          "Image Transparency",
          "Collision Detection and Keyboard Events",
          "Sound Effects",
          "The Falling Objects Game Challenge ... Your Turn"
        ],
        "Advanced Animation": [
          "Double Buffering",
          "Mouse Panels and Double Buffering",
          "Scrolling",
          "Game Development Part 1",
          "Game Development Part 2 ... The Final Challenge in Plain C# ... Your Turn",
          "Graphics Animation Summary Quiz"
        ],
        "Introduction To Monogame": [
          "Creating Your First Monogame Project",
          "Managing Content",
          "Displaying The Content ... The Sprites",
          "Moving The Sprites",
          "The Velocity Vector",
          "Hitting the Wall !",
          "Drawing Text",
          "Adding Background Music and Sound Effects",
          "Introduction To MonoGame Quiz"
        ],
        "Introduction to MonoGame ... Your Turn (Build It With Me Object Oriented Style)": [
          "Problem 1 ... Static Images",
          "Problem 2 ... Moving Images",
          "Problem 3 ... Bounce off a Wall",
          "Problem 4 ... Incorporating a Class",
          "Problem 5 ... Adding Update and Draw To The Class",
          "Problem 6 ... Accessors and Mutators",
          "Problem 7 ... The Color Property",
          "Problem 8 ... Adding A Background",
          "Problem 9 ... Background Music",
          "Problem 10 ... An Array of Bouncing Heads",
          "Bonus Lecture ... A Rotating Sprite"
        ],
        "MonoGame Character Animation Techniques": [
          "The Kicking Baby Animation ... An Array of Texture2D",
          "Creating an Animated Sprite Using A Sprite Strip"
        ],
        "Game Development Using MonoGame ... The Essentials": [
          "Handling Keyboard Input To Control Movement",
          "More Keyboard Input ... Movement and a Sprite Strip",
          "Collision Detection ... When Moving Objects with the Keyboard (Build It With Me)",
          "Simple Game Part 1... Your Turn (Build It With Me)",
          "Simple Game Part 2 ... Your Turn (Build It With Me)",
          "Simple Game RECAP ... Collision Detection and Keyboard Movement",
          "Handling Mouse Input in MonoGame",
          "Creating Your First MonoGame Game ... Your Turn",
          "Game Development ... The Essentials Quiz"
        ],
        "Game Development in MonoGame ... The Next Step": [
          "Game State Management",
          "The Cannon Shooter Game Part 1 (Build It With Me)",
          "The Cannon Shooter Game Part 2 (Build It With Me)",
          "The Cannon Shooter Game Part 3 (Build It With Me) ... Plus Your Turn Again",
          "Game Development ... The Next Step Quiz"
        ],
        "Creating A Scrolling Game Using MonoGame": [
          "Introduction to Scrolling",
          "User Controlled Scrolling",
          "Scrolling Rotating and Shooting Part 1",
          "Scrolling Rotating and Shooting Part 2",
          "A Scrolling Game ... Your Turn"
        ]
      },
      "requirements": [
        "You should have a beginner level understanding of C# . Basic concepts like loops, if statements, methods, arrays and some simple Object Oriented concepts",
        "Our focus will be working with Visual Studio Community Edition on Windows machines .",
        "Not sure you have enough background to take the course ? Then I would recommend taking my first course \"C# Programming for Beginners:Practical Applications Approach\" before attempting this course"
      ],
      "description": "Video games are on our computers, our consoles and our phones! Lots of people play them and every year more people are making them. If you have ever played a computer game and thought, “I wonder how they do that?” or, better yet, “I want to make something like that,” then this course will get you started. Game development is what got many developers into programming. But how many of us actually ever learned how to create games? Creating games can be challenging, but it doesn’t have to be that way!\nMonoGame is a cross platform gaming framework based on Microsoft’s XNA framework that’s extremely easy to learn. MonoGame is a simple and powerful  framework for creating games for desktop PCs, video game consoles, and mobile devices using the C# programming language. Best of all, games you build with MonoGame will run on iOS, Android, Mac OS X, tvOS, Windows, Linux, PlayStation 4, and more—write once, play anywhere.  It has been succesfully used to create games such as Streets of Rage 4, Carrion, Celeste, Stardew Valley, and many other.\nIt is a re-implementation of the discontinued Microsoft's XNA Framework, and it provides the following features:\nGame framework\n2D and 3D rendering\nSound effect and music playback\nKeyboard, mouse, touch, and controller inputs\nContent building and optimization\nMath library optimized for games\nThere’s no shortage of options when it comes to game development environments. From full-featured engines like Unity to comprehensive and complex multimedia APIs like DirectX, it can be hard to know where to start. MonoGame is a set of tools, with a level of complexity falling somewhere between a game engine and a grittier API like DirectX. It provides an easy-to-use content pipeline, and all the functionality required to create lightweight games that run on a wide variety of platforms.\nMonoGame is a \"bring your own tools\" kind of framework, which means that it provides the building blocks to build your own engine and tools, but it isn't quite an engine itself.\nIf you are expecting a scene editor (like Unity or Unreal), MonoGame is not that.\nIf you love coding and understanding how things work under the hood, MonoGame might be what you are looking for. And fear not, getting a game running with MonoGame only takes a few minutes.\nBest of all, MonoGame apps are written in pure C#, and you can distribute them quickly via the Microsoft Store or other similar distribution platforms.\nOur focus will be working with Visual Studio Community (Compatible with Versions 2019/2022) on Windows machines\n*** Update 2023 **\nAll MonoGame Demos have now been updated to Version 3.8 (released late 2022)\nPreviously MonoGame installed on your machine through an installer, but from 3.8 onwards everything is installed through NuGet packages and Visual Studio Extensions. The most notable change for existing users is that MonoGame will only support .NET 6 and Visual Studio 2022 moving forward.\nNote:\nMonoGame 3.8 project templates are not compatible with earlier versions of MonoGame. If you wish to work on or build older MonoGame projects, then you will still need to install MonoGame 3.7.1 or earlier to open them. WindowsDX and DesktopGL templates now use SDK-style projects in MonoGame 3.8\nThe 3.7.1 demos are still maintained in the course.\nThis course assumes that you’ve done a little bit of  programming in C# but  all the material starts at the most basic level. That means that anyone should be able to join in and work their way through the material. That’s the good news.\n\nThe bad news is that programming is hard work, especially at first. If you truly want to learn how to program, you’ll need to write programs yourself and struggle through some rough spots before some topics really click for you. Just as you can’t learn how to ride a bicycle by reading about it – you have to actually do it, probably with some spills along the way – you can’t learn to program just by reading about it or watching a video. If you were hoping to watch and  learn how to program without doing any programming yourself, it’s not going to happen... But having said that don't feel you are alone, I will be available daily for extra help should you need it.\n\nThis course is project-based, so you will not just be learning dry programming concepts, but applying them immediately to real games as you go. All the project files will be included, as well as additional references and resources\n\n\nHere's how I will help you to succeed:\no    Each lecture starts with a list of objectives/speaking notes\no    Every example covered in the lecture is available for download in the resources section  … including the objectives/speaking notes\no    Almost every lecture has a set of Practice problems with full solutions provided\no    My style of writing and teaching follows the KISS principle : Keep It Super Simple.   I try to stay away from fancy computer terminology and try to teach like am speaking to a brand new user with little to no previous knowledge on the subject matter.... and  I am always available for help … replying most times within a day.\n\n\n.... And finally please do not judge a book by it's cover ... don't judge the course by the title or this small description section, if you want to know exactly all the topics covered please go to:\nCOURSE CONTENT\nSections\nLectures  (press the down arrow) ... This will open up literally thousands of lines of very detailed lecture descriptions leaving no doubt what is and what is not covered.\n\n... So are you ready to start making your first games ? Lets get started !",
      "target_audience": [
        "Anyone young or old who wants to start creating their own games from scratch. Using C# and MonoGame you get a full coded experience. If you prefer to control all the bits of your game and not rely on things being done for you, it's a better fit."
      ]
    },
    {
      "title": "Unity Shadergraph for Beginners",
      "url": "https://www.udemy.com/course/unity-shadergraph-for-beginners/",
      "bio": "A Guide to using Unity Shadergraph to create Game Assets",
      "objectives": [
        "How to User Unity's Shadergraph to create numerous shaders"
      ],
      "course_content": {
        "Introduction": [
          "Course Welcome and Salutation",
          "Downloading and Installing Unity",
          "Course Materials And Files",
          "Starting a Unity Project with the Universal Render Pipeline Template",
          "Creating a URP project from Scratch",
          "Quick Review on Unity's Shaders",
          "Shadergraph User Interface"
        ],
        "Section 2": [
          "Section Intro",
          "Update on PBR Shader",
          "Creating Our First Graph Part 1",
          "Creating our first Shader Part 2- Scene Setup",
          "Part 3- Adding a Glow Effect to our first Graph",
          "Part 4 Cleanup and Organisation",
          "Combining Images With ShaderGraph"
        ],
        "Creating Light Flickers With shadergraph": [
          "Light Flicker Section Intorduction",
          "Creating Light Flicker Effects with Shadergraph",
          "Sub-Graphs",
          "Quick Tip- Changing Mesh Types",
          "Brief Intorduction to Meshes, Vertices and Points",
          "Understanding UV's"
        ],
        "Creating the Jellyfish Shader": [
          "Vertex Displacement Intro",
          "Jelly Shader Scene Setup",
          "Jelly Shader Part 2 - Tiling, Offset and Noise Setup",
          "Jelly Shader Part 3 - Vertex Displacement Setup",
          "Jelly Shader Part 4 - Emission Color Setup",
          "Jelly Shader Part 5 - Albedo Setup",
          "Jelly Shader Part 6 - Normal Setup",
          "Jelly Shader Final - Customizing the Material"
        ],
        "Toon Style Water": [
          "Cartoon Style Water Intro",
          "Cartoon Style Water Scene Setup",
          "Cartoon Style Water Part 1",
          "Cartoon Style Water Part 2-Adding Effects and Noise",
          "Cartoon Style Water Part 3- Timing and Tiling",
          "Cartoon Style Water Part 4- Setting Up the Vertex Displacemet",
          "Cartoon Style Water Tweaking and Testing"
        ],
        "Creating a Dissolve Effect Shader": [
          "Dissolve Effect Intro",
          "Dissolve Effect Setup",
          "Dissolve Effect Final"
        ],
        "Creating a Vortex using Shadergraph": [
          "Vortex Shader Section Intro",
          "Vortex Shader Part 1",
          "Vortex Shader Part 2",
          "Vortex Shader Bonus Tweak"
        ],
        "Mini Project": [
          "Mini Project Intro",
          "Mini Project Part 1 Materials, Graphs and Scene Setup",
          "Mini Project Part 2 Sprite Setup",
          "Mini Project Part 3 Sorting Layers Quick Tip",
          "Mini Project Part 4 Building Our Graphs and Mapping the Textures",
          "Mini Project Part 5 Building Our Graphs and Mapping the Textures",
          "Mini Project Part 6 Final Electric Effect Graph",
          "Thanks and Further Help on Shadergraph",
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "A Computer with Unity 2019.4 or Unity 2020 Version installed"
      ],
      "description": "This Course is broken Down into 8 Sections. We first begin with a brief Introduction to Unity’s Universal Render Pipeline (URP) with an overview of Shader Graph. Next, we create a Unity project with the URP Template and use this as a building block to learn more about unity’s shader types. After a quick review on the types of shaders and understanding the basics of Shadergraph and exploring the user interface we move on to create our first graph which is a TV Flicker effect. The next few sections focus on creating various shaders which include a cartoon style water shader, Vortex Shader, a Dissolve shader, light flicker effect and more. We Finally wrap up the course with a mini project where we create an electric shader for a game asset. The course is created for a beginner audience new to unity so its slow paced but packed with useful tips on how to use the engine. See you in the Course.",
      "target_audience": [
        "Hobbyists and Beginners who want to understand Shadergraph from the Ground Up"
      ]
    },
    {
      "title": "Remaking Illaois Tentacle Smash Sound from League of Legends",
      "url": "https://www.udemy.com/course/illaoi-tentacle-smash-sound-recreation-course/",
      "bio": "Learn to Recreate Illaoi's Tentacle Smash Sound Effect from League of Legends with easily accessible tools",
      "objectives": [
        "Recreate a Professional Sound Effect with provided Source Recordings",
        "Become very Familiar with Reaper and Audio Editing",
        "Create More Sound Effects on your own with Reaper"
      ],
      "course_content": {},
      "requirements": [
        "Own a Computer",
        "Speakers or Headphones to Listen to your Computer",
        "Reaper (you can get a free version)"
      ],
      "description": "Do you want to learn to edit audio to create professional sound effects? Or are you a game developer who loves to make games? But you don’t know where to start with learning about audio and sound? Or maybe you’re a video game composer who wants to dive into the world of sound design.\nIn this course, we will teach you how to recreate the sound of Illaoi's Tentacle Smash Sound Effect with the Audio Editing Program Reaper. I will be providing you with the source recordings so you can follow along yourself. And I will also be giving you the original session that I created so you can see exactly what I did. Then we’ll use the tools we learned from Reaper to teach about the different effects that are available in Reaper including Equalizers, Pitch Shifting, Compressors and limiters.\nAnd you’ll get to watch me create all of this step by step so you can follow along and try making it yourself.\nGetting started with making sound effects can be expensive and difficult, so I made this course to help people get started with sound design and audio editing without investing too much time or money. Reaper is free for the first 60 days and I provide you with the audio files so you can create the same exact sound effect that I did.\nSo what are you waiting for? Get started and enroll today! Looking forward to seeing you there.",
      "target_audience": [
        "Beginners to Audio Editing",
        "Game Developers",
        "Musicians",
        "Gamers",
        "Anyone who wants to improve on their audio editing skills"
      ]
    },
    {
      "title": "Create a Fun Pirate Trading Game in PlayMaker & Unity",
      "url": "https://www.udemy.com/course/pirate-trader-game-development-tutorial-playmaker-unity-design-pattern/",
      "bio": "Build a Pirate Trading Game much like the original Tapian on the Apple II without writing a single line of code",
      "objectives": [
        "Create a Fun Pirate Trading Game in Unity & playMaker",
        "Implement increasingly complex game designs",
        "How to break down problems into finite state machines and develop visual solutions"
      ],
      "course_content": {
        "Introduction to the Course": [
          "Introduction to the Course"
        ],
        "Introduction": [
          "Creating a Fun Pirate Trading Game in playMaker & Unity - Creating the Project",
          "Use the Unity Editor to Layout a Strating Interface for our Game",
          "Creating our First playMaker Finite State Machine (FSM)",
          "Learn how to Send an Event to a playMaker Finite State Machine (FSM)",
          "Create the Ability to Travel Between Cities",
          "Use Prefabs to Create Reusable Game Objects",
          "Create an FSM for the Products in our Game",
          "Use a Nested Loop to Create City Product Game Objects",
          "Finalizing the Design of our City Product Game Objects",
          "Update the Product Pricing Panel when we Change Cities",
          "Update the Product Pricing Panel when we Change Cities - Continued",
          "Begin Setting Up the State Machine for Buying Products",
          "Buy Products and Update the Ship Hold",
          "Continue Implementing the Process to Buy Items",
          "Validating Our Purchase to Make Sure we have Enough Room in the Ship Hold",
          "Finalizing the Validation of Ship Hold Space Available",
          "Make Sure we Have the Money to Buy the Products",
          "Making Sure we Have the Money to Buy the Products - Part 2",
          "Add the Ability to Sell Products and Update the Ship Hold",
          "Add the Ability to Sell Products and Update the Ship Hold (Part 2)",
          "Getting the Money from Selling Products",
          "Making a Display Message State Machine",
          "Creating the Pirate Battles",
          "Improving the Interface and Implementing Ship Damage",
          "Adding the Ability to Upgrade your Ship Hold"
        ]
      },
      "requirements": [
        "Have basic level computer skills",
        "Unity 5 or later should installed and PlayMaker purchased & downloaded from the Unity Asset Store"
      ],
      "description": "NEW COURSE CONTENT RELEASED 11/19/2018!\nSee new states for pirate battles, taking damage in your ship, a small interface upgrade, and upgrading your ship hold!\n\n\nWho doesn't like a fun pirate trading game in which you trade goods between cities, upgrade your ship, and fight pirates on the high seas? In this course you will learn how to build a fun Pirate Trading Game using Unity & playMaker. Using playMaker's Finite State Machines you will see how to build this game from the ground up, step by step.\nThe Fun Way To Learn Game Design\nLike our other highly rated courses we start at the very beginning. Even someone new to playMaker and Unity can follow along. We begin by walking you through how to setup the project and install playmaker. We layout a basic interface for our game and then we create some simple FSM states to begin implementing the turn system of our game.  But we don't just keep it simple and basic for long. This course is designed for ambitious developers who want to learn important game design techniques and are not afraid to jump in feet first. We waste no time in delving into more advanced design patterns that will teach you how to build virtually any game in playMaker and Unity.\nIntermediate and Advanced Level playMaker\nThe goal of this course is to take you from a beginning game designer to someone who is very capable of putting together increasingly complex games and applications. While this course uses Unity & playMaker, the game design techniques and patterns you will be learning will apply to virtually any language. As you progress through the course you will learn how to smartly structure your game objects and FSMs. You will learn how to use loops, nested loops, and dependency injection to create game objects on the fly. You will learn how to create reusable FSM's and will gain confidence in adding new features to the game.",
      "target_audience": [
        "Anyone interested in building games in playMaker",
        "Playmaker developers looking to learn more advanced design patterns",
        "Experienced programmers and developers who wish to approach game development from a different perspective",
        "Beginning programmers who wish to experiment with visual programming",
        "Game Developers who learn better visually or who have struggled learning how to code"
      ]
    },
    {
      "title": "Blender 4.2 Simulation Nodes: Master Animations & Simulation",
      "url": "https://www.udemy.com/course/blender-simulation-nodes/",
      "bio": "Learn to Build Gravity Systems, Dynamic Particle FX, and Interactive Boid Simulations with Geometry Nodes in Blender 4.2",
      "objectives": [
        "Create epic simulations with Geometry Nodes that run smooth, no matter the frame rate.",
        "Master gravity systems and make particles dance like a pro.",
        "Develop boid behaviours for swarms that act like they’ve got a brain.",
        "Build killer particle effects to morph objects or simulate fireworks.",
        "Trigger simulations with slick Boolean logic for smarter setups.",
        "Optimise your node trees like a boss for faster, cleaner workflows.",
        "Design interactive simulations that respond to their environment.",
        "Switch between frame rates without breaking a sweat in your simulations."
      ],
      "course_content": {
        "Introduction & Setup": [
          "Course Introduction",
          "Downloading & Installing Blender",
          "Setting Up Blender",
          "Community & Support"
        ],
        "Geometry Node Basics": [
          "Section Introduction",
          "The Simulation Zone & The Spreadsheet",
          "Indexes & Selection by Index",
          "Boolean Math",
          "Vectors",
          "Random Values",
          "Instances"
        ],
        "Text Morph Effect": [
          "Section Introduction",
          "Creating Volume Objects",
          "Creating a Number Node Group",
          "Mesh to Points & Back Again",
          "The Simulation Zone",
          "Storing Named Attributes",
          "Setting an Initial Velocity",
          "Ending the Morph",
          "Framerate Independence",
          "Skipping a Simulation Zone",
          "Multiple Simulation Zones",
          "Bypassing Simulation Zones",
          "Number Morph Node Group",
          "Simplifying the Node Tree",
          "Exploding the One",
          "Debugging the Simulation",
          "Fixing the Simulation",
          "Creating a Material",
          "Lighting",
          "Compositing",
          "Final Render Settings",
          "Converting the Image Sequence into a Video",
          "Text Morph - Project Wrap-Up"
        ],
        "Fireworks": [
          "Section Introduction",
          "Blender 4.2 LTS",
          "Setting Up Blender 4.2",
          "Project Start Scene",
          "Setting Intial Direction",
          "Setting Intial Velocity",
          "Creating Gravity",
          "Planning the Explosion",
          "Spawning the Correct Points",
          "Setting New Velocities",
          "Tidying the Node Tree",
          "Instancing Primary Particles",
          "Spawning Rocket Trails",
          "Rocket Trail Velocity",
          "Killing Trail Particles",
          "Killing Primary Particles",
          "Framerate Independent Velocity",
          "Shaders, Camera & Compositing",
          "Duplicating Node Trees",
          "Creating Primary Trail Attributes",
          "Spawning Primary Trails",
          "Setting Particle Color & Size",
          "Changing the Velocity of Particle Types",
          "Solving Problems & Scaling Particles by Age",
          "Final Tweaks",
          "Rendering Fireworks",
          "Creating Other Firework Simulations"
        ],
        "Creepy Crawlies": [
          "Section Introduction",
          "What Are Boids",
          "Starting Scene",
          "Cohesion",
          "Creating a Controls Node-Group",
          "Alignment",
          "Maintaining a Constant Speed",
          "Separation - Searching for Nearby Boids",
          "Separation - Increasing the Number of Searches",
          "Creating Smoother Motion",
          "Creating a Test Render",
          "Detecting a Collision",
          "Improving Collision Detection",
          "Creating a Prototype Environment",
          "Creating a Surface Emitter",
          "Maintaining Surface Attachment",
          "Using Colliders",
          "Using Colliders - Challenge Solution",
          "Avoiding Colliders",
          "Avoiding Colliders - Challenge Solution",
          "Creating a Target for Boids",
          "Setting Up Attractors",
          "Tuning the Attractors",
          "Using Repellers",
          "Instancing Spiders",
          "Walking on Surfaces",
          "Final Scene Overview"
        ],
        "What's Next": [
          "Course Wrap Up"
        ]
      },
      "requirements": [
        "Blender 4.2 LTS.",
        "Some knowledge of Blender’s interface & node based workflows would be helpful.",
        "Particles & some simulations can be slow to process, so a PC that meets Blender’s recommended Specs is an advantage."
      ],
      "description": "Ready to level up your Blender skills? Our new Simulation Nodes course is your ticket. We’ll help you go beyond basics and dive into Geometry Nodes. It’s where the magic happens.\nIn this course, you’ll make simulations that work flawlessly, no matter the frame rate. Switch between 30 FPS and 60 FPS without a hitch. Smooth and seamless, just the way you want it.\nWe’ll teach you how to create everything from gravity systems to particle effects. You’ll even get into boid behaviour—think insects that interact with their environment in a realistic way.\nGet ready to make fireworks explode like never before. Morph objects with particle effects and trigger simulations to start or stop with advanced Boolean math. Don’t worry, we’ll keep it easy!\nIf Blender’s regular physics feel limiting, this course is for you. We’ll guide you to a node-based workflow that’s more intuitive and customisable. Say goodbye to clunky systems.\nGeometry Nodes are your cheat codes to non-destructive workflows. They update automatically with scene changes, so you never have to start from scratch. It’s all about working smarter.\nThis course is perfect if you know your way around Blender and have dabbled with nodes. By the end, you’ll be creating simulations that’ll make others wonder how you did it.\nAll you need is Blender 4.2 LTS and some basic node knowledge. A decent PC helps, especially for heavier simulations. But trust us, the results will be worth it.\nLet’s create something awesome together!",
      "target_audience": [
        "Want to use use Geometry Nodes in your animations & VFX workflows? This course is perfect for you!",
        "Want to create simulations using an intuitive node-based workflow? We've got you!"
      ]
    },
    {
      "title": "Making an Infinite Runner with Unity",
      "url": "https://www.udemy.com/course/complete-game-development-series-02-unity-infinite-runner/",
      "bio": "Complete Game Development Series 02 - Start Your Game Dev Jurney with Unity and C#",
      "objectives": [
        "The Fundamentals of the Unity Game Engine",
        "Make a Complete Infinite Runner Game",
        "Using C# to Implement Game Mechanics",
        "Package Games With Unity",
        "Save and Load Game Data with JSON",
        "Create UI and Audio in Unity"
      ],
      "course_content": {},
      "requirements": [
        "Basic Understanding of C#",
        "It is recommended to go take the Complete Game Development Series 01 - C# Fundamentals before moving on to this one ONLY if you don't know C#",
        "Passion about Game Dev!"
      ],
      "description": "Welcome to the second installment of the Complete Game Development Series, Project Infinite Runner! Throughout this course, we will delve into the fundamentals of Unity, the widely utilized game engine, as we construct a fully developed infinite-runner game.\nOur journey begins with an exploration of the core aspects of the Unity editor, encompassing basic manipulation of objects, game objects and their components, the game loop, and asset importing. As the game takes shape, we will progressively explore advanced concepts such as the new input system, physics, animation controllers, prefabs, shader graphs, audio, and more.\nThis tutorial emphasizes thoroughness. No steps will be omitted, and we will refrain from relying on third-party code or plugins. Every element, including the player controller, world generation, shader graph, player profile, and leaderboard system, will be implemented from the ground up. Our goal is to maintain clean and extensible code throughout the entire process.\nBeyond Unity, we will briefly touch on basic modeling using Blender to provide insights into other facets of the game development workflow.\nUpon completing the tutorial, you will possess a robust understanding of Unity and game development, coupled with a comprehensive infinite runner project. This knowledge will empower you to tackle more advanced projects and progress through the series seamlessly. Brace yourself for a thorough, enlightening, and continuous game development journey!",
      "target_audience": [
        "Beginners who want to jump to into Unity Game Development",
        "Beginners of Unity who what to follow a more complete project",
        "Any people that are passionate to Start Making Games!",
        "Unreal Engine developers who what to try Unity"
      ]
    },
    {
      "title": "Unreal Complete Scene - Forest Environment",
      "url": "https://www.udemy.com/course/the-witcher-3-inspired-scene/",
      "bio": "Learn how to create a complete UE5 forest environment",
      "objectives": [
        "Create an environment from scratch on UE5",
        "Create next-gen trees (Structure in Nanite & Foliage in traditional LOD)",
        "Create multiple optimized shaders",
        "Create different vegetation type on Speedtree 9"
      ],
      "course_content": {
        "Aspen Trees": [
          "Speedtree Overview",
          "Aspen Tree - Structure",
          "Aspen Tree - Branch Texture (Part.1)",
          "Aspen Tree - Branch Texture (Part.2)",
          "Aspen Tree - Baking Textures & Test",
          "Aspen Tree - Second Branch",
          "Aspen Tree - Generate Atlas",
          "Aspen Tree - Base Cutouts",
          "Aspen Tree - First Branch Creation",
          "Aspen Tree - First Branch Test & LODs",
          "Aspen Tree - Second Branch Creation",
          "Aspen Tree - Improvements",
          "Aspen Tree - Adding Lumps",
          "Aspen Tree - Adding Small Branches",
          "Aspen Tree - Adding Tessellation",
          "Aspen Tree - Setup UE5 Project",
          "Aspen Tree - Export Structure",
          "Aspen Tree - Export Foliage",
          "Aspen Tree - Remove Noisy Alpha",
          "Aspen Tree - Import in UE5"
        ],
        "Bark & Foliage Shader": [
          "Shader Basics",
          "Import Default Textures",
          "Tiling Function",
          "Albedo Controls Function",
          "Specular, Roughness & Emissive",
          "Normal Intensity Function",
          "Greyscale Controls Function",
          "Sorting Instances",
          "Billboards Function",
          "Test & RDO Texture",
          "Foliage Set Function",
          "Comparison"
        ],
        "Pine Trees": [
          "Trunk Creation",
          "Branches Creation",
          "Bark Texture",
          "Green Branch - Structure",
          "Green Branch - Improvements",
          "Green Branch - Needles",
          "Green Branch - Texturing",
          "How to Create a Gradient Needles",
          "Green Branch - Assign Gradient",
          "Green Branch - Overlap Improvements",
          "Green Branch - Improve Top Needles",
          "Green Branch - Adding Details",
          "Green Branch - Texture Test",
          "Green Branch - Rework",
          "Dead Branch - Full Creation",
          "Dead Branch - Test on Tree",
          "Branches - Variations",
          "Branches - Bake Small Parts",
          "Green Branch - Atlas Creation",
          "Dead Branch - Atlas Creation",
          "Atlas Cutouts",
          "Adding Anchor Points",
          "Improve Top Tree",
          "Improve Density",
          "Top Details",
          "Down Details",
          "Adding Tessellation",
          "Export to UE5",
          "Test in UE5"
        ],
        "Tree Variations & Saplings": [
          "Aspen Tree - Variations",
          "Pine Tree - Variations",
          "Variations - Increase Segments",
          "Variations - Export Aspens",
          "Variations - Export Pines",
          "Aspen Sapling - Cutouts",
          "Aspen Sapling - Creation",
          "Pine Sapling - Structure",
          "Pine Sapling - Needles",
          "Saplings - Export & Import to UE5"
        ],
        "Landscape Shader": [
          "Upgrade Project for UE5.1",
          "Distance Based Texture Blending",
          "Layers Function",
          "Layer01 Function",
          "Other Layers",
          "Slopes Logic & Clean",
          "Grass Texture",
          "Main Ground & Variations",
          "Height Based Paint Layers",
          "Fix Grey Terrain Issue",
          "Parallax Occlusion Mapping (POM)",
          "POM - RDO Support",
          "Rock Texture"
        ],
        "Ground Foliage": [
          "Grass",
          "Landscape Auto Foliage",
          "Fern",
          "Pink Flowers",
          "Yellow Flowers",
          "Reeds",
          "White Flowers",
          "Dry Plant",
          "Masked Automatic Foliage"
        ],
        "Scene Creation (Part.1)": [
          "Setup Level & Terrain",
          "Landscape Paint Brush",
          "Path - Creation",
          "Path - Material",
          "UE5 Terrain Issue",
          "Drawing the Path",
          "Adding Reliefs with Blueprint",
          "Trees Blueprint",
          "Procedural Aspen",
          "Procedural Pines & Saplings",
          "Volumetric Fog",
          "Path Texture",
          "Improvements"
        ],
        "Distant Mountains": [
          "Terrain Creation",
          "Convert Terrain to Mesh",
          "Textures Setup & Import in UE5",
          "Master Material Creation"
        ],
        "Megascans Assets Shader": [
          "Master Material Creation",
          "Cover System"
        ],
        "Scene Creation (Part.2)": [
          "Explanations",
          "Big Clean",
          "Fix Landscape Mode Crash",
          "Relief Improvements",
          "Variation Layers",
          "Set Landscape Grass Types",
          "Ground Foliage - Rework",
          "Ground Foliage - Color",
          "Ground Foliage - Optimized Shadows",
          "Ground Foliage - LODs",
          "Setup Trees",
          "Improve Lighting",
          "Runtime Virtual Texture (RVT)",
          "Distance Moutains Placement",
          "Path Improvements",
          "Adding Rocks & Ruins",
          "Improvements",
          "Local Volumetric Fog",
          "Salabilities Blueprint",
          "Grass Rework",
          "Adding Stumps"
        ]
      },
      "requirements": [
        "Owning a computer with Windows 10 (64Bits) / Not tested on Windows 11",
        "Winrar or 7zip to decompress files",
        "The basics of Unreal Engine"
      ],
      "description": "During this course I will show you how to create a scene inspired by The Witcher 3: Wild Hunt.\nThe goal of this course is to show you, step by step, how to create an inspired environment from scratch.\nFrom the creation of the vegetation with Speedtree 9 to the final composition on UE5.1. We will see the creation of textures with Quixel Mixer, terrain to dress the background of our scene with Gaea (optional) and we will create all the necessary shaders to get the maximum quality. And we will finish with the 4k renders with the Movie Render Queue. More details below.\nWhat I will learn?\nIn Speedtree 9:\nCreate serval Next-gen trees with hybrid logic (structure with Nanite and foliage with common LODs/Imposter)\nCreate 3d branches to use as textures\nCreate an atlas to combine several parts in a single texture\nCreate ground foliage models optimized for realtime rendering.\nIn UE5:\nComplex shaders for trunk, foliage, terrain & Megascans assets.\nAdvanced terrain shader with distance blend texture, Parallax Occlusion Mapping, RVT, automatic logic and spawn foliage with mask.\nComplete composition (Procedural Placement, lighting, vfx...)\nCreate renders with the Movie Render Queue\nIn Quixel Mixer:\nCreate multiple advanced textures with and without animated puddles in UE5\nExport with the correct packed textures\nIn Gaea:\nCreate some terrains used to dress the background of our scene\nExport masks to use them for texturing in UE5\nIn Photoshop:\nReplace colors of some textures\nEnhance the quality\nCombine masks\nWhich chapters are available?\nAspen Trees (Complete Creation) - (7h26)\nBark & Foliage advanced Shader - (2h35)\nPine Trees (Complete Creation) - (6h55)\nVariations & Saplings for Aspen & Pine - (3h)\nComplex Landscape Shader & Quixel Mixer Textures (UE5.1) - (4h47)\nGround Foliage (Speedtree 9) - (7h25)\nScene Creation (Part 1) - (2h52)\nDistant Terrain + Shader (Gaea / UE5.1) - (1h10)\nMegascans Advanced Shader (UE5.1) - (1h05)\nScene Creation (Part 2) (UE5.1) - (7h27)\nDecals Shader (UE5.1) - (51m)\nAdding Wind on Foliage (Speedtree 9 / UE5.1) - (1h24)\nSimple Particles (Ambient Dust / Moving Pollen...) (UE5.1) - (40m)\nScene Creation (Part 3) (UE5.1) - (1h10)\nRendering with Movie Render Queue (UE5.1) - (1h)\nWhat I will get? (updated weekly)\n~51 hours of step-by-step video tutorial\nSeparate downloadable chapters (.zip)\n1080/30fps resolution\nSoftware Used:\nSpeedtree 9.1.2 or above\nUnreal Engine 5.1\n3d Modeler (Blender, 3ds Max, Maya...)\nPhoto/Image Editing Software (Photoshop, Gimp...)\nQuixel Mixer 2022\nGaea 1.3.2 (optionnal)\nLevel:\nAnyone who wants to learn, improve or fix their skills in environment creation.\nPrerequisite:\nOwning a computer with Windows 10 (64Bits) / Not tested on Windows 11\nWinrar or 7zip to decompress files\nThe basics on Unreal Engine\nImportant note :\nThis course was created in version 5.1 and it is STRONGLY RECOMMENDED to use THE SAME version! If you choose to use another version, be aware that you may encounter possible errors not covered in this course.\nAbout copyrights:\nAll you can find in the resources of the course are for personal usage only. You cannot share or sell it.",
      "target_audience": [
        "Anyone who wants to learn, improve or fix their skills in environment creation."
      ]
    },
    {
      "title": "Create your first obby game in ROBLOX",
      "url": "https://www.udemy.com/course/create-your-first-obby-in-roblox/",
      "bio": "Learn how to make a Roblox Obby game! No experience needed. Everything done in Roblox Studio.",
      "objectives": [
        "Roblox game development",
        "Roblox studio",
        "Roblox",
        "Roblox obby",
        "Roblox Game dev"
      ],
      "course_content": {
        "Setting up": [
          "Creating a Roblox account",
          "Downloading Roblox studio",
          "Setting up the Roblox Studio environment"
        ],
        "Creating the Obby": [
          "Creating a killpart",
          "Editing block's properties",
          "Creating your first stage",
          "Creating a door stage",
          "Creating better lighting",
          "Add checkpoints",
          "Other stage ideas",
          "Creating a finish"
        ]
      },
      "requirements": [
        "None"
      ],
      "description": "In this course you will learn how to make your first game in Roblox! You will learn about Roblox studio and get an insight on the different things you can do inside of the studio. You will learn the basics of Roblox game development, and you'll also learn some programming along the way!\n\n\nYou will learn how to set up roblox studio, how to make parts and change the parts' looks by changing its properties! I will go over everything that you would need to build out an obby by yourself. We also go over making a checkpoint system where you respawn at the last checkpoint that you have touched. Aside from that we also deal with building out the obby from start to finish, including the spawn point, the finish, and all the stages in between! We will create kill parts, which kill the player when the player touches the part. I will explain how to write this script, but also how you can leverage the toolbox so that you don't always have to write the scripts yourself! Furthermore I will go over the basics of roblox game development that will help you make an obby game in Roblox\n\n\nAt the end of this course, you will hopefully have built your own Roblox obby!",
      "target_audience": [
        "Beginner game developers",
        "Roblox players",
        "Roblox developers",
        "Roblox programming"
      ]
    },
    {
      "title": "Missile Commando with Swift and Sprite Kit",
      "url": "https://www.udemy.com/course/missile-commando-with-swift-and-sprite-kit/",
      "bio": "Go retro and program a clone of an arcade classic with Apple's latest coding technology!",
      "objectives": [
        "Program a complete game from start to finish.",
        "Feel comfortable coding with Swift",
        "Know plenty of Sprite Kit to create their next app or game!"
      ],
      "course_content": {
        "Initial Setup and Swift / Sprite Kit Beginners": [
          "Series Introduction",
          "Course Assets",
          "Blackboarding the Game",
          "How to Create a Universal-sized Intro Image with SKSpriteNode",
          "Introduction to SKLabelNodes and SKActions",
          "Declaring Variables in Swift and using SKActions to Remove a Child",
          "Using an Intro Scene in Sprite Kit to Transition to the main Game Scene"
        ],
        "The Player and Surrounding Environment": [
          "Adding the Player Base and Ground",
          "Using a Rotation Gesture Recognizer to rotate and move the Turret and Target",
          "Creating Bullets and Applying Force to an SKPhysicsBody",
          "Creating Firing Particles from the Gun Turret",
          "Parallax Moving Backgrounds with Swift and Sprite Kit",
          "SKActions to Play Sound and AVFoundation for Background Sound"
        ],
        "Game Play Loops": [
          "Clearing Unseen Nodes and Game Loop Outline",
          "Launching the EnemyMissile Class",
          "EnemyMissile Particles and Animation",
          "Adding Comet Trails to Missiles",
          "Send in the Drones!",
          "Creating the Base Class",
          "The Game Over Loop"
        ],
        "Collision Detection, Stats and all the rest!": [
          "Creating Explosions and Adding a Hit Function to the EnemyMissile Class",
          "Contacts Between Bullets and Missiles",
          "Finishing the Contact Listener",
          "Game Over Functions and Restarting",
          "Wave Stats, Move Labels, and Leveling Up",
          "Conclusion"
        ]
      },
      "requirements": [
        "Be familiar with some basic programming concepts (like variables, if statements, for statements)"
      ],
      "description": "*****INCLUDES UPDATES SOURCE PROJECTS FOR SWIFT 3\nIn this Swift and Sprite Kit video tutorial series we will wield our mighty modern programming skills to re-make a classic arcade game. Along the way, we'll also add modern graphics and some new features so the finished product is a more enjoyable app using today's fancier technology. Topics taught includes…\nCustom SKNode and SKSpriteNode classes\nProgramming your own game loops\nA myriad of SKActions\nAdding and removing children (properly)\nCollision detections\nPlaying sounds\nTransitioning SKScenes\nAnd much more!",
      "target_audience": [
        "Anyone interested in learning to program an iOS app"
      ]
    },
    {
      "title": "Learn Construct 2: Creating a Puzzle Platformer in HTML5!",
      "url": "https://www.udemy.com/course/learn-construct-2-creating-a-puzzle-platformer/",
      "bio": "Make a Puzzle Platformer Engine with Ready Made Assets! Specialized Camera, Push/Pull Blocks, Transitions and more!",
      "objectives": [
        "Make a Puzzle Platformer!",
        "Learn how to program a custom camera with special features for zoom and position",
        "Learn how to program hidden areas and custom fade transitions",
        "Learn how to program combo locks opened by pressure plates and push pull blocks!"
      ],
      "course_content": {
        "Welcome!": [
          "Welcome to the course!",
          "Download our Assets"
        ],
        "Programming our Engine": [
          "Download our Template!",
          "Quick Check!",
          "Programming our Player Input",
          "Adding our Player Animations",
          "Programming our Look Ahead Camera",
          "Adding Doors and Transitions Part 1",
          "Adding Doors and Transitions Part 2",
          "Adding Doors and Transitions Part 3",
          "Programming Camera Zoom Areas",
          "Adding our Hidden Area",
          "Adding our Push/Pull Block",
          "Adding in Dangerous Spikes",
          "Programming Pistons",
          "Programming Pressure Plates",
          "Programming Player Death"
        ],
        "Congratulations!": [
          "Congratulations!",
          "Download our finished engine!"
        ]
      },
      "requirements": [
        "Basic knowledge of programming logic [Recommended]",
        "Intermediate Knowledge of Construct 2 [Recommended]",
        "Construct 2 [Free version or greater]"
      ],
      "description": "What is this course?\nIn this course, we explore how to program a Puzzle Platformer! We walk you through step-by-step from using our own assets and template, to setting up the entire engine!  By the end you will have all the knowledge you need to make your own unique puzzle game.\nWhat will I walk away with?\nPre-made Level File\nRoyalty Free Art Assets\nFully Animated Player\nLookAhead Camera (With Zones)\nKeyboard & Gamepad Input\nGlobal HUD\nPush/Pull Blocks\nHidden Areas\nKeyboard & Gamepad Input\nDoors & Transitions\nPistons\nPressure Plates",
      "target_audience": [
        "Intermediate users of Construct 2 will find this course easier",
        "Anyone who wants to make their own Puzzle Platformer",
        "Anyone who wants to learn intermediate concepts taught with Construct 2"
      ]
    },
    {
      "title": "Cocos Creator 2D Game Development Fundamentals",
      "url": "https://www.udemy.com/course/cocos-creator-2d-game-development-essentials/",
      "bio": "Create 2D games using Cocos Creator. Create Flappy Bird and Block Breaker clones as you learn to use Cocos Creator.",
      "objectives": [
        "How to create animations for 2D games",
        "How to use Box2D physics in Cocos Creator",
        "How to use JavaScript or Typescript to create 2D games",
        "A fast and easy way to make games",
        "Adding sounds and Effects to 2D games",
        "How to support multiple types of input from touch to keyboard and mouse",
        "How to manage game scenes and schedules",
        "How to work with the Cocos Creator framework to make 2D games"
      ],
      "course_content": {
        "Introduction": [
          "Why Cocos Creator?",
          "Getting Cocos Creator and setting up"
        ],
        "Basics": [
          "Creating a Project and the Basic Layout",
          "Node Properties and gizmos",
          "Creating a New scene"
        ],
        "Scripting Basics": [
          "Creating a Script Part 1",
          "Creating a Script Part 2",
          "Modifying Node Properties with a Script"
        ],
        "Handling Player Input": [
          "Handling Mouse Input",
          "Handling Touch Input",
          "Handling Keyboard Input"
        ],
        "Scenes": [
          "Switching between multiple scenes",
          "Pausing and Resuming scenes"
        ],
        "Working with Sound": [
          "Adding sound using the User Interface",
          "Adding Sound Using the Script - AudioEngine part 1",
          "Adding Sound Using the Script - AudioEngine Part 2"
        ],
        "2D Animations": [
          "Create 2D animations using the timeline",
          "writing scripts for animations and adding callbacks"
        ],
        "How to work with the Schedule method": [
          "Scheduling functions to run once, after an amount of time",
          "Scheduling functions to occur repeatedly",
          "Removing a Schedule or all schedules"
        ],
        "Physics - The Collision Manager": [
          "Collision Manager part 1",
          "Collision Manager part 2",
          "Collision Manager part 3",
          "Collision Manager part 4"
        ],
        "Physics - The Physics Manager": [
          "Physics Manager - RigidBody",
          "Physics Manager - Polygon Collider",
          "Physics Manager - RigidBody in code",
          "Physics Manager - Polygon Collider in code"
        ]
      },
      "requirements": [
        "Have some scripting or programming basics",
        "Computing basics on your preferred environment i.e. Windows or Mac",
        "Eagerness to Learn 2D game development"
      ],
      "description": "The Cocos family of game development tools are some of the most popular game development tools used in the industry today. Based off the cocos2D-X game engine, Cocos Creator offers a simpler, faster and more efficient way to create games. Cocos creator supports scripting, scene management, multi-resolution support, resource management, animation editing, physics support and the ability to publish your games to Desktop and Mobile platforms. Cocos Creator is the best way for anyone who has never done game development to jump in easily. The tool makes it easy for designers and programmers alike to be able to create awesome games in a highly efficient manner.",
      "target_audience": [
        "People interested in creating 2D mobile games for android and IOS",
        "cocos2d and cocos2D-x developers",
        "anyone wanting to learn a fast and easy way to create 2D games",
        "People who want to create 2D games for web platforms such as Facebook instant games, oppo instant games, qqplay, vivo instant games and WeChat games.",
        "Typescript or JavaScript developers beginners and pros alike",
        "New Cocos Creator users",
        "Those who want to begin their game development journey with 2D games"
      ]
    },
    {
      "title": "The advance guide for game environment design in Unreal 4",
      "url": "https://www.udemy.com/course/the-advance-guide-for-game-environment-design-in-unreal-4/",
      "bio": "Learn Unreal and Megascan by developing realistic game environment with this comprehensive guide from begin to finish",
      "objectives": [
        "Learn how to create a level in Unreal Engine 4 from scratch.",
        "Learn object placement and layout basics of assets in UE4",
        "Understand the Foliage system in UE4 to create great looking plants and trees for their games",
        "Understand how to setup lights, particles, and additional post-process assets to improve the visual look of their course",
        "Use Megascans and Megascans Studio to create unique and interesting textures.",
        "Know what qualities to look for when choosing, building, and rendering textures.",
        "Know what qualities make a \"good looking\" texture and how to emphasize that to create high quality work.",
        "Use Unreal to create stunning renders for use on their portfolios."
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Reviewing some of the quixel assets",
          "Importing some quixel assets"
        ],
        "Creating the rock part": [
          "Adding some rock cavern parts and creating our camera",
          "Creating our Cave with more rock blending",
          "Adding more rock walls",
          "Adding more rocks part",
          "Filling some holes of the walls",
          "Adjusting the rocks",
          "Finishing our walls"
        ],
        "Working in the floor landscape": [
          "Working in the floor landscape"
        ],
        "Working in the megascan materials": [
          "Making our blend material",
          "Finishing our blend material",
          "Copying some attributes from megascans mt"
        ],
        "Adding more details on the rock floor": [
          "Modifying the floor",
          "Adjust the landscape",
          "Adding some rock props",
          "Adding smaller rocks"
        ],
        "Adding sky to our scene": [
          "Adding sky to our scene",
          "Adding some fog"
        ],
        "Working in the rocks": [
          "Working in the rocks"
        ],
        "Adding some waterfalls": [
          "Adding some waterfalls",
          "Adjusting the scene",
          "Modifying our water material"
        ],
        "Adding lights and postprocess": [
          "Adding lights and postprocess"
        ],
        "Adding more foliage": [
          "Adding more foliage",
          "Adding tree branches",
          "Adding grass to our scene"
        ]
      },
      "requirements": [
        "Unreal Engine 4",
        "Megascan",
        "Basic knowledge of 3D"
      ],
      "description": "More about the Instructor:\nThis course is designed by Animation Hacks which is the visual effect studio with high-quality skill artist work on numerous unannounced projects. In addition, they enjoy sharing their knowledge with those students who learn 3D online.\nNOTE FOR STUDENTS - please take a look Section 1 / Lecture 1 to downloads for the source attachment link with the lesson.)",
      "target_audience": [
        "Beginners to UE4, or Advanced Students who want to expand their knowledge on the engine",
        "Students who are interested in creating realistic textures, materials, and assets.",
        "This course is also suit for professional-level UE4 artists",
        "Anyone interested in creating a high quality game environment",
        "Anyone who wants to learn how an AAA professional game artist approach environment creation"
      ]
    },
    {
      "title": "Practise Javascript: Code a Card Game in Phaser 3",
      "url": "https://www.udemy.com/course/practise-modern-javascript-by-coding-a-card-game/",
      "bio": "Covers ES6, Classes, Arrays, Objects, Functions, Phaser 3 and more!",
      "objectives": [
        "Javascript, phaser 3, animation, Figma and game design"
      ],
      "course_content": {
        "Introduction": [
          "What are we doing here?"
        ],
        "Let's Get Started!": [
          "Installing Visual Studio",
          "Getting Started",
          "Initial Javascript"
        ],
        "Assets": [
          "Assets",
          "Font",
          "Loading Assets"
        ],
        "It's definitely on the cards...": [
          "The Basis of all Cards...",
          "Using our CardBase",
          "Cards are a drag...",
          "The player card"
        ],
        "Off the grid...": [
          "CardGrid",
          "Card Types",
          "Grid"
        ],
        "The finishing line is in sight": [
          "OnDragEnd",
          "Front row seats!",
          "Death and taxes",
          "Tactics"
        ]
      },
      "requirements": [
        "Basic javascript knowledge"
      ],
      "description": "If you need to practise your javascript...\nIf you want to learn some new ES6 stuff...\nIf you have ever wanted to create a card game...\nThen this course is for you!\nYou will get experience using:\nES6\nClasses\nArrays\nObjects\nFunctions\nPhaser 3\nFigma\nBitmap Fonts (BMFont)\n\n\nCard games are a great way to learn some javascript and phaser fundamentals.\nThe game includes:\nDragging and dropping\nTweening\nImporting graphics and fonts\nButtons\n\n\nIf you have a computer and an internet connection, you have all you need to take this course! You don't need any expensive software and you certainly don't need any drawing or musical ability since all assets are provided. Of course if you want to use your own art and music... you can!\nIn less than 10 minutes you will be up and running, creating your very own card game!\nYou will then go on to create the full game with awesome graphics and a really unique RPG / card gameplay.\nThere is even a section on creating your own card designs in Figma!\nOnce you have created your game, it can be used as part of your resume or portfolio and will really make you stand out since it's not another boring 'To Do List'!\nFull source code is included.\nSo why not practise JavaScript the fun way and code a card game!\nI hope you enjoy the course!",
      "target_audience": [
        "Beginner Javascript developers"
      ]
    },
    {
      "title": "Build 2 Huge 3D Games in Unity: Complete C# & Blender Models",
      "url": "https://www.udemy.com/course/gamedevelopmentfundamentals/",
      "bio": "Become an independent developer who understands all sides to game development! Create 3D models for the games in Blender",
      "objectives": [
        "Make your own 3D art, models, and textures in Blender.",
        "Design, code, and model your own 3D games in Unity.",
        "Build video game levels with design and functionality.",
        "Create movement, blocks, powerups, finish lines, background, and interfaces."
      ],
      "course_content": {
        "Introduction to Unity": [
          "Introduction to Unity - Part 1",
          "Introduction to Unity - Part 2",
          "Unity Support"
        ],
        "Movement": [
          "PROJECT 1: Gameplay",
          "Movement - Part 1",
          "Movement - Part 2",
          "Movement - Part 3"
        ],
        "Building Blocks": [
          "Blocks - Part 1",
          "Blocks - Part 2"
        ],
        "Speed Blocks and Enemies": [
          "Speed Blocks and Enemies - Part 1",
          "Speed Blocks and Enemies - Part 2",
          "Speed Blocks and Enemies - Part 3"
        ],
        "More Enemies": [
          "More Enemies - Part 1",
          "More Enemies - Part 2"
        ],
        "Powerup and Finish Line": [
          "Powerup and Finish Line - Part 1",
          "Powerup and Finish Line - Part 2"
        ],
        "Background and Interface": [
          "Background and Interface - Part 1",
          "Background and Interface - Part 2",
          "Background and Interface - Part 3"
        ],
        "Fine Tuning the Game": [
          "Fine Tunings - Part 1",
          "Fine Tunings - Part 2",
          "Fine Tunings - Part 3"
        ],
        "Level Design": [
          "Level Design - Part 1",
          "Level Design - Part 2"
        ],
        "Introduction to Blender": [
          "Download and Install Blender",
          "Setting Up Blender",
          "Camera Controls",
          "Emulated Numbpad Camera",
          "Basic Object Manipulation",
          "Frequently Used Tools",
          "Mirror Modifier"
        ]
      },
      "requirements": [
        "Blender (for 3D modeling), Photoshop or a free program like Gimp (for 2D art/texturing), and Unity® (for coding).",
        "Mac/PC compatible! Recorded on a Mac."
      ],
      "description": "\"The more I get into this course the more I am so damn glad I got it! The teacher is amazing and goes in-depth with what he does. Loving everything so far!\" -James F, Mammoth Student.\nDo you want to learn Unity® from the ground up? This course is for you!\nBuild 2 Huge 3D Games in Unity: Complete C# & Blender Models is perfect for fans of Zelda and Metroidvania games. You'll build 2 satisfying games explained step by step!\n\"Instructor is very clear and he carefully explains each concept while demonstrating it. This appears to be an excellent course to start with, even if you've never coded in C# before.\"\nFunded by a #1 Kickstarter Project by Mammoth Interactive\nBuild video game levels.\nCreate your own materials.\nAnimate models to move in the game.\nCode in C# for Unity®.\nKnow the foundations of 3D model-making in Blender.\nUnwrap UV's and perform simple texturing of 3D art assets.\nBuild games that you can easily expand and customize.\nBuild 3D \"Legend of Zenda\" and Super Marlo Runner games in Unity® from scratch.\nNavigate the Unity® editor.\nFirst you will learn C# general programming. You'll learn how to write syntax, what it does, and how it functions. Mammoth Interactive instructor and game developer Glauco Pires will teach you the best examples on how C# programming is performed on objects.\nThen you will jump into coding 2 games with movement controls, camera controls, AI, ability acquisition, dungeon completion, and designing with Blender.\nIncluded in this course is material for beginners to get comfortable with the interfaces. Please note that we reuse this content in similar courses because it is introductory material. You can find some material in this course in the following related courses:\nHow to develop your first 7 games in Unreal and Unity\nBuild \"The Legend Of Zenda\" Game in Unity and Blender\nMake a 3D Unity Action Game & Low Poly Buildings in Blender\n28 Low Poly Models and a Unity® Game - Complete 3D Developer\nProfessional Game Development: 3D Modeling and Unity C#\nCreate 19 Low Poly Models & Your First 3D RPG In Unity® C#\nComplete Unity and Android Development: Build Games and Apps\nC# Masterclass: Make RPG & Mobile Games in Unity & Blender\nComplete a Runner Game with 19 3D Models (and Learn to Code)\nBuild and model a Super MARLO runner clone in Unity\nBuild 43 Models & a 3D Runner Game in Unity® with C# Code\nUltimate Guide to Blender & Unity: Game Design & Development\nMake a Fully Featured Game: Code in C#, Make Low Poly Models\nMake a Unity Platform Game & Low Poly Characters in Blender\nMake Games and Web Apps: Unity, React and Redux Masterclass\nWhat Makes this Mammoth Interactive course unique?\nLearn to make both the code and art for games FROM SCRATCH\nUnderstand thoroughly how to develop characters in Blender\nLearn many new techniques for UV Mapping game characters.\nLessons are straight to the point and easy to follow. If you want to learn the more intermediate to advanced coding techniques required for games, enroll now while this Mammoth Interactive course is on sale!\nA Huge Library of Steps\nYou don't need to have any programming, Unity®, or Blender experience. This course is paced for beginners, making it super easy to understand. Enroll now in this special offer of a great tutorial package!\nLearn a Cross-Platform Game Engine\nUnity® is one of the most popular platforms in game development. You can use Unity® to build 2D and 3D games. Unity® is cross-platform and easy to use with other platforms. Learn all about Unity® in Build 2 Huge 3D Games in Unity: Complete C# & Blender Models.\nBuild 3D Art Assets in a Popular Production Suite\nYou will learn to create 3D models for games in Blender. You build all the art assets for the games, including characters, weapons, enemies, cannon, dungeon, and temple. You'll learn how to integrate your art from Blender into Unity®.\nWhy Should You Learn Blender?\nBlender, like Unity®, is a popular production suite that is free to download.\nBlender is a revolutionary tool for making 3D art digitally.\nWith Blender, you can make art assets for games, like in this Mammoth Interactive course.\nBecome an independent developer who understands all sides to game development\nEnroll Now for Lifetime Access",
      "target_audience": [
        "Anyone who wants to design and build their own 3D game.",
        "Anyone who wants to learn Unity® or Blender.",
        "Anyone who wants to learn game development.",
        "This course assumes you know a little about Unity® and Blender."
      ]
    },
    {
      "title": "Unity Games Lock and Unlock System - Build Pokémon Ball Game",
      "url": "https://www.udemy.com/course/unity-games-lock-and-unlock-system-course/",
      "bio": "Everything you need to build your pro games from scratch, Build game levels, character selector, audio & setting manager",
      "objectives": [
        "Master Unity Advanced Topics, Serialization, Pooling, Animation",
        "Master Unity Menus and UI Design",
        "Program And Solve Complicated Problems Using C#",
        "Create Your Own Professional Games and Game Template",
        "Organize Project, Slice And Animate Sprites",
        "Learn In depth How to Use Unity UI System (scaled mode, anchored mode)",
        "Learn Unitys Physics System",
        "Save Your Game Data Using JSON",
        "Create Level And Character Lock/Unlock System",
        "Build Multilayered Music, Audio Management In Your Game"
      ],
      "course_content": {},
      "requirements": [
        "Unity 5 Game Engine (Free Version)",
        "Basic Programming Logic"
      ],
      "description": "First course to teach you how to build your game template from scratch with c# and unity best practices, Build your fully featured lock system for levels, characters and many more  and reuse it for your rest of upcoming games.\n*** All Games Are Created In Unity Version 5.3+ ***\nThis is a course I wish I had when I first started to learn game development.\nThe course is completely project based, and we are going to create full featured games from scratch using Unity Game Engine.\nYou will also benefit from my super-fast response if you have any issue that you are stuck with (I check Udemy forums every day if someone posts a question). And all the students taking the course will also be there to help you!\nAll project files and lessons source code will be included and you are free to use them for anything that you like, personal or commercial use!\nLet's take a look at the games that we are going to create inside of this course:\nFirst thing we are going to design and build Pokemon game layout, we are going to show you how to convert psd templates into real game ui using step by step approach, this is a really nice way of teaching if you are familiar with psd to html, psd to app, psd to games before, If not don't worry we are going to teach you everything from scratch.\nAfter illustration phase we are going to build advance Levels user interface, and will introduce you to JSON objects and the way to do serialization to maintain games data.\nNext, we are going to show how to build your own Game Storage Manager, to store and load the different data of your games in the permanent storage. You will learn how to build responsive 2D slider using the anchoring system in Unity, this part is exclusively prepared to make sure you master advanced UI and anchoring techniques.\nData binding is one of the important techniques that we are going to cover once we design Pokémon slider and add menu levels control.\nImplement advanced controllable layered shared audio, music, sounds manager between scenes.\nAfter all the previous steps we are going to build the core of Pokémon Ball Game, Covering all the physics and game play concepts and techniques such as adding game Joystick controller, advanced Game Objects Dynamic Pool. We will make Game Scene Manager and show you how to make Count Up and Down Timer, achieve coins collection, game actions and we are going to show you how to use SceneManagment and Load Scene Async.\nWork with different audio layers and add game sounds SFX, One and Second Shot Audio Layers.\nWe are going to cover Canvas Scalar and GridLayout concepts for Levels Slider.\nApply some of retention concept in games development by adding characters selection, purchase, and lock, unlock between the scenes inside the game and activate dependent levels lock, unlock system for the different levels inside the game.\nWhat You will learn?\nResponsive Unity Interface\nIntermediate C# Programming\nAdvanced C# Programming\nImporting And Organizing Assets\nDesign Game Layout\nSlicing Sprites\nAnimating Sprites\nLearn How To Use Unitys New UI System\nCreating Menus\nAdvance Levels UI, JSON Serialization\nCreate Game Storage Manager\n2D Responsive Slider\nMaster Prefabs usage in Unity\nImplement Shared Audio, Music, Sounds Manager between scenes\nBind Data to Pokemon Slider,Add Menu levels Control\nDevelop Core of Pokemon Ball Game\nAdd Game Joystick Controller\nObjects Dynamic Pool\nBuild Game Scene Manager, Count Up and Down Timer\nCoins Collection, Basic Game Actions, Load Scene Async\nGame Sounds SFX, One and Second Shot Audio Layers\nCanvas Scalar and GridLayout Levels Slider\nCharacters Selection\nImplement Characters Selection between the scenes\nActivate dependent levels lock, unlock system\nCreating Cool Animations\nUnderstand And Use Unitys Physics System\nSaving Game Data Using Preferences Input/Output\nCreating Character And Level Select Menu\nCreating Character And Level Lock Unlock System\nUsing Game Controllers To Control The Workflow Of Your Game\nCreate In-App Purchase To Sell Virtual Items To Your User\nIP (In Progress) -Implement Social Media In Your Game(Facebook and Tweeter)\nIP-Share On Facebook From Your Game\nIP-Create Share On Facebook Earn Virtual Item System In Your Game\nIP-Implement Interstitial Ads\nIP-Implement Video Ads\nIP-Create A Watch Video Earn Virtual Item System In Your Game\nIP-Implement Google Leaderboards And Achievements In Your Game\nThat And Much More Is Awaiting For You In This Course\nWhat this course DOES NOT cover :\nThe course teaches everything from basic to more advanced stuff on how to plan, design, develop and publish your game, however the course WILL NOT teach you every single aspect of Unity and how to use it because it's impossible to teach everything.\nUsing what you obtain in this course, you will be equipped with more than enough knowledge in order to continue improving yourself in the field of game development, using Unity or any other game engine.\nIf You ever had an idea for an awesome game, then enroll in this course and learn the tools that you need to develop Your next hit game!!!\nWhat Is Your Risk By Taking This Course?\nNothing!! If you are not satisfied with the course, I promise I will give you a full refund of your money NO questions asked!!\nEnroll Now!! You Will More Than Happy!",
      "target_audience": [
        "C# Developer",
        "Unity Beginners",
        "Games Developers",
        "Game Development Beginners",
        "Experienced Game Developers",
        "Anyone Who Wants To Learn Game Development",
        "Complete Beginners"
      ]
    },
    {
      "title": "Connect 4 Game Programming Course for Unity 3D",
      "url": "https://www.udemy.com/course/connect-4-game-programming-course-for-unity-3d/",
      "bio": "Learn how to create your own 3D Connect 4 Game using the Unity Game Engine.",
      "objectives": [
        "Learn how to create Connect 4 Game in Unity 3D",
        "Learn to create turn based games.",
        "Learn basic C#: for loops, foreach loops, int, string, float, functions, classes ...",
        "Learn how to build AI in Unity using Minimax algorythm."
      ],
      "course_content": {
        "Connect 4: Introduction": [
          "Introduction",
          "Unity Setup & Navigation",
          "Importing 3D Models"
        ],
        "Connect 4: Player Vs Player": [
          "Playfield Setup",
          "The Start Point",
          "The Playfield Script",
          "Drop Coin Function",
          "Debug Board",
          "Understanding the Board",
          "The GameManager",
          "Click the Column",
          "Dropping Coins #1",
          "Dropping Coins #2",
          "Dropping Coins #3",
          "Switching Players",
          "Horizontal Win Check",
          "Coding Horizontal Win",
          "Vertical Win Check",
          "Coding Vertical Win",
          "Diagonal Win Check",
          "Coding Diagonal Win",
          "Win Condition",
          "Playfield Design",
          "Info Box",
          "Coding Info Box"
        ],
        "Connect 4: Player Vs AI": [
          "Explaining Advance AI",
          "AI Move Class",
          "Get Valid Moves",
          "Best Move Function #1",
          "Best Move Function #2",
          "Minimax #1",
          "Minimax #2",
          "Best Move Function #3",
          "Board Evaluation",
          "Horizontal Evaluation #1",
          "Horizontal Evaluation #2",
          "Horizontal Evaluation 3",
          "Vertical Evaluation",
          "Diagonal Evaluation",
          "Alpha Beta Pruning",
          "Bug Fix Best Move",
          "Create Highlight Circles",
          "Coding Highlight Circles"
        ],
        "Connect 4: Menu Scene": [
          "Creating Menu Scene 1",
          "Creating Menu Scene 2",
          "Animating Menu Buttons",
          "Element Animations",
          "Difficulty Menu",
          "Selected Button Order",
          "Button Functions"
        ],
        "Connect 4: Final Touches": [
          "Set Difficulty",
          "Game Over Panel",
          "Win Circles Hierarchy"
        ],
        "Connect 4: Conclusion & Bonus": [
          "Conclusion"
        ]
      },
      "requirements": [
        "Basic knowledge in Unity and C# is a plus, but not a must have."
      ],
      "description": "Connect 4 is a fun game that can be played with friends, family, and classmates. It's a game of strategy and luck. In this course, we'll learn how to create Connect 4 in Unity. We'll also go a little deeper and create an AI for the player to play against. Come join me on this journey to learn Connect 4!\nThis course is a Beginner/Intermediate course, so if you have trouble in any case, write me a message or Q&A, and i'll help as best as i can.\nIf you are beginner, you might have some trouble to follow, but the videos will guide you through the complete course. Don't forget: You only become better if you repeat things and keep on learning!\n\n\nUnity (2021) Course Content:\nYou will learn to create a new 3D Project in Unity and set up everything needed\nI will show you how you to setup the playfield and create the game mechanics.\nI will show you to interact with the game board and drop coins into it\nWe create a beautiful game menu\nC#\nWe take a look into coding basics like: int, float, string, bool, for-loops, foreach-loops, 2D Array, List ...\nWe will put in functionality with scripts using Visual Studio Code and C# (you can use any other IDE)\nAlso we implement create a 1 vs 1 Player game first, so the main game is working\nWe create an AI using Minimax Algorythm with Heuristic board evaluations (Intermediate)\n\n\nCourse Material:\n3D Model Connect 4 Board\n2x 3D Model Coins\nSome Checker Texture\nButtons and a Background 2D Sprite to create a beautiful Connect 4 Menu.\nYou have to write the code on your own, i do not provide the final scripts!\nAll other graphics for Menu's, Icons, Images or Buttons need to be created on your own.\nAll Materials i provide are for education only and should not be in your final release!\nConclusion\nIn the end of this course you will have a fully functional Connect 4 3D Game.\nChallenge:\nAfter you have created nice Menus, Buttons, and maybe additional content, upload the Game to any Gaming Website like: itch io, Google Playstore, Apple Store or even Windows Store or Steam.\nSo what are you waiting for?\nLet's make your dream game a reality!!",
      "target_audience": [
        "Unity and C# beginners.",
        "C# intermediates to learn Minimax algorythm."
      ]
    },
    {
      "title": "Physics For Unity 6.2 & C# - Lifetime Access",
      "url": "https://www.udemy.com/course/physics-for-unity/",
      "bio": "Create Games With Confidence | Everything for 2D And 3D | Unity 6 C# Source-Code",
      "objectives": [
        "All downloadable code updated for Unity 6",
        "Master the 2D & 3D Physics systems",
        "Learn how and when to integrate Physics in your game projects",
        "Turn game design mechanics into practical Physics solutions",
        "Program C# for the most common and powerful Physics tasks",
        "Grasp key advanced topics and understand the future of Unity Physics",
        "SAMPLE GAME: Create a clone of the Angry Birds 2D game using collision detection",
        "SAMPLE GAME: Create a clone of the Marble Madness 3D game using Physics forces"
      ],
      "course_content": {
        "Course Preview": [
          "Course Preview ( English )",
          "Course Preview ( French / Français )",
          "Course Preview ( Spanish / Español )",
          "Course Preview ( Portuguese / Português )",
          "Course Preview ( Japanese / 日本語 )"
        ],
        "Course Introduction": [
          "Integration, Collision Detection, and Collision Resolution",
          "Udemy's Early Review Prompt",
          "Unity’s Physics System (Past, Present, and Future)",
          "Unity’s Physics Project Settings",
          "Physics Lifecycle, Physics.Simulate(), and Time Dilation",
          "Course Resources",
          "Section Coding Exercise",
          "Section Quiz"
        ],
        "Unity 2D Physics": [
          "The Rigidbody2D Component",
          "The Collider2D Component",
          "2D Effectors",
          "2D Joints",
          "Physics for Unity Sprite Shape",
          "Section Quiz"
        ],
        "Unity 3D Physics": [
          "Rigidbody & Collider For 3D",
          "The Physics Material Asset",
          "3D Joints",
          "Ragdoll Physics",
          "Terrain Physics",
          "Section Quiz"
        ],
        "Unity C# Physics": [
          "OnCollision Events and the Collision Object",
          "OnTrigger Events and the Collider Object",
          "Adding Programmatic Forces",
          "isSleeping, isKinematic, useGravity, and Velocity",
          "Physics.Raycast (), RaycastCommand, & ScheduleBatch ()",
          "Physics Debugging: Debug.DrawRay (), Physics Debugger Window, & Profiler Window",
          "Section Quiz"
        ],
        "Sample Game Project 1 - Angry Birds - 2D Clone": [
          "2D Project Setup",
          "Creating the Player and Input",
          "Creating the Obstacles",
          "Adding Win/Loss Conditions",
          "Adding Extra Polish",
          "Section Quiz"
        ],
        "Sample Game Project 2 - Marble Madness - 3D Clone": [
          "3D Project Setup",
          "Creating the Player and Input",
          "Creating the Obstacles",
          "Adding Win/Loss Conditions",
          "Adding Extra Polish",
          "Section Quiz"
        ],
        "EXTRA Content": [
          "Best Practices with Physics",
          "Optimizing Physics",
          "Predicting Physics Trajectory",
          "DOTS for Unity Physics",
          "Section Quiz",
          "More Thoughts..."
        ],
        "Thank You!": [
          "Section Assignment - Course Review"
        ]
      },
      "requirements": [
        "COMPUTER: Windows or Mac",
        "SOFTWARE: Course includes links. All are free! (Unity, C# Editor, & Web Browser)",
        "EXPERIENCE with Unity: Beginner / Intermediate. Including several hours or more of Unity fundamentals",
        "KNOWLEDGE with C#: Including basics; Variables, functions, if/else, loops, ..."
      ],
      "description": "Welcome to Physics For Unity!\n\n\nUNITY 6:\nCourse Content: These lessons apply to current and future versions of Unity 6\nCourse Downloads: All downloadable source-code has been updated to Unity 6\n\n\nCAPTIONS:\n• English: All videos have English subtitles. (Audio/Video/Text Content is in English)\n• French: Toutes les vidéos sont sous-titrées en Français. (Audio/Video/Text Content is in English)\n• Japanese: ビデオはすべて日本語字幕付き. (Audio/Video/Text Content is in English)\n• Portuguese: Todos os vídeos têm legendas em Português. (Audio/Video/Text Content is in English)\n• Spanish: Todos los vídeos tienen subtítulos en Español. (Audio/Video/Text Content is in English)\n• Turkish: Tüm videolar Türkçe altyazılıdır. (Audio/Video/Text Content is in English)\n\n\nGame physics is a vital skill for developers who want to add fun, variety, and realism to their games. Unity physics functionality includes collision detection, collision resolution, and spatial queries. This course covers the theory, components, C# programming for these fundamentals and more. Put your new knowledge into practice with the two complete sample game projects included in the course.\n\n\nThis course gives you the training to create and maintain Unity physics projects which are fun to develop and popular with users.\n\n\nFEATURES:\n• Rockstar content - Everything you DO need. Just the most relevant, powerful info!\n• Punk-rock editing - Nothing you DON'T need. No \"ums\", no waiting, no fluff!\n\n\nBENEFITS OF GAME PHYSICS:\n• Physics is Fun! - Creating Physics games is fun and playing them is fun too\n• Physics is Emergent! - Simply adding Physics into your gameplay adds variety and a wow-factor that users will love. Surprise your users with a freshness that keeps them coming back to play more\n• Physics is Educational! - The Unity engine includes Physics solvers based on academically rigorous approaches. Developers and players can learn more about the science just by playing\n\n\nTAKEAWAY:\n• After this course you will be confident to design and develop new Physics projects with Unity\n\n\nINCLUDED SECTIONS:\n• Course Introduction - Set the vision and goals for the course. Learn the many benefits of game Physics for your projects. We cover everything from 2D, to 3D, to C# programming\n• Unity 2D Physics - Learn the fundamentals; Rigidbody, Colliders, Effectors, Joints, and more!\n• Unity 3D Physics - Level-up your skills; PhysicMaterial, Bounciness, Friction, Ragdolls, & Terrain\n• Unity C# Physics - Dive deep into programming; OnCollision, OnTrigger, Collisions, Colliders, & Forces\n• Sample Projects - Together we'll create 2 complete Unity game projects. All source-code is provided to students to create your own projects inspired by the world-famous 2D game and arcade classic 3D game\n• EXTRA Content - Polish your skills with with these best practices and optimization techniques. You will naturally produce cleaner, more readable, and manageable projects\n\n\nINCLUDED UNITY C# SAMPLE PROJECTS:\n• 1. Angry Birds (Clone) - A complete 2D Unity Physics game. Master the Physics tricks used by the world-famous game for Console, PC, & Mobile. Build the project from scratch with Unity 2D Components\n• 2. Marble Madness (Clone) - A complete 3D Unity Physics game. Learn from a game that started the Physics revolution. Create this arcade classic in Unity with C# Physics\n\n\nINCLUDED ASSETS:\n• Section Videos - High-quality HD video content covering all course topics\n• Section Source Code- Full C# scripting and complete Unity projects included for download\n• Section Quiz - Ensure you digested all vital info before moving forward\n\n\nWHY LEARN UNITY?\n• Unity is a versatile game engine which can be used for creating simulations, prototypes, and games\n• Over 70% of the top 1000 mobile games are created using Unity Technology\n• Deploys to PC, Xbox, PlayStation, iOS, & Android, WebGL, AR/VR, and more!\n\n\nWHY LEARN UNITY PHYSICS?\n• Get hired! The course fundamentals prepares you for Physics-related game development jobs\n• Get promoted! Game Physics is an in-demand skill that teams and leadership value in game development\n• Get it done! Create better projects, more quickly so you can launch your next project on schedule\n\n\nEXTRA: WHY LEARN UNIT TESTING & TDD?\n• 1. Accelerate new features - With testing, developers focus on a small batch of code at a time, not moving on to the next bit until they are done with their batch. This gets results\n• 2. Level-up your maintenance - With Test-Driven Development ( TDD ), developers naturally produce cleaner, more readable, and manageable code\n• 3. Fail fast & Communicate clearly - Get feedback quickly and improve your solutions. Leave a legacy of unit testing in your codebase which will serve as the best, living documentation\n\n\nWHY LEARN WITH SAMUEL ASHER RIVELLO?\n• Sam is a Unity Certified Developer with over 20 years of experience creating games and teaching software design\n• Sam empowers game teams with custom editor tooling for improved workflows ( Game Design, Level Design, 3D Modelers, 3D Animators )\n• Sam is an author and editor, including Adobe, Future Publishing UK, Packt Publishing, and O’Reilly\n\n\nWHY WAIT?\n• Avoid the common pitfalls with creating, maintaining, and scaling Unity projects\n• You can't afford NOT to use 2D & 3D Physics in your projects\n• Let's do this!",
      "target_audience": [
        "Learn to CREATE Unity Physics projects with confidence, performance, and scalability",
        "You will AVOID the most common bugs that often occur in Unity Physics projects",
        "You will COLLABORATE on high-quality, profitable Unity projects with talented teams"
      ]
    },
    {
      "title": "Unity 2D and C# - A Practical Game-Dev Course",
      "url": "https://www.udemy.com/course/unity-2d-with-c-complete-game-dev-course/",
      "bio": "Create the complete 2D survival game in Unity with C#. Learn game development patterns. Become an Indie developer.",
      "objectives": [
        "Get an understanding of game development in practical and fun way.",
        "Create a complete game that will shine in your portfolio.",
        "Use gained knowledge to start creating Indie games.",
        "Establish yourself in the field of the exciting game development."
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Requirements",
          "How to resolve issues",
          "Ask For Help"
        ],
        "Environment": [
          "Init Project",
          "Assets",
          "Environment Tilesets",
          "Add Player",
          "Player Controller",
          "AI - Transform",
          "Follow Camera"
        ],
        "Player Controller": [
          "Player Input Handler",
          "Input Reader",
          "AI Scriptable Objects",
          "Action Delegates",
          "Player Movement",
          "Target Speed"
        ],
        "Animation & Movement": [
          "Idle Animation",
          "Running Animation",
          "Movement Blend",
          "Blend Tree",
          "Set Animation Speed",
          "Character Behaviour",
          "Flip Sprite",
          "Skeleton Enemy"
        ],
        "StateMachine Beginnings": [
          "State Machine Start",
          "StateSO init",
          "Statemachine refactor",
          "Create State",
          "Initial all states",
          "StateAction Init",
          "Follow Player Action",
          "Initialize State Actions",
          "AI StateMachine"
        ],
        "Follow Player": [
          "Awake Function",
          "Game Manager",
          "Get Player in Manager",
          "Move towards player",
          "Speed Modifier in SO",
          "Set Colliders on Player and Enemy",
          "Distance to Keep"
        ],
        "Receive Damage": [
          "Prefabs",
          "Player Prefab",
          "Adds collision with enemy",
          "Damageable",
          "Damage Interval"
        ],
        "Damage Effect": [
          "Sprite Flash Start",
          "Flash Coroutine",
          "Flash Color",
          "Flip in player direction action",
          "Flip the enemy",
          "Effect Particles",
          "Play Effect",
          "Particles Update"
        ],
        "Health Bar": [
          "Health Bar Canvas",
          "Int Value SO",
          "AI Int Value",
          "Player Health",
          "Add Health to Damageable",
          "Slider Bar",
          "Health Bar"
        ],
        "Damage UI": [
          "Damage Text Canvas",
          "Damage Text Animation",
          "Destroy text on animation exit",
          "UI Manager",
          "Damage display script",
          "Provide correct position for damage"
        ]
      },
      "requirements": [
        "Base knowledge of C# and Unity - The course doesn't cover basics"
      ],
      "description": "What is Unity?\nUnity is a versatile cross-platform game engine, with editor support for Windows, macOS, and Linux. The engine itself allows game development for over 25 platforms, including mobile, desktop, consoles, and virtual reality.\n\n\nWhat Will We Build?\nPrepare for an immersive journey as we dive into the creation of a compelling 2D survival game with a top-down perspective, aptly named \"Undead Survival.\" Throughout this course, you'll not only build a game but gain invaluable insights into various game development aspects.\n\n\nProject - Undead Survival:\nThe primary focus of this course is to guide participants in constructing an entire game from the ground up. The game's objective is to challenge players to endure relentless waves of enemies, striving to survive for as long as possible against an unending onslaught\n\n\nHere's an in-depth look at what you'll construct:\n\n\nSurvival Dynamics: Implement a captivating survival concept, challenging players to endure relentless waves of enemies.\nScriptable Objects: Utilize Scriptable Objects for a modular and reusable game structure.\nState Machine Mastery: Dive into State Machine intricacies for dynamic NPC behaviors with adaptable state transitions.\nVersatile Ability System: Develop diverse player and enemy abilities with customizable stats using scriptable objects.\nEnemy Spawning: Implement a dynamic enemy spawning mechanism for an ever-evolving challenge.\nUI for Game Stats: Create an intuitive UI system to display crucial game statistics in real-time.\nDamage and Health System: Construct a comprehensive system for balanced player and enemy health management.\nStart/Options Menu: Design a user-friendly menu with navigation and protagonist selection features.\nScore Screen and Replay: Implement a score screen for player achievements and seamless replay functionality.\nFocus on Reusability: Emphasize creating reusable systems and components for efficient game development.\n\n\nMain Goal:\nThe course's primary objective is to teach the creation of reusable systems applicable to various games. Emphasis is placed on the reusability of each component, fostering a deep understanding of how to construct flexible and efficient game development systems.",
      "target_audience": [
        "Anybody interested in Game Development and Coding",
        "People looking for a practical game development guide.",
        "This course is for everyone eager to understand how to build a game from scratch."
      ]
    },
    {
      "title": "Intro to Procedural Modeling with Houdini",
      "url": "https://www.udemy.com/course/intro-to-procedural-modeling-with-houdini/",
      "bio": "Procedural Generate Geometry with Houdini!",
      "objectives": [
        "Utilize the Powerful Houdini Node based Workflow",
        "Understand how to connect nodes together to create procedural systems",
        "Build your own procedural models for use in your own game projects"
      ],
      "course_content": {
        "Introduction to Proceduralism": [
          "Introduction",
          "Houdini Primitives",
          "Procedural Transformations",
          "Copy Me!",
          "Utilizing Point Data",
          "Procedural Grouping",
          "Delete it!",
          "Sweeps and Curves"
        ],
        "Course Project": [
          "Creating a Procedural Stair Asset - Part 1",
          "Creating a Procedural Stair Asset - Part 2",
          "Creating a Procedural Stair Asset - Part 3"
        ]
      },
      "requirements": [
        "Some experience with a 3D package",
        "A copy of the free Houdini Apprentice"
      ],
      "description": "Houdini is a very powerful 3D software application that has the ability to create procedural assets for Movies and games. It is more widely known in the movie industry but it is becoming more and more integrated into the game development pipeline. Throughout this course we will cover the crucial information to make anyone successful in their procedural modeling adventures, using Houdini.\nWith each lesson we will take you from beginner to a Houdini modeling expert by covering some of the basic nodes that every procedural modeling graph begins with. The course will begin by walking through each of the basic primitives available so that you have a good understanding of the types of geometry you can start with. As we move towards the middle of the course, we will take a look and learn how to set up common procedural algorithms, that produce the procedural models you see in games and movies today!\nFinally we will close out this course by performing a small procedural modeling project. We will create a procedural staircase, that allows you to change the number of stairs, the height, width, and depth of the stairs, as well as the colors of the stairs. By creating this proceudural project, you will get practical training in a procedural modeling pipeline.",
      "target_audience": [
        "If you have any desire to want to make procedural models",
        "If you have a drive to want to begin using the Houdini 3D package",
        "If procedural modeling is something you have always been interested in but didnt know where to start, then this course is for you!"
      ]
    },
    {
      "title": "Learn Map-making in Minecraft",
      "url": "https://www.udemy.com/course/learn-map-making-in-minecraft/",
      "bio": "A complete guide to building maps and using commands in Minecraft.",
      "objectives": [
        "How to build professional custom maps",
        "The fundamentals of coding in Minecraft",
        "Designing and implementing resource and data packs (Java edition)"
      ],
      "course_content": {
        "Introduction": [
          "Welcome to the Course",
          "Java or Bedrock?"
        ],
        "Setting Up Your World": [
          "Creating the Perfect World",
          "Setting the Rules",
          "Creating a Spawnpoint"
        ],
        "The Commands": [
          "Using Command Blocks",
          "Teleporting",
          "Entity Selectors",
          "Creating Particle Effects",
          "Adding Sound Effects",
          "JSON Text and Titles",
          "The Tellraw Command",
          "The Give Command",
          "Accessing NBT Data",
          "The Summon Command",
          "The Execute Command"
        ],
        "Scoreboards and Tags": [
          "Setting up a Scoreboard",
          "Manipulating Scores",
          "Scoreboard Maths",
          "Using the Trigger Criteria",
          "The Tag Command",
          "Teams"
        ],
        "Dynamic Map Features": [
          "The Setblock Command",
          "The Fill Command",
          "The Clone Command",
          "Structure Blocks"
        ],
        "Manipulating Mobs": [
          "Creating NPCs",
          "Custom Paths",
          "Better Trading",
          "Armor Stand Mechanics",
          "Boss Battles"
        ],
        "Designing and Implementing Resource Packs (Java Edition)": [
          "Creating a Basic Resource Pack",
          "Adding Custom Textures",
          "Adding Custom Sounds",
          "Altering Block Models"
        ],
        "Short Cuts and Optimisation": [
          "Datapacks (Java Edition)",
          "Functions (Java Edition)",
          "Using Spawn Eggs"
        ],
        "Putting Your Work Out There": [
          "Extracting Your Map",
          "Sharing Your Map"
        ],
        "Conclusion": [
          "Conclusion"
        ]
      },
      "requirements": [
        "A copy of Minecraft (any edition)"
      ],
      "description": "Welcome to my course on Map-making in Minecraft!\nSince the game's initial release, players have been sharing their creations among the Minecraft community: creating custom adventures and dazzling structures for other users to enjoy. With each new update of the game, the players are able to produce greater functionality in their maps - leading to some incredibly intelligent creations.\nHowever, for a lot of people who don't have the coding know-how, map-making can be a daunting task. This course is designed to teach you the fundamentals of using commands and designing worlds in Minecraft, without having to learn the complicated programming behind them.\nIn over 40 lectures, we'll cover everything from setting up your perfect world, to concatenating commands, to designing your own resource packs. By the end of this course, you'll be able to produce your own command contraptions, design and optimise your worlds efficiently, and share your masterpieces with the community.",
      "target_audience": [
        "Aspiring or established map-makers seeking to learn more",
        "Minecraft players who want to learn something fun and new about the game",
        "Game developers looking for good practice"
      ]
    },
    {
      "title": "Unity Game Tutorial: Pinball 3D",
      "url": "https://www.udemy.com/course/unity-game-tutorial-pinball-3d/",
      "bio": "Learn how to create a Pinball Game with Unity Game Engine.",
      "objectives": [
        "How to create a 3D Pinball Game in Unity",
        "Physics in Games",
        "C# Basics and Functions",
        "A bit of Editor Scripting (Advance)",
        "Structured Game Development"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Concepting": [
          "#1 Overview",
          "#2 Concepts of Pinball Games",
          "Unity Setup"
        ],
        "The Desk": [
          "Importing 3D Models",
          "Colliders",
          "Gravity",
          "Clean Up",
          "Camera Setting",
          "Slingshot & Bumper",
          "Bumper Setup #1",
          "Bumper Setup #2",
          "Physical Material",
          "Bumper Animation",
          "Slingshots & Speed",
          "Flippers Setup #1",
          "Flippers Setup #2",
          "Fixing the Playfield",
          "Ramps",
          "Flipper and Ramp Update",
          "More Elements",
          "Switches",
          "Targets",
          "More 3D Parts",
          "The Rail",
          "Playfield Fixes",
          "Materials",
          "Plunger Script",
          "Plunger Animation"
        ],
        "Mission Scripting": [
          "Mission Script #1",
          "Mission Script #2",
          "Mission Manager #1",
          "Starting Missions",
          "Mission Timer",
          "Updating Mission",
          "Mission Sensor",
          "Sensor Setup",
          "Updating Sensors"
        ],
        "Mission Editor Scripting": [
          "Mission Editor #1",
          "Mission Editor #2",
          "Mission Editor #3",
          "Mission Editor #4",
          "Mission Editor #5"
        ],
        "Light Shows": [
          "Light Shows #1",
          "Light Shows #2 - Single Mode",
          "Light Shows #3 - Airplane Mode",
          "Light Show #4 - Ping Pong Mode",
          "Light Show #5 - All At Once Mode",
          "Connect Lightshow to Mission"
        ],
        "Targets": [
          "Target Animation",
          "Targets Animation Settings",
          "Target Script",
          "TargetSet Script",
          "Target Mission",
          "Target Lightshow",
          "Top Protection"
        ],
        "Game Manager": [
          "Spawn Balls",
          "Losing Balls",
          "Setup all Lose Functions",
          "Multiball Spawn",
          "Trigger Multiball"
        ],
        "Score and UI": [
          "Score Manager",
          "UI Canvas",
          "UI Manager",
          "Game Over Logic",
          "Game Over UI",
          "Conclusion",
          "Thank you"
        ]
      },
      "requirements": [
        "A PC or Mac",
        "Mouse and Keyboard",
        "The mood to finish the course",
        "The will to learn Game Development"
      ],
      "description": "In this Course you'll learn how to create Pinball games with Unity Engine. Physical games are loved by a lot Players all over the world. I will show you step by step how you can create Pinball Maschines.\nThis course is a Beginner course, so if you have trouble in any case, write me a message or Q&A, and i'll help as best as i can.\nIf you are beginner, you might have some trouble to follow, but the videos will guide you through the complete course. Don't forget you only become better if you repeat things and keep on learning!\nSo we create Systems which will give us the freedom to:\nC# (Monodevelop)\nPinball Missions (time based and non-time based)\nEditor Scripting\nBasic C# int, float, string, classes\nLightshows for highlighting Targets using Sprites\nUnity (2019.1)\nBumpers, Slingshot, Plunger, Flippers\nwe create Game Logic for Losing & Scoring\nwe create a Single Scene for just the Game\nwe create a Game Over Panel\nwe create 1 Simple Pinball Maschine\nwe animate Bumpers and Targets\nwe learn physics and all needed components\nCourse Material\nI provide the following Material with the Course:\nMultiple 3D Models for the desk, you can always use your own.\nYou have to write the code on your own, i do not provide the final scripts!\nAll other graphics for Menu's, Icons, Images or Buttons need to be created on your own.\nAll Materials i provide are for education only and should not be in your final release!\nConclusion\nIn the end of this course you will have a fully functional 3D Pinball Game. You just need to create your own menu scene and maybe more desks.\nChallenge\nAfter you have created nice Menus, Buttons, and maybe additional content, upload the Game to any Gaming Website, Google Playstore, Apple Store or even Windows Store or Steam.\nSo what are you waiting for?\nLet's make your dream game a reality!!\nLevel: Beginner\nVideo Course Length: ~9.5 hours\nUnity Version required: 5.6+",
      "target_audience": [
        "Game intusiasts",
        "Pinball Game Lovers",
        "Beginner Game Developers"
      ]
    },
    {
      "title": "Substance Designer - Wood, Wood Floors & Wood Carving",
      "url": "https://www.udemy.com/course/substance-designer-wood-wood-floors-wood-carving/",
      "bio": "Using reusable masks to create a variety of different wooden textures",
      "objectives": [
        "Create procedural wood, wood flooring and wood carving materials.",
        "Create reusable nodes to apply carved designs to any material"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Basic Wood Material": [
          "Building the Color Grain Mask",
          "Building the Wood Rings Mask",
          "Building a Stand-Alone Woodgrain FX Map",
          "Setting up the Polish Input",
          "Building the Fine & Rough Grain Masks",
          "Setting up the Color",
          "Fine Tuning the Color Inputs & Functions",
          "Setting up the Normals",
          "Setting up the Height",
          "Setting up the Roughness",
          "Setting up the Specular Level & Fine Tuning"
        ],
        "Wood Flooring": [
          "Intro to the Flooring Section",
          "Parquet Flooring - Beginning the Mask",
          "Parquet Flooring - Finishing the Mask",
          "Parquet Flooring - Making the Material",
          "Plank Flooring - Building the Planking Mask",
          "Plank Flooring - Start Building the Overlay Mask",
          "Plank Flooring - Finish Building the Overlay Mask. Color ID Mask.",
          "Plank Flooring - Start Building the Material",
          "Plank Flooring - Finish Building the Material",
          "Composite Flooring - Start Tile Lines Mask",
          "Composite flooring - Begin Setting Up Material Outputs",
          "Composite Flooring - Setting Up Color Output & Fine Tuning"
        ],
        "Wood Carving": [
          "Intro to Carving Section",
          "Carving Engine - Setting Up the Input Parameters & Begin Building Mask",
          "Carving Engine - Setting Up the Color Zones & Color Inputs",
          "Carving Engine - Setting Up Color, AO & Normal Outputs",
          "Carving Engine - Setting Up Ht, Roughness, Spec. Lev. Outputs & Creating Inputs",
          "Layout Engine - Setting Up Input Parameters",
          "Layout Engine - Applying Parameters & Functions to the Transform 2D Matrix",
          "Making the Final Wood Carving Material"
        ]
      },
      "requirements": [
        "This course requires a beginner knowledge of Substance Designer"
      ],
      "description": "In this course we'll learn all about doing stuff with wood in Substance Designer.\nFirst we'll create a basic wood material, with an adjustable polish parameter.\nWe'll then use this material to create two basic floor types (planks & parquet) which we'll then combine to create a third, composite floor material. The masks and functions in our floor materials will also use the polish input from the original wood. So as the polish is lowered, the floor roughens up along with the wood.\nFinally, we'll create a couple of reusable nodes that will allow us to turn grayscale bitmaps into carved designs on our wood. We will also be able to add and adjust the color in our carving. And just like the flooring, it will all roughen up on the same polish parameter.",
      "target_audience": [
        "Anyone who wants to learn how to make their own wood materials in Substance Deisgner"
      ]
    },
    {
      "title": "Godot UI Masterclass: Build a Dynamic Inventory System",
      "url": "https://www.udemy.com/course/godot-engine-the-ultimate-inventory-dynamic-system-and-ui-course/",
      "bio": "Learn to create extensive game user interfaces (UI) and dynamic data systems with Godot by building an Inventory Screen!",
      "objectives": [
        "How to implement an inventory and character system and UI from scratch",
        "Complex user interfaces with Godot, EVERYTHING about making user interfaces with Godot",
        "Advanced interface programming with GDScript",
        "Godot Nodes and Scenes fundamentals. Understand what are Godot's Game Objects and Components in depth.",
        "Godot Control Nodes and UI fundamentals including margins, anchors, layouts, responsive layouts, aspect ratios and more",
        "How to create an infinite scrolling grid of items, how to split it by pages and how to animate it dynamically",
        "How to structure the Data Model of an inventory and equipment system, separating items by categories and creating groups of categories,",
        "How to understand Godot's Container Nodes, Automatic UI Placement and Size Flags",
        "ow to create Equippable Item slots that accept configurable categories of items and show the items equipped in these slots",
        "How to create and expand custom Scriptable Objects (Custom Godot's Resources) with different attributes for items and equipment",
        "Godot's scripting language, GDScript, including the Observer pattern with GDScript's Signals in details, with a sample Traffic Light project",
        "How to handle and sync One Handed and Two Handed items, while automatically unequipping items if both hands are equipped",
        "How to create pickable items, dynamically add them to the inventory and list them in the inventory screen, in the correct category"
      ],
      "course_content": {
        "Setup and Godot Concepts": [
          "Installation and Project Setup",
          "Assets Download",
          "Godot Editor Interface",
          "Editor Settings",
          "Scenes and Nodes",
          "Controls, Anchors, Margins and Layouts"
        ],
        "Creating the UI with the Godot Editor": [
          "Introduction",
          "Starting the UIInventory Scene",
          "Container Control Nodes",
          "Placing a HBoxContainer",
          "Understading Anchors and Margins",
          "Adding the Items and Info Columns",
          "Categories Header and Grid",
          "Category Button Scene",
          "Category Button Adjustments",
          "Grid for Inventory Items",
          "Reusable Button Frame Scene",
          "Inventory Item Button Scene",
          "Aligning the Navigation Arrows",
          "Creating the Item Info Box",
          "Rich Label for the Item Description",
          "Custom UI Theme",
          "Item and Equipment Stats Labels and Icons",
          "Understanding Size Flags",
          "Documentation Inside Godot",
          "Equipment Slots and Complex UI Positioning",
          "UI to any Screen Size and Keep Aspect Ratio",
          "Context Menu and Setting Button Skinning",
          "Placing the Context Menu",
          "Understanding UI Scrolling in Godot",
          "Placing the ScrollContainer to Scroll Inventory Items",
          "Customizing and Hiding Scroll Bars",
          "Inventory Full Screen and Title Header",
          "Gold Counter",
          "Character Level Progress Bar",
          "Inventory Footer and Close Button",
          "Importing the Sample Game and Tilemap Scene"
        ],
        "GDScript Crash Course": [
          "Intro to GDScript",
          "Signals, Coroutines and Event-Based Programming",
          "Building a Traffic Light with Godot to explore all features of GDScript"
        ],
        "Godot Resources In-Depth and Inventory Data Model": [
          "Resources",
          "Resources as Scriptable Objects",
          "Why create custom Resources and Scriptable Objects",
          "Coding EntityItem and our First Custom Resource",
          "Creating More Item Resources",
          "EntityPlayer and Player Resource",
          "Game State with Singletons and Preloading Resources",
          "Instantiating Custom Resources, Unique and Shared Resources",
          "Inventory with Unique Item Instances and References",
          "Multiple Item Categories in One with Category Displays",
          "Importing the Sample Database and Creating a Big Inventory",
          "Dynamically Loading Resources from a Directory",
          "Indexing Items by Category",
          "Counting Items from Multiple Categories"
        ],
        "Dynamically Populating Inventory Grids and Scroll Animations": [
          "Planning a Pagination Based Scrolling (Infinite Scrolling)",
          "Starting the Implementation of the Scrolling",
          "Instantiating Grid Buttons for Inventory Items",
          "Assigning EntityItem and Item Sprites to Buttons in the Grid",
          "Splitting Items in Different Grid Pages",
          "Calculating Page Size and Amount of Pages",
          "Scrolling Left and Right by Jumping to Pages",
          "Hiding Navigation Buttons In the First and Last Pages",
          "Basic Scrolling Animation with an Animation Player",
          "Coding the Scroll Forward Animation",
          "Coding the Scroll Backwards Animation",
          "Updating Navigation Params when the Animation Finishes",
          "Splitting Items by Category with Dynamic Grids per Category",
          "Code Hack to Fix the Scroll Animation Issue"
        ],
        "Inventory Category Buttons (Category Displays)": [
          "Instantiating Category Buttons",
          "Assigning the Icons of Categories to Buttons",
          "Saving References to Category Display Pages and Nodes",
          "Navigate to Category Page",
          "Category Button States and Highlighting on Mouse Over",
          "Active Category Displays",
          "Label with the Name of the Active Category",
          "Label Centered on Top of the Active Category",
          "Category Label Movement with the Mouse"
        ],
        "Info Box for Displaying Item Properties and Attributes": [
          "Item Button Mouse Hover Border",
          "Referencing the Nodes of the Info Box",
          "Assigning Item Properties to the Info Box",
          "Displaying Item Properties on Mouse Hover"
        ],
        "Equipping and Unequipping Items": [
          "AnimationPlayer and Functions to Highlight Active Item Buttons",
          "Highlighting Item Buttons on Click",
          "Showing the Item Context Menu",
          "Data Model for Equipped Items",
          "Base Equip and Unequip Items Functions",
          "Custom Signals for Handling Item Equip Events",
          "Item Equipped Background",
          "Binding an Item to the Context Menu",
          "Equip and Unequip Items with the Context Menu",
          "Equipment Slots with Assigned Item Types",
          "Fixing the Unequip Slot Callback",
          "Showing the Icon of the Equipped Items",
          "Automatically Unequip One Handed when Two Handed is Equipped"
        ],
        "Acquiring and Picking Up Items": [
          "Adding New Items Into The Inventory",
          "Reloading The Inventory Screen With New Items",
          "Hiding And Showing The Inventory Screen In The Game",
          "Pause The Game When The Inventory Is Open",
          "Collectable Item Nodes And Adding To The Inventory"
        ],
        "Conclusion": [
          "Completed Project and Source Code"
        ]
      },
      "requirements": [
        "Godot 3.5",
        "Basic Programming Logic and Fundamentals (Control Flow, Variables, etc)",
        "No prior experience with Godot, everything about Godot is taught in this course"
      ],
      "description": "In this game development course with 98 byte sized videos, with a total of 10 hours of video content, you'll learn how to use the Godot Engine and Editor to create an Inventory System and Inventory UI (User Interface) that is fully dynamic, with scriptable object items and a central database of items (using Godot's Resources). The inventory system has support for multiple item categories, category groups, dynamic scrolling animations, equippable slots (example: main hand and off hand) and more.\nThe inventory system you are going to create is inspired by the Zelda Breath of the Wild inventory screen, and can be used in RPG, FPS, Adventure, Point-and-Click games and more, basically, any games where the player can acquire and keep track of items in different categories.\nThis is a MASTERCLASS about creating User Interfaces, Custom Systems, Custom Dynamic Data and Dynamic Interfaces with Godot. Not only data, it's a masterclass about Godot's Resource system.\nThis course gives you all the knowledge and the power to build responsive user interfaces with Godot, you will also learn how to make Dynamic Systems that use Dynamic Data using your own Data Model and Scriptable Objects.\nYou are also going to learn how to create your own extendable and expandable Godot's Game Objects and Components with custom Nodes, Scenes and Scripts. You are going to learn how to create custom Godot's Resources and how to mix and match Dynamic and Static data.\nATTENTION! THIS IS A GODOT 3.5+ COURSE, IT'S NOT A GODOT 4 COURSE! Use Godot 4 at your own risk. In any case, the working, migrated Godot 4 source-code of the inventory system created in this course is also available and attached to the course, in case you want to compare and follow along [at your own risk] using Godot 4.\n\n\nIn a single paragraph:\nYou are going to learn EVERYTHING there is about creating complex User Interfaces with Godot, from scratch, as well as coding and adding behavior to those interfaces, creating truly dynamic UI screens and components.\n\n\n(Almost) everything that you are going to learn:\nGodot Nodes and Scenes fundamentals. Understand what are Godot's Game Objects and Components in depth.\nGodot Control Nodes and UI fundamentals including margins, anchors, layouts, responsive layouts, aspect ratios and more\nHow to understand Godot's Container Nodes, Automatic UI Placement and Size Flags\nHow to create Big User Interface Screens with Godot that are also responsive for different screen sizes and aspect ratios.\nHow to create your own custom UI widgets, expand and inherit them (custom Control Nodes and Scenes)\nHow to create an infinite scrolling container and grids of items, how to split it by pages and how to animate it dynamically\nHow to structure the Data Model of an inventory and equipment system, separating items by categories and creating groups of categories, for example, listing One Handed Weapons and Two Handed Weapons under a Weapons group, while keeping the One and Two Handed classifications\nHow to have and list multiple pages of items under the same category\nHow to create User Interface that uses both Dynamic and Static data\nHow to create Equippable Item slots that accept configurable categories of items and show the items equipped in these slots\nHow to display item and equipment attributes\nHow to create and expand custom Scriptable Objects (Custom Godot's Resources) with different attributes for items and equipment\nGodot's scripting language, GDScript, including the Observer pattern with GDScript's Signals in details, with a sample Traffic Light project\nHow to write custom GDScript Signals, connect to them and emit them\nAdvanced user interface coding with GDScript\nHow to handle and sync One Handed and Two Handed items, while automatically unequipping items if both hands are equipped\nHow to create pickable items, dynamically add them to the inventory and list them in the inventory screen, in the correct category\nAnd more!\n\n\nCourse Structure\nThis course is divided as:\n98 byte sized videos, 10 hours in total\nGodot fundamentals\nCreating the user interface with the Godot Editor\nPlanning the inventory system data model\nGDScript Crash Course\nProgramming everything with GDScript\nIn the programming section, I explain the reasoning behind each line of code, so expect lots of drawings.\n\n\nGodot Version\nThis course uses Godot 3.4.3. Since Godot 4 builds upon the fundamentals of Godot 3, this course is long lasting, you are not going to get something that will get deprecated. All of the knowledge is transferable, especially on how to build UIs and structure the data models.\nGodot 4 is still too unstable and susceptible for breaking changes. When Godot 4 stable release comes out, I'll record upgrade and migration videos, this way you are going to learn twice as much.\n\n\nTarget Audience\nThis course is intended for all audiences, the only requirement is to know a bit of programming logic. You don't need to know Godot before starting this course.\n\n\nTrailer music from ZapSplat",
      "target_audience": [
        "People interested in getting started with Godot from scratch, and that want to go beyond the basics",
        "Godot users that want to get better with making UI and screens with Godot",
        "Developers that want to make Complex and Dynamic User Intefaces",
        "Godot users that want to learn about Scriptable Objects and Resources in depth",
        "Godot users that want to learn how to make advanced game systems with dynamic data",
        "Users from other engines that want to get started with Godot",
        "Game developers that need to learn how to create inventory systems",
        "Godot users that want to learn how to create custom Scenes and Nodes in depth",
        "Godot users that want to learn GDScript in-depth"
      ]
    },
    {
      "title": "Mastering Unity VR Games!",
      "url": "https://www.udemy.com/course/unity-vr-games/",
      "bio": "Go from Beginner to Expert! Create many games from scratch in Unity ® and VR!",
      "objectives": [
        "Learn to code for game development in Unity C#",
        "Use Blender and navigate its interface.",
        "Learn cutting-edge tools that will put you ahead of other game development",
        "Integrate art from Blender into Unity®.",
        "Understand the fundamentals of game design",
        "And More!"
      ],
      "course_content": {
        "Intro to Unity": [
          "Introduction",
          "Unity Editor",
          "Moving a Cube",
          "Materials",
          "Lights",
          "Particle System",
          "Applying Physics",
          "Asset Store"
        ],
        "Intro to Coding": [
          "Introduction",
          "Variables",
          "Methods",
          "If Blocks",
          "Loops"
        ],
        "Intro to Inputs": [
          "Introduction",
          "Key Presses",
          "Moving a Player",
          "Jumping",
          "Moving Forward",
          "Cycling Cameras"
        ],
        "Intro to Prefabs": [
          "Introduction",
          "Introduction to Prefabs",
          "Random Angles",
          "Explosion Effects",
          "Adding Explosion Effects"
        ],
        "Intro to VR": [
          "Introduction",
          "Activating VR",
          "Building a Castle",
          "Lowering the Door",
          "Triggering",
          "Interface",
          "UPDATE - Using the Unity Package with Unity 5.6"
        ],
        "Introduction to Blender": [
          "Download and Install Blender",
          "Setting Up Blender",
          "Camera Controls",
          "Emulated Numbpad Camera",
          "Basic Object Manipulation",
          "Frequently Used Tools",
          "Mirror Modifier"
        ],
        "Build 30 Mini 3D Virtual Reality Games: Unity® From Scratch": [
          "VR Games-Preview",
          "VR SDK"
        ],
        "Whack-a-Mole": [
          "Whack-a-Mole Intro",
          "Whack-a-Mole - Part 1",
          "Whack-a-Mole - Part 2",
          "Whack-a-Mole - Part 3",
          "Whack-a-Mole Art - Part 1",
          "Whack-a-Mole Art - Part 2",
          "Whack-a-Mole - Part 4"
        ],
        "Hurdles": [
          "Hurdles - Intro",
          "Hurdles - Part 1",
          "Hurdles - Part 2",
          "Hurdles - Part 3",
          "Hurdles - Art",
          "Hurdles - Part 4"
        ],
        "Cups and Balls": [
          "Cups and Balls - Intro",
          "Cups And Balls - Part 1",
          "Cups And Balls - Part 2",
          "Cups And Balls - Part 3",
          "Cups and Balls - Art",
          "Cups and Balls - Part 4"
        ]
      },
      "requirements": [
        "To follow along with these tutorials, you will need the following programs: Blender (for 3D modeling and texturing) and Unity® (for game set-up and coding).",
        "Unity® and Blender are free to download. Please download and install Unity® and Blender before purchasing this course.",
        "This course was recorded on a Mac computer, but you can use Unity® and Blender on a PC."
      ],
      "description": "This course was funded through a massively successful Kickstarter campaign.\nIn this course, you learn how to build small VR Games and one Big Mobile Game using Unity® and Blender. This course is unique because we make both the code and the art for the game from scratch. We teach you the fundamentals of designing, coding, and modeling a mobile game.\nFirst you design the game and its functionality in Unity®. You learn how to code in C# and build video game levels. Don't worry if you've never coded before. We start simple and add more to the game as the course goes on.\nWhy Unity®?\nUnity® is one of the most popular platforms in game development. You can use Unity® to build 2D and 3D games. Unity® is cross-platform, which means it is easy to use with other platforms.\nThen you create the art for the game in Blender. You build all the art assets for the game. You learn how to integrate your art from Blender into Unity®.\nWhy Blender?\nBlender, like Unity®, is a popular production suite that is free to download. Blender is a revolutionary tool for making 3D art digitally. With Blender, you can make art assets for games, like we do in this course.\nIs this course for me?\nEven if you're not an artist, you can make basic art models. You may have heard of Axiom Verge and Stardew Valley. These games are million-dollar successes. But did you know that only one person made each?\nUsually it takes a whole team of people to build a game. But creators Thomas Happ and Eric Barone developed and designed their games by themselves. Now they're millionaires. You can do it, too.\nAlso now included in these bundles are our extra courses. If you want to learn to use other programs such as Camtasia or Sketch, you get more content than what you paid for this way!\nWe really hope you decide to purchase this course and take your knowledge to the next level. Let's get started.\nEnroll now to join the community!",
      "target_audience": [
        "People who want to be game developers",
        "Developers who want to make games with smart automated features",
        "Anyone who wants to learn Unity® or Blender.",
        "Anyone who wants to learn game development.",
        "This course assumes you know a little about Unity® and Blender."
      ]
    },
    {
      "title": "Unreal Engine 5 - Easily Translate and Localize your Game",
      "url": "https://www.udemy.com/course/ue5-translaitons-course/",
      "bio": "Easily double your indie games sales by using UE5's localization tools. Reach a whole new audience in hours!",
      "objectives": [
        "How to easily translate a game into a multitude of languages",
        "Best practices during development, to simplify the process",
        "How to avoid and fix common errors and mistakes"
      ],
      "course_content": {
        "How to translate your UE5 project": [
          "Introduction",
          "Tips and Best Practices",
          "Relevant Project and Editor Settings",
          "Localization Dashboard Setup",
          "Ways to add your Translations",
          "Compiling your Translations",
          "Activating Translations Through Blueprint",
          "Outro"
        ]
      },
      "requirements": [
        "A basic knowledge of Unreal Engine is required",
        "A game or other Unreal Engine project to translate"
      ],
      "description": "The average indie game can easily double or even triple its sales by simply being translated into a few of the most common languages spoken around the world. For example, my own game My Beautiful Paper Smile makes 60% of its sales from non English speaking countries. In this course I’ll teach you how to use Unreal Engine 5’s Localization Dashboard to easily add translations to your game so you can reach a worldwide audience.\n\n\nThe best time to learn about localization is now. The earlier in development your game is, the better. There are a lot of pitfalls and design choices that developers make when they fail to plan ahead and develop their games with translation in mind. I’ll be sharing my real world experience from shipping multiple translated games and all the best practices and tips that can save you weeks of implementation time.\n\n\nEven if you’re already midway through developing your game, or if it’s already finished, it is by no means too late to learn how to translate your project. My game My Beautiful Paper Smile was half way done when I learned about, and started making the game more translation friendly. Sure, it was a little more difficult than if I had already known all of the stuff in this course, but it was still well worth it!\n\n\nThroughout the course I’ll teach you about the relevant Project Settings that are required to get your translations running properly, Walk you through setting up the localization dashboard to work with your project, demonstrate the two different methods for adding translated text into your project (and which one is best), as well as how to set the active translation through Blueprint.\n\n\nIf you’re looking for information on how to find companies, teams, or individuals to translate your game, I won’t be teaching that here. In this course I’m just focusing on the technical side of things that take place inside of UE5.",
      "target_audience": [
        "Game developers using Unreal Engine that want to massively increase their audience in the easiest way possible"
      ]
    },
    {
      "title": "Unity Game Tutorial: Board Game - Snakes and Ladders 3D",
      "url": "https://www.udemy.com/course/unity-game-tutorial-board-game-snakes-and-ladders-3d/",
      "bio": "Learn how to create the board game Snakes and Ladders 3D with Unity Game Engine.",
      "objectives": [
        "Create a 3D Snakes and Ladders Game from scratch with Unity Engine.",
        "C# - Lists, Arrays, for loop, foreach loop, while loop,co-routines, statemaschines ...",
        "Node System to move on with a stone.",
        "How AI works and plays alone.",
        "Player input."
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "The Concept & Unity Setup": [
          "The Concept",
          "Unity Setup"
        ],
        "The Playfield": [
          "Importing Assets",
          "Basic Node Setup",
          "Node Script #1",
          "Route Script #1",
          "Node & Route Script #2",
          "Visualize Snakes and Ladders",
          "Design the Playfield"
        ],
        "Player Stones": [
          "The Stone Setup & Script #1",
          "Stone Script #2 - Movement 1",
          "Stone Script #3 - Movement 2",
          "Stone Script #4 - Ladder & Snake Movement"
        ],
        "GameManager": [
          "The Player Class",
          "Connect 2 Players",
          "The StateMaschine",
          "Roll Dice State",
          "Stone Script #5 - Make a Turn",
          "Switch Player State"
        ],
        "Human Inputs": [
          "Input Method 1 - Single Button",
          "Input Method 2 - Button per Player"
        ],
        "More Functions": [
          "Hopping Stones",
          "Physical Dice #1",
          "Physical Dice #2",
          "Physical Dice #3",
          "Physical Dice #4",
          "Physical Dice #5",
          "Arranging Stones on Nodes",
          "Win Condition"
        ],
        "UI Elements and Menu": [
          "Info Box",
          "Randomize First Player",
          "Win Panel",
          "Main Menu Scene",
          "Game Settings",
          "Loading the Game Settings",
          "Adding Snakes & Ladders"
        ],
        "Conclusion & Extras": [
          "Conclusion",
          "Extra: Game Ideas"
        ]
      },
      "requirements": [
        "You need a PC or Mac.",
        "You need Mouse and Keyboard.",
        "You need to know how to handle a PC or Mac.",
        "Basic knowledge in C# is always helpful.",
        "Basic knowlege in Unity Engine always helps."
      ],
      "description": "In this Course you'll learn how to create the board game Snakes and Ladders 3D with Unity Engine. Board games a quite popular even on mobile or pc. I will show you step by step how you can create Snakes and Ladders.\nThis course is a Beginner course, so if you have trouble in any case, write me a message or Q&A, and i'll help as best as i can.\nIf you are beginner, you might have some trouble to follow, but the videos will guide you through the complete course. Don't forget you only become better if you repeat things and keep on learning!\nSo we create Systems which will give us the freedom to:\nC# (Monodevelop)\nA path system to create our own playfield\nA statemaschine to handle all players / cpus\nA node system to know who is where\nAI which is able to play completely alone\nUnity (2019.1)\nwe create a playfield\nwe create a GameManager\nwe create a main menu scene where we can pick who wants to play\nwe create a Win Panel to see who won\nCourse Material\nI provide the following Material with the Course:\n1x Node 3D Model\n1x Stone 3D Model\n1x Dice 3D Model\n1x 2D Snakes and Ladder Texture\nYou have to write the code on your own, i do not provide the final scripts!\nAll other graphics for Menu's, Icons, Images or Buttons need to be created on your own.\nAll Materials i provide are for education only and should not be in your final release!\nConclusion\nIn the end of this course you will have a fully functional Snakes and Ladders 3D Game.\nChallenge\nAfter you have created nice Menus, Buttons, Sound and maybe additional content, upload the Game to any Gaming Website, Google Playstore, Apple Store or even Windows Store or Steam.\nSo what are you waiting for?\nLet's make your dream game a reality!!\nLevel: Beginner\nVideo Course Length: ~5.5 hours\nUnity Version required: 5.3+",
      "target_audience": [
        "You want to learn, how snakes and ladders can be created.",
        "You want to create/finish your first or any game at least.",
        "You want to move to the game industry, but need to start anywhere."
      ]
    },
    {
      "title": "Create your first ROBLOX Simulator game",
      "url": "https://www.udemy.com/course/create-your-first-roblox-simulator-game/",
      "bio": "Learn how to make a Roblox Simulator game! No experience needed. Everything done in Roblox Studio.",
      "objectives": [
        "Roblox game development",
        "Roblox simulator",
        "Roblox Studio",
        "Roblox",
        "Roblox programming",
        "How to make a roblox simulator",
        "Game development for kids",
        "Game development",
        "Beginner roblox",
        "Beginner roblox studio",
        "Beginner game development"
      ],
      "course_content": {},
      "requirements": [
        "No"
      ],
      "description": "In this course you will learn how to make your first Simulator game in Roblox! You will learn about Roblox studio and get an insight on the different things you can do inside of the studio. You will learn the basics of Roblox game development, and you'll also learn some programming along the way!\n\n\nYou will learn how to set up Roblox Studio, how to make parts and change the parts' looks by changing its properties! I will go over everything that you would need to make a Roblox game. We will create a map, take care of the Gameplay, make a shop, and more! We will go over leveraging the toolbox so you can learn from what other developers have made, and we'll also go over how you can use their creations in your own game! You'll learn all the necessary steps of making a Roblox simulator. After the main part of the course there are extra videos where we handle stuff like Rebirthing, these are optional but recommended! You can follow along as we go, but I also recommend you to add your own spin to your game! You can even make it better in whatever way you want.\n\n\nThis course is intended for purchase by adults, if you're under 18, you may use the services only if a parent or guardian opens your account, handles any enrolments, and manages your account usage.\n\n\nAt the end of this course, you will hopefully have built your own Roblox Simulator!",
      "target_audience": [
        "Beginner Roblox Developers",
        "Roblox developers",
        "Kids",
        "Game developers",
        "Young developers"
      ]
    },
    {
      "title": "Houdini 18 - Procedural Prop Modeling - Chinese Knife",
      "url": "https://www.udemy.com/course/houdini-18-procedural-prop-modeling-chinese-knife/",
      "bio": "Create Procedural Models with Houdini 18 & Substance Painter!",
      "objectives": [
        "The Basics of Procedural Modeling",
        "The Basics of Procedural UV's",
        "How to Create Low and High Res meshes in Houdini",
        "How to Export from Houdini",
        "Setting up a Substance Painter Project",
        "How to Texture with Substance Painter 2019",
        "How to set up a scene in Unity 2019",
        "How to Match the Look of Painter in Unity"
      ],
      "course_content": {},
      "requirements": [
        "No prior Knowledge of Houdini is required",
        "Basic Understanding of the Unity User Interface",
        "Basic Understanding of the Substance Painter User Interface"
      ],
      "description": "In this next Indie-Pixel Mini-Course we will walk through the entire process of creating a Chinese Knife prop for your game development projects. You will be taken through each step of the process from procedural modeling in Houdini, to texturing in Substance Painter, then finally setting up the the prop in a Unity scene.\nYou also get a complete guide to the Basics of Houdini's User Interface, as a bonus, so if you are completely new to Houdini, you can get up to speed quickly and learn how to navigate the Houdini 3D application.\n\n\nWhat you Get:\nComplete Houdini Project\nOver 4 Hours of Video Training in 1080P\n\n\nIf you are new to Procedural Modeling or Procedural content creation for games, and want to jump start your learning in Houdini, then this course is perfect for you!",
      "target_audience": [
        "Beginner Houdini Aritsts",
        "Beginner Game Level / Prop Artist",
        "Anyone interested in Learning Procedural Workflows"
      ]
    },
    {
      "title": "Unity3D and the Oculus Rift",
      "url": "https://www.udemy.com/course/unity3d-and-the-oculus-rift/",
      "bio": "A guide to creating games with the Oculus Rift. Get to know different techniques, which are crucuial for VR development.",
      "objectives": [
        "Know basic and advanced techniques needed to dive into VR game development",
        "Extend the standard assets, such as the FPSController or simply the MainCamera, with your own scripts",
        "Use the direction the player is looking in while playing for different purposes such as aiming, shooting, selecting objects, trigger functions by looking at objects and more",
        "Use techniques such as raycasting or instantiating objects",
        "Know how to deal with graphical user interfaces in virtual reality"
      ],
      "course_content": {
        "Introduction and course setup": [
          "Introduction",
          "Setup"
        ],
        "Basic techniques": [
          "Aiming and shooting",
          "Character controller for architectural visualisation and teleporting",
          "Trigger function by looking at objects / Raycasting",
          "Navigation mesh controlled characters & bird's eye view",
          "Final Quiz"
        ],
        "Graphical User Interfaces (GUI)": [
          "GUI - Overview",
          "GUI - On screen displays",
          "GUI - Menus",
          "GUI - Look based input",
          "GUI - Trigger action after a certain time of looking at a UI element"
        ],
        "Updates": [
          "official Unity VR tutorial section"
        ]
      },
      "requirements": [
        "We will use Unity3D for this course. The latest version can be downloaded from the official unity website. A developer kit of the oculus rift can come in useful in order to apply the learned techniques.",
        "This course is also useful to users without an oculus rift, as all seen techniques and examples are also valid and applicable for non-VR development.",
        "Evidently, we cannot use the oculus rift's full potential without programming, but of course everything will be explained with the necessary detail. I will link you to the respective documentation pages in case you wish to look something up."
      ],
      "description": "This course tackles the hot topic of \"virtual reality\". This tutorial is not a guide to implementing a specific game, it rather gives you the tools and knowledge to implement your own VR games. Unlike other courses about the oculus rift, this course does not stop after the setup. We take a look at the things that really matter for VR development. Without wasting time we quickly proceed with interesting and important topics that go beyond setting up a simple character to walk around in VR. Besides using the headtracking for shooting objects, we see how raycasting can be used to analyse and trigger functions at an object which is being looked at. Further topics are dealt with, such as user interfaces and more. Get a head start by taking this course.\n\n\nIn the course, we take a look at different techniques that are crucial to VR development, such as:\n-using the headtracking for aiming and shooting\n-raycasts to analyse an object which is being looked at\n-retrieve the world point, at which the player is looking to send a character there\n-teleport the player to visit interesting sites of a model\n-various controls for user interfaces (look based input and more)\n\nThe length of the course is about 1 hour, but as the course is rather dense, you will get much more content than you would expect from an hour long tutorial.",
      "target_audience": [
        "If you are interested in Unity3D or virtual reality, then this course is for you. Participants of this course are thereafter able to develop their own applications with the Oculus Rift. This course covers everything from the basics, such as using the headtracking for aiming, shooting and selecting objects up to alternative movement models, namely bird's eye camera controls or teleporting. Useful programming skills can be picked up along the way as we practice the new techniques with several training examples in the Unity3D environment."
      ]
    },
    {
      "title": "Learn To Create A First Person Shooter Game In Unity 6 & C#",
      "url": "https://www.udemy.com/course/unity6fps/",
      "bio": "Game development made easy. Learn C# using Unity 6 and create your own FPS game!",
      "objectives": [
        "Learn C#, a modern versatile programming language",
        "Understand the capabilities of game development in Unity",
        "Develop strong and transferrable problem solving skills",
        "Gain a complete understanding of the game development process",
        "Learn how object oriented programming works in practice"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Project Assets"
        ],
        "Getting Started": [
          "Setting Up the Project",
          "Setting Up Scene Basics"
        ],
        "Moving & Aiming": [
          "Moving The Player",
          "Moving With Speed",
          "Controlling The Player",
          "Moving Based On View",
          "Looking Sideways",
          "Looking Vertically",
          "Adjusting Controller Input",
          "Limiting The View Angle",
          "Locking The Cursor"
        ],
        "Running And Jumping": [
          "Adding Gravity",
          "Jumping",
          "Running Around",
          "Making Running More Visual"
        ],
        "Firing Shots": [
          "Setting Up A Weapon Controller",
          "Firing With Raycasts",
          "Adding Crosshairs & Weapons",
          "Creating An Impact Effect",
          "Using Our Impact Effect",
          "Adding Some Weapon Flash",
          "Preventing Too Many Jumps",
          "Impacting Enemies",
          "Repeating Shots"
        ],
        "Managing Ammo": [
          "Tracking Ammo",
          "Reloading",
          "Tracking Remaining Ammo",
          "Displaying Ammo",
          "Picking Up Ammo",
          "Preventing Weapon Clipping Through Objects"
        ],
        "Making Enemies": [
          "Setting Up The Enemy",
          "Moving The Enemy",
          "Getting In Range",
          "Moving Sideways",
          "Setting Up Animations",
          "Making Animations Work",
          "Setting Up Patrols",
          "Moving Between Points",
          "Fixing Point Heights"
        ],
        "Enemy Damage": [
          "Destroying Enemies",
          "Damaging Enemies",
          "Removing Bodies",
          "Making Projectiles",
          "Making Enemies Shoot",
          "Fixing Projectile Issues"
        ],
        "Player Health System": [
          "Setting Up Player Health",
          "Displaying Health",
          "Health Pickup",
          "Handling Player Death",
          "Adding a Death screen",
          "Respawning"
        ],
        "Weapon Switching": [
          "Setting Up Weapons",
          "Setting Up More Weapons",
          "Switching Weapons",
          "Assigning Ammo"
        ]
      },
      "requirements": [
        "Mac or PC capable of running Unity 3D",
        "A copy of Unity"
      ],
      "description": "Learn how to create and program your very own level-based shooting game using Unity, an industry-standard game development program used by large gaming studios and indie developers across the world.\nIn this course you won’t just be learning programming concepts, but tying these concepts to real game development uses. You will have access to a course forum where you can discuss the topics covered in the course as well as the next steps to take once the course is complete.\nThis course has been designed to be easily understandable to everyone, so whether you’re a complete beginner, an artist looking to expand their game development range or a programmer interested in understanding game design, this course will help you gain a greater understanding of development.\nAt the end of this course you will have developed the ability to understand such game elements as:\nA first-person character controller with full movement, jumping & sprinting capabilities\nA full weapons system including weapon switching and multiple gun types\nCollectibles such as ammo & health\nDesigning complete levels\nDifferent types of enemies to combat\nManaging Audio Systems\nFull user Interface with interactive menus\nMultiple levels\nA Unique Boss Battle\nAnd more...\nThe course also includes a complete version of the project to use for your own reference to ensure everything in your game works as it should!\n\n\nStart learning today and let me help you become a game developer!",
      "target_audience": [
        "Anyone who wants to make their own first person games",
        "People who want to create and publish their own games",
        "Complete beginners with an interest in learning game development",
        "Developers who want to re-skill across to game development",
        "People interested in working in the game design industry",
        "Competent and confident with using a computer"
      ]
    },
    {
      "title": "Unity LiteNetLib Multiplayer Basics and .NET Core Server",
      "url": "https://www.udemy.com/course/unity-udp-with-litenetlib-building-a-simple-movement-game/",
      "bio": "Learn how to use this library to send , receive and process data on server and clients to have a networked game ! (R)UDP",
      "objectives": [
        "Server and client connection with LiteNetLib",
        "Send and receive data with LiteNetLib",
        "Process received data"
      ],
      "course_content": {
        "Einleitung": [
          "Intro",
          "Needed Tools and Libraries",
          "Setting up the Projects (Client and Server)",
          "Creating a simple play scene with player movement",
          "First Networking Script on Client",
          "Networking Script for Server and first connection of client and server",
          "Sending and Receiving Player positions",
          "Adding network players on screen and moving them",
          "Additional stuff : More efficient code (network)"
        ]
      },
      "requirements": [
        "Basic usage of Unity",
        "Visual Studio",
        ".NET Core Package in Visual Studio Installer",
        "LiteNetLib Release Source Code"
      ],
      "description": "This all may sound hard and difficult but its rather easy once you know how it works.\nJust follow me along on this journey to write a basic multiplayer game!\nWe will write a server that will be a seperate .NET core application which is also using C# , and we will use the same UDP library as for Unity.\nThe server runs independently from any Unity programs.\nOur client will be written in Unity and C# and will contain the player stuff.\nBoth will be using the same library \"LiteNetLib\" which is a very competent library for UDP (and also Reliable UDP)\n\nAt the end we will have a way to send and receive data and we will be able to join the server with our game clients and see each client on the game and move around and see the movements.",
      "target_audience": [
        "Game Devs who want to try out networking (UDP)",
        "People who want to use LiteNetLib in Unity and .NET Core",
        "Is suitable for beginner to intermediate level programmers who want to make an online game."
      ]
    },
    {
      "title": "Starting Up a Game Development Studio",
      "url": "https://www.udemy.com/course/starting-up/",
      "bio": "Discover the secrets of some of the most successful people in the UK's games industry and learn how you can be one!",
      "objectives": [
        "Know how some of the most successful indie game studios started up",
        "Understand what it is like to start and run a game development business in the UK",
        "Make a more informed decision whether starting an indie game development business is for you"
      ],
      "course_content": {
        "The Beginnings": [
          "About this course and your instructor",
          "The founders",
          "The beginnings of a games studio"
        ],
        "The Idea Formation": [
          "The idea formation for a product"
        ],
        "The Dawn of Success": [
          "The signs of a successful product"
        ],
        "Doing Business": [
          "Doing business in the UK for game developers"
        ],
        "A Word of Advice": [
          "A word of advice for starters"
        ]
      },
      "requirements": [
        "To take the most out of this course, it is recommended to have a basic understanding of creating art work or programming for games.",
        "It would also be useful to have a basic understanding of concepts of starting up a new business in your own country.",
        "The content of this course is focused on starting up a new game development business and so having an interest in this particular subject is the most crucial requirement for this course."
      ],
      "description": "The author, Ramin, is the founder of Cambridge Game Creators, a professional network for games developers in the UK. The lessons in this course are created from a series of interviews that he conducted with some of the most successful people in the UK games industry.\nYou will hear answers to many of your questions about starting up your own studio from the following people:\nBen Tristem who is arguably the most successful games development teacher in the world\nDr. Jo Twist, CEO of the UK Interactive Entertainment association (UKIE) which has more than 250 business members all of which operate in or with the games industry\nSarah & James Woodrow, founders of the Utopian World of Sandwiches with the hugely successful game \"Chompy Chomp Chomp\"\nGreg Denness & Graeme Clark of Inertia Studios who went from their university dorms to owning their successful game studio, delivering games that are played by thousands of people every day\nJoseph Humfrey & Jon Ingold, founders of the Inkle Studios with hugely popular games such as \"Sorcery\" and \"80 Days\"\nand Sean McMurchy, the AAA games artist who reveals the ups and downs of leaving a well paid job working as a successful games artist in Canada to becoming a freelancer in the UK!",
      "target_audience": [
        "Game Developers",
        "Entrepreneurs who are interested in the business of developing and selling games"
      ]
    },
    {
      "title": "Dynamic Quiz App using Google Sheets as source Google Script",
      "url": "https://www.udemy.com/course/quiz-app/",
      "bio": "Create your own web applications that uses Google Spreadsheet data to build quizzes and JavaScript to build the website",
      "objectives": [
        "Connect website input form to Google Spreadsheet",
        "Build a quiz application from scratch that uses Google Sheets as the data source",
        "Add data from input form to Google Spreadsheet"
      ],
      "course_content": {
        "Introduction to creating web apps with JavaScript and Google Script": [
          "Dynamic Quiz App Introduction",
          "Development Setup",
          "Resources"
        ],
        "Get Spreadsheet data as JavaScript object": [
          "Spreadsheet Data as JSON.",
          "Google Sheets JSON data updated Version",
          "Source Code to output Google Sheets data as JSON for webpages API",
          "JavaScript Fetch Data",
          "Source Code Fetch",
          "Get Sheet Data as Object",
          "Get Sheet Data as Object 2",
          "Get Sheet Data as Object 3",
          "Source Code get sheet object",
          "Multiple Sheets Promise All",
          "Build your sheet data object",
          "Source Code Get Sheet Data"
        ],
        "Build your web application generate elements": [
          "Client Side Create HTML from Data",
          "Source Code Client Side Create HTML from Data",
          "Create Quiz Questions",
          "Source Code Quiz Question loading",
          "Create Questions JavaScript",
          "Output Answers to Questions",
          "Source Code output build elements",
          "Add styling to output",
          "Source Code index html with style",
          "First Run Output Builder",
          "Check Answer Scoring",
          "Source Code with scoring",
          "Game Over handling",
          "Source Code with game over",
          "Quiz Gameplay review",
          "Source Code section final code"
        ],
        "JavaScript Create a Quiz Application": [
          "Create Your Quiz",
          "Apps Script Setup - Use this",
          "Apps Script add to Sheet",
          "Source Code update sheet",
          "Connect to WebApp AJAX",
          "Source Code create html",
          "JavaScript Form Builder",
          "Source Code with builder create html",
          "Form Data Post",
          "Source Code with post method",
          "WebApp Post Formdata",
          "Quiz Creator Review and Tweaks",
          "Source Code Google Script and create file"
        ],
        "Conclusion Extras": [
          "CORS error Debug.",
          "doGet Method",
          "Google Sheet new Connection URL and Source Code Example",
          "Source Code Google Sheets as Data Endpoint",
          "Bonus Lecture",
          "Extended Course Content: Access to Downloads, Real-World Examples, and Extra Stu"
        ]
      },
      "requirements": [
        "Internet connection",
        "Google Account",
        "Fundamental JavaScript Knowledge"
      ],
      "description": "Build your own Dynamic and interactive quiz that uses only Google Sheet data to output the contents of the quiz, and JavaScript on your web page or website.  You will be amazed at what you can do with just a few lines of code and how easy it is to connect Google Sheets to your website.   This is a great solution to avoid backend code using only Google Script which is essentially JavaScript with a bunch of methods in the cloud.\nNo database - only JavaScript skills is a prerequisite for this course.\nPower up your web applications - made easy - no magic just code ;)\nAll the source code is included\nNew to apps script - don't worry its like JavaScript : Apps Script is a scripting language based on JavaScript 1.6, which gets executed in the Google Cloud.\nJavaScript developers extend your knowledge and learn how you can use your skills to develop apps script bringing together all the power of Google's Apps.\nGoogle Apps Script : is based on JavaScript 1.6 with some portions of 1.7 and 1.8 and provides subset of ECMAScript 5 API however instead of running on the client, it gets executed in the Google Cloud. According to Google, Apps Script \"provides easy ways to automate tasks across Google products and third party services.\"Apps Script is also the tool that powers the add-ons for Google Docs, Sheets and Slides.\"\nIf you haven't tried it yet, I guarantee you will be BLOWN AWAY at how powerful Google Script can be, and at how easy it is to write.  With just a few lines of code you can DO A WHOLE LOT!!!\nDon't take my word for it try it and see.\nTaught by an instructor with over 20 years of web development experience, ready to help you learn and answer any questions you may have.\nWhat are you waiting for this course is perfect to start writing Google Script and to practice writing Google Script, you have nothing to lose.",
      "target_audience": [
        "Anyone who wants to practice Google Apps Script",
        "Anyone who wants to practice using Google Script to build a fun interactive application",
        "Anyone who wants to be able to explore the power of what can be done with Google Script",
        "Anyone who wants to learn more about what Google Script can do",
        "Update and use Spreadsheet data within your website",
        "Anyone who wants to learn about Google Apps Script",
        "JavaScript developers who want to extend their knowledge",
        "Application developers"
      ]
    },
    {
      "title": "How To Creat 2D Space Shooter With Unity And C#",
      "url": "https://www.udemy.com/course/how-to-creat-2d-space-shooter-with-unity-and-c/",
      "bio": "How To Creat 2D Space Shooter With Unity And C#",
      "objectives": [
        "sound system for your game",
        "making Main Menu",
        "understanding a space shooter game system",
        "work with UI"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "New Game and importing Asset",
          "Main Menu",
          "Main Menu Script",
          "sound mixer 1",
          "sound mixer 2",
          "sound mixer 3",
          "Audio Manager 1",
          "Audio Manager 2"
        ],
        "Player": [
          "Player Movement",
          "Player Boundary",
          "Player Shooting"
        ],
        "Enemy": [
          "Hazards",
          "Enemy shooting",
          "Second Enemy"
        ],
        "Damage": [
          "Health Script",
          "Damage Script & Death Effect",
          "Player Death & Respawn Function like old games",
          "Player Lives UI"
        ],
        "Enemy Spawn System": [
          "Enemy Spawn System",
          "Background Scroller"
        ],
        "Reward System": [
          "Reward Player by killing enemies",
          "Item drop Player weapon Level up",
          "Item Drop Chance",
          "Rocket Drop Item",
          "Rocket Script",
          "Rocket UI Text",
          "Shield Effect"
        ],
        "Game manager": [
          "Game Sound Effect",
          "Main Menu Design",
          "Saving Our Money in game with PlayerPrefs",
          "Level up Player ship",
          "Player Lose Window"
        ]
      },
      "requirements": [
        "need pc"
      ],
      "description": "Learn how to create and program a complete UI Menu System & Space shooter Game in  Unity and C# .\nIn this course you won’t just be learning programming concepts, but tying these concepts to real game development uses. You will have access to a course forum where you can discuss the topics covered in the course as well as the next steps to take once the course is complete.\nAt the end of this course you will have developed the ability to create such elements as:\n1)How to make an UI Screen\n2)Options Menu with start and exit button\n3)Complete Audio Control System which you can adjust volume and at the same time it will get saved in player prefs\n4)Adjust Graphics Settings in your games\n5)Pause Menu\n6)How to make enemy\n7)enemy with AI system and pathfinding\n8)make Lose  Window\n9)make a shooting system\n10)upgrading your spaceship and boost their powers\n11)getting in game money\n11) and more...\n\n\nStart learning today and let me help you become a game developer!\nWho this course is for:\n1)Anyone who wants to create a UI system in Unity\n2)People who want to create and publish their own games.\n3)Developers who want to re-skill across to game development.\n4)People interested in working in the game design industy.\n5)Competent and confident with using a computer.\n6)and a lots of other things will be added soon to this project",
      "target_audience": [
        "beginners"
      ]
    },
    {
      "title": "RPG Maker From Beginner To Advanced",
      "url": "https://www.udemy.com/course/rpg-maker-from-beginner-to-advanced/",
      "bio": "Creating Games Without Coding",
      "objectives": [
        "How to install Plugins",
        "How to import custom assets",
        "Create a minimap using variables and pictures",
        "Have markers pop up on your minimap",
        "How to add footstep SFX to the player",
        "Make the sky reflect off of the water",
        "How to use all the different kind of plugins available"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Outside Assets": [
          "Plugins",
          "Importing Assets"
        ],
        "In Editor": [
          "Reflecting The Sky and Running Water",
          "Creating A Mini Map",
          "Adding Map Markers Through NPCs",
          "Using Dialogue Codes",
          "Basic Plugins",
          "Advanced Plugins",
          "Creating A Beastiary Book",
          "Using Region ID"
        ]
      },
      "requirements": [
        "Own or Install the trial version of any of the RPG Maker Engines",
        "Have a photo editor software"
      ],
      "description": "In RPG Maker From Beginner to Advanced, we will be going over some more advanced things for you to create your own game in any RPG Maker. For this course, I will be using RPG Maker MV however, any version of RPG Maker should work for following along. In this course, you will learn\nWhere and How to install Plugins\nHow to import custom assets into your game\nHow to create a minimap that tracks your player\nHaving locations and other things pop up on your minimap as you play\nHow to add sky reflections to your water\nAdding Footstep SFX\nHow to use different kinds of plugins and note tags\nThis class is best suited to users that have completed the previous course \"RPG Maker For Beginners\" or with a basic knowledge of the software already",
      "target_audience": [
        "Anyone that has previously completed the RPG Maker For Beginners course",
        "Beginners to the engine that know the basics"
      ]
    },
    {
      "title": "Materials In Unity | A Secret Ingredient for Photorealism",
      "url": "https://www.udemy.com/course/materials-in-unity/",
      "bio": "Learn the basics of Materials in Unity and transform the look of your game",
      "objectives": [
        "Gain complete knowledge about materials In Unity",
        "Make your scenes look more visually appealing with clever strategies",
        "Discover the latest and different material channels",
        "Create scripts to control various material parameters in realtime"
      ],
      "course_content": {
        "Understanding Materials": [
          "Introduction",
          "Standard Shader",
          "Physically Based Rendering",
          "Texture Slots"
        ],
        "Textures In The Standard Shader": [
          "Albedo Map",
          "Metallic Map",
          "Smoothness Map",
          "Normal Map"
        ],
        "Additional Textures In The Standard Shader": [
          "Height Map and AO Map",
          "Emission Map",
          "Secondary Maps",
          "Rendering Modes"
        ],
        "Scripting Materials": [
          "Scripting Materials - Basics",
          "Animating material surface",
          "Emissive Material lighting",
          "Animating realtime emissive lights"
        ],
        "Bonus Section": [
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "You will need a Windows PC or a Mac and a free copy of Unity 2018 or above to follow along",
        "Foundational understanding of Unity programming workflows and terminology",
        "knowledge of the Unity Editor and other basic tools"
      ],
      "description": "Making Visually appealing games is just a matter of some understanding about different subsystems In Unity Game Engine. Material Creation is one of those. Materials are responsible for the final look of an Object. If One gets their materials right they are done with more than half of the work to make good looking scenes for  games.\nIn this Unity course, you will:\nMaster concepts of Material and shader\nLearn to build complex and visually appealing materials\nMaster use of different maps needed to make materials\nGain Complete knowledge about Material Creation process In Unity\nControl various material parameters via code\nAnd more!\nIn this Course, we will start with absolute basics of what materials are and how they work. Then we will break down the different components of a material and talk about one of it's key components, a Shader. we will examine different maps that are used to make complete and realistic looking scenes/objects.\nThis course is perfect for developers working on games that require deep knowledge about Unity's Lighting System. Anyone using the Unity engine will benefit since we comprehensively cover how to correctly use many of its more advanced lighting sub-systems.\nThis course is designed in a short, concise and direct manner. So that you can gain most out of this course without wasting much of your time.\nWhy Learn Game Development with Unity?\nThe gaming industry is a $100 billion industry worldwide. By 2020, that number is expected to near $120 billion. With Unity being the most widely used engine to develop games across multiple platforms, there has never been a better time to get into the field. As you will learn, the types of games you can create with Unity and C# are limitless. Game development makes a great hobby, allowing you to learn a new skill and play your game with family and friends. It is also an exciting and rewarding career, where plenty of successful developers, have learned the fundamentals of game development through courses like this, and not in the traditional classroom setting. Every great game starts somewhere, so why not make it yours? While people often find coding or making games intimidating, this Unity course utilizes a unique teaching method which will allow you to gain a thorough understanding of concepts while you develop your own games. Thanks to the Unity community, you’ll be able to connect with other developers, work together on new projects, and make some incredible games!\n\n\nIf you have a few gaps in your experience, don’t worry. That’s what this course is for! You’ll have the opportunity to gain practice and learn best practices from an expert Unity instructor.\nJoin us on this adventure today!  We’ll see you inside the course.\n\n\nNote :- This course comes with 30 day money back guarantee and lifetime access + support from us.",
      "target_audience": [
        "This course is perfect for developers working on games that require complete knowledge about Unity's material creation process",
        "Unity Developers/ Environment artists/ 3D technical Artists/ Programmers/ Level Designers",
        "Students having Foundational understanding of animation and 2D rendering",
        "No Programming or Scripting is required",
        "Anyone using the Unity engine will benefit since we comprehensively cover how to correctly use many of its more advanced lighting systems"
      ]
    },
    {
      "title": "Intro to Substance Designer",
      "url": "https://www.udemy.com/course/intro-to-substance-designer/",
      "bio": "This 6 hour course covers all the basics...including animated materials!",
      "objectives": [
        "Build procedural PBR materials in Substance Designer",
        "Understand basic Dynamic Functions",
        "Understand basic Material Animation"
      ],
      "course_content": {
        "Part 1: Making a Glazed Brick Material": [
          "The Substance Library - Addendum",
          "The Interface",
          "Building a basic mask",
          "Blends & masks",
          "Gradient maps",
          "Fine tuning the material"
        ],
        "Making More Complex Materials": [
          "Input parameters",
          "Building reusable materials",
          "Building complex masks",
          "Switches & material blends",
          "Adding functionality",
          "Finalizing inputs"
        ],
        "Into the Future": [
          "Basic Water"
        ]
      },
      "requirements": [
        "Substance Designer 6.x",
        "Substance Player",
        "A basic understanding of what PBR materials are"
      ],
      "description": "This walkthrough begins with the basics and builds on these core concepts to provide a thorough introduction to building procedural materials in Substance Designer. The course is divided into three parts, each building on the knowledge acquired in the previous section.\nPart 1: In this section, we start with the basics. After taking a look at the interface, including how to set up our own Substance Library, we dive right into making our first PBR texture - the obligatory Brick Wall. Starting with a single b/w node, we’ll build a tiled PBR glazed brick texture, which we’ll save to our Library for later use. As we build our material we’ll have a chance to look at many of the Atomic Nodes Substance uses to build basic materials and how they work with each other.\nPart 2: Having gotten the basics out of the way, this section takes a look at some more advanced Atomic Nodes and how to expose Input Parameters to make procedural materials using Dynamic Functions. We’ll also learn how to blend materials, repurposing the brick wall we built in Part 1 to create a second, more complex procedural material.\nPart 3: The last video is a sneak peak at some more advanced concepts...and we'll build a simple animated water material. This will give us a chance to build more advanced Dynamic Functions and look at the Pixel Processor node.",
      "target_audience": [
        "Anyone who's never used Substance Designer and wants to learn",
        "Anyone who has basic Substance Designer skills and would like to learn more"
      ]
    },
    {
      "title": "PhaserJS Game Development",
      "url": "https://www.udemy.com/course/html5-game-development-in-phaserjs/",
      "bio": "Learn HTML5 Game Development in PhaserJS!",
      "objectives": [
        "Learn to work with the PhaserJS Game Development Framework",
        "Learn to create an isometric game",
        "Learn to manage assets using Spritesheets",
        "Learn OOP Javascript fundamentals",
        "Learn to implement sound effects in Phaser",
        "Learn to make animations in Phaser",
        "Learn to debug Phaser games with confidence"
      ],
      "course_content": {
        "Introduction": [
          "Welcome!"
        ],
        "Getting started": [
          "Getting started"
        ],
        "About tiles & isometric perspective": [
          "About tiles & isometric perspective"
        ],
        "Creating the taxi": [
          "Creating the taxi"
        ],
        "Creating obstacles": [
          "Creating obstacles"
        ],
        "Game over state": [
          "Game over state"
        ],
        "Score Counter": [
          "Score Counter"
        ],
        "Decoration": [
          "Decoration"
        ],
        "Buildings": [
          "Buildings"
        ],
        "Finishing touches": [
          "Finishing touches"
        ]
      },
      "requirements": [
        "Javascript basics"
      ],
      "description": "Lead instructor at codecaptain.io, Sabatino Masala will teach you how to create an entire game in one of the hottest HTML5 game development framework called PhaserJS.\n\nPhaserJS is a fun, free and fast 2D game framework for making HTML5 games for desktop and mobile web browsers, supporting Canvas and WebGL rendering.\nThis framework is the go-to HTML5 game development framework nowadays and in this course we'll explore the many aspects of Phaser, by creating a qualitative game called TapTapTaxi.\nSabatino trained over 900 students in person and improved his teaching approach over the years so students could strengthen their programming skills in an effective and fun course.\n2016 marks his 10th year of being a game developer and over the years he released over 27 games, 18 of which reached over 1 million unique players!\nAll that attention didn't go unnoticed, because recently, one of the biggest companies in the gaming industry reached out to him, and that company was Nintendo. They made him a certified Nintendo developer, so you can rest assured you're in the right hands for learning a thing or two about game development.\n\nThis course is meant for students with some prior experience in webdevelopment and want to start learning game development in HTML5. This course will provide the source of every step in the lectures, so no need to worry when you're stuck somewhere!\nAll the assets will be provided and you're free to use them in any other project.\nWhat will I learn in this course?\nPhaserJS Game Framework\nCreate an isometric game\nManaging assets using spritesheets\nImprove performance by decreasing draw calls\nLearn how spritesheets affect draw calls & performance\nImplement spritesheets\nMake effective use of GPU resources\nOOP Javascript fundamentals\nJump mechanics\nHittesting & Hittesting using the distance formula\nImplement sound effects using the PhaserJS built-in functions\nDebug PhaserJS using easy plugins & Chrome devtools\nLearn to solve issues with confidence\nDazzling animations in PhaserJS\nCreate a fun, addictive & fast-paced gameplay\nGenerate random environments & buildings\nFocussing on an impeccable user-experience",
      "target_audience": [
        "This course is meant for both beginners and experienced game developers who are passionate about game development and want to explore the world of HTML5 game development"
      ]
    },
    {
      "title": "The Complete iOS Game Course - Build a Flappy Bird Clone",
      "url": "https://www.udemy.com/course/the-complete-ios-game-course-build-a-flappy-bird-clone/",
      "bio": "Over 350+ videos taking you step-by-step through process of building 8+ different applications using Sprite Kit",
      "objectives": [
        "Build iOS Games using Sprite Kit",
        "Use the Objective-C language to build iOS games",
        "Understand game physics and mechanics"
      ],
      "course_content": {},
      "requirements": [
        "Familiarity with object-oriented programming (does not need to be Objective-C)",
        "An intel-based Mac that has Mac OS X Snow Leopard or later installed"
      ],
      "description": "We built an immersive game development course that teaches you all of the fundamentals so you can build your own games on iPhones and iPads. We combine videos, notes, collaborative discussion forums, and challenging assignments to have students build real apps. Teaching online is not new to us. Our highly successful Beginner iOS Bootcamp (over 18k students and 5 star review) teaches students the basics of programming iOS apps. We use the same proven pedagogy to teach game development.\nThe course will include over 120 hours of content (30 hours of video plus notes and challenges), an active discussion forum where students and teachers answer questions, and multiple fully coded example projects that you can download.\nTopics covered:\nIntroduction to Game Development , Sprite Kit , Scenes and Nodes, Coordinates, Game Loop\nSprite/Texture Creation, Sprite Theory, Atlas Files\nAnimation, Parallax Scrolling, Character animation\nPhysics Bodies, Physics Properties, Bit Fields, Collisions, Contact Response\nUser Input, Input Handler\nCharacter Movement/Physics, State machines, Player Physics, Jump Curve, Double Jump, Boost, etc.\nTile Based Game World, Tile Sprites, Tiled + Kobold Kit, Creating and Loading Tiled files\nCollision Detection, Axis Alined Bounding Box, Collision Bit Masks\nObstacles & Enemies, Basic Enemy AI\nCollectables, Power Ups\nEffects, Particle Effects\nSound, Adding Music, Adding Sound Effects\nScoring, HUD, Stats/Progress Tracking, Score Board\nGame Menus, Saving/Loading Game Progression\nReviews from our iOS course\n\"I must say that so far, this course is awesome. Having the challenging assignments, daily discussions and feedback from the instructors, has been the missing piece that I have been looking for. I have read a handful of books, watched hours of video & typed in a bunch of tutorials, and finally, having to work through tough assignments and applying what I have been learning, it is all starting to click - Finally!\" - Mark S.\n“Code Coalition's discussion board is one of the best resources for a beginning iOS developer. So much help being offered” - Omar S.\n“I've just completed the iOS101 course, which I thought was a great intro to the XCode environment... I feel it's been well worth the investment. ” - Herdy H.\n\"Wow, @CodeCoalition! Moving quickly! Week 2 is so different than week 1...and I like it :) Thnx for the challenge\" - Melissa B.\n“Just discovered @CodeCoalition! An excellent resource for anyone who wants to make their first iPhone app.” -Novall K.\n“Can't reiterate it enough how this course is helping me with my iOS dev skills. I think using protocols and delegation is finally becoming second nature. Fingers crossed :-)” -Alex P.\n“I am really loving the class. I have taken classes at Code School & Treehouse and both were missing a key element. The ability to ask questions as you complete a section and get an answer. “ -Lisa A.\n“Your training is the best out there so far. I wish I had the time away from regular job to follow along.” -Christian S.\n“Im loving this.. I have been through at least 5 books, and many online deals. Yours is super so far. Finally, i can get from start to finish on a lesson without wondering why on \"Everything\" thank youCant wait to do more.. “ -Kevin R.\nWhy take this course and how much time does it take to complete?\niOS game development, and software development as a whole, is a booming career. The demand for new developers at all levels far outweighs the supply. Barrier to entry is not as high as one would think - though passion and hard work are necessary, a degree in computer science or any other technical field is not required.\nWe aim to take you from complete beginner to junior game developer in three months. The apps you create in this course can be used on your portfolio so you have something to show when you apply for jobs. Not only that, you can throw your apps on the app store and be the next Flappy Bird!",
      "target_audience": [
        "Novice or advanced programmers who are interested in game development",
        "Game programmers from other languages/frameworks"
      ]
    },
    {
      "title": "Learn To Make Epic Low Poly Scenes In Unity [Intermediate]",
      "url": "https://www.udemy.com/course/lowpolyscenes2/",
      "bio": "Learn Easy Low Poly Modeling, Fundamentals, Color Theory, Lighting In Unity & Texturing Assets In Photoshop",
      "objectives": [
        "Create beautiful worlds using Unity 2018 with the help of Maya 2018, Zbrush 4r7|4r8, & Photoshop.",
        "Additional understanding of Color Theory and Color Schemes.",
        "Make a mass variety of particle effects in Unity.",
        "Create color gradient palettes in Photoshop using different Color Scheme combinations.",
        "Properly import and export models without any errors.",
        "You will learn how to light scenes properly in Unity using different Color Schemes.",
        "Work systematically fast in Maya, Zbrush, Photshop & Unity."
      ],
      "course_content": {},
      "requirements": [
        "Basic knowledge of computer navigation",
        "Learn To Make Epic Low Poly Scenes In Unity [Beginner]"
      ],
      "description": "Watch the course's free preview videos before buying, especially the 1st one. The 1st video will show you how to save money and get the best savings especially if you are buying by bundles. Take advantage of this while it's still there.\n\nWelcome to the Learn To Make Epic Low Poly Scenes In Unity [Intermediate] !  This course should be taken if you've already took the Learn To Make Epic Low Poly Scenes In Unity [Beginner] course. The purpose if this course is to enhance what you've already learned in the beginner course and introduce new things like Shaders, apply new modeling techniques and much more! In terms of Plants VS Zombies this is practically the second wave. This course will be semi fast pace and it should prepare you to the Learn To Make Epic Low Poly Scenes In Unity [Advanced].\nIn this course I will teach you how to create the Swamp Blue Scene. Keep in mind this course is targeted for intermediate users in Maya, Zbrush, Unity & Photoshop. If this course is too fast for you, I suggest taking the Beginner course first where we created the Portal Green Scene from scratch and went through all basics and fundamentals.  Its best to have fundamental understanding first before shortcuting your way through everything so at least you understand the process & you don't miss out on basics.\nIn this course, you will learn to apply & enhance what you've learned on the beginner course which are below:\nOrganizing & Structured Planning\n-You will learn how to plan out, structure, and manage your ideas so you can work efficiently.\n-You will be exposed to different art resources and game development community so not only me but other professionals can help you.\nModel Efficiently in Maya 2018 and Zbrush 4r7 & 4r8\n-You will learn the basics and workflow of modeling from Maya to Zbrush.\n-You will learn how to freestyle, find your own art style & most specially enjoy working on your craft.\n-Maya and Zbrush interface will be as familiar as your hands.\nColor Theory & Color Schemes\n-You will be profoundly familiar with the fundamentals of Color Theory and Color Schemes.\n-You will learn how to effectively learn, remember everything you ever study, and most importantly achieve any goals you've set for yourself.\nCreate Gradient Textures\n-Creating palettes and making color combinations will be one of your specialties.\nImport/Export\n-Having unclean import/export with a lot of errors will be a thing in the past.\nSet Up Scene In Unity\n-You will learn how to design and set up a scene in Unity.\nLighting Scenes In Unity\n-With all the knowledge you've accumulated in Color Theory, lighting using different Color Schemes will make all your creations stunning and beautiful.\nUnity Particle Effects\n-You will learn how to create a mass variety of VFX (particle effects) in Unity that will elevate your scenes or game to the degree of a pro.\nKeep in mind I am not going into details of what we've already learned on the Beginner Class. If you want an extensive explanation of things especially Color Theory I suggest you take the Beginner's Class first before jumping into this because the Beginner course will set up the foundation of why we do what we do. But if you can follow along without taking the Beginner course, please, I welcome thee.\n\nSo what's new on the Intermediate course?\nNew modeling techniques (Let's up the complexity!)\nWe will add a Shader into the scene\nWe will apply and try out different Color Schemes in Unity\nNew VFXs\nBaking Lights in Unity\nRendering in Cinemachine\nBONUS: Animations\n\n\nAre you ready!?\nLets do this!  :)",
      "target_audience": [
        "Anyone who wants to learn Low Poly 3D Modeling",
        "Anyone who wants to know how to light scenes",
        "Anyone who wants to learn Maya 2018",
        "Anyone who wants to see how Color Theory|Color Schemes is applied in creating a texturing & lighting Unity scenes",
        "Anyone who wants to learn how to make Palettes in Photoshop",
        "Anyone who wants to learn Zbrush 4r7 and 4r8",
        "Anyone who wants to learn how to make shaders",
        "Anyone who wants to learn Unity 2018",
        "Anyone who wants to learn how to make particles in Unity"
      ]
    },
    {
      "title": "Full-Stack Game Development - Kotlin & Compose Multiplatform",
      "url": "https://www.udemy.com/course/full-stack-game-development-kotlin-compose-multiplatform/",
      "bio": "Build an Engaging Game for Android, iOS, Desktop, and Web with Jetpack Compose using Kotlin Multiplatform technology.",
      "objectives": [
        "Build Apps for multiple platforms using a single codebase.",
        "Build a simple 2D Game in Jetpack Compose, that will be available on Android, iOS, Desktop and Web!",
        "Using Canvas in Jetpack Compose to create physics for the purpose of the Game.",
        "Play sound effects on each platform separately, to create more engaging game experience.",
        "Track the users Score in the Game. Current and Best users Score.",
        "Implement a Collision Detection between Pipe objects and a Bee character.",
        "Animations in Jetpack Compose.",
        "Export and Deploy both Desktop and a Web applications.",
        "Master an emerging technology called Kotlin Multiplatform!",
        "Share 100% of your codebase (Logic + UI) between platforms."
      ],
      "course_content": {},
      "requirements": [
        "Basic knowledge about Jetpack Compose",
        "Basic knowledge about Kotlin Multiplatform",
        "Basic knowledge about Compose Multiplatform is a plus",
        "Basic knowledge about Kotlin programming language",
        "Basic knowledge about Android Developement"
      ],
      "description": "Developing a 2D game with Jetpack Compose is possible. And not only that, we’re gonna target four different platforms, like: Android, iOS, Desktop and even Web (Kotlin WASM)!  I’m gonna teach you how to create engaging game, by sharing 100% of the codebase. Both the business logic and the UI.\n\n\nThe app itself will have a native performance on each platform. No need to worry about sacrificing the efficiency. Because we will be using Kotlin Multiplatform technology, as well as Compose Multiplatform framework to share the UI between platforms.\n\n\nThe game itself is basically a copy of a Flappy Bird. Besides jumping around, realistic physics, collision detection, score counting and sprite sheet animation, I’m gonna teach you how to implement various sound effects to make this game more engaging for the user.\n\n\nPlus at the end of this course, I’ll show you how to export and deploy this game as a static website that you can share publicly, so that other people can try out and play the game that you have created!\n\n\nIn just two hours you’re gonna acquire the skill, that in the past required a team of developers with the knowledge of various technologies. Kotlin Multiplatform is the future. Because you can launch you own startup ideas as a solo developer, quickly.\n\n\nRequirements\nHere’s what you need to know before enrolling in this course:\nBasics of Jetpack Compose.\nKotlin programming language.\nBasics of Kotlin Multiplatform technology.\n\n\nIf you are not sure about those above mentioned course requirements, you can check out my other courses, that are beginner friendly. This one however, is an intermediate-level course.\n\n\n\n\nOther than that, if you are ready.\nLet’s get started!",
      "target_audience": [
        "Mobile Developers",
        "Android Developers",
        "Kotlin programmers",
        "iOS Developers",
        "Anyone who wants to build Apps for multiple platforms using a single codebase and Kotlin language!"
      ]
    },
    {
      "title": "Design and Build a Thrilling Rail Shooter Game in Unity",
      "url": "https://www.udemy.com/course/create-a-rail-shooter-game-with-unity/",
      "bio": "Learn to Build a Rail Shooter Game with Stunning Visual Effects and Engaging Gameplay using Unity",
      "objectives": [
        "Create a complete rail shooter game similar to Virtua Cop and House of the Dead using Unity",
        "Object Oriented Programming (Inheritance & Interface)",
        "Utilizing events for communication between scripts",
        "Scriptable object for creating custom weapon data",
        "Define a path for the camera movement",
        "Post processing usage to enhance the looks of the game",
        "Audio manager & mixer settings"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Asset Links"
        ],
        "Project Development": [
          "Video 01. Unity Project Setup",
          "Video 02. Environment Modelling",
          "Video 03. Camera Path Movement",
          "Video 04. Creating Shoot Out Point",
          "Video 05. Basic Shooting Mechanism",
          "Video 06. Initial Enemy Setup",
          "Video 07. Enemy Animation Preparations",
          "Video 08. Enemy Animation Scripting",
          "Video 09. Enemy Movement Fix and Hit Animation",
          "Video 10. Basic Hit Effects",
          "Video 11. Enemy Hit Effects",
          "Video 12. Exploding Props",
          "Video 13. Custom Weapon",
          "Video 14. Weapon Pickup",
          "Video 15. Weapon Effects",
          "Video 16. Delayed Action Extension",
          "Video 17. Game Manager States",
          "Video 18. Game Manager Score and Lives",
          "Video 19. Weapon Pickup Visual",
          "Video 20. Enemy Attack System",
          "Video 21. Enemy Attack Visual",
          "Video 22. Player Damage Effects",
          "Video 23. Hostage Setup",
          "Video 24. Area Timer Setup",
          "Video 25. Game Play Statistic",
          "Video 26. UI Health Bar",
          "Video 27. UI Weapon HUD",
          "Video 28. UI Timer",
          "Video 29. UI Hostage Killed",
          "Video 30. UI Intro and End Screen",
          "Video 31. Bug Fixes part. 1",
          "Video 32. Custom Mouse Cursor",
          "Video 33. Looks Development",
          "Video 34. Enemy Upper Body Fix"
        ],
        "Audio Implementation": [
          "Video 35. Audio Library Setup",
          "Video 36. Audio Player Setup",
          "Video 37. Audio Getter Custom Editor",
          "Video 38. Optimizing Audio Workflow",
          "Video 39. Applying Sound FX"
        ],
        "Polishing": [
          "Video 40. Shots Calculation Bug Fix",
          "Video 41. Rank Calculation",
          "Video 42. Pause & Volume Setting",
          "Video 43. Player Dead Setup",
          "Video 44. Title Menu Scene",
          "Video 45. Title Scene Continued",
          "Video 46. Let's Build the Game!"
        ],
        "Additional Bug Fixes": [
          "Video 47. Area Cleared Bug Fixing"
        ]
      },
      "requirements": [
        "Unity 3D Installed on your PC (version 2019 preferable)",
        "A strong will to learn game development",
        "Basic understanding of Unity C# API"
      ],
      "description": "Ready to learn how to create a thrilling rail shooter game that will keep players engaged for hours? Join us in this exciting course where we'll teach you how to create a game similar to Virtua Cop and House of the Dead series from scratch using Unity.\nThroughout the course, you'll learn about object-oriented programming and gain a better understanding of Unity's C# API. We'll show you how to download all the assets you need for the project for free from the Unity asset store, and we'll provide links to these assets in the lectures.\nBut that's just the beginning. We'll delve into advanced concepts like Inheritance and Interface, Events for loose coupling, path trajectory for camera movement, and post-processing to enhance the visual appeal of your game.\nThis course is aimed at intermediate level students with a basic knowledge of Unity's C# API, but anyone who wants to learn how to make games is welcome to join. Whether you're an indie game developer, a seasoned pro, or just a game enthusiast looking to learn more about game development, this course is for you.\nSo why wait? Sign up now and learn how to create a rail shooter game that will have players coming back for more!\n\nWhat they say about this course:\nAndrew Newman - \"Halfway through, and I've been really delighted to work along with this tutorial and have been seeing 1:1 consistency between what is being taught and what I'm able to create. Looking forward to finishing soon!\"\nBrian Cole - \"Excellent course. Lots of new ideas and tips that you don't see in a beginner course e.g. extensions. I particularly like the very flexible way he implements the audio system.\"\nMichael - \"Excellent. Second course I have taken with the excellent instructor.\"",
      "target_audience": [
        "Intermediate Unity Developer"
      ]
    },
    {
      "title": "Skeletal Animation and Inverse Kinematic (IK) in Unity 2020",
      "url": "https://www.udemy.com/course/unity-2d-animation-2020/",
      "bio": "Animate a character or an object in Unity using Skeletal Animation (bones) and Inverse Kinematic. Learn 2D Animation.",
      "objectives": [
        "Create bones for characters and objects",
        "Adjust bones, geometry and weights",
        "Inverse Kinematic (IK)",
        "Create animation using bones and IK"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Import a character. Sprite Editor. Skinning Editor,": [
          "Getting Ready",
          "Install Packages. Import PSB",
          "Bones (buid a skeleton)",
          "Geometry",
          "Weights"
        ],
        "Animation and Inverse Kinematic (IK)": [
          "Animation: basics",
          "Inverse Kinematic in Unity: limb solver",
          "Inverse Kinematic: chain solver",
          "Final animation fro Troll"
        ],
        "Thank you!": [
          "Thank you!"
        ]
      },
      "requirements": [
        "Installed Unity (latest version)",
        "Installed Photoshop"
      ],
      "description": "Welcome to the Skeletal Animation and Inverse Kinematic in Unity 2020!\nIn this course you will learn:\nskeleton animation concepts\nhow to import a character into a project\nhow to create bones\nwhat is IK (inverse kinematics) and how to work with it\nhow to use bones and ik to create animations\nas well as the principle of the built-in Unity animator\nThe course is 100% practical. Together, we will animate the character: from importing the image file and working with bones to the final animation. No useless information - only useful tools and techniques that are necessary to create skeletal animation in Unity.\nIf you like to create games in Unity and want to learn how to create animations of characters and environments using all the power of a modern engine and new technologies - join the course!",
      "target_audience": [
        "This course is for everyone, who likes to create games in Unity and want to use skeletal animation for their projects"
      ]
    },
    {
      "title": "Game Jams & Rapid Prototyping in Unity",
      "url": "https://www.udemy.com/course/unityjamming/",
      "bio": "Learn how to jam out game prototypes FAST? This course covers techniques to accelerate an AMPLIFY your jamming process!",
      "objectives": [
        "Rapidly prototype a game idea, and create a library of boilerplate code, and take part in Game Jams."
      ],
      "course_content": {
        "Introduction": [
          "About this Course",
          "What We'll Cover"
        ],
        "Preperation": [
          "Preparation & Your Team",
          "Ideas, Scope & Other Advice"
        ],
        "Jam Session 01 : Creating basic game logic": [
          "Making the Player Logic",
          "Creating a Custom Camera"
        ],
        "Jam Session 02 : Triggers, Timers & Scoring": [
          "Creating & Reacting to Simple Triggers",
          "Let's make a reusable Score Manager",
          "Making a reusable Time Manager"
        ],
        "Jam Session 03 : Levels, UI & Gameflow": [
          "Simple UI & Gameflow in Unity",
          "Simple Grey Boxing in Unity with Primitives and Prefabs"
        ],
        "Jam Session 04 : Finishing Up & Polish": [
          "Implementing Audio quickly with an Audio Manager",
          "Simple Visual Polish & Tidying Up",
          "Final Game Flow, Level Management & Packaging Up"
        ]
      },
      "requirements": [
        "The course is suitable for anyone with basic skills with Unity 3D"
      ],
      "description": "Ever wanted to take part in a game jam but don't know where to start?\nMaybe you've got an idea that you want to get up and running quickly?\nIn Game Jams & Rapid Prototyping in Unity, we cover techniques and code to keep you focused on rapidly creating games not boilerplate code.\nGet prepped for creating your own prototypes at 48 hour game jams.\nLearn the pros, and pitfalls of creating a game with a heavy time constraint!\nHow to form teams, and manage the idea generation process.\nFilling in art and audio when you're just a coder\n\n\nWe also cover making a full game jam prototype in just 3 hours of fully explained, code along exercises. Covering creating simple game logic, and a reusable framework to deal with common prototype functionality such as :\nScoring\nTiming\nUI\nGameflow\nAnd Audio\n\n\nThis course is suitable for people with basic to intermediate experience with Unity 3D who want to learn about making prototypes quickly.",
      "target_audience": [
        "Anyone who wants to make small prototypes, or participate in Game Jams."
      ]
    },
    {
      "title": "Unity | C# - The complete game development beginners course",
      "url": "https://www.udemy.com/course/a-complete-step-by-step-course-to-become-a-gamedeveloper/",
      "bio": "Learn how to develop your own games using the Unity game engine and the C# programming language as a beginner",
      "objectives": [
        "Through this course, you will learn to utilize the Unity Game Engine and the powerful C# scripting language to develop amazing and polished games.",
        "This course requires no past experience with Game development, Unity or programming experience. All contents of the course are thoroughly explained with detail.",
        "Through this course, students will create two different games from scratch (a 2D and a 3D) that explore various aspects and features of game development.",
        "The skills learned through the course are highly transferable, setting the foundations to allow learning other aspects of game development with more ease",
        "By the end of the course you will be able to develop your own games through the unity game engine and write code with C# scripting language.",
        "The course highlights important aspects of game development and provide different methods of creating unique and enjoyable games.",
        "Students will have the chance to explore a vast amount of features that unity and C# offers that they will implement in their own games.",
        "Learners are encouraged to implement games whilst learning and adding their own personal touch designs, which can be later added be added to their portfolio",
        "The material starts from the fundamentals of game development and gradually build up to more advanced techniques and features.",
        "Through the duration of the course, various industrial tools will be covered to prepare students for industrial employment"
      ],
      "course_content": {
        "Introduction": [
          "Introduction to the course - Is this course suitable for you ?",
          "Why Unity? Because its awesome",
          "Online learning tips - Finding the best way of learning for you",
          "Join our community - How to join our server"
        ],
        "Follow the Light - 2D Game Creation": [
          "Design and Time Management - Scheduling appropriately and realistically",
          "Brainstorming Ideas - How to create unique ideas for your games",
          "Colouring and Aesthetics - Picking the appropriate colours for each game",
          "Setting up Unity - Installing Unity Hub and a Unity editor",
          "Unity Interface - Understanding Unity's interface",
          "Programming time - Creating our first script",
          "Understanding Classes - An introduction to classes and how to use them",
          "If statements - Comparing values in our script with if statements",
          "Operators - What are operators and how to use them",
          "If statements 2 - A deeper look into if statements",
          "Declaration context - Understanding how declaration affects our code",
          "Transformations - Moving, Rotating and scaling our game objects through script",
          "Access modifiers for variables - A Deeper look at access modifiers of variables",
          "MonoBehaviour Base Class - Deriving key functions to our script",
          "Rigidbodies - Connecting our character to the physics engine of Unity",
          "Its Alive! - Capturing keyboard input through our script to move our character",
          "Creating our own methods/functions - The importance of functions",
          "Jump up and get down - Adding a basic jump and a double jump to our movement",
          "Understanding collisions - An overview of how collisions work in Unity",
          "Jump up and get down 2 - Extending our jump to something more interesting",
          "Techniques to communicate between scripts",
          "Lighting - How lighting can massively improve the quality of a scene",
          "Object Parenting - What it is and how we can use it",
          "Follow Camera - Make smooth camera that follows our character around",
          "Adding gems - Creating a gem that enables the colouring swap mechanic",
          "Collision function comparison OnTrigger vs OnCollision - When to use each one",
          "Prefabs - What are prefabs?",
          "Loops - How to use the for loop",
          "Evaluating collisions - Balancing movement with collision evaluation",
          "Animation - Adding animation to our gems",
          "Arrays - Exploring the usages of data structures",
          "Loops 2 - The variation of the for loop called foreach loop",
          "Ignoring Collision - Adding coloured gates that ignore collision of some colours",
          "Map Design - Ways to make a unique map design",
          "Map design assignment",
          "Lists - An alternative data structure to arrays",
          "Moving Gates part 1 - Make our gates moves around between points",
          "Moving Gates part 2 - Make our player move along with the moving gates",
          "Rotating Gates - Enable our gates to rotate based on time",
          "Changing Levels - Ways to switch between scenes/levels",
          "Creating collectibles and a User Interface to display them",
          "Static - Taking a look at a special method type called static",
          "Collectibles that help? - Making collectibles increase our light's radius",
          "New Mechanic Assignment",
          "Playtesting - Break your own game before everyone else",
          "Creating a main menu - Adding some much needed UI elements to our game",
          "Building our Game - Preparing our game for release",
          "Recapping - The lecture to rule them all",
          "Practice Test time - Test what you've learnt thus far"
        ],
        "Icy Waves - 3D Game Creation": [
          "Game design and time management - Breaking our game down to small bits",
          "Project Templates - Creating our project and discussing templates",
          "Version control - What it is and why you MUST do it",
          "A new way to capture input - Reviewing and implementing the new input system.",
          "Fixing our Movement - Having a look at the properties of the rigidbody component",
          "Physic Materials - What are they and when to use them",
          "Personalizing Visual Studio - Changing the defaults to your likes",
          "Setting up our Camera - Make our camera and player rotate together",
          "Material - Colouring up our scene through materials",
          "Shooting activated - Adding the ability to shoot to our player",
          "While Loop - How to use the while loop",
          "Attack! - Create our enemies and make them chase the player",
          "Creating enemy spawn points - Set a spawn points that enemies will spawn from",
          "AI Special NavMeshAgent 007 - Upgrade and improve our enemies to special agents",
          "That Hurt! - Adding damage to both enemies and players",
          "Waves after Waves - Create waves of enemies",
          "Cursor Class - Locking our cursor while in game",
          "Adding Powerups - Triple Shooter",
          "Do while loop - A variation of the while loop",
          "Adding mechanics - Making Teleportation Portals",
          "Doctor Strange like - Allow our player to have their own personal portals",
          "Raycast - Exploring the many uses of raycasting",
          "Smooth transitioning of portals - Further improving the portal mechanic",
          "Coroutine - What is a coroutine?",
          "Adding audio - Making our game feel less dull with sound effects",
          "Keeping score - Tracking points gained based on kill count",
          "Levelling up our Character - Adding an actual model to our character",
          "Replace the enemy placeholders with a different model.",
          "Animator - How to use the Animator component to animate our characters",
          "Pickup Generator - Randomly spawn pickups around our map",
          "Switch Statement - A multiway branch statement",
          "Powerful and Good looking - Adding assets to our pickups",
          "Creating more pickups - Adding the freeze and indestructible pickups",
          "Implementing the functionality for the new pickups - Not just for the looks",
          "Particle Systems - Understanding particle systems",
          "Let it snow - Creating snow through particle systems",
          "Trail Renderer - Improving our visuals for shooting",
          "Create your own mechanic",
          "Terrain - Making custom terrain for our levels",
          "Adding UI - Building our User Interface",
          "Main Menu - Making a more interesting main menu screen",
          "Options Menu - Extending our menus with player options",
          "Saving data permanently - Highlighting ways to save data on a machine.",
          "Extending our user interface",
          "Polishing our Pickups - Adding details to our pickups",
          "More Details! - Improving the looks of our game",
          "Implementing cooldown - Adding cooldown to the Player's spawn portals mechanic",
          "Post-Processing Effects - How to enhance the visual effects of our scene",
          "Applying Post-Processing Effects to improve our game's looks",
          "Add visual effects to our enemies and bullets",
          "Adding Enemy Variations - Extending the enemy types attacking our character",
          "Final test",
          "Final thoughts on our game",
          "FINAL ASSIGNMENT!",
          "Version Control 2 - Push our latest changes to our git repo",
          "The end - Last video of the course"
        ]
      },
      "requirements": [
        "The course requires no past experience and allows students of all background knowledge to start learning.",
        "A PC that is able to run Unity.",
        "A passion for games."
      ],
      "description": "This course focuses on teaching the fundamentals of game development using the Unity game engine and the programming language C# with the ultimate goal of allowing students to confidently develop out-of-this-world games.\nThe course has been developed in 2022 and aims to provide the most updated and latest features of Unity. In addition, the contents of the course will be updated weekly to ensure top quality to students.\nNo previous experience is needed for taking this course. Lectures are structured to start from the very basics of game development and slowly build up to more advanced and complicated features to enable a more complete understanding of game development.\nLectures cover everything in detail, using multiple examples and references to the official documentation to ensure students understand and comprehend the material shown.\nThe course focuses on teaching essential theories and practices for game development as well as a variety of Unity's features and ways to utilize them in C# scripts to provide students with a wider range of tools to ensure that they are well-equipped to develop their own games.\nThe material of the course starts off with the fundamentals of game development, unity, and C#, and slowly builds up to more challenging tasks that students will be able to complete by the end of the course.\nSkills taught in lectures are highly transferable and can be applied to other game engines, other programming languages, or even other areas outside of game development that require programming.\nAs a vehicle for teaching, students will be developing two different games (2D and 3D) of their own that will be guided by lectures and can apply the skills learned to their own projects. The course is structured in a way to encourage involvement from students in order to get comfortable with using C# and Unity.\nA discord server is in place which attempts to unite game developers together and enable students to meet like-minded people to create game development teams, create friendships, and also ask questions and get support for their development journey.",
      "target_audience": [
        "A course for people looking to learn about creating amazing video games.",
        "Beginners who are looking to get into programming, unity and game development.",
        "People who are interesting in seeing how games are made."
      ]
    },
    {
      "title": "Learn Unity 3D - The Ultimate Program",
      "url": "https://www.udemy.com/course/learn-unity3d/",
      "bio": "Learn the basics of Unity from a Unity Live Help Expert! Save time with the tips & advice that most courses dont teach!",
      "objectives": [
        "Learn the basics of Unity 3D WITH tips and tricks that will save you a lot of time and money compared to general unity basics courses"
      ],
      "course_content": {
        "Starting Course - How To Get Started In The Game Industry": [
          "Introduction"
        ],
        "Starting Course - Part 1": [
          "Lesson 1: Why do you want to join?",
          "Lesson 2: Industry Jobs - Part 1",
          "Lesson 3: Industry Jobs - Part 2"
        ],
        "Starting Course - Part 2": [
          "Lesson 4: Future of Industry",
          "Lesson 5: Where are games Played?"
        ],
        "Starting Course - Part 3": [
          "Lesson 6: Industry Stats & How To Start?",
          "Lesson 7: Common Misconceptions"
        ],
        "Starting Course - End": [
          "Conclusion: Next Steps",
          "Bonus"
        ],
        "Course 1 - Installing and Setting Up Unity 3D": [
          "Intro to Course and Program"
        ],
        "Course 1 - Part 1": [
          "Lesson 1 - Plans, Pricing and Licenses, What do I really need?",
          "Lesson 2 - Downloading Unity, Unity Hub, Tips and Versions",
          "Lesson 3 - Install Unity, Betas, Unity History & Two Main Spots"
        ],
        "Course 1 - Part 2": [
          "Lesson 4 - Install Options, IDEs, Build Types, Build Options",
          "Lesson 5 - Basics of Unity, New Project Setup, Folder Structure",
          "Lesson 6 - Tools, Asset Store, Layouts & Windows, Version Control, Basics"
        ],
        "Course 1 - Part 3": [
          "Lesson 7 - Two Worlds of Unity (3D and Canvas), Usage Tips",
          "Lesson 8 - Inspector, Components, Physics, Layouts, Tips/Tricks"
        ],
        "Course 1 - Next Steps": [
          "Lesson 9 - Next Steps and One Last Tip!",
          "Conclusion"
        ]
      },
      "requirements": [
        "None"
      ],
      "description": "LEARN UNITY TODAY with the BEST course on Unity 3D! Over 22,000+ Students WORLDWIDE!!\nWHY SHOULD YOU TAKE THIS COURSE?\nBy the end of this course, students will have the skills and expertise to:\n\n1. Install and Setup Unity CORRECTLY\n\n2. Setup and Create Unity Projects AND AVOID COSTLY MISTAKES!\n\n3. Learn Tips and Tricks that can save you incredible time and money!\n\nIf you require Unity 3D for Work or for School and need all the help you can get to learn it, or at the very minimum need to LEARN UNITY 3D to obtain a BETTER JOB or to BECOME A GAME DEVELOPER, then THIS COURSE IS FOR YOU!\n\nI was once like you, FRUSTRATED with trying to learn Unity 3D!! Now I'm here to share with you the tips and tricks I wish I knew and by the end of it you'll BECOME A UNITY 3D ROCKSTAR!\n\nINSTRUCTOR INVOLVEMENT:  Due to the busy schedule Nav has as he is developing new games and apps, working as a Unity Live Help Expert (Part of Unity's Live Help Team), speaking at seminars around the world, running his various companies,  building new programs and courses, and ofcourse spending time with his family, fans and other students, etc. it will naturally be a challenge for Nav to be available all the time.\nWHO SHOULD TAKE THIS COURSE?\nThis course is aimed at beginners who are either students in high school or university or employees in a Job looking to upgrade their skills.  This is a great course for future game developers or those who are planning to start working in the video game industry.\nWHY TAKE THIS COURSE?\n1. You've got to learn Unity 3D for Work or Business\n2. You're looking to get a higher grade in School\n3. You want to become a video game developer\n\nLEARN UNITY 3D NOW - TAKE ACTION TODAY!\nImportant information before you enroll:\nIn case you are not fully satisfied with the course, don't forget you are covered by a 30 day money back guarantee, full refund, no questsions asked!\nOnce enrolled, you have unlimited, lifetime access to the course!\nYou will have instant and free access to any updates I may add to the course over time.",
      "target_audience": [
        "Beginners to Unity 3D and Game Development"
      ]
    },
    {
      "title": "Complete Unreal Engine 4 Megacourse: Beginner to Expert",
      "url": "https://www.udemy.com/course/complete-unreal-engine-megacourse-beginner-to-expert/",
      "bio": "Learn how to develop games and design like a pro with this step-by-step course!",
      "objectives": [
        "How to use the Unreal Engine and its elements",
        "The interface and tools of Unreal Engine",
        "The principles of video game mechanics",
        "The principles of BSP geometry",
        "The principles of blueprint scripting",
        "How to structure your code",
        "How to design, develop and script your level to replicate your favourite games",
        "How to create and add players",
        "Including audio in your games",
        "How to create your own video game"
      ],
      "course_content": {
        "Introduction to Unreal Engine": [
          "Introduction",
          "Navigating the Engine Pt. 1",
          "Navigating the Engine Pt. 2",
          "Introduction to the Basics of Unreal"
        ],
        "Materials": [
          "Materials Pt. 1",
          "Materials Pt. 2",
          "Materials Pt. 3",
          "Materials Pt. 4"
        ],
        "Level Creation": [
          "BSP Brushes Pt. 1",
          "BSP Brushes Pt. 2",
          "BSP Brushes Pt. 3"
        ],
        "Your first Video Game in Unreal": [
          "Your First Video Game Pt. 1",
          "Your First Video Game Pt. 2",
          "Your First Video Game Pt. 3",
          "Your First Video Game Pt. 4"
        ],
        "Blueprints: Beyond Basics": [
          "Advanced Blueprints Pt. 1",
          "Advanced Blueprints Pt. 2",
          "Advanced Blueprints Pt. 3"
        ],
        "How to structure your code": [
          "Code Structure Pt. 1",
          "Code Structure Pt. 2",
          "Code Structure Pt. 3",
          "Code Structure Pt. 4"
        ],
        "Improving our Video Game": [
          "Game Instance Pt. 1",
          "Game Instance Pt. 2",
          "Game Instance Pt. 3",
          "Game Instance Pt. 4"
        ],
        "Polishing": [
          "UI, ScoreBoard and Level Managing Pt. 1",
          "UI, ScoreBoard and Level Managing Pt. 2",
          "UI, ScoreBoard and Level Managing Pt. 3"
        ],
        "Implementing Audio and New Features": [
          "Implementing Audio And New Features Pt. 1",
          "Implementing Audio And New Features Pt. 2"
        ],
        "Conclusion": [
          "Conclusion",
          "Last Words"
        ]
      },
      "requirements": [
        "No previous knowledge of Unreal Engine required",
        "A desire to learn!",
        "A positive attitude!"
      ],
      "description": "Learn games development with Unreal Engine 4!\nDevelop like a pro!\nHave you ever wanted to create your own games? In the era of digital technology, videogames are bigger than they have ever been. Maybe you want to recreate a mechanic you've seen in a video game and show it off on social media, or perhaps you want to recreate a level you've played recently in your favourite video game. Whether you’re new to the games development scene or hoping to make a career out of it, making video games isn’t only for the pros. We’re here to teach you how.\nIn this course, you’re going to learn everything about game development in Unreal Engine, from learning BSP geometry to creating your own levels, learning blueprint scripting and finally adding a player that can move within your world. You’ll even learn how to recreate specific mechanics from your favourite videogames.\nOur instructors have years of experience not only in games design, but also in teaching, and the expertly-crafted syllabus is designed to be easy to follow and thorough. We’ve even included plenty of examples designed on-screen for you to study. That’s why this is the only Unreal Engine Blueprints course you’ll ever need to develop game levels and design like a pro!\nStart developing your game today!\n\n\nAfter taking this course you’ll be able to:\n\n\nUse Unreal Engine professionally\nScript blueprints\nDesign your video game\nUse audio in your game\nInclude players and create levels",
      "target_audience": [
        "Anyone who wants to learn to develop games - no experience needed!",
        "Game developers/designers who want to learn new styles",
        "Anybody with an interest in games development blueprints"
      ]
    },
    {
      "title": "The Ultimate Guide to ROBLOX Scripting & Development (2025)",
      "url": "https://www.udemy.com/course/the-ultimate-guide-to-roblox-scripting-development/",
      "bio": "Go from Complete BEGINNER to Game CREATOR in Roblox Studio! Everything you need to know about scripting and development!",
      "objectives": [
        "Become a skilled programmer in Roblox Lua!",
        "Learn and apply Roblox Studio concepts!",
        "Create your first Roblox game!",
        "Get support from my Q&A section!",
        "Master optimal programming practices!",
        "Be able to debug and fix errors in your script!",
        "Create GUIs for your games!"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Installing & Opening ROBLOX Studio"
        ],
        "Roblox Studio Basics": [
          "Studio Settings & Navigation",
          "Basic Building",
          "Studio Layout & Tools",
          "The Explorer Window",
          "The Properties Window",
          "Studio: Next Gen Interface"
        ],
        "Scripting Fundamentals": [
          "Printing",
          "Printing Notes",
          "Printing Quiz",
          "Properties",
          "Properties Notes",
          "Properties Quiz",
          "Variables",
          "Variables Notes",
          "Variables Quiz",
          "Functions",
          "Functions Notes",
          "Functions Quiz",
          "If Statements",
          "If Statements Notes",
          "If Statements Quiz",
          "Tables",
          "Tables Notes",
          "Tables Quiz",
          "Built-In Functions",
          "Built-In Functions Notes",
          "Built-In Functions Quiz",
          "Looping",
          "Looping Notes",
          "Looping Quiz",
          "Events",
          "Events Notes",
          "Events Quiz",
          "Roblox Basics Test"
        ],
        "Roblox Studio Concepts": [
          "GUIs: Part 1",
          "GUIs: Part 2",
          "GUIs: Part 3",
          "Animations",
          "Animations Extras",
          "Tools: Part 1",
          "Tools: Part 2",
          "Leaderstats"
        ],
        "Advanced Scripting": [
          "Client-Server Model",
          "Remote Events & Remote Functions",
          "UserInputService",
          "DatastoreService",
          "MarketplaceService: Part 1",
          "MarketplaceService: Part 2",
          "TweenService",
          "BadgeService"
        ],
        "Roblox Studio Extras": [
          "Useful Plugins",
          "Good Programming Practices",
          "Common Debugging",
          "Using AI for Roblox Studio"
        ],
        "Putting-it-together! (Making an Obby)": [
          "Part 1: Building & Data Saving",
          "Part 2: Monetization"
        ],
        "Bonus Material": [
          "How to use RBXL files",
          "Making a Squid Game Mini-game (Glass Bridge)"
        ],
        "Archives": [
          "Part 1: Making the Map",
          "Part 2: Adding Monetization",
          "Part 3: Saving the Data"
        ]
      },
      "requirements": [
        "No programming experience needed!"
      ],
      "description": "USE CODE JULY2025 FOR A BIG DISCOUNT!\nDo you want to create your own Roblox games and earn Robux?\nIf so, you're in the right place!\n\n\nIn this course, I'll take you from complete beginner to game creator. You'll learn:\n- How to navigate and master Roblox Studio\n- The basics of coding in Lua—no prior experience needed!\n- Advanced scripting techniques to make your games stand out\nAnd you'll have:\n- Interactive quizzes to reinforce your learning\n- Step-by-step guidance to build your very first Roblox game\nBy the end of this course, you'll have the skills to bring your ideas to life.\nAre you ready? Join me today, and let’s start creating!\n\n\nHi, I'm Scriptix, and I love teaching people. I have been on ROBLOX for about 9 years now.\nI created the course as a way of teaching others how to code.\nIn this course, I start by introducing the Roblox Studio interface and its basic features.\nThen, I will teach you about the basics of the Roblox scripting.\nI will introduce intermediate and advanced concepts, before our final project.\nIn the last section, we will use our newly-founded knowledge to create our very first ROBLOX game!\nThis course is perfect for anyone looking to learn game development and to introduce coding for kids.\n\n\nI hope you find joy learning through my course as much as I had making this for you.\n- Scriptix",
      "target_audience": [
        "This course is for anyone with a passion to learn ROBLOX development as a hobby, or maybe something more!"
      ]
    },
    {
      "title": "Your First Game in Gamemaker",
      "url": "https://www.udemy.com/course/your-first-game-in-gamemaker/",
      "bio": "Learn how to create a Mario inspired platform game from scratch using Gamemaker's simple GML Visual language",
      "objectives": [
        "Learn the basics of working within Gamemaker, one of the best tools for making 2D games",
        "Code a player character that moves, jumps, shoots and can jump on enemies heads while collecting powerups and coins",
        "Create enemy creatures which have specific behavior allowing some to chase and damage the player",
        "Produce a complete game with a title screen, multiple levels, room intro names, transitions, particle effects, checkpoints and sounds"
      ],
      "course_content": {
        "Introduction": [
          "Getting Started",
          "Capturing Input",
          "Rooms",
          "Introduction Quiz"
        ],
        "The Player Character": [
          "Moving The Player",
          "Solid Objects",
          "Horizontal Collisions",
          "Vertical Collisions",
          "Player Jumping",
          "Player Sprites",
          "Acceleration and Drag",
          "The Player and Collisions Quiz"
        ],
        "Camera and Tiles": [
          "The Camera",
          "Adding Tiles",
          "Camera and Tiles Quiz"
        ],
        "Enemies": [
          "Enemy Caterpillar",
          "Caterpillar Movement",
          "Damaging Enemies",
          "Enemy Death",
          "Enemies Quiz"
        ],
        "Entity Management": [
          "Health Bars",
          "Flashing Damage",
          "State Machines Part I",
          "State Machines Part II",
          "Dead State",
          "Entity Management Quiz"
        ],
        "Player Functions": [
          "Projectiles",
          "Macros",
          "Collectible Coins",
          "Spawning Powerups",
          "Applying Powerups",
          "Mystery Blocks",
          "Advanced Blocks",
          "Player Functions Quiz"
        ],
        "Enemy Bee": [
          "Enemy Bee",
          "Bounce Improvements",
          "Dust Effects",
          "Enemy Bee Quiz"
        ],
        "Title Screen": [
          "Title Screen",
          "Menu State",
          "Title Screen Quiz"
        ],
        "Room Basics": [
          "Initial Checkpoints",
          "Room Transitions - Fades",
          "Room Transitions - States",
          "Game Restarts",
          "Room Basics Quiz"
        ],
        "Game UI": [
          "Player Lives",
          "UI Design",
          "Game UI Quiz"
        ]
      },
      "requirements": [
        "No programming skills required, but a willingness to solve problems is recommended"
      ],
      "description": "Have you ever wanted to create your own game?  Well this course will show you how to create a small platform game using Gamemakers super intuitive GML Visual codeblock system.  You can have a cool game up and running in a matter of hours, and you can then export it as a stand alone game to share with friends, or upload it to Gamemaker's community GX games website for the world to play.\n\n\nYou will learn how to create a player character and implement a simple collision system so they can then run, jump on enemies, break blocks, shoot their wand, collect powerups and break mystery blocks in order to complete the level.  You will learn how to add multiple enemies who will chase and challenge the player.\n\n\nYou will then learn how to create multiple levels and how to set up smooth fading transitions between those levels.  We add player lives, checkpoints, particle effects, sounds and then finally we then add a title sequence, to give your game a professional feel.\n\n\nThe course is presented by Peter Morgan, who has been using Gamemaker for over 10 years.  He created the highly rated Udemy \"How to Make Tile Based Games in Gamemaker\" course, and which is still one of the highest rated Gamemaker courses on Udemy.  He also creates tutorials directly for Opera's Gamemaker Youtube page, as well as his own successful Slyddar channel, and is also an official Gamemaker Coach with Opera's Gamemaker coaching program.",
      "target_audience": [
        "Anyone with an interest in making or playing video games"
      ]
    },
    {
      "title": "Learn to build 40 2D and 3D games in Unity®!",
      "url": "https://www.udemy.com/course/learn-to-build-40-2d-and-3d-games-in-unity/",
      "bio": "Build your first simple games by learning fast game development. Learn to code in C# today with efficient projects!",
      "objectives": [
        "Be able to make 2D and 3D video games.",
        "Code in C#.",
        "Design Games.",
        "Build games from scratch.",
        "Put the games you make in this course into your portfolio."
      ],
      "course_content": {
        "Installing Unity and Visual Studio": [
          "Installing Unity and Visual Studio"
        ],
        "Introduction to Unity": [
          "Introduction",
          "Unity Editor",
          "Moving a Cube",
          "Materials",
          "Lights",
          "Particle Effects",
          "Applying Physics",
          "Assets Store"
        ],
        "Introduction to Coding": [
          "Introduction",
          "Variables",
          "Methods",
          "If Blocks",
          "Loops"
        ],
        "Introduction to Inputs": [
          "Introduction",
          "Key Presses",
          "Moving a Player",
          "Jumping",
          "Moving Forward",
          "Cycling Cameras"
        ],
        "Introduction to Prefabs": [
          "Introduction",
          "Introduction to Prefabs",
          "Random Angles",
          "Explosion Effect",
          "Adding Explosion Effects",
          "Cleaning up your Unity Game"
        ],
        "Make an Air Hockey Game": [
          "Introduction",
          "AirHockey Source Code - Mammoth Game",
          "Project Setup",
          "Setting up Physics",
          "Paddle Movement",
          "Game Bounds",
          "Bounciness",
          "Deceleration",
          "Collisions",
          "Scoring",
          "Player 2",
          "Interface",
          "Restarting the Game",
          "Sounds Effects",
          "Challenge Time",
          "AirHockey Source Code - Mammoth Game"
        ],
        "Make an Awesome Space Shooter": [
          "Make an awesome Space Shooter - Part 1",
          "Make an awesome Space Shooter - Part 2",
          "Make an awesome Space Shooter - Part 3"
        ],
        "Making a Side Scrolling Shooter": [
          "Making A Side Scrolling Shooter - Part 1",
          "Making A Side Scrolling Shooter - Part 2",
          "Making A Side Scrolling Shooter - Part 3"
        ],
        "Mouse Collision Game": [
          "Mouse Collision Game - Part 1",
          "Mouse Collision Game - Part 2"
        ],
        "Rotational Shooter": [
          "Rotational Shooter - Part 1",
          "Rotational Shooter - Part 2",
          "Rotational Shooter - Part 3"
        ]
      },
      "requirements": [
        "Must have a computer that can install Unity®.",
        "We recommend a basic knowledge of C#."
      ],
      "description": "\"Is a good place to start, and for the people who have already a background, good place to remember the basics.\"\nLearn to code by making video games. Build practical & fun 2D & 3D games with Unity!\nOne of the best features is that you can watch the courses at any speed you want. This means you can speed up the or slow down the video if you want to.\nThis course is project based so you will not be learning a bunch of useless coding practices. At the end of this course you will have real world apps to use in your portfolio. We feel that project based training content is the best way to get from A to B. Taking this course means that you learn practical, employable skills immediately.\nYou can use the projects you build in this course to add to your LinkedIn profile. Give your portfolio fuel to take your career to the next level.\nLearning how to code is a great way to jump in a new career or enhance your current career. Coding is the new math and learning how to code will propel you forward for any situation. Learn it today and get a head start for tomorrow. People who can master technology will rule the future.\nYou will get full lifetime access to this course for a single one off fee. John Bura has created many games, apps and training courses so he is extremely qualified to teach you how to master technology. This is an instructor that does not only teach, he produces apps. This means you get the most relevant information on how to code. Most courses do not show you practical skills and real world examples.\nWhat makes you a good teacher?\nI have released over 40 games and apps that have done very well in the app store.\nI run a company called Mammoth Interactive so I am actively in the field building apps and making money\nI have been teaching since 2002\nI personally love learning online and my life is much better because I have learned online rather than a classroom\nI am one of the top 10 highest grossing Udemy teachers\nI have been a Udemy instructor since 2011.\nI make sure people learn how to make money from their creations.\nI have over 600K students worldwide\nWho is this class for?\nPeople who want to improve their technical skills\nComplete beginners\nPeople who want to make money. I show people the tools on how to make money through various methods of passive income\nPeople who want to get ahead of the pack by learning online.\nHow you will make money by learning new skills\nLearn practical skills\nLearn about how leverage your new skills to greater wealth\nLearn through practical examples\nWhy should you learn online?\nThere is an online education revolution taking place. You may have heard about it in the news or heard it from a friend. Either-way, education is going to be changed forever. In this short course I talk about how Online Education has\nMotivated me\nHelped my career\nHelped me as a teacher\nImpacted several lives around the planet\nI promise that this course will be better and more effective than reading books. I show how to master technology through the use of video. This course will give you everything you need to thrive in our technological society.\n\"Achei legal porque o professor não perde tempo com estética dos jogos e sim com funcionalidades e códigos. Estou super satisfeito com o curso!\"",
      "target_audience": [
        "Beginners to game development. Prior C# knowledge is an asset.",
        "People who want to make video games."
      ]
    },
    {
      "title": "Introduction to Multiplayer Game Development in Unity",
      "url": "https://www.udemy.com/course/multiplayer-game-development-in-unity/",
      "bio": "Create Online Multiplayer Games in Unity, C# & Photon PUN2 - Learn Networking Concepts & Unity Multiplayer Programming",
      "objectives": [
        "Create an online multiplayer race that you can play with your family & friends.",
        "Understand how online multiplayer games work and the common phrases (server, ping, room, network)",
        "Learn fundamentals of networking in Unity, C# & Photon PUN 2.",
        "Learn the client-server model and the effect of ping on the game.",
        "Implement a connection to a server and a lobby UI where the player can join or create a match.",
        "Sync the player's nickname across the network and make the player spawn from different spawn points on the map.",
        "Make a scoring system when a ring is collected and a winning logic when the game is over."
      ],
      "course_content": {
        "Welcome & Course Overview": [
          "Promo - Introduction to Multiplayer Game Development in Unity",
          "Welcome & Learning Resources",
          "Full Game Playthrough"
        ],
        "Developing an Online Multiplayer Game in Unity & Photon PUN2": [
          "Project Setup & Photon PUN 2",
          "Introduction to Networking - Server & Ping",
          "Introduction to Networking - Server & Ping (Quiz)",
          "Loading Menu UI",
          "Connecting to the Server",
          "Connecting to the Server (Quiz)",
          "Lobby Menu UI",
          "Creating and Joining Rooms",
          "Creating and Joining Rooms (Quiz)",
          "Game Environment Setup",
          "Player Movement & Camera Follow",
          "Player Instantiation & Multiplayer Test",
          "Player Instantiation & Multiplayer Test (Quiz)",
          "Finishing the Lobby Menu",
          "Player Nickname",
          "Multiplayer Bug Fixing",
          "Multiplayer Bug Fixing (Quiz)",
          "Spawnpoint Visuals",
          "Spawnpoint Logic",
          "Rings & Score System - Part 1",
          "Rings & Score System - Part 2",
          "Rings & Score System - Part 3",
          "Rings & Score System (Quiz)",
          "Win Menu UI",
          "Win Logic",
          "Post Processing",
          "Playing the Game with my Brother!"
        ],
        "What's Next?": [
          "What's Next?",
          "Game Source Code"
        ]
      },
      "requirements": [
        "No Experience needed in building an online game before.",
        "Before taking the course, make sure you are comfortable with building simple games in Unity & C#.",
        "Understanding basic phrases like Gameobjects, Components, Prefabs, Colliders..."
      ],
      "description": "Welcome to Introduction to Multiplayer Game Development in Unity!\nIn this course, you'll learn how to create engaging and interactive multiplayer games using the powerful Unity game engine, C# programming language, and the Photon PUN2 networking solution.\n\n\nPhoton PUN 2 is a networking engine that allows developers to easily add multiplayer functionality to their games.\nIt supports a wide range of platforms and offers a variety of features and customization options.\nSome famous games that used Photon include Apex Legends, Mortal Kombat 11, Paladins, and more.\n\n\nWhy learn multiplayer game development?\nMultiplayer games have become increasingly popular in recent years, and with the rise of online gaming comes a demand for developers who can create engaging and immersive multiplayer experiences.\nMultiplayer games also offer a level of engagement and social interaction that most single-player games simply can't match. And adding those features can separate a good game from a great game\n\n\nWhat will you learn in this course?\nIn the course, we'll create an online multiplayer race competition where you collect all the rings as fast as possible before the other player does.\n\n\nWe'll start by understanding how online multiplayer games work and the common phrases (server, ping, room, network).\nNext, Learn the client-server model and the effect of ping on the game.\nFrom there, we'll implement a connection to a server and a lobby UI where the player can join or create a match.\nWe will sync the player's nickname across the network and make the player spawn from different spawn points on the map.\nFinally, we will make a scoring system when a ring is collected and a winning logic when the game is over.\nThroughout the course, you'll learn how to implement multiplayer game mechanics such as lobbies, matchmaking, and player synchronization.\nBy the end of the course, you'll have the skills and knowledge needed to create your own multiplayer games in Unity, C#, and Photon PUN2. You'll be able to create games that are played online with friends or strangers, and you'll have a solid foundation for building more complex multiplayer games in the future.\n\n\nWho is this course for?\nAspired Intermediate game developers who want to create a new multiplayer game from scratch or add multiplayer functionalities to an existing game.\nBefore taking the course, make sure you are comfortable with building simple games in Unity & C#. And you understand basic phrases like Gameobjects, Components, Prefabs, Colliders, and more.\n\n\nAre there any learning resources?\nChallenge slides - where you can complete a small task in the game that will give you practical experience.\nCoding quizzes - a great way to test your knowledge, And apply what you learned in the lectures.\nSource code - the complete project so you can compare the game while going through the course.\nQ&A - if you are stuck or have a bug, you can drop me a question there, and I will help you figure it out.\nDiscord server - a community of all the students in the course. You can showcase your project and collaborate with other students.\nA cheat sheet for Photon PUN2 - a collection of all the most useful commands that will help make multiplayer games faster and better.\n\n\nWho am I?\nMy name is Matan Naveh, and I will be your instructor for this course. I've taught game development online to over 3000 students from 100 countries worldwide.",
      "target_audience": [
        "Aspired Intermediate game developers who want to create a new multiplayer game from scratch or add multiplayer functionalities to an existing game."
      ]
    },
    {
      "title": "Unity Game Boost: Coin Management System",
      "url": "https://www.udemy.com/course/unity-game-boost-coin-management-system/",
      "bio": "Design and program a virtual economy system in your video game using Unity 5",
      "objectives": [
        "monetize your video game",
        "build and reuse a coin management system",
        "apply the process to gems, virtual goods",
        "create reusable unity packages",
        "build coin user interface",
        "build store user interface",
        "program in-app purchase code",
        "connect to iOS game and inapp purchases",
        "connect to Android games and google play"
      ],
      "course_content": {
        "Hands on Unity": [
          "Instructor intro and course overview",
          "Create Unity project and import Asset files",
          "Design the Coin system User Interface",
          "Programming the add coin method",
          "Displaying the current coin count",
          "Incrementing the coin count with animation",
          "Programming coin sound jackpot",
          "Save and Retrieve player Total coin amount",
          "Packaging the system and reusing it in any project"
        ],
        "Building an in-app purchase Coin Store": [
          "Create the inapp purchase store front scene",
          "Install Soomla store plugin",
          "Setting up inapp purchases google play and itunes connect dev",
          "Program the coin store asset",
          "Implement the extra IStoreAsset method signatures",
          "Notifiy script of coin balance change",
          "Give rewards to player",
          "Triggering the inapp purchases"
        ],
        "Bonus Files": [
          "Bonus and Exercise files"
        ]
      },
      "requirements": [
        "basic knowledge of Unity is recommended"
      ],
      "description": "What is a virtual economy?\nA virtual economy (also named synthetic economy) is an emergent economy existing in a virtual persistent world, i.e inside a video game, usually exchanging virtual goods in the context of an Internet or mobile game.\nPeople enter these virtual economies for recreation and entertainment rather than necessity, which means that virtual economies lack the aspects of a real economy that are not considered to be \"fun\" (for instance, avatars in a virtual economy often do not need to buy food in order to survive, and usually do not have any biological needs at all). However, some people do interact with virtual economies for \"real\" economic benefit.\n\n\nDespite primarily dealing with in-game currencies, players use real money to buy virtual currency.\n***\nWhy do you need to add a Coin Management System to your video game?\nAnyone willing to keep making games for fun needs a source of income. This is why adding a coin management system to your video games is an important factor in making real profit.\nThis is a major source of income for the top games on any app stores. Just take a look at Clash of Clans or Farmville where players spends millions of dollars to buy virtual coins and gems through in-app purchases.\n\n\nHow is this course going to help?\nIn this course, I will show you go through every steps to create a coin management system using Unity. I will start by creating the game user interface that will display the coin amount, then I'll go through the programming part to add coins, store and retrieve coins.\nThen I'll go through the steps of creating an in-game store. I will design the store front interface and then we will program a professional system so that players can buy coin packs using in-app purchases. I will show yo how to connect the system to Google Play for Android and iTunes Connect for iOS.\nFinally I'll teach you ow to bundle up the code and the store into a package that you can reuse in any games, this will save you so much time.\nAs a bonus, you'll get all the graphics sounds and final project, free of charge, just by joining this course.\nMy students know that I'm always available if yo have any questions, just shoot me a message in the forums.\nWhether you're already a game developer or you're learning how to make games, you need to understand how this work. You've got to learn and apply the skills from this course.\nI guarantee you will get your money worth with this course or you'll get a full refund.\nJoin me now.",
      "target_audience": [
        "indie dev",
        "game hobbyist",
        "gamers",
        "people who want to monetize their games",
        "computer students",
        "graphic students"
      ]
    },
    {
      "title": "Introduction to Game Audio. Make SFX and Music for your Game",
      "url": "https://www.udemy.com/course/introductiontogameaudio/",
      "bio": "Using Reaper and various other software, we will learn how to create amazing sound effects and vocals for video games.",
      "objectives": [
        "Game Developers will be able to design their own sound effects and music tracks for their video game.",
        "Audio/Music students will be able to learn how to make sound effects and music for video games."
      ],
      "course_content": {
        "Introduction. Basic Ideas": [
          "Course Introduction",
          "You get what you pay for. A few words about buying audio libraries",
          "The Industry Then and the Industry Today",
          "''Reaper'' Digital Audio Workstation and other Useful Software",
          "Creating Natural Sounding Footsteps",
          "Layering Guns SFX from Soundly. Developing New Weapon Ideas",
          "Creating a Background Music Track",
          "Applying a Basic Mix to out Track",
          "Creating Monster/Creature Vocals",
          "Finale"
        ],
        "Electronic/Digital Ideas Workshops": [
          "Massive X Synthesizer Overview",
          "Experimenting with Massive X. Creating Digital Explosions"
        ]
      },
      "requirements": [
        "Be able to use a digital audio workstation",
        "Be proficient with technology",
        "Have basic music knowledge"
      ],
      "description": "We welcome you to the ‘’ Introduction to Game Audio. Make SFX and Music for your Game’’ course. I am GeorgeK, a capable sound designer, music composer and sonic branding specialist with a number of completed projects in my portfolio. My past 10 years experiences include, but are not limited to working on games such as, Elder Scrolls Skywind, Darkfall Rise of Agon, Bulletrage and brands like Coca Cola, MyStore and many more. Throughout my career I have experienced many obstacles in the industry but most importantly I overcame them. Moreover, I have also been involved with many teaching organizations both as a lecturer and a mentor.\nToday, I am releasing this course out for you. A course where you, the aspiring sound designer or game developer, can get into the basics of sound design and learn how to make amazing audio all by yourself. Once you complete this course, you will be able to design your own footsteps, you will learn how to layer gun sounds, make terrifying monster sounds and as well as how to make a basic music track and much more.\nBy enrolling into this course, you can get access to the full content. Furthermore, during your course period I will provide continuous support and guidance to all my students in the Udemy forum.\nIf you are into the game audio niche but you are feeling stuck, or you are in process of becoming a game developer struggling to make your own SFX and music, this is the go-to course specially designed to cater for all your needs.\nDoes all this sound like you? If yes, what are you waiting for?  Let’s get started!",
      "target_audience": [
        "game developers",
        "sound designers",
        "music composers",
        "gamers"
      ]
    },
    {
      "title": "Building a Super Smash Bros. Fighting Game in Unity",
      "url": "https://www.udemy.com/course/building-a-super-smash-bros-fighting-game-in-unity/",
      "bio": "Use Unity and C# to build a Super Smash Bros. style fighting game including combo moves, enemy AI, and engaging levels!",
      "objectives": [
        "Build a full Super Smash Bros. fighting game using C# and the Unity Game Engine",
        "Develop and animate 9 classic characters: Mario, Donkey Kong, Captain Falcon, Bowser, Ice Climbers, Link, Samus, Pikachu, and Sonic",
        "Write code to create enemy AI that intelligently fight the player",
        "Learn how fighting games are built in Unity and how the different tools in Unity can be applied to build an exciting, combat-oriented game experience",
        "Take your game development and C# skills to the next level using professional Object-Oriented game programming techniques",
        "Build a combat system including attacks, damage resolution, and knockouts",
        "Create 2 levels complete with techniques like particle effects and background scrolling: Bowser’s Castle and Battlefield",
        "Gain an intricate understanding of Unity’s UI system as we build a start screen, main menu, character selection screen, stage selection screen, and a loading screen",
        "Create game environments and powerful attacks using Unity’s tools and features"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Downloading and Installing Unity": [
          "Section Introduction",
          "Download and Install Unity Hub",
          "Download and Install Unity",
          "Creating a Unity Project",
          "Editor Basics",
          "Project Overview",
          "Importing the Course Assets",
          "Section Summary"
        ],
        "Game Design Document": [
          "Section Introduction",
          "What is a game design document?",
          "Super Smash Bros. Game Design Doc",
          "Section Summary"
        ],
        "Donkey Kong": [
          "Section Introduction",
          "Character Overview",
          "Attack #1: Punch",
          "Attack #2: Kick",
          "Attack #3: Down Smash!",
          "Jump",
          "Character Playthrough",
          "Section Summary"
        ],
        "Mario": [
          "Section Introduction",
          "Character Overview",
          "Attack #1: Punch",
          "Attack #2: Kick",
          "Attack #3: Flaming Mushroom!",
          "Jump",
          "Character Playthrough",
          "Section Summary"
        ],
        "Pikachu": [
          "Section Introduction",
          "Character Overview",
          "Attack #1: Iron Tail",
          "Attack #2: Head-butt",
          "Attack #3: Zap!",
          "Jump",
          "Character Playthrough",
          "Section Summary"
        ],
        "Samus": [
          "Section Introduction",
          "Character Overview",
          "Attack #1: Bombs",
          "Attack #2: Rockets",
          "Attack #3: Charge Shot!",
          "Jump",
          "Character Playthrough",
          "Section Summary"
        ],
        "Ice Climbers": [
          "Section Introduction",
          "Character Overview",
          "Attack #1: Hammer",
          "Attack #2: Shoot Ice",
          "Attack #3: Freeze Blast!",
          "Jump",
          "Character Playthrough",
          "Section Summary"
        ],
        "Captain Falcon": [
          "Section Introduction",
          "Character Overview",
          "Attack #1: Kick",
          "Attack #2: Shoot",
          "Attack #3: Falcon Punch!",
          "Jump",
          "Character Playthrough",
          "Section Summary"
        ],
        "Bowser": [
          "Section Introduction",
          "Character Overview",
          "Attack #1: Punch",
          "Attack #2: Slash",
          "Attack #3: Flamethrower!",
          "Jump",
          "Character Playthrough",
          "Section Summary"
        ]
      },
      "requirements": [
        "Basic Unity and C# knowledge is a plus, but not required",
        "A Windows computer, Linux machine, or a Mac (all software in the course is free and installation is explained step-by-step)",
        "Excitement and enthusiasm about game development"
      ],
      "description": "This course will walk you through building an entire video game hands-on, and will take you step-by-step through the game development process.\nDid you grow up playing Super Smash Bros? Are you a fan of classic Nintendo characters? Growing up, I loved playing Super Smash Bros. Melee and always wanted to know how fighting games were made. Now, I make games professionally for a living and have a deep understanding of what goes into making all types of games, including fighting games.\nThis course is meant to teach you how to build a full fighting game in Unity, even if you are a beginner or have never used Unity before. By the end of this course, you will have a full Super Smash Bros. style game in Unity that you built from the ground up. I will teach you how to develop and animate the following characters using the sprite sheets that I created and provide with this course: Donkey Kong, Mario, Pikachu, Samus, Ice Climbers, Captain Falcon, Bowser, Link, and Sonic.\nEach character will have three attacks and be able to jump. Donkey Kong will feature his classic down smash that shakes the camera and sends enemies flying into the air. Mario will throw flaming mushroom projectiles. Pikachu will feature his classing lighting attack, zapping the opposition. Samus will have his charge beam that lets the user build up power and then release a sci-fi blast. The Ice Climbers will be able to freeze enemies and tag team their way to victory. Captain Falcon will use his Falcon Punch to blast enemies. Bowser will be able to spew fire which we will create using Unity’s particle system. Link will have the ability to fire arrows and throw bombs at enemies. Sonic will be able to turn into Super Sonic and blast enemies with energy.\nThis course will teach you how to create 4 way battles between these characters with a user and 3 CPU characters. Each of the 9 characters can be used by the player or the CPU. We are going to code the enemy AI from the ground up so that we can play against the computer, who will fight back and try to knock us off the stage!\nAs we build this course, you are going to gain a wealth of knowledge in the different areas of the Unity game engine. Some of the core game development techniques this course will teach you are:\nWorking with 2D graphics and sprite sheets and building character animations from them\nUse the Animation and Animator components to build finite state machines that transition between player attacks\nCustomize the mouse cursor with custom hand graphics that let the user drag and drop indicators to select characters and point and click to choose levels.\nObject-oriented C# scripting techniques for writing clean, re-usable code.\nAdding a camera shake for Donkey Kong’s ground-and-pound move as well as other special effects for other characters’ move sets\nLearn about the different UI components and how they can be used together to build in-game menus and selection screens that efficiently and intuitively respond to user input.\nUse powerful programming techniques like Actions and Coroutines to control timing and execution of code and handle attack logic\nWork with Unity’s physics system to allow for interactions between characters and the environment.\nTurn your ideas into code using C# with Unity and build up a set of skills that you can use to build other fighting games and showcase them in your portfolio.\nBy the end of this course, you will have a full game project you developed from the ground up! You will also have some more C# tips and tricks that you can add to your arsenal. If you want to learn game development or are aspiring to build a career in the game industry, then this course is for you!",
      "target_audience": [
        "Anyone excited about building a Super Smash Bros. style fighting game",
        "Anyone that wants to improve their Unity and C# skills",
        "Beginners that want to build a full game step-by-step and have something cool that they can play and learn from"
      ]
    },
    {
      "title": "The Most Comprehensive Guide To Unity Game Development Vol 2",
      "url": "https://www.udemy.com/course/the-most-comprehensive-guide-to-unity-game-development-vol-2/",
      "bio": "From Complete Beginner To Professional Game Developer. Learn To Code In C# And Create Stunning Games With Unity",
      "objectives": [
        "Learn how to write advanced C# code",
        "Learn good coding principles and design practices",
        "Develop strong and transferrable problem solving skills",
        "Understand the whole process of creating a game",
        "Learn how to save and load game data",
        "Use simple logic to solve complex problems in game development",
        "Learn how to debug and fix bugs in your projects"
      ],
      "course_content": {
        "Introduction": [
          "Introduction To The Course - IMPORTANT - Watch This Lecture Before You Buy",
          "IMPORTANT NOTE - PLEASE READ THIS"
        ],
        "Slash Hero": [
          "Game Preview",
          "Importing Assets And Preparing The Player",
          "Creating Player's Animations",
          "Moving The Player",
          "Camera Follow",
          "Ground, Trees And Background",
          "Repositioning Backgrounds With Collision",
          "Background Generator",
          "Background Generator Pooling",
          "Player Jump And Double Jump",
          "Player Animations With Transitions",
          "Player Attack Animation",
          "Fixing Attack Animations Frame Issues",
          "Creating The Wolf Enemy",
          "Dealing Damage To The Enemy",
          "Dealing Damage To The Player",
          "Rotating Blades",
          "Swinging Axe And Spikes",
          "Swinging Axe Script",
          "Swinging Axe Script - Another Way",
          "Obstacle Spawner",
          "Obstacle Spawner Pool",
          "Health Collectable",
          "Health Collectable Pool",
          "Gameplay UI",
          "Player Health UI",
          "Game Over UI",
          "Player Health And Enemy Health Script",
          "Score Counter",
          "Pause Controller",
          "Game Over Controller",
          "Creating The Main Menu",
          "Animating UI Elements With A Script",
          "Character Select Panel",
          "Main Menu Controller",
          "Data Manager",
          "Loading Data And Selecting The Character",
          "Loading The Selected Character In Gameplay Scene",
          "Unlocking Characters And Saving Highscore",
          "Sound Manager"
        ],
        "Mad Doctor": [
          "Game Preview",
          "Creating The Level",
          "Player And Player Animations",
          "Player Movement",
          "Player Animation Script",
          "Changing Weapons",
          "Shooting With The Player",
          "Bullet Prefabs",
          "Bullet Script And Electric Bullet",
          "Bullet Pool",
          "Player Shooting Manager",
          "Shooting Bullets",
          "Camera Follow",
          "Creating Enemies For The Game",
          "Enumerations And Enemy Script",
          "Enemy Search For Player",
          "Attacking With Enemy Attacker",
          "Attacking With Enemy Shooter",
          "Enemy Bullet Pool (Assignment Solution)",
          "Enemy Damage Animations",
          "Player Bullet FX",
          "Health Script",
          "Player Damage And Death FX",
          "Enemy Damage And Death",
          "Health Fuel Collectable",
          "Gameplay UI",
          "Gameplay UI Controller",
          "Enemy Spawner",
          "Game Over Panel",
          "Sound Manager"
        ],
        "Poco The Adventurer": [
          "Game Preview",
          "Importing Assets And Levels",
          "Unity's Tile System",
          "Player Character And Blend Trees",
          "Player Movement",
          "Player Turning And Animation",
          "Camera Follow",
          "Preparing Player's Weapons",
          "Player Weapon Manager",
          "Preparing Players Bullets",
          "Shooting Bullets",
          "Bullet Pool",
          "Bullet Animations And Bullet Script",
          "Shooting Muzzle FX",
          "Camera Shake FX",
          "Preparing The Enemies",
          "Enemy AI And Movement",
          "Enemy Animation",
          "Enemy Batch Handler",
          "Character Health And Dealing Damage To Player",
          "Death Animation And Destroying The Player",
          "Preparing The Shooter Enemy",
          "Enemy Shooter Movement",
          "Preparing The Enemy Bullet",
          "EnemyShootController",
          "Shooting The Player",
          "Big Demon Boss",
          "BossMovement Script",
          "Boss Detect Player",
          "Boss Shooting",
          "Removing Destroyed Enemies From The Batch",
          "Creating The Doors For The Level",
          "Decorating The Level",
          "Preparing The Main Menu",
          "Tap To Start Game Functionality",
          "Selecting Playable Character",
          "Wrapping Up Our Game"
        ]
      },
      "requirements": [
        "Mac or PC capable of running Unity game engine",
        "Other requirements are listed in the course description PLEASE READ THEM"
      ],
      "description": "*** More Content Is Being Added To The Course •••\nThis is Volume 2 in my Most Comprehensive Guide To Unity Game Development series. If you are interested to enhance your Unity skills then read further.\nAs in all of my courses, this course is also project based. Simply put, the best way to learn is to actually create a game that is playable on any device, and this is what I preach in all my courses.\nSince this is an intermediate course we will not cover the basics of programming with C# and how to use Unity, instead, we will dive deeper into C# coding practices and learn how to solve complex problems with simple logic.\nAs we go through the projects I will show you multiple ways how to solve the problem at hand and I will compare different ways and talk about the pros and cons of each and why and when should you use one way over the other.\nThe main focus of this course is to help you think like a programmer and gain strong problem solving skills. Because in 99% of the times in any project you will solve problems by using simple logic instead of complex algorithms, and this is what this course is about.\nAnd not only that, but I will explain to you how to optimize your games from the very start so that you avoid the most common optimization heavy mistakes that not only beginners make when they create their games.\nEvery section in this course will gradually increase in size and depth so that you always learn new things and face new challenges.\nDuring the lectures, I will give you assignments to challenge your knowledge and to challenge your ability to think like a programmer. Because in game development, the best way to learn is by doing. Of course, I will provide a solution for every assignment that I give you, but I will expect that you try to finish it on your own because it will give you experience, and the feel of how to solve programming problems on your own and it will help you implement and retain everything that I am teaching you in the course.\nYou will also benefit from my super fast response if you have any issue that you are stuck with, and oh and all the students taking the course will also be there to help you!\nSome of the things that you will learn in this course:\nIntermediate, And Advanced C# Programming\nBasic AI(Artificial Intelligence)\nAdvanced AI(Artificial Intelligence)\nBasic And Advanced Character Animations\nSound FX And Music\nLearn How To Use Unity's UI System\nCreate And Animate Menus\nSaving And Loading Game Data\nBasic And Advanced Animations\nCreating Reusable Code\nWriting Optimized Code\nGenerate Procedural Levels\nCreate Object Poolers For Enemies, Obstacles And Levels\nThat And Much More Is Awaiting You In This Course\nIf You ever had an idea for an awesome game, then enroll in this course and learn the tools that you need to develop Your next hit game!!!\nWhat Is Your Risk By Taking This Course?\nNothing!! If you are not satisfied with the course, I promise I will give you a full refund of your money NO questions asked!!\nEnroll Now!! You Will Not Be Disappointed!!\n\n\n*** COURSE REQUIREMENTS - PLEASE READ THIS BEFORE YOU ENROLL ***\nYou need to know or at least understand how all the concepts listed here work and function before you can enroll in this course:\n- Understand what are variables, classes, functions, objects and know how to use them\n- Understand what data encapsulation is and what does private and public mean\n- Understand what arrays and lists are and how to use them\n- Understand what loops and different types of loops are and how to use them\n- Know your way around unity’s interface\n- Understand how unity’s physics system works and how to use the rigid body\n- Have a basic understanding of what are raycasts and how to use them\n- Know how to manage unity’s sprite renderer component and its sorting layers\n- Understand what is the transform component and how it works, also how to manipulate it with Vectors and Quaternions\n- Understand how to animate and use animation transitions and how to use unity’s mechanim system\n- Understand how to use unity’s UI system, what is a canvas and how to manipulate canvas scale options\n- Understand how to use PlayerPreferences to save and load game data\n- Understand what is pooling or at least know the basics of pooling\n- Understand what singletons are and how to use them\n- Understand what delegation is and how to use it",
      "target_audience": [
        "Anyone who is already comfortable with writing C# code and knows his way around unity",
        "Anyone who has created a few games in unity game engine",
        "Anyone who wants to expand his knowledge about creating games in unity"
      ]
    },
    {
      "title": "How To Rapidly Make 2D And 3D Game Art",
      "url": "https://www.udemy.com/course/how-to-rapidly-make-2d-and-3d-game-art/",
      "bio": "Using Open Source tools to easily make high-quality art for your games",
      "objectives": [
        "How to make detailed textures for 3d models with a low-poly retro style",
        "How to quickly make nice-looking minimalist 2d art for horror games",
        "How to easily make rotoscoped animations for your games",
        "How to make simple vfx for your 2d games"
      ],
      "course_content": {
        "2D art": [
          "Using Blobs to Make and Animate A Top-Down Monster",
          "Creating Rotoscoped Animations For a Top-Down Character",
          "Using IK Animations to Animate a Top-Down Character's Arms",
          "Creating An Environment and Adding Vfx to Make Your Game Pop"
        ],
        "3D art": [
          "Sketching Your Character",
          "Modelling Your Character",
          "Rigging Your Character",
          "Texturing Your Character Using Stencil Painting",
          "Animating Your Character With Mixamo"
        ]
      },
      "requirements": [
        "Intermediate-level experience in Blender or equivalent 3d software",
        "Intermediate-level experience in Krita or equivalent 2d software",
        "Intermediate-level experience in Godot or equivalent game engine"
      ],
      "description": "I am a professional indie game developer who has released successful games that are both 2d (Endoparasitic) and 3d (Wrought Flesh). In this course you will learn the techniques I use to quickly make high-quality 2d and 3d art for my games. This includes rotoscoped animations, IK based animations, stencil painted textures, and 2d vfx that makes simple art pop and look great.\nIn the 2D section I cover making a player character that uses IK for the upper body and rotoscoped animations for their lower body, a monster made of silhouetted blobs, simple sprite styles for making interesting environments, and vfx to make it all look good.\nIn the 3D section I cover making a humanoid monster character, with specific focus on my texturing style. While I only cover making a character, the same techniques can be easily applied for texturing environmental assets.\n\n\nThis is a fast-paced course that rapidly summarizes my techniques, the videos are not intended to be followed step-by-step, but rather watched to learn the general steps and mindset I take when creating art.\nThis course is aimed at game developers experienced with 3d modelling software such as Blender, game development tools like Godot, and 2d art software such as Krita. If you are not confident in your abilities with these or similar tools, this course is not for you.",
      "target_audience": [
        "Intermediate Game Developers who want to learn some tricks to make better art faster for their games"
      ]
    },
    {
      "title": "Building a Car Racing Game in Unity using C#",
      "url": "https://www.udemy.com/course/building-a-car-racing-game-in-unity/",
      "bio": "Use Unity and C# to build a Car Racing Game featuring 3D cars, immersive levels, realistic car physics logic, and more!",
      "objectives": [
        "Build a full car racing game using C# and the Unity Game Engine",
        "Learn advanced Unity physics techniques, specifically how to simulate driving, handling, and crashing cars realistically in a game",
        "Understand how to code enemy AI that race the player",
        "Create stunning UI displays including a mini-map, speed tracker, and car stats heads up display",
        "Design levels and tracks hands-on to assemble stunning, AAA quality game environments",
        "Work on game polish as we perfect driving mechanics, real time lighting, and controls",
        "Take your game development and C# skills to the next level using professional Object-Oriented game programming techniques",
        "Learn techniques that you can use to create a professional quality game development portfolio piece"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Downloading and Installing Unity": [
          "Section Introduction",
          "Download and Install Unity Hub",
          "Download and Install Unity",
          "Creating a Unity Project",
          "Editor Basics",
          "Project Overview",
          "Importing the Course Assets",
          "Section Summary"
        ],
        "Building a Car in Unity": [
          "Section Introduction",
          "Components of a Car",
          "Code Logic",
          "Getting it to Realistically Drive on the Track",
          "Section Summary"
        ],
        "Creating the Other Cars": [
          "Section Introduction",
          "Car #2",
          "Car #3",
          "Car #4",
          "Car #5",
          "Section Summary"
        ],
        "Assembling Racetracks": [
          "Section Introduction",
          "Track #1",
          "Track #2",
          "Section Summary"
        ],
        "Designing the UI": [
          "Section Introduction",
          "Start Screen",
          "Main Menu",
          "Pause Menu",
          "Creating a Mini Map",
          "Adding MPH text",
          "Timer UI",
          "Lap and Place UI",
          "Select a Track Screen",
          "Car Garage Screen",
          "Section Summary"
        ],
        "Developing the Enemy AI": [
          "Section Introduction",
          "Laying out the Waypoints",
          "Coding the AI Logic",
          "Testing the AI Logic",
          "Section Summary"
        ],
        "Race Logic": [
          "Section Introduction",
          "Lap Logic",
          "Place Logic",
          "Results Logic",
          "Section Summary"
        ],
        "Course Summary and Wrap-Up": [
          "Last Steps and Final Tweaks",
          "Playing through the Final Game",
          "Course Summary and Wrap-Up",
          "Course Quiz - Test your Unity and C# knowledge!",
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "Basic Unity and C# knowledge is a plus, but not required",
        "A Windows computer, Linux machine, or a Mac (all software in the course is free and installation is explained step-by-step)",
        "Excitement and enthusiasm about game development"
      ],
      "description": "This course will walk you through building an entire video game hands-on, and will take you step-by-step through the game development process.\nDid you grow up playing car racing games like Need For Speed and Gran Turismo? Do you want to learn how to build car racing games in Unity using C# code? Growing up, racing games always fascinated me. I was intrigued by how the in-game physics was so realistic and how they simulated driving in the game so accurately. Now, I make games professionally for a living and have a deep understanding of what goes into making all types of games, including car racing games.\nThis course is meant to teach you how to build a full racing game in Unity, even if you are a beginner or have never used Unity before. By the end of this course, you will have a full car racing game and you built in Unity from the ground up. We will add 5 playable cars to the game, each of which will have their own visuals, speed, acceleration, and handling.\nAs we build this course, you are going to gain a wealth of knowledge in the different areas of the Unity game engine. Some of the core game development techniques this course will teach you are:\nWorking with Unity's Physics system and understanding how to use components like Wheel Colliders and Rigidbodies to simulate vehicle movement and interaction with the environment.\nUsing C# logic to get enemy AI cars driving around the track and competing against the player in races.\nUtilizing Unity's UI system to build mini-maps and other racing heads up displays such as MPH and car stats.\nWriting reusable code that can be applied to several different sections of the game. Object-oriented C# scripting techniques for writing clean, reusable code.\nAssemble AAA quality racing environments hands-on as we build levels using Unity game assets.\nLearn about the different UI components and how they can be used together to build in-game menus and selection screens that efficiently and intuitively respond to user input.\nTurn your ideas into code using C# with Unity and build up a set of skills that you can use to build other car racing games and showcase them in your portfolio.\nBy the end of this course, you will have a full game project you developed from the ground up! You will also have some more C# tips and tricks that you can add to your arsenal. If you want to learn game development or are aspiring to build a career in the game industry, then this course is for you!",
      "target_audience": [
        "Anyone excited about building a Need For Speed style car racing game",
        "Anyone that wants to improve their Unity and C# skills",
        "Beginners that want to build a full game step-by-step and have something cool that they can play and learn from"
      ]
    },
    {
      "title": "3D Web Game Development with JavaScript and Three.js",
      "url": "https://www.udemy.com/course/3d-web-game-development-with-javascript-and-threejs/",
      "bio": "Learn how to snag the most in demand role in the tech field today!",
      "objectives": [
        "Work in game design, film, or software development",
        "Create advanced 3D games and applications",
        "Build and publish your own games and apps"
      ],
      "course_content": {
        "Course Overview": [
          "00 Course Overview",
          "Source Files"
        ],
        "Build a Simple Three JS Scene": [
          "01 Build a Simple Three JS Scene",
          "02 Build A Character",
          "03 Build A World Floor",
          "Source Files"
        ],
        "Move a Character in a Three JS Game": [
          "01 Move A Character In A Three JS Game",
          "02 Handle Continuous Key Presses",
          "03 Follow Character With Camera",
          "Source Files"
        ],
        "Detect Collisions in a 3D World": [
          "01 Build A Game Obstacle",
          "02 Detect Collisions In 3D",
          "03 Show Player Health In 2D Overlay",
          "Source Files"
        ],
        "Create a Smooth Experience": [
          "01 Rotate Player",
          "02 Handle Window Resize",
          "Source Files"
        ],
        "Customize Character": [
          "01 Change Player Skin",
          "Source Files"
        ],
        "Complete Source Code": [
          "Source Files"
        ]
      },
      "requirements": [
        "No experience necessary"
      ],
      "description": "If you are serious about becoming a game designer, then you already know that you need the most current and complete game design training possible. To succeed in this competitive industry it is essential to have an expert knowledge of the entire game development pipeline. Whether it's your goal to work for a major game studio, or to develop and publish your own indie games, one thing is clear, you will need to be well trained as both a programmer and an artist.\nThis course is project-based so you will not be learning a bunch of useless coding practices. At the end of this course, you will have real-world apps to use in your portfolio. We feel that project-based training content is the best way to get from A to B. Taking this course means that you learn practical, employable skills immediately.\nYou can use the projects you build in this course to add to your LinkedIn profile. Give your portfolio fuel to take your career to the next level.\nLearning how to code is a great way to jump into a new career or enhance your current career. Coding is the new math and learning how to code will propel you forward in any situation. Learn it today and get a head start for tomorrow. People who can master technology will rule the future.",
      "target_audience": [
        "Absolute beginners to programming",
        "Anyone who wants to become an app developer",
        "People interested in working in the game design industry",
        "People who want to create and publish their own games"
      ]
    },
    {
      "title": "Unity3D - A Basic and Intermediate Work-Along Course",
      "url": "https://www.udemy.com/course/unity3d-a-basic-and-intermediate-work-along-course/",
      "bio": "Covering everything from the first time you open Unity to building games with complex interactions. We do it all",
      "objectives": [
        "Bring their ideas to life! This is a work-along course with plenty of examples and code solutions that can be reused",
        "Deploy their solutions to a number of platforms (Mobile, VR, Computer)",
        "Fly around unity like a pro! Create environments and Behavior scripts in no time",
        "Have a set of capability and feature examples that they can re-use and extend in their game"
      ],
      "course_content": {
        "0: Introduction - Your instructor, the course, and what you'll learn": [
          "Introduction and Course Overview",
          "Meet your instructor!"
        ],
        "1: Introduction to the Unity Editor - Installation and starting a project": [
          "Overview - What we'll be covering",
          "High Level Language Overview - Getting on the same page",
          "Download and Install - How to configure Unity3D right the first time",
          "Creating your first Unity Project",
          "Layout out the Unity Views and The Big 6"
        ],
        "2: Unity Editor Views Overview, \"The Big 6\", and Object Creation": [
          "Scene View - Exploring your environment. Tips and tricks for navigation",
          "Scene View - Moving and manipulating the view",
          "Scene View: Assignment! Get around the world!",
          "Scene View: Assignment SOLUTION",
          "Game View: What the user sees",
          "Project View: Your file explorer",
          "Console View: Similar to other IDEs - Printing and basic error logging",
          "Hierarchy View: Everything in your scene",
          "Hierarchy View: Assignment! Model the relationships of a house!",
          "Hierarchy View: Assignment SOLUTION!",
          "Inspector: Overview and a quick look at components",
          "Inspector: Deeper dive into the all important Transform!",
          "Inspector View: Transform Assignment!",
          "Inspector View: Transform Assignment SOLUTION",
          "-- Follow on to Transform Assignment"
        ],
        "3: Materials, Textures, and Shaders - Making our models and environments real": [
          "Materials Introduction: What is a material? Why are they necessary?",
          "Materials: Create your first Unity Material",
          "Materials: Changing the color of your object by manipulating the material",
          "Materials: Quick notes - Materials are SHARED!",
          "Materials: Assignment! Color your house",
          "Materials: Assignment SOLUTION",
          "Textures: Basic Textures - Get images and bitmaps into your Unity Game",
          "Textures: Assignment! Make a billboard!",
          "Textures: Assignment SOLUTION"
        ],
        "4: Unity Editor Last Stop: Prefabs, Lighting, Cameras, and More": [
          "Prefabs: Introduction to Unity's powerful template generation paradigm",
          "Prefabs: Manipulating prefabs. Changing the source, and making each unique",
          "Prefabs: Assignment! Create a small city using your prefabs!",
          "Prefabs: Assignment SOLUTION",
          "Lighting: Basic lighting overview, ideas, and different light types",
          "Cameras: Basics, and overview of camera properties",
          "Final Unity Editor Topics and some Preferences"
        ],
        "5: Monodevelop and Scripting Behaviors": [
          "Note on the coding in this class",
          "Introduction to Monodevelop: Creating and attaching your first script",
          "Scripting: Learning about the Start() method",
          "Scripting: Learning about the Update() method",
          "Scripting: Introduction to variable passing",
          "Scripting: Passing variables from the Unity Editor to Scripts",
          "Scripting: Using public variables",
          "Scripting: Assignment! Variable passing",
          "Scripting: Assignment SOLUTION"
        ],
        "6: Player Input and Moving Objects": [
          "User Input: Introduction",
          "User Input: Get Key",
          "Movement: Introduction to manipulating the transform from code",
          "Movement: Unity's Axis System",
          "Movement: Actually manipulating an object's transform",
          "Movement: Additional Important DeltaTime resources",
          "Movement: Making movement frame-rate independent by understanding Time.deltaTime"
        ],
        "7: Physics and the RigidBody": [
          "Physics: An Introduction",
          "Physics: What is a RigidBody?",
          "General: Getting references to components in scripts using GetComponent",
          "Physics: Actually applying force to a RigidBody to perform a movement",
          "Physics: Playing around with some physics!"
        ],
        "7.5: The TURRET GAME!!": [
          "Turret Game: Introduction by your instructor",
          "Turret Game: Setup",
          "Turret Game: Building the turret",
          "Turret Game: Smoothly rotating the turret",
          "Turret Game: Finishing touches on the turret",
          "Turret Game: Instantiating GameObjects in code from prefabs (Cannon balls)",
          "Turret Game: Setting up the cannon ball movement",
          "Turret Game: Actually firing the cannon balls, Coroutines, and Destroy()",
          "Turret Game: Finishing up our core functionality",
          "Turret Game: Adding enhancements and uniqueness through Camera manipulations",
          "Turret Game: Advanced Camera concepts - RenderTexture",
          "Turret Game: Overview and Summary by your Instructor"
        ],
        "8: More Physics - Triggers and Colliders, and Unity's User Interface (UI)": [
          "Colliders: An Introduction",
          "Tiggers: An Introduction",
          "UI: Exploring Unity's user interface system - The Overlay",
          "UI: Brief overview and implementation of World Space UI elements",
          "UI: Setting the values of UI elements",
          "UI: Wrapping up our look at the user interface system - Play around!"
        ]
      },
      "requirements": [
        "Basic understanding of programming principles (variables, objects) - Will provide references if not",
        "Some basic C# principles may help, but not required",
        "Be willing to learn through example, and code along!"
      ],
      "description": "Welcome to the comprehensive Introduction to Unity course!\nAt the end of this course, you will have the knowledge and information to take any idea or inspiration you may have and implement it in a real, deployed, video game.\nThis course is targeted at both beginner and intermediate Unity users, guiding students all the way from the proper download and setup of the application, all the way through multiple game examples and capability overviews. You’ll never be left alone – your instructor will be working right along with you every step of the way.\nFor our more advanced users, the course has been highly modularized and labeled, to allow for skipping around.\nFor an overview of the topics covered and touched on in this course, please see the promotional video. Note: This topics list is not exhaustive, just meant to give you a feel for the breadth of knowledge you’ll have access to at the end of the course. Some of the most important take-aways from this course will be those not listed in the topics, including best-practices, information on important developer resources and documentation, shortcuts to make you work like a pro, and stumbling through errors and bugs.\nThis course is taught by an avid gamer and technology enthusiast, so many of the game development challenges and solutions are contextualized and informed by the successes and failures of past video games. He is very involved in each of his courses, and always available for help or guidance.\nIts time to finally be able to bring your ideas to life!",
      "target_audience": [
        "The hobbyist game lover who has dabbled in some programming",
        "Existing programmers who want to get into Unity",
        "Anyone interested in learning fundamental and intermediate Unity concepts",
        "Unity Artists and content providers who have not had extensive exposure to the engine",
        "Complete beginners with no idea where to start in the game development world"
      ]
    },
    {
      "title": "Master Godot UI: Interfaces with Control Nodes (2024)",
      "url": "https://www.udemy.com/course/godot-ui/",
      "bio": "Learn how to use Godot's GUI Control nodes to build an entire game from scratch.",
      "objectives": [
        "Learn how to use Godot's Graphical User Interface (GUI) Control nodes to build game scenes.",
        "Write scripts in Godot's native scripting language; GDScript.",
        "Use object oriented programming design principles and other design patterns to build projects that are scalable.",
        "Discover lots of tips & tricks for using the Godot game engine that can be applied to any game project."
      ],
      "course_content": {
        "Introduction": [
          "Outline",
          "Setup"
        ],
        "Title Screen": [
          "Label A",
          "Label B",
          "Texture Rect",
          "Button A",
          "Button B",
          "Link Button",
          "Theme Type Variation",
          "Panel",
          "Color Rect"
        ],
        "Menus": [
          "Menu Bar",
          "Popup Menu",
          "Signals",
          "Save Data",
          "Counter"
        ],
        "Ship": [
          "Line Edit A",
          "Line Edit B",
          "Option Button",
          "Horizontal Split Container",
          "Tab Container"
        ],
        "Crew": [
          "Tree A",
          "Tree B",
          "Scroll Container"
        ],
        "Map": [
          "Radio Button",
          "Check Button",
          "Vertical Slider",
          "Progress Bar"
        ]
      },
      "requirements": [
        "Students should have completed my free course: Intro to Programming with Godot & GDScript!",
        "Or have a basic understanding of the Godot game engine and GDScript."
      ],
      "description": "Are you ready to start building your very first game in the Godot game engine?\nDo you struggle to use Godot's Graphical User Interface (GUI) Control nodes?\nOr do you want to test your skills and challenge yourself to build an entire game in a single scene using only Control nodes?\nIn this course we will explore everything the Godot GUI Control nodes have to offer by building a complete game from scratch.  It is recommended that you design your own game for this project; your game must have only 1 scene and only use GUI Control nodes.  We'll start with building a title screen; containing a title, a background image, a start button, and social media links, exploring the wide variety of options that are available for each node type.  Then transitioning to the main game, adding a menu bar; with plenty of different styles of menu options, including icons, shortcut keys, submenus.  Writing scripts that can create and manage player data and settings in Godot's native scripting language; GDScript.  Moving on with developing game mechanics specific to my design, we will explore the remainder of Godot's GUI Control Nodes in detail as we go so you can figure out how to apply them to your project.\nIf you get stuck, our discord server is full of other students, hobbyists and professional game developers who can help you out.  Click on the website link in my teacher profile to join!",
      "target_audience": [
        "New developers who are ready to start their very first game project.",
        "Experienced developers who want to learn more about Godot's GUI Control nodes.",
        "Advanced developers who want to challenge themselves to make an entire game in 1 scene using only GUI Control nodes."
      ]
    },
    {
      "title": "C# Masterclass: Make RPG & Mobile Games in Unity® & Blender",
      "url": "https://www.udemy.com/course/c-masterclass-make-rpg-mobile-games-in-unity-blender/",
      "bio": "Make a Zenda Role Player Game and Ninja Mobile Game in Unity® 5.4.3f1. A beginner's course for aspiring game developers!",
      "objectives": [
        "Build a Ninja Survival game for mobile in Unity®.",
        "Build a 3D \"Legend of Zenda\" game in Unity® from scratch.",
        "Code in C#.",
        "Create artwork in Blender.",
        "Make textures in Photoshop.",
        "Learn the fundamentals of game design."
      ],
      "course_content": {
        "Introduction": [
          "Download Blender and Unity3D",
          "Legend of Zenda Gameplay!",
          "Ninja Gameplay!"
        ],
        "T01. Introduction to Unity": [
          "1.1 Introduction",
          "1.2 Unity Editor",
          "1.3 Moving a Cube",
          "1.4 Materials",
          "1.5 Lights",
          "1.6 Particle System",
          "1.7 Applying Physics",
          "1.8 Asset Store"
        ],
        "T02. Introduction to Coding": [
          "2.1 Introduction",
          "2.2 Variables",
          "2.3 Methods",
          "2.4 If Blocks",
          "2.5 Loops"
        ],
        "T03. Introduction to Inputs": [
          "3.1 Introduction",
          "3.2 Key Press",
          "3.3 Moving a Player",
          "3.4 Jumping",
          "3.5 Moving Forward",
          "3.6 Cycling Cameras"
        ],
        "T04. Introduction to Prefabs": [
          "4.1 Introduction",
          "4.2 Introduction to Prefabs",
          "FAQ on Instantiating Objects",
          "4.3 Random Angles",
          "FAQ on Destroying Objects",
          "4.4 Explosion Effect",
          "4.5 Adding explosion effects"
        ],
        "Zenda Source Code and Art Assets": [
          "Assets and Source Code"
        ],
        "Player Movement | Zenda Game": [
          "Creating a Project",
          "Designing the Player",
          "Moving the Player",
          "Key Input",
          "Activating Physics",
          "Jumping",
          "Double Jump Block",
          "Velocity",
          "Velocity Optimizations",
          "Looking Around"
        ],
        "Weapons | Zenda Game": [
          "Designing a Sword",
          "FAQ on Rotating Objects",
          "Swinging the Sword",
          "Moving the Sword Back",
          "Retreating the Sword",
          "Designing a bomb",
          "Bomb Script",
          "Exploding the bomb",
          "Throwing Bombs",
          "Bow",
          "Swapping Weapons"
        ],
        "Enemies | Zenda Game": [
          "Simple Enemies",
          "Strong Enemy",
          "Hit Area",
          "Patrolling Logic",
          "Shooting Enemy",
          "Enemy Bullet",
          "Damaging the Player"
        ],
        "Camera and User Interface | Zenda Game": [
          "Camera",
          "Game Interface",
          "Health Bar",
          "Main Menu"
        ]
      },
      "requirements": [
        "To follow along with these tutorials, you will need the following programs: Blender (for 3D modeling), Photoshop or a free program like Gimp (for 2D art/texturing), and Unity® (for coding).",
        "The tutorials were recorded on a Mac, but you can use a PC."
      ],
      "description": "Have you ever wanted to make your very own games? Well, you've come to the right place! ⭐ ⭐ ⭐ ⭐ ⭐\nAfter purchasing this course, you'll be taken step-by-step through every process needed to do just that. Learn how to build a Legend of Zenda Role Playing Game and Ninja Survival Mobile Game!\nOur 2 talented instructors, Kevin Liao and Glauco Pires, explain everything from a basic, beginner level. That means you don't need any prior coding or digital art experience to succeed here.\nGlauco Pires will take you through the process of coding a game in Unity® from scratch.\nKevin Liao will teach you how to create all the artistic elements you will need to complete the game. Kevin will teach this section of the course in Blender, the wonderful and free 3D modeling program.\nThe final section will teach you how to integrate the art you created in Blender to the game in Unity®.\nIncluded in this course is material for beginners to get comfortable with the interfaces. Please note that we reuse this material in similar courses because it is introductory material. You can find some material in this course in the following related courses:\nBuild 22 Games in GameMaker Studio, C# Unity® & Blender\nC# Masterclass: Make RPG & Mobile Games in Unity & Blender\nMake a Ninja Survival game for mobile in Unity and Blender\nPractical Unity Developer Academy: Make Fully Featured Games\nA to Z Unity Development: Code in C# and Make Low Poly Art\nC# & Image Processing Masterclass: Make Mobile Games & Apps\nProfessional Game Development: 3D Modeling and Unity C#\nCreate 19 Low Poly Models & Your First 3D RPG In Unity® C#\nComplete Unity and Android Development: Build Games and Apps\nC# Masterclass: Make RPG & Mobile Games in Unity & Blender\nBuild \"The Legend Of Zenda\" Game in Unity and Blender\nMake a 3D Unity Action Game & Low Poly Buildings in Blender\n28 Low Poly Models and a Unity® Game - Complete 3D Developer\nThe beauty of taking an online course like this is the ability to replay any of the lectures at any time. There is no time limit or final tests. You get to learn at your own pace with a practical model method of learning.\nOne of the best features is that you can watch the courses at any speed you want. This means you can speed up the or slow down the video if you want to.\n\nThis course is project based so you will not be learning a bunch of useless coding practices. At the end of this course you will have real world apps to use in your portfolio.\nProject based training content is the best way to get from A to B. Taking this course means that you learn practical & employable skills immediately.\nLearning how to code is a great way to jump in a new career or enhance your current career.\nCoding is the new math and learning how to code will propel you forward for any situation. Learn coding today and get a head start for tomorrow. People who can master technology will rule the future.\n\nYou get full lifetime access to this course for a single one-time fee. Sign up now!",
      "target_audience": [
        "People who want to make games.",
        "Even if you have never coded before, you can use these lessons to get a headstart in the game-making realm! This course is targeted towards beginners to immediate.",
        "This course assumes you know a little about Unity Technologies and Blender."
      ]
    },
    {
      "title": "Introduction to High Poly Modeling for Games in 3ds Max",
      "url": "https://www.udemy.com/course/3dmotive-introduction-to-high-poly-modeling-for-games-in-3ds-max/",
      "bio": "Learn the basics of sub-division / high poly modeling for games using Autodesk's 3ds Max!",
      "objectives": [
        "Learn the basics of sub-d / high poly modeling using 3ds Max"
      ],
      "course_content": {
        "Introduction to the Basics": [
          "Introduction",
          "Setting up Hotkeys and Modifiers",
          "Learning the Basics",
          "Dissecting the Stoplight Prop",
          "Adding Edge Loops to the Top",
          "Aligning and Instancing Pieces",
          "Adding Edges Loops to a Curved Object"
        ],
        "Refining and Bringing it Together": [
          "Deleting Hidden Backfaces",
          "Always Keep your Low Poly Mesh in Mind",
          "Adding Extra Detail to the Light",
          "Adding Additional Support Edges",
          "Using the Push Modifier",
          "Modeling a High Poly Bolt",
          "Tackling More Complex Shapes",
          "Adjusting the Final Silhouette, and Closing",
          "Bonus Lecture: Further Learning with 3dmotive"
        ]
      },
      "requirements": [
        "Autodesk's 3ds Max"
      ],
      "description": "In this video we will take an introductory look at High Poly modeling. We'll start with the basics of edge control, modifiers, hotkeys, and workflow improvements. Then, we will apply these techniques as we tackle a high poly stoplight prop.\nAbout the Instructor:\nDon Ott has been working in the game industry as a 3d artist for over 8 years, and is the co-founder and owner of 3dmotive.com, which produces high-quality, game art and 3d related tutorials by industry pros! He is currently a Senior Artist at High Moon Studios in Carlsbad, CA, currently working on his 6th AAA title, slated for release in 2015. He is also a professor at Laguna College of Art and Design where he teaches Game Asset Modeling. You can see more of Don's work at www.donaldott.com.",
      "target_audience": [
        "Students new to high-poly / sub-division modeling"
      ]
    },
    {
      "title": "Unity 2D Game Development in C# 2021",
      "url": "https://www.udemy.com/course/unity2d-2021/",
      "bio": "Game Development In a Project Oriented way",
      "objectives": [
        "Unity Interface and 2D Game Development",
        "Programming in C# Transferable Coding and problem solving skills",
        "Graphic skills such as drawing the Game Sprites and generating the Game Background using Recursion",
        "Game mechanics like combat system for Melee and Ranged attacks and enemies simple AI mechanics",
        "More advanced C# techniques such as Singleton Pattern, ScriptableObjects, Animation Events and Coroutines",
        "Game effects like Sounds and Unity Particle System"
      ],
      "course_content": {
        "Introduction": [
          "Why Game Development? Why This Course?",
          "[MQ] Tools Needed",
          "[MQ] Project Creation"
        ],
        "The Hero is Born": [
          "[MQ] Hero Game Object Creation",
          "[SQ] Draw Hero",
          "[MQ] Hero Sprites In Unity",
          "[MQ] Attach Sprites"
        ],
        "The Hero is Moving": [
          "[SQ] Useful Linear Algebra",
          "[MQ] Hero Move Script",
          "[MQ] Hero Stops Moving",
          "[SQ] Cross Product Visually Explained",
          "[MQ] Flip Hero",
          "[MQ] Hero Move Idle"
        ],
        "Hero Moon Blade Attack": [
          "[MQ] Hero Attack Animation",
          "[MQ] Hero Attack Animation Script"
        ],
        "Wild Enemy Appeared": [
          "[SQ] Draw the Enemy Sprites in SketchBook",
          "[MQ] Enemy Creation",
          "[MQ] Enemy Animation",
          "[MQ] Enemy Move Script"
        ],
        "Combat Time! Hero Swings Moon Blades": [
          "Hero Attack!",
          "[MQ] Enemy Takes Damage",
          "[MQ] Hero Deals Damage Script",
          "[MQ] Hero Critical Attack",
          "[MQ] Hero Hit Particle Effect"
        ],
        "Enemy Shoots Fire Projectiles": [
          "[MQ] Enemy Attack Script",
          "[MQ] Enemy Projectile Prefab",
          "[MQ] Enemy Projectile Script",
          "[MQ] Enemy Projectile Conclusion"
        ],
        "Special Effects": [
          "[MQ] Game Fixes",
          "[MQ] Asset Store Explosion",
          "[MQ] Enemy Projectile Hit Explosion",
          "[MQ] Kill Enemy",
          "[MQ] Hero Critical Attack Particle Effect"
        ],
        "Adding some Juiciness": [
          "[MQ] Enemy Stop when Attack",
          "[SQ] Drawing Hero Blood Hit",
          "[MQ] Hero Blood Hit",
          "[SQ] Background - The Idea",
          "[SQ] Background - Tree Creation",
          "[SQ] Background - Branch Creation",
          "[SQ] Background - Final Part",
          "[MQ] Background in Game",
          "[MQ] Hero Statistics ScriptableObject",
          "[MQ] Enemy Fast Fix"
        ],
        "Hero Flash Ability": [
          "Hero Flash!",
          "[MQ] Flash Logic",
          "[MQ] Flash Animation & Hero Teleport",
          "[MQ] Flash Particle Effect",
          "[SQ] Draw Flash UI Ability",
          "[MQ] Flash UI"
        ]
      },
      "requirements": [
        "Some knowledge of Unity and C# is desirable"
      ],
      "description": "Join me on this journey to learn how to create video games in Unity.\n\n\nYou will learn how to use the Unity Interface, code in C#, draw the Game Assets, add the Game Sounds, the Visual Effects and much more!\nThere are 2 kinds of lectures in the course: [MQ] MAIN QUEST and [SQ] SIDE QUEST:\n[MQ] lectures are the core 'mandatory' lectures where we'll explore and understand the Unity engine and C# coding.\n[SQ] lectures are optional, you can watch them if you are interested in expanding your knowledge. We will, for example, cover the process of creating the Game Sprites and the Background Generation using recursion, study the linear algebra behind the game and more!\nYou have all the Game Assets (SQ sprites and game Sounds) always available in the Resources part inside each lecture. The file folder name is GameAssets.\nI have created this course in an enriching and inspiring way, so I will present a variety of Unity and C# techniques in order to give you the tools needed to develop your desired project. I also wanted this course to be fun and entertaining to watch so I made the videos short, fast paced and well organized. There are also some fun parts along the way for you to discover ;)\nThe course is project oriented, the best way to learn in my opinion. You will not just learn abstract programming concepts, but deduce them from the game applications. You will develop the necessary skills to be able to apply all the concepts learned throughout the course for your own projects.\n\n\nCome join me and dive in to become an expert in Unity and develop your dream game!\n\n\nThanks to my Family and my Friends who are my family <3\nThanks to Mary, my Bene Gesserit, for her help and support <3",
      "target_audience": [
        "Intermediate-Beginner Game Developers eager to expand their knowledge further"
      ]
    },
    {
      "title": "Substance Designer - Simple Water with Directional Controls",
      "url": "https://www.udemy.com/course/substance-designer-simple-water-with-directional-controls/",
      "bio": "Learning about basic Dynamic Functions and Exposing Parameters while we make an animated water material.",
      "objectives": [
        "By the end of this class you'll be able to create simple animated materials in Substance Designer"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Dynamic Function Overview & Height Map",
          "Starting the Ripples",
          "Adding the Pan and Ripple Stretch Controls",
          "Color, Opacity and Fine Tuning"
        ]
      },
      "requirements": [
        "This course is geared towards Beginners, but you should have at least a basic knowledge of how Substance Designer works.",
        "We'll be using Substance Player to render our animations."
      ],
      "description": "In this series we take a look at making a simple water animation. While we’re making our material we’ll learn about creating and exposing parameters as well as some basic dynamic functions that will drive our animation. We'll also learn how to drive several related functions with a single parameter, letting us make a liquid that seamlessly moves from standing to moving with one slider.\nWe keep the functions simple. So this is a great course for people who are just beginning to explore the procedural aspects of Substance Designer. For those that already know a bit about animated materials, it's just a great lightweight water!",
      "target_audience": [
        "Anyone who wants to learn about basic Dynamic Functions and basic animation in Substance Designer"
      ]
    },
    {
      "title": "Unreal Engine Octahedral Impostors and How to make LODs",
      "url": "https://www.udemy.com/course/unreal-engine-octahedral-imposters-create-lod/",
      "bio": "Optimize assets in UE4 to generate LODs and create great LODs! Increase FPS of Unreal Engine with impostors LOD",
      "objectives": [
        "How to create better LODs in UE4",
        "How to create Octahedron Impostors for Unreal Engine",
        "Optimize assets to gain more FPS in Unreal",
        "Step by step guide about how to create LODs for your assets in Unreal Engine",
        "Good habits and practices for creating and finishing a LOD with Impostor"
      ],
      "course_content": {
        "Introdução": [
          "Trailer 1",
          "PREVIEW: Showing all imposters created in the course.",
          "PREVIEW: Showing LODs created in the course.",
          "Big thanks to Ryan Brucks for create the ImposterBaker",
          "Assets used in the course",
          "How create an Imposter or Billboard, or Octahedron Imposter."
        ],
        "HOW TO MAKE OCTAHEDRON IMPOSTERS": [
          "installing our ImposterBaker",
          "Console Command: \"showflag.lod 0\" to force LOD0 to be always displayed",
          "KITE DEMO: Checking our first asset",
          "KITE DEMO: Imposter Map with Neutral Lighting",
          "KITE DEMO: Add Material Function ImposterCaptureSwitch to MATERIALS",
          "KITE DEMO: Rendering our first Imposter",
          "KITE DEMO: Checking Buffer Visualization",
          "KITE DEMO: Important Settings for ImposterBaker",
          "KOOLA's: Using the parameters of ImposterBaker",
          "KOOLA's: Imposter Types and Materials",
          "KITE DEMO: Baking imposters to others assets from KiteDemo",
          "KITE DEMO: Cliff Mesh",
          "KITE DEMO: Rocks",
          "MODULAR CLIFFS: Modular Cliffs Assets map",
          "MODULAR CLIFFS: Baking more imposter",
          "MODULAR CLIFFS: TIP bake imposter in the final level to see if worth create...",
          "BRUSHIFY URBAN: Understanding the assets and some meshes",
          "BRUSHIFY URBAN: add MF to Brushify Master Materials",
          "BRUSHIFY URBAN: Testing some settings in ImposterBaker and Materials",
          "BRUSHIFY URBAN: Testing more assets from Brushify",
          "BRUSHIFY URBAN: Testing more imposters",
          "MICHAEL GERARD CS01: Course assets",
          "MICHAEL GERARD CS01: Add MF to Master Materials",
          "MICHAEL GERARD CS01: Baking our first Tree Imposter",
          "MICHAEL GERARD CS01: Baking more imposters",
          "MICHAEL GERARD CS01: Baking more Octahedron Imposter",
          "MICHAEL GERARD CS02: New course assets",
          "MICHAEL GERARD CS02: Assets in scene and add MF to Master Materials",
          "MICHAEL GERARD CS02: Baking more assets"
        ],
        "HOW TO MAKE LODS": [
          "Commands to LOD freeze",
          "Deleting previous LOD",
          "Creating a new LOD",
          "Adjusting LOD transition with ScreenSize for a seamless transition",
          "Comparing LOD: \"old vs new\" and a new Console Command to force LOD transitions",
          "Copy LOD settings to reduce time",
          "Automated LODS: Create LODs with a single click",
          "KOOLA's: Creating lods from scratch"
        ],
        "CREATING THE FINAL IMPOSTERS": [
          "KOOLA's: How bake imposters from our last LOD",
          "KOOLA's: Always use Simple Offset Material to create our imposters.",
          "MICHAEL GERARD CS02: Same method to bake the impostors from our last LOD number",
          "MICHAEL GERARD CS02: Testing our imposter with the LOD",
          "MICHAEL GERARD CS02: Creating a map to testing our final imposter",
          "Faking subsurface",
          "MICHAEL GERARD CS01: Testing our final imposter mesh",
          "MICHAEL GERARD CS01: Some settings in Illumination.",
          "MODULAR CLIFFS: Testing Cliff imposter"
        ]
      },
      "requirements": [
        "Unreal Engine 4.25 installed"
      ],
      "description": "In this course, I will teach you how to optimize your StaticMesh from LOD0 to your last LOD in UNREAL ENGINE and stay as close to the original as possible without any strange transition. In the end I will show you how to generate Octahedral Impostors in UE4 and put in your last LOD, optimizing your assets as much as possible and gaining a lot of FPS performance in your Unreal Engine game.\nThe ImpostorBaker plugin created by Ryan Brucks will be used in a version of mine modified to accept Unreal Engine 4.22, 4.23, 4.24, 4.25, 4.26 & 4.27. An exclusive version is present in this course along with a new map to create our Impostors more easily and accurately.\nWe will practice to the maximum the creation of our Octahedral Impostors and show some important configurations and tips to make it as equal as possible.\n\n\nThe course is divided into several sections:\nWe will create the impostors for various assets of the Kite Demo, Brushify, Michael Gerard assets course, Koolala Snow Scene, Modular Cliff.\n\n\nWe will learn how to optimize LODs by creating from scratch, using only the tools of the Unreal Engine, tips on how to facilitate our work by reusing LODs settings for other assets, and comparing our lod with the old lod.\n\n\nWe will create our final impostor after several training sessions, and we will create it after creating our LODs and using our last lod to have a smooth transition between all the LODs from the densest mesh to the impostor.\n\n\nIf you are in UE5 that is not is my problem, this course not is for Unreal Engine 5. is like if this was a Windows 10 course and you are using Windows 11.",
      "target_audience": [
        "Unreal Engine users, Game Developers, Students"
      ]
    },
    {
      "title": "Start learning unity3d by making 5 games from scratch",
      "url": "https://www.udemy.com/course/learn-unity3d-from-scratch/",
      "bio": "Learn the process of making games on unity3d from scratch it is perfect course to start learning unity",
      "objectives": [
        "Students will become familiar with unity 5",
        "Student will become familiar with concepts of game development",
        "Students will learn to make basic to advance level games on thier own"
      ],
      "course_content": {
        "Lets get started started": [
          "All the asset and completed game can be downloaded from the link in description",
          "Introduction to our course",
          "Introduction to unity5"
        ],
        "Flappy bird Clone": [
          "Start making the game",
          "Lets animate the bird and add pipes",
          "Generate pipe using Prefabs",
          "Detecting Collision with bird",
          "Make menu screen and scoring system",
          "High score for the game"
        ],
        "Hextricks the Game": [
          "Introduction to Hextricks",
          "Applying colliders",
          "Instantiating enemy ball part 1",
          "Instantiating enemy ball part 2",
          "Creating game logic"
        ],
        "Traffic racer Game": [
          "Introduction",
          "lets make the road moving",
          "Control the car",
          "Adding enemy cars part 1",
          "Adding enemy cars part 2",
          "Adding enemy cars part 3",
          "Collision detection between cars",
          "Destroy extra cars",
          "Adding buttons",
          "Main screen of the game",
          "Adding more buttons",
          "Score system",
          "Hidding buttons",
          "Adding Sounds"
        ],
        "Zigzag Clone": [
          "Introduction to zigzag",
          "Functionality of the game",
          "Generating Platforms",
          "Generating random path",
          "Make the platform reusable",
          "Adding Gems",
          "Particle system for gems",
          "Lets end the game",
          "Scoring system",
          "Creating Menu screen",
          "Adding Animations",
          "High score"
        ],
        "Circle Rush": [
          "Introduction to circle rush",
          "Drawing circle",
          "Initiating player",
          "Creating Enemy",
          "Creating Laps",
          "Game UI",
          "Initiating Enemy on every count",
          "Lets end the game",
          "Adding Sounds",
          "Final Examination"
        ]
      },
      "requirements": [
        "Download unity 5 : https://unity3d.com/get-unity/download",
        "Install unity",
        "if you have unity before any version these games can be develop on the previous versions also but i recommend to use new version of unity",
        "Download assests from here https://goo.gl/iAWZlU"
      ],
      "description": "hello Learners\n\nThis course is all about learning unity for absolute beginners. We will start from the very basic and take you to a advance level of game development so you need no prior experience in unity\nThis course is project based we’re going to make games from scratch all the project files will be included in this course so you will not stuck at any point\n\nwe will organize a wonderful challenge\n\n\nin this challenge you just have to develop all the games which is in our course and submit it to our email\nthe top 5 will get free access to our next course\n\nisn’t it amazing….\nWe will use c# in our course by the end of the course you'll be very confident in the basics of coding and game development, and hungry to learn more.\nAnyone who wants to learn to create games: in unity3D should enroll in this course",
      "target_audience": [
        "Students with programming background",
        "Students should have Passion for game development",
        "Students who love to code",
        "It is for complete beginners"
      ]
    },
    {
      "title": "The Complete Guide to C# & Unity Programming - Build an RPG",
      "url": "https://www.udemy.com/course/the-complete-guide-to-c-unity-programming-build-an-rpg-w/",
      "bio": "Master Unity 2D Engine (2024) and C# Programing By Creating A Role Playing Game Using Modern Unity Development Technics",
      "objectives": [
        "Master the art of problem solving when it comes to game development. By understanding what obstacles you may face and the many ways to find solutions",
        "Learn the fundamentals of C#. Everything from variables, \"if\" statements and creating an object oriented structure. No prior programming experience necessary.",
        "Become a professional programmer by learning \"Version Control\" a tool used by expert engineers. Not only in game development but in all programming projects",
        "Transfer everything you learn from this course into any programming language you choose. Like JAVA, JavaScript, Python, C++ and other object oriented languages"
      ],
      "course_content": {
        "Introduction": [
          "How To Use This Course",
          "Download Unity & Visual Studio Step-by-Step",
          "Unity & VS 101",
          "Your First Code",
          "Legends Of Conquest Game Design",
          "Version Control 101"
        ],
        "Setting Up Player": [
          "Setting Up Sprite sheet",
          "Sorting Layers",
          "Colliders & RigidBody",
          "Scripts & Variables 101",
          "Inputs & RigidBody Velocity",
          "Animator & Animation",
          "Transition & Blending",
          "Blend Trees Animations In Unity",
          "Facing The Right Direction",
          "Colliding With Objects"
        ],
        "Scene Management": [
          "Switching From Scene To Scene",
          "Scene Manager and Prefabs",
          "Singleton Pattern",
          "Area Enter",
          "Script Order Of Execution"
        ],
        "Tilemaps & Cinemachine": [
          "Cinemachine 101",
          "Cinemachine Confiner Extension",
          "Tilesets In Unity",
          "Creating Tile Map",
          "Keeping Player Inside The Map",
          "Creating A Second Level",
          "Level Manager",
          "Canvas in Unity",
          "Coroutines 101"
        ],
        "Dialog In Game": [
          "Creating Dialog UI",
          "Dialog Controller (Arrays)",
          "Array Properties",
          "Activating Dialogue In Area",
          "Dialog Handler",
          "Holding Player Movement",
          "Showing Characters Names"
        ],
        "Player Stats": [
          "Player Stats",
          "For Loops In Unity",
          "Experience Distribution",
          "Testing Levelling",
          "Leveling Up The Stats",
          "Game Manager"
        ],
        "Menu System": [
          "Menu UI",
          "Character Info",
          "Menu Manager",
          "Stop Player Movement (again)",
          "Setting Up Stat",
          "Updating Stats",
          "Using The Buttons",
          "Setting up Status Widow UI",
          "Displaying Status Widow Information"
        ],
        "Inventory System": [
          "Creating Items",
          "Items Window",
          "Lists In C#",
          "Picking Up Items",
          "Updating Items in Inventory",
          "Displaying Picked Up Items",
          "Stackable Items",
          "Selecting Items",
          "Discard Items",
          "Using Items",
          "Adding Character Choice",
          "Choosing A Character",
          "Using Weapons & Armor"
        ],
        "Shop & Money Systems": [
          "Shop Tiles",
          "Setting Up Our Shop Scene",
          "Setting Up Shop Keeper",
          "Items To Buy & Sell",
          "Buying Items",
          "Making Buy & Sell Buttons Work"
        ],
        "Questing System": [
          "Creating Quests",
          "Marking Quests",
          "Quest Objects",
          "Completing Quests",
          "Activating Quests",
          "Activating Quests After Dialogue"
        ]
      },
      "requirements": [
        "A Working Computer or Laptop with minimum requirements to run Unity and Visual Studio (Which aren't too demanding)",
        "The desire and drive to learn how to create a fun and enjoyable game"
      ],
      "description": "The best way to learn anything is by doing it in a really fun way and this is where this course comes from. If you want to learn how all these incredible games you see are made there is no better place to start than this course. We made sure that this course has everything you need to take you from a beginner (even with zero codding experience) and slowly take you to intermediate level\nI chose the main project in this course to be a 2D RPG because it not only has a vast library of game development concepts that we can implement and learn, but also because it's very simple (especially if you are a beginner) to delve in and get started on your game development journey.\nEverything in this course has been meticulously crafted, review and recrafted to provide you with the best experience possible and maximize your learning as much as possible. So not only will you have a great time learning you'll also get the MOST BANG FOR YOUR BUCK by going away from this course with a lot of tools in your arsenal to continue you journey in the wild west of game development.\nSection 1: Introduction\nWe'll start off by downloading Unity and Visual studio. Installing them and making sure they work. We will then create our first code in C# and get used to Unity interface. Finally we'll talk about the game design of our game and what it takes to start creating a game from scratch\nSection 2: Setting Up Player\nIn this section we are going to start learning what sprite sheets are and how to set them up. We'll learn what sorting layers are in Unity. We'll look into colliders and RigidBodies and add them to our game objects and see how it starts getting affected by physics. we'll learn how to animate our sprites. We'll even understand what blending trees that will greatly help us reduce difficulty of animating\nSection 3: Scene Management\nIn this section we will learn about the scene manager in Unity that will allow us to create multiple levels in our game and transition between them. Plus we'll learn a very tricky way to making sure we always arrive in the right position when moving through our worlds\nSection 4: Tilemaps & Cinemachine\nThis section is the evolution of the previous one. Where we move from just adding maps as images to painting them using tile sets that you can download and customize yourself. We also learn about Cinemachine which is a very powerful and modern tool in Unity\nSection 5: Dialog In Game\nWhat game doesn't have a dialog system. This is where we add new NPC's to our game. Create UI learn about arrays and add more life to our game by introducing a way to interact with the world around us that we created in the previous section\nSection 6: Player Stats\nAgain what game, especially a RPG doesn't have stats for every character? WE have strength, Mana, health etc.. and we introduce a leveling system and XP. We learn about loops in C# which is a very powerful tool in and programming language and will really build your foundations\nSection 7: Menu System\nThis section is full of artistic creating which means you have the full liberty of creating your own. This is were we don't create anything NEW but we put all the information that we've taking into account so far in front of our player and making sure he can access that info easily\nSection 8: Inventory System\nThis is also a section that could have been called ADVANCED C# because we take our coding to the next level. We learn about Lists another powerful tool in C#. We learn how to pick up items. Add them to our inventory using the advanced C# tools and make sure that all of this works smoothly especially when we also discard those items. Finally we use those items on our characters\nSection 9: Shop & Money Systems\nNow that we pick up items, we want to sell them... for MONEY! who doesn't like money? we will introduce a monetary system so basically create an economy. We create a shop with a shop keeper inside and we'll be able to transact with him using the money we have to buy and the items we have to sell\nSection 10: Questing System\nThis is my favorite part of the game. Because we start adding quests. And this turns our game from a normal game to and RPG. We can get quests, complete them, get rewarded with items. Some objects will only appear on after we complete some kind of quest. This one is really fun\nSection 11: Save & Load\nIt's imperative that we do not lose our progress in an RPG that's why we introduce a Save and Load system. We will keep track of our player position and the world he was in. We will keep track of the items we have in a very sophisticated way. And every else also that needs to be saved and loaded\nSection 12: Music & SFX\nTime to breath some life into this game adding sound effects and Music. Now our game goes from static to dynamic. We will add background Music and SFX. To each level and each interaction respectively\nSection 13: Main Menu\nEvery game HAS to have a main menu. But it also needs a dynamic main menu. We create a simple menu with a background. But the exiting part of this is the way we give the ability to our player to either continue from his last save or start a new game\nSection 14: Setting Up Battle System\nUntil this point we've had a pretty decent game I would say. But now it's time for the real deal. We are no longer walking around and talking to NPC's it's time for WAR. We are creating a battle system. This is the first step of one the biggest scripts that you and I will ever create. So strap your thinking caps on and hold down to your seats this is going to be an exhilarating ride\nSection 15: Enemy Attack System\nNow that we've started a battle with enemies. Time to give them the ability to attack us. We will choose which enemy is attacking. How much damage he's giving and we'll even display it on screen and see what happens when our players don't have any health left\nSection 16: Player Attack System\nNow it's our players turn to defend themselves. We will give the ability to fight back. And also the ability to run away from the battle. We'll use various attacks such as normal slashing, using different types of magic and on top of that using items during battle\nSection 17: Battle System Ending\nThis is where our journey ends unfortunately my fellow game developers. We handle the dead players. We handle the dead battlers. We create a victory screen. A game over screen. We give our rewards. And we end this section and this course with a BANG!! by creating a BOSS fight\nWhat You Will Learn In This Course:\nUse Visual Studio with Unity in a simple way\nHow to set a good Game Development environment\nUnity Engine are in a simple and comprehensive way\nThe Basics of C# in the most fun ways possible by creating a game\nUse player input to control the behavior of our game\nAdd different component to game objects\nAdd gravity and other forces to game objects\nMake game objects interact with each other in our game\nAdd sprite sheets and slice them up\nCreate Tile assets\nHow to create levels from our tile assets\nBecome a ninja problem solver and learn how to go step by step to solve any problem in Game Development and coding\nCreate animations",
      "target_audience": [
        "Aspiring Game Developers that don't know where to start when it comes to creating games",
        "Young programmers who want to learn the basics of coding in a really fun way by creating their own games using Unity's very simple engine",
        "Someone who's looking to create a 2D Role Playing Game and doesn't know how to do it easily and efficiently"
      ]
    },
    {
      "title": "ChatGPT x Unity : The Ultimate Integration Guide",
      "url": "https://www.udemy.com/course/unity-chatgpt/",
      "bio": "Learn how to harness the power of AI using ChatGPT into your Unity projects",
      "objectives": [
        "Integrate ChatGPT into your Unity project",
        "Understand the huge potential of AI in your projects",
        "How to setup a Discussion Canvas that you can use for other projects",
        "How to make API calls to the OpenAI platform"
      ],
      "course_content": {
        "Introduction": [
          "Scene Setup",
          "Chat Interface Setup 1/2",
          "Chat Interface Setup 2/2",
          "The Discussion Bubble Logic",
          "The Discussion Manager",
          "Integrating ChatGPT to our Project",
          "Final Tweaks & Testing"
        ],
        "Adding a Voice to ChatGPT": [
          "Importing Oculus' Voice SDK",
          "ChatGPT now has a Voice !",
          "Adding a Voice Control Button",
          "Copy message to Clipboard",
          "Talk directly to ChatGPT now ! No more typing",
          "Double Functionality for the Ask Button",
          "Project Files"
        ],
        "Mobile Chatbot": [
          "UI Layout",
          "The Main Scroll View",
          "The History Container",
          "The Activity Container",
          "Adding the Roles UI",
          "Updating the OpenAI SDK Correctly",
          "Scriptable Objects for Data Management",
          "Creating the Role Categories",
          "Configuring the Role Containers",
          "The UI Manager !",
          "Adding the Chat",
          "Improving the Chat Panel",
          "Updating the Activity Panel",
          "Adding some Limits",
          "Ads - IronSource Setup",
          "Ads - Testing the Integration",
          "Testing the Rewarded Video",
          "No more Messages Warning",
          "Rewarded Video now Resets Messages",
          "Creating a Conversation History",
          "History Save / Load",
          "History Button Interaction"
        ],
        "Bonus Section": [
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "Be familiar with the Unity Game Engine",
        "Have some basic C# knowledge"
      ],
      "description": "If you want to integrate ChatGPT to your Unity Project, you are at the right place.\n\n\nAfter finishing this course, you will know how to make calls to the OpenAI API, integrate ChatGPT to your project and setup a Chat Interface.\n\n\nThat’s not it, you’ll be able to accomplish far more than that.\nYou are going to take the project one step further and add Text-To-Speech & Speech-To-Text to your project, using the Oculus SDK !\n\n\nAfter you’ve learnt all of this priceless knowledge, you will Ace Unity’s UI and make an AI Chat App. You will master components such as\nHorizontal & Vertical Layout Groups\nScroll View\nButton\nImage\nLayout Element\nContent Size Fitter\nTextMeshPro\nAnd much more\nThis will allow you to manage every other UI for your next projects.\n\n\nOn top of that, you will also learn how to save a history of all of the conversations you had with ChatGPT. After learning 2 ways of Saving & Loading Data ;).\n\n\nThe Activity Manager will help you track the user activity. After sending 10 messages (or less if you want), the user will have to watch a video to chat again.\n\n\nMonetization is an integral part of an app right ? That’s why I decided to show you how simple it is to integrate Unity’s new Ads Mediation system.\nYou will learn how to setup IronSource & add versatile Rewarded Videos to your app !\n\n\nAlong the way, you will improve your code architecture as you’ll learn about\nActions\nUnity Events\nThe Singleton Pattern\nScriptable Objects\nAnd multiple Quick Tips along the way\n\n\nSo if you think you’re ready to step up as a developer, then grab this course Today, and Enjoy the journey.",
      "target_audience": [
        "Game dev who want to be ahead of the competition",
        "Amateur game devs who want to Increase their knowledge",
        "Devs who wanna integrate AI to their project"
      ]
    },
    {
      "title": "Unreal Engine 2D: Make Your Own Epic 2D Games Using C++",
      "url": "https://www.udemy.com/course/unreal-engine-2d/",
      "bio": "Make Games in UE5 with C++: Master Sprites, Tile Maps, and Gameplay Coding Using Paper2D and PaperZD",
      "objectives": [
        "Kick off your 2D game dev journey in Unreal with C++",
        "Get comfy with Unreal's cool 2D tools like sprites and tile maps",
        "Code gameplay for everything from platformers to top-down shooters",
        "Craft levels with obstacles, enemies, and loot to grab",
        "Create three rad games: a racer, a shooter, and a jumper",
        "Master Paper2D and PaperZD to make your games look sharp",
        "Write neat code that keeps your games running smooth",
        "Use C++ to hook up all your game’s moving parts"
      ],
      "course_content": {
        "Introduction & Setup": [
          "Welcome To The Course",
          "Community & Support",
          "Accessing Our Projects"
        ],
        "Desert Racer (Obstacle Avoidance)": [
          "Section Intro - Desert Racer",
          "Development Setup",
          "What is Paper2D?",
          "Using Sprites",
          "The Race Track",
          "Creating The Player",
          "Player Blueprint",
          "Setting Up Input",
          "Taking Input",
          "Going Forwards and Backwards",
          "Finishing Up Movement",
          "The Game Mode",
          "Obstacle Class",
          "Fence and Tire",
          "Collision Detection",
          "Reset Game",
          "Finish Line",
          "Background Music",
          "Level Design - Desert Racer",
          "Wrap Up - Desert Racer"
        ],
        "Gun Survivors (Top-down Shooter)": [
          "Section Intro - Gun Survivors",
          "New Project Setup",
          "The Arena",
          "Flipbooks 101",
          "Player Class & Blueprint",
          "The Game Mode",
          "Input System Setup",
          "Binding Actions",
          "Player Movement",
          "Switching Flipbooks",
          "Staying In Map Limits",
          "Adding The Gun",
          "Rotating The Gun",
          "Creating The Bullet",
          "Moving The Bullet",
          "Launching The Bullet",
          "Shooting Cooldown",
          "Shooting Bullets",
          "Custom Mouse Cursor",
          "Creating The Enemy",
          "Enemy Follows Player",
          "Flip Enemy Flipbook",
          "Bullet-Enemy Collision",
          "Enemy Death",
          "The Enemy Spawner",
          "Better Spawn Position",
          "Difficulty System",
          "Setup Enemy",
          "Enemy Died Delegate",
          "Score System",
          "HUD Widget",
          "Sending The Score",
          "Player Enemy Collision",
          "Restart Game",
          "Final Touches",
          "Wrap Up - Gun Survivors"
        ],
        "Crusty Pirate (Platformer)": [
          "Section Intro - Crusty Pirate",
          "Creating The Project",
          "Sprites and Flipbooks",
          "Tile Sets",
          "Tile Maps",
          "Player and Game Mode",
          "The Input System",
          "Running and Jumping",
          "Turning Left and Right",
          "Animation Source",
          "Animation Blueprint",
          "More Animation States",
          "Creating The Enemy",
          "Enemy Follows Player",
          "Enemy Stop Distance",
          "Enemy Faces Player",
          "Enemy Animation Source",
          "Enemy Animation Blueprint",
          "Attack Animation Override",
          "Attack Collision Box",
          "Anim Notify State",
          "Enemy Hitpoints",
          "Enemy Take Damage",
          "Jump Nodes",
          "Enemy Stun State",
          "Enemy Attack Animation",
          "Enemy Attack Collision Box",
          "Player Take Damage",
          "Player Stun State",
          "The HUD",
          "Using The HUD",
          "The Game Instance",
          "Collectable Items",
          "Implementing Item Functionality",
          "Game Over State",
          "The Level Exit",
          "Decorations",
          "Small Improvements",
          "Level Design - Crusty Pirate",
          "Win Screen",
          "Packaging The Game",
          "Course Wrap Up"
        ]
      },
      "requirements": [
        "A basic understanding of Unreal and C++ fundamentals would be helpful"
      ],
      "description": "Unlock the full potential of 2D game creation in Unreal Engine with our comprehensive course designed specifically for those looking to harness the power of C++ in their game projects. Whether you're transitioning from another engine or deepening your Unreal skills, this course has everything you need to level up your game development prowess.\nWhat You'll Learn:\nCraft Stunning 2D Games: Learn to build games in Unreal using C++, covering everything from sprites to complex game mechanics.\nMaster Unreal's 2D Tools: Dive deep into Unreal's Paper2D and PaperZD plugins for powerful 2D game development.\nCode Robust Gameplay Elements: Write gameplay code for diverse game types like obstacle courses, shooters, and platformers.\nDesign Varied Game Mechanics: Create and implement features such as multiple levels, collectable items, enemy encounters, and more.\nCourse Projects:\nBuild Three Unique Games: Develop a Desert Racer (Obstacle avoidance), Gun Survivors (Top-down shooter), and Crusty Pirate (Platformer).\nExplore 2D Plugins: Gain hands-on experience with the Paper2D and PaperZD tools to bring your game ideas to life.\nCode Interactive Gameplay: Write and organize 2D game code that makes your games fun and engaging.\nWhy Take This Course?\nStart Your 2D Game Project: Break the initial barriers to starting a 2D game in Unreal with step-by-step guidance.\nLearn Specialized 2D Plugins: Master specific tools like Paper2D and PaperZD that are essential for 2D development in Unreal.\nFill the Resource Gap: This course offers exclusive insights into using C++ for 2D game development, a niche not well-covered elsewhere.\nWho Should Enroll:\nDevelopers familiar with the basics of Unreal Engine and C++ who want to specialize in 2D game development.\nGame creators from other platforms like Unity or Godot, looking to leverage Unreal Engine’s capabilities for 2D games.\nCourse Requirements:\nA basic understanding of Unreal Engine’s interface and functionalities.\nFundamental knowledge of C++ programming.\nGet Ready to Build Your Dream Games: Join us on this exciting journey to become a proficient 2D game developer in Unreal Engine. With hands-on projects, expert instruction, and a focus on practical applications, you'll not only learn the theory but also apply it directly to building games you can be proud of.\nDive into the world of 2D game development with Unreal Engine and C++ today and start making the epic games you've always wanted to play!",
      "target_audience": [
        "This course is ideal for you if you're familiar with the basics of Unreal Engine and C++ and want to specialise in 2D game development",
        "Also if you're coming from a different engine (Unity, Godot etc.) and want to leverage Unreal Engine’s capabilities for 2D games"
      ]
    },
    {
      "title": "Unity Game Tutorial: Match 3 - 3D Game",
      "url": "https://www.udemy.com/course/unity-game-tutorial-match-3-3d-game/",
      "bio": "Match 3 Game Tutorial how to create a Match 3 like Candy Crush Saga in Unity 3D Game Engine.",
      "objectives": [
        "How to create a Match 3 Game in Unity Game Engine.",
        "C# Fundamentals - Loops, Functions, Variables, Array, Lists ...",
        "Physics and Raycasting."
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "The Concept & Unity Setup": [
          "The Concept",
          "Unity Layout"
        ],
        "The Playfield": [
          "Visualize the Playfield",
          "The Camera",
          "Filling the Board",
          "Setting up all Blobbs",
          "Fill Board with Blobbs"
        ],
        "Game Mechanics": [
          "Adding Blobb Physics",
          "Blobb Selector",
          "Toggle Selector",
          "Checking Neighbours",
          "Swapping Blobbs #1",
          "Swapping Blobbs #2",
          "Swapping Blobbs #3",
          "Finding a Match",
          "Clearing A Match",
          "Clearing all Matches",
          "Destroying Blobbs",
          "Setting ID's",
          "Creating New Blobbs",
          "Swap back if no Match"
        ],
        "Game Board Mechanics": [
          "Is Board On Move",
          "Auto Destroy Matches",
          "Avoid Auto Play",
          "Block Input while Move",
          "Check Possible Matches #1",
          "Check Possible Matches #2",
          "Check Possible Matches #3",
          "Check Possible Matches #4"
        ],
        "User Interface and Score": [
          "GUI 1 - Score Field",
          "GUI 2 - Matches Field",
          "UI Handler",
          "Game Manager 1",
          "Game Manager 2",
          "Get Score",
          "Update Matches",
          "Win / Lose Condition",
          "GUI 3 - Star Meter",
          "Coding The Star Meter",
          "Star Indicators",
          "Score Fix",
          "Win Panel GUI",
          "Win Panel Script 1",
          "Win Panel Script 2",
          "Block Blobbs with UI",
          "Show Score in Win Panel",
          "Animating Stars",
          "Showing Stars",
          "Stopping the Game",
          "Particle Background"
        ],
        "Other Scenes": [
          "Main Scene",
          "Level Select",
          "Final Touches"
        ],
        "Conclusion & Bonus & Requests": [
          "Game Ideas & Thank You",
          "Extra - Freeze Bug Fix"
        ]
      },
      "requirements": [
        "You need a working Mac or Pc.",
        "Unity Version 5.3+",
        "Passion for Games & Game Creation.",
        "The mood to finish the course to create an awesome Game.",
        "Maybe a passion for Match 3 Games."
      ],
      "description": "In this Course you'll learn how to create a Match 3 like the amazing Candy Crush Saga in Unity Game Engine.\nThe concept is based match 3 or more Candys or such in a row or column. We create it as a 3D Game.\nThis course is a Beginner Course, so if you have trouble in any case, write me a message or Q&A, and i'll help as best as i can.\nIf you are beginner, you might have some trouble to follow, but the videos will guide you through the complete course. Don't forget you only become better if you repeat things and keep on learning!\nSo we create several Systems which will give us enough freedom to:\nC# (Monodevelop)\ncreate any board size we like\ncreate our own Blobbs behaviors\ncreate a Auto Matching System\ncreate Auto Clear if no Matches are found on the Board\nUnity (2018.3)\nsetting up our Blobbs\ncreate highlight and background Particles\ndesign our own User Interface with Score, matches left and a Star Meter\nusing Physics for the Blobbs to fall down\ncreating a Menu and simple Level Select Scene and of course a Game Scene\nCourse Material\nI provide the following Material with the Course:\n3 different Blobbs with animations\n2 Star Textures  and a Border Texture as *.png\nYou have to write the code on your own, i do not provide the final scripts!\nAll other graphics for Menu's, Icons, Images or Buttons need to be created on your own.\nAll Materials i provide are for education only and should not be in your final release!\nConclusion\nIn the end of this course you will have a fully functional Match 3 Style 3D Game.\nChallenge\nAfter you have created nice Menus, Buttons, and maybe additional content, upload the Game to any Gaming Website, Google Playstore, Apple Store or even Windows Store or Steam.\nSo what are you waiting for?\nLet's make your dream game a reality!!\nLevel: Beginner / Intermediate\nVideo Course Length: ~6 hours\nUnity Version required: 5.3+",
      "target_audience": [
        "You want to create a Match 3 Game with Unity.",
        "You want to learn using Unity to create 2D or 3D Games in generell.",
        "You have a passion for Games in general."
      ]
    },
    {
      "title": "Unreal Engine 5 Сinematic and Animation from scratch to PRO",
      "url": "https://www.udemy.com/course/unreal-engine-cinematic-and-animation-from-scratch-to-professional/",
      "bio": "Learn how to create professional Cinematic and Animation completely from scratch beginner with Unreal Engine 5",
      "objectives": [
        "Completely basic knowledge of Unreal Engine 5, learn to work in Unreal Engine, create project, study all sections, how to customize the work area for yourself.",
        "Learn to work with Blueprints. Learn to assemble a character from parts, add weapons, particles in Unreal Engine 5.",
        "Learn to work with Animation: create, modify, adapt for Cinematic in Unreal Engine5.",
        "Learn how to use the camera in detail with Unreal Engine 5.",
        "Find out how and where to get assets for cinematics. How to import them into the project and how to work with them.",
        "Learn in great detail the basic tools for Cinematic in Unreal Engine 5.",
        "Learn to work with different effects: particles, Fade track, Time dilation. How to adapt particles for Cinematic in Unreal Engine 5..",
        "Learn the features of working with post processing in Unreal Engine 5.",
        "Learn to work with sound effects in Unreal Engine 5.",
        "Learn how to create different types of camera shake. Features of the camera shake for Cinematic in Unreal Engine 5.",
        "Learn to render Cinematic. Learn all the features of rendering in Unreal Engine 5."
      ],
      "course_content": {
        "Introduction": [
          "Cinematic",
          "Introduction"
        ],
        "Basic knowledge of Unreal Engine 5. Basic tools for cinematics.": [
          "Sequence",
          "Camera"
        ],
        "Creating a cinematic": [
          "Shot 1",
          "Shot 2 Part 1",
          "Shot 2 Part 2",
          "Shot 3",
          "Shot 4",
          "Shot 5",
          "Shot 6"
        ],
        "Cinematic assembly, effects application and rendering": [
          "PostProccing.Еffects",
          "SoundEffects",
          "CameraShake",
          "Rendering",
          "Conclusion"
        ]
      },
      "requirements": [
        "For this course you will need the Unreal Engine of any version."
      ],
      "description": "Hello dear students.\nMy name is Tanya Chernenko, I am a leading animation specialist in Unreal Engine 5, I am also a 3D artist, Level Designer and Game Developer. I and my fellow programmer Anatoly Demin, have created a unique content for you. We will show you how to make a cinematic, movie, or AAA level cartoon in Unreal Engine 5.\n\n\nWe will not only learn all the basic tools in Unreal Engine 5, but also learn how to create dynamic action, bright interesting and unexpected moments. We will also learn how to create real horror scenes, learn how to maximize the immersion of the viewer in the atmosphere, and create a screemer effect.\n\n\nWe will go through all stages, from project creation to rendering in Unreal Engine 5. We will study all the moments, features and details. We will learn to work with all effects, sounds, postprocessing in Unreal Engine 5.  We will learn how to create interesting scenes.\n\n\nWe will also work a lot with animation and Blueprint in Unreal Engine 5.  We will learn how to create, change, modify animations, and make them perfect for the character. We will animate many different characters on one scene, and learn how to make the scene bright, dynamic and memorable.\n\n\nIf you're ready to become a pro at Unreal Engine 5, then join us.",
      "target_audience": [
        "This course is intended for everyone who wants to learn how to create Cinematic, cutscenes, trailers, films, cartoons using the Unreal Engine.",
        "For all game developers, animators who want to learn how to work with Animation, or expand their knowledge in the field of animation using the Unreal Engine."
      ]
    },
    {
      "title": "Unity Mobile Game - Create a Hyper Casual Shooting Game",
      "url": "https://www.udemy.com/course/unity-hc-shooting-game/",
      "bio": "Learn & Create a Hypercasual Mobile Game with Shooting Mechanics like a Pro !",
      "objectives": [
        "Create a Hyper Casual Shooting Game from Scratch",
        "Add Animations to 3D Characters",
        "Learn how to Craft a Solid Architecture for your Code",
        "Learn how to write Clean Code",
        "Use Inverse Kinematics",
        "Create a Game Loop",
        "And Much More !"
      ],
      "course_content": {
        "Player & Animations": [
          "Project Setup",
          "Grabbing Character Animations",
          "Animating the Main Character",
          "Moving the Player !",
          "How to Better Manage the Player Animations",
          "Improving our Scene Visuals",
          "Setting Up the Player Camera"
        ],
        "The Warzone": [
          "The Player Spline",
          "Player Detection",
          "The First Warzone",
          "How to Follow the Spline ?",
          "Animating the Player on the Spline",
          "Adding the Slow-Mo Effect"
        ],
        "Shooting At Enemies": [
          "We Start Animation Rigging",
          "Better Controlling the Rig Builder",
          "Configuring the IK Constraints",
          "Better Aiming for the Player",
          "Adding Piou Pious =D",
          "Adding the Shooting Line",
          "Spawning Bullets",
          "Shooting Bullets",
          "Bullets Detect Enemies",
          "Enemy Ragdoll Tests",
          "Polishing the Enemy Ragdoll"
        ],
        "Making Enemies Shoot Back": [
          "Enemy Aiming at Player",
          "Storing Enemies that Shoot Back 1 / 2",
          "Storing Enemies that Shoot Back 2 / 2",
          "Enemies Finally Shooting Back !",
          "Player Ragdoll",
          "Enemy Shooting Polish"
        ],
        "Game Loop": [
          "Setting Up the Main Panels",
          "The Game Manager",
          "Switching to the Game State",
          "The Gameover",
          "The Level Complete",
          "Project Files"
        ],
        "Bullets Container": [
          "Setup the UI Elements",
          "Changing the UI Bullets Color",
          "Preventing the Player From Shooting",
          "Hide / Display the UI Bullets",
          "Reload the Bullets in New Warzone"
        ],
        "We Use Better Splines": [
          "Adding Dreamteck Splines",
          "Better Aiming with Dreamteck"
        ],
        "Level Manager - Part 1": [
          "Creating the Level Manager",
          "Saving / Loading the Level",
          "Validating the Level Index"
        ],
        "Checkpoints": [
          "The First Checkpoint",
          "The Checkpoint Manager",
          "Improving the Checkpoint Manager"
        ],
        "Level Manager - Part 2": [
          "Setting Up our Second Level",
          "Setting Up its Warzones",
          "The Warzone Sequence",
          "Polishing the Warzone Sequence"
        ]
      },
      "requirements": [
        "How to make your way through the Unity Editor (but not compulsory)",
        "A Computer",
        "An internet connexion"
      ],
      "description": "Do you know Johnny Trigger ?\n\n\nLet me present you Frankie Trigger !\n\n\nIn this course, you will learn how to create a Hyper Casual Shooting Mobile Game from scratch.\nWe will go all the way from setting up our project to creating the core loop of the game.\n\n\nWe will first grab a Free Character from Sketchfab, a popular 3D Models Library. This model alone won't do anything, we will need to Animate it !\nAnd I've got the Perfect Solution for you, a Free Platform for Animations called Mixamo.\nAfter that step, you will be able to add animations to any of your humanoid characters.\n\n\nOkay that's one thing !\n\n\nAfter Animating our character, we will use the Unity Spline System to make the player follow a certain path, perform a Frontflip, Backflip, or any animation that we want, and shoot at enemies.\n\n\nI call that phase a Warzone !\n\n\nWhen entering the Warzone, we will add a cool Slow Motion effect. There, you'll learn about the 2 Time Scales Unity uses.\n\n\nIf any of the enemies is touched (& the Player too) by a bullet, he will turn into a Ragdoll !\nExactly, we will add jiggly bones to our characters to make the game More Satisfying.\n\n\nYou will learn how to use Unity's Animation Rigging System to make the player aim at enemies, and the enemies aim at the player.\n\n\nThere is so much you will learn in this course, and there’s even more to come!\nIf you’re ready to Master New Hyper Casual Concepts, don’t miss this opportunity.\n\n\nEnroll now",
      "target_audience": [
        "Unity Beginners willing to Create a Hyper Casual Game",
        "Unity Enthusiasts willing to improve their skills",
        "Unity Experts interested in Trendy Mobile Games Mechanics"
      ]
    },
    {
      "title": "Unity Cutscenes: Master Cinematics, Animation and Trailers",
      "url": "https://www.udemy.com/course/unity-cutscenes-master-cinematics-animation-and-trailers/",
      "bio": "Create Interactive Cut-Scenes, Epic Boss Fights and Cinematic Trailers Using Unity's Cinemachine and Timeline Tools",
      "objectives": [
        "Level up your game dev skills by crafting cinematic cut-scenes that wow players.",
        "Craft jaw-dropping camera moves using Unity's Cinemachine wizardry.",
        "Build smooth animation sequences with Unity's Timeline and Animation tools.",
        "Design interactive cut-scenes that blend seamlessly into your gameplay.",
        "Develop epic boss fights with dynamic cameras and awesome effects.",
        "Master the art of crafting cinematic trailers that captivate your audience.",
        "Unlock next-level post-processing tricks for cinematic polish.",
        "Supercharge cut-scene interactivity with Animator and NavMesh magic."
      ],
      "course_content": {
        "Introduction & Setup": [
          "Welcome to the Course",
          "URP Cinematic Studio Setup",
          "Intro to the Animation Window",
          "Intro to Mixamo Animations",
          "Intro to Post Processing and Lighting",
          "Animation Rigging Basics",
          "Intro to Animating in Timeline",
          "Intro to Cinemachine in Timeline",
          "Accessing Our Projects",
          "Community & Support"
        ],
        "Cinemachine Basics": [
          "Section Intro: Cinemachine Basics",
          "Mastering Virtual Cameras",
          "Animating Virtual Cameras in Timeline",
          "Intro To Dolly Tracks And Carts",
          "Adding a Dolly Camera and Track",
          "Mastering Dolly Cameras",
          "Intro to Clear Shot Cameras",
          "Adding Clear Shot Dolly Cameras",
          "Adding a Target Group Camera"
        ],
        "Boss Fight Cut Scene": [
          "Section Intro: Boss Fight Cut-Scene",
          "The Approach",
          "The Destination",
          "The Agent",
          "The Animator",
          "The Boss: Animations",
          "The Timeline",
          "The Action Shot",
          "The Showdown: Player Anims and VFX",
          "The Showdown: Concepts and Design",
          "Connecting the Dots",
          "Smoothing the Transition",
          "The Checklist",
          "Boss Transitions Part 1",
          "Boss Transitions Part 2",
          "The Boss: Timeline SFX",
          "The Exit Plan: Cameras",
          "The Exit Plan: Player",
          "The Exit Plan: Boss",
          "The Exit Plan: Props and Lighting",
          "The Exit Plan: Post-Processing",
          "The Exit"
        ],
        "Character Select Scene": [
          "Section Intro: Character Select",
          "Wizard Setup",
          "Ninja Setup",
          "Basic UI Setup",
          "Characters & Cameras",
          "Ninja Animations",
          "Wizard Animations",
          "Animator Controllers",
          "Path of the Dragon",
          "Dolly Tracks and Timelines",
          "Fine-Tuning for Impact",
          "Adding VFX & SFX",
          "Exiting the Sequence"
        ],
        "Cinematic Trailer Sequences": [
          "Section Intro: Cinematic Trailer",
          "First Pass",
          "Second Pass",
          "Final Pass",
          "Final Product"
        ]
      },
      "requirements": [
        "Basic Unity Knowledge: Familiarity with Unity’s interface and basic functions, including game object manipulation and scene setup.",
        "Eagerness to Learn: A passion for game development and storytelling through cinematics is essential for fully engaging with the course material."
      ],
      "description": "Ready to create cut-scenes that’ll blow your players away?\nIn this course, you’ll master Unity’s Cinemachine, Timeline, and Animation tools to make cinematic sequences that’ll rival big-budget games. No experience with cut-scenes? No problem!\nLearn how to take full control of Unity’s Cinemachine cameras. You’ll set up dynamic shots and seamless transitions, creating the kind of visual polish that makes players forget they’re even in a game. Boss fights? Check. Epic moments? Check.\nYou’ve seen those smooth cut-scenes in games where everything clicks, right? We’ll teach you to sync animations and gameplay so that your cut-scenes flow seamlessly. No awkward transitions – just pure, engaging action that players will love.\nWant to create trailers that’ll make jaws drop? We’ll show you how to craft a cinematic trailer from start to finish. Master camera angles, add stunning post-processing effects, and make your game trailer look like it belongs on the big screen.\nThis course is perfect for aspiring game developers. If you’ve got the basics of Unity down and are ready to dive deeper into cinematics, you’ll fit right in. Got a passion for storytelling through games? You’ll love every second of this course.\nYou’ll learn advanced techniques like setting up animation sequences and adding post-processing effects. These skills will take your cut-scenes from amateur to pro in no time. Every shot you design will have that polished, cinematic feel.\nNot sure how to get started? Don’t sweat it. All you need is basic Unity knowledge. If you know how to handle game objects and scenes, you’re ready to jump in. This course will take care of the rest and guide you every step of the way.\nYour players deserve more than static camera shots and janky cut-scenes. With our course, you’ll create stunning cinematic experiences that keep players engaged.\nReady to level up your storytelling? Let’s get cinematic!",
      "target_audience": [
        "Aspiring Game Developers: Ideal if you want to elevate your game development skills by creating cinematic cut-scenes that enhance storytelling and player engagement.",
        "Intermediate Unity Users: Perfect if you're seeking to deepen your understanding of Cinemachine and Timeline, for creating high-quality visuals.",
        "Content Creators and Trailers Makers: Great for creating compelling trailers and cinematic sequences for promotional purposes or storytelling in your games."
      ]
    },
    {
      "title": "Unreal Engine 5 Blueprint: Make your own 3D Platformer!",
      "url": "https://www.udemy.com/course/unreal-engine-5-blueprint-make-your-own-3d-platformer/",
      "bio": "Make a Platformer like Crash Bandicoot using Unreal Engine 5's powerful Blueprint scritping language!",
      "objectives": [
        "The fundamentals of creating a classic 3D Platformer within Unreal Engine 5",
        "Unreal Sound Tools and Unreal Engine 5 Niagara VFX tools for creating effects within a 3D Platformer",
        "Basics of Game Creation within Unreal Engine 5",
        "Solid blueprint scripting prinicples used within AAA development",
        "Scripting and Debugging practrices",
        "Basic Game Design Logic",
        "File Management Skills"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "How to use the Udemy Video Editor",
          "Play The Game!",
          "*New* How to get lesson support"
        ],
        "Unreal Fundamental": [
          "Editor Tour",
          "What is a Actor",
          "What is Blueprint",
          "What is a Variable",
          "What is a Component",
          "What is an Input Mapping Context",
          "What is a Material",
          "Debugging Fundimentals (Advanced)",
          "What are Event Dispachers (Advanced)",
          "What are Parent and Child Classes (Advanced)",
          "What is the Unreal Marketplace?",
          "Skill Check!"
        ],
        "Setup!": [
          "Project Overview",
          "Research and Breakdown",
          "Setting Up Project",
          "Importing Assets",
          "Creating a test level",
          "CatchUpDownload"
        ],
        "Character": [
          "Input Actions, GameMode and PlayerController.",
          "Character Blueprint Setup",
          "Character Movement",
          "Camera",
          "*New* Extending out of the Y Axis Solution",
          "Blendspace1D",
          "Animation Blueprint"
        ],
        "Hazards Part 1": [
          "Pitfalls",
          "Respawning The Player",
          "Finding a safe location",
          "AnimMontage",
          "Lives",
          "Game Over (UI)"
        ],
        "Pickups!": [
          "Creating a Pickup (Parent and Child Classes)",
          "UI + UI Animation",
          "Fonts",
          "Keeping The Counter Down When Collecting Multiple",
          "Bouncy Boxes",
          "Gaining Extra Lives!"
        ],
        "Hazard Part 2": [
          "Explosive Boxes",
          "Creating mutliple types of death",
          "Enemy Blueprint",
          "Artifical Intelligence",
          "Enemy Attacking The Player",
          "Enemy Animation (AnimBlueprint)",
          "Attacking The Enemy",
          "Making The Enemy Hit Other Enemies when hit."
        ],
        "Sound + VFX": [
          "Audio Import",
          "Footsteps",
          "Jump and Attack",
          "Crate Sounds",
          "UI Sounds",
          "Music",
          "Walking VFX!",
          "Double Jump"
        ],
        "Winning": [
          "End Platform",
          "End UI",
          "Saving Progress",
          "Level Select"
        ],
        "Level Creation": [
          "Foilage and Material Instancing",
          "Level Creation Timelapse"
        ]
      },
      "requirements": [
        "While a fundimentals section is providied any experence of game development is preferable.",
        "Computer powerful enough for Unreal Engine 5.3",
        "Computer Literacy"
      ],
      "description": "Updated for Unreal 5.4!\nEmbark on an exhilarating journey into game development with \"Unreal Engine 5 Blueprint: Create Your Own 3D Platformer,\" guided by Ian, a seasoned technical game designer dedicated to empowering learners like you. Over a span of 10 immersive hours, you'll delve into the intricacies of Unreal Engine 5, crafting a captivating 3D platformer reminiscent of the beloved classic, Crash Bandicoot.\nCourse Overview:\nBegin your adventure with a comprehensive exploration of Unreal Fundamentals, equipping yourself with essential skills to navigate the cutting-edge Unreal Engine 5 interface and core principles. Dive into Project Setup alongside Ian Bradley, ensuring a solid foundation for your game project and setting the stage for success.\nWhat You'll Learn:\nMaster the art of Character Creation through Blueprint visual scripting, breathing life into your hero with fluid movement, animations, and dynamic camera tracks.\nConquer the challenge of Creating Hazards, crafting obstacles and pitfalls that will test the skills of your players while ensuring seamless respawn mechanics.\nElevate your game world by Creating Pickups, and designing power-ups and collectables that captivate players and enrich their gaming experience.\nTake your platformer to new heights by mastering advanced techniques in Creating More Hazards and implementing Enemy AI, adding depth and strategic elements to your game.\nImmerse players in a sensory wonderland with Sound + VFX, incorporating captivating soundscapes and dazzling visual effects that elevate your 3D platformer to a polished prototype.\nPolish your platformer to perfection in the Completing the Game section, ensuring a seamless player experience from start to finish.\nWhy Learn from Us:\nIan Bradley, our esteemed instructor, brings a wealth of practical expertise and pedagogical experience to the table, ensuring you receive unparalleled guidance in game development. Join us in this transformative course and unlock your full potential in game creation.\nEnrol Today and Unleash Your Creativity:\nWhether you're a budding game developer or a seasoned enthusiast, \"Unreal Engine 5 Blueprint: Create Your Own 3D Platformer\" is your gateway to mastering the art of game design. Enroll now and embark on this exhilarating adventure with us!\n\n\nUnleash your creativity using Unreal Engine, known as the \"Best Game Engine\" by many as well as the Develop Industry Excellence Awards and Game Developer Magazine.\nPowerful and revered, Unreal Engine has played a pivotal role in crafting blockbuster games and iconic franchises, from the vibrant realms of Fortnite to the immersive narratives of BioShock and the gripping action of Gears of War. Its influence extends to a myriad of acclaimed titles, including Splinter Cell, Rainbow Six, Borderlands, Dishonored, Mass Effect, Batman: Arkham Asylum, and countless others.\nGone are the days when Unreal Engine was exclusive to large corporations – now, with the liberating Unreal Engine 5, the game-changer is accessible to all, offering its cutting-edge features for free. Dive into the future of game development, and when your creation soars beyond $1 million in sales, Epic Games merely asks for a 5% share, making your dreams of crafting exceptional games more achievable than ever.",
      "target_audience": [
        "Hobbyist Game Developers who want to learn from an active developer",
        "Professionals looking for portfolio content",
        "Those wishing to expand their Unreal Engine tool set.",
        "Beginners and Novices wanting move foward within their game dev journey"
      ]
    },
    {
      "already_crawled_in": "development/Data Science",
      "url": "https://www.udemy.com/course/genetical-algorithms-vp/"
    },
    {
      "title": "Build Your Multiplayer VR Game From Scratch With Fusion",
      "url": "https://www.udemy.com/course/build-your-multiplayer-vr-game-from-scratch-with-fusion/",
      "bio": "Learn the basics of Photon Fusion to build your own Multiplayer VR Game step by step in Unity!",
      "objectives": [
        "Multiplayer Virtual Reality Development",
        "Photon Fusion Basics",
        "Network Topologies",
        "Unity XR Toolkit Basics"
      ],
      "course_content": {
        "Discord": [
          "Discord"
        ],
        "Multiplayer VR Social Space Development with Unity and Photon Fusion": [
          "Social Space",
          "Installing Unity and Editor Fundamentals",
          "Setting Up Development Environment",
          "What is Photon Fusion?",
          "Fusion Network Topologies",
          "Setting Up Fusion",
          "What we Will Build in This Project",
          "Network Manager",
          "Network Runner Callbacks",
          "Spawner",
          "Creating Player",
          "Setting Input",
          "Getting Input",
          "Input System",
          "Intoduction to VR Development with Unity",
          "Configuring the Project for VR Development",
          "Importing Game Assets",
          "XR Rig Setup",
          "Local Avatar Implementation",
          "Movement in VR",
          "Building Project for VR",
          "Introduction to Multiplayer VR Development",
          "Network Manager",
          "Creating Networked VR Player",
          "Synchronizing VR Player Transform",
          "UI Interaction",
          "Voice Chat Implementation",
          "Setting Up Oculus Integration",
          "Oculus Integration UI Interaction",
          "Oculus Keyboard Overlay",
          "Joining Session with Key Code",
          "Source Code"
        ],
        "Multiplayer VR Game Development with Unity and Photon Fusion": [
          "Multiplayer Game",
          "Installing Unity",
          "Creating the Project",
          "What is Photon Fusion?",
          "Fusion Topologies",
          "Creating Photon Account & Dashboard",
          "Importing Fusion SDK",
          "Creating & Joining Session",
          "Network Player Data",
          "VR Setup",
          "VR Character Setup",
          "Testing in VR",
          "Network Character",
          "Spawning Characters",
          "Capturing Flag & StateAuthority",
          "Setting Up Game Scene",
          "Voice Chat",
          "IK Rig",
          "Source Code"
        ]
      },
      "requirements": [
        "Beginner/Intermediate Unity Experience",
        "Beginner/Intermediate C# Experience",
        "Having an Meta Quest VR Headset (Quest 2,Quest 3, Pro or Rift)",
        "Unity supported PC"
      ],
      "description": "Welcome to our advanced Multiplayer Virtual Reality Development course featuring the cutting-edge Photon Fusion Multiplayer solution!\nThe popularity of Multiplayer VR experiences is soaring daily!\nIn recent years, we've witnessed major Multiplayer VR successes like Gorilla Tag and Among Us VR, not to mention numerous other remarkable social VR experiences too numerous to list here!\nThus, crafting Multiplayer VR experiences has become increasingly vital, and arguably essential, for the triumph of your VR project!\nPhoton Fusion provides a potent and intuitive platform, empowering you to craft compelling multiplayer games on various platforms using Unity's capabilities. For game developers, proficiency in Photon Fusion is transformative. It not only enables the creation of the next multiplayer gaming sensation but also unlocks a plethora of career possibilities in the dynamic and expanding field of game development.\n\n\nThat is why we created this course to help you on your Multiplayer VR Development journey with Photon Fusion!\nIn this course, we build a core Multiplayer VR game from scratch step-by-step. First we will learn what is Photon Fusion, and the basics. Then we learn how to create a multiplayer session. When we understand the basics of Fusion, we will implement VR System in our project. After that we will develop our game mechanics.\n\nAt the end of the course, you will have a fully working Multiplayer VR game that you can build your own projects on top of!\n* Please note that this course has been tested exclusively with Meta Quest 2/3. Nonetheless, it should be compatible with Meta Quest Pro, Meta Quest 3, and Rift/Rift S without any problems.\n\n\nIRONHEAD Games is the leading game development course provider on Udemy with over 38,000 students around the world with our existing successful courses!\n\n\nSo, come and join us on this Multiplayer Game Development Journey!\n-IRONHEAD Games",
      "target_audience": [
        "Unity Developers who want to create Multiplayer Virtual Reality experiences"
      ]
    },
    {
      "title": "Procedural Characters in GameMaker 2",
      "url": "https://www.udemy.com/course/procedural-characters-in-gamemaker-2/",
      "bio": "The GML, art, and design of Procedural Characters in GameMaker Studio 2 - Skills can also be used for Character Creators",
      "objectives": [
        "Create beautiful procedural generated characters and give their players detailed character creators."
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Importing and Organizing Sprites",
          "Creating Sprite Variants",
          "Shading and Coloring",
          "Animating in Code"
        ]
      },
      "requirements": [
        "Beginner Photoshop",
        "Intermediate GameMaker Studio 2"
      ],
      "description": "The GameMaker 2 procedural character course will take you through the art, programming and design of procedural 2D characters in GameMaker studio 2. You will learn to develop characters with randomized body features, procedural color schemes and programmed animation. All of the skills developed in this course will also be directly applicable to things like customizable characters and character creators!",
      "target_audience": [
        "GameMaker 2 users interested in procedural characters and character creator systems."
      ]
    },
    {
      "title": "Let's Code the Only Save System Your Unity Games Will Need",
      "url": "https://www.udemy.com/course/sijil-unity-save-system/",
      "bio": "You only need One line of code to Save your Data, and I'm going to show you How",
      "objectives": [
        "Learn how to create your own, Super Generic, Save System",
        "Learn how to create a Save System for all your Games",
        "Learn the different ways you can save data in Unity",
        "Learn how to write Clean Code"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "The First Steps": [
          "Presentation",
          "Saving the Player Position",
          "Saving the Door State",
          "Saving Coins is Different",
          "GUIDs are life Savers"
        ],
        "Saving to a File": [
          "Writing & Reading data to a File",
          "Adding a GameData class",
          "Loading Using Our New Game Data",
          "Issue with Dictionnaries"
        ],
        "A New Way of Using JSON": [
          "A Better Free JSON Package",
          "Our New Game Data",
          "Saving Our New Generic Data",
          "Loading Our New Generic Data",
          "Loading More Stuff"
        ],
        "Extra Tests": [
          "Testing More Data Types"
        ],
        "Improvements": [
          "Bug with Arrays & Lists ?",
          "Wrapping data in a Generic Struct",
          "Reflection is Golden"
        ],
        "Bonus Section": [
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "The desire to learn !",
        "C# Basics",
        "If you've taken some of my courses, it's a plus ;)"
      ],
      "description": "After making that many courses, I’ve noticed that some aspects of game dev start repeating themselves.\nOne of these aspects is Saving !\n\n\nGenerally, for something really simple like saving the amount of coins, or saving the player name, I use the PlayerPrefs.\nIt’s not the best way of saving, but it’s Quick, and quite Reliable.\n\n\nFor more complex data structures, like the states of the world in my Hybrid Casual Course, I’ve Serialized my data into a separate file.\n\n\nThis was already way cleaner, and more manageable cause I was able to access and check my data really quickly.\n\n\nI started being bothered by saving data after making the Suika course, for the shop, I had to save the states of the skins.\nWas it purchased, or not yet. Once again, I fell back to using the PlayerPrefs.\n\n\nThat was enough, it was time to create something Better, something Simpler, something I could use and Reuse without rewriting the same lines of code everytime.\n\n\nLet me present you my new friend, SIJIL, a\n\n\nSleek\nIngenious\nJaw-dropping\nImpeccable\nLegendary\n\nSave System for all your Unity Games!\n\n\nAfter making SIJIL yourself, you will be able to Save your Data in 1 Line of Code.\nAfter making SIJIL yourself, you will be able to Load your Data in 2 Lines of Code.\n\n\nI invite you to watch the presentation video if you haven't already seen it, to better understand the power of this Save System.\n\n\nIf you've seen the video, the logical next step is to Enroll in the course.\nSo Let's start Learning together, and Save (No Pun Intended) a bunch of time !",
      "target_audience": [
        "Anyone who wants to create the Only Save System they will ever need"
      ]
    },
    {
      "title": "Make a 3D Portals clone in Unity® and Blender from scratch!",
      "url": "https://www.udemy.com/course/make-a-portals-clone-in-unity3d-and-blender-from-scratch/",
      "bio": "Learn to build a first person shooter game using portals in Unity®. Create the FPS game's art from scratch in Blender.",
      "objectives": [
        "Build a 3D game in Unity®.",
        "Code in C#.",
        "Use Blender and navigate its interface.",
        "Build 3D models in Blender.",
        "UV map and unwrap your models.",
        "Integrate the art from Blender into Unity®.",
        "Build video game levels.",
        "Create your own materials.",
        "Learn the basics of animation."
      ],
      "course_content": {
        "Let's Make Some Games": [
          "Download Blender and Unity",
          "Gameplay!"
        ],
        "Source Code (Files)": [
          "Source Code (Resources)"
        ],
        "01G. Introduction to Unity": [
          "1. Downloading Unity",
          "2. Unity Editor",
          "3. Hello World",
          "4. Variables",
          "5. Methods",
          "6. Loops",
          "7. Positioning"
        ],
        "02G. First Person, Boxes": [
          "1. Enabling First Person Mode",
          "2. Adding a Box",
          "3. Clicking Logic",
          "4. Raycasts",
          "5. Grabbing Class",
          "6. Moving the Box",
          "7. Adjustments and Prefabs"
        ],
        "03G. Buttons and Doors": [
          "1. Designing a Button",
          "2. Trigger Colliders",
          "3. Pressure Identification",
          "4. Button Animation",
          "5. Button Color",
          "6. Designing the Door",
          "7. Opening the Door",
          "8. Connecting the Button and the Door",
          "9. Orb"
        ],
        "04G. Portals": [
          "1. Portal Areas",
          "2. Getting the Hit Points",
          "3. Spawning Portals",
          "4. Normals",
          "5. Teleporting",
          "6. Adjusting Teleporting Angles",
          "7. Portal Rendering"
        ],
        "05G. Interface and level management": [
          "1. Game Interface",
          "2. Menu Scene",
          "3. Starting Level 2",
          "4. Finishing Level 2",
          "5. Level Flow"
        ],
        "Introduction to Blender": [
          "Introduction to Blender"
        ],
        "Art Assets (Files)": [
          "Art Assets (Resources)"
        ],
        "06K. Portal Gun": [
          "1. Gun",
          "2. Gun Unwrap",
          "3. Portal Gun Base Colors",
          "4. Portal Gun UV Saving",
          "5. Portal Gun Texturing",
          "6. Gun Texturing Continued"
        ]
      },
      "requirements": [
        "Programs Blender, Unity, Photoshop, Crazy Bump & Gimp",
        "This course was recorded on a Mac computer, but you can use a PC."
      ],
      "description": "In this course, you learn how to build a game using portals with Unity® and Blender. This course is unique because we make both the code and the art for the game from scratch. We teach you the fundamentals of designing, coding, and modeling a 3D game. ⭐ ⭐ ⭐ ⭐ ⭐\n\nFirst you design the game and its functionality in Unity®. You learn how to code in C# and build video game levels. Don't worry if you've never coded before. We start simple and add more to the game as the course goes on.\nWhy Unity®?\nUnity® is one of the most popular platforms in game development. You can use Unity® to build 2D and 3D games. Unity® is cross-platform, which means it is easy to use with other platforms.\nThen you create the 3D models for the game in Blender. You build all the art assets for the game. You learn how to integrate your art from Blender into Unity®.\nWhy Blender?\nBlender, like Unity®, is a popular production suite that is free to download. Blender is a revolutionary tool for making 3D art digitally. With Blender, you can make art assets for games, like we do in this course.\n\nEven if you're not an artist, you can make basic art models. You may have heard of Axiom Verge and Stardew Valley. These games are million-dollar successes. But did you know that only one person made each?\nUsually it takes a whole team of people to build a game. But creators Thomas Happ and Eric Barone developed and designed their games by themselves. Now they're millionaires. You can do it, too.\nLet's get started!",
      "target_audience": [
        "Anyone who wants to learn Unity® or Blender.",
        "Anyone who wants to learn game development.",
        "This course assumes you know a little about Unity® and Blender"
      ]
    },
    {
      "title": "Learn To Create a Complete Save System in Unity & C#",
      "url": "https://www.udemy.com/course/unity-save-system/",
      "bio": "Game development made easy. Learn to create an versatile & easy-to-use Save System for your games!",
      "objectives": [
        "Learn C#, a modern versatile programming language",
        "Understand the capabilities of development in Unity",
        "Develop strong and transferrable problem solving skills",
        "Gain an understanding of the game development process",
        "Learn how object oriented programming works in practice"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Project Assets"
        ],
        "Getting Started": [
          "Setting Up The Project",
          "Discussing The Save Systems We Will Cover"
        ],
        "Player Prefs": [
          "What Are Player Prefs?",
          "Making Player Prefs Work",
          "Issues With Loading Player Prefs",
          "Deleting Save Data"
        ],
        "Using Player Prefs In A Game": [
          "Previewing The Platformer",
          "Saving Coins",
          "Deleting Our Save",
          "Unlocking Levels",
          "Player Prefs Summary"
        ],
        "Building A Custom Save System": [
          "Why Build A Save System?",
          "Saving Data",
          "Opening Save Location",
          "Loading Data",
          "Allowing For Loading Issues",
          "Deleting The Save",
          "Saving More Data Types"
        ],
        "Using The Save System In A Game": [
          "Previewing The Dungeon Battler",
          "Creating The Save System",
          "Tracking Player Data Between Scenes",
          "Saving & Loading Data",
          "Tracking The Weapon",
          "Continuing The Game",
          "Continuing After Completing",
          "Showing And Hiding The Continue Button",
          "Resetting Stats For A New Game",
          "Bringing The Save System To Other Scenes",
          "Using A Custom Save Name"
        ],
        "Using Binary Formatter": [
          "Hiding And Obscuring Save Data From Players",
          "Setting Up A Binary Formatter Save System"
        ],
        "Course Complete": [
          "Next Steps"
        ],
        "Complete Project Files": [
          "Complete Project Files"
        ]
      },
      "requirements": [
        "Mac or PC capable of running Unity 3D",
        "A copy of Unity 2021.3 or newer"
      ],
      "description": "Learn how to create and program your very own saving systems using Unity, an industry-standard game development program used by large gaming studios and indie developers across the world.\nIn this course you won’t just be learning programming concepts, but tying these concepts to real game development uses. We will cover different examples & methods of saving data in your game, while also providing practical examples of putting these systems into use. You will have access to a course forum where you can discuss the topics covered in the course as well as the next steps to take once the course is complete.\nThis course has been designed to be easily understandable to everyone, so whether you’re a complete beginner, an artist looking to expand their game development range or a programmer interested in understanding game design, this course will help you gain a greater understanding of development.\nAt the end of this course you will have developed the ability to understand such game elements as:\nBenefits and drawbacks of the Player Prefs saving system\nSaving Data with XML Serialization\nSaving Data through BinaryFormatter\nBuilding & Implementing Custom Save Data\nManaging Save Files\nIntegrating save systems into different game types\nObscuring Save Data from Players\nand more...\nThe course also includes a complete version of the project to use for your own reference to ensure everything in your game works as it should!\n\n\nStart learning today and let me help you become a game developer!",
      "target_audience": [
        "Anyone who wants to learn about saving in their games",
        "People who want to create and publish their own games",
        "Complete beginners with an interest in learning game development",
        "Developers who want to re-skill across to game development",
        "People interested in working in the game design industry",
        "Competent and confident with using a computer"
      ]
    },
    {
      "title": "Shader Forge for Unity 3D Volume 2",
      "url": "https://www.udemy.com/course/shader-forge-for-unity-3d-volume-2/",
      "bio": "Dive deeper into the world of shaders and learn how to create more advanced lighting and shading effects.",
      "objectives": [
        "Create your own Custom Translucency Shaders",
        "Understand how to create Refraction effects",
        "Create your own UV Distortion and refraction effects"
      ],
      "course_content": {
        "Introduction": [
          "Shader Forge Volume 2 Intro"
        ],
        "Lighting Models": [
          "Creating Translucency",
          "Creating the Matcap Effect",
          "Creating Glass and Refraction",
          "Alpha Clipping and a Dissolve Effect",
          "Alpha Clipping and a Dissolve Effect Cont'd"
        ],
        "UV and Texture Tricks": [
          "UVs and Their Role in Shaders",
          "UVs and Their Role in Shaders Cont'd",
          "UV Distortion",
          "UV Techniques Continued",
          "Creating a Specular map from our Diffuse Part 1",
          "Creating a Specular map from our Diffuse Part 2"
        ],
        "Wrap up!": [
          "Conclusion"
        ]
      },
      "requirements": [
        "Copy of Unity 3D - Free or Pro",
        "Copy of Shader Forge for Unity 3D",
        "Understand the basics of Creating Unity Materials",
        "Understand the basics of using Shader Forge"
      ],
      "description": "Shader Forge Volume 2 picks up where we left off in the Getting Cozy with Shader Forge course, and begins to extend and expand your shader construction knowledge with Shader Forge. In this course we dive deeper into the knowledge of the different nodes, available in Shader Forge, and gives you a better understanding of just how some more advanced shader techniques are accomplished.\nThroughout this course we will learn how to do effects such as Refraction, the ins and outs of uv's, and how to create FX such as a peel away dissolve, seen in many of todays games. By the end of this course you will have created a Glass shader, a Matcap shader, and a translucency shader as well as learned some tips and tricks of shader construction.",
      "target_audience": [
        "If you already have experience in Unity 3D and Shader Forge, and want to learn more about more advanced shader techniques, then this course is for you!",
        "If you know how to write shaders, but want to know how to quickly prototype shaders with Shader Forge, this course will walk you through the process of creating some core shader techniques using a visual node based tool called Shader Forge."
      ]
    },
    {
      "title": "Mastering Movement - Unreal Engine 5",
      "url": "https://www.udemy.com/course/mastering-movement-unreal-engine-5/",
      "bio": "Advanced Locomotion Techniques in Gaming",
      "objectives": [
        "Students will develop a comprehensive understanding of various gaits used in character animation, including walking, running, jumping, and more.",
        "Students will gain practical experience in implementing different gaits effectively to enhance character movement in gaming environments.",
        "Students will learn advanced techniques for initiating and concluding character movements seamlessly.",
        "Students will explore advanced techniques such as input pivoting, foot sync modifiers, and character rotation updates."
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Folder Structure",
          "Populating Previous Folders"
        ],
        "Component Use": [
          "Initialize Component",
          "Character Movement Override",
          "Finalize Component & Create Animation Blueprint Variables"
        ],
        "Animation Blueprint": [
          "Utilizing Variables",
          "Input Gait",
          "Finding Rotation Angle",
          "Update Gait",
          "Curve Rotation Calculation"
        ],
        "Importing Custom Animations": [
          "Animation Import",
          "Animation Import - Unreal Engine 5.3 (Additional Curve Adjustments)"
        ],
        "State Transitions": [
          "Idle & Stop State",
          "Start Transitions",
          "Stop Transitions & Adjustments"
        ],
        "Finale": [
          "Bug Fixes & Adjustments",
          "Jump State Finale"
        ]
      },
      "requirements": [
        "Basic Understanding of Game Development: Students should have a foundational knowledge of game development concepts and terminology, including character animation principles and basic scripting.",
        "Familiarity with Unreal Engine 5"
      ],
      "description": "In this comprehensive course, we'll delve deep into the nuanced art of character movement, covering a wide array of advanced techniques designed to elevate your gaming projects to new heights of realism and immersion.\nLed by an industry veteran with over 5 years of experience in game development, you'll benefit from insider insights and proven strategies honed through years of hands-on experience. We'll kick things off by exploring the fundamentals of locomotion, from understanding different gaits to mastering the subtleties of start and stop transitions.\nBut we won't stop there. Throughout the course, you'll learn how to implement advanced techniques such as input pivoting, foot sync modifiers, and character rotation updates, allowing you to create characters that move with unparalleled fluidity and grace.\nEach module is carefully crafted to provide a balance of theoretical knowledge and practical application, ensuring that you not only understand the concepts but can also confidently apply them in your own projects. Whether you're a seasoned developer looking to sharpen your skills or an enthusiast eager to explore the cutting edge of character animation, this course has something for you.\nBy the end of the course, you'll emerge with a deep understanding of advanced locomotion techniques and the skills needed to breathe life into your characters like never before. So why wait? Enroll now and join us on this exciting journey to mastering movement in gaming",
      "target_audience": [
        "This course is designed for aspiring game developers, animators, and enthusiasts who are looking to take their character animation skills to the next level."
      ]
    },
    {
      "title": "Unity Game Development: Beginner to Pro",
      "url": "https://www.udemy.com/course/unity-game-development-beginner-to-pro/",
      "bio": "Learn to Create Games with Unity & C#",
      "objectives": [
        "Learn fundamentals of Unity with C#",
        "Understand the basics of C# with Unity",
        "Learn to create a Game Design with Unity UI",
        "Apply game logic in 2D, 3D games",
        "Create and apply 2D, 3D Animations in a game",
        "Create a playable 3D game in Unity"
      ],
      "course_content": {
        "Introduction to Unity & Installation": [
          "Introduction to Unity & installation",
          "Quiz 1"
        ],
        "Unity Project creation , Visual studio & C# script creation": [
          "Create a 3D project in Unity",
          "Quiz 2",
          "Configure Visual Studio with Unity",
          "Quiz 3",
          "Create your first C# script in Unity",
          "Quiz 4",
          "Understanding the structure of a C# script in Unity - Part 1",
          "Quiz 5",
          "Understanding the structure of a C# script in Unity - Part 2",
          "Quiz 6",
          "Print 'Hello code' in Unity console",
          "Quiz 7"
        ],
        "Data types & Variables in Unity C#": [
          "Data types & Variables in Unity C#"
        ],
        "Operators in Unity C#": [
          "Introduction to Operators in Unity C#",
          "Arithmetic Operators",
          "Quiz 8",
          "Relational Operators",
          "Quiz 9",
          "Logical Operators",
          "Quiz 10",
          "Conditional Operators",
          "Quiz 11"
        ],
        "Control Flow Statements in Unity C#": [
          "Introduction to Control Flow Statements in Unity C#",
          "Decision making statements - if statement",
          "Quiz 12",
          "Decision making statements - if-else statement",
          "Quiz 13",
          "Decision making statements - if-else-if statement",
          "Quiz 14",
          "Switch-Case statements",
          "Quiz 15",
          "Looping statements",
          "Quiz 16"
        ],
        "Collections in Unity C#": [
          "Introduction to Collections",
          "Quiz 17",
          "List in Unity C#",
          "Sorted List in Unity C#",
          "Dictionary in Unity C#",
          "Arraylist in Unity C#",
          "Hashtable in Unity C#",
          "Stack in Unity C#"
        ],
        "UI in Unity": [
          "UI Canvas in Unity",
          "Quiz 18",
          "UI Text in Unity",
          "Quiz 19",
          "UI Image in Unity",
          "UI Button in Unity",
          "UI ScrollView in Unity - Part 1",
          "UI ScrollView in Unity - Part 2",
          "UI SrollView in Unity - Part 3",
          "UI InputField in Unity - Part 1",
          "UI InputField in Unity - Part 2",
          "UI Slider in Unity - Part 1",
          "UI Slider in Unity - Part 2",
          "Anchoring of UI Components in Unity"
        ],
        "Event Functions & Custom Functions in Unity": [
          "Introduction to Event Functions in Unity",
          "Understanding Event Functions within a C# script",
          "Introduction to Custom Functions in Unity",
          "Write a basic function in Unity",
          "Write a function with return type in Unity",
          "Write a function with parameters in Unity"
        ],
        "Delegates & Events in Unity": [
          "Introduction to Delegates in Unity",
          "Create a Single-cast Delegate in Unity",
          "Create a Multi-cast Delegate in Unity",
          "Introduction to Delegate-Events in Unity",
          "Move an image to left and right using Delegate-Events in Unity"
        ],
        "Unity Input System": [
          "Introduction to Input system in Unity",
          "Keyboard Inputs in Unity",
          "Mouse Inputs in Unity",
          "Axis Inputs in Unity"
        ]
      },
      "requirements": [
        "No prior knowledge in Unity needed. You will learn everything you need to know to develop a game in Unity"
      ],
      "description": "Unity Game Development: Beginner to Pro course as the name suggests caters to the students or professionals keen on learning Game Development with or without any prior experience and knowledge on the subject. The course is designed in such a way that any student could easily learn to create a game at the end of the course.\nHere is the outline of the course 'Unity Game Development: Beginner to Pro' :\nIntroduction to the course.\nIntroduction to Unity & installation\nConfigure Visual studio with Unity.\nCreate a C# script & understand the structure of the script\nPrint 'Hello World' in the Unity console\nOperators, Data types & variables in C#\nArithmetic operator\nRelational operator\nLogical operator\nConditional operator\nControl flow statements\nDecision making statements\nSwitch statements\nLooping statements\nCollections in C#\nList\nSorted List\nDictionary\nQueue\nArraylist\nHashtable\nStack\nIntroduction to UI in Unity\nCanvas\nText\nImage\nButton\nScrollView\nInputField\nSlider\nAnchor\nIntroduction to Unity Events\nEvent functions\nCustom functions\nDelegates in Unity\nSingle - cast delegate\nMulti - cast delegate\nDelegate Events\nIntroduction to Unity Input system\nKeyboard Inputs\nMouse Inputs\nAxis Inputs\nRigidbody & Collisions\nIntroduction to Rigidbody\nApplying Rigidbody to the GameObject\nCreating a floor in the game\nMove a Sphere gameobject using Rigidbody and Inputs\nIntroduction to Colliders & collisions\nCreate a scene to detect collisions - 1\nCreate a scene to detect collisions - 2\nAnimations in Unity\nIntroduction to Animations\n2D Sprite Animation - part 1\n2D Sprite Animation - part 2\n2D Sprite Animation - part 3\n2D Sprite Animation - part 4\nAnimating a 3D character - part 1\nAnimating a 3D character - part 2\nAnimating a 3D character - part 3\nCreate a 3D game 'Knock the Cans'\nGame creation - Level Designing\nGame creation - Applying Logic to knock the can\nGame creation - Applying Logic to knock the can\nGame creation - Prefab creation & Instantiation\nGame creation - Create a win or lose system in the game",
      "target_audience": [
        "Students & working professionals keen on learning Game development with Unity"
      ]
    },
    {
      "title": "50 Days of Becoming a Pro Game Programmer in C++ using SDL2",
      "url": "https://www.udemy.com/course/50-days-of-becoming-a-pro-game-programmer-in-c-using-sdl2/",
      "bio": "Learn the Most Powerful C++ Gaming Library and Make Pro Level Games in Just 50 Days of Professional Guide",
      "objectives": [
        "Game Development from Zero to Pro in Just 50 Days with 25 Assignments",
        "Make Professional Level Games in C++",
        "Learn the blueprint to kind of making any type of Game",
        "Learn the Most powerful C++ Gaming Library of C++"
      ],
      "course_content": {
        "Day 1 : Setting up C++ and SDL2": [
          "Introduction"
        ],
        "Day 2 : SDL Initialization and Gaming Window": [
          "SDL Initialization",
          "Window Creation",
          "Delaying Window Display",
          "Ensuring Window Display : Window Creation Error Checking",
          "Destroying Window",
          "Different Windows Properties"
        ],
        "Day 3 : SDL Renderer - Rendering in SDL2": [
          "Creating a Renderer",
          "Changing Background Color via Renderer",
          "SDL Render Clear and SDL Render Present",
          "Destroying Renderer"
        ],
        "Day 4 : Rendering Graphical Content": [
          "Drawing Different Shapes via Renderer Part - 1",
          "Drawing Different Shapes via Renderer Part - 2"
        ],
        "Day 5 : Assignments": [
          "Assignment - 1",
          "Assignment - 2"
        ],
        "Day 6 : SDL Textures Part - 1": [
          "Adding the SDL Image Library",
          "Introduction to SDL Textures",
          "Displaying Textures onto the Screen",
          "Distination Location of Texture",
          "Supporting Different Format Image Files",
          "Destroying Textures",
          "Supporting Bit Map Image Files"
        ],
        "Day 7 : SDL Textures Part - 2": [
          "SDL Poll Close Window Event",
          "Drawing Different Textures on SDL Window",
          "Setting or Changing Background Image",
          "Using Arrays to Put Images on SDL Window"
        ],
        "Day 8 : Assignment": [
          "Assignment"
        ],
        "Day 9 : Objects Movement": [
          "Understanding the Coordinate System",
          "Game Loop",
          "Moving Rectangle on SDL Window",
          "Ball Movement in all Directions"
        ],
        "Day 10 : Assignments": [
          "Assignment"
        ]
      },
      "requirements": [
        "Basic of Any Programming Language is Required"
      ],
      "description": "Do you want to build professional-level games using C++, the world's fastest and most powerful language?\nWelcome to the \"50 Days of Professional Game Development with SDL2\" — a step-by-step guide that will transform beginners into confident and skilled C++ game developers using SDL2 (Simple DirectMedia Layer) — one of the most powerful and widely used game development libraries.\n\n\nIn this course, we will begin by introducing SDL2, and with each passing day, we will move on to cover more and more advanced-level topics of SDL2. After covering each concept, you will be given an assignment specifically tailored to that topic, so you can get more hands-on practice.\n\n\nIn just 50 days, you will go from understanding basic graphics and window creation to building full-fledged professional games.\nSDL2 is the industry-standard C++ library used in:\nIndie game development\nGame engines (like Unity and Unreal under the hood)\nEmulators\nHigh-performance desktop and embedded systems\nThis is not just theory. Every day of this course focuses on hands-on, practical development with mini-projects, assignments, and real-world implementations.\nTo reinforce your understanding, we’ve included:\nChallenges to test your learning\nWeekly assignments focused on building components from scratch (e.g., collision detection, text animation)\nMini projects combining multiple SDL2 features\nFinal Game Assignments – where you’ll build and showcase your very own game!\nYou’ll also get hints, solutions, and community support along the way.\nWhat Will You Achieve?\n\n\nBy the end of this 50-day course, you will:\nUnderstand how SDL2 works under the hood\nBe able to create games entirely in C++\nHandle audio, fonts, inputs, rendering, and animations\nKnow how to manage collision detection and physics\nBe confident in managing object states, levels, scoring, and menus\nHave your own collection of playable games\nBe ready to start your own indie game or join a development team\nLet's Get Started!\nTake the leap, stay consistent for 50 days, and become a professional game developer using SDL2 and C++.\nLet’s code, create, and play!",
      "target_audience": [
        "Anyone who want to Learn Game Development from Zero to Pro in Just 50 Days with 25 Assignments",
        "Anyone who want to make Professional Level Games in C++",
        "Anyone who want the blueprint to kind of making any type of Game",
        "Anyone who wants to learn the most powerful C++ Gaming Library"
      ]
    },
    {
      "title": "Unity 3d Game Development - iOS, Android, & Web - Beginners",
      "url": "https://www.udemy.com/course/unity-3d-game-development-ios-android-web-beginners/",
      "bio": "Want to get into making high quality games, but don't know where to start? This series is a perfect choice for you.",
      "objectives": [],
      "course_content": {
        "Unity 3d - The Bare Basics": [
          "Downloading Unity & Course Introduction",
          "2 Project Setup and Unity basics",
          "3 Basics of Unity Scene Navigation",
          "Gravity With Rigidbody",
          "Unity Programming Via Java Script"
        ],
        "Creating Brick Breaker": [
          "6 Creating A Menu Scene",
          "7 Simple Menu Script",
          "7-source",
          "8 Box Colliders And Build Settings",
          "9 Creating Brick Breaker",
          "10 Ray , Hits , And Paddles",
          "10-source",
          "11 Physics Settings Parameters",
          "12 Gui Text , Collisions , And Scores",
          "12-source",
          "13 Prefabs In Unity 3d",
          "14 Game Over",
          "15 Player Prefs ( Storing Data )"
        ]
      },
      "requirements": [],
      "description": "In this series we will learn how to create a variety of different games for web, iOS, and android.  We will learn the basic concepts of game development and learn about game programming using unity.",
      "target_audience": []
    },
    {
      "title": "Distributing Electron Applications",
      "url": "https://www.udemy.com/course/distributing-electron-applications/",
      "bio": "Effectively package and distribute Electron applications",
      "objectives": [
        "Explore how Electron packaging tools work under the hood",
        "Prepare your Electron application for application store submissions",
        "Code-sign your Electron application to ensure integrity",
        "Automate your deployments using continuous integration services",
        "Configure Travis CI and Appveyor CI to automatically build and deploy Electron applications"
      ],
      "course_content": {
        "How Electron Applications are Packaged": [
          "The Course Overview",
          "Basics of Packaging",
          "Where to Publish?",
          "Managing Electron Native Modules",
          "Introduction to electron-builder",
          "How Electron Applications are Packaged"
        ],
        "GNU/Linux": [
          "Building Debian Packages",
          "Building RPM Packages",
          "Building AppImages",
          "Building Snap Packages",
          "Configure GNU/Linux Builds on Travis CI",
          "GNU/Linux"
        ],
        "macOS": [
          "Building DMG Archives",
          "Building PKG Packages",
          "Code Signing",
          "Building Mac App Store Packages",
          "Configure macOS Builds on Travis CI",
          "macOS"
        ],
        "Windows": [
          "Building NSIS Installers",
          "Building Portable Packages",
          "Code Signing",
          "Building AppX Packages",
          "Configure Windows Builds on Appveyor CI",
          "Windows"
        ],
        "Auto Updates": [
          "Setup Auto Updates for macOS",
          "Setup Auto Updates for Windows",
          "Setup Auto Updates for AppImages",
          "Auto Updates"
        ],
        "Tips and Tricks": [
          "Compressing Binaries/Libraries with UPX",
          "Reproducible Builds with NPM Shrinkwrap",
          "Minify and Concatenate JavaScript",
          "Packaging Web Applications in a Desktop Shell",
          "Tips & Tricks"
        ]
      },
      "requirements": [
        "Prior experience of Electron development is essential for this course."
      ],
      "description": "Electron is a popular open source framework that allows you to build desktop applications using the skills you already possess as a front-end developer.\nIn this course, we'll go through detailed discussions on how to properly package, sign, and distribute Electron applications. We'll start by quickly explaining how Electron applications are packaged under the hood, and armed with that knowledge, we'll cover every single major operating system in detail by using tools that automate the whole process.\nDesktop application deployment is not a trivial task, and you might feel lost coming from a web development background. This course will help you navigate the sea of desktop application distribution by teaching you best practices, answering common concerns, and explaining in detail how to delegate application packaging and deployment to continuous integration services, so you can deploy a version of your application to all operating systems with a single command\nAbout the Author :\n\nJuan Cruz Viotti is a software engineering team lead at resin .io. He is an active member of the open source community, and is the maintainer of several open source projects, most notably Etcher, a cross platform image writer desktop application focused on IoT.\nJuan Cruz approaches software engineering with a focus on testability, and maintainability, and has extensive experience with web technologies on browser, server, mobile, desktop, and embedded applications.",
      "target_audience": [
        "This course was made for Electron developers who are looking to distribute their Electron applications."
      ]
    },
    {
      "title": "Learn Marmoset Toolbag",
      "url": "https://www.udemy.com/course/learn-marmoset-toolbag/",
      "bio": "Learn the basic techniques of Marmoset Toolbag",
      "objectives": [
        "Learn the basics of Marmoset Toolbag",
        "Adding material to the model",
        "Adding and organizing models"
      ],
      "course_content": {
        "Getting Started": [
          "Introduction",
          "Course files",
          "Toolbag Interface",
          "Add and organize material models",
          "Saving scenes"
        ],
        "Toolbag and PBR": [
          "PBR",
          "Metal and non-metal surfaces",
          "Reflectivity",
          "Microsurface settings"
        ],
        "Shaders and Materials": [
          "Skylight images",
          "Create a new scene and add light",
          "Textures available in Toolbag",
          "Normal maps",
          "Transparency settings and preset materials",
          "Cameras and lighting"
        ],
        "Rendering": [
          "Render settings",
          "Rendering with the Turntable",
          "Final renders"
        ]
      },
      "requirements": [
        "basic knowledge of Game development"
      ],
      "description": "Marmoset Toolbag is a full-featured, real-time rendering toolkit and look-dev suite bundled in an easy-to-use package. This straightforward and robust software offers digital artists the ability to see their 3D models in real time. Marmoset Toolbag works seamlessly with other procedural-based software used by professional game and media developers, such as Substance Painter, Quixel, MARI, and 3D-Coat.\n\nIn this course you'll get an overview of Marmoset Toolbag where we'll take a tour of the various menu items and interface of the program. We'll cover the basic techniques in Toolbag, such as how to import models and maps. You'll learn how the various map types Toolbag can use, such as gloss, normal, and albedo maps, affect the materials created in the program.\nWe'll then walk you through how to save presets for post effects, materials, and scenes.  And then we'll show you how to render when finished.",
      "target_audience": [
        "Game developers"
      ]
    },
    {
      "title": "Unity Zombie Tower Defence Game",
      "url": "https://www.udemy.com/course/unity-zombie-tower-defence-game/",
      "bio": "Professional game design",
      "objectives": [
        "Create a zombie tower defence game",
        "Add the ability to switch between first person and overhead modes",
        "Create swarms of zombies who interact with placed objects",
        "Setup multiple weapons and different damage patterns",
        "Create code for a snapping placement system in real time",
        "Complete a Unity game from beginning to end",
        "Master your knowledge of C# scripting to an intermediate level"
      ],
      "course_content": {},
      "requirements": [
        "A basic understanding of Unity C# will help you complete this course",
        "A computer capable of running Unity 2021"
      ],
      "description": "Tower defence games are continuing to gain in popularity online. In this course I am going to show you how to create your own zombie tower defence game.\nWhen I was creating this course I was initially thinking, should it be an overhead tower defence style game, or should it be a first person shooter style game. Well, when you have two great ideas, why not combine them. So this is a Hybrid of both overhead point and click as well as first person shooter.\nThe techniques covered in this course can be used to make any type of defence style games. Think of this as a template that you can use again and again and you can customise the game any way you like to realise your vision.\nSo what is covered in the course:\n\n\nWe develop a system for placing props into the level, with the ability to change items using an easy to create User Interface\nItems can be placed freehand, or by pressing the spacebar, can be made to snap together either horizontally or vertically\nEach item will have different purposes. Some will simply block the zombies, some will damage the zombies, some will blow them up, and in the case of the gun turrets, these will target and shoot the zombies\nOnce you have laid out your items the zombies will then begin spawning into the scene and you will enter into first person mode\nYou can change between overhead and first person modes to quickly navigate the map\nWe will setup a range of weapon types, ammo amounts and damage styles for each weapon, including sniper scope for the sniper rifle\nYou will have access to six zombies that I created for this course. You can use them in any of your other games too\nThe objective is to defend the tower. You must kill all the zombies on each level to unlock the next level\nThis course can be taken by anyone using the free Unity game engine. A basic understanding of C# code is suggested for you to make the most of this course. By the end of the course you will have another completed game in your portfolio. You will have developed your skills to an intermediate level and be ready to make your own Unity games.\nSo why not enroll today, and I look forward to seeing you in my course.\nThanks to the artists from Sketchfab for their 3D models used in this course",
      "target_audience": [
        "Anyone who wants to learn how to make great games in Unity",
        "Learners wanting to develop their C# coding skills upto an intermediate level",
        "Designers looking for a great tower defence game template"
      ]
    },
    {
      "title": "Beginner to Master Verse Programming for UEFN",
      "url": "https://www.udemy.com/course/beginner-to-master-verse-programming-for-uefn/",
      "bio": "Learn Verse programming for Unreal Editor for Fortnite (UEFN) and create amazing games!",
      "objectives": [
        "The fundamentals of Verse programming, data types and data containers.",
        "How to build real-world projects using Verse and apply programming concepts practically.",
        "How to think like a programmer and approach challenges systematically.",
        "Essential problem-solving skills for programming, including debugging, researching, and trial-and-error techniques.",
        "The ability to identify and resolve issues or bugs confidently during development."
      ],
      "course_content": {},
      "requirements": [
        "No prior programming experience is needed—this course is designed for absolute beginners.",
        "A computer capable of running Unreal Editor for Fortnite (UEFN).",
        "A basic understanding of how Fortnite Creative works (helpful but not required).",
        "A willingness to learn, experiment, and problem-solve.",
        "Enthusiasm to create and bring your game ideas to life!"
      ],
      "description": "Do you dream of creating amazing Fortnite Creative experiences but feel overwhelmed by Verse programming? This course is designed to change that! Whether you’re a complete beginner, have dabbled in Verse, or have experience in other programming languages, this course will equip you with the skills to bring your creative game ideas to life—and maybe even turn your creativity into a source of income.\nWe’ll start from the basics, covering essential programming concepts such as data types, if-else statements, loops, arrays, and maps. But it’s not just about learning theory—you’ll apply these concepts to real-world projects. By the end of this course, you’ll have completed multiple projects you can publish and share with the world.\nThis course also focuses on the most critical skills for programmers: problem-solving, research, and trial and error. I’ll take you through my entire problem-solving process, teaching you how to debug and resolve issues step-by-step. You’ll gain the confidence to tackle challenges head-on and improve through hands-on practice.\nWhat’s this course not about? It’s not an advanced course for seasoned professionals, nor does it cover artistic building techniques or in-depth UEFN design. Instead, it’s a beginner-friendly journey that takes you from no coding experience to confident level of proficiency in Verse programming.\nIf you’re ready to turn your creative ideas into reality, click enroll, and let’s get started. I can’t wait to see the incredible games you create. Join me inside the course today!",
      "target_audience": [
        "Absolute Beginners: If you’ve never written a single line of code, this course is the perfect starting point.",
        "Aspiring Fortnite Creators: Ideal for those who want to bring their ideas to life in Fortnite Creative using Verse programming.",
        "Intermediate Learners: If you’ve dabbled in Verse programming and want to deepen your knowledge, this course will help you level up your skills."
      ]
    },
    {
      "title": "Unity: How To Create An In-Game Store",
      "url": "https://www.udemy.com/course/unity-how-to-create-an-in-game-store/",
      "bio": "Learn how to create a in-game store manager where users can buy various items with in-game currency",
      "objectives": [
        "How to build an in-game store which can be used to allow users to buy and equip different items within their game",
        "How to utilize the Unity3D UI System to make an in-game store incredibly interactive for users",
        "How to access data from various scenes",
        "How to transition through different scenes with fades",
        "How to animate a decrease in coins (in-game currency)",
        "How to create pop-ups"
      ],
      "course_content": {
        "Introduction": [
          "Welcome and Thank You"
        ],
        "Scene Setups": [
          "Import Assets and Organize Them",
          "Setup Main Menu Scene",
          "Setup Store Scene Pt.1",
          "Setup Store Scene Pt.2",
          "Setup Store Scene Pt.3",
          "Setup Game Scene"
        ],
        "Coin Management and Scene Transitions": [
          "Game Manager Script",
          "Coin Management",
          "Scene Transition Animation Setup",
          "Scene Transition Animation",
          "Scene Transition Animation Script",
          "Connect All The Scenes"
        ],
        "Setup Store Items": [
          "Create Store Item Prefabs",
          "Setup Store Items Array",
          "Setup Store Items Settings"
        ],
        "Implement Store": [
          "Card Panels Pt.1",
          "Card Panels Pt.2",
          "Store Item Purchase Setup Pt.1",
          "Store Item Purchase Setup Pt.2",
          "Store Item Equipped Animation",
          "Store Item Equipped Script",
          "Coin Animation",
          "Implement Store Items In Game"
        ]
      },
      "requirements": [
        "PC or Macbook which can run the latest version of Unity3D",
        "Basic understanding of the C# programming language",
        "Basic understanding of the Unity3D Game Engine",
        "Unity 2017"
      ],
      "description": "**THIS COURSE IS NOT FOR COMPLETE BEGINNERS. YOU SHOULD HAVE A BASIC TO DECENT UNDERSTANDING OF THE UNITY3D GAME ENGINE AND THE C# PROGRAMMING LANGUAGE**\n**FINALLY LEARN THE SKILLS TO BE ABLE TO CREATE AN IN-GAME STORE WHERE USERS CAN BUY VARIOUS ITEMS WHILE BEING ABLE TO SELECT WHICH ITEM THEY WANT TO USE IN A GAME!**\nIn most games nowadays there are in-game stores where users can purchase various game items that can be used in the game with in-game currency. These stores also typically allow the users to select the games items which they have purchased so the users can decide which game item they want to use in the game at that point in time. These systems can become quite complex and overwhelming for most developers however in this course you will learn how to create a basic fully functional in-game store.\nTHE STORE THAT YOU ARE BUILDING WILL:\nAllow users to buy various in-game items with an in-game currency\nAllow users to select which in-game items they want to play with in the game\nAllow the users to be able to scroll through the various different game items, this scroll effect adds a nice touch to the store\n\n\nBy the end of this course you will be able to confidently build a beautiful in-game store that will allow your users to buy different in-game items with in-game currency and then allow your users to be able to equip/select these items for use inside you're game.",
      "target_audience": [
        "Anyone who wants to learn how to create an in-game store",
        "Anyone who wants to learn how to create an in-game currency system which can buy different items"
      ]
    },
    {
      "title": "Create a 2D RPG and a 3D game in Godot 4.2",
      "url": "https://www.udemy.com/course/create-a-2d-rpg-and-a-3d-game-in-godot-42/",
      "bio": "A course for making a 2D RPG with resource gathering mechanic and an introductory course to 3D in Godot 4.2 and 4.1",
      "objectives": [
        "Learn the key concept of programming game in Godot 4",
        "Create a 2D RPG protoype with resource gathering, crafting system and dialog manager",
        "Having a good understanding of how 3D programming works in Godot 4",
        "You will learn GDScript, which is the language of Godot"
      ],
      "course_content": {
        "2D RPG - Creating the player": [
          "Setup and creating the player",
          "Coding the player movement",
          "Creating the player animations",
          "Creating the animation tree",
          "Calling the animations through code",
          "Creating the sword animations and the sword hitbox",
          "Creating a finite state machine, creating input and calling our sword attack",
          "Create a crate to slash with the sword and setup collision layer and buses",
          "Creating the global data script and damage the player",
          "Create the GUI to display the number of life",
          "Introduction to shaders to damage the player",
          "Creating the death animation and calling it through code"
        ],
        "2D RPG - Creating the world": [
          "Create the tilemap for the world",
          "Creating an animated tilemap for the lake",
          "Bringing trees, plants and rocks to our background",
          "Create a house and an animated door",
          "Create a second house in a modular way",
          "Toggle the transparency of the house and the trees",
          "Create coins to collect and loot it from the crates",
          "creating a cave, the entry of the cave and changing levels",
          "Instantiating the player to the scene and creating checkpoints",
          "Open the door by pressing a button",
          "Creating a chest and keys system",
          "Opening the door with the key and fixing a bug",
          "Creating the interior of the house and getting inside",
          "Creating animated spikes to replace our killzone",
          "Create a coin counter to the GUI"
        ],
        "2D RPG - Creating the resource gathering mechanic": [
          "Creating the item scene to collect (wood and rock)",
          "Destroying rocks and trees and spawn our resources",
          "Create the inventory script and adding our resource to it",
          "Launch our resources in a random direction"
        ],
        "2D RPG - Creating the inventory UI": [
          "Create the scene for the UI & display the amount of items collected",
          "Control the visibility of our inventory UI with custom input"
        ],
        "2D RPG - Crafting System": [
          "Create the hammer scene",
          "Create the animations for the hammer",
          "Setting up the collision shape for the hammer",
          "Creating a statue that can craft new weapon if we have the right resources",
          "Detecting the player and crafting and instantiating the hammer scene",
          "Displaying the weapon in the gui and switching weapon with input + fixing bug"
        ],
        "2D RPG - Dialog manager": [
          "Fixing bug",
          "Creating the dialog scene and its script",
          "Create the dialog manager script and assign the dialog to the statue"
        ],
        "Introduction to 3D - Create the foundation of our game": [
          "Setting up Godot, overview of the interface and importing our assets",
          "Creating our ground, camera and lighting environment",
          "Setting up the player scenes and animations",
          "Coding the player movement, animations, jump and rotations",
          "Rotating the camera around the player with the right joystick of the controller",
          "Rotating the camera around the player with the mouse",
          "Create a house and some trees",
          "Create coins to collect",
          "Create a script for the player data",
          "Calling our jump with a state machine",
          "Create our sword animation and collision",
          "Calling our sword animation into the code and creating input",
          "Creating a Game User Interface and displaying the number of coins and lifes",
          "Fixing the rotation of the player to the direction of the camera"
        ],
        "Introduction to 3D - Adding more element to our game": [
          "Creating our enemy",
          "Coding the movement and animations of the enemy",
          "Making our enemy patrol randomly",
          "Making our enemy chasing and attacking the player",
          "Fixing the rotation of the enemy during the attack and coding & adding an input",
          "Killing the enemy",
          "Enemy killing the player and collision settings"
        ]
      },
      "requirements": [
        "No programming experience needed, although knowing some basics always help."
      ],
      "description": "In this course you will learn all the fundamentals of creating a 2D RPG similar to game like Zelda: a link to the past, Stardew Valley or Pokemon, from start to finish. I'll teach you the key concept of that genre of game, including:\n\n\nFinite State Machine\nUsing Blend tree\nLooting coin when hitting a chest\nUsing keys to open locked doors\nCreating caves\nCreating a UI system displaying the number of lifes and coins\nCreating a system of resources gathering\nCreating an inventory\nCreating a crafting system to create a new weapon\nSwitching weapons by pressing a key\nYou can check the curriculum to learn more about the content of the course.\nI'm focusing on making video that are straight to the point, giving you all the basics you need to understand key concept (while showing you how to use them) without overloading you.\nBeing a big fan of the Zelda series, it is a big blast for me to be able to teach you how to make a game of that genre, which is known to be quite difficult, but so rewarding and satisfying to play! At the end of this course, you will have a working RPG game prototype that you'll be able to develop, you will have learn the key concept of programming that type of game and - if you are a completely new to programming - you will have learn all the key concept of programming.\n\n\nThen in the second part of this course you will learn how to create a simple 3D retro game. This is an introduction to 3D, by no mean a full blown course about how to create a full 3D game, but you will learn the following:\n\n\nHow to import 3D assets\nDealing with animations\nCreating sword attack\nCreating enemy that can patrol, chase and attack the player\nCreating state machine to handle complex behavior\nCollecting coin and object\nDisplay the number of life and coin collected\nAnd way much more. To have an overview, check the curriculum to see everything we are going to do together.\nYou don't need to have any prior experience, although a basic understanding of programming is a plus. I will teach you all the primary concept and explain you in details (without overloading you with no relevant concept) every line we are going to create for this game.\nIf all of this sounds like fun to you, enroll in this course and I'll see you in the first lecture!",
      "target_audience": [
        "Beginner and intermediate programmer interested in learning how to use Godot for creating 2D & 3D games"
      ]
    },
    {
      "title": "Character Creation Guide: Intro to PBR Assets for Games",
      "url": "https://www.udemy.com/course/character-creation-introduction/",
      "bio": "3D Character Modeling Game Development for Unity. PBR techniques utilizing Maya, Zbrush, Substance Painter, & Photoshop.",
      "objectives": [
        "Model and sculpt high quality PBR assets for game development",
        "Gain a strong understanding of Topology",
        "Execute professional UV pipeline workflows",
        "Bake high fidelity sculpts to lower resolution assets",
        "PBR character texturing utilizing industry standard techniques",
        "Import and light final assets in Unity and Marmoset"
      ],
      "course_content": {
        "Project Overview": [
          "PureRef",
          "Course Setup | Industry Resources",
          "Udemy Rating System Very Important Info!",
          "Reference",
          "Design Sculpting"
        ],
        "ZBrush Introduction and Preferences": [
          "ZBrush Preferences",
          "Hotkeys and Lightbox",
          "ZBrush Viewport"
        ],
        "Foundational Tools within ZBrush": [
          "Brush Overview",
          "Dynamesh and SubDivisions",
          "Insert Mesh Brushes",
          "Gizmo Navigation",
          "Base Mesh Creation",
          "Saving ZTools and ZProjects"
        ],
        "ZBrush for Sculpting": [
          "Head Foundation",
          "Head Foundation Cont'd",
          "Sculpting Eyes",
          "Sculpting the Nose",
          "Sculpting the Mouth",
          "Sculpting Ears",
          "Sculpting Horns",
          "ZModeling the Wood",
          "Live Booleans",
          "Appending Subtools",
          "Horn Cleanup",
          "Blocking in the Rope",
          "Candle Creation"
        ],
        "Production Ready Sculpt": [
          "ZRemesher and ProjectAll",
          "Finalizing Forms",
          "Surface Noise",
          "Alpha Brushes and Detailing",
          "Tertiary Details Complete",
          "Finalizing the Horns",
          "Finalizing the Wheel",
          "Rope Creation"
        ],
        "Prepping for Export": [
          "Decimation Master",
          "Dynamic Decimation",
          "Exporting .Objs and .Fbxs"
        ],
        "Retopology in Maya": [
          "Topology Theory",
          "Mayas Viewport",
          "Outliner",
          "Make Live",
          "QuadDraw",
          "Retopology",
          "Tips and Tricks",
          "Retopology Overview"
        ],
        "UV Generation": [
          "UV Theory",
          "Basic Tools",
          "Cylindrical Shapes",
          "The Hotkey Menu",
          "Layout Tool",
          "Overlapping UVs",
          "UV Overview"
        ],
        "Baking and Map Creation": [
          "Intro to Baking",
          "Xnormal",
          "UV Snapshot",
          "Map Creation"
        ],
        "Texturing": [
          "Substance Painter",
          "Project Settings",
          "Importing Texture Sets",
          "Baking Maps",
          "Wood Texturing",
          "Default Materials",
          "Skin Texturing",
          "Substance Timelapse",
          "Exporting"
        ]
      },
      "requirements": [
        "No prior knowledge of Unity or Marmoset needed.",
        "The course utilizes Maya 2018, but prior knowledge of any 3d modeling package is a plus.",
        "Zbrush 2018 with minimum version of ZBrush 4R7 is required.",
        "No prior knowledge of Substance Painter needed.",
        "Programming is a plus, but not required."
      ],
      "description": "Hi there! Welcome, and thanks for choosing Class Creative’s Complete Character Creation Guide: Intro to PBR Assets for Games!!\n\n\nIn this foundational course we will be learning the fundamentals of Character Modeling, where we will cover the following core skill sets:\nSculpting, Optimization, Texturing, and Character Setup\n\n\nWe’ll be utilizing the latest software packages that top tier gaming studios of today use to create all of your favorite titles! The software packages that we’ll be covering are:\nZbrush, Maya, Substance Painter, Unity Game Engine, and Marmoset Toolbag 3.\nWhat students are saying about this PBR character modeling creation guide for games course:\n\"Amazing! This course connects everything together cohesively. I know a bit of Zbrush and Maya but always wondered how they were used together. Love how clear and structured this course is! Excited thinking of what is possible. Thanks so much!\" - Shahnawaaz Khan\n\"I've learned quite a bit with this course! It's very in depth and thorough with its instruction. Highly recommend!\" - Richard Anyel\n\"Absolutely awesome! , it was worth buying this course, as it augments your skills significantly.\" - Raphael Jolly Tunious\n\"Very nice tutorial ! I learned lots of things and tutor answered my questions quickly. Good for beginners.\" - Berke Ram\n\"It was a good class and topics were covered well. Tutor was good and also suggested other artists to refer. Zbrush, repotology, substance painter, marmoset were explained well. Thanks!\" - Sakshi Uchil\n\"This course, so far, is exactly what I was looking for! The instructor does a great job of explaining not just the material but the initial starting of a project as well as the things that go on in the \"background\" which may affect the things that you create.\" - Pascal Borner\n\n\nWhy Learn From Class Creatives?\nOver 20 years of professional industry experience and nearly a decade of accredited university level instruction. Instructors featured from Studios such as Walt Disney Animation Studios, Walt Disney Television, Google, Nintendo, Naughty Dog, Insomniac, Sony Computer Ent, Sucker Punch, Guerrilla Games, Infinity Ward, and more!\nWho This Course is For:\nThe great thing about this course, is that we has something in store for everyone. Whether you are just a beginner interested in Character Creation, or a Master professional looking to brush up on your current skill set, this course has material you surely won’t want to miss!\nAs with all Class Creative’s courses, we’ve laid out a structure that covers the full spectrum of industry standard character workflows from start to finish.\nPlease remember, if this is your first time creating a 3D character, we highly recommend that you follow the outline carefully, according to how our instructors have structured the course. We wouldn’t want you to miss out on any details!\nHowever, if you are an advanced user and are looking for something specific to add to your repertoire feel free to dive in and skip to any sections you’d like to focus on.",
      "target_audience": [
        "Competency using a computer.",
        "Developers who want to add game development to their skill-set.",
        "Anyone with a passion for learning game development.",
        "Anyone who wants the ability to create assets for games."
      ]
    },
    {
      "title": "Unity Hyper Casual Game - Exploring Hexa Sort Mechanics",
      "url": "https://www.udemy.com/course/hexastack/",
      "bio": "Learn & Create Various Mechanics from the Hyper Casual Mobile Game - Hexa Sort",
      "objectives": [
        "How to create a hexagonal grid using Unity's Grid Component.",
        "Implementing symmetrical hexagonal grids for level design.",
        "Controlling and manipulating hexagon stacks within the game environment.",
        "Developing and implementing merging mechanics for hexagon stacks.",
        "Techniques for identifying and solving common issues in game development."
      ],
      "course_content": {
        "The Main Mechanic": [
          "Introduction",
          "Understanding the Hexagonal Grid",
          "Procedural Hexagonal Grid",
          "The First Stacks",
          "Coloring the Stacks",
          "A Better Hexagon Stack",
          "Controlling the Stack (Part 1)",
          "Controlling the Stack (Part 2)",
          "Grid Cell Snapping",
          "Dropping Stacks on Empty Cells",
          "Spawning New Stacks",
          "Merging Hexagons (Part 1)",
          "Merging Hexagons (Part 2)",
          "Merging Hexagons (Part 3)",
          "Completing a Stack",
          "Hexagon Animations",
          "Rotating Hexagons",
          "The Merging Loop"
        ],
        "Level Making": [
          "Level Making Part 1",
          "Level Making Part 2"
        ],
        "Main Menu Shader": [
          "Grabbing some Assets",
          "The Shader Part 1",
          "The Shader Part 2"
        ],
        "Extra Content": [
          "A Better Hex Grid",
          "Project Files"
        ],
        "Bonus Section": [
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "Basic Coding Knowledge (Loops, Coroutine, Actions will be used)",
        "The will to Learn Advanced Game Development Concepts"
      ],
      "description": "Hey Friend!\n\n\nIn this course, you will learn how to recreate various mechanics and effects from Hexa Sort, a famous and trending hypercasual mobile game.\n\n\nWe will start by creating a Hexagonal Grid using Unity's Grid Component. (Way simpler than creating our own system)\nAfter you've clearly understood how this works, we will tackle Procedural Hexagonal Grid Creation, the basics actually.\n\n\nWe want to create a symmetrical hexagonal grid that we can then edit to Create Levels.\nYou will also learn how to create levels, the quick way.\n\n\nAfter creating our grid, we will tackle Spawning Hexagon Stacks and controlling them.\n\n\nWe will learn how to Snap Those Stacks on the grid and Merge everything when it makes sense.\nThe trickiest part of the system is, you guessed it, the Merging Mechanic. We need to Iterate over Every Cell that has been updated during the previous merge.\nIt might sound weird, but you'll know how to do that after completing the course!\n\n\nI'm also going to include some lectures on the Shader in the Main Menu, because that's something I find cool.\nAnd if you want me to Explore More Hidden Gems of this game, please let me know!\n\n\nReady to jump in? Enroll now!\n\n\nDisclaimer : This is not a beginner course, you need to have some basic Unity & C# knowledge before starting this course.\nIt's best if you know about loops, coroutines & actions.",
      "target_audience": [
        "Aspiring Game Developers, new to game development and are looking to learn advanced game development right away.",
        "Developers who have some experience with Unity and want to deepen their understanding of grid-based systems and procedural generation.",
        "Game developers specifically interested in the hyper-casual genre and wanting to learn how to recreate mechanics from popular games in this category.",
        "Individuals who develop games as a hobby or are working on indie game projects and are looking for new techniques and inspirations for their games."
      ]
    },
    {
      "title": "Build Your Own Games Now - GameMaker Studio 2 (GML)",
      "url": "https://www.udemy.com/course/gamemaker2/",
      "bio": "Are you a complete beginner looking to learn game development? You're at the right place!",
      "objectives": [
        "Build your own games!",
        "Share your games with the world",
        "Sell your games",
        "Use GameMaker Language effectively"
      ],
      "course_content": {
        "Introduction": [
          "Introduction to GameMaker",
          "How does GameMaker work?",
          "Important Notice About Reviews"
        ],
        "Introduction to Programming": [
          "Introduction to GML",
          "GameMaker Events",
          "Events Quiz",
          "Programming Basics",
          "Programming Quiz"
        ],
        "Your First Game": [
          "Introduction",
          "Making the Player Ship",
          "Saving your project",
          "Making the Backgrounds",
          "The Player Shoots",
          "Enemy Ships - Part 1",
          "Enemy Ships - Part 2",
          "Enemy Ships - Part 3",
          "Player Health",
          "The Player Loses",
          "Score System",
          "Power Ups",
          "The Menu",
          "Adding Sounds to your Game",
          "Creating the Executable",
          "Project Download"
        ],
        "More about GML": [
          "Introduction",
          "Keyboard and Mouse Movement",
          "Sprite Animation",
          "Collisions",
          "Tiles and Auto-Tiling",
          "Camera",
          "Tip: Draw GUI"
        ],
        "Conclusion": [
          "Conclusion"
        ]
      },
      "requirements": [
        "A computer with GameMaker Studio 2 installed",
        "No programming knowledge is required!",
        "You can use the free version of GameMaker Studio 2, which will come with some limits - but you will still be able to use it for learning!"
      ],
      "description": "Hey there, and welcome to my course!\nI am Gurpreet Singh Matharoo, a GameMaker Mentor and Instructor. I have years of experience in GameMaker, and have helped many people to learn game development through my courses, tutorials, and guides.\nIn this course, you'll learn how GameMaker Studio 2 works, and as an example we will create a shoot 'em up style game from the ground up. GameMaker Language (a.k.a. GML) is the built-in programming language used in GameMaker Studio. It is very quick to learn and simple to use. I will guide you through the basics of the language before starting, so even if you have no experience in coding at all, you will have no trouble in following this course.\nThe structure of the course is as follows:\nFirst I introduce you to GameMaker Studio 2 and explain how it works.\nThen I explain what events are and how they work, and then give you an introduction to programming in GML.\nThen I walk you through a step-by-step process of creating a shoot 'em up style game using GML.\nThen I show you how some more interesting things are done in GameMaker.\nYou can also download the source file of the shoot 'em up game we make in this course.\nWhen you finish the course, you will have the knowledge you require to create your own games and the base to learn more. With a GameMaker licence, you can even sell your games!\nFurthermore, if you are my student, I can help you with any of your problems related to GameMaker, for no extra charges.\nSo what are you waiting for? Sign up for the course now, and let's get started!",
      "target_audience": [
        "Extreme beginners who want to learn how to make games",
        "Users who want to learn to code using GameMaker Language"
      ]
    },
    {
      "title": "Make a multi-platform action 2D Space Shooter |Cocos Creator",
      "url": "https://www.udemy.com/course/make-a-multi-platform-action-2d-space-shooter-cocos-creator/",
      "bio": "Build a 2D space shooter game that can be deployed as an android game, Facebook instant game, web game, Windows or Mac",
      "objectives": [
        "How to Create an action 2D Space Shooter Game",
        "How to use Touch and Keyboard Input for 2D games",
        "Spawning Enemies that have life, actions and shoot back at you",
        "Simple physics and Collision Detection in Cocos Creator",
        "Scripting in Cocos Creator",
        "What is needed to publish to Windows or Mac, Android, Facebook Instant Games, Web Mobile and Web Desktop platforms"
      ],
      "course_content": {
        "Introduction": [
          "Introduction | Creating a Cocos Creator Project and Scene"
        ],
        "multi-platform player input": [
          "keyboard input | Cocos Creator Scripting for keyboard input",
          "Touch Input | Cocos Creator Scripting for Touch Controls"
        ],
        "Space Game Setup": [
          "Space Ship rockets using particle effect | Using Cocos Creator Particle Effects",
          "Switching Scenes | Cocos Creator Scene Management",
          "Enabling the Collisions | Cocos Creator Collision Detection"
        ],
        "Adding Bullets": [
          "Player Bullets",
          "Adding Machine Gun Style Bullets",
          "Bad Guy Bullets"
        ],
        "Game Logic": [
          "Moving the bad guy | Cocos Creator Actions",
          "Destroying the ship and Ending the Game",
          "Collision Bodies",
          "Code for shooting bad guys",
          "Destroying the Enemy ships"
        ],
        "Wrap Up": [
          "Animating the Explosions",
          "make the ship explode",
          "Spawning more enemy space ships",
          "Adding a boss Ship",
          "Building the Game for multiple platforms"
        ]
      },
      "requirements": [
        "Be able to work around your desired platform whether Windows or Macintosh i.e. installing software etc",
        "Students with some basic scripting or programming knowledge will get through the course faster",
        "An eagerness to learn 2D Game Development"
      ],
      "description": "The course will be using the completely free Cocos Creator Engine to create a 2D space shooter game that will be using Collision Detection and other 2D game features. In the course, you will be making a multi-platform game that supports keyboard and touch input so that it can play on desktop and mobile platforms. The course will show what is needed to deploy the game as a web game, a Facebook Instant Game, what is needed to compile for Android Game Development as well as building for Windows or Mac. We will cover some 2D Game Development Fundamentals with Cocos Creator in the process while covering web game design. The course will be scripted in typescript files but can be used for JavaScript Game Development. This course is for anyone interested in creating a 2D space shooter game that can be deployed to multiple platforms as well as JavaScript,Typescript or web developers who want to make games using their skills. Even if you are not a JavaScript or Typescript developer, some programming knowledge is all that is required to get through this course.",
      "target_audience": [
        "JavaScript,Typescript or programmers of any kind who want to make Games.",
        "Students who are interested in creating a 2D Space Shooter game",
        "Students who want to know how to create Games with the Free Cocos Creator game Engine",
        "Cocos2d-X developers who want a faster way to develop games",
        "Anyone interested in creating 2D games for multiple platforms"
      ]
    },
    {
      "title": "JavaScript War card game project from Scratch",
      "url": "https://www.udemy.com/course/javascript-project-cardgame/",
      "bio": "Explore how to build this JavaScript Game from Scratch based on the card game war. Step by step learning JavaScript",
      "objectives": [
        "build an application from scratch",
        "learn to apply JavaScript code",
        "use JavaScript within web applications"
      ],
      "course_content": {
        "Introduction to Building a Card War game from scratch": [
          "Introduction to JavaScript Game Project Course",
          "course setup and resources",
          "Build structure for gameplay",
          "eventlisteners in JavaScript DOM",
          "Source Code",
          "build deck of cards",
          "Random Array Shuffle Cards",
          "Source Code",
          "Modulus and Multidimensional Arrays",
          "Source Code",
          "card shift and storage to inplay array",
          "Create Card output for players",
          "CSS styling playing cards",
          "Card battle check for winner",
          "Source Code",
          "Create Battle Mode loop JavaScript functions",
          "debugging and tweaking",
          "add automation tweaks to gameplay",
          "Source Code",
          "Code overview conclusion"
        ],
        "Bonus Course Resources Questions and Answers for JavaScript Code": [
          "How to create IIFE",
          "Supplementary Resource Collection: Access to Downloads"
        ]
      },
      "requirements": [
        "basic HTML and CSS",
        "Basic JavaScript understanding",
        "Computer access"
      ],
      "description": "Learn how to use JavaScript to build a web project from Scratch!\nThis course will demonstrate how to build a complete interactive web card game from start to finish.  All the source code is included . Learn from setup to completion step by step tutorials.\nBasic JavaScript and CSS is required as the scope of this course is to demonstrate working with JavaScript to build web applications.\nThis course is perfect to learn more about writing JavaScript within a fun dynamic project.  Learn the core concepts of web development and how to apply JavaScript to make your project come to life.\nThe best way to learn is to practice and this project is a great place to start and challenge yourself to see what you can do with JavaScript.   Card war is a simple game with straight forward rules and it makes a great digital project.  The rules require a dealing of cards to each player, then taking the top card and seeing which player has the highest card.  The high card wins the pot and the won cards then go to the bottom of the players stack.  The first player to run out of cards loses!   Within the course we simulate this game using the rules and apply them with JavaScript.  Using functions, ternary statements, loops, intervals, variables, arrays, objects together to build the game.\nLearn by examples - source code is included to get you started quickly\nTaught by an instructor with over 18 years of JavaScript experience, ready to help you learn JavaScript and answer any questions you may have.  Regular Q&A discussions with daily responses and coding assistance.\nEverything you need to learn how to build this and applications like it!\nWhen you are ready to learn more about building JavaScript applications from scratch, join now and lets start building amazing things online.",
      "target_audience": [
        "JavaScript beginners",
        "Anyone who wants to learn more about using JavaScript",
        "Web developers"
      ]
    },
    {
      "title": "Unreal Engine 5: Cinematics for Beginners – Your First Scene",
      "url": "https://www.udemy.com/course/unreal-engine-5-the-complete-beginners-cinematic-course/",
      "bio": "Learn how to create Cinematics and VFX with Unreal Engine 5 and Sequencer and how to use it for Virtual Production.",
      "objectives": [
        "Understand the importance of cinematics in modern storytelling and game development.",
        "Explore the capabilities of Unreal Engine 5 for cinematic production.",
        "Get familiar with the course structure and learning objectives.",
        "Configure project settings for optimal cinematic rendering.",
        "Import and organize your assets efficiently.",
        "Discover cinematography techniques for camera placement and movement.",
        "Learn how to create stunning visual effects using Niagara.",
        "Animate characters, props, and cameras to enhance your cinematic sequences",
        "Set up dynamic lighting and global illumination for realistic scenes",
        "Optimize rendering settings for high-quality cinematic output"
      ],
      "course_content": {
        "Introduction": [
          "Course Introduction",
          "How to Install Unreal Engine 5.2",
          "How to Navigate in Unreal Engine 5.2",
          "How to use and add assets from Quixel Bridge."
        ],
        "How to work with Sequencer": [
          "Intro to Sequencer",
          "How to use Camera Rig Rail",
          "How to use Camera Rig Crane",
          "How to animate your character - Part1",
          "How to animate your character - Part2"
        ],
        "Creating the Scene - Part1": [
          "Making the Blockout",
          "Choosing and import the Assets",
          "Adding the Walls",
          "Adding the Bridge",
          "Adding Details",
          "Lighting Settings"
        ],
        "Intro to Niagara VFX": [
          "How to Navigate in Niagara",
          "Let's make a Smoke Steam - Very Beginners Navigation",
          "How to create Smoke Texture with Embergen",
          "How to create Basic Smoke Material",
          "Let's make a Fog",
          "Let's make a Flies",
          "Let's make a Fire",
          "Let's make a Ground Destruction",
          "Adding the FX in the Scene"
        ],
        "Creating, Animating and Finalizing the Scene - Part2": [
          "Camera Shake Blueprint",
          "Scene 1",
          "Scene 2",
          "Scene 3",
          "Scene 4",
          "Scene 5",
          "Scene 6",
          "Scene 7",
          "Render Settings"
        ]
      },
      "requirements": [
        "Our course is designed for beginners, it is beneficial for participants to have a basic understanding or a little bit of prior experience in the Unreal Engine."
      ],
      "description": "Unlock the power of Unreal Engine 5 - 5.6 and embark on a creative journey to master the art of crafting photorealistic cinematics. In this comprehensive course, you will learn step-by-step how to create stunning cinematic sequences that rival Hollywood productions. Whether you're a filmmaker, game developer, or simply an enthusiast with a passion for visual storytelling, this course is your gateway to cinematic excellence.\nSection 1: Introduction to Unreal Engine 5\nIn the opening section, we'll introduce you to Unreal Engine 5, guiding you through its interface and helping you navigate its vast capabilities. Get ready to embark on an exciting adventure as we dive into the world of photorealistic cinematics.\nSection 2: Sequencer Essentials\nMaster the Sequencer tool, the heart of cinematic production in Unreal Engine. We'll cover the basics of Sequencer, teaching you how to create and edit cinematic sequences, set keyframes, and control cameras to capture your vision.\nSection 3: Building Your CG Scene\nHere, we'll kick off the creation of your photorealistic cinematic masterpiece. Learn the art of scene composition, from blocking out your environments to selecting the perfect assets that breathe life into your story.\nSection 4: Unleashing the Power of Niagara VFX\nDiscover the magic of Niagara VFX, Unreal Engine's cutting-edge particle system. You'll gain hands-on experience in creating breathtaking visual effects that will elevate your cinematic scenes to the next level.\nSection 5: Finalizing Your CG Scene and Render Settings\nIn the concluding section, we'll guide you through the finishing touches. Learn how to fine-tune your scene, optimize render settings, and prepare your project for that photorealistic final output that will leave your audience in awe.\nBy the end of this course, you'll have the skills and confidence to create photorealistic cinematics using Unreal Engine 5. Whether you dream of crafting cinematic storytelling for games, films, or personal projects, this course equips you with the knowledge and hands-on experience to bring your visions to life. Join us on this creative journey and turn your cinematic dreams into reality.\nEnroll now and start creating breathtaking photorealistic cinematics today!\nAnd don’t worry if you’re using an older version of Unreal Engine 5—everything we cover in this course works just fine in earlier 5.x versions too, also 5.6 is fine.",
      "target_audience": [
        "This course is tailored for individuals who are eager to learn and passionate about Cinematics and Unreal Engine, whether you're an absolute beginner or someone with some prior knowledge looking to deepen your expertise."
      ]
    },
    {
      "title": "JavaScript Dynamic Quiz Application from Scratch JSON AJAX",
      "url": "https://www.udemy.com/course/javascript-dynamic-quiz-application-from-scratch-json-ajax/",
      "bio": "Step by Step guide to creating a Dynamic Web based JavaScript Quiz which uses a JSON data source file to generate a quiz",
      "objectives": [
        "create a dynamic data driven JavaScript Quiz application",
        "write JavaScript Code",
        "create a project from scratch",
        "Learn how to build a JavaScript applciation"
      ],
      "course_content": {
        "Introduction to JavaScript Dynamic Web Projects": [
          "Introduction to building a dynamic web application from scratch",
          "Course Resources Setup and tools"
        ],
        "Learn how to use JSON": [
          "JavaScript Objects",
          "Create Object Array JSON file",
          "JSON Parse Data into Object JavaScript",
          "Source Code JSON to Object",
          "Use AJAX to get JSON data into JavaScript Object",
          "Source Code AJAX"
        ],
        "Build Application from Scratch": [
          "Build Questions display in HTML",
          "Bootstrap styling of quiz",
          "Move Between Questions",
          "JavaScript addEventListener",
          "innerText Value check",
          "Selecting Classes Toggling Classes in elements",
          "Save Selection",
          "Movement between questions completion of quiz",
          "Dynamic Quiz add new questions",
          "Hide show next and previous buttons",
          "Create Score Card for Quiz",
          "Finish Project - JavaScript Dynamic Quiz from Scratch",
          "Project Source Code"
        ],
        "Bonus Section": [
          "JSON code example",
          "Bonus Educational Resources: Downloadable Content, Practical Examples,"
        ]
      },
      "requirements": [
        "basic JavaScript",
        "HTML and CSS",
        "computer access"
      ],
      "description": "Learn to Build your own Dynamic JavaScript Quiz from Scratch.\nThis course covers a step by step approach to building an interactive online quiz.  The completed project is a web quiz that gets generated from a data file.  Source code is included so that you too can try the code for yourself,  adjust and create your own version.\nOnline quizzes are a useful tool for websites, to create interaction, add engagement and gather information from users.   You will be amazed at how easy it can be to create applications like this from scratch.   Add you own questions easily.  The quiz data is from a JSON file that gets pulled into the JavaScript via AJAX.   The JavaScript code then generates the visual output within the HTML.\nThe course covers everything you need to know, with source code included.  Step by step process covering everything you need to know to be able to utilise all these amazing JavaScript capabilities.\nLearn about JavaScript Objects and how they can be used to hold data\nLearn about JSON and how it relates to JavaScript objects\nUse AJAX to get data from a web file and then parse it to a usable object format within your JavaScript.\nHow to add Bootstrap for quick styling to your page\nHow to build a project from scratch explained step by step.   What makes this course different is that it takes a project based approach to teaching JavaScript.  See how and why code in JavaScript is used to create REAL WORLD PROJECTS.\nHow to build the question data file\nnavigation between questions using JavaScript\nadding event listeners to trigger user initiated functionality\nworking with the DOM - Document Object Model\nDynamic Classes\nAdding new question\nCreate a final score card for the user to show their results\nand a whole lot more.....\nStart exploring what you can do with JavaScript\nBy the end of the course you will have the skills and know how to create JavaScript code to make quizzes online.\nI am here to help you learn how to create your own web projects and ready to answer any questions you may have.\nWant to know more, what are you waiting for take the first step.  Join now to start learning how you too can create dynamic and interactive web projects today.",
      "target_audience": [
        "Web developers",
        "web masters",
        "anyone who wants to learn more about JavaScript",
        "anyone who wants to learn how to build a JavaScript project from scratch"
      ]
    },
    {
      "title": "Graphics in Unity 3D for Beginners",
      "url": "https://www.udemy.com/course/graphics-in-unity-3d-for-beginners/",
      "bio": "Achieve Triple-A graphics quality in Unity using the post processing stack.",
      "objectives": [
        "Learn how to create visual effects for games with Unity.",
        "Master the post processing stack and every effect that comes with it.",
        "How to structure AAA Visuals In Unity.",
        "How to structure Advanced Image Effects."
      ],
      "course_content": {
        "Getting Started": [
          "What is Post-Processing",
          "Setting up Post-Processing",
          "Setting up the Scene"
        ],
        "Introduction to Post-Processing": [
          "Anti-Aliasing",
          "Post-Processing Profile"
        ],
        "Advanced Effects in Unity": [
          "Ambient Occlusion",
          "Bloom",
          "Auto-Exposure",
          "Color Correction",
          "Color Grading",
          "Screen Space Reflections",
          "Depth Of Field",
          "Chromatic Aberration",
          "Lens Distortion",
          "Vignette",
          "Motion Blur",
          "Grain"
        ],
        "Creating Advanced Effects": [
          "Dynamic Post Processing",
          "Advanced Effects in Unity",
          "What's Next"
        ]
      },
      "requirements": [
        "No programming experience required",
        "Basic knowledge of how to use the unity interface",
        "Unity 2021.3 Preferably"
      ],
      "description": "This course is about the creation of Graphics for Video Games with Unity.\nAdding Graphics for video games can be a technical endeavor, but at its core, it's an art form. You'll learn about the various image effects Bloom, Depth Of Field, Screen Space Reflections, and so much more. you'll get the concept of how to approach advanced image effects like Night Vision, Underwater, Solo Color effect, and more.\nIt contains the theory, the practice, and the creative liberty you will need in your future as a Game Artist.\n\n\nWith this course you will also learn:\n1) How to use the Post-Processing Stack and create advanced image effects;\n2) How to Color Grade your game (the right way) and give it a Cinematic Look\n\n\nIt's suitable for beginners to Intermediate levels, and also for the more advanced artists as this mini-course contains lots of nerdy information, tips, and tricks on how to approach this topic. Over time, the course will get regular updates and keep on trend with industry techniques and standards. New content will also be added in the future.\n\n\nDisclaimer! this course is not for total beginners, this course needs a solid understanding of the Unity User Interface. complete beginners can get lost easily. if you are a complete beginner but want to get some cool information and resources on how Graphics is created for video games then this course will be super fun for you.\n\n\nWhat are you waiting for? Enroll in this course and Join me now.",
      "target_audience": [
        "Unity Beginners",
        "Game Designers",
        "3D Artists",
        "3D Generalists",
        "VFX Beginners"
      ]
    },
    {
      "title": "Learn Socket to Create Multiplayer Games with Unity",
      "url": "https://www.udemy.com/course/build-a-real-multiplayer-game-with-unity-and-c-socket/",
      "bio": "Learn to use C# Socket library to create a 3D multi-player game.",
      "objectives": [
        "Developing own game server from scratch",
        "Serializing data structures and preparing for transfer over the network",
        "How data transfering between clients and server",
        "C# threading",
        "Reading and deserializing data from network",
        "Learn game server architecture design"
      ],
      "course_content": {
        "Simple Chat Application": [
          "Synchronous Chat Server",
          "Synchronous Chat Client",
          "ASynchronous Chat Server-Client"
        ],
        "Introduction to the Server-Side": [
          "Server Class Entrance",
          "Client Class Entrance",
          "Message Class Entrance",
          "BaseController",
          "Controller Manager",
          "A Function for Sending Response To The Client",
          "007-Changing The Read Message Function For Encrypted Data",
          "PackData(Encrypt The Data)",
          "Connecting Mysql Database"
        ],
        "Introduction to the Unity-Side": [
          "Unity Entrance",
          "ClientManager",
          "Message Class For the Client-Side",
          "Creating a Function to Send Request to the Server",
          "Receiving the Data",
          "Accessing GameFacade Class from manager classes",
          "Creating a dictionary for RequestCode and Request Classes-1",
          "Creating a dictionary for RequestCode and Request Classes-2",
          "Creating an Animation for the Camera",
          "Login Button",
          "Creating Login,Register and Message panel",
          "Adding Path for each panel",
          "Adding some features into the MessagePanel Class-1",
          "Adding some features into the MessagePanel Class-2",
          "Pushing The LoginPanel",
          "Close Button",
          "Creating Tables in Mysql"
        ],
        "First Communication Between the Unity and Server": [
          "Showing an Error Message for the Wrong Password",
          "Making changes for a future error",
          "First Login Request",
          "Reading the Login Request Coming From Unity on the Server",
          "Reading the Login Request Coming From Unity on the Server-2",
          "Reading the Login Response Coming From Server on the Unity",
          "Fixing Some Errors",
          "Login Succesfull",
          "Pushing The RegisterPanel",
          "Sending the Register Request",
          "Registration Succeed"
        ],
        "Introduction the Room": [
          "Designin the Room List Panel",
          "Pushing Room List Panel",
          "Creating animation for the Room List Panel",
          "Animation Problems",
          "Sending Player Result From Server",
          "Reading Result From Client",
          "Makes Result Appear on the BattleRes Side",
          "Creating ScrollBar and Class for the Room Item",
          "Designing the Room Panel"
        ],
        "Requests For the Room": [
          "CreateRoom Request-1",
          "CreateRoom Request-2",
          "CreateRoom Request-3",
          "Listing Room Request-1",
          "Listing Room Request -2",
          "Adding User ID and Moving the CreateRoomRequest()",
          "Creating the RemoveRoom() and QuitRoom() functions",
          "Join Room Request-1",
          "Join Room Request-2",
          "Join Room Request-3"
        ],
        "Final": [
          "StartGame Request",
          "Timer for Stating the Game",
          "Adding Player Movement",
          "Make the Player Shoot",
          "Creating The RoleType And RoleData",
          "Make the Camera Follow the Player",
          "Make Camera Walk Through the Scene",
          "Determining the Spawn Position of Players",
          "Current Role Game Object",
          "Enter Playing",
          "Adding Control Script From Scratch",
          "Move Request",
          "Move Request-2",
          "Move Request-3",
          "Shoot Request",
          "Shoot Request-2",
          "Attack Request",
          "Attack Request-2",
          "Reading The GameOver From Client",
          "Walk Through The Scene"
        ]
      },
      "requirements": [
        "You must have installed and have basic experience with Visual Studio",
        "You must have installed and have basic experience with Unity 5 or greater",
        "Understanding network communications on basic level",
        "Intermediate knowledge in C# programming language",
        "Perseverance and desire to achieve the goal.(Most important one)"
      ],
      "description": "Learn socket programming in C# .Net\nGet proficient in computer network socket programming using TCP/IP streaming sockets and become a better professional programmer.\nPerhaps you have already created some cool game and now you want your game to be multiplayer but you do not know how to do it? Creating games is hard but creating online games is even harder, especially if you do not know where to start. These days a lot of cool solutions that help achieve this or that purpose. However, I am sure that this does not suit you, either because these solutions are quite expensive or created to solve only certain tasks. Thanks to this course you will see how to program the real online games.\nDue to the fact that nowadays the resources of CPU have become easily accessible to everyone, C# is perfectly suitable for creating client-server applications and for network multithreaded programming. You will see how to create a multithreaded game server for your games in C# programming language that will receive and send data to your clients in real-time using the TCP protocol that is used in real game projects.\nWith this course, you will see how event-driven and service-oriented applications work. Understand how to use multi-threaded programming in Unity Game Engine and you will see how to serialize and transfer data from the clients on Unity with C# programming language to the server.\nAt the end of this course, you will be able to create C# (Sharp) .Net software capable of sending and receiving data over TCP/IP sockets on peer to peer basis with async and await keywords. You will learn not only socket programming, but OOP as well. The course will make you a better programmer. you will have the source code of the complete production-ready event-driven service-oriented concurrent game server on C# and client for Unity Game Engine, which you can modify and freely use in your projects.\n\n\nHaving completed the course you will have all the skills necessary to create 3D multi-player games of your own. With the 30 day money-back guarantee you can start the course today with complete confidence.",
      "target_audience": [
        "For everyone who wants to learn how to develop server applications for any kind of games"
      ]
    },
    {
      "title": "Unreal 5 Niagara - Advanced Niagara",
      "url": "https://www.udemy.com/course/unreal-5-niagara-advanced-niagara/",
      "bio": "Your complete course for expaning Niagara in Unreal Engine 5",
      "objectives": [
        "Learn Advanced Techniques for working with Niagara Particles",
        "Setup Data Interfaces to read from Collisions, RVTs, Render Targets, SDFs, Mesh Distance Fields and more!",
        "Understand how we can process data into useful forms like Flowmaps and Collisions Avoidance",
        "Learn to build our own modules using Scratch Pad to further extend Niagara's abilities"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Course Files"
        ],
        "Rain Interactions": [
          "One Large Rain System",
          "Spawn Rate By Volume",
          "In Line Spawn Calculations",
          "Attached To Player",
          "Collisions",
          "RVT Heightmap Data",
          "RVT Heightmap Kill Module",
          "GPU Cost Comparison",
          "Landscape Data Interface",
          "Render Target Setup",
          "Render Target Height Kill",
          "Rotate Render Target",
          "Quantised Sampling",
          "Spawn on Depth Buffer",
          "Rain Conclusion"
        ],
        "Advanced Sampling": [
          "Flowmap from Terrain Height",
          "Align Particles to Z Height",
          "RVT Material",
          "Edge Detection",
          "Align to Landscape",
          "Spline Sampling",
          "Spline Position",
          "Final Position Binding",
          "Spline Conclusion",
          "Mesh Tangents",
          "Mesh Tangents and UVs",
          "Flow from Textures",
          "Textures SDFs"
        ],
        "Sign Distance Fields - SDFs": [
          "SDF Intro",
          "SDF Shapes",
          "SDF Combine",
          "Wobbly Material",
          "Capture SDF Render Target",
          "SDF Niagara System",
          "Distance Field Avoidance",
          "Scratch Pad Distance Field Sample",
          "Sphere Trace Distance Field",
          "SDF Conculsion"
        ],
        "Mesh Distance Fields - MDFs": [
          "MDF Introduction",
          "Custom Structs and Enums",
          "Spawn on Distance Field",
          "Projected Forces",
          "Finalise Initial MDF System",
          "MDF Setup Linear Force",
          "MDF Avoid Surfaces",
          "NPC Setup",
          "Player Avoidance",
          "Time Based State Machines",
          "Fade Over Time and Conclusion"
        ]
      },
      "requirements": [
        "A good understanding of Niagara and Unreal (ideally finished the Introduction to Niagara Course)"
      ],
      "description": "Welcome back to part 2 of this Unreal Engine 5 Niagara Course - Advanced Niagara.  In this course we expand upon the topics we covered in Part 1 and start to utilise Data Interfaces to import data into Niagara from elsewhere in the engine.\nBy sampling:\nRuntime Virtual Textures,\nRender Targets, Collisions,\nTextures,\nMesh Vertices and UVs,\nSplines,\nPlayer Data,\nSigned Distance Fields and\nMesh Distance Fields\nwe're able to create very complex motions and interactions - fully expanding the Niagara Toolkit to create dynamic and interactive Systems.\nOver the course of 7.5 hours, all broken down into bite size 10-15 min videos, we cover everything mentioned above and more in this advanced deep dive into vfx and tech art.\n\n\nEach chapter contains many examples, full of handy comments, as well as a many corresponding video lectures that explains in full detail what is being done and why - so you're learning both the techniques being used and building up a base of  background knowledge of first principal concepts, allowing you to build up your own effects in future.\n\n\nWith industry standard practices from my 15 year career, including 5 years of teaching Game Art at a Masters Degree level, this course will cover all various uses of Particle effects and Renderers - this course will fully equip you to add some Visual Effects life into your realtime scenes in Unreal Engine 5.",
      "target_audience": [
        "Anyone looking to expand their abilities using Particle effects in Realtime and Games projects"
      ]
    },
    {
      "title": "Unreal Engine 5 Mobile Game Development For Beginners",
      "url": "https://www.udemy.com/course/creating-android-games-in-unreal-engine-5-using-blueprint/",
      "bio": "Unlock the power of Unreal Engine 5 and bring your mobile game development dreams to life with my comprehensive course.",
      "objectives": [
        "Create Your First Character With Animation And Inputs",
        "Create Virtual Joystick For Android Inputs",
        "Setup Simple Car Controller With Inputs",
        "Make Mini Map With Player Location",
        "NPC System For Crowd",
        "Car Traffic System",
        "In Game Mobile System",
        "Game Story System",
        "Game Graphic Settings",
        "Game Optimization For Android",
        "Export Game For Android"
      ],
      "course_content": {
        "Getting Started": [
          "Install Unreal Engine 5.4.1",
          "Create Blank Project In Unreal Engine 5",
          "Download All Content And Import Into Project",
          "Import Third Person Characters with Animations"
        ],
        "Setup ThirdPerson Character With Tuch Input": [
          "Create Character Blueprint Class",
          "Add input movement into the Character",
          "Add Look input into the Character",
          "Fix Character Forward movement",
          "Add Character Jump Input",
          "Add Virtual Joystick For Mobile",
          "Mobile SWIPE Controls Like PUBG Mobile"
        ],
        "Setup Animation Blueprint": [
          "Setup Idle Walk Run Animation",
          "Setup Jump Up & Falling Animation"
        ],
        "Add Low Poly Town Into Projects": [
          "Add Low Poly Town Into Projects"
        ],
        "Car Character Controller": [
          "Create Car Character With Inputs",
          "Create Car Animation",
          "Create Animation Blueprint With Animation Rules",
          "Fixing Turn Animation And Add Car Physic",
          "Car's Acceleration System",
          "Car Speed Meter UI",
          "Car Fuel System With UI",
          "Fix Car Brake System",
          "Setup Car Mobile Controller Forward Backward",
          "Setup Car Mobile Controller Left Right"
        ],
        "Third Person Character Widget": [
          "Create Third Person Character Widget BP",
          "Get In Car Using Widget Button",
          "Get Out From Car Using Widget Button",
          "Fixing Widget Issue"
        ],
        "Game Map System": [
          "Create Level Map Using Scene Capture Component",
          "Setup Mini Map Logic And Add To Game UI",
          "Create Main Map UI With Player Location",
          "Add Touch Input For Mini Map To Main Map Open Logic"
        ],
        "NPC System For Game": [
          "Create 1st NPC Ai That Will Roam Around In Level",
          "Create 2st NPC Ai That Will Roam Around In Level",
          "Create 3st NPC Ai That Will Roam Around In Level"
        ],
        "Car Traffic System": [
          "Create Ai Car With Movement",
          "Car Animation For Tire",
          "Dublicare Car Actor To Create Multiple Car",
          "Place Car Actor In City Level",
          "Place 2nd Car Actor In City Level",
          "Place 3nd Car Actor In City Level",
          "Place 4nd Car Actor In City Level",
          "Ai Car Stop On Ai NPC Overlap",
          "Add Nave Mesh Modifier To Block AI To Walk On Road",
          "Ai Can Take Damage On Hitting By Car",
          "Add Mini Map In To Car Widget"
        ],
        "In Game Mobile System": [
          "Create Mobile Ui With Animation",
          "Create Contact Page",
          "Transition Between Home To Contact Page",
          "Caller Screen And Home Button Setup",
          "Setup Caller ID System Using Macro",
          "Setup Location Marker Page",
          "Setup Calculate Distance System Actor",
          "Set Distance Calculate System Based On Location",
          "Save All Location In Array Variable"
        ]
      },
      "requirements": [
        "Example: No programming experience needed. You will learn everything you need to know"
      ],
      "description": "Welcome to \"Unreal Engine 5 Mobile Game Development For Beginners,\" your comprehensive introduction to the world of mobile game development using the powerful Unreal Engine 5. This course is meticulously designed for aspiring game developers, hobbyists, and anyone passionate about creating mobile games, regardless of prior experience. If you're eager to bring your game ideas to life and dive into the mobile gaming industry, this course is your perfect starting point.\n\n\nTarget Audience:\n\n\nAspiring Game Developers: Individuals looking to start a game development career specializing in mobile gaming.\nHobbyists and Enthusiasts: Gaming enthusiasts who want to turn their creative ideas into playable mobile games.\nProgramming Novices: Beginners with little to no programming experience interested in learning game development.\nIndie Developers: Indie game developers who wish to expand their skill set to include mobile game development using Unreal Engine 5.\nWhat You'll Learn:\n\n\n1. Introduction to Unreal Engine 5:\n- Understanding the basics of Unreal Engine 5.\n- Navigating the UE5 interface and toolset.\n\n\n2. Mobile Game Development Fundamentals:\n- Essential concepts of mobile game design.\n- Differences between mobile and other gaming platforms.\n\n\n3. Blueprints Visual Scripting:\n- Creating and managing Blueprints for game logic.\n- Implementing gameplay mechanics without extensive coding.\n\n\n4. Character and Environment Design:\n- Designing and animating characters for mobile games.\n- Building immersive environments optimized for mobile devices.\n\n\n5. UI/UX Design for Mobile Games:\n- Crafting intuitive user interfaces and experiences for mobile users.\n- Best practices for touch controls and screen layouts.\n\n\n6. Optimization for Mobile Platforms:\n- Techniques to optimize game performance on mobile devices.\n- Reducing load times and ensuring smooth gameplay.\n\n\n7. Testing and Debugging:\n- Testing your game on various mobile devices.\n- Identifying and fixing common issues and bugs.\n\n\n8. Publishing Your Game:\n- Steps to prepare your game for publication on app stores.\n- Understanding app store requirements and submission processes.\n\n\nCourse Outcomes:\nBy the end of this course, you will:\nHave a solid foundation in using Unreal Engine 5 for mobile game development.\nBe able to create, design, and deploy your mobile games from scratch.\nGain practical skills in Blueprints, character and environment design, and UI/UX for mobile platforms.\nUnderstand the optimization techniques necessary for mobile games to run smoothly.\nBe equipped with the knowledge to publish your mobile game on various app stores.\n\n\nRealistic and Achievable Goals:\nThis course ensures that all learning objectives are realistic and achievable, providing step-by-step guidance and hands-on projects to cement your understanding. Whether you aim to launch your first mobile game or simply acquire new skills, our structured approach guarantees that you will achieve your goals and feel confident in your game development abilities.\n\n\nEnroll now and start your journey into the exciting world of mobile game development with Unreal Engine 5!",
      "target_audience": [
        "Anyone interested in mobile game development"
      ]
    },
    {
      "title": "Unity 3D Horror Survival Game development Part 1(Inventory)",
      "url": "https://www.udemy.com/course/how-to-create-horror-survival-game-in-unity-c-part-1/",
      "bio": "Unity 3D Horror Survival Game development Part 1(Inventory)",
      "objectives": [
        "progarmming with C#",
        "work with unity",
        "design in 3D",
        "Create a full game"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "New Project Setup"
        ],
        "Player": [
          "Player Setup",
          "Player Look",
          "Player Movement",
          "Foot Step Sound",
          "Player Jump",
          "Player HUD",
          "Player HUD Script Part 1",
          "Player HUD Script Part 2",
          "Player Take Damage",
          "Game Scene first Level"
        ],
        "Inventory": [
          "Item Scriptable object",
          "Item Prefab",
          "Object Interaction",
          "Inventory UI",
          "Inventory Script Part 1",
          "Changing Inventory fonts",
          "Inventory Script Part 2",
          "Inventory Script Part 3",
          "Inventory Script Part 4",
          "Inventory Script Part 5",
          "Inventory Script Part 6"
        ],
        "Equip Items": [
          "Equip camera Items",
          "Equip weapons from inventory",
          "Equip Weapon Variable",
          "Weapon Animations",
          "Range Weapon Introduction",
          "Ammo Manager Script",
          "Creating Assault Weapon and Assault Ammo",
          "Improving Ammo System",
          "Sniper Weapon"
        ]
      },
      "requirements": [
        "Have a PC or Mac"
      ],
      "description": "Learn how to create and program your very own 3D Platformer game using Unity, an industry-standard game development program used by many large gaming studios and indie developers across the world.\nIn this course you won’t just be learning programming concepts, but tying these concepts to real game development uses.\nThis course has been designed to be easily understandable to everyone, so whether you’re a complete beginner, Or expand their game development range or a programmer interested in understanding game design, this course will help you gain a greater understanding of development.\n\nAt the end of this course you will have developed the ability to create such game elements as:\n\n\n\n\nFull 3D Character Movement\nUnity Installation and setup\nphysics\ncamera\nComplete Health System\nPlayer Attack system\nPlayer diffrent Weapon\nCamera Look System\nPlayer Jump\nScripting,Scripting and Scripting\nCreating basic horor survival  game\nand a tone more\nStart learning today and let me help you become a game developer!\nWho this course is for:\nAnyone who wants to make their own 3D games.\nPeople who want to create and publish their own games.\nComplete beginners with an interest in learning game development.\nDevelopers who want to re-skill across to game development.\nPeople interested in working in the game design industy.\nCompetent and confident with using a computer...",
      "target_audience": [
        "Intermediate to advance"
      ]
    },
    {
      "title": "Godot 2D Academy: Master 2D Games with Godot 4 and GDScript",
      "url": "https://www.udemy.com/course/godot-2d-academy-master-2d-games-with-godot-4-and-gdscript/",
      "bio": "Master 2D Game Development with the Latest Version of Godot and GDScript",
      "objectives": [
        "Master the latest version of Godot and its interface to create 2D video games from scratch.",
        "Write and understand code in GDScript, Godot's native programming language.",
        "Create four complete games, applying advanced mechanics and professional design techniques.",
        "Implement particle systems, visual effects, and optimizations to enhance the gaming experience.",
        "Develop movement and physics systems, including platforms, collisions, and dynamic behaviors.",
        "Work with animations and visual effects, using AnimationPlayer, particles, and shaders.",
        "Apply sound and music to improve game immersion."
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Important Notes"
        ],
        "Getting to Know Godot": [
          "Godot Home Page",
          "Godot Versions",
          "Install Godot",
          "Launcher Overview",
          "Godot UI Overview",
          "Configure Editor",
          "Configure Theme"
        ],
        "UPDATE: New Godot Versions": [
          "Godot 4.5 Beta 1 - 4",
          "Godot 4.5 Official"
        ],
        "GDScript: Variables and Operations": [
          "Creating Classes",
          "Variables and Operators",
          "Indentation and Scope",
          "Working with Strings",
          "Integrated Documentation",
          "Working with Booleans",
          "Static Typing",
          "Using Export",
          "Quiz: Fundamentals of Programming in GDScript"
        ],
        "GDScript: Conditionals and Loops": [
          "Conditional If",
          "Else Structure",
          "Ternary Operator",
          "Match",
          "Operator AND",
          "Operator OR",
          "Operator NOT",
          "ELIF",
          "Nested If Conditional",
          "While Loop",
          "For Loop",
          "For Loop Exercise",
          "GDScript Quiz: Logic & Flow Control"
        ],
        "GDScript: Arrays, Dictionaries, and Methods": [
          "Creating Arrays",
          "Iterating Over Arrays with For",
          "Exercise With Arrays",
          "Working with Dictionaries",
          "Methods",
          "Methods with Parameters",
          "Methods That Return Values",
          "GDScript Quiz: Loops, Arrays & Methods"
        ],
        "Flappy Bird Clone": [
          "Game Introduction",
          "Game Assets",
          "Create Project",
          "Create Player",
          "Delta and Physics Interpolation",
          "Create Main Scene",
          "Add Obstacles",
          "Obstacle Spawner",
          "Detect Collisions",
          "Apply Floor Scroll",
          "Add Score",
          "Create Game Over UI",
          "Save Score",
          "Add Sounds",
          "NEW: Fix Flickering Problem",
          "Section 7 Project"
        ],
        "Idle Tycoon Game": [
          "Game Introduction",
          "Game Assets",
          "Create Project",
          "Create Cashier",
          "Create Customers",
          "Instantiate Customers",
          "Items using Resources",
          "Move Customer to Counter",
          "Serve Customers",
          "Prepare Orders",
          "Complete Orders",
          "Add Particle Effects",
          "Sound Manager",
          "Create Upgrade Panel",
          "Show Upgrade Panel",
          "Upgrade Items",
          "Create Store Panel",
          "Buy in Store",
          "Apply Currency Format",
          "Create Options Panel",
          "Section 8 Project"
        ],
        "Platformer Game": [
          "Game Introduction",
          "Game Assets",
          "Create Project",
          "Create Player",
          "Move Player",
          "Create Level",
          "Using Layers",
          "Create First Obstacle",
          "Add Score with Fruits",
          "Challenge: Create More Fruits",
          "Add Floors",
          "Create First Enemy",
          "New Trap",
          "Checkpoint",
          "Add New Trap",
          "Creating Rhino Enemy",
          "Creating Platform Enemy",
          "Add Final Checkpoint",
          "Create Sound Manager",
          "Add UI",
          "Section 9 Project"
        ],
        "Top-down Game": [
          "Game Introduction",
          "Game Assets",
          "Create Project",
          "Create Player",
          "Add Crosshair and Camera",
          "Create Weapons",
          "Equip Weapons",
          "Pickup Weapons",
          "Create Projectiles",
          "Projectile Shotgun",
          "Shooting Effects",
          "Add Enemies",
          "Challenge: Add More Enemies",
          "Health Component",
          "Enemy Spawner",
          "Add Coins",
          "Waves of Enemies",
          "Apply Damage Material",
          "Damage Text",
          "Health Bar",
          "Camera Shake",
          "Vignette Effect & Point Light",
          "Section 10 Project"
        ]
      },
      "requirements": [
        "It is recommended to have a computer capable of running Godot 4.4 and internet access to download resources.",
        "A proactive attitude and a passion for learning and creating.",
        "No prior game development experience is required; the course is designed for beginners."
      ],
      "description": "Master 2D Game Development with Godot 4 and GDScript\nDo you want to learn how to create 2D games from scratch with Godot 4.4 and GDScript? This course is for you! Whether you're a beginner or have experience in game development, here you'll find everything you need to master Godot, one of the most powerful and growing tools in the industry.\nWhat will you learn in this course?\nGodot Fundamentals: Installation, setup, and use of the engine.\nGDScript from Scratch: Variables, conditionals, loops, functions, and more.\nCreation of 4 Complete Games with Cool Mechanics:\nFlappy Bird Clone – Physics, collisions, and scoring.\nIdle Tycoon – Resource management and upgrades.\n2D Platformer – Smooth movement, obstacles, and enemies.\nTopdown Shooter – Shooting, spawners, and visual effects.\nVisual Effects and Particles to bring your games to life.\nCollision Systems, Physics, and Event Detection.\nStructured Programming with Nodes and Inheritance.\nOptimization and Best Practices in Godot.\nAdditionally, you'll get access to:\nAll assets and resources used in the course.\nSource code for each game to download and compare.\nGodot is growing by leaps and bounds, and now is the best time to learn it. Become a professional game developer and create your own projects with Godot 4 and GDScript.\nEnroll now and take your passion for game development to the next level!",
      "target_audience": [
        "Anyone interested in 2D game development who wants to learn how to use Godot 4 and GDScript.",
        "Developers with experience in other engines who want to expand their skills and explore the capabilities of Godot.",
        "Programming and design students looking to apply their knowledge to practical and creative projects.",
        "Video game enthusiasts who want to understand the creation process and develop their own games."
      ]
    },
    {
      "title": "Create 2D Beat Em Zombie Up Game In Unity And C#",
      "url": "https://www.udemy.com/course/create-2d-beat-em-zombie-up-game-in-unity-and-c/",
      "bio": "Create 2D Beat Em Zombie Up Game In Unity And C#",
      "objectives": [
        "understanding a beat em up game system",
        "work with UI",
        "Scripting with c#",
        "Animation"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "New 3D Project",
          "Game Asset"
        ],
        "Player": [
          "Player Movement",
          "Player Jump",
          "Player Flip",
          "Camera Follow Player",
          "Player bounds",
          "Walking Animation",
          "Walking code",
          "Player Jump Animation",
          "Player Combo Attack Animation",
          "Jumping Animation",
          "Player Jump Kick Animation"
        ],
        "First enemy": [
          "First Enemy Animations",
          "Enemy Part 1",
          "Enemy Part 2 Walking",
          "Enemy Part 3 Taking Damage",
          "Enemy Part 4 Attck",
          "Enemy Hit Blood Effect"
        ],
        "UI": [
          "UI Health and Portrait",
          "UI Script",
          "Player Take Damage",
          "Enemy Spawner"
        ],
        "Boss enemy": [
          "Boss animations",
          "Boss Script"
        ],
        "Music & Sfx": [
          "Music Controller"
        ],
        "Health system": [
          "Healing item",
          "Player Lives",
          "Game over"
        ],
        "Background": [
          "go sign",
          "Background",
          "New Level Background"
        ],
        "Game Timeline": [
          "Game Timeline"
        ],
        "Main Menu": [
          "Main Menu UI",
          "Main Menu Script"
        ]
      },
      "requirements": [
        "need pc"
      ],
      "description": "Learn how to create and program a classic complete Beat em up Game in  Unity and C# .\nIn this course you won’t just be learning programming concepts, but tying these concepts to real game development uses. You will have access to a course forum where you can discuss the topics covered in the course as well as the next steps to take once the course is complete.\nAt the end of this course you will have developed the ability to create such elements as:\n1)How to make an UI Screen\n2)Options Menu with start and exit button\n3)Give a time line to the begining of your game or even mid or end of your game\n4)Adjust Graphics Settings in your games\n5)Menu\n6)How to make enemy\n7)enemy with AI system and fighting system\n8)make boss\n9)Sound system\n10)Player Health\n11)Animation combo attack\n11) and more...\n\n\nStart learning today and let me help you become a game developer!\nWho this course is for:\n1)Anyone who wants to create a UI system in Unity\n2)People who want to create and publish their own games.\n3)Developers who want to re-skill across to game development.\n4)People interested in working in the game design industy.\n5)Competent and confident with using a computer.\n6)and a lots of other things will be added soon to this project",
      "target_audience": [
        "beginners"
      ]
    },
    {
      "title": "Create a Procedural Jigsaw Puzzle Mobile Game from Scratch",
      "url": "https://www.udemy.com/course/mobilejigsaw/",
      "bio": "Take any image and turn it into an interactive, playable Jigsaw Puzzle! (Includes Photos taken from Camera)",
      "objectives": [
        "Learn how to turn any image into a Jigsaw Puzzle",
        "Improve your Algorithmic Thinking skills",
        "Learn how to create Procedural Meshes",
        "Learn how to Triangulate any set of ordered vertices into an actual, usable Mesh",
        "Learn how to add a Complex Mobile Input System to your games"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Making a Grid": [
          "The First Grid of Objects",
          "Scaling the Grid",
          "Splitting a Texture into Small Parts",
          "Refactoring our Code"
        ],
        "Moving the Puzzle Pieces": [
          "A Puzzle Controller",
          "Detecting the Pieces",
          "Moving the Pieces"
        ],
        "Z Sorting": [
          "The Logic",
          "Adding Z Sorting",
          "Always Pick the Top Piece"
        ],
        "Gameplay": [
          "Validating a Piece",
          "Puzzle World Size ?"
        ],
        "Camera Control": [
          "Panning",
          "Zooming"
        ],
        "Snapping with Neighbor Pieces": [
          "The Logic behind it",
          "Storing the Neighbors",
          "Detecting Neighbors",
          "The First Piece Group",
          "Validating Groups"
        ],
        "Rotations": [
          "Rotating a Piece",
          "Neighbor Snapping with Rotation"
        ],
        "Procedural Puzzle Pieces": [
          "What's the Magic behind it ?",
          "The First Procedural Mesh",
          "Leveraging the Ear Clipping Algorithm",
          "Adding the First Knob",
          "Adding More Knobs !",
          "Adding a Procedural Hole",
          "Random Procedural Piece Generation",
          "Setting Up the New Piece"
        ],
        "The Procedural Puzzle Logic": [
          "Creating a Fully Procedural Puzzle",
          "Adding Offsets to one Piece",
          "Matching Offsets in the Puzzle",
          "Adding UVs to the Procedural Pieces",
          "Puzzle Completed Logic"
        ]
      },
      "requirements": [
        "You need to have some basic C# skills",
        "Having taken one of my other courses is definitely an advantage",
        "Having a basic understanding of Actions & Events will definitely help"
      ],
      "description": "Hey Guys !\nI hope you are ready, because we are going to embark on a creative odyssey into the world of mobile game development with this comprehensive course on crafting procedural jigsaw puzzle games.\nDesigned for aspiring developers and seasoned enthusiasts alike, this immersive journey will empower you & help you bring an amazing Jigsaw Puzzle Mobile Game to life in no time.\n\n\nDive headfirst into the intricacies of procedural puzzle generation as I guide you through each step of the process. From laying the foundation with grid-based object creation to refining the aesthetics with custom shaders and stylization, you'll master every aspect of the development pipeline.\n\n\nKey Points We Will Tackle:\n\n\nGrid Formation: Learn the fundamentals of creating a dynamic grid system to lay the groundwork for your puzzle framework.\nTexture Slicing: The Tiling and Offset Material properties will be our best friends to seamlessly slice textures into individual puzzle pieces, fostering a cohesive gameplay experience.\nPiece Refinement: Elevate your puzzle pieces from simple quads to intricate game elements using Dreamteck Splines for realistic knobs and holes, along with the Ear Clipping Algorithm for precise triangulation.\nPhoto Integration: Explore the exciting realm of player engagement by enabling users to transform personal photos into captivating jigsaw puzzles, leveraging the capabilities of mobile device cameras.\nStylization and Shader Magic: Unleash your creativity with advanced shader techniques, allowing you to stylize photos and puzzles with unique palettes and effects that captivate players' imaginations.\nDynamic Outlines: Enhance puzzle visibility and player interaction by implementing dynamic outlines using vertex normals and procedural mesh generation, ensuring a polished and intuitive gaming experience.\n\n\nWhy Choose This Course?\n\n\nUniqueness: This course is the first of its kind, a combination of originality and practical examples that will help you create a unique, fully customizable Jigsaw Puzzle Game\nHands-On Experience: Dive into practical, project-based learning exercises that empower you to apply newfound skills in real-world scenarios.\nExpert Guidance: Benefit from expert instruction and personalized feedback from an industry professional with a passion for teaching and mentorship.\n\n\nWhether you're a novice seeking to break into the world of game development or a seasoned veteran looking to expand your skill set, this course offers the perfect blend of theory and practice to propel you toward success.\n\n\nJoin us as we unlock the limitless possibilities of procedural puzzle creation and embark on an unforgettable adventure in mobile game development.\n\n\nEnroll today and start crafting your masterpiece—one Puzzle Piece at a time.",
      "target_audience": [
        "Students pursuing a degree in computer science who want to gain practical experience in game development and programming",
        "Hobbyists or aspiring game developers interested in learning how to create mobile games as a hobby or potential career path",
        "Developers with experience in building other types of applications who want to branch out into game development and add mobile games to their portfolio"
      ]
    },
    {
      "title": "Learn to code in c# in unity 3d in 1 hour for beginners",
      "url": "https://www.udemy.com/course/learn-to-code-in-c-in-unity-3d-in-1-hour-for-beginners/",
      "bio": "Most of John Bura's courses are on sale for 9 dollars! https://www.udemy.com/u/johnbura/ Sale ends Oct 31 2013! Act now!",
      "objectives": [
        "To learn how to code in C# for unity 3D",
        "To learn good development practices"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Let's Learn Unity 3d": [
          "Course requirements",
          "Creating a new C# script",
          "C# in monodevelop",
          "Voids and adding voids",
          "Comments",
          "The start void",
          "The update void and the game loop",
          "Calling a void",
          "Variables and int variables",
          "Float variables",
          "Boolean variables",
          "String variables",
          "Building your code",
          "Calling variables within voids",
          "Variable scope"
        ],
        "Game objects and unity 3d": [
          "Adding in game objects to unity 3d",
          "Adding the script to the game object",
          "Rotating the cube",
          "Small test",
          "Public variables",
          "Vector 3",
          "If statements",
          "Else statements",
          "Else if statements"
        ],
        "Congratulations you finished": [
          "Conclusion"
        ]
      },
      "requirements": [
        "Unity 3D the free version",
        "A computer that can run Unity 3D"
      ],
      "description": "Learn how to code in C# for Unity3D. Unity 3D is best engine to make your brilliant game a reality and get it to market as quick as possible. Unity 3D is the best user friendly 3D engine on the market and if you want to learn how to command its power you have to learn how to code. This course will show you how to code in C# in 1 hour. This course shows you the basics of C# for Unity3D and it will tell you some fantastic software development tips that you can't get anywhere else. This course is the first course you need to take in order to get your game to market.",
      "target_audience": [
        "Complete beginners",
        "People who have not coded before"
      ]
    },
    {
      "title": "Unity 2017 - Character gear and weapon use",
      "url": "https://www.udemy.com/course/unity-2016-character-gear-and-weapon-use/",
      "bio": "Complete video training on how to build a weapon and gear system to pickup items and equip them on characters. With code",
      "objectives": [
        "work with Unity3D interface and monoDevelop programming interface",
        "use character with rigging system",
        "create sequences of life-like animations",
        "setup characters to allow weapon and gear equipping",
        "pickup items and equip them on"
      ],
      "course_content": {
        "Setup": [
          "Course and instructor overview",
          "Introduction",
          "Create prefabs for the equipment items",
          "Right and left shoulders and wearing gear"
        ],
        "Main character setup": [
          "Adding components to the player character",
          "Programming the character movement",
          "Character animator",
          "Tweaking walk animation",
          "Strafe sideways animations",
          "Attack animation"
        ],
        "Wearing gear and weapons": [
          "Understanding the character skeleton",
          "Equipping the weapon (part 1)",
          "Equipping weapon offset (part 2)",
          "Equipping a shield",
          "Equipping helmets and hats",
          "Equipping shoulder gear",
          "Loading gear and weapons from resources"
        ],
        "Exercises": [
          "Exercise 1 - buckle prefabs",
          "Solution to exercise - buckle prefabs",
          "Exercise 2 - Creating more gear prefabs",
          "Exercise 3 - New pair of shoulder prefabs"
        ],
        "Adding more characters": [
          "Adding the second character",
          "Adding gear hooks to the 2nd character",
          "Adjusting the 2nd player items"
        ],
        "Picking up items and equipping them": [
          "Picking up the sword item",
          "Programming the item pickup",
          "Fixing the position and rotation of equipped weapon",
          "Add text names on top of item to pickup",
          "Text LookAt method for orthographic and perspective cameras",
          "Programming logic to pickup correct item type",
          "Picking up the buckle item",
          "Logic to pickup shoulder pads",
          "Removing equipped item before equipping a new one",
          "Creating more pickup helmets and buckles",
          "Building sword and shield pickup items",
          "Quality of items and name tag colors epic, standard and legendary items",
          "Having 2 characters with 2 unique gears equipped",
          "Chaining attacks"
        ],
        "Conclusion": [
          "BONUS"
        ]
      },
      "requirements": [
        "have Unity3D installed on their computer (linux, PC or MAC)"
      ],
      "description": "Important: all software used are FREE to download and use on PC and MAC computers (no need to pay, cheers!)\nIn this course you will learn how to make a system to equip weapons and gears to characters.\nWhy would you want to learn how to build a system to equip items on characters? Because it's a very efficient way to create an engaging game where players love to explore the world you create to find legendary items and magic weapons and make their character more powerful and unique.\nAll the great games out there are using this system, look at Zelda, or World of Warcraft or MineCraft or even Star Wars.\nThis course can be taken by anyone even if you've got no programming skills or very little\nThis course is meant for non-artists, meaning you don't have to be an artist to be able to use 3D pixel art graphics.\nYou will learn how to use free tools to make an amazing game from scratch as I will show you every single line of programming and how to use Unity 3D to be able to make professional games all by yourself quickly and without having to spend money.\nYou will learn how to download and install unity 3D on Mac, PC or Linux.\nThen we will get to create a project, add levels and add characters to it. You will also learn how to animate your characters with life-like animations. You will learn how to create items such as swords, shields, shoulder pads and helmets and learn how to have your character pick them up and equip them on.\nNow, this course is meant to make things this super easy for you. All the steps are shown to you in the video lectures, so you cant possibly miss a step.\nThe skills you will learn in this course can be applied to so many more projects as they are the core foundations of any professional video games. Invest in yourself by joining this course now\nWhat are you waiting for. Let's get started.",
      "target_audience": [
        "students",
        "gamers",
        "mmo lovers",
        "graphic designers",
        "web developers",
        "game developers",
        "indie",
        "computer engineer",
        "software engineer"
      ]
    },
    {
      "title": "Create 3D FPS Survival Game in Unity",
      "url": "https://www.udemy.com/course/create-3d-fps-survival-game-in-unity/",
      "bio": "Create 3D FPS Survival Game in Unity",
      "objectives": [
        "programing with C#",
        "work with unity",
        "design in 3D",
        "Create a full game"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "New Project",
          "Project Setup",
          "Player setup",
          "Player Script Part 1",
          "Player Script Part 2 Movement",
          "Camera Look",
          "Player Jump",
          "Weapon Script part 1",
          "Create Bullet & Weapon Script Part 2",
          "Bullet polling",
          "First Enemy",
          "First Enemy Scripting Part 1",
          "First Enemy Chase Player",
          "First Enemy Facing toward Player",
          "Bullet Script",
          "Ammo &Health Pickup",
          "Pickup Script",
          "Ammo Health Rotation",
          "Particle System",
          "Particle System Script",
          "UI Screen",
          "UI Manager Script",
          "Game Manager Script Part 1",
          "Player Die Function",
          "Player Footstep",
          "Reverb Sound",
          "Dopper Effect",
          "Music Zone",
          "Music Zone",
          "Audio Mixer",
          "Volum Setting UI",
          "Music Volum Script",
          "Bullet Collider Problem Fixed",
          "Shoot and Pickup Sound",
          "Second Enemy Type",
          "Second Enemy Script part 1",
          "Second Enemy Script Part 2 Damage",
          "Second enemy Script Part 3 Take Damage",
          "Second Enemy Animation",
          "Enemy BLood Effect Track",
          "Environment",
          "Pickup Design",
          "Muzzle Flash",
          "Handgun",
          "Handgun Animation",
          "Blood Hit",
          "Enemy Chase Distance",
          "Adding Crosshair",
          "Take Damage Effect for Player",
          "Hurt Sound",
          "Menu Part 1",
          "Menu Part 2 Rotating SkyBox",
          "Menu Part 3 Zombies",
          "Menu Part 4 Menu Font",
          "Player Portrait",
          "Opening Door Part 1",
          "Opening Door Part 2",
          "New Zombies"
        ]
      },
      "requirements": [
        "Have a PC or Mac"
      ],
      "description": "Learn how to create and program your very own 3D Platformer game using Unity, an industry-standard game development program used by many large gaming studios and indie developers across the world.\nIn this course you won’t just be learning programming concepts, but tying these concepts to real game development uses.\nThis course has been designed to be easily understandable to everyone, so whether you’re a complete beginner, an artist looking to expand their game development range or a programmer interested in understanding game design, this course will help you gain a greater understanding of development.\n\nAt the end of this course you will have developed the ability to create such game elements as:\n\n\n\n\nFull 3D Character Movement\nUnity Installation and setup\nphysics\nEnemy Pathfinding\nbasic artificial intelligent\ncamera animation and cutscene\nAnimating Characters\nState-based Enemy AI\nFully-featured  Battles\nComplete Health System\nAudio system using Audio Mixer\nUnity's Cinemachine Camera system\nPlayer Attack system\nEnemy Attack System\nCamera Look System\nPlayer Jump\nScripting, Scripting and Scripting\nImporting Zombie Assets\nAdventure RPG game\nand a tone more\nStart learning today and let me help you become a game developer!\nWho this course is for:\nAnyone who wants to make their own 3D games.\nPeople who want to create and publish their own games.\nComplete beginners with an interest in learning game development.\nDevelopers who want to re-skill across to game development.\nPeople interested in working in the game design industry.\nCompetent and confident with using a computer...",
      "target_audience": [
        "Beginners"
      ]
    },
    {
      "title": "Multiplayer Racing Game Development in Unreal Engine 5 & C++",
      "url": "https://www.udemy.com/course/multiplayer-racing-game-development-in-unreal-engine-5-c/",
      "bio": "Master multiplayer networking, replication, and Steam integration to create a fully functional racing game in UE5",
      "objectives": [
        "Multiplayer Basics – Understand how multiplayer networking works in Unreal Engine 5 with C++.",
        "Steam Integration – Implement Steam’s Online Subsystem for hosting and joining multiplayer games.",
        "Session Management – Create, find, and manage public and private game sessions.",
        "Networking & Replication – Sync player actions, vehicle movement, and race events across clients.",
        "Custom Game Modes – Build a structured game flow with menus, lobby, race start, and finish logic.",
        "Vehicle Physics & Replication – Develop a fully replicated racing car with realistic physics.",
        "Remote Procedure Calls (RPCs) – Use RPCs and delegates for real-time multiplayer interactions.",
        "Multiplayer UI & Menus – Design a user-friendly menu for selecting cars, hosting, and joining games.",
        "Win/Loss System – Implement a race-winning system with real-time updates for all players.",
        "Optimization & Best Practices – Improve performance and reduce lag in multiplayer racing games."
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Course Update"
        ],
        "Multiplayer Basics": [
          "Multiplayer Concept",
          "Network in Unreal Engine",
          "Network Modes",
          "Replication",
          "Actor Replication",
          "Remote Procedure Calls",
          "Networking Tips",
          "Gameplay Framework",
          "IP Address",
          "Online Subsystem"
        ],
        "Create Multiplayer": [
          "Setup Project",
          "Game Plan",
          "Online Subsystem",
          "Multiplayer Sessions Subsystem",
          "Delegates",
          "Create Session",
          "Session Settings",
          "Find Sessions",
          "Lobby Map",
          "Joining Session"
        ],
        "Start Menu": [
          "Start Menu",
          "Start Menu Buttons",
          "FDelegateHandles",
          "Creating Custom Delegates",
          "Menu On Create Session",
          "Start Menu Game Mode",
          "Find and Join Delegates",
          "Find Sessions Function",
          "Start Menu On Find Sessions",
          "Start Menu Join Session",
          "Disable Game Buttons"
        ],
        "Car Mechanics": [
          "Setup Project",
          "Lobby Game Mode",
          "Multiplayer Play",
          "Number Of Players",
          "Generate Unique Session ID",
          "Custom Session Checkbox",
          "Session ID Box",
          "Session ID Display Actor",
          "Short Session ID",
          "Countdown Actor",
          "Countdown Widget",
          "Win Announcement",
          "Win Trigger Actor",
          "Detect Winner",
          "Winner Announcement",
          "Audio Components",
          "Play Sounds",
          "Idle and Engine Sound Update",
          "Accelerate Sound Update",
          "Update All Clients"
        ]
      },
      "requirements": [
        "Basic knowledge of Unreal Engine 5 and C++",
        "A PC capable of running Unreal Engine 5",
        "A Steam account for testing online features"
      ],
      "description": "Have you ever wanted to create your own multiplayer racing game? In this course, you will learn how to build a fully functional multiplayer racing game using Unreal Engine 5, C++, and Steam. We will cover everything from networking basics to advanced replication, custom session management, and Steam integration.\nBy the end of this course, you’ll have a complete multiplayer racing game where players can host and join online matches, race against each other with real-time networking, and experience a fully replicated gameplay system.\nWhat You Will Learn:\nMultiplayer game development with Unreal Engine 5 using C++ and networking\nSteam integration and the Unreal Engine Online Subsystem\nNetworking and replication to sync movement, collisions, and UI updates\nGame modes, session management, and creating custom session settings\nBuilding a user-friendly menu for hosting/joining games, and setting up races\nImplementing realistic vehicle physics and ensuring smooth replication\nUsing Remote Procedure Calls (RPCs) and delegates for efficient multiplayer interactions\nCreating a custom session system for players to share and join games\nSynchronizing vehicle sounds like engine start, stop, and race mode across the network\nDeveloping a winning system where the first player to reach the finish line wins\nMultiplayer optimization tips to improve performance and reduce lag\nWhy Take This Course?\nThis course follows a structured, hands-on approach, guiding you through the entire process of building a multiplayer racing game from scratch. You will learn industry-standard techniques in Unreal Engine 5, C++, and Steam to create fully networked gameplay. By the end of the course, you will have an advanced understanding of multiplayer networking, replication, session management, and game logic.",
      "target_audience": [
        "Game developers who want to learn multiplayer game development in Unreal Engine 5",
        "Intermediate Unreal Engine users looking to expand their C++ and networking knowledge",
        "Indie developers interested in building online multiplayer racing games",
        "Anyone wanting to learn Steam integration, replication, and networking in UE5"
      ]
    },
    {
      "title": "Rogue-Like In C# Programing & Unity 2D Game Development",
      "url": "https://www.udemy.com/course/masterclass-in-c-programing-unity-2d-game-development/",
      "bio": "Master Unity 2D Engine and C# Programing By Creating A Roguelike Game Using Modern Unity Development Technics",
      "objectives": [
        "Transfer everything you learn from this course into any programming language you choose. Like JAVA, JavaScript, Python, C++ and other object oriented languages",
        "Become a professional programmer by learning \"Version Control\" a tool used by expert engineers. Not only in game development but in all programming projects",
        "Learn the fundamentals of C#. Everything from variables, \"if\" statements and creating an object oriented structure. No prior programming experience necessary.",
        "Master the art of problem solving when it comes to game development. By understanding what obstacles you may face and the many ways to find solutions"
      ],
      "course_content": {},
      "requirements": [
        "A Working Computer or Laptop with minimum requirements to run Unity and Visual Studio (Which aren't too demanding)",
        "The desire and drive to learn how to create a fun and enjoyable game"
      ],
      "description": "This course is made with the latest content and newest technics used in modern Game Development\n\n\nThe best way to learn anything is by doing it in a really fun way and this is where this course comes from. If you want to learn how all these incredible games you see are made there is no better place to start than this course. We made sure that this course has everything you need to take you from a beginner (even with zero codding experience) and slowly take you to intermediate level\n\n\nI chose the main project in this course to be a 2D Roguelike because it not only has a vast library of game development concepts that we can implement and learn, but also because it's very simple (especially if you are a beginner) to delve in and get started on your game development journey.\n\n\nEverything in this course has been meticulously crafted, review and recrafted to provide you with the best experience possible and maximize your learning as much as possible. So not only will you have a great time learning you'll also get the most value by going away from this course with a lot of tools in your arsenal to continue you journey in the wild west of game development.\n\n\nSection 1: Introduction\nWe'll start off by downloading Unity and Visual studio. Installing them and making sure they work. We will then create our first code in C# and get used to Unity interface. Finally we'll talk about the game design of our game and what it takes to start creating a game from scratch\n\n\nSection 2: Setting Up Our World\nIn this section we are going to start learning what sprite sheets are and how to set them up. We'll learn what sorting layers are in Unity. We'll look into colliders and RigidBodies and add them to our game objects and see how it starts getting affected by physics. we'll learn how to animate our sprites. We'll even understand what blending trees that will greatly help us reduce difficulty of animating\n\n\nSection 3: Setting Up Shooting Mechanics\nIn this section we will be creating our players bullets, firing then in the direction out mouse is pointing, having a counter to create automatic firing and add impact effects to those bullets. While doing all of that we'll be learning about prefabs and instantiation and how to manipulate the world of our game to make it look much nicer\n\n\nSection 4: Setting Up Enemies\nThis section completed the previous one. We create our shooting mechanics but now we need something to actually shoot at. We'll be setting up our enemies and moving them towards the player. We'll delve deeper to animations by adding the to our enemy and the use methods, arrays and something called a Coroutine that will take us deep into C#\n\n\nSection 5: Creating Rooms (Tile map)\nUp to this point we used a pre-created image to represent the map. Those days are over and it's time for us to create our own map. We'll be introduced to tilemaps in Unity, add various colliders to it and learn about a mechanic in Unity that few know which is the Cinemachine. We'll also have our fair share of C# when we learn foreach loops, and Lists\n\n\nSection 6: Level Flow\nIn this section we will learn about the scene manager in Unity that will allow us to create multiple levels in our game and transition between them. Plus we'll learn a very tricky way to making sure we always arrive in the right position when moving through our worlds\n\n\nSection 7: Destructible Environment\nThis is One of the most fun section in the course. Every roguelike has a dashing mechanic and we are going to have ours as well. We'll add a tornado mechanic but not only will it make us invincible and a bit fast it will also destroy any \"destructible\" game object in our path\n\n\nSection 8: Advanced Shooting (weapons system)\nWhat's better than having a weapons to shoot with? Having a lot of them and being able to choose between them on the go, we'll be adding multiple weapons to our game. Each with their own using shooting style, speed and damage. With various bullets and firing rate for each. Not only that, we'll also make our camera shake whenever we shoot to add more weight to our game\n\n\nSection 9: Health System\nIn this section we'll be adding a player health system. We also visualize it by create a health bar that we can clearly see on a Canvas. We'll learn how we can update that health bar through script and add a cool death screen every time our player suffers a death. Finally we'll be adding spikes to the ground, once the player gets on them they will get hurt and lose a bit of that health\n\n\nSection 10: Pickups\nIn this section we'll delve into pickups. We'll be picking up weapons from the ground. Coins with which we'll be able to buy money in shops, health packs that once hurt we can go and pickup and we'll also add a chest that we can open and get a weapons from. A random weapons this is where our C# skills will be begin to come to fruition\n\n\nSection 11: Music & SFX\nTime to breath some life into this game adding sound effects and Music. Now our game goes from static to dynamic. We will add background Music and SFX. To each level and each interaction respectively\n\n\nSection 12: Multiple Enemy Types (Some should have melee attacks)\nWhat's more fun that having 1 enemy that can kill you? Having 4 different type of enemies that can kill you. We'll have the wanderer, the patroller, the scared enemy and the angry skeletal enemy. This section will be the foundation of our enemy AI and will open the doors for the way we'll implement our boss in the upcoming section\n\n\nSection 13: Shop & Money System\nNow that we pick up items, we want to sell them... for MONEY! who doesn't like money? we will introduce a monetary system so basically create an economy. We create a shop with a shop keeper inside and we'll be able to transact with him using the money we have to buy and the items we have to sell\n\n\nSection 14: Creating Menus\nEvery game HAS to have a main menu. But it also needs a dynamic main menu. We create a simple menu with a background. But the exiting part of this is the way we give the ability to our player to either continue from his last save or start a new game. We'll also be adding a Victory screen, a way to restart the level after death and a Pause/Resume mechanic\n\n\nSection 15: Boss Battles (Advanced Unity State Machine)\nIt's time for the really fun part here. We'll be create a boss fight fight. But not just any boss fight, this boss fight will be using a state machine. Which is also at the same time out animator. We'll be suing it to transition the boss from state to state, and in each one he will have a different set of attacks\n\n\nBonus Section 16: Room Generation (Advanced C# Object Oriented Programming)\nWe come to our final section where we will be creating multiple rooms each with it's fun little tweak on the game mechanics, we'll have a random enemy spawner. We'll have doors that are closed and that upon only once we destroy all the enemies in our desired level. And we will have an option to choose between 2 levels to go to after we kill everyone that's in here\n\n\nWhat You Will Learn In This Course:\nUse Visual Studio with Unity in a simple way\nHow to set a good Game Development environment\nUnity Engine are in a simple and comprehensive way\nThe Basics of C# in the most fun ways possible by creating a game\nUse player input to control the behavior of our game\nAdd different component to game objects\nAdd gravity and other forces to game objects\nMake game objects interact with each other in our game\nAdd sprite sheets and slice them up\nCreate Tile assets\nHow to create levels from our tile assets\nBecome a ninja problem solver and learn how to go step by step to solve any problem in Game Development and coding\nCreate animations",
      "target_audience": [
        "Aspiring Game Developers that don't know where to start when it comes to creating games.",
        "Young programmers who want to learn the basics of coding in a really fun way by creating their own games using Unity's very simple engine",
        "Someone who's looking to create a 2D Rogue Like Game and doesn't know how to do it easily and efficiently"
      ]
    },
    {
      "title": "Game Development Essentials with Unreal Engine 4 Blueprints",
      "url": "https://www.udemy.com/course/gde-unreal-engine-4/",
      "bio": "Create, design and develop your own game in Unreal Engine 4 without coding",
      "objectives": [
        "Game Development using Blueprinting in Unreal Engine 4",
        "Game Design using an industry standard methods",
        "3D Design Using Maya",
        "Create your first game during this course"
      ],
      "course_content": {
        "Introduction": [
          "Course Outline",
          "Introduction",
          "Software"
        ],
        "3D Design": [
          "Getting started with Maya",
          "Making our first model",
          "Texturing",
          "UV Mapping",
          "Exporting as an FBX for UE4",
          "Advanced Model",
          "Creating the Player Character",
          "Rigging the Player Character",
          "Using Mixamo for animating",
          "Enemy Character"
        ],
        "Game Design": [
          "Assets needed if you skipped the Maya section",
          "Project setup and UI",
          "Blueprints Explained",
          "Player Character and Gamemode",
          "Adding the player model and Materials",
          "Adding Player Animations",
          "Health and Stamina Pickups",
          "Adding Speed boost and High jump abilities",
          "Adding Ragdoll Death Animation",
          "Adding Slowmo Upgrade",
          "Adding the HUD",
          "Making a death screen",
          "Creating an obstacle that can deal damage",
          "Changing Sam's Eye color on Low Health",
          "Creating Sparks that stuns the player",
          "Creating Fire that damages the player",
          "Adding Interactive Obstacles",
          "Adding animated Platform and Obstacle",
          "Creating A win condition",
          "Creating the Enemy character",
          "Starting our first Level",
          "Finishing the Background",
          "Adding obstacles to our level",
          "Checkpoints and Respawns",
          "Creating the Main Menu",
          "Creating Sound and Music",
          "Polishing our game"
        ],
        "Publishing": [
          "Saving, compiling and building our game",
          "Lets get our game published on Itch"
        ]
      },
      "requirements": [
        "Computer capable of running Unreal Engine 4",
        "Download the Unreal Engine 4 launcher and update it to the latest version (Free)",
        "Download Autodesk Maya. Student accounts are available"
      ],
      "description": "This is a beginners course meant to help you get started as an indie game developer. This course is focused on using Unreal Engine 4 and coding with blueprints (Programming without code) but we also explain and explore some basics of designing and modeling in Maya. This course is a complete beginners guide and after this course you will be able to make your own game or sell your own assets. During this course you will develop your own platformer game and at the end I will also teach you how to upload your game on popular game platforms for feedback.",
      "target_audience": [
        "Inspiring Game Developers and Designers Looking for a starting point",
        "Beginner Game Developers and Designers Who wants to create their first game",
        "Beginner designers looking to get started with 3D Design for game development"
      ]
    },
    {
      "title": "Make your Dream Unity Digging Game Today with this Technique",
      "url": "https://www.udemy.com/course/unity-digging-game-using-marching-squares/",
      "bio": "Create a Quick & Easy Marching Squares Algorithm for any 2D Digging Game from Scratch!",
      "objectives": [
        "Learn how to create Objects from Code",
        "Learn how to use the Marching Squares Algorithm",
        "Learn how to Manage & Manipulate Scalar Fields",
        "Learn how to use Gizmos to Display Data",
        "Learn how to Decouple your Code Effectively",
        "Learn how to Create Structures to Enhance your Code"
      ],
      "course_content": {
        "Introduction": [
          "Explanation",
          "Displaying the First Vertices",
          "Our First Square !",
          "Exercise - Making a Diamond Shape",
          "The Square Configuration",
          "The Square Triangulation",
          "Interpolation Theory",
          "Interpolation",
          "Scalar Field Setup",
          "Adding Interactions",
          "Editing the Scalar Field",
          "Editing Multiple Grid Cells at Once",
          "Refactoring the Square Script",
          "The Square Grid",
          "It's Working !",
          "Final Polish"
        ],
        "Adding UVs": [
          "Displaying the First Texture",
          "Applying the Texture to A Square",
          "Applying the Texture to the Terrain Generator",
          "Scaling the UVs",
          "The Terrain Manager",
          "Applying the Texture to the Whole Terrain"
        ],
        "Bonus Section": [
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "Unity & Visual Studio installed",
        "Very basic Unity Knowledge"
      ],
      "description": "You !\nYeah, you!\n\n\nYou want to be a Better Developer right ?\nYou want to give more Creativity to your players, allow them to Shape & Carve Worlds ?\nYou want to be a bit Faster at creating worlds ?\n\n\nThen this course is for You!\n\n\nAstroneer, No Man’s Sky & Minecraft use Procedural Mesh Generation to create worlds.\nMobile games such as Sand Balls, Alto’s Adventure & Castle Raid are hit games, and also use the Marching Squares Algorithm to shape their levels & give more creativity to the player.\n\n\nThe potential behind these algorithms is Huge & is a big Time saver for developers like you.\nThis is why I decided to craft this course, so that you too, can learn how to create your own version of the Marching Squares Algorithm.\n\n\nTogether, we will do it Step-By-Step.\n\n\nWe will first learn how to Create a Procedural Mesh in Unity. You will understand the concepts of Vertices, Triangles and how to master them.\nAfter making a simple Square, we will add a bit more points to our Mesh and make a One Square Version of the Marching Squares Algorithm. This will allow you to fully master the concept.\nAfter Mastering the Square, we will create a simple Scalar Field (which is a fancy term for saying a field of values (I also explain in simple terms don’t worry, I hear you)).\nWe will be able to Display the Field of Values using Unity’s Gizmos system ( You might use that in almost any of your game to Debug stuff )\nAnd finally, we will Merge our two systems [ The Scalar Field - The Marching Squares ] to be able to create a Fun 2D Digging System.\n\n\nTime is precious, that’s why I decided to cover the aspects of this course in Under 3 Hours. You will be able to implement the system (and maybe make a quick 2D game if you’re hyped !) in less than a day.\n\n\nIf you ever need help, leave a comment and I’ll help asap ;).\nWanna start creating Procedural Worlds ? Click the Purple Button to your right !",
      "target_audience": [
        "Beginners eager to start learning about procedural worlds",
        "Procedural Mesh Generation Enthusiasts",
        "Advanced Devs who want to Improve their Skills"
      ]
    },
    {
      "title": "Unity Multiplayer Online Fps Game: Steam & Mirror Networking",
      "url": "https://www.udemy.com/course/unity-multiplayer-fps-game-1v1/",
      "bio": "No upper limit of players, unlimited. Multiplayer game development. Unity & Steam & Mirror Networking, Online games",
      "objectives": [
        "Making multiplayer games using Unity and Mirror.",
        "No CCU fees. Free unlimited CCUs.",
        "Using Steam to play with friends.",
        "Creating a working FPS game designed for 2 players without an upper limit of players!",
        "Creating a good looking and fundemental lobby to help matchmaking.",
        "Learning the principles of multiplayer game development.",
        "Writing codes for server and clients.",
        "Spawning players in the game scene, syncronizing player movement, first person basics like fps hands, syncronizing animations, respawning players",
        "Creating a good looking game environment."
      ],
      "course_content": {
        "Multiplayer FPS Game": [
          "Importing Mirror & Creating The Player",
          "Player Movement [Part 1]",
          "Player Movement [Part 2]",
          "FPS & Third Person Animations",
          "Health [Part 1]",
          "Health [Part 2] & Firing [Part 1]",
          "Firing [Part 2]",
          "Damage Indicator Text",
          "Environment",
          "Fixing The Animation Issues",
          "Weapons For FPS Hands And Third Person Model",
          "Death",
          "Respawning Players",
          "Round Over Panel",
          "Lobby UI",
          "Lobby Code",
          "Starting The Game",
          "Using Steam",
          "New Lobby Design",
          "Displaying Player Names"
        ]
      },
      "requirements": [
        "No experience needed. A little bit of Unity experience might help to understand better but is not necessary."
      ],
      "description": "Have you ever wanted to build your own multiplayer shooter games that are popular like CSGO, Valorant, Fortnite? You have came to the right place.\nIn this course, we will be covering multiplayer basics and some advanced stuff and this course is suitable for all levels.\nWe will be using Mirror and Steam together so you will be able to play with your friends.\nMirror is a free library for multiplayer game development and has no upper limit of players (unlimited CCU) so you can create your own multiplayer game and spend no money for the server. And since we are using Steam API for matchmaking, you won't spend any money on matchmaking as well. A lot of professional game developers are using this technique and it is quite useful for indie game developers, people who don’t have big budgets and beginners.\nThroughout the course, we will build a 2 player fps game and by doing so you will learn a lot of things like, creating a lobby, instantiating player in the game scene, synchronizing player movement and health, first person basics like fps hands, synchronizing animations, respawning players and a lot of other cool stuff.\nSo why don't you come and join me on this Multiplayer Game Journey?",
      "target_audience": [
        "This course is for people who want to create multiplayer games."
      ]
    },
    {
      "title": "Unreal Engine 5 for Beginners - Create your first game",
      "url": "https://www.udemy.com/course/unreal-engine-5-for-beginners-create-your-first-game/",
      "bio": "Everything you need to start in Unreal Engine: blueprints, animations, character, environment and more",
      "objectives": [
        "Unreal Engine 5 basics: levels, actors, components, collisions",
        "Blueprints from theory to practice (create 10+ blueprints)",
        "Animation - idle, walk, run and jump",
        "UI Widgets - for collectables (coins), trigger boxes and menu",
        "How to create a real 3D game in Unreal Engine and export it"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Unreal Engine Basics": [
          "1.1.1 Download and Install Unreal Engine 5",
          "1.1.2 Projects",
          "1.1.3 Demo Game",
          "1.1.4 Levels",
          "1.1.5 Assets",
          "1.1.6 Actor",
          "1.1.7 Collision",
          "1.1.8 Components"
        ],
        "Blueprints in Unreal Engine 5": [
          "1.2.1 Blueprint",
          "1.2.2 Blueprint Node Groups",
          "1.2.3 Practicing Blueprints p1",
          "1.2.4 Practicing Blueprints p2"
        ],
        "Animation for a character": [
          "3.1.1 Character and animation",
          "3.1.2 Import and Organize",
          "3.1.3 Logic, Even Graph",
          "3.1.4 State Machine",
          "3.1.5 Blend Space",
          "3.1.6 Connecting BS in State Machine",
          "3.1.7 Change Mannequin",
          "3.2.1 Jump Structure",
          "3.2.2. Download Animations",
          "3.2.3 Import and Logic for jump Unreal Engine 5",
          "3.2.4 Animation Transition for Jump",
          "3.2.5 Testing and Adjusting Animation Unreal Engine 5",
          "3.2.6 Press Key to See Animation"
        ],
        "Game Elements": [
          "4.1.1 Collectables - download model",
          "4.1.2 Project Setup Collectables",
          "4.1.3 Creating Blueprint for Collectables (coins)",
          "4.1.4 Collision and Logic for Coins",
          "4.1.5 Collectables Blueprint",
          "4.1.6 Change the Look",
          "4.1.7 UI Display the Score",
          "4.1.8 Binding in Widget",
          "4.2.1 Platforms - download model",
          "4.2.2 Import and Prototyping Platform game",
          "4.2.3 Basic Platform Blueprint",
          "4.2.4 Jumping Platform Blueprint",
          "4.2.5 Moving Platform",
          "4.3.1 Enable Double Jump",
          "4.3.2 Logic for Double Jump",
          "4.3.3 Find a 3D Model",
          "4.3.4 Blueprint Double Jump - Mesh",
          "4.3.5 Blueprint Double Jump - Event Graph",
          "4.4.1 Trigger Box to Restart Level",
          "4.4.2 Add a Trigger Box for win",
          "4.4.3 Add a UI widget",
          "4.4.4. Buttons for the widget"
        ],
        "Final Touches": [
          "5.1.1. Creating a Menu - Widget Design",
          "5.1.2 Menu - Widget Graph",
          "5.1.3 Menu Level",
          "5.1.4 Menu Level Blueprint",
          "5.1.5 Mouse Cursor",
          "5.1.6 Menu - add a background image",
          "5.2 Where to find assets for environment",
          "5.3.Creating a real game",
          "5.4 How to export your game"
        ],
        "Thank you!": [
          "Thank you!"
        ]
      },
      "requirements": [
        "No experience required, you'll learn everything in this course! All you'll need a computer to run Unreal Engine"
      ],
      "description": "So you want to learn Unreal Engine 5...\nWelcome to this course, where you step-by-step will be learning a lot! From basic things such as projects, actors, components to animation and blueprints.\nI hate when people just show a script and say - that’s how you do it. That’s why in this course, my goal is to explain how everything works so that you can use the elements you learned in different cases, modifying blueprints that you already know.\nBy the end of this course, you’ll be able to create your own platformer game, which can include:\ncharacter animation,\ndouble jumps,\ncollectables (coins),\njumping and moving platforms,\ntriggers  - and much more!\nYou’ll be able to program a menu for your game, using UI Widgets, and find free assets for your project. Moreover, you'll be able to export the game so that other people can play it.\nYes, this course is perfect for beginner game developers, but even if you want to use Unreal Engine for other things, you’ll find a lot of useful information here, like working with light, collisions and creating blueprints.\nMore than 5 hours of practical and not boring content - is ready for you to watch! So let’s dive in.",
      "target_audience": [
        "Beginner game developers who want to learn Unreal Engine 5"
      ]
    },
    {
      "title": "Create WebXR, VR and AR apps, using the Wonderland Engine",
      "url": "https://www.udemy.com/course/webxr-wle/",
      "bio": "Use the Wonderland Editor to bring immersive experiences, VR and AR, to the browser, including Meta/Oculus Quest",
      "objectives": [
        "Learn to create WebXR, VR and AR apps, using the Wonderland Engine",
        "Learn how to test your apps in the Meta Quest browser",
        "Learn to use the physics engine, PhysX",
        "Learn how to code Wonderland custom components",
        "Learn to create an installable PWA"
      ],
      "course_content": {
        "Introduction": [
          "Welcome to the course",
          "Getting Started with VR",
          "Connecting to a VR headset",
          "The History of WebXR",
          "The Wonderland Editor",
          "The VR Player Object",
          "Getting Started with AR",
          "Custom JavaScript components",
          "Fun with vectors",
          "Challenge 1",
          "What have you learnt?"
        ],
        "VR Solutions": [
          "Colliders",
          "Moving items with a controller",
          "Introducing PhysX",
          "CanvasUI for Wonderland",
          "Animation",
          "Navigating an environment",
          "Training",
          "Collecting a flash-light",
          "Using a weapon",
          "Challenge 2",
          "What have you learnt?"
        ],
        "Deployment": [
          "Uploading to a website",
          "Creating a PWA"
        ],
        "Sourcing and editing 3D assets": [
          "Sourcing 3D assets",
          "Blender Basics",
          "Blender Texturing",
          "Blender Animation"
        ],
        "Reference": [
          "The Wonderland API",
          "glMatrix",
          "Converting older projects to the new framework",
          "Useful links"
        ],
        "Conclusion": [
          "Summary",
          "Bonus lecture"
        ]
      },
      "requirements": [
        "Beginner level JavaScript is assumed"
      ],
      "description": "WebXR brings both VR and AR to the browser. The API has the massive forces of Google and Amazon behind it so it looks like immersive experiences, using only a browser, are going to make a huge impact in the near future. Meta are betting the company on its success. WebXR works great with Oculus headsets, including the Oculus Quest 2 and the Chrome Android browser is already supporting the API for both AR, Augmented Reality, and VR, Virtual Reality, experiences. But WebXR only harnesses the sensors on a mobile device and creates an agreed definition of how to use this data. To actually visualise 3D content you need an engine and in this course I show you how easy it is to create WebXR, VR and AR, apps using the Wonderland Engine.\nTo get the best from the course you will need to be comfortable with JavaScript coding. No other prerequisites are required.\nThe course is split into 6 sections.\nIntroduction - you’ll be introduced to the Wonderland Editor, create a simple VR app and a simple AR app and learn how to test your apps on a headset\nVR Solutions - teaches you the key features of a VR app; using physics, navigating an environment, adding a UI, picking up items with a controller and using the controller as a weapon.\nDeployment - learn how to upload your app to a live web server and discover how easy it is with the Wonderland Editor to create a PWA, a Progressive Web App that can be installed on your Quest 2 headset\nSourcing and editing assets - you’ll learn to source great models online and how to use Blender to prepare them for Wonderland.\nReference shows you how to get information about Wonderland components and how to use the 3D Math library glMatrix.\nConclusion - we review what you’ve learnt.\nThe only tools you'll need other than the Wonderland Editor are a code editor, in the course I use VSCode, freely available online and Blender for editing 3D assets. The course includes comprehensive resources and code examples. Each code example comes with two versions, one for you to code along with and another that is complete in case you hit a problem.\n\n\nIt’s going to be fun.\n\n\nYou get a 30 day money back guarantee, so you've nothing to lose, discover Wonderland today.\n\n\nWhat students say about the course\n\"I highly recommend this course on WebXR and Wonderland Engine to anyone looking to learn more about this exciting technology. The content is well-organized and easy to follow, making it accessible for both beginners and advanced users. The instructor provides clear and concise explanations, and the examples used throughout the course are both engaging and informative. Furthermore, the additional resources shared within the course are incredibly valuable and greatly enhance the learning experience. Overall, this is a fantastic course and I give it a 5-star rating.\"\n\n\nWhat students said about my Three.JS WebXR course\n\"This is by far the best guide to Three JS, nothing but fun and clearly explains the parts needed for a 3D app. Thanks Nik for taking the time on this! Can't wait to see where this course takes me!\"\n\"Thanks for creating the course\" - Mr Doob, the creator of Three.JS\n\"We all Nik fans were waiting for this one when he previously announced it in the Facebook group. And he didn't disappoint us.\"\n\"Love it so far! The lessons are concise and to the point. The videos' length seems quite optimized, meaning they are not terribly long yet are filled with just enough information about what's going on. The supplied course project files constitute a valuable facilitation on the way through the course.\"\n\"It starts with the basics and then progresses to advanced topics. I like the pace and the explanations. Great course!\"\n\"Great course, love the well-chosen examples, just what I needed!\"\n\"Excellent course, it took me by surprise how well documented and the high quality content from Nicholas , highly recommended. Cheers!\"",
      "target_audience": [
        "Beginner and Intermediate level developers wanting to learn an easy way to create WebXR apps"
      ]
    },
    {
      "title": "Unity C# Mobile Game - Make your own Hole Game from Scratch!",
      "url": "https://www.udemy.com/course/unity-stencil-buffer/",
      "bio": "Learn how to use advanced techniques to create a 3D Hole mobile game in Unity with C# !",
      "objectives": [
        "How to create Holes in any mesh without changing its geometry",
        "How to use the Stencil Buffer like a Pro",
        "How to add Physics for a convincing hole effect",
        "How to create a Mobile Joystick-Like Control from scratch"
      ],
      "course_content": {
        "Introduction": [
          "Project Setup",
          "The Stencil Buffer",
          "Making the Hole real",
          "Improving the Hole Model",
          "Cute Graphics Improvements",
          "Adding a Joystick-Like Control",
          "Camera Follow",
          "Hole Wants To Grow 1/2",
          "Hole Wants To Grow 2/2",
          "Project Files"
        ],
        "Adding Sweet Player Features": [
          "Adding a Fill Circle Outline",
          "Using a Tweening Library for Polish",
          "Animating the Player Size",
          "Adapting the Camera to the Player Size",
          "Adding a Timer to the Player",
          "Preventing the Player from Moving",
          "Adding a Game Manager to Control Everything !"
        ],
        "Some UI & Player Upgrades": [
          "The UI Manager",
          "The First Upgrade Button",
          "Setting Up the Upgrades Buttons",
          "Upgrades Are now Functionnal !",
          "Saving the Upgrades",
          "Configure Upgrades Prices",
          "Saving Player Upgrades",
          "Adding Coins !",
          "How to manage our coins ?",
          "Project Files"
        ],
        "Bonus Section": [
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "Be familiar with the Unity Game Engine",
        "Have some basic C# knowledge",
        "The Will to Learn some amazing tips & tricks"
      ],
      "description": "Hey there! Have you always wanted to add holes to your mobile game ?\n\n\nNo?\n\n\nWell, me neither, but trust me, it's a HOLE lot of fun!\n\n\nIn this course, you'll learn how to add those satisfying black holes to any mesh without messing with its geometry. No need to worry about stuff like vertices, triangles, faces, or any complicated algorithms.\n\n\nI’ll teach you how to use the Stencil Buffer like a pro to achieve that perfect hole-y effect.\n\n\nBut wait, there's more! We'll also add some Physics to make sure everything falls smoothly into your new holes.\nPlus, I'll teach you some neat tricks to make the illusion work like a charm.\n\n\nAnd that's not all! To make things even cooler, I'll show you how to create your very own joystick control. Because who wouldn't want to be in control of the black hole that swallows everything?\n\n\nFinally, we are going to use some cute kawaii graphics to make the course more enjoyable. For the occasion, I've specially crafted a Frog-Shaped Hole. You'll definitely find it cute (I hope so at least)\n\n\nSo, what are you waiting for? Grab this course before it's too late and get ready to level up your game dev skills!\n\n\nEnroll Now !",
      "target_audience": [
        "Aspiring devs who want to spice up their mobile game",
        "Aspiring game creators who want to grow their skillset"
      ]
    },
    {
      "title": "Adding Blockchain to a Unity Game",
      "url": "https://www.udemy.com/course/adding-blockchain-to-a-unity-game/",
      "bio": "Add wallet and NFT integration to a Unity Game using the NEAR blockchain",
      "objectives": [
        "Blockchain integration using the NEAR blockchain",
        "Signing in with a NEAR Wallet",
        "NFT integration",
        "Creating a Mint Site",
        "Creating and deploying a smart contract"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Prerequisites",
          "Don't miss the downloads!"
        ],
        "The NEAR blockchain": [
          "Creating a Mint Site",
          "Create an NFT Smart Contract"
        ],
        "Unity and the Blockchain": [
          "Unity Intro",
          "NFTs in Unity"
        ]
      },
      "requirements": [
        "Some C#, Unity and JavaScript experience would be beneficial"
      ],
      "description": "In this course you will learn how to integrate the NEAR blockchain into your Unity game. NEAR wallet integration is covered, so you can sign in & sign out of your NEAR wallet within Unity. Also, in Unity you will be able to connect to an NFT smart contract and retrieve any NFTs that the signed in user has. Additionally you will be shown how to create your own mint site where you can mint new NFTs and have them displayed on the website when they are successfully minted.\nAnd.. I will go through how to create your own NFT smart contract and deploy it to the NEAR blockchain so you can use that newly created smart contract in your game!\n\n\nWhat will you do in the course:\nCreate a NEAR wallet\nImport a Unity package\nIntegrate the NEAR wallet into Unity\nIntegrate NEAR NFTs into Unity\nCreate a mint site\nDeploy a smart contract\n\n\nWhy learn with me?\nI’ve been building in Unity for over 10 years, created numerous plugins, VR/AR experiences and games. My most successful game had 1.4 million downloads. I've deployed VR solutions into US hospitals and am currently working on a blockchain game called Rogues.\n\n\nHopefully I'll see you in the course!",
      "target_audience": [
        "Game developers interested in incorporating blockchain functionality like NFTs into their game"
      ]
    },
    {
      "title": "Create a Mobile Puzzle Game Like Match Factory in Unity",
      "url": "https://www.udemy.com/course/unity-match-mobile-game/",
      "bio": "Recreate Match Factory in Unity – Build a Fun, Addictive Puzzle Factory Game from Scratch!",
      "objectives": [
        "Create fun mechanics like found in Games such as Match Factory",
        "Learn to design and implement core game mechanics for casual and hypercasual mobile games.",
        "Understand how to create simple yet engaging systems.",
        "Apply best practices to optimize performance and user experience in mobile games.",
        "Learn how to implement user-friendly interfaces for mobile game mechanics and systems."
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Project Setup"
        ],
        "The First Inputs": [
          "Detecting Clicks on Items",
          "Moving an Item to a Spot",
          "Better Input",
          "Adding a Basic Outline",
          "More Items & More Spots",
          "Using More Spots"
        ],
        "In-Depth Input": [
          "Understanding the Logic",
          "Handling the Route",
          "We've Found the ItemMergeData",
          "Merging the Items",
          "Moving the Items to the Right",
          "Moving Items to the Left",
          "Actions as Arguments",
          "Animating the Items",
          "We Start Merging the Items",
          "Merging the Items"
        ],
        "Setting up our Goals": [
          "Starting the Item Placer",
          "Placing the Items",
          "Getting the Goals",
          "The Level Manager",
          "Adding a Goal Manager",
          "The Goal Card",
          "Spawning the Goal Cards",
          "Better Items & The First Icon",
          "Adding Icons to Items",
          "Animating the Goal Card"
        ],
        "The Core Loop": [
          "The Game Manager",
          "The UI Manager",
          "Completing the Core Loop"
        ],
        "More Features": [
          "Adding a Timer"
        ],
        "The Powerups": [
          "The Vacuum Logic",
          "Adding The Vacuum Model",
          "Animating the Items",
          "Detecting Clicks on the Powerups",
          "Updating the Visuals",
          "Better Item Movement",
          "Spring Powerup",
          "Fan Powerup",
          "Freeze Powerup"
        ],
        "Extra Section": [
          "Project Files"
        ],
        "Bonus Section": [
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "Willingness to learn and experiment with simple game mechanics and systems.",
        "Basic Unity knowledge, it's highly encouraged to have taken one of my previous beginner courses before this one."
      ],
      "description": "Hey there !\n\n\nBuild Your Own Addictive Puzzle Mobile Game in Unity!\nAre you ready to create a game like Match Factory and learn valuable Unity skills in the process? In this course, you’ll build a fully functional match puzzle game from scratch — no prior game dev experience required! (If you have a bit of experience, it's better of course :))\n\n\nWhat You’ll Learn:\nHow to set up a smooth Match-Factory like control\nImplement matching logic, combos, and satisfying effects\nDesign and polish fun, colorful levels like in the original Match Factory game\nCreate interactive UI, menus, score systems, and progression\nOptimize for mobile and test on a real device\n\n\nBy the end of the course, you'll have your very own working puzzle game that you can expand, customize, or even publish to the Play Store!\n\n\nWhy This Course?\nHands-on project from A to Z\nFocus on fun, casual game mechanics\nPerfect for indie devs, students, or hobbyists\nLearn production-ready Unity techniques that you can reuse in other projects\n\n\nWhether you want to launch your own mobile game or simply level up your Unity skills while building something exciting, this course is for you!\n\n\nLet’s start building this amazing game today!\n\n\nP.S.: The course is still in the making but will be complete very soon ! :)\nP.S. bis: You will find the source code and all the assets used attached as resources.",
      "target_audience": [
        "Aspiring game developers interested in building casual and hypercasual mobile games.",
        "Indie developers looking to enhance their understanding of game mechanics and systems.",
        "Hobbyists and enthusiasts curious about how to create engaging gameplay with minimal resources."
      ]
    },
    {
      "title": "How to create a mobile game for iOS with Unreal Engine 4",
      "url": "https://www.udemy.com/course/how-to-create-a-mobile-game-for-ios-with-unreal-engine-4/",
      "bio": "Learn step by step, how to set up, create and publish a mobile game for iOS with the Unreal Engine 4.",
      "objectives": [
        "Go through the whole process of creating an iOS game until it is published on the app store.",
        "Set up everything to get started as an Apple developer.",
        "Learning more about blueprints in Unreal Engine 4.",
        "Learn how to publish your app on the app store.",
        "Learn how to use Testflight to let other people test your App.",
        "Learn how to set up In app purchases.",
        "Learn how to implement game center features like a leaderboard.",
        "Learn how to program a highscore based game, in which you fly a spaceship through an endless world on a iOS device, controlled by your finger."
      ],
      "course_content": {
        "Introduction and Setup": [
          "Introduction",
          "Set up as an apple developer and launch a blank UE4 scene to your iOS device."
        ],
        "Programming the game": [
          "Create static meshes and program a simple flight system.",
          "Program an endless world and set up collision.",
          "Setting up a save system and create a HUD."
        ],
        "Add in app purchases and game center leaderboards.": [
          "Setting up in app purchases.",
          "Setting up a game center leaderboard."
        ],
        "Publishing your app on the app store and Testflight": [
          "Setting up Testflight to let other people test your game.",
          "Publish your game to the app store."
        ]
      },
      "requirements": [
        "You need to be willing to enroll in the Apple developer program, that costs 99 USD per year.",
        "You need a Mac to follow 100% along. All the stuff I do in the Unreal Engine 4 you can also do on Windows. Although you can't package and upload your game to the app store.",
        "It is of advantage to have some basic knowledge about the Unreal Engine 4 and its blueprint system. (Although you can also follow the instructions without pre-knowledge)"
      ],
      "description": "Go through the whole process of creating an iOS game until it is published on the app store.\nLearn how to become an apple developer and start programming with the Unreal Engine 4. Test your game directly on your iOS device, or share it with friends on Testflight.\nLearn how to set up all the features that a good mobile game needs, like in app purchases and leaderboards.",
      "target_audience": [
        "Beginner Unreal Engine 4 developers curious about making their first game for iOS.",
        "People who want to release their own game on the App Store."
      ]
    },
    {
      "title": "#1 Unity Hyper Casual Cricket Mobile Game using C#",
      "url": "https://www.udemy.com/course/unity-cricket-mobile-game/",
      "bio": "Create your very First Cricket Game & Monetize it with Unity Ads !",
      "objectives": [
        "How to make an advanced Cricket Game",
        "How to track & fix bugs",
        "How to setup your project for mobile",
        "How to get / make the assets you'll need for your Game",
        "How to Switch between scenes & manage Transitions",
        "How to add a bit of Polish to your game"
      ],
      "course_content": {
        "Setup": [
          "Drawing the Pitch",
          "Creating the Field"
        ],
        "Let's Start Bowling !": [
          "Adding the Bowler Model",
          "Importing the Bowler Animations",
          "Animating the Bowler",
          "The Bowler is Running !",
          "The Bowler is now Throwing !",
          "Adding a Throw Transition",
          "A Fake Ball ?",
          "We Setup the Ball Launcher",
          "Some Ball Launcher Maths, nothing really complicated",
          "Now the Bowler Launches the Ball",
          "Bowler Target Movement",
          "The Bowler Cameras",
          "The Bowler Manager",
          "The Bowler Camera ! The real one !",
          "Aiming UI",
          "Creating Graphics for the Power Slider",
          "Power Slider Logic",
          "The Bowling Logic",
          "Some Speed Conversions",
          "Determining the Bowler Shoot Speed"
        ],
        "Stumps & Bails": [
          "Creating the Stump",
          "Creating the Bail",
          "Adding Colliders to the Stump",
          "Anchoring the Stump to the Ground",
          "Setup the Stumps and Bails"
        ],
        "The Super Duper AI Batsman": [
          "We Setup the AI Batsman",
          "Adding some AI Batsman Animations",
          "Fixing some Animation issues",
          "The AI Batsman follows the Target",
          "Improving the AI Batsman Brain",
          "The AI Batsman now hits the ball !",
          "Time Management for the AI Batsman"
        ],
        "We have a Better Ball": [
          "Ball Detection 1 / 2",
          "Ball Detection 2 / 2",
          "Better Ball Detection for the AI Batsman",
          "The Ball Camera"
        ],
        "Graphics Enhancements": [
          "Using Shader Graph for the Field 1 / 2",
          "Using Shader Graph for the Field 2 / 2",
          "Water & Camera Colors"
        ],
        "Bowling Improvements": [
          "Local Score UI",
          "The Ball Script (we needed one)",
          "The Local Score Manager",
          "Some Small Ball Improvements",
          "How to set the Next Over ?",
          "How to detect Ball Misses ?",
          "Detecting Stump Hits"
        ],
        "The Batsman Scene": [
          "We Setup the Batsman Scene ! Hurray !",
          "Player Batsman Setup",
          "Player Batsman Moves now !",
          "Player Batsman Hits the Ball 1 / 2",
          "Player Batsman Hits the Ball 2 / 2",
          "We setup the AI Bowler now, Cool !",
          "The AI Bowler can now Aim properly !",
          "The Batsman Manager",
          "The AI Bowler learns how to Throw the Ball !",
          "The Batsman Camera"
        ],
        "Main Scene & Setup": [
          "Main Scene Setup",
          "We Create the Game Manager",
          "The Logic behind the Game Manager",
          "The Score Manager",
          "Switching between Game Modes",
          "End Game Logic 1 / 2",
          "End Game Logic 2 / 2",
          "Fixing the Play Button"
        ],
        "Transitions & Score Display": [
          "The Menu Transition Setup",
          "The Menu Transition Logic",
          "Adding In Game Transitions",
          "Fixing In Game Transitions, very quickly...",
          "Adding Score to Transitions",
          "Transition Score Logic",
          "Adding Score to the End Game Panels",
          "Adding Logic to the End Game Scores"
        ]
      },
      "requirements": [
        "Determination",
        "Positive Thinking",
        "Focus"
      ],
      "description": "In this course, you will learn how to make a cool and fun Hyper Casual Cricket Mobile Game!\n\n\nTogether, we will go through the various processes used in Mobile Game Dev to bring your ideas to life.\nWe will Create a Complete, Fully Functional, Ready to Publish game in less than 13 hours.\n\n\nBy taking this course, you will learn how to:\nCreate a similar game by yourself\nAnimate Hyper Casual 3D Models\nControl any object with your fingers (on the phone of course, you're not an X-Men)\nDetect Simple Collisions and apply a certain Logic\nControl the flow of your game !\nMake Managers ! Like in the real life that will help you control the flow of your game\nCreate UI Elements\nAdd Currency into your game\nDetect more complex collisions\nUse & Experiment with Shader Graph\nImplement Unity Ads and add Rewarded Videos\n\n\nThis is only a small overview of what you'll learn, there is so much more in the course, it's 13 hours of Content !\n\n\nThe most important thing is that you'll learn, A LOT ! And if you happen to have any questions, I will take your hand and Help until you clearly understand why I wrote or did this instead of that.\nI want YOU to learn because Making Games is Easy & Fun :)\n\n\nSo if you want to impress your friends, have a good time making your own game, self publish your game and make money, publish the next Hit game with a big publisher, or just add a bunch of information to your brain's knowledge database, this course is for you!\n\n\nDon't wait anymore, and Enroll Now !",
      "target_audience": [
        "Aspiring game devs willing to make their own mobile game",
        "Cricket fans desiring to create a fan game"
      ]
    },
    {
      "title": "ROBLOX Game Development: UI Essentials in ROBLOX Studio Lua",
      "url": "https://www.udemy.com/course/roblox-game-development-ui-essentials/",
      "bio": "Learn the basics of UI on ROBLOX so that your player has great experience in your games! Grow your UI skills through UI",
      "objectives": [
        "Animation of UI Objects through the TweenService",
        "Connect the front-end (UI) to the back-end (Server) through secured ROBLOX Connections",
        "Complete explanation about the usage of each ROBLOX UI Object",
        "Identify & Manage the use case of Notifications",
        "Strong integration to other UI Elements through ModuleScripts"
      ],
      "course_content": {
        "Design Concepts": [
          "Rules to make Awesome User Interfaces",
          "Tips to Make More Portable Designs",
          "ROBLOX UI Objects",
          "UI Programming notes"
        ],
        "UI Lessons": [
          "The Usage of Containers",
          "Creating Left Side Buttons",
          "TweenService - Tweening For Animations",
          "Display a player's certain currency through UI",
          "Custom Smooth Health Display UI"
        ],
        "Connecting to Server": [
          "Teleport Button",
          "Sending Notifications to the Player",
          "Converting the NotificationReceiver into a ModuleScript"
        ],
        "Conclusion": [
          "Bonus Conclusion!"
        ]
      },
      "requirements": [
        "Basic experience in the ROBLOX Lua programming language"
      ],
      "description": "You're looking to make your first game, but yet you've started working on it and it feels empty and boring... right?\nWell, the boringness of a Roblox game can be explained by the User Interface shown to the player,\nand the fact that you're here proves that you're looking to make a great ROBLOX Game.\n\n\nHaving GREAT User Experience is key to making some good robux.\nYou have to make your game look sleek & easy in order to drive up player engagement, which would give you more robux in return.\n\n\nIn this course we'll see multiple aspects of ROBLOX Game Development, from UI Essentials to the ROBLOX LUA you'll need.\nThe only thing needed is a base understanding of ROBLOX Lua programming language.\n\n\nIn the course I'll assume that you know the basics of ROBLOX Lua programming, and so I will show you new things aswell as more advanced methods (such as TweenService and the ModuleScript) in a simple but yet effective way.\n\n\nTogether we're gonna see:\nUI Essentials Theory\nMenus, Buttons & Currency Displaying\nCreating and playing UI Animations easily\nCustom Health & XP Bars\nManaging Buttons on the Server\nSimple usage of the ModuleScript\n\n\nWhen you're ready, enroll now and let's work on upgrading your ROBLOX game's look.",
      "target_audience": [
        "ROBLOX Developers looking to make Robux through Monetized User interfaces",
        "Beginner ROBLOX Developers looking to make good User Experience"
      ]
    },
    {
      "title": "Games Tester How To Become A Professional",
      "url": "https://www.udemy.com/course/how-to-become-a-game-tester/",
      "bio": "Equip yourself with knowledge to become a full time games tester and get paid todo it.",
      "objectives": [
        "Discover the hidden places where aspiring games testers don't look",
        "Attend games interviews with confidence",
        "Get a deep understanding of where games testers fit in the games development lifecycle",
        "Get a deep understanding of How Games Testers Operate"
      ],
      "course_content": {},
      "requirements": [
        "Students should know how to play a computer game"
      ],
      "description": "Having spent 2 years in the games industry as games tester & been Credited In Over 4 third generation console titles (has revealed a lot to me) when I first started out there is still a distinct lack of knowledge out there -- especially on what a games tester actually does & for that reason I was compelled to create this course.\n\nIn this course I will share with you The Cumulation Of All My Knowledge I have acquired as a games tester & there will be nothing held back from you.\nUnderstand what Games Testing is & what will be required of you\nGain a deeper understanding of the games industry\nUnmask the Secret Games Testing Profession\nFind out how to Earn Real Money doing what you love\nDownload the resources you need to find where the REAL Games Tester Jobs are found\nLearn the different types of games testing jobs & Which Will Suite You\nIf you are serious about becoming a games testers & want to know if your up to the task, then whats a better to learn all about it than from Someone That Has Actually Been In The Profession.",
      "target_audience": [
        "People who live, sleep and eat computer games",
        "People who want to break into the games industry as career",
        "People who want to be enlightened on what games testers do"
      ]
    },
    {
      "title": "Roblox Create A Crop Farming System",
      "url": "https://www.udemy.com/course/roblox-create-a-crop-farming-system/",
      "bio": "An intermediate coding course that expands on basic coding concepts taught in my beginner and intermediate courses.",
      "objectives": [
        "Import the project model, and organise the project ready to start.",
        "Use the changed event to update the GUI whenever the gold value changes.",
        "Create a functions module script, and add a function to display feedback to the player.",
        "Change the colour of the plots as they progress through their stages of growth using a variable called State.",
        "Code the Rake, Bucket, and Seed Bag tools to use on the farm and grow crops.",
        "Create a sunflower, pumpkin and corn seed to grow on the farm.",
        "Add all the details about your crops to the seed module script.",
        "Create conditional statements that guide the player to equip and use the right tools to get the job done.",
        "Allow the player to collect water from the well to water the crops on the farm.",
        "Create a special GUI that allows you to see your variables change during the game, and adjusts itself as you increase or decrease the number of variables in the",
        "Create a start game script that gives each player their own farm.",
        "Begin to develop a GUI that will hover above the ground showing the player which seeds they can plant, and allow them to click on a button to plant the seed.",
        "Create a button for each seed that the player has in their inventory.",
        "Write some code to get all the info about a seed from the seed dictionary and place it into the plot the seed is being planted in.",
        "Spawn the correct plant and assign it to the plot ready to grow and harvest.",
        "Use ray casting to change the colour of anything you click on in the project.",
        "Use ray cast parameters to change the behaviour of the plot as we move it around in the workspace.",
        "Stop players colliding with other players, and plots colliding with players allowing for smoother game play.",
        "Let your players buy new seeds when they have made enough gold.",
        "Test the game using 2 farm models and creating a 2 player test server in Roblox Studio.",
        "Create a data store for each player using the data module you create.",
        "Restore player saved data back to the game when they return.",
        "Make adjustments to the user input script that will create mobile buttons for players using touch enabled devices allowing them to play the game on phones, and",
        "Create a module script and an animation controller script to handle all the animations you might use in your project.",
        "Create an animation of the player collecting water from the well using the bucket, and also watering the plants from the bucket.",
        "Create an animation of the player jumping in the air when harvesting their crops."
      ],
      "course_content": {},
      "requirements": [
        "Complete course 1 - Learn How To Code Games In Roblox Studio",
        "Complete course 2 - Roblox Intermediate Coding Course",
        "A file decompression tool such as WinZip (Windows) or Archive (Mac)",
        "A Roblox account and character",
        "Internet connection"
      ],
      "description": "This course provides you with all the basic models, tools, and GUIs needed. It focuses primarily on coding and gives students an expandable and adaptable project they can use in their game development.\n\n\nSome central concepts taught are\nusing module scripts in different ways\nUsing co-routines to pause and resume plant growth\ncreating and using animations\nsaving part positions and attributes to the data store.\nray casting to move and place parts\ncreating dictionaries of data that can be referred to from other scripts\ncoding and using surface, screen, and billboard GUI's\n\n\nBy the end of the project, students should have a farm to which they can add new crops and expand the farm to make it bigger.\n\n\nAs some coding concepts are complex, students should complete the following courses.\n\n\nLearn To Code Games In Roblox Studio - Beginner\nRoblox Intermediate Coding Course - Intermediate\n\n\nThe course structure has been designed to allow a working example to be tested at the end of most lessons.\n\n\nMany concepts taught in the course can be re-purposed and used in entirely different projects.\n\nTo get the most out of the course, students should complete all videos in sequential order for sections one to five. The sixth section about animation is optional but does add a great finishing touch to the project.",
      "target_audience": [
        "Intermediate Roblox Coders",
        "Roblox Developers"
      ]
    },
    {
      "title": "Interactive UI Programming with C++ and ImGui [2024]",
      "url": "https://www.udemy.com/course/interactive-ui-programming-with-cpp-and-imgui/",
      "bio": "Learn how to do UI in C++ with Dear ImGui, BGFX and GLFW",
      "objectives": [
        "Create 2D graphical applications using C++",
        "Use GLFW for windowing and keyboard and mouse inputs",
        "Use the GLM library for basic 2D mathematics",
        "Work with multiple windows",
        "Create UI with the help of ImGui",
        "Multiple ImGui controls for logic",
        "How to initialize BGFX for graphics programming",
        "Good coding standards and google coding style",
        "How to create custom UI themes and controls with ImGui",
        "How to draw lines and shapes in ImGui",
        "How to process input and other ImGui events"
      ],
      "course_content": {
        "Introduction": [
          "Promo",
          "Welcome - Do not skip this!",
          "FAQ",
          "Course Overview"
        ],
        "Setup": [
          "Software Used",
          "Intalling Visual Studio",
          "Installing Git",
          "Simple \"Hello, World!\""
        ],
        "Windows & Graphics": [
          "What are Windows?",
          "Creating a Window",
          "Coding Standards",
          "The BIG2 Stack",
          "Monitor Functions",
          "What is a Graphical API?",
          "Clearing the Window",
          "Workaround: Multiple Windows",
          "FrameBuffers & Multiple Windows",
          "Creating the Graphics Context",
          "Moving the Graphcis Context to the Window",
          "Resizing the Window",
          "Windowing Quiz"
        ],
        "UI Programming with ImGui": [
          "Introducing ImGui",
          "Moving the ImGui Context",
          "Multiple Windows with ImGui",
          "ImGui Window",
          "ImGui Buttons",
          "ImGui IDs",
          "ImGui Inputs",
          "ImGui Layout",
          "ImGui Caclulator App",
          "Better Calculator: Task",
          "Better Calculator: Solution",
          "UI Quiz"
        ],
        "Additional Controls": [
          "ImGui Menu",
          "ImGui More Inputs",
          "ImGui Styles",
          "ImGui Tooltips",
          "ImGui Custom Draw",
          "ImGui Enable Math Operations",
          "ImGui Custom Theme",
          "ImGui Custom Control (Link)",
          "ImGui Custom Fonts"
        ],
        "Advanced": [
          "Setting the project up from scratch",
          "Bonus Materials"
        ]
      },
      "requirements": [
        "Understand Basic C++"
      ],
      "description": "Welcome\nThis course is an easy and straightforward introduction into UI programming with C++. The course is segmented into short and on point lessons that focus on concrete topics. In this course you will learn how to initialize a window and graphics and then create various elements with a library called ImGui.\nTo participate and learn from this course, you should already know C++ at a good level since the basics of programming won't be covered. Otherwise this course is appropriate for junior developers that are familiar with the language. The level of C++ will be kept easy to grasp with no complicated concepts outside of basic OOP.\nLibraries\nThrough the course you will learn how to use a few different libraries. Learning these will generally help you understand a few more concepts than just the UI programming bit. The few major libraries that I've included in the course are:\n\nGLFW—a library used to create and manage windows in your GUI environment. This is an abstraction library over the native interfaces of windows, Mac and Linux windows.\nBGFX—a popular cross-platform library for rendering graphics onto a window. Similar to how GLFW is an abstraction over the native windows - bgfx represents an abstraction over Vulkan, OpenGL, DirectX, etc. This library is used by major developers, including Microsoft's Minecraft.\nGLM—a simple math library which we will use mainly for the 2D vector calculations for sizes and positions of UI elements in the window.\nDear, ImGui—an immediate mode UI library. You define the UI through code, and it issues commands for GLFW and BGFX to be rendered. Each frame is drawn immediately from the issued commands, which also means that each frame you need to redefine the UI. This is usually easier to work with from a programmer stand point.\nThis course is primarily taught on the Windows OS, but the knowledge gained can easily translate into other operating systems as well.",
      "target_audience": [
        "Beginner C++ developers who want to learn more about UI programming",
        "Game programmers with knowledge about C++ who want to go deeper into graphics and UI",
        "Programmers that want to create low-level tools with C++"
      ]
    },
    {
      "title": "Unity AWS S3 + Download and Upload Files/Images and More!",
      "url": "https://www.udemy.com/course/unity-aws-s3/",
      "bio": "Learn to use Unity/AWS to upload and download player data and connect players around the world!!",
      "objectives": [
        "Using S3 With Unity",
        "Uploading Pictures",
        "Uploading Player Data",
        "AWS",
        "Downloading Player Data",
        "Downloading Pictures",
        "Unity"
      ],
      "course_content": {},
      "requirements": [
        "Basic Knowledge of Unity"
      ],
      "description": "Have you ever wanted to learn how allow players to upload and download items in game? Maybe it's player data, maybe it's high scores, maybe it's images....we're going to show you how in this course!\nTopics Covered:\nAWS\nUnity\nS3 Basics(Bucket Access, Public/Private Buckets, Uploading Downloading)\nUploading Data\nDownloading Data\nUploading Player Images from their camera roll\nHow to display this info in the UI\nCognito\nCognito Security Policies\nAndroid/iOS Fixes\nAndroid Bug Fixes\nAnd much more!\n\n------------------------------------------------------------------------------------------------------------------------------------------------------------\nAustin Patkos is the Creator of ZDev-9 and this course. He has developed over 27 different mobile apps for both Android and iPhone. Austin Patkos is a self taught in software. Believing that self education is key. In addition he has developed several courses, authored a book designed and engineered 3D firearm parts, and taught self defense for over 10 years.\nBruised and battery daily in a Martial Arts school. He now holds a 3rd Degree Black Belt. He has competed in over a dozen powerlifting competitions, has squatted over 800lbs, bench pressed over 550lbs and deadlifted over 700lbs.\nBelieving in the mindset of “passing on” Austin has published several courses that reflect his passion for Personal Development and Growth. \"\n---------------------------------------------------------------------------------------------------------------------------------------------------------------\n\"When I was in Highschool I tried a little bit of coding. Unfortunately the tutorials while well intentioned, I just couldn’t get the hang of it. They would teach basic facts and skills, how to make a string how to make an int. And at times I could repeat and do these skills I often forgot because I lacked the in depth understanding of what skills and how the interweaved with other things that were taught. Ironically in the same year I had a Chemistry teacher teach us about Bloom’s Taxonomy.\n\n\nDuring that time I worked as a Krav Maga assistant instructor, eventually going on to run a self defense school full time. One of the things that I always tried to do is teach the what AND the why. Why do an elbow? Why attack the fingers? Why do move x?\n\n\nOnce I decided to start teaching teach I have always made it an effort to go the extra mile and not just explain what but also explain why too.\" - Austin Patkos",
      "target_audience": [
        "Anyone looking to increase their knowledge of AWS and Unity",
        "Anyone looking to make their games/apps more dynamic."
      ]
    },
    {
      "title": "Unreal 5 Materials - Part 2 World Position Offset Animation",
      "url": "https://www.udemy.com/course/unreal-5-materials-part-2-world-position-offset/",
      "bio": "Your complete course for learning Materials in Unreal Engine 5",
      "objectives": [
        "Have a holistic understanding of the Material Editor in Unreal 5",
        "Learn best practices and workflows for using Functions and producing optimal Materials",
        "Learn about the basics of different Spaces and Vector Maths",
        "Explore how to use Maths to Animated inside Unreal 5 using World Position Offset"
      ],
      "course_content": {
        "Introduction": [
          "Source Files"
        ],
        "World Position Offset Basics and Theory": [
          "Introduction",
          "World Space",
          "Local and Tangent Space",
          "Direction",
          "General Case",
          "Three Sines",
          "Rotation"
        ],
        "Simple Examples": [
          "Setup",
          "Simple Translate",
          "ObjPosRandom",
          "Simple WPO Function",
          "Cross Wind",
          "Vertex Colours",
          "Simple Rotation",
          "Advanced Rotation",
          "Vertex Painting 1",
          "Vertex Painting 2",
          "Vertex Painting 3",
          "Simple Cloth",
          "Cloth Cross Wind",
          "World Space Wind",
          "Cloth Rotation"
        ],
        "Foliage": [
          "MPC Controls",
          "Grass Clumps",
          "Grass Cross Wind",
          "Tall Grasses",
          "Tall Grass Cross Wind",
          "Tall Grass Gravity",
          "Player Interaction",
          "Fern Rotation",
          "Fern Half Mask",
          "Secondary Bounce",
          "Tertiary Bounce",
          "Lillies and Floating Objects",
          "Pivot Painter and VATs"
        ],
        "Advanced WPO": [
          "Sprite Facing and Spline Thicken",
          "Butterfly",
          "Fish",
          "Recalculation Normals from Sine",
          "World - Sphere Mask",
          "World - True Rotation",
          "World Spiral",
          "World Spiral 2 and Outro"
        ]
      },
      "requirements": [
        "Some basic understanding of 3D Modelling and the Unreal Engine"
      ],
      "description": "Following up from Unreal 5 Materials Part 1 - Environments we take a 7 hour deep dive into World Position Offset in Materials in Unreal Engine 5 - in this course we cover the basics of what World Position Offset is and how it works technically as well as covering many examples to add life to your scenes and create realistic foliage animations.\n\n\nPart 1 covers the background to World Position Offset, including a technical breakdown of how it works and how we can use World, Local and custom Vectors to control our Animations\nPart 2 is a series of simple examples - from hanging chains to basic cloth, that reinforces the theory from Part 1, while also introducing a few key workflows.\nPart 3 we take a look at foliage shaders - how we can use a Global Wind parameters to control multiple materials at once, and how each Foliage type requires different World Position Offset settings.\nPart 4 we cover some more advanced uses of World Position Offset and take a look at Rederiving Normals to ensure the shading of our models is correct when using World Position Offset.\nPart 5 takes a look at some World Position Offset uses that affect the overall world, rather than individual objects - creating curved worlds easily using shaders.\n\n\nWPO is a great technical subject that can help you to learn about Vector Maths and how to use Blueprints and Vertex Colours to control our models and materials.",
      "target_audience": [
        "Anyone who wants to learn how to make Materials in Unreal 5"
      ]
    },
    {
      "title": "Develop A Vertical Shoot'em Up Game for Android and IOS",
      "url": "https://www.udemy.com/course/develop-a-vertical-shootem-up-game-for-android-and-ios-stencyl-free/",
      "bio": "Learn how to create your very own infinite vertical shooter game with Stencyl",
      "objectives": [
        "Import and Use Scrolling and Parallax Backgrounds",
        "Create Seamless Backgrounds Yourself!",
        "Import and Animate Actors for Your Games with Stencyl",
        "Write Code the Easy Way with A Visual Programming Language",
        "Import and Use Sound Effects and Music in Two Formats",
        "Create an Entire Game!",
        "Build Your Game for A Mobile Target (Android, iOS)",
        "Know How to Build Your Game for Web and Desktop Targets As Well",
        "Configure and Undersetand Physics Settings and the Box2D Physics Engine"
      ],
      "course_content": {
        "Introduction: Welcome to The Course!": [
          "Section 1: Introduction",
          "What You Will Learn",
          "Project Files - Download and Save",
          "Download and Install Stencyl",
          "Setting Up the Game Project"
        ],
        "Scrolling Backgrounds": [
          "Section 2: Introduction",
          "Parallax Backgrounds",
          "Seamless Backgrounds Explained"
        ],
        "Configuring Actors and Animations": [
          "Section 3: Introduction",
          "Actors and Animations",
          "Collision Shapes: Box, Circle and Poylgon",
          "Additional Actors and Animations",
          "More Collider Configurations",
          "Actor Physics Settings"
        ],
        "Visual Programming: Let's Make Some Gameplay": [
          "Section 4: Introduction",
          "The PC Handler: Moving the Ship",
          "Firing the Ships Weapon",
          "Kill on Leaving Screen (Projectile)",
          "Cannot Exit Screen (Player Ship)",
          "Refining the Projectile Spawn Point"
        ],
        "Actor Spawning and Procedural Levels": [
          "Section 5: Introduction",
          "Procedural Obstacle Generation",
          "Comet Collisions and Explosions",
          "Comet Collisions Continued",
          "Projectile Collisions",
          "Die When Hit By Obstacle",
          "Power-ups (Extra Firepower)"
        ],
        "Attack of The Flying Saucers": [
          "Section 6: Introduction",
          "Attack of The Flying Saucers",
          "Automatic Saucer Turrets",
          "Debugging the Saucer and Turret",
          "Further Projectile Spawn Refinements",
          "UFO: Health and Damage System",
          "Player Character: Health System"
        ],
        "Score and HUD (Heads Up Dispay)": [
          "Section 7: Introduction",
          "Importing Custom Bitmap Fonts",
          "Drawing the Score to The HUD (Heads Up Display)",
          "Updating the Score Variable"
        ],
        "Game Audio -- SFX and Music": [
          "Section 8: Introduction",
          "Importing SFX and Music",
          "Playing a Music Loop",
          "Playing Sound Effects for the PC",
          "Explosion and Bump SFX"
        ],
        "Mobile Input and Testing (Android and iOS)": [
          "Mobile Input -- The Accelorometer",
          "Mobile Input - Fire When Player Touches Screen",
          "Testing the APK On Android Devices"
        ],
        "Bonus Section: Adding Menu Screens (GUI)": [
          "Adding a Start Menu Screen",
          "Navigating the GUI with Buttons"
        ]
      },
      "requirements": [
        "Download and Install the Latest Version of Stencyl ( Completely Free)"
      ],
      "description": "Ever wanted to create your own shoot'em up game, completely from scratch? Well then look now further, the course you've been looking for has arrived. Using the incredible Stencyl 2D game engine and toolset, you will complete a cross-platform, beautiful, fun, dynamic shoot'em up in just a matter of hours, and you'll learn a ridiculous amount doing it, too.\n\nIn this immensely fun and highly informative (and educational) series of lessons on the development of a 2D mobile game (Android and iOS) in the vertical shooter genre, we delve into the most important tips, tricks and cheats that the pros use to develop great games in a fraction of the time, giving you an early edge in your game development journey. Some of the key takeaways include:\nimporting, editing and implementing scrolling backgrounds\ncreating parallax effects\naccepting and reacting to player input\nusing actors in Stencyl to create the player character, obstacles such as comets, as well flying saucers and turrets\nprogramming both actor and scene behaviors to handle game events and implement game rules\nuse sound effects and music to enhance the player experience and overall immersive experience of the game\nBe able to take everything you have learned and apply to your very own game projects!\nWhether you have ambitions of becoming a professional, indie game developer, or you just want to create a cool game you can show off to your friends, the concise, structured, easy to follow format of this course caters to the learning needs of all. Join up now, it will be one of the most enjoyable learning experiences you'll ever have, and what you learn will enable you to start building your own games for mobile platforms such as Android and iOS, and even web and desktop targets (Flash, HTML5, Windows, Mac, Linux).",
      "target_audience": [
        "This course is simple enough to be followed by those with no game development or programming experience. It will be most beneficial to, beginners, hobbyists, students, or professionals and programmers looking for a faster way to develop their games"
      ]
    },
    {
      "title": "Unreal Engine 4 - Infinite/Endless Runner (Android and iOS)",
      "url": "https://www.udemy.com/course/unreal-engine-4-endless-runner/",
      "bio": "Learn to make a complete endless runner games like temple run/ subway surfer with options and a store page",
      "objectives": [
        "Learn game development using version 4.26 of Unreal Engine 4",
        "Learn the basics of blueprint",
        "Learn the basics of UI in UE4",
        "Learn the basic of UE4's Animation System",
        "Learn how to make a mobile game"
      ],
      "course_content": {
        "Getting Started with Unreal Engine 4 And Source Control": [
          "Getting started with Unreal Engine 4",
          "Adding assets from the Unreal Marketplace",
          "Setting up the Source Tree and Git-lab Account",
          "Getting familiar with the Unreal Engine 4 Editor"
        ],
        "Infinite Runner - Setting up the Basics": [
          "Setting up the Player",
          "Setting up the Blend-space And Animation Blueprint",
          "Creating the infinite Map and spawning floors",
          "Adding camera sway for left/right movement",
          "Turning Corners"
        ],
        "Infinite Runner - Pickups and HUD": [
          "Spawning the Coin Pickup",
          "Spawning the First Enemy",
          "Finishing up the Enemy",
          "Bug Fixes",
          "Adding Player HUD and Updating Coin Count",
          "Implementing Score System and Score Update on HUD"
        ],
        "Infinite Runner - Player Extras": [
          "Adding Jump and Cancel Jump Ability",
          "Pushing the player into the map if we hit the corners",
          "Finishing the push back system"
        ],
        "Infinite Runner - Powerups": [
          "Making the magnet powerup",
          "Finishing up the magnet powerup",
          "Creating the Shield Powerup",
          "Finishing up the Shield Logic"
        ],
        "Infinite Runner - Death Screen": [
          "Creating the Death HUD!",
          "Adding Score and Coins Collected logic in Death HUD!",
          "Save System And High Score System"
        ],
        "Infinite Runner - Main Menu": [
          "Making the Main Menu",
          "Making the Option Map",
          "Creating the options UI and setting up the sound base files",
          "Saving the music and sfx value",
          "Finishing the sound system and fixing some bugs"
        ],
        "Infinite Runner - Shop": [
          "Getting Started with the Shop",
          "Setting up the Character Selection",
          "Creating the Character Information UI",
          "Purchase Character from Shop",
          "Equipping the Character",
          "Character Cycle"
        ],
        "Adding the Touch Inputs": [
          "Swipe Inputs for Jump, Force down and Turn Corners"
        ],
        "Bug Fixes And Improvements": [
          "Fixing the hit component on Skeletons"
        ]
      },
      "requirements": [
        "Desktop PC with Windows 7 (or later) 64-bit",
        "8 GB RAM",
        "Quad-core Intel or AMD processor, 2.5 GHz or faster.",
        "Unreal Engine 4 will run on desktops and laptops with specifications under these, but performance may be affected",
        "NVIDIA GeForce 470 GTX or AMD Radeon 6870 HD series card or higher."
      ],
      "description": "Hello everyone, welcome to my first udemy course. This is a Complete Blueprints Only Course For Beginners.\nLearn to make a complete endless runner game like temple run/ subway surfer. We will learn everything from scratch, from spawning the infinite floor, to the options menu, to the store page.\nYou do not require any background knowledge of Unreal engine 4 or Blueprints.\nYou do not require any programming knowledge.\nYou will only require :\nA pc/ laptop powerful enough to run Unreal Engine 4.\nYour will to learn and participate in the course.\nWe will be using Unreal's visual scripting language (Blueprints) to make the whole game launch ready.\nThe course will be updated every week, since the game will take time to be completed, with main menu, store and options.\nWe will add corner turns and tilting of the mobile to move left and right. And swipe right and left to turn corners.\nThe purchase price might go up once the course has been completed.\nAll the items used are free to download from Unreal Marketplace or will be provided to you in the resources.\nThis course will be updating with time, so at the end you will have a game that looks more or less like temple run.",
      "target_audience": [
        "This course is for students who are absolute beginners to ue4 and want to script their game using blueprints.",
        "No programming knowledge required"
      ]
    },
    {
      "title": "Build 2D, 3D, and VR Games in Unity and Unreal *Masterclass*",
      "url": "https://www.udemy.com/course/build-2d-3d-and-vr-games-in-unity-and-unreal-masterclass/",
      "bio": "Get free: 2 complete books and 6 professional webinars! C# coding, C++, game design, game development, game mechanics.",
      "objectives": [
        "Build Virtual Reality games in Unity Technologies.",
        "Learn the fundamentals of game design.",
        "Create artwork in Blender.",
        "Code in C# and C++.",
        "Learn to make simple games."
      ],
      "course_content": {},
      "requirements": [
        "Download & install Unity® 5.4.3f1, Blender v2.78, & the Unreal Engine 4.",
        "This course was recorded on a Mac, but you can use a PC."
      ],
      "description": "Make 30 virtual reality games in Unity while learning to code in C# and making low poly 3D art. Make 6 beginner Unreal games with C++. You can do it.\n\n\"I love it so far it's nice and slow and doesn't skip parts making it very friendly to beginners and people who have never developed before.\"\nA wildly successful Kickstarter funded this course\n\nPractice with real-life & practical examples you would use as a day to day developer.\nBONUS! You'll find in this course 2 free books (Build 6 Games in Unreal and Build a 3d Virtual Reality Whackamole Game) by Mammoth Interactive\n\nBONUS! Also included are 6 webinars recorded by our founder John Bura:\nIntro to Kotlin: Java’s Replacement for Android App Development\nIntro to Android Studio and Java\nCore Data: Learn to Use Xcode’s Database\nGoogle Maps and Xcode: Build a Maps-Focused Project\nParse JSON Data: Build a Weather App\nIntro to SpriteKit Games: Build a Simple Pong Clone\nOur two very talented instructors, Kevin Liao and Glauco Pires, explain everything from a basic, beginner level. That means, you don't have to have any prior coding or digital art experience to succeed here.\nGlauco Pires will take you through the process of coding a game in Unity® from scratch. You will make VR games in Unity as well as 2D and 3D games in Unreal.\nKevin Liao will teach you how to create all the artistic elements you will need to complete the Unity games. Kevin will teach this section of the course in Blender; the wonderful, free 3D modeling program.\nIncluded in this course is material for beginners to get comfortable with the interfaces. Please note that we reuse this content in similar courses because it is introductory material. You can find some material in this course in the following related courses:\nBuild 2D, 3D, and VR Games in Unity and Unreal *Masterclass*\nComplete 35 Projects: Unity VR Games with C# & iPhone Apps\nComplete 3D Modeler & C# Unity VR Game Developer Masterclass\nThe Complete VR Course: Build 3D Models and Unity Games\nBuild 30 Mini 3D Virtual Reality Games: Unity® From Scratch\nMaster Game Development - 90 Games in Unity & Construct 2\nMake 30 VR Games in Unity and Learn to Code\nLearn to code by building 6 games in the Unreal Engine\nComplete Unreal & Android Development: Build Games & Code\nComplete 6 Games in Unreal Engine 4 and 20 in Construct 2\nUnreal Engine Game Mechanics Mastery & MakeHuman 3D Modeling\nComplete Developer Masterclass: Learn Angular 2 and Unreal\nMaster Unreal and Xamarin: Build Professional Games and Apps\nUnreal Engine 4 & Android Development: Make 6 Games, 12 Apps\nBeginner's Swift 4 & Unreal Engine - Learn Xcode, Make Games\nProject-based training content is the best way to reach your goals. Take this course to get practical & employable skills right now with Mammoth Interactive.\n\nYou can use the projects you build in this Mammoth Interactive course to add to your LinkedIn profile. Give your portfolio fuel to take your career to the next level.\n\nLearn these powerful tools today & get a head start for tomorrow. People who can master technology will rule the future.\nWe promise that this course will be better & more effective than reading books. We show how to master technology. This course will give you everything you need to thrive in our technological society.\nEnroll right now to start learning with Mammoth Interactive",
      "target_audience": [
        "Complete beginners. No prior coding or digital art skills necessary.",
        "People who want to make games."
      ]
    }
  ]
}