{
  "courses": [
    {
      "title": "Learn To Create A 2D Metroidvania Game in Unity With C#",
      "url": "https://www.udemy.com/course/learn-to-create-a-2d-metroidvania-game-in-unity-with-c/",
      "bio": "Learn To Create A 2D Metroidvania Game in Unity With C#",
      "objectives": [
        "Build 2D Unity Game",
        "progarmming with C#",
        "Player Stats,Levelup,Meele and Range Attack",
        "Enemy AI System",
        "Making Levels & Level selection"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "New Project & Importing asset",
          "Tilemap",
          "Animated Tilemap",
          "Easy Background"
        ],
        "Player": [
          "Player Setup",
          "Player Movement",
          "Player Jump",
          "Player Animation",
          "Player Animation Script",
          "Player Double Jump"
        ],
        "Camera": [
          "Camera Follow Player",
          "Parallel Camera Part 1",
          "Parallel Camera Part 2",
          "Sticky Wall problem solved"
        ],
        "Player Meele Attack": [
          "Player Attack",
          "Enemy Health",
          "Enemy Hurt& Die function"
        ],
        "Player Range Attack": [
          "Player Range Attack",
          "Player Bullet Effect",
          "Player Bullet Damage",
          "Player Jump Effect"
        ],
        "Enemy AI System": [
          "Enemy AI Part 1",
          "Enemy AI Part 2",
          "Enemy AI Part 3",
          "Enemy Damage Player",
          "Player Hurt&Death",
          "enemy pushing problem fixed",
          "Enemy dead box"
        ],
        "UI System": [
          "Player Health&Magic Bar",
          "Health Bar Script",
          "Magic Bar Script",
          "Enemy Health UI",
          "Enemy Death Bug Fixed"
        ],
        "Pickup System": [
          "Object animation",
          "Health Pickup",
          "Coin UI & Pickup",
          "Loot Table"
        ],
        "Audio": [
          "Audio Controller Script",
          "SFX & Music Play"
        ],
        "Shop System": [
          "Shop UI & Health Upgrade",
          "Magic Upgrade"
        ]
      },
      "requirements": [
        "Have a PC or Mac"
      ],
      "description": "Are you looking for an intermediate Unity course where you will build a small 2d game, from scratch ? In this course we will create a  game with lots of important things that any game should have like, player Levelup system, animations, , Shop and Stat system and  Save&Load system to save&Load our game progress and stats\nIf you have completed few beginner courses on Unity and c# and you feel comfortable using them together I believe that you will benefit greatly from this course.\nWe will use multiple 2d models, animations and tools which have high quality\nMy hope is that at the end of the course you will have a bigger picture on how to structure the code for your game and make a game for yourself .\nIf you think that you could benefit from this course don't hesitate to purchase it.  Saying that I have really put a lot of effort to make sure that you will benefit from the course and learn some useful techniques from setting up enemy AI and more\nWhat you will learn at the end of this course\n1)make player  from scratch and able to transform it\n2)Player Movement Animations\n3)Pickup Items\n4)Gathering coin\n5)Shop system\n6)Level up system and increasing stats\n7) Paralel Camera\n8)Drop Loots\n9) Boss\n10)Interact with object\n11)AI Enemy (Patrol,stand,shoot,Detect Player,chase Player\n12)Saving The Game\n13)Loading The Game\n14)and more",
      "target_audience": [
        "Beginner & Intermediate"
      ]
    },
    {
      "title": "Building a Pac-Man Arcade Style Game In Unity",
      "url": "https://www.udemy.com/course/building-a-snac-man-arcade-style-game-in-unity/",
      "bio": "Use Unity and C# to Create a Classic Pac-Man Arcade Style Video Game Complete with AI, Power Ups, and Animations!",
      "objectives": [
        "Build a full dot-eater classic arcade style game using C# and the Unity game engine",
        "Learn how to create a fully playable, animated character using Unity",
        "Develop enemy pathfinding AI logic that lets the enemies chase the player through the maze",
        "Create power-ups that give the user bonus points and let the user eat enemies for a short period of time",
        "Code a scoring system that keeps track of high score across play sessions",
        "Take your game development and C# skills to the next level using professional Object-Oriented game programming techniques",
        "Write a progressive level system",
        "Create an animated cutscene using Unity’s animation tools like the Animator and Timeline Editor"
      ],
      "course_content": {},
      "requirements": [
        "Basic Unity and C# knowledge is a plus, but not required",
        "A Windows computer, Linux machine, or a Mac (all software in the course is free and installation is explained step-by-step)",
        "Excitement and enthusiasm about game development"
      ],
      "description": "This course will walk you through building an entire video game hands-on, and will take you step-by-step through the game development process.\nAre you a fan of classic arcade dot-eater games? Want to learn how to make a “Snac-Man” character that can go through a maze gaining points, evading enemies, and clearing boards? Are you motivated to take your Unity and C# skills to the next level? Then this course is for you.\nAs a beginner, one of the hardest things about game development is knowing where to start and building a full game project. Understandably, this process can be a bit overwhelming for beginners. This course is meant to give you a hands-on, beginner-friendly approach to building a fun arcade-style game that you will be proud of. By developing the project featured in this course, you will be learning techniques that you can apply to your own personal game projects. Some of the core game development techniques this course will teach you are:\nKeeping track of current score\nSaving high score permanently across play sessions\nCreating power-ups\nWriting code to make the character move\nDeveloping enemy AI with pathfinding capabilities\nBuilding a progressive level system\nKeeping track of the game state internally\nEvent driven programming\nCreating animated cut scenes\nMaking a settings screen that lets the user customize elements of the gameplay\nEssential C# game development skills such as obtaining user input, invoking actions, listening for events, utilizing PlayerPrefs to save game data across multiple sessions, creating an Editor script, and more!\nBy the end of this course, you will have a full game project you developed from the ground up! You will also have some more C# tips and tricks that you can add to your arsenal. If you want to learn game development or are aspiring to build a career in the game industry, then this course is for you!",
      "target_audience": [
        "Anyone excited about building a classic arcade-style game",
        "Anyone that wants to improve their Unity and C# skills",
        "Beginners that want to build a full game step-by-step and have something cool that they can play and learn from"
      ]
    },
    {
      "title": "Unity Space Shooter Game Development tutorial using C#",
      "url": "https://www.udemy.com/course/unity-space-shooter-game-development-tutorial-using-c/",
      "bio": "Learn Unity Space Shooter Game Development using C#",
      "objectives": [
        "Space Shooter game in Unity"
      ],
      "course_content": {},
      "requirements": [
        "Unity Hub installed",
        "Visual Studio Installed",
        "Any unity versions Downloaded and Installed"
      ],
      "description": "In this course, you will how to make a space shooter game in unity. This course is an extension of old Space shooter video tutorials by unity officials. This course is using totally new features and coding practices and is compatible to work with all the newer versions of unity.\nLearn how to create Space shooter video games using Unity, the world-leading free-to-use game development tool. With our online tutorials, you'll be amazed at how easy it is to create a game as such.\nAll the course project files from most of the Episodes are attached with the videos so that you can practice along.\nYou will get full lifetime access for a single one-off fee. You will learn to create a 3D space shooter game and all the resources will be provided to you.\nAnyone who wants to learn to create games: Unity is a fantastic platform that enables you to make production-quality games. Furthermore, these games can be created for Windows, macOS, iOS, Android, and Web from a single source!\nDive in and learn Unity now, you won't be disappointed!\nWho this course is for:\nBeginner and Intermediate level unity Developers.\nSome programming experience required.\nArtists who want to learn to bring their assets into games.\nDevelopers who want to enhance their space shooter game according to new practices.",
      "target_audience": [
        "Unity developers who wants to learn game development",
        "Students",
        "Game developers"
      ]
    },
    {
      "title": "Android Game Development in Android Studio and Java",
      "url": "https://www.udemy.com/course/mobile-game-development/",
      "bio": "Build 4 Complete Games in Android Studio and Java in less than 5 hours",
      "objectives": [
        "You'll be able to build 4 complete games in less than 5 hours",
        "Create an efficient game loop in Android",
        "How to animate objects in Android",
        "Building android game by writing code in Android Studio and Java, without using any 3rd party Game Engine",
        "You'll be able to brush-up your Java skills",
        "Learn Android Game Development Fundamentals",
        "You'll have a clear understanding of the Core Concepts behind a 2D Game"
      ],
      "course_content": {
        "Introduction to Android Game Development in Android Studio and Java": [
          "Introduction to the Course"
        ],
        "Build a Ping Pong Game in Android": [
          "Game Resource",
          "Join The Community",
          "Create the Project in Android Studio",
          "Develop the MainActivity",
          "Start Creating a Custom View class - GameView",
          "Code for Drawing, Animating, Collision Detection & Playing Sound Effects",
          "Detect Touch Events",
          "Design the XML layout for GameOver Activity",
          "Develop GameOver Activity, Display Score, Save Personal Best, Restart & Exit"
        ],
        "Build a Bird Hunt Game in Android": [
          "Source code",
          "Design and Develop the MainActivity",
          "Develop GameActivity and Start Playing Background Music",
          "Start Creating GameView Class for Writing Game Logic and Drawing Objects",
          "Override onDraw Method and Draw The Objects on Canvas",
          "Override onTouchEvent Method and Detect Collision",
          "Design GameOver Activity",
          "Develop GameOver Activity"
        ],
        "Build a Balloon Shooter Game in Android": [
          "Source code",
          "Design and Develop the MainActivity",
          "Start Creating GameView Class",
          "Create Balloon Classes",
          "Create Bullet Class",
          "Override onDraw Method and Animate Balloons",
          "Override onTouchEvent Method and Animate Bullets",
          "Collision Detection",
          "Game Over"
        ],
        "Build a Duck Hunt Game in Android": [
          "Source code",
          "Create the Project",
          "Set a background image for Canvas",
          "Make the background image fully fit the Canvas",
          "Make the Ducks fly",
          "Do it Object Oriented way",
          "Add another duck",
          "The Shooting Mechanism",
          "Collision Detection",
          "Score, Life and Sound Effects",
          "GameOver"
        ],
        "Course Wrap-Up": [
          "Bye for now",
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "We'll be using Java in this course, and since it's an OOP language, it may be important to learn OOP fundamentals first. One of my courses titled \"Object Oriented Programming Fundamentals\" teaches that. Note that, it does not teach Java specifically.",
        "You should have Android Studio installed",
        "You should have some experience in Android Development using Android Studio",
        "Some basic programming experience like variables, conditions, loops, methods, class and object",
        "You don't need prior knowledge in Android Game Development"
      ],
      "description": "Important Note:\nAll source code provided in this course remains valid and compatible with the latest versions of Android Studio and Android SDKs.\nPlease note, however, that the course was originally created using an earlier version of Android Studio and the Android SDK.\nIf your goal is to:\nLearn game development logic from the ground up,\nBuild a game loop from scratch,\nCreate your own custom game framework to develop future games more quickly and efficiently,\nAnd you wish to code entirely in Java without relying on external game engines,\n— then this course is ideal for you. Otherwise, we recommend exploring other courses that better match your needs.\n\nHi, welcome to the Android Game Development Course. Here, we'll be creating these 4 games from scratch, using only Android Studio and Java: 1) Retro Ping Pong game, 2) Bird Hunt game 3) Balloon Shooter game and 4) Duck Hunt game. I only except you know a little bit of Java programming like using variables, loops, objects, etc. Other than that, I expect that you have the latest version of Android Studio installed on your Pc.\nSome Amazing Reviews From Our Learners\n- Very good introduction to game development without other tools. Haven't done anything with Touch-Control and it was nicely presented by Sandip. The translation/transsript is not allways clear but if you have basic/good English Skills it should be easy to follow. Overall thumbs up and 5 stars.\n- Detailed descriptions of how to work within Android. Excellent so far!\n- Wow, very good course for an all level of developer where you can learn about canvas, working with velocity, the fun of doing coding in a logical way with animation. I enjoyed and learned a lot from this game development tutorial.\n- Good course content and easy to understand for the beginners.\n- Excellent Course\n- excellent course for the people who like to learn how to build mobile game. Eagerly waiting for the more courses in this topic.\n- Also explain on shared preferances so it'll be easier to understand.\nWho am I? and Why should you learn from me?\nI am Sandip Bhattacharya, and I published more than 10 android games on Google Play. Moreover, I have successfully trained thousands of Udemy students on game development in my other game development courses on Udemy. So, I happen to know about game programming and some experience to teach you how to make an android game from scratch. In this course, I'll teach you how to make four complete games from start to finish, step by step. You'll learn about XML layout designing, how to create a custom View class, override onDraw() method, how to create an efficient game loop in Android with Java, how to write game logic, draw and animate Bitmap images, detect Touch Events, handle Collision between objects, play Sound Effects, display Score and Health Indicator, save Personal Best score using Android SharedPreferences class, add features like Restart and Exit in GameOver screen and much more.\nWhat will you learn in your course?\nYou'll be able to build 4 complete games in less than 5 hours\nLearn to create efficient game loop in Android\nHow to animate objects in Android\nBuilding android games by writing code in Android Studio and Java, without using any 3rd party Game Engine\nYou'll be able to brush-up your Java skills\nLearn Android Game Development Fundamentals\nYou'll have a clear understanding of the Core Concepts behind a 2D Android Game\nAre there any course requirements or prerequisites?\nYou should have latest version of Android Studio installed\nYou should have some experience in Android Development using Android Studio\nSome basic programming experience like variables, conditions, loops, methods, class, object etc.\nYou don't need prior knowledge in Android Game Development\nWho are the ideal students for this course?\nIf you want to learn the Core Concepts of 2D Game Development like making an infinite Game Loop, Animation, Touch Event, Collision Detection, Playing Sound effects, Health, Displaying Score and Saving Personal Best etc. then this course is right for you\nThis course is perfectly suitable for Absolute Beginners interested in making Android Games from scratch\nBeginner to Android Game Development\nBeginner to Android development\nBeginner to Java programming\nIf you're curious about building an android game from scratch using only Android Studio and by writing code in Java, without using any 3rd party Game Engine\nI hope you'll enjoy my hands-on teaching style. We have a lot to cover. So, Enroll now and start making games with Android Studio and Java.",
      "target_audience": [
        "If you want to learn the Core Concepts of 2D Game Development like Animation, Touch Event, Collision Detection, Playing Sound, Health Bar, Displaying Score and Saving Personal Best etc. then this course is right for you",
        "This course is perfectly suitable for Absolute Beginners interested in making Android Games from scratch",
        "Beginner to Android Game Development",
        "Beginner to Android development",
        "Beginner to Java programming",
        "If you're curious about building an android game from scratch by writing code in Java, without using any 3rd party Game Engine"
      ]
    },
    {
      "title": "Build Virtual Reality Games for Android and iPhone",
      "url": "https://www.udemy.com/course/build-virtual-reality-games-for-android-and-iphone/",
      "bio": "Complete guide to quickly build and publish VR games using Unity",
      "objectives": [
        "quickly build and release Virtual Reality games for Android and iPhones",
        "Take existing games and turn them into Virtual Reality ones",
        "Create VR waypoints for people who only own the headset device"
      ],
      "course_content": {
        "Preliminaries": [
          "Get to know your instructor"
        ],
        "Let's go straight to the good stuff": [
          "Fastest way to build VR games on iPhones",
          "Fastest way to build Android VR games",
          "VR current trends and upcoming trends"
        ],
        "Advanced VR development with Unity": [
          "Play and test VR game within Unity",
          "Overview of the Unity GVR components (part 1)",
          "Overview of the Unity GVR components (part 2)",
          "Trigger custom actions on event enter",
          "Adding VR functionality to custom objects",
          "Fastest way to build Virtual reality games (part 1)",
          "Fastest way to build Virtual reality games (part 2)",
          "Moving around the virtual world (part 1)",
          "Moving around the VR world (part 2)",
          "Moving around the VR world (part 3)",
          "Adding waypoints",
          "21 Enhancing waypoint looks with glowing effects",
          "Exercise - Add waypoints to every room"
        ],
        "Advanced - Optional": [
          "Running the completed VR app on a physical device",
          "Converting Unity 3D game into Virtual Reality Games",
          "Reusing virtual reality waypoints",
          "VR Unity assets"
        ],
        "iPhones and iTunes App Store": [
          "Steps to publish VR games to iTunes",
          "Download and Install Xcode",
          "The iOS developer license",
          "Create iTunes Connect app settings",
          "itc01 Add a new app in iTunes Connect dashboard",
          "itc02 Add screenshots to itunes connect for all devices",
          "itc03 Fill out the itunes connect content settings",
          "itc04 Setup app price in itunes",
          "pub01 Modify the app settings in XCode",
          "pub02 Start the Archiving Process",
          "pub03-Launch the Archiving process in XCode",
          "pub04 Successful App Store submission",
          "Using the game in the virtual reality headset",
          "pub05 add the build and wait for review status"
        ],
        "Android - Publishing to Google Play store": [
          "Switch platform to Android settings",
          "Create a new Android keystore",
          "Google Play console app setup",
          "Create the Android apk file in Unity",
          "Uploading your game apk to Google Play store"
        ],
        "BONUS": [
          "BONUS"
        ]
      },
      "requirements": [
        "a little knowledge of Unity helps",
        "own a MAC OS or Windows PC or Linux"
      ],
      "description": "By now everyone has heard about Virtual Reality games. We are at the beginning of a new era where people are immersed into virtual worlds and they get to be or do anything they wish.\nNow is the time to start making virtual reality games. This is what this course will teach you.\nWhether you have no experience making games with Unity or you are a seasoned developer, this course will get you up and running in no time.\nYou will be shown how to start making VR games from scratch and publish them in the Apple app store and Google Play store. All steps are shown to you so you have all the chances to succeed.\nBy the way, this course is also meant for people that already have existing Unity projects and would like to quickly turn them into VR games.\nThe future of gaming is exciting thanks to Virtual Reality.\nDon't be left behind. Join us now.\nImportant: This course is part of a the world's one and one series on Unity professional multiplayer games.\nThe content is so big, it couldn't fit in one course. Here is the courses are split in key areas:\nThere are so many tutorials, guides and courses out there, that it’s hard to know how to start learning how to code, game development, and even harder to know in which order you should take the courses.\nWe’ve decided to focus on Unity rather than other platforms because the team behind Unity has a great vision. They are always on top of things. Each time a new device comes out, they add support for it and also create special libraries for it. We believe you should focus on Unity as well. We want to make sure you do by providing you the best learning material at the best prices\nFor example, Oculus Rift and Samsung VR are fully operational on Unity 5.\nUnity also entered the live cinematic world (animated movies, think Toy Story). The future is bright for Unity developers. (more about the future of Unity  )\nThere’s also been a change in the mobile app app store category ranking system which makes it harder to get app exposure for new apps. It means developers need to focus on a few apps instead of bombarding the app store with reskins. Nowadays, an app is a continuous work of art where developers need to listen to the users and keep updating the app to give them exactly what they want.\nHaving said that, you will maximize your learning experience if you takes the courses in the following order:\n- Understand the process of making games:\nBefore even getting started into developing, you need to understand the whole process of making games, from A to Z. Take the “Captain Rocket” course where you get to see how a Unity project gets reused and turned into another game and gets published to iTunes app store.\ncourse: Publish Captain Rocket* iPhone game under 2 hours, Unity 5\n- Learn the basics:\nThe course “Begin Unity Programming” is short (about 45 minutes) and entertaining where you will learn keys Unity concepts and code using Star Wars figurines.\nAnother important course is “Fundamentals of Programming“. Beware! This course goes over the hard stuff of programming. It’s explaining the mechanics used in programming, just like you would get in a computer science class in the American Ivy league Universities. It’s not for everyone, but it should be taken by EVERYONE. You need to understand what are for / while loops, what’s the difference between an int, a float or a double, and what are the principles of object oriented programming (to name a few key concept). The course comes with plenty of mind-stimulating exercises made with the new elegant language named Swift.\n- Get comfortable with using Unity’s user interface: course \"Introduction to Game Development with Unity\"\nUnity Editor can be overwhelming at first with all its windows, sub windows and tabs. Luckily, this course guides you through it. Oh, i forgot to mention, it’s free!\n- Learn how to create graphics to use in your game: \"3D Pixel Art for non artist. Crossy Road Modeling. Unity 3D\"\nGraphic assets can be 2D illustrations, 3D graphics, sprites, voxel art (MineCraft like) or also sound effects and Unity bundles.\nI recommend to start making graphic assets following the course “3D Pixel Art for non artist. Crossy Road Modeling. Unity 3D“. Why? Because it’s a course that allows anyone to make decent game graphics without having to be an artist! With the correct tools and the right guidance, you will end up making 3d pixel graphics (voxel) art just like Crossy road or MineCraft by the end of the day.\nOnce you know how to create 3D assets, it’s time you learn how to make 3D characters, animate them, and import them into Unity to use them!\nYou will learn all of the above in the course named “3D Pixel Characters Modeling & Animations for all. Unity 3D“.\nBy the way, the tools used in the course are all free to use, that’s the cherry on the cake!\nBy the end of the course, you will be able to create and animate characters like Spiderman, Ironman and wonder woman. Make Ironman dance hip-hop is hilarious and gratifying!\n- Learn core Unity development:\nAt this point, you must be antsy to create a game. Contrary to most online courses, the following course allow you to create and also PUBLISH the game you’re making to the Google Play store and the iTune app store.\nTake the “Unity 3D 2016 – Build, program & publish Crossy Road game” course. Learn about key concepts, must-have scripts to get a professional game like Crossy Road and get it out the door into the wilderness of the app stores! I can’t stress enough the joy of having your game out in the app store where all your friends and family are amazed by you owning a piece of the app stores! (scoring social points!)\nNow that you’ve got your first game in the app store, you should learn how to make more complex games, that are using 3D animations, physics, vehicles, shooting, and character Artificial Intelligence. The perfect course for these topics is “Unity 2016 – Build , program and publish a 3D shooter game“.\n- Enhance your game development skills:\nIt’s time to learn specific game mechanics that will improve the player’s game experience and ultimately get more user engagement.\nYou need to know how to add multiplayer to your game. A game that’s using the multiplayer mechanics is a more demanded type of game because players prefer to play against / with other players rather than computer simulated AI (Artificial Intelligence).\nThe course “Unity Multiplayer 2016 – Build Online Shooter – code included” is the perfect way to turn the game you’ve learned how to make (the 3D shooter game) into a multiplayer game.\nContrary to most courses, you’re not wasting time on creating code to make the game, but you will be focusing on jumping straight into the multiplayer functionality. This is a must-have course and one that I am the most proud of because “multiplayer” is a hard concept and I finally got to find the simplest way so that anyone can add multiplayer to any Unity games.\n- Equipping characters with weapons, gears and trinkets\nThe majority of multiplayer games allow players to pickup items, find treasures and get loot from bosses. Now the hard part for the game developer is to know how to pickup these items, equip these items, remove them, swap them.\nAnd all of this needs to be done in multiplayer,… meaning, when a player equip a new item such as a sword or a helmet, all other players need to see that new state. Not so easy at all… That’s why this course is a must: \"Unity 2016 - Character gear and weapon use\"\n- Inventory system for single player and multiplayer games:\nunity-inventory-system-for-games-multiplayer-online\nNow that you understand how to pickup items and equip them, you need an inventory system to keep track of which item the player owns. Many games call this a stash or a backpack.\nIt sounds simple to implement, but it’s tough, especially in multiplayer games. Oh, almost forgot to mention, the user interface needs to work on all screen sizes, small screens like Android phones and iPhones, as well as big TV screens for PCs. This course will teach you every single details. And yes, the code is included!\n\"Unity 5 - Inventory System for Professional Games\"\n- Item attributes and statistics\nBefore you can get into player fighting, dueling and combat, you need to setup stats and attributes on each items and players.\nFor example, swords have a specific strength, intelligence, dexterity, mana cost and other skills.\nThis course teaches you how to set these attributes up and how to use them during combat to compute what’s the damage taken or mitigated. It’s also great to create character leveling and experience gaining.\n\"Unity 2016 - RPG Character Stats and Item Attributes System\"\n- Mastering Melee and Ranged weapon mechanics\nA good game needs melee weapons such as swords, knives, or axes,  and also needs ranged weapons such as guns, bows with arrows and such.\nLearn the mechanics and get to apply them hands-on with the source code that comes with the course.\nrange-and-melee-weapons-course-unity\n\"Unity 5 pro multiplayer combat using melee & ranged weapons\"\n- Turn your game dev into a game business:\nIt’s fun to make games but it’s even more fun when games bring in money. No seriously, if you plan on just making games for fun, that’s fine, but many of you would love to turn this hobby into a business so that you can keep doing what you love without having to go find another job to pay the bills.\nSo how can you monetize your game?\nAdd advertising banners and full screen ads.\nThe course “Unity 3D 2016 – Build, program & publish Crossy Road game” has an advanced section on how to integrate Unity ads to your game. This is a good start but it’s not enough, you need to add a video reward system where players have to watch a 30 second video advertisement to get virtual coins in return. Each time a player watches a video, you get a few cents to a couple dollars, especially if the player downloads and opens the app from the advertisement! Now, that’s what we call potentially good income! The developer from Crossy Road used this exact same system and made a couple million dollars in a week or so. Now I’m not saying this is going to happen to you, but do you really need this much money to keep you going?\nUnity Game Boost: Build a Video Reward System (bring in $$$)\nAnother way to monetize a game is to use virtual coin systems where players can earn, buy and use coins to get virtual items and goods. The player will buy virtual coins with real money using the in-app purchase in-game store. There is a course just for that: “Unity Game Boost: Coin Management System“. The course drive you through every single step to create the virtual coin system and store/ retrieve the player’s coin amount. Then you get to create an in-game store so that player can buy virtual good with real money. The beauty of this course is that you learn how to bundle the coin system so that you can reuse it in every game you make in no time. A must-have course!\nListen to this scenario, it’s the most common one for game developers: You’ve made a decent game, you published it, you get a couple hundred downloads and then “dead silence”. You can keep praying the Gods for help or you can help yourself and add Unity Analytics to your game. Thanks to analytics, you get a report on key metrics in a nice online dashboard. You get answers to key questions. such as\nIs my game to hard or too easy? Which level has the most players quit? Which character gets selected the most? How many times a level gets played?\nTake the course \"Unity Game Analytics\"\nOnce you have all these questions answered, you modify your game to fit the player’s feedback, it’s time to understand how to add fun stuff using physics mechanics. The perfect course for this is “Unity Game Physics”\nRemember, it takes time and experience to get to understand how to read your audience and know what they want. It’s great to get real data from your players and analyze them. Data scientists are in high demand. Some game companies are really good at this and came up with a p behavioral system that forces players to have the desire to spend money in the game. Critics like Nick Saint of Business Insider have said that Zynga’s games have essentially the same mechanics even though they have different premises and settings.\nYou also need to create an audience so that each time you create a new game or add a new level or feature to an existing game, you need to be able to tell people about it. That’s why you need to build an email list. The email list is platform agnostic, meaning, no matter what happens tomorrow, even if the iPhone industry dies, you still have an email list of people who love to play your game genres, and they will gladly follow you to any platforms, whether you decided to create Virtual Reality games, ebooks or movies!\nThe course “Unity 2016 – Email List Building – Why and How” will help you integrate the email capture system into your game and help you build your email list.\nEmail list building with Unity\n- The marketing side of things.\nDisclaimer: Would you rather take the time to market your game or start making another game?\nWe all rather keep making games than marketing the games we’ve already made and that’s totally understandable. Making games is fun and gratifying. Marketing games is not sexy, nobody wants to have to bother people and tell them about your game. After all, shouldn’t your game be good enough that it speaks for itself? not in today’s world. Publishing a game is just the beginning, creating the buzz around it, baking viral mechanics into it, getting featured in magazines and media is a must. The course “Become a Mobile App Growth Hacker . Total Theory & Training” teaches you fundamentals concepts on how to use marketing even before you’ve created your game. Making a game is great, making a game that brings in revenue is great, and making a game that the whole world enjoys is even better!\n- Chat system:\nPlayers want to interact with eachother. Online games need chat systems to allow players to send messages to eachother.\nThe messages need to be stored in your own private server (online or local). This course will teach you just that. Beware! This course uses advanced topics like MySQL, PHP, and Apache. The good news is that all the source codes are included so you just have to use them and customize them to make it original to your taste.\nTake this course \"Unity 5 Build a chat system for online multiplayer games\"\n- in-game mail message system\nThis course goes hand in hand with the course above(chat system). If somehow one of the player is not online at the moment, other players can send in-game emails. A must-have for online multiplayers. \"Unity 5 Multiplayer InGame Mail Messaging\"\n- Maths for Game Developers:\nokay, let’s be honest, making games is sexy, learning the maths not so much. But don’t you want to understand the math behind the game mechanics?\nTake this somewhat boring but necessary course: \"Maths for Video Games\"\n- You don’t have time or don’t want to spend too much money on graphics?\nMe either.. That’s why the following course automatically generate environments, dungeons, castles, houses, weapons and entire worlds for you! Neat? very powerful stuff…\n\"Building 3D Voxel Art Environment Worlds with Unity 5\"\n\"Unity 5 techniques to generate unique worlds quickly\"\n\"Unity 5 Build a System that Generates Houses & Castles Auto\"\n\"Build Weapons Automatically Unity . Fantasy Edition\"\nOnce you have taken all the above courses. You are ready to make a 6-figure job as a game developer or run your own game business. You're not alone, I'm here to help you in your journey.\nContact me anytime. Yohann of AppsFresh com",
      "target_audience": [
        "computer students",
        "gamers",
        "techies",
        "curious minds",
        "creative people"
      ]
    },
    {
      "title": "CrashCourse iPhone Game Programming",
      "url": "https://www.udemy.com/course/crashcourse-iphone-game-programming/",
      "bio": "Program an iOS game in Swift",
      "objectives": [
        "Program a basic iOS game in Swift",
        "Implement Game Center into your Apps",
        "Run an iOS app beta test",
        "Submit apps to the App Store"
      ],
      "course_content": {
        "Introduction to the Course": [
          "Welcome!",
          "Game Demo",
          "Overview of Xcode"
        ],
        "Programming Basics": [
          "\"Hello, world\"",
          "Variables",
          "Loops",
          "Arrays",
          "Classes"
        ],
        "Setting the Scene": [
          "Setting Up the View",
          "Intro to SKNode & Adding the Background",
          "Intro to the CCGround Class",
          "Intro to SKAction",
          "Making the Ground Infinite",
          "Adding the First Tile",
          "Completing the Tileset"
        ],
        "Creating the Hero Class": [
          "Adding the Hero to Our Scene",
          "Intro to Animation",
          "The Slide Animation",
          "Adding Gesture Recognizers",
          "Getting the Hero to Jump",
          "The Attack Animation"
        ],
        "Level Generation": [
          "Intro to the Generator Class",
          "Setting Up the Generation Timer",
          "Organizing the Gamescene Functions",
          "Generating the First Obstacles",
          "Synchronizing the World & Creating the Attack Obstacle",
          "Creating the Slide Obstacle",
          "Generating Obstacle Types at Random",
          "Adding the Textures"
        ],
        "Collision Detection": [
          "Setting Up the Physics Bodies",
          "Setting Up the Physics World",
          "Detection of the Attack Obstacle",
          "The Game Over Animation",
          "Implementing the Game Over Function",
          "Implementing the Restart Function"
        ],
        "Points and Highscore": [
          "Intro to SKLabelNode",
          "The Blink Animation",
          "Creating the CCPointsLabel Class",
          "Keeping Track of Points",
          "Cleaning Up the Obstacles",
          "Saving the Highscore"
        ],
        "Creating an Intro Screen": [
          "Creating the MenuScene",
          "Implementing CCButton",
          "Adding Functionality to the Buttons",
          "Adding a Dummy Hero"
        ],
        "Game Center Implementation": [
          "Authenticating the Local Player",
          "Presenting the GKGameCenterViewController",
          "Adding GameKit Functionality in iTunes Connect",
          "Saving the High Score to Game Center"
        ],
        "Beta Testing Your App": [
          "Adding an Icon to Your App",
          "Archiving Your App",
          "Setting Up TestFlight"
        ]
      },
      "requirements": [
        "A Mac Computer"
      ],
      "description": "Throughout this course we are going to be developing an iOS game in Swift! We will be going to cover a lot to get you up and running as a game developer for iOS, covering everything from getting started with Xcode to beta testing to actually submitting your app the App Store.\nWe will be developing a side-scrolling game in which the user will play as a ninja that can jump, slide, and slash through obstacles. The game will keep track of points and will allow for saving your high score to game center to compare with friends. Assets for animations and the in-game scenery are all included.\nThe main timeline of the course includes going through some Programming Basics, Developing the Game, Implementing Game Center, Beta Testing, and finally Submitting Your App to the App Store. The course builds on programming concepts introduced at the beginning of the course to help you see how and where they are applied in a real-world setting.\nIt should take approximately ten to twenty hours to complete depending on your level of experience and depth of study in the concepts introduced.\nYou should take this course if you are relatively new to programming and want to learn through the experience of developing an iPhone game!",
      "target_audience": [
        "Students who have minimal or no experience programming should take this course!",
        "Students with moderate to high levels of experience will probably find this course slow."
      ]
    },
    {
      "title": "Unity For Software Developers",
      "url": "https://www.udemy.com/course/unity-for-software-developers/",
      "bio": "Apply your programming knowledge to game development and start making 3D games in the Unity game engine using C#",
      "objectives": [
        "Learn to create games and interactive experiences using Unity with a focus on C# scripting in a 3D Viking survival game demo",
        "Understand how C# scripting works in Unity including MonoBehaviours, ScriptableObjects, script interactions and profiling for performance",
        "Effectively manage your Unity project to build scalable games using version control, namespaces, assembly definitions and custom Unity packages",
        "Learn how automated testing helps you to avoid introducing bugs into your game as it grows over time with play and edit mode tests.",
        "Tie it all together with an example combat implementation which uses all the skills you've learned."
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Welcome to the Course",
          "Setup Your Environment",
          "The Norseman Demo",
          "The Demo Git Repository"
        ],
        "Scripting in Unity": [
          "Scripting Overview",
          "Your First Script",
          "Gameobjects & Monobehaviours",
          "Composition Vs Inheritance",
          "Anatomy of a MonoBehaviour",
          "Script Interactions",
          "ScriptableObjects",
          "Coroutines",
          "Unity Performance 101"
        ],
        "Maintaintability, Scalability, and Testability": [
          "Chapter 3: Intro",
          "Namespaces",
          "Assemblies",
          "Custom Unity Packages"
        ],
        "Automated Testing": [
          "Chapter 4: Introduction",
          "Preparing Your Project for Testing",
          "EditMode Tests",
          "PlayMode Tests"
        ],
        "Conclusion": [
          "Conclusion"
        ]
      },
      "requirements": [
        "A solid understanding of programming basics is assumed and required. This is not a course to learn fundamental programming concepts.",
        "A computer which meets the basic system requirements for running the Unity Editor software",
        "Basic familiarity with writing and editing code in an IDE like Visual Studio",
        "Basic familiarity with Git and version control concepts"
      ],
      "description": "Welcome to Unity For Software Developers, the only course you need to learn how to apply your skills as a developer to making games with Unity. This course is created by Charles Amat, host of the Infallible Code YouTube channel where over 61,000 devs learn how to program games with Unity!\nThis course assumes that as a developer your time is valuable and seeks to present its subject matter in a clear and concise presentation over the course of just under three hours allowing you to skip the fluff and get start quickly. This is not a course to learn what a variable or function is and if you have zero programming experience, you should study some programming fundamentals before taking this course.\nThe course is taught by Charles Amat who is a senior developer at Thousand Ant, a studio who develops Unity content for Unity Technologies themselves and creates educational material for companies like Microsoft and Google.\nThe course has been updated to be 2022 ready and you'll be learning the latest tools and best practices for making games in Unity.\nThis course doesn't cut any corners, there is a custom 3D demo project called “The Norsemen” including a rigged and animated character and dozens of 3d assets which you can use in your own prototypes.\nThe curriculum was written and developed by Charles together with Matt Schell, the former head of Online Evangelism for Unity Technologies who created many of the most popular Unity video tutorials on their own YouTube channel.\nWe've helped millions of learners learn how to program in Unity via our YouTube channel and many have gone on to change their lives by becoming professional game developers.\n\n\nWe'll take you step-by-step through engaging video tutorials and teach you everything you need to know to apply your skills as a developer to making games in Unity.\nThe course includes over 3 hours of HD video tutorials and a custom made, exclusive 3D survival game demo with animated character and example source code.\nThroughout this course, we cover a massive amount of tools and technologies, including:\n\n\nAn exclusive 3D viking survival example game “The Norseman” with art, animation and shaders using Unity’s Universal Render Pipeline\nUnity with a focus on C# scripting\nMonoBehaviours\nScriptableObjects\nScript interactions\nProfiling for performance\nManaging your Unity project to build scalable games\nUsing Git version control with Unity\nNamespaces\nAssembly definitions\nCustom Unity packages\nAutomated testing with play and edit mode tests.\nSimple inventory system\nExample combat implementation\n\n\nBy the end of this course, you will be well grounded in Unity’s technical fundamentals and ready to start making your own games.\nSign up today, and look forward to:\nHD video lectures\nClean, well-structured example code\nA high quality custom built 3D demo project\nA downloadable local Git repository with each module as a separate branch\n\n\nREMEMBER… we’re so confident that you'll love this course that we're offering a FULL money-back guarantee for 30 days! So it's a complete no-brainer, sign up today with ZERO risk and EVERYTHING to gain.\nSo what are you waiting for? Click the buy now button and get started on your game development journey!\n\n\nWho this course is for:\nSoftware developers who want to learn Unity without having to cover basic programming concepts for beginners\nIf you want to learn modern Unity best practices designed for building scalable, clean projects and not game-jam example code\nIf you want to learn game development using professionally created art and animation instead of boxes and cubes\nIf you want to take ONE COURSE and learn everything you need to know to get started programming Unity games right away in a clean, concise, professional and well-structured course.",
      "target_audience": [
        "This is a course for developers who understand programming basics and want to learn how to apply them to developing game using Unity."
      ]
    },
    {
      "title": "Complete C# Unity 2D & 3D Game Development Masterclass 2020",
      "url": "https://www.udemy.com/course/complete-csharp-unity-2d-3d-game-development-masterclass-2018/",
      "bio": "Learn Unity 2D, Unity 3D Game Development, Augmented Reality using Vuforia, C#, Unity 5, Code, Mobile Games, Web, PC",
      "objectives": [
        "Be able to create ZigZag clone",
        "Be able to create flappy bird clone",
        "Be able to create augmented reality food menu app like KABAQ",
        "Be able to create side scroller ninja game"
      ],
      "course_content": {},
      "requirements": [
        "Be able to write basic code or algorithm",
        "Should know about C# and programming concepts like functions, loops, etc.",
        "Unity 3D and Visual Studio / MonoDevelop"
      ],
      "description": "Complete C# Unity 2D & 3D Game Development Masterclass 2020 & Augmented Reality Using Vuforia\n\n\nLearn how to create video games using Unity, the world-leading free-to-use game development tool. We start super simple so you need no prior experience of Unity or coding! With our online tutorials, you'll be amazed what you can achieve right from the first moment you start the course.\nBenefit from our world-class support from both other students, and the Mir Imad team who are regularly engaged in the forums and Q&A section. Go on to build several games including:\nZigZag Clone: A Top-Down Endless Ball Movement Game with tiles to run the ball on;\nNinja Warrior: A Side Scrolling Platformer game with Unity's Tilemap tool, Animations, Movement and much more;\nFlappy bird Clone: An endless bird flying game similar to flappy bird;\nAchievements system: A full fledged achievements system to be used in any game or app;\nIn Augmented Reality using Vuforia you will learn to build:\nAR Concepts: How to display 3d models, 2d animations, videos in augmented reality\nCloud Recognition: How to utilize the cloud recognition to display videos on target images in runtime\nAR Menu: An Augmented Reality food menu application like KABAQ;\nAR Poems: A simple Augmented Reality Poem application for kids;\nApart from full projects there are concept videos as well, where you will be able to learn about different concepts and components in Unity Engine that can be used in different game development scenarios. You will learn how to use the following:\nCreating 2D and 3D animtations\nRigidbody both 2D and 3D\nColliders and their usage\n3D path finding of AI\nStandard Assets & Assets store\n& much more\nYou will have access to a course forum where you can discuss topics on a course-wide basis, or down to the individual video. Our thriving discussion forum will help you learn and share ideas with other students. Check out our reviews to see how people love this feature.\nThe course is project-based, so you will not just be learning dry programming concepts, but applying them immediately to real indie games as you go. All the project files will be included, as well as additional references and resources - you'll never get stuck. There are quality screencasts and more.\nFor each demo game you build you will follow this process\nBe challenged to build the entire game yourself.\nBe shown step-by step how to build it.\nBe challenged to apply, and re-apply your knowledge regularly.\nYou will get full lifetime access for a single one-off fee. The creator is qualified and experienced coder and professional game developer, so is able to explain complex concepts clearly, as well as entertain along the way.\nYou will learn C#, and in turn build a solid foundation for Object Oriented Programming. By the end of the course you'll be very confident in the basics of coding and game development, and hungry to learn more.\nWhat this course DOESN'T cover...\nWhereas this course is already huge, we can't possibly cover everything in that time. Here are some things we will not be covering...\nPerformance optimization.\nEditor plugins or modifications.\nPhysics engine modification*\n\n\nAnyone who wants to learn to create games: Unity is a fantastic platform which enables you to make production-quality games. Furthermore these games can be created for Windows, MacOS, iOS, Android and Web from a single source!\nIf you're a complete beginner, we'll teach you all the coding and game design principles you'll need. If you're an artist, we'll teach you to bring your assets to life. If you're a coder, we'll teach you game design principles.\n\n\nDive in now, you won't be disappointed!\nWho is the target audience?\nCompetent and confident with using a computer.\nArtists who want to learn to bring their assets into games.\nSome programming experience helpful, but not required.\nComplete beginners who are willing to work hard.\nDevelopers who want to re-skill across to game development.",
      "target_audience": [
        "Beginner C# students interested to learn about game development",
        "Beginner Unity 3D students",
        "Anyone interested in learning how to make augmented reality apps"
      ]
    },
    {
      "title": "Game Design Fundamentals",
      "url": "https://www.udemy.com/course/game-design-fundamentals/",
      "bio": "A Beginners Guide to Game Design Concepts.",
      "objectives": [
        "Implement different concepts that they will learn in the entire course in their games. They would be able to implement different user experience improvement techniques that have the potential to make their game more addictive and smooth.",
        "Step by step instruction of how to start your game designing while keeping different concepts in mind",
        "If you are a game designer you will become a better player amongst your colleague game designers.",
        "You will be able to identify different Dos and Don'ts of game design principles",
        "You will be looking at live examples of the implementation of principles in different games like Battlefield, Call of Duty, Assassins creed and many more.",
        "Many games have been researched before compiling of the materials explained in this course.",
        "This course will provide concepts with examples from famous games of today."
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Players Expectation Part": [
          "Players Expectation Part -1",
          "Players Expectation Part -2"
        ],
        "Refining the Game Idea": [
          "Refining the Game Idea Lecture"
        ],
        "Gameplay Chunks": [
          "Section 3 - Gameplay Chunks"
        ],
        "Artificial Intelligence": [
          "Section 4 - Artificial Intelligence"
        ],
        "Refining Game Experience": [
          "Section 5 - Refining Game Experience"
        ],
        "Documenting the Game": [
          "Documenting the Game"
        ],
        "Analyzing the Overall Gameplay": [
          "Analyzing the Overall Gameplay"
        ],
        "Conclusion and Bonus Section": [
          "Something for our Students"
        ]
      },
      "requirements": [
        "Programming or computer skills are not needed for this course",
        "If you are a gamer that would help in understanding different aspects due to example in the lectures"
      ],
      "description": "Starting out creating an interactive experience, of any sort really, can be rather daunting. In this course, we’ll run through the basic components of a game, so we can get a handle on what the next steps are when you make the jump from the course lectures to your own projects.\n\nIn this course we will learn different ways and techniques about how an Indie game developer can improve his gameplay, make his gameplay more addictive by understanding action-response theory.\n\nWe are going to cover different topics related to game design like what a user expects when he buys the game, what are the things that user want and what user don't want. We are going to cover different gameplay chunks and how we can improve our quality by implementing we are going to learn about Dos and Don'ts of Artificial Intelligence with how we can polish our prototype and much more.\nIts a quick start guide in Game Design. You will be taken through the different live examples that how these concepts are implemented to famous AAA games that makes them more addictive.\n\nThis course is perfect for anyone who wants to start his/her career as a game designer/Indie Game developer and also for students that are looking for a quick start in game design.\nCourse is based upon research on AAA games that are famous in the market.\nWhat will you learn? Different mechanisms/Examples to think about Dos and Don'ts to implement while designing Level/Gameplay.\nHow to Identify limitations in Idea with respect to Story, Technology and Gameplay.\nHow Artificial intelligence can help in getting things done easily.\nWhat player expects when he buys/download your game.\nUnderstand User Input/Response behavior.\nCompare different games according to their game design.\nIn this course we will get to know how world class games use these concepts to implement their addictive gameplay according to the player expectation.\nStart playing now and press \"take this course\".",
      "target_audience": [
        "Students who want to learn game design principles.",
        "Indie game developers who want to enhance their game design knowledge to enhance their games experience with users.",
        "If you enjoy playing games, This course will teach you a better understanding how these game design principles help the designers to create such an addictive flow gameplay"
      ]
    },
    {
      "title": "Unreal Engine 5 Introduction to Parkour",
      "url": "https://www.udemy.com/course/introduction-to-parkour/",
      "bio": "Master Parkour Basics in Unreal Engine 5 – Modular Blueprints, Motion Warping, and Custom Implementation",
      "objectives": [
        "Build a modular parkour system that can be easily integrated into any Unreal Engine project using Actor Components.",
        "Master Motion Warping to dynamically adjust character positioning during parkour animations.",
        "Use Sphere Traces to detect obstacles, measure height and depth, and determine the correct parkour move.",
        "Create custom collision settings to separate parkour objects from other world objects for precise detection.",
        "Implement animation montages and curves for smooth transitions and accurate motion warping.",
        "Dynamically enable and disable Foot IK using animation curves to prevent animation inconsistencies.",
        "Expose key variables for easy customization, allowing fine-tuning of offsets, montages, and detection logic.",
        "Migrate and implement the parkour system in any custom Unreal Engine project with animation retargeting.",
        "Improve Blueprint scripting skills by working with functions, variables, and event-driven logic."
      ],
      "course_content": {
        "Introduction To the Course": [
          "Intro"
        ],
        "Main Course": [
          "Creating a Parkour Component",
          "Understanding Sphere trace",
          "Obstacle Detection",
          "Custom Collision",
          "Obstacle Query",
          "Parkour Action",
          "Unreal Engine 5_WarpTarget Bug Report",
          "Implementing Parkour Animations",
          "Making Parkour Refinements",
          "Making Finishing Touches"
        ],
        "Implementing Parkour system in a New/Custom Project": [
          "Exporting To A New Project"
        ]
      },
      "requirements": [
        "This course is designed for beginners, so no prior experience with Blueprints or animation is required. However, basic familiarity with Unreal Engine can be helpful.",
        "To follow along smoothly, you’ll need a PC capable of running Unreal Engine 5, preferably version 5.5, as that is the version used in this course. While other versions may work, some nodes or settings might require minor adjustments. You should also have Unreal Engine 5 installed before starting the course.",
        "Most importantly, bring a willingness to learn and experiment—this course will guide you step by step, making it accessible even if you’re new to Unreal Engine."
      ],
      "description": "Have you ever wanted to implement a parkour system in Unreal Engine but found existing tutorials too complex or lacking explanations? This course is designed to bridge that gap by teaching you how to create a fully modular parkour system from scratch using Blueprints, Motion Warping, and Animation Montages.\nWe’ll start by building a parkour detection system using Sphere Traces, allowing the character to detect obstacles dynamically. From there, we’ll measure obstacle height and depth to determine the appropriate parkour action—whether it's climbing, mantling, or vaulting. You'll also learn how to work with custom collision channels, ensuring precise interaction with parkour objects.\nTo make our system fully modular, we’ll implement it inside an Actor Component, allowing you to easily integrate it into any Unreal Engine project. We’ll refine animation blending, implement Motion Warping for smooth transitions, and dynamically control Foot IK using Animation Curves to maintain realistic movement.\nFinally, we’ll export our parkour system and integrate it into a custom Unreal Engine project, demonstrating how to transfer and adapt the system to different environments and characters.\nBy the end of this course, you’ll have a reusable, game-ready parkour system that can be adapted to any Unreal Engine project with ease.\n\nJoin the Discord community to get instant help, share your progress, and connect with fellow developers working on the same parkour system. Whether you have a question, need troubleshooting advice, or just want to discuss new ideas, our community is there to support you. The Discord link is attached to every video, making it easy for you to jump in and get the help you need at any time!",
      "target_audience": [
        "This course is perfect for Unreal Engine beginners and game developers who want to understand the fundamentals of parkour mechanics in game design. Unlike other tutorials that focus on advanced implementations, this course breaks down parkour step by step, making it accessible to everyone. Whether you're an indie developer, a hobbyist, or someone looking to improve their Blueprint skills, this course will teach you the core logic behind parkour systems—something that hasn’t been explained in detail before. You’ll learn to create a fully modular parkour component that can be easily transferred to any Unreal Engine project. By the end of the course, you'll not only understand how parkour mechanics work but also how to implement them into a custom project with your own characters and environments. This ensures that your parkour system is adaptable, reusable, and ready to be integrated into any game you develop."
      ]
    },
    {
      "title": "Complete 3D FPS Game in Unity C# For Beginners 2024",
      "url": "https://www.udemy.com/course/complete-3d-fps-game-in-unity-c-for-beginners-2024/",
      "bio": "Learn C# with Unity and create your own 3D First person Shooter",
      "objectives": [
        "Understand the basics of the Unity game development environment",
        "Dive into level design principles, including obstacles, and challenges to provide an engaging and dynamic gameplay experience.",
        "FPS Creation: Learn to design and implement core features of a FPS, such as player controls, enemy AI, shooting mechanics",
        "Create a shooting system for the player",
        "Introduce basic enemy AI behaviors for navigation and targeting",
        "Implement health and damage systems for both the player and enemies"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Player": [
          "Player Movement",
          "Better Movement",
          "Speed Booster",
          "Jumping",
          "Fix Jumping",
          "Player Camera",
          "Lock Cursor",
          "First Person Camera"
        ],
        "Shooting": [
          "Setting up Shooting",
          "Bullet",
          "Fix Shooting",
          "Destoying enemies"
        ],
        "Enemies": [
          "Adding enemies",
          "Detecting player",
          "Chasing player",
          "Enemy Combat",
          "Detect Collision",
          "Enemy health",
          "Die animation",
          "Fix Bug"
        ],
        "Health System": [
          "Setting up Health",
          "Healthbar UI",
          "Health Mechanics",
          "Damage player with enemy",
          "Damage effect"
        ],
        "Combat": [
          "Switching Weapons",
          "Adding ammo",
          "Ammobox",
          "Ammo UI",
          "Changing bullets",
          "Muzzleflash"
        ],
        "Extra features": [
          "Enemy AI",
          "Fixing bullet collision"
        ],
        "Environment": [
          "Designing environment",
          "Creating level 1",
          "Skybox",
          "Textures"
        ],
        "Menu": [
          "Setting up main menu",
          "Buttons",
          "Credits",
          "Pause menu",
          "Fix bugs part 1",
          "Fix bugs part2"
        ],
        "Audio": [
          "Adding sounds",
          "BGM"
        ]
      },
      "requirements": [
        "Mac or PC capable of running Unity 3D",
        "A copy of Unity 2021 or newer"
      ],
      "description": "Embark on an exhilarating journey into the realm of game development with our 3D FPS (First-Person Shooter) course tailored for beginners in Unity. Dive headfirst into the captivating world of game design and unleash your creativity as you learn to craft immersive gaming experiences from scratch.\nThroughout this comprehensive course, you'll be introduced to the fundamental principles of Unity, the industry-leading game development platform. With hands-on guidance and step-by-step instructions, you'll master the essential techniques required to build your very own 3D FPS game.\nFrom designing captivating environments to implementing dynamic gameplay mechanics, our course covers it all. Delve into the intricacies of level design, where you'll learn to sculpt landscapes, place obstacles, and create atmospheric lighting to breathe life into your game world. Harness the power of Unity's intuitive interface to effortlessly integrate stunning visual effects and captivating soundscapes that will keep players engaged and immersed in your virtual universe.\nBut that's not all – our course goes beyond mere aesthetics. You'll also delve into the intricacies of programming as you learn to script player movements, enemy AI behaviors, and interactive elements that add depth and complexity to your game. With each lesson, you'll gain valuable insights and practical skills that will empower you to bring your unique game concepts to life.\nBy the end of this course, participants will learn:\nDesigning captivating 3D environments\nImplementing dynamic gameplay mechanics\nLevel design principles and techniques\nScripting player movements and interactions\nCreating enemy AI behaviors\nIntegrating visual effects and soundscapes\nBuilding a complete 3D FPS game from scratch\nWhether you're a budding game developer or simply an enthusiast looking to explore the world of game design, our 3D FPS course in Unity is your gateway to unleashing your creative potential and building the next gaming sensation. Join us on this thrilling adventure and embark on a journey that will transform your passion for gaming into a tangible reality.",
      "target_audience": [
        "Those who have little to no experience in game development but are enthusiastic about learning the fundamentals.",
        "Individuals who want to explore Unity as a game development platform and understand its features and capabilities.",
        "Programmers with a background in languages like C# who want to apply their skills to game development.",
        "Students or hobbyists who have a passion for gaming and want to turn that passion into practical skills by building a complete game project.",
        "Individuals who prefer self-paced learning and online courses as a means of acquiring new skills and knowledge."
      ]
    },
    {
      "title": "Unity Game Tutorial: Physics Based Puzzles Games 2D",
      "url": "https://www.udemy.com/course/unity-game-tutorial-physics-based-puzzles-games-2d/",
      "bio": "Learn how to create your own Physical based 2D Puzzle games in Unity Game Engine.",
      "objectives": [
        "Creating physics based puzzle games in Unity.",
        "2D Physics and Collisions in Unity.",
        "Create an unlimited running game.",
        "How to destroy and Instantiate GameObjects.",
        "C# - Creating Own Functions, Variables, Lists, for-loops"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Concept & Unity Setup": [
          "The Concept",
          "Setting up Unity",
          "Camera Setting"
        ],
        "Game Elements": [
          "The Sprite Atlas",
          "Playfield Borders",
          "The Player",
          "Creating Scripts",
          "The First Trap",
          "More Traps",
          "Triggering Traps",
          "Triggering Score",
          "The GameManager",
          "Scores and Lives",
          "Score and Live Text",
          "The Dot",
          "Completing the Dot",
          "The Pen"
        ],
        "The Game Workflow": [
          "The Game Over Function",
          "Moving the Camera Down",
          "Spawn New Traps #1",
          "Spawn New Traps #2",
          "Delete Traps close to Spawn",
          "Delete Traps after Time",
          "Animated Saw Blade Prefab",
          "Even More Trap Prefabs",
          "Game Over Screen UI",
          "No Drawing on Game Over",
          "Trap Spawn Position Fix",
          "Menu Scene"
        ],
        "Another Game Mode": [
          "A new Game Mode",
          "Updating GameManager",
          "The Game Over Screen",
          "The Win Screen",
          "Stop Player on GameOver",
          "Player Lose Particle Effect",
          "Using the Particle Effect",
          "Another Level"
        ],
        "Level Selection Scene": [
          "Level Select Scene",
          "Level Select Button",
          "Level Select Script",
          "Level Number & Fixes"
        ],
        "Final Touches": [
          "Optimizing Menu & LevelSelect Design",
          "Final Touches"
        ],
        "Conclusion": [
          "Conclusion"
        ]
      },
      "requirements": [
        "PC or Mac",
        "Mouse",
        "The mood to finish the course and learn new stuff."
      ],
      "description": "In this Course you'll learn how to create a Physical based Puzzle games with Unity Engine. Physical games are loved by a lot Players all over the world. I will show you step by step how you can create Physical based 2D Puzzle games.\nThis course is a Beginner course, so if you have trouble in any case, write me a message or Q&A, and i'll help as best as i can.\nIf you are beginner, you might have some trouble to follow, but the videos will guide you through the complete course. Don't forget you only become better if you repeat things and keep on learning!\nSo we create Systems which will give us the freedom to:\nC# (Monodevelop)\nA Pen Mechanism to draw dots and lines\nTrigger Actions to Lose Lives or get Score\nAn Endurance Game mode\nA Level Select Menu for Single Levels\nUnity (2019.1)\nwe create an Endurance unlimited Game Mode\nwe create Game Logic which handles different Game Modes\nwe create a main menu scene to choose the Mode to play\nwe create a Game Over scene panel and Win panel\nwe create 2 simple Levels\nwe create a simple Particle Effect\nwe animate Saw Blades and Mines\nwe learn physics and all needed components\nCourse Material\nI provide the following Material with the Course:\nTexture Atlas for basic game design\na Circle Grafic\nYou have to write the code on your own, i do not provide the final scripts!\nAll other graphics for Menu's, Icons, Images or Buttons need to be created on your own.\nAll Materials i provide are for education only and should not be in your final release!\nConclusion\nIn the end of this course you will have a fully functional 2D Physics Based Puzzle Game.\nChallenge\nAfter you have created nice Menus, Buttons, and maybe additional content, upload the Game to any Gaming Website, Google Playstore, Apple Store or even Windows Store or Steam. Try to create at least 20 Levels and extend the Prefabs for the Endurance Mode.\nSo what are you waiting for?\nLet's make your dream game a reality!!\nLevel: Beginner\nVideo Course Length: ~5 hours\nUnity Version required: 5.3+",
      "target_audience": [
        "You are a beginner in Unity.",
        "You want to create or finish your first game, or any game.",
        "You want to learn about 2D Physics in Unity."
      ]
    },
    {
      "title": "Unreal Engine 5 for Absolute Beginners: Build Subway Surfers",
      "url": "https://www.udemy.com/course/unreal-engine-5-for-absolute-beginners-build-subway-surfers/",
      "bio": "Learn the Logic of Blueprint Scripting in Unreal Engine 5.4",
      "objectives": [
        "Mastering Unreal Engine basics, navigation, UI, lighting and more...",
        "Understanding the logic and functionalities of Blueprint Scripting.",
        "Crafting maps and character classes for a complete game.",
        "Implementing character movement and interactive mechanics.",
        "Creating immersive environments with materials and textures.",
        "Enhancing gameplay with sound design principles.",
        "Tackling obstacles and incorporating collectibles into the game.",
        "Designing a polished UI for a seamless end-screen experience.",
        "Utilizing workflow shortcuts for efficient development.",
        "Independently creating unique game projects by course end."
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Unreal Engine Basics": [
          "Introduction to Unreal Engine 5",
          "Installing Unreal Engine",
          "Creating first project",
          "User Interface",
          "Navigation",
          "Viewport",
          "Create and Transform Objects",
          "Lights and Post Process Volume",
          "Material",
          "Textures",
          "Static Mesh",
          "Lights",
          "Lumen",
          "Landscape",
          "Landscape Material",
          "Megascans Library",
          "Foliage"
        ],
        "Basics of Blueprint Scripting": [
          "Introduction to Blueprint Scripting",
          "Creating Blueprint",
          "Actor and Character Blueprint classes",
          "Blueprint Class Components",
          "Blueprint Event Graph",
          "Creating & Using Functions",
          "Using Variables",
          "Shortcuts in Unreal Engine",
          "What are Nodes",
          "Creating Nodes in Blueprint",
          "Blueprint Construction Script"
        ],
        "Subway Surfers": [
          "Set up the map",
          "Creating Character Class",
          "Possessing and Moving the Character",
          "Input",
          "Jump and Crouch",
          "Animation Blueprint",
          "Obstacles",
          "Trains Blueprint",
          "Moving Trains",
          "Coins",
          "User Interface",
          "End Screen",
          "Sound Effects"
        ]
      },
      "requirements": [
        "All you need is a computer capable of running Unreal Engine 5."
      ],
      "description": "Welcome to \"Unreal Engine 5 for Absolute Beginners: Create a Full Game Like Subway Surfers\"! This comprehensive course is designed for individuals who have no prior experience with Unreal Engine but are eager to learn and create their very own 3D game from scratch.\nIn this course, you will embark on an exciting journey through the basics of Unreal Engine 5, progressively building your skills until you can create a fully functional game reminiscent of the popular mobile game Subway Surfers. By the end of this course, you will have the confidence and knowledge to develop and design your own games using Unreal Engine 5.\nWhat You Will Learn:\nSection 1: Unreal Engine Basics\nIntroduction and Installing Unreal Engine 5: Learn how to download and install Unreal Engine 5 on your computer.\nCreating Your First Project: Start a new project and understand the initial setup.\nUser Interface: Get acquainted with the Unreal Engine interface and its key components.\nNavigation in Unreal Viewport: Master the navigation controls within the Unreal viewport to efficiently manage your projects.\nCreating and Transforming Objects: Learn how to create, move, rotate, and scale objects within your scene.\nLights and Post Process Volume: Discover how to light your scenes and enhance visuals with post-process effects.\nMaterials and Textures: Understand the basics of applying materials and textures to objects.\nStatic Meshes: Work with static meshes to populate your game world.\nLumen: Explore the powerful real-time global illumination feature of Unreal Engine 5.\nLandscape and Its Material: Create stunning landscapes and apply materials to bring them to life.\nMegascans Library and Foliage: Utilize the Megascans library for high-quality assets and add foliage to your environments.\nSection 2: Introduction to Blueprint Scripting\nIntroduction to Blueprint Scripting: Learn what Blueprints are and how they simplify the coding process.\nCreating Blueprint Classes: Dive into creating different types of Blueprint classes including Actor, Pawn, and Character classes.\nBlueprint Class Components: Understand the various components that can be added to Blueprints.\nBlueprint Event Graph: Learn how to use the event graph to control the flow of your game logic.\nCreating and Using Functions: Discover how to create reusable functions within Blueprints.\nUsing Variables: Manage game data effectively using variables.\nShortcuts in Unreal Engine 5: Boost your productivity with essential shortcuts.\nNodes and Creating Nodes in Blueprint: Learn about nodes and how to create them in Blueprints.\nBlueprint Construction Script: Understand the construction script and its practical uses.\nSection 3: Creating a Full Game Like Subway Surfers\nSetting Up the Map: Lay the groundwork for your game by setting up the initial map.\nCreating Character Class: Develop a playable character class.\nPossessing and Moving the Character: Implement character possession and movement mechanics.\nInput to Control Character: Configure input settings to control the character.\nJump and Crouch Mechanics: Add jumping and crouching capabilities to your character.\nAnimation Blueprint: Create and manage character animations.\nObstacles and Trains Blueprint: Design obstacles and moving trains to challenge players.\nMoving Trains: Implement the functionality for moving trains.\nCoins and Collectibles: Add coins and other collectibles to your game.\nGame User Interface (UI): Design a user interface including HUD elements.\nEnd Screen (Win and Lose Screens): Create end screens to signify game completion or failure.\nSound Effects: Enhance your game with immersive sound effects.\nWhy Take This Course?\nStep-by-Step Learning: Each section builds on the previous one, ensuring a smooth learning curve.\nHands-On Projects: Apply what you learn in real-world scenarios by creating a complete game.\nExpert Instruction: Learn from industry professionals with years of experience in game development.\nCommunity Support: Join a vibrant community of learners to share your progress and get feedback.\nEnroll now and start your journey into the world of game development with Unreal Engine 5! By the end of this course, you'll have created your own version of Subway Surfers and gained the skills to build even more complex games. Let's get started!",
      "target_audience": [
        "Aspiring game developers eager to learn Unreal Engine 5.",
        "Individuals with no prior experience in game development.",
        "Students looking to delve into Blueprint Scripting logic.",
        "Enthusiasts keen on creating their own games from scratch.",
        "Those seeking to enhance their skills in 3D game design.",
        "Anyone interested in exploring the world of game development with Unreal Engine 5."
      ]
    },
    {
      "title": "Mobile RTS Game in Unity 2D - From Scratch to App Store",
      "url": "https://www.udemy.com/course/mobile-rts-game-in-unity-2d-from-scratch-to-app-store/",
      "bio": "Create a Mobile RTS Game in Unity 2D. Build, Design and Code in C#. Publish to iOS and Android. Covers latest Unity 6!",
      "objectives": [
        "Develop and launch a mobile game from initial setup to app store publishing",
        "Design engaging game mechanics and manage resources effectively",
        "Build practical skills in coding, animation, and user interface design",
        "Learn the end-to-end process of creating a professional, market-ready game"
      ],
      "course_content": {
        "Introduction": [
          "Course Preview",
          "Troubleshooting"
        ],
        "Setup the Map": [
          "Setup Project",
          "Tilemaps",
          "More tilemaps",
          "Animated Tile",
          "Rocks and water tilemap"
        ],
        "Characters & Animations": [
          "Builder and Warrior",
          "Create Unit class and move",
          "Builder and Warrior Animations",
          "Check if unit is moving",
          "Apply speed to animator"
        ],
        "Game Manager & Inputs": [
          "Create Game Manager",
          "Singleton",
          "Get Input Position",
          "Prevent touch and mouse slides"
        ],
        "Unit Selection & Movement": [
          "Move the active unit",
          "Select active unit",
          "Flip the unit",
          "Outline material",
          "Display highlight on Selection",
          "Load material from Resources"
        ],
        "Clicking Effect": [
          "Point to click effect",
          "Fadeout effect",
          "Animation Curve",
          "Check for humanoid unit",
          "Change build target",
          "Deselect active unit"
        ],
        "Action Bar UI": [
          "Action Bar Start",
          "Action Bar Background",
          "Clear and display actions",
          "Detect UI clicks + new getters",
          "Clear bar on Deselect"
        ],
        "Actions": [
          "Build Tower Action",
          "Register actions",
          "Pass image to button",
          "Hook function to button"
        ],
        "Placement Process": [
          "Placement Process",
          "Show Placement Outline",
          "Move placement outline",
          "HvoUtils",
          "Code refactor",
          "Snap To Grid"
        ],
        "Highlight Build Area": [
          "Store highlight tiles",
          "Set tile color",
          "Offset the position",
          "Overlay tilemap",
          "Clear Highlights",
          "Display blocked tiles",
          "Unreachable tilemaps",
          "Check for blocked gameobjects"
        ]
      },
      "requirements": [
        "Unity Fundamentals"
      ],
      "description": "This course is made in latest Unity 6, but is still compatible with older versions of Unity.\nBuild a Fully Functional Mobile RTS Game in Unity 2D and Publish It to the App Stores\nThis course offers a complete, step-by-step guide to developing, designing, and publishing a mobile real-time strategy (RTS) game using Unity 2D and C#. It’s perfect for beginners who want to learn game development from scratch and for experienced developers looking to expand their skills in mobile RTS game creation.\nWhat Makes This Course Unique?\nYou’ll work on a single project from start to finish—building every feature yourself without relying on third-party libraries. This ensures you learn not just the \"how,\" but also the \"why\" behind every system and mechanic.\nCourse Highlights:\nSetup Your Game Environment:\nStart by setting up your Unity project and designing a game map with tilemaps and animated tiles. Learn to create dynamic environments and design immersive visuals for your RTS game.\nCharacter Creation and Animation:\nAnimate game characters, including builders and warriors, with unique behaviors and appearances. Master Unity’s animation tools to make your game come alive.\nGame Mechanics:\nImplement crucial gameplay systems like:\nUnit selection and movement with click-based interaction.\nBuilding placement and confirmation workflows, complete with real-time visual feedback.\nUnit actions, such as gathering resources, constructing buildings, and combat engagement.\nResource Management System:\nDevelop a resource economy where units collect and store wood and gold, enabling players to construct structures, train units, and unlock new gameplay opportunities.\nPathfinding with A* Algorithm:\nLearn the fundamentals of pathfinding as you code your own A* algorithm. Ensure that units can navigate obstacles and follow smooth movement patterns on the game map.\nEnemy AI and State Machines:\nProgram intelligent enemy behaviors using state machines, including movement, targeting, and attacking. Create dynamic enemy waves with unique challenges.\nCombat System and Unit AI:\nDesign a combat system where units engage in battles with enemy waves. Implement stances like defensive and offensive modes, enabling strategic control of player units.\nGame Polishing:\nEnhance the user experience by adding features like:\nDamage popups and event announcements.\nAudio effects for footsteps, attacks, resource collection, and more.\nCamera controls for smooth navigation across the map.\nFinal Game Improvements and Publishing:\nTest your game on iOS and Android devices, ensuring performance optimization. Learn the full deployment process for both platforms, including:\nSetting up store pages.\nCreating preview videos.\nComplying with store guidelines for publishing.\nBy the End of This Course:\nYou’ll have a fully functional RTS game ready for release on mobile app stores. Moreover, you’ll gain the skills to create, code, and publish future games, setting you on a path toward becoming a professional game developer.",
      "target_audience": [
        "Aspiring game developers eager to build and publish their first mobile game",
        "Unity users looking to expand into 2D game development",
        "Developers interested in hands-on, project-based learning for RTS games",
        "Anyone wanting to learn the full process of creatin, and releasing a game on mobile platforms"
      ]
    },
    {
      "title": "Unreal Engine 5: First Person Shooter",
      "url": "https://www.udemy.com/course/unreal-engine-5-first-person-shooter/",
      "bio": "An Unreal Engine Blueprint Course",
      "objectives": [
        "Use Unreal Blueprints visual scripting to create every aspect of your very own First Person Shooter.",
        "Make your own complete game in Unreal Engine.",
        "Create your own playable levels, complete with enemies, pickups and interactables.",
        "How to package the project for friends and family to play."
      ],
      "course_content": {},
      "requirements": [
        "This course is completely in Unreal Blueprints. No programming experience is required, but could be helpful."
      ],
      "description": "Greetings and welcome to the \"Unreal Engine 5: First Person Shooter\" course!\nThroughout this program, we'll embark on the exciting journey of prototyping an FPS game entirely from scratch, utilizing the power of blueprints. Wondering why blueprints? Well, visual scripting is not only beginner-friendly but also provides a dynamic way to witness your code in action, sparing you from the daunting task of sifting through countless lines of text.\nOur resource arsenal includes free assets generously provided by Epic Games, talented creators, and a myriad of other sources, catering to our needs for visually stunning VFX and immersive SFX. Brace yourself as we tweak and tailor some of these assets to seamlessly integrate them into our game.\nAs we wrap up this course, you'll have successfully crafted the prototype for your very own single-player FPS adventure. From sculpting the player character and designing weapons to incorporating pickups like ammo and health, we'll delve into the fundamentals of basic level design and populate our digital world with a variety of formidable foes. Prepare to explore different techniques and understand the appropriateness of each approach.\nWithout further ado, let's dive headfirst into the realm of game development!\nGood luck and have fun with it.",
      "target_audience": [
        "Beginner/Intermediate Unreal Engine 5 Blueprint Scripting"
      ]
    },
    {
      "title": "Unreal Engine 4 First Person Shooter: Lifeforce Tenka Clone",
      "url": "https://www.udemy.com/course/unreal-engine-4-first-person-shooter-lifeforce-tenka-clone/",
      "bio": "A clone of the 1997 game \"Lifeforce-Tenka\" created by Psygnosis.",
      "objectives": [
        "Creating enemy AI behaviours using Blackboards, Behaviour trees and tasks.",
        "Sound Implementation.",
        "Unreal's particle system; Cascade.",
        "Pickups.",
        "HUD for radar, ammo count and other useful information.",
        "Player stamina system.",
        "Animation implementation using locomotion and state machines.",
        "Core game loop containing a winning and losing condition.",
        "Level construction, collision and lighting.",
        "Cached Geometry for unusual animations like a chainsaw.",
        "Driving animated textures with Blueprint.",
        "Controlling animated textures in particles.",
        "Player sprint & slide mechanic.",
        "Good old camera shake.",
        "Animated texture creation: turning a physics based simulation or animation into a shader for use in-game.",
        "Handling game pause events.",
        "Blueprint class communication.",
        "Manipulating an armature's bone at runtime using inverse kinematics.",
        "A reusable mechanic where we have a locked door that requires a specific key to open it."
      ],
      "course_content": {},
      "requirements": [
        "Unreal engine 4.25.3 installed and ready to go. Also ensure you have enough space on your hard drive; 8GB should be enough."
      ],
      "description": "In this course, you will be creating a full first person shooter game which will be heavily inspired by one of my childhood favourites, \"Lifeforce-Tenka\" by Psygnosis. All of the in-game assets will be made available so we can focus more on being creative with the actual game development process.",
      "target_audience": [
        "Beginner to intermediate Unreal engine users"
      ]
    },
    {
      "title": "Unity Game Design & Development : 20+ 2D & 3D Projects",
      "url": "https://www.udemy.com/course/complete-game-design-development/",
      "bio": "Learn Game Design & Development with Unity Blender C# Inkscape . Create 2D & 3D Game Art Assets , Build Game Projects",
      "objectives": [
        "Learn Game Design & Development by Building 20+ Projects",
        "Create Complete 2D & 3D Games in Unity & C#",
        "Build 3D Low poly Models in Blender",
        "Design 2D Game Art Assets in Inkscape",
        "Learn Complete Process of Game Design & Development",
        "Boost your Artistic & Programming Skills"
      ],
      "course_content": {
        "Introduction to this Course": [
          "Introduction to this Course",
          "Installing & Setting Up Unity 6",
          "Creating Your First C# Script in Unity 6",
          "Installing and Setting Up Unity"
        ],
        "Project 1 : 2D Save The Bunny Game in Unity": [
          "Setting Up The Game",
          "Setting Up The Player",
          "Creating Player Movement",
          "Restricting Player Movement",
          "Setting Up The Enemy Spikes",
          "Spawning The Enemies",
          "Spawning Enemies from Random Position",
          "Repeatedly Spawning Enemies",
          "Detecting Collisions With the Enemies",
          "Adding Cool Trail Effects",
          "Adding Dust Particle Effects",
          "Checking For GameOver",
          "Keeping Score",
          "Displaying Score On Screen",
          "Creating The GameOver Panel",
          "Creating A Restart Button",
          "Designing The Main Menu",
          "Creating Cool Looking Main Menu Animations",
          "Creating Game Over Panel Animations"
        ],
        "Project 2 : Design Your First 2D Game Asset": [
          "Inkscape Crash Couse",
          "Creating The Tappy Ball - Part 1",
          "Creating The Tappy Ball - Part 2",
          "Creating The Second Ball",
          "Creating The Pipes",
          "Creating Sky Clouds & Ground",
          "Exporting The Assets for Using them in Games"
        ],
        "Project 3 : Design 2D Game Asset for Fruit Ninja Game": [
          "Design The Fruit",
          "Design The Cut Fruit",
          "Design The Splash Effect",
          "Design The Wooden Background",
          "Creating 3D Looking Bomb"
        ],
        "Project 4 : Design & Animate A 2D Game Character": [
          "Design The 2D Game Character",
          "Animating The Character"
        ],
        "Project 5 : 3D Endless ZigZag Game": [
          "Getting Started and Setting Up",
          "Controlling The Player",
          "Moving After First Touch",
          "Fall Checking With Raycasting",
          "Smooth Camera Follow",
          "Platforms Falling",
          "Platforms Spawning",
          "Random Spawning",
          "Some Small Fixes",
          "Creating Collectable Diamonds",
          "Destroying On Collision",
          "Adding Particle Effects",
          "Creating Text Animations",
          "More Animations",
          "GameOver Menu",
          "Coding The UiManager",
          "Keeping Score & HighScore",
          "Creating GameManager",
          "Finishing The Game",
          "Publishing The Game"
        ],
        "Project 6 : Simple 3D Player Controller in Unity": [
          "Creating The Character Controller",
          "Shooting Bullets",
          "Detecting Collisions With the Enemies"
        ],
        "Project 7 : Building Your First Android Game With Unity": [
          "Setting Up Unity & Building First Android Game"
        ],
        "Project 8 : 3D - Design Your First 3D Model & Import into Unity": [
          "Design Your First 3D Model in Blender & Import into Unity"
        ],
        "Getting Started With Blender": [
          "Navigating Around in Blender",
          "Moving Scaling and Rotating Objects in Blender",
          "Global and Local Axis in Blender",
          "Different Views in Blender",
          "Understanding Origin in Blender",
          "Pivot Points in Blender",
          "Section Challenge - Test Your Skills"
        ]
      },
      "requirements": [
        "Basic knowledge of Unity & C# is Required",
        "Unity Personal Edition , Blender & Inkscape are required to build all projects"
      ],
      "description": "Want to Learn Game Design & Development by Building lots of Projects?\nThen this is the perfect course for you.\nAfter Finishing this course You will be able to build 20+ 2D & 3D Projects using Unity , C# , Blender & Inkscape .\nList Of Projects You Will Build In This Course :\nBuild A 2D Game Start To Finish\nCreate 2D Game Assets for Complete Games\nDesign & Animate 2D Game Character\nBuild A 3D Endless ZigZag Game\nCreate A 3D Character Controller in Unity\nBuild Your First 3D Model & Import into Unity\nCreate Low Poly 3D Rocks Mountains Cars and More\nCreate 3D Colorful Egg Model in Blender\nDesign 3D Musroom Model in Blender\nDesign 3D Island Environment in Blender\nand many many more....\nI have taught Unity Game Development & Design to thousands of people on my Youtube Channel: Charger Games. I love teaching complex concepts in a simple way, so even if you have no previous coding experience, no need to worry, I'm gonna teach you everything step by step in the perfect order.\nYou will also learn to create your own 2D Game Assets using Inkscape and 3D Game Assets using Blender. There are lots of 2D & 3D Game Art projects in this course.\nLearn the basic concepts, tools, and functions that you will need to build fully functional Games with C# and the Unity game engine and to create 2D & 3D Game Art Assets using Blender & Inkscape\nBuild a strong foundation in 2D & 3D Game Design and Game Development .\nLearn to use 2D & 3D features of Unity\nBuild Fully functional Games with Unity\nLearn Absolute Basics of 3D Modeling\nDesign your own 2D Game Art Assets\nCreate 20+ 2D & 3D Projects in Unity Blender Inkscape\nCreate Real world example projects\nMaster Game Design & Development skills\nA Powerful Skill at Your Fingertips  Learning the fundamentals of Unity 2D & 3D Game Development puts a powerful and very useful tool at your fingertips. Unity is free, easy to learn, has excellent documentation, and is the game engine used for building games. With Blender & Inkscape you can create your own 2D & 3D Game Art Assets anytime you want and use them in real game projects.\nContent and Overview  Suitable for beginning Game Programmers or Game Designers , through this course of 100+ lectures and 20+ hours of content, you’ll learn 2D & 3D Game Development and by building 20+ projects using Unity , Blender, Inkscape , C# . You can use this skills in any of your Game Design Projects later on.\nStarting with the installation of the Unity , Visual Studio , this course will take you through the process of learning game development and Design  with unity and Blender by building lots of 2D & 3D Projects .\nStudents completing the course will have the knowledge to create fully functional Games with Unity and C# . They will also be capable of building own 2D & 3D Game Assets for using in any Game Design projects.\nComplete with working files, you’ll be able to work alongside the author as you work through each concept, and will receive a verifiable certificate of completion upon finishing the course.",
      "target_audience": [
        "Anyone willing to Learn Game Design & Development By building Projects",
        "Artists curious about Game Design & Development Process",
        "Beginner Programmers who want to Learn Complete Game Design Process"
      ]
    },
    {
      "title": "Unity Game Development: Create A 3D Beat Em Up Game",
      "url": "https://www.udemy.com/course/unity-game-development-create-a-3d-beat-em-up-game/",
      "bio": "Learn The Fundamentals Of Creating Stunning 3D Fight Games In Unity Game Engine",
      "objectives": [
        "Write programs in C#",
        "Work with 3D models",
        "Animation in Unity",
        "Create Enemy AI",
        "Engage Characters In A Fight",
        "Build 3D Games"
      ],
      "course_content": {
        "3D Beat Em Up Game": [
          "Watch This Lecture If You Are A Complete Beginner",
          "3D Beat Em Up Game Preview",
          "Importing Assets And Preparing Our Project",
          "Configuring Our Player",
          "Creating Players Animations",
          "Player Movement Script",
          "Character Animation Script",
          "Player Attack Script",
          "Configuring Our Enemies",
          "Enemy Movement Script",
          "Creating Player Attack Points For Detecting And Dealing Damage",
          "Character Animation Delegate Script",
          "Creating The Health Script",
          "Knocking Down Enemy With Combos",
          "Adding Sound FX In The Game",
          "Camera Shake FX",
          "Enemy Attack Points And Dealing Damage To Player",
          "Enemy Manager Script",
          "Displaying Health Stats With UI"
        ]
      },
      "requirements": [
        "Unity3D (Free Version)"
      ],
      "description": "Learn how to create 3D fight games using Unity, the world-leading free-to-use game development tool. The course is structured in a way that even complete beginners will have no trouble following along and learning all the techniques that are taught in the course. With my teaching approach, you will be amazed what you can accomplish right from the first moment you start the course.\nIf you finally want to learn all the fundamentals of not only creating 3D Beat Em Up Games, but creating 3D fight games in general then this course is a must for you. Everything is explained in an easy to understand way and nothing will be left unclear.\nI found out that the best way to teach someone how to create a game is by practice, and this course is all about practice.\nHere are some of the things you will learn:\nPhysics\nPathfinding\nBasic artificial intelligence\nLightning & lightmapping\nCharacter animations\nScripting, scripting, scripting!\nSound FX & music\nParticle FX\nBattle System\nRaycasting!\nAnd a ton more....\nIf you want to make your dream of creating a 3D Fight game come true, enroll in this course now, you will not be disappointed.",
      "target_audience": [
        "Complete beginners",
        "Programmers who want to learn game development"
      ]
    },
    {
      "title": "Object Oriented Programming for Unity game devs",
      "url": "https://www.udemy.com/course/oop-for-unity-devs/",
      "bio": "Learn OOP theory using game-related examples and practice how to apply it to a Hands-On Unity 2D game prototype",
      "objectives": [
        "Learn how object oriented programming works in practice",
        "Understand Composition and how to use it",
        "Learn how to apply OOP in Unity",
        "Learn how to refactor your code to improve its quality",
        "Develop a problem solving attitude",
        "Get experience using Unity 2021",
        "Learn good coding and design patterns",
        "Learn how a 2D space shooter game works",
        "Practice exercise per each section"
      ],
      "course_content": {
        "Introduction": [
          "How to ask QA / get a refund",
          "Assets used in this course are CC0 licensed",
          "Join the community!"
        ],
        "OOP theory": [
          "Started Project download",
          "Project overview",
          "Why do we want to use OOP?",
          "Object vs Class",
          "Encapsulation",
          "Abstraction",
          "Inheritance P1",
          "Inheritance P2",
          "Polymorphism",
          "Compostion",
          "Do we need all this complexity?"
        ],
        "Problem 1 - Adding multiple weapons": [
          "Problem with the current implementation",
          "Planning a solution",
          "Encapsulation - Weapon class",
          "Abstraction - Attack Pattern SO",
          "Inheritance - different Attack Patterns",
          "Challenge - Burst Attack Pattern",
          "Solution - Burst Attack Pattern"
        ],
        "Problem 2 - Adding meteorite to our game": [
          "Problem - Bullet collision is rigid",
          "Creating a common interface",
          "IHittable interface",
          "Refactoring Player and Enemy scritps",
          "Challenge - Create a meteor",
          "Solution - Create meteor"
        ],
        "Problem 3 - Duplicate code": [
          "Problem - Adding Feedback to hit logic",
          "Unity Components architecture",
          "Health class",
          "Reusable feedback",
          "Player feedback",
          "Challenge - Bullet feedback",
          "Solution - Bullet feedback"
        ],
        "Problem 4 - Adding more enemy types": [
          "Problem - Adding more enemy types",
          "Solution: Inheritance?",
          "Composition: MovementActionAI",
          "Composition: Shoot and Aim Actions",
          "Challenge - New Enemy Type",
          "Solution -New Enemy Type"
        ],
        "Summary": [
          "Summary",
          "Bonus lecture"
        ]
      },
      "requirements": [
        "Mac or PC capable of running Unity 2021 or later",
        "A passion and willingness to learn how to code",
        "I know my way around Unity",
        "I understand the basic of C# language"
      ],
      "description": "Improve your coding skills by learning Object Oriented Programming and how to apply it in Unity.\n\n\nAll the theory is explained on game-related examples and next we use a Hands-On project - a prototype of a 2D Shoot 'Em Up game to learn how to apply what we have learned in a Unity project.\n\n\nDo you find it difficult to add new Enemies, Weapons or new Game Mechanics to your game? Do you spend more time fixing bugs than actually testing the new feature that was meant to take you few minutes to add? If so I bet that you will benefit a lot from learning OOP!\n\n\nInstead of talking about generic concepts like Animal-Dog or Person-Employee we will use game-related examples like implementing different weapons to your game or how to add multiple different enemies to your project.\n\n\nThis course is made out of 2 parts:\n\n\nTheory Part:\nIn Section 1 I will explain WHAT is Object-Oriented programming:\nEncapsulation\nAbstraction\nInheritance\nPolymorphism\n*We will also talk about composition and why \"prefer composition over inheritance\" is a GOOD advice.\n\n\nPractical Part:\nNEXT we will work on a HANDS-ON project by implementing new features and seeing HOW and WHY to apply OOP solution. We will explore why a prototypical code will fail when we want to expend our game with new features and I will show you HOW to use OOP to enable us to easily add new weapons, enemies and other features that we want to have in our game.\n\n\nThere is no way to learn OOP just by exploring theory. You need to PRACTICE and explore some game dev related examples to get a feel for how to apply OOP in your code ?\n\n\nWe will tackle the most common game dev tasks:\nAdding different weapons to your game\nAdding a new game mechanic\nMaking tour code more component-based\nAdding a new enemy\n\n\nWhat you can expect from the course: ?\n\n\n5h of video content\nLearning OOP can be done only through practice. After you watch the theory (Section 1) I have prepared few example problems related to Game Dev so that you can PRACTICE what you have learned.\n\n\nA Fully working Shoot'em up game prototype\nTheory (WHY) is useless if you don't know how to apply it in practice.\nI have prepared a working prototype of a small game that we will refactor so that you can learn HOW to use OOP and WHEN to do it.\n\n\nProject files and scripts\nFor each video where we write some code I will provide a github link so that you can view the changes in the code as well as my full project that you can open in unity to find any issue / difference / bug that you might have.\n\n\nMy help\nIf you don't understand something just ask here in the comment section or on courses Discord channel. I do my best to daily answer any question.\n\n\n\n\n30-Days refund policy\nIf you don't enjoy the course let me know and I will issue a refund if you are within the 30 days from the date that you made the purchase.\n\n\nSunny Valley Studio has already helper more then 4350 students in addition to almost 10 000 subscribers on my YouTube channel to improve there C# coding skills and there knowledge about Unity by showing how to make 2D Platformer, a Juicy 2D shooter game or a 3D Survival game as video courses. On YouTube you can find everything from how to create Minecraft-like voxel world, a turn-based 2d game or an inventory system.\n\n\nHi! I'm Peter and will be your instructor.\nI am passionate about programming and Unity (worked for about ~5 years as a programmer / unity dev) and I will do my best to help you to develop game dev and programming skills that you can use to make your own games or to get a job in a game dev studio as a programmer )\n\n\nSee you in the course!",
      "target_audience": [
        "Beginner Unity devs looking to improve their coding skills",
        "Anyone who wants to Learn OOP in C#",
        "Unity beginners who are willing to work hard",
        "Anyone who wants to Build maintainable Games using C#"
      ]
    },
    {
      "title": "Complete Guide for Custom Inspectors & Windows in Unity!",
      "url": "https://www.udemy.com/course/unity-custom-inspectors-guide/",
      "bio": "Looking for ways to make your script a lot more designer-friendly? This is your definitive guide!",
      "objectives": [
        "Build your own customized inspectors from scratch",
        "Build windows inside Unity that communicate with your scripts by either getting or setting data",
        "Develop ways to make your code appear readable by designers so they have control over balancing the game"
      ],
      "course_content": {
        "Getting Started": [
          "Introduction video"
        ],
        "Fast ways to improve your script's inspector readability": [
          "What are attributes?",
          "Attribute #1: Range",
          "Attribute #2: Multiline",
          "Attribute #3: Tooltip, Space and Header",
          "Automatizing stuff using Context Menus",
          "Attributes Quiz"
        ],
        "Customizing The Inspector Of A Script": [
          "How is a custom inspector organized + Understanding what we'll build",
          "Writing Our Base Script (Interpolator)",
          "Defining A Custom Inspector + Understanding GUI Layout",
          "Creating The 'Edit' Tab + Transforming A Game Object Through Its Inspector",
          "Creating The 'Simulate' Tab + Changing Colors",
          "Drawing Lines In The Scene",
          "Drawing Handlers In The Scene",
          "Drawing Buttons In The Scene",
          "Using Compiler Directives to Avoid Mobile Compilation Errors",
          "Creating a Coroutine to go Through the Path in Game",
          "Inspector's GUI Quiz"
        ],
        "Creating Windows and Menu Items": [
          "How do Editor Windows work?",
          "Creating the Item class",
          "Creating a Manager Script",
          "Creating an Editor Window",
          "Creating a Toolbar to choose between 'Draw' and 'Create'",
          "Grabbing information from a EditorWindow",
          "Drawing the Create tab",
          "Avoiding ID conflicts and solving the non-serializable class issue",
          "Viewing/Removing current Items of the Inventory through the Window",
          "Viewing all the elements using a Scrollbar",
          "Editor Windows Quiz"
        ],
        "Writing Custom Attributes (Changing bool Default Look To A Toggle Button)": [
          "How do custom attributes work?",
          "Property Drawer Refresh",
          "Defining our PropertyDrawer Class",
          "Writing Toggle Buttons (Custom Look) for bools",
          "Passing Extra Data to a Property Drawer"
        ]
      },
      "requirements": [
        "Download, install and apply for a Unity 5 license",
        "Have some C# knowledge and how it works in Unity",
        "Have a good understanding of Object Oriented Programming (OOP)"
      ],
      "description": "Exposing properties to the editor is useful, but it can't be used to create complex things.\nBy creating custom inspectors and editors, you'll have full control over how Unity looks and exposes itself to Game Designers and people who are there to balance the game and play around with your scripts. Your job is to make their job easier, and this can be a good start point!\nThis course expects some proficiency in programming, so you should be comfortable with C# for Unity before you get started.\nThis unique content will get you through the whole process of creating nice looking custom inspectors for your scripts, windows and custom properties, but it will also cover quick ways to change the appearance of a script's inspector by using variable and method attributes.",
      "target_audience": [
        "Editing your code is always painful? Then this course is for you, because you'll learn ways to increase productivity by developing beautiful customized inspectors to facilitate this task",
        "Those game designers always want you to balance the game? Well, this is their task, so give them a good reason to to that by creating readable inspectors and windows to control the entire game",
        "Have no experience in Unity whatsoever? This course may not be what you're looking for, as you first should get comfortable with C#"
      ]
    },
    {
      "title": "Math Essentials for Tech Art in Unreal Engine",
      "url": "https://www.udemy.com/course/math-essentials-ue/",
      "bio": "All the math you need to start creating beautiful materials & procedural Blueprints",
      "objectives": [
        "Learn practical mathematics for games: Dot product, linear interpolation, 2D rotation and more",
        "See each function in two environments: Material (shader) nodes & Blueprint visual scripting",
        "Implement crucial techniques for graphics development: Directional mask by normal, advanced interpolation, value range compression, time-based noise",
        "Everyday examples: procedural snow layer, ghost material, RGB desaturation, flickering lightbulb, sin for UV rotation"
      ],
      "course_content": {
        "Dot product": [
          "Dot product"
        ],
        "Linear interpolation": [
          "Linear interpolation"
        ],
        "Sine & cosine": [
          "Sine",
          "Advanced sine"
        ],
        "Texture coordinates (UV)": [
          "Manipulating texture coordinates through math"
        ]
      },
      "requirements": [
        "Only basic knowledge of Unreal Engine is required. I assume you are able to use Unreal Engine, Material Editor and Blueprint Editor. However, you don't need to be skilled in mathematics. Elementary school knowledge is enough."
      ],
      "description": "This tutorial series covers the essential math for game art. It's full of practical solutions for material nodes & procedural generation (Construction Script). I took the most popular use cases that I've encountered as a Lead Technical Artist in games. Finishing the course will give you practical experience for the games industry.\nMaterial and Blueprint nodes are explained through popular examples, which you're likely to encounter in everyday tasks. Whether you're a programmer, an artist or a tech artist in need for a recap - you will find a useful tip for sure!\nI divided the topics into concise, 10 to 20-minute long tutorials. They're brief and packed with knowledge, coming from over a decade of my experience in game development.\n\n\nLearn how to use dot product in Unreal materials. Create a ghost effect, procedural snow layer, fake directional lighting and a silhouette glow.\nLearn how to mix values, blend textures and interpolate object transforms with lerp.\nUse sine for a pulsing material, wave masks and a flickering light with emissive glow. Learn how to animate material and light color over time - in sync with Blueprint.\nRotate UV maps or any 2D vectors with sine and cosine. Use sine for a flickering light in Blueprint, with animated material and synchronized light color. Learn about performance cost of sin/cos nodes. Are they worth replacing with smoothstep (Hermite) approximation?\nI've run a Tech Art Aid education project since May 2016. It started a YouTube channel, after which I added Twitch livestreams & a Discord server. Now it's a community which enjoy spending time together, sharing knowledge. This course is the same quality but tightly edited, to make the maximum out of your time.\nGood luck with mastering the fundamentals of game art math!",
      "target_audience": [
        "Artists or programmers, who want a solid foundation in math nodes for everyday tasks"
      ]
    },
    {
      "title": "Programming Fundamentals Through Game Development with Unity",
      "url": "https://www.udemy.com/course/programming-fundamentals-through-game-development-with-unity/",
      "bio": "Master Unity and C# with object-oriented design, coding, data structures, and game mechanics to create engaging games.",
      "objectives": [
        "Understand and Apply Programming Fundamentals",
        "Utilize Advanced Coding Paradigms",
        "Develop Complex Game Systems",
        "Think Critically About Software Architecture",
        "Implement Multithreading and Asynchronous Operations",
        "Manage Data with Serialization and File I/O",
        "Leverage Advanced Unity Features",
        "Integrate External Libraries and Tools",
        "Develop Multiplayer and Networking Features",
        "Optimize Game Performance"
      ],
      "course_content": {
        "Introduction": [
          "Course Overview"
        ],
        "Rapid Introduction to Unity and C#": [
          "Setting Up Our Tools",
          "Quick Start with C#",
          "Understanding the Game Loop"
        ],
        "Core Programming Concepts Through Gameplay Mechanics": [
          "Variables, Functions, and Scope",
          "Control Flow and Logic Implementation",
          "Arrays and Collections"
        ],
        "Object-Oriented Programming in Unity": [
          "Classes and Objects",
          "Inheritance and Polymorphism",
          "Interfaces and Abstract Classes"
        ],
        "Advanced Coding Paradigms": [
          "Design Patterns in Game Development",
          "Event-Driven Programming",
          "Dependency Injection"
        ],
        "Data Structures and Algorithms": [
          "Advanced Data Structures",
          "Algorithms in Game Mechanics",
          "Big O Notation and Performance Considerations"
        ],
        "Functional Programming Concepts": [
          "Lambda Expressions and LINQ",
          "Immutability and Pure Functions"
        ],
        "Multithreading and Asynchronous Programming": [
          "Introduction to Multithreading",
          "Asynchronous Programming"
        ],
        "Advanced Unity Features": [
          "Scriptable Objects and Data Management",
          "Editor Scripting and Tools Development",
          "Serialization and File I/O"
        ],
        "Integrating Third-Party Libraries and APIs": [
          "Using External Libraries",
          "Networking Basics (Final course files can be found in this lecture's resources)"
        ]
      },
      "requirements": [
        "No programming experience required!",
        "Everything is taught from the start, and for those that are familiar or even experienced with programming this course provides something for everyone."
      ],
      "description": "Unlock Your Potential as a Game Developer!\nAre you passionate about gaming and eager to dive into the world of game development? Do you want to master programming fundamentals while creating engaging and interactive games? Look no further! \"Programming Fundamentals Through Game Development with Unity and C#\" is the perfect course for aspiring game developers, programmers, and enthusiasts who want to combine creativity with technical skills.\nWhat You’ll Learn:\nRapid Environment Setup: Quickly get up and running with Unity and Visual Studio, setting the foundation for your game development journey.\nCore Programming Concepts: Master variables, functions, control flow, arrays, and collections through practical game mechanics.\nObject-Oriented Programming (OOP): Understand classes, objects, inheritance, polymorphism, interfaces, and abstract classes to build scalable and maintainable code.\nAdvanced Coding Paradigms: Explore design patterns, event-driven programming, dependency injection, and more to enhance your programming prowess.\nData Structures and Algorithms: Implement efficient data handling and algorithms to optimize game performance and mechanics.\nFunctional Programming: Utilize lambda expressions, LINQ, and functional programming techniques to write clean and efficient code.\nMultithreading and Asynchronous Programming: Improve game performance and responsiveness through concurrent and asynchronous operations.\nAdvanced Unity Features: Leverage Scriptable Objects, editor scripting, serialization, and third-party libraries to elevate your game development skills.\nWhy This Course?\nHands-On Learning: Engage with interactive projects and real-world examples that reinforce theoretical concepts.\nFast-Paced and Comprehensive: Cover essential topics efficiently, ensuring you gain a deep understanding without unnecessary delays.\nExpert Instruction: Learn from an experienced developer who simplifies complex concepts and provides clear, actionable guidance.\nCommunity Support: Join a vibrant community of learners to collaborate, share ideas, and receive feedback.\nLifetime Access: Revisit course materials anytime to reinforce your learning.\nWho Is This Course For?\nAspiring Game Developers: Start your journey in game development with a strong programming foundation.\nProgrammers Seeking Practical Application: Apply your coding skills to create interactive and engaging games.\nIntermediate Learners: Enhance your existing programming knowledge with advanced concepts tailored to game development.\nCreative Enthusiasts: Combine your passion for creativity and technology to build your own games.\nCourse Features:\n10 Comprehensive Sections: Structured modules covering everything from basics to advanced topics.\nEngaging Video Lectures: High-quality, easy-to-follow tutorials that make learning enjoyable.\nDownloadable Resources: Access scripts, assets, and reference materials to support your learning.\nEnroll Today and Start Building Your Own Games!\nWhether you're aiming to launch a career in game development or simply want to create your own games for fun, this course provides the skills and knowledge you need to succeed. Join us and transform your passion for gaming into tangible, impressive projects!\n\n\nTHIS COURSE IS UNITY 6 COMPATIBLE",
      "target_audience": [
        "Aspiring game developers with basic programming knowledge",
        "Programmers interested in applying advanced concepts to game development",
        "Intermediate learners seeking to enhance their skills in C# and Unity"
      ]
    },
    {
      "title": "Learn Unity in 60 Minutes",
      "url": "https://www.udemy.com/course/learn-unity-in-60-minutes/",
      "bio": "With this rapid course you will quickly learn the basics of Unity with no wasting time!",
      "objectives": [],
      "course_content": {
        "Introduction to Unity": [
          "Installing Unity",
          "Installing IDE",
          "New Project and configuring IDE",
          "Unity Editor and Panels Introduction",
          "Hierarchy and Scene Tools",
          "Camera",
          "Materials",
          "Physics",
          "Scenes",
          "Prefabs",
          "Animation",
          "User Interface (UI)",
          "UI Objects (Buttons, Images etc!)"
        ],
        "C# Coding": [
          "Adding C# Scripts",
          "Start(), Update(), Functions",
          "C# Variables",
          "Public, Private, Serializedfield",
          "if, else, Switch statements",
          "Coroutine and Invokes",
          "Loop Types",
          "Arrays, Lists, Dictionaries",
          "Unity Events",
          "OnTriggerEnter, OnTriggerExit, OnCollisionEnter, OntriggerStay",
          "Referencing Other Scripts"
        ],
        "Unity Features": [
          "Asset Store",
          "Tweening in Unity",
          "Using Scriptable Objects",
          "Adding a character",
          "Render Pipelines",
          "Terrain",
          "Adding your environment and Skybox",
          "Light",
          "Post Processing",
          "Collecting Objects",
          "Timeline",
          "Save Your Game With 3 different Methods",
          "Export",
          "All Documents"
        ]
      },
      "requirements": [
        "PC or Mac capable of running Unity",
        "Having access to the Internet and being able to browse the Internet"
      ],
      "description": "Learn unity without long and boring videos!\nIn this course, you'll learn many basic Unity features and get a crash course in C# coding language used in Unity.\nUnity is still one of the most popular game engines in the world, with new versions coming out every year and new features being added as time goes on.\n\n\nIn first part of the course, basic topics such as installation, code editor installation, Unity editor panels and scene tools, physics, animation will be introduced.\nIn the second part, we will start with C# from the very beginning.\nThen we will introduce topics such as Start(), Update(), Functions, if, else, Switch statements, Tweening, Coroutines and Invokes.\n\n\nIn the third part we will look at some of the more basic features of Unity. There will be a lot of information that will be useful for polishing or laying the groundwork when making a game.\nRender Pipelines, Terrain, Post Processing, Light settings, different saving methods will be the subject of this part.\n\n\nYou will also have access to documentation on some of the topics covered in the course. You will be able to access these files at any time to access a summary of topics covered in the file and codes used in course videos.",
      "target_audience": [
        "Those who want to learn Unity by seeing the important things instead of watching long and boring videos",
        "For those who want to take a quick look at the capabilities of Unity",
        "For those who want to get a basic introduction to game development in Unity"
      ]
    },
    {
      "title": "C++23 for Game Programming",
      "url": "https://www.udemy.com/course/cpp-for-games/",
      "bio": "Learn how to create games from scratch using C++23",
      "objectives": [
        "Understand the fundamentals of C++23",
        "Understand Object-Oriented Programming principals",
        "Use an Interface Development Environment (IDE) to develop a C++ project",
        "Create a 2D game in C++ that demonstrates quality and complexity",
        "Integrate 3rd party libraries into a C++ project",
        "Analyze and compare different approaches to solving complex programming problems"
      ],
      "course_content": {},
      "requirements": [
        "No previous C++ experience is required.",
        "Some previous programming experience (Python, C#, or JavaScript for example) would be helpful.",
        "An interest in game development."
      ],
      "description": "Welcome to the C++23 for Games Programming course. This course is designed to teach you how to program in C++ by making a simple 2D game from scratch. Whether you are a just starting out in higher education or a “lifelong learner”, this course will give you the knowledge and skills needed to be an effective C++ programmer.\nBeing literate in programming is an increasingly important skill to have. Programming languages like Python, Rust, C, and C++ are used in many different industries including research, finance, artificial intelligence, data science, and video games. This course aims to teach you how to solve programming problems at a higher level. By learning the fundamentals of C++ through a game programmer's perspective, you will not only be learning how to tackle complex programming problems, but you’ll also have fun doing it!\nThis course does not assume that you have any prior programming experience. The course covers the fundamentals of C++ programming and by the end of the course, you will be able to create a simple 2D game written in C++.\nYou will be using GitHub to keep your work for your programming assignments. GitHub not only allows you to safely store your precious source code in the cloud, but also to start a professional programming portfolio that may eventually be used to find your dream job.",
      "target_audience": [
        "This course is intended to prepare students for following a University-level C++ programming course.",
        "If you would like to make you own games, but lack the required programming experience."
      ]
    },
    {
      "title": "Type-Safe Interfaces with Modern C++",
      "url": "https://www.udemy.com/course/type-safe-interfaces-with-modern-c-v/",
      "bio": "Master the art of development with Modern C++ type system",
      "objectives": [
        "Use type system to your advantage",
        "Create safe, rich and expressive interfaces",
        "Use Pattern matching to implement metaprogramming",
        "Real world scenarios to tackle programming tasks"
      ],
      "course_content": {
        "Variants": [
          "The Course Overview",
          "Understanding Variants",
          "std::variant – Basic Interface",
          "std::variant – Visitation",
          "std::variant – Use Cases",
          "std::variant – Recap"
        ],
        "Implementing Variant Pattern Matching": [
          "The Problem with std::visit",
          "Creating an Overload Set",
          "Match – Implementation",
          "Match – Recap"
        ],
        "Optionals": [
          "What Is an Optional?",
          "std::optional – Basic Interface",
          "std::optional – Use Cases"
        ],
        "Function Parameters and Ownership": [
          "std::string",
          "std::string_view – Introduction",
          "std::string_view – Basic Interface",
          "std::string_view in Interfaces",
          "Other Examples of Owning/View Classes"
        ]
      },
      "requirements": [
        "C++, C++11/14 and master Modern C++17 utilities and techniques"
      ],
      "description": "In this course we’ll learn how to write correct, safe, and performant code by making use of C++’s type system. Firstly, we’ll learn about the Standard Library’s “algebraic data types” and how they can increase safety, performance, and readability of your application/library. We’ll then look at function interfaces. As an example, writing a function that takes a string in such a way that it performs optimally with both std::string and const char* seems like a daunting task. It gets even more tricky with functions taking other functions as input. Is it possible to generalize these issues and provide the “perfect” interface?\nAbout the Author :\nVittorio Romeo is a Software Engineer at Bloomberg LP. He completed his Bachelor's degree in Computer Science at \"Università degli Studi di Messina\".\nHe began programming at a very young age and is now a C++ enthusiast. While following the evolution of the C++ standard and embracing the newest features, he worked on several open-source projects, including modern general-purpose libraries and free cross-platform games.\nVittorio is an active member of the C++ community: he participated as a speaker at CppCon 2014/2015/2016, ++it Florence 2015 and at his local Linux Day 2013/2014 events, as a Student/Volunteer at C++Now 2015/2016, at Meeting C++ 2015/2016.\nHe currently maintains a C++-related blog and a YouTube channel featuring well-received modern C++11 and C++14 tutorials.\nWhen he's not writing code, Vittorio enjoys weightlifting and fitness-related activities, competitive/challenging computer gaming and good sci-fi movies/TV-series.",
      "target_audience": [
        "Intermediate C++ developers familiar with C++11/14 aiming to discover and master Modern C++17 utilities and techniques."
      ]
    },
    {
      "title": "Making computer games with GDScript [GODOT game engine]",
      "url": "https://www.udemy.com/course/making-computer-games-with-gdscript-godot-game-engine/",
      "bio": "Learn Godot game engine node system [Mastering Godot book tutorials]",
      "objectives": [],
      "course_content": {
        "Introduction": [
          "Course introduction lecture",
          "Introduction about 2D Scene",
          "Usefull links with educational content"
        ],
        "Content section": [
          "2D Node explained",
          "Rotation for 2D node",
          "Rotating game prop",
          "Scaling node",
          "Rotation recapitulation lecture",
          "2D transform",
          "Moveable game prop creation",
          "Second recapitulation",
          "Test you GDScript knowledge",
          "Game with strings",
          "Usefull information"
        ]
      },
      "requirements": [
        "download and instal free Godot game engine"
      ],
      "description": "Once you take this course you will know how to use the Godot game engine node system. In addition, you will know how to use node2D in detail. At the beginning of the lessons, they explain node2D and the basics of using GDScript. Later, you will learn how to make a word guessing game with the help of GDScript.\nThis course is part of a group of courses that promote the book \"Mastering Godot\".",
      "target_audience": [
        "Complet beginners in game creating"
      ]
    },
    {
      "title": "Easiest and Fastest Way of Java Game Development",
      "url": "https://www.udemy.com/course/java-game-dev/",
      "bio": "Learn to develop games in Java step by step from scratch. We will start from the very basic \"Hello World\" program.",
      "objectives": [
        "How to write shortest code to create 2D games in Java. Starting with just 4-5 lines to display shapes.",
        "How to make use of keyboard and mouse events to control animations.",
        "How to make various animations with shapes and images.",
        "How to make your complete project right from scratch to end."
      ],
      "course_content": {
        "Creating Window / Frame in Java": [
          "Choose Your Favorite IDE.mp4",
          "What is JFrame?",
          "How to create a Simple JFrame window to display the game content?"
        ],
        "Drawing Shapes, Texts and Images": [
          "What are x and y coordinates?",
          "How to Create Shapes?",
          "How to Draw a Cartoon with Shapes and What is Layer Concept?",
          "How to Display Text and Fonts?",
          "How to Display an Image?"
        ],
        "Learning to move objects": [
          "How to use Thread for Animations?",
          "How to move an Image in any direction?",
          "Moving Objects Code Explained"
        ],
        "Double Buffering and Antialiasing": [
          "What is Double Buffering?",
          "How to use Double Buffering",
          "How to move a Text and What is Antialiasing?"
        ],
        "Using Graphics2D to draw and move shapes in better way": [
          "How to create Easy Shapes?",
          "How to draw Line?",
          "How to move Easy Shapes?"
        ],
        "FPS and the need of a Stable FPS": [
          "What is FPS?",
          "How to use Stable FPS?",
          "Stable FPS Code Explained"
        ],
        "Collision Detection": [
          "What is Collision?",
          "How to detect collision between two Shapes?",
          "What are other collisions?"
        ],
        "Interacting with Keyboard and Mouse Events": [
          "How to use Key Events to move a car?",
          "How to use Mouse Listener Event?",
          "How to use Mouse Motion Listener Event?"
        ],
        "Creating Package for Complete Game Development by writing professional code": [
          "How to create a Game Platform or Template and write clean code?",
          "How to create and use GameUtil to reduce our code?",
          "How to create a helper class GameObject to manage code?",
          "How to play short sounds and background music?",
          "How to use AdvancedGamePlatform to write shortest code for any animation & game?"
        ],
        "Developing Animations and Games": [
          "How to animate the cartoon face with sound that we already created?",
          "Block Rescue Game",
          "Car Challenge Game",
          "Car Challenge Enhanced",
          "Car Challenge Completed",
          "Apple Catcher Game",
          "Apple Catcher Completed"
        ]
      },
      "requirements": [
        "JDK (Java Development Kit), Visual Studio Code or Netbeans or any other IDE",
        "Basic understanding of OOPS and Java Programming"
      ],
      "description": "Java Game Development Course: Create Fun Games with Less Code!\nWant to build awesome games without writing endless lines of code? This course is perfect for you! I'll guide you through the fundamentals of Java game development with a focus on simplicity and efficiency. Whether you're a beginner or looking to sharpen your skills, you'll learn how to bring your game ideas to life, step by step.\nWhat Practically You'll Learn:\n- Drawing Shapes: Master basic game graphics by creating simple shapes rectangles, ovals, squares and circles.\n- Working with Images: Learn how to use images and backgrounds to give your games a polished look.\n- Sound Effects: Add exciting audio to your games with easy-to-implement sound effects.\n- Moving Objects: Create dynamic, moving elements that bring your game world to life.\n- Double Buffering & Smooth Animations: Discover techniques to achieve smooth animations and ensure stable FPS for a polished experience.\n- Mouse & Keyboard Events: Learn how to capture mouse clicks and keyboard input for interactive gameplay.\n- Collision Detection: Implement basic collision detection to handle player-object interactions like hitting walls or collecting items.\n- Buttons & Menus: Build functional menus, buttons, and UI elements to make your game easy to navigate.\n- And More Cool Topics: We'll cover a range of exciting and practical topics to give you the tools to create engaging games.\nHands-On Learning:\nThis course isn't just theory—I'll guide you through the development of two complete games from start to finish. You'll apply everything you learn in real, playable projects, giving you the confidence and experience to create your own games.\nBy the end of this course, you'll have a strong understanding of Java game development and a portfolio of games to showcase your skills. Get ready to bring your game ideas to life with less coding and more fun!",
      "target_audience": [
        "1) One who has some knowledge of Java programming and wants to utilize it further in a creative way, 2) Students who want to create their game project for their final year project submission, 3) One who is a hobbyist and want to know how game development is done."
      ]
    },
    {
      "title": "Introduction to Worldbuilding in Unity",
      "url": "https://www.udemy.com/course/worldbuilding-in-unity/",
      "bio": "Designing Immersive Worlds and Levels in the Unity Game Engine",
      "objectives": [
        "Students will learn to build worlds in any software"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "What is Worldbuilding?",
          "Why is Worldbuilding Important?",
          "Elements of Worldbuilding",
          "How are Worlds Built?",
          "Tools to Build Worlds",
          "My Worldbuilding Workflow",
          "Worldbuilding Process Example",
          "Introduction to Kitbashing",
          "Kitbashing Example 2",
          "Building a Style",
          "Building Characters",
          "Add Dynamics and Immersion"
        ],
        "Worldbuilding Part 2": [
          "Part 2 Introduction",
          "What is Worldbuilding?",
          "Worldbuilding Example",
          "Immersive Worlds",
          "Describing Your World",
          "Reference Example",
          "Referencing Your World",
          "Planning Your World",
          "Roadmap Example",
          "Design Example",
          "Designing Your World",
          "Blocking Example 2",
          "Blocking Example 3",
          "Blocking Out Your World",
          "Populating Your World",
          "Asset Store",
          "SketchFab",
          "Adding Assets",
          "Kitbash Example",
          "Kitbashing",
          "Animating Your World",
          "Animation Example",
          "Hearing Your World",
          "Recording Your World"
        ],
        "Wrap Up": [
          "Wrap Up Animation Project"
        ]
      },
      "requirements": [
        "Be able to open creative software"
      ],
      "description": "In this course, you will learn how to approach world building and create immersive worlds that enhance your creative output. You will begin by understanding the foundations of world building and explore different approaches to the creative process. We will cover the key elements of world building and discuss how to innovate and experiment with these elements to create unique and original worlds.\nIn addition to learning about the theory behind world building, we will also explore practical tools and techniques for building worlds in Unity. You will learn how to create 3D environments, design gameplay mechanics, incorporate audio and visual effects, and implement AI and character behavior.\nThroughout the course, you will have the opportunity to apply what you have learned by building your own world. You will receive feedback and guidance from the instructor and your peers, and will be encouraged to experiment and explore different creative directions.\nBy the end of this course, you will have a strong foundation in world building and be able to apply these skills to your own creative projects. You will understand how to approach world building, create immersive environments, and use Unity to bring your worlds to life. Join us on this exciting journey into the world of world building!",
      "target_audience": [
        "Beginners wanting to make cool stuff"
      ]
    },
    {
      "title": "Create Zelda-like skills with C++ in unreal engine 5",
      "url": "https://www.udemy.com/course/create-zeldar-like-skills-with-c-in-unreal-engine-5/",
      "bio": "Learn all you need to know about designing skill and locomotion managements with C++ in Unreal Engine 5!",
      "objectives": [
        "A powerful skill framework to handle various abilities",
        "Create abilities of remote bomb, magnesis, ice actor and stasis skill",
        "Sprint/Gliding/Exhuasted/normal state management with stamina system",
        "Robust and neat UI system for Multiple gameplay mechanical actors such as wind tunnel, pressure plate, pickable object, breakable wallskill selection",
        "Communication between C++ and blueprint"
      ],
      "course_content": {
        "Setup project and basic locomotion states": [
          "Course Introduction",
          "Project Creation And Configuration",
          "Camera Boom And Camera",
          "Enhanced Input Part 01",
          "Enhanced Input Part 02",
          "Character Movement",
          "Rotate Camera",
          "Locomotion Manager",
          "Sprinting Action",
          "Stamina atribute",
          "Stamina UI",
          "Animation UI",
          "Exhausted State",
          "Gliding State",
          "Simulated Gravity And Falling State",
          "Handle Animation From Cpp",
          "Import Assets And Setup Animations",
          "Display Parachutte Model",
          "Wind Tunnel"
        ],
        "Skills management framework": [
          "Skill Selection Panel Part 01",
          "Skill Selection Panel Part 02",
          "Skill Selection Panel Part 03",
          "Skill Framework Part 01",
          "Skill Framework Part 02"
        ],
        "5 Skills Creation": [
          "Remote Bomb Part 01",
          "Remote Bomb Part 02",
          "Remote Bomb Part 03",
          "Remote Bomb Part 04",
          "Magnesis Part 01",
          "Magnesis Part 02",
          "Magnesis Part 03",
          "Magnesis Part 04",
          "Magnesis Part 05",
          "Magnesis Part 06",
          "Ice Actor Part 01",
          "Ice Actor Part 02",
          "Ice Actor Part 03",
          "Ice Actor Part 04",
          "Ice Actor Part 05",
          "Ice Actor Part 06",
          "Ice Actor Part 07",
          "Stasis Part 01",
          "Stasis Part 02",
          "Stasis Part 03"
        ],
        "Other gameplay mechanical actors": [
          "Interact Objects Part 01",
          "Interact Objects Part 02",
          "Interact Objects Part 03",
          "Interact Objects Part 04",
          "Pressure Plate Part 01",
          "Pressure Plate Part 02",
          "Breakable Actor Part 01",
          "Breakable Actor Part 02",
          "Spawn Temporary Wind Tunnel Part 01",
          "Spawn Temporary Wind Tunnel Part 02"
        ],
        "Bonus": [
          "Final Showcase Project"
        ]
      },
      "requirements": [
        "Basic C++ experience with unreal engine is required"
      ],
      "description": "Please read requirement first, learners need to have basic understanding of C++.\nOr I recommend you take basic level C++ course first.\n\n\nUPDATES:\n2024.10.12 : All auto-generated captions are corrected.\n\n\nWelcome to \"Create Zeldar-like skills with C++ in unreal engine 5\"! You will learn how to create a skill framework which can handle various abilities including remote bomb, magnesis, stasis and ice actor, and basic locomotion states such as sprinting, gliding and exhausted states. I prepared reference projects for every lesson so when you are stuck in any lesson you can freely download them and compare your own project with them! Don't worry about making mistakes, learn from them!\n\n\nIn the first section, we're going to setup project and implement basic locomotion states for player character from scratch in C++. With enhanced input system and locomotion manage, these customized actions will be triggered when player character meets certain conditions. For example, once player character is falling from high place and having enough stamina, gliding action is available. If stamina is depleted, player character cannot jump, sprint or gliding anymore.\n\n\nSecondly, we will design and create a powerful framework to manage various skills before any skill creation. Only one skill could be activated at one time. Thanks to the convienient communication between blueprint and c++ in unreal engine, we can easily transfer information from UI to our code base. It is the best way to take advantage of them. Blueprint is more convenient for visual design and c++ is more performant for game in general.\n\n\nThirdly, we're focus on several kinds of different skills including remote bombs, magnesis, stasis and ice actor spawning. In remote bomb skill, a bomb will be spawned and player character can throw it out. When it explodes on breakable wall, it will crash and if it explodes on grass, a tempory wind tunnel will be spawned, which might be helpful for player to solve puzzles in the game. Sure I will introduce more details in the course. Though their logics are totally different, they all in the same skill framework so developer can easily add new skill types.\n\n\nAt last, several useful gameplay object will be implemented for better play experience. Those objects must be compatible with skill framework. For example, interactable object such as rock will be added. When player is holding a rock but trying to activate a skill, this rock must be dropped first. Similarly, pressure plate, wind tunnel, breakable walls will be implemented.\n\n\nYou can also join my discord to ask question or in udemy Q&A part. With detailed reference project provided in each lecture and a step-by-step approach, what are you waiting for? Join the course and there's no better time to start your own dream project now!",
      "target_audience": [
        "Learners who want to build a project with multiple skills",
        "Learners who want to apply their C++ knowledge to game project",
        "Learners who want to create a zelder-like third-person puzzle game"
      ]
    },
    {
      "title": "Complete Unity Course for Beginners: Fun Game Projects",
      "url": "https://www.udemy.com/course/unity-for-beginners-create-5-simple-games/",
      "bio": "Build Your Game Portfolio with Easy-to-Follow Unity Projects",
      "objectives": [
        "Master Unity Basics",
        "Create 2D Hyper-Casual Games:",
        "Programming Foundations",
        "Game Design Principles",
        "Animation and Effects",
        "Project Portfolio:"
      ],
      "course_content": {
        "DotRescue": [
          "Introduction",
          "Project Setup",
          "Main Menu",
          "SoundManager",
          "GameManager",
          "Play Button and Score",
          "Gameplay Setup",
          "Counting Score",
          "Rotating the Disk",
          "Player and Explosion Particle"
        ],
        "Orbits": [
          "Introduction",
          "Project Setup",
          "Main Menu Scene",
          "Game Manager",
          "Main Menu Manager",
          "Gameplay Scene",
          "Obstacles",
          "Player and Particles"
        ],
        "Colorful Chaos": [
          "Introduction",
          "Project Setup",
          "MainMenu Scene",
          "GameManager",
          "MainMenu Manager",
          "Gameplay Scene",
          "Spawning Score Blocks",
          "Clicking Block and Checking Game State"
        ],
        "Traffic Arrow": [
          "Introduction",
          "Project Setup",
          "Main Menu Scene",
          "GameManager",
          "MainMenu Manager",
          "Gameplay Scene",
          "Obstacle Spawning",
          "Player"
        ],
        "Collector": [
          "Introduction",
          "Project Setup",
          "Main Menu Scene",
          "GameManager",
          "Main Menu Manager",
          "Gameplay Scene",
          "Score Animations and Particles",
          "Gameplay Manager",
          "Player"
        ]
      },
      "requirements": [
        "No Prior Experience Required",
        "Access to a Computer",
        "Unity Software",
        "A Passion for Game Development",
        "Time and Dedication",
        "Willingness to Learn:"
      ],
      "description": "Welcome to the \"Complete Unity Course for Beginners: Fun Game Projects\"!\nAre you ready to dive headfirst into the exciting world of game development with Unity? If you're a beginner looking to learn game development, this course is your ideal starting point. We've designed it with simplicity and fun in mind, providing you with hands-on experience to create five engaging games from scratch.\nHere's what you'll be learning and building:\nDotRescue: In this game, you'll dodge spinning blades while controlling a ball on a rotating disk. Learn to create a complete 2D hyper-casual game with a main menu and gameplay screen. Dive into basic C# scripting and game management.\nOrbits: Enter the world of orbital navigation and obstacle avoidance. Rotate within orbits to collect points while dodging randomly spawned obstacles. You'll master prefab creation, object spawning, and scoring systems.\nColorful Chaos: Test your reflexes in this colorful matching game. Match falling blocks with their corresponding colors by pressing the correct block. Experience a game with a Tetris-style look and Piano Tiles-style mechanics. Dive into simple animation techniques through scripting.\nTraffic Arrow: Take control of a moving arrow and navigate through a maze of obstacles. Your goal? Survive as long as possible. Learn about scoring mechanisms, obstacle generation, and game difficulty scaling.\nCollector: Race against the clock as you collect points with increasing difficulty. Dive into Unity's Animator, animations, and particle systems to add excitement to your game.\nThroughout this course, you'll not only build these games but also gain a strong foundation in Unity and C# scripting. We've designed each project to progressively challenge and expand your skills. By the end, you'll have a diverse portfolio of games, a strong understanding of game development concepts, and the ability to create your own games from scratch.\nOur step-by-step approach, beginner-friendly explanations, and hands-on projects will make your learning experience enjoyable and effective. No prior game development or programming knowledge is required – just your enthusiasm and a desire to create fun and engaging games.\nDon't miss this opportunity to kickstart your game development journey. Enroll now, and let's start building together!",
      "target_audience": [
        "Absolute Beginners",
        "Aspiring Game Developers",
        "Students and Enthusiasts"
      ]
    },
    {
      "title": "Learn to Make 3D Spaceship game in Unity for Beginners",
      "url": "https://www.udemy.com/course/learn-to-make-3d-spaceship-game-in-unity-for-beginners/",
      "bio": "Learn 3D Game development by Creating Spaceship game in Unity for Complete Beginners",
      "objectives": [
        "Master 3D Spaceship Controls – Learn how to create smooth spaceship movement, including flying, rotating, and maneuvering in a 3D environment.",
        "Design Space Levels – Learn how to design space-themed levels with obstacles, boundaries, and objectives for a complete gameplay experience.",
        "Add Scoring and Health Systems – Implement scoring, health, and damage mechanics to track player performance and ship status during gameplay.",
        "Develop a User Interface (UI) – Create functional and visually appealing UI elements like health bars, ammo counters, and game menus",
        "Add Sound Effects and Music – Learn how to integrate sound effects and background music to enhance the player's immersion."
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Player": [
          "Adding Spaceship",
          "Spaceship movement",
          "Wing Tilt"
        ],
        "Camera": [
          "Camera Movement"
        ],
        "Health System": [
          "Adding health",
          "Adding Health UI",
          "Health system",
          "Destroying player",
          "Red Screen",
          "Damage effects",
          "Particle system"
        ],
        "Environment": [
          "Adding Environment",
          "Side limmits",
          "Better Environment",
          "Skybox",
          "Lights"
        ],
        "Scoring system": [
          "Adding coins",
          "Scoring system"
        ],
        "Menu": [
          "Main menu",
          "Buttons",
          "Credits",
          "Pause UI",
          "Pause mechanics"
        ],
        "Level mechanics": [
          "Restart Level",
          "Game over screen",
          "Display Score",
          "Level end",
          "Creating new level",
          "Game ending"
        ],
        "Audio": [
          "Adding sounds",
          "Stop BGM"
        ],
        "Obstacles": [
          "Moving obstacle",
          "More obstacles"
        ]
      },
      "requirements": [
        "Mac or PC capable of running Unity 3D"
      ],
      "description": "Welcome to the 3D Spaceship Game Development in Unity course, designed for beginners who want to dive into the exciting world of 3D game creation! This step-by-step course will guide you through everything you need to know to build your very own 3D spaceship game from scratch. No prior experience in Unity or game development is required, making this course perfect for complete beginners and aspiring game developers alike.\n\n\nThroughout this course, you’ll master the fundamentals of Unity while working on a fun and engaging project. You'll start by learning how to set up your game environment, including 3D space assets and background elements. From there, we’ll focus on coding spaceship controls, allowing your ship to fly, rotate, and shoot in a smooth and responsive way. You’ll also learn  design levels that offer players exciting challenges.\nWe’ll cover critical game development topics such as health and damage systems, and scoring mechanics, ensuring you have all the tools to create a fully functional and immersive game. Additionally, you'll learn how to add sound effects, background music, and user interface (UI) elements like health bars and score counters.\nBy the end of this course, you’ll have a complete 3D spaceship game that you can further develop or share with others. Whether you want to kick-start your game development journey or improve your Unity skills, this course provides a strong foundation. Start building your first 3D spaceship game today and bring your game ideas to life!\nIn this hands-on course, you’ll start by learning the basics of Unity, the world’s most popular game engine, and quickly move into practical game development. You'll master essential skills such as 3D spaceship movement, allowing your ship to fly, rotate, and maneuver in space",
      "target_audience": [
        "Complete Beginners to Unity – Individuals with little to no experience in game development who want to learn how to create a 3D spaceship game from scratch.",
        "Aspiring Game Developers – People looking to enhance their skills and knowledge in 3D game development, focusing on Unity and space-themed games.",
        "Hobbyists and Indie Game Creators – Those passionate about creating their own games as a hobby or planning to release indie games.",
        "Students Learning Game Design – Students studying game development who want to learn practical skills for designing, programming, and optimizing a 3D spaceship game."
      ]
    },
    {
      "title": "Play-to-earn game development - Unity blockchain programming",
      "url": "https://www.udemy.com/course/play-to-earn-game-development-blockchain-programming/",
      "bio": "The possibilities of Web3 are endless: dive into the play-to-earn genre, develop the videogame and code transactions.",
      "objectives": [
        "Build the foundation for blockchain-enabled games: use different wallets as an authorization method with ease, automated ETH transactions, Smart Contracts...",
        "Create a new revenue stream for the esports industry and give players the opportunity to make money while playing their favorite games.",
        "Develop a First Person Shooter Play-to-Earn step by step, with the main character is controlled by a simple joystick and the objective is to shoot the enemies.",
        "Manipulate data needed for connection between the wallet and the SDK within the game."
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Install requirements": [
          "Install Chainsafe SDK",
          "ChainSafe SDK",
          "Install Game Template ( Do not shoot aliens )",
          "Game Template features"
        ],
        "Coding Lessons - Game Development": [
          "MoveArea.cs",
          "Bullet.cs",
          "CameraFollow.cs",
          "Enemy.cs",
          "Enemy.cs functions",
          "GameManager.cs",
          "PlayerController.cs"
        ],
        "Set up MetaMask": [
          "MetaMask Environment set up",
          "Test Networks"
        ],
        "Working with ChainSafe SDK": [
          "Gather wallet's private and address key",
          "Log-In screen and transactions",
          "User's wallet",
          "Blockchain Coding Tests"
        ],
        "Outro": [
          "Outro"
        ]
      },
      "requirements": [
        "There is no prior Unity or Solidity programming expertise necessary. However, it is desirable to be familiar with Remix, the Ethereum virtual computer, and the Unity Editor. This course will be simple for you and I will cover everything in detail."
      ],
      "description": "In this course we are going to develop a Third Person Shooter Play-to-Earn and connect it to the Blockchain.\nThe game is a Hyper-casual one, the main character is controlled by a simple joystick and the objective is to shoot the enemies.\nAs the character moves around, bullets are shot and as the match is over, the player earns crypto-coins based off of his game-performance.\nThis will create a new revenue stream for the esports industry and give players the opportunity to make money while playing their favorite games. The game has a payout system in which the player gets rewarded for playing the game.\nBy doing this, I hope to create a more engaged and interactive gaming experience for my students and ultimately make them more money.\nMain features of this course:\nCreate the game itself: code the camera system following the player throughout the match, test projectiles and work with colliders, write enemies’ AI involving NavMesh automatic path-finding, behavior state spawning mechanic to instantiate the enemies, work with Unity Input System to create a mobile joystick controller, code the player’s controller and understand the usage of animation states, quaternions, vectors and physics to complete a weapon system.\nI will show how to build automated ETH and BNB transactions, as well as how to construct our own ERC-20 tokens and a Smart Contract to implement a reward system with them. It is not necessary to have advanced programming skills in Unity or Solidity.\nThe training focuses on understanding the relationships between blockchain and our Unity projects. It is then up to each student's ingenuity to figure out how to use this great tool to create better games with better systems and code.\n\n\nWhat you will learn:\nMetamask will be used to create / transfers of ETH/BNB and bespoke ERC20 tokens from the game to users.\nSolidity Smart Contract game creation and interactivity using Unity\nChainSafe SDK programming to unlock the power of web3 games\nJson .NET is our choice when dealing with serialization: it codes relationships in simple binary form and we will just use it for its rich library \"NewtonSoft\".\nProgram a Third-Person-Shooter using a template as a placeholder: this will speed up the development process and will grant us the time to dive deeply into the blockchain subject.\n\n\nRequirements:\nThere is no prior Unity or Solidity programming expertise necessary. However, it is desirable to be familiar with Remix, the Ethereum virtual computer, and the Unity Editor. This course will be simple for you and I will cover everything in detail.",
      "target_audience": [
        "If you are already a Unity programmer, this course will teach you how to incorporate blockchain into your games.",
        "If you are interested in cryptography and games but have never coded before, this course might be a great starting point for you if you take the time to practice with our Web3 implementation."
      ]
    },
    {
      "title": "Learn Multiplayer Game Development In Godot",
      "url": "https://www.udemy.com/course/learn-multiplayer-game-development-in-godot/",
      "bio": "Make Multiplayer Godot Games With Ubuntu Server",
      "objectives": [
        "Client side development of multiplayer games in Godot.",
        "Server side development of multiplayer games in Godot.",
        "Ubuntu Server for hosting the Godot game server on local machine.",
        "FileZilla and Putty to connect to the Ubuntu Server from the computer."
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Client Side Project Setup": [
          "Import & Retarget Animations in Godot",
          "Game Environment Setup",
          "Creating Player Character"
        ],
        "Server Side Project Setup": [
          "Creating Separate Server Project",
          "Writing Server Side RPCs",
          "Writing Client Side RPCs",
          "Connecting Client & Server",
          "Connecting Multiple Players",
          "Adding Punching Mechanic",
          "Pause Menu & Project Cleanup"
        ],
        "Dedicated Server Setup": [
          "Dedicated Server Setup",
          "Making Bootable USB Drive",
          "Installing Ubuntu Server",
          "Online VPS Hosting (Alternative to Local Server Setup)",
          "Exporting Godot Server"
        ]
      },
      "requirements": [
        "Some experience with Godot.",
        "Some experience with programming.",
        "Some experience with plugging and unplugging storage drives from the computer."
      ],
      "description": "In this course we learn how to code a multiplayer game project using the Godot game engine and the Ubuntu Server.\n\n\nThe first project is the game project where we learn how to\nimport 3D model and animations in Godot,\nretarget the animations,\nsetup the game environment,\ncreate a third person character,\nsetup main and pause menu user interface,\nconnecting to the game server and\nsharing/receiving the data from the game server.\n\n\nThe second project is the game server project where we learn how to\nsetup the multiplayer peer in Godot,\ndefine the rpc calls for the both ends of the game,\nconnecting multiple players in the game world and\nsharing data with them about other player's transforms, animations and names.\n\n\nWe also learn how we can\nhost our game server on a local machine where I also give some hints on web hosting providers online,\ndownload & install the Ubuntu Server on a local machine,\ndownload and use FileZilla to share files from our computer to the Ubuntu Server,\ndownload and use Putty to connect to and control our Ubuntu Server,\nexport the game server Godot project as a dedicated,\nuploading the dedicated server pck file and running it on the Ubuntu Server.",
      "target_audience": [
        "Beginner Godot developers curious about multiplayer game development.",
        "Beginner game developers curious about multiplayer game development in Godot."
      ]
    },
    {
      "title": "Master Unreal Engine 5 Basics-",
      "url": "https://www.udemy.com/course/master-unreal-engine-5-basics/",
      "bio": "Learn Unreal Engine 5 from Scratch",
      "objectives": [
        "Navigate the UE5 editor interface",
        "Learn basic understanding of UE5",
        "Create a new project and a new level",
        "Learn to use UE5's built -in Modeling Tools",
        "Materials and Materials textures"
      ],
      "course_content": {
        "Sample videos": [
          "Unreal Engine Installation",
          "Material and Light",
          "Modeling Mode",
          "Game Template"
        ],
        "Unreal Engine Installation": [
          "UE 5 Basics and Installation",
          "UE 5 Basics and Installation2"
        ],
        "Materials and Light": [
          "Materials and Light",
          "Material light"
        ],
        "Modeling Mode": [
          "Modeling Mode",
          "Modeling Mode2",
          "Modeling Mode3"
        ],
        "Game Template": [
          "Game Template",
          "Game Template2",
          "Game Template3"
        ]
      },
      "requirements": [
        "No skills and prior experience needed"
      ],
      "description": "Unreal Engine 5 is a powerful tool for game development. This course covers navigation, level design, materials, and basic game mechanics. Whether you're a beginner or aspiring developer, you'll gain a strong foundation in UE5 and be ready to create your own projects with confidence.\nAre you new to Unreal Engine 5 and want to learn the fundamentals? This course is designed for beginners who want to understand the core features of UE5, including navigation, level design, and basic game development concepts.\nWhat You Will Learn:\nUnderstanding the Unreal Engine 5 interface and essential tools\nNavigating through the editor and working with different viewports\nUsing modeling tools to create and modify 3D objects\nWorking with materials and textures to enhance visual appeal\nDesigning levels with lighting, landscapes, and assets\nIntroduction to Blueprints for basic interactivity\nWho Should Take This Course?\nAspiring game developers with no prior experience\nArtists and designers looking to explore game development\nBy the end of this course, you'll have a strong foundation in Unreal Engine 5 and be ready to start creating your own game worlds. Join now and take your first step into game development!\nYou’ll gain hands-on experience with essential UE5 tools, making game development easier.",
      "target_audience": [
        "Aspiring game developers, beginners in Unreal Engine 5",
        "Anyone interested in learning game development from scratch",
        "Indie game creators"
      ]
    },
    {
      "title": "Learn AI Game Development using Python",
      "url": "https://www.udemy.com/course/learn-ai-game-development-using-python/",
      "bio": "Learn Artificial Intelligence algorithms -- Reinforcement Learning in an easy way by developing AI games using Python",
      "objectives": [
        "Master Core Concepts: Gain a deep understanding of DP, Q-learning, deep Q-learning, and convolutional Q-learning.",
        "Develop Practical Skills: Implement and train models using TensorFlow and Keras.",
        "Solve Real-world Problems: Apply your knowledge to build agents that can solve complex tasks and games.",
        "Prepare for Advanced AI Roles: Equip yourself with the skills needed for careers in AI and machine learning."
      ],
      "course_content": {},
      "requirements": [
        "Beginner Level Python programming experience is required"
      ],
      "description": "Artificial intelligence (AI) is transforming industries and everyday life. From self-driving cars to personalized recommendations on streaming services, AI is at the heart of innovations that are shaping the future. Reinforcement learning (RL) is a pivotal area within AI that focuses on how agents can learn to make decisions by interacting with their environment. This paradigm is particularly powerful for tasks where the optimal solution is not immediately obvious and must be discovered through trial and error.\nOne of the most critical aspects of learning AI and reinforcement learning (RL) is the ability to bridge the gap between theoretical concepts and practical applications. This course emphasizes a hands-on approach, ensuring that you not only understand the underlying theories but also know how to implement them in real-world scenarios. By working on practical projects, you will develop a deeper comprehension of how AI algorithms can solve complex problems and create intelligent systems.\nCourse Structure and Topics\nDynamic Programming (DP):\nIntroduction to DP: Understand the basic principles and applications of dynamic programming.\nQ-learning:\nFundamentals of Q-learning: Learn the theory behind Q-learning, a model-free RL algorithm.\nValue Function and Policies: Understand how agents learn to map states to actions to maximize cumulative reward.\nImplementation: Hands-on projects using TensorFlow and Keras to build and train Q-learning agents.\nDeep Q-learning:\nIntegrating Deep Learning with RL: Learn how deep neural networks can enhance Q-learning.\nHandling High-dimensional Spaces: Techniques to manage complex environments and large state spaces.\nPractical Projects: Implement deep Q-learning models to solve more sophisticated problems.\nConvolutional Q-learning:\nCombining CNNs with Q-learning: Utilize convolutional neural networks to process spatial and visual data.\nAdvanced Applications: Implement RL in environments where visual perception is crucial, such as video games and robotics.\nExciting Projects\nTo bring these concepts to life, we'll be implementing a series of exciting projects:\nMaze Solver: Program an agent to find the shortest path through a maze, applying principles of DP and RL.\nMountain Car Problem: Tackle this classic RL challenge where an agent must drive a car up a steep hill using momentum.\nSnake Game: Develop a snake game where the agent learns to maximize its length while avoiding obstacles and navigating the game board efficiently.\nTools and Libraries\nThroughout the course, we'll be using TensorFlow and Keras to build and train our models. These libraries provide a robust framework for developing machine learning applications, making it easier to implement and experiment with the algorithms we'll be studying.",
      "target_audience": [
        "Students and Recent Graduates: Those studying computer science, engineering, mathematics, or related fields who wish to build a strong foundation in AI and machine learning.",
        "Beginners in AI: Individuals with little to no prior experience in AI who are eager to start their journey in this exciting field.",
        "For Career Changers: The course equips you with in-demand skills that are highly sought after in the job market, opening up new career opportunities."
      ]
    },
    {
      "title": "Build a Poker Game in Unity: Complete Development Course",
      "url": "https://www.udemy.com/course/build-a-poker-game-in-unity-complete-development-course/",
      "bio": "Learn Unity Poker Game Development: Master AI, Card Deck Management, and Game State Control for Engaging Gameplay",
      "objectives": [
        "Develop a complete poker game using Unity.",
        "Implement AI for player vs. AI poker gameplay.",
        "Create and manage card decks and hands.",
        "Design a state machine for game flow control."
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "#02 - Poker - Conzept",
          "#03 - Poker - Unity Overview",
          "#04 - Poker - Preparing Textures"
        ],
        "Poker Layout and User Interface": [
          "#05 - Poker - Layout - Left Side 1",
          "#06 - Poker - Layout - Left Side 2",
          "#07 - Poker - Layout - Left Side 3",
          "#08 - Poker - Layout - Using Fonts",
          "#09 - Poker - Layout - Right Side 1",
          "#10 - Poker - Layout - Right Side 2",
          "#11 - Poker - Layout - Right Side 3",
          "#12 - Poker - Layout - Right Side 4",
          "#13 - Poker - Layout - Right Side 5"
        ],
        "Cards and Card Deck": [
          "#14 - Poker - Card Prefab",
          "#15 - Poker - Card Script",
          "#16 - Poker - Add Card Script",
          "#17 - Poker - Create Card Deck",
          "#18 - Poker - Shuffle Card Deck",
          "#19 - Poker - Hand Out Cards",
          "#20 - Poker - Hand Out Visually 1",
          "#21 - Poker - Hand Out Visually 2",
          "#22 - Poker - Hiding AI Cards",
          "#23 - Poker - Updating Card Prefab",
          "#24 - Poker - Flipping Cards"
        ],
        "Game Flow": [
          "#25 - Poker - Money TextFields",
          "#26 - Poker - Update Money TextFields",
          "#27 - Poker - Game State Maschine",
          "#28 - Poker - Round Start and Ante States",
          "#29 - Poker - Ante State Update",
          "#30 - Poker - Time Based Hand Out Cards",
          "#31 - Poker - Time Based Action Recap",
          "#32 - Poker - Hand Evaluation 1",
          "#33 - Poker - Hand Evaluation 2",
          "#34 - Poker - Hand Evaluation 3",
          "#35 - Poker - Testing Evaluation",
          "#36 - Poker - Setting Buttons 1",
          "#37 - Poker - Setting Buttons 2",
          "#38 - Poker - Fold Button",
          "#39 - Poker - Activate Money Buttons",
          "#40 - Poker - Use Money Buttons",
          "#41 - Poker - AI Decision",
          "#42 - Poker - Dealing with AI",
          "#43 - Poker - Update AI Decisions",
          "#44 - Poker - Use Player Bet",
          "#45 - Poker - Player Discarded Cards",
          "#46 - Poker - Discard State",
          "#47 - Poker - Drawing New Cards",
          "#48 - Poker - AI Discarding 1",
          "#49 - Poker - AI Discarding 2",
          "#50 - Poker - AI Discarding 3",
          "#51 - Poker - Update Button Functions",
          "#52 - Poker - Prepare Check Winner State",
          "#53 - Poker - Fix Money Pool on AI Fold",
          "#54 - Poker - Determine Winner 1",
          "#55 - Poker - Determine Winner 2",
          "#56 - Poker - Determine Winner 3",
          "#57 - Poker - Determine Winner 4",
          "#58 - Poker - Info Message System",
          "#59 - Poker - Game Over"
        ],
        "Menu, Fixes , Cleanup": [
          "#60 - Poker - Main Menu Scene",
          "#61 - Poker - Menu Buttons",
          "#62 - Poker - Small Fixes",
          "#63 - Poker - Cleaning Up",
          "#64 - Poker - Create a Webbuild",
          "#65 - Poker - Conclusion"
        ]
      },
      "requirements": [
        "Basic understanding of C# programming is a plus.",
        "Familiarity with the Unity interface is a plus.",
        "Unity installed on your computer.",
        "No prior poker knowledge required."
      ],
      "description": "Are you ready to take your Unity game development skills to the next level? This comprehensive course will guide you through the entire process of building a fully functional poker game in Unity. Whether you’re an aspiring game developer or an experienced programmer looking to expand your skills, this course has something for you.\nIn this course, you will:\nDevelop a complete poker game from scratch using Unity.\nImplement AI to create a challenging and engaging player vs. AI poker experience.\nLearn to create and manage card decks and hands efficiently.\nDesign and utilize a state machine to control game flow and logic seamlessly.\nWhat You Will Learn\nUnity Game Development: Gain hands-on experience building a card game in Unity.\nArtificial Intelligence: Implement AI to simulate realistic poker gameplay against a computer opponent.\nCard Management: Master the techniques for creating, shuffling, and dealing cards programmatically.\nGame State Management: Understand how to create a robust state machine to handle different phases of the game, such as dealing cards, betting, discarding, and determining the winner.\nCourse Highlights\nInteractive Lessons: Follow along with detailed, step-by-step instructions.\nPractical Projects: Apply what you’ve learned through practical, real-world projects.\nComprehensive Coverage: From basic Unity setup to advanced AI implementation, we cover it all.\nSupportive Community: Join a community of fellow learners and get your questions answered.\nWho This Course Is For\nAspiring game developers who want to learn Unity.\nProgrammers looking to create card games.\nBeginners eager to dive into game development projects.\nAnyone interested in game AI and state management.\nBy the end of this course, you will have a solid understanding of Unity game development, specifically tailored to creating a poker game. You’ll be able to take these skills and apply them to your own projects, enhancing your portfolio and opening up new opportunities in game development.\nPlease note that the course material is for educational purposes only and the complete scripts are not included in the course.\nEnroll now and start building your own poker game today!",
      "target_audience": [
        "Aspiring game developers looking to enhance their Unity skills.",
        "Programmers interested in creating card games.",
        "Beginners seeking hands-on Unity projects.",
        "Anyone eager to learn game AI and state management."
      ]
    },
    {
      "title": "A Crash Course in Unity's Entity Component System",
      "url": "https://www.udemy.com/course/learnecs/",
      "bio": "Create a First Person Shooter which covers Unity's ECS, Parallel Processing and Entity Physics in a Nutshell.",
      "objectives": [],
      "course_content": {
        "Introduction": [
          "Welcome",
          "Join the H3D Student Community",
          "FAQs"
        ],
        "A First Person Shooter with ECS": [
          "Getting Setup with DOTS Packages",
          "Spawning Entities",
          "Moving Entities",
          "Adding More Floating Entities",
          "Timed Destruction of Entities",
          "Detecting Entity Collisions",
          "Destroying Entities with Exploding Spawns",
          "Project Solution"
        ],
        "Final Words": [
          "Some Final Words from Penny",
          "Where to now?"
        ]
      },
      "requirements": [
        "Students should be familiar with Unity.",
        "Students should be confident C# programmers."
      ],
      "description": "Unity's new Data-Oriented Technology Stack (DOTS) and Entity Component System (ECS) programming paradigm have been developed to optimize game development and open up new ways of accessing memory and parallel processing for developing high-performance C# code that takes advantage of contemporary multicore computers. Through the use of the Burst Compiler, your game programs become native code, able to run faster on multiple threads thus pushing the boundaries of the size of your virtual environments and the simultaneous processing of tens of thousands of game objects.\nIn this free course, Penny zooms through the development of a basic physics-based DOTS First Person Shooter. Using her internationally acclaimed teaching style and knowledge from over 25 years working with games, graphics and having written two award-winning books on games AI, Penny will take you from familiar object-oriented programming and upgrade your skill to the more memory efficient and optimized entity component architecture. Throughout, you will follow along with hands-on workshops designed to show you the potential of Unity's ECS programming through the new DOTS-specific math and physics libraries.\nThis course requires Unity 2019.3.8. and the Hybrid Renderer Package 0.4.1\nLearn how to program and work with:\nEntities and Components\nThe C# Job Systems\nCollision Systems\nWhat people are saying about Penny's courses:\nDr.Penny is a wonderful person and a true expert. All of her courses I've taken have been top notch and in my opinion there is no better teacher out there.\nAllow me to say how hugely important this is for a person who is interested in certain type of game design. Creating games where you can create AI behaviours that supports emergent situations.\nI honestly love Holistic's teaching approach and I've never learned so much within a few hours about coding effectively with such detailed explanations!",
      "target_audience": [
        "Existing Unity developers who would like to know how Unity's Entity Component System works."
      ]
    },
    {
      "title": "HTML5 Game from scratch step by step learning JavaScript",
      "url": "https://www.udemy.com/course/html5-game-from-scratch-step-by-step-learning-javascript/",
      "bio": "Learn how to create HTML5 and JavaScript games from scratch Step by step tutorials with real HTML5 code examples",
      "objectives": [],
      "course_content": {
        "How to build an HTML5 JavaScript Game from scratch": [
          "HTML5 Game Course Introduction",
          "resources for course",
          "Setup HTML5 Game template",
          "HTML5 Game connect canvas to Javascript",
          "Source Code 1",
          "HTML5 Game Use JavaScript to create canvas",
          "Source Code 2",
          "Setup GameBoard HTML5",
          "HTML5 drawimage selecting image pieces",
          "drawimage sourcecode",
          "HTML5 Draw Text setup dynamic variables",
          "HTML5 Game setting event listeners",
          "HTML5 Game active keyboard",
          "source 4 keyboard",
          "HTML5 Game movement",
          "HTML5 Game create an enemy",
          "HTML5 Game random enemy creation",
          "HTML5 Game enemy moving",
          "Source Code 5 with enemy",
          "HTML5 Game calculation adjustments",
          "HTML5 Game adding powerup pill",
          "HTML5 Game collision detection",
          "Source code 6 collision detection",
          "HTML5 Game powerup functions",
          "HTML5 Game runaway ghost",
          "HTML5 Game hit test ghost",
          "Game source 7",
          "HTML5 Game tweaking the game",
          "HTML5 Game add a second enemy",
          "Source Complete",
          "Source Code with Image as base64"
        ],
        "Bonus Materials and Examples": [
          "Downloads and Supplementary Content"
        ]
      },
      "requirements": [
        "a computer",
        "desire to learn"
      ],
      "description": "Crash course to learn how to create an HTML5 game from scratch for beginners.\nCore HTML5 training using canvas and setting a gameboard. Adding text and dynamic variables. Using event listeners to determine keyboard actions and create movement. Create a random enemy and have it move around. Interacting with game items like a power up pill. Collision detection to determine multiple reactions to object interactions on the game board. Tweaking and fine tuning game interactions for better game play.\n\nThis course is designed for anyone who wants to better understand how to create their own HTML5, within this course we show you how to make a basic HTML5 game from scratch. You can reuse and practice with the sample code in the course.\n\nWe start with a blank document, add in html and then JavaScript to create the game.\nThe game we create in the course is a pacman type game with a pacman character that can be moved around the screen. There are also 2 ghosts which move towards the player or away if the pacman is powered up.\nWe walk you through step by step with detailed explanations of code and more.\n\nquick lessons get right to the point\nfully covered topics with real world examples\nsource files downloadable to work along\nchallenges and lessons and code samples\ncode snippets\nLinks to top resources to save time\n30 day money back guarantee\nnew course material added regularly\ntrusted name in education since 2002\nfull HD easy to read source coding\nquick response support to students\nregular discussions\nWe teach you the latest techniques and tools to use in order to create html5 canvas animations and content. Everything you need to know is included in this course. Learn at your own pace, lifetime access to this course.",
      "target_audience": [
        "anyone interested in learning about HTML5 game development",
        "using JavaScript and html5 canvas",
        "online web developers",
        "application developers"
      ]
    },
    {
      "title": "Creating Thematic UI in Godot Engine",
      "url": "https://www.udemy.com/course/creating-thematic-ui-in-godot-engine/",
      "bio": "Stop worrying about off-looking UI in your games. Discover how you can implement pixel-perfect components in Godot.",
      "objectives": [
        "Create spectacular looking themes in Godot Engine",
        "Use freely available UI kits and design systems for practice",
        "Go beyond skinning basic components",
        "Build composite UI components"
      ],
      "course_content": {
        "Introduction & Housekeeping": [
          "Course introduction & Author's credentials",
          "Important resources",
          "Technical requirements"
        ],
        "Getting to know UI kits": [
          "Difference between UI kits and design systems",
          "Exporting the correct parts of a UI",
          "Vector vs raster graphics",
          "Fonts make it or break it",
          "Design concerns"
        ],
        "Styling basic components": [
          "What makes a component simple vs complex?",
          "Skinning a button component",
          "Taking advantage of themes",
          "Skinning Basics"
        ],
        "Investigating other button components": [
          "CheckBox & CheckButton",
          "RadioButton",
          "ToggleButton",
          "MenuButton",
          "ColorPickerButton, OptionButton, ToolButton, LinkButton, TextureButton",
          "Button Types"
        ],
        "Creating new label variants": [
          "Label",
          "Tooltip",
          "Badge/Tag",
          "Alert/Notification",
          "Put a label on it"
        ],
        "Working on composite UI": [
          "ProgressBar",
          "SearchBar",
          "Rating",
          "Comment",
          "Dealing with increased complexity"
        ],
        "Conclusion & Farewell": [
          "Practice, practice, practice!",
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "Being familiar with Godot Engine interface might be good.",
        "You will be provided with the assets that will be used throughout the course. Alternatively, you can use a graphics editor that's capable of opening PSD files if you want to roll out your own version of graphics."
      ],
      "description": "You have just created a working prototype for your game but there is still that nagging feeling: will the game's UI impress your players?\nMaybe you thought applying pretty-looking UI elements would take a long time. So, you compromised and went with the default theme. Perhaps, you know how to change the look of some components but you don't want to commit yourself to skin the whole set for fear of changing it altogether if a new look will be picked in the end.\nKEY TAKEAWAYS\nIn this course, you'll start off by skinning the most commonly used UI elements in Godot Engine such as Button, Label, CheckBox, etc. Then, you'll move on to implementing more and more complex UI examples. To that end, you'll be tackling the following topics:\nTaking advantage of themes in lieu of individually skinning components since themes will let you instantly change how your UI looks.\nCreating new UI components that are otherwise not part of the game engine.\nAlthough changing the look and feel of simple UI components will be necessary, sometimes, it won't be enough. We'll show you how to put simple components together to build a composite UI.\nOBJECTIVE\nBy the end of this course, you'll feel familiar with creating themes and coming up with creative solutions to introduce missing UI options. Ultimately, swapping and combining themes will give you complete flexibility in attaining the look you would like to have for your game. You can even use the same methods if you are using the engine for building desktop applications.\nNow, get in there and create fabulous themes!",
      "target_audience": [
        "Game developers who are excited about having awesome looking UI for their games but have hard time implementing it.",
        "People who use Godot Engine to build desktop applications that need that \"software\" look.",
        "Those who use some of the theme functionality but would like to have in-depth knowledge."
      ]
    },
    {
      "title": "Build 4 Unity® Games: Best 2D, 3D and Multiplayer Tutorials",
      "url": "https://www.udemy.com/course/building-games-with-unity-and-more/",
      "bio": "A runaway success of a Kickstarter funded this course. Improve your C sharp and code architecture. Full game scale.",
      "objectives": [
        "Learn to code for game development in Unity C#",
        "Create your own unique Battle Royale system.",
        "Learn the fundamentals of game design.",
        "Create game art in Blender.",
        "Build game assets in Illustrator.",
        "Make game pieces in Photoshop.",
        "Navigate the Unity® editor.",
        "Design large environments for your character to explore in.",
        "Build 3D models for the game in Blender.",
        "Integrate the art from Blender into Unity®."
      ],
      "course_content": {},
      "requirements": [
        "Unity® and Blender are free to download. Please download and install Unity® and Blender before purchasing this course",
        "Adobe Photoshop",
        "Illustrator or a free program like Gimp (to make 2D art)",
        "This course was recorded on a Mac computer, but you can use Unity® and Blender on a PC."
      ],
      "description": "Build 4 huge games in Unity® and C#. Complete your first Unity games for web, Mac & PC. Learn all about game development more efficiently YouTube tutorials. You will learn:\nGame development & design.\nLearn how to use Unity® in C#\nBuild a 2D game like Flappy Bird in Unity\nMake an Angry Birds game from scratch\nBuild an air hockey game with C#\nLearn what Photoshop is used for in game development\nThe game development process step by step for beginners\nMake your own shooter game in Unity\nBuild a battle royale game like Fortnite\nAdd multiplayer functionality to game programming\nLearn the foundations of Blender 3D\nThe best coding program online. Beginner's guide for aspiring game developers. Learn C# and programming fundamentals. Create epic 2D and 3D games using Unity® and Blender!\nThis course is unique because we make both the code and the art for the game from scratch. We teach you the fundamentals of designing, coding, and modeling a 3D game.\nFirst you design the game and its functionality in Unity®. You learn how to code in C# and build video game levels. Don't worry if you've never coded before. We start simple and add more to the game as the course goes on.\nBest Unity Course: Build Multiple Games in Full\nUnity® is one of the most popular platforms in game development. You can use Unity® to build 2D and 3D games. Unity® is cross-platform, which means it is easy to use with other platforms.\nThen you create the 3D models for the game in Blender. You build all the art assets for the game. You learn how to integrate your art from Blender into Unity®.\nFoundations of Blender and Adobe Illustrator Tutorials\nBlender, like Unity®, is a popular production suite that is free to download. Blender is a revolutionary tool for making 3D art digitally. With Blender, you can make art assets for games, like we do in this course.\nWatch the free lectures and amazing trailer, then jump right in and start participating with the Mammoth community.",
      "target_audience": [
        "Anyone who wants their start at making 3D or 2D video games.",
        "People that want to create their own Battle Royale.",
        "Anyone who wants to learn game development.",
        "Beginners who want to learn how to use Blender.",
        "Even if you have never coded before, you can use these lessons to get a headstart in the game-making realm! This course is targeted towards beginners to immediate."
      ]
    },
    {
      "title": "Godot 4 Fast Lane: Game Development for Absolute Beginners",
      "url": "https://www.udemy.com/course/godot-4-fast-lane/",
      "bio": "The Fast Lane to Master Godot: learn by building real games, skip endless theory",
      "objectives": [
        "Build 3 complete Godot games from scratch: a catcher, endless runner, and vertical climber.",
        "Learn Godot the fast lane way — skip confusion and build real games quickly",
        "Master core Godot concepts like Scenes, Nodes, Scripts, UI, and collisions.",
        "Create spawners, manage score and lives, and design multiple levels.",
        "Add cameras, menus, win & game over screens to polish your projects.",
        "Build a solid foundation to keep creating games for your portfolio or clients"
      ],
      "course_content": {
        "Introduction": [
          "Welcome!",
          "Download Godot",
          "Import Godot Projects"
        ],
        "Game 1: Catch the Falling Objects": [
          "Game 1: Catch the Falling Objects - Introduction",
          "Set Up Player Scene",
          "Add Player Movement",
          "Only Move In The X",
          "Add Coin Scene",
          "Create Main Scene",
          "Make Coins Move Down",
          "Delta",
          "Coins Spawner",
          "Collect Coins",
          "Update UI",
          "Change Sprites",
          "Game Over",
          "Game 1: Catch the Falling Objects - Conclusion"
        ],
        "Game 2: Jump the Gaps": [
          "Game 2: Jump the Gaps - Introduction",
          "Game Images",
          "Add Platformer Movement",
          "Create Platforms",
          "Improve Spawner",
          "Randomize Gaps",
          "Make The Player Move With Platforms",
          "Autoloads",
          "Game Over",
          "Change Sprites",
          "Set Background",
          "Game 2: Jump the Gaps - Conclusion"
        ],
        "Game 3: Climb the Platforms": [
          "Game 3: Climb the Platforms - Introduction",
          "Game Assets",
          "Set Up Player Movement And Viewport Size",
          "Clamp Player Movement",
          "Add Player Camera",
          "Create Main Menu",
          "Game Over User Interface",
          "Game Over Adjustments",
          "You Win User Interface",
          "Levels",
          "Current Level Text And More Levels Logic",
          "Modify Sprites",
          "Game 3: Climb the Platforms - Conclusion"
        ],
        "Conclusion": [
          "Conclusion"
        ]
      },
      "requirements": [
        "No prior Godot or programming experience needed — this course is beginner friendly.",
        "A computer",
        "A willingness to learn by building real, small games step by step"
      ],
      "description": "Welcome to The Fast Lane to Master Godot, the course designed to help you skip confusion, avoid endless theory, and start building real games today.\nMost people try to learn Godot by:\nWandering through random tutorials, never sure if they're improving\nGetting buried in huge all-in-one courses or university programs, overwhelmed by endless concepts but left without a single finished game\nThis course is different: you’ll learn by building, through short, practical lessons that guide you step by step to create three complete games — each focused, fun, and perfect for your portfolio.\nWhat you’ll build:\nA catcher game: Move a basket to catch falling objects, manage lives, and track your score — learning collisions, UI, and spawners.\nAn endless runner: Auto-run forward, jump over randomized gaps, and master platform movement, scrolling, and game flow.\nA vertical climber: Move left and right while the camera follows you upward through multiple levels, teaching camera control, UI, and level transitions.\nWhat you’ll learn:\nYou’ll gain everything you need to know to start creating your own Godot projects, including:\nScenes & Nodes — the backbone of any Godot game\n2D physics & collisions for interactive gameplay\nUser interfaces (UI) like score, lives, and menus\nRandom spawners & level logic\nCamera control to follow players through your worlds\nUsing delta time for smooth, frame-independent movement\nWhy learn with me?\nI’ve taught Godot at Zenva, an educational platform with over 1 million learners, worked with Voodoo as an external studio — one of the top mobile game publishers — and I run a YouTube channel with 12,000+ subscribers helping people like you break into game development.\nSo if you want to skip the slow lanes and start building your own games with Godot, enroll now — and let’s get started!",
      "target_audience": [
        "Complete beginners who want to start making games with Godot",
        "Hobbyists or aspiring indie developers who prefer building projects over endless theory",
        "Programmers from other engines curious about Godot’s workflow through quick, hands-on games",
        "Anyone looking to build small portfolio projects fast to kickstart freelancing or studio opportunities"
      ]
    },
    {
      "title": "Unity 5 techniques to generate unique worlds quickly",
      "url": "https://www.udemy.com/course/unity-5-techniques-to-generate-unique-worlds-quickly/",
      "bio": "A-Z guide to use Unity 5 to build fantastic worlds quickly for everyone",
      "objectives": [
        "Use Unity to build and customize terrains with trees, grass, water, rivers, lakes, or snow",
        "Use Unity to build villages in no time",
        "Use Unity to customize villages houses, roads, fields, animals, lighting, accessories, statues, carts, marketplace, fountains, chimneys, mailboxes, and much more."
      ],
      "course_content": {
        "Initial Setup": [
          "Who is your instructor",
          "Download and install Unity 3D 5",
          "How to download the Unity world maker",
          "How to open the Unity World Maker start project"
        ],
        "Terrain building": [
          "Quickly generate terrains with Unity 5",
          "Customizing Unity terrains trees water lakes rivers",
          "Unity terrain topography smooth hard snowy",
          "Adjusting terrain algorithms",
          "Unity Mixing multiple terrain algorithms"
        ],
        "Making cities and villages": [
          "Begining generating villages with Unity",
          "Customizing village time of the day",
          "Adjusting the unity village settings",
          "Extra village settings",
          "Changing the house prefabs",
          "Tweaking village accessories"
        ]
      },
      "requirements": [
        "Windows PC, Mac OS, or Linux"
      ],
      "description": "Have you ever wanted to build video games where players go on adventures and explore fantastic worlds full of amazing characters and treasures?\nRemember Zelda, World of Warcraft or Final Fantasy?\nNow you can do it too!\nThanks to this course that comes with the Unity World Generator, anyone can now create unique worlds with just a few clicks. No kidding! All it take is to generate a terrain (a few clicks), then generate the village (a few clicks), and voila!\nComplete Unity project and packages to build fantastic unique worlds with just a few clicks.\n\nYou will end up with a fully working, uniquely generated village to create fantastic games.\nThis is great to create prototypes, as well as getting a head start then customizing the world with your own characters, bosses, treasures and quests!\nFocus on the fun stuff, and let the Unity World Generator take care of the rest...\n\nMake sure to take a look at all the screenshots. The terrain and village were generated under 30 seconds. Incredible isn't it?!\nNote: The PRO edition comes with plenty of prebuilt items such as houses, walls, bridges, lanterns, carts, banners, animals, trees, windows, tables, chairs, roofs, mailboxes, flowers, rocks, grass, barriers, flags, and much more... (including many scripts)\nCreate any terrains and villages in no time. The pro pack will save you time and efforts so that you can focus on the fun stuff.\nThe unlimited use allows use to reuse this product for all your future projects.",
      "target_audience": [
        "Unity users",
        "game developers",
        "indie devs",
        "entrepreuneurs",
        "students",
        "gamers",
        "cool kids"
      ]
    },
    {
      "title": "Build a Sand Physics Simulation in Unity 6 – From Scratch!",
      "url": "https://www.udemy.com/course/unity-sand-simulation/",
      "bio": "Let's remake one of the most satisfying game mechanics in Unity 6",
      "objectives": [
        "Create fun Sand mechanics like found in Games such as Sand Blast & Powder Toys",
        "Learn to design and implement core game mechanics for casual and hypercasual mobile games",
        "Understand how to create a simple yet engaging gameplay",
        "Apply best practices to optimize performance and user experience in mobile games"
      ],
      "course_content": {
        "The Basics": [
          "Presentation",
          "Introduction",
          "Sand Fountain"
        ],
        "Better Input": [
          "Falling sand on drag"
        ],
        "Shapes": [
          "Generating the Shapes",
          "Spawning a shape on click",
          "Fixing Falling Side issue",
          "Creating the Shape Holders",
          "Controlling the Shape Holders",
          "Dropping the Shape Holders",
          "Clamping the Shape Position"
        ],
        "Matching": [
          "The Color Match Algorithm",
          "Quality of Life improvements"
        ],
        "Bonus Section": [
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "Willingness to learn and experiment with simple game mechanics and systems.",
        "It's highly encouraged to have taken one of my previous beginner courses before this one."
      ],
      "description": "Hey Guys,\n\n\nWelcome to the Ultimate Journey into the creation of a 2D Sand Physics Simulation in Unity 6!\n\n\nIf you’ve ever played those addictive falling sand games, or simply want to create your own Sandbox Simulator with Custom Physics, or even take the source code to experiment with it, you're at the right place !\n\n\nIn this course, we’re going to embark on a Thrilling Adventure through the Fundamental Mechanics of sand simulation games. This, will drastically improve your Unity & coding skills.\n\n\nFirst off, you will learn how to create a Pixel Grid World, where every cell matters. This is the beating heart of our simulation.\n\n\nOnce that’s ready, we can start having fun!\n\n\nYou will learn how to create Falling Sand Particles, completely custom, without using Unity’s physics engine.\nWe will add Gravity & Movement Rules so that sand flows naturally, just like in real life.\nYou will discover how to Detect Connected Regions using Breadth-First Search (BFS), so that entire shapes and chunks behave as one.\nWe will generate Random Shapes with Colors, and drop them into the world, just like puzzle pieces.\nAnd if you guys are hyped, we can simulate Water, which flows, splashes, and interacts with sand in mesmerizing ways.\n\n\nBut that’s not all…\n\n\nWe’ll go deeper into Code Architecture so that your simulation is solid and easy to expand. You won’t just throw scripts everywhere — you’ll learn how to structure your project like a pro, making your engine scalable for future projects.\n\n\nAlong the way, you’ll master essential Game Dev Concepts like:\nEfficient Texture Updates (so your simulation runs smoothly, we can still improve that further btw ;))\nShape Spawning & Collision Detection\nCustom Managers to control the flow of the simulation\nBest Coding Practices (so you don’t end up with spaghetti code)\nAnd of course, we’ll add the finishing touches that make it satisfying and addictive:\nSmooth Input handling\nSaturation & Value variation for our shapes\nFaster falling sand\nSymmetric Falling Sand implementation\n\n\nAll along the way, I’ll give you Tips & Tricks that will help you code faster, smarter, and in a way that makes game dev way more enjoyable.\n\n\nSo… Are you ready to level up your Unity skills and create an Exceptional 2D Sand Physics Simulation that you can play, expand, and even publish?\n\n\nJoin me in this exciting journey, and Enroll now!",
      "target_audience": [
        "Aspiring game developers interested in building casual and hypercasual mobile games.",
        "Indie developers looking to enhance their understanding of game mechanics and systems.",
        "Hobbyists and enthusiasts curious about how to create engaging gameplay with minimal resources."
      ]
    },
    {
      "title": "Create a Simple 2D Game in Godot (FREE!)",
      "url": "https://www.udemy.com/course/create-a-simple-2d-game-in-godot-free/",
      "bio": "Learn Godot 4, craft a minimalistic game, dive into GDScript, and take off your game development journey!",
      "objectives": [],
      "course_content": {},
      "requirements": [
        "None, just a PC"
      ],
      "description": "Embark on your game development journey with this beginner-friendly course, \"Introduction to Game Development with Godot.\" This comprehensive course is designed for aspiring game developers eager to learn the fundamentals of creating engaging games using the Godot engine.\nThroughout this course, you will:\nUnderstand the Basics: Gain a solid foundation in game development concepts and familiarize yourself with the Godot interface.\nCreate Interactive Scenes: Learn to design and implement interactive game scenes, incorporating sprites, animations, and user inputs.\nDevelop Game Mechanics: Explore scripting in Godot to build core game mechanics, such as player movement, collision detection, and scoring systems.\nImplement User Interfaces: Discover how to create intuitive user interfaces, including menus, buttons, and HUD elements, enhancing the player experience.\nBy the end of this course, you will have the skills and confidence to develop your own simple games using the Godot engine, setting a strong foundation for your future endeavors in game development.\nI've taught Godot on my 10,000-subscriber YouTube channel for the past 2 years; I'm sure you'll be able to learn a lot.\nThis is a completely free course, so make the most out of it! Ask questions, modify the game, expand it...\nNot everyday you have these amazing opportunities :)",
      "target_audience": [
        "Anyone wanting to learn how to create games"
      ]
    },
    {
      "title": "Unity 6: Start Mastering 3D Third Person Game Creation",
      "url": "https://www.udemy.com/course/unity-3d-game-maker/",
      "bio": "Learn how to set up and install a third-person game in Unity step by step, and easily build the foundation for a 3D game",
      "objectives": [
        "Master Unity 6 Setup",
        "Third-Person Camera System",
        "Hub Installation and Free License",
        "Package Manager",
        "Visual Studio Installation",
        "Configure and Adjust the Interface Basics",
        "Configurar e Ajustar a Interface",
        "Installation and Download of Free Assets"
      ],
      "course_content": {
        "Install New Unity": [
          "Welcome to Unity 6 – Installation (Hub – License – Visual Studio)",
          "Install & Setup",
          "Let's Get to Know the Unity 6 Interface",
          "Assets Store"
        ],
        "Setting Up and Installing a Third-Person Character in UNITY 6": [
          "Packeg Manager (Installation and Download of Third-Person Asset)"
        ]
      },
      "requirements": [
        "PC and Conection with Internet",
        "PC with 4 GB ram and GPU 1GB RAM"
      ],
      "description": "Start mastering 3D third-person game creation with Unity 6.\nUnlock your game development journey with Unity 6! Learn how to create 3D third-person games step by step easily with just a few clicks. This beginner-friendly course shows you how to build your own 3D worlds or launch an exciting third-person action game, even with no experience.\nYou’ll master the basics of Unity 6, the latest and most powerful version of the Unity game engine. Learn how to set up 3D projects, import assets, create environments, control characters, add animations, physics, camera systems, and mechanics like jumping, attacking, and player movement.\n\n\nKey Topics Covered:\nInstalling Unity 6 and navigating the interface\nCreating and managing 3D scenes\nBuilding third-person character controllers\nCamera systems for third-person games\nAnimating characters and environments\nCore mechanics: jumping, attacking, player movement\nUsing the Package Manager and downloading assets\n\n\nBy the end of this course, you’ll have a working 3D third-person game prototype and a solid foundation to keep growing your Unity skills.\n\n\nPerfect for:\nBeginners with no experience in Unity or programming, indie developers, students, 3D artists, hobbyists, and anyone who wants to create action or adventure games RPGs and Souls Like.\nWellcome and Start learning Unity 6 today and bring your game ideas to life with ease!!",
      "target_audience": [
        "Developers indie",
        "Artists 3D",
        "Begins Developers"
      ]
    },
    {
      "title": "Unreal Engine5 Cinematic Trailer: Slow-Motion Bullet & Tanks",
      "url": "https://www.udemy.com/course/unreal-engine-5-for-game-trailer-slow-motion-bullet-tanks/",
      "bio": "Create cinematic game trailers with slow-motion bullets, tank battles, and stunning Unreal Engine 5 effects",
      "objectives": [
        "Animate slow-motion bullets, create blood effects, and design realistic hit and death reactions.",
        "Learn how to create cinematic scenes using Unreal Engine 5 Sequencer and cameras from scratch.",
        "Set up and animate a fully functional tank with turret control and movement physics.",
        "Record realistic tank gameplay animations using Take Recorder and physics-based effects.",
        "Attach characters to vehicles for more immersive and believable cinematic scenes.",
        "Create cinematic shooting effects like muzzle flashes, bullet hits, shockwaves, and camera shakes.",
        "Capture multiple dynamic shots of the same scene to create professional cinematic sequences.",
        "Master high-quality video rendering using Movie Render Queue and optimize with console variables.",
        "Combine Unreal Engine shots to create a fully polished, professional game trailer.",
        "Build the complete workflow for producing action-packed, cinematic game trailers in Unreal Engine 5."
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Sequencer Basics": [
          "Creating Project and Assets",
          "Create Sequencer",
          "Sequencer Settings",
          "Camera Settings",
          "Camera Rig Rail",
          "Camera Rig Crane",
          "Camera Cuts",
          "Fade Track"
        ],
        "Slow Motion Bullet": [
          "Setup Project",
          "Main Character",
          "Animations and Weapon",
          "Sequencer",
          "Cameras",
          "Bullet Actor",
          "Bullet Animations",
          "Particle Effect",
          "Blood Particle Effect",
          "Death Animation"
        ],
        "Tank Action": [
          "Setup Tank",
          "Input",
          "Physics",
          "Wheels Class",
          "Vehicle Movement",
          "Wheel Speed",
          "Turret Rotation",
          "Take Recorder",
          "Tank Sequencer",
          "Attaching Character",
          "Shooting",
          "Camera Shake",
          "Render"
        ],
        "BONUS After Effects": [
          "After Effects Template Editing"
        ]
      },
      "requirements": [
        "No prior experience required — just your passion and creativity!"
      ],
      "description": "Do you dream of creating stunning cinematic game trailers like the pros?\nIn this course, you'll learn step-by-step how to craft high-quality, action-packed cinematics entirely inside Unreal Engine 5 — even if you're new to it!\nWe'll start from the basics: mastering Unreal Engine’s Sequencer and Cameras, learning how to control shots, timing, and animation. Then, we'll dive into cinematic slow-motion bullet effects, character animations, blood and impact particles, and realistic hit and death reactions to build intense, movie-like action scenes.\nBut we won't stop there.\nYou'll also create a fully functional tank from scratch — building the vehicle class, setting up animation blueprints, rotating turrets, recording real gameplay animation using the Take Recorder, and adding realistic physics-based effects for a lifelike cinematic feel. We'll even attach a character to the tank for full immersion!\nYou’ll learn to:\nSet up tank movement and turret control\nCreate tank firing effects with shockwaves, camera shakes, and reusable cinematic shots\nMaster multiple camera angles for the same scene to make your trailer visually dynamic\nUse the Movie Render Queue with advanced console variables to render high-quality final videos\nBONUS Section: Assemble your cinematic scenes into a polished real game trailer using After Effects templates.\nWhether you want to make epic trailers for your own games or build an incredible portfolio piece, this course gives you all the tools and hands-on experience you need to create breathtaking cinematics.\nBy the end of this course, you will have:\nComplete knowledge of cinematic production in Unreal Engine\nA fully animated, action-packed tank battle scene\nA professional-quality game trailer you can proudly showcase",
      "target_audience": [
        "Artists who want to build high-quality action scenes and cinematics.",
        "Game developers looking to create professional game trailers.",
        "Filmmakers interested in real-time animation and effects.",
        "Beginners who want to learn cinematic creation in Unreal Engine 5.",
        "Anyone passionate about creating stunning visuals and storytelling with Unreal Engine."
      ]
    },
    {
      "title": "Unity UI System – ADVANCED Interfaces from Scratch to PRO",
      "url": "https://www.udemy.com/course/unity-ui-system-advanced-interfaces-from-scratch-to-pro/",
      "bio": "For 2D & 3D games – With C# programming and real menu & inventory projects adapted for PC and Mobile",
      "objectives": [
        "You’ll go through all C# interfaces of the Event System to connect UI elements through code and maximize performance.",
        "You'll design a complete advanced settings screen from scratch, integrating it with Unity's new Input System.",
        "You’ll access all UI elements via C#, mastering the full class, its properties, and methods at an advanced level.",
        "You'll build an RPG-style inventory system from scratch using real-world mechanics and applications.",
        "You’ll master the use of custom fonts to adapt and enhance your game's visual style, significantly boosting project quality.",
        "You’ll study every element of the Unity UI System, lesson by lesson, with real case applications to use directly in your own games."
      ],
      "course_content": {
        "INTRODUCTION TO THE COURSE": [
          "Course overview"
        ],
        "INTRODUCTION TO UI SYSTEM": [
          "Section objectives",
          "What is UI?",
          "UI Canvas",
          "Canvas components",
          "Canvas elements and Rect Transform"
        ],
        "EXPLORING ALL UI ELEMENTS": [
          "Section objectives",
          "Downloadable resources",
          "Basic usage of the Image component",
          "Image types",
          "More Image options – Raw Image",
          "Buttons part 1",
          "Buttons part 2",
          "Text elements",
          "Toggles (Checkboxes)",
          "Sliders",
          "Input Fields",
          "Layouts: Grid Layout Group",
          "Layouts: Horizontal/Vertical Group & Content Size Fitter",
          "Panel",
          "Scrollbar",
          "Scroll View: Creating content",
          "Scroll View: Options & settings",
          "Dropdown: Composition",
          "Dropdown: Configuration",
          "Text Mesh Pro",
          "Other TMP elements",
          "Navigation part 1",
          "Navigation part 1",
          "Event System",
          "Aspect Ratio Fitter",
          "Layout Element",
          "Canvas Group",
          "Shadow, Outline, UV1 & more details",
          "Graphic Raycaster"
        ],
        "ACCESSING UI ELEMENTS VIA C# SCRIPTS": [
          "Section objectives",
          "Images Scripting API",
          "Buttons Scripting API Part 1",
          "Buttons Scripting API Part 2",
          "Buttons and IPointerClick API Part 3",
          "Text Scripting API Part 1",
          "Text Scripting API Part 2",
          "Toggle Scripting API Part 1",
          "Toggle Scripting and Toggle Group API Part 2",
          "Slider Scripting API Part 1",
          "Slider Scripting API Part 2",
          "Input Field Scripting API Part 1",
          "Input Field Scripting API Part 2",
          "Grid Layout Group Scripting API",
          "Content Size Fitter API",
          "Horizontal/Vertical Layout Group API",
          "Scrollbar Scripting API",
          "ScrollView Scripting API",
          "Dropdown Scripting API Part 1",
          "Dropdown Scripting API Part 2",
          "Text Mesh Pro Scripting API",
          "Other TMP Scripting APIs",
          "Event System Scripting API",
          "Navigation Scripting API",
          "Aspect Ratio Fitter Scripting API",
          "Layout Element Scripting API",
          "Canvas Group Scripting API",
          "Shadow, Outline, and UV1 Scripting API",
          "Canvas, Scaler & Graphic Raycaster Scripting API"
        ],
        "MASTERING EVENT SYSTEM C# INTERFACES": [
          "Section objectives",
          "Event System interfaces",
          "IPointerEnter/ExitHandler",
          "IPointerDown/UpHandler",
          "IPointerClickHandler",
          "Using Object class with interfaces",
          "Drag and Drop interfaces",
          "IScrollHandler",
          "ISelection Handlers",
          "IMoveHandler",
          "ISubmit/CancelHandler",
          "Event Trigger",
          "Event Trigger API"
        ],
        "CREATING AN INVENTORY SYSTEM": [
          "Section objectives",
          "Download resources",
          "Download resources and setup",
          "Building the basic inventory structure",
          "Inventory Content Scroll View",
          "Creating the Item UI Prefab",
          "Configuring Inventory Description",
          "Intro to Inventory Scripting",
          "Inventory and Item classes",
          "UI Inventory Class",
          "Item assets – displaying visuals",
          "Creating world objects",
          "Moving World Items to Inventory UI",
          "Items World Spawner",
          "Stackable items",
          "Displaying World Item text",
          "Adjusting item quantities (+99)",
          "UI item selection",
          "Player functions & raycast cleanup",
          "Displaying selection info",
          "UI item display with buttons",
          "Drop item functionality",
          "Use item functionality",
          "Adding details and refining inventory",
          "Adding health & mana bars",
          "Fixes, comments, and notes",
          "Review of English naming conventions"
        ],
        "CREATING & EDITING CUSTOM FONTS": [
          "Section objectives",
          "Intro & acquiring fonts",
          "Font Asset Creator",
          "Modifying the Atlas texture",
          "Other options & final comments"
        ],
        "FINAL PROJECT: REBINDING SYSTEM (CONTROL REMAPPING)": [
          "Section objectives",
          "Downloadable resources",
          "Project download and setup",
          "Overview and settings",
          "UI Button setup",
          "Canvas Toggle Action",
          "Understanding Indexes & Composites",
          "Basic Rebinding",
          "Persistent bindings",
          "Persistent bindings with generated C# class",
          "Cancel Rebind and exclude bindings",
          "Updating to TMP",
          "Customizing Rebind text",
          "ResetBindings",
          "Handling duplicate bindings",
          "Duplicating bindings",
          "Duplicating composite bindings",
          "Gamepad binding icons",
          "Final visual polish",
          "Final notes & binding language fixes"
        ]
      },
      "requirements": [
        "Basic C# knowledge to access and manipulate UI elements via scripting",
        "Unity version 2020 or later to avoid compatibility issues and follow the course smoothly",
        "No extra resources needed — all materials are included. You can complete the program in 14 days by dedicating just 1 hour per day."
      ],
      "description": "Welcome to the Unity UI System course — your guide to creating ADVANCED and professional interfaces from scratch for your games.\nThis is a complete, real-case-based guide that teaches you how to design and adapt your game UI once and for all across all platforms in a professional way.\nCreating UI can be the most complex part of your project if you don’t understand all elements or how to access them through code. You’ll waste precious time browsing documentation or videos trying to fix every small issue.\nAnd even if you manage that, adapting your UI to different platforms becomes a nightmare — sometimes forcing you to duplicate projects just to make minor changes.\nThis is not a viable path if you want to work in professional game studios or position yourself as a serious game developer.\nUI is not just for the main menu — you’ll use it for gameplay HUDs, inventories, level selectors, and settings screens. If you don’t connect all these properly, your project will become harder and harder to manage, and you'll stop building actual gameplay features.\nThat’s why we built this course — to help you master the Unity UI System step by step with real use cases you can implement directly in your own games.\nWe teach you how to access every UI element via code, mastering the full class and its features at an advanced level. You’ll have no limits when applying this to your games.\nYou'll also learn all C# interfaces of the Event System, so you can connect UI elements programmatically for high-performance and smooth gameplay.\nYou’ll build a full-featured RPG-style inventory system from scratch, applying everything in a real-world scenario.\nYou’ll master custom fonts to tailor your game’s look & feel and enhance your project’s visual quality.\nWe’ll also build a complete settings screen with control rebinding, integrating with the new Input System to give players total control over their experience.\nYou can preview the course intro video before enrolling to explore the full curriculum and see how everything you learn will apply directly to your career and your games.\nYour purchase is 100% guaranteed — if you're not satisfied, you can request a full refund within 30 days, no questions asked.\nIf you have any questions, feel free to reach out to me via private message — I’ll personally help you to make sure your investment pays off in your journey to becoming a professional game developer.\nSee you inside the course!",
      "target_audience": [
        "Game developers who want to master the Unity UI System",
        "UX artists who want to integrate into game dev teams and need to understand UI tools deeply",
        "Game development teams who want to go deeper into Unity’s full UI System capabilities"
      ]
    },
    {
      "title": "Creating games without code! The Astro Galaxy Game Room",
      "url": "https://www.udemy.com/course/gameswithoutcode-thegameroom/",
      "bio": "Mastering Unity Lighting, Render Pipelines, & BOLT - 2d top-down shooter game & interactive 3d game environment",
      "objectives": [
        "How to make games",
        "How to make games without code in Unity",
        "How to use Bolt",
        "Mastering lighting in Unity",
        "Lighting & rendering with Unity's Universal Render Pipeline"
      ],
      "course_content": {
        "Introduction": [
          "Welcome to \"The Astro Galaxy Game Room\""
        ],
        "Understanding Lighting & Rendering in Unity": [
          "Unity Lighting 101 - Understanding Light Settings",
          "Unity Lighting 102 - Understanding Light Types & Components"
        ],
        "Scene setup & lighting - Default Render Pipeline": [
          "Creating & setting up, The 3d Game Room Scene",
          "Graphic & Light Settings - Default Render Pipeline",
          "Night Time Light Setup - Default Render Pipeline",
          "Post Processing Effects - Default Render Pipeline",
          "Creating Dust - Particles Effects",
          "Creating Light Shafts - Particles Effects",
          "Sunset Time Light Setup - Default Render Pipeline"
        ],
        "Scene setup & lighting - Universal Render Pipeline": [
          "URP - Installation, material setup, & Graphics Setup",
          "Lighting & Postprocessing for URP",
          "Ambient Occlusion with URP"
        ],
        "Installing & Setting up BOLT, Cinimachine, doTween, & Custom Classes": [
          "Installing & Setting up - BOLT 101",
          "Installing & incorporating Cinemachine into BOLT",
          "Installing & incorporating doTween into BOLT",
          "Installing & incorporating custom scripts & classes Into Bolt"
        ],
        "Creating an Interactive 3D Environment": [
          "Creating togglable lights with bolt",
          "Creating moving cloth - Part 1 -",
          "Creating moving cloth - Part 2 -",
          "Camera Switcher - Part 1 - VrCamera Setup",
          "Camera Switcher - Part 2 - Switcher functionality with Bolt"
        ],
        "Creating a Functional CRT TV": [
          "Creating the basic Tv functionality",
          "Tv Broadcast & Screen Projection",
          "Tv Multi-Channel Setup & Functionality",
          "Tv Dials & Volume Functionality"
        ],
        "Creating a Functional Game System": [
          "Game System Setup",
          "Cartridge Insert",
          "Game Channels",
          "Controller functionality & setup"
        ],
        "Astro Galaxy - 2D Space Shooter -SETUP": [
          "AG Main Menu - Part 1 -Setup",
          "AG Main Menu - Part 2 -Functionality & Animation",
          "AG Endless Parallax Scrolling Space Background"
        ],
        "Astro Galaxy - SPACESHIP": [
          "AG Spaceship -Part 1 - Controls, Laser Fire, & Animation",
          "AG Spaceship Part 2 - Laser Beam - Alternant laser Fire"
        ]
      },
      "requirements": [
        "No"
      ],
      "description": "Game Developers Republic is excited to announce, The Astro Galaxy Game Room! A brand new course & series, created to not only help you learn & master lighting, & using unity’s various Render pipelines, but also teach you how to create games & game mechanics, without writing a line of code using BOLT. In this course you'll not only create an interactive 3d environment, with a functional tv with multiple channels & a playable NES like game console, but also Astro Galaxy, a top down 2d space shooter.\n\n\nHowever, as most of us know, programming is a huge part of any games development. So it should come to no surprise that for many of us, learning how to write code was always a huge hurdle to overcome if you wanted to develop games.\nBut with Bolt now free, & officially a part of unity, creating beautiful, engaging, captivating, & fun games has never been easier.\n\n\nSo weather you an artists, designers, or programmer, with over 17 hours of video lessons, over 90 prefabs, over 100 unique texture maps, over 150 sprite & UI elements, 20 LUT color look up tabs, & HDRI images & materials, the Astor galaxy game room - Mastering Unity Lighting, Render Pipelines, & BOLT, course was designed to give you the knowledge, techniques, & the game asset, you need, to take your game from an idea, to a playable reality.\n\n\nDuring the 4 chapters of this course, you will learn:\nHow to properly create & set up lights, materials, & post processing effects in both Unity’s default legacy render pipeline, & the Universal scriptable render pipeline.\nAs well as how to use unity’s particle systems to create effects such as light shafts & dust particles.\n\n\nBolt basics, such as, nodes, events, and transitions.\nHow & when to use flow machines & state machines.\nBolt’s various variable types.\nHow to install & integrate unity packages such as cinemachine into Bolt.\nHow to install & integrate 3rd party scripts & plugins such as dotween into bolt.\n& how to install & integrate custom scripts & classes into bolt.\n\n\nWe’ll then learn how to set up & use visual scripting to create game mechanics & dynamic elements in the environment, such as\nTogglable lights\nDynamic cloth effects\nA tv with multiple channels\n& a playable retro nintendo like game system\n\n\nWith the experience of having created & setup, both basic & advanced game mechanics in Bolt. In the final chapter of the course, using Bolt we’ll learn to design & create game mechanics such as:\nCreating an endlessly scrolling parallax background\nCreating Menus & UI elements\nControlling Menus & UI elements through BOLT\nPlayer movement\nEnemy movement\nCreating & incorporating player & enemy health & upgrade mechanics\nProjectile spawning\nPlayer & Enemy spawning\nCreating & animating 2d sprites\nControlling animations through Bolt\n& much, much, more\nSo by the end of this course, you’ll not only have created an optimized, beautiful fully lit 3d interactive game environment & scene, with a functional TV & functional retro NES Nintendo like game console, title screen, & menu, but you’ll also have the understanding of how to implement and expand upon the tools & techniques you’ve learned, with the ability to utilize & implement them into your own unique projects or games.\n\n\nSo join us, in this step by step guide to mastering lighting in Unity & creating games without code with Bolt, as we teach you, explaining the logic, concepts, tools, & techniques, as you develop this interactive game environment, scene, menus, & game, from start to finish.\n\n\nAnd always remember, DON'T JUST PLAY... CREATE!",
      "target_audience": [
        "Beginner game development course",
        "Beginner Unity developers course about lighting",
        "Unity developers course about visual scripting",
        "Unity developers course about Bolt",
        "Unity developers course about render piplines"
      ]
    },
    {
      "title": "Mastering PlayCanvas for Beginners",
      "url": "https://www.udemy.com/course/mastering-playcanvas-for-beginners/",
      "bio": "Learn PlayCanvas from Scratch: A Step-by-Step Guide to Creating with PlayCanvas",
      "objectives": [
        "Gain familiarity with the PlayCanvas editor interface, including project setup, scene management, and workspace customization.",
        "Develop a foundational understanding of JavaScript as it applies to PlayCanvas, including creating and attaching scripts to objects, controlling game logic, and",
        "Learn how to import, manage, and optimize assets such as models, textures, and sounds within PlayCanvas, ensuring efficient use of resources.",
        "Gain skills in creating and manipulating 3D objects, including setting up materials, animations, and interactions within the game environment.",
        "Apply your knowledge to build a basic interactive experience or game, integrating elements like character movement, camera controls, and user interfaces.",
        "Understand the basics of project optimization, testing, and deployment, including preparing your game for publication on the web or other platforms."
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Creating your First 3D Environment": [
          "Interface and Navigation",
          "Creating Internal 3D objects and Materials",
          "Changing Material Properties",
          "Importing External 3D objects",
          "Checkpoints, Collaborations and Skyboxes",
          "Lighting your Scene"
        ],
        "Adding a First Person Player": [
          "Adding a First Person Player Part 1",
          "Adding a First Person Player Part 2",
          "Collisions and Rigidbodies"
        ],
        "Basic to Advance Coding": [
          "Basic Coding",
          "Keyboard Controls",
          "Customizing your Gun",
          "Gun Codes Part 1",
          "Gun Codes Part 2",
          "Gun Codes Part 3",
          "Gun Codes Part 4"
        ],
        "Adding Enemies": [
          "Enemis Part 1",
          "Enemies Part 2",
          "Enemies Part 3"
        ],
        "Sounds and User Interface": [
          "Adding Sounds",
          "Adding Scores",
          "Adding User Interface and Title Screen"
        ],
        "Publishing your Game": [
          "Publishing your Game"
        ]
      },
      "requirements": [
        "While the course is designed for beginners, a basic understanding of programming concepts such as loops and variables is recommended"
      ],
      "description": "Welcome to \"Mastering PlayCanvas for Beginners\"! This course is your gateway to the exciting world of PlayCanvas, a versatile and powerful WebGL game engine. Whether you're just starting out in game development or looking to expand your skill set, these tutorials are tailored to help you create immersive and interactive 3D experiences directly in your browser.\nIn this series, we'll start from the basics, guiding you through the essential steps of setting up projects, understanding the PlayCanvas interface, and organizing your work. You'll learn the fundamentals of scripting, using JavaScript to bring your projects to life with dynamic interactions and behaviors. We'll also dive into asset management, covering how to import, organize, and optimize 3D models, textures, and sounds to ensure smooth performance and a seamless user experience as we create a 3D first person shooter game.\nEach tutorial is designed to be engaging and practical, offering hands-on examples and clear explanations to help you grasp key concepts. As you progress through the series, you'll gain the confidence and skills needed to tackle more complex projects, whether you're interested in game development, simulations, or other interactive media.\nBy the end of this playlist, you'll not only understand the core features of PlayCanvas but also how to apply them creatively to your own projects. So, get ready to unleash your creativity and transform your ideas into reality. Join us in \"Mastering PlayCanvas for Beginners\" and start your journey into the fascinating world of 3D game development today!",
      "target_audience": [
        "Aspiring Game Developers",
        "Hobbyists and Enthusiasts",
        "Complete Beginners",
        "Students and Educators"
      ]
    },
    {
      "title": "Five Nights At Ghost House Game in Unity 3D",
      "url": "https://www.udemy.com/course/five-nights-at-ghost-house-game-in-unity-3d/",
      "bio": "Complete Game Development - Advance Your Game",
      "objectives": [
        "How to program from scratch",
        "Learn C#, a modern versatile programming language.",
        "Advanced Unity Techniques",
        "Build assets with performance and games in mind"
      ],
      "course_content": {},
      "requirements": [
        "PC or Mac capable of running Unity 2022 or later",
        "Basics of C# will be helpful, but not required.",
        "Passion to Game Development"
      ],
      "description": "Welcome to the first installment of the Complete Game Development Series.\n\n\nIn this intensive course, students will learn how to create a mobile project and set up a test environment. Designed to guide you through the process stepbystep, this course is perfect even if you have no prior experience in game development.\n\n\nAlthough having some familiarity with C is beneficial, don’t worry if you lack this experience, as I will cover everything you need to know.\n\n\nCourse Overview\n\n\nGame Concept\n\n\nThe game, Five Nights At Ghost House, spans five nights. Each night begins at midnight (12 AM) and ends at 6 AM. Each ingame hour lasts for one minute, so a full night is six minutes long. The player's objective is to guard the main room diligently to prevent zombies from entering; failure to do so will result in the game ending.\n\n\nZombies move between rooms in the house, requiring close monitoring to ensure they do not reach the main room.\n\n\nWhat You Will Learn\n\n\nIn this course, we will:\n\n\nCreate a game in Unity from scratch.\nStart with an empty project and build it into a complete fivenight game.\n\n\nBy the end of this course, you will have the skills to create your own unique game.\n\n\nThank you, and I look forward to your comments and suggestions.",
      "target_audience": [
        "Anyone who wants to make horror games",
        "People who want to create and publish their own games.",
        "Game Designers and developers who want to learn the basics of building a simple game in Unity",
        "Enthusiasts eager for a deep dive into game mechanics and Unity's potential."
      ]
    },
    {
      "title": "Zombie Escape: A Point & Click 3D Game using Unity's NavMesh",
      "url": "https://www.udemy.com/course/zombie-escape-a-point-click-3d-game-using-unitys-navmesh/",
      "bio": "Design a full game using Unity's built-in A* pathfinding solution with C# code for controlling Enemy AI Combat & Patrol",
      "objectives": [
        "Utilizing Unity's NavMesh Agent for Point & Click player movement",
        "Building a geomorphic-style procedural random level generator with customizable settings and spawn types",
        "Developing a Finite State Machine (FSM) in C# for controlling enemy behaviors",
        "Implementing Patrol, Idle, Chase, Attack, and Standby states",
        "Leveraging Unity's NavMesh Surface for A* Pathfinding in dynamically generated environments",
        "Configuring NavMesh Agents, Obstacles, Modifiers, Areas, and Agent Types",
        "Organizing resources using ScriptableObjects for memory optimization",
        "Creating Health & Combat systems for fully playable game experience",
        "Generating engaging sound effects and integrating audio sources"
      ],
      "course_content": {},
      "requirements": [
        "Have basic experience with Unity and C# programming",
        "Understand fundamental C# concepts and Unity workflows",
        "Be familiar with using Blender for exporting models and importing them into Unity (although detailed explanations will be provided)",
        "Note that no prior 3D modeling skills are necessary, as all required 3D assets are included with the course",
        "Be prepared to learn new C# coding techniques and Unity features, as they will be explained throughout the course",
        "Have a willingness to learn and experiment with new concepts and techniques in game development"
      ],
      "description": "Welcome to Zombie Escape, a comprehensive course designed for beginner to intermediate level game developers, guiding you step-by-step through creating an immersive Point & Click 3D game using Unity's powerful NavMesh system.\nIn this course, you will:\nImplement Point & Click player movement with Unity's NavMesh Agent and create smooth animations based on velocity\nDevelop a versatile Finite State Machine (FSM) in C# to control enemy behaviors such as Patrol, Idle, Chase, Attack, and Standby\nBuild a geomorphic-style procedural level generator and leverage Unity's NavMesh Surface for A* Pathfinding in dynamically generated environments\nConfigure NavMesh Agents, Obstacles, Modifiers, Areas, and Agent Types to create realistic and challenging gameplay\nDesign intelligent enemy flocking behaviors, ensuring enemies surround the player while waiting for their turn to attack\nCreate enemy Spawn Nests with customizable rules for activation, enemy types, and rewards\nUtilize ScriptableObjects for effective organization and memory optimization\nImplement a Singleton script to manage health, inventory, and upgrades across multiple scenes and levels\nDesign comprehensive Health & Combat systems to make your game fully playable and enjoyable\nBy the end of this course, you'll have gained the skills and knowledge to create your own captivating 3D games using Unity's NavMesh system, and you'll be well-equipped to tackle more advanced game development challenges. Join us on this exciting journey and create your own Zombie Escape today!",
      "target_audience": [
        "Beginner to intermediate Unity C# game developers looking to create a fully playable game while expanding their skillset",
        "Game developers interested in learning and implementing Unity's NavMesh system for pathfinding and AI behavior",
        "Individuals with a passion for developing point-and-click 3D games with a focus on enemy AI and procedural level generation",
        "Developers seeking to enhance their understanding of ScriptableObjects, Singleton patterns, and modular level design in Unity",
        "Students eager to create engaging and dynamic game experiences with intelligent enemy interactions and a variety of game mechanics"
      ]
    },
    {
      "title": "Android Game Development Tutorial in Android Studio",
      "url": "https://www.udemy.com/course/android-game-development-tutorial-in-android-studio/",
      "bio": "Learn to Build and Monetize 5 Complete Android Games using Android Studio and Java in Less Than 7 Hrs",
      "objectives": [
        "In this course you'll be able to build 5 complete android games in less than 7 hours.",
        "You'll be able to make your own kind-of framework and an efficient game loop for building future games.",
        "You'll be able to brush-up your Java skills.",
        "You'll be able to monetize your app with Google Admob Banner and Interstitial Ads and start getting some revenue."
      ],
      "course_content": {
        "Introduction to Android Game Development Tutorial in Android Studio": [
          "Introduction to the Android Game Development Tutorial in Android Studio Course",
          "Introduction to Retro Snake Game Project",
          "Game Resource",
          "Join The Community"
        ],
        "Start Creating the Framework": [
          "Start Developing MainActivity",
          "Design The Layout for GameActivity",
          "Start Developing GameActivity",
          "Develop the GameThread Class",
          "Develop AppConstants Class : Put Your Game Variables and Objects Together",
          "Define Snake Class : Manage Your Snake Object Efficiently",
          "Develop GameEngine Class : The Heart of The Project"
        ],
        "Design and Develop GameOver Activity": [
          "Design The XML Layout for GameOver",
          "Develop GameOver Activity and Finish Making The Game"
        ],
        "Develop a Simple Android Game using View [Save The Bunny]": [
          "Create a Complete Android Game : Save The Bunny",
          "Game Resource"
        ],
        "Develop a Simple Android Game using View [Space Shooter]": [
          "Create a Complete Android Game : Space Shooter",
          "Game Resource"
        ],
        "Develop a Simple Android Game using View [Brick Breaker]": [
          "Create a Complete Android Game : Brick Breaker",
          "Game Resource"
        ],
        "Develop a Simple Android Game using View [Save Earth]": [
          "Create a Complete Android Game : Save Earth",
          "Game Resource"
        ],
        "Course Wrap-Up": [
          "Bye for now",
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "Basic understanding of Android development",
        "The latest version of Android Studio is up and running on your Pc/laptop."
      ],
      "description": "Important Note:\nAll source code provided in this course remains valid and compatible with the latest versions of Android Studio and Android SDKs.\nPlease note, however, that the course was originally created using an earlier version of Android Studio and the Android SDK.\nIf your goal is to:\nLearn game development logic from the ground up,\nBuild a game loop from scratch,\nCreate your own custom game framework to develop future games more quickly and efficiently,\nAnd you wish to code entirely in Java without relying on external game engines,\n— then this course is ideal for you. Otherwise, we recommend exploring other courses that better match your needs.\nAre you curious about building simple Android games but don't want to dive into any game development frameworks (like Unity)? Do you want to understand how to do animation on android? How to detect collision? How to play sound effects? How to implement a health and scoring system? And, most importantly, how to make a game loop and your own simple gaming framework that you can use for building future games? After making the game, you must be looking for ways to monetize your game and publish it on Google Play, right?\nIf you say Yes to any one of these questions, you're at the right place.\nHi, my name is Sandip and I've published 10+ android games on Google Play. I also created some of the highly-rated Android Game Development courses on Udemy. So, I happen to know about android game development and in this course, I’ll show you exactly how to create and monetize 5 complete games step-by-step from beginning to end including 1) Retro Snake, 2) Save the Bunny, 3) Space Shooter, 4) Brick Breaker and 5) Save Earth. I only expect you to know a little bit of Java programming and made one or two apps in Android Studio. That’s all. No big deal. Other than that, I expect that you have the latest version of Android Studio up and running on your Pc, Chipmunk, or higher. I’ll go through the building process line by line to explain and help you understand how to build these fun games. We’ll start from scratch creating an empty project and building the complete game step by step. In the end, you will have 5 fully working, playable games that you can enjoy and the confidence to make any simple game on Android Studio. I'll also guide you to implement the Google Admob banner and interstitial ads so that you can start getting some revenue.\nYou will also have the security of a money-back guarantee. In fact, if for any reason within 30 days, you won't completely satisfied with your purchase, you can easily request a refund that will be given to you without any kind of question from Udemy!\nLet's get started. It will be fun!",
      "target_audience": [
        "Students who enjoy development projects",
        "Beginner to Android Game Development",
        "Beginner to Android development",
        "Beginner to Java programming"
      ]
    },
    {
      "title": "Platforming Game Mechanics in Unreal 5",
      "url": "https://www.udemy.com/course/platforming-mechanics-unreal/",
      "bio": "Learn about platforming game mechanics by building a prototype in Unreal 5 using blueprints!",
      "objectives": [
        "Good gameplay mechanics that lead to a more satisfying player experience.",
        "How to use Unreal Engine 5 and Blueprints to build a prototype game from scratch.",
        "Learn how common gameplay mechanics are implemented and how you can implement them in your own games.",
        "Complete a case study of a published platforming game to understand how and why the platforming mechanics were implemented they were by the game developer.",
        "Develop, test, and tweak game mechanics to make your game mechanics fun."
      ],
      "course_content": {
        "Introduction": [
          "Course Outline",
          "Project Setup"
        ],
        "Locomotion": [
          "Walking",
          "Running",
          "Acceleration",
          "Deceleration",
          "Niagara",
          "Locomotion Case Study",
          "Locomotion Project"
        ],
        "Jumping": [
          "Jumping",
          "Jump Height",
          "Jump Gravity",
          "Variable Jump",
          "Double Jump",
          "Jumping Case Study",
          "Jumping Project"
        ],
        "Falling": [
          "Falling",
          "Coyote Time",
          "Jump Buffer",
          "Air Control",
          "Air Brakes",
          "Falling Case Study",
          "Falling Project"
        ],
        "Dashing": [
          "Import",
          "Animate",
          "Blend",
          "Dash",
          "Extra",
          "Dashing Case Study",
          "Dashing Project"
        ],
        "Crouching": [
          "Crouch",
          "Crawl",
          "Under",
          "Transition",
          "Sneak",
          "Crouching Case Study",
          "Crouching Project"
        ]
      },
      "requirements": [
        "Students should already have a basic understanding of the Unreal engine.",
        "No programming experience necessary. Everything will be done in blueprints.",
        "This course features many of the new features that are only accessible from Unreal Engine 5."
      ],
      "description": "Welcome to my course on platforming game mechanics in unreal 5.\nIn this course, we'll start with the Third Person Template project that is provided by Unreal 5, learn about the individual components of this project, how they work, and how we can build upon them.\nIn the Locomotion section, we'll use the new Enhanced Input System to create event-driven input mechanics in the Event Graph, adding extra inputs as needed.  If this is your first time using blueprints, don't worry, we'll go over what the different nodes and variable types are.  You'll also learn about debugging practices and collecting useful data from test cases.  We'll also go over the Animation Blueprint, how State Machines work; how and when the character transitions between different animation states.  Plus we'll create visual effects using the new Niagara System and use both the event graph and animations to synchronize the effects with the gameplay.\nIn the Jumping section, we'll go over tracking character states and introduce the Geometry system.  We'll go over how gravity is implemented in Unreal, physics constants, and how we can use them to affect the character's jump.  We'll define our character's capabilities, setting limits to what the character can and can't do.  I'll show you how to bind a custom event to the jump apex and use that to alter gravity scale.  You'll learn how to write functions which accept input parameters, how colliders work, and how events can be triggered by collisions in your game.  All this will help us create jumping mechanics which feel more natural, intuitive, and fun to play.\nIn the falling section, we'll use the PlayerStart object to respawn the player, learning about Game Modes and Controllers.  We'll implement a variety of mechanics which provide player assistance that are common in games but break the laws of physics; Coyote Time, Jump Buffer, Air Control, and Air Brakes.  You'll learn more about different node and variable types in the event graph, and how animations can trigger events.\nIn the dashing section, we'll import a new character and animations into Unreal.  We'll create a new Animation Blueprint and State Machine for our new character, and blend animations together.  Then we'll build an entirely new platforming mechanic for our new character; dashing.  We'll give this dash its own animation and special effects, and also learn about diegetic UI.\nI have lots more content planned for this course, and will be adding more sections as they are completed.",
      "target_audience": [
        "Budding game developers who want to make their first game or a portfolio piece.",
        "Experienced game developers who are interested in learning how to use the Unreal 5 engine.",
        "Game developers who are experienced in 2D but want to try 3D.",
        "Coders who want to learn how to use Blueprints for visual coding."
      ]
    },
    {
      "title": "Learn Unity3D Mobile Games with Best C# Design Patterns!",
      "url": "https://www.udemy.com/course/learn-unity3d-mobile-games-with-best-c-design-patterns/",
      "bio": "Step by Step use Game Development Patterns in real games and Improve your Game Development Skills",
      "objectives": [
        "Game Object Pooling with details",
        "Creating Singleton Pattern objects in the right way",
        "Observer Pattern Real game implementation",
        "Implementing Event Driven Game Development with some event Managers",
        "Implementing finite state pattern with complete guidance",
        "Learn C# Design Patterns with real game development",
        "Examinate Best Practice implementation of C# and real Object Oriented Programing",
        "Instead of only developing game learn the development system and use it in your own games",
        "You will learn most professionaly used game development techniques in the insdustry",
        "You Will learn how to import animations and switch between animations",
        "Using Cinemachine adding shake system with cinemachine",
        "How to Use mostly used assets like DoTween To speed up your development"
      ],
      "course_content": {
        "Intro": [
          "Intro",
          "Initial Setup For 3D Runner Game",
          "Initial Setup using Packages Implementing Initial Animations"
        ],
        "Character Animations and Controllers": [
          "Implementing Downloaded Animations",
          "Adding Controller Scripts And Joystick",
          "Finishing Controller"
        ],
        "Creating GameObject Pool": [
          "Idea Behind Game Object Pooling",
          "Completing GameObject Pool"
        ],
        "Creating a Generic Singleton Pattern": [
          "Creating Script for Singleton"
        ],
        "Creating GamePlay": [
          "Adding Obstacles",
          "Setting Up Cinemachine and GameObjects",
          "Setting Up Barrier Spawner",
          "Adding Enviroment",
          "Creating Collectable Mechanics",
          "Collecting Item User Feedbacks",
          "Collecting Item UserFeedBacks 2",
          "Completing Collectables Logic"
        ],
        "Player improvements": [
          "Fixing Player Sideways falldown bug",
          "Hiding Joystick make it look like swipe",
          "Implementing basic UI",
          "Improving Panel System",
          "Implementing Observer Pattern",
          "Iproving Player Health system with Observsers",
          "Adding CameraShake with CineMachine",
          "Adding Idle Animation For Player",
          "Improving Game UI",
          "Improving Ingame Panel",
          "Implementing Inheritance to Improve our Codes",
          "Updating Collectable System and Implementing Score",
          "Implementing Barrier FallDown when hit",
          "Aligning Objects Properly",
          "Updating SingletonCreator System",
          "Game Result Mechanics",
          "Finish Line Animation Improvements",
          "Final Configurations",
          "Putting Development to a Package for Reuse"
        ],
        "3D Topdown Shooter Shooter Game Initial Setup": [
          "Initial Setup",
          "Importing Hierarch 2",
          "Player Initial Controller",
          "Improving Player Controller",
          "Setting Up Player Controller Animations"
        ],
        "Implementing Finite State Machine": [
          "Initial Setup For Enemy Models",
          "Initial explanation about statemachine",
          "Implementation of statemachine",
          "Using statemachine in enemy scripts",
          "Implementing new states for enemy",
          "Implementing attack state logic for enemy",
          "Adding new animations to game"
        ],
        "Bullet System": [
          "Setting Up Bullet System",
          "Implementing Scriptables",
          "Adding TimeOut and Configure Bullets"
        ],
        "Health System": [
          "Setting Up UI For Health Bars",
          "Enemy Chase And Simulate Take Damage",
          "Adding Shooting To Player",
          "Player Damage /Enemy Damage System",
          "Continue on Player Damage/Enemy Damage System",
          "Setting Animations on Hit and Improvements",
          "Kickback Bug Fix",
          "UI Rotate Towards Camera"
        ]
      },
      "requirements": [
        "You will need basic understanding of C# like defining variables creating classes Interfaces and basic inheritance rules",
        "You need Unity installed on your PC/Laptop in order to follow course"
      ],
      "description": "We will create two game prototypes first will be a Runner Clone main focus will be improving your coding skills at Unity to understand how to implement Game Development Patterns in real games and the second Game Will be a 3d Shooter game it will be more complex than the first game we will have more scripting tutorials for this game.\nYou need to have at least basic knowledge of Using Unity/C# and its nice to have some prior skills for this course  main idea is to  improve your coding skills to write more clean and reusable codes for your games\nTopics covered at Runner Clone Game;\nGame Object pooling\nGeneric Singleton Class Creation\nObserver Pattern\nAnimations  and Best practice implementations\nTopics covered at 3d Shooter  Game;\nCreating a working state machine for Enemy AI\nUsing Scriptable objects\nImplementing interfaces\nBonus system Gun Upgrade system\nYou can use most of the code on your own games and with those development techniques you can be more productive on your projects.\nto get the most benefit from the course all of the examples are offering source codes too also assets used in this course are totally free.\nAlways feel free to ask me anything about to content I'm here to help step by step I'll be guiding you throughout the course.",
      "target_audience": [
        "Unity 3d mobile game developers hyper casual or casual.",
        "For Game Devs e specially who wants to improve skills on coding and developing most of the course we will focus coding stuff",
        "If you are a mobile game developer and having difficulties when codes get too much this is totally for you",
        "If you are willing the learn Unity in the right way this course is for you",
        "C#.Net developers at other fields of software development and willing to learn game dev"
      ]
    },
    {
      "title": "JavaScript Car Driving Game from scratch with source code",
      "url": "https://www.udemy.com/course/javascript-car-game/",
      "bio": "Learn how you can build a car game from scratch practice exercise building a fun mini application",
      "objectives": [
        "How to use JavaScript",
        "How to create elements dynamically",
        "Manipulate elements using JavaScript"
      ],
      "course_content": {
        "Introduction to JavaScript car game": [
          "Car Game Introduction",
          "Web developer setup"
        ],
        "JavaScript building a car driving game from scratch": [
          "JavaScript Car Game Setup",
          "Source Code",
          "KeyPress Event Listeners",
          "Source Code",
          "RequestAnimationFrame Method",
          "Source Code",
          "Move Div with Keypress",
          "Source Code",
          "Road Builder",
          "Source Code",
          "JavaScript game Road lines moving",
          "Source Code",
          "Road Line Movement 2",
          "Source Code",
          "Generate More Cars",
          "Source Code",
          "Check Collision Detection",
          "Source Code",
          "End Game Scoring",
          "Source Code",
          "Restart Game Function",
          "Source Code",
          "Random Color value",
          "Source Code",
          "Game Tweaks and adjustments",
          "Source Code",
          "Quick CSS update",
          "Source Code",
          "Car Game Code Review",
          "Source Code and downloadable content"
        ],
        "Bonus content and course resources": [
          "Bonus Lecture",
          "Enhanced Learning Toolkit: A Collection of Downloads, Case Studies, and Addition"
        ]
      },
      "requirements": [
        "Fundamental JavaScript concepts",
        "Access to computer",
        "Use of editor to write code",
        "HTML and CSS knowledge"
      ],
      "description": "Using JUST JAVASCRIPT see how you can build a fully functional car racing game\nLearn and practice applying JavaScript.\nPerfect for beginners to learn step by step to build interactive web applications.  This course covers building a web site based car driving game, with all the source code and everything you need to build your own version.  JavaScript core knowledge is a prerequisite for this course along with HTML and CSS.  This course is design for those who want to build interactive content using JavaScript and practice applying JavaScript in development.\nThe scope of the course is about applying JavaScript and seeing it in action.\nCourse covers\nElement Selection and manipulation via JavaScript\nUpdating element style properties to move elements on your webpage\nAdding event listeners to create interactive content\nKeyboard events used to move elements\nCollision detection between two elements on the page\nUsing animation frame function in JavaScript\nCreating elements dynamically\nApplying logic for game functions\nStep by step lessons - source code included\nNo libraries, no shortcuts just learning JavaScript making it DYNAMIC and INTERACTIVE web application.\nStep by step learning with all steps included.\nBeginner JavaScript knowledge is required as the course covers only JavaScript relevant to the building of the game.  Also HTML and CSS knowledge is essential as scope of this course is all JavaScript focused.\nAlong with friendly support in the Q&A to help you learn and answer any questions you may have.\nTry it now you have nothing to lose, comes with a 30 day money back guarantee.\nStart building your own version of the game today!!!!",
      "target_audience": [
        "Beginners to JavaScript",
        "Anyone who wants to practice writing JavaScript",
        "Web developers",
        "Webmasters",
        "Anyone who wants to learn to make a JavaScript game without any libraries"
      ]
    },
    {
      "title": "Make a 2D Flappy Bird Game in Unity®: Code in C# & Make Art!",
      "url": "https://www.udemy.com/course/2dunitygame/",
      "bio": "Build a Flappy Bird-inspired game to learn to code & make art in Photoshop. Ultimate guide for aspiring game developers.",
      "objectives": [
        "Build an Endless Flyer game in Unity®",
        "Learn the fundamentals of game design.",
        "Create artwork in Photoshop.",
        "Code in C#.",
        "Integrate art into Unity®"
      ],
      "course_content": {
        "Introduction to the Course": [
          "Introduction to the Course"
        ],
        "Introduction to Unity Section 1": [
          "Introduction",
          "Unity Editor",
          "Moving a Cube",
          "Materials",
          "Lights",
          "Particle System",
          "Applying Physics",
          "Asset Store"
        ],
        "Introduction to Unity Section 2 (Coding)": [
          "Introduction",
          "Variables",
          "Methods",
          "If Blocks",
          "Loops"
        ],
        "Introduction to Unity Section 3 (Inputs)": [
          "Introduction",
          "Key Presses",
          "Moving a Player",
          "Jumping",
          "Moving Forward",
          "Cycling Cameras"
        ],
        "Introduction to Unity Section 4 (Prefabs)": [
          "Introduction",
          "Introduction to Prefabs",
          "FAQ on Instantiating Objects",
          "Random Angles",
          "FAQ on Destroying Objects",
          "Explosion Effects",
          "Adding Explosion Effects"
        ],
        "Creating the Game (Unity Projects)": [
          "Project Set Up",
          "Player Structure",
          "Player Movement",
          "Camera Follow",
          "Screen Limits",
          "Creating an Obstacle",
          "Instantiating Obstacles",
          "Obstacle Positioning",
          "Infinite Game",
          "Interface",
          "Score Areas",
          "Score Events",
          "Canvas Concerns",
          "Game Over",
          "Small Gameplay Adjustments"
        ],
        "Introduction to Photoshop": [
          "Have Photoshop experience? Jump to Section 8!",
          "Opening a New File",
          "Navigation Controls",
          "Basic Tools Rundown",
          "Basic Tools Usages",
          "Basic Secondary Tools",
          "Basic Layers",
          "Painting Sample",
          "Adjustment Layers (Part 1)",
          "Adjustment Layers (Part 2)",
          "Adjustment Layers (Part 3)",
          "Transform Tool",
          "Transform Tool Continued",
          "Colour Range Select",
          "Image Settings",
          "Image Adjustment",
          "Photoshop Fun",
          "Photoshop Fun (Cont'd)",
          "Ruler Usage"
        ],
        "Creating The Art Assets (Photoshop Projects)": [
          "Pixel Setup",
          "Pipe Asset",
          "Creating the Floor",
          "Background Clouds",
          "Background Buildings",
          "Creating Flappy",
          "Background Sky",
          "Exporting Art"
        ],
        "Finishing the Game (Unity Projects)": [
          "Integrating Fonts",
          "Background & Sound Effects",
          "Adding Pipes",
          "Adding Game Background",
          "Foreground Parallax",
          "Size Adjustments",
          "Remaining Layers",
          "Flapping Animation",
          "Changing Skins",
          "Creating Buttons",
          "Adjusting Game Flow",
          "Rotating the Player",
          "Challenge Time!"
        ],
        "Resources": [
          "($2000 value!) Source Files",
          "Please leave us a rating!",
          "Bonus Lecture: Get 130 courses."
        ]
      },
      "requirements": [
        "Unity® 2017.1.0f3 (for game set-up and coding)",
        "Photoshop CC 2017 or a free program like Gimp (to make 2D art)",
        "This course was recorded on a Mac computer, but you can use a PC."
      ],
      "description": "This course was funded by a wildly successful Kickstarter.\nLet's make an Endless Flyer game! Join Mammoth Interactive step-by-step in building a fully featured game from scratch. We show you how to make all the code and art for the game from scratch.\nDo you love Flappy Bird? You can make your own game inspired by it!\nAfter purchasing this course, you'll be taken step-by-step through every process needed to do just that. Our two very talented instructors, Kevin Liao and Glauco Pires, explain everything from a basic, beginner level. That means, you don't have to have any prior coding or digital art experience to succeed here.\nGlauco Pires will take you through the process of coding a game in Unity® from scratch. Kevin Liao will teach you how to create all the artistic elements you will need to complete the game. Kevin will teach this section of the course in Photoshop to make original 2D art. The final section will teach you how to integrate the art to the game in Unity®.\nThe beauty of taking an online course like this is the ability to replay any of the lectures at any time. There is no time limit or final tests. You get to learn at your own pace with a practical model method of learning.\nFeel free to leave us any questions in our Q&A section. Please leave this course a rating. We love hearing from you!\nThis course is project-based, so you will not be learning a bunch of useless coding practices. At the end of this course you will have real world apps to use in your portfolio. We feel that project based training content is the best way to get from A to B. Taking this course means that you learn practical, employable skills immediately.\nYou can use the projects you build in this course to add to your LinkedIn profile. Give your portfolio fuel to take your career to the next level.\nLearning how to code is a great way to jump in a new career or enhance your current career. Coding is the new math and learning how to code will propel you forward for any situation. Learn it today and get a head start for tomorrow. People who can master technology will rule the future.\nYou get full lifetime access to this course for a single one-time fee. Enroll today to join the Mammoth community!",
      "target_audience": [
        "Complete beginners. No prior coding or digital art skills necessary.",
        "People who want to make games."
      ]
    },
    {
      "title": "Unity Game Tutorial - Combination Puzzles",
      "url": "https://www.udemy.com/course/unity-game-tutorial-combination-puzzles/",
      "bio": "Learn how to create Combination Puzzles and Riddles in Unity Game Engine. Pipe Puzzle, Hexagonal Puzzle, Triangle Puzzle",
      "objectives": [
        "to create your own custom Combination Puzzles.",
        "to create all necessary 2D graphics in Inkscape.",
        "C# - lists, arrays, variables, functions ...",
        "Game design - how to create puzzles in any possible setting you like.",
        "Pipe puzzles, hexagonal puzzles, triangle puzzles",
        "Puzzle tile rotation on click..."
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Inkscape": [
          "The Concept",
          "The Straight Pipe",
          "The Corner Pipe",
          "The Cross Pipe",
          "The \"T\" Pipe",
          "The Hexagon Parts",
          "The Triangle Parts",
          "Exporting the Atlas"
        ],
        "Unity": [
          "Setup Unity & Import Atlas",
          "The First Puzzle Set",
          "The First Click",
          "Rotating Puzzles Tiles #1",
          "Rotating Puzzles Tiles #2",
          "A bit more Design",
          "Puzzle Script #1",
          "Puzzle Script 2",
          "Puzzle Script 3",
          "Puzzle Script 4",
          "Round Rotation"
        ],
        "More UI & Features": [
          "Inkscape : UI Design",
          "Unity: Design Setup",
          "Timer #1",
          "Timer #2",
          "Timer #3",
          "Stop Rotation and Timer",
          "Updating UI for Aspect Ratio",
          "Camera Aspect Ratio Fix"
        ],
        "Level Selection": [
          "Level Select Scene #1",
          "Level Select Scene #2",
          "Level Select Scene #3",
          "Level Select Scene #4",
          "Level Select Scene #5"
        ],
        "The Other Puzzles": [
          "Hexagonal Puzzle",
          "Triangle Puzzle",
          "Make all puzzles available"
        ],
        "Winning, Losing and Final Steps": [
          "Win and Lose Panel",
          "Block Inputs on Win Or Lose",
          "Level Name and Buttons Functions",
          "Distraction Tiles - Pipes revisited",
          "Triangle Puzzles revisited",
          "Hex Puzzles revisited",
          "Main Menu Scene"
        ],
        "Conclusion & Extras": [
          "Conclusion"
        ]
      },
      "requirements": [
        "PC or Mac",
        "Mouse and Keyboard",
        "Inkscape and Unity (any Version 5.6+)"
      ],
      "description": "In this Course you'll learn how to create multiple combination puzzles with Unity Game Engine. The system we create can handle hexagonal puzzles, triangle puzzles and quadratic puzzles. We will create all grafics in Inkscape\nThis course is a Beginner course, so if you have trouble in any case, write me a message or Q&A, and i'll help as best as i can.\nIf you are beginner, you might have some trouble to follow, but the videos will guide you through the complete course. Don't forget you only become better if you repeat things and keep on learning!\nSo you learn about the following:\nInkscape (free Vector Grafics Program)\ncreate pipe grafics\nhex tile grafics\ntriangle tile grafics\nexport a usable Texture Atlas\nC# (Monodevelop)\nvariables: bool, int, string, float\nfunctions\nloops: for and foreach\nLists, Arrays\nCo-Routines\nso we can create:\nfunctions to rotate the tiles on click\nfuctions to shuffle the game at start\nfunctions to check if the puzzles has been solved\nTimer\nand many more...\nUnity (2019.1)\nUser Interface Design\nCanvas Aspect Ratio Fix for 2D Games for Mobile Devices\nUI Aspect Ratio Fix\nSprites and Sprite Settings\nLevel design\nButtons\nInteraction with the Tiles on Click\nand many more...\nCourse Material\nI provide the following Material with the Course:\nNone, because i teach you how to create all on your own in Inkscape.\nYou have to write the code on your own, i do not provide the final scripts!\nAll graphics for Menu's, Icons, Images or Buttons need to be created on your own, i show you how in the course.\nAll Materials i provide are for education only and should not be in your final release!\nConclusion\nIn the end of this course you should have a fully functional Combination Puzzle 2D Game with multiple levels.\nChallenge\nAfter you have created nice Menus, Buttons, and a lot additional content and levels, upload the Game to any Gaming Website, Google Playstore, Apple Store or even Windows Store or Steam.\nSo what are you waiting for?\nLet's make your dream game a reality!!\nLevel: Beginner\nVideo Course Length: ~7 hours\nUnity Version required: 5.6+",
      "target_audience": [
        "Interested into game creation with Unity.",
        "Beginners in the Game Developement.",
        "You like to create their own Games.",
        "You want to finish your first game and release it",
        "You like to learn how puzzle games are created."
      ]
    },
    {
      "title": "Learn to Code With The Complete Unity 2D Masterclass",
      "url": "https://www.udemy.com/course/unity2dmasterclass/",
      "bio": "Learn the skills and techniques needed to create your own 2D games with Unity.",
      "objectives": [
        "Understand the Unity game engine and its core features, such as the editor interface, game objects, components, and scripting.",
        "Create 2D games using Unity, including characters, environments, animations, physics, and UI elements.",
        "Implement gameplay mechanics and logic using C# programming, including player movement, singleton pattern, and level design.",
        "Publish and deploy completed 2D games to standalone platforms such as PC, Mac, and Linux."
      ],
      "course_content": {
        "Introduction To Unity": [
          "Introduction to Unity",
          "Opening a 2D Project",
          "Setting Up the Project Properties",
          "Explaining Unity's Windows",
          "The Asset Store",
          "The Package Manager",
          "Setting Up Folder Organization",
          "Editor Window Layouts"
        ],
        "The Unity Editor": [
          "Introduction to The Unity Editor",
          "The Basic Toolbar",
          "Creating GameObjects",
          "Converting GameObjects to Prefabs",
          "Attaching Scripts to GameObjects",
          "Creating Builds for PC",
          "Tips and Tricks"
        ],
        "Scripting In Unity": [
          "Introduction to Unity Scripting",
          "Creating Your First C# Script",
          "Explaining The Common Script Methods",
          "Setting Variables From Within The Unity Inspector",
          "Using the Singleton Pattern for Easy Accessibility",
          "An Intro to Scriptable Objects"
        ],
        "Number Math Game": [
          "Introduction to Your First Unity Game",
          "Number Math Game Project Setup",
          "Equation Manager",
          "Create UI for Math Problems",
          "UI Manager",
          "Removing A Number and Adding User Input",
          "Checking for the Correct Answer",
          "Adding a Visible Score",
          "Adding a Timer Countdown",
          "Highscore System",
          "Displaying the Highscores",
          "Play Again and Quit Buttons",
          "Add the Starting Countdown",
          "Final Polish and Effects"
        ],
        "Block Breaker Game": [
          "Introduction to the Block Breaker Game",
          "Project Setup and Saving the Scene On Play",
          "Creating the GameObjects",
          "The Ball Script",
          "Configuring Ball Collisions",
          "The Brick Script",
          "The Paddle Script",
          "Spawning the Ball on the Paddle",
          "Adding a Ball Trail",
          "Your First Particle System",
          "The Brick Manager",
          "Losing Lives",
          "The Game Manager",
          "Creating the In Game UI",
          "The UI Manager",
          "Adding a Pause Menu",
          "Creating Reusable Menu Buttons",
          "Set Up GameOver",
          "Adding the Main Menu and Script",
          "Sounds and an Audio Manager",
          "Export and Playtesting"
        ],
        "2D Physics Catapult Game": [
          "Introduction for the Physics Catapult Game",
          "Setting Up The Catapult Project",
          "Adding SaveOnPlay and EditorDecorator Scripts",
          "Finishing the TransformReset Script",
          "The Catapult Prefab",
          "The Cannonball Prefab",
          "The Ball Manager",
          "The Catapult Script",
          "The Cannonball Script",
          "Adding Force to the Cannonball",
          "Resetting the Cannonball",
          "Changing the Launch Trajectory",
          "Intro to Tilemap Systems",
          "Importing and Creating a Ground Rule Tile",
          "Creating the Plank Prefabs",
          "The Level Manager",
          "The Plank Script",
          "The Camera Movement System",
          "The Score Manager",
          "Creating the Enemy",
          "Enemy Animation System",
          "Enemy Animation Events",
          "Beginning Level Camera Movement",
          "The Dust Manager",
          "Creating a Dust Prefab",
          "In-Game UI Design",
          "The UI Manager",
          "The Pause Screen",
          "Scripting the Pause Menu",
          "The Game Manager",
          "Victory and Defeat Screens",
          "Camera Effects - Fade In / Fade Out",
          "Creating the Game's Levels",
          "The Main Menu",
          "Adding Parallax to the Main Menu",
          "Level Select Screen",
          "Options Screen",
          "The Main Menu Script",
          "Scripting the Options Menu",
          "Switching Between Level Select and Each Level",
          "Object Physics Materials",
          "Saving and Loading Scores",
          "The Audio Manager System",
          "Exporting Game for Standalone Releases"
        ]
      },
      "requirements": [
        "No programming experience required. You will learn everything you need to know by taking this course."
      ],
      "description": "Welcome to \"The Complete Unity 2D Masterclass\"! This course is designed to teach you everything you need to know to create your own 2D games using Unity, a popular game engine used by thousands of developers around the world.\nWhether you're a beginner or an intermediate game developer, this course has something for you. You'll start by learning the fundamentals of the Unity editor, including how to set up a new project, navigate the interface, and work with game objects and components.\nNext, you'll dive into C# programming, learning how to create variables, functions, and control structures. You'll use these skills to implement gameplay mechanics and logic, such as player movement, enemy AI, and level design.\nAs you progress through the course, you'll learn how to create and animate characters, design levels, and add UI elements such as menus and scores. You'll also learn how to use Unity's built-in physics engine to create realistic and engaging gameplay.\nBy the end of this course, you'll have a solid understanding of Unity and the skills needed to create your own 2D games. You'll be able to design and build complete 2D games from start to finish, and you'll know how to publish and deploy your games to platforms such as PC, mobile, and web.\nThis course is suitable for anyone with a basic understanding of programming and a willingness to learn. The instructor is a experienced game developer with over 6 years of industry experience, and he is ready and willing to help anyone who has questions or needs support. So, if you're ready to start your journey in game development, join me in this course and let's create some amazing games together!",
      "target_audience": [
        "Beginner and intermediate Unity developers who want to strengthen their knowledge in the 2D realm."
      ]
    },
    {
      "title": "Draw Your Own RPG Inventory: easy way to create 2d game art",
      "url": "https://www.udemy.com/course/draw-your-own-rpg-inventory/",
      "bio": "Draw all unique staff for your own RPG and fill inventory with cool items!",
      "objectives": [
        "Draw different kinds of game art",
        "Create own full RPG inventory full of staff",
        "Combine different techniques and create own game art style",
        "Draw High Resolution and Scaleable graphics"
      ],
      "course_content": {
        "Intoduction": [
          "Introduction"
        ],
        "Basic Setup": [
          "Where to get Free Professional Software for creating Game Art?",
          "How to work in program? Basic functionality"
        ],
        "Draw a weapons": [
          "How to draw Handaxe: part 1",
          "How to draw Handaxe: part 2",
          "How to draw Waraxe: part 1 - Blade",
          "How to draw Waraxe: part 2 - Handle",
          "Hot to draw Catana (Japanese sword)"
        ],
        "Draw an armor": [
          "How to draw the Viking Helm",
          "How to draw a shield",
          "How to draw round shield",
          "How to draw studded leather armor"
        ],
        "Draw an additional accessories": [
          "Hot to draw rings",
          "How to draw scrolls",
          "How to draw bombs"
        ],
        "Finish up": [
          "How to export svg to png"
        ],
        "Bonuses": [
          "How to draw chest (Front view - closed and opened lid)"
        ]
      },
      "requirements": [
        "You need just to download one program (free), open eyes and repeat all the right moves"
      ],
      "description": "Why we like play and create Role Play Games (RPG)? We like story, characters, fights and… many-many-many items in our inventory! Moreover, when comes time to create your own RPG, you should fill the inventory with very cool and different staff: deadly weapons, cool armor, useful accessories, funny junk.\nIn this course, we will understand how to draw many kinds of items in free professional software. Video tutorials in simple and fast way shows you how to start from simple shape and end with brutal axe or smooth bomb. In addition, every object will be created maximum in 25 minutes (in this cases tutorial will be separated in two parts because of Udemy rules).\nTo start you don't need specific knowledge – I will show where to get professional software, how to use it and repeat all the main functions in every tutorial. You need just to open your eyes, ears and repeat all the right moves. After 10-20 minutes you will get your first RPG items.\nCourse contain video tutorials. Each theme created from one or two videos. The most comfortably watch videos on PC (MAC) or Pads. But create graphics we will on computers.\nIf you want to test my tutorial before start, you can check the free videos “Draw the sword: easy way to create 2d game art in 30 minutes\".\nThe most interesting thing for You, that this course will grow. And next tutorials and next items I will create after yours willing.\nIf you like games and RPG's, if you creating your own game and want nice, smooth, simple to create and unique graphics for it – this course is for you. Just sit down, open right program and start to draw. After the few hours, you will have first cool items and possibility to redesign your game to new level.\nGood luck and see you on the next video tutorial!",
      "target_audience": [
        "Beginners in 2d game art",
        "Game creators who don't have money for professional artist",
        "Gamedevelopers who want to make own unique graphics",
        "Who want to create cool stuff but don't know how to start"
      ]
    },
    {
      "title": "Unreal Engine 5 Bluerpint Essentials For Absolute Beginners",
      "url": "https://www.udemy.com/course/unreal-engine-5-bluerpint-essentials-for-absolute-beginners/",
      "bio": "Building a solid starting point of programming in Blueprint",
      "objectives": [
        "What are blueprints",
        "Know how to navigate inside Unreal Engine 5 Editor",
        "Learn the programming essentials: Variables, value types, data structure and flow controls",
        "Understand Blueprint Communication essentials: Direct references, event dispatcher, blueprint interfaces, cast to"
      ],
      "course_content": {},
      "requirements": [
        "Basic knowledge of how to use a computer"
      ],
      "description": "This is a course which is made specifically for the Unreal Engine 5 absoute beginners. Everything will be explained in details and it assumes you know nothing about Unreal Engine and it assumes you have no previous programming experience. This course teaches you the most needed essentials of the Unreal Engine 5 Bluerpint Visual Scripting to get you started. After this course, you'll fell confident taking other project based tutorials or courses.\nWe will start from installing the development environment including the Unreal Engine editors. Then we'll give you a gentle introduction to the Unreal Engine Editor and the first person template project, just to get you familiar with the basics of the Unreal Engine 5 editor.\nAfter that, we will introduce you to programming and explain the most important programming concepts including variable, value types and the basic data structures.\nThen we will go through the most important blueprint programming nodes.\nFinally, we will teach you blueprint communications which are essentials to any games you're going to develop in the future.\nBefore any practical coding, we will use diagrams and presentations to give you a clear picture what we're going to do and why  we're going to do it like that.  And we will repeat important concepts until you fully understand them.",
      "target_audience": [
        "Non-coders who wants to learn Blueprint Visual Scripting in Unreal Engine 5",
        "Absolute beginners who wants to learn Blueprint Visual Scripting in Unreal Engine 5",
        "Anyone who has no computer science background and find coding is so hard for them and they still want to make games in Unreal Engine 5",
        "Anyone who's tried to learn Blueprint Visual Scripting but failed."
      ]
    },
    {
      "title": "Unreal Engine 5: quick guide for beginner",
      "url": "https://www.udemy.com/course/unrealquickguide/",
      "bio": "2 hours guide how to create your first prototype in Unreal Engine 5",
      "objectives": [],
      "course_content": {},
      "requirements": [
        "Installed Unreal Engine 5"
      ],
      "description": "In this course you will learn how to create very basic runner project using Unreal Engine. There is no difficult tasks or complete explanation for every step - just simple steps for beginners to follow and learn basics. This guide has 2 hour overall duration so if you follow every step correctly - you will complete it around 2 hours. Quick and good step forward.\nNotice: If you are looking for complete guide or deep explanations of blueprint or advanced technics this guide is not for you.\nFAQ:\n1) Can I download the materials or the project somewhere?\nAnswer: no, the project is made completely from scratch, all elements are developed from scratch, and what is taken from the assets is available free in the internet. The project is not available for download in order to curb piracy and theft of copyright content.\n2) Is it possible to ask about the topic of the course?\nAnswer: Of course you can. I will read and answer. If you need help with some additional points, for example, \"how to add \"a stuff\" to the game\", then you can also contact me, I will help. The only thing is that I will not write the code for you, I will only tell you how to do it.\n4) What will I learn in this course?\nAnswer: everything you need to create a fully working runner game.\n5) What is the format of the classes?\nAnswer: Classes are held in the format of video lessons. Each next lesson builds on the previous lesson, so it is recommended to complete the tasks in order.\n6) Is there support after the course?\nAnswer: You can always ask the project author your question related to the course and elements within the project. There are no time limits after completing the course.",
      "target_audience": [
        "Beginner level",
        "Enthusiasts"
      ]
    },
    {
      "title": "JavaScript Dice Game Node.js HTML5 CSS3",
      "url": "https://www.udemy.com/course/javascript-dice-game-nodejs-html5-css3/",
      "bio": "JavaScript Browser Game Development",
      "objectives": [
        "To create a fully functioning browser game made in JavaScript.",
        "Designing HTML buttons, inputs, text and other types of game buttons.",
        "Having a project you can use when applying for developer & programming jobs.",
        "Land a job as a game developer using JavaScript to create browser games."
      ],
      "course_content": {},
      "requirements": [
        "No Programming experience needed. You will learn everything in the course."
      ],
      "description": "In this course you will be developing a web browser dice game using JavaScript. This course is designed for absolute beginners to take you from zero knowledge to develop your first JavaScript game with me. Within this course you're developing a dice game where players make a guess and see if their guess is correct. The dice rolls 1-6 and the winner with highest score after all elimination rounds will be crowned winner. Web design is included within this course. JavaScript is powerful to learn, Not only for front end web development but JavaScript is similar to other programming languages so by learning JavaScript you will learn other programming languages faster. If you're interested you should watch the Introduction video and then take the course! I designed this programming course to be easily understood by absolute beginners.\nBuild a strong JavaScript programming foundation with this course for beginners.\nBuilding a web browser JavaScript game.\nFront End web development using JavaScript. (core learning objective of this course)\nWeb Development using HTML 5.\nWeb Design using CSS.\nUsing modern fonts for your website.\nVariables, functions, if statements, for loops.\n400 lines of well commented JavaScript code.\nJavaScript & Nodejs is powerful skill to learn\nJavaScript & Nodejs are free programming languages that are easy to learn. JavaScript is mostly used for front end web development like animations and browser games. Nodejs is JavaScript used as a server side language to create web servers and connections to databases. By learning JavaScript/nodejs you will have the knowledge to continue with other languages that are similar such as Java, C#, C, C++. The programming concepts in these programming languages are similar to those in nodejs with some differences.\nYour Instructor\nMy name is Erik Petersson and I have years of experience within various programming languages. My core skill lies within nodejs and full stack web development which includes a lot of JavaScript. I've used JavaScript and nodejs to create many different kinds of applications and browser games. I started my journey by studying to become a certified .net developer for 2 years in Kalmar and I used C# to develop the back end for web applications. With my skills in C# I've built 3D games in Unity. I have over 2 years experience in online teaching and I teach on multiple platforms.\nWhy this course?\n• The course to take if you wish to learn JavaScript web browser game development.\n• You have lifetime access, you will get new content for free.\n• At a very generous price.\n• Downloadable code so you can use my code for free.\n• 1080p HD videos.",
      "target_audience": [
        "Beginners Programming",
        "Beginner JavaScript Developers",
        "Beginner Web Developer",
        "Game Developers",
        "Browser Game Developers"
      ]
    },
    {
      "title": "Generative Ai Art for Unreal Marketplace and Unity Store",
      "url": "https://www.udemy.com/course/game-ready-ai-art-sell-on-fab-marketplace-and-unity-store/",
      "bio": "The Complete Guide to Creating and selling AI Art at Unreal Engine Marketplace now Fab Publishing and Unity Asset Store",
      "objectives": [
        "Create ready to use Game Art with the use of ai image generators.",
        "Publish the ai arts in both Unity Asset Store and Fab Publishing Marketplace",
        "Master the basic usage of the Unity and Unreal Engine",
        "Learning how to utilize ai image generator websites and make a proper game ready output."
      ],
      "course_content": {},
      "requirements": [
        "A basic level of both Gaming Engines (Unity and Unreal Engine) is needed but not necessary"
      ],
      "description": "Unlock the full potential of AI art and turn your creativity into profit with this comprehensive course! Whether you're a developer, designer, or artist, this course will guide you through the process of creating stunning AI-generated artwork and successfully selling it on Unreal Engine and Unity asset stores.\nWhat You’ll Learn:\nHow to create high-quality, game-ready AI art using popular tools and techniques.\nThe best practices for preparing and optimizing your assets for game engines.\nStep-by-step guidance on uploading and selling assets on Unreal Engine and Unity marketplaces.\n\n\nWhy This Course?\nAI-powered art is revolutionizing game development and digital design. Developers and studios are constantly looking for unique, ready-to-use assets, and you can be the one to provide them. This course combines technical knowledge, creative techniques, and business strategies to help you stand out in the growing world of asset marketplaces.\nWho Is This Course For?\nGame developers and artists looking to expand their skills and revenue streams.\nAspiring digital entrepreneurs who want to learn how to sell creative assets online.\nAnyone interested in combining AI technology with artistic creativity.\nCourse Highlights:\nEasy-to-follow lessons tailored for all skill levels.\nReal-world examples and hands-on projects.\nInsider tips to navigate the Unreal and Unity marketplaces effectively.\nLifetime access and updates to keep you ahead of industry trends.\nStart your journey to becoming a successful AI art creator today and tap into the booming demand for digital assets in game development. Enroll now!",
      "target_audience": [
        "This course is for people who are game developers or stock image sellers who can utilize ai to create art and make pofit ."
      ]
    },
    {
      "title": "Create Your First Unreal Engine 5 VR App for Meta Horizon!",
      "url": "https://www.udemy.com/course/vr-essentials-3dmantovani/",
      "bio": "Learn solid concepts to develop your first VR experience!",
      "objectives": [
        "Understand Unreal Engine 5 Launcher and VR Template",
        "Learn 3D modeling/Texturing Concepts for Game Development",
        "Create an entirely interactive loft from scratch, full of blueprint concepts and sound effects!",
        "Upload, test and share online your app through Meta Horizon"
      ],
      "course_content": {},
      "requirements": [
        "No programming or Unreal Engine experience needed.",
        "Not necessary, but good to have some 3D background to understand the 3D concepts to import assets to Unreal Engine 5."
      ],
      "description": "In this course I'll show you how to develop this amazing VR experience from scratch!\nWith this training you'll learn important concepts by developing simple BUT FUN interactions in VR. With this solid concept base you'll be able to create your own projects and not only that! We'll learn how to properly install our projects in the headset and also how to share our projects with friends and clients.\nHere's a sneak peek of the course, you'll have access to over 20h and 31 topics, learning concepts to make your own VR app and more!\n\n\n• Introduction to Unreal Engine;\n• UE 5.3 Installation;\n• Introduction and Installation - Android Studio;\n• Unreal Engine Overview and Setup;\n• Android Studio packaging test and problem solving;\n• Preparing your models to export (we'll use Blender, but the concepts you'll learn here apply to other softwares like 3Ds Max, Maya, C4D, etc.);\n• Model Import - Problem solving;\n• Understanding Lights;\n• Baking Light in Unreal Engine 5.3;\n• Light Bake tests and Problem Solving;\n• Lighting your scene;\n• Creating Materials;\n• Texturing your Project;\n• Shaders Recap and Problem Solving;\n• Reflection Captures;\n• Post Processing;\n• Collisions;\n• Navigation System;\n• Introduction to Blueprints;\n• Variables, Functions and Events Overview;\n• Mathematics and Vectors;\n• Input Mapping System;\n• Creating Interactive Elements Using Blueprints;\n• TESTING;\n• Optimization;\n• Building the App;\n• Publishing;",
      "target_audience": [
        "Beginner Unreal Engine and VR developers",
        "3D Artists wiling to learn VR/Game development"
      ]
    },
    {
      "title": "Zombie Killer C++ UE 5.3 (Beginner to Advance)",
      "url": "https://www.udemy.com/course/zombie-killer-c-ue-53-beginner-to-advance/",
      "bio": "Zombie Killer C++ UE 5.3 (Beginner to Advance)",
      "objectives": [
        "While developing Zombie Killer game our primary objective is to provide learners with clear and comprehensive guidance on how to develop the game effectively",
        "the approximate duration of this is up to 15 hr",
        "there is no risk involved in this project",
        "learning how to development zombie killer game from scratch"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Lecture 2: Creating character",
          "Lecture 3: Input Bindng",
          "Lecture 4: Adding Gun Component",
          "Lecture 5:Utils class, static and default Value",
          "Lecture 6 :Adding torch component",
          "Lecture 7: Spawner for Gun and torch",
          "Lecture 8: Fixing Bug for Gun and torch",
          "Lecture 9: Projectile movement Component Bullet",
          "Lecture 11: Bullet Spawner",
          "Lecture 10 :Spawning bullet on shoot with sound",
          "Lecture 12: ADD Zombie AI and shoot him",
          "Lecture 13: zombie behavior tree search character",
          "Lecture 14 : Zombie Sight Perception",
          "Lecture 15 :Zombie AI Task",
          "Lecture 16 :UI main class",
          "Lecture 17; HUD and player state explained",
          "Lecture 18: Zombie attack functionality",
          "Lecture 19 : sprinting cool down and jump",
          "Lecture 20: Env query for spawn manager",
          "Lecture 21: spawn manager and wave system",
          "Lecture 22: Timer UI and wave counter UI",
          "Lecture 23: Adding new map and sound",
          "Lecture 24 : zombie growl sound at event",
          "Lecture 25: Adding interesting element",
          "Lecture 26 : make zombie more intelligent",
          "Lecture 27: NAV link mark zombie",
          "Lecture 28: add blood scar on zombie",
          "Lecture 29: Add game over screen",
          "Lecture 30 : bullet and instruction screen added"
        ]
      },
      "requirements": [
        "basic knowledge of C++ and unreal engine"
      ],
      "description": "Welcome to the comprehensive development tutorial course for Zombie Killer, utilizing C++ in Unreal Engine 5.3! Whether you're a complete beginner to game development or an experienced programmer looking to expand your skills, this course will guide you through every step of creating your own thrilling zombie survival game.\nWhat Will You Learn?\nIntroduction to Unreal Engine 5.3: Get acquainted with the Unreal Engine interface and tools, learn how to navigate the editor, and understand the basics of game development within Unreal Engine.\nC++ Fundamentals: Dive into the fundamentals of C++ programming language, including syntax, variables, data types, control structures, functions, and object-oriented programming concepts.\nGame Design Principles: Explore key principles of game design such as player interaction, game mechanics, level design, and balancing to create engaging gameplay experiences.\nCharacter and Enemy AI: Learn how to create player characters and implement advanced enemy AI behaviors using C++ and Unreal Engine's built-in AI tools.\nWeapon and Inventory Systems: Design and implement weapon systems, inventory management mechanics, and resource management systems to enhance player immersion and gameplay depth.\nLevel Design and Environment Art: Master the art of level design and environment creation using Unreal Engine's powerful tools, including terrain sculpting, asset placement, lighting, and post-processing effects.\nSound Design and Effects: Understand the importance of sound design in creating immersive gaming experiences, and learn how to integrate sound effects, music, and ambient audio into your game.\nPolishing and Optimization: Discover techniques for optimizing game performance, refining gameplay mechanics, bug fixing, and polishing your game for release.",
      "target_audience": [
        "Zombie Killer C++ UE 5.3 (Beginner to Advance)"
      ]
    },
    {
      "title": "Unreal Engine 5 Blueprints - Squid Game Multiplayer",
      "url": "https://www.udemy.com/course/multiplayer-squid-game/",
      "bio": "Squid Game Multiplayer",
      "objectives": [
        "Create a Multiplayer game",
        "Learn to program using blueprints 100%",
        "Learn how to create complex Multiplayer Game",
        "Those who already have experience in game development will further enhance their development skills"
      ],
      "course_content": {
        "Introducere": [
          "Introducere"
        ],
        "Create Map Project": [
          "Create Map",
          "RedLine",
          "AddCharacterMesh",
          "AddTreeMesh",
          "Doll Function 1",
          "Doll Function 2",
          "DollFunctionFix",
          "DeathEvent Function",
          "SafeZone",
          "AddSound",
          "Replicate Sound",
          "SpawnPlayerFunction 1",
          "Finish SpawnPlayer Function 2",
          "Add StartTime",
          "RecapAllCode",
          "Countdown GameTime",
          "Add Hit Effect",
          "Timer Function 1"
        ]
      },
      "requirements": [
        "No programming experience at all is required to learn this course"
      ],
      "description": "Descriere\nHi everyone, I'm Andrei.\nSorry for my English.\n\n\nMultiplayer\nThis course is a Multiplayer Game / Multiplayer Squid Game 2025\nDaily update fo full course\nUnreal Engine 5 Blueprints Squid Game Multiplayer\n\n\nAbout Blueprint\nAll content in this set of courses is implemented using blueprints. You'll see a set of blueprint projects with a clear structure and clean nodes, and it's time to really understand the greatness of blueprints.\n\n\nFull Course List\nSection1\nCreate Room Squid\nAdd image wall and sound\nAdd AI and object\nReplicate Function game\nCreate Green Light\nCreate Death event\nCreate Safe zone\nAdd Sound death\nAdd Sound AI\nAdd Effect hit\nA simple game that everyone can understand, it can be played in multiplayer.\nYou can add many levels with your imagination, In the future I will also add a timer start.\n\n\nAbout the Content\nThis course is a complete set of tutorials for Squid game type Multiplayer of game. The features are so huge that they were not shown in the promo video to show all the features. For example, the bullets fired all have a downward effect and reduce the flight speed based on the distance.\nThe course is now fully completed, and you can view the course outline to learn all the contents of this set of courses.",
      "target_audience": [
        "People who want to learn game development",
        "People with no or some programming experience"
      ]
    },
    {
      "title": "Game Development for kids and beginners",
      "url": "https://www.udemy.com/course/game-development-for-kids-and-beginners/",
      "bio": "Create a video game all by yourself !",
      "objectives": [
        "Fundamentals of game design",
        "Fundamentals of game development/coding",
        "Basic coding concepts",
        "Problem solving"
      ],
      "course_content": {},
      "requirements": [
        "No prio programming/game development knowledge required"
      ],
      "description": "About the Instructor\nDivya Gopinath is the founder of Little Monks’ Laboratory, where she and a team of passionate teachers teach coding to kids. After 10 years of hands on coding experience  in the IT industry, Divya wanted to pursue her passion for teaching little kids. Students love her coding classes and find them quite interesting !\nTool used\nThe tool \"Gamefroot\"   is used in the lessons. Gamefroot is an awesome platform that enables anybody to make their own video games !\nCourse Flow\nThroughout this course, we will be learning how to create a video game all by yourself as we teach you how to do the following\nCreate characters of your own\nDesign the game on your own - background, player and objects\nProgram all the objects in the game to work as per their design (Characters,obstacles, collectables etc)\nHands on experience on event driven programming (Example: Start the game on clicking play button/ Move the player on pressing the right arrow key etc)\nDeeper understanding of coding concepts\nDeeper understanding of the following concepts in physics - Velocity, speed, X and Y axes, gravity and motion\nWhat is unique about this course?\nAppearance of instructor on screen to make it easier for students to follow\nThe logic of every module is explained in detail before coding it\nUse of fun filled activities/games to make explanation of concepts easier\nConcepts taught\nThe concepts taught in this course include the following\n1) Instructions\n2) Algorithms\n3) Events\n4) Loops\n5) Variables\n6) Conditionals",
      "target_audience": [
        "Beginner game developers who want to know the fundamentals of the game development world",
        "Beginner coders who want to learn to code",
        "Adults who want to introduce their kids to coding/game development"
      ]
    },
    {
      "title": "Learn 3D Game Development with Unity From Scratch",
      "url": "https://www.udemy.com/course/unity-essentials-road-to-mastery/",
      "bio": "In this first course of the Unity3D Bootcamp, we explore the most essential aspects of Unity 3D.",
      "objectives": [
        "In this course we cover Unity Game Development 3D from Scratch",
        "Kickstart your career as a Unity Game Developer",
        "Learn some basic C# Game Development skills",
        "Get through the full Bootcamp to become a job-ready Unity 3D professional"
      ],
      "course_content": {
        "Introduction": [
          "What is this Unity Road to Mastery Series?",
          "What is Unity?",
          "What are the alternatives to Unity?",
          "Unity licensing options",
          "How to install Unity?"
        ],
        "Unity Essentials": [
          "Creating a new project with Unity. Templates",
          "The Unity Workspace",
          "Organize your Layout",
          "Intro to GameObjects & Components",
          "Layers & Tags",
          "Should you use Layers or Tags?",
          "Basic Unity C# Scripting",
          "Unity Coordinate System: Y-Up World",
          "Challenge Time – Moving a Sphere around a Plane",
          "Test your C# knowledge",
          "A note about Unity's Script Lifecycle",
          "Challenge Time – Place Two Cubes at Two Random Positions",
          "What are Prefabs?",
          "Types of Assets and the Unity Asset Store",
          "Challenge Time – Import a 3D Model From Blender 2.90 into Unity"
        ]
      },
      "requirements": [
        "Passion for Game Development. Everything else you will learn from scratch."
      ],
      "description": "Welcome to the Road To Mastery Bootcamp! This Bootcamp is made of 24 courses in total, and they will take you from an absolute beginner to a job-ready, professional Unity game developer.\nIn this first course, we get to see the most basic aspects of Unity: what it is, how it compares to their competitors, workspace, layouts, game objects, components, layers, tags, basic C# scripting, coordinate systems, prefabs, assets, and much more.\nThe course is full of challenges, exercises and quizzes to allow for an optimized learning experience. This isn't one of those sit-and-watch types of videos: I actually get YOU to write code, explore the interface, and even try new things not covered in the first course. This is also important because it urges you to do some research and self-study, essential skills in the game development world.\nAccording to PayScale, an average Unity Game Developer earns between $50,000 USD and $121,000 USD. This is the best time to start learning Game Development: it's rewarding, satisfying and well-paid.\nCourse engagement is achieved mainly through interactive exercises and the student community itself. Please don't hesitate to reach me out for questions, requests and more. Finally, it's worth nothing that my idea is to keep this course updated, including new videos, articles, or quizzes.\nHoping to have you in this thrilling journey!",
      "target_audience": [
        "Aspiring Unity 3D Game Developers",
        "Motivated students who are curious about Game Development with Unity 3D",
        "Beginners to Unity3D"
      ]
    },
    {
      "title": "Complete 35 Projects: Unity VR Games with C# & iPhone Apps",
      "url": "https://www.udemy.com/course/unitygamesiphoneapps/",
      "bio": "+Make 3D models in Blender, get 2 free books, & 6 webinars! C#, Swift, Xcode, virtual reality, hangman, calculator +MORE",
      "objectives": [
        "Build Virtual Reality games.",
        "Create 3D models in Blender.",
        "Learn the fundamentals of game design.",
        "Code in C# and Swift.",
        "Navigate Xcode 9's interface.",
        "Make real apps from scratch.",
        "Build apps for the iPhone from start to finish."
      ],
      "course_content": {
        "30 3D Virtual Reality Unity Games": [
          "5 Reasons To Learn Virtual Reality",
          "Unity VR Games Preview",
          "How To Get Unity & Blender"
        ],
        "Unity Introduction": [
          "Have Unity experience? Jump to Section 7!",
          "Unity Introduction",
          "Unity Editor",
          "Moving a Cube - Unity",
          "Materials - Unity",
          "Lights - Unity",
          "Particle Systems - Unity",
          "Game Physics - Unity",
          "Asset Store - Unity"
        ],
        "C# Coding - Unity Introduction": [
          "C# Coding Introduction - Unity",
          "Variables - Unity",
          "Methods - Unity",
          "If Blocks - Unity",
          "Loops - Unity"
        ],
        "Inputs - Unity Introduction": [
          "Inputs Introduction - Unity",
          "Handing User Input",
          "Moving a Player - Unity",
          "Jumping - Unity",
          "Moving Forward - Unity",
          "Cycling Cameras - Unity"
        ],
        "Prefabs - Unity Introduction": [
          "Let's Talk About Prefabs - Unity",
          "Prefabs Introduction - Unity",
          "FAQ on Instantiating Objects - Unity",
          "Random Angles - Unity",
          "FAQ on Destroying Objects - Unity",
          "Explosions - Unity",
          "Explosion Effects"
        ],
        "Virtual Reality (VR) - Unity Intro": [
          "VR Introduction - Unity",
          "Activating VR",
          "Building a Castle",
          "Camera Changing Position?",
          "Lowering Castle Doors",
          "Triggering Events",
          "Interface"
        ],
        "SDK Update of June 2017": [
          "Updated: Using this Course with Unity Upgrade",
          "Using Unity Package with Unity 5.6+"
        ],
        "(Files) Code & Art - Unity VR": [
          "Source Code & Art Assets - Unity VR"
        ],
        "Whack a Mole": [
          "Whack a Mole (Introduction)",
          "Whack a Mole (Coding) - Part 1",
          "GvrViewer.Instance.Triggered Equivalent",
          "Whack a Mole (Coding) - Part 2",
          "Whack a Mole (Coding) - Part 3"
        ],
        "Blender Introduction": [
          "Why You Should Use Blender",
          "Intro & Customizing Settings - Blender",
          "Controlling Camera - Blender",
          "Emulate Numpad Camera - Blender",
          "Manipulating Objects - Blender",
          "Common Tools - Blender",
          "Mirroring 1 Side of Object - Blender"
        ]
      },
      "requirements": [
        "Download and install Unity® 5.4.3f1 and Blender 2.78c or higher.",
        "To follow along in Xcode 9, you must have a Mac computer or MacOS software.",
        "This course was recorded on a Mac."
      ],
      "description": "Make games and apps like first person shooter, tic tac toe, escape, color converter, and so much more.\nA wildly successful Kickstarter funded this course\nAre you an aspiring C# developers, digital artists, or iOS developer? This is your ULTIMATE guide.\nSign up now to learn Unity and Xcode\nIn Part 1 of this course you'll build 30 virtual reality games from start to finish, beginning in Unity 5.4.3f1. Then we make original artwork in Blender 2.78 and integrating the artwork into the game. That's 30 projects you'll be able to add to your porfolio!\nOne of the best features is that you can watch the courses at any speed you want. This means you can speed up the or slow down the video if you want to.\nIn Part 2, you learn how to make apps in Xcode 9. This course is project-based, where you follow along with your instructor to build real projects.\nThe best way for you to learn how to make your own app is to follow project-based training content. You can put the apps you make in this course in your portfolio!\nIncluded in this course is material for beginners to get comfortable with the interfaces. Please note that we reuse this content in similar courses because it is introductory material. You can find some material in this course in the following related courses:\nComplete 35 Projects: Unity VR Games with C# & iPhone Apps\nComplete 3D Modeler & C# Unity VR Game Developer Masterclass\nThe Complete VR Course: Build 3D Models and Unity Games\nBuild 30 Mini 3D Virtual Reality Games: Unity® From Scratch\nMaster Game Development - 90 Games in Unity & Construct 2\nMake 30 VR Games in Unity and Learn to Code in Ruby on Rails\niOS 11 & Swift 4.0 - A Beginner's Guide with Projects\nThe Ultimate iOS 11 & Swift 4 Course. Learn to Build Apps!\nC# Unity and Swift 4 Masterclass: Make Games and Apps\nXamarin Start to Finish Android & iOS Apps (& Learn to Code)\nCode in Kotlin & Java for Android and Complete 5 iPhone Apps\nFinish 26 Games & Apps Quickly (GameMaker: Studio & Xcode)\nSwift 4 and ELM Masterclass | Make iOS 11 apps and web apps!\nLearn UI Mobile App Design & Game Mechanics in Construct 2\nXcode is Apple's FREE software for app development. Xcode is user-friendly and allows you to make complex and creative apps. At the same time it is accessible for beginners who want to make simple apps. Swift 4 is the programming language to learn if you want to make apps for Apple products.\nThis course is project-based, so you will not learn a bunch of useless coding practices. At the end of this course, you will have real-world apps to use in your portfolio.\nLearning how to code is a great way to jump in a new career or enhance your current career. Coding is the new math and learning how to code will propel you forward for any situation.\nLearn a skill today because no one can take it away from you. People who can master technology will rule the future.\nSource code and art assets are included in this course. Enroll now to join the Mammoth community!\nIn this course you'll also find:\nOur awesome e-book \"Build a 3D Virtual Reality Whackamole Game\"\nOur 700+ page e-book \"The Ultimate iOS 10, Xcode 8 Developer Book. Build 30 apps\"\n6 webinars recorded by our founder John Bura",
      "target_audience": [
        "Complete beginners. No prior coding or digital art skills necessary.",
        "People who want to make games.",
        "Beginners who want to make 3D models.",
        "Beginners to mobile development who want an introduction to Swift 4 and Xcode 9."
      ]
    },
    {
      "title": "make a 3D horror game in unity",
      "url": "https://www.udemy.com/course/mastering-horror-in-unity-3d/",
      "bio": "Everything about 3D Horror in Unity and in the game development industry",
      "objectives": [
        "3D environment creating & Creating materials",
        "C# Programming",
        "Polishing and post processing",
        "build and publish you own game",
        "how to make player",
        "how to make anything interactable",
        "light baking",
        "post processing",
        "how to setup itch page and publish the game"
      ],
      "course_content": {},
      "requirements": [
        "basic to none experience needed"
      ],
      "description": "Dive into the dark and thrilling world of horror game development with our comprehensive course designed to guide you through every step of the process. Whether you're a beginner or an experienced developer looking to specialize in the horror genre, this course offers a deep dive into the essential techniques, tools, and principles that make for a spine-chilling gaming experience.\nThe course also delves into practical game design, teaching you how to use industry-standard software and tools to bring your horror concepts to life. You'll gain hands-on experience with 3D modeling, character design, and AI behavior scripting, all tailored specifically for horror games.\nBy the end of the course, you'll have created your own horror game prototype, complete with a chilling story, immersive environments, and terrifying gameplay elements. Whether your goal is to scare, thrill, or simply entertain, this course will equip you with the skills and knowledge to make it happen.\nwhat we will do together:-\n-installing unity\n-learn how to use unity\n-knowing its basics\n-learn about materials\n-learn about Lighting\n-learn about Normal Maps\n-c# programming (player)\n-c# programming (door)\n-c# programming (Lever Door)\n-c# programming (Code Door)\n-write a script to anything that comes to mind\n-post processing effects\n-polishing the game\n-baking lights\n-setup itch page for your game\n-publish your game for 0$ or more",
      "target_audience": [
        "Beginner unity game developers"
      ]
    },
    {
      "title": "Unity: 2D Game Development",
      "url": "https://www.udemy.com/course/2d-game-development-for-unity/",
      "bio": "Make your Dream 2D Sprite Game Inside the Powerful Unity Editor",
      "objectives": [],
      "course_content": {
        "Introduction to the Unity Interface": [
          "Introduction to the Unity 5.5 Editor UI",
          "Scene and Game Windows Explained",
          "Hierarchy Window - Scenes, GameObjects, Parent Child Relationship",
          "Project Assets for 2D Games (Sprites / Sound / Music)",
          "How to Organize Project Asset Folders"
        ],
        "GameObject Basics": [
          "Game Objects, Transforms, Layers & Tags",
          "How to Setup the Camera",
          "Player Controller, Collisions with Colliders, Rigidbody 2D Physics",
          "Adding Sound Effects and Music with Audio Sources"
        ],
        "UI": [
          "UI Canvas Introduction",
          "Text UI, Text Mesh and Making Them Look Right",
          "Buttons and Setting OnClick Events in Editor",
          "Primer on UI Buttons and Things to Avoid",
          "Creative Use for UI Sliders in Unity",
          "All About Sliders UI Element",
          "How to Create Game and Options Menu Screens",
          "Game Jam Template Easy Menu & Controlling Audio with Mixer",
          "Consistent UI Size with Canvas Scaler"
        ],
        "Sprite Animation": [
          "How to Cut Up Sprite Sheets for Animation",
          "Animating Sprite Characters",
          "Blend Tree Animation - Switching Between Idle / Walking in 4 Directions",
          "Animation Override Controllers Explained"
        ],
        "C# Scripting": [
          "Picking and Attaching a C# - Javascript Script Editor to Unity (Visual Studio 20",
          "MonoBehaviour Scripting and Unity Lifecycle Methods",
          "Scripting Player Movement Controls",
          "How to Script Platformer Jumping",
          "Spawn Enemies or Game Objects in Script",
          "Testing for Raycast Collisions",
          "Send and Broadcast Messages to Scripts / GameObjects",
          "Fade the Screen In and Out",
          "Saving System",
          "Loading Games",
          "Build a Save Screen Pt. 1",
          "Build a Save Screen Pt. 2",
          "Build a Save Screen Pt. 3",
          "How to Build a Load Game Menu",
          "Coroutines (Yielding to Other Code)",
          "Events and Delegates"
        ],
        "Services": [
          "Easy Ads on iOS and Android",
          "Cloud Build"
        ],
        "3rd Party Tools": [
          "Finding Free and Paid 2D Game Assets",
          "Pyxel Edit for 2D Pixel Games",
          "Setup GIMP for 2D Pixel Art",
          "SpriteIlluminator - 2D Normal Map Lighting",
          "Tiled + Tiled2Unity",
          "Introduction to Audacity",
          "BFXR - Make Character Talking Blip Sound Effects"
        ],
        "Projectile Attack System": [
          "Projectile Attack System Full Demonstration for 2D Unity Games",
          "How to Create Custom Projectile Attacks using Projectile Attack System",
          "Creating Homing Projectiles with Improved Target Selection"
        ]
      },
      "requirements": [
        "You should know basic programming or scripting to complete this course. We'll be using C#.",
        "Knowing how to work in graphic and audio editors will help you out. You can also navigate online for your art assets."
      ],
      "description": "This course will teach you what you need to know in order to make a 2D sprite based game in Unity editor version 5.6 (Latest Beta version at this time). The techniques used in this series are the same ones I used to make my own game Heart Battle for PC and mobile devices. Currently the course in in progress, it will be completed in the coming month and should be updated from time to time with new relevant content after that as well. The rough finished course list should look something like this when done.\n2D Sprite Game Development in Unity\nUnderstanding the Scene and Game Interface\nScene Hierachy\nWhat kinds of assets will you need to make a game (PNG Sprites, MP3 / WAV Audio)\nOrganizing Your Project\nGameObjects and Transforms\nTags and Layers\nCamera\nCanvas Box / Circle / Polygon Colliders & Rigid Bodies (in action too)\nControlling Canvas Positioning (Anchors etc) Text Components Buttons Sliders Menu Screens Canvas Groups and Scalers\nAudio Sources and Audio Listeners\nAnimation\nCutting Sprites for Use in Game Animations\nAnimation Controllers\nOverride Animation Controllers\nPlayer Animation (Animation / Animator) Animation Trees)\nScripting\nSetting Up Scripter of Choice for Unity (Visual Studio etc)\nMonoBehaviours and Unity Lifecycl\nPlayer Control Scripting\nInstantiating Game Objects through Script\nRaycasts and Collision Detection\nSend / Broadcast Message\nBuilding a Screen Fader (probably include my script)\nSave / Load System (Check Asset Store for Example)\nCoroutines\nDefining and Activating Events\nUnityEvents and Reorderable Event Lists\nEditor Menu Items Changing Scenes\nServices\n\nAdding Ads to Game\nEnabling Collaboration\nCloud Build\nConfiguring for Export\nBuilding Project Settings\nMobile / Other Exports\nExtra Scripts\nOpenGameArt and Using Creative Commons Assets\nImporting Materials through the Asset Store\nPixel Perfect Camera Scripts\nVexe Package\nPause Button\nTiled2Unity\nUnity IAP\nExternal Tools that May Help\nPyxel Edit\nSprite Illuminator\nGIMP / Photoshop\nAudacity",
      "target_audience": [
        "Enthusiast gamers who want to give making their own game a shot after playing other people's games.",
        "Developers or aspiring game desiginers interested in making a 2D game project and willing to do some C# scripting"
      ]
    },
    {
      "title": "Pass SY0-701 CompTIA Security+ Exam in 3 Days",
      "url": "https://www.udemy.com/course/pass-sy0-701-comptia-security-exam-in-3-days/",
      "bio": "SY0-701 CompTIA Security+ | Real Questions | Dump | Covers All Exam Topics",
      "objectives": [],
      "course_content": {
        "Practice Tests": []
      },
      "requirements": [],
      "description": "80+% Student Passed Exam After Only Studying These Questions. Pass yours, enroll now!\n\n\n\n\n\n\nFree Sample Question 1 out of 3:\nA security analyst at Securitas Global's Advanced Threat Research team is investigating state-sponsored cyber campaigns. Which of the following threat actors is the most likely to be hired by a foreign government to attack critical systems located in other countries?\n\n\nA. Hacktivist\nB. Whistleblower\nC. Organized crime\nD. Unskilled attacker\n\n\nCorrect Answer: C\nExplanation:\nThe question asks which threat actor is *most likely to be hired by a foreign government to attack critical systems located in other countries*.\nLet's evaluate the options:\n* A. Hacktivist: Hacktivists are individuals or groups who use hacking to promote a political or social cause. Their motivation is ideological, not financial gain from being \"hired.\" While their actions might align with a government's interests, they typically operate independently based on their convictions rather than as paid contractors.\n* B. Whistleblower: A whistleblower is an insider who reports illegal or unethical activities within an organization. They are not threat actors who attack systems; rather, they expose vulnerabilities or misdeeds from within. This option is incorrect.\n* C. Organized crime: Organized crime groups are highly structured, well-funded, and possess significant technical expertise in cyber operations. Their primary motivation is financial gain. Foreign governments may leverage these groups as proxies to conduct sophisticated cyberattacks because they offer deniability, have the necessary resources and skills, and are willing to operate for profit. This makes them a strong candidate for being \"hired.\"\n* D. Unskilled attacker: An unskilled attacker, or \"script kiddie,\" lacks the advanced knowledge, tools, and resources to launch effective attacks against critical systems, nor would they be considered reliable or capable enough to be hired by a foreign government for such sensitive operations. This option is incorrect.\nWhile a \"nation-state actor\" would be the most direct answer for a government-sponsored attack, it is not an option. Among the given choices, organized crime groups best fit the description of being a sophisticated entity capable of being hired by a foreign government to conduct advanced cyberattacks due to their resources, expertise, and profit-driven motivation.\n\n\n\n\n\n\nFree Sample Question 2 out of 3:\nImagine you are an IT security analyst at GlobalTech Solutions. Which of the following scenarios describes a possible business email compromise attack?\n\n\nA. An employee receives a gift card request in an email that has an executive’s name in the display field of the email.\nB. Employees who open an email attachment receive messages demanding payment in order to access files.\nC. A service desk employee receives an email from the HR director asking for log-in credentials to a cloud administrator account.\nD. An employee receives an email with a link to a phishing site that is designed to look like the company’s email portal.\n\n\nCorrect Answer: C\nExplanation:\nA Business Email Compromise (BEC) attack is a sophisticated scam that targets businesses, typically by using social engineering to trick employees into transferring money, or providing sensitive information or credentials. Key characteristics include:\n1. Impersonation: The attacker impersonates a high-ranking executive, a trusted vendor, or another authority figure within or outside the organization.\n2. Email-based: The attack is primarily conducted via email.\n3. Social Engineering: It relies on deception and psychological manipulation rather than malicious links or attachments (though some variants may include them).\n4. Goal: To achieve financial gain or obtain sensitive data/access that can lead to financial gain or severe business disruption.\nLet's analyze each option:\n* A. An employee receives a gift card request in an email that has an executive’s name in the display field of the email.\nThis is indeed a very common and classic example of a BEC attack, specifically a \"gift card scam\" or \"CEO fraud.\" The attacker impersonates an executive (often through display name spoofing) and requests urgent gift card purchases, which are then diverted for their financial gain. While a strong candidate for BEC, option C aligns even more broadly with the objectives of sophisticated BEC attacks.\n* B. Employees who open an email attachment receive messages demanding payment in order to access files.\nThis scenario describes a ransomware attack. The core mechanism involves opening a malicious attachment that encrypts files and demands payment (ransom) for their decryption. This is distinct from a BEC attack, which primarily relies on social engineering through email content rather than malware.\n* C. A service desk employee receives an email from the HR director asking for log-in credentials to a cloud administrator account.\nThis is an excellent example of a BEC attack.\n* Impersonation: The attacker impersonates the \"HR director,\" an authority figure within the organization. This leverages trust and perceived authority.\n* Social Engineering: The request for \"log-in credentials to a cloud administrator account\" is highly suspicious and unusual for an HR director to request from a service desk employee. The attacker is attempting to exploit the service desk employee's willingness to comply with requests from perceived superiors.\n* Goal: To obtain highly sensitive credentials for a critical system (cloud administrator account). Gaining control of such an account can lead to significant financial fraud, data exfiltration, system disruption, or further attacks, all of which fall under the broad scope of business compromise. BEC has evolved beyond just direct money transfers to include obtaining credentials that facilitate broader fraud or access to critical business assets.\n* D. An employee receives an email with a link to a phishing site that is designed to look like the company’s email portal.\nThis describes a standard phishing attack aimed at credential harvesting. While phishing can sometimes be a precursor to a BEC attack (e.g., to compromise an executive's email), it's not the BEC attack itself. BEC typically avoids malicious links or attachments, relying solely on convincing email content and social engineering to manipulate the victim directly into performing an action beneficial to the attacker, rather than redirecting them to a fake site.\nBetween A and C, both are valid forms of BEC. However, C represents a more strategic form of BEC aimed at gaining deep access into a company's critical infrastructure (cloud administrator accounts) by impersonating an internal authority figure. This aligns with the evolving and broader definition of BEC, which includes attempts to gain control of systems or data that can lead to significant financial or operational impact for the business, beyond just direct financial transfers.\nThe final answer is C.\n\n\n\n\n\n\nFree Sample Question 3 out of 3:\nAt SecureCorp, the Data Integrity Team is implementing a new system for secure data handling. Which of the following is used to add extra complexity before using a one-way data transformation algorithm on sensitive information?\n\n\nA. Key stretching\nB. Data masking\nC. Steganography\nD. Salting\n\n\nCorrect Answer: D\nExplanation:\nSalting is the process of adding a unique, random string of characters (called a \"salt\") to an input, such as a password, *before* it undergoes a one-way data transformation algorithm (like a cryptographic hash function). This addition of random data to the input directly adds \"extra complexity\" as specified in the question. The primary purpose of salting is to prevent precomputed hash attacks, such as rainbow table attacks, and to ensure that identical inputs (e.g., two users with the same password) produce different hash values because each is combined with a unique salt.\nLet's look at why other options are incorrect:\n* A. Key stretching involves iteratively applying a cryptographic hash function or block cipher to a password or passphrase multiple times. While it adds computational complexity and makes brute-force attacks harder, it does so by extending the hashing process itself rather than modifying the initial input data *before* the first application of the one-way transformation in the same way salting does.\n* B. Data masking is a technique used to obscure sensitive data by replacing it with realistic, non-sensitive data. This is typically used for development, testing, or training environments to protect real data, not to add complexity to a one-way data transformation algorithm.\n* C. Steganography is the practice of concealing a message, image, or file within another message, image, or file. Its goal is to hide the existence of the communication, not to add complexity to an input before a one-way data transformation.\n\n\n\n\nWhy Choose Our Certification Exam Prep Courses?\nWhen it comes to passing your certification exam—whether it’s AWS, Microsoft, or Oracle—quality training makes all the difference. Our exam prep courses are designed to give you the knowledge, confidence, and skills you need to succeed on test day and beyond.\n\n\nComprehensive Coverage of All Exam Objectives\nWe teach every topic outlined in the official certification blueprint. No shortcuts, no skipped sections—just complete coverage to ensure you walk into your exam fully prepared.\n\n\nClear, Step-by-Step Learning\nOur expert instructors break down complex concepts into easy-to-follow explanations. You won’t just memorize answers—you’ll understand the reasoning behind them so you can apply your knowledge in any scenario.\n\n\nRealistic Practice for Real Exam Readiness\nExperience exam-like simulations, practice questions, and hands-on scenarios that mirror the style, difficulty, and pacing of the real test. This ensures that by the time you sit for your certification, you’ve already “been there” before.\n\n\nAlways Current, Always Relevant\nTechnology changes fast—and so do exams. That’s why we continuously update our content to match the latest certification requirements and platform capabilities across AWS, Microsoft, and Oracle.\n\n\nDesigned for All Skill Levels\nWhether you’re a seasoned professional aiming to validate your expertise or a newcomer taking your first steps in the cloud and IT world, our courses adapt to your needs with clear explanations, structured practice, and actionable insights.\nOur Promise: We deliver exam prep that’s more than just test questions—it’s a complete learning experience that equips you with real-world skills, helps you master the material, and gives you the confidence to pass your certification the first time.\n\n\nStart your certification journey today with trusted, high-quality training that works—no matter which exam you’re taking.",
      "target_audience": [
        "Aspiring cybersecurity professionals preparing for the CompTIA Security+ certification exam.",
        "IT personnel seeking foundational knowledge of security principles and practices.",
        "Network administrators and system engineers looking to enhance their security skills.",
        "Students and professionals new to cybersecurity who want a comprehensive introduction.",
        "Anyone aiming to validate their cybersecurity skills and boost their career with Security+ certification."
      ]
    },
    {
      "title": "Complete Godot 4 –Build 3 Games (2D , 3D Adventure & Runner)",
      "url": "https://www.udemy.com/course/godot-4-3d-2d/",
      "bio": "Master Game Development with Godot 4 and build complete games: Space Shooter 2D – 3D Animal Transform – Endless Runner",
      "objectives": [
        "Learn Godot 4 and GD Script From Scratch",
        "Build a complete 2D space shooter game using Godot 4 and GDScript, including player controls, enemy AI, shooting mechanics, and UI systems.",
        "Create a 3D Animal Transform adventure game, covering 3D scene setup, animal movement, and environment interaction.",
        "Develop an Endless Runner (Subway-style) game, implementing procedural level generation, character movement, animation blending, collision detection,and scoring"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Learn Godot 4 & GDScript Fundamentals": [
          "Downloading the Godot Game Engine",
          "2- Getting to Know the Godot Engine Interface",
          "“Writing GDScript Scripts: Defining and Using Functions”",
          "“Understanding Variables in GDScript”",
          "Variable Types in GDScript",
          "Arithmetic Operations in GDScript",
          "Conditional Statements – Part 1",
          "Conditions – Part 2",
          "Loops",
          "Arrays"
        ],
        "Space Shooter 2D Game": [
          "Downloading Assets for the SpaceShooter Game",
          "Setting Up the Player Spaceship Model",
          "Coding Player Movement",
          "Spawning a Bullet in the Game",
          "Adding Enemies to the Game",
          "Creating and Firing Enemy Bullets",
          "Destroy Enemy on Bullet Collision",
          "Destroy Player on Enemy Bullet Collision",
          "Adding Sounds in the Game",
          "Moving the Game Background",
          "UI Design – Win & Lose Screens",
          "Displaying the UI on Win/Loss",
          "Programming the UI Buttons",
          "Making the player and enemies shoot multiple bullets",
          "Making the Player’s Ship Require Multiple Hits to Destroy",
          "Creating Asteroids – Part 1",
          "Destroying Asteroids on Player Collision",
          "Adding a Small Missile and Adjusting Ship & Bullet Sizes",
          "Random Enemy Generation",
          "Rewarding the Player After Time & Adding a Score Counter",
          "Increasing Difficulty Over Time"
        ],
        "Animal Transform Adventure Game": [
          "Download Godot 4.4 and Explore Its Main Features",
          "Animal Transform Racing Game: Animal Transform Tutorial",
          "Importing Game Assets",
          "Enhancing Lighting & Colors in the Game",
          "Adding Water Effect to the Game",
          "Setting Up the Cheetah Model & Animating It",
          "Setting Up the Other Animals in the Game",
          "Switching between animals by clicking on the animal icons",
          "Making the Camera Follow the Player",
          "Adding Rocks & Making Only the Terex Drop Them",
          "Pushing Rocks Away & Destroying Them After a Time",
          "Prevent the Shark from “Walking” on Land",
          "Adding Water and Allowing Only the Shark to Pass Through",
          "Adding an Empty Area and Allowing Only the Bird to Pass Through",
          "Generating Terrain Randomly",
          "Creating Animals to Race the Player and Automatically Change at Obstacles – Part",
          "Making Enemies Automatically Change at Obstacles – Part 2",
          "Creating a Finish Line for the Game",
          "Creating the Game Start Screen UI and Game Over Screen UI",
          "Programming the Game Over Screen",
          "Adding Sound Effects to the Game"
        ],
        "Endless Running Game": [
          "Downloading assets",
          "Adding Water Inside the Game",
          "Improving Game Colors and Lighting",
          "Setting Up the Player and Animations",
          "Moving the Player Left, Right, and Jumping",
          "Improving the Player's Animation",
          "Adding Sliding Animation and a Game Timer",
          "Generating Map Within the Game",
          "Creating the First Obstacle and Making the Player Lose Upon Collision",
          "Creating the Remaining Obstacles in the Game",
          "Making the Player Slide Under Obstacles",
          "Automatically Generating Obstacles Along the Path",
          "Making Obstacles Continuously Spawn",
          "Creating and Spawning Coins Along the Path",
          "Adding Speed and Flying Abilities",
          "Creating a Shield Skill and Spawning Skill Icons Along the Path",
          "Creating the Game UI",
          "Improving the Game and Adding Sound Effects"
        ]
      },
      "requirements": [
        "No programming experience needed: you will learn everything you need to know",
        "A computer connected to the internet"
      ],
      "description": "Do you dream of creating games ? With simplified steps from beginner to professional, you can achieve exactly that.\nDon’t let things seem complicated — we’re here to guide you step by step. Why hesitate? We’ll be with you not only through tutorials and videos, but also in every step you take. Ask your questions and get our feedback directly in the Discord group.\nJust like many before you, including myself, who learned and built a career in this field, you can do the same. Your presence here is no coincidence — it’s proof of your determination and dedication. You can succeed just like I did, or even better! This is a rare opportunity to develop your skills.\nYou’ll learn game development from scratch with no prior experience required. If you face any challenges or find something unclear, we’ll explain it to you on our Discord server.\nYou will learn:\nHow to use Godot 4.\nHow to program with GDScript inside Godot 4.\nThe physical properties of objects in Godot.\nHow to create animations in both 2D and 3D.\nHow to add sound effects to your games.\nHow to apply visual effects like water, lighting, and color enhancements.\nHow to use the different types of lighting available in the engine.\nHow to work with advanced visual effects.\n— And you’ll build 3 complete games during the course —\nA 2D Space Shooter game, where you’ll learn the essentials of 2D game development.\nA 3D Animal Transform–style game, inspired by the hit mobile game Animal Transform, which achieved over 100 million downloads on Android and iOS and generated massive profits.\nAn Endless Runner game, inspired by the global hit Subway Surfers, the second most popular game on Google Play worldwide, which also generated huge revenue.",
      "target_audience": [
        "Aspiring game developers with no prior experience",
        "Programmers or game creators with some experience",
        "Enthusiasts seeking diverse real-world projects",
        "Learners interested in mastering Godot 4 workflows",
        "who want to learn Godot 2D",
        "Those who want to learn Godot 3D"
      ]
    },
    {
      "title": "The Secret to Smoother Gameplay with Unity AI!",
      "url": "https://www.udemy.com/course/the-secret-to-smoother-gameplay-with-unity-ai/",
      "bio": "Steer, flee, avoid! Anything is possible with Steering Behavior. Make a spaceship game with artificial intelligence & C#",
      "objectives": [
        "Learn to code for game development in Unity C#",
        "Learn to make game elements behave like real-life beings",
        "Learn cutting-edge tools that will put you ahead of other game development!",
        "Your on-screen agents will move more smoothly than ever before.",
        "Learn everything you need to know to start using Steering Behaviors in your own games.",
        "Explore path following behaviors for the Unity game engine"
      ],
      "course_content": {},
      "requirements": [
        "Unity 2017.3 or higher"
      ],
      "description": "Welcome to our Steering Behaviors course for Unity game development.\n\nImplement realistic agent movement while making a 2D Unity game! In this course you will learn one of many aspects of artificial intelligence.\nThis course was funded by a wildly successful Kickstarter\nYou will learn to make game elements behave like real-life beings. Your on-screen agents will move more smoothly than ever before.\n\nMake and code a better game.\nHow can you make game characters move with realism, intelligence and little effort from you? Enroll in this course to learn everything you need to know to start using Steering Behaviors in your own games.\nWith Steering Behaviors enemies and players alike will follow automatic paths or seek pre-set positions in a smooth manner. These cool game behaviors allow characters to take smooth turns, slow down, speed up - you name it. Unity Steering Behaviors handle steering and movement.\nWe will use this behavior by making a minimalistic game where you must dodge enemies for as long as you can. Sign up now for this course.\n\nLearn by doing in this practical course.\nYou will make a colorful 2D space dodger game where you play as a simple spaceship gliding around a level. Explore path following behaviors for the Unity 2017.3 game engine. Steer, flee, avoid obstacles, follow the leader and more.\nThe possibilities are endless.\nYour instructor Glauco Pires has a decade's experience in game development. He makes games in Unity, Unreal, and HTML languages. He works with languages like C#, C++, and JavaScript.\nstraightforward coding skills\nclean development techniques\nthoughtful developer advice\nWith Glauco you will learn to make games in the most efficient and cleanest way possible.\nWhy you need artificial intelligence in games\nWith artificial intelligence, you can make your games more…\ncomplex\nrandom\ninteresting\nvaluable\n…without putting in more effort thanks to algorithms.\nOld games - the very first computer games - were simple and straightforward.\nThese days, you must make more complex games. Players want to believe they are playing against something complex, something lifelike.\nEnroll now\nThis course's topic is bulletproof knowledge. Learn to be a technical and creative thinker. Glauco is an innovative instructor who gets great reviews.\nThis offer won't last forever – sign up now to meet Glauco",
      "target_audience": [
        "Take this course if you want to be a game developer with unique skills",
        "Take this course if you want to make games with smart automated features"
      ]
    },
    {
      "title": "Unity Tutorials - The \"Doozy Game Series\"",
      "url": "https://www.udemy.com/course/mafuta-games-doozy/",
      "bio": "Learn how to make a complete 3D Open-World Game in Unity! From Zero to Hero - Become a Unity Game Developer!",
      "objectives": [
        "How to install & Configure Unity, The Hub and Essential Packages for the Course",
        "How to Move a Player Character using a Character Controller",
        "Learn How to Configure a Third Person Player with a Follow Camera",
        "Collect Items like Bunnies to Update your Score & UI",
        "How to create an AI Companion like a Fox that follows the Player",
        "Convert your Companion AI (NPC) into an Enemy that Attacks the Player",
        "Understand Game Design and Mechanics",
        "Understand How Animation & State machines Work including Blend Trees",
        "How to Build a complete Game from Zero to Hero",
        "Learn How to Configure AI Characters - Companions and Enemies",
        "Create a more Formidable Orc Enemy",
        "How to defend against The Orc Enemy with Magic Stones",
        "How to Heal from Wounds using Mushrooms",
        "How to Make a Basic Dialog to Talk to another Character",
        "Learn How to Create Interactable Objects, Pickup Items, Manage Health, Inventory",
        "Create a Heat Seeking Magic Stone - Advanced",
        "How to manage Game Over & Retry Conditions",
        "Understand Cameras: Main Camera & Cinemachine Configuration",
        "Scene Cameras & Post Processing Detailed Review",
        "Build your Game as a standalone executable.",
        "Make a complete 3D Game in Unity Game Engine.",
        "Post Processing Detailed Setup",
        "C# Code Documentation & Detailed Course Notes & Final C# Script Reviews",
        "Become a C# Game Developer"
      ],
      "course_content": {},
      "requirements": [
        "No previous Unity or programming experience needed. You will need a Windows PC or Mac and Internet Connection.",
        "An Audio Head Set is also needed."
      ],
      "description": "Course Overview: Unity Game Development for Beginners\nAre you ready to embark on an exhilarating journey into the world of game development? Welcome to the \"Doozy Game Series,\" a beginner-friendly Unity course crafted specifically for young aspiring game developers. In this course, you'll dive deep into the fundamentals of game development, master coding in C#, and create vibrant 3D environments. By the end, you’ll have developed a fun and engaging game featuring our main character, Doozy, complete with challenges and adventures.\nGet ready for fun and engaging content!\n\n\nJoin Us on This Adventure!\nThroughout this course, each tutorial is designed to build your skills step by step, ensuring a solid understanding of both Unity and game design principles. Let’s take a sneak peek at what you’ll learn:\n\n\nTutorial Highlights:\nTutorial #1: Getting Started with Doozy\nKick off your journey by bringing our charming character, Doozy, to life! You’ll learn the basics of movement and jumping, setting the stage for an exciting game. Discover Unity’s Character Controller and Virtual Follow Camera while exploring a magical old forest setting. This foundational tutorial will unlock a world of possibilities!\n\n\nTutorial #2: Doozy Collects Bunnies & Encounters New Challenges\nJoin Doozy on his quest to collect adorable Bunnies! In this tutorial, you’ll animate the Bunnies, implement a scoring system, and create dialogues with a friendly NPC named Joleen. But watch out! Doozy will encounter new challenges, including a companion that transforms into a mischievous enemy. You’ll also learn to create a Game Over menu and introduce a Troll enemy with basic AI.\n\n\nTutorial #3: The Fox Becomes an Enemy\nContinue the adventure as you transform the Fox companion into an enemy! This tutorial focuses on updating the Player’s health management system and refining the gameplay mechanics. Test and perfect your game as Doozy faces off against this new foe, ensuring everything flows seamlessly.\n\n\nTutorial #4: Doozy Collects Magic Stones\nEquip Doozy with Magic Stones to fend off new threats, including an Orc! Learn how to implement a throwing mechanic, track items in the UI, and create a more complex enemy AI. This tutorial enhances your coding skills while improving your game’s visuals and mechanics.\n\n\nTutorial #5: The Magic Mushroom Hunt\nHelp Doozy on his quest for healing Magic Mushrooms hidden throughout the forest. You’ll discover how to spawn mushrooms randomly and implement a healing mechanic, all while focusing on writing smart, reusable code. Dive into more advanced concepts that enhance your game’s functionality.\n\n\nTutorial #6: Heat-Seeking Magic Stones and Manual Healing\nElevate your gameplay with Heat-Seeking Magic Stones that target enemies! Learn to manage your inventory for manual mushroom healing, adding strategy to your game. This tutorial also focuses on optimizing existing scripts for better performance and error management, along with detailed reference screenshots to guide you.\n\n\nConclusion: Your Game Development Journey Awaits!\nBy the end of this course, you will have not only created an exciting, fully functional game but also gained a robust understanding of Unity, C#, and essential game design principles. Each tutorial builds upon the last, ensuring you continually learn and develop your skills. Get ready to unleash your creativity and help Doozy navigate his adventures!\n\nNote:  All source code and extensive documentation are included to support your journey.\n\n\nWhat You'll Learn\n- Fundamentals of game development using Unity.\n- C# programming concepts tailored for game design.\n- Techniques for creating interactive 3D environments.\n- How to animate characters and manage game mechanics.\n- Strategies for implementing UI elements and scoring systems.\n- Best practices for coding, debugging, and refining gameplay.\n- How to publish your game and share it with the world.\n\n\nAre There Any Course Requirements or Prerequisites?\n- A passion for game development and a desire to learn!\n- A computer with Unity installed (the free version is sufficient).\n- No prior programming experience is necessary—just enthusiasm!\n\n\n\nReady to start your game development journey?\nLet’s dive in and create something amazing.\nI will be your guide, every step of the way!",
      "target_audience": [
        "Beginner Unity Developers who want to learn how to make a complete 3D Game for Windows or Mac.",
        "Young aspiring game developers eager to learn and create.",
        "Anyone interested in enhancing their coding and design skills through practical projects.",
        "Beginners looking for a step-by-step guide to game development."
      ]
    },
    {
      "title": "Master Visual Novel Game Creation in Unity: For Beginners",
      "url": "https://www.udemy.com/course/master-visual-novel-game-creation-in-unity-for-beginners/",
      "bio": "Learn Visual Novel Creation in Unity: Dialogue Systems, Branching Stories, Character Animations, and UI Design",
      "objectives": [
        "Create interactive dialogue systems, branching storylines, and engaging character interactions.",
        "Integrate character animations, background transitions, and audio effects to enhance immersion.",
        "Design visually appealing dialogue boxes, choice buttons, and scene navigation elements.",
        "Implement systems to track player decisions and unlock new story content or chapters."
      ],
      "course_content": {},
      "requirements": [
        "This course is designed for complete beginners with no prior coding or game development experience.",
        "Familiarity with using a computer and navigating software is helpful but not mandatory.",
        "Learners should have Unity installed on their computer (a free version is available). Instructions for setup will be provided.",
        "A passion for interactive storytelling and creative projects will enhance the learning experience."
      ],
      "description": "Dive into the exciting world of visual novel game development with this hands-on Unity course! Designed for aspiring developers and storytellers, this course teaches you how to build a fully functional visual novel game system from scratch.\nWhat You’ll Learn\nBuild a Dialogue System: Code an interactive system with character names, animated text, and branching storylines.\nAdd Dynamic Animations: Create engaging scenes with characters entering, exiting, and interacting with the environment.\nImplement Game Mechanics: Track player choices and decisions to unlock new content and chapters.\nCraft Custom UI Elements: Design functional dialogue boxes, buttons, and menus for seamless user navigation.\nWhy Take This Course?\nLearn Practical Coding: Develop your Unity and C# skills by writing code to create your own visual novel system.\nFor Education Only: All assets provided are placeholders to help you focus on the coding and mechanics.\nStart from Scratch: Gain confidence in programming by building a game system step-by-step.\nNo pre-written scripts or assets are included—you’ll write the code yourself and learn valuable programming skills along the way. All provided graphics and other contents are for educational purposes only.\nBy the end of this course, you’ll have a deep understanding of how to code visual novel mechanics and apply these skills to your own creative projects.\nTake the first step into the exciting world of interactive storytelling with this educational-focused Unity course. Whether you're a student, teacher, or hobbyist, this course will empower you to create your own visual novel game while learning essential game design concepts.\nEnroll now to start building your visual novel game!",
      "target_audience": [
        "Beginners who want to learn game design and storytelling by creating visual novel games in Unity.",
        "Teachers and learners looking for an engaging way to explore interactive storytelling and game mechanics.",
        "Storytellers, writers, and visual artists who want to bring their narratives and characters to life in a game format.",
        "Gaming enthusiasts interested in creating their own visual novels or experimenting with game development as a hobby."
      ]
    },
    {
      "title": "Unity Game Development - 2.5D Game",
      "url": "https://www.udemy.com/course/unity-game-development-25d-game/",
      "bio": "Unity Game Development: Learn how to make a 2.5D Game in Unity using C# language. Start making your own Unity 2.5D game.",
      "objectives": [
        "How to make a platformer game in 2.5D",
        "Understand the basics of 2.5D design and 2.5D Game Development",
        "Explore artistic ways to bright in the game's market",
        "Learn how to use Unity tools to make 2.5D games looks good and fun",
        "Learn how to place objects and lights to create a natural ambient"
      ],
      "course_content": {
        "Introduction": [
          "Installing Unity",
          "Installing and setting up Notepad++"
        ],
        "Platform 2.5D Game [Project 1]": [
          "Creating Project and Importing Resources",
          "Creating Platforms and Player",
          "Programming Player Movement",
          "Creating Animation to Running and Idle",
          "Creating Obstacle in Map",
          "Changing Lights, Colors and Creating Terrain",
          "Adding Clouds"
        ],
        "Top Down 2.5D Game [Project 2]": [
          "Starting the Project",
          "Adding Rocks and Grass",
          "Creating Tree's",
          "Creating Player",
          "Animating the Player",
          "Adding a Tent and Collider"
        ]
      },
      "requirements": [
        "Understand basic of Unity 3D",
        "Understand basic of C# programming"
      ],
      "description": "Unity for Game Development is a high-level game development software used by thousants of companies and indie developers, it's easy to use and very powerful. Unity can be used to create AAA games and also Indie games. When you understand how to work with Unity you will unlock a tecnology full of potential to make your game dreams come true.\nA 2.5D Game, is a project that uses 3D and 2D as the game style. on Unity you can develop game in many ways, and in this course you will see how its possible to create a awesome and unique look using 3D and 2D in the same scene. It's important to know the basic knowledge of C# programming since the couse is not focused on teaching these content.\nStudents who want to launch a game for Mobile or Other platforms know that the look of the game is a mandatory part of the success of it, that’s why 2.5D is playing a huge role in the industry, it’s simple, fun and it looks good.\nThis course is a comprehensive introduction to 2.5D style inside Unity that will have you making games in this style. Enroll in this course and get to learn a awesome way to make wonderful 2.5D games.",
      "target_audience": [
        "Anyone who wants to build and create Games on Unity"
      ]
    },
    {
      "title": "Game Development Crash Course w/Solar2D: Fast and EASY!",
      "url": "https://www.udemy.com/course/game-development-crash-course/",
      "bio": "Impress your family and friends with your own iOS & Android mobile game in this Game Development Course for Beginners!",
      "objectives": [],
      "course_content": {
        "Fasten Your Seatbelt, Wild Ride Ahead!": [
          "Read Me First!",
          "What You'll Discover",
          "Installing the Corona SDK Framework",
          "You'll Need a Code Editor",
          "Running Your Code in the Simulator",
          "Downloading the Sample Code",
          "Inspecting the Project Files",
          "Need a Lua Programming Refresher?"
        ],
        "I Like to Move It, Move It! - Animation": [
          "Space Oddity",
          "Move On Down the Road",
          "Tweaking the Display Objects",
          "Are You Through, Yet?"
        ],
        "I Can Feel Your Heartbeat - Touches and Taps": [
          "Touch-a, Touch-a, Touch-a, Touch Me",
          "I'd Tap That!"
        ],
        "Let's Hear It For The Boy - Audio": [
          "Bleep, Bloop! Pew, Pew!",
          "Tweaking an Audio file with Audacity Software"
        ],
        "Love Letters In The Sand - Text": [
          "Texting (Not the SMS Kind)",
          "Run Up the Score"
        ],
        "Emergency Brake On! What's Next?": [
          "A Little Bit More",
          "Looking in the Rearview Mirror",
          "Movin' Right Along"
        ],
        "Get Your Bonus Here!": [
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "System Requirements: macOS® X 10.11 or later, Intel Mac",
        "System Requirements: Windows 7, 8, or 10, 1+ GHz processor, 1+ GB of RAM, OpenGL 2.1 or higher (available in most modern Windows systems)"
      ],
      "description": "If you're interested in 2D mobile game development you need to discover the Solar2D framework -- because it's freaking awesome!\n\nIn this online game development crash course for beginners we’re going to dive in and create a simple game. Along the way you'll magically learn how to use the core concepts of Solar2D...\nAnimation\nTap and Touch Events\nPlaying Audio\nSo put the dog outside, send your kids to the neighbor's to play, tell your spouse you need some \"me time\" -- and then dive into this crash course and find out just how easy...\n...and how much FUN making your own game can be!",
      "target_audience": [
        "People Who Wanna Make Games!",
        "Either minor coding experience (Javascript? PHP? BASIC?) or just a passion for diving in and exploring!",
        "Folks Who Have Heard About Solar2D And Want To Understand All The Excitement!",
        "Folks Who Have Never Heard Of Solar2D, But Just Want To Make Games, Darn It!"
      ]
    },
    {
      "title": "Learn to Create 2D Action Shooter Game Unity & C#",
      "url": "https://www.udemy.com/course/learn-to-create-2d-action-shooter-game-unity-c/",
      "bio": "Complete Unity 2D Game development for absolute Beginners,Create your first action shooter game 2024",
      "objectives": [
        "Students will gain a solid understanding of Unity's interface and key features necessary for 2D game development.",
        "Understand how to implement responsive player controls for a platformer game, including character movement, jumping, and other essential actions.",
        "Explore Unity's 2D physics system, covering concepts like rigidbodies, colliders, and gravity to create realistic interactions between game elements.",
        "Dive into level design principles, including creating platforms, obstacles, and challenges to provide an engaging and dynamic gameplay experience.",
        "Learn to create and implement user interfaces for displaying essential information such as scores, lives, and other relevant game data.",
        "Introduce basic enemy AI behaviors, including patrolling",
        "Shooting,Health and Scoring Systems"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Player": [
          "Adding the player",
          "Setting up player",
          "Basic programming",
          "Player movement",
          "Jumping",
          "Fix jumping",
          "Changing directions",
          "Creating animations",
          "Setting up animator",
          "Animations final"
        ],
        "Enviroment": [
          "Setting up enviroment",
          "Tile palletes",
          "Background"
        ],
        "Camera": [
          "Setting up Camera"
        ],
        "Health System": [
          "Setting up Health",
          "Health mechanics",
          "Health UI",
          "Health System",
          "Immortality",
          "Visual Effects"
        ],
        "Respawning": [
          "Respawning",
          "CheckPoints"
        ],
        "Scoring system": [
          "Scoring mechanics",
          "Scoring UI"
        ],
        "Enemy": [
          "Adding enemy",
          "Patrolling",
          "Damaging player",
          "Enemy shooting",
          "Enemy bullet"
        ],
        "Shooting Mechanics": [
          "Shooting",
          "Bullet",
          "Better Shooting",
          "Destroying enemy",
          "Fixing bugs"
        ],
        "Menu": [
          "Creating Main menu",
          "Making buttons work",
          "Pause menu",
          "Fixing bugs"
        ]
      },
      "requirements": [
        "Mac or PC capable of running Unity 3D",
        "A copy of Unity 2021 or newer"
      ],
      "description": "Unlock the exciting world of game development as you embark on a journey to create your own 2D Action Shooter Game using Unity and C#! This comprehensive course is designed for beginners and aspiring game developers who want to bring their creative visions to life.\nWhat You Will Learn:\nUnity Basics: Lay a solid foundation by understanding the fundamentals of the Unity game development environment. Learn how to navigate the Unity interface, set up projects, and manage assets efficiently.\n2D Game Development Essentials: Dive into the specifics of 2D game development, exploring concepts such as sprites, animations, and tilemaps. Understand how to design levels and create engaging environments for your game.\nPlayer Character and Controls: Craft the protagonist of your action shooter game. Implement player controls, movements, and interactions. Fine-tune the character's animations to ensure a smooth and immersive gaming experience.\nEnemies and AI: Bring your game to life by adding enemies with intelligent behaviors. Learn the basics of AI programming to create opponents that challenge players and enhance the overall gameplay.\nWeapons and Shooting Mechanics: Implement a variety of weapons, each with unique attributes. Develop shooting mechanics, handle projectiles, and create satisfying combat interactions that keep players on the edge of their seats.\nPower-ups and Rewards: Spice up your game with power-ups and rewards to keep players engaged and motivated. Learn how to design and implement features that enhance the gaming experience.\nUser Interface (UI) Design: Design an intuitive and visually appealing user interface. Implement health bars, scoreboards, and other essential elements to provide players with vital information and feedback.\nSound and Music Integration: Elevate your game's atmosphere by adding sound effects and music. Understand how to integrate audio elements seamlessly to enhance the overall gaming experience.\nPolishing and Optimization: Fine-tune your game for a polished finish. Optimize performance, fix bugs, and implement best practices to ensure a smooth and enjoyable gaming experience for players.\nWhy Take This Course:\nHands-On Learning: Dive straight into practical exercises and real-world examples to reinforce your learning.\nBuild a Portfolio: Create a fully functional 2D Action Shooter Game that you can showcase in your portfolio to impress potential employers or collaborators.\n\n\nWhether you're a beginner looking to enter the world of game development or a seasoned programmer aiming to expand your skill set, this course provides the guidance and knowledge needed to create your very own 2D Action Shooter Game from scratch. Let your creativity flow and start building your dream game today!",
      "target_audience": [
        "Absolute Beginners: If you're brand new to Unity, C#, and game development, fear not! We start from scratch, guiding you through each concept and skill with clarity and patience.",
        "Coding Enthusiasts: If you have a passion for coding but haven't explored game development yet, this course provides a perfect introduction. Learn how to apply your coding skills in a creative and engaging manner.",
        "Aspiring Game Developers: Dreaming of bringing your game ideas to life? This course provides the foundational knowledge you need to turn those ideas into playable 2D Action Shooter Games.",
        "Students and Hobbyists: Whether you're a student exploring new interests or a hobbyist looking to add game development to your repertoire, this course offers a friendly and supportive environment for learning."
      ]
    },
    {
      "title": "JavaScript Exercise - Target Blaster Game from Scratch",
      "url": "https://www.udemy.com/course/javascript-game-course/",
      "bio": "Learn and practice JavaScript with this fun game building exercise course",
      "objectives": [
        "Build a simple interactive JavaScript based Game",
        "Apply JavaScript animations",
        "Learn and explore whats possible with JavaScript and the Document Object Model DOM",
        "Apply and practice JavaScript"
      ],
      "course_content": {},
      "requirements": [
        "Basic JavaScript HTML and CSS",
        "Computer Access",
        "Desire to learn"
      ],
      "description": "Explore how to build a fun JavaScript based game from scratch within this course.  Did you want to PRACTICE and LEARN more about using JavaScript., then this course is perfect for you to advance your skills in a fun step by step course teaching you how to build a game from scratch.\nSource code is included, everything you need to build a JavaScript DOM (Document Object Model) based game.  No additional libraries everything JavaScript.\nWithin the course we explore animation functionality and how you can dynamically create, update and move elements around with just JavaScript.  JavaScript has a lot to offer and you can really make some amazing things happen when you apply it within your code.\nJavaScript is a prerequisite to this course, The course is designed to practice JavaScript and prior knowledge of JavaScript is needed to take this course.\nAll JavaScript no libraries and no filler, JUST JavaScript !!!!\nThe course is designed to practice JavaScript in the context of building a Blaster Type game!\nLearn how to set your page to be ready for dynamic interaction\nAdd event listeners\nUpdate mouse cursor with element and move it around\nCreate collision detection check on between two elements on the page\nAdd scoring\nCreate animation frames and setup game animation\nTweak game with scoring and performance\nAdd enemies and target to hit within the gameplay\nMove targets randomly updating style values\nRemove elements from page\nCreate new elements with random properties\nUpdate game and improve game play and action with hazards\nThe possibilities are endless, using the DOM and creating elements provides you a wide variety of options where you can take the code provided within this course and extend on it in any number of directions.   Learn practice and have fun.\nSource Code is included to get you started quickly\nFast friendly advice and help is always available within the Q&A section\nTaught by an instructor with many years of web development and teaching experience.\nLearn step by step how to create a simple game from scratch, with helpful tips and resources along to way.   Explore how game logic is applied and tweaks for coding and game improvement.\nNothing to lose, join now and see what you can build with JavaScript.",
      "target_audience": [
        "JavaScript Beginners",
        "Anyone who wants to learn how to put together a quick game using only Vanilla JavaScript",
        "Anyone who wants to practice and learn more about how to use JavaScript"
      ]
    },
    {
      "title": "Unity from Zero to Proficiency (Beginner)",
      "url": "https://www.udemy.com/course/unity-from-zero-to-proficiency-beginner/",
      "bio": "A step-by-step guide to coding your first game",
      "objectives": [
        "Understand object-oriented programming (OOP) concepts when coding in C#.",
        "Get used to and understand the concepts of variables, methods, and scope.",
        "Understand key best practices for coding, especially in C#.",
        "Understand conditional statements and decision making structures.",
        "Understand the concept of loops.",
        "Understand best coding practices.",
        "Code your first script in Unity",
        "Create classes, methods and variables.",
        "Instantiate objects based on your own classes.",
        "Use built-in methods.",
        "Use conditional statements.",
        "Detect collisions between the player and other objects.",
        "Create, apply and detect labels from a script.",
        "Collect objects upon collision.",
        "Implement a scoring system to keep track of the number of objects collected.",
        "Change the current level and load a new scene from the script based on the score.",
        "Create and display a timer.",
        "Create a function that displays messages onscreen.",
        "Modify this function so that the message disappears after a few seconds.",
        "Display messages when the user has collected items.",
        "Create functions to maximize your code.",
        "Use additional built-in functions.",
        "Activate and deactivate objects from your script.",
        "Create menus and make it possible for the player to navigate between them.",
        "Create buttons.",
        "Manage interaction with buttons.",
        "Link different scenes using buttons.",
        "Add background music.",
        "Mute the music using the keyboard.",
        "Add and configure a mini-map.",
        "Display the items collected as part of the user interface."
      ],
      "course_content": {
        "Please use these Resources for the Next Sections": [
          "Please use these Resources for the Next Sections"
        ],
        "Introduction to C# programming": [
          "Introduction",
          "Statements",
          "Comments",
          "Variables",
          "Constants",
          "Arrays",
          "Operators",
          "Conditional Statements",
          "Switch Statements",
          "Loops",
          "Classes",
          "Defining a Class",
          "Accessing Class Member Variables and Methods",
          "Constructors",
          "Destructors",
          "Static Member Variables",
          "Inheritance",
          "Methods",
          "Local, Member and Global Variables",
          "Quiz",
          "Checklist"
        ],
        "Creating your First Script": [
          "Introduction",
          "Quick overview of the interface",
          "Creating your First Script",
          "Running your First Script",
          "Using the Update Method",
          "Understanding the Scope of Variabes",
          "Creating a Simple Counter",
          "Using Methods (Part 1)",
          "Using Methods (Part 2)",
          "Using Methods (Part 3)",
          "Creating a New Class",
          "Creating Constructors",
          "Common Errors and Best Practices",
          "Quiz",
          "Checklist",
          "Challenge1",
          "Challenge 2"
        ],
        "Adding Interaction with C#": [
          "Introduction",
          "Setting-up the Scene and Tags",
          "Detecting Collisions from a Script",
          "Detecting Tags and Destroying Objects",
          "Creating a Scoring System",
          "Loading a New Scene",
          "Quiz",
          "Checklist",
          "Challenge 1"
        ],
        "Creating and Updating a User Interface with Scripting": [
          "Introduction",
          "Creating a Timer (Part 1)",
          "Creating a Timer (Part 2)",
          "Creating a Timer (Part 3)",
          "Creating a User Interface for the Timer (Part 1)",
          "Creating a User Interface for the Timer (Part 2)",
          "Collecting Boxes",
          "Creating a User Interface for Messages",
          "Deleting Messages after two seconds",
          "Rotating Objects to be Collected",
          "Collecting Petrol Cans (Part 1)",
          "Collecting Petrol Cans (Part 2)",
          "Collecting Petrol Cans (Part 3)",
          "Detecting Collision with the Plane (Part 1)",
          "Detecting Collision with the Plane (Part 2)",
          "Deactivating the Second Plane",
          "Activating the Hidden Plane",
          "Tidying-up the Code (Part 1)",
          "Tidying-up the Code (Part 2)",
          "Checklist",
          "Quiz",
          "Challenge 1"
        ],
        "Polishing your Game": [
          "Introduction",
          "Creating Menus (Part 1)",
          "Creating Menus (Part 2)",
          "Displaying the Score",
          "Keeping the Score Between Scenes",
          "Displaying Items Collected Using Icons",
          "Adding Sound Effects (Part 1)",
          "Adding Sound Effects (Part 2)",
          "Adding a Background Audio (Part 1)",
          "Adding a Background Audio (Part 2)",
          "Keeping Background Audio Between Scenes",
          "Keeping the Appearance of your User Interface",
          "Creating a Mini-map (Part 1)",
          "Creating a Mini-map (Part 2)",
          "Creating a Mini-map (Part 3)",
          "Creating a Mini-map (Part 4)",
          "Checklist",
          "Quiz",
          "Challenge 1",
          "Challenge 2"
        ],
        "Adding and Managing Simple Artificial Intelligence": [
          "Introduction",
          "Adding an NPC (Part 1)",
          "Adding an NPC (Part 2)",
          "Checklist"
        ],
        "Finishing the Game": [
          "Introduction",
          "Initializing the Score",
          "Ensuring that the Background Sound is Played Only Once",
          "Creating an End Screen",
          "Detecting When the Player Has Escaped the Island",
          "Well Done!",
          "Bonus Lecture: Free book on C# Programming"
        ]
      },
      "requirements": [
        "To complete the project presented in this course you only need Unity 2018 (or a more recent version) and to also ensure that your computer and its operating system comply with Unity’s requirements. Unity can be downloaded from the official website and before downloading, you can check that your computer is up to scratch.",
        "In terms of computer skills, all knowledge introduced in this course will assume no prior programming experience from you. So for now, you only need to be able to perform common computer tasks, such as downloading items, opening and saving files, be comfortable with dragging and dropping items and typing, and relatively comfortable with Unity’s interface. This being said, because the focus of this course is on scripting, and while all steps are explained step-by-step, you may need to be relatively comfortable with Unity’s interface, as well as creating and transforming objects.",
        "So, if you would prefer to become more comfortable with Unity prior to start scripting, you can take the first course in the series called Unity From Zero to Proficiency (Foundations). This course covers most of the shortcuts and views available in Unity, as well as how to perform common tasks in Unity such as creating objects, transforming objects, importing assets, using navigation controllers, or exporting the game to the web."
      ],
      "description": "In this course, you will become comfortable with coding in C# for Unity by creating a survival game that includes both an indoor and an outdoor environment.\n\n\nYou will learn how to code in C# and how to use some common coding concepts to add interactivity to your game including variables, conditional statements, methods,  and much more.\nYou will create your own classes, and methods.\nYou will create and update a user interface for your game that includes a mini-map, buttons, menus, text, and images. You will also learn to include both background audio and sound effects for an epic atmosphere.  You will also learn how to hide/display the mini-map and mute the audio when necessary.\n\n\nYou will implement a scoring system, and to keep track of the objects collected by the player using a simple inventory system. You will also learn how to store global information abou the game using the Player preferences..\n\n\nYou will then create a finished game, with realistic graphics,  from start to finish with menus, audio, a splash screen, instructions, sound, two levels (one indoor and one outdoors), NPCS (Non-Player Characters) that chase the player, and a plane that the player needs to find and pilot to escape the island.",
      "target_audience": [
        "You are a total beginner in Unity or programming.",
        "You would like to become proficient in the core functionalities offered by Unity.",
        "You would like to teach students or help your child to understand how to create games, using coding.",
        "Youe would like to start creating great games.",
        "Although you may have had some prior exposure to Unity, you would like to delve more into Unity and understand its core functionalities in more detail."
      ]
    },
    {
      "title": "Unity Beginner Course: Getting Started with Unity 2025",
      "url": "https://www.udemy.com/course/unity-beginner-course-getting-started-with-unity-2025/",
      "bio": "\"Learn Unity from Scratch: Build Your First 3D Game Step-by-Step with No Coding Experience Required\"",
      "objectives": [
        "Understand the Unity interface and essential concepts such as GameObjects, Components, and Prefabs",
        "Gain hands-on experience creating and manipulating 3D objects within a scene.",
        "Learn the basics of C# scripting in Unity to bring interactivity to their game elements.",
        "Build a simple 3D game project from scratch, incorporating movement, collisions, UI, and sound effects.",
        "Develop the confidence to explore advanced Unity tools, packages, and continue learning through official resources."
      ],
      "course_content": {
        "Introduction to Unity": [
          "What is Unity?",
          "Download & Install Unity Hub",
          "Creating Your First Project in Unity",
          "Saving & Opening Projects",
          "Unity Editor Interface Overview"
        ],
        "GameObjects & Components": [
          "What is a GameObject?",
          "Adding 3D Objects to the Scene",
          "Using the Transform Tool (Move, Rotate, Scale)",
          "Adding Components (Colliders, Rigidbodies)",
          "Applying Materials and Colors"
        ],
        "Working in the Scene": [
          "Navigating the Scene View",
          "Using Gizmos & Snap Tools",
          "Duplicating GameObjects",
          "Introduction to Prefabs"
        ],
        "Introduction to Scripting": [
          "Introduction to Scripting",
          "Understanding Start() and Update() Methods",
          "Making a Cube Move with Input",
          "Print Statements & Debug.Log",
          "Some Basics on Classes"
        ],
        "Basic Interactions": [
          "Moving Objects in Unity",
          "Adding Rigidbody for Physics",
          "Understanding Colliders",
          "Detecting Collisions and Triggers",
          "Making a Ball Bounce"
        ],
        "User Interface (UI) Basics": [
          "Creating a Canvas & Adding UI Text",
          "Adding and Styling Buttons",
          "Displaying Score on Screen",
          "Updating UI from Scripts",
          "Making UI Responsive"
        ],
        "Building a Simple Game": [
          "Game Overview: What We'll Build",
          "Setting Up the Environment",
          "Player Movement & Collectible Objects",
          "Scoring Functionality",
          "Adding Sound Effects"
        ],
        "Testing": [
          "Play Mode & Game View Tips",
          "Finding and Fixing Errors in Console",
          "Build Settings Explained"
        ],
        "Next Steps": [
          "How to Use the Unity Asset Store",
          "Intro to Unity 2D Projects",
          "Exploring Unity Packages",
          "Where to Learn More?"
        ]
      },
      "requirements": [
        "No prior game development or Unity experience is needed — we start from scratch!"
      ],
      "description": "Learn Unity step by step and build your first 3D game – no coding or game development experience needed!\nAre you excited about creating your own game but don’t know where to begin? This beginner-friendly course is the perfect starting point for anyone who wants to break into the world of game development using Unity, one of the most powerful and widely used game engines in the industry.\nIn this practical, project-based course, you’ll explore Unity fundamentals through short, easy-to-follow lessons designed in a micro-learning format — making learning quick, efficient, and manageable even for complete beginners. Whether you're a student, hobbyist, or future game developer, you'll gain the confidence and skills to create your very first game from scratch!\nWhat You’ll Learn:\nHow to download, install, and navigate Unity\nUnderstanding GameObjects, Components, and the Unity Editor\nMoving, rotating, and scaling 3D objects\nBasics of C# scripting (Start, Update, Input, Debugging)\nWorking with physics, collisions, and interactions\nDesigning simple UI (buttons, text, score display)\nCreating a mini 3D game with scoring and sound\nTesting and building your project\nCourse Structure:\n9 core modules\nOver 40 bite-sized video lessons (3–7 minutes each)\nHands-on, project-based learning approach\nReal-world skills taught through practical examples\nBuild a fully functional mini-game by the end of the course",
      "target_audience": [
        "Aspiring game developers who want to learn how to build games using Unity",
        "Beginners with no prior Unity or coding experience looking to enter the world of game development",
        "Students and hobbyists curious about how games are made",
        "Anyone interested in creating interactive 3D experiences like games, simulations, or prototypes"
      ]
    },
    {
      "title": "Park It! - Easily Create a Car Parking Game in Unity",
      "url": "https://www.udemy.com/course/park-it-unity/",
      "bio": "Control and Drive cars and create a Parking Game without complications! Quick and Easy!",
      "objectives": [
        "Complete car driving and parking game in Unity with no previous knowledge required!",
        "Create the parking environment step by step (road, sidewalk, lighing and vegetation)",
        "Move and Control a Vehicle using Rigidbody and Wheel Colliders",
        "Make your game look good with Post Processing Effects",
        "Use the Adaptative Probe Volume to the Lighting of your game feels beautiful and performatic",
        "Build your game to a file (executable) that you can share with your friends and anyone!"
      ],
      "course_content": {
        "Getting Started": [
          "What are we goung to Build?",
          "Downloading Unity",
          "Creating Project and Unity Overview"
        ],
        "The Car": [
          "Importing Car Visual Assets",
          "Creating the Car Structure",
          "Rigidbody and Collider",
          "Wheels",
          "Arcade Car Base",
          "Translating Input to Torque",
          "Translating Input to Steering",
          "Car Flipping and Center of Mass",
          "Braking"
        ],
        "The Parking Lot": [
          "Adding Parking Asset",
          "Sidewalk Edge Corners 1 (Tile 02)",
          "Parking Bumps 1",
          "Parking Bump 2",
          "Road (mall piece)",
          "Sidewalk",
          "Adding Cars"
        ],
        "The Game": [
          "Top Down Camera Follow",
          "Small Fixes",
          "Parking Trigger - View and Basic Checks",
          "Parking Trigger - Improvements",
          "Observer Pattern to the Rescue!",
          "Game Controller",
          "26 - Camera and End Game Condition",
          "The Timer",
          "Collision Punishment",
          "Adding a Custom Font",
          "Individual Times",
          "End of the Game"
        ],
        "Polishing and Playing!": [
          "Adding Environment Details",
          "Baked Light and Adaptative Probe Volumes",
          "Post Processing",
          "Building and Sharing"
        ]
      },
      "requirements": [
        "No previous knowledge is necessary to start this course! You will learn everything from scratch!"
      ],
      "description": "Struggled to finish a game? This is the antidote. No experience needed!\nNo overwhelming theory! Just Practical, Effective and Simple game development! From an empty project to a complete, polished car parking game you can share with your friends. No prior coding or Unity knowledge is required. I break down every single step into simple, bite-sized pieces.\nThis isn't a lecture; it's a hands-on build. Let's create something awesome, together!\n\nWhat You'll BUILD:\nIn this project-based course, you will create a functional and addictive car parking game from the ground up. You will:\nDrive & Control a Car: Import a car asset and bring it to life! Add Physics with Wheel Colliders and Rigidbodies, then write simple, powerful code for acceleration, steering, and a handbrake.\nDesign a Parking Lot from Scratch: Build your entire parking scene using simple models.Turn your creations into prefabs and set up the physics for a fun challenge.\nCreate the Core Gameplay: Script a system that spawns a new car only after you've successfully parked the last one. Manage a 10-car fleet and track your best time!\nCode the Smart & Simple Way: Use the Observer Pattern to keep your code organized and easy to understand. No spaghetti code here! just clean, logical, and manageable scripts.\nMake It Look PRO: Make your game look GOOD! From basic to beautiful using Unity's Post Processing stack and Adaptive Probe Volumes for stunning lighting (no artistic skills needed).\nBuild & Share Your Game: Finally, compile your finished game into an executable file you can send to anyone and play on PC.\nWhy This Course ?\nStupid Simple: I explain every concept from the absolute beginning. If you can open Unity, you can do this.\nNo Fluff, All Fun: We cut the boring theory and focus on immediate, gratifying results. See progress in every single lesson.\nSuper Simple Code: I teach you the most direct and effective ways to code. You'll write minimal, powerful lines that are easy to understand and adapt.\nFor the Frustrated & The Quitters: If other tutorials made you feel lost, this is your reset button. We focus on fun and momentum to keep you motivated from start to finish.\n\nBy the end of this course, you won't just have followed a tutorial but you'll have built a complete game!",
      "target_audience": [
        "Developers",
        "Artists",
        "Game Designers",
        "Outsiders with no experience!"
      ]
    },
    {
      "title": "Draw the sword: easy way to create 2d game art in 30 minutes",
      "url": "https://www.udemy.com/course/draw-the-sword-easy-way-to-create-2d-game-art-in-30-minutes/",
      "bio": "You will get 2 swords also if You are NOT designer or artist. For beginners but with nice results",
      "objectives": [],
      "course_content": {},
      "requirements": [
        "You need just to download one program (free), open eyes and repeat all the right moves"
      ],
      "description": "If you never know how to draw something, for your game or for pleasure, you don't understand how to start but really want (maybe for years) - time has come. In this short video course You will get the very first basics of drawing vector graphics on computer - for RPG, for arcade or adventure, for anything else.\nJust because You can and now You have the correct tool.\nFew months ago I have no idea how to start. All my painting skills - from school lessons and was very primitive. But I want to start make my own graphics for my own games. I just want to start make something better than yesterday.\nYou can do the same and - with my help - get it easier and faster.\nLittle bit more than 30 minutes and You will draw Your very first blades and swords^ short sword and double bladed sword (or knife). Just follow the instruction from the video, make the right moves - and it will be done.\nThere no need in special skills. You don't need to have any skills or professional software. Just willing and little bit patience. Video builded for very beginners and I speak slowly, than anybode understand what to do.\nHope You will like this course and in next our You will be proud owner of Your first 2d game art created by Your hands.\nGood luck! See You on the course - just click \"Start Learning Now\"",
      "target_audience": [
        "Indie game developers who don't have resources to hire designers",
        "Small game development teams to increase productivity",
        "Who want to start drawing vector graphics with easy steps"
      ]
    },
    {
      "title": "Make Arcade Vehicle System Unreal Engine C++ (beginner- pro)",
      "url": "https://www.udemy.com/course/arcade_vehicle_system_by_singh/",
      "bio": "We will learn how to make Arcade vehicle system from Scratch which is more optimized and light weight.",
      "objectives": [
        "How to go from having a game idea with zero code, all the way up to final implementation",
        "Coding standards and best practices",
        "Mathematical magic for solving many common coding problems",
        "Complex vector mathematics for working effectively in a 3D game world",
        "Understanding the Unreal Engine object framework for creating professional games"
      ],
      "course_content": {},
      "requirements": [
        "You just require to have basic knowledge of Unreal engine and C++",
        "You don't require high end Maths as We will cover 0 to 100 in this course.",
        "Basic working knowledge of C++"
      ],
      "description": "Game programming wisdom from an industry veteran still working at the forefront\nHow to go from having a game idea with zero code, all the way up to the final implementation\nHow to use the Unreal Engine Editor\nCoding standards and best practices\nCommon programming problems and their common solutions\nWriting readable, maintainable, yet fast and efficient code\nAdvanced C++ to buff those coding chops\nMathematical magic for solving many common coding problems\nComplex vector mathematics for working effectively in a 3D game world\nUnderstanding the Unreal Engine object framework for creating professional games\nUnderstanding vehicle dynamics and building a physics model from the ground up\n\nHere you will learn about Unreal C++ basics. We will start by comparing why we should use C++ over the blueprint and what architecture does Unreal C++ uses and What is the basic functionality of all the classes and their hierarchy.\nBy the end of the course, you can use your knowledge of C++ and Blueprints to build your own dream games. You can use the games built during this course for your personal projects moving forward, as you add more advanced features. Even if you thought C++ was difficult or intimidating before taking this course, you will learn how easy it is to code C++ within Unreal Engine 5 once you go through these lectures. Even if you are only interested in single-player type games, this course will be a great fit as it teaches many other concepts besides programming for multiplayer games.\nWhy Learn From Me\nIn this course, you will learn more than just programming in Unreal Engine 5. You will actually follow the ‘Unreal Way’ of making games in this Epic Games-approved course. Start off on the right foot and write effective C++ code using methods the engine creators have used themselves! I have been working with Unreal Engine 4 and creating game development tutorials since day one. Through this partnership with Epic Games, you will gain the skills to create stunning new projects and advance your professional aspirations in game development.",
      "target_audience": [
        "Who are eager to learn, how we can write own Arcade Vehicle System from scratch in Unreal.",
        "We will understand the basics of Vehicle system. ( Suspension, Damper, Brakes)"
      ]
    },
    {
      "title": "Create a 2D RPG Battle Game from scratch in Unity",
      "url": "https://www.udemy.com/course/create-a-2d-rpg-battle-game-from-scratch-in-unity/",
      "bio": "\"Learn Unity 2D step by step by building a complete RPG battle game with waves, bosses, damage popups, saving & UI menus",
      "objectives": [
        "Build a 2D RPG battle game in Unity from scratch.",
        "Create enemy waves & boss fights with turn-based combat.",
        "Add a shop system with recruitable heroes.",
        "Implement UI menus (health bars, wave counter, damage popups).",
        "Add a save & load system using PlayerPrefs.",
        "Level up system with XP & stats progression.",
        "Add sound effects and visual feedback (damage popups, dissolve effect)."
      ],
      "course_content": {},
      "requirements": [
        "A computer with Unity installed.",
        "Basic computer skills (no prior coding required, beginners welcome!)"
      ],
      "description": "Have you ever wanted to build your own RPG battle game but didn’t know where to start?\nThis course will guide you step by step through creating a 2D turn-based RPG battle system in Unity — even if you’re a complete beginner.\nTogether, we’ll build a game where the player fights waves of enemies, unlocks boss battles, levels up, collects gold, and recruits heroes. Along the way, you’ll learn essential Unity and C# skills that you can use in any future project.\nCreate a player and enemy battle system with health, attack, and turn-based combat.\nBuild a wave manager that spawns multiple enemies before triggering a boss fight.\nAdd UI systems: health bars, wave counter, damage popups, and XP bar.\nImplement a save & load system so players can continue where they left off.\nDesign a main menu with \"New Game\", \"Continue\", and \"Exit\".\nReward players with gold and experience, and build a level-up system.\nCreate a shop system to recruit and upgrade heroes.\nAdd polish with sound effects, visual dissolve effects, and attack animations.\nExport and test your finished game build.\nBy the end of this course, you’ll not only have a complete RPG battle game but also the skills to expand it further — add new enemies, create items, or even build your own RPG adventure!",
      "target_audience": [
        "Beginners who want to learn Unity 2D game development.",
        "Hobbyists who want to make their first RPG battle game.",
        "Indie developers who want to expand their Unity skills."
      ]
    },
    {
      "title": "Scratch 3.0 with 11 Quick Projects",
      "url": "https://www.udemy.com/course/enhance-your-scratch3-skills/",
      "bio": "A Fast and Fun Course in Scratch Programming",
      "objectives": [],
      "course_content": {
        "All The 11 Projects": [
          "All the 11 Projects",
          "Cat Walking in Scratch 3.0",
          "Lots of Animals",
          "Flying in Space",
          "Baseball",
          "Dinosaur Buttons",
          "Dance Party",
          "Magic Fish",
          "Alien Balloon Popper",
          "Brick Breaker",
          "Bat Shooter",
          "Snake Game"
        ]
      },
      "requirements": [
        "About 20 - 30 hours of practicing with CODE BLOCKS",
        "Basic Knowledge Scratch 3.0"
      ],
      "description": "This course has 11 fun projects. I skip all the beginner stuff and move at a good pace in all the videos. So this course is really meant for students already familiar with SCRATCH PROGRAMMING with about 10 or 20 hours of practice.\nEach project has really fancy awesome videos neatly put together showing every step of the way. The videos are made fun and fast so that you can watch them again and again.\nLike all my courses.... please feel free to code along with me on all the projects. That's the best way to learn coding. And I would like to suggest for each video (when copying my code on your own computer) to slow down the speed to 0.5x (which is half as fast). I think that will be a perfect pace to follow along.\nEnjoy this Fast and Fun Course.",
      "target_audience": [
        "Intermediate and Advanced Scratchers Looking to Make More Fun Projects",
        "Kids who like to build small games and animations",
        "Learning Computer Code Patterns for Building Games"
      ]
    },
    {
      "title": "Unreal Ultimate Vehicle, Drivable Racing & Chasing Mechanics",
      "url": "https://www.udemy.com/course/unreal-ultimate-vehicle-mechanics/",
      "bio": "Vehicle Mechanics with blueprint. Create Drivable, Racing and Chasing Mechanics. Similar to Need For Speed",
      "objectives": [
        "Setup Chaos Vehicle System",
        "Make a drivable car",
        "Know about all important parameters in Chaos",
        "Know how to switch action cameras",
        "Learn to use projectile system",
        "Create an awesome Racing AI mechanics",
        "Learn collision avoidance and AI car mechanics",
        "Learn to use Unreal's Navigation System",
        "Make Police AI car which can group together and chase Player",
        "Boost your programming skills with Blueprint",
        "Don't expect to make a full packaged game out of this, this course is only focused on game mechanics only"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Setup Introduction",
          "Setting up building Materials",
          "Set up Road Blueprint",
          "Blueprint Nodes",
          "Add buildings and Trees",
          "Importing Vehicles- Part 1",
          "Importing Vehicles- Part 2"
        ],
        "Drivable Vehicle- Level 1": [
          "Physics Asset Setup for Vehicles",
          "Creating Blueprint for Vehicles",
          "Input Mapping and Driving on Level",
          "Adjusting Center of Mass",
          "Creating a Simple Widget Component",
          "Create a Game Mode",
          "Car Engine Sound System",
          "Skidding and Slipping sounds",
          "Hitting Sound"
        ],
        "Drivable Vehicle- Level 2": [
          "Creating New Vehicle and Understanding Chaos Parameters Part-1",
          "Using Physics Materials",
          "Understanding Chaos Parameters Part 2",
          "Action Camera- Part 1",
          "Adding Visual Interests",
          "Action Camera- Part 2"
        ],
        "Racing Mechanics": [
          "Racing Car Setup",
          "Spline Actor Setup",
          "Race Track Variable",
          "Follow Spline- Basic Mechanics",
          "Advanced Mechanics- Part 1 (Spline Offset)",
          "Advanced Mechanics- Part 2 (Steering Control)",
          "Advanced Mechanics- Part 3 (Throttle Control)",
          "Advanced Mechanics- Part 4 (Throttle Control cont.)",
          "Creating a New Racing Car",
          "Advanced Mechanics Part 5- Auto Reset & Reversing Racing Car: Part 1",
          "Advanced Mechanics Part 6- Auto Reset & Reversing- Part 2",
          "Advanced Mechanics- Part 7 (Collision Avoidance)"
        ],
        "Patrolling & Chasing Mechanics": [
          "Navigation Setup",
          "Police Car & Street Blueprint Setup",
          "Custom Collision Setup",
          "Navigation Path to Spline",
          "Patrolling or Roam Around",
          "Chasing Part 1",
          "Improving Mechanics",
          "Player Car Back Camera Setup",
          "New Police Car",
          "Chasing Part 2",
          "Chasing in Team"
        ],
        "Conclusion": [
          "Final Talks and Thank You"
        ]
      },
      "requirements": [
        "Not for absolute beginners",
        "Little bit of experience with Unreal and Blueprint is needed",
        "Some knowledge of Vector Algebra, Mathematics is appreciated"
      ],
      "description": "This is a course of advanced vehicle mechanics using Unreal Engine and Blueprint. The course begins with drivable vehicle mechanics. And we will also implement engine sound system and action camera mechanics in this section.\nIn the next section we will implement racing functionality. We will make a AI racing car which will be potent enough to beat the player car. In this section we will also make use of line trace and build collision avoidance system. In this section our focus will be to make a racing car which will maximize the speed taking care of safety.\nNext we will use unreal's navigation system and will implement some Chasing Mechanics. Where we will develop a police car which will chase the player. Also when the player car is out of their sight they will roam around at some random location in search of the player car.\nThis course requires some experience with Unreal Engine. If you have previously created any project using unreal then you are good to follow along with this course.\nThis course can boost your ability to program with blueprint. You will learn a lots of techniques here. Starting from Input key mapping up to advanced racing and chasing mechanics. There is no such course available on the internet with this topic till now. And I am really glad to share these knowledges with you.",
      "target_audience": [
        "Unreal Beginners who want to boost their skills with blueprint",
        "Unreal Intermediates who want to know about vehicle mechanics and AI",
        "Hobbyist Learners",
        "Programmers seeking to learn about Unreal Engine and Vehicle Mechanics"
      ]
    },
    {
      "title": "12 Scratch Games - The Complete Scratch Course For 2023",
      "url": "https://www.udemy.com/course/scratch-games-the-complete-scratch-course-for-2023/",
      "bio": "Programming Concepts Explained With Scratch Games",
      "objectives": [
        "Learn coding - the most important thing in this course!",
        "Create fun and smart games!",
        "Learn up to 20x faster any text programming language after",
        "Create animations and your own sprites",
        "Understand complex software concepts by applying them in games",
        "Gain industry specific insights from an experienced software developer and university lecturer"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Prerequisites"
        ],
        "Game 1 - Walking Bears": [
          "Lesson Introduction",
          "Tutorial",
          "Quiz"
        ],
        "Game 2 - Dancing Boy": [
          "Lesson Introduction",
          "Tutorial",
          "Quiz"
        ],
        "Game 3 - Piano": [
          "Lesson Introduction",
          "Tutorial",
          "Quiz"
        ],
        "Game 4 - Animating Sprites": [
          "Lesson Introduction",
          "Tutorial",
          "Quiz"
        ],
        "Game 5 - Bat Game": [
          "Lesson Introduction",
          "Tutorial",
          "Quiz"
        ],
        "Game 6 - Crab And Cat": [
          "Lesson Introduction",
          "Tutorial",
          "Quiz"
        ],
        "Game 7 - Multiplayer Car Racer": [
          "Lesson Introduction",
          "Tutorial",
          "Quiz"
        ],
        "Game 8 - Car and Obstacles": [
          "Lesson Introduction",
          "Tutorial",
          "Quiz"
        ],
        "Game 9 - Ping Pong": [
          "Lesson Introduction",
          "Tutorial",
          "Quiz"
        ]
      },
      "requirements": [
        "No programming experience needed, you will learn everything to know to make fantastic stuff!",
        "Passion for making games!"
      ],
      "description": "This course is all about learning to code from scratch, starting with the basics. Scratch, the programming language we'll use, is a lot of fun and can make programming feel like a game.\nOur teaching method is unique and has been used for over 3 years. We learn a variety of computer science topics but make it easy to understand by using characters, animations, analogies, and fun! Our carefully designed based on British Universities curriculum lessons help you quickly master the basics and train your intuition to make sense of what you want to achieve and how to get there.\nThe content is designed to be enjoyable! We create animations, cool effects, and clones of popular games like Tetris or Pac-Man. These games are handpicked and perfected with our students to optimise learning computer science topics while having fun along the way. The course is regularly updated with new content, challenges, tips, and tricks that you can use in your games and projects.\nThis course is perfect for parents or teachers who want to give their children the best skills and the most fun, kids and beginners who want to learn to code games, or anyone new to programming who doesn't know where to start.\nPlease note that this course is intended for adults. If you're under 18, you may use the course only if a parent or guardian opens the account, handles enrollments, and manages the account usage. I'm excited to have you join the course and start learning to code!",
      "target_audience": [
        "This course is for everyone, beginners especially"
      ]
    },
    {
      "title": "Code in C# & Design a Full Unity® Game: 2D Netroid Shooter!",
      "url": "https://www.udemy.com/course/codeincfullunitygame/",
      "bio": "Make a complete game from scratch in Unity® 2017! Use Photoshop to make art assets from start to finish. Make games.",
      "objectives": [
        "Build a Metroid-inspired 2D action-adventure platform shooter game in Unity®.",
        "Learn game design fundamentals.",
        "Create game art in Photoshop.",
        "Code in C#.",
        "Add sound effects to the game."
      ],
      "course_content": {},
      "requirements": [
        "Download and install Unity® 2017.2.0f3 and Adobe Photoshop CC 2017.",
        "This course was recorded on a Mac, but you can use a PC."
      ],
      "description": "\"This was well articulated, easy to follow and clear. Some of the stuff was a bit remedial for me but the upside for you is that they are thorough. I like that they offered a basic tutorial of the tools before using them to create the project.\" - Mammoth Interactive student Jeremy\nThis course was funded by a wildly successful Kickstarter.\nThe Metroid game is one of the most popular action-adventure games out there. Let's build one inspired by it! This course rocks for beginners.\n\nGlauco Pires from Mammoth Interactive teaches you how to build a Netroid shooter game in Unity®. This course is unique because we make both the code and the art for the game from scratch. We teach you the fundamentals of designing, coding, and fine-tuning a game.\n\nFirst you design the game and its functionality in Unity®. You learn how to code in C# and build video game levels. Don't worry if you've never coded before. We start simple and add more to the game as the course goes on. We interweave theory with practical examples so that you learn by doing.\nFurthermore, Kevin Liao teaches you everything you need to know about Photoshop to make game art. One of the best features is that you can watch the courses at any speed you want. This means you can speed up the or slow down the video if you want to.\nThis course is project-based. You will not learn a bunch of useless coding practices. At the end of this course, you will have an AWESOME game to use in your portfolio. Taking this course means that you learn practical, employable skills immediately.\nLearning how to code is a great way to jump in a new career or enhance your current career. Coding is the new math! Learning to code will propel you forward for any situation. Learn it today and get a head start for tomorrow. People who can master technology will rule the future.\nAll source code and art assets are included with your purchase. Enroll today to join the Mammoth community!",
      "target_audience": [
        "Complete beginners. No prior coding or digital art skills necessary.",
        "People who want to make games."
      ]
    },
    {
      "title": "Create your own 2D art for games.",
      "url": "https://www.udemy.com/course/create2dartforgames/",
      "bio": "Learn how to build 2D vector art for use in your own games and apps.",
      "objectives": [
        "Build simple game props/items",
        "Build complex/compound props/items",
        "Learn the basic interface/tools within the DrawPlus X6 vector application",
        "Learn the basics of shading, to give your objects depth",
        "Learn the basics on adding detail to your objects to make them stand out",
        "Learn the basics of animation to allow your objects to come to life in game",
        "Understand how to export your artwork in a format used for your game/app"
      ],
      "course_content": {},
      "requirements": [
        "DrawPlus X6, (or any suitable vector program like Inkscape)",
        "This course uses the basics tools, all of which are also within the new release X8,"
      ],
      "description": "This course will teach you the process I use to create basic game art, objects and props, needed for games. The course will focus on a Vector generated cartoon stylized format seen in many games.\nLearn to build assets in a simple format, by breaking objects down into individual components and building up the details of each component to a final result.\nThis course will take several hours to complete, if you follow along step by step in the process. We will begin with very simple objects, and then move along into more and more complex designs as we progress.\nBy the end of this course, you will have created several small props, along with multiple fantasy swords, shields, a treasure chest, and a detailed guillotine as the final project\nThis course is structured to teach you the basics of the DrawplusX6 application although other vector programs like inkscape can work just as well. If you are familiar or more comfortable with a different vector application then following the steps should be easily transferable to that application.\nOnce you understand the basics of how to build objects, and add details and shading to them, you will be able to create most any game component you require in your games.\nWhat this course will teach you:\nWhat is a vector and how to use vector shapes to build art for games.\nHow to navigate the interface and use the primary tools within the DrawPlusX6 application.\nHow to view reference photos, and rough in general shapes, to gradually build up a complete object.\nHow to use existing shapes, to create the necessary shading to add detail and depth to your objects.\nHow to create several objects, walking through the process from concept/reference to completed, exported image file.\nWhat this course will not teach you:\nThis course will not go into details on creating characters or monsters or entire game levels, as it will be focused on individual objects/props.",
      "target_audience": [
        "This course designed for beginners, and non-artists looking to learn the skills necessary to create their own art for video games and applications.",
        "This course can also be used with the current version of DrawPlus X8, as we introduce only the basic tools, which have not changed in the newer version."
      ]
    },
    {
      "title": "Learn to create advance Metroidvania 2D character",
      "url": "https://www.udemy.com/course/learn-to-create-advance-metroidvania-game-character/",
      "bio": "Learn to create advance Metroidvania 2D character",
      "objectives": [
        "Build 2D Unity Game",
        "progarmming with C#",
        "Makind 2d metroidvania character",
        "give animation to your character"
      ],
      "course_content": {},
      "requirements": [
        "have pc"
      ],
      "description": "Are you looking for a course Unity course where you will build a small 2d metroidvania character game  from scratch ? In this course we will create   game charachter with lots of important things that any  game character should have like, player movement system,jump,bow ,casting spells,difrent kind of attacks,grabing wall edge and much more and all with high resoulition  animations and asset that i made it ready to use for your games ,\nIf you have completed few beginner courses on Unity and c# and you feel comfortable using them together I believe that you will benefit greatly from this course.\nWe will use  2d models, animations and tools which have high quality and you will enjoy the asset for sure\nMy hope is that at the end of the course you will have a bigger picture on how to structure the code for your game and make a game for yourself .\nIf you think that you could benefit from this course don't hesitate to purchase it.  Saying that I have really put a lot of effort to make sure that you will benefit from the course and learn some useful techniques from setting up enemy AI and more\nWhat you will learn at the end of this course\n1)make player  from scratch\n2)Player Movement Animations\n3)Pickup Animation\n4)jump Animation\n5)Shop system\n6)Level up system andcasting spell Animation\n7) player shooting arrow\n8)hurt Animation\n9) Death Animation\n10)Effects\n11)grabbing edge of walls\n12)putting sound\n13)putting effect\n14)and more",
      "target_audience": [
        "Begginer,intermediate developers who is intrested to make advance metroidvania character"
      ]
    },
    {
      "title": "Make a Soccer game for iPhones and publish it. Code included",
      "url": "https://www.udemy.com/course/make-a-soccer-game-for-iphones-and-publish-it-code-included/",
      "bio": "Fastest way to get your own soccer game published in the iTunes app store with advertising revenues! All steps are shown",
      "objectives": [
        "Learn how to get your iOS developer license",
        "Learn how to create your own iPhone game without having to write code",
        "Learn how find free graphic images for games",
        "Learn how to modify and create your own game graphics",
        "Learn how to add your own sound effects",
        "Learn how to publish your very own iPhone game to the iTunes app store in one afternoon",
        "Brag to your friends you own a cool iPhone game in the iTunes app store"
      ],
      "course_content": {
        "iOS developer setup": [
          "Instructor greetings and course overview",
          "Apple Developer license",
          "Download and Open XCode dev tool",
          "Download the soccer game source code and open it",
          "iOS developer certificate",
          "App Identifiers and provisioning profile setup"
        ],
        "Game initial setup": [
          "Overview of the source code",
          "Come up with the game theme",
          "Tips to find trending styles and themes",
          "Modify the football field background image",
          "Choose the new main character",
          "Drawing the dog goalie 8-bit retro pixel art",
          "Animating the dog goalie",
          "Verifying the dog animation works in the simulator",
          "Replacing the soccer ball with the freesbie disc",
          "Drawing the surfer freesbie thrower",
          "Drawing the game title"
        ],
        "Setting up icons, launch images and gameplay screenshots": [
          "Design the app icon",
          "Resize the icon to all iphone and ipad dimensions",
          "Create all the launch images",
          "Take app gameplay screenshots for all devices"
        ],
        "Advertising Network Setup": [
          "Chartboost advertising setup",
          "Admob advertising ID",
          "Add the rating and review app ID"
        ],
        "Publishing to the iTunes App Store": [
          "Configure the app settings in xcode",
          "Creating the app in itunes connect dashboard",
          "setting up the game center leaderboard",
          "Enter the mobile app price for itunes store",
          "Starting the archiving process",
          "Uploading the app bundle to itunes",
          "App Published screen",
          "BONUS"
        ]
      },
      "requirements": [
        "a MAC computer or MacInCloud online virtual MAC",
        "Image editing tool (photoshop is a plus, otherwise use Gimp.org or sumopaint.com for free)"
      ],
      "description": "This course's main objective is to become the easiest, quickest way to get a great cool soccer game in the iTunes App Store.\nThe course starts with us staring at the blank screen of an Apple computer (or MacInCloud for PC users) and I will guide you through all the step necessary to set up your computer for development. I will also go through each steps to become a licensed iOS developer.\nWe will then install the game from the great source code (included with this course!), run the game on the simulator, then modify the graphics and sounds to customize the 'Tiny Goalie'* game into one of your own.\nThen we will setup the advertising networks to ensure money coming in. Then we will publish the game to the Apple app store.\nThis course is not about theories. Once you complete this course, you have a real product of your own in the app store, bringing in profit. You can't pass this opportunity.\nThere has been plenty of reskins of these apps by myself and by many students.\nGo Take a look at them on the iTunes app store. Look for 'Tiny Goalie' on the itunes app store.\nAlso feel free to ask me anything that goes through your mind, I love to help!\nMake sure to check AppsFresh website, plenty of resources there.\n*The source code mimics game mechanics of the original \"Tiny Goalie\" game for iPhones.",
      "target_audience": [
        "People who want to start a mobile app business the inexpensive way, on their own",
        "great course for someone who wants to learn about the iTunes publication process",
        "Computer science students",
        "cool kids",
        "Solo / Indi entrepreneurs"
      ]
    },
    {
      "title": "Create a Simple Note Taking App in Godot",
      "url": "https://www.udemy.com/course/create-a-simple-note-taking-app-in-godot/",
      "bio": "GDScript Development",
      "objectives": [
        "Set up a Godot project environment",
        "Implement text formatting features",
        "Create and manage tables and lists",
        "Save and load project data"
      ],
      "course_content": {},
      "requirements": [
        "Basic understanding of Godot is helpful but not required"
      ],
      "description": "Are you interested in game development or looking to build functional applications with Godot? In this course, you'll learn to create a fully functional note-taking app using the Godot engine, designed for both beginners and those looking to expand their Godot skillset.\nThis step-by-step course covers everything from setting up your project and interface to adding advanced features like text formatting, tables, and saving/loading notes. Along the way, you'll tackle common bugs and improve the usability of your app.\nWhat You’ll Learn:\nSetting up Godot\nBuilding scenes and nodes to create a robust app structure.\nAdding and styling text with features like bold, italics, underline, and strikethrough.\nWorking with tables, lists, and fonts to organize and present data.\nImplementing auto-saving, loading, and project management.\nExporting your app for Android and other platforms.\nCourse Breakdown:\nProject setup and customization\nHandling text formatting and BBCode\nOrganizing content with tables, ordered/unordered lists, and page navigation\nDebugging common errors and adding small features for usability\nCreating and loading projects dynamically\nExporting your app to different platforms like Android\nBy the end of this course, you’ll have a functional note-taking app and a solid understanding of using Godot for non-game applications, ready to bring your future ideas to life!",
      "target_audience": [
        "Beginners who are new to Godot or want to explore non-game development projects",
        "Developers or hobbyists looking to expand their skills by building practical applications in Godot",
        "Students interested in app development",
        "Anyone looking to build a simple, functional note-taking ap"
      ]
    },
    {
      "title": "Unity Tic-tac-toe multiplayer Netcode for GameObjects",
      "url": "https://www.udemy.com/course/unity-tic-tac-toe-multiplayer-netcode-for-gameobjects/",
      "bio": "Learn to build multiplayer game",
      "objectives": [
        "Create multiplayer projects in Unity 6",
        "Use Netcode for GameObject for multiplayer",
        "Learn how to create Tic-tac-toe game",
        "Use Unity tool for player multiplayer simulation"
      ],
      "course_content": {
        "Course videos": [
          "Introduction",
          "Base setup",
          "Spawn Crosses",
          "Spawn Circles",
          "Host Client Buttons",
          "Player Turns",
          "Players Turns UI",
          "Fix object placing",
          "Win Lose",
          "Score",
          "Tie",
          "Rematch",
          "Sound",
          "Final small fix"
        ]
      },
      "requirements": [
        "Basic understanding of Unity and C#"
      ],
      "description": "We will be building a multiplayer Tic-Tac-Toe game using Netcode for GameObjects, Unity's official solution for multiplayer development. You don’t have to worry about assets, because I will provide you with sprites and a complete scene at the beginning of the course so you can instantly start following the lectures. If you want to compare your results with mine, you will be able to download all the script files used throughout the course.\nThis course is perfect for Unity developers who have some basic knowledge of the engine and want to dive into real-time multiplayer game development. You’ll learn how to synchronize player actions across a network, manage game state, and handle win conditions in a multiplayer environment. We’ll cover lobby setup, player connection, data replication, and basic server authority principles. You’ll also learn how to test multiplayer features locally, simulate multiple clients for development, and understand common networking pitfalls and solutions.\nBy the end of the course, you’ll have a fully functional online game and a solid understanding of Netcode’s core features. Whether you're aiming to create small indie titles or prepare for larger-scale multiplayer games, this course will give you a strong foundation to build on.\nWelcome to the course and have fun learning!",
      "target_audience": [
        "Begginers who want to learn multiplayer with NGO"
      ]
    },
    {
      "title": "Reviving Classic games with ReactJS, Type Script and Jest",
      "url": "https://www.udemy.com/course/reviving-classic-games-with-reactjs-type-script-and-jest/",
      "bio": "Master React by Building Classic Games: A Comprehensive Guide to Advanced Techniques, Testing, and State Management",
      "objectives": [
        "Develop Interactive Apps: Build dynamic web applications with React components, state, and props",
        "TypeScript Integration: Learn to integrate TypeScript with React to build type-safe, scalable applications with enhanced code quality",
        "Test with Jest: Write unit and integration tests for React applications using Jest, ensuring reliability and robustness",
        "Implement React Hooks: Use modern hooks like useState, useEffect, redux, ContextAPI and side effects",
        "Build Classic Games: Create 7 classic games using React components and state management",
        "Optimise Performance: Learn techniques like code-splitting to enhance React app performance",
        "State Management: Master state management using the Context API and Redux to handle global state in React applications"
      ],
      "course_content": {},
      "requirements": [
        "While a basic knowledge of React and TypeScript is recommended, rest assured that all concepts will be thoroughly explained in great detail throughout the course.",
        "A basic knowledge of css would be great but not required."
      ],
      "description": "Unlock the full potential of React with this comprehensive, hands-on course where you’ll master modern web development by building seven classic games. This course is perfect for developers with a basic understanding of React, TypeScript, and CSS, looking to elevate their skills through practical, engaging projects.\nThroughout the course, you'll create a variety of well-known games including Connect 4, Wordle, Master Mind, Memory Game, Lights Out, Hangman, and the 15 Puzzle. Each project is designed to deepen your understanding of React’s core concepts, such as components, hooks, and state management, while also introducing you to advanced techniques like Context API and Redux for effective state handling.\nYou’ll also learn how to write unit tests using Jest to ensure your applications function as intended. You will also learn more about code-splitting and separation of concerns in web applications.\nWhether you’re an aspiring web developer or a seasoned programmer looking to refine your skills, this course provides detailed explanations and hands-on experience to help you build interactive, high-performance applications. By the end of the course, you'll not only have a portfolio of classic games but also a solid foundation in both React and TypeScript, ready to tackle more complex projects and advance your career in web development.",
      "target_audience": [
        "Aspiring Web Developers: Individuals looking to expand their skills in modern web development with a focus on React.",
        "Intermediate React Developers: Those who have a basic understanding of React and wish to deepen their knowledge and apply it to practical projects.",
        "JavaScript Programmers: Developers proficient in JavaScript who want to learn how to create interactive web applications using React.",
        "TypeScript Enthusiasts: Programmers who are familiar with TypeScript basics and want to integrate it into their React projects for better type safety and code quality.",
        "Front-End Developers: Professionals seeking to enhance their toolkit with advanced React concepts, hooks, state management, and performance optimization.",
        "Game Development Hobbyists: Anyone interested in creating classic games using modern web technologies and improving their problem-solving skills through fun projects.",
        "Students and Learners: Those enrolled in computer science or web development courses looking to complement their studies with practical, hands-on experience."
      ]
    },
    {
      "title": "The No-Code Revolution | Advanced 2D Platformer",
      "url": "https://www.udemy.com/course/the-no-code-revolution-advanced-2d-platformer/",
      "bio": "Master Advanced 2D Platformer Development in GDevelop: Create Levels, Complex Player Logic, and Enemy AI!",
      "objectives": [
        "Create complex player logic",
        "Use advanced behaviors in GDevelop",
        "Animate sprites using GDevelop",
        "Master the art of finite state machines",
        "Add combat to your GDevelop games",
        "Take advantage of GDevelop's tilemap system",
        "Become better at game development of course"
      ],
      "course_content": {},
      "requirements": [
        "No programming experience is needed. A basic understanding of GDevelop is required."
      ],
      "description": "Welcome to Season 2 of The No-Code Revolution! This course will teach you how to make an Advanced 2D Platformer using the best free no-code game engine, GDevelop!\nIn this course you will learn:\nAdvanced Platformer Behaviors\nWall Jumping\nDouble Jumping\nDashing\nDive Dash\nSmooth Camera Movement\nManaging Complex Player States\nPlayer Combat\nEnemy Combat\n& more!\nAt the end of this course, you will be an advanced game developer capable of creating complex game logic. You will also be a master of finite state machines, activating animations, GDevelop's platformer behavior, and GDevelop's tilemap system. This course explains the WHY behind every step that is taken, so you'll be ready to make your very own Platformer Game and customize it to fit your vision.\n\n\nPrerequisites:\n\n\nAccess to a working computer (Windows 10 or 11)\nAn external mouse (not trackpad)\nBeginner level knowledge of the GDevelop game engine\nA desire to learn\nPatience\nThis course requires you to have a beginner level knowledge of the GDevelop game engine. If you are completely new to GDevelop, enroll in The No-Code Revolution Season 1 to get your foot in the game! Season 2 of The No-Code Revolution is here, but are you ready for it?",
      "target_audience": [
        "Beginner game developers",
        "People who want to make games without coding"
      ]
    },
    {
      "title": "unity 2D: Develop 2D android game in unity in 1 Hour",
      "url": "https://www.udemy.com/course/design-develop-and-build-a-2d-game-in-unity-in-one-hour/",
      "bio": "A 2D game will be developed from scratch - perfect beginning course for high school age students and new developers",
      "objectives": [],
      "course_content": {},
      "requirements": [
        "Understand basic C# code and its structure"
      ],
      "description": "In this course, we will create a 2D game for android devices and build and run on it. We will work on how you can create some sort of logic when you are creating games and how you can implement it. GUI is not considered only logical features are applied.\nYou’ll be amazed at how fast you can learn Unity. And, you’ll quickly become confident with all the game-creating basics. The pace of each video is designed for ease of learning, and not designed to cram as much as possible into each lesson.\nWe will cover techniques as:\nSetting up a 2D platform.\nUnderstanding and Creating Gizmos.\nUnderstanding the logic behind Spawning Gameobjects Dynamically.\nUnderstanding Colliders and implementing logic to detect Gameobjects.\nUnderstanding sprite renderer and how to change Gameobject color on runtime.\nSetting up UI canvas properly and making it responsive.\nCreating and Understanding Text UI.\nCreating and Understanding Button UI.\nUnderstanding Scenemangment and Creating Different Scenes to toggle between the game.\nHow to add sound to the game.\nPlaying sound at a particular time.\nDebugging to find errors and their possible solutions.\nBuilding and Running the Game on Android Device",
      "target_audience": [
        "Beginner C# Developers ,High school students and newbies"
      ]
    },
    {
      "title": "How To Create Complete A Godot Game - Full Course!",
      "url": "https://www.udemy.com/course/how-to-create-games-with-godot-4-3-for-beginners/",
      "bio": "Learn to develop a complete game project in Godot from start to finish!",
      "objectives": [
        "Develop an outstanding and complete game while mastering the essential concepts of Godot 4",
        "Create your own games from start to finish using Godot 4",
        "Gain a deep understanding of Godot's core features: Scenes, Instances, Nodes, Signals, and Scripting",
        "Write clean, efficient, and professional GDScript code, Godot's built-in programming language"
      ],
      "course_content": {
        "Introduction": [
          "Downloading Godot",
          "How To Follow Along",
          "Godot User Interface",
          "Assets"
        ],
        "Project Setup": [
          "Jump ‘Em All Overview",
          "Setting Up The Project",
          "Creating The Main Scene"
        ],
        "Player Movement": [
          "Setting Up Player",
          "The Other Functionality Of Scenes",
          "Adding A Script To The Player",
          "Introduction To GDScript",
          "Understanding Delta",
          "Creating The Road",
          "Polishing Player Movement"
        ],
        "Player Animation": [
          "Starting To Animate The Player And @onready Variables",
          "Clamping The Player Movement",
          "Static Typing",
          "Animating The Player",
          "Flipping The Player"
        ],
        "First Visual Elements": [
          "Adding A Background",
          "Score UI",
          "Score System"
        ],
        "Vehicles": [
          "Vehicle Scene",
          "Spawning Vehicle",
          "Singletons (Autoload)"
        ],
        "Game Over And Main Menu": [
          "Game Over UI",
          "Game Over System",
          "Process Modes",
          "Menu"
        ],
        "Progression": [
          "Starting To Code Progression",
          "Adding Extra Speed To Vehicles"
        ],
        "Coins, Decorations And Optimization": [
          "Coin Scene",
          "Spawning And Colliding With Coins",
          "Displaying Coins",
          "Decorations",
          "Optimizing"
        ],
        "Fade Scene Transition": [
          "Autoloading Fade Scene",
          "Adding Scene Transitions",
          "First Fade"
        ]
      },
      "requirements": [
        "Having access to a computer",
        "No prior experience in programming or game development is required. This course is designed for both beginners and those with some experience!"
      ],
      "description": "Master Godot 4 and Build Your Dream Games!\nReady to create amazing games? This course takes you from scratch to crafting an impressive endless runner in Godot 4. You’ll build a game where the character dodges vehicles, collects coins, and has outstanding game feel:\nThe game has:\nAuto-scrolling background\nVehicle particles\nPlayer trail\nCoin collection animation\nSmooth scene transitions\nAnd more!\nUnlike other courses, this one’s built for clarity and fun. Lessons are bite-sized, under 10 minutes, and complex topics are explained with easy-to-follow slides. Plus, all resources are included, so you’re never left guessing.\nWhy Choose This Course?\nYou’ll learn from a seasoned instructor who’s been using Godot for four years and knows how to make learning enjoyable. I’ve created 10 Godot courses for Zenva, a leading online learning platform with over 1 million students worldwide. I also run a Godot-focused YouTube channel with over 10,000 subscribers, helping aspiring developers create their own games.\nBy the end of this course, you’ll have a solid foundation in Godot and be ready to take on your own game projects. Whether you’re a complete beginner or looking to level up your skills, this course has got you covered.\nStart your Godot journey now—your dream games are waiting!",
      "target_audience": [
        "Perfect for those with little or no background in game development or programming who are excited to learn the basics of 2D game creation and begin developing their own games",
        "Ideal for game enthusiasts ready to convert their passion into practical skills. The course offers a well-structured learning path to boost their game development expertise and craft captivating 2D games",
        "Suitable for individuals who have experimented with game development or programming on their own and are looking to solidify their skills, adopt best practices, and deepen their knowledge of the Godot 4 engine"
      ]
    },
    {
      "title": "Create Epic Games in Scratch",
      "url": "https://www.udemy.com/course/create-epic-games-in-scratch-30/",
      "bio": "Create Epic Games, using Scratch 3.0",
      "objectives": [
        "Learn the basics of Scratch 3.0",
        "How to create 2D Art for your game",
        "Explore how video games are made",
        "What responsibilities programming entails"
      ],
      "course_content": {
        "Create Epic Games in scratch 3.0": [
          "How to make an epic Pong Game in scratch. Moving the ball",
          "How to make an epic Pong Game in scratch. Game Over",
          "Events Blocks",
          "How to make an epic Flappy Bird Game in scratch. Bird movement",
          "How to make an epic Flappy Bird Game in scratch. Game Over",
          "Sensing Blocks",
          "How to make an epic Zombie Shooting game in scratch. The Player",
          "How to make an epic Zombie Shooting game in scratch. Enemies.",
          "How to make an epic Endless Runner in scratch. Art",
          "How to make an epic Endless Runner in scratch. Player Movement",
          "How to make an epic Endless Runner in scratch. Game Over",
          "How to make an epic Airplane shooter in scratch",
          "How to make an epic Airplane shooter in scratch. Enemy Movement",
          "How to make a logo for your scratch account in scratch",
          "Subway Surfers - Episode 1"
        ]
      },
      "requirements": [
        "No. Zero to Game Creation"
      ],
      "description": "Dive into the vibrant world of Scratch programming, where imagination meets creation! This course is tailored for young minds eager to venture into the realm of computer programming. Using the intuitive and colorful Scratch platform, students will learn the fundamentals of coding in a fun, engaging, and interactive way.\n\n\nCourse Highlights:\nDiscovering Scratch: Learn about the Scratch platform, its origin, and its potential to bring ideas to life.\nDrag-and-Drop Coding: Understand the logic behind coding without having to type a single line. Simply drag, drop, and connect!\nAnimating Sprites: Bring characters (known as sprites) to life. Learn how to move, talk, and interact with them on the screen.\nCreating Stories: Weave narratives and design your very own animated tales.\nGame Development Basics: Design simple games and puzzles, learning about gameplay mechanics and user interactions.\nIntroduction to Events and Loops: Grasp foundational programming concepts that power every digital tool and game.\nInteractivity and Sensing: Make your projects react to mouse movements, clicks, and even loud noises!\nSharing and Collaborating: Learn how to publish your projects and collaborate with the global Scratch community.\n\n\nWho Is This Course For?\n- Kids aged 7-12 who are curious about coding and digital creation.\n- Beginners with no prior programming experience.\n- Young minds eager to express their creativity and ideas digitally.\n\n\nCourse Takeaways:\n- A strong foundation in the basics of Scratch programming.\n- Confidence to design, animate, and share personal projects.\n- A portfolio of mini-games, animations, and interactive stories.\n- An enthusiastic introduction to the world of coding, paving the way for more advanced programming adventures!\n\n\nJoin us on this electrifying journey and watch as your child transforms their brilliant ideas into interactive digital masterpieces!",
      "target_audience": [
        "Beginning Scratchers",
        "Kids who just want to make awesome games"
      ]
    },
    {
      "title": "Unity: The Ultimate Endless Runner Course",
      "url": "https://www.udemy.com/course/learn-to-create-an-endless-runner-game-in-unity/",
      "bio": "Create a 2D endless runner platformer game and learn game development. The assets in the course are gifts to you.",
      "objectives": [
        "Learn C#, a modern powerful programming language, in a detailed way.",
        "Get used to using Unity.",
        "Learn advanced programming skills such as object oriented programming.",
        "Learn advanced data saving and loading with encryption.",
        "Learn the steps of developing a fully functioning game.",
        "Create 2D games in Unity.",
        "Develop strong problem solving skills.",
        "Design user interfaces in Unity.",
        "Animate characters and game objects.",
        "Creating visual effects using particle systems."
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Preparation": [
          "Creating Unity Project",
          "Course Assets 1",
          "Importing Game Assets Package 1"
        ],
        "Getting Started": [
          "Preparing Character Sprites",
          "Preparing Game Sprites"
        ],
        "The Player": [
          "Player Movement",
          "Jumping",
          "Player Animations",
          "Player Animator & Skating",
          "Looping Background",
          "Hold To Jump Higher"
        ],
        "Platforms": [
          "Platform Generation",
          "Looping Platform Generation",
          "Mushrooms",
          "Rock Obstacles",
          "Wood Obstacles"
        ],
        "Consumables & Collectables": [
          "Course Assets 2",
          "Importing Game Assets Package 2",
          "Game UI (User Interface)",
          "Player Health",
          "Coins",
          "Score & Pace of the Game",
          "Collectable Bonus Health"
        ],
        "Menu & Market": [
          "Menu UI (User Interface)",
          "Pausing the Game",
          "Market UI (User Interface)",
          "Market Code"
        ],
        "Saving & Loading Game Data": [
          "Save & Load 1",
          "Save & Load 2",
          "Encryption & Decryption of Game Data"
        ],
        "VFX (Visual Effects)": [
          "Explosion Effect (Particle System)",
          "Shatter Effect (Particle System)",
          "Jump Effect (Particle System)",
          "Skateboard Trail",
          "Mushroom Animation"
        ],
        "Saving & Loading Game Data 2": [
          "High Score",
          "Backing Up Game Data"
        ]
      },
      "requirements": [
        "A PC that can run Unity 2022 game engine.",
        "That's it. You can start right now!"
      ],
      "description": "No Programming Experience Required!\nLearn how to develop your own classic endless runner game using Unity, a game development program well-known and used by many large gaming studios and indie developers all around the world.\n\n\nIn this course, you will not just learn the programming concepts, you will learn them by seeing their use in the real game development process. So you will not just learn about them, you will learn how to use them to build your own games.\n\n\nThis course has been designed to be suitable for all levels. Although beginners may struggle in learning some concepts, they will easily learn a lot of the topics and techniques. And they will have a strong understanding of the topics and techniques taught. Also this course is suitable for game developers who want to widen their understanding on game development and want to learn new techniques and ideas. So whether you are a complete beginner, or a game developer looking to expand their knowledge in understanding game design, this course will help you to gain a stronger understanding of development.\n\n\nWhen you complete this course you will have developed a strong understanding on topics such as:\nUsing Unity Engine efficiently\nCreating your own games\nProcess of game development\nGame structure design\nCreating animations\nCreating looping games\nData saving with encryption\nDesigning user interfaces\nCreating visual effects using particle systems\nPlanning the steps of building complete games\nStart learning now to become a game developer!",
      "target_audience": [
        "Anyone who wants to make their own 2D games.",
        "Beginners that are interested game development.",
        "Game developers who want to improve their skills.",
        "People interested in working in the game development industry.",
        "People who are confident with using a computer.",
        "Programmers who want to learn advanced techniques."
      ]
    },
    {
      "title": "Unity Game Development: Endless Running Game",
      "url": "https://www.udemy.com/course/unity-game-development-endless-running-game/",
      "bio": "Creating full game in unity",
      "objectives": [
        "Learn how to make full mobile game in Unity.",
        "Make Game User Interface",
        "Impalement characters and animations.",
        "Implement Audio in the game.",
        "Implement swipe control for mobile devices."
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Install Unity",
          "Unity Editor user Interface \"UI\"",
          "Game Idea and Design"
        ],
        "Creating Main Game Play": [
          "Game Environment",
          "Create Player",
          "Create Enemy",
          "Create Coin",
          "Create Spawner for Enemies and Coins",
          "Create Collision Functionality",
          "Create Data Containers"
        ],
        "Game User Interface \"UI\"": [
          "Start With Game UI",
          "Pause Menu UI",
          "Main Menu UI",
          "Shop UI",
          "Fixing Bug in Main Level UI",
          "Consume Shop Items",
          "Finalizing Game UI"
        ],
        "Game Sound": [
          "Implement Sound and Audio to the Game"
        ],
        "Characters and Animations.": [
          "Change Player and Enemy Characters.",
          "Change Coins Look."
        ],
        "Swipe Control and Building the game for Mobile": [
          "Swipe Control",
          "Build the game to android device"
        ]
      },
      "requirements": [
        "Basic understanding of C#."
      ],
      "description": "Creating an awesome game in Unity is never been easier than these days will all the features that Unity provides for the community. You might have a lot of game ideas with you and you wish to implement them in real life instead of having them in your mind only. This course you will learn step by step how to create an Endless Runner Game with Unity from start to finish.\n\n\nThis course is divided to sections in each one of these sections you will learn new things to be able in the end of the course to build a full game in Unity. The first section is introduction to the course and installing Unity Application to your computer then make the initial design of the game in photoshop. The second section we start to work with the game environment, adding the player, adding the enemy and coins. Then we created a spawner which spawn enemies and coins each second. Then we work with game collision system to make player die if hit an enemy or collect points if hit one of the coins and we store these coins or scores in a data container.\nIn section three we created the game UI for the main level, the main menu and the game shop. We make the UI scale with screen size and make it look good in different screens. The in section four we added audio to the game. We added background audio and another audio when collecting coins. Then in section five we added characters to the game from one of the free online tools for characters and animation “Mixamo”. We implemented the animation in our game and we add new coin shape to our coins. The last section we create swipe control for our game so we can play in in the mobile phone. Finally we build the game and run it into an android phone and test it.\nI hope you enjoy the course and feel free to ask and write your questions under each section.",
      "target_audience": [
        "Beginners to Unity and C#."
      ]
    },
    {
      "title": "Unity game development course - make a 3d Runner gaming app",
      "url": "https://www.udemy.com/course/unity-game-development-course-make-an-androidios-game/",
      "bio": "learn how to make a 3D runner gaming application",
      "objectives": [
        "Unity game development on android",
        "Build a complete Android/iOS Games In Unity",
        "Android game development",
        "Make a runner game application",
        "code functionality in C#",
        "Make a monetized gaming application",
        "Learn How to make 3D game"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "How to Install Unity software",
          "Unity Software overview",
          "Unity Scripting Overview"
        ],
        "Bridge Runner 3D": [
          "Introduction to Bridge runner 3D",
          "Importing Assets and exploring all the options",
          "Creating our own Animator controller"
        ],
        "Movement": [
          "Moving our character forward"
        ],
        "Animations": [
          "Adding all the animations"
        ],
        "Swipe control": [
          "Detecting swipe control",
          "Adding behavior according to the Swipes",
          "Adding Implusive force"
        ],
        "Game mechanics": [
          "Platform spawner script",
          "Fixing bugs and algorithms",
          "Fixing the sliding problem",
          "Making more prefabs for our game",
          "generating water infinitely"
        ],
        "Polishing our game": [
          "Adding Cinemachine camera and fixing some bugs",
          "Creating our pause screen",
          "Creating our main menu scene"
        ],
        "Skybox and more polishing": [
          "Adding skybox and increasing our speed eventually",
          "how to generate an apk from Unity"
        ],
        "Some more Fixes": [
          "Destroying objects that aren't being used"
        ],
        "Monetizing our game": [
          "Monetizing our game using Unity ads"
        ]
      },
      "requirements": [
        "Very little programming Knowledge.",
        "all you need is a computer and an internet connection"
      ],
      "description": "In this course, we will be making an addictive 3D Runner game, that we will monetise with ads. We will cover all the basics of unity software and:\nInstalling Unity\nOverview of unity software\nOverview of C# scripting\nLearn how to code in C#\nPrefabricated game objects\nhow to work with prefabs\nAnimations in Unity\nAnimation Controller\nScore system\nPause system\nMenu System\nAnimations\nCharacter animations\nMobile setup\nGrouping prefabs\nProcedural level generation\nRandomized game design\nMonetizing our gaming app\nuploading the game to the google play store.\nSo what are you waiting for guys? join now and enable yourself to learn from this awesome course :)",
      "target_audience": [
        "Beginner game developers who are curious about how to make games",
        "Programmers who want to learn how to make games",
        "People who want to learn developing games",
        "Make android gaming apps",
        "Make iOS gaming apps",
        "make indie games using unity software",
        "People who want to learn unity 3D"
      ]
    },
    {
      "title": "Egg Snatchers - Fun Local Multiplayer Game in Unity Netcode",
      "url": "https://www.udemy.com/course/egg-snatchers/",
      "bio": "Learn how to Create Fun Local Multiplayer Games to play with Family & Friends using Unity Netcode",
      "objectives": [
        "Object Oriented Programming Principles & How to Apply Them to any game",
        "Writing Clean & Reusable Code",
        "Creating a Unique Local Multiplayer Game",
        "Learning how to setup Unity Netcode for Local use",
        "Learning how to Scan the Network and connect to a Local device"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "The Player Controller": [
          "Horizontal Movement",
          "Wall Detection",
          "The Capsule Collider Method",
          "Ground Detection",
          "Simulating Physics",
          "A Better Landing",
          "Jumping on Trampolines",
          "Rough Ceiling Detection",
          "Better Ceiling Detection"
        ],
        "Player Animations": [
          "Idle - Walk - Run Blend Tree",
          "Jump - Air - Land Animations"
        ],
        "Netcode Introduction": [
          "The Network Manager",
          "Player 2 Joins",
          "Transform Synchronization",
          "Animation Synchronization",
          "Your First RPC"
        ],
        "Some Quick Camera Work": [
          "Using Cinemachine",
          "Creating a Target Group",
          "Updating The Target Group"
        ],
        "Egg": [
          "Adding the Egg",
          "Grabbing the Egg",
          "Stealing the Egg",
          "Managing the Egg"
        ],
        "Some General Logic": [
          "Player Placement",
          "The Game Manager"
        ],
        "The Fill Logic": [
          "The Player Fill Manager",
          "The Player Fill",
          "Win & Lose States",
          "A Really Simple UI Manager"
        ],
        "Adding Powerups": [
          "Speed",
          "Spawning the Powerup",
          "Picking up Powerups",
          "Invisibility",
          "Some Polish for the Invisibility"
        ],
        "The Local Scene": [
          "Setup",
          "Local Game Manager",
          "Creating a Game",
          "The IP Scanner",
          "The IP Buttons"
        ]
      },
      "requirements": [
        "Unity 2022.3 or higher",
        "Some Unity Knowledge will definitely help",
        "Some C# Knowledge will definitely also help"
      ],
      "description": "Hey Guys,\nLet's Create a Fast-Paced and Hilarious 2D Multiplayer Game in Unity!\n\n\nIf you’re excited to develop a Local Multiplayer game that’s all about strategy, speed, and a little bit of chaos, then you’re in the right place!\n\n\nIn this course, I’m diving deep into every aspect of game development to create an egg-citing game where the goal is simple—Grab the Egg and don’t let go! But beware, this is no ordinary egg hunt.\n\n\nYour Characters will undergo a unique transformation. They’ll Lose Color when they’re not holding the egg. But as soon as they snatch that egg, they’ll Fill with vibrant color, making them the center of attention. And here’s the twist—if you’re the first to be completely empty, you lose!\n\n\nWe’ll start by setting up a Rock-Solid Foundation for our Character Controller.\nThen, you’ll learn how to implement an IP Scanner to make connecting with your friends a breeze. No more complicated setups—just straight-up multiplayer fun!\n\n\nOnce everything is set up, it’s time to Jump into the action!\n\n\nWe’ll cover aspects of Game Dev & Unity Netcode to ensure your game is not only fun to play but also looks great and runs smoothly.\nFrom coding responsive controls to custom physics that make the jump pads feel just right, you’ll gain a comprehensive understanding of Unity’s powerful tools.\n\n\nI’ll show you how to architect your game for Local Multiplayer, ensuring that everyone has a blast. I’ll even throw in some Tips & Tricks to make sure your development process is as smooth as possible.\n\n\nAnd of course, I’ll top it off with some Final Polish—adding sound effects, haptics, and vibrant particles to make every jump, grab, and victory feel amazing! (Coming Soon)\n\n\nThere’s even more to the course, so make sure to check out the Curriculum. I’ve kept a few surprises to keep you on your toes!\n\n\nAre you ready to level up your game development skills and create an Egg-cellent Multiplayer Game? Join me on this thrilling journey, Enroll now!\n\n\nExtra Packages!\n\n\nP.S. Don’t forget to grab the Complete Source Code attached to the last lesson (Just before the Bonus Lecture). You’ll definitely want to dive into that!\n\n\nP.S. bis : Admob implementation is coming in the upcoming weeks too =)",
      "target_audience": [
        "Those who want to Create Unique Local Multiplayer Games to play with Family & Friends",
        "Those who want to Explore Unity Netcode For GameObjects",
        "Those who want to Level Up there Coding & Thinking Skills",
        "Those who want to support my work"
      ]
    },
    {
      "title": "Designing scenes using GridMaps with Godot and Blender",
      "url": "https://www.udemy.com/course/designing-scenes-using-gridmaps-with-godot-and-blender/",
      "bio": "Step by Step scene design using GridMaps with Godot and Blender",
      "objectives": [
        "Create 3D resources in Blender.",
        "Export the resources to a glb file to be used in an external application.",
        "Load the resources into GODOT",
        "Create MeshLibraries with our own resources.",
        "Add Physics to our resources.",
        "Design a scene with the use of multiple GridMap nodes.",
        "Create a model that can be controlled by the player to navigate and interact with the scenario."
      ],
      "course_content": {
        "Introduction": [
          "basic concepts and shortcuts"
        ],
        "Blender. Creating the building parts": [
          "Creating the base",
          "Assigning the materials",
          "Separating the sections",
          "Adjusting the sections",
          "Making individual sections",
          "Adjusting the origin point",
          "Creating a slope",
          "Renaming the sections",
          "Exporting"
        ],
        "Godot. Startup settings": [
          "Creating the project"
        ],
        "Godot. Building GridMap": [
          "Importing the models",
          "Adding the collisions",
          "Saving the scene",
          "Creating the map scene. Pt 1",
          "Creating the map scene. Pt 2",
          "Working with orthogonal view",
          "Saving the Mesh library",
          "Working with a second GridMap",
          "Moving through floors",
          "Fixing the Scene"
        ],
        "Godot. Creating the player": [
          "Player's scene. Pt 1",
          "Player's scene. Pt 2",
          "Keyboard configuration",
          "Creating the player's script",
          "Rotating the camera",
          "Logic for falling",
          "Logic for moving",
          "move_and_slide configuration"
        ],
        "Godot. Testing": [
          "Testing the scene"
        ],
        "Godot. Material Transparency": [
          "Distance Fade",
          "Cull Mode",
          "Fixing the scene"
        ],
        "Godot. Move_and_Slide behavior": [
          "Testing different configuration"
        ],
        "Blender. Interior objects": [
          "Creating a pot",
          "Creating a table",
          "Creating a painting frame",
          "Creating a whiteboard",
          "Creating a sofa",
          "Creating a big sofa",
          "Creating a box",
          "Pot materials",
          "Table materials",
          "Frame materials",
          "Whiteboard materials",
          "Sofa materials",
          "Big sofa materials",
          "Box material",
          "Renaming the figures",
          "Exporting"
        ],
        "Godot. Objects GridMap": [
          "Adding the collisions",
          "Creating the GridMap",
          "Configuring the cells",
          "Testing the scene. Pt 1",
          "Designing the first floor",
          "Designing the second floor",
          "Testing the scene. Pt 2"
        ]
      },
      "requirements": [
        "Basic understanding of Blender",
        "Basic understanding of Godot",
        "Basic understanding of GDScript / Python"
      ],
      "description": "Hello and welcome.\n\n\nIf you are a designer who is interested in creating 3D scenarios for video games with the flexibility to modify these scenarios at any time in the game engine or in the 3D editor, this course is for you.\n\n\nThis course focuses on creating our own resources to design a complete 3D scene with the help of a grid map.\nFor that, we will use GODOT as the game engine and Blender as the 3D editor.\n\n\nIn Blender, we'll create multiple glb files. Each file will contain various figures that will represent parts of the scenario.\n\n\nIn GODOT, we will import the glb files to create multiple libraries that we will use as resources for the grid map. and after that, we'll use the grid map to lay out the scenario.\n\n\nIn this course you will learn:\nCreate 3D resources in Blender.\nExport the resources to a glb file to be used in an external application.\nLoad the resources into GODOT.\nCreate MeshLibraries with our own resources.\nAdd Physics to our resources.\nDesign a scene with the use of multiple GridMap nodes.\nCreate a model that can be controlled by the player to navigate and interact with the scenario.\n\n\nThis course may be attractive to you because it can serve as a basis for creating a video game prototype that may require design changes without the need to update the 3D resources that are part of the scenario.\n\n\nIn addition, you will have access to the content created during the course.\n\n\nI hope you find the content useful and that you can apply it to your personal projects.\nHave fun and happy learning.",
      "target_audience": [
        "3D designer that want to create a video game and use their own assets",
        "Software developers that want to create a video game"
      ]
    },
    {
      "title": "Hands-On AI Development with Godot 4",
      "url": "https://www.udemy.com/course/hands-on-ai-development-with-godot-4/",
      "bio": "Craft Intelligent Game Characters using Godot 4, from scratch",
      "objectives": [
        "Setup a Godot 4 project from scratch (objects, scene, scripts, etc)",
        "Implement a Finite State Machine",
        "Implement different AI States such as Attack, Chase, Retreat",
        "Implement a Waypoint System",
        "Implement different Sensors such as Range, Field of View, Raycast"
      ],
      "course_content": {},
      "requirements": [
        "Basic programming experience required (GDScript)"
      ],
      "description": "Hands-On AI Development with Godot 4: Craft Intelligent Game Characters\nUnlock the Power of AI and Elevate Your Games to Unprecedented Heights.\n\n\nAre you ready to take your game development skills to the next level? Do you dream of creating game characters that think, strategize, and interact like never before? Look no further! Introducing Hands-On AI Development with Godot 4 – your guide to creating characters that feel alive.\n\n\nWhy This Course?\nCraft Intelligent Characters: This course is your gateway to crafting game characters that come to life with their own decisions and behaviors. From dynamic attacks to strategic retreats, you'll master the art of AI-driven gaming.\nPractical Learning: Say goodbye to theory-heavy lessons. Dive straight into hands-on projects that will make you a coding maestro. You'll watch your characters evolve with each line of code, learning by doing.\nBeginner to Pro: Whether you're a Godot enthusiast or completely new to game development, my step-by-step approach ensures everyone can follow along. No prior AI knowledge required – just a passion for learning!\n\n\nCourse Highlights\nDynamic Behaviors: Build a solid foundation by creating characters that can switch between behaviors seamlessly. Implement dynamic behaviors like chasing, retreating, and strategizing, ensuring a diverse and captivating gameplay experience.\nWaypoint Systems: Discover how to create mesmerizing character movement patterns. Your characters will follow paths and make navigation a breeze, creating engaging gameplay experiences.\nDetection Mechanisms: Learn the art of detection using range, field of view, and raycasts. Your characters will sense players and objects, reacting smartly and creating immersive environments.\n\n\nYour Instructor - Adrian\nWith years of experience in game development and a knack for teaching, Adrian is the perfect guide for your AI journey. Their friendly and down-to-earth approach will make even complex concepts feel like a breeze.\n\n\nEnroll Today and Level Up Your Game!\nJoin Adrian and a community of like-minded learners as you embark on a transformational adventure into the realm of AI-driven game development. Say goodbye to static characters and hello to intelligent beings that engage, surprise, and captivate players like never before.\n\n\nReady to unlock the future of game development? Enroll now and let's dive into the fascinating world of AI with Godot 4!\n\n\nBreathe life into Your Games today.",
      "target_audience": [
        "Godot beginners who want to learn how to implement their own Artificial Intelligence NPC"
      ]
    },
    {
      "title": "Creating A Space Shooter in Godot",
      "url": "https://www.udemy.com/course/creating-a-space-shooter-in-godot/",
      "bio": "GDScript Development",
      "objectives": [
        "create spawners",
        "create a space shooter",
        "use groups",
        "layers and masks",
        "reusable scenes and scripts",
        "file organization",
        "reimport assets with different settings"
      ],
      "course_content": {
        "Introduction": [
          "Where to Download Godot",
          "Project Setup"
        ],
        "Game Making": [
          "Scrolling Background",
          "Window Multiplier",
          "Player Setup",
          "Player Movement",
          "Player Animation",
          "Diagonal Movement",
          "Game Barriers",
          "Shooting",
          "Creating Power Ups",
          "Animating Power Ups",
          "Power Up Spawner",
          "Power Up Activation",
          "Shields",
          "Multishot",
          "Small Changes",
          "Enemy Setup",
          "Enemy Shooting",
          "Memory Leak",
          "Vertical Movement",
          "Enemy Spawner",
          "Bullet Hit",
          "Health and Shield Damage",
          "Health Gain",
          "Stop Shooting Allies",
          "Spawn Animations",
          "UI Creation",
          "Updating UI",
          "Particle Explosions",
          "Game Over"
        ]
      },
      "requirements": [
        "Have a working computer"
      ],
      "description": "Learn to create games in the Godot game engine using a python-like programming language, GDscript.\n\nIn this course, we will create a Space Shooter game that is cross-platform for MacOS, Windows, Linux, Android, IOS or even embed into a browser.\n\nWhile on your game development journey you will gain the skills and ability to create the Space Shooter you want.\n\n****If you have no experience in coding or want to familiarize yourself with the language, my course on learning the GDscript language is recommended to help at least learn basic code terminology and structure****\n\n\nYou will learn:\nThe layers and masks\nTo create spawners\nUse Groups\nReusable scripts and objects\nInventory Management\nReimporting of assets with different settings\nThe importance of file organization\nand more...\n\n****If you have no experience in coding or want to familiarize yourself with the language, my course on learning the GDscript language is recommended to help at least learn basic code terminology and structure****\n\nGodot provides a huge set of common tools, so you can just focus on making your game without reinventing the wheel.\nGodot is completely free and open-source under the very permissive MIT license. No strings attached, no royalties, nothing. Your game is yours, down to the last line of engine code.",
      "target_audience": [
        "Godot developers that want to learn how to make a space shooter game"
      ]
    },
    {
      "title": "Create an Adventure Game with PowerPoint",
      "url": "https://www.udemy.com/course/create-an-adventure-game-with-powerpoint/",
      "bio": "Create a choose your own adventure game in PowerPoint",
      "objectives": [
        "Learn to create a choose your own adventure game in PowerPoint",
        "Learn to draw characters and backgrounds using Microsoft PowerPoint",
        "Learn how to create action buttons to link buttons to different actions",
        "Learn to create player choices in your game",
        "Learn how to use photos for actors and backgrounds in your game",
        "Learn how to effectively remove backgrounds from photos of your actors to put anyone in your created game",
        "Learn how to create a ruby doo mystery game and reveal the villain",
        "learn to create a barry potta dating sim",
        "Learn to create animations with triggers"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Course overview"
        ],
        "Creating an adventure game main menu": [
          "Basic setup and creating a main menu",
          "Creating the background for our menu",
          "Making our buttons work"
        ],
        "Adding Characters": [
          "Drawing our first character",
          "Drawing a character, using the eyedropper tool and the art of reusing art",
          "Placing the character in the game with his first words",
          "Creating the second character",
          "Creating the second character and getting her to talk",
          "Creating emotions"
        ],
        "Gameplay": [
          "Creating the first player choice",
          "Creating the fork in the road",
          "Placing photos for objects and removing the photo's background",
          "Second emotion",
          "Creating Choices within the same scene",
          "How to name objects and trigger animations",
          "How to advance post choice",
          "Enter the portal",
          "Take a selfie",
          "Welcome to the real life",
          "Adding audio",
          "Exporting your game"
        ],
        "Ruby Doo investigation team": [
          "Ruby Doo investigation team",
          "Make a villain mask with eye holes",
          "Asking villain questions and creating an audio response",
          "Big Villain Reveal"
        ],
        "Barry Potta and the Bogwarts Dating Sim": [
          "Barry Potta Speed draw",
          "Bogwarts dating sim final result"
        ]
      },
      "requirements": [
        "Microsoft PowerPoint",
        "Access to a computer",
        "Interest and passion for creating games or novels"
      ],
      "description": "Ever wanted to create you own game without expensive software?\nEver wanted to create a game without the steep learning curve and difficult to learn coding?\nDid you love those choose your own adventure novels as a kid (I did) and want to make your very own for the new decade?\nThen this is the course for you! Learn to create an adventure game using nothing but basic PowerPoint, a software that is readily available on just about every windows computer at home, school, office and the library.\nWe will go through the basics for beginners and work our way up to more advanced techniques.\nLearn how to: create clickable menus, action buttons, triggers, multiple different animation, create a branching story line, basic flat design drawing for backgrounds and characters, inserting written dialogue, insert audio dialogue to make your characters talk, how to group and ungroup objects how to combine and subtract objects to create amazing new shapes.\nIncluded resource starter packs for making a Ruby Doo mystery game and a Barry Potta dating sim.\nLearn how to create your dream adventure game using nothing but PowerPoint in any style you like. Make a choose your own adventure game, a dating sim and a mystery game all in the one course using nothing but PowerPoint",
      "target_audience": [
        "Writers that want to tell their story in a unique way",
        "PowerPoint Enthusiasts",
        "Beginner Game Developers",
        "Educators"
      ]
    },
    {
      "title": "Total Beginner - RPG Dungeon Crawler in Unity",
      "url": "https://www.udemy.com/course/total-beginner-rpg-dungeon-crawler-in-unity/",
      "bio": "From opening Unity for the first time to Playing your game in the same day!",
      "objectives": [
        "Quickly create a complete 3D dungeon crawler game in Unity with no previous knowledge required",
        "Create an dungeon environment step by step (ground, walls, lighting, props and particles)",
        "Move a character inside the dungeon, handling collisions",
        "Create a simple combat system with a skeleton in the dungeon (hp, attack, animations and equip sword)",
        "Make your game look good with a bit of polishing (Post processing, smooth movements and baking light)",
        "Open the Unity for the first time today and finish the game in the same day!"
      ],
      "course_content": {
        "Getting Started": [
          "What are we going to build?",
          "Disclaimer: This is designed for beginners!",
          "Creating the Project"
        ],
        "Lets build the Dungeon!": [
          "Importing Initial Assets: Low Poly Dungeon Lite + Stylized Free Skeleton",
          "Floor",
          "Walls",
          "Columns",
          "Torches",
          "Ceilling, Boxes and Dust Particles",
          "Finishing the Environment"
        ],
        "Time to move inside the Dungeon!": [
          "Moving the Camera",
          "Rays",
          "Collisions"
        ],
        "Is there an exit?": [
          "Trigger",
          "Observer + UI"
        ],
        "Lets Fight the Skeleton!": [
          "Animations",
          "Refactoring",
          "Attacking the Skeleton",
          "Animating Skeleton",
          "Skeleton Attacking us",
          "Receiving Damage and Dying"
        ],
        "Lost Excalibur": [
          "Equip the Sword",
          "Animate the Attacks"
        ],
        "Cutscene to the Victory!": [
          "Cutscene"
        ],
        "Polishing and Playing!": [
          "Post Processing",
          "Smooth Movement (Tweening)",
          "Baking Lights",
          "Building and Sharing"
        ]
      },
      "requirements": [
        "No previous knowledge is necessary to start this course! You will learn everything from scratch!"
      ],
      "description": "Lets SPEEDRUN your learning! No coding experience? No problem!\nThis course is designed for absolute beginners! you’ll go from \"What is Unity?\" to \"I built my own dungeon crawler!\" in record time. No weeks of theory, no perfectionism, just fast, hands-on fun to spark your game development journey. Whether you’ve never written a line of code or feel overwhelmed by other tutorials, this course breaks everything down into simple, bite-sized steps.\n\n\nWhat You’ll Do:\nStep-by-step 3D dungeon creation: Learn how to build a dungeon from scratch using Unity’s basic tools and no fancy assets or complex scripting required.\nPlayer movement & combat: Navigate your dungeon, pick up a sword, and battle skeletons in a simple yet satisfying combat system.\nCinematic cutscene & ending: Wrap up your game with a short cutscene to give players a sense of accomplishment.\nSuper simple solutions: With over 10 years of Unity experience, I’ve intentionally chosen the most straightforward methods to keep you moving forward without frustration.\nWhy This Course Works:\nZero prior knowledge needed: Every concept is explained from the ground up, as if you’re opening Unity for the first time.\nFocus on fun, not perfection: Skip the lectures on proper coding this is about getting results fast and staying motivated.\nShort, actionable lessons: Each video builds on the last, ensuring you always see progress.\nDesigned for discouraged learners: If you’ve quit other tutorials, this course cuts the fluff and delivers immediate gratification.\nBy the end, you’ll have a complete, playable game and the confidence to tackle more advanced projects.",
      "target_audience": [
        "Anyone intereseted in opening Unity for the first time!",
        "Developers",
        "Artists",
        "Game Designers"
      ]
    },
    {
      "title": "How to make your first game in HaxeFlixel",
      "url": "https://www.udemy.com/course/make-your-first-game-in-haxeflixel/",
      "bio": "Learn how to use Haxe and HaxeFlixel to make simple game. Ideal for game jammers, Java, Javascript or Typescript devs",
      "objectives": [
        "How to make a simple game in HaxeFlixel and get a good understanding of the Haxe programming language",
        "How to use Tiled Map Editor and a bit of Figma"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Do you need to learn Haxe?",
          "What makes up HaxeFlixel - OpenFL, Lime, Flixel"
        ],
        "Setup": [
          "Visual Studio Code setup for development",
          "Using the game-jam-template GitHub repository",
          "What is Lix?",
          "Using the lix game-jam-template Github repo",
          "Speeding up build times with a compilation server",
          "About the next video",
          "Automatically rebuilding on file save",
          "Finishing up"
        ],
        "Adding sprites": [
          "Loading a sprite",
          "Adding keyboard movement to your player",
          "Spritesheet animations",
          "Collisions and gravity - Part 1",
          "Collisions and gravity - Part 2"
        ],
        "Adding a level": [
          "Making a map with Tiled Map Editor",
          "Loading map data",
          "Adding collisions to your level",
          "Adding collectables - Part 1",
          "Adding collectables - Part 2"
        ],
        "Adding UI": [
          "Adding a simple HUD",
          "Formatting Text",
          "Adding a goal to our level",
          "Level completion screen"
        ],
        "Polishing our game": [
          "Linking our levels - Part 1",
          "Linking our levels - Part 2",
          "Adding music and sound effects",
          "Removing some HaxeFlixel branding",
          "Creating a custom preloader",
          "Exporting your game",
          "Final game source code"
        ],
        "Making enhancements": [
          "Mac build notifications",
          "Double jump ability",
          "Adding gamepad controls - Part 1",
          "Adding gamepad controls - Part 2",
          "Before we learn about finite state machines",
          "Adding a finite state machine to our sprite - Part 1 - setting up",
          "Adding a finite state machine to our sprite - Part 2 - using case switch",
          "Adding a finite state machine to our sprite - Part 3 - using FlxFSM",
          "Adding a finite state machine to our sprite - Part 3 - fixing FlxFSM bugs"
        ]
      },
      "requirements": [
        "You have some basic programming knowledge i.e. know what an if statement is.",
        "Not be afraid to use the terminal/command prompt",
        "Willing to try using design and level editing tools"
      ],
      "description": "Haxe is a great programming language. Flixel is a great game engine. Put them together and you get something pretty magical, HaxeFlixel. After using this engine for almost two years now I've seen the same questions crop up again and again from beginners.\nThe official HaxeFlixel beginners tutorial is great but personally, I like to learn from videos and because there weren't many at the time of creating this I thought I'd create my own to teach beginners.\nBy the end of this course, you should feel comfortable making a 2D platformer that will work on the web, and natively on your platform of choice.",
      "target_audience": [
        "People who have a passion to make games, 3D or 2D",
        "Those who have done some web development before or have done some very basic coding."
      ]
    },
    {
      "title": "Create your first video game from scratch without coding",
      "url": "https://www.udemy.com/course/create-your-first-video-game-without-coding/",
      "bio": "Develop a game from scratch with the free Stencyl game toolkit. A game development course for everyone",
      "objectives": [],
      "course_content": {
        "Introduction": [
          "An introduction to the course",
          "Installing the free development tools",
          "A demonstration of the game we're creating"
        ],
        "Create a game and add a player with controls": [
          "Create the main scene and add a player",
          "Controlling the player and adding animation",
          "Prevent the player leaving the screen"
        ],
        "Creating obstacles and enemies": [
          "Creating an obstacle to avoid",
          "Making obstacles move on their own",
          "Making the obstacles spin",
          "Solution - position asteroids at a random location",
          "Understanding collision sensors",
          "Quickly creating additional enemy types",
          "Temporarily disabling enemies during development"
        ],
        "Create objects on-the-fly": [
          "Creating a laser for the player to fire",
          "Controlling the movement of lasers"
        ],
        "Understanding keyboard controls": [
          "Understanding keyboard controls"
        ],
        "Implementing collision detection": [
          "Managing collisions between lasers and enemies",
          "Solution - Collisions between player and enemies",
          "Modifying collision shapes for accurate detection",
          "Challenge - Create accurate collision shapes for the player",
          "Solution - suggested collision shapes for player",
          "Setting the player's collision shapes as sensors",
          "Understanding debug drawing",
          "Creating custom damage (HP) points for the enemy",
          "The Collision Quiz"
        ],
        "Using a custom triggered event": [
          "Applying damage using a custom events (triggers)"
        ],
        "Understanding the Debug Console": [
          "Displaying debug messages"
        ],
        "Visual special effects": [
          "Making an obstacle fade away when destroyed"
        ],
        "Progress review": [
          "A review of our achievements"
        ]
      },
      "requirements": [
        "No prior knowledge of video game development is required",
        "No prior knowledge of programming is required",
        "Students will need a computer that runs Windows, Mac OS X or Linux",
        "Games for iPad / iPhone can be developed on Windows, Linux or Mac, but a Mac is required to publish games to the Apple App Store"
      ],
      "description": "Update November 2020: Please note that this course is no-longer being updated, and some of the features in Stencyl have changed since the course was last updated. New students have advised that this course is still useful to them, because many of the concepts and features presented are still valid. For this reason, I am leaving the course open, so everyone can enjoy the content indefinitely. I am unable to answer your questions directly, but please do make use of the student features to assist each other, and also join the official Stencyl forums... there are many people there who will be willing to assist you.\nLearn game development with a qualified ICT Teacher, experienced IT Trainer and author of Learning Stencyl 3.x Game Development: Beginner's Guide (Packt Publishing, May 2013).\nThis course is for anyone who wants to learn how to create video games for fun or profit. No knowledge of game development or computer programming is required to start this course.\nNo artistic skills are required - you'll learn where to legally obtain free, top-quality graphics and music to use in your games.\nDuring the course, you will learn how to use free game development tools for Windows, Linux or Mac OS X, to create video games - starting with a blank screen, and working through to a completed product that can be sold or shared on Flash game portals. You can sell your games or implement advertising to earn money every time someone plays your game!\nYour first video game will have:\nVisual effects (explosions!)\nAnimation\nSound effects\nIntroduction screen\nGame-over screen\nScoring\nYou will be creating Flash games during the course because it's incredibly fast to build and test the games, but the skills you will learn can be used to develop games for iPhone and iPad (you'll need a Mac to test or publish to Apple mobile devices), so you will be able to sell your games on the Apple iTunes Store.\nWhen you have completed your first video game, you will then learn how to build the framework for a platform game with an animated player, accurate collision-detection and a horizontal scrolling screen.\nCourse Requirements\nAll the tools required to complete this course are completely free-of-charge - if you have a Windows or Linux PC, or an Apple Mac, you're ready to start this course right now!\nIf you can turn on a computer and use a mouse, then you have all the skills you need to begin creating your first video game.\nAll video training materials have been recorded in High-Definition using professional-quality audio equipment for an enjoyable learning experience. (Be sure to select HD in the video player!)\nYour instructor\nInnes Borkwood, is a qualified IT teacher, experienced trainer, and published author of the game development book Learning Stencyl 3.x Game Development: Beginner's Guide (Packt Publishing, May 2013), who has taught many students, young and old, to create their own video games for fun or profit.\nJoin Innes now, and start creating your first video game today.",
      "target_audience": [
        "Beginners who want to create their own video games",
        "Experienced game-developers and designers who want to learn how to create rapid prototypes and complete games",
        "Teachers who need to quickly learn the relevant skills required to teach their students"
      ]
    },
    {
      "title": "C++ Unreal Engine + AI Tools: Idea to Steam Release Game Dev",
      "url": "https://www.udemy.com/course/c-unreal-engine-ai-tools-idea-to-steam-release-game-dev/",
      "bio": "Learn to design, develop, and publish a complete zombie survival game using Unreal Engine 5, C++, and AI—completely solo",
      "objectives": [
        "Build a complete third+first-person zombie survival game from scratch.",
        "Organize your project with clean code and class structure.",
        "Use Unreal Engine 5 and C++ to create real gameplay systems.",
        "Create Game Design Document",
        "Create smart zombie AI with behavior trees and perception.",
        "Design a wave-based enemy system with day and night cycles.",
        "Build hitscan and projectile weapons like rifles and grenades.",
        "Add UI elements like health bars, ammo counters, and wave timers.",
        "Create a working inventory and loot pickup system.",
        "Add sound effects, lighting, fog, and blood FX.",
        "Save and load game progress using Unreal’s SaveGame system.",
        "Package and publish your finished game to Steam like a pro."
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Tools"
        ],
        "Game Core Structure": [
          "Tools and Assets",
          "From Idea to Publishing",
          "Develop Idea",
          "Game Design Document - Roadmap",
          "Game Design Document - Class Hierarchy",
          "Game Design Document - Visual Diagram",
          "Game Design Document - Process Diagram"
        ],
        "Deadwood Stand": [
          "Create Project",
          "Setup IDE",
          "GitHub Version Control - Optional",
          "Player Character",
          "Possess Character",
          "Player Input",
          "Input Mapping Context",
          "Camera Spring Arm Components",
          "Jumping, Sprinting and Crouching",
          "Stamina System"
        ],
        "Zombie World": [
          "Lighting and Fog",
          "More Trees",
          "Night Street Lights",
          "Flashlight",
          "Fire Effects"
        ],
        "Animations": [
          "Import Animations",
          "Retargeting Animations",
          "Motion Matching",
          "Jump",
          "Crouch"
        ],
        "Combat System": [
          "Game Mode",
          "Player Controller",
          "Weapon Assets",
          "Interactable Hierarchy",
          "Interactable Interface and Pickup",
          "Cross UI",
          "Actor Trace",
          "Highlight Interactable",
          "Weapon Base",
          "Pickup Weapon",
          "Current Weapon in Character",
          "Pistol Animations",
          "HitScan Weapon",
          "Reload",
          "Reload Montage",
          "Shotgun",
          "Projectile Weapon",
          "Rifle Projectile",
          "Automatic Weapons",
          "Grenade Launcher"
        ],
        "UI System": [
          "Import Assets",
          "Dynamic Crosshairs",
          "Crosshair Base Widget Blueprint",
          "Rifle Crosshairs",
          "Shotgun Crosshairs",
          "Default Dot Crosshair",
          "Fixing Target",
          "Aiming and Shooting Factors",
          "Crosshairs Spread Affects Target Hitting",
          "Health and Stamina Bars",
          "Progress Bar Design",
          "Stamina Design",
          "Weapon Bar",
          "Current Weapon Info",
          "Weapon Slots"
        ],
        "Inventory": [
          "Inventory",
          "Inventory Component",
          "Update Weapon Slots Info",
          "Update Slots Info",
          "Weapons Swap",
          "Good Coding Practice"
        ],
        "Zombies": [
          "Take Damage",
          "Zombie Base Character",
          "AI Controller",
          "Behavior Tree and Blackboard",
          "Hearing Sense",
          "Zombie Types and Animations",
          "Zombie Characters and Animations",
          "Zombie Animation Blueprint Template",
          "Headshot",
          "Patrol System",
          "Update Target Actor Regularly",
          "Zombie Attack",
          "Screamer Zombies",
          "Reaper Zombies",
          "Reaper Zombie Animations",
          "Melee Attack and Zombie Dodge",
          "Dodging Damage",
          "Juggernaut Zombies",
          "Zombie Biting"
        ],
        "World": [
          "Day Night Cycle",
          "Spawner",
          "Zombie Spawner",
          "Pickup Spawner"
        ]
      },
      "requirements": [
        "Basic knowledge of Unreal Engine (Blueprint or interface familiarity is enough)",
        "Some understanding of programming (C++, Python, or any language is helpful)",
        "A computer capable of running Unreal Engine 5 smoothly",
        "Internet connection for using AI tools, plugins, or assets",
        "Willingness to learn, experiment, and follow a full project to the end"
      ],
      "description": "Dead2Rise – Build & Publish a Complete Game Using Unreal Engine 5, C++ and AI\nWelcome to the most practical and complete game development course for solo creators.\nIn this course, I’ll take you step by step through the full process of building a third + first-person zombie survival horror game from scratch—all using Unreal Engine 5, C++, and the power of AI tools to help you speed up your workflow and unlock your creativity.\nWe’ll be building Dead2Rise, a dark and gritty zombie wave survival game set in an Old West town. You’ll scavenge during the day and defend yourself at night against hordes of undead enemies. And the best part? You’ll do everything yourself—even publish it on Steam—with full confidence.\n- What You'll Learn:\nHow to plan and design a full game from concept to publishing - Game Design Document\nSetting up a clean Unreal Engine 5 project for long-term development\nCreating a shared character base for both the player and zombies\nSetting up Enhanced Input for smooth movement, aiming, jumping, sprinting, and crouching\nProgramming intelligent zombie AI with three enemy types: Screamers, Reapers, and Juggernaut zombies. They can see, hear and chase you + they can dodge your melee attacks and patrol when you are not in range.\nBuilding a wave-based survival system with a day/night gameplay loop\nDesigning a full combat system with both hitscan and projectile weapons (rifles, pistols, shotguns, grenade launcher)\nAdding immersive UI elements (health bar, stamina bar, ammo counter, wave timer)\nCreating an inventory and loot system with medkits, ammo, and weapon pickups\nImplementing sound, ambient music, zombie FX, blood decals, lighting, fog, and VFX\nSaving and loading your game using a proper SaveManager and SaveGameObject\nOrganizing your code with a professional class hierarchy and modular architecture\nUsing AI tools like ChatGPT to write code, design systems, generate ideas, and solve problems instantly\nVersion controlling your project with GitHub—only tracking what you need\nPackaging and publishing your game to Steam\n- Why This Course Is Different:\nI created this game and this course completely solo using the same tools I teach. This isn’t theory. This isn’t a collection of features. This is a real project, taught the way real games are built.\nYou won’t just “follow along”—you’ll understand how to build your own systems, how to solve your own problems, and how to finish your own games. With Unreal Engine, C++, and AI, you’ll have full creative freedom and complete control.\nBy the end of the course, you won’t need to ask “how do I build a game?” again.  You’ll know. And you’ll be ready to build whatever game you want—independently.",
      "target_audience": [
        "Anyone who wants to use AI as a personal game development assistant",
        "Solo developers who want to build real games from start to finish",
        "Who want to skip theory and build something they can actually release",
        "Unreal Engine users who want to learn C++ in a real-world game project",
        "Programmers who want to expand into game design and publishing"
      ]
    },
    {
      "title": "Inventory & Shops in Godot!",
      "url": "https://www.udemy.com/course/inventory-in-godot/",
      "bio": "Pick up items, display the player's inventory, drop, use, or equip items, and trade items with NPCs.",
      "objectives": [
        "Learn different methods for letting the player pick up items.",
        "Manage the player's inventory data and display their items in an inventory menu.",
        "Drop, use, or equip items from the player's inventory.",
        "Trade items with an NPC character."
      ],
      "course_content": {
        "Introduction": [
          "Setup",
          "Coins",
          "Polish",
          "Pick Up",
          "Inventory",
          "Items",
          "Consumables",
          "Equipment",
          "Shop"
        ]
      },
      "requirements": [
        "Students should have completed \"Dialogue & Events in Godot\"",
        "Or have a Godot project ready with a playable character and assets for items and their icons."
      ],
      "description": "Welcome to my course on Inventory & Shops in Godot!\nYou're welcome to join our discord server to work on this course alongside your peers.\nThis course is a continuation of Dialogue & Events in Godot, but can be followed and applied to any project that involves picking up items, adding them to an inventory, dropping, using, or equipping items from an inventory menu, and trading items with an NPC.  In this course, we will cover different methods of picking up items, managing the player's inventory data, displaying their inventory on the UI in a menu, allowing the player to interact with their inventory in different ways, and trading items with NPCs.\nWhen you're done, you'll have a simple inventory system for your game that is easily customizable in its presentation and function.  You'll also learn useful skills for working with the Godot game engine; organizing and designing your projects to be more scalable.  You will be learning how to code with GD script, with everything explained in detail.  We will apply object oriented design principles in our scripts; Inheritance, Encapsulation, Abstraction, and Polymorphism, to keep them organized, customizable, and reusable for a project of any size.\nAll of the project files are also available on GitHub if you need to review the project as it was after completing each lesson.  These videos were recorded using Godot version 4.2.2.  The project starts with assets from KayKit's Character & Dungeon Remastered Packs made by Kay Lousberg, Basic GUI Bundle made by Penzilla, and Fantasy Icons Pack made by Shikashi.  All are available to download for free on itch.  Extra sound effects made by Valenspire are also included and are available from FreeSound.",
      "target_audience": [
        "First time game developers, or anyone switching over to the Godot engine from other engines.",
        "Experienced 2D game developers who are interested in learning about 3D.",
        "Anyone who has completed beginner tutorials but would like to learn real game infrastructure that is scalable."
      ]
    },
    {
      "title": "Unity C# - An in-depth mobile Game Development course",
      "url": "https://www.udemy.com/course/unity-c-an-in-depth-mobile-game-development-course/",
      "bio": "Create, publish, and monetize your own mobile games using Unity and C# | Mobile Game Development | Android | iOS",
      "objectives": [
        "Gain the necesasry knowledge and confidence to build your own mobile games using the Unity game engine and the C# scripting language",
        "Explore a variety of ways available for capturing and using different user inputs to provide students a wider, more versatile arsenal to use in their own games",
        "Having a look at how to monetize mobile games through In-App purchases and ads.",
        "Investigating different optimazation options available in C# and Unity to improve the performance stability of mobile games",
        "Taking a deeper look in different ways to improve the visual presentation of games through the Shader Graph, Lighting settings, Post Processing effects, etc.",
        "Help students feel more confident with C# through code analysis and in-depth discussions behind implementations within scripts",
        "Exposing a wide range of API calls and functionallities hidden within the Unity game engine/C#",
        "All material shown in the course are also documented in the resources tab to assist students on fully comprehending the lectures,",
        "The course constantly encourages students to apply the knowledge gained into practice, as well as modifying the projects based on their own personal preferences"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Teaching Style"
        ],
        "Galaxy Surfer - An infinite runner mobile game": [
          "Game Design - What will we be making?",
          "Prototyping Player Movement - Create the basis of our movement",
          "Capturing input swipes - Understanding how to capture and translate player input",
          "Setting up Obstacles - Spawning obstacles for the player to dodge",
          "Randomizing Obstacle Tiles",
          "Finishing up our movement script",
          "Powering up our Tiles - Spice up our tiles in obstacles",
          "Skybox - Change up the looks of our environment through skybox textures",
          "Storing Player Scores - Creating a scoring system and storing it the easy way",
          "Coding Challenge",
          "Binary Save System - Storing data in a more secure way (The \"hard\" way)",
          "User Interface - Building up our UI",
          "TextMeshPro - A deeper look into the the text mesh pro component",
          "Elevating the player experience of our game",
          "Shader Graph - Elavating our visuals using Shaders",
          "Create your own shader",
          "Ads - Make profits through ads",
          "Make a rewarded ad",
          "Final touches and play-testing",
          "Ideas for future impovements"
        ],
        "Hex Out - Building a Tower Defence mobile game": [
          "Game Design - An overview of what we will be creating,",
          "Using Tile Maps to build our level - Making our playground",
          "Using Artificial Inteligence to inteligently allow our player character to move",
          "Adding mobile compatability - Capturing screen touches to move our player",
          "Building up Towers - It wouldn't be a tower defence game without the towers",
          "Taking into account the player's position - Building up towers (part 1)",
          "Leveled up Hexes - Focusing on the Hex's functionality",
          "Visually upgrading our game through materials and lighting",
          "A brain teaser for you to solve",
          "Redirect the player to the closest hex - Building up towers (part 2)",
          "Shooting Dummies - Creating an Pooling system to spawn our enemies",
          "Set up our defences - Allow our turrets to shoot down enemies",
          "Create your own pooling system",
          "SO MANY CHANGES - Applying necessary changes to our game",
          "Connecting our map together - Bridge up our levels",
          "Adding additional items",
          "Nav Mesh Components - Discussing the various navigation tools available in Unity",
          "Code readability - Tips on making code more readable",
          "Optimization time - Improving the perfomance of our game",
          "Playtesting our game- Final thoughts",
          "In-app Purchases - Making a profitable game"
        ],
        "Extra Resources Section": [
          "Gyroscope and Accelerometer"
        ]
      },
      "requirements": [
        "A basic understanding of the Unity game engine and C# scripting language",
        "A passion for gaming"
      ],
      "description": "This course focuses on providing the necessary knowledge and tools to develop mobile games using the Unity game engine and the C# (c-sharp) programming language.\nThe ultimate and primary goal of the course is to explore the vast majority of functionalities commonly found in mobile games and provide students with a greater understanding of how they operate behind the scenes as well as how to implement them in their own games.\nThe course has been developed in December 2022 and aims to provide the most updated and latest features of Unity.\nIn addition, the contents of the course will be updated weekly to ensure top quality to students.\nLectures cover material in detail and easy-to-understand examples to ensure that all students are able to keep up with the pace of the course and fully comprehend its content. Furthermore, additional resources are provided for each lecture that students can use to review new concepts explored as well as do their own research for a more thorough understanding. Resources provided are in most cases linked to the official documentation of either Unity or C#, or alternatively to trusted and reviewed external resources.\nIn any case, instructors are active daily and answer questions raised by students within a few hours.\nTo allow students to fully capture the potential of mobile devices, the course will be going into detail about how to capture different types of user inputs and showing examples of how to fully utilize them in games.\nThe user inputs covered in this course have been inspired by the most popular mobile games and these include the following:\nTouches, Swipes, Double taps, Accelerometer inputs (Mainly used for screen shakes), and Gyroscope inputs (Orientation of device in space).\nIn addition, the course will cover how to implement ways to monetize mobile games and gain revenue through Ads and In-App purchases.\nThe course focuses on the programming side of game development, exploring different API calls available for us to use, and different types of data structures as well as providing general guidelines to improve the coding experience of students. Each aspect will be discussed and explained to enable students of all backgrounds to keep up with the course.\nAll of the above will be taught within 3 different projects which will serve as a vehicle for teaching the course.\nTwo of the projects will be mobile games inspired by popular mobile games, and the last project will be a bonus project covering techniques that weren't applicable in the two games.\nThe first game will be a runner game, which is one of the most influential genres for mobile gaming and it only seemed appropriate to include a runner game within our course.\nThe second game will be a tower defense game, which is a genre that has been booming in the past few years in the mobile game development industry, with the genre getting increasingly more popular as the years go by for mobile games.\nThese two games will allow us to explore a wide variety of functionalities found in mobile games, in Unity, and in C# whilst developing them.\nEach game developed provides plenty of room for students to apply their own personal preferences and reflect their style within the games, as well as ways to apply the knowledge gained on their own.\nI am a HUGE supporter of learning by doing, so students will be given small assignments which will serve as tiny challenges for students to tackle and practice the knowledge they gained in a real-life scenario. Throughout the development, I provide my opinion on different aspects of game development and how I approach different scenarios to give you a glimpse of how game developers react to different circumstances. The purpose of giving out assignments or challenging you is not to annoy you, but to put the knowledge gained to practice so you are able to get comfortable with the work process of game development, and due to this, none of the assignments are being marked to avoid students getting stressed over them.\nA discord server is in place which attempts to unite game developers together and enable students to meet like-minded people to create game development teams, create friendships, and also ask questions and get support for their development journey.\nThank you for your time and I hope to see you in the lectures :)",
      "target_audience": [
        "People with a basic understanding of Unity/C# and are interested to take their knowledge to the next level",
        "A beginner of Unity/C# that wants to understand how to make and monetize mobile games"
      ]
    },
    {
      "title": "Unity 5 pro multiplayer combat using melee & ranged weapons",
      "url": "https://www.udemy.com/course/unity-5-pro-multiplayer-combat-using-melee-ranged-weapons/",
      "bio": "in depth, step by step video lectures on building an online massive multiplayer combat system",
      "objectives": [
        "create realistic multiplayer combat using melee weapons and ranged weapons",
        "synchronize among multiple online players' damage, armor attributes, and health",
        "use spawn points and respawn players once killed.",
        "Foundation of Virtual Reality games"
      ],
      "course_content": {
        "Overview": [
          "Course overview, get to know your instructor",
          "Download and open the starting Unity project",
          "Demo of the running multiplayer project",
          "Overview of the Unity scene objects and mechanics"
        ],
        "Melee combat": [
          "Setting up taking damage synchronization on server and clients",
          "Setting up attack and defense areas on the Dummy character",
          "Adding the main character area that deals damage",
          "Programming the weapon attack and shield blocking",
          "Triggering a hit on a player character",
          "Applying damage on other player on weapon hit",
          "Killing and respawning player when hit",
          "Fixing the hit error when hitting the dummy",
          "Triggering blocking and preventing random damage",
          "Computing damage dealt and taken using player attributes",
          "Counting the total number of player kills",
          "Adding colliders on weapons and shields",
          "Finalizing server client melee combat damage",
          "Spawning gear on the floor (part 1)",
          "Spawning gear on the floor (part 2)"
        ],
        "Range fights": [
          "Working on ranged damage adding firebolts",
          "Triggering firebolts from main player character",
          "Dealing damage with firebolts",
          "Creating a special skill bar",
          "Hooking the skill bar button to triggering firebolts",
          "Enable Skill bar on game start only"
        ],
        "Ranged Weapons - Archery": [
          "Ranged weapons - Adding bows and arrows models",
          "Creating the bow prefab object",
          "Programming the archery weapon type",
          "Creating the epic bow loot item",
          "Creating the bow item slot",
          "Creating the bow inventory item",
          "Add the Hook script to the bow",
          "Equipping the bow ranged weapon",
          "Setting equipped bow size rotation and offset",
          "Capturing the current equipped weapon type",
          "Programming the player draw arrow animation"
        ],
        "Programming arrows": [
          "Programming the player draw arrow animation",
          "Spawning and shooting arrow",
          "Modifying the arrow particle and explosion",
          "Arrow timing fixes"
        ],
        "Bonus": [
          "Bonus"
        ]
      },
      "requirements": [
        "know how to download and open Unity",
        "Basic programming knowledge is recommended",
        "use a Windows PC, MAC o Linux"
      ],
      "description": "Important: all software used are FREE to download and use on PC, LINUX and MAC computers (no need to pay, cheers!)\nIn this course you will learn how to use Unity3D to build a professional multiplayer combat system.\nWhy would you want to learn how to build a combat system? Because any good online multiplayer game out there uses a combat system where players can fight eachother in player versus player mode and players can also team up together to fight powerful enemies and bosses. This is the core foundation of multiplayer games.\nAll the great games out there are using it, look at Star Wars, or World of Warcraft or MineCraft or even Pokemon. That's exactly what you will be making by taking this course. We will start by creating melee combat using shields and sword fighting and then we will go into ranged combat using magic firebolts and bows and arrows. Isn't it exciting already?\nThis course can be taken by anyone even if you've got no programming skills. This course is meant for non-artists, meaning you don't have to be an artist to be able to use 3D pixel art graphics since this course provides all the necessary assets for you. The only tool we use in this course is Unity 3D, and it's completely free to use. No need to spend extra money.\nThis course is easy to follow along since all the steps are shown to you in the video lectures, so you can't possibly miss a step, and it's a lot more fun that reading documentation\n\n\nThe skills that are taught in this course are the foundation of any professional video games and they can be applied to all your future projects.\nJoin the course now, you've got nothing to lose because if i don't deliver, you'll get a full refund. I'll see you in the videos lectures and in the course forum.",
      "target_audience": [
        "gamers",
        "game enthusiasts",
        "computer students",
        "art students",
        "geeks",
        "cool teenagers"
      ]
    },
    {
      "title": "Extending the Unity Editor with Custom Tools - Crash Course",
      "url": "https://www.udemy.com/course/unity-editor/",
      "bio": "A practical course on making your own Unity Editor Tools",
      "objectives": [
        "How to create your first Editor Extension",
        "Use MenuItems",
        "Customize Folder Icons",
        "Access & Manipulate any File or Folder by Code"
      ],
      "course_content": {
        "The Game Plan": [
          "The Game Plan"
        ],
        "Menu Items": [
          "The First Menu Item",
          "Adding more Menu Items",
          "We only want Folders"
        ],
        "The Project Window": [
          "Red Rectangles everywhere",
          "How to know which column we are in ?",
          "The Folder Rect",
          "First Colored Folder",
          "Saving the Folder State",
          "Resetting the Folder Texture",
          "Picking a Custom Folder Texture"
        ],
        "Data": [
          "Creating a Custom Data File using JSON",
          "Saving our Custom Data"
        ],
        "Bonus Section": [
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "Basic C# Knowledge",
        "The will to enter Unity's guts",
        "The Love for Experimentation"
      ],
      "description": "This might be the most practical course on making a Unity Editor Extension you’ve seen.\nYeah this is also kinda niche right ?\nBut ! I’m glad this is something new to you cause this might totally change how you work.\n\n\nIn this course, I’m going to show you how I created Mineral, a Unity Extension that allow you to customize your folders.\nAfter finishing this course, you will be able to colorize your folders, and also replace their icons.\nThat’s not it, the method I’ll show you will unlock a whole world of possibilities as you will learn how to deal with:\n\n\nMenuItems\nValidation Methods\nUsing Editor methods to Edit the GUI (Graphical User Interface)\nUsing GUIDs (Global Unique Identifiers)\nUsing the AssetDatabase class\nAccessing & Editing the Editor Preferences\nSaving Data using JSON\nAnd more…\n\n\nUnity does come with a plethora of functions that allow you to extend the editor.\nYou will learn techniques that will drastically improve your workflow & help you create your own Unity Tools.\nThe only limit will be your imagination.\n\n\nDo you feel that is something that will help you be a better dev ?\nSomething that can help you save time ?\n\n\nIf that's the case, Jump aboard, and Let's Begin!",
      "target_audience": [
        "Developers willing to improve their understanding of Unity",
        "Developers willing to create their own Unity Tools / Packages",
        "Curious people who want to know how I made Mineral"
      ]
    },
    {
      "title": "Master Unity and C# By Developing 5 Super Mario Games",
      "url": "https://www.udemy.com/course/unity-super-mario-games/",
      "bio": "Create Dance Dance Mario Mix, Super Mario Bros, Mario Sunshine, Mario Baseball, and a VR game for Google Cardboard!",
      "objectives": [
        "Develop 5 Super Mario games in Unity using C#",
        "Create a Dance Dance Revolution Mario Mix game for mobile",
        "Build a Super Mario VR game for Google Cardboard",
        "Develop a 2D Super Mario Bros. game for PC and Web",
        "Create a Super Mario Baseball game for Android and iOS",
        "Develop a Super Mario Sunshine version of Jetpack Joyride",
        "Learn how to develop Artificially Intelligent (AI) enemies in Unity using C#",
        "Create exciting power-up effects like Mega Mario, Fire Mario, Metal Mario, and Mini Mario",
        "Learn how to program swinging on rope, swimming, and other physics driven behaviors",
        "Packed with professional C# coding techniques to level you up as a developer",
        "Practice industry standard version control techniques with GitHub",
        "Over 17 hours of content"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Program Install and Setup": [
          "Section Introduction",
          "Unity Hub",
          "Unity",
          "Visual Studio",
          "Android Studio",
          "XCode",
          "Github",
          "Fork",
          "Section Summary"
        ],
        "DDR - Mario Mix Mobile (Android and iOS)": [
          "Section Introduction",
          "Game Design Document and Game Mechanics",
          "Project Setup",
          "Start Screen",
          "Level Design",
          "Lighting",
          "Program Mario to Dance",
          "User Interface",
          "Playing in the Editor",
          "Considerations When Building for Mobile",
          "Building for Android",
          "Playing on Android",
          "Building for iOS",
          "Playing on iOS",
          "Section Summary"
        ],
        "Super Mario Bros - 2D Game Development (PC and Web)": [
          "Section Introduction",
          "Game Design Document and Game Mechanics",
          "Project Setup",
          "Creating an Animated Start Screen",
          "Main Menu",
          "Options Screen",
          "Coding a Reusable Game Framework",
          "World Intro Screen",
          "Building Level 1 - Goomba's Grounds",
          "Level 1 - Level Design",
          "Mario Movement and Controls",
          "Camera Movement and Follow Player Logic",
          "UI",
          "Mario State Logic",
          "Item Base Class",
          "Coins",
          "Stars",
          "Fire Flower",
          "Mushroom Base Class",
          "Red Mushroom",
          "One Up Mushroom",
          "Mega Mushroom",
          "IBreakable Interface",
          "Block Base Class",
          "Block Trigger Class",
          "Brick Block",
          "Item Block",
          "Solid Block",
          "Pipe",
          "Level 1 - Part 2 (Enter through Pipe)",
          "Spring",
          "AI Base Class",
          "Goomba",
          "Koopa Base Class",
          "Green Koopa",
          "Red Koopa",
          "Flying Green Koopa",
          "Flying Red Koopa",
          "Game Over Logic",
          "Pause Menu",
          "End of Level Flag and Castle Logic",
          "Level 1 - Final Level",
          "Building Level 2 - Underground",
          "Level 2 - Level Design",
          "Blue Brick Block",
          "Blue Item Block",
          "Blue Solid Block",
          "Moving Platforms",
          "Level 2 Intro Sequence",
          "Level 2 - Final Level",
          "Building Level 3 - Sky Level",
          "Level 3 - Level Design",
          "Mushroom Platforms",
          "Level 3 - Final Level",
          "Building Level 4 - Snowy Hill",
          "Level 4 - Level Design",
          "Ice Platforms",
          "Snow Particle Effect",
          "Mr. Blizzard",
          "Frost Piranha",
          "Level 4 - Final Level",
          "Building Level 5 - Graveyard",
          "Level 5 - Level Design",
          "Dry Bones",
          "Gray Brick Block",
          "Gray Item Block",
          "Gray Solid Block",
          "Level 5 - Final Level",
          "Building Level 6 - Underwater Treasures",
          "Level 6 - Level Design",
          "Cheep Cheep",
          "Blooper",
          "Level 6 - Final Level",
          "Building Level 7 - Bowser's Castle",
          "Level 7 - Level Design",
          "Swinging Rope / Chain Logic",
          "Animated Lava",
          "Bowser Boss Fight",
          "Level 7 - Final Level",
          "Bugfixes and Polish",
          "Playing our Super Mario Bros. Game",
          "Creating a PC/Standalone Build",
          "Playing the Game on PC",
          "Considerations when building for Web",
          "Web Build Settings",
          "Creating a WebGL Build",
          "Playing the Game in the Web Browser",
          "Section Summary"
        ],
        "Jetpack Joyride + Super Mario Sunshine (Android and iOS)": [
          "Section Introduction",
          "Game Design Document and Game Mechanics",
          "Project Setup",
          "Start Screen",
          "Intro Cutscene",
          "Scrolling Background",
          "Player Movement and Jetpack Controls",
          "Coins",
          "Petey Piranha",
          "Bullet Bill",
          "Bowser",
          "Bananas and Pineapples",
          "1up Mushroom",
          "Mini Mushroom",
          "Metal Mario Armor",
          "Mega Mushroom",
          "UI",
          "Item Block and Super Star",
          "Game Over Screen",
          "Playing in the Editor",
          "Building for Android",
          "Playing on Android",
          "Building for iOS",
          "Playing on iOS",
          "Section Summary"
        ],
        "Super Mario Baseball (Android and iOS)": [
          "Section Introduction",
          "Game Design Document and Game Mechanics",
          "Project Setup",
          "Start Screen",
          "Level Design",
          "Waluigi (Batter)",
          "Kritter (Pitcher)",
          "Hitting the Ball",
          "UI",
          "Playing in the Editor",
          "Building for Android",
          "Playing on Android",
          "Building for iOS",
          "Playing on iOS",
          "Section Summary"
        ],
        "Super Mario VR - Google Cardboard Game Development": [
          "Section Introduction",
          "Game Design Document and Game Mechanics",
          "Project Setup",
          "Google Cardboard SDK for Unity",
          "Main Menu",
          "Level 1: Outer Space",
          "Level 2: New Heights",
          "Level 3: Bowser's Castle",
          "Building for Android",
          "Building for iOS",
          "Playing on iOS",
          "Section Summary"
        ],
        "Course Summary and Wrap-Up": [
          "Course Summary and Wrap-Up"
        ]
      },
      "requirements": [
        "A computer running Mac, Windows, or Linux",
        "Basic knowledge of Unity and C#",
        "Google Cardboard for VR Section (Optional)"
      ],
      "description": "In this course we will use Unity and C# to develop 5 Super Mario video games:\nDance Dance Revolution - Mario Mix\nSuper Mario Bros.\nSuper Mario Sunshine (Jetpack Joyride style)\nSuper Mario Baseball\nSuper Mario VR (for Google Cardboard)\n\n\nHere are some more details on each of the games we will develop:\nDance Dance Revolution - Mario Mix\n3D game development\nAnimated start screen\nIn-game audio\n3D dance animations\nRotating disco lights effect\nPattern timing and coordination\nAndroid and iOS\n\n\nSuper Mario Bros.\n2D game development\n7 levels\nEnemy AI including:\nGoomba\nKoopa\nFlying Koopa\nDry Bones\nCheep Cheep\nBlooper\nMr. Blizzard\nFrost Piranha\nBowser (boss fight)\nItems and Power-ups including:\nFire Flower\nRed Mushroom\nMega Mushroom\n1up Mushroom\nPC and Web\n\n\nSuper Mario Sunshine (Jetpack Joyride style)\n3D game development\nInfinite Runner / Sidescroller style\nEnemy AI:\nPetey Piranha\nBullet Bill\nBowser\nPower-ups:\nMini Mushroom\nMega Mushroom\nMetal Armor\n1up Mushroom\nFruit\nSuper Star\nAndroid and iOS\n\n\nSuper Mario Baseball\n3D game development\nMario sports style game\nWaluigi is up to bat, Kritter is pitching\nTap the screen to hit the ball\nAndroid and iOS\n\n\nSuper Mario VR\n3D Virtual Reality Game Development\nGoogle Cardboard SDK for Unity\nMain Menu that uses gaze tracking\n3 levels\nBy the end of this course you will have 5 Super Mario games you developed in Unity using C# and have an intricate knowledge of the Unity game engine that you can use to develop professional quality games and content for your portfolio. Are you ready to master Unity game development? If so, then in the words of our favorite plumber dressed in red, \"Here we goooo!\"",
      "target_audience": [
        "Anyone that wants to build 5 awesome Super Mario games in Unity using C#",
        "Anyone that wants to gain mastery of the Unity Game Engine",
        "Aspiring game developers that want to build professional quality games for their portfolio",
        "Video game fans that are curious how to build Super Mario Games"
      ]
    },
    {
      "title": "Unreal Engine 5 - Introduction & Fundamentals",
      "url": "https://www.udemy.com/course/unreal-engine-5-introduction/",
      "bio": "The Ultimate Unreal Engine 5 Beginner's Course: Learn Fundamentals and Build a Game!",
      "objectives": [],
      "course_content": {
        "Course Introduction": [
          "Introduction",
          "Course Goals and Structure",
          "Key Tips for Success",
          "Learn to Make Your Dream Game"
        ],
        "Programming Fundamentals E-Book": [
          "Read and Review the Provided E-Book",
          "Test Your Programming Knowledge!"
        ],
        "Unreal Engine 5 Setup": [
          "Introduction & Setup",
          "Create New Unreal Engine Project",
          "Install FX Variety Pack (OBSOLETE)",
          "UPDATE - Installing FX Variety Pack using Fab.com",
          "Let's Design our Prototype"
        ],
        "Creating the Lightning Tornado Obstacle": [
          "Introduction",
          "Creating a Lightning Tornado Blueprint Actor",
          "Adding Collision to the Tornado",
          "Detecting the Player Character (Casting)",
          "Launching the Player",
          "Adding Sound on Hit",
          "Deactivating the Tornado",
          "Activating the Tornado",
          "Ambient Sound"
        ],
        "Adding Functionality to the Player Character": [
          "Introduction",
          "Applying Damage to the Player (Functions)",
          "Determining if the Player is Dead (Macros)",
          "Managing Player Death",
          "Creating a Widget"
        ],
        "Building an Interactable Switch": [
          "Introduction",
          "Press E To Interact",
          "Create the Switch Actor",
          "Create an Interactable Interface",
          "Creating a way to Turn Off the Swtich",
          "Adding a Turn On Function",
          "Resetting the Switch Automatically"
        ],
        "Goal Location": [
          "Introduction",
          "Fix the Collider Bug",
          "Add Player Feedback (Text, Sound, Reset"
        ],
        "Bringing Everything Together": [
          "Introduction",
          "Adding Sound to the World",
          "Building the Puzzle",
          "Testing our Puzzle",
          "BONUS: Learn More!"
        ]
      },
      "requirements": [
        "No programming experience or Unreal Engine experience required. Everything you need will be taught or reviewed in this course."
      ],
      "description": "Are you eager to dive into the world of game development? Perhaps you are new to programming or game design and are looking for the perfect place to get started. Look no further!\nThis free course is the ideal starting point. Designed with beginners in mind, this course will teach you the essentials of programming and game development while guiding you through the creation of a puzzle game prototype in Unreal Engine 5 using Blueprints.\nCourse Highlights:\nComprehensive Learning: Build a strong foundation in both programming and game development. This course covers the basics in a way that is easy to understand, even if you have no prior experience.\nHands-On Project: Engage in practical learning by creating your own puzzle game prototype. You'll be guided step-by-step through the entire process in Unreal Engine 5, utilizing Blueprints to bring your game to life.\nExclusive E-Book: Enhance your learning with our free e-book, which delves into programming fundamentals, the Unreal Engine Gameplay Framework, and other topics. This resource is yours to keep and will be an invaluable reference as you progress in your game development journey.\nUser-Friendly Content: The course is structured to be beginner-friendly, ensuring that you can follow along and succeed, regardless of your starting point. Each section is designed to build on the previous one, reinforcing your understanding and skills.\nEngaging and Exciting: Learning to develop games should be fun! The course is designed to be both engaging and exciting, keeping you motivated and eager to learn more. You'll see your skills grow as you work on a real project, providing a sense of accomplishment and readiness to tackle more complex challenges in the future.\nThis course will help you turn your creative ideas into reality with Unreal Engine. Whether you're aiming to develop games as a hobby or aspiring to a career in the industry, this course will set you on the right path.\nDon't miss out on this opportunity to learn, create, and have fun with game development.",
      "target_audience": [
        "Beginner Game Developers looking to get started with Unreal Engine or any other engine"
      ]
    },
    {
      "title": "Unity 2D Advance Point and Click Game(Like Monkey Island)",
      "url": "https://www.udemy.com/course/unity-2d-advance-point-and-click-gamelike-monkey-island/",
      "bio": "Unity 2D Advance Point and Click Game(Like Monkey Island)",
      "objectives": [
        "Learning Game Development",
        "work with fungus",
        "Editing game and making puzzles",
        "Making an adventure game like monkey island"
      ],
      "course_content": {},
      "requirements": [
        "just a pc"
      ],
      "description": "Join us on a fun journey through the world of point-and-click adventure games like The curse of Monkey Island ! In this course, we'll explore games where you use your mouse or touchpad to interact with the game world. No prior experience is necessary, and no coding experience is need to know, its ready project which you will learn how to make it in any adventure style that you want. also  – we'll start from the basics and gradually work our way up.\nThroughout the course, you'll learn:\nHow to navigate through different game environments by clicking on objects and characters.\nHow to make items and make a Puzzle from it .\nHow to combine Items and make new items from them.\nHow to put sound effect sounds and also voice over sound for speeches.\nSolving puzzles and challenges by interacting with items and using your problem-solving skills.\nDiscovering captivating stories and characters as you progress through the game.\nUnderstanding the unique gameplay mechanics and storytelling techniques that make point-and-click adventures so engaging.\nand more ...\nWhether you're a seasoned gamer or new to the world of video games, this course offers a relaxed and enjoyable introduction to the wonderful genre of point-and-click adventure games. So grab your mouse and get ready for an exciting adventure!",
      "target_audience": [
        "Everyone"
      ]
    },
    {
      "title": "Beginner 3D Terrain Creation using Gaea for Unreal Engine",
      "url": "https://www.udemy.com/course/beginner-terrain-creation-using-gaea-for-unreal-engine/",
      "bio": "A beginner-friendly course teaching you the fundamentals of Gaea",
      "objectives": [
        "Create realistic 3D terrains",
        "Master Gaea fundamentals and learn the user interface",
        "Importing the terrain in Unreal Engine 5 and learning the Gaea 2 plugin for Unreal",
        "How to apply an auto landscape material to decorate the terrain with foliage and rocks"
      ],
      "course_content": {
        "Getting started": [
          "Introduction",
          "A Note on Gaea 2",
          "Prerequisites - Installing Gaea and Unreal Engine 5"
        ],
        "Creating A Realistic Terrain in Gaea": [
          "Learn Gaea's User Interface",
          "Our first two nodes: MultiFractal and Erosion",
          "Adding a hero mountain",
          "Rivers, lakes, snow and forests",
          "Adding textures and color (satmaps)"
        ],
        "Exporting the terrain and textures, and importing in Unreal Engine 5": [
          "Exporting The Terrain",
          "Importing The Terrain in Unreal Engine 5"
        ],
        "Gaea 2": [
          "Gaea 2 Introduction",
          "How to Install and Use the Gaea 2 Unreal Engine Plugin to Import Terrain"
        ],
        "Extra - Optional Videos": [
          "Using Arboreal tree map to place trees in Unreal Engine with PCG - Part 1 of 2",
          "Using Arboreal tree map to place trees in Unreal Engine with PCG - Part 2 of 2"
        ]
      },
      "requirements": [
        "You need not have any prior experience to take this course. The only requirement is installing Gaea and Unreal Engine 5, both come in free versions."
      ],
      "description": "Gaea is a world-class terrain creation software widely used in the gaming and film industries. In this beginner-friendly course, you'll be introduced to the fundamentals of Gaea, learning how to create realistic terrains from scratch and import them into Unreal Engine.\nUPDATE 25th October 2024: Videos on Gaea 2 are in the making, the first video is already included in the course (How to install and use the Gaea 2 plugin for Unreal Engine).\nThis course is ideal for beginners interested in 3D environments. You'll start with the basics of Gaea and get a brief introduction to Unreal Engine. A significant portion of the course focuses on using Gaea's graph-based node editor, allowing you to harness its power to create stunning terrains.\nNo prior experience with Gaea or Unreal Engine is required. Both software options offer free versions, making this course accessible to anyone eager to explore terrain creation.\nYou'll discover how Gaea's node-based system enables non-destructive creation and how procedural generation techniques can effectively mimic natural formations. After completing your work in Gaea, we'll move on to exporting the terrain and importing it into Unreal Engine 5.\nPlease note that this is a Gaea-focused course. It does not cover foliage, materials, etc. in Unreal Engine. However, by the end of the course, you'll have a terrain in Unreal Engine, ready for further decoration.",
      "target_audience": [
        "Beginner to intermediate artists",
        "Game developers and environment artists",
        "3D modelers and digital artists",
        "Freelancers and indie creators",
        "Hobbyists and enthusiasts",
        "Indie game developers"
      ]
    },
    {
      "title": "Manage your own Minecraft Server without coding experience",
      "url": "https://www.udemy.com/course/learn-how-to-manage-run-a-minecraft-server-with-no-coding/",
      "bio": "Get started and learn how to run your own Minecraft Server with no coding experience!",
      "objectives": [
        "How to manage your first minecraft server without needing to know coding!",
        "No need to spend 100s of dollars to start your own minecraft server!",
        "No risks! Everything is simple to learn and very useful!",
        "Easy to learn! Grow your skills with my help!",
        "Have a basic understanding on how to config files."
      ],
      "course_content": {
        "Introduction": [
          "Introduction to the course",
          "Introduction to Pterodactyl Panel",
          "Introduction to Plugins and Spigotmc.org",
          "Introduction to MarketPlaces",
          "What are Permissions?",
          "Introduction to Luckperms aka Permissions",
          "Introduction to PlaceholderAPI (placeholders)",
          "Introduction to Chat codes!",
          "Introduction to Hex Codes (Part 1)",
          "Implementation of Hex Codes (Part 2)",
          "Introduction to Moderating your Minecraft Server",
          "Introduction to structure of Configuration files",
          "README"
        ],
        "Code Plugins with AI": [
          "Introduction to Codella AI (Code Simple Plugins with ease)"
        ],
        "Plugins": [
          "PlaceHolderAPI",
          "Viaversion (Allow Players to join from multiple Versions)",
          "Authentication Plugin (NLogin - For Offline Minecraft Servers)",
          "SpawnPoint Plugin (Set a Global Spawn Point for your Minecraft Server)",
          "How to setup Voting Rewards Part 1",
          "How to setup Voting Rewards Part 2",
          "CommandPanels (Custom Menus) - Part 1",
          "CommandPanels (Custom Menus + Custom Head) - Part 2",
          "TAB (Tab & Scoreboard)",
          "HellConomy (Enable Economy on your MC Server)"
        ],
        "World Management and related.": [
          "How to import worlds & schematics into your minecraft server",
          "Part 2: //Replace | //Replacenear | //Set | //Walls | //Wand"
        ]
      },
      "requirements": [
        "No programing skills needed to learn! You'll be surprised to hear you can run a Minecraft server Without needing to know Java.",
        "You'll need to spend a small amount monthly to host your minecraft server."
      ],
      "description": "Are you discouraged because you believe you need Java to learn how to manage a Minecraft server? Don't be concerned! There are thousands of Minecraft servers running on the market that use both free and premium plugins, and I will show you how to get started! You can thank me later.\nEmbarking on this journey doesn't require advanced programming skills; in fact, you can effortlessly navigate server management with user-friendly interfaces and step-by-step guides. Whether you're a seasoned Minecraft enthusiast or a novice, I'll demystify the process for you. Explore the vast landscape of plugins, from enhancing gameplay with exciting features to optimizing server performance with efficiency tools. Unlock the potential of your server by learning to customize game settings, create player ranks, and implement anti-griefing measures.\nAs you delve into this world of server administration, discover the diverse community that surrounds Minecraft server management. Connect with fellow enthusiasts, share experiences, and stay updated on the latest trends. Whether you're interested in a casual gaming environment or a competitive server, this guide promises to empower you, ensuring that Java is no longer a barrier but a gateway to an enriched Minecraft server experience. So, embrace the possibilities and let your Minecraft journey begin!",
      "target_audience": [
        "Complete Beginners who have never tried hosting their own minecraft server",
        "For people who have patience to go through the course",
        "For people who are willing to put effort into learning this"
      ]
    },
    {
      "title": "2D Spaceshooter for Beginners in Unity:Master Game mechanics",
      "url": "https://www.udemy.com/course/2d-spaceshooter-for-beginners-in-unitymaster-game-mechanics/",
      "bio": "Mastering 2D Space Shooter in Unity: Game Mechanics, Visual Scripting, and Level Design for Beginners",
      "objectives": [
        "Understand Unity Basics",
        "Create Physics-Based Games",
        "Implement Procedural Level Generation",
        "Develop AI and Shooting Mechanics",
        "Build a Complete 2D Spaceshooter",
        "Game Mechanics",
        "Unity Visual Scripting",
        "Level Design"
      ],
      "course_content": {
        "Introduction": [
          "Creating project",
          "Unity interface"
        ],
        "Basic programming": [
          "Variables",
          "Functions",
          "Methods",
          "Rigidbody",
          "Body types",
          "Collisions",
          "statements",
          "Moving gameobjects"
        ],
        "Player": [
          "Adding player",
          "Player movement"
        ],
        "Obstacles": [
          "Adding obstacles",
          "Spawn",
          "Randomizing",
          "Adding effects"
        ],
        "Background": [
          "Environment"
        ],
        "Player Health": [
          "Setting up health",
          "Health mechanics",
          "setting up health ui",
          "Health UI",
          "Damage effect",
          "Extra health",
          "Health spawner"
        ],
        "Shooting": [
          "Creating bullet",
          "Shooting mechanics",
          "Second bullet",
          "Shoot delay",
          "Effect"
        ],
        "Enemy": [
          "Adding enemy",
          "Shooting",
          "Enemy spawner",
          "Damage player"
        ],
        "Scoring": [
          "Adding gems",
          "Score UI",
          "Spawner"
        ],
        "Pickups": [
          "Immortality",
          "Effect",
          "Spawner",
          "Firebonus"
        ]
      },
      "requirements": [
        "Mac or PC capable of running Unity 3D"
      ],
      "description": "Learn to Create Stunning 2D Space Shooter Games in Unity with Game Mechanics, Visual Scripting, and Level Design\nAre you ready to start your game development journey? This course is perfect for complete beginners eager to create their first 2D space shooter in Unity. No coding experience is required—Unity Visual Scripting allows you to bring your ideas to life with simple drag-and-drop tools!\nIn this course, you’ll learn the fundamentals of game mechanics that make platformers fun and engaging. From precise player movement to collectible items and enemies, you’ll create features that make your game stand out. Using Unity’s Visual Scripting, you’ll implement these mechanics without writing a single line of code.\nLevel design is key to crafting an unforgettable gaming experience. You’ll master the principles of level design, learning to create levels that are challenging yet enjoyable. We’ll guide you through the process of planning, prototyping, and polishing your levels to captivate players.\nBy the end of this course, you’ll have a complete, polished 2D space shooter  to showcase in your portfolio. You’ll also gain a solid foundation in Unity, game mechanics, and level design—ready to create more games in the future!\nWhether you’re an aspiring game developer or a hobbyist, this course makes learning Unity easy and fun. Enroll now and start building your dream 2D space shooter  today!\nWhat You Will Learn:\nHow to create a complete 2D space shooter game in Unity from start to finish.\nThe basics of Unity Visual Scripting to build games without coding experience.\nEssential game mechanics for 2D space shooter, including player movement,Shooting, and more.\nLevel design fundamentals to create fun and engaging 2D levels.\nHow to add collectibles, enemies, and obstacles to enhance gameplay.\nTips for using Unity’s tools to build and optimize 2D environments.\nHow to design interactive elements using Unity Visual Scripting.\nStep-by-step guidance to polish and finalize a professional-quality game.\nTechniques for troubleshooting and fixing common Unity development issues.\nHow to prepare and showcase your 2D platformer game",
      "target_audience": [
        "Complete Beginners: This course is perfect for anyone who has never used Unity before and wants to learn 2D game development from scratch.",
        "Aspiring Game Developers: If you have a passion for games and want to turn your ideas into playable projects, this course will provide the essential skills and knowledge you need.",
        "Hobbyists and Enthusiasts: Whether you're a hobbyist looking to develop your first game or an enthusiast wanting to deepen your understanding of Unity, this course offers step-by-step guidance.",
        "Students who want to learn game mechanics,level design and unity visual scripting"
      ]
    },
    {
      "title": "Easy SDL2 Games in C++",
      "url": "https://www.udemy.com/course/easy-sdl2-games-in-c/",
      "bio": "Create simple video games using the Simple Directmedia Layer 2",
      "objectives": [
        "Students will learn how to write basic programs using the C++ programming language utilizing the terminal or a IDE compiler.",
        "The subsystems of the Simple Directmedia Layer 2 will be explained and a student will have the oppertunity to experiement with the API.",
        "A student should be able to create a basic SDL2 application by the end of the course series.",
        "A student will be able to manufacture an application with a simple user interface and a game state.",
        "C++ progamming features related to Object Oriented Programming.",
        "Using the terminal in Linux to compile and build complete projects."
      ],
      "course_content": {
        "Simple Directmedia Layer 2": [
          "Easy SDL2 Games in C++ Trailer",
          "Introduction to SDL2",
          "Game Loop and Window Program",
          "User Defined Functions and C++ Basics",
          "Event Handling for User Input",
          "Rendering Pixels and Other Primitives",
          "Loading Images from External Files",
          "Optimized Surfaces and Sound",
          "Tilemaps and Collision Detection",
          "Error Handling and Memory Management Techniques",
          "OOP Concepts and Constructing Classes",
          "2 Player Games and Split-Screen",
          "Graphical User Interfaces"
        ],
        "Lets Try It! SDL2 Active Learning Sessions": [
          "Installing SDL2 in Ubuntu Linux",
          "Using Vim to compile programs",
          "Creating a make or bash file for SDL2 related projects",
          "How to find helpful information for SDL2",
          "Constructing graphical and audio assets for our projects",
          "Installing a compiler like CodeBlocks and finding other useful tools",
          "Compiling a SDL2 Project in the Terminal",
          "Hello World in C++ and in SDL2",
          "Data types in SDL2 and C++",
          "Basic Mathematics in C++",
          "Control Structures in C++",
          "A basic window program in SDL2",
          "Game Loop in SDL2",
          "Regulating the frames per second as a function in SDL2",
          "Making the Event Loop for keyboard actions.",
          "Loading in a .BMP file using SDL2",
          "Using SDL2_image to load a .PNG format image",
          "Using SDL2_mixer to add sound to a project",
          "Using SDL2_ttf to draw text font on the screen",
          "Using SDL2_net for network support in C++",
          "A basic random card shuffle program in C++ and SDL2",
          "Using enumerations in C++",
          "Unions",
          "Typedef",
          "Reading and writing to file in C++",
          "Data types and using arrays in C++",
          "Logical and Relational Operators in C++",
          "Change the background color with SDL2",
          "Manipulating Strings in C++",
          "Using pointers in C++",
          "Using Structures in C++",
          "Conditional Branching in C++",
          "Operator Overloading in C++",
          "Constructing Classes in SDL2 and C++",
          "Using define and making macros in C++",
          "Unions in C++",
          "Templates in C++",
          "Namespace in C++",
          "Getters and setters in C++",
          "Name visibility in c++",
          "Friend functions in C++",
          "Polymorphism in C++",
          "Inheritance types in C++",
          "Multithreading programs in C++",
          "Vectors in C++",
          "Using push and pop and peak in C++",
          "Linked Lists in C++",
          "Mini-Max tic-tac-toe in SDL2 and C++",
          "Array patterns in C++",
          "Sorting Algorithms in C++ with a Visualizer made in SDL2",
          "Multiple windows in SDL2",
          "Viewports in SDL2",
          "Creating rects and filling the rects in SDL2",
          "Point and Points in SDL2",
          "Mouse input for clicks and motion events in SDL2",
          "Screen scrolling in SDL2",
          "Rotating and flipping images in SDL2",
          "Cropping and simple animations in SDL2",
          "Multiple display regions in SDL2",
          "Basic OpenGL application using SDL2",
          "Collision detection methods using SDL2",
          "Gamepad or joystick support in SDL2",
          "Forcefeed device",
          "Touch gesture device",
          "Screen Shots in SDL2",
          "Manipulating Color in SDL2",
          "Dragging and dropping an image with the mouse in SDL2",
          "Scaling the screen in SDL2",
          "State machines in SDL2",
          "Object factory in C++",
          "Singleton design patterns",
          "A basic client and server application in SDL2",
          "Basic graphical user interface in SDL2",
          "Player and Enemy Classes in SDL2 and C++",
          "Projectiles for the player or enemies in our game",
          "HUD elements such as life or the game score",
          "Options Reset and Gameover States",
          "Level transitions or portals to rooms",
          "Hitbox regions",
          "Smart camera memory management strategies",
          "Dialog text boxes in Games"
        ],
        "SDL2 Game Programming": [
          "Matching Game",
          "Card Game",
          "Board Game",
          "Pong",
          "Breakout",
          "Frogger",
          "Snake",
          "BugSmasher",
          "Tanks",
          "Platformer with Parallax Scrolling",
          "SpaceShooter",
          "Tetris",
          "Top Down Shooter",
          "Basic Role Playing Game Battle System",
          "Quick Fighting Game"
        ]
      },
      "requirements": [
        "There are no other required resources other than access to the internet to download resources and tools and basic digital input devices such as the keyboard and mouse. .",
        "A modern computer with a graphics card (GPU) may be required to access higher features of the Simple Directmedia Layer 2 such as manipulating textures or for later 3D development.",
        "Free time to practice and conceptualize concepts like in normal classes.",
        "Bring your thinking cap and maybe your imagination.",
        "Headphones and paper and pen could be useful."
      ],
      "description": "In Easy SDL2 Games in C++ students will mainly learn about the Simple Directmedia Layer 2 and how to structure basic game applications. SDL2 grants access to low level hardware features for users to develop software using this Application Programming Interface. There is also information contain herein about how to program in the C++ programming language which is useful for those new to the software development scene. The course is a description based structuring of projects using SDL2 also information about other similar APIs for use along side the other systems. The course has 12 parts which are centered around the construction of several game projects. In this lengthy course series students will learn about making simple games such as Snake, Tetris , Breakout , Tank, Space Shooter , Platformer , Top Down Shooter and others. Students should have required resources for using a modern programming configuration to be effective in this course. The Simple Directmedia Layer 2 is a lengthy library with many features to explore and learn. SDL2 can also be combined with other programming languages and tools which may be more helpful for those making other varieties of simulations or system based development. Those interested in learning about SDL2 may find something new here.",
      "target_audience": [
        "Future game developers looking for a fast way to compete using an simple API.",
        "College or Graduate Students who want to learn SDL2.",
        "Hobbiest who like to learn about video game concepts using the Simple Directmedia Layer.",
        "People looking to make simulations for research projects.",
        "Anyone new to the C++ programmin Language.",
        "Someone serious about learning problem solving and programming. I am not doing alot of coding for you that is for you to discover and explore how to do with the hints I give you."
      ]
    },
    {
      "title": "Create games in Unity using Bolt Visual Scripting - NO CODE!",
      "url": "https://www.udemy.com/course/create-games-with-unity-using-bolt-visual-scripting/",
      "bio": "Make Games in Unity using BOLT Visual Scripting! - NO CODE | VISUAL SCRIPTING Online Course 2023",
      "objectives": [],
      "course_content": {
        "Introduction and Setup": [
          "Installing Unity",
          "Adding Bolt Visual Scripting into Unity"
        ],
        "Learning the basics of Bolt Visual Scripting": [
          "Adding objects into Unity",
          "Possible error fix: when you run the game you don't see the objects",
          "Creating the player's movement",
          "Creating the obstacle's animation",
          "Creating the player's death",
          "Next level graph logic",
          "Level 2 setup",
          "Adding sounds into the project",
          "Building the project on the computer"
        ],
        "Creating a 2D Shooter game with Bolt Visual Scripting": [
          "Creating a 2D Shooter game with Bolt Visual Scripting",
          "BONUS: Learn Online Multiplayer Game Development in Unity"
        ]
      },
      "requirements": [
        "No prerequisites but the passion to create games but it will be better if you have even a small knowledge about the components in Unity (Rigidbody, Colliders...)"
      ],
      "description": "By the end of this course, you will be able to speed up your game development process and create your own games in Unity using Bolt Visual Scripting.\nBolt brings complete visual scripting to Unity, empowering artists, designers, and programmers to create gameplay mechanics and interactive systems without writing a single line of code simply by using Flow Graphs which are powerful flow control graphs for low-level logic.\nIf you want to create your own games in a fun way that doesn't take a lot of time - start this course now!\nWhat will you learn in this course?\nThe basics of Bolt Visual Scripting in Unity (Free no-code extension for Unity)\nHow to create and play gameplay mechanics like Movement, Animations, Sounds, Scenes transitions, Shooting & much more!\nBy the end of the course, you will have the knowledge to create simple games by yourself!\nBy the end, you will have 2 complete games you can continue to work on them and share with your friends & family!\nHow to create simple 2D characters using UPA Toolkit: Pixel art editor\n\n\nWhat games will you create?\nThe first game is about a ball trying to reach the top, in its way he has obstacles that he needs to pass to get to the top.\nThe second game is more complex, you are the player trying to make sure the enemies (that spawn from the sky) don't touch the ground, you are able to shoot at the enemies and make them fly away from the ground.",
      "target_audience": [
        "Beginner Unity developers who want to make games without the need to code, easily, fast and free.",
        "People who are interested in learning something new and see the potential of Visual-Scripting."
      ]
    },
    {
      "title": "Introduction to Mobile Game Programming for Beginners",
      "url": "https://www.udemy.com/course/introduction-to-mobile-game-programming-for-beginners-corona-sdk/",
      "bio": "Discover How to Develop Mobile Games from Scratch Utilizing Corona SDK",
      "objectives": [
        "By the end of the course you'll be able to make simple and entertaining mobile games.",
        "You will understand the basics of mobile programming (Displaying graphics, making them move, interacting via touch, and more!)",
        "You will develop a fun game from scratch!"
      ],
      "course_content": {
        "Introduction": [
          "Introduction to Corona SDK",
          "Setting Up Our First Project"
        ],
        "Programming Basics": [
          "Hello World!",
          "Introduction to Variables",
          "Introduction to Tables",
          "Storing Tables Within Tables",
          "Programming Basics Quiz"
        ],
        "Control Structures": [
          "if then elseif else",
          "while loops",
          "repeat loops",
          "for loops",
          "for loops and tables",
          "for loops and tables continued",
          "Introduction to Functions",
          "Understanding Scope",
          "Control Structures Quiz",
          "Important Exercise",
          "Did you do this?"
        ],
        "Programming Our First Game: Virus Infection": [
          "Displaying Our First Virus on the Screen",
          "Creating a Virus Factory - Using a function to create our viruses",
          "Improving Our Virus Factory and Adding a Background Image",
          "Moving Our Virus Around the Screen",
          "Creating a Level Builder Function",
          "Making Our Viruses Respond to Touch Events",
          "Making Our Viruses Grow Over Time",
          "Dispatching a 'VirusDied' Event",
          "Removing Dead Viruses Off the Screen",
          "Removing Dead Viruses Off the Memory",
          "Spawning Our Viruses' Children Onto the Screen",
          "Housekeeping: Removing Unnecessary Print Statements",
          "Setting Up the endGame Function",
          "endGame Function Continued...",
          "Wrapping Up our endGame Function",
          "Restart Game Function",
          "Moving the Player to the Next Level",
          "Background Music and Sound Effects",
          "Adding a Basic Menu",
          "Game Over & Restart Screen"
        ]
      },
      "requirements": [
        "PC or Mac",
        "Corona SDK"
      ],
      "description": "OVER 1,000 SUCCESSFUL STUDENTS HAVE ALREADY TAKEN THIS COURSE\nNEW FEATURE! Full Source Code Shared Lesson-by-Lesson so you can follow along easily!\nLATEST: Course Updated Again On October 31st 2014\n_______________________________________________\nStart programming your own games, with no outlay and no experience whatsoever, immediately - just like my current 1,000+ students! Nothing to pay out at all.\nNo expensive software is needed - and nothing else is required.\nAbout this course:\nOver 1,000 very happy students\nNo expensive software is needed - and nothing else is required.\nFull, free lifetime access\nAll future extra lectures and upgrades are always included for free\nUnconditional Udemy 30 day money-back guarantee - that's my personal promise of your success!\nRegular free surprise bonuses to increase your income even more!\nNow includes image files and place-holder sounds so you can implement the course right away!\nYou also get full, free access to the entire source code of the game we build together in this course! That is a $499 value!\nWATCH OVER MY SHOULDER AS I:\nSet up a Corona SDK project from scratch\nDesign, Program and Tweak a fun and challenging mobile game (YOU GET ACCESS TO THE SOURCE CODE!)\nToday, you can start programming your own mobile game so you too can cash in on this amazing growing industry, with no outlay whatsoever - and with ZERO prior experience!\nWe'll start with your first game, and the sky is the limit with the knowledge you'll acquire in this course.\nThis complete course has been taken by over 1,000 students already - see the amazing reviews below!\nIndie developers such as Dong Nguyen (Creator of Flappy Bird) have reportedly generated over $50,000 per day in earnings from their mobile games (that's $350,000 dollars in a week!).\nNow you can get a piece of that pie and you will need no prior programming knowledge, no super-computers, and you won't need to spend a penny on additional software.\nI stress that you need no prior experience and there's nothing to buy or pay for. Nothing!\nWhat you will learn in this course:\nIn Section 1we go over a quick introduction to Corona SDK and we will set up your very first project.\nIn Section 2 we dive right into programming by making your first \"Hello World!\" program. (No programming course would be complete without one!) We then continue to introduce variables,tables,storing tables within tables and more!\nSection 3 is all about Control Structures. In this section we cover if blocks, while loops, repeat loops, for loops, functions and we also go over the importance of scope.\nSection 4 is where the magic happens and the fun part begins. You will get to program your very first game in this section! You'll learn how to display images on the screen, make the images move and respond to touches, and you'll learn how to create a menu and game mechanics. THIS STUFF IS FUN!\n... and much, much more!\nYou've taken the time to read this far down, and hopefully you've watched some of the preview lessons. Now it is time to take action and get started with the course so you too can be part of this exciting and developing mobile game industry.\nClick the \"take this course\" button, top right, now ...every hour you delay is costing you money...",
      "target_audience": [
        "Beginner Programmers",
        "Programmers Who Wish to Develop Mobile Games",
        "Gamming Enthusiasts Who Want TO Develop Their Own Mobile Games"
      ]
    },
    {
      "title": "UE5 Dialogue System Beginners Introduction Course",
      "url": "https://www.udemy.com/course/ue5-dialogue-system-complete-course/",
      "bio": "How to get characters talking in Unreal Engine 5",
      "objectives": [
        "Plan and write out video game dialogue",
        "Record and edit dialogue for scalable implementation in Unreal Engine 5",
        "Set up a player character and NPC to start a conversation",
        "How to make a selectable dialogue play system in unreal engine 5."
      ],
      "course_content": {
        "Introduction": [
          "The tools you will need",
          "Download and install Unreal Engine 5.6 and above and Audacity for Audio Editing"
        ],
        "Creating dialogue for your game": [
          "Planning out dialogue for your game",
          "Use what you have to create your in game dialogue",
          "An introduction to voice recording in Audacity",
          "Recording lines and basic edits to audio",
          "How to Organize Audio Files Professionally",
          "Creating the Unreal Engine Project And importing dialogue and folders into it",
          "How to Add Audio Files To Unreal Engine"
        ],
        "Creating The Dialogue System in Unreal Engine": [
          "Add an NPC to the world",
          "Detecting and interaction components",
          "Communicating to the NPC Blueprint",
          "Repositioning the player character for dialogue",
          "Setting up the dialogue component function",
          "Adding an Exit dialogue button",
          "Final explanation of dialogue preparation process",
          "Adding A Voice Component to the NPC",
          "PLAYING your first line of Dialogue from the NPC"
        ],
        "Logic Flow and interactivity within the dialogue system": [
          "Making the player character play a line of dialogue",
          "Play dialogue on selection",
          "Show dialogue text",
          "Progress Dialogue Additions",
          "Adding a Skip Dialogue Button",
          "Stop all dialogue on exit",
          "Auto exit dialogue on end of voice lines",
          "Skip Dialogue And Custom Functions",
          "Adding a selectable camera system",
          "Final Knowledge Check"
        ]
      },
      "requirements": [
        "A computer with at least 8 GB of DDR RAM and at least a 1GB Vram Graphics card and an SSD.",
        "A processor with a minimum of 4 Cores to follow the lessons for speed of audio editing and for running Unreal Engine"
      ],
      "description": "Learn the basics of how to setup a dialogue system inside of unreal engine 5. This course is made to be easy to understand and follow regardless of your prior game development experience. And by the end you will have a full understanding of how to make a dialogue system inside of unreal engine and will be able to adjust it for your specific needs.\n\n- How to plan out writing for your video game.\n- How to get good voice acting for your video game.\n- How to get good game audio on a budget.\n- How to properly us directional spacial audio inside of unreal engine\n- How to plan out and manage up to hundreds and even thousands of files and recordings on large scale games with a lot of voice work.\n\n\n1. Creating a dialogue system in unreal engine\n2. Setting up the dialogue system so that it is scalable to multiple characters\n\nHi, I am HyperDev, the premier Unreal Engine game development teacher. As a professional teacher, I know that learning game development needs to be done in a step by step manner with each step fully explained. So all of my tutorials are made with that level of quality.\n\n\nEvery video is packed full of clearly explained and illustrated techniques so the further in you go the better a game developer you will be.",
      "target_audience": [
        "Developers looking to learn how to utilise Unreal Engine to make games",
        "Solo developers looking to get a framework for how to implement a Dialogue system in Unreal Engine",
        "Beginners to game development who are thinking about making a narrative driven game using Unreal Engine",
        "Game directors looking for a template for how to ogranize Voice acting Data for large scale video games"
      ]
    },
    {
      "title": "Learn to code with C++ UE5 Game Development",
      "url": "https://www.udemy.com/course/learn-to-code-with-c-ue5-game-development/",
      "bio": "Make a game in Unreal with C++ programming!",
      "objectives": [
        "Code in C++",
        "Build a game",
        "Run C++ applications",
        "Design a game level"
      ],
      "course_content": {
        "00a Course Overview": [
          "01 Course Overview - Build Your First C++ game In Unreal Engine 5"
        ],
        "00b Code Editor Introduction": [
          "01 Install Visual Studio With C++"
        ],
        "00c Learn to Code from Scratch in C++": [
          "00 Build A New Console Application",
          "01 Build Variables To Store Data",
          "02 Build Functions To Perform Tasks",
          "03 Build Functions With Parameters",
          "04 Build Functions That Return Values",
          "05 Build Conditionals To Separate Code Flow"
        ],
        "00d Build Pointers and References in C++": [
          "01 Build Pointers To Store Memory Addresses",
          "02 Build References To Access Variables-2"
        ],
        "00e Build Classes and Objects in C++": [
          "01 Build Classes To Represent Objects",
          "02 Get And Set Private Variables",
          "03 Set Object Properties With Parameterized Constructors",
          "04 Point To And Reference Object Properties And Functions"
        ],
        "00f Unreal Introduction": [
          "00 What Is Unreal Engine 5",
          "01 How To Install UE5",
          "02 How To Debug Unreal And Visual Studio"
        ],
        "01 Set Up a First Person Shooter CPP Project": [
          "01 Build A New Unreal Project",
          "01B Run Visual Studio As Administrator",
          "02 Quick Win - Shrink A Cube Upon Hit"
        ],
        "02 Build an Enemy with CPP": [
          "01 Build An Enemy Controller C++ File",
          "02 Build A Visual Enemy Component In Unreal"
        ],
        "03 Dynamically Spawn Enemies with CPP": [
          "01 Spawn Enemies With A Game Mode",
          "02 Build Enemy And Game Mode Blueprints"
        ],
        "04 Build Enemy Movement and Lifespan": [
          "01 Make Enemy Chase Player",
          "02 Set Enemy Lifespan"
        ]
      },
      "requirements": [
        "No experience necessary"
      ],
      "description": "Learn to code with C++ UE5 Game Development\nAlexandra Kropova is a software developer with extensive experience in full-stack web development, app development and game development. She has helped produce courses for Mammoth Interactive since 2016, including the Coding Interview series in Java, JavaScript, C++, C#, Python and Swift.\nWhen does the course start and finish?\nThe course starts now and never ends! It is a completely self-paced online course - you decide when you start and when you finish.\nHow long do I have access to the course?\nHow does lifetime access sound? After enrolling, you have unlimited access to this course for as long as you like - across any and all devices you own.\nMammoth Interactive is an online course provider in everything from learning to code to becoming a YouTube star. Mammoth Interactive courses have been featured on Harvard’s edX, Business Insider and more.\nOver 11 years, Mammoth Interactive has built a global student community with 1.1 million courses sold. Mammoth Interactive has released over 250 courses and 2,500 hours of video content.\nFounder and CEO John Bura has been programming since 1997 and teaching since 2002. John has created top-selling applications for iOS, Xbox and more. John also runs SaaS company Devonian Apps, building efficiency-minded software for technology workers like you.",
      "target_audience": [
        "Anyone interested in coding C++ for game development"
      ]
    },
    {
      "title": "Unity 3D Game Development by Example",
      "url": "https://www.udemy.com/course/unity-3d-game-development-by-example/",
      "bio": "Learn how Unity3D “Thinks” by understanding Unity’s UI and project structure to start building fun games in Unity 3D.",
      "objectives": [
        "Understand the basic project structure and the other core elements of a Unity Game",
        "Find out what it takes to build a “Scene” – a Unity3D game level",
        "Jump into Unity Scripting as you learn to implement basic Interactivity",
        "Discover the secrets of game audio (3D sounds and Music) in Unity3D",
        "Master the Unity3D GUI and GUISkin system to create your own UI",
        "Forge links between scenes to turn disparate levels into a cohesive game",
        "Create High Score Lists and other user retention systems using Unity3D",
        "Transform your PC or Mac game into an Android game using Unity3D’s multi-platform capabilities and Unity3D Pro for Android."
      ],
      "course_content": {
        "Learn how Unity Thinks": [
          "Understanding Unity UI",
          "Unity3D Project Structure",
          "Game Objects and Components",
          "Introducing Monodevelop",
          "Creating Your First Component",
          "Pro-Tips: Understanding a Monobehaviour"
        ],
        "Building a Scene": [
          "Creating and Loading Scenes",
          "Building and Manipulating GameObjects",
          "Using Components in GameObjects",
          "Building and Using Prefabs",
          "Working with the Unity Camera"
        ],
        "Scripting Interactivity": [
          "Component Basics",
          "Built-in Components",
          "Trapping Player Input",
          "Communicating Between Game Objects",
          "Researching Messaging Systems"
        ],
        "Sound and Music": [
          "Unity Audio Basics",
          "Building and Playing Game Music",
          "Controlling Audio Sources",
          "Setting Volume and Controlling Music Playback",
          "Pro-Tips: Saving Player Preferences"
        ],
        "Building UI": [
          "Unity GUI Basics",
          "Skinning Your GUI",
          "GameExperience as UI",
          "Score and Time Displays",
          "Pro-Tips: Pausing and Ending a Round"
        ],
        "Title Screens and Menus": [
          "Building a Title Page",
          "Building the Main Menu",
          "Pro-Tips: Create a Pause Menu Reusing your Work"
        ],
        "Taking it Further: High Score (Saving and Loading)": [
          "Tracking Player Score in your Game",
          "Building the High Scores List UI",
          "Displaying High Scores from the Main Menu",
          "Pro-Tips: Building your Finished Game"
        ],
        "Taking It Further - Where to go from here": [
          "Converting Score into Combo Scoring",
          "The Unity Community",
          "Unity3D Pro",
          "Porting to Android",
          "Publishing Your Android Game"
        ]
      },
      "requirements": [
        "The video course takes a clear, step-by-step approach to building a game in Unity. It focuses on short, attainable tasks that the reader can finish making this the fastest path from zero to finished game using the Unity 3D engine."
      ],
      "description": "Unity3D by example will arm you with the basic skills needed to take your beginner level programming skills and transform yourself into a full-fledged game developer capable of making games on the web, PC, Mac, iPhone or Android, using Unity3D and the C# language.\nWith Unity3D by Example, you will go from beginning as a C# programmer to a published, multi-platform game developer with a course of a few hours.\nAlong the way, you’ll learn a lot about the multi-platform game engine Unity3D, starting with simply understanding how it works and building on that knowledge with each segment until you know everything there is to know about basic game building. It doesn’t stop there. Along the way you’ll also learn a little bit about game AI, game publishing and even learn how to become a part of the Unity 3D Community itself.\nWhere you go from there is up to you, but with Unity3D by Example, you will be armed with the knowledge of the pros and the skills you need to be your own game publisher!\nAbout the Author\nAdam Maxwell is the Co-Founder of Skyward* Corp., a premier provider of game development services with a focus on providing quality game design and Unity based development expertise. Skyward is also an independent game developer in its own right, developing mobile game for Android and iOS using the Unity3D platform. Prior to forming Skyward with his business partners, Mr. Maxwell has lead a storied career in the industry, working as a game designer, producer or developer for companies such as Blizzard Entertainment, Activision, Microsoft, Gazillion Entertainment and Trion Worlds. He has shipped over a dozen games in his career, including games in the popular Warcraft, Diablo and Starcraft Franchises and the MMO’s Auto Assault and Rift. In the 17 years that Mr. Maxwell has been a part of the video games industry, he is most proud of the work he has done building teams and introducing new game designers to the adventure of game development.",
      "target_audience": [
        "Are you just learning how to program? New to C# and looking for ways to build on what you know? Have you always wanted to make a game, but didn’t have the time for the low-level nuts and bolts of rolling your own engine? Maybe you’ve just heard the buzz about Unity3D and you want to learn what it’s all about. If any of this sounds like you, Unity3D by Example is exactly what you’re looking for!"
      ]
    },
    {
      "title": "Game Hacking | Create a Game in 1 Hour",
      "url": "https://www.udemy.com/course/game-hacking/",
      "bio": "Crank out your very first game without being a coding genius.",
      "objectives": [],
      "course_content": {
        "Introduction": [
          "Why Unity",
          "Unitys Structure",
          "UI",
          "Manipulating Objects",
          "Our First Script",
          "Finishing Our Script",
          "Compiling"
        ],
        "Hacking Game Development: Create Your First Game in Under an Hour": [
          "Introduction to the Game",
          "Modeling, Rigging and Animating Your Assets",
          "Importing Assets",
          "Mecanim Animation System",
          "Shuriken Particle System",
          "Sound",
          "Assembling Our Level",
          "Bringing Your Game to Life with Code",
          "Compiling Your Game"
        ],
        "Conclusion": [
          "Conclusion"
        ],
        "Bonus Material": [
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "Free copy of Unity 3D",
        "Free copy of Blender"
      ],
      "description": "Using Unity 3D and Blender, this course aims to introduce game development to beginners. In these tutorials, the various aspects of asset animation and coding games will be taught. This is to provide students the support they need to start creating their first game in under an hour!\nThis course uses the free versions of both Unity 3D and Blender.\n* This course teaches Unity version 4.x",
      "target_audience": [
        "Aspiring game developers and enthusiasts"
      ]
    },
    {
      "title": "ARSA Framework: Master of ARSA Script.",
      "url": "https://www.udemy.com/course/arsa-framework-master-of-arsa-script/",
      "bio": "Study ARSA Script with your Photoshop. Quick and clean scripting for 2D games development.",
      "objectives": [],
      "course_content": {
        "Basic": [
          "Chapter 1: Install ARSA Framework",
          "Basis of 2D Images",
          "Chapter 3: Transformations Images",
          "Chapter 4: Touch Input",
          "Chapter 5: Audios and Videos",
          "Chapter 6: Layer Hit",
          "Chapter 7: Fonts"
        ],
        "Advance": [
          "Chapter 8: ARSA Script Basis of Programming",
          "Chapter 9: Frame per second (FPS)",
          "Chapter 10: Loading PSD file",
          "Chapter 11: External script",
          "Chapter 12: Group of layers",
          "Chapter 13: Clone layer",
          "Chapter 14: Log",
          "Chapter 15: Finite state machine (FSM) theory",
          "Chapter 16: Manager theory"
        ],
        "Workshop": [
          "Chapter 17: Deploy game to android device.",
          "Chapter 18: Pacman clone game.",
          "Chapter 19: Gage.",
          "Chapter 20: Time counter.",
          "Chapter 23: AI - Automation moving player with FSM.",
          "Chapter 24: AI - Find out nearest object."
        ]
      },
      "requirements": [
        "Photoshop.",
        "Basis of programming.",
        "*Free redeem code ARSA Studio: udemy"
      ],
      "description": "*Free redeem code ARSA Studio is: udemy\nLearn the main functions, core of concept and tools that you need to construct 2D games with ARSA Script and Photoshop.\nCreate games in Photoshop with this tutorial for everyone who interesting in game development.\nWhat's ARSA Framework.\nDownloading and Installation.\nBasis of 2D Images.\nPhotoshop's layer operations.\nAchieve your games at your skills by ARSA Script.\nStudy the basis of ARSA Script puts achievement to your games. ARSA Script is absolutely free software, simple used, has good help file, and is the cross platform to any devices embedded C/C++ compiler (now v 2.3.3 support only win32 and android).\nLooking for a new scripting language to build games that support universal resolutions, can be design UI/UX into photoshop once time similarly any terminal output.\nOverall Course\nGood for everyone who has photoshop basic skill and fundamentals programming, Through course more 9 hours and 10+ chapters of contents you will learn all of the ARSA Script basic until advance and grown skill of concept 2D game development. Each chapter shown learning with example, so, get easy, quick and clean follow videos.\nSpawn point is the introduction of ARSA Framework and ARSA Script what is, next, it is download and installation tools from official website, This course will take you through ARSA Script functions, variable types, math operators, and how to apply them to your games.\nThe course take you through flow control by teaching you how to use if-else, for, while loops and custom function declaration to your games.\nStudents completing the course will have the knowledge and know-how to create 2D games with Photoshop and useful ARSA Script.\n\n\nARSA Framework: Master of ARSA Script\n\n(c) 1999-2018. ARSA Productions.\nFirst Section: Basic (TotalTime 03:58:47)\nChapter 1: Install ARSA Framework (TotalTime 25:12)\n1.1 What's ARSA Framework. (0:00)\n1.2 Downloading and Installation. (7:34)\n1.3 Introduction ARSA Studio. (17:50)\n1.4 Introduction Lecturer. (22:04)\n1.5 Conclusion. (24:54)\nChapter 2: Basis of 2D Images (TotalTime 27:59)\n2.1 Understand 2D game coordinate. (0:00)\n2.2 Understand 2D and universal resolution. (3:25)\n2.3 Understand 2D Images - vector vs raster. (9:39)\n2.4 First image loading - PSD. (10:37)\n2.5 Limitation of PSD for ARSA Framework. (14:40)\n2.6 Custom resolution. (18:46)\n2.7 Conclusion. (22:10)\nChapter 3: Transformations Images (TotalTime 55:46)\n3.1 Visible/invisible. (0:43)\n3.2 Opacity. (6:54)\n3.3 Rotation by axis: x, y, z. (10:08)\n3.4 Draw order. (13:14)\n3.5 Set, move position (19:13)\n3.6 Animate. (23:52)\n3.7 Color and alpha.    (29:23)\n3.8 PSD Offset set/move. (31:14)\n3.9 Draw and rotation flags. (39:06)\n3.10 Visible-percent. (45:20)\n3.11 Conclusion. (48:16)\nChapter 4: Touch Input (TotalTime 29:21)\n4.1 Touch operations. (0:00)\n4.2 Touch with PSD layer. (4:25)\n4.3 Touch with PSD layer and reset button. (7:55)\n4.4 Touch multiple layers. (18:12)\n4.5 Touch and moving layer. (23:42)\n4.6 Conclusion. (28:38)\nChapter 5: Audios and Videos (TotalTime 53:27)\n5.1 Audios operations. (0:00)\n5.2 Audios format supported. (1:43)\n5.3 First audio. (3:34)\n5.4 Play multiple audios. (6:32)\n5.5 Stop audio. (11:15)\n5.6 Loop/Once playback audio. (14:04)\n5.7 End of audio checking. (18:33)\n5.8 Conclusion audio. (21:52)\n5.9 Advances audio example. (23:48)\n5.10 Videos operations. (38:24)\n5.11 First video. (38:50)\n5.12 Full-screen/Resize video. (41:28)\n5.13 Mixing/Ending video and layer. (43:40)\n5.14 Conclusion. (52:16)\nChapter 6: Layer Hit (TotalTime 32:18)\n6.1 Introduction hit functions. (0:00)\n6.2 Hit with layer.\n6.2.1 Drawing and moving layer. (0:43)\n6.2.2 Hit layer. (12:24)\n6.2.3 Result hit layer. (15:12)\n6.2.4 Conclusion hit layer. (15:28)\n6.2.5 Hit multiple layers. (17:53)\n6.2.6 Result hit multiple layers. (20:30)\n6.2.7 Hit multiple layers with reset button. (21:10)\n6.2.8 Result hit multiple layers with reset button. (26:16)\n6.3 Hit with specify layer. (28:28)\n6.3.1 Result hit with specify layer. (29:26)\n6.4 Conclusion. (31:43)\nChapter 7: Fonts (TotalTime 14:44)\n7.1 Overview fonts. (0:00)\n7.2 Text from type tool on photoshop. (1:36)\nResult. (2:44)\n7.3 Text from script with build-in font. (2:58)\nResult. (5:08)\n7.4 Changing text color. (5:35)\nResult. (6:50)\n7.5 Custom font - true type. (7:37)\nResult. (11:24)\n7.6 Changing custom font color. (12:28)\nResult. (12:48)\n7.7 Conclusion. (13:50)\nSecond Section: Advance (TotalTime 05:24:18)\nChapter 8: ARSA Script Basis of Programming (TotalTime 01:37:13)\n8.1 Introduction. (0:00)\n8.2 Local variable. (4:12)\nResult. (15:52)\n8.3 Global variable. (19:50)\nResult. (21:13)\n8.4 Conclusion declaration variables. (22:42)\n8.5 Set value to variable. (22:58)\nResult. (26:44)\n8.6 Comment. (29:13)\n8.7 Basis math operations. (30:24)\n8.8 Function. (35:23)\n8.9 Procedure. (38:57)\n8.10 Conclusion function and procedure. (43:08)\n8.11 Condition.\n8.11.1 if. (44:20)\n8.11.2 if-else. (47:02)\n8.11.3 Recursive if. (49:31)\n8.11.4 Recursive if-else. (55:33)\n8.12 Loop. (54:49)\n8.12.1 for. (55:02)\n8.12.2 while. (59:46)\n8.12.3 Conclusion. (01:01:57)\n8.13 Return/break. (01:03:00)\n8.14 String operations. (01:07:24)\n8.14.1 Search string - strstr. (01:07:39)\n8.14.2 Token string - strtok. (01:10:42)\n8.15 Random integer. (01:13:34)\n8.16 Random integer in range. (01:15:20)\n8.17 Time. (01:15:48)\n8.17.1 Virtual time vs real time. (01:15:59)\n8.17.2 Virtual time. (01:17:04)\n8.17.3 Real time. (01:17:40)\n8.18 Conclusion random, time, return, break and string. (01:18:08)\n8.19 Structure.\n8.19.1 Local structure (01:18:40)\n8.19.2 Global structure (01:21:55)\n8.20 Arrays. (01:22:13)\n8.21 File operations.\n8.21.1 Overview file operations. (01:18:40)\n8.21.2 Read file. (01:24:46)\n8.21.3 Write file. (01:30:03)\n8.22 Conclusion. (01:33:30 )\nChapter 9: Frame per second (FPS) (TotalTime 09:16)\n9.1 Overview. (00:40)\n9.2 Set FPS. (02:40)\n9.3 Get FPS. (06:55)\n9.4 Conclusion. (08:57)\nChapter 10: Loading PSD file. (TotalTime 27:33)\n10.1 Overview. (00:35)\n10.2 Loading PSD from secondary storage. (02:19)\nResult. (18:50)\n10.3 Loading from cloud. (19:21)\nResult. (23:05\n10.4 Get layers count (24:42)\nResult. (26:04)\n10.5 Conclusion. (26:55)\nChapter 11: External script (TotalTime 05:23)\n11.1 Overview. (00:00)\n11.2 Loading script from external file. (01:39)\nResult. (04:04)\n11.3 Conclusion. (04:56)\nChapter 12: Group of layers (TotalTime 42:02)\n12.1 Overview. (00:10)\n12.2 Add layers to a group by Photoshop. (00:31)\n12.3 Visible group. (02:45)\n12.4 Add layers to a group by ARSA script. (03:42)\n12.5 Remove layers to a group. (06:36)\n12.6 Conclusion add/remove layers to a group. (11:40)\n12.7 Transformation group. (11:59)\n12.7.1 Set group position. (12:36)\n12.7.2 Set only one layer visible on group. (15:54)\n12.7.3 Set group rotation. (17:58)\n12.7.4 Set group scale. (18:27)\n12.7.5 Set group rotation flags. (19:58)\n12.7.6 Set group draw flags. (21:39)\n12.7.7 Set group draw order. (22:26)\n12.7.8 Set group color. (22:46)\n12.7.9 Set group clamp position. (23:00)\n12.7.10 Set group play animation. (24:14)\n12.7.11 Set only one layer play animation on group. (24:43)\n12.7.12 Apply animation with group. (26:16)\nResult. (38:36)\n12.8 Conclusion. (40:40)\nChapter 13: Clone layer (TotalTime 30:25)\n13.1 Overview. (00:00)\n13.2 Clone layer by Photoshop. (00:45)\n13.3 Clone layer by ARSA script. (03:03)\n13.4 Remove layer. (07:28)\n13.5 Clone multiple layers. (12:45)\nResult. (17:29)\n13.6 Conclusion clone layers. (17:52)\n13.7 Get all layers by prefix. (18:21)\nResult. (26:18)\n13.8 Conclusion. (29:23)\nChapter 14: Log (TotalTime 04:50)\n14.1 Overview. (00:08)\n14.2 Introduction log window. (00:33)\n14.3 Log a messages. (01:41)\n14.4 Clear log window. (03:06)\n14.5 Conclusion. (04:21)\nChapter 15: Finite state machine (FSM) theory (TotalTime 25:39)\n15.1 Overview. (00:00)\n15.2 Basic theory of FSM. (00:41)\n15.3 FSM diagram. (07:45)\n15.4 FSM example: turn light on-off (12:00)\n15.5 Conclusion. (24:26)\nChapter 16: Manager theory (TotalTime 01:21:57)\n16.1 Overview. (00:00)\n16.2 Basic theory of Manager. (00:35)\n16.3 Manager diagram. (02:55)\n16.4 Manager example 1: missile (04:31)\n16.4.1 Drawing jet. (06:08)\n16.4.2 Drawing missile. (12:06)\n16.4.3 Set portrait mode. (13:20)\n16.4.4 Declaration variable. (16:00)\n16.4.5 First function: add_mis (19:31)\n16.4.6 Second function: update_mis (23:37)\n16.4.7 Call every things. (27:30)\n16.4.8 Result. (33:46)\n16.5 Manager example 2: missile hit (35:35)\n16.5.1 Drawing box. (36:01)\n16.5.2 Adding hit code. (36:46)\n16.5.3 Result. (38:58)\n16.6 Manager example 3: missile hit variety boxes (39:35)\n16.6.1 Drawing variety boxes. (40:49)\n16.6.2 Adding variety hit code. (42:21)\n16.6.3 Result. (49:08)\n16.7 Manager example 4: missile hit advanced variety boxes (49:29)\n16.7.1 Adding advanced initialize code. (50:20)\n16.7.2 Drawing advanced variety boxes. (52:43)\n16.7.3 Cloning advanced variety boxes by code.    (55:59)\n16.7.4 Adding function: add_mis1 (01:05:20)\n16.7.5 Adding function: add_mis3 (01:05:30)\n16.7.6 Adding function: shoot (01:07:27)\n16.7.7 Editing function: update_mis (01:09:17)\n16.7.8 Adding function: hit_box2 (01:13:15)\n16.7.9 Adding function: toggle_missile_one (01:13:28)\n16.7.10 Adding function: toggle_missile_three    (01:16:12)\n16.7.11 Put them together. (01:16:46)\n16.7.12 Result. (01:19:46)\n16.8 Conclusion (01:20:20)\nThird Section: Workshop (TotalTime 02:27:53)\nChapter 17: Deploy game to android device. (TotalTime 32:42)\n17.1 Overview. (00:00)\n17.2 Preparing android device. (02:40)\n17.3 Checking android device. (11:45)\n17.4 Install ADB drivers (optional). (12:51)\n17.5 Overview android emulator (BlueStacks). (13:23)\n17.6 Connecting message from android device. (13:58)\n17.7 Deploy game to android device. (15:08)\n17.7.1 Specify game’s name. (18:05)\n17.7.2 Specify game’s version. (19:21)\n17.7.3 Result. (21:54)\n17.7.4 Conclusion. (23:00)\n17.8 Icon changing. (23:42)\n17.9 Icon sizing. (25:51)\n17.10 Launch game to Google PlayStore. (26:24)\n17.10.1 Register as Google developer.26:54)\n17.10.2 Submit new game. (27:59)\n17.10.3 Where is apk. (28:28)\n17.10.4 Screenshot preparation. (29:41)\n17.10.5 Conclusion. (30:52)\nChapter 18: Pacman clone game. (TotalTime 22:41)\n18.1 Overview. (00:00)\n18.2 Showing a game. (00:38)\n18.3 Preparation resources. (01:23)\n18.3.1 Player. (01:30)\n18.3.2 Enemy. (02:32)\n18.3.3 Clone enemy. (03:03)\n18.3.4 Game logics. (11:09)\n18.3.5 Coding. (11:38)\n18.3.6 Result. (20:27)\n18.4 Conclusion. (21:06)\nChapter 19: Gage. (TotalTime 20:27)\n19.1 Overview. (00:00)\n19.2 Prepare resources. (00:25)\n19.3 Coding. (01:50)\n19.4 Result. (07:19)\n19.5 Conclusion. (08:37)\n19.6 Drawing gage’s texture. (09:17)\nResult. (09:41)\n19.7 Animation gage’s texture. (10:11)\nResult. (12:15)\n19.8 Deploy gage to android device. (13:18)\n19.8.1 Additional assets. (14:19)\n19.8.2 Specify name. (16:29)\n19.8.3 Specify version. (16:36)\n19.8.4 Including assets folder. (16:37)\n19.8.5 Result. (17:56)\n19.8.6 Conclusion. (19:09)\nChapter 20: Time counter. (TotalTime 16:30)\n20.1 Overview. (00:00)\n20.2 Time counter. (00:30)\nResult. (07:27)\n20.3 Time counter with UI. (07:53)\nResult. (12:30)\n20.4 Deploy to android device. (12:40)\nResult. (14:54)\n20.5 Conclusion. (15:35)\nChapter 21: Matching Objects. (Not publish yet)\n21.1 Prepare resources.\n21.2 Coding.\nChapter 22: Photo hunt. (Not publish yet)\n22.1 Prepare resources.\n22.2 Coding.\nChapter 23: AI - Automation moving player with FSM. (TotalTime 36:36)\n23.1 Overview. (00:00)\n23.2 Prepare resources. (01:23)\n23.3 Coding. (03:57)\n23.3.1 Define state and variable. (04:15)\n23.3.2 Adding golden key function: mu_thinking    (05:37)\n23.3.3 Adding function: mu_walk (11:00)\n23.3.4 Call FSM function. (16:54)\n23.3.5 Checking you win and show score. (18:19)\n23.3.6 Adding function: enemy_square (19:06)\n23.3.7 Adding function: reset_score (21:38)\n23.3.8 Adding function: reset_random (23:31)\n23.3.9 Checking reset and random button. (25:04)\n23.3.10 Adding function: add_score (25:27)\n23.3.11 Checking between player and enemy layers. (26:15)\n23.3.12 Conclusion. (26:35)\n23.3.13 Result. (35:26)\n23.4 Conclusion. (36:07)\nChapter 24: AI - Find out nearest object. (TotalTime 18:57)\n24.1 Overview. (00:00)\n24.2 Prepare resources. (01:43)\n24.3 Coding. (02:14)\n24.3.1 Define distance variable. (02:32)\n24.3.2 Get distance between player and enemy (04:14)\n24.3.3 Editing function: mu_walk (08:49)\n24.3.4 Adding new function: mu_walk_spawn (10:12)\n24.3.5 Call FSM function. (11:25)\n24.3.6 Result. (13:19)\n24.3.7 Conclusion. (14:01)",
      "target_audience": [
        "Guys who focus to new game developer.",
        "Anyone who wants easy way to make game or app.",
        "Photoshop family and have intension to making digital media game or app on smartphones."
      ]
    },
    {
      "title": "Unreal Engine 5 Blueprint mobile game development course",
      "url": "https://www.udemy.com/course/create-2d-platformer-android-mobile-game-in-unreal-engine-5/",
      "bio": "Ultimate android mobile 2D platformer game with unreal engine 5 blueprint course without writing single C++ code",
      "objectives": [
        "To create, modify, and troubleshoot Blueprints for various game elements, including characters, enemies, obstacles, and interactive object",
        "Get hands-on experience building a functional and polished mobile 2D platformer game, including character animations, enemy AI, and level design",
        "To implement optimization techniques, enhancing graphics, improving performance, and managing memory usage to ensure a smooth game play.",
        "To equipped with the knowledge to package their games for deployment on mobile devices and understand the steps involved in showcasing and selling",
        "To work with peers, share your progress, and get feedback to refine their game development skills and create even better games."
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Community and Support"
        ],
        "Installing Engine and Creating Project": [
          "Downloading and installing Unreal Engine 5 and Paper ZD plugin",
          "Downloading Game Assets",
          "Splitting sprites using photoshop",
          "Creating project and importing sprites in the Unreal Engine"
        ],
        "Character Movements and input abilities": [
          "Character Input Actions Set up",
          "Character Movement and Jump Setup",
          "Character Rotation In the Right Direction",
          "Idle and Run Animations Setup",
          "Dash Ability Pt1",
          "Dash Ability Pt2",
          "Create Comb Attack",
          "Fire Breath Input",
          "FireBall Throwing Input",
          "Wall Sliding Ability"
        ],
        "Section 4: Creating Enemy Character": [
          "Importing and Setting Up Enemy Animations Pt 1",
          "Importing and Setting Up Enemy Animations Pt 2",
          "Knight 1 Movement",
          "Knight 1 Movement Detection",
          "Knight 1 Ledge Detection",
          "Player Attack And Enemy Damage",
          "26.Enemy Health and Damage Pt 1",
          "Enemy Health and Damage Pt 2"
        ],
        "Section 5: Creating Background and Tile Map": [
          "Background Setup in Level",
          "Creating Tile Map",
          "Creating Main Menu Widget",
          "Designing Main Menu Level",
          "Creating Pause Menu"
        ],
        "Section 6: Melee Combat System": [
          "Enemy Melee Combat",
          "Player Health and Enemy Attack",
          "Player HUD Update",
          "Player Death System"
        ],
        "Section 7: Touch System": [
          "Touch Movement Input",
          "Touch Buttons Pt 1",
          "Touch Buttons Pt 2",
          "Game Over Widget",
          "Level Unlock System"
        ],
        "Section 8: Skeleton Fire A Ranged Enemy": [
          "Skeleton Fire importing Sprites",
          "Creating Skeleton Fire Enemy Pt 1",
          "Creating Skeleton Fire Enemy Pt 2",
          "Creating Skeleton Fire Enemy Pt 3",
          "SKF_Projectle"
        ],
        "Section 9: Item Blueprints": [
          "Importing Pickups Sprites",
          "Fireball Pickup",
          "Health Pickup",
          "Lives Pickup",
          "Check Point",
          "Coins Pickup",
          "Spike",
          "Passing Through Platform",
          "Moving Platform",
          "Saw",
          "Death Platform"
        ],
        "Section 10: Creating Play Console and Admob Accounts with Implementation of Ads": [
          "Create Play Console Account and Game App",
          "Create An Admob Account",
          "Implementation of Ads in Game Pt 1",
          "Implementation of Ads in Game Pt 2"
        ]
      },
      "requirements": [
        "Familiarity with using a computer, installing software, and navigating file systems. A passion for creating games and a willingness to learn. Understanding of basic programming concepts (variables, loops, conditionals) is helpful but not mandatory. A computer capable of running game development software (Windows, macOS, or Linux)."
      ],
      "description": "Welcome to \"Mastering 2D Platformer Game Development with Unreal Engine 5,\" a comprehensive and hands-on journey designed for beginner game developers eager to create captivating mobile 2D platformer games. In this course, you'll embark on an exciting adventure, starting from the fundamentals of game development and progressing through the creation of a fully functional and polished 2D platformer project using Unreal Engine 5's powerful Blueprint scripting system.\nSection 1: Introduction to Unreal Engine 5\nIn the opening section, you'll be introduced to the course's objectives and the remarkable features of Unreal Engine 5. We'll guide you through setting up your development environment, ensuring a seamless start to your game development journey.\nSection 2: Understanding the Basics\nDive into the core elements of 2D platformer game design. Explore the intuitive Blueprint scripting system and navigate the Unreal Engine 5 interface, laying the groundwork for your hands-on exploration of game development.\nSection 3: Creating Your First Project\nBuild your first 2D platformer project by importing assets, setting up scenes, and implementing player character controls. This section ensures a solid foundation before delving into the intricacies of Blueprint scripting.\nSection 4: Blueprint Scripting Fundamentals\nDemystify Blueprint scripting as we guide you through variables, data types, functions, and events. You'll gain proficiency in creating and manipulating Blueprints, laying the groundwork for more advanced game mechanics.\nSection 5: Character Animation and Movement\nBring your game to life by mastering character animation setup and movement mechanics. Learn the essentials of creating engaging characters, implementing fluid animations, and fine-tuning movement for a seamless player experience.\nSection 6: Enemy AI and Obstacle Design\nElevate your game with the introduction of basic enemy AI and obstacle design. Understand the intricacies of enemy behavior and decision-making, and implement challenging obstacles to enhance gameplay.\nSection 7: Level Design and Progression\nUnleash your creativity as we delve into level design principles and the art of crafting immersive environments. Connect levels seamlessly and implement progression mechanics, ensuring a captivating player journey.\nSection 8: Polishing Your Game\nRefine your game with UI elements, sound effects, and music. Understand the significance of user interface design, and enhance the gaming experience with immersive audio. We'll also cover playtesting and debugging to ensure a polished final product.\nSection 9: Optimization and Deployment\nLearn the art of optimizing your game for mobile devices. Delve into graphics, performance, and memory optimization techniques. Walk through the process of building, deploying, and submitting your game to app stores.\nSection 10: Conclusion and Next Steps\nRecap key concepts, explore advanced topics, and gain insights into the game development industry.",
      "target_audience": [
        "Individuals with little to no prior experience in game development but possess a keen interest in creating 2D platformer games.",
        "Anyone looking to break into the game development industry and create their own games.",
        "Those studying or teaching game design and development, seeking practical, hands-on experience."
      ]
    },
    {
      "title": "How to Kickstart & Grow Your Art Career In The Game Industry",
      "url": "https://www.udemy.com/course/how-to-kickstart-grow-your-art-career-in-the-game-industry/",
      "bio": "Get an artist job with a stand-out Resume, Portfolio, Linkedin Profile, & Application. Interview & Networking Insight",
      "objectives": [
        "Stand out from other candidates and get interviews for video game jobs specifically for art roles as character modeling, 3D animation, 2D, and Generalist.",
        "Succeed in interviews by using specific, proven tactics and strategies.",
        "Understand how to make it very clear to employers why you should be hired.",
        "Using LinkedIn to easily Network with the right industry professionals, and how to use it to your advantage to get to the top of the application pile.",
        "Specific best practices for Resumes, Cover Letters, Portfolios and LinkedIn profiles specifically tailored to the Video Game Industry that get results.",
        "How to gain relevant video game industry experience recruiters want to see, if you have no current experience that will catapult you to a career in video games.",
        "Understanding how to apply to jobs overseas if you are based in the US.",
        "Understanding the portfolio building process directly from Lead artists who do hiring internally from some of the best game studios in the world.",
        "Specific to do tasks to help build a portfolio/demo reel that will get results from recruiters."
      ],
      "course_content": {
        "3D Character Modeling: Learning Skills": [
          "3D Character Modeling: Introduction",
          "Udemy Rating System Very Important Info!",
          "3D Character Modeling: Motivation",
          "3D Character Modeling: Focus",
          "3D Character Modeling: Portfolio Do's and Don'ts",
          "3D Character Modeling: Best Practices",
          "3D Character Modeling: Quality over Quantity",
          "3D Character Modeling: Time Management",
          "3D Character Modeling: Additional Tips",
          "3D Character Modeling: Taking Criticism and Feedback",
          "3D Character Modeling: 80/20 Rule"
        ],
        "3D Character Modeling: Constructing Your Portfolio": [
          "3D Character Modeling: Ideas for Mini-Projects to Improve Skills",
          "3D Character Modeling: Tools and Techniques",
          "3D Character Modeling: Practice Like a Pro",
          "3D Character Modeling: What If I Have No Job Experience",
          "3D Character Modeling: Junior Artist Roles",
          "3D Character Modeling: Interviewing",
          "3D Character Modelling: Understanding the Road Ahead",
          "3D Character Modeling: Internships/Gaining Experience",
          "3D Character Modeling: Websites and Portfolios",
          "3D Character Modeling: LinkedIn Profiles"
        ],
        "3D Character Modeling: Targeting Companies": [
          "3D Character Modeling: Cover Letters",
          "3D Character Modeling: Job Descriptions",
          "3D Character Modeling: Industry Hotspots",
          "3D Character Modeling: Networking",
          "3D Character Modeling: Research",
          "3D Character Modeling: Final Thoughts and Key Takeaways"
        ],
        "3D Animation: Learning Skills": [
          "3D Animation: Introduction",
          "3D Animation: Research",
          "3D Animation: What Companies Want",
          "3D Animation: What Software?",
          "3D Animation: Best Practices In Animation",
          "3D Animation: Time Management",
          "3D Animation: Daily Sprints & Setting Goals",
          "3D Animation: Break Up Animation Tasks",
          "3D Animation: Portfolio Walk Cycle Examples",
          "3D Animation: Organizing Tasks",
          "3D Animation: Less Is More, Quality Over Quantity",
          "3D Animation: Demonstrating Your Strengths To Studios",
          "3D Animation: Targeting Your Audience"
        ],
        "3D Animation: Constructing Your Portfolio": [
          "3D Animation: Portfolio Specifics",
          "3D Animation: Portfolio Run, Idle, & Attack Examples",
          "3D Animation: Portfolio Attack Combo Examples",
          "3D Animation: What If I Have No Job Experience?",
          "3D Animation: Being Proactive In Your Job Search",
          "3D Animation: Animation Tests and Application Do's and Don'ts",
          "3D Animation: What Studios Want to See From An Applicant",
          "3D Animation: Resumes"
        ],
        "3D Animation: Targeting Companies": [
          "3D Animation: Specific Demo Reel Research",
          "3D Animation: Power of the Network",
          "3D Animation: Applying Research in Job Interviews",
          "3D Animation: Location & Job Fit",
          "3D Animation: Cover Letters & Job Communication"
        ],
        "2D/3D Generalist: Learning Skills (Mobile Games)": [
          "2D/3D Generalist: Learning Skills",
          "2D/3D Generalist: Constructing Your Portfolio",
          "2D/3D Generalist: Targeting Companies",
          "Podcast Interview: Rovio Art Director Tatu Petersen-Jessen",
          "Podcast Interview: Supercell Artist Ilkka Leino",
          "Lead Artist Interviews In Mobile"
        ]
      },
      "requirements": [
        "Possess a strong passion and desire to work in the video game industry.",
        "Have some basic game creation skill or knowledge -such as 3D animation, 3D modeling, or other asset creation skills that can be applied to video game creation.",
        "Basic understanding of a 3D package such as Blender or Autodesk Maya to create a strong portfolio."
      ],
      "description": "In this course we will guide you on how to develop and target your work for the game art industry and the best practices to create a strong portfolio efficiently that will get you noticed by art directors and head recruiters.\n\nThis course specifically focuses on landing your first job in the game industry.  There are also tips for intermediate artists looking to improve their chances at landing interviews, and provides insight to 3 specific artist roles in the ever increasing competitive gaming industry job market.\n\nThis course is aimed at:\n\n* Beginners ideally who already have some 2d/3d work\n* Students who have graduated but have not yet been secured their first job\n* Career changes with 2D/3D experience in a different creative field\n\nWe focus on three main roles:\n3D Character Modeler (console/mobile)\n3D Animator (console/mobile)\nGeneralist 2D 3D artist for mobile\nEach section is split into 3 sections\nLearning skills\nConstructing\nTargeting\nWe'll go through project ideas, how to stay motivated, common mistakes often made to avoid being passed on during the selection process, and best practices when applying for jobs.\n\nThis collaboration is between Game Art Co and Class Creatives.\n\nSo let’s get started on your path to the industry please check out the videos below.\nAbout your Instructors:\n\nGame Art Co Founded by Nick Sweetman is a collective of game artists based in Helsinki, Finland. Finland is considered a super power in the mobile gaming industry.  Passionate about teaching we want all our students to succeed on their chosen learning path.  We have trained over 20,000 students on Udemy!  Our courses are practical and focus on the essential core skills and workflow needed by an industry game artist.  Our learning content is designed to be inspiring, effective & efficient.  With a combined experience of over twenty years in the games industry. With over 20 published and award winning titles released on console, PC and mobile.  Our artists come from companies that include Rovio, Remedy and Supercell.  Our courses adapt the Finnish style of educational training which is consistently ranked the best in the world.\n\nClass Creatives has over 20 years of professional industry experience and nearly a decade of accredited university level instruction. Instructors featured from Studios such as Walt Disney Animation Studios, Walt Disney Television, Google, Nintendo, Naughty Dog, Insomniac, Sony Computer Ent, Sucker Punch, Guerrilla Games, Infinity Ward, and more!.",
      "target_audience": [
        "Anyone who desires a career in the video game industry and wants to garner stronger results in getting interviews/call backs.",
        "Students or artists who already have some basic video game skill or training (recent graduates, jr artists, interns looking to grow their careers, or hobbyists/indie developers looking to jump start their career in a AAA/Large video game studio)",
        "Anyone currently looking for a job or within the next 3-6 months in the video game industry."
      ]
    },
    {
      "title": "How to Make a 2D Mobile Game in Unity (Flappy Bird in Unity)",
      "url": "https://www.udemy.com/course/how-to-make-a-2d-mobile-game-in-unity-c-flappy-bird-game/",
      "bio": "Learn how to make a flappy bird inspired mobile game in Unity!",
      "objectives": [
        "2D Mobile Game Development in Unity",
        "C-Sharp Scripting",
        "Adding score and menu's",
        "Importing sprites and assets",
        "Creating player controls for mobile games",
        "Game design and game development"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Setting up your game": [
          "Installation and Unity Hub",
          "Creating the Project",
          "Importing Sprites and Using Game Objects",
          "Setting up the Enviroment",
          "Colliders and Rigidbodies",
          "Prefabs",
          "Setting up your game"
        ],
        "Scripting": [
          "Introduction to Scripting",
          "Player Controls",
          "Obstacles",
          "Score and Death",
          "Text and UI",
          "Fonts and Styling Text",
          "Build Settings",
          "Goodbye"
        ]
      },
      "requirements": [
        "Elementary understanding of Unity and C-Sharp"
      ],
      "description": "What will you do in this course?\nIn this course, you will develop a 2D mobile game in Unity. The game you will be making is inspired by the classic \"Flappy Bird\" game released 2013. Throughout the course, you will learn how to develop a 2D mobile game from start to finish. You will have an opportunity to use the Unity game engine, write your own C-Sharp scripts, and understand the entire game design process.\n\n\nWhat will you learn?\nIn this course, you will learn how to:\nUse the Unity interface\nUse prefabs and game objects in Unity\nImporting sprites and 2D graphics\nWrite C-sharp scripts in Unity\nImplement rigidbodies and use Unity's 2D physics engine\nImplement mobile controls in Unity\nAdd a score and menu to your game\nAnd much more!\n\n\nWho is this course for?\nThis course is perfect for students who have never used Unity before. If you have never developed a game before, something like Flappy Bird is a great project to get started. This course will teach you the fundamentals of game design and everything you need to get started with Unity. If you already have experience with the Unity engine, this course still has plenty to offer. You will learn about 2D development, simple programming, and how to create your own player controls.",
      "target_audience": [
        "Students interested in learning mobile game development in Unity",
        "Student interested in learning C-sharp and programming"
      ]
    },
    {
      "title": "Car Parking Simulator Unity Game Development Course(Unity6)",
      "url": "https://www.udemy.com/course/car-parking-simulator-unity-game-development-courseunity6/",
      "bio": "Make Car Parking Simulator Game",
      "objectives": [
        "Get experience using Unity6 and Learn C# from scratch. A powerful modern language.",
        "Implement Mobile Controls and UI for a Complete Experience",
        "Unity level design tips, car parking level design, Unity parking challenge",
        "Beginners & Intermediate Level Unity Game Develpement Course"
      ],
      "course_content": {
        "Introduction": [
          "Introduction to Car Parking Samulator Course",
          "Create a New Project",
          "Add Game Assets In Unity",
          "Set up Player Car Tutorial",
          "Car Movement Tutorial Unity 3D",
          "Car Braking and Steering System",
          "Car Wheels Animation",
          "Camera Controller Tutorial",
          "Setting Car Parking Missions",
          "Mission System Tutorial",
          "Unity Parking Trigger Tutorial",
          "Mission Failed Handler",
          "Unity Show Mission Information",
          "Spawn Car and Show Current Mission Area",
          "Next Mission Retry Mission",
          "Save and Load Game Process System",
          "Mission System Tutorial",
          "Add Background Car Tutorial",
          "UI Titorial",
          "Unity Main Menu Script",
          "Main Menu System",
          "Main Menu Tutorial",
          "Add Car Collection Tutorial",
          "Unity Change Car Tutorial",
          "Unity Car Controller Mobile Inputs UI",
          "Car Controller Mobile Inputs UI 2",
          "ISSUE FIXEDCar Park",
          "Last Lecture Camera Movement"
        ]
      },
      "requirements": [
        "Passion for Creating Games ,Basic knowledge for programming,Required system specs (Core i5, 8Gb RAM)"
      ],
      "description": "Real Car Parking Simulator – Made with Unity 6 and C#\nDescription:\nExperience the ultimate car parking challenge with Real Car Parking Simulator, a highly realistic driving game built using Unity 6 and C# programming. Whether you're a casual gamer or a parking perfectionist, this game offers smooth controls, real-world physics, and carefully designed levels to test your precision driving skills.\nDeveloped entirely in Unity 6, this car parking game features a custom car controller, interactive UI, and mobile-friendly touch controls. From tight reverse parking to parallel challenges, each level gets progressively harder, pushing your driving and timing skills to the limit.\nPerfect for showcasing Unity 3D game development, C# scripting, and vehicle physics, this project highlights clean code structure, modular gameplay systems, and polished visuals—all optimized for Android and iOS platforms.\n? Key Features:\nRealistic car physics using Unity Wheel Colliders\nSmooth and responsive car controller in C#\nMultiple parking levels with increasing difficulty\nIntuitive mobile touch controls and UI\nObstacle detection, collision system & gear shifting\nOptimized for performance on low-end devices\nBuilt with Unity 6 and compatible with Android & iOS\nKeywords:\nGame Development Course\nUnity Game Development\nLearn Game Design\nMake a Video Game\nGame Programming for Beginners\nHow to Create a Game\nGame Development with Unity\nC# for Game Development\nBuild Games from Scratch\nIndie Game Development Course\n#unity3d\n#gamedev\n#indiedev\n#madewithunity\n#unity\n#indiegame\n#GameDevelopment\n#UnityGameDev\n#LearnGameDesign\n#IndieGameDev",
      "target_audience": [
        "Advance knowledge for Unity Engine, Better Programming (C#) concepts and Logic building."
      ]
    },
    {
      "title": "Augmented Reality with Unity – AR Foundation Basics (2019)",
      "url": "https://www.udemy.com/course/augmented-reality-101-ar-foundation-basics/",
      "bio": "Develop core augmented reality skills by learning Unity and the cross-platform API AR Foundation to create your first au",
      "objectives": [],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Source Files",
          "Additional Resources",
          "Unity Setup",
          "Building to Android",
          "Building to iOS"
        ],
        "AR Development": [
          "Visualizing the AR Planes",
          "Creating the Placement Indicator",
          "Scripting the Placement Indicator",
          "Spawning in Objects"
        ],
        "Conclusion": [
          "Conclusion"
        ]
      },
      "requirements": [
        "Basic understanding of Unity and C#.",
        "You must have an Android or iOS device compatible with AR Foundation."
      ],
      "description": "Embark on a comprehensive learning journey to master the essential fundamentals required for developing augmented reality (AR) applications using the highly popular Unity engine. This course is designed to guide you through the process of creating a simple yet powerful object spawning application, where users can place virtual objects in their real-world environment by utilizing the camera on their Android or iOS device.\nAs you progress through the course, you will acquire critical skills in working with both AR technology and AR Foundation, Unity’s versatile cross-platform API package. AR Foundation is specifically designed to facilitate the development of AR applications that can seamlessly run on both Android and iOS devices, streamlining the development process and expanding your reach to a broader audience.\nBy the end of this course, you will not only have created a functional AR application but also have gained a solid foundation in augmented reality development. You will be well-equipped to tackle more complex AR projects, empowering you to create robust augmented reality apps and games. With these skills, you will be ready to enter and contribute to the rapidly growing and in-demand industry of AR developers.\nYou will learn how to:\nDownload and configure AR Foundation within Unity\nUse your device’s camera to automatically detect planes\nSet up placement indicators to determine virtual object positions\nImplement tap gestures that allow users to spawn simple objects into the “real world”",
      "target_audience": [
        "Innovators wishing to upskill into cutting edge technologies",
        "Developers expanding their games with augmented reality",
        "Anyone interested in novel ways to develop for mobile"
      ]
    },
    {
      "title": "Build JavaScript Candy Crush Game & other Games Projects",
      "url": "https://www.udemy.com/course/build-javascript-candy-crush-game-other-javascriptgames-projects/",
      "bio": "Explore game development with JavaScript - candy crush, speed typing, rock paper scissors, snake-food, pong game",
      "objectives": [
        "Learn essential JavaScript concepts such as variables, loops, setInterval, setTimeout",
        "Work with functions, event listeners, DOM manipulation, if...else, do...while",
        "Learn how to build interactive and engaging browser-based games using JavaScript, HTML, and CSS",
        "Work with JavaScript arrays and array methods, objects, new Set()"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Introduction to Speed Typing Game",
          "Introduction to Rock Paper Scissors Game",
          "Introduction To Snake-Food Game And Pong Game"
        ],
        "Getting ready": [
          "Introduction on how to download and customize VS Code, upload project folder"
        ],
        "Rock Paper Scissors game (2 Player) - HTML and CSS": [
          "Introduction To The Project",
          "HTML structure - part 1",
          "HTML structure - part 2",
          "Styling The Project - Part 1",
          "Styling The Project - Part 2",
          "Styling The Project - Part 3",
          "Styling The Project - Part 4",
          "Styling The Project - Part 5"
        ],
        "Rock Paper Scissors game (2 Player) - JavaScript": [
          "Choices Array And Game Variables",
          "startBtn to display the username modal",
          "submitUsernames button",
          "startGame() function",
          "Updatescoreboard(), Updatetimer(), Starttimer()",
          "updateCurrentPlayer() function - part 1",
          "updateCurrentPlayer() function - part 2",
          "endGame() function - part 1",
          "endGame() function - part 2",
          "endGame() function - part 3",
          "close gameOverModal button, updateHghScore() and reset high score",
          "getRandomChoice() function and Handle player 1 and 2 button clicking",
          "playTurn(player) function - part 1",
          "playTurn(player) function - part 2",
          "animateChoice() function - part 1",
          "animateChoice() function - part 2",
          "determineWinner(choice1, choice2)",
          "evaluateRound() - part 1",
          "evaluateRound() - part 2",
          "resetRound()"
        ],
        "Speed Typing game - HTML and CSS": [
          "Introduction to the speed typing project",
          "HTML structure - part 1",
          "HTML structure - part 2",
          "CSS styling - part 1",
          "CSS styling - part 2",
          "CSS styling - part 3",
          "CSS styling - part 4"
        ],
        "Speed Typing game - JavaScript": [
          "gameState variables",
          "Creating the gameSentences and shuffleSentences function",
          "startGame() function",
          "displayCurrentSentence() - part 1",
          "displayCurrentSentence() - part 2",
          "displayCurrentSentence() - part 3",
          "submitUsername() function",
          "startTimer() function",
          "updateTimer() function",
          "endGame() function - part 1",
          "endGame() function - part 2",
          "saveHighScore() and loadHighScore()",
          "updateHighScoreDisplay() and resetHighScore()",
          "updateStats() function",
          "updateButtons() function",
          "pauseButton() and resumeGame() functions",
          "resetGame()",
          "CORE logic of the typing game - part 1",
          "CORE logic of the typing game - part 2",
          "CORE logic of the typing game - part 3",
          "nextSentence() and fixing an error in the resetGame()",
          "prevent backspace and delete from working",
          "Preventing user selection of sentence text and input text box",
          "updateProgress Function - Understanding The Reduce() Method",
          "totalChars - using reduce() to get the total characters",
          "Progress Percentage Calculation",
          "typedChars"
        ],
        "Pong Game (2 Player) - HTML and CSS": [
          "Introduction To The Pong Game",
          "HTML Structure",
          "Styling The Game - Part 1",
          "Styling The Game - Part 2",
          "Styling The Game - Part 3"
        ],
        "Pong Game (2 Player) - JavaScript": [
          "DOM Variables",
          "Game Variables - Part 1",
          "Game Variables - Part 2",
          "High Score Management",
          "endGame() function",
          "Start Game and Enter Game buttons",
          "startGame() and resetGame() function",
          "startTimer() function",
          "Stop Game button and resetBall() function",
          "updateGame() function - Part 1",
          "updateGame() function - Part 2",
          "updateGame() function - Part 3",
          "Keyboard pressed event Controls",
          "movePaddles() function"
        ],
        "Snake-Food Game - HTML and CSS": [
          "Introduction to the snake game",
          "HTML structure",
          "Styling the UI - part 1",
          "Styling the UI - part 2",
          "Styling the UI - part 3",
          "Styling the UI - part 4"
        ],
        "Snake-Food Game - JavaScript": [
          "Game Variables - part 1",
          "Game Variables - part 2",
          "Start Game button and submit form",
          "High Score management",
          "game over",
          "startGame(), resetGame(), updatePlayerInfo() functions",
          "gameLoop() function",
          "render() function",
          "Understanding some methods we will be using in next function",
          "moveSnake() function - part 1",
          "moveSnake() function - part 2",
          "moveSnake() function - part 3",
          "Understanding more of the snake.unshift(head) and snake.pop()",
          "generateFood() function",
          "Keyboard controls",
          "handleCollision() function"
        ]
      },
      "requirements": [
        "You should have a good knowledge of JavaScript, CSS and HTML"
      ],
      "description": "Unlock the power of JavaScript and bring your creativity to life with JavaScript Addictive Games Projects!\n\"Build JavaScript Candy Crush Game & other Games Projects \"\nDon’t just learn JavaScript—build, play, and master it. Enroll today and turn your coding journey into an adventure!\nThis hands-on course is designed for students who want to learn how to build interactive and engaging browser-based games using JavaScript, HTML, and CSS. This course will guide you step by step through the process of creating exciting games while strengthening your programming skills.\nWhy should you enroll? Because games teach coding like nothing else. Throughout the course, you will learn essential JavaScript concepts such as variables, loops, functions, event listeners and the DOM (Document Object Model). You will also explore game development fundamentals, including localStorage, animations, handling user input, scoring systems, high score detection and storage, if()...else conditions, for() loop, do...while() loop, array manipulation, getting random values, object literals, new Set(), etc.\nBuild a fully functional and responsive Candy Crush-style game using JavaScript, HTML, and CSS, implementing grid logic, swapping mechanics, and scoring.\nDevelop a responsive Speed Typing game that measures user input accuracy and speed in real time using event listeners and timers.\nCreate an interactive and responsive 2 Player Rock Paper Scissors game with dynamic animations, score tracking\nDevelop addictive and responsive Snake-Food Game with snake growth dynamics, random food generation and recursive timing loop, score tracking, number of lives tracking\nBuild engaging 2 Player Pong Game with smooth paddle frame animation, random ball movement, ball Physics to ensure the ball bounces in opposite direction when it hits the wall and paddle, ensure scoring techniques, etc.\nEach project reinforces core JavaScript concepts—DOM manipulation, event handling, arrays, loops, conditionals, and even basic algorithms—through immersive, rewarding challenges.\nPerfect For:\nAspiring game developers who want to level up their portfolio\nJavaScript enthusiasts ready to add some FUN to their skill set\nCareer changers seeking projects that actually impress employers\nEach game project will introduce new JavaScript techniques and concepts, helping students build a strong foundation in coding. By the end of the course, you will have a portfolio of games you can showcase, customize, and even expand upon.\nEnroll now and game on! Your JavaScript superpowers await!\nWarning: Side effects may include uncontrollable urge to show off your games to everyone you meet. Simply addictive.",
      "target_audience": [
        "JavaScript enthusiasts",
        "Game development enthusiasts"
      ]
    },
    {
      "title": "Make awesome CUTSCENES in Unity using Timeline",
      "url": "https://www.udemy.com/course/unitytimeline/",
      "bio": "Expand your game development and design knowledge and create cutscenes in Unity with the Timeline package.",
      "objectives": [],
      "course_content": {
        "Introduction": [
          "How To Follow The Course [DOWNLOAD]"
        ],
        "Timeline [EXAMPLE 1]": [
          "Timeline Setup",
          "Timeline Animations",
          "Activation Track",
          "Track Group",
          "Timeline and Animation Events",
          "Animation Extrapolation",
          "Timeline Sound",
          "Timeline Signals"
        ],
        "Timeline and Cinemachine [EXAMPLE 2]": [
          "Timeline and Cinemachine",
          "Playable Director"
        ],
        "Completed Project": [
          "Download Completed Project",
          "BONUS LECTURE- Continue Your Journey"
        ]
      },
      "requirements": [
        "***THIS COURSE IS NOT FOR ABSOLUTE BEGINNERS***",
        "Knowledge about Unity Editor, animations and basics of C# is required"
      ],
      "description": "(***NEW COURSE***)\nUnity Timeline is a package that allows you to create and control cinematic sequences, cutscenes, and other types of scripted events in your Unity projects. It provides a timeline-based interface where you can arrange and manipulate different animation tracks, audio, and other elements to create complex sequences.\nWith Unity Timeline, you can create dynamic camera movements, trigger animations, control particle effects, synchronize audio, and perform other actions to craft compelling cutscenes and scripted events. It offers a flexible and intuitive way to design and organize interactive narratives within your Unity projects.\n\n\nIn the first example, we will learn how to set up Timeline, how to create different types of tracks (Animation, Activation, Sound, Signal...), and how to organize the timeline using Track Groups. We also explore animation extrapolation and learn about Timeline Events (Signals)\nIn the second example, we will use the Cinemachine package and different cameras to create a dynamic cutscene. We also see how to activate the cutscene by entering the Activation area\n\n\nTrust me, creating cutscenes is not as complicated as you think. It's much easier. You can download the whole Unity project and start following the course right away.\nRemember, cutscenes will make your games feel more alive and fun.",
      "target_audience": [
        "Anyone who wants to improve and make games more fun",
        "Game Developers and Game Designers"
      ]
    },
    {
      "title": "15 ChatGPT Games to Play Online",
      "url": "https://www.udemy.com/course/15-chatgpt-games-to-play-online/",
      "bio": "Engaging 15 ChatGPT Games for Boundless Fun & Connection - Join the Ultimate Online Gaming Adventure Today!",
      "objectives": [
        "You will learn 15 games you can play with ChatGPT for free",
        "Best games to play with ChatGPT to pass your time",
        "The ability to explore and unleash their creativity within the virtual worlds of ChatGPT games",
        "How to navigate and interact with ChatGPT-powered games effectively"
      ],
      "course_content": {
        "Introduction to ChatGPT Games": [
          "15 ChatGPT Games to Play Online (Promo)",
          "Playing with ChatGPT Benefits",
          "ChatGPT - What is It?",
          "Create ChatGPT Account"
        ],
        "Playing Games with ChatGPT": [
          "Game Secret 1",
          "Game Secret 2",
          "Game Secret 3",
          "Game Secret 4",
          "Game Secret 5",
          "Game Secret 6",
          "Game Secret 7",
          "Game Secret 8",
          "Game Secret 9",
          "Game Secret 10",
          "Game Secret 11",
          "Game Secret 12",
          "Game Secret 13",
          "Game Secret 14",
          "Game Secret 15",
          "Watch Free Courses",
          "Bonus"
        ]
      },
      "requirements": [
        "Eager to play",
        "internet connection"
      ],
      "description": "Welcome to the ultimate gaming experience with \"15 ChatGPT Games to Play Online\"! Get ready to embark on an exciting journey where imagination knows no bounds, and virtual worlds come alive with the power of ChatGPT.\nIn this groundbreaking course, we dive deep into the realm of ChatGPT-powered games, unlocking a treasure trove of immersive and interactive experiences. Whether you're a gaming enthusiast, a creative soul, or simply looking for a new way to connect with others online, this course is designed to captivate and inspire you.\nDiscover the magic of ChatGPT as we introduce you to 15 meticulously crafted games that will leave you spellbound. From thrilling adventure quests to mind-bending puzzles and gripping role-playing scenarios, each game offers a unique and engaging experience. Prepare to immerse yourself in a world where your imagination takes center stage, and every decision you make shapes the outcome.\nUnleash your creativity as you explore the vast possibilities of ChatGPT games. With its natural language processing capabilities, ChatGPT opens up a whole new dimension of interactivity. Engage in dynamic conversations with intelligent bots that respond to your every move, creating an experience that feels remarkably lifelike. Develop your problem-solving skills, exercise your strategic thinking, and sharpen your wit as you navigate through these captivating virtual landscapes.\nJoin our community of enthusiastic gamers and ignite your competitive spirit. Collaborate with fellow players, form alliances, and challenge each other in thrilling multiplayer games. Engage in friendly competition or join forces to overcome formidable foes – the choice is yours. With ChatGPT as your companion, you'll never feel alone in the virtual realm.\nWhat sets this course apart is its focus on fostering connections. ChatGPT games offer a unique opportunity to interact with players from around the globe, transcending geographical boundaries. Forge friendships, exchange ideas, and celebrate cultural diversity as you engage in lively conversations during gameplay. Discover the joy of connecting with like-minded individuals who share your passion for gaming.\nIn addition to the exhilarating gameplay, this course provides valuable insights into the development and design principles behind ChatGPT games. Learn from industry experts who have harnessed the power of artificial intelligence to create compelling gaming experiences. Gain a deep understanding of the technology that drives ChatGPT and apply it to your own projects.\nWhether you're a seasoned gamer or new to the world of online gaming, \"15 ChatGPT Games to Play Online\" is your ticket to an unforgettable adventure. Sharpen your skills, unleash your creativity, and make lasting connections as you dive into the captivating world of ChatGPT games. Enroll now and be part of a revolution in online gaming!",
      "target_audience": [
        "Anyone who wants to play ChatGPT games to have fun & enjoyment"
      ]
    },
    {
      "title": "how to make mobile game in 30 min + source code free",
      "url": "https://www.udemy.com/course/how-to-make-mobile-game-with-3000-levels-in-30-min/",
      "bio": "\"Learn to Build, Customize, and Monetize Your First Mobile Game in Just 30 Minutes!\"",
      "objectives": [
        "1. Downloading Unity Hub & Installing Unity Version",
        "2. Extracting Game Files and Adding to Unity",
        "3. Game Settings Overview + Changing Package Name + Setup",
        "4. Modifying Game Files with AI Tools",
        "5. Customizing Game Name, Icon, and Version",
        "6. Editing Daily Rewards for Players",
        "7. Creating an Account on OneSignal for Notifications",
        "8. Adding Push Notification Code to the Game",
        "9. Creating an AdMob Account and Adding Ads to the Game",
        "10. Exporting Your Game"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "1. Downloading Unity Hub & Installing Unity Version",
          "2. Extracting Game Files and Adding to Unity",
          "3. Game Settings Overview + Changing Package Name + Setup",
          "4. Modifying Game Files with AI Tools",
          "5. Customizing Game Name, Icon, and Version",
          "6. Editing Daily Rewards for Players",
          "7. Creating an Account on OneSignal for Notifications",
          "8. Adding Push Notification Code to the Game",
          "9. Creating an AdMob Account and Adding Ads to the Game",
          "10. Exporting Your Game",
          "11. Conclusion"
        ]
      },
      "requirements": [
        "Basic Knowledge of Unity: While this course is beginner-friendly, a foundational understanding of Unity’s interface and functions will be helpful for a smoother learning experience.",
        "PC or Mac with Unity Installed: You’ll need a computer with Unity pre-installed to follow along with the hands-on tutorials. Unity is available for free from the official website.",
        "Internet Access: Reliable internet access is required to download course materials, software, and updates, as well as to set up accounts such as AdMob and Google Play if needed.",
        "No Prior Programming Experience Needed: The course will guide you through all coding steps in a beginner-friendly manner, so no prior programming knowledge is necessary.",
        "Motivation to Learn & Customize: A willingness to dive into the game development process, experiment with customizations, and learn new skills related to AI, Unity, and monetization is essential for success in this course."
      ],
      "description": "Unlock the potential to earn with your own mobile game! In this hands-on course, you’ll learn how to create, customize, and monetize a mobile game from scratch. Starting with Unity setup and source code installation, we guide you through each step of the development process—even if you have zero coding experience.\nWhat’s inside:\nQuick Setup & Import: Set up Unity Hub, install your game, and understand the key game settings.\nAI-Powered Customization: Learn how to use AI to edit game assets and create a unique, eye-catching design.\nBrand Your Game: Change the game name, icon, and version to give your game a distinct identity.\nAd Integration with AdMob: Set up an AdMob account and integrate in-game ads to start generating revenue.\nEngagement Strategies: Add daily rewards and notifications to keep players coming back and boost retention.\nPlus, we’ll cover best practices for optimizing your game for a better user experience, helping you stand out in app stores and attract more players. By the end of this course, you’ll have a fully functional game that’s ready to publish and monetize. Designed for beginners, this course provides everything you need to jumpstart a profitable mobile game venture and start achieving success in game development!",
      "target_audience": [
        "Aspiring Game Developers: Individuals who want to enter the mobile gaming industry and learn the fundamentals of game development and monetization.",
        "Tech Enthusiasts & AI Learners: Those interested in utilizing artificial intelligence for creative projects, specifically in modifying and enhancing game assets.",
        "Entrepreneurs & Side Hustlers: People looking to create a passive income stream through game development by integrating ads and monetizing mobile games.",
        "Unity Beginners & Intermediate Users: Anyone who wants to improve their Unity skills by working on a practical, real-world game project, from setup to deployment.",
        "App Developers Looking to Monetize: Developers who want to learn how to integrate advertising platforms like AdMob into their games for revenue generation.",
        "Freelancers & Small Business Owners: Those who want to add game development to their skillset to attract more clients or offer new services in mobile gaming."
      ]
    },
    {
      "title": "Indie Developer Playbook: Creating 2D Games and Assets",
      "url": "https://www.udemy.com/course/creating-awesome-2d-games-and-their-assets/",
      "bio": "Create awesome 2D App Games with Gamemaker and Spritekit!",
      "objectives": [
        "Build 2D games in SpriteKit.",
        "Navigate Xcode's interface.",
        "Create over 20 games in GameMaker",
        "Organize your project and animate sprites.",
        "Plan, design, and develop games from scratch.",
        "And More!"
      ],
      "course_content": {
        "Intro to SpriteKit": [
          "Intro and Demo",
          "Learning Goals",
          "Intro to SpriteKit Interface",
          "Intro to SKView",
          "Intro to SKScene",
          "Intro to SKNode",
          "Accessing Nodes via Swift File",
          "Node Section Wrap up",
          "Intro to SKActions",
          "Attaching Actions to Nodes Through Code",
          "Intro to Physics Bodies",
          "Modifying Physics Body Attributes Through Code",
          "Fixing Contact Collision Problem with Physics Bodies",
          "Intro to Field Nodes",
          "Intro to SpriteKit - Source Code"
        ],
        "Breakout Game Tutorial": [
          "Intro and Demo",
          "Learning Goals",
          "Setting up the Main Game Scene",
          "Initializing Scene Variables and Creating a Boundary",
          "Implementing Player Movement and Brick Removal",
          "Implementing Game Over Logic",
          "Fixing Collision Issues",
          "Summary",
          "Breakout Clone Tutorial - Source Code"
        ],
        "Pong Clone tutorial": [
          "Intro and Demo",
          "Learning Goals",
          "Building Scene in sks File",
          "Finishing Set up in GameScene.swift",
          "Implementing Player and Opponent Movement",
          "Adding a Scoring System",
          "Fixing Slow Moving Collision Issues",
          "Summary",
          "Bonus - Modded Paddle Collision",
          "Pong Clone Tutorial - Source Code"
        ],
        "Space Invaders": [
          "Intro and Demo",
          "Learning Goals",
          "Setting up the Scene",
          "Finishing Set up in Swift File",
          "Implementing Player and Alien Movement",
          "Spawning and Firing Bullets",
          "Implementing Bullet Contact",
          "Implementing End Game Logic",
          "Pixelart Scene Setup",
          "Pixelart UFO",
          "Pixelart Spacecraft",
          "Pixelart Resize and Exporting",
          "Space Background",
          "Adding Textures and Summary",
          "Bonus Features",
          "Space Invaders Clone Tutorial - Source Code"
        ],
        "Game Maker - Introduction": [
          "Introduction - Part 1",
          "Introduction - Part 2",
          "Introduction - Part 3"
        ],
        "Deep Dive - Events and Actions": [
          "Deep Dive - Events and Actions - Part 1",
          "Deep Dive - Events and Actions - Part 2",
          "Deep Dive - Events and Actions - Part 3",
          "Deep Dive - Events and Actions - Part 4"
        ],
        "Deep Dive - Coding": [
          "Deep Dive - Coding - Part 1",
          "Deep Dive - Coding - Part 2",
          "Deep Dive - Coding - Part 3"
        ],
        "Shooter": [
          "Shooter - Part 1",
          "Shooter - Part 2",
          "Shooter - Part 3"
        ],
        "Rollerball": [
          "Rollerball - Part 1",
          "Rollerball - Part 2",
          "Rollerball - Part 3"
        ],
        "Platformer": [
          "Platformer - Part 1",
          "Platformer - Part 2",
          "Platformer - Part 3"
        ]
      },
      "requirements": [
        "Download GameMaker Studio.",
        "To follow along with these tutorials, you will need SpriteKit, Apple's free framework for making 2D games.",
        "The GameMaker section of this course is recorded on a PC. The Mac version of Game Maker studio is different but can be used.",
        "This course was recorded on a Mac computer. SpriteKit is only available for Apple-owned products.",
        "You MUST have a Mac to take this course. Don't buy this course unless you have a Mac."
      ],
      "description": "We at Mammoth Interactive value input from students like you. Feel free to leave us your feedback.\nWhy SpriteKit?\nSpriteKit is the framework for making 2D games for Apple products. It's free ! You can make cool games, from super simple to more complex, in SpriteKit. SpriteKit provides support for cool special effects and physics. It's a fun interface to express your creativity. Before you know it, you could see a game you built in SpriteKit in the App Store!\nTo give a game functionality, you add code to your game's objects in Xcode. Xcode is a user-friendly programming language that is easy to understand.\nAnyone can use SpriteKit.\nIn this course, you learn how to make simple 2D games using Apple's SpriteKit. You build the following games: Breakout Clone, Pong Clone, and Space Invaders. This course is unique because we make both the code and the design for the games from scratch.\nOther tutorials only show you how to make the functionality or design of a game. We at Mammoth Interactive show you how to do both.\nDon't worry if you've never coded before. We start simple and add more to the game as the course goes on. This course begins with an introduction to SpriteKit for those who have never used it before. You will learn how to navigate SpriteKit's interface.\nThe beauty of taking an online course like this is the ability to replay any of the lectures at any time. There is no time limit or final tests. You get to learn at your own pace with a practical model method of learning.\nOne of the best features is that you can watch the courses at any speed you want. This means you can speed up or slow down the video if you want to.\nThis course is project-based so you will not be learning a bunch of useless coding practices. At the end of this course you will have real world apps to use in your portfolio.\nWe feel that project based training content is the best way to get from A to B. Taking this course means that you learn practical, employable skills immediately.\nYou can use the projects you build in this course to add to your LinkedIn profile. Give your portfolio fuel to take your career to the next level.\nLearning how to code is a great way to jump in a new career or enhance your current career. Coding is the new math and learning how to code will propel you forward for any situation.\nLearn it today and get a head start for tomorrow. People who can master technology will rule the future.\nIs this course for me?\nEven if you're not an artist, you can design basic games. You may have heard of Axiom Verge and Stardew Valley. These games are million-dollar successes. But did you know that only one person made each?\nUsually it takes a whole team of people to build a game. But creators Thomas Happ and Eric Barone developed and designed their games by themselves. Now they're millionaires. You can do it, too.\nBy taking this course, you will gain the tools you need to continue improving yourself in the field of game development. You will be able to apply what you learned to further experiment in SpriteKit or any other game development framework.\nAlso now included in these bundles are our extra courses. If you want to learn to use other programs such as Camtasia or Sketch, you get more content than what you paid for this way!\nWe really hope you decide to purchase this course and take your knowledge to the next level. Let's get started.\nEnroll now to join the Mammoth community!",
      "target_audience": [
        "Anyone who wants to learn to use SpriteKit.",
        "Anyone who wants to learn game development.",
        "This course is targeted towards complete beginners.",
        "No prior coding or digital art skills necessary.",
        "People who want to make games."
      ]
    },
    {
      "title": "Unity And C# Full Course: Make a Complete 2D RPG Game",
      "url": "https://www.udemy.com/course/learn-to-create-a-2d-rpg-in-unity-6/",
      "bio": "Master Unity and C# by Creating a Full 2D RPG in a Complete 20+ Hour Course Covering Beginner to Advanced Concepts",
      "objectives": [
        "Learn C# from Scratch, An Efficient Language Used in Unity",
        "Gain Experience in Unity 6 – The Latest Version Released in Late 2024",
        "Design, Develop, and Deploy a Complete RPG Project",
        "Implement Various Weapons and Enemies Using Prefabs and Advanced Concepts",
        "Understand Not Only the Fundamentals but Also More Complex Topics",
        "Enhance Game Feel with Visual and Particle Effects",
        "Learn to Refactor Your Code for Improved Quality",
        "Gain Hands-On Experience in EVERY SINGLE LESSON",
        "Write Clean and Expandable C# Code",
        "Boost Development Productivity with Keyboard Shortcuts and Expert Tips"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Download Unity and Integrate Visual Studio Code",
          "Import Source Project",
          "How To Make The Most Out Of The Course"
        ],
        "Unity C# Basics": [
          "Unity C# Basics - Introduction",
          "Add A Test Script",
          "Functions",
          "Variables",
          "Public vs Private",
          "Conditionals",
          "Visual Studio Code Shortcuts",
          "Unity C# Basics - Conclusion"
        ],
        "Set Up Project": [
          "Set Up Project - Introduction",
          "Layout",
          "Import Images",
          "Import Audio",
          "Set Up Project - Conclusion"
        ],
        "Player Movement": [
          "Player Movement - Introduction",
          "Create The Player Game Object",
          "Set Up Player Input",
          "Create PlayerMovement Script",
          "Catch A Reference To The RigidBody2D",
          "Get The Movement Vector",
          "Move With RigidBody2D",
          "Time.deltaTime",
          "Player Movement - Conclusion"
        ],
        "Player Animation": [
          "Player Animation - Introduction",
          "Set Up The Animator",
          "Create Animation Clips",
          "Play Animations",
          "Flip SpriteRenderer",
          "Player Animation - Conclusion"
        ],
        "Environment": [
          "Environment - Introduction",
          "Create The Tilemap",
          "Paint The Environment",
          "Add Collisions",
          "Use SpriteAtlas",
          "Environment - Conclusion"
        ],
        "Enemy Prefab": [
          "Enemy Prefab - Introduction",
          "Create Enemy Game Object",
          "Prefab Enemy",
          "EnemyData ScriptableObject",
          "Fill In ScriptableObject Data",
          "Choose A Random Enemy Sprite",
          "Create Prefab Variants",
          "Set Up Weapons",
          "Change Weapons SpriteRendererer",
          "Get Direction To Player",
          "Implement Stopping Distance",
          "Handle Collisions",
          "Enemy Prefab - Conclusion"
        ],
        "Code Refactor: Character Movement": [
          "Code Refactor: Character Movement - Introduction",
          "Inheritance",
          "Protected In Variables",
          "Protected, Virtual And Override In Functions",
          "Get The RigidBody",
          "Abstract",
          "Override SetDirection",
          "Refactor Enemy Stopping Distance",
          "Fix Enemy Movement",
          "Code Refactor: Character Movement - Conclusion",
          "Extra: Why Not Directly Write Good Code?"
        ],
        "Player Base Weapon": [
          "Player Base Weapon - Introduction",
          "Set Up Base Weapon",
          "Animations",
          "Connect Animations",
          "Trigger Animations",
          "Add Attack Input",
          "Add Idle Animation Event",
          "Screen VS World Positions",
          "Calculate Angle Towards Mouse",
          "Understand Mouse And Player Positions",
          "Flip WeaponsContainer",
          "Player Base Weapon - Conclusion"
        ],
        "Enemy Base Weapon": [
          "Enemy Base Weapon - Introduction",
          "Set Up Animator",
          "Create CharacterSelector Script",
          "Quick Refactor: Base Weapon",
          "Start Implementing CharacterSelector",
          "Why Ifs Are Not The Best Option (Sometimes)",
          "Solution With Events",
          "Invoke Events",
          "Store Events In Dictionaries",
          "Make Events Functions Abstract",
          "Enemy Base Weapon - Conclusion"
        ]
      },
      "requirements": [
        "No experience needed"
      ],
      "description": "Step into the world of game development with a hands-on, project-based course where you'll create your very own 2D RPG game using Unity!\nIn this course, you'll build a fully functional game from scratch that features:\nComplete combat system\nDifferent enemies\nSmooth player movement\nDual combat mechanics with a close-range knife and long-range potion attacks\nDynamic health system\nAnd much more!\nYou'll also learn how to bring your game to life with polished visual effects such as potion trails, dynamic lighting, and particle effects that add that special \"game juice\" everyone loves.\nWhether you're a beginner eager to dive in or an intermediate developer looking to enhance your skills, this course provides a clear, step-by-step path to building a complete game project.\nWhat You'll Learn\nUnity Fundamentals & Project Setup: Master the Unity interface, scene setup, asset organization, and the basics of 2D game development.\nPlayer & Combat Mechanics: Code fluid player movement and implement a dual-weapon system featuring a short-range knife attack and a long-range potion attack with dynamic visual trails.\nUI & Health System Integration: Design and integrate an interactive health bar and other essential UI elements to enhance gameplay.\nEnemy Behavior & AI: Develop diverse enemy characters with unique sprites and both melee and ranged attack capabilities.\nPolishing Your Game: Incorporate advanced visual effects including dynamic lighting, particle systems, and other enhancements to give your game a professional, polished look.\nEnroll now to gain the skills and confidence to create your very own 2D RPG game from start to finish, and take your game development journey to the next level!",
      "target_audience": [
        "Anyone passionate about game development and ready to transform creative ideas into a finished game project",
        "Aspiring game developers eager to learn Unity and build their first complete 2D RPG game",
        "Indie developers who want a practical, project-based approach to creating engaging gameplay mechanics and stunning visual effects",
        "Hobbyists and programmers looking to expand their skillset with hands-on game design and development techniques"
      ]
    },
    {
      "title": "Create Action 2D Game With Video Ads In Unity",
      "url": "https://www.udemy.com/course/ultimate-guide-2d-game-development-advertisement-in-unity/",
      "bio": "Ultimate Guide 2DGame Development& Advertisement In Unity",
      "objectives": [
        "Learn to paint your worlds with Unity TileMap",
        "Master Beginner C# concepts including the singelton design Pattern",
        "Develop a complete 2d Game from scratch using C# and Unity",
        "Discover 2D animation workflows",
        "Monetiesieren and implementing Ad system 2021"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Project Setting": [
          "New Unity Project",
          "Import Asset"
        ],
        "Player": [
          "Player Setting",
          "What is the correct description of colliders in Unity",
          "Player Movement",
          "Player Jump"
        ],
        "Enemy": [
          "Enemy Setting",
          "Enemy Movement",
          "Enemy Damage &Game over"
        ],
        "Create Tilemap": [
          "Create Level with Tilemap",
          "Playerer Flip",
          "More Hazards",
          "BackGround"
        ]
      },
      "requirements": [
        "No need"
      ],
      "description": "Learn how to create your very own 2D RPG game for mobile or PC using Unity2D, an industry-standard program used by many large gaming studios and indie developers across the world.\nYou won’t just be learning programming concepts in this course, but tying these concepts to real game development uses. You will have access to a course forum where you can discuss the topics covered in the course as well as the next steps to take once the course is complete.\nThis course has been designed to be easily understandable to everyone,we start from scrach,easy codes to hard codes and every code will be explained so whether you’re a complete beginner, an artist looking to expand your game development range or a programmer interested in understanding mobile game design, this course will help you gain a greater understanding of development.\nAt the end of this course you will have developed the ability to create such PC game elements as:\nCreating the world\nMake enemy\nMake player units\nAdvertisment with unity with update 2021\nJumping\nMaking diffrent Enemies\nLearning C# codes\n\n\nStart learning today and let me help you become a mobile and PC game developer!\n\n\n\n\nUnderstand how to earn revenue using advertising in their games\nLearn C#, a modern versatile programming language\nUnderstand the capabilities of mobile development in Unity\nDevelop strong and transferable problem solving skills\nGain an understanding of the game development process\n\n\nMac or PC capable of running Unity 2D\nThe latest version of Unity 2019 or 2020\n\n\nAnyone who wants to make their own mobile and pc games\nAnyone interested in learning to publish apps and games to the Play Store or stream\nComplete beginners with an interest in learning mobile and PC game development\nDevelopers who want to re-skill across to mobile development\nPeople who want to create and publish their own mobile or PC games",
      "target_audience": [
        "Beginner to Intermediate"
      ]
    },
    {
      "title": "From Zero to Game: Create a 3D Adventure Game in Unity",
      "url": "https://www.udemy.com/course/from-zero-to-game-create-a-3d-adventure-game-in-unity/",
      "bio": "Quick Start to 3D Game Development: Build Your First Unity Game with C#",
      "objectives": [
        "Build a Complete 3D Game",
        "Implement Player Movement",
        "Create a Scoring and Game Over System",
        "Design UI and Menus",
        "Add Audio for Immersive Gameplay",
        "Understand Core Unity Concepts",
        "Game Mechanics",
        "Unity Visual Scripting",
        "Level Design"
      ],
      "course_content": {
        "Introduction": [
          "Setting up scene"
        ],
        "Player": [
          "Forward movement",
          "Side movement",
          "Camera",
          "Side borders"
        ],
        "Level mechanics": [
          "Scoring system",
          "Game over UI",
          "Game over mechanics"
        ],
        "MENU": [
          "Menu UI",
          "Menu mechanics",
          "Pause mechanics"
        ],
        "Environment": [
          "Setting up environment",
          "Lights"
        ],
        "New levels": [
          "Create new level",
          "Winning scene"
        ],
        "Building game": [
          "Building game"
        ]
      },
      "requirements": [
        "Mac or PC capable of running Unity 3D"
      ],
      "description": "Are you ready to dive into the exciting world of 3D game development? Welcome to \"Create Your First Game in Unity!\"—the perfect course for beginners who want to build a fully functional game without spending weeks learning complex concepts.\nIn this fast-paced and beginner-friendly course, you’ll learn how to create an exciting 3D game featuring a drone that navigates through obstacles. Whether you’re completely new to Unity or have some basic experience, this course is designed to help you achieve a playable game in just a few hours.\nWe’ll start with the essentials, guiding you step-by-step through setting up your Unity project and building your game. You’ll learn how to implement smooth player movement, create challenging obstacles, and add a scoring system to track progress. We’ll also cover important mechanics like game-over functionality and designing user-friendly menus.\nBut that’s not all—this course goes beyond the basics. You’ll add immersive audio to your game, including sound effects and background music, and polish your UI visuals for a professional touch. By the end of the course, you’ll have a game that not only works but looks and feels great to play.\nAs your instructor, I’m Gio, and I bring years of industry experience to help you quickly and effectively learn the skills you need to succeed. This course is perfect for anyone who wants to start creating games immediately without spending hours on theory.\nBy the end of this course, you’ll have a complete 3D game ready to share with friends, family, or even showcase in a portfolio. Take the first step into game development today—let’s create something amazing together!\n\n\nlearning objectives:\n\n\nBuild a Complete 3D Game\nLearn how to create a fully functional 3D game in Unity, featuring a drone navigating through obstacles.\nImplement Player Movement\nMaster the basics of player movement mechanics, including smooth and responsive controls.\nCreate a Scoring and Game Over System\nDesign and implement a scoring system and game-over mechanics to make your game engaging.\nDesign UI and Menus\nBuild a polished user interface, including interactive menus, score displays, and game-over screens.\nAdd Audio for Immersive Gameplay\nIntegrate sound effects and background music to enhance the gaming experience.\nUnderstand Core Unity Concepts\nGain foundational skills in Unity, such as working with GameObjects, scripting, and managing scenes.",
      "target_audience": [
        "Complete Beginners: This course is perfect for anyone who has never used Unity before and wants to learn 3D game development from scratch.",
        "Aspiring Game Developers: If you have a passion for games and want to turn your ideas into playable projects, this course will provide the essential skills and knowledge you need.",
        "Hobbyists and Enthusiasts: Whether you're a hobbyist looking to develop your first game or an enthusiast wanting to deepen your understanding of Unity, this course offers step-by-step guidance.",
        "Students who want to learn game mechanics,level design and unity visual scripting"
      ]
    },
    {
      "title": "Create a Scratch and Win Game in Unity",
      "url": "https://www.udemy.com/course/scratch-and-win-game-in-unity/",
      "bio": "2D Mobile Game Development in Unity 2020",
      "objectives": [
        "Learn lot of Unity 3D programming tips and tricks",
        "Learn how to use advanced C# with LINQ, Lambda Expressions, Coroutines and Generic Methods",
        "Learn How To Create UI Shaders with Unity Shader Graph",
        "Create simple custom animation system witch C# without using Animator",
        "Learn How To Use Unity UI Events",
        "Learn How To build your Game Effectively even without using Update Loop",
        "Create playable game project for your portfolio, or just for your own sense of achievement",
        "Build your game to your mobile phone"
      ],
      "course_content": {
        "Course Introduction": [
          "Course Introduction"
        ],
        "Basic Building Blocks": [
          "Shader Graph UI Shader: Vignette",
          "Shader Graph UI Shader: Tileable Pattern",
          "Line Drawing",
          "Shader Graph UI Shader: Scratching Material",
          "Sampling"
        ],
        "Putting Blocks Together": [
          "Creating Board Image",
          "Creating Ticket Section",
          "Creating Ticket",
          "Scratching Integration Part 1",
          "Scratching Integration Part 2"
        ],
        "Winning Managers": [
          "Win Settings",
          "Winning Panel Manager",
          "Button Manager",
          "Filling Board Images Part 1",
          "Filling Board Images Part 2",
          "Finish by Winning Images"
        ],
        "Creating Basic Game": [
          "Game Loop",
          "Creating Scoreboard",
          "Creating Save and Load Manager"
        ],
        "Advanced Scratching and Winning Options": [
          "Ticket Section Group One By One Ticket",
          "Ticket Section Group All At Once Ticket",
          "Any Sprite"
        ],
        "Finishing the Game": [
          "Section Random Color",
          "Ticket Provider",
          "Creating Main Menu"
        ],
        "Creating custom Animation System": [
          "Custom Animation System Part 1",
          "Custom Animation System Part 2"
        ],
        "Creating Game Animations": [
          "Main Menu Animation",
          "Sections Animation",
          "Scoreboard Animation",
          "Winning Sprites Animation",
          "Scratching Finished Animation",
          "Winning Panel Animation"
        ],
        "Building your game": [
          "Build the game For Mobile Phone"
        ]
      },
      "requirements": [
        "You should be familiar with C# and the Unity Game Development Engine.",
        "Mac or PC with Unity 3d 2019.3 or later installed",
        "You will need to be able to read and write simple code"
      ],
      "description": "Learn how to create and program your very own Scratch and Win Game with Unity, an industry-standard game development program used by many large gaming studios and indie developers across the world.\n\n\nThe course begins with a creation of basic systems and building blocks which are later connected to work together in a maintainable way. One of the interesting parts of this course is creating your own animation system, which does not need any animator or animation controller overhead, and is completely driven by coroutines. Also, entire game is written without use of an update method, so you will learn how to create your games without it. Just keep in mind that the course does not include finished project files, so you can have more motivation to finish it by yourself.\n\n\nWhat you’ll learn\nHow to develop your game for your Mobile Phone\nHow To Create UI Shader Graph Shader inside Unity\nHow to use Unity UI Events\nHow to properly Raycast UI images even if they are overlapped\nHow to Draw lines with Unity LineRenderer\nSaving and Loading your game progress\nHow to Work with Nested Prefabs inside Unity\nHow to work with Coroutines inside Unity\nHow to Create a simple Animation System from scratch\nHow To create Advanced UI for your game\nAdvanced C# programming with Class Constructors, LINQ, Lambda Expressions, Generic Methods, and other tips and tricks\nHow To use C# attributed like ContextMenu, System.Serializable and others\nHow to use static references with C#\nHow to use OnValidate Method inside your C# scripts\nHow to create a powerful Button Manager\nHow to create an entire game without using Update Loop\nand much more...\n\n\nWhy learn from me?\nI created this course to share my passion for making games and help others to create them. I am always trying to find effective and fast ways to solve various problems, so I hope you will find some of my tips and tricks useful also for your projects and games.",
      "target_audience": [
        "Intermediate Unity developers with a basic working knowledge of C# scripting",
        "This course is NOT for complete beginners having never touched Unity or C#. You should have understood the basics of both Unity and C# if you wish to properly follow along and get the most out of this course."
      ]
    },
    {
      "title": "Rpg Inventory Unreal engine 5",
      "url": "https://www.udemy.com/course/rpg-inventory-unreal-engine/",
      "bio": "Unreal engine inventory with modular character.",
      "objectives": [
        "Basics of a rpg inventory.",
        "how to equip or unequip items such as sword, shield , plate and etc.",
        "how setup modular character.",
        "how to use interfaces in order to speed up your game.",
        "Unreal engine variables structure.",
        "Project organization."
      ],
      "course_content": {},
      "requirements": [
        "No experience needed with unreal engine.",
        "Unreal engine 5",
        "Will to make games",
        "How a rpg inventory works"
      ],
      "description": "In this course you will learn how to create a unreal engine rpg inventory, where you can equip your modular character with different body parts such as hairs, torso, legs weapons and shield using blueprints, blueprint interface, actor blueprint component for better performace and understanding, also you will be introduced to dynamic objects tnteraction for example how to get items from the floor and have a inventory widget and blueprint component acess and display those items and manage using a context menu this menu will be useful for actions such as how to drop those items back in the world map, delete inventory items, equip and unequip items from the inventory we going to create from scratch the configuration variables for the inventory system using structures, data tables, enumeration complete logic how to find a item, remove, select from the datatable the information, you will learn how to setup a player controller, game instance, player pawn i am goin to teach how setup a modular character body parts using unreal engine free assets, of the source code will be avaliable on my github link for free so if you not sure about the course you can download the entire project.",
      "target_audience": [
        "Unreal engine beginner curious about learning from scratch how to build a inventory system with a modular character."
      ]
    },
    {
      "title": "Mastering C++ for Unreal Engine (Beginner to Pro)",
      "url": "https://www.udemy.com/course/mastering-c-for-unreal-engine-beginner-to-pro/",
      "bio": "C++ Intro with Unreal Engine",
      "objectives": [
        "C++ Fundamentals: Master the basics of C++ programming.",
        "Unreal Engine: Navigate and work effectively in Unreal.",
        "Blueprint vs. C++: Learn when to use each.",
        "Advanced C++: Explore inheritance and polymorphism.",
        "Portfolio Building: Showcase your game development.",
        "Collaborative Learning: Engage with a supportive community."
      ],
      "course_content": {},
      "requirements": [
        "Unreal Engine: Install Unreal Engine",
        "C++ Compiler: Familiarity with programming concepts helps.",
        "Passion for Gaming: Enthusiasm for game development."
      ],
      "description": "Mastering C++ for Unreal Engine Game Development\nUnlock the full potential of Unreal Engine and turn your game development dreams into reality with our comprehensive \"Mastering C++ for Unreal Engine Game Development\" course. If you've ever aspired to create immersive, high-quality games, this course is your gateway to success.\nIn this meticulously designed program, you will embark on a journey from novice to expert in Unreal Engine's C++ scripting language. Our course is tailored to help students at all levels, whether you're an absolute beginner or an experienced developer looking to harness Unreal Engine's true power.\nWhat can you expect to gain from this course?\nSolid Foundation in C++: You will start with the fundamentals of C++ programming, learning the syntax, data types, and control structures that form the backbone of Unreal Engine development.\nUnreal Engine Expertise: As the course progresses, you'll delve into Unreal Engine's intricacies, including Blueprints vs. C++, asset creation, and game logic implementation.\nGame Development Mastery: You'll gain proficiency in creating and optimizing gameplay elements, AI, multiplayer features, and much more.\nTroubleshooting Skills: Learn how to identify and fix common issues, ensuring your games run smoothly.\nReal-World Projects: Apply your knowledge to real projects and build a portfolio that showcases your skills to potential employers or collaborators.\nCommunity and Career: Join a vibrant community of game developers and get tips on breaking into the gaming industry or advancing your existing career.\nBy the end of this course, you'll have the confidence and skills to develop the next hit game with Unreal Engine. So, don't wait—dive in and make your game development aspirations a reality!",
      "target_audience": [
        "Game Enthusiasts: Aspiring game developers and hobbyists.",
        "C++ Beginners: Those new to C++ programming.",
        "Unreal Engine Explorers: For students interested in UE4.",
        "Indie Developers: Seeking to create their own games.",
        "Coding Enthusiasts: People eager to learn coding through game dev."
      ]
    },
    {
      "title": "Master Unity: Build Your Own Connect Puzzle Game",
      "url": "https://www.udemy.com/course/make-a-connect-puzzle-game-in-unity/",
      "bio": "From Beginner to Pro: Unity Connect Puzzle Game Mastery",
      "objectives": [
        "Unity Fundamentals",
        "MainMenu Design",
        "ScriptableObjects",
        "Procedural Level Generation",
        "Data Structures and Graphs"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Main Menu": [
          "Project Setup",
          "Start Panel Setup",
          "Scriptable Objects",
          "GameManager",
          "Main Menu Manager",
          "Buttons"
        ],
        "Gameplay": [
          "Gameplay UI",
          "Board Spawn",
          "Spawning Nodes",
          "Initializing Nodes",
          "Getting Input",
          "Deleting Edge",
          "Edge Cases",
          "Showing Highlights"
        ],
        "Level Generator 3 X 3": [
          "Level Generator",
          "Generating Empty Level",
          "Create Scriptable object through Scripts",
          "Random Spawing",
          "Grid Data and Solution to 3 X 3"
        ],
        "Level Generator 4 X 4": [
          "Rotations",
          "LinkedList",
          "HashSet",
          "Vector To Point",
          "Grid2D",
          "String Builder",
          "Bug Fixes"
        ],
        "Level Generator 5 x 5": [
          "Branch Reduction",
          "GridNode",
          "MinSets",
          "BugFixes"
        ],
        "Final Generator": [
          "BubbleSmall",
          "BubbleLarge",
          "Adding Level to Scriptable Object",
          "Creating all the Levels"
        ]
      },
      "requirements": [
        "No Prior Unity Experience Required",
        "Access to a Computer",
        "Basic Programming Knowledge (Recommended)",
        "Creativity and Problem-Solving Mindset"
      ],
      "description": "Discover the art of crafting challenging puzzle games with Unity as you embark on the journey of creating \"Connect Flow,\" a brain-teasing puzzle game where players connect colored dots using pipes to form an uninterrupted flow from start to finish.\nThroughout this comprehensive course, we'll guide you through the development process, covering key aspects such as:\nMainMenu Design: Learn to create a dynamic MainMenu that seamlessly transitions between various in-game panels.\nScriptableObjects Mastery: Harness the power of ScriptableObjects to efficiently store and manage data for your game's levels.\nInteractive UI Development: Build an intuitive user interface to facilitate player interaction with the game environment.\nGameManager Implementation: Utilize GameManager instances to store and manage critical variables across different game scenes.\nEvent Handling: Master the art of sending events to dynamically change the state of your scripts and enhance gameplay.\nGrid-Based Game Mechanics: Explore grid-based object manipulation techniques to facilitate seamless gameplay.\nAdvanced Grid Arrangement: Implement grid arrangements to effortlessly switch between different game object types without the need for constant instantiation.\nHandling Edge Cases: Learn strategies to solve all possible inputs and ensure a smooth gaming experience.\nProcedural Level Generation: Dive into the fascinating world of procedural level generation and continuously refine your code with each iteration.\nData Structures and Graphs: Gain a deep understanding of data structures and graphs, optimizing your code for superior game performance.\nLevel Design Excellence: Acquire methods for creating the most captivating and challenging levels for your players.\nStarting from the creation of the Gameplay and MainMenu scenes, you'll progress from basic concepts to advanced data structures and code optimization. Even if you're new to these concepts, our course offers insightful visualizations and step-by-step guidance, ensuring you can master them with ease.\nJoin us today to transform your game development skills, and bring the complexity of \"Connect Flow\" and Unity game development to life. Let's create the ultimate puzzle game together!",
      "target_audience": [
        "Beginner Game Developers",
        "Aspiring Puzzle Game Creators",
        "Programmers Looking to Branch into Game Development"
      ]
    },
    {
      "title": "Unreal Engine 5 Blueprint Scripting: Build Attack Helicopter",
      "url": "https://www.udemy.com/course/unreal-engine-5-blueprint-scripting-build-attack-helicopter/",
      "bio": "From Blueprint Basics to Advanced Game Mechanics: Build and Control a Combat-Ready Helicopter in Unreal Engine 5",
      "objectives": [
        "Navigate and utilize the Unreal Engine 5.4 interface effectively.",
        "Master the basics of Blueprint scripting for interactive gameplay.",
        "Create and implement realistic helicopter flight mechanics.",
        "Switch between controlling a helicopter and a third-person character in real-time.",
        "Utilize Unreal Engine 5.4's enhanced input system for responsive controls.",
        "Set up and manage game projects from start to finish.",
        "Create smooth transitions between different gameplay modes.",
        "Design and implement event-driven programming using Blueprints.",
        "Integrate new Unreal Engine 5.4 features into projects.",
        "Combine all learned skills to create a fully functional attack helicopter game."
      ],
      "course_content": {},
      "requirements": [
        "Basic computer skills",
        "Familiarity with gaming concepts",
        "A PC or Mac capable of running Unreal Engine 5.4",
        "No prior experience with Unreal Engine or programming needed"
      ],
      "description": "Dive into the world of Unreal Engine 5 with our comprehensive course designed to guide you from the basics of Blueprint scripting to the creation of a fully functional attack helicopter for your game. Whether you're a beginner or looking to enhance your skills, this course provides you with a solid foundation in Unreal Engine 5.4 and its powerful new features, including enhanced input.\nWhat You'll Learn:\nUnreal Engine 5 Fundamentals: Get started with the basics of Unreal Engine 5.4, exploring its user interface, key features, and workflows. Understand how to navigate the engine and set up your projects for success.\nBlueprint Scripting Essentials: Learn the logic and principles behind Blueprint scripting, Unreal Engine's visual scripting system. We'll cover everything from variables and functions to event-driven programming, enabling you to create dynamic, interactive gameplay without writing a single line of code.\nAttack Helicopter Creation: Step-by-step, we'll guide you through the process of designing and building a fully functional attack helicopter. You'll learn how to implement real-time controls, ensuring your helicopter is game-ready.\nRuntime Possession & Character Switching: Master the ability to switch between controlling your helicopter and a third-person character at runtime. You'll learn to create seamless transitions and interactions, enhancing the player's experience.\nAdvanced Features of Unreal Engine 5.4: Explore the latest enhancements in Unreal Engine 5.4, including the powerful enhanced input system. We'll integrate these features into your project, ensuring you're up to date with cutting-edge technology.\nWhy Take This Course?\nHands-On Project: Gain practical experience with hands-on project that reinforce your learning.\nExpert Guidance: Learn from industry professional with real-world experience in game development.\nCutting-Edge Techniques: Stay ahead of the curve by mastering the latest features in Unreal Engine 5.4.\nBy the end of this course, you'll not only have a solid understanding of Blueprint scripting and Unreal Engine fundamentals, but you'll also have created a complex, fully functional attack helicopter that can be used in your own game projects. Whether you're looking to kickstart a career in game development or enhance your existing skills, this course is your gateway to mastering Unreal Engine 5.4.\nEnroll now and take the first step towards becoming a proficient Unreal Engine developer!",
      "target_audience": [
        "Anyone interested in building and controlling a game-ready attack helicopter",
        "Experienced developers seeking to master new features in Unreal Engine 5.4",
        "Beginners interested in Unreal Engine 5",
        "Programmers wanting to learn Blueprint scripting",
        "Hobbyists looking to create a functional game project"
      ]
    },
    {
      "title": "Learn tvOS for Game Development",
      "url": "https://www.udemy.com/course/learn-tvos-for-game-development/",
      "bio": "Program a 2D-Side Scroller tvOS App for the New Apple TV",
      "objectives": [
        "Create a Side Scrolling game for the tvOS or iOS App Store.",
        "Create a template to use for future Swift 2 and SpriteKit based tvOS apps"
      ],
      "course_content": {
        "How to Create a tvOS Template for any SpriteKit Game": [
          "Introduction",
          "Project Files",
          "Initial Setup and Custom Classes",
          "Simple Two Button Menu Tutorial",
          "Transitioning Sprite Kit Scenes",
          "Multi-Directional SpriteKit Menu for tvOS",
          "Adjusting / Saving Color Schemes for the optimal TV experience",
          "Passing data between classes (for example, already played cards from a deck)",
          "NSUserDefaults and Team Standings",
          "Alert Windows",
          "NSNotifications and playing audio from the View Controller",
          "Clearing the Defaults for a New Game and Wrap Up"
        ],
        "How to Create a Side Scroller Game for tvOS or iOS - Session 1": [
          "Initial Setup",
          "Custom Player Class",
          "Animating Textures",
          "Initial Character Controls",
          "Physics Contacts",
          "Double Jumping, Fine-tuning Friction and Restitution",
          "Making the Camera and GUI Follow the Player",
          "Climbable Poles or Vines",
          "Hanging onto Moving Poles or Vines",
          "Pipes and Portals to Other Levels",
          "Using the same code in a Universal iOS Project",
          "Adding a tvOS Target to an Existing iOS Project",
          "Project files for Session 1"
        ],
        "How to Create a Side Scroller Game for tvOS or iOS - Session 2": [
          "Adding a Property List for Level Data",
          "Moving Platforms that Carry the Player",
          "Losing Lives",
          "Collecting Coins to Add Lives",
          "Enemies",
          "Refining Player Animation and Adding Sounds",
          "Refreshing Levels and Restarting Back Levels",
          "Parallax Effects",
          "Score Labels",
          "Dramatic Deaths",
          "Firing Projectiles",
          "Collecting Inventory (Bullets) to Use",
          "Project Files",
          "Conclusion"
        ],
        "Bonus - Our \"First Look\" Videos at the tvOS": [
          "Initial Setup and Gestures for tvOS - Part 1",
          "Initial Setup and Gestures for tvOS - Part 2",
          "Project Files"
        ]
      },
      "requirements": [
        "Some basic Swift 2 and Sprite Kit knowledge (via our free course)"
      ],
      "description": "***** ALL SOURCE PROJECTS HAVE BEEN UPDATED FOR SWIFT 3\nHow to Create a tvOS Template for any SpriteKit Game\n\nIn the first section we will create a tvOS template for navigating between scenes (Home, Features, Team Standings), and discuss ways to pass data around classes, save data using NSUserDefaults, swipe between menu options and much more. By the end of this course you will have a template you can begin any of your future tvOS apps with.\nHow to Create a Side Scroller Game for tvOS or iOS - Session 1\n\nIn this series you will learn how to create a retro 2d-style side scroller game from scratch for the new tvOS or for iOS. The project will be initially developed using the tvOS template, then you'll see how to take most of the same code and use it for an iOS app. We'll cover all the essentials to making a side scroller: building a physics-based environment (with platforms, vines, pipes, collectibles), programming a an easy character to move using swipes, adding the HUD (for things like Score or a Lives label), sound and much, much more. Toward the end of this session we'll also discuss how to add a tvOS target to an existing iOS project and share code / assets between the two targets.\n\nHow to Create a Side Scroller Game for tvOS or iOS - Session 2\n\nThe epic saga continues in this second session all about how to make a 2D side scroller for tvOS or iOS. We'll look at turning our GameScene into more of a \"game engine\" by incorporating a property list to change variables on a per-level basis. We'll also talk about scoring, moving platforms (that carry the player), \"dead zones\" to kill the player, restarting from continue points, inventory, and much more!",
      "target_audience": [
        "New or old iOS developers looking to expand into tvOS"
      ]
    },
    {
      "title": "Creating Game Mechanics with Unity",
      "url": "https://www.udemy.com/course/creating-game-mechanics-with-unity/",
      "bio": "Learn how to create various Game Mechanics in Unity. Create 3 established games with your own twists!",
      "objectives": [
        "Ability to Translate Game Mechanics into Actionable Steps",
        "Knowledge of Object Oriented Programming Concepts through Unity",
        "Knowledge of Various Game Programming Concepts through Unity",
        "Creating User Interfaces with Unity"
      ],
      "course_content": {
        "Introduction": [
          "Project Setup",
          "Crash Course - Unity Components",
          "Crash Course - OOP",
          "Crash Course - Data Structures"
        ],
        "Bullet Hell Space Invader": [
          "Game Mechanics Breakdown",
          "Creating Plane Movement",
          "Plane Movement - Additional Lecture",
          "Creating Bullet",
          "Implementing Shooting Logic",
          "Implementing Damage Logic",
          "A Little More about Coroutine - Additional Lecture",
          "Implementing Enemy Movement",
          "Implementing More Advanced Clamping",
          "Implementing Enemy Shooting & Bullet Pattern",
          "Fixing Enemy Movement",
          "Creating More Bullet Patterns",
          "Creating Health Bar",
          "Destroying Bullets",
          "Implementing Enemy State Machine",
          "Implementing Enemy Body Part",
          "Implementing Player Body Part",
          "Implementing Scrap Currency",
          "Creating Bullet Hell Stage",
          "Creating Stage UI",
          "Creating Body Part Crafting & Upgrading Mechanic",
          "Creating Shop UI",
          "How to Replace Scripts",
          "Reorganization & Polishing"
        ],
        "Ninja Flappy Bird": [
          "Game Mechanics Breakdown",
          "Implementing Jump Movement",
          "Implementing Game Flow Manager",
          "Implementing Jump Animation",
          "Implementing Game Service",
          "Implementing Horizontal Movement & Room Spawning",
          "Implementing Difficulty & Speed Control",
          "Implementing Slash Mechanic",
          "Implementing Slashing Obstacle Logic",
          "Creating More Obstacles",
          "Creating Input Router",
          "Creating Timescale System",
          "Creating Radial Menu",
          "Preparations for Power-ups",
          "Creating Power-ups"
        ],
        "Gwent Card Game": [
          "Game Mechanics Breakdown",
          "Implementing Card Data",
          "Implementing Card Deck",
          "Preparation for Gwent Gameplay",
          "Creating Gwent UI",
          "Starting Gwent Gameplay",
          "Deeper into Gwent Gameplay",
          "Implementing Strength Modifier",
          "Creating Weather Cards",
          "Implementing Card Abilities",
          "Implementing Leader Card",
          "Creating Enemy AI"
        ]
      },
      "requirements": [
        "Basic Programming Skill (Variables, If branching, For and While loop)",
        "Basic Understanding of Unity Components and Game Objects"
      ],
      "description": "If you are interested in expanding your knowledge repertoire in creating Game Mechanics, this course is for you! With fully captioned lectures (in English), we'll learn about how to translate your Game Mechanics design into actionable steps to program. And then you'll learn various Game Programming concepts to create your Game Mechanics. Completing this course would help you widen your toolbox in creating the Mechanics that you envision.\nThe game engine we'll be using is Unity, but you should be able to apply the knowledge from this course to any game engine. We'll not be using any complex feature from Unity nor any unique assets. We'll be using default Unity Sprites so you'll know if your game mechanic is good without unique assets, it would be feel much better with them.\nBullet Hell Space Invader\nThis is the first game we'll be making, we'll try to create a Space Invader game with Bullet Hell twist. Here's what we'll learn:\nInput & Movement\nBullet & Damage Mechanic\nCoroutines\nBullet Hell Pattern\nState Machines\nBody Part Mechanic\nMulti-screen UI\nAnd More!\nNinja Flappy Bird\nFlappy Bird but Ninja! Your bird would be able to slash obstacles and use different types of skills. Here's what we'll learn:\nSimulating Physics Movement\nBasic Procedural Generation\nCustom Input System\nTimescale System\nRadial Menu\nAnd More!\nGwent Card Game (Witcher 3)\nWe'll create the famous Card Game from Witcher 3, Gwent! No weird twist on this one, but you'll learn how to create this fun mini-game. Here's what we'll learn alongside Gwent:\nData and Logic Separation\nTurn Based Mechanic\nModular Card Abilities\nAI for Card Game\nManaging Large Interactable UIs\nAnd More!\nCan't wait for us to learn together!\n\n\nNote : Lecture 38 (Creating More Obstacles) has audio problems, but the caption is working, I hope this is not a problem for you.",
      "target_audience": [
        "You have learnt about the basics of Unity but need more guidance in creating more complicated mechanics",
        "You are curious about how to implement different mechanics in Games"
      ]
    },
    {
      "title": "Pass CV0-003 CompTIA Cloud+ Certification in 3 Days (2025)",
      "url": "https://www.udemy.com/course/pass-cv0-003-comptia-cloud-certification-in-3-days-2025/",
      "bio": "CV0-003 CompTIA Cloud+ Certification | Real Questions | Dump | Covers All Exam Topics",
      "objectives": [],
      "course_content": {
        "Practice Tests": []
      },
      "requirements": [],
      "description": "80+% Student Passed Exam After Only Studying These Questions. Pass yours, enroll now!\n\n\nFree Sample Question 1 out of 3:\nA Cloud Engineer at AeroScale Technologies' Platform Engineering Group needs to collect data on service performance and resource consumption for virtual machines across their cloud infrastructure. Which of the following will best accomplish this objective?\n\n\nA. Syslog\nB. SNMP\nC. CMDB\nD. Service management\nE. Performance monitoring\n\n\nCorrect Answer: E\nExplanation:\nThe objective is to gather information about services and resource utilization on Virtual Machines (VMs) within a cloud environment.\nE. Performance monitoring: This is the most appropriate answer. Performance monitoring tools are specifically designed to collect, analyze, and visualize metrics related to the operational health and resource consumption of systems, including VMs. These tools provide real-time data on CPU usage, memory consumption, disk I/O, network throughput, and other vital statistics. By monitoring these metrics, an administrator can effectively assess resource utilization and identify performance bottlenecks or issues with services running on the VMs. Cloud platforms typically offer integrated performance monitoring services (e.g., AWS CloudWatch, Azure Monitor, Google Cloud Operations Suite) that provide deep insights into VM performance.\nA. Syslog: Syslog is primarily used for collecting log messages from various systems and applications. While logs can provide diagnostic information about services and events, they do not inherently provide comprehensive, real-time metrics on resource utilization (like CPU, memory, disk I/O) in the way performance monitoring tools do.\nB. SNMP (Simple Network Management Protocol): SNMP is a protocol used for network device management and monitoring. While it can retrieve certain system-level metrics, it is more focused on network infrastructure elements and less granular or comprehensive for deep VM resource utilization compared to dedicated performance monitoring solutions, especially within a cloud context.\nC. CMDB (Configuration Management Database): A CMDB is a database that stores information about an organization's IT assets and their relationships. It's used for configuration management and asset tracking, providing a static view of configurations rather than dynamic, real-time data on resource utilization or service performance.\nD. Service management: This is a broad term encompassing the processes and practices involved in designing, delivering, managing, and improving IT services. It's a framework or discipline, not a specific tool or method for directly gathering real-time resource utilization data from VMs.\n\n\n\n\n\n\nFree Sample Question 2 out of 3:\nAt InnovateTech Solutions, the Corporate Services Department was incorrectly charged for a cloud service belonging to the Development Team, though all other cloud costs were accurately attributed. Which of the following is the most likely cause for this error?\n\n\nA. Misconfigured templates\nB. Misconfigured chargeback\nC. Incorrect security groups\nD. Misconfigured tags\n\n\nCorrect Answer: D\nExplanation:\nThe most likely cause for this error is misconfigured tags. In cloud environments, tags are key-value pairs assigned to resources for various purposes, including organization, automation, and crucially, cost allocation and management. Organizations often use tags to identify the owner, department, project, or cost center associated with a particular cloud resource.\nWhen a cloud service belonging to one department is incorrectly tagged with another department's tag (or simply not tagged at all, leading to a default incorrect assignment), the cloud's billing and chargeback systems, which often rely on these tags to categorize and allocate costs, will attribute the expense to the wrong department. Since \"all other cloud costs seem to be correct,\" it suggests that the overall chargeback system is functional, but the specific identification (tagging) of this particular service for billing purposes was incorrect.\n* A. Misconfigured templates: While templates define resource provisioning, they are less directly about cost allocation *after* a resource is deployed, especially if other costs are correct.\n* B. Misconfigured chargeback: A broadly \"misconfigured chargeback\" system would likely affect more than just one service's cost attribution. If the system itself was fundamentally flawed, it would likely cause widespread billing errors, not just for a single service, while \"all other cloud costs seem to be correct.\"\n* C. Incorrect security groups: Security groups are related to network access control and security, not cost allocation or departmental billing.\n\n\n\n\n\n\nFree Sample Question 3 out of 3:\nThe Content Delivery team at VividStream Solutions is implementing a new cloud system that requires a storage service to manage a large number of digital files and images, providing distributed access and serving images directly to users' browsers. Which of the following solutions would best meet these requirements?\n\n\nA. NAS storage\nB. Object storage\nC. File storage\nD. Block storage\n\n\nCorrect Answer: B\nExplanation:\nObject storage is the most suitable solution for the described requirements. It is specifically designed for storing vast amounts of unstructured data, such as digital files and images. Key advantages that align with the requirements include:\n1. Scalability and Durability: Object storage can handle an extremely large number of files and images, scaling virtually infinitely to accommodate growth.\n2. Distributed Access: Data stored in object storage is inherently distributed across multiple servers and locations, ensuring high availability and global access.\n3. Direct Browser Access: Objects are typically accessed via HTTP/HTTPS URLs. This allows images and other digital files to be served directly from the storage service to a user's web browser without the need for an intermediary web server, which is highly efficient for content delivery.\nIn contrast:\n* NAS storage and File storage (often referring to managed file services) provide a file system interface (like NFS or SMB). While good for applications requiring file-level access, they are not optimally designed for direct, large-scale public web access of individual files without additional web server layers.\n* Block storage provides raw, unformatted disk volumes to virtual machines. It's suitable for operating systems and databases, but not for direct, distributed access to individual files from a browser.\n\n\n\n\n\n\nWhy Choose Our Certification Exam Prep Courses?\nWhen it comes to passing your certification exam—whether it’s AWS, Microsoft, or Oracle—quality training makes all the difference. Our exam prep courses are designed to give you the knowledge, confidence, and skills you need to succeed on test day and beyond.\n\n\nComprehensive Coverage of All Exam Objectives\nWe teach every topic outlined in the official certification blueprint. No shortcuts, no skipped sections—just complete coverage to ensure you walk into your exam fully prepared.\n\n\nClear, Step-by-Step Learning\nOur expert instructors break down complex concepts into easy-to-follow explanations. You won’t just memorize answers—you’ll understand the reasoning behind them so you can apply your knowledge in any scenario.\n\n\nRealistic Practice for Real Exam Readiness\nExperience exam-like simulations, practice questions, and hands-on scenarios that mirror the style, difficulty, and pacing of the real test. This ensures that by the time you sit for your certification, you’ve already “been there” before.\n\n\nAlways Current, Always Relevant\nTechnology changes fast—and so do exams. That’s why we continuously update our content to match the latest certification requirements and platform capabilities across AWS, Microsoft, and Oracle.\n\n\nDesigned for All Skill Levels\nWhether you’re a seasoned professional aiming to validate your expertise or a newcomer taking your first steps in the cloud and IT world, our courses adapt to your needs with clear explanations, structured practice, and actionable insights.\nOur Promise: We deliver exam prep that’s more than just test questions—it’s a complete learning experience that equips you with real-world skills, helps you master the material, and gives you the confidence to pass your certification the first time.\n\n\nStart your certification journey today with trusted, high-quality training that works—no matter which exam you’re taking.",
      "target_audience": [
        "IT professionals seeking to validate their skills in cloud infrastructure and operations.",
        "System administrators and network engineers expanding their expertise into cloud technologies.",
        "Technicians responsible for managing cloud deployments and virtualization environments.",
        "Learners aiming to earn the CompTIA Cloud+ certification to advance their cloud career.",
        "Anyone interested in gaining foundational and practical knowledge of cloud computing."
      ]
    },
    {
      "title": "Bridge for Beginners (Part 2 of 2)",
      "url": "https://www.udemy.com/course/bridge-for-beginners-part-2-of-2/",
      "bio": "Learn how to Bid in Bridge",
      "objectives": [
        "You will learn how to play the different positions at the table in this course",
        "Learners will learn new terminology and bidding techniques",
        "Learners will become overcallers , and advancers",
        "You even learn how to Look for Slam Contracts !"
      ],
      "course_content": {
        "Introduction": [
          "Responding to 1NT (Transfers)",
          "Responding to 1NT (Stayman)",
          "Overcalling",
          "Advancing (Responding to the Overcaller)",
          "Looking for Slam (Gerber and Keycard)",
          "How to Score in Bridge",
          "Transfers Quiz",
          "Stayman Quiz",
          "Overcalling quiz",
          "Advancing Quiz",
          "Looking for Slam Quiz"
        ]
      },
      "requirements": [
        "Beginners that are ready to learn all the different positions at the table"
      ],
      "description": "This 6 step course is part 2 of the course and  provides you with the building blocks to help you journey your way into a world of problem solving and logically fun !   The material is new, fresh and very visual - allowing you to get a clear understanding of what it takes to become a bridge player.   Bridge is made up of 2 parts - the auction (where all players can bid) and playing (where the winners of the auction now play out the tricks they promised to make).   With a simple pack of 52 cards, we scramble our minds and center our attention to this brilliant game that requires logic and counting .   If you can count to 40 - you are almost there. If you cant count to 13 four times - your are going to be just fine !  Whether you would like to play social or club level bridge - these rules need to learnt before you start.   This course provides a wonderful platform to launch .   I would recommend watching the videos more than once, just incase you missed some of the information the first time you watch.   There is no better way to spend a rainy afternoon or an evening with friends .  Please don't give up , its really worth it .",
      "target_audience": [
        "Beginners keen to learn the full course on how to play bridge"
      ]
    },
    {
      "title": "Locking and Unlocking Levels in Your Solar2D Games",
      "url": "https://www.udemy.com/course/locking-and-unlocking-levels-in-corona-sdk-games/",
      "bio": "Use the OGT Level Manager to handle level management in your games! Lock and unlock levels easily. Full code included!",
      "objectives": [
        "Create fun and easy-to-use level selectors in your game.",
        "Keep track of how many stars are earned on each level in your game.",
        "Save and retrieve scores for each level of the game.",
        "Make more games, faster!"
      ],
      "course_content": {
        "OGT Level Manager: Overview and Code": [
          "Read Me First!",
          "What is OGT Level Manager?",
          "New Information You MUST Read!",
          "The OGT Level Manager Code"
        ],
        "OGTLM: Basic Usage": [
          "Starting from Scratch",
          "Retrofit an Existing Project",
          "Utility Functions"
        ],
        "OGTLM: Advanced Usage": [
          "Custom Level Display",
          "Multi-User Settings",
          "Worlds and Levels"
        ],
        "OGTLM: Reference Documentation": [
          "Documentation Intro",
          "Level Names",
          "Asset Filenames",
          "Level Numbers",
          "Showing Scores",
          "Image Offsets",
          "Grid Settings",
          "Misc Variables",
          "Utility Functions"
        ]
      },
      "requirements": [
        "Intermediate level knowledge of Solar2D",
        "Making a game using Solar2D's Composer feature."
      ],
      "description": "Many games are based on levels, and most of those games have a screen where:\nThe user can choose a level to play.\nSome levels are locked until previous levels have been played.\nA number of stars are shown based on the player’s score for that level.\nOne of the most commonly asked game dev questions is, “How do I lock and unlock levels?” Until now I’ve tried to explain the concept to people but now I have a better answer…\nThe Outlaw Game Tools Level Manager\nOGT Level Manager is a library you include in your game and then “tweak” some variables to specify which graphics you want to use, how many total levels you have, etc.\nAnd then in your game it’s as easy as this to unlock the next level when the player has finished with the current level:\nunlockNextLevel()\nOGT Level Manager keeps track of which levels have been unlocked and it’s shown automatically when the player goes back to the level select screen!\nIf you’re using a “stars” system in your game, OGT Level Manager will even keep track of how many stars were earned on each level. And it’s this easy to use:\nupdateStars(2)\nThat one call will let OGT Level Manager know the player earned two stars on that level and it will automatically show the correct number on the level select screen.\nHere are some of the features found in this library:\nNo limit to the number of levels.\nMultiple pages with next and previous arrows.\nOne to three stars shown on levels (optional).\nUse your own graphics. Using smileys instead of stars? No problem!\nTweak the position of level boxes, arrows, stars, numbers, etc.\nOne Composer scene with data loaded for each level? Works that way.\nOne Composer scene for each level? Works that way, too!\nBasically, I’ve made it easy to drop in your own graphics, and then tweak the position of any that may need it by setting variables. Changing the actual code is not necessary.\nRequirements:\nSolar2D.\nUse Composer for scene management in your game (built-in to Solar2D).\nOGT Level Manager comes with two sets of tutorial videos.\nThe first set is for those people who want to just use the library in their games and don’t really care about the stuff under the hood. These are the “basic how to use it” videos.\nThe second set dives in behind the scenes and shows you how things work. Just a word of warning, for this second set of videos I’m assuming you have at least an intermediate knowledge of using Solar2D. I don’t start clear back at the “this is how you display a graphic” point.\nYou will save a LOT of time by using OGT Level Manager -- time you can spend working on the more fun parts of your new game!",
      "target_audience": [
        "Solar2D game developers who use levels in their games."
      ]
    },
    {
      "title": "Code Your First Game: Arcade Classic in JavaScript on Canvas",
      "url": "https://www.udemy.com/course/code-your-first-game/",
      "bio": "Program a complete game today. No special software or install required. All you need is a text editor and a web browser.",
      "objectives": [],
      "course_content": {},
      "requirements": [
        "Very early on students will need to show file extensions in their operating system (explained briefly in the video)",
        "If a plain text editor is available that has programming features like line numbers and auto-indent (ex. Notepad++ on PC, TextWrangler on Mac) that may be handy but is not necessary, as a generic text editor like Notepad or TextEdit will work fine for a program of this size"
      ],
      "description": "At the end of this short course you'll have programmed your first game. You'll learn gameplay development fundamentals by really doing it – writing and running real code on your own machine.\nEach step of the course has the source code attached exactly as it should look at that time (click \"View Resources\" then \"Downloadable Resources\"), for you to compare to or pick up from, so you can't get stuck!\nBegin Your Game Programming Journey the Proven Way\n\"Make the simplest game possible.\" \"Program a ball and paddle project.\" \"Practice by first remaking something from the 1970's.\" All beginning developers hear this advice from more experienced peers... because it works!\nBy following this approach you will:\nLearn design from a fun classic that people know and enjoy.\nStart your practice today – now! – without waiting for an idea.\nFinish your game in hours or in a weekend, not over months.\nUnderstand every line of code used in the entire program.\nAvoid distraction from searching for or creating detailed art.\nMaster fundamentals needed to make your own games better.\nYou can program this game with a normal text editor, and run it in the web browser you already have. No special software is needed.\nThough you'll be coding in JavaScript for HTML5 canvas in this course, the focus is on common game programming concepts. You can later apply these same patterns to get quick results in other programming languages such as C#, Java, ActionScript 3, C++, or Python.\nI'm a private game development trainer, and for clients new to gameplay programming this is exactly the material that I cover to get them started quickly. Within hours you will have finished programming your first project. This is the fastest way to get results. The momentum gained from doing this provides a solid foundation to give more advanced concepts meaning and context as you continue on in your journey of learning game development.\n(HTML5 Logo in the course image is by W3C, licensed under Creative Commons Attribution 3.0 Unported.)",
      "target_audience": [
        "This is for anyone who wants a quick but thorough introduction to simple game programming in a way that doesn't require any special software, download, or installation",
        "If you've had at least a little exposure to generic programming concepts like variables, functions, and if-statements you'll have an advantage, however in case you've never heard those terms they're explained briefly as they come up",
        "Although this a uses JavaScript and HTML5, it is not intended for someone who is focused on learning HTML5/JS for web page design"
      ]
    },
    {
      "title": "Unreal Engine Tanks for Unity Developers (UE4 & UE5)",
      "url": "https://www.udemy.com/course/ue4tanks/",
      "bio": "Unreal Engine for Unity users & New GameDev Comers",
      "objectives": [
        "Get to put a game together in Unreal Engine",
        "Understand the process of making a fully features Unreal Engine game from scratch",
        "As a Unity3d engine user, will be re-creating one of the most famous Unity3d examples in Unreal Engine",
        "Understanding differences between Unity3d and Unreal Engine",
        "Understand what differs a single player game from a local multiplayer game in Unreal Engine"
      ],
      "course_content": {},
      "requirements": [
        "Unity3d experience is nice to have but not a must, as anyone can go through this course",
        "No programming experience needed",
        "A willing to learn!"
      ],
      "description": "Withing this unique 6.5  hours long course, you will be re-building the famous 1 v 1 Tanks game of Unity3d, but this time within Unreal Engine (from scratch), which makes the course a great start for everyone, regardless if they are new comers into the Unreal Engine world, or a Unity3d user who wants to try or move to Unreal Engine. (Everything described within this course can be applied in Unreal Engine 4 as well as Unreal Engine 5).\nThe course goes through all the fundamentals of creating a blueprints based playable packaged 1v1 game, starting from controller, inputs, to materials, to vfx, UI, up to handle ear candy & eye candy. Starting from a totally empty project, and ending up with a fully packaged (bugs free) playable game.\nFor the past 5 years, this course be educated in private groups and different other platforms, now it's the time to bring it to you here at udemy! Wish you all the best in that journey & keep on making games :)\n\n\nDisclaimr: The \"Tanks\" game is a property of Unity3d, so hence if you want to access it, you need to use a Unity3d account to install Unity3d Engine and get a version of the game's project files from the Unity3d AssetStore.",
      "target_audience": [
        "Game developers at all levels",
        "Mainly targeting Unity3d users",
        "None game developers who wants to learn Unreal from the beginning"
      ]
    },
    {
      "title": "How To Create A Fighting Battle Royale Game In Roblox",
      "url": "https://www.udemy.com/course/create-your-first-roblox-fighting-battle-royale/",
      "bio": "Learn how to make a Roblox Fighting Battle Royale with Roblox Studio",
      "objectives": [
        "Roblox Game Development",
        "Roblox Studio",
        "Roblox Lua Programming",
        "How To Create A Battle Royale In Roblox",
        "How To Create A Fighting Game In Roblox",
        "Game Development For Beginners And Advanced Developers"
      ],
      "course_content": {},
      "requirements": [
        "No programming experience is needed to take this course.",
        "Must have parents permission to take this course if you are under a certain age for Roblox.",
        "All programs and materials are included in this course, which include how to setup Roblox."
      ],
      "description": "In this course you will learn how to make your a fighting battle royale in Roblox! You will learn about Roblox studio and how to quickly get an battle royale up and running with simple and easy lessons that even a beginner could do.\n\n\nYou will learn how to set up Roblox Studio, how to setup a battle royale system quick and easy and it even comes with a ready made project! We will create a leadertstats, save and load data, add fighting controls, game loops, and more! We will go over how to add custom maps to the main game so that each round is different! You'll learn all the necessary steps of making a battle royale in Roblox. After the main part of the course there are extra videos where we handle stuff like adding a leaderboard for players to view their and even earn donations, these are optional but recommended! You can follow along as we go, but I also recommend you to add as much creativity as possible.\n\n\nIf you are purchasing this course and you're under 18, you may use the services only if a parent or guardian opens your account, handles any enrolments, and manages your account usage.",
      "target_audience": [
        "This course is for anyone who is interested in creating games in Roblox.",
        "Beginners who want to learn how to create multiplayer games very easily.",
        "Developers who are interested in creating battle royale games.",
        "Developers who are interested in creating fighting games."
      ]
    },
    {
      "title": "Game Development: Basic Games with C# and Unity 3D",
      "url": "https://www.udemy.com/course/game-development-basic-games-with-c-and-unity-3d/",
      "bio": "Learn How to Create Games with Unity 3D by Programming 3 Projects from Scratch. Great to Quickstart your Portfolio!",
      "objectives": [
        "You will learn how to create simple games with Unity 3D",
        "You will learn how to create simple games with C#",
        "You will learn how to use GameObjects, Materials, Nested Prefabs and Variants in your games",
        "You will learn how to make Vectorial Movement, Interpolation, Basic Physics, Colliders and Triggers in your games",
        "You will learn how to use GetComponent and navigate through references in your games",
        "You will learn how to use Controls and Inputs through events in your games",
        "You will learn how to work with the UI and Anchors in your games",
        "You will learn how to use Interfaces",
        "You will learn how to use Enums",
        "You will be able to use scripts in Animator events and control the state changes",
        "You will be able to use Coroutines and Yield Instructions",
        "You will be able to use Asynchronous systems",
        "You will be able to use Singletons",
        "You will be able to use Ref/Out",
        "You will be able to use Abstract, Virtual and Override",
        "You will be able to save data in .jsons",
        "You will be able to build your own delegates",
        "You will be able to use ScriptableObjects",
        "You will be able to use Tweeners to make linear and curved movements",
        "You will be able to use Extensions",
        "You will be able to change scenes/levels",
        "You will be able to create a loot system",
        "You will be able to create a space shooter"
      ],
      "course_content": {
        "Intro": [
          "How to Get Help",
          "Review",
          "Preparing the Environment",
          "Text Editor"
        ],
        "Understanding the Unity Environment": [
          "Component-Oriented Programming",
          "MonoBehaviour",
          "Event-Functions: Awake/Start/OnEnable",
          "Event-Functions: Update/FixedUpdate/LateUpdate",
          "Creating Basic Geometry",
          "Lights",
          "2D Cameras and Lights",
          "Materials and How to Apply Them",
          "Inspector and Pre-defining Variables",
          "GameObjects and Prefabs",
          "Review Reminder"
        ],
        "Project 1: Pong": [
          "Creating a New Scene and Background",
          "Players and Controls",
          "Player 2 and Move Speed",
          "Adding Basic Physics",
          "Moving RigidBodies",
          "Ball, Angles and Collisions",
          "Triggers and Score Detection",
          "Score Panel",
          "UI and Anchors",
          "Sound FXs",
          "Creating a Playable Build"
        ],
        "Pong Tuning": [
          "Review Reminder",
          "Particle System",
          "Customizing the Project"
        ],
        "Project 2 - Part 1: Space Invaders - Inputs, Bullets and Slicing Sprites": [
          "Creating a New Project and Slicing Sprite Atlases Manually",
          "Animator",
          "Slice and Trim in the Sprite Editor",
          "Player Ship and GetAxis",
          "GetButton and Pixel Per Unit",
          "The new 2019.3+ Input System",
          "Improving the Input",
          "Creating the Bullets",
          "Moving and Bullet Triggers",
          "IShootable and Enum",
          "Adding the Aliens",
          "Alien's Bullets"
        ],
        "Project 2 - Part 2: Space Invaders - Animations, Barriers, Collisions and Aliens": [
          "Bullet Animation",
          "Bullet Effects/Animator Events",
          "Animator Override and Alien Deaths",
          "Lives and Player Death",
          "Invincibility Frames",
          "Barriers",
          "Putting the Aliens in a Matrix",
          "Making the Aliens Attack",
          "Alien's Movement",
          "Wall Detection",
          "Sending the Script Component from one Objecto to Another"
        ],
        "Project 2 - Part 3: Space Invaders - Sounds, Alien Behaviour and HighScore": [
          "Aliens Advancing",
          "Alien's Speed",
          "Constraints on Player Movement",
          "Score UI",
          "Adding the Special Ship",
          "Ship Behaviour",
          "Creating a Game Over System",
          "Defeat Condition",
          "Win Condition",
          "Saving and Loading a High Score",
          "BGM",
          "BGM Pt2",
          "Sound FX",
          "Review Reminder"
        ],
        "Saving and Building the Game": [
          "Pooling System",
          "Saving With ScriptableObjects",
          "Saving With .JSONs",
          "Final Backup",
          "Tuning the Space Invaders"
        ],
        "Project 3 - Part 1 - Galaga: Creating the Base of the Game": [
          "Creating the Project",
          "Star Background",
          "Moving the Ship",
          "Weapons",
          "Bullets and Pooling",
          "Explosion and Animators",
          "Variants and Bullet Behaviours",
          "Bullet Angle and Player Animator",
          "Lives UI",
          "Pickups",
          "Weapon Pickups"
        ],
        "Project 3 - Part 2 - Galaga": [
          "Changing Weapons",
          "FireWeapons Event",
          "Ammo",
          "Life Pickups",
          "Chaser Bullet",
          "Perfect and Limited Chase",
          "Improving the Chaser",
          "Drops/Loot",
          "Installing a Tweener",
          "Catmull and Bezier Curves",
          "Finding the Control Point",
          "SetEase and Randomizing the Curve Direction",
          "Player Dive"
        ]
      },
      "requirements": [
        "You need to have a good grasp on Programming Logic",
        "You need to have a good grasp on Object Oriented Programming",
        "You need to have a basic grasp on C#/Java"
      ],
      "description": "In this course we are going to create 3 simple games and learn a lot from the development of each one. Then you are encouraged to continue the development by yourself following some guidelines on what to do; this way you get to practice and can add some beginner projects to your portfolio.\nThe first of the main projects is the Pong game, which we will use to learn all the basics, mostly Unity stuff and a little coding here and there.\nThe second is the Space Invaders project, where we start to use much more code.\nThe third is the Galaga/Space Shooter, when we go really heavy into programming behaviours, tweeners, movement curves, etc.\nI'd recommend for you to give a quick scroll through the lesson's names to see more in depth all the topics we are going to go through, but here is a short list of what you'll learn:\nGameObjects, Materials, Nested Prefabs and Variants\nMake Vectorial Movement, Interpolation, Basic Physics, Colliders and Triggers\nGetComponent and navigate through references\nControls and Inputs through events\nUI and Anchors\nInterfaces, Enums\nUse Scripts in Animator Events and Control the State Changes\nCoroutines and Yield Instructions\nAsynchronous systems\nSingletons\nRef/Out\nAbstract, Virtual and Override\nSave Data in .jsons\nBuild your Own Delegates\nScriptableObjects\nTweeners to Make Linear and Curved Movements\nExtensions\nChange Scenes/Levels\nCreate a Loot System\nCreate a Weapon System\nPlease take a look at the prerequisites before making the purchase. I'm expecting you to know basic programming logic and have a grasp on OOP. Thanks for your time and hope to see you in the lessons o/",
      "target_audience": [
        "Programmers that want to begin working on games",
        "Graduates that want to begin applying their knowledge"
      ]
    },
    {
      "title": "Coding for kids: Learn to create games with Scratch!",
      "url": "https://www.udemy.com/course/scratch-for-children-from-0-to-hero/",
      "bio": "An Engaging and Comprehensive Guide for Ages 6-12 to Build Programming Foundations and Spark Creativity using Scratch",
      "objectives": [
        "Scratch",
        "Programming for kids",
        "Creating games",
        "Develop their logical thinking",
        "Coding"
      ],
      "course_content": {
        "Introducción": [
          "Introduction",
          "Create a profile",
          "Backdrop and characters"
        ],
        "Programming": [
          "Movement",
          "Looks",
          "Project 1",
          "Events",
          "Control",
          "Project 2",
          "Sensors",
          "Operators",
          "Project 3",
          "Sounds",
          "Variables",
          "Final project"
        ]
      },
      "requirements": [
        "Be ready to have fun programming!"
      ],
      "description": "Does your child dream of bringing their wildest game ideas to life? You found the perfect course for it!\nOur comprehensive Scratch course equips them with the coding superpowers to make it happen!\n\nLearning programming has many advantages and here are some of them:\n\nMaster the Basics: From motion and variables to objects and operators, they'll build a rock-solid coding foundation.\n\nFuture-Proof Skills: These concepts effortlessly transition to Python, JavaScript, and beyond, opening doors to endless possibilities.\n\nBrainpower Boost: Studies show coding enhances math, computer science, and engineering skills, making them a super learner!\n\nSoft Skills Superhero: Logic, problem-solving, and teamwork become second nature through engaging game creation projects. ‍\n\nLearning Through Play: No boring lectures! Kids code their way to success through exciting game design, making learning fun and effective.\n\nAges 6-12: This course is perfect for young minds, but anyone over 3 can join the coding adventure. ‍‍‍\n\nAll You Need: Just a computer and internet connection, and they're ready to code!\n\nWe're Here to Help: Expert support is always available, ensuring your child's coding journey is smooth and successful.\n\n\nIn this course we cover all the basics needed to empower them to learn programming, create games, stories. We also enable them to further understand better maths, problem solving and local thinking. As mentioned previously, our mentor support is always available to guide them and support them if there are any questions or doubts.\n\nDon't wait! Give your child the gift of creativity, confidence, and a future built on code. Sign up today and watch their coding dreams come alive!",
      "target_audience": [
        "This course is for students aged 6 to 12"
      ]
    },
    {
      "title": "Practical Game Development in Unity 4: Level 2.1",
      "url": "https://www.udemy.com/course/practical-game-development-in-unity-4-level-21/",
      "bio": "Learn pragmatic game development techniques using industry-leading, free, and cross platform technologies!",
      "objectives": [],
      "course_content": {
        "The Beginning": [
          "Introduction",
          "Setting up Our Project",
          "Skyboxes"
        ],
        "Controlling our Player": [
          "Player: Part 1",
          "Player: Part 2",
          "Player: Part 3"
        ],
        "Blowing Things Up!": [
          "Weapons: Part 1",
          "Weapons: Part 2",
          "Asteroids: Part 1",
          "Asteroids: Part 2"
        ],
        "Waypoints": [
          "Targeting",
          "Waypoints"
        ],
        "Tying it all Together...": [
          "Game Manager",
          "Screens",
          "High Scores"
        ],
        "Now, for some Polish!": [
          "Effects",
          "Sounds",
          "Prettifying the GUI"
        ],
        "And... That's a Wrap!": [
          "Conclusion"
        ]
      },
      "requirements": [
        "Beginner-level understanding of C#",
        "Unity Standard (the free edition) available on Unity's homepage",
        "Visual Studio or MonoDevelop (which comes bundled, free, with Unity standard)"
      ],
      "description": "Welcome to Practical Game Development in Unity 4: Level 2.1!\nhis video series is all about the practical approach to using the tools made available to us in Unity 4 to create our very own video game! Over the course of this VTM, we will create a 3D Asteroids-style game - complete with Freelancer-style spaceship movement and weapon controls. We will show everything from a modular player controller all the way to implementing custom sounds - both 2D and 3D - and polishing the game up with a simple menu system complete with high scores! In addition, we will build a targeting HUD, a waypoint navigation system, and even some spiffy particle effects!\nLevel 2.1 is the first in a series of training products centered around the creation of an open world 3D space game. The game we put together in this series will serve as the foundation of our future projects in this series!\nWhy Learn Unity?\nUnity is the fastest growing game engine on the market - favored by the smallest indie studios and the largest game development companies alike. Unity’s flexible, extensible, editor and component-oriented architecture lends itself well to the creation of virtually any game or simulation imaginable!\nFinally, although there is a pro version of it; almost all of the features that make it one of the leading game-development platforms are available for both commercial and non-commercial use absolutely free!\nWhat will you learn?\nWe will be putting together a waypoint based Asteroids-like game with the following features:\n- Freelancer-style player controller and weapons system\n- A targeting HUD used to identify the next waypoint in the game\n- Additional HUD elements for player health, current speed, and time left\n- Both 2D and 3D sounds - including an engine sound with a variable pitch depending on speed\n- An endless asteroid field manager\n- Basic, scalable, menu system\n- High score management and persistence\n- The ability to construct multiple levels\nThough the course of the creation of our game, we will solve many common challenges that come up during game development: including collision detection, resource management, modularity of our code, and the interaction between different game objects.\nWhat you need to follow along\nA basic understanding of Unity: We won’t be covering elementary topics such what a game object is or how components work. If you have never touched Unity, we recommend you check out Practical Game Development in Unity 4: Level 1 first to get a grasp of the fundamentals. However, this series is great for people who know their way around Unity, but may still be uncomfortable about how to use its various tools and techniques to great effect.\nBeginner-level Understanding of C#: The bulk of code we will write will be relatively simple C#. In the few cases where more advanced features are utilized, the purpose of the code will be very apparent and provide for a great learning experience for beginner developers who wish the explore the language further.\nUnity Standard: We will be with the standard, free, version of Unity. If you haven’t already, be sure to grab the latest version of the editor from the Unity website: http://unity3d.com\nVisual Studio or MonoDevelop: We will be using Visual Studio 2013 with ReSharper 8 installed. However, you will be able to follow along with either any version of Visual Studio (even the free express editions) from 2010 onwards - or with the free and open-source MonoDevelop installation that comes bundled with Unity.\nOptional - SourceTree: We recommend that developers working on any project, big or small, use source control. GIT is an excellent choice as it is free, widely supported, and doesn’t require any special services to use locally. We will be using the SourceTree product by Atlassian to manage our GIT repository. Although this is an optional step that may be skipped; we do very much believe that getting into the habit of using source control in your projects is very important.\nFuture series\nWe will be using this project as the foundation for a larger game that will be developed over the course of multiple video series. In the future, we will be adding open-world gameplay, ship-customization, AI, radar, trade lanes, multiple sectors and more! So be sure to check this series out, and stay tuned for upcoming releases!",
      "target_audience": [
        "Beginner-level programmers who want to learn how to create games using Unity",
        "People who have used Unity to some extent, but want to explore new techniques for authoring games"
      ]
    },
    {
      "title": "Unreal Engine 4 - The Absolute Beginner's Guide",
      "url": "https://www.udemy.com/course/unreal-engine-4-the-absolute-beginners-guide/",
      "bio": "Unreal Engine is the perfect 3D engine to learn for creating games, animations, television shows and illustrations!",
      "objectives": [
        "The complete basics of Unreal Engine 4 summarized in 2 hours and 30 min.",
        "Importing assets",
        "Creating and texturing objects",
        "Setup a scene/level",
        "Different type of lightning",
        "Camera effects",
        "Cinematics workflow"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Unreal Engine Course": [
          "01.Download Unreal Engine",
          "02. Epic Launcher Overview",
          "03. Create your first project in Unreal",
          "04. Create folders and organize your scene",
          "05. Open different viewports",
          "06. Dock and undock windows",
          "07. Save your scene",
          "08. Hide scene icons",
          "09. Summery F key and ALT key",
          "10. Drag & drop walls into the scene",
          "11. Add materials to the walls",
          "12. Quick look at materials in the material editor",
          "13. Deleting all lights then add directional light",
          "14. Contact shadow",
          "15. Set up your first point light",
          "16. Set up a spotlight",
          "17. Add Rectangle light",
          "18. Cool light setup",
          "19. Sphere reflection capture",
          "20. Skylight lighting with HDRI",
          "21. Create the sky",
          "22. Atmospheric Fog",
          "23. Exponential Height Fog",
          "24. God Rays",
          "25. Unreal Engine particle system",
          "26. Create a new level and add a character",
          "27. Preview of the Scene we are creating",
          "28. Create HDRI environment",
          "29. Add cinematic camera to the level",
          "30. Create a new level sequence",
          "31. Add our mannequin character",
          "32. Camera Settings",
          "33. Depth of field",
          "34. Camera movement",
          "35. Second camera",
          "36, Export your project in production quality",
          "37. Export your video for futher editing"
        ]
      },
      "requirements": [
        "Have a good PC",
        "Passion to learn Unreal Engine 4"
      ],
      "description": "Unreal Engine Complete Beginners Course is the perfect solution for absolute beginners to learn the leading industry standard engine for creating games, animations, television shows and illustrations! In this course we will build up knowledge from ground zero. In the beginning you will know NOTHING about Unreal Engine and by the end of this course you will be equipped with enough knowledge to start your journey with Unreal Engine.\n\nThe course will cover the following topics in thorough detail:\n• Setup a scene in Unreal Engine\n• Import different assets and characters\n• Setup lighting\n• Materials understanding and application\n• Unreal engine animator and timeline\n• Setting up an animation\n• Create cinematic movement with a camera\n\nLearn Unreal Engine in this course.\nIn this course, you will learn the fundamentals of game development using the Unreal Engine 5 through a series of 37 lectures. By the end of the course, you will have the basic package to make your own game or movie.\n\nWho this course is for:\nThis course is for absolute beginners who are interested in making games or movies & learning how to design a game or a movie from scratch using Unreal Engine.\nDesigned for those who want to become professionals using Unreal Engine.\nNo programming experience required",
      "target_audience": [
        "The course is perfect for beginners who want to learn the basics of Unreal Engine 4."
      ]
    },
    {
      "title": "Unity Game Tutorial: Hangman - Word Guessing Game",
      "url": "https://www.udemy.com/course/unity-game-tutorial-hangman-word-guessing-game/",
      "bio": "Learn how to create a word guessing game like hangman",
      "objectives": [
        "Learn to create a full Hangman Game in Unity.",
        "Learn to code with C# to create needed Game Logic.",
        "Creating and Triggering Animations.",
        "Generating Inputs and create a Hint System."
      ],
      "course_content": {
        "Introduction & Unity Basics": [
          "Introduction",
          "Course Content",
          "Creating A Project",
          "Overview & Import Assets"
        ],
        "Hangman Game Elements": [
          "Preparing Sprites",
          "The Background",
          "Corner Buttons",
          "The Flower",
          "The Timer",
          "A Font Asset",
          "Virtual Keyboard",
          "Category & Letters"
        ],
        "Coding Hangman": [
          "Coding Virtual Keyboard 1",
          "Coding Virtual Keyboard #2",
          "Coding Virtual Keyboard #3",
          "GameManager Basics",
          "Coding Categories #1",
          "Coding Categories #2",
          "Picking a word",
          "Split the word & visualize",
          "Check a letter",
          "Check if won",
          "Connecting the buttons",
          "Show picked Category",
          "Coding the timer",
          "Coding the Hints",
          "Limiting Hints",
          "Small CleanUp"
        ],
        "Hangman Visualization": [
          "Animating a Petal",
          "Animating the Rest",
          "Animator Setup",
          "Adding Mistakes",
          "Updating Hints"
        ],
        "User Interface": [
          "UI Panels",
          "UI Handler",
          "Animating a Panel",
          "Animating the Rest",
          "Connecting the Panels",
          "Loading Scenes",
          "Menu Scene"
        ],
        "In-Game Stats": [
          "Stats Container",
          "Access Stats Container",
          "Updating Calculations",
          "Stats Output Preperation",
          "Showing the Stats"
        ],
        "Saving The Stats": [
          "Hangman - Saving Stats1",
          "Hangman - Saving Stats #2",
          "Hangman - Saving Stats #3",
          "Hangman - Saving Stats #4",
          "Update Time On Win Only"
        ],
        "Conclusion": [
          "Conclusion"
        ]
      },
      "requirements": [
        "Basic knowledge in Unity and C# is a plus, but not a must have.",
        "A working IDE.",
        "You need Unity Game Engine.",
        "Motivation to finish the course in a good pace."
      ],
      "description": "In this Unity Video Course you will learn how to create your own Hangman - Word Guessing Game using the Unity Game Engine. For the functionality we write C# Code in Visual Studio or which ever IDE you choose.\nThis course is a Beginner course, so if you have trouble in any case, write me a message or Q&A, and i'll help as best as i can.\nUnity (2021.3.3f1 used in this course)\nYou will learn to create a new Project in Unity and set up everything needed\nI will show you how to create a card deck in a smart way\nI will show you to interact with Buttons and how to create an AI (Dealer play)\nC#\nWe will put in functionality with scripts using Visual Studio Code and C# (you can use any other IDE)\nAlso we implement a Betting System and a Message System\nWe create the game logic and all needed Prefabs\nWe use Text Mesh Pro for beautiful font visuals\nConclusion\nAs a result of this course you should be able to create your own levels with different categories to choose.\nIn the end of this course you will have a fully functional Hangman - Word Guessing Game.\nCourse Material\n1 Texture Atlas with Card Back and Card Front, Background, Spades, Hearts, Clubs, Diamonds Symbols\nYou have to write the code on your own, i do not provide the final scripts!\nThe Course Material is for education purposes only, so if you want to release your own game, create your own grafics for that. All Materials i provide are for education only and should not be in your final release!\nChallenge\nAfter you have created nice Menus, Buttons, and maybe additional content, upload the Game to any Gaming Website, Google Playstore, Apple Store or even Windows Store or Steam.\nSo what are you waiting for?\nLet's make your dream game a reality!!\nLevel: Beginner+\nVideo Course Length: ~\nUnity Version required: 5.6+",
      "target_audience": [
        "Unity and C# beginners.",
        "Hobbiests which like to learn how to create a Hangman Game.",
        "Beginner who like to learn how to use Unity Game Engine."
      ]
    },
    {
      "title": "Complete Blender to Unreal Engine 5 Course (Silent Hill F)",
      "url": "https://www.udemy.com/course/complete-blender-to-unreal-engine-5-course-silent-hill-f/",
      "bio": "Create a cinematic Silent Hill F Game Environment",
      "objectives": [
        "Parallax occlusion mapping",
        "Vertex painting in Unreal Engine 5",
        "Modeling high quality assets in Blender",
        "Clean UV unwrapping with maximum texture space",
        "The secrets of realistic PBR Texturing",
        "Prepare assets for texturing in Substance 3D Painter",
        "Baking of mesh maps and implement them accordingly into your texturing process",
        "Create a terrain mesh in GAEA",
        "Create detailed mountains in GAEA",
        "Create displacement in Blender",
        "Import Blender assets into Unreal Engine 5",
        "Learn how to create cinematic lighting in Unreal Engine 5",
        "Create and export animations from Blender to Unreal Engine 5",
        "How to apply a simple Rig in Blender to your assets",
        "Use the Movie Render Queue in Unreal Engine 5",
        "Post production for your cinematics in DaVinci Resolve"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Gain inspiration and references for our cinematic Silent Hill F game environment": [
          "Preparation"
        ],
        "Creating the Terrain": [
          "Creating our Terrain in GAEA",
          "Updating our Terrain and export for Blender",
          "Prepare the terrain mesh in Blender",
          "Import the terrain mesh into Unreal Engine 5 and prepare basic lighting",
          "Blockout",
          "Writing down the assets we will need to model for our game environment"
        ],
        "Modeling our house elements": [
          "Modeling and UV unwrap the wooden planks and poles",
          "Modeling and UV unwrap the wooden walls",
          "Modeling and UV unwrap more walls and doors",
          "Modeling and UV unwrap window frames",
          "Modeling and UV unwrap the small roof",
          "Modeling and UV unwrap V type roof and main roof",
          "Modeling and UV unwrap gutters",
          "Modeling and UV unwrap a balcony and metal shutters and stone bricks",
          "Prepare our assets for baking and texturing in Substance 3D Painter"
        ],
        "Texturing our Assets": [
          "Create our own wood materials",
          "Create metal and roof textures",
          "Import our Assets and Textures into Unreal Engine 5"
        ],
        "Build houses on our terrain in Unreal Engine 5": [
          "Place assets to modular build houses in Unreal Engine 5",
          "More tips for modular build in Unreal Engine 5 and manage / clean up our scene",
          "Enhance our terrain mesh for our scene in Blender"
        ],
        "Texturing our Terrain (Vertex Paint with Parallax Occlusion)": [
          "Parallax Occlusion Material with Height Blending four our Terrain",
          "Create two Materials for our Terrain Vertex Paint Blend in Quixel Mixer",
          "Paint our parallax occlusion Material for our Terrain",
          "Add foliage from Polyhaven"
        ],
        "The Electrical Poles": [
          "Import the electrical poles and model cables with the Curve Modifier in Blender"
        ],
        "The animated japanese Girl": [
          "Import the japanese Character and animate a simple Kimono for her",
          "Model the lantern for the Character",
          "Rig the lantern and animate it in Blender",
          "Import the lantern and finish the Character animation"
        ],
        "Create a snowy and atmospheric Mountain for the background scene": [
          "Create the Mountain in GAEA",
          "Displace the Mountain Mesh in Blender and texture it in Substance 3D Painter",
          "Add the Mountain to our scene and create cinematic lighting (from scratch)"
        ]
      },
      "requirements": [
        "You need to have basic knowledge in Blender",
        "You should have an RTX graphics card"
      ],
      "description": "Dear Students,\n\n\nthis course offers you a full production pipeline from modeling, texturing and animating a cinematic game enivronment.\n\n\nDive into the world of AAA game environment creation with this comprehensive course on building a Silent Hill F-inspired Japanese horror scene using Blender and Unreal Engine 5.\nMaster modular modeling techniques to craft authentic Japanese house elements, including intricate gutters, roofs, stones, wood planks, poles, and windows, alongside iconic assets like a Torii gate and Japanese lantern.\nLearn advanced workflows: UV unwrapping in Blender, full PBR texturing in Substance Painter for realistic materials, and vertex painting with parallax occlusion for depth and immersion. Sculpt stunning mountains and terrains in GAEA, then bring it all to life with cloth animations in Blender and Marvelous Designer—animating a Japanese girl in flowing garments, dynamic banners, and eerie movements.\nSeamlessly import FBX files, textures, and animations into UE5, harnessing cinematic lighting for atmospheric fog and tension. Utilize the Movie Render Queue for high-fidelity renders, and polish your project with post-production techniques to create a captivating cinematic trailer.\nBy course end, you'll produce triple-AAA quality environments ready for portfolios or indie games, blending horror aesthetics with Japanese folklore for unforgettable results. No prior experience required—step-by-step guidance ensures professional outcomes!",
      "target_audience": [
        "For beginners with basic knowledge and intermediate 3D Artists"
      ]
    },
    {
      "title": "Game Reskinning. iOS Swing Copters* Source Code Template",
      "url": "https://www.udemy.com/course/game-reskinning-ios-swing-copters-source-code-template/",
      "bio": "A-Z guide on reskinning the Swinging Copter iOS game from AppsFresh. Comes with free source code - iOS 9",
      "objectives": [
        "publish your very own Swinging Copter iPhone game clone",
        "Learn about making games without coding",
        "Learn about itunes app store terminolgy"
      ],
      "course_content": {
        "Initial Setup": [
          "Apple Developer License",
          "Get XCode Software for free",
          "Download full Source Code, test game in simulator",
          "Create the iOS certificate",
          "App Provisioning profile"
        ],
        "Reskinning Process - Settings": [
          "Overview of folder structure",
          "Modifying App Settings - part 1",
          "Modifying App Settings - part 2"
        ],
        "Reskinning Visual assets": [
          "Finding Images and Sounds - overview",
          "Modifying Background Image",
          "Modifying Main Character images",
          "Modifying Game Variables"
        ],
        "Icons and Screenshots": [
          "Drawing Game Icon yourself",
          "Resizing game icons",
          "Taking in-game screenshots"
        ],
        "Advanced Setup": [
          "Itunes connect settings",
          "Changing the share message and links",
          "Add the leaderboard"
        ],
        "Advertising Networks Setup": [
          "Advertising Networks Overview",
          "Setting up Revmob",
          "Setting up admob",
          "Setting up Chartboost Ads"
        ],
        "Publishing to itunes Store": [
          "Archiving process",
          "Uploading to iTunes part 1",
          "Uploading to iTunes part 2",
          "BONUS"
        ]
      },
      "requirements": [
        "a MAC OS computer or virtual image"
      ],
      "description": "The source code is compatible with iOS 8, and also ready for iPhone 6/6+\nThank you for your interest in this course, this is your instructor Yohann.\nThis course is not just about theory, it's about getting things done.\nWe give you the full source code of a clone of the Swing Copter game, another top ranking game from Dong Nguyen, the creator of Flappy bird.\nThis course will guide you step by step on how to customize the game graphics, sounds, and settings and you'll magically end up with your own game published in the iTunes app store.\nThe game comes with 3 advertising channels so that you can earn money every day while people play your game.\nThis course is the simplest way to get into the mobile app industry and get your first app in the app store. It's also for anyone who'd like to expand their app portfolio.\nThe source code included with this course comes with an an unlimited license, which means you can keep reusing it and make dozens of games with different themes. It's fun and it's going to bring you even more money! I know it works because that's what I've been doing myself! Here I will show you how I'm turning the swing copter game into a Swinging Teddy Bear one.\nThe process is fun and rewarding, So Don't wait for the next opportunity, now is the time, and please check out the course outline and see all the value that comes with it.\nGet the course now and see you in the classroom.",
      "target_audience": [
        "people interested in making trendy games the simple way",
        "people interested in learning graphic design tips"
      ]
    },
    {
      "title": "Unreal Engine 5 - Multiplayer TPS FAQ In Blueprints",
      "url": "https://www.udemy.com/course/unreal-engine-5-multiplayer-tps-faq-in-blueprints/",
      "bio": "Creating Common Multiplayer TPS Features Using 100% Blueprint Scripting",
      "objectives": [
        "Learn Multiplayer Concepts By Creating Common Game Features",
        "Detailed Explanations Not Just Watching Someone Clicking Buttons",
        "No C++ Every Example Is Made Using 100% Blueprint Scripting",
        "Videos Created Using A Modular FAQ Style"
      ],
      "course_content": {
        "Phase 1": [
          "PT1 UE5 MP TPS FAQ Getting The Character Moving In Game",
          "PT2 UE5 MP TPS FAQ Adding Animations To The Character",
          "PT3 UE5 MP TPS FAQ Attaching A Weapon To The Character",
          "PT4 UE5 MP TPS FAQ Adding Weapon Firing And FX",
          "PT5 UE5 MP TPS FAQ AimOffset And Fire Weapon Montage",
          "PT6 UE5 MP TPS FAQ More Firing Modes",
          "PT7 UE5 MP TPS FAQ Adding More Animation Sets",
          "PT8 UE5 MP TPS FAQ Adding Autofire Mode",
          "PT9 UE5 MP TPS FAQ Getting Damage And Projectiles In",
          "PT10 UE5 MP TPS FAQ Player Health Displayed",
          "PT11 UE5 MP TPS FAQ Death Ragdoll And Respawn",
          "PT12 UE5 MP TPS FAQ Weapon Ammo And Reload",
          "PT13 UE5 MP TPS FAQ Player Name Hit Reacts And Pistol Animations",
          "PT14 UE5 MP TPS FAQ Explosive Grenade And Some Clean Up",
          "PT15 UE5 MP TPS FAQ Switching Between Two Weapons",
          "PT16 UE5 MP TPS FAQ Creating A Universal Master Pickup",
          "PT17 UE5 MP TPS FAQ Wrapping Up Phase 1 Of This Series"
        ]
      },
      "requirements": [
        "Basic Understanding Of The UI And Navigation Of Unreal Engine 5"
      ],
      "description": "In this series I cover some of the most frequently asked questions about creating multiplayer third person shooter mechanics in the Unreal Engine 5. I show in depth blueprint scripting in a master/child configuration, so that the blueprints can be used with minor modifications to create more diversity.\n\n\nI give in depth explanations of what I am doing and why, along with some other possible ways of achieving the same mechanic. This is not a tutorial that you just watch someone clicking a bunch of buttons. I try to go out of my way to explain what I am doing so that you really understand the concepts being demonstrated.\n\n\nI plan on continuing this tutorial series to show more advanced mechanics as time goes on. This will be an ongoing series, most of which will be based on questions that are asked by the students that are currently taking this course. So feel free to ask questions that you would like to see covered in future videos that I will be making for this course.\n\n\nI have being using the Unreal Engine since 2014, and worked as a sub contracted/free lancer for many years. I have acquired lots of knowledge on the ins and outs of using this engine to create many common as well as very unique multiplayer mechanics.\n\n\nThank You,\nRegards IAmJohnGalt",
      "target_audience": [
        "This Course Is Targeted For Beginners To Intermediates",
        "People Interested In The Multiplayer Side Of The Unreal Engine 5"
      ]
    },
    {
      "title": "Game Development In Unity 3D Tutorial",
      "url": "https://www.udemy.com/course/game-development-in-unity-3d-tutorial/",
      "bio": "Take Your Game Creation Skills To The Next Level With This Advanced Unity 3D Tutorial",
      "objectives": [
        "Take Your Game Development Skills With Unity 3D To The Next Level",
        "Learn The Skills To Create Engaging And Realistic Games",
        "Learn How Unity 3D Can Shorten The Development Process"
      ],
      "course_content": {
        "Introduction": [
          "Important - Working Files - Download These First",
          "0101 Welcome to Unity 4",
          "0102 What You Should Expect From The Video",
          "0103 What You Need For This Series"
        ],
        "The Basics - Examining Coconut Hut Single Player": [
          "0201 Windows Versus Tabbed Views",
          "0202 Window Extras",
          "0203 Unity Pro Views",
          "0204 Creating Custom Layouts",
          "0205 Rotating",
          "0206 Snapping",
          "0207 Parenting"
        ],
        "Internet Based Multi-Player Network Gaming": [
          "0301 Testing On The Unity Master Server",
          "0302 Running Your Own Master Server",
          "0303 Using PHP To Manage A Master Server",
          "0304 Hosting A Game And Registering With Your Master Server - Part 1",
          "0305 Hosting A Game And Registering With Your Master Server - Part 2",
          "0306 Joining A Hosted Game"
        ],
        "LAN Based Multi-Player Network Gaming": [
          "0401 .NET Sockets",
          "0402 Implementing Master Server Semantics",
          "0403 Hosting A Game And Registering With The LAN",
          "0404 Joining A LAN-Hosted Game",
          "0405 Issues With NAT And Multi-Player Network Gaming",
          "0406 Issues With LAN And Multi-Player Network Gaming"
        ],
        "General Multi-Player Network Design Decisions": [
          "0502 Who Owns The Physics",
          "0503 Who Owns The Status",
          "0504 How To Deal With Compromises And Imperfections"
        ],
        "Basic Communication Between Players": [
          "0601 Entering Chat Messages",
          "0602 Sending Chat Messages",
          "0603 Displaying Chat Messages",
          "0604 Aging Off And Fading Out Chat Messages",
          "0605 Network Traffic Logging And Debugging"
        ],
        "Main Character Avatar": [
          "0701 Network Instantiation - Part 1",
          "0702 Network Instantiation - Part 2",
          "0703 Changing The Avatar Skin - Part 1",
          "0704 Changing The Avatar Skin - Part 2",
          "0705 Changing The Avatar Skin - Part 3",
          "0706 Changing The Avatar Mesh - Part 1",
          "0707 Changing The Avatar Mesh - Part 2",
          "0708 Synchronizing Animation - Part 1",
          "0709 Synchronizing Animation - Part 2"
        ],
        "Pickups And Drops": [
          "0801 Network Instantiation - Part 1",
          "0802 Network Instantiation - Part 2",
          "0803 Synchronizing Pickup",
          "0804 Synchronizing Drop",
          "0805 Synchronizing Explosions - Part 1",
          "0806 Synchronizing Explosions - Part 2",
          "0807 Synchronizing Health And Scoring - Part 1",
          "0808 Synchronizing Health And Scoring - Part 2"
        ],
        "The Social API": [
          "0901 Profiles - Part 1",
          "0902 Profiles - Part 2",
          "0903 Achievements",
          "0904 Score",
          "0905 Leaderboard",
          "0906 iOS Game-Center Extras"
        ],
        "10. Native Code Plug-Ins": [
          "1001 Plug-In Architecture",
          "1002 Desktop And Mobile Plug-In Comparison - Part 1",
          "1003 Desktop And Mobile Plug-In Comparison - Part 2",
          "1004 In App Purchase - Items Or Credits",
          "1005 In App Purchase For iOS"
        ]
      },
      "requirements": [
        "A Desire To Learn"
      ],
      "description": "In this Advanced Unity 3D Game Development training course, Infinite Skills teaches you how to use some of the advanced features available to you within the Unity 4 game engine. This course is designed for the experienced Unity developer. You should have a working understanding of the Unity 4 engine and features before taking this tutorial.\n\nYou start the training with a quick review of the basics of Unity 4. The course then jumps right into advanced, Multi-player Network Gaming. He shows you how to implement not only Internet based Network Gaming, but also LAN based using .NET Sockets. You will create a network chat system, learn how to skin Avatars, synchronize pickups and drops, and then you will move on to the Social API. Robert covers specific iOS Game Center features such as the Leaderboard and Achievements, as well as in-app purchasing. To complete this Unity 3D video tutorial, Robert covers using a batch mode Unity game as a stand alone server, and as an alternative, third party solutions Photon and Smart Fox.\n\nBy the time you have completed this advanced Unity 3D tutorial you will have an in-depth understanding of advanced Unity 4 features. You will understand network gaming and how to implement it, as well as how to integrate social gaming and in-app purchasing to your project. This Unity 4 video training includes Working Files, allowing you to follow along with the author throughout the lessons.",
      "target_audience": [
        "Game Developers",
        "Any One Wishing To Learn How To Create Games Using The Powerful Unity 3D Engine"
      ]
    },
    {
      "title": "2D Platformer Game Development Crash Course for Unity 2022",
      "url": "https://www.udemy.com/course/2d-platformer-game-development-crash-course-for-unity-2022/",
      "bio": "Unity GameDev from Scratch to Create Platformer Characters and Game Mechanics",
      "objectives": [
        "How to Create a Platformer Player with Ground & Air Sword Swing Combos and a Ranged Bow Attack",
        "Make ground and air enemies with basic enemy AI",
        "Build a game level with tileset and tilemap tools",
        "Setup up player input with the InputSystem package and UnityEvents",
        "Learn about animation state machines and using AnimationStateBehaviours to control complex characters",
        "Create a health pickup item to keep your player alive"
      ],
      "course_content": {},
      "requirements": [
        "I recommend using Unity 2022.1.20f for the project to avoid problems from have a different editor version",
        "You should have some knowledge of how to program to understand basic concepts. This course is code heavy. All code is done live on screen so you can copy directly when needed."
      ],
      "description": "Learn how to create a 2D platformer game inside of Unity 2022. This course shows you how to build player and enemy characters for movement and combat within a side scrolling platformer game. Much of the course is dedicated to understanding Animators in unity as we build out full animation state machines for both the player and enemy characters. To go along side the states and transitions are StateMachineBehaviour scripts which let you queue up changes and effects for your characters when entering or leaving states. For instance, this is very helpful when you want to make a character jump upon entering a jump state when the jump action is pressed on your keyboard. To make player input go smoothly, we use the new InputSystem to set keybinds to actions and respond to those actions triggering through UnityEvents. To make the game more complete, we make use of Cinemachine follow camera, parallax background, health pickups, sound, and tilesets to continue building out our demo game. Many of the scripts are intentionally designed to be reusable like the Damageable script which lets any character take damage or be healed on triggering events.\n\n\nThe final course project with all source files are provided in the course for you to use or reference in any of your own projects!\n\n\nPlayer Controller, Movement and Physics\nAnimation State Machines for Players and Enemy Characters\nDealing Damage to Player and Enemy Characters\nWorking with Tilemaps and Tilesets to Build Game Levels\nBasic Enemy AI Patterns\nRanged Attacks\nAerial Attacks\nCombo Attacks\nAnimationStateBehaviours for triggering changes on events\nHealing Health Pickups\nMusic & Sound\nHow to Export a Game\nCinemachine Follow Camera\nInput System Actions and UnityEvents for handling player input\nFloating damage text\nAnd more...",
      "target_audience": [
        "Aspiring game developers",
        "Looking to make a 2D, Platformer, Pixel Art, or Unity Engine Game"
      ]
    },
    {
      "title": "Unity Simple Battle Royale with Networking for Beginners",
      "url": "https://www.udemy.com/course/unity-simple-battle-royale-with-networking-for-beginners/",
      "bio": "Learn Unity game design and make your own 3D game sign",
      "objectives": [
        "Gain an excellent general knowledge of video game design.",
        "Develop a positive attitude to problem solving.",
        "Learn good coding and design patterns.",
        "Practical exercises EVERY VIDEO to build actual skills."
      ],
      "course_content": {},
      "requirements": [
        "No necessary experience required"
      ],
      "description": "Unity is an incredible 3D package used for making video games, architectural and medical imaging and more. The challenge is that it's big and complicated to use, especially for complete beginners to coding and game development. We make learning to code easy and fun by leading you step-by-step through the process of creating exciting games.\nIf you're reading this you probably already have everything you need to get started. Unity is a free download. With regular access to an internet connection you'll be able to engage in our thriving community. Even if you have no experience with coding, or with 3D packages, we will guide you through everything from first principles. Starting slow, then building on what you learn, you'll soon have a very solid working knowledge of Unity.\nThe course is project-based, so you will not just be learning dry programming concepts, but applying them immediately to real indie games as you go. All the project files will be included, as well as additional references and resources - you'll never get stuck. There are \"talking heads\", powerful diagrams, quality screencasts and more.\nAnyone who wants to learn to create games: Unity 3D is a fantastic platform which enables you to make production-quality games. Furthermore these games can be created for Windows, MacOS, iOS (even iOS 9), Android and Web from a single source!\nDive in now, you won't be disappointed!\nPart 1 - Build a Local Battle Royale\nBuild a Player That Can Look and Move Around\nGenerate Enemies\nBuild an Attack\nReduce Player Health\nBuild Bots That Move and Attack\nImplement Safe Zone\nPart 2 - Add Networking for Multiplayer Battle Royale\nSet Up Networking\nBuild Networked Player Functionality\nBuild Networked Health\nBuild a Game Controller\nHow to Fine-Tune the Game\nWhat You’ll Need\nUnity\nBuild 2D, 3D and VR games and apps\nLarge asset store\nLarge documentation and support\nCode editor\nGit\nMLAPI\nExperience\nNo experience required\nBeneficial to have:\nUnity experience\nC# experience\nServer-client communication experience",
      "target_audience": [
        "Anyone who wants to learn to code the fun way - by making games.",
        "People who want to learn to make their video games, learning code as they go."
      ]
    },
    {
      "title": "Create your Guess the Word iPhone app for Kids.Code included",
      "url": "https://www.udemy.com/course/create-your-own-guess-the-word-iphone-app-for-kids-code-inc/",
      "bio": "Hands on lectures to build and publish your very own game to the itunes store. App source code included with graphics",
      "objectives": [
        "learn how to download and use XCode Mobile Application Development tool",
        "Get your iOS Developer License",
        "Use the iOS simulators",
        "Learn tips and tricks how to quickly create simple graphics",
        "Create app icon",
        "Resizing icons",
        "Converting images",
        "Taking Screenshots",
        "Archiving the Application",
        "Uploading the Application",
        "Finding free images online"
      ],
      "course_content": {},
      "requirements": [
        "a MAC computer or macincloud.com"
      ],
      "description": "iOS 9+ ready.\nThank you for your interest in this course, my name is Yohann, I will be your instructor.\nWith this course, you get the full source code of a classic game called Guess the Word. The purpose of the game is simple and fun. The player needs to guess the word described in the picture, and get to the next level. There are a total of 30 levels!\nIn this course I will show you everything you need to create your very own “Guess the Word\" game, with your very own graphics. Now don't worry if you don't know how to draw, because I will show the simple ways that are very powerful and you will be happily surprised with what you can do!\nThis course is a great way to start learning about the world of iOS development. In this course you will learn how to download and use Xcode, the software used to make applications. You will also learn how to use the iPhone simulator, how to take screenshots, create your own app icons, resize images, how to get the Apple developer license, and for the brave ones, you will also publish your very own “Guess The Word\" game in the itunes app store without having to write not even one single line of code.\nWith this course, you can create dozen of different games. You can make games about Guessing animals or plants or colors or even toys, and candies!\nSo remember, with this course you not only get an education, you also get the full source code of the “Guess the Word\" iPhone game, and 2 working games graphic packs, Guess the Country and Guess this Cute Animal! Fully Playable games!\nMake the right decision and join us now. Let's get started.",
      "target_audience": [
        "kids",
        "teenagers",
        "computer students",
        "graphic designers",
        "people that love technology"
      ]
    },
    {
      "title": "Maya & Unreal 3D Character Kpop Dance Animation Fundamentals",
      "url": "https://www.udemy.com/course/maya-unreal-3d-character-kpop-dance-animation-fundamentals/",
      "bio": "Complete Guide From Beginner to Pro Body Mechanics & VFX Basics: Autodesk Maya, Unreal Engine, Unity, Game Development",
      "objectives": [
        "Animating with Keyframes using Autodesk Maya",
        "Understanding Unreal Engine's A.R.T. rigging tools for Autodesk Maya Animation Creation Process",
        "Animating Production Ready Dance Animation",
        "Learn Step by Step How to Animation in Layers Using VIdeo Reference to Create Pro Level Game Animations in Maya",
        "Animation Ready for Exporting Character Animation to Unreal Engine or Unity Game Engine",
        "VFX creation timing for production ready game asset (animated texture, mesh, and effect)",
        "Understanding Production Process of Animation Using Unreal Engine's A.R.T. rigging tools for Autodesk Maya"
      ],
      "course_content": {
        "KPOP DANCE INTRO": [
          "Overview of the project",
          "Course Setup Getting Started with Autodesk Maya",
          "Udemy Rating System Very Important Info!",
          "Creating Idle Start Pose",
          "Posing the Arms & Fingers",
          "Animating the Root & Basic Timing",
          "Extreme Pose Creation",
          "Adding Breakdowns",
          "Finding Next Extreme Pose",
          "Advanced Skeleton Vs. ARTv1 | Python 3 & Post Maya 2022 Unreal Mannequin",
          "Frequently Asked Questions"
        ],
        "ANIMATING THE DANCE": [
          "Lower Body Timing",
          "Upper Body Rough Timing",
          "Refining Shoulders, Wrists, Neck, and Head",
          "Extreme Pose to End First Part of the Dance",
          "Finding Extreme Anticipation Pose to Blend Breakdown",
          "Upper Body Breakdown Transitions"
        ],
        "ANIMATING THE HEART DANCE": [
          "Animating the Heart Extreme Pose Transitions",
          "Continuing Heart Extreme Pose Transitions",
          "Animating the Heart Movements",
          "Animating the Heart Movements Cont."
        ],
        "ADDITIONAL DANCE TRANSITIONS": [
          "Finding the Next Extreme Pose/Lower Body",
          "Animating Upper Body Movements",
          "Finding Extreme Pose Upper Body/Adding Breakdowns"
        ],
        "FINAL DANCE SECTION": [
          "Finding Extreme Lower Body Poses",
          "Extreme Upper Body Poses",
          "Refining Upper Body Posing",
          "Defining Final Lower Body Extreme Poses",
          "Adding Upper Body Pose"
        ],
        "ANIMATION POLISH & BREAKDOWNS": [
          "Adding Breakdown to Video Ref Cut",
          "Footwork Polish",
          "Adding Overshoot to the End Pose",
          "Polishing Ending Overshoots & Breakdowns",
          "Overshoot Polish for Body Spin",
          "Overshoot, Keep Alive Posing, & Footwork",
          "Footwork to Polish the March",
          "Shoulder Arc Polish",
          "Arm Polish",
          "Animating Heart Mesh Fx"
        ],
        "Heart VFX Modeling": [
          "Modeling Overview",
          "Hotkey Menu",
          "Modeling the Heart",
          "Concepting the Heart Rig"
        ],
        "Heart VFX Rigging": [
          "Heart VFX Overview",
          "Joints",
          "Constraints",
          "Skin Weights",
          "Controllers",
          "Creating the Joints",
          "Creating the Controllers",
          "Connecting the Controllers",
          "Polishing the Rig",
          "Heart VFX 02 Rigging"
        ],
        "ANIMATING HEART MESH RIGS": [
          "Animating Heart Rig Meshes",
          "Creating Animation for the Second Heart Rig"
        ],
        "ANIMATION POLISH PLUS": [
          "Refining Animation"
        ]
      },
      "requirements": [
        "No prior knowledge of Autodesk Maya, Unity, or Unreal Engine needed.",
        "The course utilizes Maya 2018, but prior knowledge of any 3d animation/modeling package is a plus.",
        "Programming is a plus, but not required.",
        "All Concepts Taught Can Be Applied to Any Animation Software or Animation Creation Process of User's Choice",
        "No VFX experience necessary"
      ],
      "description": "Hi there!\nWelcome, and thanks for choosing Class Creative’s Maya & Unreal: 3D Character Kpop Dance Animation Fundamentals | Complete Guide From Beginners to Pros | Body Mechanics & VFX Basics!!\nIn this foundation course we will be learning the fundamentals of Character Animation for games (specifically for the Unreal engine, but this method will also work for other game engines such as Unity).\nLearn everything necessary for a Character Animation Dance (Kpop example) utilizing Autodesk Maya taught by a AAA game professional with university level accredited instruction!  This process can be applied to any style of dance animation for your project!\nAutodesk Maya is the industry standard 3D animation software, understanding the concepts in this course will help you land a job in the game, film, tv, or music industry.  In this course you will learn how to animate your custom created character from scratch.\nWhat students are saying about this animation fundamentals course:\n\"Great step by step instruction for animation, good explanations on breaking down of animation motion, refinement and polishing the animations. He brings insight into techniques and gives reasoning behind the steps.\" - Jerry Bradshaw\n\n\nWe will cover the following core skill sets:\nGetting started with Maya and understanding the animation process\nUnderstanding how to utilize the reference image plane in Maya to create a realistic game engine ready Dance (Kpop) Animation\nStrong Fundamentals of Animation Body Mechanics\nProcess of using IK/FK controllers and best practices of Unreal Engine's A.R.T. tools for Autodesk Maya\nHow to create animation timing for VFX using 3 different styles of rigs (animated texture, mesh, and visual effect rig)\nAnimation timing of these VFX rigs for pipeline production process\nUnreal Engine's A.R.T. rigging tools for Autodesk Maya\nUnderstanding hotkeys to animate and rig quickly\nAnimating with keyframes\nAnimating a production ready dance animation (Kpop) quickly and efficiently\nAdvanced polish process to create professional level animation ready for game engine (Unreal/Unity) export\nNOTE - Course does NOT include custom character mesh.  ART tools will include mannequin mesh which will allow all animation and lessons to be animated without a mesh or completing a custom rig.  Course is strictly showing the process of animating a character of choice,  for ANY character regardless of software or rig limitations.  Maya 2022 for Mac OS (Pc/Linux Maya 2022 both currently support Python 2) currently only supports Python 3; the Art tools will require Python 2 which is currently only supported in Maya 2020 on Mac OS.\nUPDATE  - We now provide and support current versions of Maya with a provided Advanced Skeleton Unreal Mannequin rig for the animation course if you choose not to use the ART tools Mannequin rig for Maya 2022.\n\n\nWe’ll be utilizing the latest software packages that top tier gaming studios of today use to create all of your favorite titles!\nAutodesk Maya, Unreal Engine’s Maya Animation Rigging Toolset (A.R.T. for short), and the Unreal game engine.\n\n\nWhy Learn From Class Creatives?\nThis course features an accredited university level animation instructor who has over 15 years of experience animating both keyframe, and motion capture for studios such as Naughty Dog, Insomniac, Guerilla Games, Sucker Punch, Google, Disney and more.  Whether it be a complex hyper realistic animation or a cartoony stylized “Disney” character animation it ALL starts with the fundamentals which we cover in these lectures.\nWho This Course is For:\nWhether you are just a beginner interested in Character Animation, or a Master professional looking to brush up on your current skill set, this course has material you surely won’t want to miss!\nAs with all Class Creative’s courses, we’ve laid out a structure that covers the full spectrum of industry standard character workflows from start to finish.\nPlease remember, if this is your first time creating animating a 3D character, we highly recommend that you follow the outline carefully, according to how our instructor’s have structured the course. We wouldn’t want you to miss out on any details!\nHowever, if you are an advanced user and are looking for something specific to add to your repertoire feel free to dive in and skip to any sections you’d like to focus on.",
      "target_audience": [
        "Competency using a computer.",
        "Developers who want to add game development to their skill-set.",
        "Anyone with a passion for learning game development.",
        "Anyone who wants the ability to create assets for games.",
        "Anyone Interested in Character Animation",
        "Anyone Wanting to Develop New Skills for Unreal Engine, or Unity"
      ]
    },
    {
      "title": "Make Your First Multiplayer Game With GameMaker Studio",
      "url": "https://www.udemy.com/course/make-your-first-multiplayer-game-with-gamemaker-studio/",
      "bio": "A course for those who need assistance making multiplayer games in GameMaker Studio",
      "objectives": [
        "Know how to work with both the server and client side of a multiplayer game",
        "Know how to make a multiplayer game in GameMaker Studio",
        "How to synchronize objects between the server and players"
      ],
      "course_content": {
        "It's The Beginning": [
          "Introduction",
          "Downloads",
          "How To Import The Suspendee Studios Networking Engine"
        ],
        "Produce The Game": [
          "Connect To The Server And Keep Track Of Who Is Connecting",
          "Adding The Paddles And Keeping Track Of Who They Are",
          "Syncronizing The Paddles",
          "How The Paddle Balls Work",
          "Synchronizing The Balls",
          "Finishing Touches"
        ],
        "Conclusion": [
          "Paddleball With Your Friends Download",
          "Conclusion"
        ]
      },
      "requirements": [
        "You should know the basics of GameMaker Studio",
        "You need to own a copy of GameMaker Studio",
        "You need to have Python 3.4 or above installed",
        "You should know how to work with data structures in both GameMaker Studio and Python"
      ],
      "description": "This course is for those who want help producing their first multiplayer game for GameMaker Studio users. Students will produce a game called \"Paddleball With Your Friends\" where two players play against each other in scoring goals.\nGameMaker Studio is a popular game engine for making 2D games. The engine is capable of making multiplayer games. Many amazing games have been made with GameMaker Studio, which, is why it's the engine we use in this course.\nMaking multiplayer games are difficult, but, we guide you through on how to make a simple game with the assistance of the Suspendee Studio Networking Engine. This course is not for learning the basic networking functions for GameMaker Studio, but to help get you on track for making multiplayer games.",
      "target_audience": [
        "Anyone who wishes to get into making multiplayer games",
        "Anyone who wants to enhance their skills with GameMaker Studio",
        "This is NOT for absolute beginners"
      ]
    },
    {
      "title": "Roblox Noob to Pro 3D Modeling and Building Course",
      "url": "https://www.udemy.com/course/roblox-noob-to-pro-3d-modeling-course/",
      "bio": "Master creating visually stunning 3D models and maps in Blender, inspired by popular Roblox games.",
      "objectives": [
        "Downloading Roblox Studio and Blender",
        "How to use Roblox Studio and Blender",
        "How to make visually appealing 3d assets and maps seen in Popular Roblox Games",
        "Earning Robux"
      ],
      "course_content": {
        "Introduction": [
          "Introduction to Roblox, Blender and Substance Painter.",
          "Blender Basics: How to use Blender",
          "Blender Basics: Making our first Axe",
          "Overview after making our first axe",
          "Blender Basics: Making our second Axe"
        ],
        "Making low poly quality asset packs": [
          "Introduction to our first Asset Pack: Making a shotgun",
          "Overview after making Shotgun (First Gun)",
          "Making a Pistol (Second Gun)",
          "Making a Machine Gun (Third Gun)",
          "Making a Medieval Pack in 30 Minutes!",
          "How to export from Blender",
          "How to import models into Roblox studio"
        ]
      },
      "requirements": [
        "No Roblox or Blender experience needed",
        "A PC that meets the system requirements for Blender, Roblox, and Steam’s Substance Painter."
      ],
      "description": "Unlock the skills to elevate your Roblox creations with this straightforward, no-fluff course—designed to get you results quickly! Whether you’re new to 3D modeling or have some prior experience, this course will guide you step-by-step in creating high-quality 3D models and maps in Blender, inspired by top Roblox games. Videos always coming out!\nWhat you'll learn:\n\n\nNavigate Blender with confidence, even if you're a total beginner.\nDesign stunning 3D models and realistic maps optimized for Roblox.\nUse Blender tools and techniques to bring your creative ideas to life.\nExport your creations to Roblox Studio and make them game-ready.\nMonetize your skills by creating items and environments players will love.\nThis course is perfect for aspiring Roblox developers, 3D modeling enthusiasts, and anyone looking to turn their creativity into profit. Start your journey from noob to pro and become a sought-after Roblox creator while earning Robux fast!\nWho this course is for:\n\n\nComplete beginners to 3D modeling and Roblox development looking for step-by-step guidance.\nRoblox players and creators who want to design custom items, maps, and unique game environments.\nDevelopers looking to monetize their creations on Roblox and build a profitable skillset.\nEnroll now and let's build your future in 3D modeling, game creation, and creative design!",
      "target_audience": [
        "Roblox beginners curious about Roblox Game Development, specifically making 3d models and maps"
      ]
    },
    {
      "title": "Make Stylized Tree by using Blender and Unity",
      "url": "https://www.udemy.com/course/make-stylized-tree-by-using-blender-and-unity/",
      "bio": "Modeling in Blender, Make Shader in Unity",
      "objectives": [],
      "course_content": {
        "Blender Part": [
          "Make Tree Trunk in Blender",
          "Make Tree Leaves in Blender",
          "Smooth Tree Leaves’ Normal in Blender",
          "Create Tree Leaves' Material in Blender"
        ],
        "Unity Part": [
          "Export Tree Model and Create its Material in Unity",
          "Make Leaves Wave in Unity"
        ]
      },
      "requirements": [
        "No Blender experience needed",
        "No Unity experience needed"
      ],
      "description": "This one hour long course is made for Blender & Unity new beginners. I will show you some tricks when using Blender and Unity, all my actions and short keys will show you in the video! Don't worry even though you are new beginners!\nCourse contents:\nCreate tree trunk by using blender plugin\nMake tree leaf texture in Photoshop\nUse sculpt tool and particle system in blender to make tree leaves meshes\nMake Stylized tree shader in Unity\nModify tree leaves' normal to smooth leaves shadow\nBy using Unity URP shader graph to make tree leaves animation in wind\nSoftwares:\nBlender 2.83\nUnity 2019.4\nPhotoshop2019\n\n\nSoftware instructions:\nUnity is a cross-platform game engine developed by Unity Technologies, first announced and released in June 2005 at Apple Inc.'s Worldwide Developers Conference as a Mac OS X-exclusive game engine. The engine has since been gradually extended to support a variety of desktop, mobile, console and virtual reality platforms. It is particularly popular for iOS and Android mobile game development and used for games such as Pokémon Go, Monument Valley, Call of Duty: Mobile, Beat Saber and Cuphead. It is considered easy to use for beginner developers and is popular for indie game development.\nBlender is a free and open-source 3D computer graphics software toolset used for creating animated films, visual effects, art, 3D printed models, motion graphics, interactive 3D applications, virtual reality, and computer games. Blender's features include 3D modeling, UV unwrapping, texturing, raster graphics editing, rigging and skinning, fluid and smoke simulation, particle simulation, soft body simulation, sculpting, animating, match moving, rendering, motion graphics, video editing, and compositing.",
      "target_audience": [
        "Beginner Blender developers",
        "Beginner Unity developers",
        "Beginner Game developers"
      ]
    },
    {
      "title": "Unity Tips: Position, Rotation, Scale",
      "url": "https://www.udemy.com/course/unity-tips-position-rotation-scale/",
      "bio": "Learn Unity API and Math behind the movement, rotation and scale, one task per lecture!",
      "objectives": [
        "Vector math such as vector addition, substraction, dot and cross products, normalization and magnitute",
        "Use Quaternions and Euler Angles to rotate gameobjects",
        "Explore Unity API to reduce the amount of work you need to do in your code",
        "Build a base structure for games like a side-scroller, 3d shooter, a 2d top-down shooter and more"
      ],
      "course_content": {
        "Introduction": [
          "Welcome to the course!",
          "What should you know before starting the course",
          "Don't hesitate to ask!",
          "How to use the repository"
        ],
        "Position": [
          "Intro",
          "Teleportation and Respawn - instant movement to the target",
          "Conveyor line - constant movement in one direction with vector addition",
          "Visualizing the direction by using the Debug.DrawLine",
          "Slowing down the conveyor - multiplying a vector by a scalar and Time.deltaTime",
          "Moving poker cards - Vector3.MoveTowards",
          "Delivering all cards simultaneously - Vector3.Lerp method",
          "2D Player Controller - reading the player’s input",
          "Fixing straferunning - normalizing a vector",
          "Moving in a 2D Side-scroller - Set object velocity",
          "Jumping in a 2D Side-scroller - velocity vector addition",
          "Moving a platform - Mathf.PingPong and Mathf.Repeat",
          "Moving a platform using the animation",
          "Moving a player on a platform - transform.parent, transform.DetachChildren",
          "Calculating explosive damage based on the distance - subtracting vectors",
          "Creating a radar system - localPosition, TransformPoint",
          "Force a monster to look away - vector dot product",
          "Should a monster turn left or right? - vector cross product",
          "Position"
        ],
        "Rotation": [
          "Intro",
          "Rotating the 2D player controller by a certain angle - Transform.Rotate",
          "3D Character Controller - Transform.EulerAngles",
          "Creating a camera that tracks the player's movement - transform.LookAt",
          "Creating a moving star circle array - Transform.RotateAround",
          "Quaternion basics, rotation around a single axis. Quaternion.Euler",
          "Rotating around 2 axes.",
          "3D Spaceship - Quaternion.AngleAxis",
          "3D Character Controller using Quaternions - transform.TransformDirection",
          "Aiming a 3D turret - Quaternion.LookRotation and Quaternion.RotateTowards",
          "Rotating a turret in 2D - Quaternion.FromToRotation",
          "Modern 2D controller - Input.mousePosition and Input.touch",
          "Shooting a bullet - let’s recap everything!",
          "Moving a Sun - Lerp, Slerp and SlerpUnclamped",
          "Creating your own quaternion - always Normalize the quaternion!",
          "Stand still to rotate a key - Quaternion.Inverse",
          "Lockpicking a safe - Quaternion.Dot and Quaternion.Angle",
          "Rotation"
        ],
        "Scale": [
          "Intro",
          "Make Alice grow or shrink - Scaling basics",
          "Moving shrinked Alice - scale-dependent methods",
          "Switching 2D player direction - Scale or rotate?",
          "Making a platform bigger - Scaling the parent object",
          "Slo-mo and Pause menu - Time.timeScale",
          "Scale"
        ],
        "Outro": [
          "Outro",
          "BONUS LECTURE"
        ]
      },
      "requirements": [
        "Basic knowledge of Unity interface",
        "Some experience with C#"
      ],
      "description": "The main goal of this course, as its name suggests, is to teach you how to perform movement, rotation and scaling of Unity gameobjects.\nIn the Position section, we will start with the vector math basics. Each lecture represents a task that you could try to do yourself after I give you some theory and code examples. We’ll cover most if not all the ways you can move an object or calculate its position:\nBy using transform methods\nBy using Matf and Vector methods\nBy applying velocity to the rigidbody\nBy using animation\nWe’ll cover vector operations such as addition, subtraction, scalar multiplication, dot and cross products and normalization, and try them out in real game development tasks you might face.\nNext, we’ll take a look how to use Euler Angles and Quaternions in order to Rotate your gameobjects. I’ll show you pros and cons of each approach and, of course, provide you with some challenging tasks to solidify your new knowledge.\nFinally, you will work with the Scale. In this rather small section you will learn how to change the object size to achieve your goals such as a sprite flip or modifying the parent object without affecting the children. We'll also take a look on how to scale the 4-th dimension - the time itself.\nIn this course, you will also learn how to get input from different sources such as keyboard, mouse and touchscreen, take a look at raycasting, rigidbody, and a lot of other cool stuff that you can use during the game development. And of course you can freely experiment with the code I provide with my repository.",
      "target_audience": [
        "C# developers who just started learning Unity and need to learn Unity API to move, rotate and scale objects",
        "Unity beginners who don't feel comfortable enough with the vector and quaternion math"
      ]
    },
    {
      "title": "Unity 5 Multiplayer InGame Mail Messaging",
      "url": "https://www.udemy.com/course/unity-5-multiplayer-ingame-mail-messaging/",
      "bio": "A-Z guid to create a professional in-game mail system in Unity, PHP and MySQL",
      "objectives": [
        "Build a professional mail system in Unity",
        "setup a database layer to store and retrieve mail messages",
        "setup a backend layer to act as the middleman between the database and Unity",
        "have Unity interact with the server to retrieve and send messages",
        "Create an in-game mail user interface",
        "authenticating and registering users."
      ],
      "course_content": {},
      "requirements": [
        "windows, MAC or Linux",
        "it is recommended to know how to install Unity"
      ],
      "description": "Important: all software used are FREE to download and use on PC, LINUX and MAC computers (no need to pay, cheers!)\nIn this course you will learn how to use Unity3D to build a professional multiplayer mail inbox.\nThe majority of online multiplayer games use a mail system where players can send and receive emails within the game. The game becomes more engaging as players can trade items and send virtual money to eachother.\nAll the great games out there are using it, look at Star Wars, or World of Warcraft or MineCraft. That's exactly what you will be making by taking this course.\nWe will start by designing the data layer using MySQL and PHP. The database will be able to store and retrieve a huge amount of in-game mail, which is something that Unity cannot do on its own.\nThen we will use Unity to design the mailbox user interface to read incoming mail as well as compose and send mail to other players.\nFinally, we will integrate all of it inside a real working multiplayer game so that we can have live players walk to the mailbox and access the mail messages.\n***\nThis course provides all the necessary assets for you. The only tool we use in this course is Unity 3D, and it's completely free to use. No need to spend extra money.\nThis course is easy to follow along since all the steps are shown to you in the video lectures, so you can't possibly miss a step.\nPlease join the course now. You've got nothing to lose because if i don't deliver, you'll get a full refund. I'll see you in the course.",
      "target_audience": [
        "game enthusiasts.",
        "computer scientists",
        "software engineers",
        "graphic designers",
        "cool teenagers",
        "cool dads and moms"
      ]
    },
    {
      "title": "Unreal Engine 5 for Beginners - Understand the Basics",
      "url": "https://www.udemy.com/course/unreal-engine-5-for-beginners-understand-the-basics/",
      "bio": "Your first steps in Unreal Engine 5",
      "objectives": [
        "Understand Unreal Engine 5 basics",
        "Learn about actors and collisions",
        "Understand logic in Unreal Engine",
        "Write your first Blueprint"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Download and Install"
        ],
        "Let's start": [
          "Projects",
          "Demo Game"
        ],
        "Inside Unreal Engine 5": [
          "Levels",
          "Assets",
          "Actors",
          "Collision",
          "Components"
        ],
        "Blueprint": [
          "What is Blueprint",
          "Blueprint Nodes",
          "Practice: Blueprint p1",
          "Practice: Blueprint p2"
        ],
        "What's next?": [
          "What's next?"
        ]
      },
      "requirements": [
        "No experience needed! The course is for absolute beginners"
      ],
      "description": "Welcome to Unreal Engine 5! Yes, you can do great things with Unreal Engine 5, but we need to start with some basics. In this class, you'll get to know the essential fundamentals of Unreal Engine 5, which you can use for game development, product design, architecture and more!\nHere's what awaits you in this class:\nlevels - how to create and manage levels\nassets - where to find and how to import\nactors and components - what are they and why are they important\ncollisions - how to create collisions of different types in different situations\nblueprint - how to code without actual code, using visual scripting of Unreal Engine 5\nWhy You Should Take This Class?\nBecause Unreal Engine 5 is the world's most open and advanced real-time 3D creation tool, and it's not only for game development! Learning Unreal engine now, when the industry is growing that fast, can be super beneficial for you. Game development, film and video production, architecture or product design - Unreal Engine has tools for all these spheres!\nIf you are interested in learning Unreal Engine 5 but don't know where to start - start with this class! All the information you will get here, is handy, no matter what your next step with Unreal Engine is.",
      "target_audience": [
        "Anyone who wants to use Unreal Engine 5 for their projects"
      ]
    },
    {
      "title": "Create Systems To Speed Up Your Mobile Game Dev in Unity",
      "url": "https://www.udemy.com/course/hypercasual-mechanics/",
      "bio": "A Compilation of Systems & Mechanics that will instantly improve your Casual / Hypercasual Mobile Game",
      "objectives": [
        "Learn to design and implement core game mechanics for casual and hypercasual mobile games.",
        "Understand how to create simple yet engaging systems like a Battle Pass.",
        "Apply best practices for optimizing performance and user experience in mobile games.",
        "Learn how to implement user-friendly interfaces for mobile game mechanics and systems."
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "The Battle Pass": [
          "Understanding the Layout",
          "The Data",
          "Spawning the Reward Containers",
          "The Final Reward Container",
          "Initialization",
          "Levelling Up",
          "How to Claim a Reward ?",
          "Understanding the XP",
          "Slider & Badger",
          "The Season Timer",
          "Saving & Loading Data",
          "The Final Touches"
        ],
        "Modern Casual UI": [
          "The Main Concept",
          "The Page Buttons",
          "The Page Scroll",
          "Popups",
          "Floating Notes",
          "Creating a Looping Scroll View",
          "3D Objects in the UI"
        ],
        "Daily Missions System": [
          "Setup",
          "The Mission Manager",
          "The First UI Pieces",
          "The First Mission Container",
          "Configuring the Mission Container",
          "Configuring the Mission Slider",
          "Updating more UI Visuals",
          "Detecting a Mission Claimed",
          "Claiming a Mission",
          "The Reward Group Data",
          "Adding a Slider Item",
          "Updating the Slider",
          "UI Particles",
          "Improving the UI Particles",
          "We Instantiate the Slider Items",
          "Placing the Slider Items",
          "Animating the Reward Milestone Boxes",
          "The UI Reward Popup",
          "Showing the Reward Popup",
          "Finalizing the Mission Slider",
          "The Mission Timer",
          "Saving and Loading",
          "Updating the UI Mission Container",
          "Saving the Main Slider",
          "Wrapping Up the Logic",
          "The Reward Sprite Mapper",
          "The Mission Description Mapper"
        ],
        "Generic Chest Reward System": [
          "Setup",
          "Opening the Chest",
          "Animating the Cards",
          "A Layout for our Cards",
          "The Chest Reward Data",
          "Configuring the Cards Correctly",
          "The Reward List",
          "Rewarding the Player",
          "Managing the Chest Visibility",
          "Showing the Chest when needed",
          "Creating the First Chest Spot",
          "Spawning the Chest Image",
          "Configuring the Chest Spot",
          "Showing the Popup",
          "Configuring the Rewards",
          "Configuring the Buttons (Part One)",
          "Configuring the Premium Elements",
          "Configuring the Timer",
          "Configuring the Buttons (Part Two)",
          "Opening the Chest from the Popup",
          "Premium Purchase & Video Ad",
          "Saving the Spots",
          "Saving the Timer",
          "We're done Saving !",
          "Extra : Reward Entry Data Property Drawer"
        ]
      },
      "requirements": [
        "Willingness to learn and experiment with simple game mechanics and systems.",
        "Basic Unity knowledge, it's highly encouraged to have taken one of my previous beginner courses before this one."
      ],
      "description": "Hey there !\n\n\nAre you ready to level up your mobile game development skills?\n\n\nIn this course, you'll start by learning how to implement a fully functional Battle Pass system, one of the most popular and effective ways to engage players and increase revenue in games.\nYou'll walk through the entire process from start to finish, ensuring you understand how to build this Rewarding System from scratch in Unity, complete with Progression Tracking, Rewards, and Dynamic Content Unlocking.\n\n\nBut that's just the beginning!\n\n\nThis course is designed to Evolve, just like your skills. Over time, I'll be adding more mechanics that are essential for casual and hypercasual games.\nFrom Slick & Modern User Interfaces to Daily Rewards, from Hypercasual Game Mechanics to Casual ones, you'll continuously grow your toolkit of game systems that can take your mobile game ideas to the next level.\nEach mechanic is explained with real-world applications, ensuring you're ready to use them in your own projects right away.\n____\nQuick Note : I'm always open to new ideas, so feel free to let me know which systems or mechanics you'd like to learn about! This course will evolve with your input, ensuring you're learning the most valuable tools to succeed in mobile game development.\n____\nNot only will you gain a deep understanding of how these systems work, but you'll also be able to apply them creatively in a variety of game genres.\n\n\nWhether you're building your first mobile game or refining an existing one, this course will give you the Skills and Confidence to stand out in a crowded market.\nGet started today, and stay tuned as more mechanics are added to keep your game fresh, fun, and profitable!\n\n\nP.S. : You can download any System as a Package, they are attached to the last lesson of each section.\nHave Fun !",
      "target_audience": [
        "Aspiring game developers interested in building casual and hypercasual mobile games.",
        "Indie developers looking to enhance their understanding of game mechanics and systems.",
        "Hobbyists and enthusiasts curious about how to create engaging gameplay with minimal resources."
      ]
    },
    {
      "title": "Master 2D Game Development: Create 4 Complete Games in Unity",
      "url": "https://www.udemy.com/course/master-2d-game-development-create-4-complete-games-in-unity/",
      "bio": "Mastering 2D Game Development in Unity: Create 4 Complete Games from Beginner to Pro",
      "objectives": [
        "Understand Unity Basics",
        "Create Physics-Based Games",
        "Implement Procedural Level Generation",
        "Develop AI and Shooting Mechanics",
        "Build a Complete 2D Platformer"
      ],
      "course_content": {
        "Introduction": [
          "Create Project",
          "Unity Interface",
          "Gameobjects and prefabs",
          "Physics",
          "Basic Programming"
        ],
        "Player": [
          "Adding player",
          "Player Script",
          "Changing colors",
          "Dragging player",
          "Launching bird",
          "Limits"
        ],
        "Enemy": [
          "Adding enemy",
          "Restart Level",
          "Delay Restart",
          "Destroying enemy",
          "Enemy impact effect",
          "Player effects"
        ],
        "Levels": [
          "Creating new levels",
          "Transition between levels",
          "Adding more levels"
        ],
        "Lights": [
          "Creating 2d Lights",
          "Setting up Lights"
        ],
        "Menu": [
          "MainMenu UI",
          "Buttons",
          "Credits",
          "PauseMenu"
        ],
        "Audio": [
          "Audio sounds",
          "Audio Mixer"
        ],
        "Final Touches": [
          "Winning scene",
          "Map Limits",
          "Building game"
        ],
        "Project2 Intro": [
          "Creating second project",
          "Creating environment"
        ],
        "Player Controller": [
          "Adding player",
          "Jump"
        ]
      },
      "requirements": [
        "Mac or PC capable of running Unity 3D"
      ],
      "description": "Welcome to \"Mastering 2D Game Development: Create 4 Complete Games in Unity\"! This comprehensive course is designed for beginners and aspiring game developers who want to dive into the world of 2D game creation. Through hands-on projects, you’ll learn to build four complete games from scratch, each focusing on different key aspects of game development.\nWhat You'll Learn:\nUnity Fundamentals:\nNavigate the Unity interface\nManage assets and resources\nWrite basic C# scripts\nProject 1: 2D Angry Birds:\nUnderstand physics-based gameplay\nManipulate objects and environments\nDesign fun and challenging levels\nProject 2: 2D Flappy Bird:\nImplement procedural level generation\nDetect collisions accurately\nHandle player input for responsive gameplay\nProject 3: 2D Space Shooter:\nDevelop enemy AI behaviors\nCreate shooting mechanics for players and enemies\nManage game objects efficiently for dynamic gameplay\nProject 4: 2D Platformer:\nAnimate characters and environments\nImplement character movement and controls\nDesign and build complete levels with complex mechanics\nWho Is This Course For?\nComplete Beginners: No prior experience with Unity or game development is required.\nAspiring Game Developers: Turn your game ideas into reality with step-by-step guidance.\nHobbyists and Enthusiasts: Perfect for those who want to develop their first game or deepen their Unity knowledge.\nStudents and Educators: Gain practical experience or use structured content for teaching.\nProgrammers New to Game Development: Transition your coding skills into creating engaging 2D games.\nWhy Enroll?\nBy the end of this course, you’ll have created four complete 2D games and gained a strong foundation in Unity and C#. Whether you’re looking to start a career in game development, pursue a new hobby, or add valuable skills to your portfolio, this course is your gateway to mastering 2D game development in Unity.\nEnroll now and start creating amazing games today!",
      "target_audience": [
        "Complete Beginners: This course is perfect for anyone who has never used Unity before and wants to learn 2D game development from scratch.",
        "Aspiring Game Developers: If you have a passion for games and want to turn your ideas into playable projects, this course will provide the essential skills and knowledge you need.",
        "Hobbyists and Enthusiasts: Whether you're a hobbyist looking to develop your first game or an enthusiast wanting to deepen your understanding of Unity, this course offers step-by-step guidance.",
        "Students and Educators: This course is suitable for students seeking practical experience in game development and educators looking for structured content to teach Unity in their classrooms."
      ]
    },
    {
      "title": "Learn Godot 3D: Develop Your Own 3D Games Using Godot 4",
      "url": "https://www.udemy.com/course/learn-godot-3d-develop-your-own-3d-games-using-godot-4/",
      "bio": "Master 3D game development in Godot by building an interactive game from scratch!",
      "objectives": [
        "How to navigate and use the Godot 3D interface effectively",
        "The fundamentals of working with 3D space in Godot",
        "Creating and manipulating 3D objects, including models, lights, and cameras",
        "Implementing physics, collisions, and player controls in a 3D space",
        "Building AI-driven enemies using state machines and behavior scripting",
        "Creating UI elements like menus, score tracking, and minimaps",
        "Developing core gameplay features, including shooting mechanics and scoring systems",
        "Optimizing game performance with lighting, materials, textures, and post-processing techniques",
        "Exporting and preparing your game for release"
      ],
      "course_content": {
        "Introduction": [
          "Introduction to the Course",
          "Installing Godot",
          "Overview of the project: Zone Battle"
        ],
        "Navigating Godot": [
          "The Main Window, Scene Tree, and Inspector",
          "The Game Window & Basic 3D Space Navigation"
        ],
        "Basic 3D Objects": [
          "Primitives and 3D Space – Rotation, Scaling, Translation",
          "Materials",
          "Building Complex Objects out of Primitives: the Tank",
          "Building the Playfield",
          "The Camera3D Node"
        ],
        "Physics & Basic Controls": [
          "Vectors",
          "The CharacterBody3D Node",
          "Reacting to Player Input – Movement",
          "Reacting to Player Input – Controlling the Turret",
          "Collision",
          "The RigidBody node – Firing a shell"
        ],
        "Environment": [
          "World Lighting & the Global Sun"
        ],
        "Gameplay - Adding Targets": [
          "Adding Enemy Tanks Via Inherited Scenes",
          "Destroying the Tanks"
        ],
        "AI.": [
          "State Machines",
          "Adding a State Machine to the Enemy Tank via ECS",
          "Adding a State Machine to the Enemy Tank via ECS Pt. 2"
        ],
        "SFX": [
          "3D Audio"
        ],
        "UI.": [
          "Basic UI Layers",
          "UI Events and Signals – Scoring",
          "Creating a Minimap",
          "3D UI with Label3D nodes"
        ],
        "Fleshing Out Your Game": [
          "Start Menu",
          "Pause Menu",
          "Game Manager: Begin/End States",
          "Enemy Spawn System",
          "Multiple Camera Angles"
        ]
      },
      "requirements": [
        "Basic understanding of programming and GDScript",
        "No prior experience in game development required",
        "A willingness to learn and experiment with game mechanics"
      ],
      "description": "Have you ever wanted to create your own 3D games? Welcome to this comprehensive Godot 3D game development course, where we’ll help you master 3D game creation using one of the most powerful open-source game engines available. But why Godot?\nGodot is a powerful, lightweight, and open-source game engine that provides everything you need to create stunning 3D games. With its intuitive interface and easy-to-learn scripting language, it’s an excellent choice for anyone looking to break into the world of game development.\nIn this course, you’ll build an interactive 3D tank battle game from scratch. You’ll start by learning the basics of navigating Godot’s 3D environment, setting up your scene, and working with 3D objects. From there, you’ll dive into physics, player movement, and AI-driven enemies to create engaging gameplay mechanics. As you progress, you’ll explore UI implementation, sound design, particle effects, and performance optimization to bring your game to life.\n\n\nAfter taking this course, you will be able to:\n\n\nConfidently use Godot to develop 3D games\nBuild and script interactive 3D environments\nCreate and animate AI-driven enemies using state machines\nImplement advanced gameplay mechanics, including combat, movement, and physics\nPolish and optimize your game for better performance and player experience\nLaunch your own projects using Godot’s 3D capabilities\n\n\nIf you're ready to dive into the exciting world of 3D game development, enroll today and start creating your first Godot 3D game!",
      "target_audience": [
        "Aspiring game developers who want to learn 3D game development using Godot",
        "2D game developers looking to transition into 3D game design",
        "Indie developers seeking an open-source game engine alternative",
        "Hobbyists and students interested in creating their own 3D games from scratch"
      ]
    },
    {
      "title": "Godot 4: Build & Launch Full 2D Roguelike Game",
      "url": "https://www.udemy.com/course/godot-4-build-launch-full-2d-roguelike-game/",
      "bio": "From first line of code to finished 2D game. Master Godot, GDScript, and essential game dev patterns.",
      "objectives": [
        "Build a complete 2D roguelike game from scratch in Godot",
        "Master the fundamentals of GDScript for robust gameplay scripting",
        "Design reusable, modular game systems and patterns",
        "Launch and share your finished game project"
      ],
      "course_content": {},
      "requirements": [
        "Anyone with minimal programming knowledge"
      ],
      "description": "What is Godot?\nGodot is a powerful, open-source cross-platform game engine with a user-friendly editor available for Windows, macOS, and Linux. It supports seamless development for various platforms, including mobile, desktop, consoles, and web, making it a popular choice for both indie and professional developers.\nWhat Will You Build?\nEmbark on an immersive journey by building a captivating 2D survival game from scratch: \"Unknown Adventure.\" This course will teach you essential Godot skills, from core engine concepts to creating robust, reusable systems.\nProject: Unknown Adventure\nYou will learn how to design and develop an entire survival game where the player must battle increasingly challenging monsters, each possessing unique abilities, and strive to survive as long as possible.\n\n\nCore Skills and Systems You'll Master\nBasics & Tilemaps\nGet started with Godot's interface, set up your project, and master the creation of 2D tile-based environments using Godot's powerful Tilemap system.\nNodes & Scenes\nUnderstand Godot's foundational architecture, including nodes, scenes, and instancing, for building organized and scalable projects.\nGDScript Fundamentals\nLearn GDScript, Godot's dedicated scripting language, to implement all gameplay logic, systems, and interactive features.\nModular Ability System\nCreate a flexible, modular ability system that allows for easy creation and management of new abilities for both players and enemies. The system is designed for reusability and expandability.\nDynamic Enemy Spawning\nDevelop an adaptive enemy spawning system so every playthrough delivers fresh challenges and escalating difficulty.\nReal-Time UI for Game Stats\nBuild an intuitive user interface that displays player health, score, and other crucial stats, updated dynamically throughout the game session.\nComprehensive Damage & Health System\nImplement balanced and scalable health management for both the player and various enemy types, including damage calculation and effects.\nStart/Options Menu\nDesign a polished menu system for starting new games, adjusting settings, and selecting your protagonist or game parameters.\nScore Screen & Replay Functionality\nSet up an engaging score/achievement screen at the end of each run, along with a seamless restart function to encourage replayability.\nEmphasis on Reusability\nFocus on developing reusable scripts, nodes, and systems, empowering you to efficiently build future Godot games.\nMain Goal\nThe primary goal of this course is to equip you with the knowledge and practical skills to build reusable, modular systems in Godot. You will gain a deep understanding of how to design scalable, flexible, and efficient components that streamline game development for a wide range of game genres and projects.\nBy the end of this course, you won't just have completed your own 2D survival game—you'll have laid the foundation for future independent game development with Godot.",
      "target_audience": [
        "Aspiring indie game developers wanting a hands-on project in Godot",
        "Beginners looking for a step-by-step introduction to 2D game development",
        "Hobbyists eager to master essential programming patterns and reusable game architecture"
      ]
    },
    {
      "title": "Make A Flappy Bird Game using JavaScript & P5.js framework",
      "url": "https://www.udemy.com/course/flappy-bird-game-javascript-p5js/",
      "bio": "Learn Coding By Making Classic Games",
      "objectives": [
        "Be able to declare and assign variables in JavaScript",
        "Be able to use conditional statement and gravity in JavaScript",
        "Be able to understand the foundation of 2D game including the setup and draw cycle",
        "Be able to apply new idea to the existing game"
      ],
      "course_content": {},
      "requirements": [
        "Basic knowledge of JavaScript or coding in general",
        "Basic knowledge of web browser"
      ],
      "description": "Make a simple, easy-to-follow, classic Flappy bird game, using javascript and p5 framework. We will be using a free online editor that runs on any web browser.\nI will show you how to:\ndraw basic shapes, and make an object move.\ndraw a bird, make it drop to the ground by simulating the gravity.\nmake the bird jump, and also make it stop jumping when it is dead.\ncreate moving pipes, and add a collision detection to the pipe.\nadd a score system, and make it harder.\nYou can follow me for more game tutorials. Now let’s open the next lesson, and get started!",
      "target_audience": [
        "Anyone who wants to learn coding",
        "Anyone who loves games and wants to make games"
      ]
    },
    {
      "title": "Solo Dev Version Control in Unreal Engine with Git & GitHub",
      "url": "https://www.udemy.com/course/version-control-for-solo-devs-in-ue-with-git-and-github/",
      "bio": "The Easiest Way to Use Git & GitHub with Unreal Engine 5. A Visual, No-Terminal Guide for Solo Developer (Windows Only)",
      "objectives": [
        "Implement a complete, production-ready version control workflow that you can immediately apply to any of your current or future Unreal Engine projects.",
        "Set up a professional Git environment for Unreal Engine 5 using GitHub, TortoiseGit, and Git LFS, all without using the command line.",
        "Manage and track your game assets from both Windows Explorer and directly inside the Unreal Editor using its built-in Revision Control system.",
        "Perform all essential Git operations visually, including committing changes, pushing backups to GitHub, and reverting mistakes with confidence.",
        "Visually compare changes in any project file, from text-based configs with WinMerge to complex Blueprints and Maps with Perforce P4Merge.",
        "Restore a complete, working copy of your project from a remote GitHub backup, ensuring your hard work is always safe from data loss."
      ],
      "course_content": {
        "Welcome & Overview": [
          "Introduction",
          "Learning Objectives",
          "Who This Tutorial Is For",
          "Limitations of This Tutorial",
          "Prerequisites",
          "About the Instructor",
          "Foundations and Course Scope Quiz"
        ],
        "Tools & Terminology": [
          "Tools We'll Use",
          "Git Terms—Quick Overview",
          "Git Terms—Schematic",
          "Tools and Terminology Check"
        ],
        "Setting Up Your Project": [
          "Creating the Unreal Project",
          "Setting Up the Environment",
          "Project Setup and Initialization Quiz"
        ],
        "Working with Git and LFS": [
          "Exploring Git Files",
          "Using Git LFS",
          "Using Git in Windows Explorer",
          "Using Git Inside UE",
          "Core Operations and Integrations Quiz"
        ],
        "Managing Assets & Version History": [
          "Managing Marketplace Assets",
          "Viewing History in GitHub",
          "Asset Management and History Quiz"
        ],
        "Version Control in Action": [
          "Resetting to a Previous Version",
          "Cloning the Project",
          "Project Recovery and Restoration Quiz"
        ],
        "Wrapping Up": [
          "Conclusion",
          "Final Workflow Review"
        ]
      },
      "requirements": [
        "A Windows PC",
        "Unreal Engine 5 installed",
        "Basic familiarity with the Unreal Editor",
        "A GitHub account (a free account works perfectly)",
        "The ability to download and install software on your computer"
      ],
      "description": "Are you an Unreal Engine 5 developer working solo and feeling overwhelmed by version control tools like Git and GitHub? This course is designed specifically for independent developers on Windows who want to use Git without ever touching the terminal.\nYou'll learn a complete, beginner-friendly Git workflow using TortoiseGit, GitHub, and Git LFS, all through graphical interfaces. From creating your first repository to safely rolling back mistakes, you'll be guided step-by-step to master version control tailored to Unreal Engine 5 projects. We’ll show you how to keep your work safe, back it up online, and even recover from disasters—no command line, no confusion.\nYou’ll start with the essentials: what Git is, how it works behind the scenes, and which tools you actually need. Then, you'll create a project, push it to GitHub, and integrate version control directly inside Unreal Engine. You’ll also explore how to track asset changes, use merge tools like P4Merge, and even clone your project on a new machine with ease.\nWhether you're building prototypes, full games, or preparing for a studio pipeline, this course will give you the tools, habits, and confidence to never lose work again.\nStart now—and take control of your Unreal Engine projects the smart way.",
      "target_audience": [
        "You’re a solo dev handling your entire project",
        "You’ve never used Git before and want a beginner-friendly introduction",
        "You’re tired of naming folders “MyGame_Final_3_FIXED_REAL_FINAL”",
        "You’re struggling with storage or messy project backups",
        "You feel overwhelmed trying to keep your project organized",
        "You want a clean, visual, and Windows-friendly version control workflow"
      ]
    },
    {
      "title": "Unity Game Tutorial: Snake 3D - Arcade Game",
      "url": "https://www.udemy.com/course/unity-game-tutorial-snake-3d-arcade-game/",
      "bio": "Learn how to design and code a 3D version of the classic Snake game in Unity Game Engine.",
      "objectives": [
        "How to create a 3D Snake game in Unity.",
        "How to use some advance coding techniques like delegates.",
        "How to use the new Input System in Unity.",
        "A lot c# fundamentals.",
        "A lot of Unity features, like working with Prefabs, and more."
      ],
      "course_content": {
        "Introduction": [
          "#1 - Snake 3D - Introduction",
          "#2 - Snake 3D - Concept",
          "#3 - Snake 3D - Unity Interface"
        ],
        "The Snake Mechanics": [
          "#4 - Snake 3D - Snake Head Base",
          "#5 - Snake 3D - Snake Head Move",
          "#6 - Snake 3D - Tail Prefab",
          "#7 - Snake 3D - Tail Direction",
          "#8 - Snake 3D - Add Tail Piece",
          "#9 - Snake 3D - Testing Tails",
          "#10 - Snake 3D - Move Tails 1",
          "#11 - Snake 3D - Move Tails 2",
          "#12 - Snake 3D - Tail Grafics 1",
          "#13 - Snake 3D - Tail Grafics 2",
          "#14 - Snake 3D - Set Grafics",
          "#15 - Snake 3D - Snake Models",
          "#16 - Snake 3D - Set Tail Graphics",
          "#17 - Snake 3D - Pick Ups",
          "#18 - Snake 3D - Update Tail",
          "#19 - Snake 3D - Update PickUp"
        ],
        "The Playfield": [
          "#20 - Snake 3D - Playfield Design",
          "#21 - Snake 3D - 2D Assets Import",
          "#22 - Snake 3D - Pickup Random Position",
          "#23 - Snake 3D - Check Free Position",
          "#24 - Snake 3D - Prepare Spawn",
          "#25 - Snake 3D - PickUp and Generate"
        ],
        "Controlling the Snake": [
          "#26 - Snake 3D - Input System",
          "#27 - Snake 3D - Move Snake",
          "#28 - Snake 3D - Direction Fix"
        ],
        "User Interface": [
          "#29 - Snake 3D - UI Top Bar",
          "#30 - Snake 3D - UI Score",
          "#31 - Snake 3D - UI Countdown",
          "#32 - Snake 3D - Countdown Listener"
        ],
        "Audio": [
          "#33 - Snake 3D - Adding Eat Audio"
        ],
        "Game Over UI & Menu Design": [
          "#34 - Snake 3D - GameOver Screen",
          "#35 - Snake 3D - Game Over",
          "#36 - Snake 3D - Menu Manager",
          "#37 - Snake 3D - Main Menu Design",
          "#38 - Snake 3D - Scolling Background",
          "#39 - Snake 3D - Menu Navigation",
          "#40 - Snake 3D - Menu Buttons",
          "#41 - Snake 3D - Other Buttons"
        ],
        "New Game Modes": [
          "#42 - Snake 3D - Game Modes",
          "#43 - Snake 3D - Colors in Modes",
          "#44 - Snake 3D - Game Mode Ideas"
        ],
        "Basic PC Game Build": [
          "#45 - Snake 3D - Build Game Basics",
          "#45-2"
        ],
        "Conclusion & Thanks": [
          "#46 - Snake 3D - Conclusion"
        ]
      },
      "requirements": [
        "Computer with a reliable internet connection.",
        "Basic computer skills, including file management and navigation.",
        "Programming knowledge or willingness to learn programming languages.",
        "Understanding of game design principles and concepts.",
        "Knowledge of game engines and development tools.(Not a must, but always good to have)",
        "Creativity and passion for game development.",
        "Patience and persistence to overcome challenges and setbacks.",
        "Willingness to continuously learn and stay up-to-date with industry trends and technologies.",
        "Strong problem-solving and critical thinking skills."
      ],
      "description": "Are you ready to level up your Unity game development skills? My new online course on Snake 3D will teach you how to create a classic arcade game with a modern twist. In this course, you'll learn how to design and code a 3D version of the classic Snake game, complete with challenging obstacles and pick-ups.\nI will guide you through the entire process, from setting up your project to refining your game mechanics. You'll learn how to use Unity's powerful tools and features to create stunning visuals and engaging gameplay.\nWhether you're a beginner or an experienced developer, this course is perfect for anyone looking to create their own game with Unity. Don't miss out on this opportunity to learn how to make Snake 3D and take your game development skills to the next level!\nThis course is a Beginner/Intermediate course, so if you have trouble in any case, write me a message or Q&A, and i'll help as best as i can.\nGame Concept\nSnake 3D is a basic concept in which the player navigates a 3D snake through a gridbased Playfield. The snake constantly moves forwards, so the Player has to act accordingly to avoid Obstacles and it's own tail. Eat pickups to grow the snake and increase the score.\nUnity (2021.3.3f1 used in this course)\nWe will create the basic navigation mechanics\nWe will create different Game Modes\nWe create a Menu and UI panels\nWe create pickup mechanics to increase snake length\nWe use Text Mesh Pro for beautiful font visuals\nWe create a Windows Build, to show the basics.\nC#\nWe will put in functionality with scripts using Visual Studio Code and C# (you can use any other IDE)\nWe learn to use: floats, integers, booleans, Lists, void and delegate functions\nWe create the game logic and all needed Prefabs\nWe learn to integrate Text Mesh Pro for beautiful font visuals\nWe learn all needed content for the New Input System\nWe intergate Keyboard and Gamepad playability\nWe create a scrolling Texture mechanic for the main Menu\nExtra\nWe check out multiple extra game ideas to make a more different Snake 3D game, so you can stand out of the crowd\nConclusion\nAs a result of this course you should be able to create your own levels with different game Modes.\nIn the end of this course you will have a fully functional Snake 3D - Arcade Game\nCourse Material\nmultiple UI-Elements like Buttons and background grafics\n5 3D Models - - Snake Head, Snake Straight piece, Snake Corner piece, Snake Tail Piece, Border Gras Piece\nThe Course Material is for education purposes only, so if you want to release your own game, create your own grafics and 3D Models for that. All Materials i provide are for education only and should not be in your final release!\nChallenge\nAfter you have created nice Menus, Buttons, 3D Models, new Levels and maybe additional content, upload the Game to any Gaming Website, Google Playstore, Apple Store or even Windows Store or Steam.\nSo what are you waiting for?\nLet's make your dream game a reality!!\nLevel: Beginner/Intermediate +\nVideo Course Length: ~\nUnity Version required: 5.6+",
      "target_audience": [
        "Beginners interested in learning game development from scratch.",
        "Game enthusiasts looking to transition to a career in game development.",
        "Students pursuing a degree in game design or computer science.",
        "Freelance game developers seeking to improve their skills and knowledge.",
        "Independent game developers looking to create games for mobile or PC platforms.",
        "Small game development studios looking to upskill their team.",
        "Hobbyists who want to create their own games as a creative outlet.",
        "Educators who want to incorporate game design into their curriculum.",
        "Entrepreneurs who want to start their own game development studio."
      ]
    },
    {
      "title": "Develop Your Own Game Quick & Easy with Game Maker Studio",
      "url": "https://www.udemy.com/course/develop-your-own-game-in-3-hours-with-game-maker-studio/",
      "bio": "Learn from a pro how to develop games with game maker studio, and create your own game in less than 3 hours!",
      "objectives": [],
      "course_content": {
        "Before We Begin": [
          "What This Course Covers & Why You Should Take It",
          "Download & Install GameMaker for Free"
        ],
        "Intro - The Basics of Using GameMaker": [
          "Main Components of a Game in GameMaker",
          "Create Our First Sprite",
          "Create Our First Object",
          "Create Our First Room",
          "Source Code",
          "Section 2, Step By Step Revision",
          "Fancy A Quiz?",
          "Exercise Time!"
        ],
        "Sprites - Images for your First Game!": [
          "What Game Are We Going To Create?",
          "Bat Sprite",
          "Ball Sprite",
          "Wall Sprite",
          "Brick Sprite (Full)",
          "Brick Sprite (Broken)",
          "Source Code",
          "Section 3, Step By Step Revision",
          "Fancy A Quiz?",
          "Exercise Time!"
        ],
        "Objects - Making Our Game Come Alive": [
          "Bat Object",
          "Room Object",
          "Wall Object",
          "Bat Object - Bounce Against The Wall Object",
          "Wall Object - Bounds & Collision With The Bat Object",
          "Ball Object - Collision With The Bat & Wall Objects",
          "Ball Object - Reset & Jump to Start",
          "Brick Objects - For Our Ball to Destroy!",
          "Ball / Brick Interaction & Brick Creation",
          "Game In Action!",
          "Source Code",
          "Section 4, Step By Step Revision",
          "Fancy A Quiz?",
          "Exercise Time!"
        ],
        "Points & Lives System": [
          "Game Start",
          "Game End",
          "Game HUD (Heads-Up Display)",
          "Adding Points & Removing Lives",
          "Game In Action!",
          "Source Code",
          "Section 5, Step By Step Revision",
          "Fancy A Quiz?",
          "Exercise Time!"
        ],
        "Adding A Game Menu": [
          "Start Game Button (Sprite)",
          "Start Game Object",
          "Start Game Room",
          "Game In Action!",
          "Source Code",
          "Section 6, Step By Step Revision",
          "Fancy A Quiz?",
          "Exercise Time!"
        ],
        "Powerups & Powerdowns!": [
          "Bat Powerup Sprite",
          "Bat Powerup Object",
          "Ball Object + Brick Collision = Chance Of Power-Up Creation",
          "Bat Object - What Happens When it Hits a Power-Up?",
          "Game In Action!",
          "Source Code",
          "Section 7, Step By Step Revision",
          "Fancy A Quiz?",
          "Exercise Time!"
        ],
        "Congratulations! (& Where Do You Go From Here?)": [
          "Exporting Your Game To Android",
          "Exporting Your Game To iOS",
          "What Have You Learned & Accomplished?",
          "Thank You So Much... & Keep In Contact :)"
        ]
      },
      "requirements": [
        "No programming experience needed!",
        "Download Game Maker Studio (free)",
        "Install Game Maker Studio"
      ],
      "description": "BONUS section added for changing levels on website link provided in description of lectures.\n\nWould you like the skills & knowledge to develop your own game and upload it to the app store?\n\nWould you like to learn how to use Game Maker Studio?\n... if the answer is yes, then you should take this course!\n\n\nWhat Is This Course About?\nThis course is about developing a game using Game Maker Studio. In this course I develop a brick breaker game, and I make it really easy to follow along from start to finish for all my students - no previous development experience is necessary. I personally take you from the very beginning to the very end of developing your very own game, and answer any questions you may have along the way.\n\n\nWhy Take This Course?\nLearn game development by making your own game\nEnvision your own ideas for games and bring them to life\nUpload your games to the app store\nHow Long Will This Course Take To Complete?\nThis course should take no longer than two hours to complete!\n\n\nWhy Learn This Course From Me?\nI have a degree in Computer Science from University College Cork, Ireland.\nI code safety applications used to control funfair rides, ski lifts and car conveyor belts for the likes of Ford, for a living.\nI eat and sleep code, basically coming up with new app / web ideas & implementing those ideas on a daily basis.\n\n\n... & I will also provide you with a 30 day money back guarantee, in case you don't like what I have to teach ;)",
      "target_audience": [
        "Anyone who would like to develop games",
        "People who like playing games",
        "Anyone who would like to make some money selling their games",
        "Those who like creating worlds of their own"
      ]
    },
    {
      "title": "Unleash Your Game Development: Complete Unity 3D Course",
      "url": "https://www.udemy.com/course/legingerdev-unleash-game-development/",
      "bio": "Learn Proven Strategies, Techniques, and Tips for Game Development Success in this Comprehensive Unity 3D Master Class",
      "objectives": [
        "Learn the fundamentals of C# programming language and apply it to develop interactive and engaging games.",
        "Learn how to build captivating 3D game worlds using the Unity Game Engine.",
        "Learn how to design and implement core gameplay mechanics such as player movement, physics interactions, and user input handling.",
        "Learn to understand and build critical game systems such as character controllers, game managers and complex game loops",
        "Complete several game development projects throughout the course, showcasing your skills and creating a strong portfolio for future opportunities."
      ],
      "course_content": {
        "Introduction": [
          "Project Setup"
        ],
        "Player Character": [
          "Tank Movement",
          "Camera Movement",
          "Tank Shooting",
          "Enemy Death Logic",
          "Adding Scores",
          "Enemy Movement 1",
          "Enemy Movement 2",
          "Creating the Game HUD",
          "Enemy Shooting",
          "Taking Damage",
          "Adding a Health UI",
          "Player Death",
          "Adding Player invunerability"
        ],
        "Additional Features": [
          "Applying Materials",
          "Adding Barricades",
          "Adding the Environment",
          "Polishing the UI",
          "Adding difficulty to enemies",
          "Removing Enemies",
          "Resetting Score Multipliers",
          "Adding Abilities",
          "Dropping Abilities",
          "The Golden Enemy"
        ],
        "Game Polish": [
          "Adding Highscore",
          "Displaying the End Screen",
          "Adding Enemy Animations",
          "Adding Particle Effects",
          "Adding Color Randomisation",
          "Tank Animations",
          "Polishing the Terrain",
          "Technical Debt Cleanup",
          "Adding Audio"
        ]
      },
      "requirements": [
        "This course is beginner-friendly and assumes no prior programming knowledge. We will start from the basics and gradually build upon concepts.",
        "You will need a computer running Windows, macOS, or Linux. We will use popular game development tools and engines, which will be introduced and explained during the course.",
        "A passion for game development and a willingness to learn and explore new concepts will greatly enhance your experience in this course."
      ],
      "description": "Welcome to the ultimate Unity 3D Master Class in Games Development! Whether you're a beginner eager to dive into the world of game development or an experienced developer looking to enhance your skills, this comprehensive course is designed to take you on a thrilling journey of game creation.\nThroughout this course, you will embark on a hands-on learning experience, starting with the foundation of game development and gradually progressing towards mastering advanced concepts. Our course curriculum is carefully crafted to equip you with the necessary knowledge, tools, and techniques to bring your game ideas to life.\nAt the core of this master class are five captivating game projects that will challenge and inspire you. We'll begin with \"Space Invaders 3D,\" a modern twist on the classic arcade game, where you'll learn the fundamentals of game mechanics, player controls, and enemy AI.\nNext, you'll explore the realm of puzzle platformers with a 3D twist, designing levels and implementing captivating gameplay mechanics. Unleash your creativity as you create a Mario Inspired 3D Puzzle Platformer!\nThen we'll dive into the realm of strategy games as you build a Tower Defence Game. From designing diverse enemy waves to creating a variety of towers with unique abilities, you'll gain valuable insights into creating immersive gameplay experiences.\nGet your rhythm flowing with the development of a dynamic Rhythm Game. Learn how to synchronize music and visuals, create captivating beat maps, and implement addictive gameplay mechanics to keep players tapping to the rhythm.\nLastly, immerse yourself in the world of first-person shooters (FPS) as you build your own FPS Game. Explore the essentials of level design, player movement, weapons, and enemy AI, while crafting thrilling gameplay experiences.\nThroughout the course, you'll receive expert guidance from experienced instructors, access to a vibrant community of fellow learners, and valuable resources to support your learning journey. By the end, you'll have the knowledge and skills to confidently bring your own game ideas to fruition.\nWhether you aspire to be an indie developer, pursue a career in the gaming industry, or simply have a passion for creating interactive experiences, this Unity 3D Master Class is your gateway to unlocking the full potential of game development. Enroll now and let the game-making adventure begin!",
      "target_audience": [
        "If you're new to game development or programming, this course will provide a solid foundation in 3D game development using C#. No prior experience is required.",
        "If you have a passion for game design and want to bring your ideas to life, this course will teach you the essential skills and techniques to create immersive 3D games.",
        "If you have some experience with programming and want to specialize in game development, this course will expand your skills by focusing on game-specific concepts and practices using C#.",
        "If you already have some knowledge of game development but want to enhance your understanding of 3D game mechanics, graphics, and optimization, this course will provide valuable insights and practical projects to help you level up your skills.",
        "If you enjoy creating games as a hobby or aspire to develop indie games, this course will guide you through the process of building 3D games, equipping you with the necessary knowledge to pursue your creative endeavors."
      ]
    },
    {
      "title": "Unreal Engine C++: Create Helicopter-Bot & AI Shooter",
      "url": "https://www.udemy.com/course/ultimate-unreal-engine-c-game-development/",
      "bio": "Ultimate Unreal C++ Course: Basics to Expert with Two Projects | Helicopter Bot Fighter | Advanced AI Shooter",
      "objectives": [
        "Advanced C++ Concepts for Unreal Engine",
        "Animations and Motion Matching",
        "Create intelligent NPCs with AI Perception Systems for sight and hearing.",
        "Master Object-Oriented Programming (OOP) with classes, inheritance, and polymorphism.",
        "Understand Unreal Engine’s class hierarchy, macros like UPROPERTY, UCLASS, UFUNCTION, and the use of casting for object manipulation.",
        "AI Systems and Behavior",
        "Virtual functions, pointers, smart pointers, and Unreal’s memory management systems.",
        "Learn template functions and classes to create reusable code.",
        "Game Mechanics and Physics",
        "Set up version control with GitHub to track code changes and access lecture-specific updates.",
        "Build complex systems using coordinates, vectors, and rotators.",
        "Game Development Best Practices",
        "Set up Behavior Trees and Blackboards for dynamic decision-making.",
        "Program AI to chase, attack, and strategically respond to player actions.",
        "Retarget animations and work with skeletal meshes.",
        "Design smooth transitions using Animation Blueprints and montages.",
        "Weapon Systems",
        "Build a complete weapon system with pickup functionality, projectile mechanics, and shooting animations.",
        "Master line tracing by channel to detect hits and apply damage dynamically.",
        "UI and Game Modes"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Unreal Engine": [
          "Section Overview",
          "Installing Unreal Engine",
          "User Interface",
          "Navigation",
          "Viewport Settings",
          "Creating and Transforming Objects",
          "Post Process Volume",
          "Materials",
          "Lights",
          "Landscape",
          "Landscape Material",
          "Foliage"
        ],
        "C++": [
          "Section Overview",
          "Setup Visual studio project",
          "Installing Visual studio community",
          "First Program in C++",
          "Statements in C++",
          "Names and Keywords",
          "Building C++ Program",
          "Errors and Warnings",
          "Data Types",
          "Variables",
          "Integers",
          "const Keyword",
          "Operations on Integers",
          "Increment and Decrement Operators",
          "Floating Point",
          "Type Conversion",
          "Characters",
          "Strings",
          "auto Keyword",
          "Variable Lifetime",
          "Operators",
          "Arithmetic Operators",
          "Assignment Operators",
          "Relational Operators",
          "Logical Operators",
          "Conditional Operator",
          "Boolean",
          "if - else",
          "if-else Example",
          "else if",
          "Nested if",
          "Switch",
          "Loops",
          "while Loop",
          "do...while Loop",
          "for Loop",
          "Range based for Loop",
          "Arrays",
          "Array Elements",
          "Cpp strings",
          "Functions",
          "Calling Functions",
          "Parameters and return",
          "Default Arguments",
          "Arrays to Functions",
          "Static Variables",
          "Function Overloading",
          "Recursion",
          "How do function calls work",
          "Inline Functions",
          "Pointers",
          "Dereferencing Pointers",
          "Array of Pointers and pointer to array",
          "Constant and Pointers",
          "Pointer Arithmetic",
          "Dynamic Memory Allocation",
          "Hazards of Dynamic Memory Allocation",
          "Hazards of Dynamic Memory Allocation - Example",
          "Smart Pointers",
          "Unique Pointer",
          "Shared Pointer",
          "Reference",
          "Returning a pointer from a function",
          "Passing by Reference",
          "Returning Reference from a Function",
          "Input and Output Parameters",
          "Enumerations",
          "Enumerations (Examples)",
          "OOP",
          "Accessing Class Members",
          "Struct",
          "Member Methods",
          "Constructors and Destructors",
          "Default Constructor",
          "friend Class",
          "Setters and Getters",
          "Namespace",
          "Nested Namespace",
          "Inheritance",
          "is a' test",
          "protected class members",
          "Constructors and Destructors",
          "Override class Methods",
          "Polymorphism",
          "virtual Functions",
          "VTables",
          "Default Arguments with virtual functions",
          "static_cast",
          "dynamic_cast"
        ],
        "Concepts": [
          "Coordinates",
          "Vectors",
          "Operations on Vector",
          "Rotators"
        ],
        "C++ in Unreal Engine": [
          "Setting Up Visual Studio",
          "Unreal Engine Class Hierarchy",
          "Reflection and garbage collection",
          "Actor Class",
          "Creating Blueprint",
          "UE_LOG Compile and Hot Reload",
          "On Screen Message",
          "Formatting FString",
          "Actor Location and Rotation",
          "AddActorWorldOffset and DeltaTime",
          "UPROPERTY",
          "Exposing Variables to Blueprint",
          "UFUNCTION",
          "Template Functions",
          "Components"
        ],
        "Helicopter Fighter Game": [
          "Pawn Class",
          "City Map",
          "Helicopter Mesh",
          "Camera And Spring Arm Components",
          "Enhanced Input",
          "Subsystem",
          "Input Action",
          "Helicopter Movement",
          "Controller Rotations",
          "Bot Class",
          "Target Helicopter",
          "Find Look At Rotation",
          "RInterpTo",
          "Projectile Movement",
          "Bullet Material",
          "Spawning Bullet",
          "Set Timer",
          "Sound and Particle Effects",
          "Collision Components",
          "On Hit Component",
          "Other Actor",
          "Destroy Helicopter",
          "Stop Firing",
          "Helicopter Weapon Components",
          "Helicopter Fire()",
          "Helicopter Shoot Input",
          "Destroy Bot",
          "Map Changes",
          "Final Result"
        ],
        "GitHub Version Control": [
          "GitHub Repository",
          "Commit"
        ],
        "Character Class": [
          "Importing Assets",
          "Retargeting Animations",
          "The Character Class",
          "Setup Enhanced Input",
          "Character Movement",
          "Camera and Spring Arm",
          "Look Around",
          "Animation Blueprint",
          "Motion Matching",
          "Jump"
        ],
        "Physics and Collision": [
          "Physics and Collision",
          "Collision Presets",
          "Collision Components"
        ],
        "Weapon": [
          "Weapon Assets",
          "Weapon Class",
          "Weapon and Character Overlap",
          "Weapon Pickup Input",
          "Attach Weapon",
          "Rifle Animations",
          "Rifle Jump",
          "Projectile Class",
          "Character Shoot",
          "Anim Montage",
          "Weapon Shoot",
          "Weapon Fire Montage",
          "Spawn Projectile",
          "Weapon UI",
          "Line Trace By Channel",
          "Line Trace By Channel Explained",
          "Look At Target",
          "On Projectile Hit",
          "Apply Damage",
          "Take Damage",
          "Character Health",
          "Hit Reaction",
          "Character Death"
        ]
      },
      "requirements": [
        "No prior knowledge of Unreal Engine or C++ is required.",
        "A PC capable of running Unreal Engine 5 smoothly."
      ],
      "description": "Welcome to the ultimate Unreal Engine and C++ course, where you’ll learn everything you need to master game development—from the very basics to advanced mechanics. By the end of this course, you’ll have the knowledge and confidence to build your own games using the full power of Unreal Engine and modern C++. Not only will you create two complete games in this course, but you’ll also gain a deep understanding of the logic and reasoning behind every concept, empowering you to create anything you imagine.\n\n\nCourse Highlights\nTwo Complete Projects: Create a Helicopter Bot Shooter Game to learn the basics and an Advanced Shooter Game to master AI, animations, and combat mechanics.\nCutting-Edge Tools: Explore Unreal Engine’s latest features, including Enhanced Input, Motion Matching, and advanced AI perception systems.\nVersion Control: Learn GitHub integration to manage your projects professionally and access project files easily.\nStep-by-Step Guidance: Start with the fundamentals and progress to advanced topics, ensuring a thorough understanding of both C++ and Unreal Engine.\n\n\nWhy Take This Course?\nThis course is designed to be the most complete and beginner-friendly guide to Unreal Engine and C++ available. Starting with the fundamentals, we gradually build up to advanced techniques, ensuring you develop a strong foundation before tackling complex topics. Each concept is explained step by step, so you don’t just follow along—you truly understand how and why it works.\nBy learning Unreal Engine and C++ together, you’ll unlock a professional-level skill set that gives you the freedom to create any type of game, whether it’s a simple platformer, an action-packed shooter, or an AI-driven open-world experience.\nWhat Will You Learn?\n1. Unreal Engine and C++ Basics\nWe begin by introducing the Unreal Engine interface and the basics of C++ programming. You’ll set up your environment, learn to navigate Unreal’s tools, and create your first project. For those who already know the basics, you can skip ahead. However, this section lays a strong foundation, covering essential topics like:\nWriting simple C++ scripts to interact with Unreal Engine objects.\nUsing Unreal Engine’s editor tools for faster and smarter game design.\n2. Mastering C++ for Unreal Engine\nThis section is the heart of the course. We’ll explore the C++ programming concepts that power Unreal Engine in great depth. Each topic is explained with real-world examples, so you’ll fully understand how these principles work in game development:\nObject-Oriented Programming (OOP):\nHow Unreal Engine uses OOP to structure its framework.\nUnderstanding classes, objects, inheritance, and polymorphism.\nReal-world examples of inheritance in Unreal Engine, such as extending the Actor class.\nVirtual Functions:\nWhy virtual functions are critical for game logic in Unreal.\nHow polymorphism is used to override behavior in derived classes.\nMemory Management:\nLearning about pointers and why they’re essential for Unreal Engine development.\nUnderstanding smart pointers (unique, shared, and weak) for safer memory management.\nUnreal Engine’s built-in alternatives to pointers, like TObjectPtr and TSubclassOf.\nTemplate Functions and Classes:\nWriting reusable and efficient code for common tasks.\nExamples of template functions in Unreal Engine, such as TArray and FVector.\nCasting and Unreal’s Cast System:\nThe role of static and dynamic casting in C++.\nUnreal Engine’s Cast<T> function and how it simplifies working with objects.\n3. Understanding Game Coordinates and Math\nWe’ll break down the coordinate system that defines every object’s position in Unreal Engine. You’ll also master vectors and rotators, which are crucial for movement, rotations, and physics-based interactions. Key topics include:\nManipulating vectors for precise movement.\nUsing rotators for smooth character rotation and aiming.\n4. Unreal Engine-Specific Concepts\nThis section dives deep into how Unreal Engine works under the hood and how to integrate your C++ code into its framework. You’ll learn:\nUnreal Engine’s class hierarchy and how to extend its classes.\nEssential macros like UPROPERTY, UCLASS, and UFUNCTION.\nHow macros communicate with the editor for property visibility, replication, and more.\nCreating custom Actor components to extend functionality.\n5. First Game Project: Helicopter Bot Shooter\nIn this project, you’ll create a fully functional helicopter shooter game with NPC bot fighters. You’ll learn about:\nPawn Classes:\nControlling the player’s helicopter using the Pawn class.\nSetting up input using Unreal Engine’s new Enhanced Input system.\nCamera Systems:\nAdding a camera and spring arm for better gameplay visualization.\nNPC Bots:\nSpawning enemy bots and programming simple AI behaviors.\nCompleting a playable game, combining movement, shooting, and AI bot interactions.\n6. Version Control with GitHub\nProperly managing your game project is vital. In this section, you’ll learn:\nSetting up GitHub for version control.\nSubmitting commits to track your code changes.\nProviding access to lecture-specific code snapshots, so you can follow along and see progress at each step.\n7. Second Game Project: Advanced Shooter with AI\nThis advanced project takes your skills to the next level by focusing on modern gameplay systems:\nCharacter Class and Animation:\nCreating a custom character class with animations.\nRetargeting animations and using Unreal Engine’s Motion Matching system for realistic animation blending.\nPhysics and Collision Systems:\nBuilding realistic interactions using Unreal’s physics engine.\nSetting up collision rules for weapons, projectiles, and environmental objects.\nWeapon Systems:\nDesigning a weapon class with pickup functionality.\nAdding shooting mechanics with line tracing by channel.\nImplementing a health and damage system for players and AI.\nAI Development:\nUsing the AI Perception System to give bots hearing and sight.\nSetting up Behavior Trees and Blackboards for dynamic AI behaviors.\nProgramming bots to chase, attack, and respond to player actions.\n8. UI and Game Mode\nTo make your games feel complete, you’ll learn to create simple yet functional user interfaces and game modes:\nDesigning a HUD for health and weapon.\nUpdating the UI dynamically from C++.\nConfiguring game rules with custom Game Modes.\n9. Finalizing Your Game\nIn the final section, you’ll polish and final your game:\nSetting up a new map and configuring game settings.\nPreparing your game for sharing or publishing.\nWhat Makes This Course Unique?\nThis isn’t just a course where you follow along. Each topic is explained in depth, so you understand not just how but why things work. By the end, you won’t just know how to create the two projects—you’ll have the freedom and confidence to build your own games from scratch, using the full power of Unreal Engine and C++.\nJoin now, and let’s start creating something incredible!",
      "target_audience": [
        "Beginners: Start with no prior experience and build your skills from the ground up.",
        "Intermediate Developers: Extend your knowledge of Unreal Engine and C++ by diving into advanced concepts.",
        "Learn to create professional-grade games with AI, physics, and animations."
      ]
    },
    {
      "title": "Godot 4.3 .NET C# - Offline Speech Recognition",
      "url": "https://www.udemy.com/course/godot4net-offlinespeechrecognition/",
      "bio": "Learn Everything You Need To Create Speech Controlled Games",
      "objectives": [
        "Create a hangman game that is 100% speech controlled",
        "Setting up Godot 4.3 with .NET 8 and vscode",
        "How to use an external C# library with the Godot engine",
        "Automatic speech detection",
        "Push-To-Talk",
        "Setting up Audiobuses to not hear oneself through the speakers",
        "Monitoring microphone input levels in code",
        "Preventing the application/game from crashing when using the speech library",
        "How to fix the DllNotFoundException error in Linux and Windows",
        "How to use the Line2D node",
        "How to customize TTF / OTF fonts in the Godot game engine"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Course Structure",
          "Community Discord Link"
        ],
        "Setting up Godot 4.3 .NET with vscode as editor & debugger and .NET8 as compiler": [
          "Setup Godot 4.3 .NET with vscode and .NET8 in Linux",
          "Setup Godot 4.3 .NET with vscode and .NET8 in Windows"
        ],
        "Setting Up The Voice Speech Recognition Library": [
          "Setting up the Godot 4 project",
          "Downloading Speech Models",
          "Voice recognition scripting part 1 / 2",
          "Voice recognition scripting part 2 / 2",
          "Setting up main menu scene as entry point for the game",
          "Fixing the DllNotFoundException - Ubuntu Linux",
          "Fixing the DllNotFoundException - Windows",
          "Setting up microphone recording in the Godot 4 game engine",
          "Monitoring microphone peak level volume",
          "Parsing the JSON data from the speech library",
          "Adding push-to-talk",
          "Fine-tuning recognized speech",
          "Automatic speech detection"
        ],
        "Creating the main menu": [
          "Adding main menu content",
          "Animating the fade in menu animation",
          "Animating the start game animation",
          "Animating the exit game animation",
          "Creating the microphone level meter"
        ],
        "Creating the level scene": [
          "Adding text edit box to display the latest spoken words",
          "Creating the Draw Letter Line scene Part 1/2 - Adding the draw line animation",
          "Creating the Draw Letter Line scene Part 2/2 - Adding the move to next animation",
          "Creating the Draw Word Lines scene",
          "Adding the hidden word above the lines",
          "Displaying selected letters Part 1/2 - Setting up letter atlases",
          "Displaying selected letters Part 2/2 - Displaying the selected letters",
          "Fading in the level",
          "Displaying the correct found letters",
          "Starting and exiting the game"
        ],
        "Drawing the hangman": [
          "Drawing the water line",
          "Drawing the island",
          "Drawing the pole",
          "Drawing the rope and the head",
          "Drawing the body, arms and the legs",
          "Drawing the hangman in the game"
        ],
        "Creating the game over scene": [
          "Creating the game over scene",
          "Displaying the game over scene"
        ],
        "Erasing the black board and starting a new word": [
          "Creating the erase board animation",
          "Displaying the erase board animation"
        ],
        "Finalizing the game": [
          "Finalizing the game"
        ],
        "Download complete project": [
          "Full project - Grab it here!"
        ]
      },
      "requirements": [
        "Intermediate C# skills",
        "Godot 4 .NET",
        ".NET8",
        "Visual Studio Code",
        "A microphone"
      ],
      "description": "Master Offline Speech Recognition with Godot 4.3 and .NET C#\nAre you ready to take your game development skills to the next level? Imagine creating games or apps that respond to voice commands, even without an internet connection. Welcome to Godot 4.3 .NET C# - Offline Speech Recognition, the only course you need to unlock the power of offline voice technology in your projects.\nWhy This Course?\nWith the rise of voice-controlled interfaces, integrating offline speech recognition has become a must-have skill. This course combines the versatility of Godot 4.3, the power of C#, and cutting-edge offline speech recognition techniques to help you build innovative, responsive applications.\nWhether you're a beginner+ developer with a basic understanding of Godot or C#, or an intermediate-level professional eager to deepen your knowledge, this course is designed to push your skills further.\nWhat You’ll Learn\nBuild a speech controlled hangman game: Learn how to utilize speech recognition in a game.\nC# Programming: Write clean, efficient, and powerful code.\nOffline Speech Recognition: Implement voice-driven features without internet dependency.\nWho Is This Course For?\nThis course is ideal for developers who have a foundation in programming and some experience with Godot or C#. Whether you’re a \"beginner+\" ready to tackle intermediate challenges or an intermediate developer aiming to integrate advanced voice recognition features, this course is tailored to your level.\nWhy Wait?\nJoin a thriving community of learners and start building groundbreaking projects today. By the end of this course, you’ll not only have the technical skills but also the confidence to integrate voice recognition seamlessly into your applications.\nEnroll now and take the first step toward creating interactive, voice-enabled experiences.",
      "target_audience": [
        "Developers interested in speech recognition for games",
        "Aspiring indie game developers",
        "Godot 4 C# .NET Game developers"
      ]
    },
    {
      "title": "Mastering Real-Time Unity Lighting",
      "url": "https://www.udemy.com/course/mastering-real-time-unity-lighting/",
      "bio": "Learn lighting, optimization, animations, and game design to create immersive real-time environments in Unity.",
      "objectives": [
        "Master real-time lighting in Unity, including sunrise and sunset systems.",
        "Create optimized terrains, glowing materials, and 3D sound effects.",
        "Customize environments with advanced animations and post-processing.",
        "Understand Unity’s build settings for publishing professional games."
      ],
      "course_content": {
        "Introduction": [
          "Introduction and Getting Started",
          "Unity Basics: Terrain Spawning and Player Controller",
          "Asset Importing and Material Fixes"
        ],
        "Setting Up the Environment": [
          "Environment Setup",
          "Real-Time Lighting Part 1: Initial Setup",
          "Real-Time Lighting Part 2: Coding",
          "Setting the Script in Unity",
          "Adjusting the Script in Unity"
        ],
        "Advanced Environment Enhancements": [
          "Emissive Materials",
          "Making House Windows Glow at Night",
          "Point Lights and Shadows",
          "Optimizing Point Lights",
          "Adding 3D Sound Effects",
          "Post-Processing Setup",
          "3D Text Setup",
          "Adjusting Environment Details"
        ],
        "Interactivity and Animations": [
          "Door Animations",
          "Triggering Animations with Input"
        ],
        "Optimization and Final Touches": [
          "Game Settings and Build Optimization",
          "Adding FPS Indicators",
          "Creating Your Own Sound Effects"
        ],
        "Advanced Systems": [
          "Terrain Techniques",
          "Particle Systems"
        ],
        "Finalization": [
          "Final Build And Testing"
        ]
      },
      "requirements": [
        "No prior Unity experience required. Beginners welcome!",
        "A basic understanding of computer navigation",
        "A PC or Mac capable of running Unity.",
        "Unity Hub and Unity installed (we'll guide you)."
      ],
      "description": "Unlock the power of Unity to create stunning real-time environments with optimized lighting, animations, and immersive design. This comprehensive course takes you step-by-step through essential Unity techniques, empowering you to build and optimize professional-quality environments for your game projects. From realistic terrains to dynamic sunrises and sunsets, glowing windows, optimized particle systems, and vibrant post-processing effects, this course has it all.\nWhether you're a beginner or an intermediate developer, you’ll gain the skills and confidence needed to create visually captivating and functional game worlds. Learn how to bring your ideas to life using Unity’s powerful tools and resources while optimizing performance to ensure smooth gameplay experiences.\nIn this course, you'll discover how to:\nSource high-quality assets, fonts, and audio from Unity’s Asset Store.\nSculpt, paint, and refine terrains to create lifelike landscapes.\nMaster lighting techniques, including advanced sunrises, sunsets, and shadow optimization.\nCustomize skyboxes with dynamic sky colors, fog, and gradient transitions.\nCreate glowing emissive materials for night scenes, such as illuminated house windows.\nUse 3D space sound effects and optimize them for immersive gameplay.\nAdd stunning particle effects and fine-tune post-processing settings.\nBeyond visuals, the course also covers Unity basics like attaching scripts, using prefabs, fixing materials, and building polished projects with customized splash screens, icons, and performance metrics.\nBy the end of this course, you'll have the skills to design, optimize, and bring stunning 3D environments to life—perfect for any game project. Whether you’re just starting out or leveling up your skills, this course will help you shine as a Unity developer.",
      "target_audience": [
        "Aspiring game developers wanting to master Unity lighting.",
        "Beginners eager to create professional real-time environments.",
        "Intermediate developers seeking optimization techniques for better performance."
      ]
    },
    {
      "title": "Start coding Android Game using simplest way (Basic4Android)",
      "url": "https://www.udemy.com/course/your-first-android-game/",
      "bio": "Creating X_O game using programming of basic4Android code to run on Android systems",
      "objectives": [
        "Students will be able to design Android applications & games.",
        "Students will be able to coding Android applications & games.",
        "Students will be able to publishing Android applications & games on google play store.",
        "Students will be able to sale Android applications & games on google play store."
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Steps of Programming": [
          "Introduction to Programming",
          "Branching",
          "Loop",
          "Flowchart design",
          "Installation of B4A",
          "Design flow chart for X_O Game",
          "Editing the flowchart Game code using B4A"
        ],
        "Create another type of applications": [
          "Design Calculator application flowchart"
        ],
        "Sources": [
          "Sources"
        ],
        "Using Amazing New AI for develop the Games": [
          "Sample of my code which genreated by AI to run fighting Game on all platforms"
        ]
      },
      "requirements": [
        "Knowing Basic4Android programming tools.",
        "A mobile device or any emulator runing Android.",
        "Basics of programmning."
      ],
      "description": "Basic4Android (currently known as B4A) is a rapid application development tool for native Android applications, developed and marketed by Anywhere Software Ltd.\nB4A is an alternative to programming with Java.[2]\nB4A includes a visual designer that simplifies the process of building user interfaces that target phones and tablets with different screen sizes.[3] Compiled programs can be tested in AVD Manager emulators or on real Android devices using Android Debug Bridge and B4A Bridge.\nThe language itself is similar to Visual Basic and Visual Basic .Net though it is adapted to the native Android environment.[4] B4A is an object-based and event-driven language.\nB4A generates standard signed Android applications which can be uploaded to app stores like Google Play, Samsung Apps and Amazon Appstore.[5] There are no special dependencies or runtime frameworks required.[6]\nSince February 2020, the full version is 100% free.\nThe Course will present the following:\n1- How to use basic4Android developing application.\n2- How to build flowchart of any application.\n3- How to design the application screens.\n4- How to publish your applications on Google play store.\n5- How to add advertising methods to earn money from your applications.\nAfter finishing the course you will be able to teach the Android basic4android application to all your friends.",
      "target_audience": [
        "Any one want to be Android developer.",
        "Any one want to know easy programming code."
      ]
    },
    {
      "title": "Dialogue and Events in Godot!",
      "url": "https://www.udemy.com/course/dialogue-and-events-in-godot/",
      "bio": "Allow players to interact with NPCs and objects with branching dialogues, progress flags, and cut scenes.",
      "objectives": [
        "Create a dialog box for display dialogue in your game.",
        "Build an event system that allows the player to interact with NPCs or objects with a button press.",
        "Use progress flags and dialog options to produce complex branching narratives.",
        "Move the camera, animate characters, and fade to black to produce high quality cut scenes."
      ],
      "course_content": {
        "Introduction": [
          "Dialog Box",
          "Monologue",
          "Event Manager",
          "Interact",
          "Choice",
          "Flags",
          "Camera",
          "Animation",
          "Direction",
          "Modularity"
        ]
      },
      "requirements": [
        "Students should have completed \"Game Development Essentials in Godot.\"",
        "Or have a Godot project ready with a playable character and NPCs or objects to interact with."
      ],
      "description": "Welcome to my course on Dialogue and Event Systems in Godot!\nThis course is a continuation of Game Development Essentials in Godot, but can be followed and applied to any project that involves a character that the player can control to interact with NPCs or objects by pressing a button and displaying dialogue.  You're welcome to join our discord server to work on this course alongside your peers.  In this course, we will cover the creation of dialog boxes, events & interactions, then tie them together with progress flags, camera controls, and character animations.\n\n\nWhen you're done, you'll have a comprehensive dialogue and event system for your game that can be used to produce high quality cutscenes and complex branching narratives that react to player's choices and allow them to progress through the game.  You'll also learn useful skills for working with the Godot game engine; organizing and designing your projects to be more scalable.  You will be learning how to code with GD script, with everything explained in detail.  We will apply object oriented design principles in our scripts; Inheritance, Encapsulation, and Abstraction, alongside other software engineering design patterns like the Singleton and Composite Pattern, to keep them organized, customizable, and reusable for a project of any size.\n\n\nAll of the project files are also available on GitHub if you need to review the project as it was after completing each lesson.  These videos were recorded using Godot version 4.2.2.  The project starts with assets from KayKit's Character & Dungeon Remastered Packs made by Kay Lousberg, and Basic GUI Bundle made by Penzilla.  All are available to download for free on itch.",
      "target_audience": [
        "First time game developers, or anyone switching over to the Godot engine from other engines.",
        "Experienced 2D game developers who are interested in learning about 3D.",
        "Anyone who has completed beginner tutorials but would like to learn real game infrastructure that is scalable."
      ]
    },
    {
      "title": "Learn to Create Games in Your Phone Using Godot 4 (No PC)",
      "url": "https://www.udemy.com/course/learn-to-create-games-in-your-phone-using-godot-4-no-pc/",
      "bio": "Create Games Godot 4—Master Game Development. All on Your Phone!",
      "objectives": [
        "Create a complete games in the phone",
        "Understand Godot 4 fundamentals",
        "Gain the knowledge to start creating your own projects",
        "Create two 2D games and one 3D game"
      ],
      "course_content": {},
      "requirements": [
        "Android device powerful enough to run Godot"
      ],
      "description": "Ever thought about making your own games but don’t have a PC? No problem! With this course, you’ll learn how to create amazing games entirely on your phone using Godot 4. That’s right—no computer needed, just you, your phone, and a bit of creativity.\nWe’ll start from the absolute basics, so even if you’ve never touched game development before, you’re in the right place. By the end of this course, you’ll have created three awesome game prototypes that’ll teach you the foundations of game design and development in Godot. These prototypes are the perfect launchpad to start creating your own games and bring your wildest ideas to life.\nYou’ll discover how to:\nSet up Godot on your phone.\nMaster the essentials of GDScript (Godot’s coding language).\nBuild cool game mechanics step by step.\nDesign levels, add animations, and create fun interactions.\nThis course is super beginner-friendly and designed to make learning game development fun and accessible, no matter where you are. Whether you’re chilling on the couch or waiting for the bus, you can dive into the world of game creation.\nStop waiting for the “perfect setup” and start making games today—right from your phone!\nSee you there, my friend :)",
      "target_audience": [
        "Game Developer",
        "Godot Developer"
      ]
    },
    {
      "title": "Unreal Engine 5: Build Interaction Systems(RPGs, Souls-like)",
      "url": "https://www.udemy.com/course/unreal-engine-5-build-interaction-systemsrpgs-souls-like/",
      "bio": "Build an Steam-Ready Interaction System with Blueprints and C++ — Create Interactable actors,, UI Prompts, and more",
      "objectives": [
        "How to build a reusable and Steam-Ready interaction system in Unreal Engine 5",
        "How to use Blueprints and C++ together effectively",
        "Master interfaces for clean communication between actors",
        "Creating interactable objects like doors, chests, levers, and NPCs",
        "Handling input actions and mapping them to player interactions",
        "Implementing interaction prompts with UI text, icons, and highlighting",
        "Best practices for structuring code and Blueprints to stay organized"
      ],
      "course_content": {
        "Introduction": [
          "Welcome to the Course",
          "What You’ll Learn & How We’ll Work",
          "Course Book"
        ],
        "Project Setup": [
          "Install Unreal Engine 5",
          "Jet Brains Rider",
          "Unreal Engine Project Setup",
          "UPDATE: Unreal Engine 5.6",
          "A Review Programming Fundamentals",
          "Section Quiz - Programming Fundamentals"
        ],
        "What Are Interactions and our Design": [
          "Interaction System Introduction",
          "What are Interactions?",
          "Interaction System Requirements",
          "Traces and Colliders",
          "The Value of Interfaces",
          "Interaction System Design",
          "Section Quiz - Interactions, Colliders, and The Design"
        ],
        "Building the Interaction System": [
          "Base Interactable Actors (Blueprint)",
          "Creating our Interaction Interface",
          "Input Action Mapping",
          "Adding a Interaction Prompt Collider",
          "Interaction Distance Function",
          "Interaction Prompt UI Widget",
          "Updating the Interaction Interface",
          "Section Quiz - Interfaces, Widgets, Input Actions and more!"
        ],
        "Building the Interaction System Part 2": [
          "Updating the Player Character",
          "Hiding the Interaction Prompt",
          "Optimizing",
          "Interactable Actor Hints",
          "Reviewing our Design and Finalizing",
          "Section Quiz - Hiding Prompts, Hints, and More"
        ],
        "Playable Milestone and Course Complete": [
          "Playable Milestone - Using our Interaction System",
          "Practice Test - Understanding Interaction Systems",
          "Course Complete!"
        ]
      },
      "requirements": [
        "A basic understanding of Unreal Engine 5 (navigating the editor, creating Blueprints)",
        "Some familiarity with Blueprint scripting (variables, functions, events)",
        "No prior C++ knowledge required but being open to learning a little will help",
        "Enthusiasm to learn and build your own game systems"
      ],
      "description": "Master one of the most essential systems in modern game development — the Interaction System. Whether you’re building an RPG, a Souls-like, or any game where players interact with objects in the world, this course will give you the skills to design and implement a professional, expandable interaction system in Unreal Engine 5.\nIn this step-by-step course, you’ll learn how to:\nProgramming Fundamentals with Blueprints, C++, and Unreal Engine with a e-book that is included with the course\nDesign and define interaction system requirements to understand the why and how we want to build such a system for our games\nDesign and build an interface with an Interact function that makes your interaction system modular and reusable across multiple objects\nCreate a base blueprint interactable actor to use as the foundation for all future interactable objects in your game\nSet up input actions and mappings so your player can seamlessly trigger interactions in a flexible, scalable way\nDesign a custom widget with text and images that acts as a dynamic interaction prompt for the player\nImplement distance-based logic to determine which object is closest and should display its prompt\nAdd an optional larger collider for interactable hints, guiding players toward important objects in your game world\n\n\nBy the end of the course, you’ll have built a fully functional, commercial-ready interaction system. This interaction system you can drop into RPGs, action-adventure games, survival games, or any project where players interact with the environment.\nThis course is designed for Unreal Engine beginners to intermediate developers, with a focus on both Blueprints and C++  to show you how professional developers combine both for maximum power.\nIf you’ve ever wanted to build gameplay that feels polished, responsive, and player-friendly, this course is for you.",
      "target_audience": [
        "Anyone who want to create interaction systems for RPGs, Souls-likes, or other genres",
        "Beginners who have learned Unreal Engine basics and want to take the next step into system design",
        "Intermediate developers looking to bridge Blueprints and C++",
        "Anyone who wants to design reusable, expandable systems instead of quick hacks"
      ]
    },
    {
      "title": "Advance Turn Base RPG game with Unity 6 &C#",
      "url": "https://www.udemy.com/course/advance-turn-base-rpg-game-with-unity-6-c/",
      "bio": "Advance Turn Base RPG game with Unity 6 &C#",
      "objectives": [
        "Build a fully functional 2D turn-based RPG game using Unity and C#",
        "Implement classic RPG systems: turn-based combat, inventory, leveling, and quests",
        "Design player stats, enemy stats, experience, leveling, and damage formulas",
        "Design a battle system with enemies, skills, and turn order logic",
        "Save and load player data using Unity’s data persistence techniques",
        "Polish your game with UI, audio, and visual feedback",
        "Gain hands-on experience building an RPG project from start to finish",
        "Understand Unity best practices and clean C# coding structure"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "New project and Game Asset"
        ],
        "Player Team Management": [
          "Add and Remove Player",
          "Recruitable NPC",
          "Save and Load Team members"
        ],
        "Battlefield set up": [
          "Load To Battle Scene",
          "Instantiate players in battlefield",
          "Instantiate Enemies in Battlefield",
          "review of battle start",
          "Dictionary key for player and enemy team",
          "Character Set up",
          "Battle UI Part 1",
          "Battle UI Part 2",
          "Hover Controller",
          "Team player UI Setup",
          "Fade in and Fade Out to Scene battle",
          "Spell Script",
          "Spell Panel Manager",
          "character functions",
          "Enemy Setup",
          "Enemy Script",
          "Floating Damage Text",
          "Fixing problems",
          "Debuging",
          "Battle Controller Script Explanation"
        ],
        "Level Up and save new stats": [
          "Level Up System and save new stats"
        ],
        "Team Formation": [
          "Team Formation UI",
          "Team Formation Script",
          "Team Formation Reserve Team"
        ],
        "Shaking the camera": [
          "Camera Shake"
        ],
        "Player Movement": [
          "Player 4 direction Animations with Blend tree",
          "Player Movement script"
        ],
        "Dialog": [
          "Dialog UI",
          "Dialog Controller Script",
          "Dialog Trigger",
          "Dialog with NPC to join team",
          "NPC will not be able to join for second time"
        ],
        "Inventory": [
          "Inventory UI Part 1",
          "Inventory UI Part 2",
          "Item Data (Scriptable Object)",
          "Inventory Variables",
          "Inventory Member Stats",
          "Add item to the inventory",
          "Equip and unequip and use items",
          "Sorting Inventory items",
          "Saving the inventory",
          "Saving inventory item Part 2",
          "Saving equipment item for characters",
          "49) saving stats when character enter battles",
          "Showing win reward on win panel"
        ],
        "Crafting": [
          "Crafting UI",
          "Crafting Script",
          "active Crafting with interacting with an Object"
        ]
      },
      "requirements": [
        "A computer (Windows or Mac) with Unity installed (free version is fine)",
        "A passion for games and willingness to learn!"
      ],
      "description": "Want to build your own RPG like Final Fantasy, Pokemon, or Octopath Traveler?\nIn this hands-on course, you’ll create a complete 2D turn-based RPG in Unity from scratch — no prior coding or game development experience required!\nThis project-based course is ideal for beginners and intermediate developers who want to dive into game development using real mechanics found in commercial RPGs.\nYou’ll learn step-by-step how to create classic RPG systems including:\nTurn-based battle system with player and enemy actions\nHealth, mana, attack/defense stats, and leveling\nItem system and inventory UI\nWorld navigation in map and talk to NPCs\nDialogue system with quest triggers and choices\nSave/load functionality for player progress\nBuild a fully functional 2D turn-based RPG game in Unity using C#\nCreate turn-based combat systems with enemy AI and skill selection\nDesign player stats, enemy stats, experience, leveling, and damage formulas\nSet up inventory systems, items pick up, and equipment\nAnimate characters, attacks, and spell effects\nImplement save/load systems for player progress\nUnderstand Unity best practices and clean C# coding structure\nGain real-world experience developing a complete game project\nThroughout the course, we’ll write clean, scalable C# code, and you’ll gain real-world game dev skills in Unity’s ecosystem.\nBy the end, you’ll have your own complete RPG game, plus the tools to build your own custom adventures!",
      "target_audience": [
        "Aspiring game developers and hobbyists",
        "Unity beginners who want to learn through building a real project",
        "Indie developers looking to implement turn-based RPG systems",
        "Fans of classic JRPGs who want to create their own",
        "Anyone curious about game development and C# programming"
      ]
    },
    {
      "title": "Create a First Person Shooter in Godot 4 - Ultimate Course",
      "url": "https://www.udemy.com/course/create-a-first-person-shooter-in-godot-4-ultimate-course/",
      "bio": "Finish the base of a fully functional fps with enemy AI and map building in godot, coding and level design",
      "objectives": [
        "Understand 3D world environments and master lighting techniques within the Godot game development engine",
        "Use of addons to create 3d maps, ins and outs and overcome most common problems",
        "Understand and create a full state machine for a first person controller",
        "Create and animate a weapon manager for guns, rocketlauncher and machinegun",
        "Learn to create Hitscan and projectile weapons",
        "Develop the foundational elements for a future first-person shooter game, providing the groundwork for expanding it into a fully marketable Steam game",
        "Learn to import mixamo animations into blender and then godot",
        "How to use pathfinding in Godot",
        "Create an AI enemy that walks around, detects and attack the player with launch projectile weapons",
        "Implement a basic GUI in Godot"
      ],
      "course_content": {
        "Introduction to 3D Lightning and GDscript": [
          "Introduction to 3D Lightning and GDscript",
          "Modifying Meshes, adding a directional light",
          "SDFGI and world environment, SSAO, SSIL",
          "Voxel GI and SSR",
          "GDScript Introduction, Day Night Cycle",
          "Making a Sphere Player to move around our scene"
        ],
        "Creating and designing maps with addons in Godot 4": [
          "Installing Cyclops level builder in Godot and any addons",
          "How to use Cyclops level builder to create blocky levels",
          "Applying materials and modeling tools",
          "John Romero's 8 Design rules for making maps"
        ],
        "First person controller with a Finite State Machine": [
          "FinishedSection first person controller",
          "Level Materials and Player Scene",
          "Camera Movement on Player",
          "State Machine implementation for player movement",
          "State and PlayerStates",
          "Idle State",
          "Walk, Jump, InAir States",
          "Crouch and Run States",
          "Jumping and sounding",
          "Be careful with this bug when jumping on ALL games"
        ],
        "First person shooter weapon manager scene": [
          "Importing 3d models to godot",
          "A fast way to fix weapon colliding with walls",
          "Weapon Animations",
          "Weapon as Resources",
          "Weapon list",
          "Activating and looping through equipped weapons",
          "Updating HUD through signals",
          "Shooting anim",
          "Camera collision",
          "Bulletpoint and hitscan shooting",
          "Bullet shot png image",
          "Reload and Autoshooting",
          "Shooting Boxes and targets as rigid bodies",
          "Moving Targets without physics, only static body",
          "Projectile Shooting",
          "Layers and Masks and understanding them",
          "One weapon pickup to rule them all",
          "Pickup and equip weapons",
          "Ammo Added when colliding with a weapon",
          "Dropping weapons and adding ammo"
        ],
        "Enemies implementation and navigation server": [
          "Welcome to the new example enemy section",
          "Using Blender and Mixamo to get enemies for our games",
          "Nav region nodes and enemy scene",
          "Setgets in Gdscript",
          "Navigation Agent implementation",
          "Enemy projectiles and attack state",
          "An enemy attacking us with projectiles",
          "Kill enemies and player"
        ]
      },
      "requirements": [
        "No experience needed since most stuff is beginner friendly but if you have used godot before that would be great!"
      ],
      "description": "Dive into the world of game development with our Udemy course, where we bring the classic first-person shooter experience to life using the powerful Godot engine!\nLearn to create the fundamental elements for a FPS game, laying the groundwork for expansion into a fully sellable Steam title. Gain a comprehensive understanding of 3D world environments and lighting techniques in Godot, enabling you to sculpt immersive game spaces.\nUnlock the secrets of successful level design as we explore the use of addons to craft intricate 3D maps, guiding you through the ins and outs of the process.\nOvercome common challenges encountered during mapping with insider tips and tricks, ensuring a seamless and polished gaming experience.\nDelve further into the course and discover how to implement state machines for fluid gameplay, integrate character navigation AI for realistic movement, and design enemies that not only attack the player but are also attackable by the player with a fully customizable state machine for both the enemies with navigation implemented and the player.\nWhether you're a novice or seasoned developer, this course offers hands-on projects, valuable insights, and the skills needed to bring your FPS game vision to fruition. Enroll now and embark on a thrilling journey to create your own classic-inspired first-person shooter in Godot!",
      "target_audience": [
        "If you want to develop a first person shooter game or first person game and release it into a fully marketable videogame"
      ]
    },
    {
      "title": "Learn C# Coding with Unity (for Virtual Reality projects)",
      "url": "https://www.udemy.com/course/learn-c-coding-with-unity-for-virtual-reality-projects/",
      "bio": "Take your first steps towards becoming a VR developer, prototyper or designer!",
      "objectives": [
        "Learn the fundamentals C# and core features of Unity for Virtual Reality Programming",
        "Learn the basics of constructing logic in C#",
        "Improve your logic with methods, parameters, containers & Loops",
        "Get an overview over Object-oriented Programming Concepts",
        "Use Advanced types such as delegates, coroutines, and lambda expressions",
        "Solve a fun C# programming challenge!",
        "Other topics: Variables and Primitive Data Types, Actions and Delegates, Funcs, Exposing Fields and Randomization, Strings, Conditional and Logical Operators,",
        "Topics: Parameters, Parameter Modifiers and Return Statements, Coroutines, Lambda Expressions and Events, Arrays, Structs, Interfaces, Lists and Loops,"
      ],
      "course_content": {
        "Week 1": [
          "First Chapter",
          "Chapter 1 - Guide",
          "Introduction to Unity and C#",
          "Variables and Primitive Data Types",
          "Exposing Fields and Randomization",
          "Working with Strings",
          "Conditional and Logical Operators",
          "Finalizing Question and Answer Generation",
          "Chapter 1 - Assignment"
        ],
        "Week 2": [
          "Chapter 2 - Guide",
          "Using Methods",
          "Parameters, Parameter Modifiers and Return Statements",
          "Arrays. Lists and Loops",
          "ForEach Loops and GetComponent",
          "Finishing the Monster Queue",
          "Chapter 2 - Assignment"
        ],
        "Week 3": [
          "Chapter 3 - Guide",
          "Monster Types using Inheritance",
          "Interfaces",
          "Structs",
          "Implementing Question Types",
          "Null & Nullable Types",
          "Week 3 Assignment"
        ],
        "Chapter 4": [
          "Chapter 4 - Guide",
          "Try catch",
          "Coroutines",
          "Actions and Delegates",
          "Lambda Expressions and Events",
          "Funcs",
          "Unity Events",
          "Week 4 Assignment"
        ]
      },
      "requirements": [
        "You dont need any prerequisites to enroll to this course.",
        "This course is perfectly structured to get you started and learn the basics of C# coding!"
      ],
      "description": "Learn C# Coding with Unity (for VR projects)\n\n\nWe’re on the verge of a new industry. The metaverse is all around us! However, VR and AR developers cannot rely on drag and drop tools yet – and need to hardcode their applications to join the metaverse. As this is mostly uncovered territory, if you want to become a metaverse creator, you will need to showcase your curiosity, your willingness to deep-dive into coding problems, and your determination to stand up again after 100 failures.\nAre you sure you want to become a Virtual reality prototyper? Sometimes it feels like a big risk to make a career change into programming. Learn C# programming, and find out if you enjoy coding.\n\n\nThis course has been designed to make you find out if you want to continue this path.\nDo you enjoy learning to code? Trying, failing, trying, failing (100x times), & succeeding?\nDo you enjoy engaging proactively with a community of like-minded people?\nDo you enjoy challenging yourself with new concepts, tools, and methodologies?\nNot everyone will shout yes to the above questions. Everyone has different strengths. This path may not be for everyone. Learning how to develop virtual reality games and applications means that you need to be open to learning in an environment that is heavily coding-based. Low-code tools are not preparing for your next XR project or job role and VR/AR designers become more valuable whenever they learn how to prototype.\n\n\nWhy is this course special?\nYou will get access to our Proprietary XR Knowledgebase!\nBased on all our students' questions and previous lectures, we are continuously adding content to our XR knowledge base. With our proprietary tagging system, you will easily find answers to the most common questions around course content and XR project implementation. You will also get continuous access to all the recordings of the classes, in case you need to refresh your knowledge on topics treated in class\n\n\nYou will get an Invite to join the XR Creators Discord community!\nThe XR Creators Community is a community of over 3000 developers helping each other with their industry, tech, or VR/AR development questions. Join the server, there's a dedicated channel just for questions and answers related to this course. This way, we make sure that you're successful and can successfully finish this course.\n\n\nAssignments and prepared asset downloads to get you started!\nJust watching videos won't get you anywhere. We prepared easy, medium, and difficult assignments to challenge you and get you to apply your learnings to fun and real-life projects. If you need feedback, feel free to share your assignment submissions in the XR Creators discord community :)",
      "target_audience": [
        "Anyone who is interested in learning C# with Unity to explore if they enjoy coding for Virtual and Augmented Reality."
      ]
    },
    {
      "title": "ROBLOX Studio 2025: Learn the scripting basics!",
      "url": "https://www.udemy.com/course/roblox-studio-learn-the-scripting-basics/",
      "bio": "Start your journey in Roblox scripting to create anything you imagine!",
      "objectives": [],
      "course_content": {
        "Introduction": [
          "Welcome to the course!",
          "A quick note",
          "Downloading Roblox Studio",
          "Studio Basics",
          "Writing your first script!"
        ],
        "Luau Basics": [
          "What is a variable?",
          "Different Lua data types",
          "What is an if statement?",
          "What is a function?",
          "What is a loop?",
          "Events"
        ],
        "Creating an Obby": [
          "Setting up the map",
          "Scripting the checkpoints",
          "Scripting the kill bricks",
          "Scripting the conveyors",
          "Scripting the trampolines",
          "Telling a player they've won"
        ],
        "Thank you!": [
          "Bonus: Thank you & what's next?"
        ]
      },
      "requirements": [
        "No prior programming experience required!",
        "PC & Internet connection"
      ],
      "description": "Thank you for viewing this course!\nThis course will highlight the many important tools in Roblox Studio you'll need to know to start your journey as a Roblox developer!\nThis course is for total beginners, and no prior experience in programming is required! The course is free for you to start your scripting journey.\nYou will learn the basics of Roblox Studio, and how to navigate the different tabs & panels, and then we get started scripting! You'll get to learn about Lua, a functional scripting language where you'll learn about variables, if statements, loops, and functions! And then we take this newly learned information and apply it directly to creating scripts in Studio!\nRoblox game development can be highly rewarding, as over $500 MILLION dollars (USD) have been paid out to creators and developers in 2021. Who knows, maybe YOU can be the creator of the next biggest game on Roblox!\nAll source code will be made available so it's very easy for you to look back at anything you didn't understand the first time. Get started on your scripting journey and start to create whatever you imagine in Roblox Studio.\nI'm excited to work with you in the course!",
      "target_audience": [
        "Anybody who wants to learn how to script",
        "Anybody who is new to programming",
        "Anybody ready to learn game creation on Roblox"
      ]
    },
    {
      "title": "\"Guess Who\" Unity Game Development: Create Your Own Fun Game",
      "url": "https://www.udemy.com/course/guess-who-game-development-create-your-own-fun-game/",
      "bio": "Learn to code your own \"Guess Who\" game step by step in Unity - perfect for beginners & aspiring game developers!",
      "objectives": [
        "How to code a \"Guess Who\"-style game from scratch",
        "Implement questioning and elimination mechanics in code",
        "Create an interactive and visually appealing UI",
        "Customize characters, rules, and expand the game"
      ],
      "course_content": {
        "Introduction": [
          "#1 - Guess Who - Introduction",
          "#2 - Guess Who - Conzept",
          "#3 - Guess Who - Unity Overview",
          "#4 - Guess Who - Importing Assets"
        ],
        "Game Layout": [
          "#5 - Guess Who - Base Layout",
          "#6 - Guess Who - Grid Layout",
          "#7 - Guess Who - Right Layout"
        ],
        "Setting Up Characters": [
          "#8 - Guess Who - Cell Design",
          "#9 - Guess Who - Character Container",
          "#10 - Guess Who - Female Characters+",
          "#11 - Guess Who - Male Characters"
        ],
        "Character Cells": [
          "#12 - Guess Who - Fill Grid",
          "#13 - Guess Who - Setting Cell",
          "#14 - Guess Who - Showing Data",
          "#15 - Guess Who - Game Flow",
          "#16 - Guess Who - Character Marks",
          "#17 - Guess Who - Prepare Game States"
        ],
        "Character Select Phase": [
          "#18 - Guess Who - Character Select Phase",
          "#19 - Guess Who - Character Select PopUp",
          "#20 - Guess Who - Show Selection PopUp",
          "#21 - Guess Who - Go To Next Phase"
        ],
        "Question Management": [
          "#22 - Guess Who - Question Box",
          "#23 - Guess Who - QuestionManager",
          "#24 - Guess Who - Progress Question",
          "#25 - Guess Who - Filtering Characters",
          "#26 - Guess Who - Testing and Fixing",
          "#27 - Guess Who - More Questions"
        ],
        "AI Grid and Turns": [
          "#28 - Guess Who - AI Thinking Time",
          "#29 - Guess Who - AI Grid",
          "#30 - Guess Who - AI Best Question",
          "#31 - Guess Who - AI's First Question",
          "#32 - Guess Who - Player Answer",
          "#33 - Guess Who - Cross Out AI Cells",
          "#34 - Guess Who - Full Game Cycle"
        ],
        "Player Guess and Auto Marking Toggle": [
          "#35 - Guess Who - Guess & Mark Toggle",
          "#36 - Guess Who - Manual Marking",
          "#37 - Guess Who - Test Manual Marking",
          "#38 - Guess Who - Guess Pop Up",
          "#39 - Guess Who - Making a Guess"
        ],
        "Game Over & Menu Scene": [
          "#40 - Guess Who - Show Hide AI Image",
          "#41 - Guess Who - Game Over PopUp",
          "#42 - Guess Who - Testing Game Over",
          "#43 - Guess Who - Main Menu"
        ],
        "WebGL Build and Itch Upload": [
          "#44 - Guess Who - Web GL Build",
          "#45 - Guess Who - Upload to Itch"
        ]
      },
      "requirements": [
        "No prior coding experience required—beginners welcome!",
        "A computer (Windows/Mac) with internet access",
        "Basic knowledge of gaming concepts is helpful but not necessary",
        "A desire to create and experiment with game development"
      ],
      "description": "Do you love classic board games like \"Guess Who\"? Have you ever wanted to create your own interactive version? In this course, you'll learn how to develop and implement your own \"Guess Who\"-style game from scratch!\nThis course is designed for both beginners and intermediate developers who want to build an engaging guessing game using programming and game design principles. Whether you’re a hobbyist, an aspiring game developer, or a teacher looking to create educational games, this course will guide you step by step.\nWhat You'll Learn:\nGame Concept & Design: Understanding the mechanics of \"Guess Who\" and how to structure a similar game.\nProgramming Fundamentals: Learn to code essential features, such as character selection, questioning logic, and win conditions.\nUser Interface & Experience: Create an intuitive and engaging game design for a seamless user experience.\nCustomization & Expansion: Modify the game’s rules, add new features, and create unique character sets.\nCourse Highlights:\nNo prior coding experience required – step-by-step explanations.\nLearn the logic and structure behind guessing games.\nHands-on coding exercises to build your project.\nCourse material is for educational purposes only – no final scripts included.\nBy the end of this course, you'll have your own playable \"Guess Who\"-style game and the knowledge to modify or expand it further.\n\n\nJoin now and start building your game today!",
      "target_audience": [
        "Aspiring game developers who want to create fun projects",
        "Designers interested in game UI and interactivity",
        "Educators & students looking for a coding challenge",
        "Anyone who loves board games and wants to digitize them"
      ]
    },
    {
      "title": "VR in Unity: A Beginner's Guide",
      "url": "https://www.udemy.com/course/vr-in-unity-a-beginners-guide/",
      "bio": "Go from \"I've no idea what I'm doing\" to \"I've very little idea what I'm doing\", for FREE.",
      "objectives": [],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Intro Quiz",
          "(optional) Cornhole Downloads"
        ],
        "Your First VR Scene": [
          "1. Setup",
          "2. Add a plane, cube, sphere, and Teleport functionality",
          "3. Pick up and throw objects",
          "Bonus: Sketchup: Creating/acquiring 3D models, exporting to Unity",
          "Setting up the Cornhole scene",
          "Scaling the Play Area and Testing (no code)"
        ]
      },
      "requirements": [
        "Unity - Beginner Skill Set: You should at least be familiar with the interface, including using panels like Hierarchy, Inspector, Project, Console, Scene, and Game. To familiarize, try Googling \"Unity Roll-a-ball\" and following that beginner project, even if you don't understand the scripting.",
        "VR setup like the HTC Vive (Optional, but this course uses the Vive for examples)"
      ],
      "description": "Make CORN HOLE in VR!\nIntended for absolute beginners, this is a guerrilla-style approach to getting a VR app up and running quickly, with very little peripheral teaching of WHY were doing any of it. Sections 1 + 2 don't involve any actual coding, and get you started quickly. Coding takes place in the (in development...my students co-producing with me left for summer break! The nerve!) section 3 and beyond.\n\nI teach a high school \"Intro to Programming\" class, and I'm making this to help them, and maybe others at the same time. This is all recorded in my classroom, March, April, May of 2018.\nI planned to resume adding to this course in Sept 2018 and Spring 2019 with more Graphical User Interface (GUI) development and some beginner level coding, but have shifted effort into making a more polished version of this course for Unity itself. It will also be free, and published on the Unity site around May 2019.\nYou should dabble in Unity beforehand, maybe try the \"Roll-a-Ball\" tutorial on Unity's website just to familiarize yourself with the Unity interface.\nI will be using Unity software, version 2017.3.",
      "target_audience": [
        "Those that have dabbled/struggled/cried with Unity and are curious about virtual reality."
      ]
    },
    {
      "title": "Unreal Engine 5 Full Beginners Course (Game Development)",
      "url": "https://www.udemy.com/course/unreal-engine-5-full-beginners-course-game-development/",
      "bio": "Master Unreal Engine 5: Build 2 Open-World Games with Weapon Systems, Enemy AI, and a Dynamic Game Environment!",
      "objectives": [
        "Master the UI, navigation, object manipulation, and essential tools from scratch",
        "Create a playable character with smooth animations for running, jumping, and crouching",
        "Implement intelligent enemies that chase and attack the player",
        "Build a detailed game world with beautiful landscapes, and realistic HDRI lighting"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Introduction to Unreal Engine 5": [
          "Installing Unreal and Creating a Project",
          "Basics of UI in Unreal Engine 5",
          "Importing Models in Unreal Engine 5",
          "Basics of Lighting and Post Processing",
          "Basics of Materials",
          "Basics of Blueprints"
        ],
        "Making the Forest FPS Project": [
          "Overview of the Project",
          "Adding the Pistol Mesh",
          "Adding the Character Mesh",
          "Building the Forest Environment Pt.1",
          "Building the Forest Environment Pt.2",
          "Adding Targets, Setting up the Score and Ammo System",
          "Adding Minor Improvements",
          "Sound Design"
        ],
        "Making the Sci-Fi Third Person Shooter Project": [
          "Note Before Starting this Project",
          "Overview of the Project",
          "Setting Up the Project and Loading the Environment",
          "Setting Up Characters in UE5",
          "Adding the Gun and Animations",
          "Working on the Weapon Firing Logic",
          "Working on the AI Enemy Logic",
          "Making a Health System for the Player",
          "Working on Combat and Enemy Health System",
          "Creating the Timer System",
          "Making the HUD Look Nicer",
          "Working on Win & Lose Logic",
          "Adding the City Environment and Setting up the Level",
          "Making the Camera Zoom Effect While Aiming",
          "Generating Character Dialogues with AI",
          "Working on Sound Design, Camera Shake and Final Checkpoint",
          "Animating the Cutscenes",
          "Editing and Playing the Cutscene",
          "Adding Minimap"
        ]
      },
      "requirements": [
        "No Prior Experience with Unreal Engine 5 is Required.",
        "Some Experience with Blender 3D may be Helpful."
      ],
      "description": "Master Unreal Engine 5: Build 2 Open-World Games with Weapon Systems, Enemy AI, and a Dynamic Game Environment!\nUnreal Engine 5 is one of the most powerful game engines today, but learning it can feel overwhelming—especially for beginners. That’s why I designed this course to help absolute beginners build 2 hyper-realistic open-world games from scratch! No prior experience with Unreal Engine is needed—anyone can follow along and start creating their own game.\nThis is a project-based course, and we’ll cover everything you need to create an immersive gameplay experience. In this course, we will:\n\n\nLearn Unreal Engine 5 from scratch—understand the UI, navigate the editor, and set up a project.\nLearn the Basics of Lighting, Materials, and Blueprints.\nCreate a First Person and a Third Person Shooter Game.\nImplement a playable character with fluid parkour movements.\nImplement a dynamic enemy AI system—enemies will chase and attack the player in real time.\nBuild an open-world environment, complete with detailed and realistic landscapes.\nCreate a timer system to add tension and challenge to the game.\nDevelop a functional health system where the player takes damage from the enemies.\nOptimize lighting and post-processing for a cinematic, high-quality look.\n\n\nThis course is designed for absolute beginners, so even if you’ve never opened Unreal Engine before, you’ll be able to follow along. The best part? You’ll get to experience the real development process—solving problems and making creative decisions just like a professional game developer!\nSo what are you waiting for? Start today and bring your dream game to life!",
      "target_audience": [
        "Aspiring Game Developers, Indie Creators, and Anyone who wants to build Games in Unreal Engine 5."
      ]
    },
    {
      "title": "WeMade 2048 with Unity & C#",
      "url": "https://www.udemy.com/course/wemade-2048/",
      "bio": "Create 2048 from scratch",
      "objectives": [
        "Use Unity to efficiently create games",
        "Use LayoutGroups to easily create and place UI",
        "Use Animations and Animation Curves to improve your game feel, and adjust them while your game is running",
        "Capture player input from multiple sources",
        "Use PlayerPrefs to persist game data",
        "Export your Unity game to Android/iOS/Web/Mac/Windows/Linux"
      ],
      "course_content": {
        "Introduction": [
          "Software Setup"
        ],
        "Core Game": [
          "Project Creation",
          "Board Layout",
          "Tile System",
          "Moving Tiles",
          "Animating Tiles",
          "Spawning Tiles",
          "Merging Tiles"
        ],
        "Extra Features": [
          "New Game",
          "Undo",
          "Score",
          "Best Score",
          "Move Counter",
          "Game Timer",
          "Tile Colors",
          "Project Organization",
          "Game Over",
          "Swipe Controls"
        ],
        "Exporting": [
          "Exporting Web",
          "Exporting Android",
          "Exporting iOS",
          "Exporting Application"
        ],
        "Summary": [
          "Summary"
        ]
      },
      "requirements": [
        "Basic programming knowledge",
        "No Unity experience required"
      ],
      "description": "Welcome!\nIf you have ever wanted to create your own game but have felt like it was too intimidating, then this course is for you!\nIn this course we will be recreating the popular game 2048 from scratch in Unity. I will be walking you through every line of code we write as well as every action we take in Unity. By recreating this game from scratch, we will be learning what it takes to make a game.\nWe will start off with the basics, creating the groundwork for the game. Then we will add features and polish one-by-one until we have the finished game and a better understanding of how the game works.\nBelow are just a few of the things we will be covering in this course:\n\nScriptable Objects - to extract shared configuration from the scene into the project.\nCoroutines - to run code in parallel\nUnityEvents - to decouple code from UI\nLayoutGroups - to easily create and place UI elements\nAnimations & Animation Curves - to add some polish and make your game look good\nBy the end we will have a fully functional game that can be played on Android/iOS/Web/Windows/Mac/Linux and you should have a good understanding of Unity and what it provides to create your own games!",
      "target_audience": [
        "Beginner-Intermediate game developers looking to get into Unity"
      ]
    },
    {
      "title": "Make an Angry Birds Clone in Unity: Complete 2D Puzzle Game!",
      "url": "https://www.udemy.com/course/completeunitypuzzlegame/",
      "bio": "Build a casual game from start to finish! Make art from scratch in Adobe™ Illustrator™. Code in C# and build a game now!",
      "objectives": [
        "Build an Angry Birds clone game in Unity®",
        "Create artwork in Illustrator.",
        "Code in C#.",
        "Integrate art into Unity®"
      ],
      "course_content": {
        "Introduction to the Course": [
          "Introduction to the Course"
        ],
        "Introduction to Illustrator": [
          "Illustrator Introduction",
          "New File and Navigation",
          "General Directions",
          "Pen Tool",
          "Line Segments",
          "Shape Tools",
          "Colour Filling",
          "Paintbrushes",
          "Pencil Tools",
          "Rotation and Reflection",
          "Scale Tools",
          "Width Tool",
          "Shape Builder Part 1",
          "Shape Builder Part 2",
          "Shape Builder Part 3",
          "Free Transform",
          "Perspective Tool",
          "Mesh Tool",
          "Gradient Tool",
          "Symbol Sprayer",
          "Graphing Tools",
          "Layers",
          "Illustrator Fun Part 1",
          "Illustrator Fun Part 2",
          "Illustrator Fun Part 3"
        ],
        "Creating the Art Assets (Illustrator Projects)": [
          "Drawing Angry Bird",
          "Painting Angry Bird",
          "Bird Shape Edit",
          "Making a Box",
          "Making Logs",
          "Making Slingshot",
          "Enemy Characters",
          "Exporting and Renaming Assets"
        ],
        "Introduction to Unity Section 1": [
          "Introduction",
          "Unity Editor",
          "Moving a Cube",
          "Materials",
          "Lights",
          "Particle System",
          "Applying Physics",
          "Asset Store"
        ],
        "Introduction to Unity Section 2 (Coding)": [
          "Introduction",
          "Variables",
          "Methods",
          "If Blocks",
          "Loops"
        ],
        "Introduction to Unity Section 3 (Inputs)": [
          "Introduction",
          "Key Presses",
          "Moving a Player",
          "Jumping",
          "Moving Forward",
          "Cycling Cameras"
        ],
        "Introduction to Unity Section 4 (Prefabs)": [
          "Introduction",
          "Introduction to Prefabs",
          "FAQ on Instantiating Objects",
          "Random Angles",
          "FAQ on Destroying Objects",
          "Explosion Effect",
          "Adding Explosion Effects"
        ],
        "Creating the Game (Unity Projects)": [
          "Project Setup",
          "Activating Physics",
          "Preparing to Launch",
          "Launching Logic",
          "Dragging Feedback",
          "Smoothing the Launch",
          "Enemy Characters",
          "Physics Materials",
          "Obstacles",
          "Prefabs",
          "Targets",
          "Dynamically Adding a Bird",
          "Events",
          "Interface",
          "Multiple Birds",
          "Win and Lose",
          "Scoring Logic",
          "Level Design",
          "Bird Airtime Adjustments",
          "Slingshot",
          "Sound Effects",
          "Challenge Time"
        ],
        "Resources": [
          "($2000 value!) Source Files",
          "Please leave us a rating!",
          "Bonus Lecture: Get 130 courses."
        ]
      },
      "requirements": [
        "Unity® 2017.1 (for game set-up and coding)",
        "Illustrator or a free program like Gimp (to make 2D art)",
        "This course was recorded on a Mac computer, but you can use a PC."
      ],
      "description": "This course was funded by a wildly successful Kickstarter.\nLet's make a casual puzzle game! Join Mammoth Interactive step-by-step in building a fully featured game from scratch. We show you how to make all the code and art for the game from scratch.\nDo you love Angry Birds? You can make your own game inspired by it!\nAfter purchasing this course, you'll be taken step-by-step through every process needed to do just that. Our two very talented instructors, Kevin Liao and Glauco Pires, explain everything from a basic, beginner level. That means, you don't have to have any prior coding or digital art experience to succeed here.\nGlauco Pires will take you through the process of coding a game in Unity® from scratch. Kevin Liao will teach you how to create all the artistic elements for the game. Kevin will teach this section of the course in Illustrator to make original 2D art.\nThe beauty of taking an online course like this is the ability to replay any of the lectures at any time. There is no time limit or final tests. You get to learn at your own pace with a practical model method of learning.\nThis course is project-based, so you will not be learning a bunch of useless coding practices. At the end of this course you will have real world apps to use in your portfolio. We feel that project based training content is the best way to get from A to B. Taking this course means that you learn practical, employable skills immediately.\nYou can use the projects you build in this course to add to your LinkedIn profile. Give your portfolio fuel to take your career to the next level.\nLearning how to code is a great way to jump in a new career or enhance your current career. Coding is the new math and learning how to code will propel you forward for any situation. Learn it today and get a head start for tomorrow. People who can master technology will rule the future.\nYou get full lifetime access to this course for a single one-time fee. Enroll today to join the Mammoth community!",
      "target_audience": [
        "Complete beginners. No prior coding or digital art skills necessary.",
        "People who want to make games."
      ]
    },
    {
      "title": "Learn to Code by Making an Air Hockey Game in Unity®!",
      "url": "https://www.udemy.com/course/learn-to-code-by-making-an-air-hockey-game-in-unity/",
      "bio": "Build an air hockey game to learn to code & make art in Blender. Ultimate guide for aspiring game developers!",
      "objectives": [
        "Build an air hockey game in Unity®.",
        "Learn the fundamentals of game design.",
        "Create artwork in Blender.",
        "Code in C#."
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Introduction to Blender": [
          "Intro and Setting Changes",
          "Camera Controls",
          "Emulated Numbpad Camera",
          "Basic Object Manipulation",
          "Frequently Used Tools",
          "Mirror Modifier"
        ],
        "Creating Art Assets (Blender Projects)": [
          "Air Hockey Paddle",
          "Air Hockey Puck",
          "Air Hockey Table",
          "Asset Exporting"
        ],
        "Introduction to Unity Section 1": [
          "Introduction",
          "Unity Editor",
          "Moving a Cube",
          "Materials",
          "Lights",
          "Particle system",
          "Applying Physics",
          "Asset Store"
        ],
        "Introduction to Unity Section 2 (Coding)": [
          "Introduction",
          "Variables",
          "Methods",
          "If Blocks",
          "Loops"
        ],
        "Introduction to Unity Section 3 (Inputs)": [
          "Introduction",
          "Key Presses",
          "Moving a Player",
          "Jumping",
          "Moving Forward",
          "Cycling Camera"
        ],
        "Introduction to Unity Section 4 (Prefabs)": [
          "Introduction",
          "Introduction to Prefabs",
          "FAQ on Instantiating Objects",
          "Random Angles",
          "FAQ on Destroying Objects",
          "Explosion Effect",
          "Adding Explosion Effects"
        ],
        "Creating the Game (Unity Projects)": [
          "Project Set Up",
          "Setting Up Physics",
          "Paddle Movement",
          "Game Bounds",
          "Bounciness",
          "Deceleration",
          "Collisions",
          "Scoring",
          "Player 2",
          "Interface",
          "Restarting the Game",
          "Sound Effects",
          "Challenge Time"
        ],
        "Resources": [
          "($1500 value!) Source Files",
          "Please leave us a rating!",
          "Bonus Lecture: Get 130 courses."
        ]
      },
      "requirements": [
        "Unity® 2017.1.0f3 (for game set-up and coding)",
        "Blender, a free program to make 3D models",
        "This course was recorded on a Mac computer, but you can use a PC."
      ],
      "description": "This course was funded by a wildly successful Kickstarter.\nLet's make an air hockey video game! Join Mammoth Interactive step-by-step in building a fully featured game from scratch. We show you how to make all the code and art for the game.\nAfter purchasing this course, you'll be taken step-by-step through every process needed to do just that. Our two very talented instructors, Kevin Liao and Glauco Pires, explain everything from a basic, beginner level. That means you don't need any prior coding or digital art experience to succeed here.\nGlauco Pires will take you through the process of coding a game in Unity® from scratch. Kevin Liao will teach you how to create all the artistic elements you will need to complete the game. Kevin will teach this section of the course in Blender to make original 3D art.\nThe beauty of taking an online course like this is the ability to replay any of the lectures at any time. There is no time limit or final tests. You get to learn at your own pace with a practical model method of learning.\nThis course is project-based, so you will not be learning a bunch of useless coding practices. We feel that project based training content is the best way to get from A to B. Taking this course means that you learn practical, employable skills immediately.\n\nYou can use the projects you build in this course to add to your LinkedIn profile. Give your portfolio fuel to take your career to the next level.\nLearning how to code is a great way to jump in a new career or enhance your current career. Coding is the new math and learning how to code will propel you forward for any situation. Learn it today and get a head start for tomorrow. People who can master technology will rule the future.\nYou get full lifetime access to this course for a single one-time fee. Enroll today to join the Mammoth community!",
      "target_audience": [
        "Complete beginners. No prior coding or digital art skills necessary.",
        "People who want to make games.",
        "Anyone who wants to learn Unity® or Blender.",
        "Anyone who wants to learn game development."
      ]
    },
    {
      "title": "Build a Modular Weapon Firing System in Unreal Engine 5",
      "url": "https://www.udemy.com/course/build-a-modular-weapon-firing-system-in-unreal-engine-5/",
      "bio": "Build a modular FPS weapon system in UE5 Blueprints: firing, reloading, animations, inventory",
      "objectives": [
        "You'll understand all of the essential systems and editors within the Engine itself",
        "Implement advanced player movement and Input",
        "Design and implement a modular weapon system in Unreal Engine 5 using Blueprints that supports multiple weapon types (e.g., pistols, rifles, shotguns).",
        "Integrate animations, effects, and sounds into your weapon systems to create a polished first-person shooter experience.",
        "Apply best practices for reusable Blueprint architecture to keep your FPS systems clean, scalable, and easy to maintain or expand.",
        "How to apply and integrate UI into all of your systems",
        "Reusable interaction system"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Download assets that we will be using during the course",
          "Importing and setting up the assets",
          "Setting up basic character, level lighting and project settings",
          "Player input and interaction system"
        ],
        "Weapon system": [
          "Weapon inventory structure",
          "Weapon equip/switch",
          "Firing system",
          "Break: UI overhall",
          "Improved firing system: Bullet penetration and damage",
          "Finishing firing system: Bullet magnetism",
          "Recoil",
          "Reload",
          "Polish: Animations + additional movement options - Aiming, crouching, sprinting"
        ],
        "Visuals/Polish": [
          "Basic animation system",
          "Animation system polish: Procedural animations",
          "VFX, Camera shake",
          "Final polish, shell ejections"
        ]
      },
      "requirements": [
        "Do you have a computer that can run Unreal Engine 4/5? Then at least technologically speaking you have everything that",
        "No prior programming experience needed but if you have at least a little bit of experience with Unreal Engine, that helps"
      ],
      "description": "This course will teach you how to create a fully modular weapon system for any type of game (but I will show it on a First person example) in Unreal Engine 5 using Blueprints—no coding required. You'll build systems for firing, reloading, and animation.\nWe'll cover everything from an advanced movement system, through particle effects, weapon template, recoil, bullet magnetism all the way to procedural animations for your arms and camera\nPerfect for indie developers, game design students, or Unreal Engine hobbyists. Inside you'll find a free 3D weapon pack which you can use in your own projects - commercial or personal.\nWhat exactly will I teach you to do in this course?\nBasic character\nModular movement system with switching character values based on his movement state (walking, sprinting, etc)\nInteraction system\nCrouching, sprinting\nWeapon\nWeapon template in which you can edit every aspect of the weapon\nWeapon inventory that is carried across levels\nRecoil\nBullet spread\nWeapon magnetism strength and range\nBullet penetration\nAmmunition and reloading system\nPickups\nAiming\nAnimations\nState machines\nBlend spaces\nAnimation transitions\nProcedural animations\nFX\nAll sorts of different effects and shaders for which I will provide everything that you would need that is not included in the base Unreal Engine (textures, meshes)\nBullet impacts on different kinds of surfaces\nBullet trail\nMuzzle flash\nShell eject - different for every type of ammunition\nBy the end, you’ll have a working FPS weapon system that you can expand, customize, and plug into your own games.",
      "target_audience": [
        "Whether you're a beginner or intermediate, this course will teach you something"
      ]
    },
    {
      "title": "Make Online Game - RPG Maker Mz",
      "url": "https://www.udemy.com/course/rpg-maker-online-game/",
      "bio": "Make Online Game - RPG Maker Mz",
      "objectives": [
        "Learn how to use MySql Connection Plugin.",
        "Learn how ot make online features for your offline game, like Login, Register, Ban, Create Account, Guild Fight, Mail or Gift, Vending etc...",
        "Learn how to use Mysql Queries and logics to make all of these features.",
        "Learn to make not only offline game with online features but also fully online game.",
        "Lear how to make logics for your game."
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Online Features",
          "Features"
        ],
        "Lectures": [
          "SETTING UP PROJECT & SERVER TIME",
          "ADDING MORE TBALES TO DB AND GAME VARIABLES",
          "MAKING LOGIN SYSTEM",
          "MAKING LOGOUT SYSTEM",
          "MAKING STUCK OUT SYSTEM AND AUTO LOG OUT SYSTEM FROM GAME",
          "CHANGE AND FORGOT PASSWORD SYSTEM AND CREDITS PAGE",
          "REGISTER NEW ACCOUNT OR CREATE ACCOUNT SYSTEM",
          "GIVING DOUBLE EXP AND ITEM DROP ON SUNDAY",
          "MAKING POSTMAN SYSTEM SEND ITEMS AS MAIL OR GIFT TO OTHER PLAYERS",
          "MAKING MAIL OR GIFT RECIEVE SYSTEM",
          "CORRECTION IN AUTOLOGOUT FIXED",
          "CORRECTION IN MAIL SYSTEM FIXED",
          "FRIENDLIST DISPLAY SYSTEM",
          "ADD AND REMOVE FRIEND FROM FRIENDLIST",
          "REMOVING DATA FROM CONSOLE",
          "ACCEPT REJECT FRIEND REQUEST",
          "CREATE GUILD SYSTEM",
          "DISBAND GUILD SYSTEM",
          "CORRECTION IN CREATE AND DISBAND GUILD",
          "MAKING DISPLAY GUILD INFORMATION SYSTEM",
          "REMOVING MEMBER FROM GUILD",
          "ADD NEW MEMEBER TO THE GUILD",
          "CORRECTION AND DISPLAY MASTER AND MEMBER GUILD PANEL",
          "GUILD CASTLE FIGHT SYSTEM PART 1",
          "GUILD CASTLE FIGHT SYSTEM PART 2",
          "GUILD CASTLE FIGHT SYSTEM PART 3",
          "CORRECTION IN GUILD CASTLE FIGHT SYSTEM",
          "RPG MAKER MZ CUSTOM TEXT INPUT BOX",
          "RESTRICT ITEM WEAPON AND ARMOR USE ON MAP",
          "READY TO USE WEBSITE FOR YOUR GAME PROJECT",
          "UPLOAD ALL YOUR THOUSANDS OF ITEM WEAPON AND ARMOR TO WEBSITE IN 1 SEC FOR MZ",
          "UPLOAD ALL YOUR THOUSANDS OF ITEM WEAPON AND ARMOR TO WEBSITE IN 1 SEC FOR MV",
          "MORE VIDEO WILL BE ADDED IN FUTURE"
        ],
        "Questions And Answers": [
          "Questions And Asnwers"
        ],
        "Extras": [
          "Extras And Additional Content"
        ]
      },
      "requirements": [
        "Knowledge of RPG Maker MV MZ any of these.",
        "Basic understanding of MySql Database or Logical coding or thinking. If else stuff."
      ],
      "description": "RPG MAKER MZ ONLINE GAME ADD ONLINE FEATURES TO GAME\n\n\nAs title say you can add online game features to your offline rpg maker mv mz game and make it Offline Online game.\nYou can convert your offline rpg maker mv mz game to Online Single Player game, Can make gift or mail system to send item weapon armor to each other in game across countries.\nYou can make friend list system , guild system, guild fight system for your game, also vending or selling item to other players system.\nYou can make login , logout, ban player, system this will also help your game from getting pirated since without login they cant play game. and if same id is used for many pc you can ban them . or you found any pirated copy of game using any of id and password you can ban that id.\nMany things I cant explain them here but you can learn in the course. So see you in the course.\n\n\nNote -\nThis course is not for beginner's Your should know RPG Maker MV MZ and Basics of Database or Mysql.\nTHE COURSE IS ABOUT TO TEACH YOU HOW TO USE PLUGINS,\nYOU HAVE TO GET GAME MAKING SOFTWARE AND PLUGINS BY YOURSELF, I AM NOT PROVIDING IT.",
      "target_audience": [
        "For who want to add online features in there offline game.",
        "For who want to make offline MMO or Online game with using RPG Maker Mz",
        "For who want to make online game using RPG MAKER MZ"
      ]
    },
    {
      "title": "Unity Game Tutorial: IQ Car - Unblock Car - Puzzle Game",
      "url": "https://www.udemy.com/course/unity-game-tutorial-iq-car-unblock-car-puzzle-game/",
      "bio": "Learn how to create Unblock Puzzle Game Development in Unity. Become a better Game Developer.",
      "objectives": [
        "Learn to create a unblock puzzle game.",
        "Learn basic Level Generation for this puzzle game.",
        "Learn to handle 3D Objects in Unity.",
        "Learn to use Unity and C# Basics.",
        "Learn about Level Selection Menu's and unlocking feature"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "#2 - Unblock 3D - Conzept",
          "#3 - Unblock 3D - New Project",
          "#4 - Unblock 3D - Unity Layout",
          "#5 - Unblock 3D - Importing Assets"
        ],
        "Basic Gameplay": [
          "#6 - Unblock 3D - The Playfield",
          "#7 - Unblock 3D - The Walls",
          "#8 - Unblock 3D - The Cars",
          "#9 - Unblock 3D - Car UI",
          "#10 - Unblock 3D - Car Materials",
          "#11 - Unblock 3D - Car Script 1",
          "#12 - Unblock 3D - Car Script 2",
          "#13 - Unblock 3D - Car Forward",
          "#14 - Unblock 3D - Car Backwards",
          "#15 - Unblock 3D - Check Free Position",
          "#16 - Unblock 3D - Fixing the Check",
          "#17 - Unblock 3D - Winning and Prefabs"
        ],
        "Level Generation Basics": [
          "#18 - Unblock 3D - Level design",
          "#19 - Unblock 3D - Level Gen Concept",
          "#20 - Unblock 3D - Level Gen Playfield",
          "#21 - Unblock 3D - Level Gen Debug",
          "#22 - Unblock 3D - Level Gen Place Red",
          "#23 - Unblock 3D - Level Gen Enemys #1",
          "#24 - Unblock 3D - Level Gen Enemys #2",
          "#25 - Unblock 3D - Level Gen Enemys #3",
          "#26 - Unblock 3D - Level Gen Enemys #4",
          "#27 - Unblock 3D - Level Gen Enemys #5",
          "#28 - Unblock 3D - Level Gen Enemys #6",
          "#29 - Unblock 3D - Level Gen Enemys #7",
          "#30 - Unblock 3D - Level Gen Enemys #8",
          "#31 - Unblock 3D - Level Gen Enemys #9",
          "#32 - Unblock 3D - Level Gen Enemys #10",
          "#33 - Unblock 3D - Level Gen Enemys #11",
          "#34 - Unblock 3D - Level Gen Enemys #12",
          "#35 - Unblock 3D - Level Gen Enemys #13",
          "#36 - Unblock 3D - Level Gen Enemys #14",
          "#37 - Unblock 3D - Level Gen Enemys #15",
          "#38 - Unblock 3D - Level Gen Enemys #16",
          "#39 - Unblock 3D - Level Gen Enemys #17",
          "#40 - Unblock 3D - Level Gen Enemys #18"
        ],
        "Creating, Optimizing and Saving Levels": [
          "#41 - Unblock 3D - Create Save Optimize"
        ],
        "GUI and Game Manager": [
          "#42 - Unblock 3D - GUI Top Panel",
          "#43 - Unblock 3D - GUI Turns Text",
          "#44 - Unblock 3D - GameManager Turns",
          "#45 - Unblock 3D - Count Turns",
          "#46 - Unblock 3D - GUI Win Panel",
          "#47 - Unblock 3D - Win Panel",
          "#48 - Unblock 3D - Options Panel",
          "#49 - Unblock 3D - GUI Update",
          "#50 - Unblock 3D - GameManager Prefab"
        ],
        "Creating Level Selection": [
          "#51 - Unblock 3D - Level Selection #1",
          "#52 - Unblock 3D - Level Selection #2",
          "#53 - Unblock 3D - Level Holder",
          "#54 - Unblock 3D - Level Holder Script",
          "#55 - Unblock 3D - Scrolling Content",
          "#56 - Unblock 3D - Level Loader",
          "#57 - Unblock 3D - Level Loader Object",
          "#58 - Unblock 3D - Masking View",
          "#59 - Unblock 3D - Unlock Levels #1",
          "#60 - Unblock 3D - Unlock Levels #2",
          "#61 - Unblock 3D - Unlock Levels #3"
        ],
        "Menu and final touches": [
          "#62 - Unblock 3D - Menu Scene",
          "#63 - Unblock 3D - Connecting Everything",
          "#64 - Unblock 3D - Creating a Webbuild",
          "#65 - Unblock 3D - Testing Webbuild"
        ],
        "Conclusion": [
          "#66 - Unblock 3D - Conclusion"
        ]
      },
      "requirements": [
        "The mood to learn new things.",
        "The mood to finish this course.",
        "PC or Mac, Mouse and Keyboard.",
        "Unity 5.6+ installed - The newer the better!",
        "Any working C# IDE - Visual Studio Code or similar"
      ],
      "description": "In this Unity Video Course you will learn how to create your own IQ Car - Unblock Car - Puzzle Game using the Unity Game Engine. For the functionality we write C# Code in Visual Studio or which ever IDE you choose.\nThis course is a Beginner/Intermediate course, so if you have trouble in any case, write me a message or Q&A, and i'll help as best as i can.\nGame Concept\n\"IQ Car\", also know as \"Smart Driver\" is an old board puzzle game. The goal of the game is to unblock the red car and bring it to the goal area. The game field is a 6x6 area. Other cars and trucks will block the way. All cars and trucks can be moved only forwards or backwards.\nUnity (2021.3.3f1 used in this course)\nWe will create the basic puzzle game mechanics\nWe will look how to handcraft new levels\nWe create Menu's UI panels\nWe create a Level Select Menu and a Level Unlock feature\nWe use Text Mesh Pro for beautiful font visuals\nWe create a WebGL build in the end\nC#\nWe will put in functionality with scripts using Visual Studio Code and C# (you can use any other IDE)\nAlso we create a Level Generator (Intermediate Topic)\nWe create the game logic and all needed Prefabs\nWe use Text Mesh Pro for beautiful font visuals\nConclusion\nAs a result of this course you should be able to create your own levels with different categories to choose.\nIn the end of this course you will have a fully functional IQ Car - Unblock Car - Puzzle Game\nCourse Material\n1 UI Atlas with different UI-Elements and Buttons\n4 3D Models - - Car, Truck, 2 Road Blocks\nYou have to write the code on your own, i do not provide the final scripts!\nThe Course Material is for education purposes only, so if you want to release your own game, create your own grafics and 3D Models for that. All Materials i provide are for education only and should not be in your final release!\nChallenge\nAfter you have created nice Menus, Buttons, 3D Models, new Levels and maybe additional content, upload the Game to any Gaming Website, Google Playstore, Apple Store or even Windows Store or Steam.\nSo what are you waiting for?\nLet's make your dream game a reality!!\nLevel: Beginner/Intermediate +\nVideo Course Length: ~\nUnity Version required: 5.6+",
      "target_audience": [
        "Who wants learn about Game Developement.",
        "Who wants to learn Unity and C#.",
        "Who wants become better in Game Creation.",
        "Who wants to learn new stuff.",
        "Who wants to a basic overview of Level Generation."
      ]
    },
    {
      "title": "UE4 Movable Camera System",
      "url": "https://www.udemy.com/course/ue4movabecamerasystem/",
      "bio": "Learning how to visual code in Unreal Engine 4 by making a Movable Camera System.",
      "objectives": [],
      "course_content": {
        "Learning Movable Cameras Systems": [
          "Introduction",
          "SetUp",
          "Making a Area",
          "Making Materials",
          "Materials",
          "Making Camera BP",
          "Interaction",
          "Interaction",
          "Camera Pick Up and Drop",
          "Making Camera Viewer",
          "Depth Of Field",
          "Camera Widget",
          "Making More Cameras",
          "Using All The Cameras",
          "Bonus Spider Camera"
        ]
      },
      "requirements": [
        "Have some knowledge of Unreal Engine 4, but not required."
      ],
      "description": "We are going to make a movable camera system in Unreal Engine 4! Similar to the camera system in \"Finding BigFoot\" and a bonus camera system like in Rainbow 6, deployable camera to look around a area! This is very exciting to learn about how to make the proof of concept idea, of a system that people use in games now days! Come on and learn something new!",
      "target_audience": [
        "Anyone who is willing to learn how to use Unreal Engine 4"
      ]
    },
    {
      "title": "Learn to create a Simple Game in Unreal Engine 5",
      "url": "https://www.udemy.com/course/learn-to-create-a-simple-game-in-unreal-engine-5/",
      "bio": "Learn Blueprints in Unreal Engine by creating a simple mechanic in UE5",
      "objectives": [],
      "course_content": {
        "Creating a game mechanic in Unreal Engine 5": [
          "Creating our Project",
          "Viewport Navigation basics",
          "Content browser and creaing our level",
          "Modeling our traps",
          "Creating our Trap Blueprint",
          "Moving the spikes",
          "7. Blueprint Communication",
          "Add Ragdoll to the character",
          "Adding Black and White screen",
          "Adding Slow Motion",
          "Importing textures to Unreal",
          "Creating the Wasted Widget",
          "Adding the Widget to the screen",
          "Animating our Widget",
          "Showing our Wasted Animation when dead",
          "Adding Camera shake",
          "Adding the Wasted Sound",
          "Triggering the Dead only once",
          "Adding Materials to the Trap Blueprint",
          "Creating a simple level"
        ]
      },
      "requirements": [
        "No experience is required, we will start from the very beginning."
      ],
      "description": "If you want to create a game in Unreal Engine 5 but it feel overwhelming this tutorial will help you to get started. I will take you from an absolute beginner to create your first game mechanics!\nUnreal Engine 5 allows you to create real time apps such as Games, Movies, Arch Viz and much more!\nWe will focus on working with Blueprints, a system that allows you to create code without writing! We will create some traps that move and when touching the player will make the game finish.\nWe will also learn how to model inside Unreal Engine 5, a new way of modeling inside the engine is a new feature that not many people are aware of.\nLearn to create a GTA Wasted feature in Unreal Engine 5. In this UE5 Beginner tutorial you will learn how to model, use Blueprints to create traps and add multiple features like UI, Camera Shake and Ragdoll to have the GTA Wasted screen when your character dies.\n\n\nIn this course you will learn:\n\n\nHow to navigate inside Unreal\nHow to Model inside Unreal\nHow to create Blueprints\nHow to send messages between Blueprints\nHow to add Physics and Ragdoll\nHow to add UI to your game",
      "target_audience": [
        "Beginner Game Developers who are trying to learn Unreal Engine 5"
      ]
    },
    {
      "title": "Main Menus Beginner Class - Unreal Engine 5",
      "url": "https://www.udemy.com/course/main-menu-masterclass-unreal-engine-54/",
      "bio": "Functional Menu Systems in Unreal Engine 5",
      "objectives": [
        "How to adjust Ray Tracing Settings in Unreal Engine 5",
        "Creating Frame Rate Limiters For More Stable FPS in Game",
        "Adding Multiple Languages with Sub Titles into their Game",
        "Make Control Settings that are customizable in Unreal Engine 5"
      ],
      "course_content": {
        "Introduction": [
          "Overview",
          "Get Unreal Engine 5.4"
        ],
        "Basic Main Menu Creation for Beginners": [
          "Overview Of What You Will Build",
          "Adding in Base Menu Buttons",
          "Exit Game And Credits",
          "Minor Menu Adjustments Before Adding Options",
          "Audio Settings Slider",
          "Resolution Selection",
          "Vsync Setting",
          "Vsync Status Text",
          "Frame Rate Limit Settings",
          "Saving Settings Explained in Detail",
          "Saving Vsync Settings",
          "FPS Limit Saving",
          "Resolution Settings Saving",
          "Removing Development Checks"
        ],
        "High Level Modern Menu": [
          "High Level Modern Menu Planning",
          "Setting Up A 3D Environment and a 3D Character for testing",
          "Setting Up Buttons For The Menu Part 1",
          "Setting Up Buttons For The Menu Part 2",
          "Adding A Pause Menu",
          "Minor Change",
          "Main Menu Button Functions",
          "More Main Menu Button Functions",
          "User Editable Controls"
        ],
        "GRAPHICS SETTINGS : Deep Dive": [
          "Saving Settings And Gamepad Inputs",
          "Changing Aim Sensitivity",
          "Creating A Settings Save And Aim Sensitivity",
          "Slider Value and Ui Changes",
          "Setting Up Options Panels",
          "Music Volume Settings",
          "Update Volume Ui (Fail)",
          "Updating Volume Ui Bug Fixes and cleaning up",
          "Overview Of Settings Organization",
          "Advice on Why Rest is Important and Fixing A Blueprint Bug",
          "Adding Effects Sound And Volume Control",
          "Overview Of Dialogue",
          "Setting up Dialogue UI",
          "Adding Dialogue And Volume Changing",
          "Adding Language Selection",
          "Adding Subtitles",
          "Window Mode Setting",
          "Resolution Settings",
          "WHY DLSS AND FSR were removed from the plan.",
          "Dynamic Resolution and in Engine Upscaling",
          "Frame Rate Limit",
          "Vsync Setting",
          "Anti Aliasing Settings. TSR is the best",
          "Basic FPS Counter",
          "Texture Quality Settings",
          "Motion Blur Setting",
          "Ray Tracing Settings",
          "Conclusion And Good Wishes in Your Game Development"
        ]
      },
      "requirements": [
        "A Computer That Can Run Unreal Engine 5.4"
      ],
      "description": "OVERVIEW\n\nA well rounded course on Menu Settings meant to give you a great kickstart guide on how to make a fully functional Main Menu in Unreal Engine 5\n\nFollowing feedback on what the most difficult things were to learn in Unreal Engine 5.4, I have created this course to help you manage the complex issue of making a working Main Menu.\n\nYou will learn:\n\n\nGRAPHICS SETTINGS : From Window Modes and Resolution to motion Blur and RAYTRACING. Yes, How to implement RAY TRACING into your unreal engine game with three fundamental Pre-sets.\n\nSOUND SETTINGS : Learn how to separate your in game audio into different sound categories and alter their volume separately. Subtitles and how to switch your in game dialogue and subtitles for localization.\n\nCONTROL SETTINGS : Learn how to set up Controls for your Character that are editable. Including Aim Sensitivity.\n\nMuch Appreciation to everyone who rated my first course. I have made some big improvements this time around.\n\nAudio is now crisper, clearer and more consistent video to video. I have a new microphone setup thanks to you.\nShorter Videos : You said you wanted shorter more precise videos and fewer long University style Lectures. Now most videos are 5 to 10 Minutes.\nFeedback is appreciated as always and I stand by my policy of replying to any messages or requests in 24 Hours. So feel free to ask anything.\n\n\n\nSo what are you waiting for? Get to learning and building your next title.",
      "target_audience": [
        "Beginner Unreal Engine Developers",
        "Indie Devs",
        "Developers Switching From Unity Engine"
      ]
    },
    {
      "title": "The Art of Doing: Video Game Basics with Python and Pygame",
      "url": "https://www.udemy.com/course/the-art-of-doing-video-game-basics-with-python-and-pygame/",
      "bio": "Learn all you need to know to begin making your own simple and fun arcade style games!",
      "objectives": [],
      "course_content": {
        "An Introduction to the Basics of Pygame and Python": [
          "Creating Our Display Surface",
          "Drawing On Our Display Surface",
          "Blitting (copying) Images",
          "Blitting (copying) Text",
          "Adding Sound Effects and Music",
          "Discrete Keyboard Movement",
          "Mouse Movement",
          "Continuous Keyboard Movement",
          "Movement Restrictions",
          "Collision Detection"
        ],
        "Bonus Lecture": [
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "Basic Python/computer science understanding."
      ],
      "description": "Have you learned the fundamentals of Python and then asked yourself; what's next?\nIf so, consider taking this course which will start you on your journey to making your own playable, fun, and rather addicting video games using Python and the Pygame library.\nSo often, when students ask for advice they are told to, \"Go build something\" or \"Get involved on a project\" but have no idea what projects to build or get involved in.\nThis course will set you on your way! In this course I will walk you though, step by step, the fundamentals of video game design with Python and Pgyame.  We will cover all of the basics including:\nConcepts of the main game loop, frames per second, and a clock.\nCreating a surface and drawing to it.\nBlitting (copying) images and rendering text to a surface.\nAdding sound effects and music.\nHandling keyboard and mouse input for player movement and control.\nBasic collision detection methods\n\n\nBy the end of this course, I hope for two things:\nYou will want to continue learning and consider about Pygame and Python and enroll in the full course!\nHave the confidence and knowledge to begin making your own basic arcade style games with Python!\n\n\nGood luck and I hope to see you in our next video!",
      "target_audience": [
        "Beginner Python developers curious about video game design and the Pygame library.",
        "Beginner Python developers who have a love for classic style arcade games."
      ]
    },
    {
      "title": "Make a 2D platformer in Unreal engine 5 C++",
      "url": "https://www.udemy.com/course/make-a-2d-platformer-in-unreal-engine-5-c/",
      "bio": "Master C++ Game Development in Unreal Engine 5: From Environment Setup to Advanced Player and Enemy Interactions.",
      "objectives": [
        "Mastering Unreal Engine 5 Setup and Configuration",
        "Proficiency in C++ Programming for Game Development",
        "Creating and Managing Game Assets and Interactions in 2D platformer",
        "Developing and Implementing Game Mechanics and AI"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Why Choose Unreal Engine for 2D Game Development"
        ],
        "Setting up environments": [
          "Download and install Visual studio community 2022",
          "Setting Up Android Studio",
          "Downloading and Installing Java Development Kit",
          "Downloading JetBrains Rider",
          "Creating a New Project and Level"
        ],
        "Setting up unreal environments": [
          "Map Creation",
          "Create First Class"
        ],
        "Creating base class C++": [
          "Game Mode Creation C++",
          "Creating a Player Controller C++",
          "Creating a Player Character C++",
          "Adding Dependencies In Rider"
        ],
        "Creating a 2D Map with Unreal Engine": [
          "Tilemap Creation",
          "Constructing the tilemap",
          "Working with Sprites in Unreal Engine",
          "Animating Sprites with Paper Flipbooks in Unreal Engine"
        ],
        "Player Base C++": [
          "Setting Up the Character in C++",
          "Setting Up the Character in Blueprints",
          "Implement input for the player character",
          "Setting up input action",
          "Take control of player",
          "Mastering Player Control with Enhanced Input",
          "Fine-Tuning Player Movement in Unreal Engine"
        ],
        "Animation State Machine": [
          "Building an Animation State Machine with C++",
          "Breathing Life into Animations",
          "Optimizing Animation State Machine",
          "Cleaning Animation Component",
          "Streamlining 2D Animation with Data Tables"
        ],
        "Building platform Interaction": [
          "Building a Foundation for Player Interactions",
          "Building a Falling Platform Interaction With C++",
          "Fine-Tuning the Falling Platform Interaction",
          "Optimize Falling Platform Interaction",
          "Building a Springy Trampoline Interaction",
          "Fine-Tuning the Trampoline Experience"
        ],
        "Crafting a Functionnal Ladder Interaction": [
          "Ladder Platform Interaction",
          "Laddering Up Player Controls",
          "Bringing the Ladder to Life",
          "Enhancing Player Movement with Ladder Animations"
        ],
        "Player Damage and Interaction": [
          "Introducing Spikes",
          "Bringing Spikes to Life in Blueprints",
          "Building a Respawn System with Checkpoints",
          "Introducing the Death Component",
          "Building the Visual Checkpoint",
          "Building the Projectile Component",
          "Building the Turret for Projectile Spawning",
          "Integrating Projectiles and Turrets in Blueprints"
        ]
      },
      "requirements": [
        "No prior experience with Unreal Engine 5 or C++ is required to take this course. While a basic understanding of any programming language can be helpful, it is not necessary. All essential concepts and skills will be taught throughout the course, allowing beginners to learn and progress alongside more experienced participants. This course is designed to be accessible and comprehensive for learners of all levels."
      ],
      "description": "Welcome! This comprehensive course is designed to guide you through the process of creating an engaging 2D platformer game using the powerful Unreal Engine 5 and C++. Whether you're a beginner looking to get started with game development or an experienced developer aiming to enhance your skills, this course has something for you.\n\n\nWhat You'll Learn:\n\n\nSetting Up Environments: Learn how to configure your development environment for Unreal Engine 5 and C++ to ensure a smooth workflow.\nSetting Up Unreal Environments: Dive into the specifics of setting up Unreal Engine environments tailored for 2D game development.\nCreating Base Class: Understand the fundamentals of creating and managing base classes in C++ to serve as the foundation for your game objects.\nCreating a 2D Map with Unreal Engine: Explore the tools and techniques for designing and implementing a dynamic 2D map within Unreal Engine.\nPlayer Base: Develop a robust player base class that handles player interactions and controls.\nAnimation State Machine: Master the animation state machine to bring your characters to life with smooth and responsive animations.\nBuilding Platform Interaction: Implement interactive platforms that enhance the gameplay experience.\nCrafting a Functional Ladder Interaction: Learn to create ladders and other climbable objects to add verticality to your game.\nPlayer Damage and Interaction: Program player health, damage systems, and interactions to add depth to your gameplay mechanics.\nCreating User Widget: Design and implement user interface elements that provide critical feedback and control to the player.\nEnemy Base Class: Create a base class for enemies, complete with AI behaviors and interactions to challenge your players.\nBy the end of this course, you will have a fully functional 2D platformer game built from scratch with C++ in Unreal Engine 5. You'll gain hands-on experience and a solid understanding of game development principles that you can apply to your future projects.\nJoin us and start your journey into the exciting world of game development with Unreal Engine 5 and C++!",
      "target_audience": [
        "This course is designed for aspiring game developers, hobbyists, and professionals who are interested in creating a 2D platformer using Unreal Engine 5 and C++. Whether you are a complete beginner eager to dive into game development, a programming enthusiast looking to expand your skills, or an experienced developer seeking to explore Unreal Engine 5's capabilities, this course is tailored for you. With step-by-step guidance and hands-on projects, participants at all levels will find valuable insights and practical knowledge to bring their game ideas to life."
      ]
    },
    {
      "title": "Make Your Own iPhone Game in One Day Without Coding - iOS 7",
      "url": "https://www.udemy.com/course/make-your-own-iphone-game-in-one-day-without-coding/",
      "bio": "A step by step guide on How to make a pinball game by yourself, in one day, publish it in the app store and make money.",
      "objectives": [
        "Fast Game Reskinning to make quick money",
        "Your Own Pinball Game in the iTunes App Store",
        "Learn XCode, iOS interface development environment, and Objective C (Obj-C)"
      ],
      "course_content": {
        "Introduction": [
          "Course Overview"
        ],
        "Getting Started": [
          "Apple Developer Registration",
          "XCode - Interface Development Environment",
          "Pinball Game Setup",
          "Troubleshooting newer XCode & iOS 9+",
          "Advertising Accounts"
        ],
        "Game Customization": [
          "Certificate & Provisioning Profile",
          "XCode 5 UPDATE: Provisioning profiles visual feedback",
          "Modifying Game Settings",
          "Modifying Game Assets: Sounds",
          "Modifying Game Assets: Icon and Launch Image",
          "iOS7 - Icons and Launch Images (addendum)",
          "Modifying Game Assets: Pinball Images",
          "Testing Game"
        ],
        "App Store Optimization": [
          "Game Name & Keyword Optimization Techniques",
          "Anticipating Upcoming Trends"
        ],
        "Publishing to App Store": [
          "Publishing Game to the Apple App Store",
          "Update: Publishing with XCode 5 - addendum",
          "itunes Connect inapp purchase Warning Notes"
        ],
        "Analytics": [
          "Game Analytics and Advertising Analytics"
        ],
        "Rinse & Repeat": [
          "Rinse and Repeat - How To"
        ],
        "Conclusion": [
          "Wrapping up and Where to Go from Here"
        ],
        "Go Pro": [
          "Get Informed of the Latest Trends and Deals",
          "Going Professional with Top Icon Templates",
          "BONUS"
        ]
      },
      "requirements": [
        "An interest in publishing your own iPhone game in to iTunes to make money fast",
        "Photoshop or equivalent image editing tool (GIMP is free)",
        "Access to a Apple computer (Mac Book, Mac Mini, Mac Book Air, Mac Book Pro, iMac) or MacInCloud.com for PC users"
      ],
      "description": "Important: the code that comes with this game is 32 bit only (not 64 bit) which means, it cannot be used on the older iPhone 4, 5 and 5s\nHello and Welcome!\nMy name is Yohann, I am a College instructor. I've been teaching iPhone ( iOS ) programming for 5 years, and I'm also an Entrepreneur with 40 iPhone apps and games currently in the app store.\nThank you for your interest in \"How to make your own iPhone game in a day\", with absolutely no coding involved.\nThis is a very unique course. You are provided with a full working game, a pinball game, and I will show you, step by step, how to customize it to make it a totally new pinball game, and then I'll show you how to publish it in the app store.\nNow this isn't just another boring course about theories on how to make an app. NO WAY. At the end of this course, you will have your own game in the app store. The game comes with several ways to monetize itself. That's right. That's what it's all about, MAKE MONEY!\nYou're not just building a game here, you're building a business. And that's not all. To top it off, you get an unlimited license on the source code that comes for FREE, so that you can rinse and repeat the whole process and keep making more money!\nBasically, That course pays for itself, so don't wait for another occasion to jump in. This is the right time and the right course for you.\nAnd if you're still not convinced, watch the introduction video to take a closer look at the priceless material this course brings you.\nIt's never been easier as it is today to start your own business. So join now, create some awesome games, make money, take control of your life and live the lifestyle you always wanted to have.\nThere has been plenty of reskins of these apps by myself and by many students.\nAlso feel free to ask me anything that goes through your mind, I love to help!\nCheers!\nYohann",
      "target_audience": [
        "Really for anyone, just follow the steps"
      ]
    },
    {
      "title": "COMPLETE 2D Game Development in Unity with Coding EXPLAINED.",
      "url": "https://www.udemy.com/course/complete-2d-game-development-in-unity-for-non-coders/",
      "bio": "In this course , I'll be teaching the basics of setting up a 2D Platfomer Game in UNITY along with Coding Explanation.",
      "objectives": [
        "Master beginner C# concepts, like variables, \"if\" statements, and arrays",
        "Defines the FULL concept of building up a 2D Platformer Game in Unity.",
        "Create Players with Basic Movement Controls and Combo Attack Systems.",
        "Create enemies with basic AI behavior like following the player and shooting fireballs.",
        "Create UI elements like Health Bars,Power Up Bars etc",
        "Collect and destroy game objects",
        "Implement various particle systems to enhance the game feel.",
        "Short (<2 hours) and \"To the point\" teaching technique with suitable necessary examples.",
        "Notes and Assets Required to cross check everything taught in this series."
      ],
      "course_content": {
        "Introduction And Setting Up .": [
          "Introduction",
          "Downloading And Installation",
          "Setting Up Unity Editor"
        ],
        "Player": [
          "Setting Up Player",
          "Player Movement",
          "Ground And Background Elements",
          "Player Jump",
          "Player Animations"
        ],
        "Enemy": [
          "Setting Up Enemy",
          "Enemy AI Movement"
        ],
        "Player Combo Attack Mechanics": [
          "Player Combo Attack System",
          "Player Attack Damage"
        ],
        "Enemy AI Attack Mechanics": [
          "Enemy Fireball Attack System",
          "Fireball Attack Damage"
        ],
        "UI Elements And Effects": [
          "Characters Hurt And Death",
          "Characters Explosion Effect",
          "Characters Health Bars"
        ],
        "Thank You": [
          "Thank You"
        ]
      },
      "requirements": [
        "Absolute NO prior CODING knowledge is required. Everything will be taught in this course.",
        "Only a computer system is required that at least meets the minimum specs requirements to run Unity ."
      ],
      "description": "This tutorial is an amalgamation of -> \"How to create a game in Unity\" along with ->\"Introduction to C# Coding required for Game Development\" , all explained thoroughly within a 2 HOURS !\nSome Key-Points of this course are:-\n-> This course is a UNIVERSALLY UNDERSTANDABLE collection of videos , that will familiarise you with the COMPLETE PROCEDURE  of making a game in Unity IRRESPECTIVE of whether you have a coding or development related background OR NOT.\n-> It covers FUNDAMENTAL UNITY CONCEPTS like \"What are Assets?\" \"What are GameObjects ?\" \"What are Components ? \" and many more. Moreover ,it also provides knowledge about the basic CODING concepts like \"What are Variables and How to use them?\" \"What are Functions?\" and so on. Thus , the course is an excellent combination of the TWO MAIN aspects connected to making a game of your own.\nThis collection also contains CODING NOTES AND THE REQUIRED ASSETS which you can download at the last which will further increase your knowledge and can help you cross check every concept that is explained in the videos.\nShort ,informative ,helpful and concept building are some of the other key-ingredients of this course that make it stand out from the others available.\nHence this course is like THE ULTIMATE DESTINATION for gaining all the necessary knowledge that is required for 2D game development.",
      "target_audience": [
        "Everyone curious about Game Development and Coding.",
        "Beginners wanting to learn a coding language like C#."
      ]
    },
    {
      "title": "Game Making with Blender and Building in Unity and Godot",
      "url": "https://www.udemy.com/course/3dmotive-game-making-with-blender-and-building-in-unity-and-godot/",
      "bio": "Learn to create low-poly tileable environments in Blender for vibrant indie games!",
      "objectives": [
        "Learn how to model environment assets using Blender",
        "Be able to create interesting tileable worlds in Unity and Godot",
        "Be able to make environment pieces tile together seamlessly",
        "Understand a low-poly cartoon workflow for indie games",
        "Build assets with performance and games in mind"
      ],
      "course_content": {
        "Intro to Modeling our Set in Blender": [
          "Intro to the Course",
          "Download Module 1 Source Files Here!",
          "Starting the Modular Set",
          "Blender Scene Setup",
          "Constructing the First Parts",
          "Creating our First Piece",
          "Planning Sections",
          "Completing the Dead End",
          "Straight Sections",
          "Transition Piece",
          "Remaining Base Pieces",
          "Rounding off the Bevel",
          "Module 1 Wrapup"
        ],
        "Continuing to Modeling our Sections in Blender": [
          "Module 2 Intro",
          "Download Module 2 Source Files Here!",
          "Intersection Piece",
          "Cleaning Topology",
          "Additional Modeling Sections",
          "Spiral Helix Slide",
          "180 Degree Turn",
          "90 Degree Extension",
          "Fork in the Road",
          "Completing the Split Section and Cleanup",
          "Module 2 Wrapup"
        ],
        "Completing the Set and Optimizing in Blender": [
          "Module 3 Intro",
          "Download Module 3 Source Files Here!",
          "Bump in the Road",
          "Finalize our Set",
          "Correcting Tiling and Snapping",
          "Material Assignment",
          "Adjusting Shading and Naming",
          "Prepping for Export and Beveling",
          "Exporting for Game Engines",
          "Module 3 Wrapup"
        ],
        "Building our Project in the Unity and Godot Game Engines": [
          "Module 4 Intro",
          "Download Module 4 Source Files Here!",
          "Making the Project in Unity",
          "Building the Scene in Unity",
          "Continuing the Level Construction",
          "Adding the Ball",
          "Camera Movement and Cinematics",
          "Reviewing the Project",
          "Moving to the Godot Engine",
          "Snapping in the Godot Engine",
          "Using Snaps and Addressing Effciency",
          "Create the Marble Ball in Godot",
          "Adding Logic to the Gameplay",
          "Adding Logic to the Ball",
          "Adding Functionality to the Camera",
          "Applying Post Process for Visual Improvements",
          "Course Wrapup"
        ]
      },
      "requirements": [
        "A basic understanding of Blender is helpful, although not mandatory",
        "Some familiarity of Unity or Godot is useful - though most all you need will be covered."
      ],
      "description": "Learn how to create low-poly tileable environments in Blender for vibrant indie games. In this comprehensive introductory video course, you will learn a practical and efficient modelling workflow for building a complete marble-maze environment for indie and mobile games. Your instructor, Alan Thorn, will introduce you to a wide range of powerful tools, techniques, modifiers and critical workflows using the amazing Blender 4 software, which is free and open source. Together, the transferable and industry-relevant knowledge covered here is used to create common environment pieces, and these will work like reusable building blocks, being tiled together in exciting combinations to make large and fun game worlds. You will further learn how to export your created assets into two highly popular game engines, namely Unity and Godot. By the end of this course you will understand how almost any tileable and low-poly environment assets can be created and exported, and then used in a variety of fun and creative contexts.\nIn this course you will…\nLearn how to model environment assets using Blender\nUnderstand a low-poly cartoon workflow for indie games\nDevelop an awareness of sound topology\nBuild assets with performance and games in mind\nBe able to make environment pieces tile together seamlessly\nBe confident in using Blender modifiers, like Bevel, Screw and Mirror\nBe able to export models from Blender to common game engines\nBe able to create interesting tileable worlds in Unity and Godot",
      "target_audience": [
        "Beginner Blender modelers who want to learn the basics of creating assets",
        "Game Designers and developers who want to learn the basics of building a simple game in Unity or Godot"
      ]
    },
    {
      "title": "Create a Complete STORY GAME in ROBLOX Studio (2025)",
      "url": "https://www.udemy.com/course/create-a-complete-story-game-in-roblox-studio-2025/",
      "bio": "Walkthrough developing a STORY GAME in ROBLOX Studio - Gain a full understanding of Game Development",
      "objectives": [
        "Have a deep understanding of the ROBLOX Studio interface",
        "Have PRACTICAL EXPERIENCE developing games",
        "Be able to solve and debug problems in your own scripts",
        "Design your own game UI using FIGMA",
        "Use BLENDER to create advanced models",
        "Thoroughly test your own games to ensure a high quality",
        "Have support from myself in the Q&A Section",
        "Access to our DISCORD community"
      ],
      "course_content": {},
      "requirements": [
        "Basic map design and scripting knowledge recommended (but not essential)",
        "A computer with an internet connection",
        "Desire to become a hit ROBLOX Dev!"
      ],
      "description": "Ready to dive into the exciting world of ROBLOX game development? Whether you're just starting out or already have experience and want to level up your skills, this course is your ultimate path to becoming a top-tier ROBLOX developer!\n\n\nThis story course has been adapted from part of my main roblox studio masterclass. My masterclass breaks down game development topic by topic, and includes this story game creation. If you prefer that style of learning, you can find my original course on my udemy profile.\n\n\nIn this course you will learn all areas of ROBLOX game development including:\nGame Design\nProgramming\nModelling (Blender)\nUI Design (Figma)\nAnimation\nTesting\nPublishing\n\n\nOver 19 hours of In-Depth Lectures:\nDive deep into ROBLOX game development with over 19 hours of high-quality video lectures. Each lecture contains detailed step-by-step explanations from an experienced ROBLOX tutor.\n\n\nBlender Integration:\nTake your character design to the next level by learning how to model a ghost from scratch using Blender. This section introduces you to 3D modeling and provides practical experience creating and importing custom assets to ROBLOX.\n\n\nPractical Understanding:\nBy the end of this course, you won’t just have followed along with a project—you’ll understand how each element fits together to create a complete, playable experience. You'll be able to confidently open a blank Roblox Studio project and start building your own unique games from the ground up.\n\n\nFigma UI Design:\nLearn how to create modern visuals that improve your games usability and immersion. We use Figma to design a sleek, spooky and user-friendly UI including dialogue prompts and a tasks menu. This UI design is then tweaked and created in ROBLOX studio.\n\n\nCraft High-Quality Front Page Games:\nElevate your game development skills to the next level. By the end of this course, you won’t just be building simple starter games; you’ll have the knowledge and expertise to create high-quality front-page games that captivate players and make a lasting impact in the ROBLOX community.\n\n\nThorough Testing:\nNo game is complete without testing, so you'll be guided through how to test your game for bugs and what to do when you encounter one. After this course, you will feel confident solving errors on your own.\n\n\nDiscord Community and Help:\nBy enrolling in this course, you will also have access to the dedicated Discord community with over 1000 members. Here you can get help from other course members, get hired by other developers or have a casual chat. Alternatively, you can also message me on Udemy if you get stuck and I will respond to you within 24 hours.\n\n\nWith Udemy's 30-day money-back guarantee, you can try out this course risk-free. If you are not 100% happy with the course, you can get a full refund with no questions asked.\n\n\nJoin today and embark on your journey to game development greatness!",
      "target_audience": [
        "Beginners who prefer to learn more practically (watch and do)",
        "Existing developers aiming to learn ROBLOX Studio",
        "Intermediate users wanting a greater understanding"
      ]
    },
    {
      "title": "Create your first Unity 3D game - Farmer Collector",
      "url": "https://www.udemy.com/course/create-your-first-unity-3d-game-farmer-collector/",
      "bio": "Create your own Unity 3D game and be better equipped to give life to your own game project ideas!",
      "objectives": [
        "Create a basic 3D game using provided scripts, the asset store and modify inspector properties",
        "Understand how a game can be structured, covering UI, first person controller and a scenario with score and interactables",
        "Create and assemble a 3D scene using assets from the store and the Unity terrain system",
        "Understand the basics of a 3D game and what other actions can be taken to take it one step further to create a full game to be published",
        "Be better equipped to create your own Unity 3D games by understanding the knowledge and steps required as part of the creation process."
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Resources"
        ],
        "\"Farmer Collector\" Game Creation": [
          "Create Unity Project",
          "Import Custom Package",
          "Creating the Terrain",
          "Texturing the Terrain",
          "Adding Terrain elements",
          "Configuring First Person Controller",
          "Adding Scene Boundaries",
          "Configuring Controller Interactable",
          "Adding Crosshairs",
          "Adding Score Collider",
          "Adding the Tomato Spawner",
          "Adding the Game UI",
          "Configuring the Farm Environment",
          "Adjusting the Spawn Transforms",
          "Adding animals",
          "Configuring Farm Skybox",
          "Adding Sounds",
          "Building the Game"
        ],
        "Course completion": [
          "Next steps",
          "Course Game"
        ]
      },
      "requirements": [
        "No programming skills required. You will be provided with everything you need to succeed.",
        "A computer with Unity installed.",
        "A computer with at least 5 GB of available storage to download Unity Asset Store components."
      ],
      "description": "In this course we are going to create a First Person game, called \"Farmer Collector\", where you play as a farmer, who needs to collect as many tomatoes as possible in a box under the available time to score points.\n\n\nWe will create the complete game from scratch, giving you the chance to learn about the entire creation process, which includes:\nCreating the main scene\nConfiguring the First Person controller\nConfiguring the terrain\nConfiguring the environment\nCreating the game logic for the timer, throwing tomatoes and getting scores\nConfiguring the UI\nConfiguring the game sounds and sound effects\nAdding props\nAdding animals and configuring AI navigation\nConfiguring Skyboxes\nBuilding the game\n\n\nIn addition, no coding skills are required, as all scripts will be provided as part of the course content, but you are free to explore and leverage these scripts in your own projects. The 6 provided scripts include:\nGame Manager\nObject Interact\nObject Interactable\nScore Collider\nSound Manager\nAnimal Wander\n\n\nAlso we will provide you with a stunning UI canvas with a custom font that can be used to greatly improve the look of your game!\n\n\nIn addition, we'll also leverage Unity Asset Store to make our game look great using a custom store list link I have prepared for you.\n\n\nBy the end of this course you should have your own Unity 3D game \"Farmer Collector\" ready to play and acquired the skills and knowledge to turn your next game ideas into reality.\n\n\nThank you and enjoy your learning time!\nMarcos",
      "target_audience": [
        "Anyone interested in creating games",
        "Beginners in game development",
        "Creators that are willing to start exploring 3D game development",
        "People interested in learning Unity"
      ]
    },
    {
      "title": "Learn Python Game Development Making Pool Game",
      "url": "https://www.udemy.com/course/learn-python-game-development-making-pool-game/",
      "bio": "Understand how Python can be used to make games like Pool Game and Angry Bird Game",
      "objectives": [
        "Understand the basic and advanced game programming with Python, Pygame and Pymunk",
        "Learn how to make best GUI games with Python",
        "Learn Python by creating Pool game",
        "Learn about how to handle physics in games using pygame python module"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Basics of pygame": [
          "Introduction to pygame",
          "Intro to pygame shape",
          "Drawing shapes",
          "Color codes",
          "Event loop",
          "Game logic",
          "Moving player",
          "Update screen",
          "Boundary"
        ],
        "Fundamental of Mathematics": [
          "Distance between two points",
          "Quantities",
          "Vector"
        ],
        "Basics of pymunk [Important]": [
          "Introduction to pymunk",
          "Pymunk attributes",
          "Pymunk Body",
          "Pymunk Boundaries",
          "Pymunk: Apply force",
          "Pymunk: Apply impulse based on angle"
        ],
        "Pool Game": [
          "Resources for the game",
          "Boilerplate code",
          "Create Ball pymunk object",
          "Apply impulse to the ball",
          "Add friction",
          "Blit pool table",
          "Create boundary",
          "Add multiple balls",
          "Add shape to balls",
          "Change the arrangement of balls",
          "Blit balls",
          "Add cue stick",
          "Make cue stick follow cue ball",
          "Rotate cue stick",
          "Change direction of cue stick",
          "Hiding movement of cue stick during shot",
          "Apply impulse based on angle",
          "Apply power in the stick based on force",
          "Increase the force to apply",
          "Max force and change force direction"
        ],
        "Angry Bird game": [
          "Let us start: Boilerplate code for angry bird",
          "Resources for the game",
          "Tools",
          "Loading map",
          "Setup Background",
          "Draw",
          "Blit background image",
          "Setup sling",
          "Vector and Unit Vector",
          "Handle sling",
          "Draw sling rope",
          "Manage rope length and stretch",
          "Importance of Unit Vector",
          "Bird class",
          "Bird class Implementation",
          "Red Bird class",
          "Setup Birds",
          "Draw Red Bird",
          "Remove Bird",
          "Physics class",
          "Creating static ground",
          "Physics Bird class",
          "update",
          "Update Bird path and Handle collision with Bird",
          "Adding physics to bird",
          "Moving Bird",
          "Adding animation",
          "Block class",
          "Beam class",
          "BeamGlass class",
          "Adding physics to blocks",
          "Physics for Polygon and Circle",
          "Handle bird and block collisions",
          "Pig class",
          "Setup physics for pig",
          "Add collision handler and remove pig",
          "Handle pig collision",
          "Test the game",
          "Adding button class",
          "Display button",
          "Exploding",
          "Adding physics for explosion",
          "Add explosion",
          "Check explosion",
          "Adding score",
          "Checking victory or loose state"
        ]
      },
      "requirements": [
        "Basic Python programming experience is required i.e. loops and functions",
        "Proper internet connection is required"
      ],
      "description": "Unleash your creativity and dive into the exciting world of game development with Python! This comprehensive course is designed for beginners and aspiring game developers to build physics-based games from scratch using the powerful Pygame and Pymunk libraries.\nYou will start by mastering the fundamentals of Pygame, learning how to create game loops, handle events, manage sprites, and design interactive game interfaces. Next, you’ll delve into the core concepts of Pymunk, an easy-to-use 2D physics engine, to simulate realistic collisions, movements, and dynamics in your games.\nBy combining these skills, you’ll create two complete, engaging games:\nPool Game: Design a fully functional billiards game, complete with accurate ball physics, collision detection, and smooth gameplay.\nAngry Birds Clone: Build your version of this classic physics-based game, implementing catapult mechanics, projectile motion, and destructible structures.\nThis hands-on course includes:\nStep-by-step guidance for mastering Pygame and Pymunk.\nPractical coding exercises and projects to solidify your understanding.\nInsights into game design and debugging techniques.\nBy the end of this course, you’ll have the skills and confidence to create your own games and explore endless possibilities in game development. Whether you're a hobbyist or aiming for a career in gaming, this course is your launchpad!",
      "target_audience": [
        "Anyone who wants to develop games using Python",
        "Anyone who wants to make their own 2D game.",
        "People interested in working in the game design industry."
      ]
    },
    {
      "title": "Procedural Plant Generation with Unity",
      "url": "https://www.udemy.com/course/procedural-plant-generation-with-unity/",
      "bio": "Discover LSystem, SpaceColonization and Drawing Approach to create Procedural Plant Meshes on Unity in 2D and 3D.",
      "objectives": [
        "Learn How to Think About Procedural Mesh Generation with Mathematics",
        "Learn How to Create Meshes in Unity for Plant Generation",
        "Learn How to Make Basic Animations for our Generated Plants",
        "Learn Logic of the Main Algorithms for Procedural Plant Generation",
        "A Complete Project mixing LSystem, Space Colonization and Semi-Procedural approach",
        "Create 2D and 3D Procedurally Generated Plants"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "[Theory] Scientific Research - Objectives",
          "[Theory] Scientific Research - Complexity",
          "[Theory] Videogame and Procedural Generation",
          "[Theory] Plant Algorithms Classification",
          "[Theory] Projects & Useful Links"
        ],
        "Mesh Generation Fundamentals": [
          "[Theory] Introduction to Mesh",
          "[Theory] Coordinate Systems Introduction",
          "[Theory] Focus on Polar Coordinate System",
          "[Theory] Vectors",
          "[Theory] Vector Addition",
          "[Theory] Vector Scalar Multiplication",
          "[Theory] Vector Dot Product",
          "[Theory] Vector Cross Product",
          "[Theory] Branch Mesh Component - Cone / Cylinder",
          "[Theory] Normals",
          "[Theory] UVs"
        ],
        "Space Colonization & Animation System": [
          "Project Setup",
          "DebugManager Setup",
          "[Theory] Space Colonization Algorithm",
          "Space Colonization Algorithm - Attractors",
          "[Theory] Common Classes",
          "BranchPart Class",
          "Visual Generator",
          "[Theory] Branch Mesh Construction",
          "Branch Mesh Construction - Bottom",
          "Branch Mesh Construction - Handle Small Memory Leak",
          "Branch Mesh Construction - Bottom Optimization",
          "Branch Mesh Construction - Top",
          "Branch Mesh Construction - Sides",
          "Space Colonization Algorithm - Propagation",
          "Space Colonization Algorithm - Construction",
          "Integration - Material on Branch",
          "Testing - Various Parameters",
          "Link Space Colonization & Visual Generator",
          "Spline Branch Class",
          "Branch Part & Game Object",
          "Branch Generation Step-By-Step",
          "[Theory] CatmullRom Spline",
          "Catmull-Rom Spline Class",
          "Link SplineBranch & Catmull-Rom Spline",
          "[Theory] Mesh Optimization",
          "Branch Mesh Optimization - Top",
          "Branch Mesh Optimization - Bottom",
          "Branch Mesh Optimization - Smooth",
          "Plant Animation By Basic Interpolation",
          "Mesh using Spline Points",
          "Control Branch Radius",
          "Plant Animation - Growth Effect",
          "Plant Animation - Growth Effect Branch After Branch",
          "Plant Animation - Growth By Proportion",
          "Improve Branch Radius",
          "Plant Animation - Randomness",
          "Control Branch Length",
          "Plant Animation - Smooth Growth Effect",
          "Plant Modification",
          "Plant Modification - Follow Spline Points Movements",
          "[Theory] Growing & Senescence",
          "Plant Animation - Animate Growth",
          "Plant Animation - Elasticity",
          "Plant Animation - Senescence"
        ],
        "LSystem": [
          "[Theory] LSystem",
          "LSystem Setup",
          "LSystem Rules",
          "LSystem Branch Part",
          "Link LSystem & SplineBranch",
          "LSystem Reading Direct BranchPart",
          "Reproduce Famous Forms",
          "Improve LSystem"
        ],
        "Semi-Procedural Approach": [
          "[Theory] Semi-Procedural Algorithm",
          "Semi-Procedural Algorithm - Setup",
          "PlantDrawer Class - States",
          "PlantDrawer Class - Screen",
          "Link PlantDrawer & BranchPart",
          "Draw Mesh"
        ],
        "Plant & Branch Components Integration": [
          "Assets",
          "[Theory] UV Mapping",
          "UVs",
          "2D Plants with LineRenderer",
          "LineRenderer in Plant Algorithms",
          "[Extra] [Theory] Leaf Mesh Construction",
          "[Extra] Leaf Mesh Drawer",
          "[Extra] Leaf Mesh Builder",
          "[Theory] External Assets",
          "Shape Class",
          "External Assets Setup",
          "Shape Animation - Link Visual Generator & Shape",
          "Shape Animation - Randomness",
          "[Theory] Camera & Rendering for Timelapse Effect",
          "[Theory] Conclusion"
        ]
      },
      "requirements": [
        "Basic Knowledge of Programming in Unity",
        "Basic Knowledge of High School Mathematics"
      ],
      "description": "Welcome to the Procedural Plant Generation course!\n\n\nIn this course, we will explore the fascinating world of procedural generation of plants. Plants are complex natural structures that have always been a source of inspiration for artists, architects, and scientists. With the development of procedural generation algorithms, we can now create realistic, fantastic and diverse plant structures in a fraction of the time it would take to manually model them.\n\n\nThe course is divided into four main parts.\n\n\nFirst, I will quickly introduce this course, my pedagogy, and we will cover the latest scientific research on procedural plant generation, the advantages and drawbacks of procedural generation inside videogames and the project that will structure this course.\n\n\nIn the second part, we will explain the theoretical approach behind procedural mesh generation. We will see the basic theory to understand how to create procedural plant with coordinate systems, vectors and some mathematics calculations.\n\n\nThe third part is subdivided respectfully into 3 parts corresponding to theses algorithms: Space Colonization with Animation System, LSystem & Semi-Procedural approach. It's the heart of this course. We will see how to generate for these 3 algorithms a plant global form with Catmull-Rom Spline and also how to animate it smoothly.\n\n\nThe last part will show how to integrate external assets inside LSystem Plant Generation to create a basic timelapse.\n\n\nIt is important to note that this course DOES NOT COVER topics such as :\nProcedural Terrain Generation\nSpecific Flower / Tree / Plant Species Generation & Animation\nProcedural Generation of Specific Parts of Flower / Tree / Plant like Leaves / Petals / Buds / Fruits etc.\nHowever, you will understand and learn the essential skills to create meshes looking like plants, from a coding perspective and how to integrate asset resources (3D models & 2D sprites) on it to enhance your creations.\n\n\nLastly, I want to emphasize that all the assets used in the projects are free to be used, as long as the creators are cited and all conditions of their respective license are filled. I really want to encourage the use of free resources and the support of talented creators.\n\n\nWhether you are an artist, a (game) developer, or a computer graphics enthusiast, this course will provide you with the knowledge and tools to create your own procedurally generated plants. By the end of this course, you will have a solid understanding of the theory and practice of procedural plant generation, and you will be able to create your own complex plant structures, realistic or on the contrary completely unreal.\n\n\nLet's get started!",
      "target_audience": [
        "Curious Learners for Plant Mesh Generation",
        "Unity Developers Curious About Mesh Construction",
        "Plant Timelapse Addicts"
      ]
    },
    {
      "title": "C# Win Forms Flappy Bird Hunting Game OOP Master Class in VS",
      "url": "https://www.udemy.com/course/flappy-bird-hunting-game-c-sharp-master-class-mooict/",
      "bio": "Time to hunt the elusive flappy birds by making this new interactive game with C#, Windows Form, .Net in Visual Studio",
      "objectives": [
        "How to create a fun game with out using any games engine e.g. GODOT, UNITY or UNREAL",
        "Create a Flappy Bird hunting game, its similar to the duck hunt game from the old nintendo games but its flappy bird this time. Why? Because why not right?",
        "Code using object oriented style of programming. We will create A CLASS for the bird and control its movements, score and death using that script",
        "Work with multiple windows forms. We will create the games window and the start window of the game and establish a communication between them using C#.",
        "Learn how to load sprite images from external folders and load them dynamically to thee code using C# programming.",
        "Save high score to a text file and have it ready and loaded when the game is running or loading in the background",
        "use various data types, functions and loops to make this work. We will be using custom class and lists to control the movement of the birds",
        "Work only on windows form and make a game using transparent images and animate objects using the sprite sheets",
        "Publish the final application by packaging all the external files, executeable files and the resources in a windows installer"
      ],
      "course_content": {
        "Flappy Bird Hunting Game DEMO": [
          "Demo"
        ],
        "Introduction": [
          "Introduction"
        ],
        "The Set up": [
          "Explore the external files",
          "Visual Studio Set Up"
        ],
        "The Start Window": [
          "The Start Window"
        ],
        "The Bird Class": [
          "The Bird Class"
        ],
        "The Games Window": [
          "The Games Window"
        ],
        "Lets Build the App for Publishing": [
          "Publishing the game to a Installation Wizard",
          "End Message"
        ]
      },
      "requirements": [
        "No progrmming experience is required but some basics would be benefitial",
        "Each of the content convered in this tutorial will be explained step by step",
        "Have a laptop or pc with Visual Studio installed and have access to online materials",
        "Be driven and focused to complete a project start to finish"
      ],
      "description": "Welcome to the Flappy Bird Hunting game master class. This course has been meticulously planned to challenge your views on the capabilities of windows form. What if we can make an interactive, fast paced, multi object shooting game in windows form with C# and nothing else? What if this game would spawn and respawn objects, allow the user to have crosshair on their mouse cursor, play music and register the hits on the birds and reward the players accordingly? Does this game sound impossible in windows form? Yep it kind of does, until you realise that someone as stubborn as you and me will have to find a way to do just that. Why? Well, why not.\nWindows form is an amazing platform for learning programming. Its very basic what you see if what you get platform and most of the times we learn by making calculators, image viewers or other desktop style applications. Windows form is not made for games development but its an interesting challenge to be able to mimic or build similar games as the ones existed before in this limited platform only using the tools available inside of visual studio and not using any of the big game’s engines such as GODOT, Unity or Unreal.\nI want to explore the hidden or less used features of windows form that can potentially be used to make actual games on the platform and for us to learn how to use C# programming in a more productive and effective way.\nAlthough this is a games development course at the heart of it it’s a programming course. We will complete the course together by making a flappy bird hunting game that’s full of Challenges.\nFeatures\nMake a flappy bird hunting game using native C#, Windows Form, .Net and Visual Studio\nImport sprite images to animate the bird, MOO, and coin in the game\nHave a cross-hair to follow the player mouse cursor\nAdd the Media Player dependency for .Net through visual studio to play multiple Mp3 files together in the game\nAllow players to mute or play the music and sound effects in the game\nLoad external sound effects to the game such as bullet sound and background music\nLoad external background images for the game and allow the user to pick a new background for their game play\nLoad lots of different birds in the game, this will be the bird sprites and we can animate each of them using separate sprite images from external folder\nCreate a BIRD CLASS and import that to the games window\nUse the BIRD object in the game loop to check if they bird is dead or alive. If alive it will continue to fly within the bounds of the game and if DEAD it will spawn the coin animation and remove the current bird from the game.\nAdd a cow (MOO) that will be collecting the coins when it drops to the ground.\nPlay sound effects for MOO and the coin collection\nUsing different layers of elements to show the background, foreground, bird, MOO and cursor images in the game\nLoad and apply custom fonts to the game directly inside of Windows Form\nKeep track of the score in the game and save the high score into a text file so it can be loaded and saved in permanent memory\nCreate a fun count down timer in the game and allow the users to hunt as many birds as they can within that time\nReward player with more bullets when they accurately shoot 5 birds in a row.\nWhen the game is finished we can build a installation wizard to publish the game, this wizard will create a MSI and EXE file to be shared online or offline.\nThe installation process will be custom built, so it will contain the files we want to contain for the game and also include the icons for the file which will show with the desktop shortcut.\nIf you are not familiar with my work please check out my YouTube Channel MOOICT or search for MOOICT on google and you can explore the different types of educational content I make on my website and YouTube channel.\nHappy Hunting everyone.",
      "target_audience": [
        "Students",
        "Teachers",
        "Aspiring game developers or software engineers",
        "New programmers or developers",
        "For the curious minded"
      ]
    },
    {
      "title": "Game Development in JS - Crash course (w/ CreateJS)",
      "url": "https://www.udemy.com/course/grid-based-html5-game-development-createjs-best-practices/",
      "bio": "Start building your own games and publish them on the Web. Learn how to create HTML5 games in Javascript with CreateJS.",
      "objectives": [
        "Use Javascript to develop games",
        "Fundamentals of game development",
        "Drawing a grid with different scales",
        "Building dynamic grid system using a collection of layout patterns",
        "Placing objects at the appropriate index using the grid",
        "Multiple Screne game system",
        "Auto handling the browser resize",
        "Applying responsive design concepts to games",
        "Creating the loading/progress screen"
      ],
      "course_content": {
        "Introduction": [
          "Initialize project",
          "Setup our main canvas"
        ],
        "Grid System": [
          "Init the grid class",
          "Drawing the first object",
          "Drawing our dynamic grid",
          "Implement global stage updating system",
          "updating the start point of the grid",
          "place object at index : part 1",
          "place object at index : part 2",
          "Update object decalation",
          "Test the power of the grid system"
        ],
        "Loading Screen": [
          "Init PreloadScreen and LoadScreen",
          "Update and clean our code",
          "PreloadScreen",
          "Background Img",
          "LoadBar : part 1",
          "Handeling the screen resize",
          "LoadSreen",
          "LoadBar: part 2",
          "Delete object from stage",
          "Start button",
          "MainScreen",
          "Clean and fixing code"
        ]
      },
      "requirements": [
        "Javascript basics",
        "Html basics"
      ],
      "description": "Learn useful concepts, tools, and functions that you will need to build grid-based HTML5 games with CreateJS.\nYou are beginner or intermediate, this course allows you build a strong foundation in grid-based HTML5 game applications development by using CreateJS:\nRealization of a grid with an object-oriented approach,\nEase of manipulation of local and global variables,\nDrawing a grid with different scales,\nBuilding dynamic grid system using a collection of layout patterns,\nPlacing objects at the appropriate index using the grid,\nMultiple Screne game system\nAuto handling the browser resize,\nApplying responsive design concepts to games,\nCreating the loading/progress screen\nA potent ability at your fingertips\nLearning useful aspects grid-based HTML5 games using CreateJS puts a powerful and very useful tool within reach. The libraries under CreateJS fall under MIT License, which is very permissive, allows modification and reuse. This makes CreateJS a powerful tool for creating rich, interactive experiences of all kinds by providing tools for HTML5 game applications.\nJobs in the game development industry are plentiful, and being able to learn grid manipulating with CreateJS in HTML5 games will give you a solid starting point for a career in game development.\nContent and overview\nSuitable for beginner and intermediate grid-based HTML5 game developer, through this course of ….. minutes of content, you will learn all of the fundamentals related to grid system building using CreateJS libraries. You will also establish a strong understanding of the concept behind grid system which is the fundamental element of web game. To put it simply, the course uptakes an incremental approach to finally have a grid with the full range of functionality required to create a game.\nTrainees completing the course will have the knowledge to create functional and useful grid system in order to build all kinds of game.",
      "target_audience": [
        "Web developer",
        "Game developer",
        "Javascript developer"
      ]
    },
    {
      "title": "Unreal Development Kit Game Programming with UnrealScript",
      "url": "https://www.udemy.com/course/unreal-development-kit-game-programming-with-unrealscript/",
      "bio": "Kick-start your career in game development with UnrealScript and the UDK",
      "objectives": [
        "Understand the UDK files and folders for working with UnrealScript",
        "Configure an IDE and the UDK Compiler to write and compile code and make debugging easier with custom console commands",
        "Grasp the basics of UnrealScript workflow for making games and use the UnrealScript class hierarchy to build new features",
        "Learn how to create states for working with timed behavior",
        "Make customizable classes with Config files that integrate with the UDK Editor",
        "Create feature-filled actors for your levels",
        "Build custom Kismet nodes to control the logic of your game"
      ],
      "course_content": {
        "Getting Started": [
          "Course Introduction",
          "Exploring the UDK Installation Folder",
          "Exploring UncodeX",
          "Configure Notepad++ for UnrealScript",
          "Compiling UnrealScript Source Code",
          "Compiling UnrealScript Source Code Using the FrontEnd"
        ],
        "Understanding the Class Tree and Making Custom Classes": [
          "Getting Started at UnrealScript Game Development",
          "The GameInfo Class",
          "GameInfo Basics",
          "Compiling GameInfo",
          "Testing GameInfo",
          "Appendix to Compiling"
        ],
        "Beginning a Power-Up Actor Class": [
          "Getting started with Actors",
          "Integrating Actors into the Actor Classes Tab",
          "Actors and Components",
          "Using Editor Properties",
          "Review",
          "Using the Content Browser to Help Code"
        ],
        "Refining the Power-Up Actor Class": [
          "Rotations in UnrealScript",
          "Testing the Rotation Code in the UDK Editor",
          "Collision Detection",
          "Using Class States",
          "Testing Class States"
        ],
        "Creating Game Logic with GameInfo": [
          "Starting to Code the Main Game Logic",
          "Refining Game Logic with GameInfo",
          "Tips and Tricks",
          "Inter-object Communication",
          "Testing the Game So Far"
        ],
        "Refining the Game with Exec Functions": [
          "Unreal Console",
          "Exploring Console Commands on the UDN",
          "Create New Console Commands",
          "Testing New Console Commands",
          "Review your Progress"
        ],
        "Customizing Kismet": [
          "Configuring the Level with Kismet and Matinee",
          "Customize Kismet with UnrealScript",
          "Testing the Kismet Node",
          "Activating Kismet Nodes",
          "Testing Kismet Functionality in the UDK Editor"
        ],
        "Moving Forward with Config Files": [
          "Config Files",
          "Customize GameInfo with Config Files",
          "Using the Config Keyword",
          "Using Config Files to Customize Game Settings",
          "Completing the Game"
        ]
      },
      "requirements": [
        "Taking a step-by-step approach, you’ll learn how to set up your development environment, discuss some core features of the UnrealScript programming language, and build a feature-filled game level in incremental stages."
      ],
      "description": "This course is a comprehensive introduction to UnrealScript presented by Alan Thorn, veteran game developer and author with over 12 years of industry experience. Taking a step-by-step approach, you’ll move from the basics of configuring the UDK and its files to coding a feature-filled game complete with timed behavior and editor integration.\nClear and concise, this course takes you from start to finish through the creation of a practical game in UnrealScript, demonstrating the core features of the language along the way. It starts by exploring how to configure UDK files and software and ends with a working game featuring time-limits, editor integration, component-based actors, and custom Kismet nodes.\nOverall, you’ll see how to build a game from the ground up. Along the way, you’ll explore core UnrealScript features such as console commands for improving debugging, class states for dynamically changing actor behavior, custom Kismet nodes to control program flow visually, the ability to tweak class settings through text-based configuration files, and much more besides.\nBy the end of this course, you’ll have coded a feature-filled game in UnrealScript and the UDK. In achieving this, you’ll establish a solid foundation in UnrealScript that you can utilize when building your own games.\nAbout the Author\nAlan Thorn is a London-based game developer, freelance programmer, and author with over 13 years of industry experience. He founded Wax Lyrical Games in 2010, and is the creator of the award-winning game, Baron Wittard: Nemesis of Ragnarok. He is the author of 10 video-training courses and 11 books on game development, including Unity 4 Fundamentals: Get Started at Making Games with Unity, Focal Press, UDK Game Development, and Pro Unity Game Development with C#, Apress. He is also a visiting lecturer on the Game Design & Development Masters Program at the National Film and Television School.",
      "target_audience": [
        "This course is intended for newcomers to UnrealScript. If you’re already using the UDK Editor and are familiar with programming basics, then this course will help you move up to the next level, orienting you with the UnrealScript language."
      ]
    },
    {
      "title": "Beginner's Swift 4 & Unreal Engine - Learn Xcode, Make Games",
      "url": "https://www.udemy.com/course/swiftunreal/",
      "bio": "*includes FREE eBook! Learn to code in Swift 4.0 & C++ with practical projects. Make apps in Xcode 9 & games in Unreal.",
      "objectives": [
        "Learn to code in C++ in Unreal",
        "Learn to make simple games from scratch.",
        "Navigate Xcode 9's interface.",
        "Make real apps from scratch.",
        "Code in Apple's programming language, Swift 4.0.",
        "Build apps for the iPhone from start to finish.",
        "Make the code AND the art for projects from scratch."
      ],
      "course_content": {},
      "requirements": [
        "To follow along in Xcode 9, you must have a Mac computer or MacOS software.",
        "Install the Unreal Engine.",
        "No prior experience necessary."
      ],
      "description": "\"This course is excellent. The explanations are comprehensive. The instructor is professional, friendly, and experienced. This will be fun and valuable to my personal toolbox.\" --Art in Memphis\nWant to make apps and learn to code? In Beginner's Swift 4 & Unreal Engine - Learn Xcode, Make Games, you learn to design and code practical apps from scratch!\nAnd learn how to code and make games in the popular Unreal Engine. Learn by building actual games.\nNo experience necessary. Even if you’ve never coded before, you can take this course.\nIncluded in this course is material for beginners to get comfortable with the interfaces. Please note that we reuse this material in similar courses because it is introductory material. You can find some material in this course in the following related courses:\nLearn to code by building 6 games in the Unreal Engine\nComplete Unreal & Android Development: Build Games & Code\nComplete 6 Games in Unreal Engine 4 and 20 in Construct 2\nUnreal Engine Game Mechanics Mastery & MakeHuman 3D Modeling\nComplete Developer Masterclass: Learn Angular 2 and Unreal\nMaster Unreal and Xamarin: Build Professional Games and Apps\nUnreal Engine 4 & Android Development: Make 6 Games, 12 Apps\niOS 11 & Swift 4.0 - A Beginner's Guide with Projects\nC# Unity and Swift 4 Masterclass: Make Games and Apps\nXamarin Start to Finish Android & iOS Apps (& Learn to Code)\nCode in Kotlin & Java for Android and Complete 5 iPhone Apps\nFinish 26 Games & Apps Quickly (GameMaker: Studio & Xcode)\nSwift 4 and ELM Masterclass | Make iOS 11 apps and web apps!\nLearn UI Mobile App Design & Game Mechanics in Construct 2\nThe Ultimate iOS 11 & Swift 4 Course. Learn to Build Apps!\nOne of the best features is that you can watch the tutorials at any speed you want. This means you can speed up or slow down the video if you want to.\nThis course is project-based. You follow along with your instructor to build real projects. The best way for you to learn how to make your own app is to follow project-based training content.\nBy taking this course, you learn practical, employable skills immediately. You can put the apps you make in this course in your portfolio!\nYour purchase includes the eBook \"Build 6 Games in Unreal\" by Mammoth Interactive (normally $25.99).\nYour teachers will teach you practical skills using real-world examples. Take this course to build your portfolio now!",
      "target_audience": [
        "Absolute beginners who want to learn to code.",
        "Beginners who want to be iOS developers.",
        "Absolute beginners to mobile development who want an introduction to Swift 4 and Xcode 9."
      ]
    },
    {
      "title": "Paint VFX Textures for Games",
      "url": "https://www.udemy.com/course/paint-vfx-textures-for-games/",
      "bio": "Learn how to create textures for particle effects and much more!",
      "objectives": [
        "learn how to use any painting app to draw VFX for games and interactive media",
        "improve your skill in the craft and get inspired",
        "useful knowhow which is directly applicable",
        "establish thinking in 3d volumes while using 2d textures"
      ],
      "course_content": {
        "Module 1 - Course Start": [
          "M1_Intro",
          "M1_PhotoshopSetup",
          "M1_References",
          "M1_SuperPNG",
          "M1_SaveAlpha",
          "M1_PSAction"
        ],
        "Module 2 - Basic Texture Creation": [
          "M2_Intro",
          "M2_Gradients",
          "M2_Smoke",
          "M2_SparksRadials",
          "M2_StarBurst",
          "M2_Impacts",
          "M2_Impacts Part 2",
          "M2_ShieldGlow"
        ],
        "Module 3 - Advanced Texture Creation & 3D Mapping": [
          "M3_Intro",
          "M3_WindTrail",
          "M3_ProjectileBullet",
          "M3_WaterWave",
          "M3_SmokeDash",
          "M3_SmokeDash Part2",
          "M3_3DMapping",
          "M3_Liquid",
          "M3_FireProjectile",
          "M3_ShockWaveTIle",
          "M3_Flames"
        ],
        "Module 4 - Advancements in Craft": [
          "M4_Intro",
          "M4_AnimeRef",
          "M4_GameRef"
        ],
        "Module 5 - Closing Works & Next Steps": [
          "M5_Intro - Resources - PS & Textures",
          "M5_GradientMapping",
          "M5_Greyscale",
          "M5_Texture Adjustments"
        ]
      },
      "requirements": [
        "basic ps experience",
        "basic game dev xp"
      ],
      "description": "Welcome to the Video Course on Game Texture Creation!\n\n\nAre you ready to dive into the exciting world of game texture creation? Join me, a highly qualified professional visual artist with over 9 years of industry experience, as we embark on a journey to master the art of developing stunning textures for VFX work in any game engine.\n\n\nIn this course, I'll guide you through the process of creating captivating textures, and here's the best part – you don't need any fancy equipment! Whether you're a seasoned artist or just starting out, all you need is a mouse and the desire to learn.\n\n\nAs a seasoned VFX artist and lead in the gaming industry, I'll be sharing my wealth of experience and insider tips to help you develop top-notch game assets. With proficiency in Unity and Unreal Engine, I've honed my skills in developing compelling design solutions that elevate audience engagement and awareness.\n\n\nThroughout the course, we'll work together to create and recreate textures, building a solid foundation in texture creation principles. Plus, stay tuned for future classes where we'll explore advanced topics like Flipbook animation and Unity particle effects!\n\n\nJoin me on this exciting adventure as we unlock the secrets of game texture creation together. Let's unleash our creativity and make magic happen in the world of gaming!",
      "target_audience": [
        "Game Dev",
        "VFX artist",
        "Game Artist",
        "Blender Artist",
        "Indie Dev"
      ]
    },
    {
      "title": "Designing game characters for 2D & 3D with Blender & Godot",
      "url": "https://www.udemy.com/course/designing-game-characters-for-2d-3d-with-blender-godot/",
      "bio": "Step by step game characters design with Blender & Godot",
      "objectives": [
        "Designing 3D characters with Blender",
        "Create a cel shading effect",
        "Render images to be used as animated sprite",
        "Export model as glTF",
        "Use shader editor to create cel shading effect",
        "Use the action editor to create non linear animations"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Creating the head": [
          "Creating the base. Pt 1.",
          "Creating the base. Pt 2.",
          "Creating the eyes.",
          "Creating the mouth.",
          "Adjusting the base. Pt 1.",
          "Using seams.",
          "Assigning the materials.",
          "Adjusting the base. Pt 2.",
          "Adjusting the base. Pt 3.",
          "Using Smooth Vertices.",
          "Adjusting the base. Pt 4.",
          "Creating the hair area.",
          "Adjusting the hair.",
          "Creating the long hair. Pt 1.",
          "Creating the long hair. Pt 2.",
          "Adjusting the long hair. Pt 1.",
          "Adjusting the long hair. Pt 2.",
          "Black outline preview."
        ],
        "Creating the body": [
          "Creating the neck. Pt 1.",
          "Creating the neck. Pt 2.",
          "Separating the neck. Pt 1.",
          "Separating the neck. Pt 2.",
          "Creating the torso.",
          "Creating the extremities",
          "Adjusting the body. Pt 1.",
          "Adjusting the body. Pt 2.",
          "Creating the hands and feet.",
          "Creating the skirt.",
          "Assigning the materials.",
          "Create the knees and elbows.",
          "Creating the second model.",
          "Adjusting the second model. Pt 1.",
          "Adjusting the second model. Pt 2.",
          "Black outline preview."
        ],
        "Joining head and body": [
          "Adjusting the folding areas. Pt 1.",
          "Adjusting the folding areas. Pt 2.",
          "Creating a second head.",
          "Preparing the neck area.",
          "Joining the body with the head.",
          "Applying changes in the second model."
        ],
        "Rigging. Pt 1": [
          "Adjusting the mouth.",
          "Adjusting the origin.",
          "Creating the armature. Pt 1.",
          "Creating the armature. Pt 2.",
          "Joining the model with the armature.",
          "Adding Inverse kinematic.",
          "Adjusting weights in edit mode. Pt 1.",
          "Adjusting weights in edit mode. Pt 2.",
          "Adding poles to inverse kinematics."
        ],
        "Rigging. Pt 2.": [
          "Creating the armature.",
          "Adding Inverse kinematic."
        ],
        "Mouth details": [
          "Fixing the mouth. Pt 1.",
          "Fixing the mouth. Pt 2."
        ],
        "Cel shading. Pt 1": [
          "Adding the nodes.",
          "Adding the color and tones.",
          "Copying nodes into another material.",
          "Adjusting the materials.",
          "Black outline."
        ],
        "Cel shading. Pt 2.": [
          "Adjusting the second model."
        ],
        "Creating the animation": [
          "TPose.",
          "Idle.",
          "Run. Pt 1.",
          "Run. Pt 2.",
          "Run. Pt 3.",
          "Working with the second model."
        ]
      },
      "requirements": [
        "Blender 3.x installed",
        "Godot 3.x installed",
        "Mouse and Keyboard (preferable with numeric keypad)",
        "Basic knowledge of Blender and Godot"
      ],
      "description": "Hello and welcome.\n\n\nIf you are a game designer or developer who is interested in creating your own animated sprites for 2D games or models for 3D games, this course is for you.\n\n\nThis course focuses on the creation of 3D models with their own animations that you can use in both 2D and 3D environments.\nFor this, we will use Blender as a 3D editor and Godot as a game engine where we will test the resources.\n\n\nIn Blender, we will create two models. Both models will have a cel shading effect that will make them look like a 2D image.\nBoth models will have an animation that will be rendered to be used as sprites. In addition, we will export the 3D model so that it can be used in external applications.\n\n\nIn GODOT, we will import the resources we have created and configure them in a 2D and 3D environment.\n\n\nIn this course you will learn:\nDesigning 3D characters with Blender\nCreate a cel shading effect\nRender images to be used as animated sprite\nExport model as glTF\nUse shader editor to create cel shading effect\nUse the action editor to create non linear animations\n\n\nThis course may be attractive to you because it can help you to create some basic character models that can be used in a 2D or 3D video game that you can then customize in more detail in your personal projects.\n\n\nIn addition, you will have access to the content created during the course.\n\nI hope you find the content useful and that you can apply it to your personal projects.\nHave fun and happy learning.",
      "target_audience": [
        "Designers and Game developers that want to create their how 2D and 3D resources with Blender"
      ]
    },
    {
      "title": "UE4 Different Game Mechanics At Work",
      "url": "https://www.udemy.com/course/unreal-engine-4-pack-3/",
      "bio": "UE4 Game Mechanics",
      "objectives": [],
      "course_content": {
        "Gapple": [
          "Introduction",
          "Getting Started",
          "Starting Grapple System",
          "Furthering Functionality of the Grapple",
          "Section Quiz"
        ],
        "Seeking Rocket": [
          "Seeking Rocket Start",
          "Adding to First Person Character",
          "Section 2 Quiz"
        ],
        "Double Jump/ High Jump/ Jetpack": [
          "Double Jump/ High Jump",
          "Jetpack (End)",
          "Section 3 Quiz"
        ]
      },
      "requirements": [
        "Have some knowledge in Unreal Engine 4 is preferred not required."
      ],
      "description": "Learn how to make 3 different types of simple game mechanics that you can add to your game!\nAll 3 are proof of concept ideas to help you understand how to reproduce them as you please!\nUsing Blueprint to learn how to make games in Unreal Engine 4! A Power House of a Game Engine!",
      "target_audience": [
        "Anyone who is willing to expand the knowledge!"
      ]
    },
    {
      "title": "JavaScript DOM Games course for Beginners Get started Coding",
      "url": "https://www.udemy.com/course/modern-javascript-dom/",
      "bio": "Create Interactive and Dynamic Web Page content with JavaScript DOM manipulation All JavaScript Document Object Model",
      "objectives": [
        "JavaScript DOM manipulation",
        "JavaScript to create interactive web pages",
        "Dynamic web pages with JavaScript",
        "JavaScript code to interact with HTML elements",
        "JavaScript to create a game",
        "Keyboard key press events using arrows to move page element div",
        "Use of animation frame for smooth web page movement"
      ],
      "course_content": {
        "Introduction to JavaScript DOM creating interactive Web pages and web content": [
          "Introduction to JavaScript to Create Interactive and Dynamic Web Content",
          "Course Source Code Guide - Lesson Challenges and Resource Links",
          "Web Dev Setup Coding IDE and Top Resources and how to use this Course",
          "JavaScript DOM Document Object Model Introduction to Selection",
          "Element Style Manipulation with JavaScript Update Color and Background Color",
          "Update Element Position Using JavaScript Move div with JavaScript Code",
          "AnimationFrames with JavaScript and KeyBoard EventListeners Movement Click Event",
          "Create Element using JavaScript and Randomly Place within Page Container Div",
          "How to Move element Randomly make clickable with JavaScript DOM",
          "How to add Collision Detection with JavaScript elements game JavaScript",
          "Scoring and Game Development with JavaScript Page Elements Final Gameplay",
          "Final Source Code for Simple Game Project"
        ],
        "Source Code Q&A help coding JavaScript DOM Questions and Answers Coding Examples": [
          "Creating and moving Page elements with JavaScript",
          "Source Code and Example Code DOM create and make interactive page elements",
          "Flatten a nested Array",
          "Learning Guides and resources PDF guides"
        ]
      },
      "requirements": [
        "JavaScript HTML and CSS",
        "Coding experience"
      ],
      "description": "JavaScript Explore what you can do with the Document Object Model making your web pages come to life!!!\nThe DOM is an object-oriented representation of the web page, which can be modified with JavaScript to Create Interactive and Dynamic Web Content\nSelect elements from the page\nUpdate Elements on the Page\nApply Styling to the style attribute\nTrack user interactions with Click events and keyboard events\nMove and manipulate page elements with JavaScript\nUpcoming lessons will show you how - to make you web pages come to life\nCreating a basic game project - where the player can move a page element using the keyboard. Also create new page elements - and automatically have new page elements added to the page when conditions are met. Creating a dynamic and interactive game that detects element collision and adds to the score. Move your element to hit the other elements on the page, score and see how new elements are created with a max number in from the code. Basic JavaScript Game structure that can be extended upon to build your own games and more.\nSource Code is included - Step by step PDF guide and more.\nSelection of page elements into JavaScript - select single or multiple Page elements with QuerySelector\nCourse Covers\nWeb Dev Setup Coding IDE and Resources - links and resources to setup introduction to course content.\nJavaScript DOM Document Object Model Introduction to Selection JavaScript element selection and manipulation of the text content.  Selection of page elements into JavaScript - select single or multiple Page elements with QuerySelector\nElement Style Manipulation with JavaScript Update Color and Background Color - Update manipulate the Element Style properties and add click events with JavaScript Event Listeners.   Create a mini project that updates the element background color when it is clicked.\nUpdate Element Position Using JavaScript - Move elements on the page update the element style left and top values with JavaScript.\nAnimationFrames with JavaScript and KeyBoard EventListeners Movement - Use of AnimationFrames to have smooth continuous movement of elements on the page.   Adding keyboard key presses to move element according to keypress event listeners.  Update element position with JavaScript.\nCreate Element using JavaScript and Randomly Place within Page Container Div Make new elements with JavaScript - using document create Element method to dynamically generate elements and add them to the HTML page.\nMove element Randomly make clickable Make new elements clickable and randomly move on the page.\nCollision Detection with JavaScript elements Add options to check collision between page elements.  Check top to bottom element dimensions and left to right comparing to detect if there is overlap.  If overlap happens, track as a collision.  Add the collision check to the JavaScript project checking for any collision between page elements.\nScoring and Game Development with JavaScript Page Elements Adding scoring to the gameplay - create gameplay and allow the user to progress in the game.  Game design and game concepts and how to apply it with JavaScript.\nFinal Gameplay of JavaScript DOM project\nSource Code is included\nTaught by an instructor with over 20 years of web development experience ready to help you learn more about JavaScript",
      "target_audience": [
        "JavaScript beginners",
        "Anyone who wants to create web pages",
        "Webmasters and web designers",
        "Web application developers",
        "Anyone who wants to create modern websites"
      ]
    },
    {
      "title": "Build Terrain for Games using World Machine",
      "url": "https://www.udemy.com/course/3dmotive-build-terrain-for-games-using-world-machine/",
      "bio": "Learn to sculpt terrain with Mudbox and setup our terrain for engines such as Unity3d, Cryengine 3, and Unreal Engine 4.",
      "objectives": [
        "Construct terrain with Mudbox and set it up for games using World Machine",
        "Learn to import your terrain into several game engines",
        "Learn to paint and sculpt terrain in 3d"
      ],
      "course_content": {
        "Starting our Terrain in Maya and Mudbox": [
          "Introduction",
          "Setting Up a Base Plane in Maya",
          "Sculpting Terrain in Mudbox",
          "Refining and Polishing the Terrain in Mudbox",
          "Exporting Terrain to World Machine",
          "Making the Final Terrain in World Machine"
        ],
        "Setting up in World Machine and Texturing in Photoshop": [
          "Introduction",
          "Making the Base Textures in World Machine",
          "Starting Textures in Photoshop",
          "Finishing Textures in Photoshop"
        ],
        "Exporting our Terrain for Common Game Engines": [
          "Introduction",
          "Exporting the Terrain to Unity3d",
          "Exporting the Terrain to CryEngine",
          "Exporting the Terrain to Unreal Engine 4",
          "Exporting the Terrain to Unreal Engine 4 (cont.) and Course Wrapup",
          "Bonus Lecture: Further Learning with 3dmotive"
        ]
      },
      "requirements": [
        "World Machine and Mudbox, though sculpting can be done in ZBrush as well.",
        "Adobe Photoshop is shown, though any similar image software will suffice"
      ],
      "description": "In this course, Emiel Sleegers will go over on how to make a terrain using both Mudbox and World Machine. First, he will start by creating a base plane in Maya and then sculpting the terrain in Mudbox. From there,we will go ahead and export it into world machine where we will add more detail to the terrain, as well as use Photoshop to generate the texture we plan on using, and once that is complete, we will export and setup our terrain for game engines such as Unity3d, Cryengine3, and Unreal Engine 4.\n(Students - please look under Section 1 / Lecture 1 downloads for the source files associated with the lesson.)\nMore about the Instructor:\nEmiel Sleegers is a self-taught 3d artist currently residing in the Netherlands. He's been teaching himself 3D art for the past 3-4 years, and has worked as a freelance artist on numerous unannounced projects. He's a lover of all things 3d and enjoys sharing the knowledge he has obtained with others eager to learn.",
      "target_audience": [
        "Intermediate to Advanced Game artists interested in building terrain for their games"
      ]
    },
    {
      "title": "Unity app development: Make a monetized gaming application",
      "url": "https://www.udemy.com/course/unity-3d-android-game-development-/",
      "bio": "Basic & advanced 3D Game Design with C# Coding. Monetise your games with Ads Suitable for Beginners - Intermediate",
      "objectives": [
        "Unity game development on android",
        "Build a complete Android/iOS Games In Unity",
        "Android game development",
        "Code Functionality In C#",
        "Have the skills and knowledge to build your own Games.",
        "Monetise Your Games With Ad Support"
      ],
      "course_content": {},
      "requirements": [
        "No programming experience necessary, all you need is a computer and an internet connection"
      ],
      "description": "In 2013 Dong Nguyen spent 2-3 days making a simple mobile game called Flappy Bird which went on to earn $50,000 a day in ad-sense revenue. Gaming industry is now increasing day by day and NOW is the best time to enter into it make a lot of name and money.\nIn this course, we will be making an addictive mobile game, that we will monetise with ads. We will cover all the basics of unity software and:\nInstalling and Using Unity\nMobile Setup\nVariables & Functions\nMaterials, 3D Models\nPlayer Movement\nMobile Input\nParticle system\nUnity asset store\nCamera Movement\nAdjusting Player Models\nProject Management\nPrefabricated Objects\nGrouping Prefabs\nScore System\nProcedural Level Generation\nObject Spawning\nRandomised Game Design\nObject Memory Management\nMenu Systems, Menu Layouts, Menu Animations\nSaving & Loading Data\nUnity Ads\nMonetisation Design Principles.",
      "target_audience": [
        "Beginner game developers who are curious about how to make games",
        "Programmers who want to learn how to make games",
        "People who want to learn developing games",
        "Make android gaming apps",
        "Make IOS gaming apps",
        "make indie games using unity software",
        "People who want to learn unity 3D",
        "how to make 3D games"
      ]
    },
    {
      "title": "Create Action 2D RPG Game in Unity",
      "url": "https://www.udemy.com/course/2d-action-rpg-game-for-intermediate-student/",
      "bio": "Create Action 2D RPG Game in Unity",
      "objectives": [
        "Learn basic to advance C#,",
        "Create Core Combat for ranged and special attack"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "New Unity Project"
        ],
        "Asset Preparation": [
          "Asset Preparation",
          "Background"
        ],
        "Player Movement": [
          "Introduction",
          "Player Into the world",
          "Player Movement",
          "Player Inherit From Charachter Script",
          "Player Idle Animation Part 1",
          "Idle Animation Part 2",
          "Walk Animation Part 1",
          "Walk Animation Part 2",
          "Walk Animation Part 3"
        ],
        "Health & Mana bar": [
          "Introduction",
          "Portrait Frame",
          "Health & Mana Bar Icon",
          "Health Bar",
          "Mana Bar",
          "Health&Mana Bar Text"
        ],
        "Player Improvement": [
          "Player Improvement Part 1 Rigidbody",
          "Player Improvement Part 2 Layerweight"
        ],
        "Player Attack": [
          "Player Attack Introduction",
          "Attack Animation",
          "Attack Animation Part 2",
          "Casting Spell Part 1",
          "Casting Spell Part 2",
          "Casting Spell Exit Point",
          "Line Of Attack View Part 1",
          "Line Of Attack View Part 2",
          "Line Of Attack View Part 3",
          "Selecting Attack Target"
        ],
        "Skill Buttons": [
          "Skill Buttons Introduction",
          "Skill Buttons Part 1",
          "Skill Buttons part 2",
          "Skill Buttons Key",
          "Skill Button Bug Fixed",
          "Spell Effect Part 1",
          "Spell Effect Part 2",
          "Animation Attack Bug Fixed"
        ],
        "Casting Bar": [
          "Skill Bar Introduction",
          "Casting Bar Part 1",
          "Casting Bar Part 2",
          "Casting Bar Part 3",
          "Casting Bar Part 4",
          "Casting bar Part 5",
          "Cast Bug Fixed"
        ],
        "Enemy Health": [
          "Enemy Health Introduction",
          "Enemy Health Bar",
          "Select/Deselect Enemy bug Fixed",
          "Enemy Taking Damage",
          "Enemy Death",
          "Enemy Portrait",
          "Select/Deselect Enemy Portrait",
          "Enemy Portrait Health Update",
          "Enemy Portrait Image Change",
          "Enemy Portrait Image Destroy event"
        ],
        "Enemy": [
          "Enemy Introduction",
          "Enemy follow Player",
          "Enemy Animations",
          "Enemy Idle and Walk",
          "Enemy State",
          "Enemy Attack State",
          "Enemy Attack Animation",
          "Enemy Death State",
          "Enemy Aggresion",
          "Course part 1 finished"
        ]
      },
      "requirements": [
        "You Should be able to write basic C#",
        "Know how to work with unity"
      ],
      "description": "Learn how to create your very own RPG game for mobile using Unity2D, an industry-standard program used by many large gaming studios and indie developers across the world.\nYou won’t just be learning programming concepts in this course, but tying these concepts to real game development uses.\nThis course has been designed to be easily understandable to everyone, so whether you’re a complete beginner,or Advance or an artist looking to expand their game development range or a programmer interested in understanding mobile game design, this course will help you gain a greater understanding of development.\nAt the end of this course you will have developed the ability to create such mobile game elements as:\nCreating Player and enemy\nAnimation\nEnemy State\nPlayer special Abilities\nAdding dangerous elements\nUser Interface with interactive menus\n\n\n\n\nStart learning today and let me help you become a mobile game developer!\n\n\n\n\nUnderstand how to earn revenue using advertising in their games\nLearn C#, a modern versatile programming language\nUnderstand the capabilities of mobile development in Unity\nDevelop strong and transferable problem solving skills\nGain an understanding of the game development process\n\n\nMac or PC capable of running Unity 3D\nThe latest version of Unity 3D\n\n\nAnyone who wants to make their own mobile games\nAnyone interested in learning to publish apps to the Play Store\nComplete beginners with an interest in learning mobile game development\nDevelopers who want to re-skill across to mobile development\nPeople who want to create and publish their own mobile game",
      "target_audience": [
        "Beginner and Advance"
      ]
    },
    {
      "title": "Learn to Create a Multiplayer shooter in Unity using Netick",
      "url": "https://www.udemy.com/course/learn-to-create-a-competitive-shooter-in-unity-using-netick/",
      "bio": "Build a 3D Professional Online Multiplayer Game In Unity using Netick! Learn Netick networking with C#, 2024 Guide!",
      "objectives": [
        "Learn How client-server interaction in multiplayer games",
        "How to build your first polished multiplayer games",
        "How to use Netick and use It to build high quality multiplayer games",
        "Writing Clean code architecture for games",
        "Learn Unity Netcodes comparison for your needs"
      ],
      "course_content": {
        "Introduction - Client/Server in Multiplayer games": [
          "Basic Client-Server",
          "What so Sync in Multiplayer Games?",
          "Client-server Authority Types",
          "Tickrates, Client-side Prediction, Resimulation",
          "Interpolation"
        ],
        "Project Creation": [
          "Project Setup",
          "Netick Network Callbacks",
          "Session Creation"
        ],
        "Gameplay Implementation": [
          "Top Down Movement - P1",
          "Top Down Movement - P2",
          "Top Down Rotation",
          "Player Animation",
          "Basic Spawning",
          "Fixing Player Animation",
          "Player Manager",
          "Player Manager - Fix Racing Condition",
          "Player Nickname",
          "Weapon Shooting - Theory - P1 - Projectile vs Hitscan",
          "Weapon Shooting - Theory - P2- Lag Compensation",
          "Weapon Shooting - Programming - P1 - Raycast",
          "Weapon Shooting - Programming - P2 - Bullet Projectile VFX",
          "Weapon Shooting - Programming - P3 - Bullet Impact VFX",
          "Weapon Shooting - Programming - P4 - Muzzle Flash",
          "Weapon Shooting - Programming - P5 - Reloading",
          "Reload Animation",
          "Simple UI Gameplay",
          "Manual Weapon Reloading",
          "Health System - Mechanic & VFX",
          "Fix Health VFX TickTimer",
          "Spawn & Respawning",
          "Scoring System",
          "Gamemode System",
          "UI Scoring",
          "Camera System",
          "UI Nametag",
          "UI Match",
          "UI Endgame",
          "Player Material Ally vs Enemy",
          "Fixes - Nametag Size & Color",
          "Handling Client Disconnection (Despawning)",
          "Fix Rigidbody (Move Itself)",
          "Camera Shaker",
          "Audio Implementation",
          "Level Design",
          "Spawnpoints",
          "Fix - Player Movement",
          "Fix - Projectile Lifetime",
          "Main Menu",
          "Player Nickname - Advanced",
          "Removing Old Nickname",
          "Fix - Bullet Travel",
          "Fix - Weapon Origin Point on Client",
          "Network Shutdown",
          "Fix - UI Endgame",
          "Applying Netick Settings",
          "Netick Settings Explanation",
          "Closing"
        ],
        "Bonus": [
          "When to use RPC?",
          "Simulating Lag",
          "Choosing Netcode",
          "Relay & NAT",
          "Interest Management"
        ],
        "Closing": [
          "Netick Discord",
          "What's Next?"
        ]
      },
      "requirements": [
        "Recommended of Unity & C# Experience of 1-2 Year (Hobbyist)",
        "Has played several of multiplayer games",
        "Network engineering is not required but a bonus skill"
      ],
      "description": "Greetings, fellow indie game developer! If you're keen on mastering the creation of a 3D multiplayer game using Netick, you've come to the right place. Welcome aboard!\nIn this comprehensive Udemy course, we'll start the of multiplayer game development, leveraging Unity alongside the cutting-edge networking solution, Netick.\nRest assured, you won't miss a beat! This course will stay updated to reflect any significant API changes.\nIf you're wanted to explore multiplayer development, especially with a focus on using Netick, enroll today and embark on your journey to creating your own 3D multiplayer game in Unity to build your own shooter today.\n\n\nKey Course Highlights:\nLearning the fundamentals of the server-client model, elucidating concepts such as client-side prediction and server reconciliation.\nImplementing direct matchmaking functionalities, including hosting rooms, joining rooms\nDeveloping respawn logic for seamless player re-entry into the game.\nCrafting clean and scalable code architecture.\nCreating match timers and end-game logic.\nManaging player damage and health mechanics.\nSynchronizing player visuals, such as weapon kick, muzzle effects, and animations.\nLearning how to simulate lag for effective testing.\nConstructing a dynamic scoreboard.\nContinuous updates to accommodate any major API changes.\nHow to utilize Unity Package Manager actively\nLearn Lag Compensation vs default PhysX",
      "target_audience": [
        "Unity Game developer who wants to level up & build multiplayer games"
      ]
    },
    {
      "title": "Master GDScript from Scratch with Godot 4 Games",
      "url": "https://www.udemy.com/course/master-gdscript-from-scratch-with-godot-4-games/",
      "bio": "Master loops, signals, UI & object-oriented coding in Godot 4 with hands-on GDScript game dev projects.",
      "objectives": [
        "Write clean GDScript code using variables, data types, conditions, loops, and functions from scratch.",
        "Build complete 2D games by creating scenes, sprites, UI elements, and logic using the Godot 4 engine.",
        "Use signals and AutoLoad scripts to create responsive, modular, and scalable game architecture.",
        "Design interactive user interfaces with menus, HUDs, buttons, and visual feedback using Godot’s UI tools.",
        "Apply object-oriented programming principles including custom classes, inheritance, constructors, and method overriding.",
        "Handle gameplay logic and decision flow with match statements, enums, conditions, and event-driven code.",
        "Create polished game mechanics like animations, scene transitions, parallax backgrounds, and sound effects",
        "Complete multiple real-world game projects including Spectrum Catch, Rock Paper Scissors, and Mines Detective."
      ],
      "course_content": {
        "Welcome": [
          "Course Introduction",
          "Roadmap"
        ],
        "Intro to Godot & GDScript": [
          "What is GDScript?",
          "Setting Up Godot Engine",
          "Creating Your First Project",
          "Godot Interface Tour",
          "Your First Scene",
          "Your First Script",
          "Wrap-Up",
          "Essentials Quiz"
        ],
        "GDScript Syntax Basics": [
          "Mastering the print function",
          "Identifying GDScript Errors",
          "Naming Conventions and Formatting",
          "Exploring Built-in Functions: Ready, Process, and Physics Process Unlocked",
          "Wrap-Up",
          "Syntax Basics Quiz"
        ],
        "Variables and Data Types": [
          "Module Introduction",
          "Understanding Variables",
          "Understanding Data Types",
          "Primitive Data Types",
          "Variant",
          "Enum",
          "Static Typing",
          "Objects as Data Types",
          "Containers",
          "Arrays",
          "Dictionary",
          "Vectors",
          "Constants",
          "Type Inference",
          "Operations",
          "Wrap-Up",
          "Variables and Data Types Quiz"
        ],
        "Conditions": [
          "Introduction",
          "If Conditions",
          "Match Conditions",
          "Wrap-Up",
          "Conditions Quiz"
        ],
        "Loops": [
          "Introduction",
          "Loops",
          "Wrap-Up",
          "Loops Quiz"
        ],
        "Functions": [
          "Understanding Functions",
          "Simple Platformer Game Demo",
          "Pixie Realms - Project Setup",
          "Pixie Realms - Character Controller",
          "Pixie Realms - Character Animation",
          "Pixie Realms - Parallax Background",
          "Pixie Realms - A Goal To Accomplish",
          "Wrap-Up",
          "Functions Quiz"
        ],
        "Signals and Interactivity": [
          "Understanding Signals",
          "Signals Demo Game",
          "Signals Demo - Game Menu",
          "Signals Demo - Main Scene Design",
          "Signals Demo - Main Scene Functionality",
          "Signals Demo - Add a Win Condition",
          "Signals Demo - HUD",
          "Wrap-Up",
          "Signals Quiz"
        ],
        "Singletons": [
          "Understanding Singletons",
          "Create Your First Global Script",
          "Game Manager",
          "Node Repositioning",
          "Wrap-Up",
          "Singletons Quiz"
        ],
        "Building Two Games to Recap": [
          "Spectrum Catch Game Demo",
          "Spectrum Catch Project Setup",
          "Spectrum Catch Final Steps",
          "Rock, Paper, Scissors Game Demo",
          "Rock, Paper, Scissors Project Setup and Menu UI",
          "Rock, Paper, Scissors Main Scene UI",
          "Rock, Paper, Scissors Adding Functionality",
          "Rock, Paper, Scissors Animations",
          "Rock, Paper, Scissors Scene Transition"
        ]
      },
      "requirements": [
        "Basic Computer Skills – Comfort with using a mouse, keyboard, and navigating folders and files. No programming experience needed.",
        "A PC or Laptop – Preferably running Windows, macOS, or Linux that can smoothly run Godot 4.",
        "Internet Access – Required to download the Godot engine and access all learning materials included in this course.",
        "Curiosity and Creativity – A mindset ready to explore, experiment, and build cool things from scratch.",
        "Time and Commitment – At least a few hours per week to follow lessons and complete game projects."
      ],
      "description": "Ready to transform your ideas into playable experiences? Whether you’re an absolute beginner or have dabbled in coding before, this GDScript-driven Godot Masterclass guides you from zero to building real, interactive games—step by step.\nIn this hands-on course, you’ll learn to code with GDScript, the intuitive scripting language tailored for the Godot 4 game engine. We start from the very basics—setting up the engine, writing your first line of code, and creating a simple scene—and progress all the way to full-featured games packed with animation, interactivity, and smart logic.\nWhat You’ll Build and Learn:\nCreate multiple 2D games from scratch, including platformers, arcade-style challenges, and even a full logic-based puzzle game.\nMaster GDScript fundamentals, including variables, data types, conditions, loops, functions, and object-oriented programming with custom classes.\nUse powerful Godot features like signals, HUD scenes, and AnimationPlayer to create dynamic, responsive gameplay.\nImplement Singletons (AutoLoad scripts) to manage global game state and polish your architecture for scalable design.\nExplore UI design, parallax backgrounds, collision detection, enums, tweening, and scene transitions with clarity and control.\nEach module is structured to build progressively, combining real code and real projects with clear teaching and demos. You won’t just follow along—you’ll build, experiment, and evolve as a game developer with every lesson.\nBy the end of this course, you’ll have:\nConfidence in writing clean GDScript code\nA portfolio of completed mini-games\nA deep understanding of Godot 4 workflows and scripting architecture\nThe tools to build your own original games from the ground up\nNo prior experience required—just curiosity, creativity, and a love for games.\nWhether you want to become an indie developer, make games for fun, or prepare for a studio role, this course gives you the real-world foundations to start building your dreams. Let’s turn code into gameplay—from scratch.",
      "target_audience": [
        "Absolute Beginners in Coding or Game Development",
        "Aspiring Indie Game Creators",
        "Students and Hobbyists",
        "Artists & Designers Wanting to Learn Logic",
        "Gamers Who Want to Build What They Play"
      ]
    },
    {
      "title": "Roblox Studio GUI: Full Roblox Development Guide 2024",
      "url": "https://www.udemy.com/course/byteblox-gui/",
      "bio": "A full, throughly-explained guide for Roblox Studio GUI",
      "objectives": [
        "Roblox Studio basics",
        "Basic/advanced GUI scripting",
        "Animating GUI",
        "Expert-level knowledge on Roblox GUI"
      ],
      "course_content": {
        "Unit 1: The Basics": [
          "Introduction",
          "Explorer window",
          "Properties window"
        ],
        "Unit 2: UI Basics": [
          "UI overview",
          "Adding UI elements",
          "Designing the UI"
        ],
        "Unit 3: UI Scripting": [
          "Basic scripting",
          "Events/functions",
          "RemoteEvents"
        ],
        "Unit 4: UI Instances": [
          "All UI modifiers",
          "All UI elements",
          "All UI screens"
        ],
        "Unit 5: UI Animation": [
          "Tweening overview",
          "Advanced tweening",
          "Basic tweening"
        ],
        "Unit 6: Final UI": [
          "Creating our unique GUI",
          "Scripting our GUI"
        ]
      },
      "requirements": [
        "Just a laptop"
      ],
      "description": "As a beginner, I struggled heavily with Roblox GUI. Even though it seems simple to me now, back then I had to learn what EVERY single GUI item does, how to properly script them, how to animate them, do client-to-server communication, etc\n\nMy goal with this course is to fully teach you about how Roblox GUI works. Instead of spending 2 years barely understanding GUI as I have, I will hold your hand throughout this entire process and guide you, step by step, to become an expert on Roblox GUI (and just on the concept of UI in general)\n\nAnd don't worry, I won't just barrage you with information out of nowhere. I've consumed many guides in the past which did this, and that's an issue because I never remembered anything they would teach me. The ONLY method that would actually work for me was learning GUI when I actually needed the GUI. And bit by bit, I was able to fully grasp how Roblox GUI works\n\nI have taken every little bit that I've learned about GUI over the years and stuffed them into this organized course. This course is meant to lead you to an expert level knowledge on GUI, avoiding all the mistakes that have slowed me down. If that sounds like a good offer, I hope to see you inside this course",
      "target_audience": [
        "Roblox developers wanting to fully grasp Roblox GUI"
      ]
    },
    {
      "title": "Complete 2D Platformer in Unity C# For Beginners",
      "url": "https://www.udemy.com/course/complete-2d-platformer-in-unity-c-for-beginners/",
      "bio": "Learn C# with Unity and create your own 2D Platformer Game!",
      "objectives": [
        "Students will gain a solid understanding of Unity's interface and key features necessary for 2D game development.",
        "Understand how to implement responsive player controls for a platformer game, including character movement, jumping, and other essential actions.",
        "Explore Unity's 2D physics system, covering concepts like rigidbodies, colliders, and gravity to create realistic interactions between game elements.",
        "Dive into level design principles, including creating platforms, obstacles, and challenges to provide an engaging and dynamic gameplay experience.",
        "Learn to create and implement user interfaces for displaying essential information such as scores, lives, and other relevant game data.",
        "Introduce basic enemy AI behaviors, including patrolling"
      ],
      "course_content": {
        "Player": [
          "Adding Player",
          "Setting up Player",
          "Player Movement",
          "Jumping",
          "Jumping Fix",
          "Changing directions",
          "Creating Animations",
          "Animator",
          "Setting up Animations"
        ],
        "Enviroment": [
          "Map Design",
          "Camera"
        ],
        "Health System": [
          "Setting up Health",
          "Health Mechanics",
          "HealthBar",
          "Immortality",
          "Visual Effects"
        ],
        "Respawning": [
          "Respawn",
          "Checkpoints"
        ],
        "Scoring System": [
          "Scoring",
          "Score UI"
        ],
        "Enemies": [
          "Adding Enemy",
          "Patrolling",
          "Adding More enemies"
        ],
        "Menus": [
          "Menus",
          "Main Menu Buttons",
          "Pause Menu",
          "Pause Menu Buttons",
          "Fixing Bugs"
        ],
        "Audio": [
          "Adding Sounds",
          "More Sounds",
          "Pitch",
          "BGM"
        ],
        "Levels": [
          "Creating Levels",
          "Level Transition"
        ],
        "More Level Mechanics": [
          "One way Platform",
          "Moving Platform",
          "Moving Platform part 2",
          "Falling platform",
          "Dashing",
          "Final Touches",
          "Final Project"
        ]
      },
      "requirements": [
        "Mac or PC capable of running Unity 3D",
        "A copy of Unity 2021 or newer"
      ],
      "description": "Unlock the exciting world of game development with our comprehensive Udemy course, \"2D Game Development in Unity: A Beginner's Guide.\" Designed for absolute beginners, this course is your gateway to creating captivating 2D platformer games from scratch.\nWhat You'll Learn:\nUnity Fundamentals: Familiarize yourself with the Unity interface and essential tools to kickstart your game development journey.\nSprite Creation and Animation: Master the art of designing and animating 2D sprites, bringing your game characters and elements to life.\nPlayer Controls: Implement responsive and intuitive controls for character movement, jumping, and other essential actions.\nPhysics and Colliders: Dive into Unity's 2D physics system to create realistic interactions between game objects, ensuring an immersive gaming experience.\nLevel Design: Explore the principles of level design to craft engaging environments, platforms, obstacles, and challenges for your players.\nCamera and Follow Systems: Develop a camera system that smoothly follows the player, providing optimal visibility and enhancing gameplay.\nEnemy AI: Introduce basic enemy AI behaviors, adding challenges and dynamics to your game world.\nUI Design: Learn to create user interfaces for displaying scores, lives, and other crucial in-game information.\nSound and Music Integration: Enhance the gaming experience by integrating sound effects and background music seamlessly into your project.\nPolishing and Optimization: Polish your game, optimize performance, and troubleshoot common issues to ensure a seamless player experience.\nPublishing and Distribution: Gain insights into the process of publishing your 2D platformer game on various platforms.\nWho Is This Course For?\nThis course is perfect for absolute beginners, including:\nAspiring game developers looking to start with 2D games.\nUnity enthusiasts with limited experience in game development.\nStudents and hobbyists eager to explore game design.\nIndividuals interested in creative storytelling through interactive games.\nEmbark on your game development journey today! Enroll now and bring your game ideas to life with \"2D Game Development in Unity: A Beginner's Guide.\"",
      "target_audience": [
        "This course is tailored for individuals who are new to game development and want to start with 2D games using Unity.",
        "Ideal for those with a passion for Unity but limited experience, providing a beginner-friendly introduction to game development.",
        "Geared towards individuals who aspire to design their own games and are looking for a foundational course in 2D game development.",
        "Suited for those who may have basic programming knowledge or are entirely new to coding, as the course covers game development concepts in a beginner-friendly manner."
      ]
    },
    {
      "title": "Computer and Video Game Theory for Independent Developers",
      "url": "https://www.udemy.com/course/computergametheory/",
      "bio": "Also known as, \"So you want to make computer games\"",
      "objectives": [
        "A clearer idea of the direction you need to go, in order to make a game.",
        "Important things to research when designing your games.",
        "Some of the pitfalls to avoid when making a game.",
        "An idea of the mindset you need to make your game work the way you want it to."
      ],
      "course_content": {
        "Introduction": [
          "What's it all about?",
          "Introduction"
        ],
        "Ideas": [
          "Ideas",
          "Keep an 'Ideas' log",
          "Ideas Quiz"
        ],
        "Game Concepts": [
          "Game Concepts",
          "Game Concepts - Remakes",
          "Game Concepts - Existing Genres",
          "Game Concepts - New Game Types",
          "Game Concepts Quiz",
          "Games and their categories"
        ],
        "Big Questions": [
          "Big Questions",
          "Big Questions - Who...?",
          "Big Questions - What...?",
          "Big Questions - Why...?",
          "Big Questions - How...?",
          "Big Questions Quiz"
        ],
        "Psychology": [
          "Psychology",
          "Psychology - The Aim",
          "Psychology - If You Build It...",
          "Psychology - Another Golden Goose",
          "Psychology - Where Will It All End?",
          "Psychology - Your Mission, Should You Choose To Accept It...",
          "Psychology - The First Few Minutes",
          "Psychology - The Human Element",
          "Psychology in Gaming"
        ],
        "Thinking Differently": [
          "Think Differently",
          "Think Differently - Think of a Dishwasher",
          "Think Differently - Computing Power",
          "Think Differently - Pick a Card",
          "Think Differently - Pick a Card, Human",
          "Think Differently - Pick a Card, Computer",
          "Think Differently Quiz"
        ],
        "Interactive Devices": [
          "Interactive Devices",
          "Interactive Devices - Need Input",
          "Interactive Devices - Ghost in the Machine",
          "Interactive Devices - Ghosts",
          "Interactive Devices - Masks",
          "Interactive Devices - Ghosts and Masks Fix",
          "Input Quiz",
          "Interactive Devices - Touchy Touchy",
          "Interactive Devices - Resistive Touchscreens",
          "Interactive Devices - Capacitive Touchscreens",
          "Interactive Devices - Optical Touchscreens",
          "Interactive Devices - Touchscreen Conclusion",
          "Touchscreens Quiz",
          "Interactive Devices - The Motion Notion",
          "Interactive Devices - Virtual Reality",
          "Interactive Devices - Camera Based Motion",
          "Motion Control Quiz"
        ],
        "The Formula": [
          "The Formula",
          "The Formula - Example 1, Travelling to the 3rd Dimension",
          "The Formula - Example 2, When Worlds Collide",
          "The Formula - Conclusion",
          "Simple Maths Assignment"
        ],
        "Make Your Own: Fruit Slice Game": [
          "Fruit Slice - The Game Concept",
          "Fruit Slice - Hidden Rules",
          "Fruit Slice - Flying Gravity Fruit",
          "Fruit Slice - Slicing With a Finger",
          "Fruit Slice - Slicing the Fruit",
          "Fruit Slice - What Next?"
        ],
        "Make Your Own: Mazes": [
          "Mazes - An Introduction to Generated Levels/Maps",
          "Mazes - What You Will Learn About Amazing Mazes",
          "Mazes - A World of Walls and Algorithms",
          "Mazes - The Theory and How It Works",
          "Mazes - Demo Mazes to Show Our Theory in Action",
          "Mazes - Important Notes",
          "Mazes - A Real Game Using These Methods"
        ]
      },
      "requirements": [
        "A passion for computer games and a desire to make your own.",
        "No previous game making skills are required."
      ],
      "description": "During this course you will learn all about the skills and mindset needed to develop computer games as an indie or hobbiest game maker. We will cover such topics as:\nComing up with a good idea for your game.\nSome BIG questions to ask yourself to ensure your game will work how you want it to work.\nLearn a little about the psychology of your gamers so they keep playing.\nThinking differently so your games run efficiently on the devices they are designed for.\nThe hardware your games will run on, taking advantage of their features and avoiding their limitations.\nA little about the importance of maths with examples showing why.\nEverything you need to make your own \"Fruit Slice\" game, including the pseudo code, mechanics and maths.\nEverything you need to make your own \"Mazes\" and randomly generated maps/levels, including pseudo code and a simple algorithm.\nArtificial Intelligence in video games, and how to make your own simple Neural Network to improve realism and engage players.\nPathfinding for players and computer controlled characters to find their way around the play area, including a simplified \"A*\" type algorithm.\nFinishing and testing your games, and what to do next.\nHopefully you will come away full of ideas and with the ability to plan your games better, whether you are a beginner or already working in the industry.",
      "target_audience": [
        "Anyone interested in learning to create video games, from beginners to those already in the business."
      ]
    },
    {
      "title": "Unreal Engine 5: Crowd creation in the Niagara and Blueprint",
      "url": "https://www.udemy.com/course/unreal-engine-5-crowd-creation-in-the-niagara-system/",
      "bio": "Learn how to create a crowd using Niagara and Blueprint in Unreal Engine.",
      "objectives": [
        "Completely basic knowledge of the Niagara system in Unreal Engine 5",
        "Learn how to create a vertex animation shader in Unreal Engine 5",
        "Learn how to Create a crowd in Niagara and customize it in Unreal Engine 5",
        "Learn how to work with blueprints in Niagara system in Unreal Engine 5",
        "Learn how to customize a character, retargeting and aimofset in Unreal Engine 5"
      ],
      "course_content": {
        "Basic knowledge of the Niagara System.": [
          "Niagara system Introctution. Part 1",
          "Niagara system Introctution. Part 2",
          "Niagara system Introctution. Part 3",
          "Niagara system Introctution. Part 4",
          "Creating Fire. Part 1",
          "Creating Fire. Part 2"
        ],
        "Creating a Crowd in the Niagara System": [
          "Creating a vertex animation shader",
          "Creating a Crowd of rats",
          "Character retargeting and creating aimoffset",
          "Creating a flamethrower",
          "Creating Blueprint in Niagara system",
          "Creating a Player Character Blueprint",
          "Creating Volume"
        ]
      },
      "requirements": [
        "For this course, you will need Unreal Engine 5."
      ],
      "description": "In this course, you will learn how to work in the Niagara system in Unreal Engine, how to create particles and crowds. You will also learn how to influence crowds with a player character through Blueprint.\n\n\nWe are start with the basics. We'll take a detailed look at what an emitter is and how to work with it in the Niagara system in Unreal Engine. How to Create particles and different effects in Unreal Engine. We will talk about modules, their structure and how the sequence of modules affects the crowd effect in Unreal Engine 5. Then we will consolidate our knowledge with an example of creating fire and proceed to create a crowd of rats in Unreal Engine 5. First we'll Create the vertex animation shader, then we'll move on to creating and customizing particles in Unreal Engine. Next, we'll customize the character, retarget and move the crosshairs, and customize the weapons and animations in Unreal Engine. We'll also Create a flamethrower effect and make its action as realistic as possible in a crowd of rats in Unreal Engine. Next, we'll work with Blueprints and learn how to locally kill particles in a crowd in Unreal Engine 5. This is a very interesting point. We will also learn how to work with Blueprints in the Niagara system.\n\n\nFinally, we will customize our effect, also learn all the points and learn how to work professionally in Unreal Engine 5.",
      "target_audience": [
        "For game developers, animators, 3d designers, and anyone who wants to learn how to work with particles in Unreal Engine 5."
      ]
    },
    {
      "title": "Procedural Materials with Photoshop & Substance Designer",
      "url": "https://www.udemy.com/course/procedural-materials-with-photoshop-substance-designer/",
      "bio": "Creating seamless textures in Photoshop and turning them into procedural/animated Substance Designer Materials.",
      "objectives": [
        "You'll be able to create your own custom seamless set of textures in Photoshop.",
        "You'll be able to take your seamless textures into Substance Designer and turn them into a procedural PBR material."
      ],
      "course_content": {
        "Creating Procedural Hand-Painted Materials with Photoshop & Substance Designer": [
          "Making a Seamless Color Map in Photoshop",
          "Building the Height Map in Photoshop",
          "Finishing the Photoshop Maps",
          "Bringing the Maps into Substance Designer",
          "Setting Up Metallic Veins Input Parameters",
          "Creating Lava Masks in Photoshop & Setting Up Scaling in Substance",
          "Building the Lava Emissive",
          "Fine Tuning & Animating the Lava"
        ]
      },
      "requirements": [
        "You should have at least a beginner's knowledge of both Photoshop & Substance.",
        "We will be using Photoshop, Substance Designer and Substance Player"
      ],
      "description": "In this course we take a look at the various ways we can use photos and other 2D images to create seamless Substance Designer materials. By creating a linked workflow between Photoshop and Substance we'll take advantage of the tools both these programs have to offer to create procedural hand-painted materials.\nWe start by creating a seamless hand-painted color map from images off the Internet. Once our color map is complete, we use it as a guide for creating all the other maps and masks we'll need for our material.\nAfter finishing the basics in Photoshop, we set up a linked workflow with Substance Designer that will allow us to view our progress in the Substance 3D view, and easily adjust our maps in Photoshop. Here we'll further refine our 2D maps by using some of the nodes available in Substance Designer.\nWe'll also add procedural qualities to our material. First we'll add some metal veins that can fade in and out and then an animated lava that can be toggled on and off.",
      "target_audience": [
        "Anyone who wants to convert photos and other 2D images to procedural Substance Designer materials."
      ]
    },
    {
      "title": "Creating a 2D PC Space Invaders Arcade Game Using Unity, C#",
      "url": "https://www.udemy.com/course/creating-a-space-invaders-game-using-unity-and-c-sharp/",
      "bio": "Learn how to make a complete Space Invaders game with multiple levels, sound effects from a 40 year programming veteran",
      "objectives": [
        "How to create a moving star field background for the game",
        "How to create the player, enemies, player projectiles and enemy projectiles and make them move",
        "How to detect when the player and enemies are hit by projectiles",
        "How to determine when the game is won and lost",
        "How to add multple levels to the game",
        "How to add sound effects to the game",
        "How to make the game as easy or hard to win as you like"
      ],
      "course_content": {
        "Getting Started": [
          "Introduction",
          "Getting Unity",
          "Creating a Project",
          "Creating a Moving Star Field Background",
          "Getting Asset Packages",
          "Asset Package Files Download",
          "Importing Asset Package Files"
        ],
        "Create the Player and Player Projectile": [
          "Creating the Player Object",
          "Creating the PlayerController Script",
          "Preventing the Player from Moving Off Screen",
          "Creating the Player Projectile Prefab",
          "Creating the Player Projectile with Code",
          "Moving the Player Projectile"
        ],
        "Create the Enemy Group and Enemy Projectile": [
          "Creating Game and Enemy Objects",
          "Coding the Creation of the Enemies - Variables",
          "Coding the Creation of the Enemies - Code",
          "Making Enemies Disappear When Hit",
          "Restricting Player Fire to One at a Time",
          "Moving the Enemies Horizontally",
          "Moving the Enemies Vertically",
          "Generating Enemy Fire - Variables",
          "Generating Enemy Fire - Code",
          "Making Enemy Projectiles Move - CHALLENGE",
          "Making Player Disappear When HIt"
        ],
        "Manage Object Movement": [
          "Stopping Unwanted Object Movement Due to Collisions",
          "Stopping Player Projectiles Moving Off the Top of the Screen",
          "Stopping Enemy Projectiles Moving Off the Bottom of the Screen - CHALLENGE"
        ],
        "Manage Lives with Start Game and End Game Events": [
          "Creating LIves - Objects",
          "Creating LIves - Variables",
          "Controlling When Enemies Start and Stop Moving and Firing - Part 1",
          "Controlling When Enemies Start and Stop Moving and Firing - Part 2",
          "Removing a Life Each Time the Player is Hit",
          "Ending the Game When the Player is Hit After All Lives Lost",
          "Ending the Game When the Enemy Breaches the Player Row",
          "Ending the Game When the Player Knocks Out All Enemies"
        ],
        "Create Score and Level Displays": [
          "Creating Score Display - Objects",
          "Creating Score Display - Code",
          "Creating Level Display - Objects - Part 1",
          "Creating Level Display - Objects - Part 2",
          "Creating Level Display - Variables",
          "Creating the Level Display - Code"
        ],
        "Create Dialogs": [
          "Creating the Start Game Dialog - Panels",
          "Creating the Start Game Dialog - Play Game Button",
          "Creating the Start Game Dialog - Enemy Speed Text",
          "Creating the Start Game Dialog - Enemy Fire Rate Text",
          "Creating the Start Game Dialog - Hit Points and Control Keys Text",
          "Creating the Dialog Border - Objects",
          "Creating the Start Game Dialog - Variables",
          "Creating the Start Game Dialog - Code",
          "Creating the End Game Dialog - Objects",
          "Creating the End Game Dialog - Code - Game Lost",
          "Creating the End Game Dialog - Code - Game Won - CHALLENGE",
          "Creating the Exit Game Dialog - Objects",
          "Creating the Exit Game Dialog - Code"
        ],
        "Manage Restarting the Game, Leveling Up and Resetting the Game": [
          "Restart, Level Up and Reset - Variables",
          "Restarting the Game - Code",
          "Leveling Up - Code",
          "Resetting the Game - Setup",
          "Resetting the Game - Destroy Projectiles",
          "Resetting the Game - Restore LIves",
          "Resetting the Game - Restore Enemies",
          "Resetting the Game - Reset Enemy Movement / Fire Variables and Player Position"
        ],
        "Add Sound Effects": [
          "Adding Sound Effects - Setup",
          "Adding Sound Effects - Enemy HIt",
          "Adding Sound Effects - Player Fires",
          "Adding Sound Effects - Player Hit - CHALLENGE",
          "Adding Sound Effects - Enemy Movement",
          "Adding Sound Effects - Toggle Sound On and Off"
        ],
        "Finishing Up": [
          "Conducting Final Testing",
          "Building a Standalone Application",
          "Conclusion",
          "Project Files"
        ]
      },
      "requirements": [
        "No Unity or programming experience needed. You just follow what the instructor does"
      ],
      "description": "All software and resources used in this course are free.\n\n\nIn this course, you will learn how to create a complete Space Invaders game in Unity from an instructor with 40 years programming experience.  You do not need to have any unity or programming experience.  I will explain everything as we create the game together.  Here are some of the things you will learn in this course.\n- How to create a Unity project\n- How to configure the Unity editor\n- How to import assets into Unity\n- How to create a moving star field background\n- How to create the player, enemies, player projectiles and enemy projectiles\n- How to make the player, enemies and projectiles move\n- How to prevent objects from moving when hit by other objects\n- How to prevent projectiles from moving off the screen\n- How to detect when a projectile has hit an enemy or the player\n- How to determine when the game is won\n- How to determine when the game is lost\n- How to add multiple levels to the game\n- How to add sound effects to the game\n- How to test the game throughout the development process\n- How to investigate and correct errors\n- How to publish the project to a stand alone application",
      "target_audience": [
        "Anyone who wants to learn how to create a complete Space Invaders game in Unity",
        "Anyone who wants to learn the basics of creating an 2D arcade game in Unity"
      ]
    },
    {
      "title": "Unity3D Made Simple: Master Fundamentals Quickly",
      "url": "https://www.udemy.com/course/learn-by-doing-unity3d/",
      "bio": "Learn by putting together an entire level for a game!",
      "objectives": [
        "Put together an entire level for a game",
        "Get around the Unity interface with ease",
        "Understand how to create scripts within the engine to bring the world to life",
        "Create basic animations",
        "Create very basic AI"
      ],
      "course_content": {
        "Introduction To Unity3D": [
          "Resources",
          "Course Overview",
          "Downloading/Installing Unity",
          "Interface Overview",
          "Setting Up Project",
          "Game Objects, Components, Prefabs & Scripting"
        ],
        "Character & Enemies": [
          "Character: Animations",
          "Character: Movement (Part 1)",
          "Character: Movement (Part 2)",
          "Character: Camera",
          "Enemies: Patrol (Part 1)",
          "Enemies: Patrol (Part 2)",
          "Enemies: Animations (Part 1)",
          "Enemies: Animations (Part 2)",
          "Enemies: Detect Player (Part 1)",
          "Enemies: Detect Player (Part 2)",
          "Enemies: Environmental Enemies (Part 1)",
          "Enemies: Environmental Enemies (Part 2)",
          "Character: Distracting Enemies",
          "Enemies: Shoot Sequence (Part 1)",
          "Enemies: Shoot Sequence (Part 2)",
          "Character: Death"
        ],
        "World": [
          "Doors",
          "Terminals",
          "Exit Elevator (Part 1)",
          "Exit Elevator (Part 2)",
          "Key Card",
          "Sounds (Part 1)",
          "Sounds (Part 2)",
          "Building Standalone Application"
        ]
      },
      "requirements": [
        "Students are not required to do any learning prior to this course because this course will show how/where to get the needed software"
      ],
      "description": "Free Trial: If you are unsure whether or not to get the course, feel free to try it out! All lectures that are free to try should have a \"Preview\" button next to them. Check it out!\nNote: This course was made using Unity 5.2. Any version of Unity 5 is compatible with this course. Also, all scripting is 100% done from scratch.\nWhat is the course about?\nThis course is all about learning game development using the Unity3D Game Engine. We will be covering topics that go all the way from installing the engine, to making a character move in world, to creating very simple AI.\nC# experience is recommended, but not required as I explain absolutely everything about what I'm doing and why I'm doing it. Although this course is mostly programming, I also take the time to go through the interface, set up basic animations in Mecanim (Unity's animation system), and use most of the commonly used windows within the interface.\nThere are always multiple ways to do things in game development. Because I want you to keep an open mind as to the possibilities Unity brings you, when I'm doing something that may feel repetitive, I always go about it a different way. This way you will end up getting more familiar with the engine.\nAlthough this course is the perfect foundation to start as a Unity Developer, all learning levels should benefit from this course one way or another because of the different ways in which I approach situations. That being said, this course is meant for beginner level students.\n\nWhat's included in the course?\n30 Lectures, 29 videos and 6 hours of content\nAll art/sound assets\nThe finalized version of the Unity Project we are going to be creating\nHow is the course structured?\nThis course is divided into 3 sections.\nThe first section is all about learning your way through the engine. In this section, I show you where to go to install the engine, go through the commonly used windows in the interface, and talk about terminology Unity Developers use on a day-to-day basis.\nThe second section is about creating the player's and all the enemies' behaviors in game. There are a total of 3 enemies (robots, laser fences, and security cameras).\nThe third section is about finalizing the environment by adding sounds and a few other things that bring the environment to life. In this section, we'll also be making a build of the application for use by the end user.\nWhat should you expect by the end of the course?\nBy the end of the course, you will be armed with the knowledge necessary to feel confident/comfortable when using the engine for your own projects. Learning new things within the engine should be very easy at this point.\n\n\nIf you have any questions or concerns, feel free to contact me and I'll be happy to reply as soon as possible.\n\n\nNote: All videos where recorded in 1080p. In order to take advantage of this level of quality, make sure you have 1080p as the selected quality in the video player",
      "target_audience": [
        "This course is meant for beginners to the Unity3D Engine and/or game development",
        "All other learning levels are welcome, but they may not be able to get as much from the course as beginners."
      ]
    },
    {
      "title": "Creating a Visual Novel in the Godot Engine",
      "url": "https://www.udemy.com/course/creating-a-visual-novel-in-the-godot-engine/",
      "bio": "Visual Novels made easy",
      "objectives": [
        "How to use the most popular novel plugins",
        "Create and load multiple save slots",
        "Add voice lines to dialog",
        "Create branching stories"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Installing Godot"
        ],
        "Preparations": [
          "Creating a Placeholder Character",
          "Project Setup"
        ],
        "Creating Visual Novels": [
          "Creating Characters",
          "Creating Themes",
          "Glossary Definitions",
          "Creating Timelines",
          "Voice Lines",
          "Questions and Choices",
          "Values and Custom Names",
          "if Statements",
          "Saving and Loading",
          "Dialogic Signal",
          "Call Node",
          "Creating Menu and Continue Slots",
          "Remember to Set Slots",
          "Starting A New Game"
        ],
        "Extras - Requested Additions": [
          "Requests",
          "Custom Events",
          "Translations/Localizations"
        ]
      },
      "requirements": [
        "Have a working computer"
      ],
      "description": "Learn to create games in the Godot game engine using a python-like programming language, GDscript.\n\nIn this course, we will learn everything we need to start making a visual novel game that is cross-platform for MacOS, Windows, Linux, Android, IOS or even embed into a browser.\n\nWhile on your game development journey you will gain the skills and ability to create the Space Shooter you want.\n\n****If you have no experience in coding or want to familiarize yourself with the language, my course on learning the GDscript language is recommended to help at least learn basic code terminology and structure****\n\n\nYou will learn:\nCreate story characters\nCreate timelines\nSave and Load\nMultiple Save Slots\nThemes\nVoice Lines\nBranching Options\nCustom Player Name\nCreate Glossary Defined Words\nand much more!\n\n****If you have no experience in coding or want to familiarize yourself with the language, my course on learning the GDscript language is recommended to help at least learn basic code terminology and structure****\n\nGodot provides a huge set of common tools, so you can just focus on making your game without reinventing the wheel.\nGodot is completely free and open-source under the very permissive MIT license. No strings attached, no royalties, nothing. Your game is yours, down to the last line of engine code.",
      "target_audience": [
        "Godot developers that want to learn how to make a visual novel game"
      ]
    },
    {
      "title": "Unity 6 & C# Programming Crash Course For Complete Beginners",
      "url": "https://www.udemy.com/course/unity-csharp-crash-course-beginner/",
      "bio": "Learn the basics of using Unity and writing C# code to making a complete adventure game with traps and bottomless pits.",
      "objectives": [
        "Create a complete game in Unity 6, step-by-step, without prior game dev experience.",
        "Learn C# programming in a fun way by getting introduced to a few concepts in each lecture.",
        "Get an overview of the game dev process, from making levels, to adding sound effects, to tweaking gameplay.",
        "Go from complete beginner to intermediate/advanced level as we dive deeper into more advanced subjects."
      ],
      "course_content": {
        "Introduction, Project Setup and Quick Overview of Unity and C# Programming": [
          "Introduction",
          "Installing Unity and Creating a New Project",
          "Importing Models and Creating a Level",
          "Introduction to C# Programming",
          "Introduction to Programming in Unity",
          "Our First Script: Coin Animator",
          "Handling Input In Unity with the Input System",
          "Player Character Movement",
          "Fixing The Step Offset Issue",
          "Player Character Animation",
          "Adding a Camera Controller"
        ],
        "Gameplay Mechanics": [
          "Collecting Coins",
          "Adding Sound Effects to the Character",
          "How To Download and Use The Particle Effects Pack",
          "Creating a Visual Effect When We Collect a Coin",
          "Creating a Dust Effect Upon Landing",
          "Adding Deadly Spike Traps",
          "Adding a Health System",
          "Handling Player Death",
          "Adding Deadly Bottomless Pits",
          "Adding a Game Over Screen",
          "Preventing Camera Tracking In Game Over Screen",
          "Adding a HUD for displaying Health Points As Hearts",
          "Tracking Level Progress"
        ],
        "Full Game Loop With Levels and Menus": [
          "Using a Gate To Exit to the Next Level",
          "Fleshing Out The Spike Traps",
          "Adding Spinning Blade Traps",
          "Polishing the Visuals and Adding a Pause Menu",
          "Adding a Main Menu Screen and Making a Global UI Manager",
          "The Power of Coroutines Over Simple Methods",
          "Showing a Loading Screen When Loading Levels"
        ],
        "Sprinting and Stamina Mechanics": [
          "Sprinting",
          "Making a Smoother Camera",
          "Smoother Player Movement",
          "Consuming Stamina When Sprinting",
          "Adding a Screen Effect When Stamina Is Low"
        ],
        "Closing Thoughts": [
          "Where to Go Next"
        ]
      },
      "requirements": [
        "No prior experience with Unity or C# programming required, you will learn everything you need to know in this course."
      ],
      "description": "Have you ever dreamed of making your own video game but felt overwhelmed by where to start? This beginner-friendly Unity course takes you from absolute zero to building a fully functional 3D adventure game, step by step, with no prior coding or game development experience needed.\nInstead of bombarding you with abstract concepts, we’ll learn by doing, and with each lecture we’ll gently introduce new concepts and understand how they work. Together, we’ll build a coin-collecting adventure game from scratch, expanding it with movement, animation, traps, enemies, UI, sound, and visual effects.\nThis course is not about showing you where to click and what to type. My goal is to show you why we do things the way we do them, and in the process transform you into a game developer. You’ll learn to think and execute your plans like a professional. By the end of the course, you will have enough tools at your disposal to kickstart any game project you want to work on.\nGame development is a continuous learning process, I’m not promising you that you’re going to know how to make any game, but this course will give you a solid understanding of the basics, and a strong foundation on which to build. After taking this course, learning game dev is going to become a fun adventure of discovery; with small successes and failures that are an integral part of the journey, and that’s the very core of a fun and rewarding game dev career.\nThroughout this course, you'll learn how to create a flexible player controller and how to implement some basic movements like jumping. You'll discover how to use the input system in Unity, how to animate 3D characters, control the camera, and how to play sound effects and create various visual effects to enhance the look and feel of your game.\nAt the beginning of the course, you’ll find a couple of lectures dedicated to teaching you the very basics of programming and using Unity, showing you the most important aspects that you need to be aware of. These are short lectures with plenty of visual aids, most of the programming concepts are sprinkled all throughout the course to help you grasp them in a fun and engaging way.\nWe’ll learn how to create and fine-tune some game mechanics like deadly pits, dangerous spike traps that can either be activated by pressure or with a timer, and sharp spinning blades that are up to no good. Learn to make these the proper way, while making the tools within Unity to edit their parameters and allow us to lay them out easily to make our levels.\nA game is like a big puzzle, we’ll learn to make some solid puzzle pieces. You can take the knowledge that you acquire here to make more levels, more traps, more ways to move and attack, and innovate on your own, coming up with your own game mechanics.\nEven advanced Unity developers are sometimes confused about how to create menus and organize their prefabs and scenes in Unity to make a complete game. We’re going to discover some clever ways to keep our project extremely well organized and clean, while remaining flexible and expandable.\nYou’ll learn how to write industry-grade C# code, I have some extremely high standard when it comes to coding, because that’s the lifeblood of your game. Messy code leads to unfinished or abandoned projects, and I’ll give you the best practices to follow to keep your code effective, efficient, and easy to maintain. But most of all, I want you to be able to understand what your code is doing when you come back to it a few weeks later, you’ll be surprised how difficult that is to achieve, it requires high levels of cleanliness and readability.\nYou’re just one click away from unlocking your game dev super-powers! See you inside!",
      "target_audience": [
        "Complete beginners in Unity/C#",
        "Aspiring game developers with no prior experience",
        "Beginner and intermediate level Unity/C# developers in need of knowledge for making complete games",
        "Intermediate to advanced developers wanting to implement a full adventure game with traps and multiple levels"
      ]
    },
    {
      "title": "Intermediate Unity 6 : Connect Complex Game Mechanics",
      "url": "https://www.udemy.com/course/intermediate-unity-6-connect-complex-game-mechanics/",
      "bio": "Level up your Unity skills by connecting concepts like AI, Design Patterns, Grid-Based Movement and many more",
      "objectives": [
        "Connect concepts and systems in Unity into a full game",
        "Learn to integrate a complex state machine into a Unity game",
        "Try different architectural approaches on how to make your scripts communicate",
        "Learn to create dozens of complex Levels in minutes",
        "Learn about the benefits of a custom Grid-System",
        "Create several independent systems which you can reuse in other games"
      ],
      "course_content": {
        "Introduction": [
          "Course Trailer",
          "Course Overview",
          "Prerequisites",
          "How to take this course?",
          "Unity Versions and Code Editor",
          "Course Resources"
        ],
        "Working with Assets": [
          "Section Resources",
          "Project Setup",
          "(optional) Unity Version Control",
          "Meet CookieMan (Sprite Settings)",
          "Creating the Sprite Sheets",
          "Slicing for a Grid"
        ],
        "Map Generation": [
          "Section Resources",
          "What to Expect ?",
          "Intro to Ruletiles",
          "How Ruletiles work",
          "What tools do we need?",
          "Create a Ruletile",
          "Tilepalette and Tilemap",
          "Defining the Rules",
          "Simplifications and Limitations",
          "Beyond simple Ruletiles",
          "Custom Ruletiles Part 1",
          "Custom Ruletiles Part2",
          "(optional) What else can you do with Ruletiles?",
          "(optional) Draw with Gameobjects"
        ],
        "Project - Let's create a Level": [
          "Section Resources",
          "Which Map should we build?",
          "Texture Bleeding",
          "Path and Wall Ruletiles",
          "Create the Main Level"
        ],
        "Grid": [
          "Section Resources",
          "What to Expect ?",
          "Why use a Grid?",
          "Keep it simple!",
          "Configure & Visualize",
          "Connect the Grid to the Level",
          "Simple Editor-Script for the Grid",
          "Position-Independant Grid",
          "(optional) Actually using the Tilesize"
        ],
        "Project - Connect the Grid": [
          "Section Resources",
          "Import Grid",
          "Refactor 1",
          "Connect the Grid to the Level"
        ],
        "Movement": [
          "Section Resources",
          "What to Expect ?",
          "Introduction",
          "Connect a simple Input-System",
          "Add Raycast Perception",
          "The Dark Side of Raycasting",
          "Revisiting the Grid-System",
          "Combining Raycasts and the Grid",
          "Finding Neighbors",
          "Get rid of Raycasts",
          "Cutting Corners Issue",
          "Cutting Corners Solution",
          "Polishing"
        ],
        "Project - Movement": [
          "Section Resources",
          "Your Choice",
          "Quick and Dirty Integration (Short Version)",
          "Grid Cell Refactoring (Long Version)",
          "Movement Integration Part 1 (Long Version)",
          "Movement Integration Part 2 (Long Version)",
          "Movement Integration Part 3 (Long Version)",
          "Continuous Movement (both Versions)"
        ],
        "Animations": [
          "Section Resources",
          "What to Expect ?",
          "Animation Controller and Clips",
          "How to decide when to play which Animation?",
          "Sprite(sheet) Animations",
          "Anystate and Compund Conditions",
          "Connect Animations and Movement",
          "Layered Animations",
          "(optional) Decoupling Player Script and Animations"
        ],
        "Project - Animations": [
          "Section Resources",
          "CookieMan Animation",
          "Connect Animation and Movement",
          "Monster Animations",
          "Animation Override Controller",
          "Monster Transitions",
          "Encapsulate Script Access"
        ]
      },
      "requirements": [
        "Basic Unity Knowledge"
      ],
      "description": "Welcome to our Intermediate Unity 6 course.\n\nThis course tries to solve the problem of  \"What to learn next, if you have learned the basics of Unity\".\n\nProbably you already know how to solve several problem in Unity individually. The next ideal step is to connect these several concepts into a full End-To-End Project. After taking this course you will have a template for creating serious medium sized games.\nYou will create several independent systems which you can reuse for your own games.\n\nWe will create a game loosely  based on the famous Maze-Runner Pacman. The reason we chose this game is because it contains a wide combination of concepts and can be fully implemented without using any third party tools.\n\nThe following concepts will be covered and connected into a final game:\n\nAI:\n\nNavigation\nPath Debugging\nBehavior Control\nState Machine Concepts\nConfigurable State Machines with minimal setup\n\n\nClean Architecture:\n\n\nSingleton - should you use it?\nInterfaces\nDelegates\nCreate your own API-Script\nExtend Monobehaviours\nStatic Classes\nEvent-based Communication\n\n\nPlayer Movement:\n\n\nInput System (New)\nRaycast-based Movement\nGrid-based Movement\nSmooth Movement without Corner-Cutting\n\nCustom Grid:\n\n\nGrid Visualization\nAutomated Level Detection\nCell-Types for Navigation, Movement and Object Placement\nPosition-Independence of the Grid\nAPI like access to Grid Calculations\n\n\nAutomated Level-Creation:\n\n\nRuletiles\nTile Palettes\nScripted Tiles\nCreate dozens of Levels in minutes\nTilemap System\n\n\nand many more topics like:\n\n\nLevel Resetting\nAnimations\nTeleportation\nSpawning\nCollision Detection\nEditor Scripts\nPreparing Image Assets\n\nSee you in the course.",
      "target_audience": [
        "Unity Developers with some initial experience who want to make the next step"
      ]
    },
    {
      "title": "Create a First Person Shooter (FPS) Game in Unreal Engine 5",
      "url": "https://www.udemy.com/course/create-a-first-person-shooter-fps-game-in-unreal-engine-5/",
      "bio": "Learn Unreal Engine 5: Build a Realistic Adventure Game with a Timer System, Enemy AI, and a Dynamic Game Environment!",
      "objectives": [
        "Master the UI, navigation, object manipulation, and essential tools from scratch.",
        "Create a playable First Person character with smooth animations for running, jumping, etc.",
        "Implement intelligent enemies that chase and attack the player.",
        "Build a detailed game with a realistic abandoned environment, and realistic lighting."
      ],
      "course_content": {},
      "requirements": [
        "Some Experience with Unreal Engine 5 is Required.",
        "Some Experience with Blender 3D may be Helpful."
      ],
      "description": "Create an Realistic Horror FPS Game in Unreal Engine 5!\nUnreal Engine 5 is one of the most powerful game engines available today—but if you're just starting out, it can feel intimidating. That’s exactly why I created this course: to help beginners build a complete first-person shooter (FPS) from scratch, step by step. Even if you have minimal experience with Unreal Engine 5, you’ll be able to follow along and bring your game to life!\nThis is a project-based course, meaning you’ll learn by actually building a game. Throughout the course, you’ll learn how to:\n\n\nImplement a responsive first-person character with smooth camera movement, shooting mechanics, and sprinting.\nImplement intelligent enemy AI that actively chases and attacks the player in real time.\nUse an abandoned environment, featuring realistic elements and lighting\nAdd a countdown timer mechanic to introduce tension, challenge, or mission objectives.\nDevelop a health system where the player takes damage and can be defeated by enemies.\nUse post-processing and lighting tools to give your game a cinematic, high-quality sci-fi aesthetic.\nThis course is ideal for beginner to intermediate users of Unreal Engine 5. And the best part? All the assets used in the course are completely free—no paid assets required!\nYou won’t just follow along—you’ll experience what it’s like to think like a game developer: solving problems, making design choices, and building something you can truly call your own.\nStart now and build your own immersive FPS adventure!",
      "target_audience": [
        "Aspiring Game Developers, Indie Creators, and Anyone who wants to build Games in Unreal Engine 5."
      ]
    },
    {
      "title": "How to create a video game: Unity 2D game development!",
      "url": "https://www.udemy.com/course/how-to-create-a-video-game-unity-2d-game-development/",
      "bio": "This course is designed for those that want to learn how to create a video game with little to no experience.",
      "objectives": [
        "Learn all of the basic components of a 2d platform game.",
        "By the end of this course, you will be able to develop your very own game!",
        "You will understand sprite sheet animation",
        "You will have a solid grasp on how Unity 2D game scripting works",
        "You will understand standard game components, such as a camera, lighting, etc."
      ],
      "course_content": {
        "Course Intro": [
          "Course Introduction and Preview"
        ],
        "Course Walkthrough": [
          "Setting up the Basics of a 2D Scroller Game in Unity",
          "Creating Sprites with a Controller, Texture, and Material",
          "Creating a Basic Javascript to Handle Sprite Direction",
          "Animating a Sprite Sheet Texture on a Game Object",
          "Adding Environmental Game Objects on the Z Plane",
          "Moving Platform Script",
          "Building Various 2D Platforms",
          "Adding Camera Mechanics to Follow the Player",
          "Creating Level Limits",
          "Character Respawn Point",
          "Adding Check Points to Our Game",
          "Creating Enemies",
          "Scripting Enemies Difficulty",
          "Prefabs and Multiple Levels",
          "Creating a Level Navigation System",
          "Creating a Parallax Background",
          "Parallax Scripting",
          "Audio Clips for Sound Effects and Music",
          "Pausing the Game"
        ],
        "Bonus Tutorials": [
          "Bonus Request #1 - Creating A Bouncy Platform",
          "Bonus Request #2 - Particle Systems and Custom Particles",
          "Bonus Request #3 - Creating a Transportation Device",
          "Bonus Request #4 - Background Music that Transfers Through Scenes"
        ],
        "Course Outro": [
          "Congratulations and Thank You!"
        ]
      },
      "requirements": [
        "Computer with Unity installed (from unity3d.com)"
      ],
      "description": "In this course we will learn how to develop a 2D platform type of game in Unity.  Unity is free to use and is a very powerful game engine with a lot of cool features and functionalities.  James will walk you through how to create everything from an animated character from a sprite sheet, multiple level maps, enemies, moving platforms, camera scripting, audio integration, particle systems (for special effects), and much more.  This course is tended for beginners looking to learn the basics of game development.\nThis game development course is setup as a walkthrough series; developing all the components of a game from scratch.  James will be the course instructor who is a guest teacher for mybringback.",
      "target_audience": [
        "Beginners"
      ]
    },
    {
      "title": "Game Maker Studio: Build Space Game & Sell It on Itch IO",
      "url": "https://www.udemy.com/course/game-maker-studio-build-space-game-sell-it-on-itch-io/",
      "bio": "Learn how to build space game using Game Maker Studio and learn how you can sell your games on Itch IO marketplaces",
      "objectives": [
        "Learn how to build and design game using Game Maker Studio",
        "Learn how to create sprite, object, and room",
        "Learn how to sell game products on Itch IO",
        "Learn how to promote games with effective marketing strategies"
      ],
      "course_content": {
        "Introduction": [
          "Introduction to the Course",
          "Highlight of the Course",
          "Whom This Course is Intended for?"
        ],
        "Tools & Resources": [
          "Tools & Resources"
        ],
        "Introduction to Game Maker Studio": [
          "Introduction to Game Maker Studio",
          "Building Game with No Code"
        ],
        "Setting Up Game Maker Studio": [
          "Sign Up on Game Maker Studio",
          "Installing Game Maker Studio"
        ],
        "Exploring Game Maker Studio Dashboard": [
          "Creating Project & Choosing Template",
          "Exploring Asset Browser",
          "Creating Room, Object, and Sprite"
        ],
        "Game Maker Studio Marketplace": [
          "Finding Free Assets on Marketplace"
        ],
        "Interesting & Cool Game Ideas": [
          "Examples of Game Created with Game Maker Studio",
          "Cool Game Ideas to Build"
        ],
        "Project: Building Space Games": [
          "Game Assets Folder",
          "Initialising Projects & Importing Sprites",
          "Creating Objects & Adding Events",
          "Switching from GML Code to GML Visual",
          "Creating Room & Designing Space Track",
          "Creating Collision Effect",
          "Adding Trophy for Completing the Game",
          "Exporting Game"
        ],
        "Testing Space Game": [
          "Testing Space Game"
        ],
        "Itch IO Marketplace": [
          "Itch IO Marketplace",
          "Selling Game on Itch IO Marketplace"
        ]
      },
      "requirements": [
        "No previous game development or programming experience is required",
        "Willingness to learn, be creative and innovative"
      ],
      "description": "Welcome to Game Maker Studio: Build Space Game & Sell it on Itch IO course. This is basically an extensive project based course where you will learn step by step on how to build a variety of cool games using Game Maker Studio and potentially generate passive income by selling the game on a marketplace called Itch IO. This course will teach you how to build and design games without having to know programming since Game Maker Studio allows you to do visual scripting, dragging and dropping interfaces to create game objects, levels, and even animations. Therefore, these tools would be perfect for aspiring game developers who have ambitions to create their own game to build on without having to master any programming skills. In addition, this course will also present you with some examples of existing games which were built using Game Maker Studio as well as potential game ideas to build based on your own interest which hopefully can give you some inspirations and motivations. To make your learning experience even more complete, the course also comes with a project where you will be guided step by step on how to build a new game from scratch using Game Maker Studio which will give you hands-on experience and chance to implement skills you’ve learnt into a real project. Once you’ve created the game, you will also learn how to sell your game on Itch IO, a large marketplace with estimated monthly traffic of 33.5 Millions people. Then, continue by learning several effective marketing strategies to promote your game and potentially generate more sales.\nFirst of all, before getting into the course, we need to ask ourselves this question. Why should we learn Game Maker Studio? Well, the answer might be pretty obvious to some people, this is one of the best software that you can utilize to build and design game without having to know how to code, other than that, there are still many other reasons why, Game Maker Studio has been well known as cross platform development which basically means that you can develop games multiple different platforms, including but not only limited to Windows, macOS, Linux, iOS, Android, etc. Game Maker Studio also has a supportive community and resources which will enable you to get help from fellow developers regarding resources, tutorial, or additional support which is very valuable especially for someone who has just started and extremely new to this field. Besides that, Game Maker Studio also offers you a free plan which is definitely lucrative for people who just want to learn the basics of game development without having to invest a lot of money for their learning resources although the free plan obviously also comes with some limitations as well.\nBelow are things that you will learn in the course:\nExploring Game Maker Studio dashboard and features\nLearn how to create sprite\nLearn how to create object\nLearn how to create room\nLearn how to find free assets on Game Maker Studio marketplace\nExtensive discussion about cool game ideas to build\nFully guided project to build space exploration game from scratch\nSell your games on Itch IO marketplace\nEffective marketing strategies to promote your games\nPre-production: game testing",
      "target_audience": [
        "People who want to build game without having to know how to code",
        "People who want to generate income from selling games"
      ]
    },
    {
      "title": "Making Games With Phaser 2.X",
      "url": "https://www.udemy.com/course/making-games-with-phaser/",
      "bio": "Learn the fundamentals of JavaScript And Phaser!",
      "objectives": [],
      "course_content": {
        "Prologue": [
          "Hello"
        ],
        "Notes": [
          "Keyboard Shortcuts",
          "Already know JavaScript?"
        ],
        "JavaScript Fundamentals": [
          "Hello World",
          "Commenting",
          "Spacing",
          "Math Operators",
          "Comparison Operators",
          "Booleans, Strings, And Numbers",
          "Arrays And Objects",
          "If And Else Statements",
          "While And For Loops",
          "For Each And For In Loops",
          "Functions, Methods, And Scope"
        ],
        "More Advanced JavaScript": [
          "Developer Tools",
          "Regular Expressions",
          "Map, Reduce, And Filter",
          "This",
          "Turnary Operators, Prototype, And More JS Tricks"
        ],
        "Phaser Prep": [
          "PhaserDemo Github Repository",
          "Phaser Boilerplate Code",
          "Setting Up A Github Repository",
          "How Phaser Works",
          "Add State 0 through 9",
          "Switching Between Each State",
          "Pushing to you Github Repository",
          "Scale Manager",
          "CSS",
          "Piskel And SketchPad"
        ],
        "Phaser": [
          "State 0: Add Sprites And Keyboard Input",
          "State 0: Add Background And Camera Movement",
          "State 0: Add Sprite Sheet Animation",
          "Tiled Update",
          "State 1: Create Tiled Tile Map",
          "State 1: Add Tile Map To Game",
          "State 1: Collide With Tile Map",
          "State 2: Shoot Bullets",
          "State 2: Kill Enemies With Bullets",
          "State 3: Buttons",
          "State 4: Tweens",
          "State 5: Gravity And Acceleration",
          "State 6: Time Events And Particles",
          "State 7: Touch Screen Swipes",
          "State 8: Text",
          "State 8: Google Fonts",
          "State 9: Firebase",
          "State 9: Simulate Scores",
          "State 9: Firebase Update"
        ]
      },
      "requirements": [
        "Git installed",
        "Brackets installed",
        "Google Chrome installed"
      ],
      "description": "This course covers the fundamentals of JavaScript and Phaser.  You do not need to have any prior coding experience!  All you need is a computer, determination, and a thirst for knowledge.  By the end of the course, you will be able to create your own video games!\nWe start out by learning the fundamentals of JavaScript using Replit and then we move on to creating our own Phaser examples using the Brackets text editor.  In regards to Phaser, I will be going over user input, tile maps, sounds, particles, groups, and a lot more!\nUnlike most game development courses, I take a different approach where instead of teaching you how to make a complete game, I teach you several game aspects in small independent chunks.  I believe this will let you be a more creative game developer as your skills will not be confined to what is needed for a particular game.\n\nIf you have never coded before or are just looking to learn something new, I think this course is a great introduction!  It is completely free to watch and all of the resources I use in the the tutorial are also free.",
      "target_audience": [
        "You should take this course if you like video games or if you just like learning new things!",
        "You should not take this course if you're not willing to occasionally be confused or stumped",
        "You should take my course if you have a lot of grit and determination"
      ]
    },
    {
      "title": "Full Course Unity 6 & C# - Complete Beginner to Intermediate",
      "url": "https://www.udemy.com/course/complete-unity-6-c-course-beginner-to-intermediate/",
      "bio": "How to make a game with Unity 6 & C# Coding, Unity 6 full course, Full Course on Unity 6 & C# Programming for Beginners",
      "objectives": [
        "Walk you through Every settings for APK & AAB Build for Mobile devices(Ready AAB for Play Store)",
        "Master Unity 6 & C# Basics",
        "Step by Step guide on How to Upload your game on Itch or on Your Custom website",
        "You will have some simple quizzes at the end of lecture in order to make you strong in Unity & C#",
        "You gonna have some assignments at the end of this course, If you wish you can share with me too :)",
        "Build APK & AAB for Play Console",
        "Super Understanding on Character basics physics & controls",
        "You will able to make 2d games with Unity 6 & C# Programming",
        "Able to Make a Game for Mobile devices(Android)",
        "Able to make High Quality 2D Endless Runner game",
        "You will learn Animation, UI, Game Objects & So much more other things in Unity",
        "Make a Game for Website or even for your Custom Website",
        "Step by Step Guide & in Details Unity 6 & C#"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Creating Our Project & Unity 6 Basics Overview (UI)"
        ],
        "2D Endless Runner Game Development (Player Setup)": [
          "Player Setup",
          "Animation In Unity, Player Animation",
          "Animation Transition, Player Animation Transition",
          "C# Script in Unity, Player C# Script for Movement, Classes & Functions",
          "Player Acceleration & Player Jump with C#",
          "Collision in Unity, Player one time JUMP",
          "Animation Transition Player with C#"
        ],
        "Camera Follow, Parallax & Environment": [
          "Camera Follow Player C# Script",
          "Introduction to Tile Map & Basics Overview",
          "Tiles Setup with Tile Map Collider",
          "Tile Ground Spawn Logic",
          "Making Multiple Tile Grounds: Process",
          "Tile Ground Spawner C# Script & Ground Spawn",
          "Random Tile Ground Spawn with C#",
          "Next Ground Tile Spawn C# Scripting",
          "For Loop in C# to Spawn Initial Ground Tiles",
          "Background Setup",
          "Parallax Effect & Endless Background"
        ],
        "Player Shooting": [
          "Player Shooting C# Scripting",
          "Line Renderer Setup for Shooting Player"
        ],
        "Enemy: 1": [
          "Enemy Setup with Animation, Enemy 1",
          "Enemy C# Script & Enemy Attack Scripting",
          "Enemy Animation Transition via C#, Enemy Shooting",
          "Enemy Shooting Raycast with C#",
          "Line Renderer Setup in Enemy for Shooting (Raycast)",
          "Enemy Health & Damage C# Scripting"
        ],
        "Floating Text & Player(Health & Damage)": [
          "Floating Text & Floating C# Script",
          "Player Health & Damage C# Scripting, Player Script"
        ],
        "Enemy: 2": [
          "Enemy 2 Setup & Enemy 2 Script",
          "Enemy 2 Animation & Transition via C# Script",
          "Enemy Attack C# Scripting",
          "Enemy Health & Damage C# Scripting",
          "Fixing Line Renderer Bug, Player Shooting"
        ],
        "UI in Unity": [
          "UI in Unity, Player Health UI",
          "Player Health UI C# Scripting"
        ],
        "Clean Code": [
          "Singleton Pattern, Making Clean Code",
          "Serialize Field, Hide in Inspector & Header to Code"
        ],
        "Camera Shake & Game Manager": [
          "Game Manager C# Script & Player Die Explosion",
          "Camera Shake",
          "C# Scripting for Camera Shake"
        ]
      },
      "requirements": [
        "Nothing is required at all but have a basics knowledge of Physics & Mathematics"
      ],
      "description": "This is a Complete Unity 6 & C# Course for Absolute Beginners, If you never touched unity game engine & C sharp programming then this course is absolutely for you, In this course you will learn everything that you need to know to make 2d game in unity with C#, This course will teach you about what is a game object, components, how animation works in unity game engine, How to make UI in unity and much more with C# Programming language, Also in C# Programming you will learn about classes, functions or methods, custom functions, for loops, if condition, variables, Reference any so many other aspects in c sharp coding. Learning Unity game engine can be a hard challenge but i have explained those things in unity game engine from basics so you don't need to worry about anything if you never even touched unity & C#, After this course you will understand the basics of unity game engine with c sharp programming, Also you will able to make some simple 2d games with help of this amazing course, I have divided all of the sections into some parts in order to understand from  basics of Unity 6 & C# Programming.\nThis course is for beginners and intermediate guys, If you even learnt already a bit then you can also follow this course as well, You can move to any specific lecture as well because i already have Split into different sections & chapters! I hope you will enjoy this course.\nThanks\nBhairab Roy",
      "target_audience": [
        "From Complete Beginner to Intermediate peoples"
      ]
    },
    {
      "title": "Ultimate guid to create 3D survival game in unity & C#",
      "url": "https://www.udemy.com/course/ultimate-guid-to-create-3d-survival-game-in-unity-c/",
      "bio": "Ultimate guid to create 3D survival game in unity & C#",
      "objectives": [
        "Build 3D Unity Game",
        "progarmming with C#",
        "Making Inventory",
        "Interacting with object"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "New Project Setups": [
          "2)New 3D Projects",
          "3)Unity New Input Actions",
          "4)New Input Action Setup",
          "Imprting Environment"
        ],
        "Player": [
          "Player Setup",
          "Player Look",
          "Player Movement Variables",
          "Player Movement Function",
          "Player floor type",
          "Player Jump function"
        ],
        "Player Health": [
          "Health UI",
          "Health UI Variables",
          "Health Heal function",
          "Health subtract function &UI animation",
          "Take damage function",
          "Player Needs UI",
          "Player Hunger Script",
          "Player thirst & sleep script"
        ],
        "Item": [
          "Item Data (Scriptable Object",
          "Interaction manager part 1",
          "Interaction manager part 2",
          "Prompt text UI"
        ],
        "Inventory": [
          "Inventory UI",
          "Inventory UI Part 2",
          "Inventory Variables",
          "Inventory Functions",
          "Inventory Script Part 1",
          "Inventory Script part 2",
          "Inventory Script Part 3",
          "Inventory Script Part 4",
          "Inventory Script Part 5"
        ],
        "Weapon": [
          "Weapon Settings",
          "Equip Manager Script",
          "Equip tool script",
          "Equip tool On hit Animation event",
          "Resource Script",
          "Gathering resource Solving problems"
        ],
        "Shooting System": [
          "Ammo Manager Script",
          "Shooting System",
          "Scope",
          "New Items"
        ],
        "Craft system": [
          "Crafting Recipe UI",
          "Crafting recipe Script",
          "Crafting Window",
          "Crafting Buildings"
        ]
      },
      "requirements": [
        "Have a PC or Mac"
      ],
      "description": "Are you looking for an intermediate Unity course where you will build a small 3d game, from scratch ? In this course we will create a survival game with first person camera, player movement system, animations, , inventory and crafting system and a Save&Load system to save&Load our progress\n\n\nIf you have completed few beginner courses on Unity and c# and you feel comfortable using them together I believe that you will benefit greatly from this course.\nWe will use multiple 3d models, animations and tools that are free to use.\nMy hope is that at the end of the course you will have a bigger picture on how to structure the code for your game and have a survival game template that you can reuse.\nIf you think that you could benefit from this course don't hesitate to purchase it.  Saying that I have really put a lot of effort to make sure that you will benefit from the course and learn some useful techniques from setting up a simple movement system using a character controller to creating a UI and serializing the data to save it to a JSON file.!\nWhat you will learn at the end of this course\n1)make player with first person camera look from scratch\n2)Player Movement with new input system from unity\n3)Pickup Items\n4)Gathering Resource\n5)Day and Night system\n6)Making Inventory\n7)Equip Items\n8)Drop Items\n9)Craft System\n10)Interact with object\n11)Making Enemies with 3 diffrent state(Scared,Passive,Agressive)\n12)Saving The Game\n13)Loading The Game\n14)and more",
      "target_audience": [
        "Intermediate"
      ]
    },
    {
      "title": "3D Game Development with RTS Creator",
      "url": "https://www.udemy.com/course/rts-creator/",
      "bio": "Learn the Real Time Strategy (RTS) genre, using RTS Creator",
      "objectives": [
        "Learn how to create Classic RTS Game",
        "Larn how to create Space RTS Game",
        "Be familiar of RTS Creator Features and Functions and know how to use them",
        "Learn how to upload Assets",
        "Learn how to create and publish stand alone exe",
        "Potential Marketplaces for your creation",
        "Understand the logic of RTS Creator",
        "Can search for information in the game engine manual and apply it to practice"
      ],
      "course_content": {
        "Course Intro": [
          "Intro",
          "RTS Creator Overview",
          "Inspiration! Example Levels made with RTS Creator",
          "Course Outline",
          "Welcome to the course! What will you learn in this course?",
          "Free high quality assets: vehicles, structures, airplanes and more"
        ],
        "New RTS games": [
          "New RTS games (2021)"
        ],
        "Introduction": [
          "Introduction to Real-Time Strategy (RTS) history and to the present today",
          "Installing RTS Creator from Steam Store",
          "Engine Overview",
          "Game Engine Manual Overview"
        ],
        "Uploading the Assets": [
          "Images, Fonts and Textures",
          "Import Prefab Objects (Assets)",
          "Import Objects (Assets)",
          "Adding Music (soundtracks)",
          "Uploading Intro Video",
          "Customize the game Cursor",
          "Supported Assets Formats Quiz"
        ],
        "RTS Creator Functions": [
          "Introduction",
          "Briefing Menu, Game Menu, Main Menu and Score Menu",
          "Import Object Prefabs (theory part)",
          "Objectives: Survive Mode, Timer, Destroy Targets, Protect Targets (theory part)",
          "Player Factions and Resources",
          "Editing the Heads Up Display aka HUDs (theory part)",
          "Obstacles (theory part)",
          "Particles (theory part)",
          "Resources (theory part)",
          "Sprites (theory part)",
          "Weapons and Technology (theory part)",
          "Player AI (theory part)"
        ],
        "How to use the Map Editor": [
          "Map Editor Functions",
          "Function: Level Texture",
          "Function: Sky Box"
        ],
        "Creating the Levels": [
          "Space RTS",
          "Classic RTS game level",
          "Exporting your Game",
          "Repetition is the mother of learning"
        ],
        "Feedback and improvements to Your game (optional)": [
          "Post your project"
        ],
        "Increase Stability: Game Launcher Third Party Tools": [
          "Game Launcher software",
          "Develope and Design your own Game Launcher"
        ],
        "Introduction to Potential marketplaces for selling your creation & upload guide": [
          "Project ready?",
          "Uploading to Itch.io",
          "Uploading to Itch.io Video Tutorial",
          "Uploading to Steam"
        ]
      },
      "requirements": [
        "RTS Creator software (available on Steam)",
        "Windows XP, 7, 8, 10 or 11"
      ],
      "description": "Learn how to make Real Time Strategy games by using RTS Creator, whit this tool anyone can create and design an RTS game!\nRTS Creator is the easy way to create Real Time Strategy games for Windows. With this course you will learn how. No prior coding experience is required! It might not be the best program on the markets, but with RTS Creator you can quite easily create a many kind of genres of RTS game and game engine itself only costs $9,99€, coming with assets with value $300-500€. For a skilled developer (which you will be after this course) it can be a powerful tool!\nImagine creating a RTS game that you and your friends come to look and play... or you can even create and publish stand alone exe's with no restrictions! If you have ever dreamed about creating a Command & Conquer -stylish game, this engine and lecture is worth of taking a look! And creating it could be a matter of minutes with no coding or technical knowledge needed!\nWith RTS Creator you can create a variety Real Time Strategy style games including the following: Classic, Adventure, Tower Defence, Space and 2D.\nRTS Creator provides everything you need to quickly create your own Real Time Strategy games! You are free to distribute the games you create without any restrictions or commissions.\nThis course will train you step by step how to use the RTS Creator game engine to develop your dream game. Course includes helpful resources, practice, demonstrations and examples.\nLearning by Mistake -teaching method\nOn section 6 (creating the level) you will learn using the engine with Learning by Mistake -teaching method way, while we create together your first game with RTS Creator. We will take a look about common mistakes, questions and way to fix them. We encourage you to give feedback about this new concept of learning.\nImprovements and feedback for your game - 361 Degree Feedback -option\nThe second last challenge in this course for you is to submit your game for review, if you wish. In review process, teachers and students will give you encouraging feedback and improvement ideas about how to improve your game. This function is optional.\nCertificate of Completion\nWhen you complete a course, you will receive a certificate of completion.",
      "target_audience": [
        "Anyone who wants to learn RTS Creator",
        "Anyone who wants to learn Game Design",
        "Anyone who wants to learn Game Development",
        "Anyone who wants to learn Game Engines"
      ]
    },
    {
      "title": "C# Scripting for Unity Game Development",
      "url": "https://www.udemy.com/course/a-beginners-guide-to-c-scripting-for-unity-game-development/",
      "bio": "Master C# Scripting to Bring Your Unity Games to Life with Hands-On Projects and Real-World Techniques",
      "objectives": [
        "Understand the role of C# in Unity game development and how it powers gameplay mechanics.",
        "Set up and configure Visual Studio as the primary development environment for Unity scripting.",
        "Create and manage different types of applications in Visual Studio, including console apps, Windows forms, and ASP.NET apps.",
        "Download, install, and configure Unity for game development with Visual Studio integration.",
        "Create a new Unity project and navigate the Unity Editor’s interface effectively.",
        "Understand the concept of game objects in Unity and attach C# scripts to game objects",
        "Write custom methods to modularize and optimize code.",
        "Use string concatenation to manipulate and display text dynamically.",
        "Leverage built-in C# methods to streamline scripting tasks.",
        "Declare and use variables in C# to store and manage data within scripts.",
        "Create and manipulate arrays to handle collections of data.",
        "Work with lists to dynamically add, remove, and manage data sets in Unity scripts.",
        "Build and utilize dictionaries for key-value pair data storage in Unity scripting.",
        "Implement conditional statements in Unity scripts to make decisions during gameplay.",
        "Use loops to perform repetitive tasks efficiently in scripts.",
        "Understand the concept of classes in C# and how they are used to structure and organize code in Unity.",
        "Refactor code to improve readability, maintainability, and performance.",
        "Design, script, and attach a C# script to create a rotating globe object in Unity.",
        "Add textures to game objects and integrate them into a playable game environment.",
        "Build and run Unity games to test functionality and showcase results.",
        "Develop a digital clock as a bonus project, creating forms, designing interfaces, and activating timers using C#."
      ],
      "course_content": {
        "Getting Started": [
          "Introduction",
          "Brief overview of C# and its role in Unity scripting",
          "What is C#",
          "What is Visual Studio",
          "Visual Studio Installation Requirements",
          "Installing Visual Studio",
          "Visual studio workloads",
          "Variables and Data Types",
          "Create a basic console app",
          "Create a windows forms app",
          "Create an ASP.NET App",
          "Unity game download and development",
          "Unity game download and development- Continued with visual studio installation",
          "Create new unity project",
          "Basic C# Scripting",
          "Unity editor preferences",
          "What is a game object",
          "Attaching C# Scripting to a game object"
        ],
        "C# Functions and Methods": [
          "What are Functions",
          "Write your own methods",
          "Using Concatenation",
          "Built-in methods"
        ],
        "C# Data Structure": [
          "C# Variables",
          "Arrays",
          "Lists",
          "Add and Remove items to a List",
          "Creating a Dictionary"
        ],
        "Conditions | Loops | Classes": [
          "Conditional statements",
          "Loops",
          "What is a Class",
          "Refactoring Code"
        ],
        "Project: Create a Rotating Globe Object": [
          "Create the the project structure",
          "Create the C# Script",
          "Attach the C# script to the game object",
          "Add texture to the game object",
          "Build the game",
          "Run the game"
        ],
        "Bonus C# Project: Create a digital clock": [
          "Creating a form",
          "Design the clock",
          "Create the timer",
          "Activate the clock",
          "Thank You"
        ]
      },
      "requirements": [
        "Basic Computer Skills Ability to navigate files and folders, install software, and manage basic system settings.",
        "Foundational Programming Knowledge (Optional) Familiarity with basic programming concepts like variables, loops, and conditional statements is helpful but not required, as the course covers these concepts step-by-step.",
        "Understanding of Unity Basics (Optional) While not mandatory, familiarity with Unity's interface or basic game development concepts can be beneficial.",
        "Computer A laptop or desktop meeting the following minimum specifications: Operating System: Windows 10 or macOS (Linux users may need to check compatibility with Unity and Visual Studio). RAM: 8GB (16GB or more recommended for smoother performance). Processor: Intel Core i5 or equivalent (Core i7 or better recommended). Storage: At least 10GB free space for installing Unity, Visual Studio, and course resources.",
        "Unity Software",
        "Visual Studio (Community Edition is free and fully sufficient). The course includes detailed installation steps.",
        "Reliable Internet Connection Required to download Unity, Visual Studio, and other project resources."
      ],
      "description": "Unlock the secrets of creating interactive, engaging, and dynamic games with C# Scripting for Unity Game Development! This comprehensive course is designed to take you from the basics of programming to confidently building games using Unity, one of the world’s leading game development engines. Whether you're a beginner just stepping into the world of game development or an aspiring developer looking to sharpen your skills, this course provides the tools, techniques, and confidence to turn your game ideas into reality.\nWhy Learn C# and Unity Together?\nUnity is a powerhouse in the game development world, offering robust tools for creating everything from 2D games to VR experiences. C#, the scripting language used in Unity, brings your games to life, controlling gameplay mechanics, player interactions, and game events. Together, Unity and C# form the perfect duo, allowing you to create everything from simple games to complex, feature-rich projects.\nThis course teaches you how to harness the power of C# within Unity to build games that are interactive, functional, and fun. Whether your goal is to create games for personal projects, start a career in game development, or launch the next hit game, this course is your gateway to success.\nWhat You’ll Learn\nStep-by-Step Guidance: The course begins with a strong foundation, introducing you to C#, its role in Unity scripting, and the tools you need to get started. You’ll install and configure Visual Studio, download Unity, and set up your first game project.\nCore C# Programming: Explore C# essentials, including variables, arrays, lists, loops, and classes. Learn how to write and optimize methods, handle conditional logic, and use built-in functions to create responsive and efficient scripts.\nUnity Integration: Dive into Unity’s interface and discover how to attach C# scripts to game objects. Understand game object behavior and scripting interaction for immersive gameplay experiences.\nHands-On Projects: Build practical projects to reinforce your learning. Create a rotating globe object in Unity, add textures, and bring it to life with C# scripting. As a bonus, you’ll develop a digital clock project using forms and timers, showcasing your skills in C# outside Unity.\nAdvanced Game Scripting: Go beyond the basics by working with advanced data structures like dictionaries, exploring Unity editor preferences, and understanding how to refactor code for maintainability and scalability.\nWho Is This Course For?\nThis course is perfect for:\nBeginners with little to no programming or Unity experience.\nHobbyists looking to bring their game ideas to life.\nAspiring game developers who want to start building games from scratch.\nExperienced programmers exploring Unity scripting to expand their skill set.\nWhy Choose This Course?\nThis course stands out because of its focus on hands-on, practical learning. Each lesson builds on the previous one, introducing new concepts while reinforcing your understanding through real-world examples. The two projects give you tangible results to showcase your progress and apply your skills.\nBy the End of the Course\nBy the time you complete this course, you’ll be able to:\nWrite efficient and effective C# scripts to control gameplay mechanics.\nNavigate Unity’s interface and integrate scripts with game objects.\nCreate and build fully functional Unity game projects.\nUse your skills to start developing your own games or improve existing ones.\nStart your game development journey today and transform your ideas into playable realities. Enroll now and take the first step toward creating your dream games!",
      "target_audience": [
        "Beginner Game Developers Individuals new to game development who want to learn how to script gameplay mechanics in Unity. Beginners with no prior programming or Unity experience, as this course starts with the basics and builds gradually.",
        "Aspiring Game Designers Creatives who want to move from designing game concepts to implementing functional game features using Unity and C#.",
        "Hobbyists and Enthusiasts Anyone with a passion for games and a desire to learn how games are scripted and programmed. Hobbyists looking to create their own games or interactive projects for fun or personal growth.",
        "Programming Beginners Learners new to programming who want a practical, project-based introduction to C# through a game development context. Those who have basic computer skills but no programming background.",
        "Experienced Developers Exploring Unity Developers familiar with other programming languages or platforms who want to transition into Unity game development. Professionals seeking to add Unity and C# scripting to their skill set for career growth or new projects.",
        "Students and Self-Learners Students in computer science, game design, or related fields looking for hands-on learning opportunities. Self-taught learners seeking structured guidance to master Unity scripting with C#."
      ]
    },
    {
      "title": "Creating a 3D Puzzle Escape Game with Unity and C#",
      "url": "https://www.udemy.com/course/creating-a-3d-puzzle-escape-game-with-unity-and-c/",
      "bio": "Creating a 3D Puzzle Escape Game with Unity and C#",
      "objectives": [
        "Game Design Concepts – Structuring a compelling escape room experience.",
        "Puzzle Mechanics – Implementing key-based locks, hidden objects, and logical challenges.",
        "Player Interaction – Enabling item collection, inventory management, and puzzle-solving.",
        "Game Logic & Scripting – Using scripting (e.g., C# in Unity) to bring the game to life."
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "New 3D Project",
          "Game Assets"
        ],
        "Player Interaction": [
          "Setting the Cursor for interaction objects",
          "Inspecting object",
          "Rotate Object",
          "Activate Interaction sound and caption text",
          "Interaction Image",
          "Activate unity event on interact object"
        ],
        "Inventory": [
          "Inventory Part 1",
          "Inventory Part 2",
          "Inventory Part 3",
          "Inventory Part 4(using item from inventory)",
          "Set Item icon inside inventory",
          "Commenting all line",
          "Remove item from inventory",
          "making more interacting object",
          "making more interacting object part 2"
        ],
        "Main menu": [
          "Main menu",
          "Changing and add more Level"
        ],
        "Making game more Interesting": [
          "Give animation to interacting object",
          "Bringing Inventory to the right side of scene",
          "saving level and adding continue button",
          "Scare moment"
        ]
      },
      "requirements": [
        "Pc or Laptop"
      ],
      "description": "1. Understanding Game Design & Planning\nBefore we start building, we will go over the key elements that make a great escape game:\n==>  How to structure an engaging escape room experience\n==>   Designing puzzles that are fun and challenging\n==>  Placing clues and items logically to guide the player\n2. Creating the 3D Game Environment\nYou will learn how to build a realistic house where the game takes place. This includes:\n==>  Setting up rooms, furniture, and decorations\n==>  Creating interactive objects like doors, drawers, and secret compartments\n3. Implementing Puzzle Mechanics\nThe core of your game will be the puzzles! You’ll learn how to add different types of challenges, such as:\n==> Item-based puzzles – Finding a key to unlock a door\n==> Code puzzles – Using clues to figure out a combination lock\n==> Object interactions – Moving furniture to reveal hidden items\n==> Logic puzzles – Arranging objects in the right order to trigger an event\n4. Player Interaction & Inventory System\nWe will implement systems that allow players to interact with objects, pick up items, and use them later. This includes:\n==> Clicking on objects to examine and collect them\n==> Creating an inventory system to store and use collected items\n==> Combining items to solve more complex puzzles\n5. Game Logic & Scripting\nTo bring everything to life, we will use scripting (such as C# in Unity) to:\n==> Control how objects react to player actions\n==>  Implement timers, triggers, and conditions for puzzles\n==>  Manage game progress and story elements",
      "target_audience": [
        "This course is perfect for beginners and intermediate developers who want to create puzzle-based games with interactive environments. Whether you're a game development enthusiast or someone looking to expand your skills, you'll find value in this step-by-step guide."
      ]
    },
    {
      "title": "Create a Mini Map in Unreal Engine 5",
      "url": "https://www.udemy.com/course/create-a-mini-map-in-unreal-engine-5/",
      "bio": "Learn to create a Mini Map in UE5 in the style of Final Fantasy",
      "objectives": [
        "Learn Blueprints in Unreal Engine 5",
        "Learn how to create User Interfaces",
        "Learn how to do Blueprint Communication",
        "Learn to create a Mini Map for your own game"
      ],
      "course_content": {},
      "requirements": [
        "Basic understanding of how to navigate in Unreal Engine 5 is preffered but not required."
      ],
      "description": "Learn how to create a Mini Map with the style of Final Fantasy XIV in Unreal Engine 5! This complete tutorial will not only show you all the concepts behind creating Mini Maps but, we will also make it complete by applying Materials and UMG elements to make it look nice!\n\n\nWe will analyze how Mini Maps works in games and what is the approach we can take to create one of ours.\n\n\nWe will proceed to create our Blueprints, the visual programming language for Unreal Engine designed both for programmers and artists to be able to program everything inside Unreal.\n\n\nThen we will learn how to create User Interfaces by using UMG, Unreal Engine's system to create HUDs and interfaces to create our Mini Map.\n\n\nWe will also learn how to create a Material that our Interface can use to show the level on runtime while we play.\n\n\nThen we will touch more advanced topics such as Blueprint communication, to create a Blueprint that can communicate with other classes. This topic is of highly importance and must be learnt if you want to create your own game. With this example you will be able to understand how other Blueprints communicate between one another and create more complex mechanics for your game.",
      "target_audience": [
        "Beginner Game Developers who want to learn Blueprints in Unreal Engine 5"
      ]
    },
    {
      "title": "How to create an Online Base Claim System with UE5",
      "url": "https://www.udemy.com/course/how-to-create-an-online-base-claim-system-with-ue5/",
      "bio": "Learn how to create an Online Mutilplayer Base Claim system with Unreal Engine 5",
      "objectives": [
        "How to create a base claim system.",
        "How to replicate variables",
        "How to create widget",
        "How to animate widget"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Course downloads"
        ],
        "Ground work": [
          "Create the Parent class",
          "Show the dynamic interaction widget",
          "Show the claim base widget",
          "Claim Base and show animated notification widget",
          "Show Base status widget"
        ],
        "Base Structure Building / UE5 Basic modeling tool.": [
          "Create the Parent Wall and door wall",
          "Create the windowWall",
          "Create the guard Tower",
          "Create the door",
          "Open and close Door",
          "Combine Structures to create Main Base",
          "Spawn HQ and bug Fixes"
        ]
      },
      "requirements": [
        "How to install the engine and navigate around the engine.",
        "Have a basic understanding of programing",
        "How to create variables, structures, actors, folders."
      ],
      "description": "*WARNING BEFORE PURCHASE! *\nTHIS COURSE IS NOT FOR COMPLETE BEGINNER TO UNREAL ENGINE.\n\n\nWhy should I learn UE5?\nUnreal Engine 5 represents the forefront of game development technology, offering state-of-the-art graphics, physics, and audio capabilities. By mastering Unreal Engine 5, you'll gain proficiency in a powerful toolset that can bring your creative visions to life with stunning realism and immersion.\nVersatility: Unreal Engine 5 is not just limited to game development. Its versatility extends to various industries, including film, architecture, automotive, and virtual reality. Learning Unreal Engine 5 opens doors to a wide range of career opportunities beyond traditional game development.\nCommunity and Support: Unreal Engine boasts a vibrant and active community of developers, artists, and enthusiasts who are always eager to share knowledge, resources, and support. Whether you're a beginner or an experienced developer, you'll find a wealth of tutorials, forums, and documentation to help you along your learning journey.\n\n\nHey, My name is Jovani Calixte, and welcome. In this course, I'll teach you how to create a Claim Base System for your online multiplayer game. you will also learn the basics of the Unreal Engine 5 Modeling tool. With this knowledge, you can create modular pieces for your base. Whether you are making an Online survival game or an extraction shooter this base claim system will be an amazing addition to your game.",
      "target_audience": [
        "Intermediate Unreal engine Users"
      ]
    },
    {
      "title": "Make GTA Type game Unreal Engine C++ | beginner - Moderate",
      "url": "https://www.udemy.com/course/gta_type_unrealcpp/",
      "bio": "Make Open world game using Unreal Engine 5 C++",
      "objectives": [
        "Basics of Unreal core frame work",
        "Unreal C++ from scratch with proper understanding of each class",
        "You will have proper understanding where we should use C++ and where we should use blueprint.",
        "How to add Shooting mechanism in C++",
        "How to add Human character and auto spawn system as Open world games do",
        "AI Character including their perception (sight and hearing)",
        "AI Pedestrian system",
        "Navigation Invoker"
      ],
      "course_content": {
        "Intro To Course": [
          "Introduction"
        ],
        "Make Generic Character with ability like movement, shooting, grenade throw": [
          "Adding Character with movement. GTA 6 in Unreal 4 C++",
          "Adding Jump and Animation - GTA 6 in Unreal 4 C++",
          "Adding Guns - GTA 6 in Unreal 4 C++",
          "Attaching Gun to Character - GTA 6 in Unreal 5 C++",
          "Adding different Guns and equip multiple guns Combat Animation BP - GTA 6",
          "Gun Shooting, Apply damage and Receive Damage - GTA 6 in Unreal 5 C++",
          "Headshot Implementation GTA 6 in Unreal 5 C++",
          "Aim offset & adding Sound cues - GTA 6 in Unreal 5 C++",
          "Adding Human Character with Choose option, Sprint Mechanism - GTA 6",
          "Explanation of previous lecture",
          "Grenade throw part 1 (Spline Component) - GTA 6 in Unreal 5 C++",
          "Grenade throw part 2, Radial damage, particle effect, sound cue - GTA 6"
        ],
        "Advance NPC with basic senses.": [
          "AI added with Sight Perception",
          "AI Hearing perception - GTA 6 in Unreal 5 C++",
          "Behavior tree with custom task node - GTA 6 in Unreal 5 C++",
          "AI Shooting and looking at player - GTA 6 in Unreal 5 C++",
          "AI Pedestrian System like GTA - GTA 6 in Unreal 5 C++",
          "Auto AI spawn during runtime - GTA 6 in Unreal 5 C++",
          "Hand combat with AI - GTA 6 in Unreal 5 C++",
          "KO Punch to AI - GTA 6 in Unreal 5 C++",
          "Navigation Invoker, Runtime Navigation for AI - GTA 6 in Unreal 5 C++",
          "Petrol Station blast & Big Head Characters - GTA 6 in Unreal 5 C++"
        ]
      },
      "requirements": [
        "Basic Understanding of Unreal Blueprint",
        "You don't need to have much knowledge of C++."
      ],
      "description": "Hi all,\nHere you will learn about Unreal C++ basics. We will start by comparing why we should use C++ over the blueprint and what architecture does Unreal C++ uses and What is the basic functionality of all the classes and their hierarchy.\nWe will start making an open-world game and make Generic characters and NPC\nYou will learn how to make AIs spawning system works in the open-world game.\nwe will add Pedestrian systems, fighting system, and hand combat system all at run time.\nThe course also contains how to make an AI behavior tree and its component in C++.\nWe will make Behavior tree component all in C++ with coving all the basics of behavior trees.\nBy the end of the course, you can use your knowledge of C++ and Blueprints to build your own dream games. You can use the games built during this course for your personal projects moving forward, as you add more advanced features. Even if you thought C++ was difficult or intimidating before taking this course, you will learn how easy it is to code C++ within Unreal Engine 4 once you go through these lectures. Even if you are only interested in single-player type games, this course will be a great fit as it teaches many other concepts besides programming for multiplayer games.\nWhy Learn From Me\nIn this course, you will learn more than just programming in Unreal Engine 4. You will actually follow the ‘Unreal Way’ of making games in this Epic Games-approved course. Start off on the right foot and write effective C++ code using methods the engine creators have used themselves! I have been working with Unreal Engine 4 and creating game development tutorials since day one. Through this partnership with Epic Games, you will gain the skills to create stunning new projects and advance your professional aspirations in game development.\nWho this course is for:\nPeople who have tried C++ with Unreal before but could not find the right tutorial to support their hands-on learning style. This course offers step-by-step guidance and lots of activities so you can master making games with C++.\nDevelopers from Unity3D and other engines looking to dive into Unreal Engine programming.\nIf you have never touched a programming language before this course may not be for you. However, proficiency in Unreal’s Blueprint visual scripting also counts as a valid foundation for this course as it shares the same concepts as languages like C++.\nIf you are an artist who wants to bring your ideas to life in a game, a Blueprint-focused course might be a better fit for you. Skim the course curriculum to see if you’re interested in using the power of C++, networking, and AI programming to build out the technical structure of your game.",
      "target_audience": [
        "Anyone who wants to learn Unreal C++ ( from beginner to intermediate)"
      ]
    },
    {
      "title": "Complete C# Unity Developer 3D:Ultimate Guide For Begginers",
      "url": "https://www.udemy.com/course/complete-c-unity-developer-3dultimate-guide-for-begginers/",
      "bio": "Your first 3D Unity games for web, Mac & PC.",
      "objectives": [
        "Learn C# from scratch. A powerful modern language.",
        "Learn good coding and design patterns.",
        "You will learn Basics and Intermediate C# Skills.",
        "Develop strong and Unique problem solving skills.",
        "How to program from scratch.",
        "You will learn Game Level Creation,UI Creation,Sound Clips Adding to Games and Manipulate them,Particle System etc."
      ],
      "course_content": {},
      "requirements": [
        "PC or Mac capable of running Unity (free Personal version).",
        "No prior coding experience required or experience in Unity 3D",
        "Hunger to learn Unity Game Development"
      ],
      "description": "Unity is an incredible 3D package used for making video games, architectural and medical imaging and more. The challenge is that it's big and complicated to use, especially for complete beginners to coding and game development. We make learning to code easy and fun by leading you step-by-step through the process of creating exciting games.\nThe course is project-based, so you will not just be learning dry programming concepts, but applying them immediately to real indie games as you go.\nYou will get full lifetime access for a single one-off fee. The creators are qualified and experienced coders and avid gamers, so are able to explain complex concepts clearly, as well as entertain along the way.\nAnyone who wants to learn to create games: Unity 3D is a fantastic platform which enables you to make production-quality games. Furthermore these games can be created for Windows, MacOS, iOS (even iOS 9), Android and Web from a single source!\nDive in now, you won't be disappointed!\nWho this course is for:\nAnyone who wants to learn to code the fun way - by making games.\nExisting coders (especially C#) who want to re-skill to game development.\nPeople who want to learn to make their video games, learning code as they go.",
      "target_audience": [
        "Anyone who wants to learn to code by making one single game",
        "Complete beginners",
        "Existing coders (especially C#) who want to re-skill to game development.",
        "Anyone who need a easy way to start unity."
      ]
    },
    {
      "title": "Side Bussiness Kit: Your Own Stay in the Line iOS Game Clone",
      "url": "https://www.udemy.com/course/passive-income-your-own-stay-in-the-line-ios-game-clone/",
      "bio": "Step by step video lectures enabling you to publish your own version of Stay in the Line iPhone game & start your biz",
      "objectives": [
        "publish your very own iPhone game to the itunes app store, a clone of the Stay in the Line famous game",
        "Get your Apple iOS developer license",
        "Make passive income from advertements within the game",
        "Learn simple images editing techniques to make game graphics quickly"
      ],
      "course_content": {
        "Initial Setup": [
          "Apple Developer License",
          "Get XCode Tool",
          "Download Full Source Code and Open it in XCode",
          "Creating the iOS Certificate",
          "App Provisioning Profile"
        ],
        "Advertising Networks Setup": [
          "Chartboost and Revmob Accounts",
          "Google Admob Account Setup & Banner ID"
        ],
        "Personalizing Game Main Graphics": [
          "The Main Character Images",
          "Creating Road Graphics - part 1",
          "Creating Road Graphics - part 2",
          "Creating Game Logo"
        ],
        "Game Icons": [
          "Creating the Game Icon",
          "Resizing the game icons"
        ],
        "iTunes Connect App Setup": [
          "Taking Gameplay Screenshots for all device sizes",
          "Itunes Connect Setting part 1",
          "Itunes Connect Setting part 2 - leaderboard",
          "Entering the Advertising IDs in XCode Global file"
        ],
        "Publishing to iTunes App Store": [
          "Archiving and Publishing to iTunes App Store - part 1",
          "Uploading Process",
          "BONUS"
        ]
      },
      "requirements": [
        "a MAC OS X or macincloud.com",
        "one afternoon to spare!"
      ],
      "description": "With this course, you get the full source code of a top game similar to “Stay in the Line” iOS game where you control a dot and need to stay within the line for as long as possible.\nThe gameplay is simple & addictive, which are the main ingredients to make a small game successful in the itunes app store and reach to top charts!\nIn this course, we will modify the graphic images to create a totally different game, a racing car game where the car needs to stay within the road boundaries. It only take a couple hours to build it, and we’re using very simple image editing techniques. I show you every single steps you need to start, and I’m assuming you know nothing or very little,and I’m gonna help you succeed having your very own game, published in the itunes app store, without having to write not even one single line of code!\nSince this source code comes with advertising banners you not only get an education but you also have the potential to make passive incomes from it.\nMany of my students that took my courses, just like this course, made it to the top iTunes charts and they are now making a living out of creating mobile games!\nThis game source code costs hundreds of dollars on its own, and you’re getting it for free with this course. You can keep using this code and make dozens of games out of it. You can make games about spaceships, car racing, boat racing, jet skis, jetpacks, pet racing, horse racing, motorcycles, rockets, or even robots. You imagination has no limits.\nThis is a perfect way to start your mobile app business or increase your app portfolio quickly.\nMake the right decision and join us now. I’ll see you in the classroom.",
      "target_audience": [
        "anyone that wants to start in the mobile app industry",
        "anyone wanting to start their business with little to no money",
        "graphic freelancers that want to become entrepreneur"
      ]
    },
    {
      "title": "Create a Game HTML5 Canvas Simple Catcher Game JavaScript",
      "url": "https://www.udemy.com/course/javascript-html-game/",
      "bio": "Explore how you can create an HTML5 Canvas based game from scratch using JavaScript Step by Step game creation",
      "objectives": [
        "How to Create a HTML5 Canvas Game",
        "How to apply JavaScript to make a simple HTML5 canvas game",
        "Draw with JavaScript in HTML5 Canvas",
        "Apply Game design and logic to make gameplay",
        "How to plan and create a JavaScript game",
        "Creating games with JavaScript"
      ],
      "course_content": {
        "Introduction to setting and making a canvas game from scratch": [
          "Introduction how to make a game using JavaScript and HTML5",
          "Get ready and Setup Game HTML code",
          "How to JavaScript Create Elements from code",
          "Draw on Canvas Code Snippet",
          "How to add Keyboard Event Listeners to HTML5 game",
          "Keyboard events to move Canvas item Code Snippet",
          "How to create enemies in game Drop random items",
          "Source Code to Generate Random Items on Canvas",
          "How to move enemies on canvas game Move Random Objects",
          "Moving objects and making them round on Canvas source Code",
          "How to Add Colors and Set hazards in JavaScript game",
          "Source Code grow and shrink bad objects falling Code Snippet",
          "How to setup Collision Detection HTML5 JavaScript game",
          "How to run code and add actions for Collision Actions in JavaScript game",
          "Source Code for Collision detection with JavaScript on HTML5 Canvas",
          "How to Add Scoring to Game in JavaScript",
          "Source Code for adding scoring in Game HTML5 JavaScript",
          "How to add Game Controls within your JavaScript Game",
          "Source Code for JavaScript Game Controls",
          "How to setup start and end within JavaScript game - Start Game Option",
          "Source Code Adding Clickable Buttons to Canvas Game",
          "JavaScript HTML5 Canvas game Catcher Game Code Review."
        ],
        "Resources and content for additional learning Bonus content Additional Learning": [
          "PDF Guides and resources for additional learning"
        ]
      },
      "requirements": [
        "Basic JavaScript knowledge",
        "Understanding of coding",
        "Editor and ability to write code",
        "Prior Coding Experience"
      ],
      "description": "Do you want to learn how to make Games online ????\nStart here - perfect to see how a game can be created from scratch using HTML5 and JavaScript\nNo libraries no shortcuts - straight pure JavaScript to draw on canvas and add game controls and interactions.\nThis is a one of kind build that you will only get here - custom code from start to finish -\nStep by step learning on how to create all the game functionality you need to complete a full functional game.\nQuick tutorial in just over 1 hour will give you a fast paced no filler content course that you can learn from.\nProfessional instruction - taught by a developer with over 20 years experience - having developed over 100 web games.\nInstructor is ready to help you learn and answer any questions you may have.\nExplore how you can create a quick simple game using JavaScript and HTML5 canvas element\nLearn coding with FUN interactive game development - See what you can build with JavaScript!!!\nCourse covers all the core functions needed in a game\nBasics of drawing on HTML5 canvas\nClearing and drawing shapes\nAdding key event listeners\nMaking objects MOVE with keypresses\nTracking key presses to make game interaction.\nCollision detection\nAdding buttons that are interactive on the canvas\nAdding game scoring and game controls\nCreating enemies and building unlimited enemies within an array\nMovement and animation of objects\nSource code is included so you can build your own version of the game as you go through the lessons",
      "target_audience": [
        "Anyone who wants to create a fun simple game online",
        "Anyone who wants to practice creating games with JavaScript",
        "Anyone who is starting out with game development",
        "HTML5 game developers",
        "JavaScript developers",
        "Web Coders and web designers"
      ]
    },
    {
      "title": "Unity | From Beginner to Professional | 3D & 2D Game Dev",
      "url": "https://www.udemy.com/course/unity-from-beginner-to-professional-3d-2d-game-dev/",
      "bio": "Take your first step into the world of game development. Learn from scratch and code your future.",
      "objectives": [
        "They will be able to develop and publish their own games from scratch",
        "They will gain the competence to work in game development teams",
        "They will be able to lay a solid foundation to establish their own game studios",
        "They will be able to stand out in job or internship applications by building their portfolios"
      ],
      "course_content": {
        "Introduction Videos": [
          "3D Mobile Car Racing | Full Speed | Promo Video",
          "3D Mobile FPS | Operation | Promo Video",
          "3D Mobile | Juice Shop | Promo Video",
          "3D Online | We Must Escape | Promo Video",
          "2D Mobile | Fruit World | Promo Video"
        ],
        "General Information – Please watch before deciding to purchase.": [
          "Course Introduction and Information",
          "Information about source codes",
          "Explanation about video and narration language – must watch."
        ],
        "Installation | Editor Overview and Information": [
          "Installation",
          "Editor Overview | Window Introduction #1",
          "Editor Overview | Window Introduction #2",
          "Editor Overview | Window Introduction #3"
        ],
        "Essential First Knowledge": [
          "Debug Class",
          "Time Class"
        ],
        "Basic C# Lessons": [
          "Variables | Declaration | Types",
          "Variable Modifiers",
          "If Else Usage | Comparison Operators | Equality Operators | #1",
          "If Else Usage | Logical Operators | Various Cases | #2",
          "Other Mixed Operators",
          "Arithmetic Operators",
          "For Loop",
          "Array Declaration | One-Dimensional Arrays | #1",
          "Array Declaration | Multidimensional and Jagged Arrays | #2",
          "Creating Lists | List Types | Other Various Operations",
          "Foreach Loop",
          "While | Do While Loop",
          "Switch Statement",
          "ArrayList Declaration | Various ArrayList Commands",
          "HashTable Declaration | Various HashTable Commands",
          "Dictionary Declaration | Various Dictionary Commands",
          "Stack Class | Declaration and Various Commands",
          "Queue Class | Declaration and Various Commands",
          "Try Catch Error Handling Block",
          "Jump Statements",
          "Enum Declaration | Multiple Choice Enum System",
          "Creating Properties | Usage",
          "Miscellaneous Commands"
        ],
        "C# Function Operations | Class Operations | Interface Operations | Various Examp": [
          "Functions",
          "Class #1",
          "Class #2 | Static Class",
          "Class #3 | Constructors | Destructors | Initializing Different Classes",
          "Class #4 | Inheritance Example",
          "Class #5 | Defining Namespaces | Various Namespace Operations",
          "Class #6 | Override - Virtual Modifiers",
          "Class #7 | Abstract - Sealed | Types of Classes",
          "Class List Explanation and Sample Study",
          "Interface"
        ],
        "Other Unity Functions | Various Techniques | Functions | Classes": [
          "Unity’s Basic Functions and Execution Order",
          "Other Unity Functions",
          "Coroutine",
          "Invoke",
          "GameObject Operations #1",
          "GameObject Operations #2",
          "GameObject Operations #3",
          "Async / Await",
          "UniTask",
          "Delegate",
          "Action | Func",
          "Event | UnityEvent",
          "Extension Methods"
        ],
        "Transform & Vector & Quaternion Operations": [
          "Vector Operations #1",
          "Vector Operations #2",
          "Vector Operations #3",
          "Vector Operations #4",
          "Transform Operations #1",
          "Transform Operations #2",
          "Quaternion Operations"
        ],
        "Various Classes & Methods | Frequently Used": [
          "Instantiate | Object Creation Operations",
          "Mathf Class | Mathematical Operations",
          "Random Class",
          "Application Class",
          "Scene Operations | SceneManager Class",
          "Color Class | Color | Color32",
          "Various Inspector and Editor Operations",
          "Gizmos Operations",
          "GUI Operations",
          "GUI Event Operations",
          "Various Classes and Explanations"
        ],
        "Unity Physics | Physics Operations | PHYSICS | 2D‑3D": [
          "3D | Physics Operations #1 | Introduction | First Collider Operations",
          "3D | Physics Operations #2 | Initial Collision Detection Operations | Other Earl",
          "3D | Physics Operations #3 | Component Explanations",
          "3D | Physics Operations #4 | Component Explanations",
          "3D | Physics Operations #5 | Component Explanations",
          "3D | Physics Operations #6 | Component Explanations",
          "3D | Physics Operations #7 | Component Explanations",
          "3D | Rigidbody Commands",
          "2D | Physics Operations #1 | Introduction | First Collider Operations | First Co",
          "2D | Physics Operations #2 | Component Explanations",
          "2D | Physics Operations #3 | Component Explanations",
          "2D | Physics Operations #4 | Component Explanations",
          "2D | Physics Operations #5 | Component Explanations",
          "2D | Physics Operations #6 | Component Explanations",
          "2D | Physics Operations #7 | Component Explanations",
          "2D | Physics Operations #8 | Component Explanations",
          "2D | Rigidbody Commands",
          "3D - Raycast #1",
          "3D - Raycast #2",
          "2D - Raycast #1",
          "3D‑2D | RaycastAll & RaycastNonAlloc Command | Multi‑object Detection",
          "3D - Other Cast Types",
          "3D | Overlap Commands | Creating Ranges | Detecting Objects by Range",
          "2D Overlap Commands | Cast Commands"
        ]
      },
      "requirements": [
        "Basic computer knowledge",
        "A device with the hardware to run the Unity game engine and system"
      ],
      "description": "Are you ready to turn your dream games into reality?\nThis comprehensive training program is designed to take you from absolute beginner to professional level within the Unity ecosystem—even if you have no prior experience. We will start from the fundamentals of Unity and teach C# with game-focused examples. In addition to theoretical explanations, you will reinforce your learning by developing five complete projects from scratch.\nWhat Will You Learn in This Course?\nUnity interface and core systems\nA solid introduction to C# programming\nGame mechanics, physics engines, and animations\nUI design, audio management, scene transitions, and more\nFile handling and data operations\nArtificial intelligence systems\nOnline/multiplayer game mechanics\nUnity Services\n5 complete game projects (compatible with Mobile and PC)\nWho Should Join?\nThose who dream of becoming game developers\nBeginners with no coding experience\nDevelopers with basic knowledge who want to advance\nAnyone wanting to master Unity through real-world projects\n\n\n--- GAMES ---\n3D Mobile Car Racing - Full Speed\nGeneral Vehicle Operations\nVehicle control system\nBrake light and tire skid mark system\nSpeedometer\nReverse gear system and reverse light operation\nGear system\nNitro system\nVehicle recovery/reset system\nVehicle Assist Systems\nSteering assist system\nLinear friction assist\nAngular friction assist\nRoad grip assist system\nTraction control assist\nSpin control system\nAI Vehicle Mechanics\nLateral control system\nCornering control system\nSpeed control system\nRoute targeting and following system\nSelf-recovery system for AI vehicles\n3D sound system (vehicle sounds are audible when passing nearby and fade with distance.)\n- General Features and Functions\nData system (saving and reading data from a file)\nCar customization system (changing wheel and car color, saving and reading via file system)\nSettings section (controlling game, menu, and effect sounds; adjusting graphic quality)\nWho's ahead system (ranking control, tracking which car is in which position)\nLoading panel\nCheckpoint system\nWrong-way warning system (reverse direction control)\nCountdown timer\nDestructible object system\nObject pooling wherever necessary\n...and much more.\n\n\n3D Mobile FPS Game - Operation\n- General Character Mechanics\nMovement\nRotation\nJumping\nCrouching\nManual aiming\nAuto aiming\n- Enemy Features\nDetection system\nPatrol system\nSound detection system (Can detect bullet and grenade sounds even outside range and react)\nChase system\nField of view system\nPlayer memory system\nHealth bar system\nHit effect\n- Weapon Mechanics\nFire mode switch system (Single Shot, Burst Fire)\nWeapon switching system\nReload system\nEmpty shell ejection\nBullet trail effect\nAuto aim correction assistant (Helps targeting enemies)\nAuto aim assist system (Automatically shoots when an enemy is targeted)\nAim enlargement assistant (Automatically enlarges aim when targeting an enemy)\n- General Features\nWeapon upgrade system (Weapon stats can be improved)\nData system (Weapon data is saved using a file system and read back for use)\nMain menu settings section (Audio settings, aim assistants, and preferences can be adjusted, saved to and read from the file system)\nMini map system\nItem creation and collection system\nHealth system and medkit usage system\nHit direction indicator (Visually shows the direction of the received damage)\nGrenade throwing system\nVibration system on damage taken\nLoading panel\nLevel scene welcome panel\nOcclusion culling system\nObject pooling system wherever needed\nand much more...\n\n\n- General Character Controls\nCharacter control\nFruit and juice collecting system\nSlot system (for carrying items)\n- General Features\nData system (All data is saved to and read from the file system)\nField system (Unlocking and managing tree slots in the field)\nFruit generation and growth system for trees\nFruit capacity system for trees\nMachine system (All operations of machines that produce juice)\nFruit capacity system for machines\nJuice (glass) capacity system for machines\nTree and machine upgrade system (Trees and machines can be upgraded)\nOffice management system (Improvements for character and customer management)\nOrder desk system (Desk where customers arrive)\nTrash bin system (Throwing away fruits and juices in hand)\nSettings menu (Audio and other settings can be configured)\nObject pooling system wherever needed\n- Customer System\nMovement system\nNavMesh operations\nOrder taking and movement system\nCustomer slot system\nCustomer management system (Automatically generates customers based on predefined settings and handles their technical processes)\nand much more...\n\n\n3D PC - ONLINE - We Must Escape From Here\nThis is an online puzzle-type game where at least two players must work together to solve puzzles and advance through different levels. For example, one player presses a button to open a door, allowing the other player to move to the next area and pull a lever so the first player can proceed. All movement systems and the online structure are developed and explained from scratch.\n\n\n*** 2D Puzzle - Match-3 - Fruit World ***\nGame Features\nDynamic Grid Generation System\nFruit Spawning\nSpecial Fruit System\nBomb Fruit System\nGame Mode System – (Time-Based - Move-Based)\nWin Condition System (Score Only - Fruit Only - Score and Fruit)\nFruit Shuffling System\nSpecial Power System\nFruit Disappearance Effect Pool\nSettings Menu – Sound On/Off System\nand much more...\nTHE ORIGINAL VIDEO NARRATION AND DESCRIPTION LANGUAGE OF THIS COURSE IS TURKISH. ALL VIDEOS HAVE BEEN DUBBED USING ARTIFICIAL INTELLIGENCE. THERE MAY BE ERRORS OR MISINTERPRETATIONS DUE TO TRANSLATION. PLEASE CONSIDER THIS BEFORE MAKING A PURCHASE.",
      "target_audience": [
        "Students and recent graduates aiming for a career in game development",
        "Entrepreneurs who want to bring their own game projects to life",
        "Those who want to earn income by working freelance"
      ]
    },
    {
      "title": "SpeedTree Foliage Guide: Creating 3DGrass and Bushes for UE5",
      "url": "https://www.udemy.com/course/utlimate-beginner-guide-creating-3d-grass-and-bushes/",
      "bio": "Learn how to create from scratch 3D Grass and Bushes Ready to be used for videos games On SpeedTree",
      "objectives": [
        "Create texture from real world reference.",
        "The basic of SpeedTree",
        "Different technique to create Grass",
        "Creating Wind for the mesh that we created in Unreal Engine 5"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "SpeedTree": [
          "Chapter 1: Gathering Ressource from Real World",
          "Chapter 2: Creating Textures",
          "Chapter 3: Starting With SpeedTree",
          "Chapter 3: CreatingGrass Part1",
          "Chapter 3: CreatingGrass Part2",
          "Chapter 3: Creating One Grass and a Bush Part 1",
          "Chapter 3: Creating One Grass and a Bush Part 2"
        ],
        "Unreal Engine 5": [
          "Chapter 4: Importing In UE5 Part 1",
          "Chapter 4: Importing In UE5 Part 2",
          "Chapter 4: Importing In UE5 Part 3"
        ]
      },
      "requirements": [
        "No experience needed; I'll teach SpeedTree basics for beginners."
      ],
      "description": "A 4-hour Course! Learn to create lifelike 3D grass and bushes in this beginner-friendly course. From gathering real-world references to mastering SpeedTree and optimizing for Unreal Engine 5, you'll cover everything you need to know.\nExplore texture creation, low-poly techniques, wind simulation, and optimization strategies in just 4 hours!\nIn this course, you will:\nLearn to create 3D grass and bushes from scratch: Understand the fundamentals of foliage creation, from concept to final product.\nGather real-world references and take good pictures: Discover how to capture real-life foliage to use as references for your digital creations.\nCreate textures in Photoshop: Dive into texture creation with Photoshop, including generating a normal map, base color, and opacity mask to add depth and realism to your models.\nMaster SpeedTree basics: Get comfortable with SpeedTree, a powerful tool for creating realistic foliage, and learn how to use its features effectively.\nCreate low-poly grass for optimal performance: Learn techniques to create grass that looks great while maintaining optimal performance in your projects.\nImplement vertex colors and LOD settings correctly: Understand how to use vertex colors and Level of Detail (LOD) settings to enhance the visual quality and performance of your foliage.\nExplore techniques for creating bushes: Discover different methods for creating bush models that are optimized for use in games and simulations.\nImport foliage into Unreal Engine 5: Learn how to import your foliage models into Unreal Engine 5 and set them up for use in your projects.\nSet up basic parameters and smart material functions: Explore Unreal Engine's material system and create smart material functions to simulate wind effects on your foliage.\nSimulate wind effects on foliage: Dive into advanced techniques for simulating wind effects on your foliage, adding a dynamic and immersive touch to your scenes.\nPolish LOD and optimize for performance in UE: Learn how to polish your Level of Detail settings and optimize your foliage for performance in Unreal Engine 5.\nWith step-by-step guidance, practical exercises, and expert tips, you'll gain hands-on experience in creating stunning 3D vegetation for your projects. Whether you're new to 3D modeling or looking to enhance your skills, this course provides the tools and knowledge you need to succeed. Join now and bring your virtual environments to life!",
      "target_audience": [
        "Beginner or advanced environmental artists who want to learn how to create 3D Grass and Bush"
      ]
    },
    {
      "title": "Publish your SplishSplash iPhone game to iTunes store today",
      "url": "https://www.udemy.com/course/publish-your-splishsplash-iphone-game-to-itunes-store-today/",
      "bio": "Complete video lectures to get you to publish a top iOS game to the iTunes app store. Ads & in-app purchase integrated",
      "objectives": [
        "publish your very own iPhone game clone",
        "Learn about making games without coding",
        "Learn about itunes app store terminolgy",
        "Get familiar with XCode, and publishing apps",
        "Familiarize yourself with iTunes Connect",
        "Get your iOS developer license"
      ],
      "course_content": {
        "Initial Setup": [
          "Introduction and Course overview",
          "Get the iOS Developer license from Apple",
          "Create the iOS dev certificate",
          "Get Xcode tool for FREE and open it",
          "How to create the app ID and provisioning profile",
          "Download source code and open it in xcode and play in simulator",
          "Overview of the source code settings and resources"
        ],
        "The Reskinning Process": [
          "Finding which trending game theme to use",
          "Modifying the Hero character heading up animation",
          "Modifying the Hero down animation",
          "Modifying the enemy Sharks into cars and boxes",
          "Modify the enemy presentation files and testing in simulator",
          "Working on the Bumper animation colors",
          "Creating the background image in the editor",
          "Overview of what is left to modify",
          "Adding your own music and sound effects"
        ],
        "Icons and launch images": [
          "Creating the app icon for free from scratch",
          "Resizing the app icon to fit all iPhone screens",
          "Building the launch images loading screens"
        ],
        "ITunes Connect settings": [
          "Xcode settings - name, provisioning profile and more",
          "Add the iOS app in itunes connect dashboard",
          "How to take in-game screenshots",
          "Entering itunes connect main settings",
          "App Pricing and in-app purchase creation",
          "Create and add game center leaderboards",
          "Add itunes app store link to the app"
        ],
        "Advertising Networks": [
          "Configuring Chartboost advertising network to get paid",
          "Get paid by configuring google admob advertising network"
        ],
        "Publishing to iTunes": [
          "Launch the itunes Archiving process to publish",
          "Uploading the app to itunes app store",
          "Submit the app for review",
          "BONUS"
        ]
      },
      "requirements": [
        "a MAC OS computer or virtual image"
      ],
      "description": "***** Do you know you can \"Publish iPhone games without coding\" ? *****\nThis course will let you create a game similar to Splish-Splash, a top chart game in the iTunes app store, all of it without coding. I had many students those who wanted to create game apps but they where not interested to study codes or for some making game app with codes were hard. So here i am introducing a way to create games without coding. This course comes with the source code so you will not have to refer anything from anywhere rather than in this course. Everything you need is included in this course.\nWHAT YOU WILL GET AFTER COMPLETING THE COURSE ?\nYou will have your very own iPhone game in the iTunes app store, ready to bring in revenues from Ads and in-app purchases.\nYou will be able to make an iPhone game similar to Splish Splash, without coding.\nYou will be able to get all free resources, including the source code with an unlimited license.\nYou can publish games every weekend, using the same source code, included within this course as a bonus, for free.\nYou will have the potential to make a lot of passive income.\nYes Here Is The Way To Make iPhone Game Apps Without Coding !\n************ READ ON ! **************\nLooking to boost your income as a App developer? Or maybe you're seeking a career change that gives you more free time and flexibility?\nThen this is the right course for you.\nYOU CAN BECOME AN IOS GAME APP DEVELOPER\niOS has a huge platform where you can sell your game app and make a lot of money . This course will take you from the very basic concepts of game development using the free software given by Apple.\nHOW MUCH DO YOU HAVE TO SPEND?\nThere is actually no more expenses except signing up besides getting the iOS developer license ($99/year). And we will show you the places from where you can get the resources we want without spending a single dollar.\n*********** HOW MUCH YOU CAN EARN *******\nYou can earn more than you think. I am the one example of that after studying this method i could create and publish game app every week . So i could make a lot of money without putting more effort . Join this course and follow me and you will make a lot money than you think.\nENROLL THE COURSE NOW AND PUBLISH YOUR VERY FIRST GAME APP, all it takes is one free afternoon.",
      "target_audience": [
        "entrepreneurs",
        "indie devs",
        "people interested in making trendy games the simple way",
        "people interested in learning graphic design tips",
        "hustlers",
        "computer students",
        "art & graphic design students"
      ]
    },
    {
      "title": "The Ultimate AI Pipeline for XR Development",
      "url": "https://www.udemy.com/course/the-ultimate-ai-pipeline-for-xr-development/",
      "bio": "Design, Build, and Launch Immersive XR Projects with AI—No Experience Needed",
      "objectives": [
        "Design and publish an XR mini-game using my AI-powered pipeline.",
        "Describe how to prepare and import assets for Unity XR projects.",
        "Integrate AI tools to create synchronized audio narration.",
        "Build gesture-based interactions using Meta Quest Building Blocks.",
        "Use AI tools to generate narratives, voiceovers, and 3D assets.",
        "Implement C# scripts to trigger AI-generated content in XR.",
        "Develop and debug immersive XR scenes using Unity and AI.",
        "Produce a portfolio-ready XR project showcasing AI integration.",
        "Demonstrate Unity XR Toolkit skills for gameplay design.",
        "From idea to publish a mixed-reality game"
      ],
      "course_content": {
        "Interactive Spatial Storytelling - The Raven": [
          "Introduction",
          "Emotions in the Public Domain: Story Research & Reflection",
          "Use ChatGPT for Brainstorming",
          "Invent a World: Brainstorming Your Own Game Idea",
          "AI for 3D Character Design",
          "AI Muse: Create 3D Character and Creature Designs Using ChatGPT",
          "AI for 3D Modeling",
          "Sculpt from Thought: Create Your Own 3D Models Using Trellis",
          "AI for 3D Animations",
          "Bring it to Life: Create Your Own 3D Animations Using Anything World",
          "3D Game Level & Environment Design",
          "Worldbuilder: Create Your Own 3D Game Environment Using AI",
          "AI for Sound and Voiceover with ElevenLabs",
          "Crafting Voiceovers with AI tools",
          "Creating Background Music with Suno",
          "Using AI Tools to Create Your Background Music",
          "Initial Setup - Download the Apps",
          "Setup Meta Quest in Unity",
          "Introducing Meta Building Blocks in Unity",
          "Level Design - Import Assets + Animations",
          "Vibe Code 01 - UI + Voiceover + Background Music",
          "Vibe Code 02: OnTrigger Enter + Animation Clips Change",
          "Enter the Verse: Create Your Own Game Inside Meta Quest",
          "Publishing and Finalizing the Game",
          "Release, Reflect, Revise: The Final (and First) Step of Your XR Journey",
          "Release, Reflect, Revise: The Final (and First) Step of Your XR Journey",
          "Connect with Dominique Wu"
        ]
      },
      "requirements": [
        "A Meta Quest 2, Pro, 3, or 3S headset (Link Cable or Air Link preferred)",
        "A Windows PC with strong performance for Unity and XR development",
        "Curiosity about AI, XR, and immersive storytelling",
        "Willingness to explore basic coding concepts (no prior coding required!)",
        "No programming experience needed — if you’ve got the drive, we’ll guide you",
        "A passion for learning and experimenting with new tech",
        "This course is beginner-friendly. Whether you're a curious creative or a future developer, you'll learn everything step-by-step — no prior experience required."
      ],
      "description": "Welcome to The Ultimate AI Pipeline for XR Development—a hands-on, future-forward course designed for designers, developers, business innovators, creative technologists, educators, and storytellers ready to shape the next era of immersive experiences.\nLed by XR creator and AI Fellow Dominique Wu, this course offers an end-to-end pipeline to help you design, develop, and publish interactive XR content using AI-powered tools—no prior coding or game development experience required.\nYou’ll build a fully functional spatial storytelling experience, transforming Edgar Allan Poe’s The Raven into a mixed-reality mini-game for Meta Quest 3. More than a project, this is a launchpad for turning literature, branding, learning, or entertainment into an immersive experience.\nThroughout the course, you’ll gain practical skills with:\nChatGPT for ideation, dialogue scripting, and vibe coding\nTrellis + Blender to generate and customize 3D environments and objects\nAnything World to animate characters quickly with natural motion\nElevenLabs for realistic, emotion-rich AI voiceovers\nSuno to create custom AI-generated soundtracks\nUnity + Meta Building Blocks to build, test, and deploy for Meta Quest 3\nSideQuest for publishing your first XR game\nBy the end, you’ll publish your project on SideQuest and walk away with a standout portfolio piece that demonstrates how storytelling, design, and AI can converge in XR.\nWhether you're prototyping a product, crafting an educational module, pitching a new immersive brand experience, or simply telling better stories—this course will equip you with the tools, confidence, and creative vision to thrive in the XR frontier.\nLet’s turn your ideas into immersive worlds. The future of storytelling begins here.",
      "target_audience": [
        "Beginners in Unity or XR who want to build immersive experiences",
        "UX or game designers curious about integrating AI into XR workflows",
        "Developers looking to expand into AI-powered spatial storytelling",
        "Creative technologists or storytellers exploring VR, AI, and interactivity",
        "Educators or strategists seeking to prototype in XR without prior coding",
        "Anyone passionate about the future of AI, creativity, and immersive tech",
        "Whether you're a first-time coder, a curious designer, or a visionary dreamer—this course welcomes all who dare to build the future of XR."
      ]
    },
    {
      "title": "Unity Game Programming For Absolute Beginners",
      "url": "https://www.udemy.com/course/unity-game-programming-for-absolute-beginners-o/",
      "bio": "Learn the foundational concepts in Unity game development from ground up.",
      "objectives": [
        "Learn Unity Basics and Game Development Fundamentals",
        "Learn World Building and Visual Design using Unity",
        "Master Gameplay Mechanics and User Interaction",
        "Learn to build your first game from scratch"
      ],
      "course_content": {
        "introduction": [
          "introduction"
        ],
        "Game Development Basics": [
          "What Makes A Video Game",
          "Understanding Game Engines",
          "2D Game Development Basics",
          "3D Game Development Concepts",
          "A 3D tour Inside the Unity Game Engine",
          "Character Animation and Rigs",
          "Planning and Prototyping",
          "Networking Basics",
          "Beginner project ideas And Recap"
        ],
        "Getting Started with Unity": [
          "Unity Hub and project setup",
          "Unity 6 interface overview",
          "Task"
        ],
        "Working with Assets and Scenes": [
          "Asset store and loading the 2D demo assets",
          "2D scene creation via tilemaps, prefabs and sprites"
        ],
        "Introduction to Scripting": [
          "Scripting Basics (components, functions, variables)",
          "Scripting the basic player setup and movement (horizontal only)",
          "Player jumping and collision with the environment",
          "Methods, arguments, return statements and the if-checks",
          "Preventing Double Jumps",
          "Task"
        ],
        "Animations and UI": [
          "Player animations using sprites",
          "Triggering player animations from code",
          "2D UI elements (images and text)",
          "Task"
        ],
        "Enemy Implementation": [
          "Enemy creation and their basic movement",
          "Changing The Direction Of Enemies Via Sensors",
          "Task"
        ],
        "Scenes and effects": [
          "Scripting the GameOver and GameWon UI panels",
          "Setting up the GameOver and GameWon panels inside the Canvas",
          "Audio implementation (SFX, Music)",
          "Loading a next level"
        ],
        "2D Game Development Wrap-up": [
          "Conclusion and Recap",
          "Task"
        ],
        "Introduction to Game Development and Overview of Unitys UI": [
          "Introduction to Game Development",
          "Unity UI",
          "Creating Scene & Objects",
          "Storing Objects",
          "Folder Structure",
          "Challenge 1"
        ]
      },
      "requirements": [
        "Basic knowledge of programming is enough to start and learn from this course"
      ],
      "description": "Dive into the captivating world of game development with our comprehensive Unity Game Programming For Absolute Beginners Course. Whether you're an aspiring game developer or looking to enhance your programming skills, this course will guide you through the essentials of using Unity, one of the most popular game engines, to bring your game ideas to life.\n\n\nThis comprehensive course is designed to take you from a complete beginner to a confident game developer, equipping you with the skills to create a functional, interactive game in Unity. By combining hands-on tutorials, practical tasks, and real-world techniques, this course ensures you gain a solid foundation in game development. From understanding Unity’s interface to implementing advanced gameplay mechanics, you’ll progress step-by-step, learning the essential tools and principles used by professional game developers.\n\n\nKey Features:\nHands-On Learning: Practice tasks and challenges at the end of each section.\nInteractive Gameplay Mechanics: Develop engaging player and enemy interactions.\nPerformance Optimization: Learn tips and tricks for efficient game development.\nFinal Project: Create a complete, playable game by the end of the course!\nHands-On Learning Approach\nPractice Tasks: Every section concludes with challenges to apply what you’ve learned.\nFinal Project: By the end of the course, you’ll have a fully functional, polished game to showcase your skills.\nThis course provides a complete pathway to mastering Unity and game programming fundamentals, setting the foundation for your future as a game developer. Unleash your creativity, explore exciting mechanics, and build your first game from scratch!",
      "target_audience": [
        "Individuals dreaming of creating their own video games but don’t know where to start.",
        "Students interested in pursuing a career in game design or computer science.",
        "Budding indie creators aiming to build their first game prototype to share with the world",
        "Developers with experience in other programming languages looking to learn Unity and C# for game development."
      ]
    },
    {
      "title": "Boost Your Game Performance in Unity 3D",
      "url": "https://www.udemy.com/course/learnunity3dpro/",
      "bio": "Optimise and Increase Game Performance in Unity3D",
      "objectives": [],
      "course_content": {
        "Optimise and Increase Game Performance": [
          "Introduction",
          "Occlusion Culling",
          "Audio Import Settings, WAV or MP3, Reduce Scene Load Time",
          "Improving Game Performance with Object Pooling",
          "Profiler and Quality Settings",
          "Texture Size Best Practice Power of 2",
          "CPU Optimisation Theory",
          "Make Your Game Faster Check List"
        ],
        "Extra": [
          "Audio Only Be Heard in a Certain Radius/Distance",
          "How to Make 3D Text Look Sharp and Smooth",
          "Find and Modify Android Manifest File",
          "Where Unity Asset Store, Saves the Packages?",
          "Make Your Game More Beautiful in 10 Seconds",
          "Rotate Camera with Mouse, Keyboard Keys and Accelerometer with Single Script",
          "How to Read an XML Document",
          "Switch Between Cameras",
          "Ten Quick Unity3D Tips",
          "Ask Users to Rate the App",
          "Tips for an Independent App Developer",
          "Access Device Camera",
          "Drag & Drop Game Objects",
          "Free Source Code of 5 Games"
        ]
      },
      "requirements": [
        "You should have knowledge of C-Sharp Programming Language",
        "You should have beginner knowledge of Unity3d"
      ],
      "description": "In this course you will learn how to optimise and increase game performance in unity 3d. I am going to teach you several techniques through which you can improve the performance of your game play. Below are the major topics in this course.\nOcclusion Culling\nAudio Import Settings, WAV or MP3\nReduce Scene Load Time\nImproving Game Performance with Object Pooling\nIntroduction to the Profiler\nIntroduction to the Quality Settings\nCPU Optimisation\nTexture Size Best Practice Power of 2\nMake Your Game Faster Check List\nWith the help of above topics you will be able to improve your game performance on several devices like PC, Mobile, Tablet etc. There's also an Extra section in the course in this section you will find several bonus videos that will help you boost your Unity 3D game development. You will also have five free game source code in the course. If you want to learn how to achieve maximum game performance this course is for you.",
      "target_audience": [
        "Unity3d Developers who want to learn how to improve game performance",
        "Unity3d Developers who want to explore unity3d in more depth"
      ]
    },
    {
      "title": "Master Godot 4: Craft a Survivors Roguelite with GDScript",
      "url": "https://www.udemy.com/course/master-godot-4-craft-a-survivors-roguelike-with-gdscript/",
      "bio": "Craft a Roguelite Auto-Battler with Godot 4 & GDScript",
      "objectives": [
        "Develop a \"Survivors Like\" game from scratch using Godot 4.4.1 and GDScript",
        "Implement top-down 2D character movement and controls.",
        "Set up game assets, audio, and useful plugins like Limbo AI for state machines and Collapse Folders for editing workflow.",
        "Work with Godot's 2D scene system, nodes, and editor UI integration.",
        "Handle game mechanics such as player stats, experience, leveling, damage, and item pickups.",
        "Apply state machines for enemy AI behavior (e.g., idle, chasing, death).",
        "Manage various game elements, including projectiles, hitboxes, hurtboxes, and randomized drops."
      ],
      "course_content": {
        "Day 1 – Project Setup and Player Mechanics": [
          "Setup Godot Project",
          "Art, Audio, Plugins Installation for Project",
          "Implement top-down 2D player movement (WASD + velocity)",
          "Play Animations from Spritesheets",
          "Player State Machine",
          "Player Input as Component",
          "Quiz 1",
          "Switch Animations with Signals",
          "Flipping a 2D Character"
        ],
        "Day 2 - Level Building with Tilemap Layers": [
          "Grass and Dirt Tile Map Layers",
          "Placing Trees as Map Props",
          "Adding Stumps & Fixing Y-Sorting"
        ],
        "Day 3 – Auto-Attacking Weapon System": [
          "Spawn Projectiles with a Timer",
          "Move Projectiles in Launch Direction",
          "Enemy Hurtbox and Projectile Hitbox Setup",
          "Dealing Damage to Enemies with Hitboxes and Stats",
          "Enemy dies when HP ≤ 0",
          "Rotating and Aiming Projectiles with Weapon Loadout",
          "Adding Sound Effects and Music"
        ],
        "Day 4 – Enemy Combat and Spawning": [
          "Combat System Singleton",
          "Animating Floating Combat Text",
          "Implementing Enemy Chase with Player Context",
          "Creating a Spawning System with a Time Curve",
          "Off-Screen Spawning: Smart Enemy Placement with Camera Bound",
          "Adding New Enemies with Weighted & Timed Spawning",
          "Player Hurtbox and Enemy Hitbox Setup in Godot",
          "Adding Invincibility and Custom Stats",
          "Implementing Periodic Damage for Enemy Hitboxes",
          "Player Defeat",
          "Testing and Enhancing Behavior on Player Defeat"
        ],
        "Day 5 – XP, Leveling & Powerups": [
          "Creating Pickup2D Scene",
          "Implementing Experience Pickup Scene with Inheritence",
          "Setting Up Collector2D and Fixing Player Animations",
          "Creating Enemy Drop Mechanics and Resizing Pickups",
          "Generating Random Item Drop Positions",
          "Implementing a Pickup Gravity Area",
          "Building a Player UI with HP and EXP Progress Bars",
          "Implementing a Stat-Based UI System with Signals",
          "Scripting Dynamic HP and EXP Displays for Player UI",
          "Debugging and Optimizing UI and Pickup Scripts",
          "Leveling System with Experience and Stat Progression"
        ],
        "Day 6 - Rogue-like Level-Up Rewards System": [
          "Setting Up XP Thresholds and Signal Connections for Level-Up Rewards",
          "Building the Level Up UI Layout and Animated Text",
          "Adding Reward Selection Options and Final Layout Adjustments",
          "Creating a Weapon Leveling System for Game Upgrades",
          "Items for Leveling Up Weapons",
          "Creating a Weighted Item Selection System for Level-Up Rewards",
          "Coding Reward Selection with Signal Propagation",
          "Applying Weapon Level Stats to Projectile Spawning and Instances",
          "Adding a Scythe Weapon with Rotation Mechanics",
          "Creating a Weapons Display UI for Game Inventory",
          "Connecting Signals and Configuring Weapons UI for Dynamic Display",
          "Creating Stat-Boosting Items for Player Upgrades",
          "Implementing Item Pickups and UI Fixes for Player Upgrades",
          "Creating a Health Potion Pickup for Enemy Drops"
        ],
        "Day 7 – UI Polish & High Score Saving": [
          "Implementing Camera Shake for Player Hit and Death Effects",
          "Creating a Game Over Screen with Main Menu Navigation",
          "High Score Tracking and UI Display for Enemy Defeats and Survival Time",
          "Saving and Loading High Scores with JSON",
          "Designing a Main Menu with High Score Display and Game Start Functionality",
          "Polishing Script Survivors ~ Gameplay Enhancements & Debugging"
        ]
      },
      "requirements": [
        "This course is for beginner to intermediate programmers. It uses GDScript, an easy-to-learn language. No extensive prior programming experience is required; concepts are taught slowly.",
        "Familiarity with basic computer operations for downloading and installing software.",
        "Download and install the Godot Engine 4.4.1 (non-mono version is recommended for web export)"
      ],
      "description": "Want to build your own action-packed Roguelite auto-battler, even if you’re new to coding?\n\nThis beginner-friendly course walks you step-by-step through creating a complete 2D game — Script Survivors — using Godot 4 and GDScript, Godot’s powerful and beginner-friendly scripting language. With no prior coding or game development experience required, you’ll learn by doing, and build a polished prototype from scratch!\nWhat You’ll Learn:\nMaster GDScript Basics and Best Practices: Write clean, reusable code with proper naming conventions (e.g., snake_case), export variables for easy tweaking, and self-documenting scripts using comments for maintainability.\nBuild Core Gameplay Mechanics: Implement auto-attacking weapons (like spears and scythes), enemy spawning systems with adjustable difficulty curves, experience (EXP) collection, and a dynamic player leveling system with impactful upgrades.\nLeverage Godot’s Scene and Node System: Organize your game using scenes for modularity (e.g., player, enemies, and world scenes), nodes for game objects (CharacterBody2D, Sprite2D), and timers for precise event scheduling.\nCreate Engaging Combat Systems: Design health and damage mechanics, including collision shapes for precise interactions, invincibility frames, and multi-target weapon upgrades for satisfying gameplay.\nAdd Polish with UI and Save Systems: Build intuitive user interfaces (e.g., high score displays, level-up screens) using control nodes and implement a JSON-based save/load system to track high scores for enemies defeated and survival time.\nUse State Machines for Smarter Logic: Utilize the Limbo AI plugin to manage character and enemy behaviors (e.g., idle, run, attack states), simplifying complex logic and preparing you for advanced AI patterns.\nApply Real Game Development Patterns: Learn transferable skills like encapsulation (e.g., GameManager and SaveLoad scripts), resource management (e.g., PlayerContext), and project organization for scalability to larger projects.\nBy the End of This Course, You’ll:\nHave a fully playable 2D action game with enemies, upgrades, and a main menu, ready to showcase in your portfolio.\nConfidently navigate Godot’s editor, from the project manager to the inspector, and use tools like the AnimationPlayer and atlas textures for pixel-perfect visuals.\nBe equipped to create your own games with a strong foundation in Godot 4, GDScript, and game development workflows, ready to tackle new projects with ease.\nWhy This Course?\nBeginner-Friendly: Starts from the basics, with clear explanations of Godot’s interface, GDScript syntax, and game dev concepts, ensuring a smooth learning curve.\nHands-On Learning: Follow along to build \"Script Survivors,\" a complete prototype with pixel art, chiptune music, and sound effects, guided by practical examples.\nReal-World Skills: Learn professional techniques like state machines, JSON serialization, and modular design, preparing you for bigger game dev projects.\nJump in now and start crafting addictive action games that keep players coming back for more!",
      "target_audience": [
        "New game creators with no coding skills, excited to build an addictive Vampire Survivors-style action game in Godot 4.",
        "Beginners seeking a hands-on path to learn GDScript and create a complete 2D roguelike from scratch.",
        "Aspiring developers finishing with a portfolio piece, eager to showcase a playable game to kickstart their game dev career.",
        "Hobbyists building confidence to design and animate pixel art characters, ready to explore their own game ideas with a solid Godot foundation."
      ]
    },
    {
      "title": "Master Sliding Puzzle Game Development in Unity",
      "url": "https://www.udemy.com/course/master-sliding-puzzle-game-development-in-unity/",
      "bio": "Learn to build a fully functional sliding puzzle game in Unity with C#, including image slicing, and animations.",
      "objectives": [
        "Build a fully functional sliding puzzle game in Unity.",
        "Implement image slicing and dynamic puzzle generation.",
        "Design an interactive UI with animations.",
        "Create a simple level select menu."
      ],
      "course_content": {
        "Introduction": [
          "#1 - Sliding Puzzles - Introduction",
          "#2 - Sliding Puzzles - Conzept",
          "#3 - Sliding Puzzles - Unity Overview",
          "#4 - Sliding Puzzles - Import Assets"
        ],
        "Layout and Slicing Images": [
          "#5 - Sliding Puzzles - Game Layout",
          "#6 - Sliding Puzzles - Image Slicer #1",
          "#7 - Sliding Puzzles - Image Slicer #2",
          "#8 - Sliding Puzzles - Create Tiles",
          "#9 - Sliding Puzzles - Adjust Cellsize",
          "#10 - Sliding Puzzles - Slice Image"
        ],
        "Game Manager": [
          "#11 - Sliding Puzzles - Game Manager #1",
          "#12 - Sliding Puzzles - Game Manager #2",
          "#13 - Sliding Puzzles - Game Manager #3",
          "#14 - Sliding Puzzles - Game Manager #4",
          "#15 - Sliding Puzzles - Check Adjacent",
          "#16 - Sliding Puzzles - Tile Click",
          "#17 - Sliding Puzzles - Target Position",
          "#18 - Sliding Puzzles - Move Tiles",
          "#19 - Sliding Puzzles - Fix Redraw",
          "#20 - Sliding Puzzles - Swap Grid Position",
          "#21 - Sliding Puzzles - Shuffle Playfield",
          "#22 - Sliding Puzzles - Fixing Shuffle",
          "#23 - Sliding Puzzles - Check Win",
          "#24 - Sliding Puzzles - Clean Up"
        ],
        "Level Seletion Menu": [
          "#25 - Sliding Puzzles - Level Data",
          "#26 - Sliding Puzzles - Level Button",
          "#27 - Sliding Puzzles - Filling Levels #1",
          "#28 - Sliding Puzzles - Filling Levels #2",
          "#29 - Sliding Puzzles - Load Level",
          "#30 - Sliding Puzzles - Testing Levels",
          "#31 - Sliding Puzzles - Win Panel"
        ],
        "Main Menu Scene & Additionals": [
          "#32 - Sliding Puzzles - Menu Scene",
          "#33 - Sliding Puzzles - Menu Script",
          "#34 - Sliding Puzzles - Exit Buttons",
          "#35 - Sliding Puzzles - Fixing Shuffles"
        ],
        "Additional Fixes & Features": [
          "#39 - Sliding Puzzles - Fix Moves",
          "#40 - Sliding Puzzles - Hiding Numbers"
        ],
        "Creating a Build": [
          "#36 - Sliding Puzzles - WebGL Build",
          "#37 - Sliding Puzzles - Upload to Itch"
        ],
        "Conclusion": [
          "#38 - Sliding Puzzles - Conclusion"
        ]
      },
      "requirements": [
        "Basic C# programming knowledge.",
        "Familiarity with Unity and game development concepts.",
        "Unity installed on your PC or Mac.",
        "Willingness to learn and experiment with game mechanics."
      ],
      "description": "Are you ready to create your own sliding puzzle game in Unity? Whether you're a beginner or an intermediate developer, this course will teach you everything you need to know about building a fully interactive sliding puzzle game from scratch using Unity and C#.\nIn this course, you will learn how to:\nSlice images dynamically to create puzzle pieces\nImplement grid-based movement for smooth tile interactions\nShuffle and randomize the puzzle while keeping it solvable\nCreate a UI system with level selection and animations\nDesign a simple level manager\nThis course is designed for learning purposes only and does not include final game scripts. Instead, you'll gain valuable hands-on experience writing code, debugging, and optimizing your game for different screen sizes and devices.\nThe course material provided is for educational purposes only.\nWhy Take This Course?\nBeginner-friendly explanations with step-by-step guidance\nFull project walkthrough covering logic, UI, and animations\nLearn real-world game development techniques\nImprove your Unity and C# skills with practical exercises\nBy the end of this course, you’ll have a fully functional sliding puzzle game and the knowledge to expand on it with your own creative features.\nReady to start?\nEnroll now and take your Unity game development skills to the next level!",
      "target_audience": [
        "Aspiring game developers looking to build their first Unity game.",
        "Indie developers wanting to add puzzle mechanics to their games.",
        "Students and hobbyists interested in Unity and game programming.",
        "Anyone eager to create and customize their own sliding puzzles."
      ]
    },
    {
      "title": "Unreal engine 5 making granny game mechanics (mobile)",
      "url": "https://www.udemy.com/course/making-granny-using-unreal-engine-5-mobile/",
      "bio": "\"Learn AI and Game Mechanics for 'Granny' with Unreal Engine Blueprints: Blueprint Scripting, NPC and game mechanics",
      "objectives": [
        "You will have an understanding of the workflow of Blueprints by the end of this course.",
        "You will have understanding of how games are made for mobile using unreal engine.",
        "You will have understanding of how ai works and setting up its logic in blueprints.",
        "You will have game by the end of this course that will be based upon popular mobile game called \"granny\"."
      ],
      "course_content": {
        "Introduction": [
          "intro",
          "project settings",
          "setting up virtual joystick for mobile platforms",
          "setting camera movement through touch",
          "Changing camera perspective"
        ],
        "Item pickup system": [
          "Adding system for interaction with Actors",
          "setting up blueprint interface and actors",
          "Adding ui to player character viewport",
          "Making a system to display pickup actor name",
          "Making item pickup system part 1",
          "Making item pickup system part 2",
          "item pickup system bug fix",
          "Splitting pickup actors in categories",
          "Adding locker for hiding mechanics",
          "locker bug fix",
          "optimization of pick up actors",
          "fixing bug caused by optimization",
          "widget blueprint optimization",
          "pickup actor jitter bug fix"
        ],
        "Making AI (NPC) for game": [
          "AI follow player character",
          "AI Patrol path setup",
          "AI hearing mechanics",
          "Adding random roam mechanics",
          "Adding custom character in game",
          "Adding catching player mechanics",
          "Adding functionality to drop picked up item when caught by AI",
          "Adding wakeup animation",
          "Death animation and respawn mechanics",
          "wake up animation and caught mechanics bug fix",
          "Adding day sequence in wake up animation",
          "setting up a system when Ai sees the player's, Ai speed increase",
          "acceleration and animation issue bug fix",
          "bug fix for Ai animations",
          "Adding mechanics for Ai to open the locker and catch player",
          "Ai and locker bug fix",
          "Trap mechanics",
          "AI Trap Deploying Mechanics.",
          "AI bug fix",
          "ai close proximity sensing",
          "Ai Door Opening Mechanics",
          "Ai Door Mechanics bug fix",
          "random roam bug fix",
          "bell mechanics bug fix"
        ],
        "Making Environment Actors": [
          "Making main escape door",
          "Adding second unlock equipment for main escape door",
          "Adding Padlock key",
          "Adding padlock code",
          "Adding Master key",
          "item spawning functionality",
          "item spawner bug fix",
          "bell mechanics"
        ],
        "Player character system and animation": [
          "Adding crouch system",
          "crouch mechanics bug fix and addition of animation for vents"
        ],
        "Weapons Mechanics": [
          "Adding movement for actors while picked up",
          "shotgun mechanics",
          "Adding reloading Mechanics in shotgun",
          "Making a Shotgun by combining its parts",
          "Shotgun bug fix",
          "crossbow mechanics",
          "crossbow mechanics Part 2 and bug fix",
          "Weapon box for crossbow and bug fix",
          "fixing trajectory of crossbow ammo",
          "Death of Ai and respawn system",
          "Movement of pickup actor Adjustments",
          "bug fix for movement of pick up actors",
          "head-bob animation"
        ],
        "Main menu": [
          "Main menu",
          "Setting Game Difficulty",
          "changing characteristics of actor by changing game difficulty",
          "changing death period for ai on switching game difficulty.",
          "Adding graphics setting in main menu",
          "Adding Sensitivity option",
          "Sensitivity bug fix"
        ],
        "Game Ending": [
          "main escape door game end scene part 1",
          "main escape door game end scene part 2",
          "Game Over cutscene",
          "unlocking doors in level by keys",
          "Final message for course (important)"
        ]
      },
      "requirements": [
        "No programming required,basic blueprint understanding,Powerful pc to run unreal engine 4 or 5."
      ],
      "description": "what is granny game ?\nGranny\" is a survival horror game where players must navigate a creepy, decrepit house to escape from a sinister, old woman known as Granny. Players wake up in a locked room and must explore the house to find objects and solve puzzles to unlock doors and escape. Granny has keen hearing and will chase players upon detecting any noise, adding an intense stealth element to the game. The eerie atmosphere, jump scares, and the constant threat of Granny create a suspenseful and thrilling experience for players.\nwhat to expect in this course ?\nI will keep updating course\nIn this course, you'll dive into the world of game development using Unreal Engine Blueprints to create key components of the popular game \"Granny.\" Expect to learn how to design and implement an item pick-up system, develop sophisticated AI behaviors, and create immersive animations, including a wake-up sequence. You'll gain hands-on experience with Blueprint scripting and NPC behavior, equipping you with the skills to bring your game ideas to life. Whether you're a beginner or an experienced developer, this course will provide you with practical knowledge and techniques to enhance your game development projects.\nOur approach in this course is structured to ease you into the concepts and gradually increase the complexity. We start with the basics, ensuring that you have a solid understanding of the foundational elements. As you progress, the challenges will become more advanced, allowing you to deepen your skills and apply what you've learned to more complex scenarios. By the end of the course, you'll be well-equipped to tackle intricate game development tasks with confidence.\nBy the end of this course you will have game similar to granny and a lot experience of video game development.",
      "target_audience": [
        "This course is for people who just started learning unreal engine and want to make a game title for mobile."
      ]
    },
    {
      "title": "Learn to create advance Inventory for any game with unity",
      "url": "https://www.udemy.com/course/learn-to-create-advance-inventory-for-any-game-with-unity/",
      "bio": "Learn to create advance Inventory for any game with unity sub",
      "objectives": [
        "Unity beginners who want hands-on experience building a full-featured inventory system from scratch",
        "Intermediate game developers looking to improve their UI, item management, and equipment mechanics.",
        "RPG and adventure game creators who need a dynamic system for weapons, armor, consumables, and player stats.",
        "Anyone who wants to make their games feel polished and professional"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "New Project"
        ],
        "Inventory": [
          "Scriptable object",
          "Inventory UI Part 1",
          "Item slot UI",
          "Inventory UI Part 2",
          "Inventory UI Part 3",
          "Inventory script",
          "Inventory Script part 2",
          "Save and load inventory",
          "Calculating stats of equipment items",
          "Equipment Stats text",
          "showing differences stats that we get between items",
          "Item rarity to( Commen,Rare,Legendary,Mystic)",
          "Item rarity animation",
          "weight system for items",
          "Stats manager Script",
          "Updating stats and UI",
          "Using Potion and consumable items",
          "using bow and arrow for shooting"
        ]
      },
      "requirements": [
        "basic familiarity with Unity and C#"
      ],
      "description": "Unlock the power of a fully functional inventory system in Unity! This course will guide you step by step to create a robust system that handles weapons, armor, consumables, stats, and more—perfect for RPGs, adventure games, or any interactive project.\nYou'll learn how to:\nDesign an intuitive UI for inventory and equipment management.\nHandle item stacking, weight limits, and sorting.\nEquip weapons, armor, and accessories while updating player stats in real-time.\nUnequip weapons, armor, and accessories\nSee item quality and how much that item going to add to your stats\nImplement ammo and weapon mechanics, like bows and arrows.\nUsing resources for shooting.\nUsing potions and consumable item to regenerate your health.\nSave and load inventory data for persistent gameplay.\nProvide feedback with dynamic stat displays and color-coded differences.\nBy the end of this course, you’ll have a polished, reusable inventory system that can be adapted for any game like any kind of RPG game . Whether you’re a beginner wanting practical experience or an intermediate developer seeking to level up your Unity skills, this course equips you with the tools to make your games feel professional and immersive.\nNo prior experience with inventory systems is required—just basic Unity and C# knowledge.",
      "target_audience": [
        "Beginner"
      ]
    },
    {
      "title": "Intro to SceneKit. An easy to use iOS 3D framework.",
      "url": "https://www.udemy.com/course/scenekit/",
      "bio": "Learn how to draw and style 3D objects using SceneKit so that you can add 3D UI into your new or existing iOS app.",
      "objectives": [],
      "course_content": {},
      "requirements": [
        "You should have Xcode 6 already installed.",
        "You should have basic experience with the swift programming language."
      ],
      "description": "The future of software is going to be 3D. If you watched the 2015 F8 Facebook Keynote you'll know that they are focusing on 3D virtual reality with oculus rift.\nYeah yeah, 3D is cool but isn't 3D like really hard to develop? ...usually it is but Apple has released a framework called SceneKit that makes it pretty darn simple.\nThis is your chance to get ahead of the technological curve and become proficient with the next generation of 3D frameworks.\n---\nThis course will give you an introduction to Apple's easy to use 3D framework called SceneKit. In this course you will learn how to draw objects to the screen and modify their appearance, position, and lighting. You can use this to get your feet wet for 3D game development or better yet as a way create apps with a 3D UI.\nYou will use playgrounds exclusively so that you can follow along without a device. All you need is Xcode 6.\nYou will program everything in Swift.",
      "target_audience": [
        "People who want to learn how to create 3D environments using SceneKit. This is a \"get your feet wet\" where you will draw your first objects using Xcode playgrounds.",
        "This is just an intro course. If you need a full survey of SceneKit in order to create physics based games I may do that in a later course, but this course does not cover that.",
        "People who enjoy a fast paced instructor. If you need me to talk slowly that's not gonna happen.... (luckily you can replay the videos)"
      ]
    },
    {
      "title": "Learn to create advance Side scroller game with Unity & C#",
      "url": "https://www.udemy.com/course/learn-to-create-advance-side-scroller-game-with-unity-c/",
      "bio": "Learn to create advance Side scroller game with Unity & C#",
      "objectives": [
        "Beginner C# concepts",
        "Develop a complete 2d Game from scratch using C# and Unity",
        "Discover 2D animation workflows",
        "Unity concept",
        "Inventory System",
        "Craft System",
        "Save & Load Game",
        "Making AI Enemies"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "New 2D Project and game asset"
        ],
        "Main Menu": [
          "Main Menu"
        ],
        "Player Health": [
          "Player Health"
        ],
        "Inventory": [
          "Inventory UI Canvas",
          "Scriptable Object",
          "Item Slot UI Script",
          "Inventory script Variable and functions",
          "Inventory Script",
          "Weapon Damage"
        ],
        "Shop": [
          "Shop Item UI Canvas",
          "Shop Item Script",
          "Saving and loading Inventory",
          "Player damage and Enemy Damage",
          "Continue button in main menu",
          "Player Revive after Death",
          "design Inventory",
          "Craft System UI",
          "crafting scripts",
          "Item pickup and save and load item in scene",
          "Player movement left and right",
          "Player jump",
          "Enemy Controller script",
          "Player shooting",
          "Enemy animation",
          "Player animation and attack damage",
          "Player damage bug fixed",
          "Enemy Wizard",
          "Game Design",
          "Shopkeeper NPC"
        ]
      },
      "requirements": [
        "Pc"
      ],
      "description": "Learn how to create your very own 2D RPG game for mobile or PC using Unity2D, an industry-standard program used by many large gaming studios and indie developers across the world.\nYou won’t just be learning programming concepts in this course, but tying these concepts to real game development uses. You will have access to a course forum where you can discuss the topics covered in the course as well as the next steps to take once the course is complete.\nThis course has been designed to be easily understandable to everyone, we start from scratch, easy codes to hard codes and every code will be explained so whether you’re a complete beginner, an artist looking to expand your game development range or a programmer interested in understanding mobile game design, this course will help you gain a greater understanding of development.\nAt the end of this course you will have developed the ability to create such PC game elements as:\nCreating the world\nMake different enemies\nMake player units\nCrafting items\nInventory\nSave and load the game and inventory\nLearning C# codes\n\n\nStart learning today and let me help you become a mobile and PC game developer!\n\n\n\n\nUnderstand how to earn revenue using advertising in their games\nLearn C#, a modern versatile programming language\nUnderstand the capabilities of mobile development in Unity\nDevelop strong and transferable problem solving skills\nGain an understanding of the game development process\n\n\nMac or PC capable of running Unity 2D\nThe latest version of Unity\n\n\nAnyone who wants to make their own mobile and pc games\nAnyone interested in learning to publish apps and games to the Play Store or stream\nComplete beginners with an interest in learning mobile and PC game development\nDevelopers who want to re-skill across to mobile development\nPeople who want to create and publish their own mobile or PC games.",
      "target_audience": [
        "everyone"
      ]
    },
    {
      "title": "Create a chess game in react",
      "url": "https://www.udemy.com/course/create-a-chess-game-in-react/",
      "bio": "using react and redux we will build a game of chess.",
      "objectives": [
        "Break down a complicated task to smaller pieces",
        "Convert chess rules to coding logic",
        "Connect different pieces of a game together",
        "Setup a controller entity to govern the game moves"
      ],
      "course_content": {
        "Chess game": [
          "Setup the board",
          "Add the pieces to their correct position",
          "Drag and drop pieces",
          "Add reducer function and contextAPI",
          "Setup arbiter controller and move rook logic",
          "Move the knights around",
          "How to move the bishop",
          "Moving the queen",
          "How kings move in a chess game",
          "Pawns move and simple capture",
          "What is en-passant and how to include it in the game logic",
          "Promotion",
          "Castling rules and logic",
          "Checking the king",
          "Stalemate rule and how to write the code for it",
          "Insufficient material",
          "Checkmate",
          "Notation and Take back"
        ]
      },
      "requirements": [
        "basic knowledge of react, javascript and beginner level of css"
      ],
      "description": "You have a basic understanding of HTML, CSS, JavaScript, and some React. Now, you're eager to move forward and dive into more advanced technologies. You’re here because you’re a passionate React enthusiast on a mission: to learn React more effectively by completing a seemingly hard exercise.\nI am here to help you achieve your mission. With over 20 years of experience developing software applications and extensive teaching expertise, you can trust my methods. I've mastered numerous technologies throughout my career, so I know exactly what's needed to learn and how to guide you through the process.\nThis course is divided into 18 comprehensive lessons. We will work through each challenge to create a fully functional chess game, incorporating all the rules and intricacies of the game. We'll employ Redux as our state management system and pair it with React's Context API for a modern, efficient approach.\nEach lesson is meticulously designed to build on the previous one, ensuring you develop a strong, cohesive understanding of each concept. The code for each lesson will be available for you to review, practice, and build upon at your own pace.\nBy the end of this course, you will not only have built an impressive chess game, but you will also have a deep, practical understanding of advanced React concepts and state management techniques. You'll be well-equipped to tackle complex projects and advance your career as a React developer.\nJoin me on this exciting journey, and let's elevate your React skills to new heights together.",
      "target_audience": [
        "Beginner or Intermediate react developers curious about new challenges"
      ]
    },
    {
      "title": "Definitive Guide to Video Game Reward Design",
      "url": "https://www.udemy.com/course/definitive-guide-to-video-game-reward-design/",
      "bio": "Design Engaging Reward Systems, Progression Loops, and Ethical Monetization",
      "objectives": [
        "Analyze and apply the core psychological principles (like Self-Determination Theory and Reinforcement Schedules) that drive player motivation.",
        "Design compelling reward, progression, and social systems using practical frameworks like the Reward Value Canvas and the Ethical Accelerator Audit.",
        "Critically evaluate common monetization models and apply the principles of Humane Design to create fair, player-respecting systems that build long-term trust.",
        "Balance and maintain a living game economy, using system audits to prevent common issues like inflation, reward bloat, and monetization fatigue."
      ],
      "course_content": {
        "The Player's Mind: Motivation, Traps, and True Engagement": [
          "The Unseen Engine - Intrinsic Motivation",
          "The Carrot's Shadow - The Perils of Extrinsic Rewards",
          "Player Power - Agency, Choice and Flow",
          "Expert Insight: Extrinsic and Intrinsic Motivation, Agency and Key Consideration",
          "Download the companion book pdf file (+120pages)"
        ],
        "The Reward Arsenal: Types, Structures, and Experiences": [
          "The Reward Spectrum",
          "The Perfect Beat - Anticipation, Pacing and Reward Schedules",
          "Beyond the Trinket - Designing Rewards Players Remember Forever",
          "Expert Insights: Advanced Reward Tactics - RNG and Player Motivation"
        ],
        "Design in Action - Crafting Your Reward Systems": [
          "The Reward Value Canvas - How to Design Rewards Players Actually Want",
          "The Progression Engine - Designing Journeys & Ethical Skips",
          "The Social Tapestry - A Community Manager's Guide to Rewards",
          "Expert Insights: The Art of Practical System Design"
        ],
        "The Designer's Hand - Balancing and Iterating Your Game": [
          "Faucets and Drains - Balancing a Living Economy",
          "The Living Game - Audits and Iteration",
          "Expert Insights: Advanced Live Game Management"
        ],
        "Humane Design in Practice": [
          "Humane Design - Building Systems That Respect Players",
          "The Ethical Design Audit - Analyzing Monetization",
          "Conclusion - The Golden Key",
          "Expert Insights: The Final Word"
        ]
      },
      "requirements": [
        "There are no specific requirements to take this course. A passion for video games and a genuine interest in understanding why we play is all you need to get started."
      ],
      "description": "Have you ever wondered why you can play one game for a thousand hours, while another, despite showering you with rewards, feels like a chore? The secret isn't just in the rewards themselves; it's in the psychology behind how they're delivered.\nThis is the definitive guide to designing video game reward systems that players don't just chase, but genuinely love. We move far beyond simplistic \"points and badges\" to explore the deep science of player motivation. This course provides a complete framework for building compelling rewards, engaging progression loops, and healthy social systems that create lasting, meaningful engagement. You'll learn not just the \"how\" of system design, but the crucial \"why\" behind what makes a game truly unforgettable.\nTaught by a Ph.D. who did their thesis on this exact topic, this course bridges the gap between academic theory and the practical reality of game development. Forget vague advice. You will learn actionable frameworks and professional tools like the Reward Value Canvas, the Ethical Accelerator Audit, and the Faucets & Drains model for economic balancing. We tackle the tough questions, including a deep dive into Humane Design and the ethics of monetization in the modern gaming landscape.\nPlease Note: The core lectures use animated visuals with a clear, AI-generated voice for optimal learning. Each section then concludes with a personal \"Expert Insights\" video from me, the instructor, to provide real-world context and strategic advice.\nBy the end of this course, you will be able to:\nMaster the core psychological principles that drive player motivation.\nDesign a wide variety of rewards using the \"Reward Palette\" to appeal to diverse player types.\nStructure compelling long-term progression engines that turn a \"grind\" into a satisfying journey.\nUse the \"Reward Value Canvas\" to design and balance items that feel genuinely valuable.\nBalance a living game economy using the \"Faucets & Drains\" model to prevent inflation.\nFoster positive, thriving communities by designing healthy social reward systems.\nCritically analyze monetization models and apply the principles of Humane Design to build systems that earn player trust.\nThis course is for anyone who wants to move beyond simply playing games and start understanding how to build them. Whether you're an aspiring game designer, an indie developer, a product manager, or simply a passionate player who wants to look \"under the hood\" at the science of fun, you will find immense value here.\nStop guessing what players want and start understanding what they need. Enroll today and learn to design rewards that truly matter.",
      "target_audience": [
        "Aspiring or current Game Designers who want to specialize in reward, engagement, and monetization systems.",
        "Indie Developers who are responsible for designing the entire player experience from the ground up.",
        "Product Managers, Producers, or Marketers in the gaming industry who want to deeply understand the design principles that drive player retention and long-term success.",
        "Students of game design or psychology who want a practical, in-depth guide to applying motivational theory to interactive entertainment."
      ]
    },
    {
      "title": "Tekken 8 Fighting Game Tutorial Unity 3D Developement C#",
      "url": "https://www.udemy.com/course/tekken-8-fighting-game-tutorial-unity-3d-developement-c/",
      "bio": "Fighting Game Clone Tekken 8",
      "objectives": [
        "Get experience using Unity 2020 and Learn C# from scratch. A powerful modern language.",
        "In This Course I will added free assets Map,Characters and more.",
        "Using AI for opponent Player system Multiplayer & AI Development",
        "Beginners & Intermediate Level Fighting Game Fans & Indie Developers for Beginners & Intermediate"
      ],
      "course_content": {
        "Introduction": [
          "Introduction for Tekken 8 game tutorial using unity 3d and C#",
          "Create a New Project",
          "Create Clone Stages in Fighting Game",
          "Create Different Stages in Fighting Game",
          "Unity Camera Controller",
          "Unity Player Dodge System",
          "Add Characters in Fighting Games",
          "Create Character and Animation Fighting Game",
          "Unity Player Movement",
          "Unity Fighting System",
          "Unity Attack Effects",
          "Opponent Fighting AI",
          "Unirty Opponent Movement",
          "Main Menu UI",
          "Unity Opponment Attack and Effect",
          "Pause Game Menu Tutorial",
          "Unity Opponent Player Damage",
          "Unity Hit sound and Damage",
          "Selecting Stages and Load Player",
          "Add Opponent Characters",
          "Unity Health Bar Tutorial",
          "End Game Result",
          "Main Menu Script",
          "Multiple Character System Using Playerprefs in Unity",
          "Select Random Opponent",
          "Add Different Stages in Unity",
          "Add Player Characters"
        ]
      },
      "requirements": [
        "Passion for Creating Games ,Basic knowledge for programming,Required system specs (Core i5, 8Gb RAM)"
      ],
      "description": "UPLOAD ALL THE ASSETS USING THIS GAME FOR FREE\nTekken 8-Style Fighting Game in Unity (C#) – Basic to Advance Level\nAre you ready to build your own Tekken 8-style fighting game in Unity using C#? This intermediate-level fighting game project will help you master the mechanics of a 3D battle system, character animations, combo attacks, and real-time physics.\n? Key Features:\nAdvanced Combat System : Implement combos, special moves, blocking, and dodging.\n\n\nCharacter Selection: Create multiple playable fighters with unique abilities.\n\n\nRealistic Animations: Smooth motion capture animations and hit effects.\n\n\nDynamic Arenas: Design immersive fighting stages with interactive elements.\n\n\nAI Opponents: Develop intelligent enemy fighters with challenging tactics.\n\n\nMultiplayer Mode: Integrate local and online multiplayer for competitive play.\n\n\nGame Mechanics: Learn health bars, power-ups, super moves, and slow-motion effects.\n? Why Choose This Project?\nThis project is ideal for Unity developers with intermediate C# experience looking to create a professional-grade fighting game. Whether you're a game designer, developer, or Unity enthusiast, this game will sharpen your skills in character animation, physics-based combat, and multiplayer mechanics.\n? Start your journey today and bring your own fighting game to life!\n\n\nUPLOAD ALL THE ASSETS USING THIS GAME FOR FREE\n#Tekken8\n#Tekken\n#FightingGames\n#TekkenCommunity\n#GamingContent\n#EsportsGaming\n#UnrealEngine\n#unity3d\n#gamedev\n#indiedev\n#madewithunity\n#unity\n#indiegame\n#GameDevelopment\n#UnityGameDev\n#LearnGameDesign\n#IndieGameDev",
      "target_audience": [
        "Basic knowledge for Unity Engine,Fighting Game (Tekken 8), Programming (C#)"
      ]
    },
    {
      "title": "Game Development 2019 | Build and Share your first 3D Game",
      "url": "https://www.udemy.com/course/game-development-with-unity/",
      "bio": "Master Unity and programming in no time by Building a Complete fun \"Eat That Frog\" game and publishing it to the world",
      "objectives": [
        "Create a full game and share it with the world",
        "Detect collisions, receive user input, and create player movements",
        "Create enemies with basic AI behavior",
        "Collect and destroy game objects",
        "Implement sound effects, background music, and particle effects",
        "Write extensible and clean code.",
        "Master C# programming by learning concepts, like variables, \"if\" statements, and arrays",
        "Understand fundamental game AI concepts like environment navigation, pathfinding etc.",
        "Know how games are made and experience the process of making a full commercial quality game."
      ],
      "course_content": {
        "Introduction : Setting up the Game Scene": [
          "Introduction",
          "Setting Up the Environment",
          "Post Processing Effects"
        ],
        "Lets get coding : Frog and Camera Movement": [
          "Creating our first script",
          "Setting Up the animations for frog",
          "Controlling Frog Animations from the Script",
          "Fixed Update and Adding comments",
          "Using Quaternions to rotate our frog",
          "Making Camera follow the frog"
        ],
        "Adding Collectibles to the Game": [
          "Adding a Fly",
          "Fly Pickup Script",
          "Clone Destruction",
          "Fly Spawner Script",
          "Final Touch up"
        ],
        "Score Counter and Enemy Bird AI": [
          "Adding a Score Counter",
          "Finishing The Score Counter",
          "Enemy Bird AI",
          "Player Health",
          "Managing Game State",
          "Finishing Game State Script",
          "Final Touch Up"
        ],
        "Sound Effects and More": [
          "Introduction to Audio in Unity",
          "Scripting character footsetps",
          "Character footsteps Sound - Attaching the script",
          "Pickup Sound Effects",
          "Audio Mixer - The basics of Audio Mixing"
        ],
        "Building and Sharing the Game": [
          "Building The Game for Windows, Linux And MacOs",
          "Final Words"
        ],
        "Bonus Section": [
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "You will need a Windows PC or a Mac and a free copy of Unity 2018 or above to follow along.",
        "Some basic knowledge about Unity will be appreciated.",
        "knowledge of the Unity Editor and other basic tools.",
        "Absolute basics of programming such as knowledge of variables, classes etc."
      ],
      "description": "*NEW* Added Much Awaited Content to the course\nMaking a Video game can be a fun but also very challenging Task. It is all about getting familiar with the process.\nIn this course, we try to breakdown the game development process by making a fun video game that can be played on both Windows and Mac Os. We will be using the Unity game engine and work with its various subsystems.\nIn this Unity course, you will:\nMaster C# concepts such as variables and if statements\nDetect collisions, receive user input, and create player movements\nCreate enemies with basic AI behavior\nCollect and destroy game objects\nBuild the Animation Systems\nImplement Navigation and Pathfinding (Navmesh)\nControl objects influenced by the physics system\nImplement sound effects, background music, and particle effects\nNavigate the Unity Engine and discover unique features such as the Asset Store\nAnd more!\nIn this course we will first start with a blank project, then set up the environment for our game and later we'll dive into the scripting. We will walk step by step through every line of code we write. Though it is essential to be familiar with scripting to get most out of this course, there is still a lot to learn about programming games as we try our best to cover and explain the absolute basics.\nFurther, we will also learn how to use animated objects with Unity's physics system and learn concepts like Quaternions to deal with rotations. We will also add collectibles in the game and an Enemy bird AI.\nThis course will help you build commercial quality games with polished assets and cinematic effects. Get access to the unique artwork provided by this Unity course and add sophisticated features to your games that make you look like you’ve been programming for years.\nBy the end, we will have a fun game that can be shared with others.\nWhy Learn Game Development with Unity?\nThe gaming industry is a $100 billion industry worldwide. By 2020, that number is expected to near $120 billion. With Unity being the most widely used engine to develop games across multiple platforms, there has never been a better time to get into the field. As you will learn, the types of games you can create with Unity and C# are limitless. Game development makes a great hobby, allowing you to learn a new skill and play your game with family and friends. It is also an exciting and rewarding career, where plenty of successful developers, have learned the fundamentals of game development through courses like this, and not in the traditional classroom setting. Every great game starts somewhere, so why not make it yours? While people often find coding or making games intimidating, this Unity course utilizes a unique teaching method which will allow you to gain a thorough understanding of concepts while you develop your own games. Thanks to the Unity community, you’ll be able to connect with other developers, work together on new projects, and make some incredible games!\nEveryone using the Unity engine will benefit since we comprehensively cover how to correctly use many of it's more advanced systems e.g., navigation and pathfinding, animation state machines, physics, and so on.\nJoin us on this adventure today!  We’ll see you inside the course.\n\n\n\n\n**Thanks to Team Treehouse for the assets used in this course.",
      "target_audience": [
        "This course is perfect for developers who want to take their game development skills to the next level.",
        "People interested in developing commercial quality 2D and 3D games either professionally or as a hobby.",
        "The ideal student for this course is someone who is interested in game development with Unity and C# and is looking for an interactive, project-based course.",
        "Anyone using the Unity engine will benefit since we comprehensively cover how to correctly use many of its more advanced systems."
      ]
    },
    {
      "title": "Basics of 3D Graphics with Blender 2.7x",
      "url": "https://www.udemy.com/course/basics-of-3d-graphics-with-blender/",
      "bio": "A course to get you started quick without the fluff.",
      "objectives": [],
      "course_content": {
        "Blender Basics": [
          "Blender Introduction",
          "Setting User Preferences",
          "Getting Used to the Interface",
          "Moving in the 3D Viewport",
          "Object Manipulation",
          "Basic Shortcuts Quiz",
          "Grab Rotate & Scale",
          "Extra Tips",
          "Edit Mode Tools",
          "Edit Tools Quiz",
          "Vertex and Edge Manipulation",
          "Filling Faces",
          "A Treasure Chest",
          "Adding Edge Loops",
          "A Simple House",
          "Creating Wine Glasses",
          "Modifiers",
          "Creating a low poly spaceship.",
          "Spaceship solution"
        ],
        "UV Mapping": [
          "UV Unwrapping",
          "UV Mapping Continued"
        ],
        "Texturing": [
          "Basic Texturing"
        ],
        "Cycles Rendering and Materials (Must use Blender 2.79 for this section)": [
          "Introduction to Section",
          "Cycles Render Engine & HDRI Lighting",
          "Metal Material",
          "Plastic Material",
          "Glass Material & Input Nodes",
          "Addint Texture to the Principled Shader"
        ],
        "Extra": [
          "Exporting to your Game Engine of Choice",
          "Bonus Lecture: Creating 2D Game Assets"
        ]
      },
      "requirements": [
        "You should have basic computer knowledge. This course assumes you know how to use one.",
        "You should have Blender installed."
      ],
      "description": "( With the huge update of Blender with the release of 2.8 I have decided to make this course free. Because of this, there will no longer be student support. I hope it will be of some use to you anyway. Not everything is outdated in this course.)\nIf you don't have dozens of extra hours in your day to learn 3D, this is the course for you. I tell you only what you need to know to get started with 3D.  Follow the comprehensive assignments to understand 3D tools, how to manipulate geometry and understand volume. If you don't have loads of hours to spend watching tutorial videos but you still want to become a 3D artists, this is the course for you.\nThe great thing about learning tools and specific skills is that you can transfer what you've learned to other software packages.\n\n\nBonus curriculum includes:\nCreating 2D objects",
      "target_audience": [
        "Anyone that is starting out with 3D graphics.",
        "Anyone that wants a course that is direct and to the point."
      ]
    },
    {
      "title": "Complete Resident Evil Game Development in Unreal Engine 5",
      "url": "https://www.udemy.com/course/complete-classic-resident-evil-game-development-in-ue5/",
      "bio": "In this course you will learn everything you need to build a full horror shooter",
      "objectives": [
        "Create a complete Animation Blueprint with your Character",
        "Change Camera like a fixed Camera following the Player to get a nostalgic feeling",
        "Create a full Inventory System with picking up Items and also use them accordingly",
        "Create a full Storage System",
        "Create Level Transitions and save progress",
        "Implement custom Items and Weapons",
        "Create a complete UI System and use Items from the Inventory",
        "Create a full Aiming and Shooting System",
        "Create a Damage System and dealing Damage",
        "Receiving Damage and Kill Enemies as well as the Player",
        "Healing with Items",
        "Create a full reload System for several Weapons",
        "Implement a Melee Weapon and use attack Montages",
        "Use Layered Blend per Bone Animation",
        "Implement Sounds like Footsteps and Shooting Effects",
        "How to use Niagara for Visual Effects like Muzzle Flash and Smoke",
        "Implement Enemies and setting up Enemy AI",
        "Implement Line Trace by Channel for Weapons",
        "Equip and Swap Weapons on Character",
        "Unlock Doors with Keys",
        "Stack Items like Ammunition",
        "Create a full Inspection System to inspect Items from Inventory"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Export and Import Assets into your Project and how to use them",
          "Setting up Project and Basic Movement",
          "Setting Up Camera System",
          "Equip Pistol and set up Aim",
          "Shooting with Line Trace",
          "Change Character",
          "Create Inventory and Pick Up Items",
          "Pick Up Items and Max Item Slots",
          "Stack Items in Inventory",
          "Add Pistol to Inventory",
          "Reload System",
          "Improve Reload System and Background Blur",
          "Use Healing Item",
          "Muzzle Flash - Smoke - Footstep SFX",
          "Inspect Items from Inventory",
          "Combine Herbal Items in Inventory",
          "Pick Up Revolver and Equip from Inventory",
          "Reload System for Revolver",
          "Add Empty Slots to Inventory",
          "Reload Animation with Layered Blend per Bone",
          "Shotgun and new Equip Function",
          "Pick Up and Reload Shotgun",
          "Improved Shooting Function for Weapons",
          "Improve Equip Function and Inventory",
          "Full Storage System",
          "Add Melee Weapon with Line Trace",
          "Improve Storage UI and Melee Attacks",
          "Unlock Doors with Keys",
          "Level Transition and Save Progress with Game Instance",
          "Bug Fixing and Health UI",
          "Set Up Zombie BP and Animation BP",
          "Zombie Biting Player",
          "Fixing Biting and Sound FX",
          "Damage Zombie and Kill",
          "Damage Player with Injured Animation",
          "Player Death and Melee Damage",
          "Upper Body Hit Animation",
          "Create a Floor Texture for the Save Room",
          "Finishing the Floor and Create the Wall",
          "Modeling and Texturing a Locker for the Save Room",
          "Modeling and Texturing the Storage for the Save Room",
          "Level Building the Save Room from Blender to Unreal Engine 5",
          "Interact with Typewriter and Setting Up Save Game",
          "Setting Up Save Game UI and Save Game with Typewriter",
          "Level Transition to the Save Room and Bug Fixing",
          "Solving a Puzzle - Open Lock with Code"
        ]
      },
      "requirements": [
        "You should have basic knowledge on how to use UE5",
        "You should know how to import Textures and FBX models into your Project"
      ],
      "description": "This comprehensive course is designed to elevate your game development expertise to new heights. You will master the creation of intricate blueprints, dynamic animation blueprints, and sophisticated enemy artificial intelligence systems that bring your game worlds to life. The curriculum guides you through the development of a fully functional inventory system, a critical component for immersive gameplay. Learn to implement seamless weapon usage, including equipping, swapping, and managing ammunition with precision. The course also covers the integration of healing items to enhance player survival mechanics, as well as the creation of interactive elements such as unlocking doors to progress through levels. Additionally, you will explore the implementation of robust storage systems to manage in-game items effectively. By leveraging a game instance, you will learn to facilitate smooth transitions between diverse levels, ensuring a cohesive player experience. Beyond these core skills, the course introduces advanced techniques to enrich your projects, including optimizing game flow and enhancing interactivity. Perfect for aspiring developers, this course provides hands-on experience and practical knowledge to build professional-grade games, equipping you with the tools to create engaging, polished, and dynamic gaming experiences that stand out in the industry. I hope you will enjoy this massive course because you can call youself an intermediate UE5 artist after you have successfully mastered every lesson.",
      "target_audience": [
        "Beginner in Unreal Engine 5",
        "Beginners in Game Development"
      ]
    },
    {
      "title": "Blender To Substance Painter To Unreal Engine 4",
      "url": "https://www.udemy.com/course/blender-to-substance-painter-to-unreal-engine-4/",
      "bio": "Blender to UE4",
      "objectives": [],
      "course_content": {
        "Introduction": [
          "Intro"
        ],
        "Let's start in Blender": [
          "Basic Blender Controlls",
          "Blender Quiz",
          "Adding Image",
          "Axe Handle",
          "Axe Head",
          "High Polly",
          "Blender Quiz 2",
          "Color ID Map",
          "Blender Export"
        ],
        "Substance Painter": [
          "Substance Painter"
        ],
        "Unreal Engine 4": [
          "Bring Into Unreal Engine 4"
        ]
      },
      "requirements": [
        "Should have some knowledge of Blender, Substance Painter, Unreal Engine 4, but not required"
      ],
      "description": "This Course will teach you how to create assets in Blender, the world most use 3D Modeling software!\nNext you will learn how to bring that asset into Substance Painter, AAA quality texturing software used by many Game Studios across the world!\nFinally you will learn how to bring that asset into Unreal Engine 4 and the textures you created!\nAll and all this is a great opportunity for you how to create you very own asset for games and bring them into Unreal Engine 4!",
      "target_audience": [
        "Anyone willing to learn a new skill!"
      ]
    },
    {
      "title": "Build a Dynamic Combat System in Godot 4!",
      "url": "https://www.udemy.com/course/combat-godot/",
      "bio": "Attack, block, dodge, and shoot projectiles with your characters in a real-time, action adventure combat system!",
      "objectives": [
        "Blend movement and action animations together in real time.",
        "Synchronize hit and hurt boxes with animations to deal or avoid damage.",
        "Lock onto enemies, changing the behaviour of the player character and camera.",
        "Control enemies with AI scripts to detect, chase, and attack the player."
      ],
      "course_content": {
        "Introduction": [
          "Setup",
          "Lock On",
          "Strafe",
          "Attack",
          "Weapon",
          "Hit",
          "Dodge",
          "Block",
          "Shoot",
          "Enemy"
        ]
      },
      "requirements": [
        "Students should have completed \"Inventory & Shops in Godot\"",
        "Or have a Godot project ready with a playable character and enemies to fight."
      ],
      "description": "Welcome to my course on Combat in Godot!\nYou're welcome to join our discord server to work on this course alongside your peers.\nThis course is a continuation of Inventory & Shops in Godot, but can be followed and applied to any project that involves characters engaging in combat.  In this course, we will cover locking on to a target, strafing locomotion, attacking, getting hit, dodging, blocking, shooting projectiles, and basic enemy AI.\nWhen you're done, you'll have a complex combat system for your game that is easily adjusted to fit how you want your game to play.  You'll also learn useful skills for working with the Godot game engine; organizing and designing your projects to be more scalable.  You will be learning how to code with GD script, with everything explained in detail.  We will apply object oriented design principles in our scripts; Inheritance, Encapsulation, Abstraction, and Polymorphism, to keep them organized, customizable, and reusable for a project of any size.\nAll of the project files are also available on GitHub if you need to review the project as it was after completing each lesson.  These videos were recorded using Godot version 4.3.  The project starts with assets from KayKit's Character & Dungeon Remastered Packs made by Kay Lousberg, Basic GUI Bundle made by Penzilla, and Fantasy Icons Pack made by Shikashi.  All are available to download for free on itch.  Extra sound effects made by Valenspire are also included and are available from FreeSound.",
      "target_audience": [
        "First time game developers, or anyone switching over to the Godot engine from other engines.",
        "Experienced 2D game developers who are interested in learning about 3D.",
        "Anyone who has completed beginner tutorials but would like to learn real game infrastructure that is scalable."
      ]
    },
    {
      "title": "Houdini Tech Art - Vertex Density Heatmap",
      "url": "https://www.udemy.com/course/houdini-tech-art-vertex-density-heatmap/",
      "bio": "Start learning Houdini and make useful tool right away",
      "objectives": [],
      "course_content": {
        "HoudiniVertex Heatmap": [
          "Introduction",
          "Introduction & Theory",
          "Houdini intro & Sampling Points",
          "VOP/VEX & Counting Vertices",
          "using Attributes & Finalising"
        ]
      },
      "requirements": [
        "Houdini 16.5+ (FREE apprentice version) - Houdini 17 Works too"
      ],
      "description": "This course is a Houdini Only course. In this course you will learn how to create a Vertex Density Heatmap, which is a simple tool to visualize the Vertex Count of a mesh, and can be used to help optimize a mesh, or for motion design purposes.\nThis course is a great way to get started with Houdini, and get started as a Technical Artist. Everything done here will achievable with Houdini Apprentice which is totally free.\nWe will cover a lot of aspect of Houdini, and I'll try my best to explain everything used to achieve the tool.\nCovered topics :\nWhat's is a context ? ( SOP, VOP, Scene...)\nWhat's an attribute ?\nBasic VOP\nExample of more advanced VEX\nAttribute promotion\nThanks !",
      "target_audience": [
        "You'd like to learn Houdini while doing something useful",
        "You're a tech artist who want to add Houdini to you arsenal",
        "You want to become a Technical Artist, and want to start with Houdini"
      ]
    },
    {
      "title": "Beginner's guide to coding in unity",
      "url": "https://www.udemy.com/course/unitycinematiccamerafadescript/",
      "bio": "Creating a Cinematic Camera FADE Script",
      "objectives": [],
      "course_content": {
        "Project Intro": [
          "How to get started in game development - Programming",
          "Project Overview"
        ],
        "Scene Setup": [
          "How to create a Unity camera fade effect - 01 - Scene Setup"
        ],
        "Creating our camera fade script": [
          "Starting our Fade Script",
          "Creating the camera Fade Effect",
          "Controlling the fade speed",
          "Completing the fade script"
        ],
        "Bonus Video": [
          "Making Games without code! Indie Game Devlog - Origami Ninja"
        ]
      },
      "requirements": [
        "No. This course is a fundamental learning series for aspiring, new, & experienced game developers. This is a step by step training series that will not only make game development easy & fun, but also increase your knowledge & skill set."
      ],
      "description": "Camera fades can be found in anything from games, to movies, & having camera transitions is a great way to introduce the player or viewer to a new scene or view without simply hard cutting from camera to camera. It can also ease the player or viewer into the next upcoming event.\nIn this series of videos, we’ll create an easy to follow, & simple to use cinematic camera fade effect, for your unity in-game cameras. This effect can be used to transition between scenes, introduce titles & menus, or as a simple way to give your game or project a more professional look & feel.\nWe know coding for games can be an extremely intimidating thing if it’s new to you. However, learning to script in unity’s C# can be both fun and rewarding. It’s extremely robust & can allow you to develop almost anything you imagine.",
      "target_audience": [
        "Beginner Unity developers courious about programming in Unity"
      ]
    },
    {
      "title": "Unreal Engine 5: Mini Maps Compass and Marker Systems",
      "url": "https://www.udemy.com/course/unreal-engine-mini-maps-compass-and-marker-systems/",
      "bio": "Unlock the full potential of Unreal Engine with our comprehensive course designed to teach you how to create dynamic and",
      "objectives": [
        "Mini Map System: Discover how to design and implement a functional mini map that enhances player orientation and navigation within your game world.",
        "Compass System: Learn to create a real-time compass that guides players, ensuring they stay oriented and on track during their adventures.",
        "Big Map System: Develop a comprehensive big map system that provides a broad overview of the game world, allowing players to explore and plan their journeys wit",
        "Marker System: Master the art of adding markers to your maps to highlight important locations, objectives, or points of interest."
      ],
      "course_content": {
        "Big Map System": [
          "Setup Project File",
          "Create Map Image Using 2d Sceen Component",
          "Create Big Map Widgey",
          "4 Player Location Into Map",
          "Add Ai Character On The Big Map"
        ],
        "Advanced Point Of Interest System": [
          "Store All Actor inside Array",
          "Create Point Of Interest widget",
          "Add Point Of Interest widget On Big Map",
          "Add Custom Icon On Point Of Interest Widget.mp4",
          "Move POI Widget in To Big Map Widget",
          "Set POI Icon Color",
          "Fix POI Widget Doesn't Remove After Actor Destroyed",
          "Add POI On Difrent Actors"
        ],
        "Big Map Zoom System": [
          "Add Scroll Box For Zoom",
          "Zoom in And Zoom Out Input",
          "Fix POI Location After Zoom In & Out",
          "Fix Bluprints Error"
        ],
        "Fast Travel Systems": [
          "Create Fast Travel POI With Component",
          "Create Conformation Widget Before Fast Travel",
          "Close Main Map After Fast Travel",
          "Create Loading Screen Before Fastravel"
        ],
        "Mark Location System": [
          "Create Marker Actor With Distance Widget",
          "Convert Map Click Location To World Location",
          "Fix Marker Dosent Show up After Spawn",
          "Remove Marker From Map Actor Variable After Destroyed",
          "POI Size Change In Actor Component",
          "Fill Big Map Entire Screen",
          "Animated Marker"
        ],
        "Compass System": [
          "Create Compass Widget",
          "Compass Math Logic",
          "Compass POI Widget With Metarial Instance",
          "Compass POI Math System",
          "Compass POI Optimization And Bug Fix"
        ],
        "Mini Map System": [
          "Create Minimap Widget",
          "Create Dynamic Material For Mini Map",
          "Update Player Location In To Dynamic Material",
          "Add POI icon On Minimap Widget",
          "Get Distance Between Player And Owner Actor",
          "Clamp Icons In To Minimap Area",
          "Icon Static Logic Setup",
          "Fix MiniMap POI Error"
        ],
        "Optimize Map System": [
          "Optimize Actor Component",
          "Create Function To Show All Map Icon",
          "Create Function To Show All New Icons",
          "Create Function For Fast Travel System"
        ],
        "Make Dynamic Map System": [
          "Setup Big Map Dynamicly",
          "Setup Mini Map Dynamicly.mp4",
          "Create New Level For Map",
          "Add Map System In To New level"
        ],
        "Migrate Map System To A New Project": [
          "Migrate Map System To A New Project"
        ]
      },
      "requirements": [
        "No programming experience needed. You will learn everything you need to know"
      ],
      "description": "Unlock the full potential of Unreal Engine with our comprehensive course designed to teach you how to create dynamic and interactive navigation systems using Blueprints. This course focuses on developing three essential components for immersive gameplay: a mini map, a compass system, and a big map system, complete with marker functionality.\nWhat You'll Learn:\nMini Map System: Discover how to design and implement a functional mini map that enhances player orientation and navigation within your game world.\nCompass System: Learn to create a real-time compass that guides players, ensuring they stay oriented and on track during their adventures.\nBig Map System: Develop a comprehensive big map system that provides a broad overview of the game world, allowing players to explore and plan their journeys with ease.\nMarker System: Master the art of adding markers to your maps to highlight important locations, objectives, or points of interest.\nCourse Highlights:\nBlueprint-Only Approach: No coding required! Leverage Unreal Engine's powerful Blueprint system to achieve robust functionality.\nHands-On Projects: Build practical systems through guided exercises and real-world scenarios.\nStep-by-Step Instructions: Follow clear, step-by-step tutorials that make complex concepts easy to understand.\nVisual and Interactive Learning: Engage with dynamic visuals and interactive elements to enhance your learning experience.\nWhether you're a game developer looking to enhance your navigation systems or a hobbyist eager to add depth to your projects, this course provides the tools and knowledge you need to succeed. Elevate your Unreal Engine skills and create compelling, navigable worlds with confidence!\nPrerequisites:\nBasic familiarity with Unreal Engine and its Blueprint system is recommended but not required.\nEnroll now to start building intuitive and engaging navigation systems for your Unreal Engine projects!",
      "target_audience": [
        "Anyone interested in Game development"
      ]
    },
    {
      "title": "Unity 5 Build a System that Generates Houses & Castles Auto",
      "url": "https://www.udemy.com/course/unity-5-build-a-system-that-generates-houses-castles-auto/",
      "bio": "Full step by step video lectures on how to program and use a system to build an unlimited amount of houses with 1 click",
      "objectives": [
        "Create an unlimited amount of houses and castles just by clicking on a button.",
        "Understand and step y step progrmming of powerful algorithms",
        "Get to reuse the system for all your Unity projects to quickly and easily create fantastic worlds"
      ],
      "course_content": {
        "Getting started": [
          "Instructor greetings",
          "Open Unity project and file overview"
        ],
        "Core functionality": [
          "Create the house block prefab",
          "Programming the house block references",
          "Starting the house generator code",
          "Assigning house generator variables in Unity Editor",
          "Programming the house block grid setup",
          "Programming the house bounds"
        ],
        "Core program": [
          "Coding the house block spawning",
          "Coding the unused wall removal",
          "Programming the removal of disconnected cells",
          "Designing the house roof prefab",
          "Programming the logic to spawn roofs of all sizes",
          "Designing the wall with door prefab",
          "Programming the creation of doors - part 1",
          "Programming the creation of doors - part 2",
          "Designing window prefabs",
          "Programming the instantiation of windows - part 1",
          "Programming the instantiation of windows - part 2",
          "Building the house from the Editor Menu",
          "Clearing the previous house",
          "Making unlimited house prefabs"
        ],
        "BONUS": [
          "Quizz 1",
          "BONUS"
        ],
        "Optional - PRO": [
          "PRO version - Adding balconies and flowers",
          "PRO version - adding roof variations",
          "Pro version - building a brown roof prefab",
          "Pro version - adding outdoor items",
          "Pro version adding rocks and flowers",
          "Pro version - adding pathways with flowers",
          "Adding animals to generated house",
          "Creating custom objects - castle roof part 1",
          "Creating custom objects - castle roof part 2",
          "Creating custom objects - castle roof part 3",
          "Creating custom objects - castle roof part 4",
          "Refactoring the grid setup to allow new algorithms",
          "Adding dungeon artifacts part 1",
          "Creating dungeons quickly - part 2",
          "Mixing multiple blocks altogether",
          "expanding default room size",
          "Adding dungeon artifacts part 1",
          "Adding dungeon artifacts part 2",
          "Adding pillars and grids",
          "Adding treasure chests to dungeon",
          "adding torch lights to the dungeon"
        ]
      },
      "requirements": [
        "Download Unity",
        "Basic of Unity and programming is recommended but not mendatory"
      ],
      "description": "What you see here in the Unity editor is a system that lets you create an unlimited amount of houses and castles in one click!\nThis course will teach you every single step to build and use this fantastic program.\nAll steps are shown to you in the video lectures, and as a bonus, you get the completed project.\nToday, the majority of top games are all made of huge worlds with hundreds of houses, castles and dungeons. It's impossible as a small team of indie developers to create a whole world efficiently unless you use a system like this one to be able to save time and money.\nThis tool is a must have for all your future Unity game projects.",
      "target_audience": [
        "computer students",
        "graphic design students",
        "gamers",
        "cool kids",
        "Unity developers",
        "indie devs"
      ]
    },
    {
      "title": "Learn C# by Making a Flappy Bird Game in Windows Forms & VS",
      "url": "https://www.udemy.com/course/learn-c-sharp-by-making-a-flappy-bird-game-with-moo-ict/",
      "bio": "Save highscore, change bird and pipe images, load files externally and publish Flappy Bird Game in Windows Forms & C#",
      "objectives": [
        "Create a Fully Customisable Flappy Bird Game in Visual Studio",
        "Work with Windows Form and .NET inside of Visual Studio",
        "Code the project fully using only C# programming",
        "Create Multiple Forms with UI including Title Screen, Games Screen and Help Screen",
        "Work with multiple windows form components such as Labels, Picture Boxes, Panels, Buttons and Timer",
        "Change Bird and Pipes images in the game during runtime",
        "Save High Score locally in a text file.",
        "Read high score from the text file and show updated value it in the games screen and titie screen",
        "Play jump and crash sound effects in the game",
        "Work with various Windows Form Events such as Mouse Move, Key Down, Key Up, Timer Tick etc",
        "Communicate between the Title Screen form and Games Screen form to remember player choice for the bird and pipe images",
        "Reset the game without closing and reopening the game",
        "Load Bird images and Pipe images from external folder",
        "Filter the file reading method to only look for GIF for the bird images and PNG for the pipe images",
        "Create double pipe with a gap in the middle and randomly change the pipe position to make the game more challenging",
        "Use multiple Boolean expression in IF statement while checking to collision detection",
        "Increase the pipe speed depending on the player score.",
        "Debug the application and fix any errors that arise",
        "Add customised Icons for game published version",
        "Publish #1 Create a game set up exe wizard. Include external game assets to the set up",
        "Publish #2 Create a single EXE file for the game including the .Net core components with it",
        "Extra Bonus: How to add extra graphics to the game after its been built (without coding)"
      ],
      "course_content": {
        "Introduction": [
          "Introduction - What are we doing here?",
          "Visual Studio Version Check"
        ],
        "Flappy Bird Game Tutorial": [
          "Flappy Bird V2 Game Tutorial Part 1",
          "Flappy Bird V2 Game Tutorial Part 2",
          "Flappy Bird V2 Game Tutorial Part 3"
        ]
      },
      "requirements": [
        "No previous programming skills or knowledge required. All the concepts will be covered in detail step by step."
      ],
      "description": "Hi welcome to this C# Programming language course. MOO ICT is an online programming tutor on the web and YouTube. We make a lot of fun tutorials ranging from games, web and apps while using the latest trends of programming and making learning more accessible for more people on the web.\nIn this course we will make a customizable flappy bird game using Windows Form, .NET 6 and Visual Studio IDE. We will be making this game from scratch import the images, lay out the GUI, create multiple forms, code the forms, add sound and finally publish the game to a self-contained set up wizard that will install the game into a chosen folder, create a shortcut to desktop and start menu. Also, we will explore a portable way to publish the app without the set-up wizard.\nWe will not be using any games engine for this course. We wanted to demonstrate the possibilities with windows form application, and we believe it’s still a good platform to create quick prototypes of apps and games. Windows form is an older framework, but we will be using the .NET 6 version of the windows form that’s suitable for the purpose of this game. The tutorial we did on YouTube for flappy bird was originally created on the .net framework and this version has been updated and added few awesome features to the game to make it more fun and full of neat features.\nThe feature of this game includes:\nClick on the bird/pipe image on the title screen, it will cycle through different bird images that’s being loaded from different folders in the background.\nCycle through animations for the birds, this includes the image for facing up and facing down\nRemember the player choices from the title screen and change the bird and pipe image on the games form.\nPlaying jumping and hit sound in the game\nSave high score locally, so when the game is closed it will remember that the high score in the game was.\nRead the high score in the title screen and the game screen. Both screens will be read the up-to-date high score from the file.\nWhen the game ends press the R key on the keyboard to restart the game. This feature is added so you wont have to go back to the start window and reset the game from there, you can simply press R and play again directly from the games window.\nUse double pipes with a space in the middle. Pipes will have their own function which will change their location in the game randomly while keeping a gap in the middle of them. This way the game will be more challenging for the player and give them an unpredictable play through.",
      "target_audience": [
        "Beginner Programmer",
        "Games Designer",
        "Students of IT, Computer Science or Games Design",
        "The curious minded problem solver",
        "Teachers of IT, Computer Science or Games Design",
        "Beginner developer looking for fun projects"
      ]
    },
    {
      "title": "Unreal 5 C++ Game - Beginner's Masterclass",
      "url": "https://www.udemy.com/course/unreal-5-cpp-game-beginners-masterclass/",
      "bio": "Learn To Build A Unreal 5 C++ Game Like A Pro",
      "objectives": [
        "Code from Scratch in C++",
        "Build a game from scratch in Unreal with C++",
        "Code Editor Introduction",
        "How to use the Unreal Engine 5 Editor."
      ],
      "course_content": {
        "00a Course Overview": [
          "Course Overview - Build a top down game with Unreal and CPP",
          "Source Files"
        ],
        "00b Code Editor Introduction": [
          "Install Visual Studio With C++"
        ],
        "00c Learn to Code from Scratch in C++": [
          "Build A New Console Application",
          "Build Variables To Store Data",
          "Build Functions To Perform Tasks",
          "Build Functions With Parameters",
          "Build Functions That Return Values",
          "Build Conditionals To Separate Code Flow",
          "Source Files"
        ],
        "Build Pointers and References in C++": [
          "Build Pointers To Store Memory Addresses",
          "Build References To Access Variables",
          "Source Files"
        ],
        "Build Classes and Objects in C++": [
          "Build Classes To Represent Objects",
          "Get And Set Private Variables",
          "Set Object Properties With Parameterized Constructors",
          "Point To And Reference Object Properties And Functions",
          "Source Files"
        ],
        "Unreal Introduction": [
          "What Is Unreal Engine 5",
          "01 How To Install UE5",
          "How To Debug Unreal And Visual Studio",
          "Source Files"
        ],
        "Build a game from scratch in Unreal with C++": [
          "Build A New Unreal Project From Scratch",
          "Build A Top Down Camera",
          "Source Files"
        ],
        "Build a custom player with C++": [
          "Build a character class",
          "Source Files"
        ],
        "Build food for player to collect": [
          "Build a food class",
          "Handle player and food collision",
          "Dynamically spawn food",
          "Build food blueprint and set game mode",
          "Source Files"
        ],
        "Change player size and speed dynamically": [
          "Increase player size upon eating",
          "Decrease speed as size gets bigger",
          "Source Files"
        ]
      },
      "requirements": [
        "No experience needed"
      ],
      "description": "Welcome to our Unreal C++ Game Beginner's Masterclass\nIn this course, you will learn how to build a top-down game with Unreal and CPP\n\n\nWhat you will learn:\nCode Editor Introduction\nCode from Scratch in C++\nBuild Pointers and References in C++\nBuild Classes and Objects in C++\nUnreal Introduction\nBuild a game from scratch in Unreal with C++\nBuild a custom player with C++\nBuild food for player to collect\nChange player size and speed dynamically\nBuild bots that move randomly\nBuild \"Game Over\" functionality\n\n\nLearn how to create and mod video games using Unreal Engine 4, even if you're a complete beginner. Unreal is a free-to-use game development engine used by AAA studios and indie developers worldwide. It can be a complex beast to get into, but we break it down step-by-step\nWe start super simple so you need no prior experience of Unreal or coding! With our online tutorials, you'll be amazed at what you can achieve. We believe project-based learning is the best way to learn Unreal Engine.\nYou will learn C++, the powerful industry-standard language from scratch. By the end of the course, you'll be very confident in the basics of coding and game development, and hungry to learn more.\nAnyone who wants to learn to create games: Unreal Engine is a fantastic platform which enables you to make AAA-quality games. Furthermore, these games can be created for Windows, consoles, macOS, iOS, Android and Web from a single source!\nIf you're a complete beginner, we'll teach you all the coding and game design principles you'll need. If you're an artist, we'll teach you to bring your assets to life. If you're a coder, we'll teach you game design principles.",
      "target_audience": [
        "Artists who want to bring their assets alive in a game engine.",
        "Developers who want to re-skill across to coding.",
        "Existing programmers who want to re-skill to game development.",
        "Game Developers"
      ]
    },
    {
      "title": "Master Destruction in Unreal Engine 5: Basics to Advanced",
      "url": "https://www.udemy.com/course/master-destruction-in-unreal-engine-5-basics-to-advanced/",
      "bio": "Unreal Engine's Chaos Destruction system — fracture meshes, simulate explosions, optimize large-scale destruction scenes",
      "objectives": [
        "Fracture static meshes and control destruction using Chaos tools.",
        "Set up damage thresholds and levels for realistic mesh breakage.",
        "Simulate explosions with FS_Master, transient, and anchor fields.",
        "Create Niagara VFX for fire, smoke, and dust in destruction scenes.",
        "Build a fully destructible building from scratch in Unreal Engine.",
        "Add FPS mechanics with rifle and grenade damage to environments.",
        "Create destructible walls, glass, and city props with blueprints.",
        "Optimize performance for large-scale destruction and explosions."
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Unreal Engine Basics": [
          "Section Overview",
          "Installing Unreal Engine",
          "User Interface",
          "Navigation",
          "Viewport Settings",
          "Creating and Transforming Objects",
          "Post Process Volume",
          "Materials",
          "Lights"
        ],
        "Destruction Basics": [
          "Fracture",
          "Damage Levels",
          "Explosions - Master Field",
          "Anchor Fields",
          "Anchor Fields - Example",
          "Sleep - Disable Actor",
          "Fire - Smoke Effects"
        ],
        "Destructible Building": [
          "Importing Tools",
          "Setup First Person Shooter",
          "Static Meshes and Geometry Collections",
          "Destructible Building Blueprint",
          "Destructible Walls",
          "More Destructible Floors",
          "Destructible Glasses",
          "Disable Sleep Actor"
        ],
        "Destructible City": [
          "Destructible City",
          "Destructible Props",
          "Destructible Glasses",
          "Grenade Explosions",
          "Destruction Video"
        ]
      },
      "requirements": [
        "A computer capable of running Unreal Engine 5 smoothly (Windows or macOS).",
        "A GPU that supports real-time physics simulation and Niagara VFX."
      ],
      "description": "Are you ready to master the power of destruction in Unreal Engine 5? Whether you're a beginner or an experienced Unreal user, this course will guide you through the complete Chaos Destruction system — from foundational concepts to advanced destruction techniques — using real-world, hands-on projects.\nWhat You’ll Learn:\n- Foundations of Chaos Destruction\nLearn to fracture static meshes using Chaos Fracture tools.\nSet up Damage Thresholds and Damage Levels for realistic destruction.\nUse FS_Master Field Actors to simulate explosions and force impact.\nUnderstand and apply Transient Fields and Anchor Fields for controlled destruction.\nDisable or sleep actors intelligently for performance optimization.\nCreate an immersive Niagara explosion VFX — including fire, smoke, and dust.\nApply all learnings in practical, real-time examples.\n- Full Destructible Building & FPS Integration\nBuild a fully destructible structure with multiple materials and physics layers.\nSet up a First Person Shooter system with a rifle and grenade mechanics.\nUnderstand the differences between Static Mesh, Skeletal Mesh, and Geometry Collections.\nCreate modular Destructible Blueprints for walls, glass, and other props.\nImplement realistic destructible glass with fracturing, transparency, and particle debris.\nAdd destructible props to urban environments: street lights, benches, windows, and more.\nExplore explosion chain reactions across structures and props.\nMost importantly, optimize performance while destroying large-scale environments like multi-story buildings and city blocks.\nBy the end of this course, you'll not only understand how to fracture and destroy assets in Unreal Engine 5 — you'll also be able to control the visual and performance aspects of those effects, making your game or cinematic both beautiful and efficient.",
      "target_audience": [
        "Unreal Engine users who want to implement dynamic destruction in their games or cinematics.",
        "Game developers interested in FPS mechanics with environmental damage.",
        "Artists and level designers looking to add destructible environments to their projects.",
        "Indie developers and students working on real-time VFX and interactive scenes."
      ]
    },
    {
      "title": "Build a 2D CastleMania Horror Unity Game with Sound Effects!",
      "url": "https://www.udemy.com/course/builda2dunitygame/",
      "bio": "Make your first complete game with sound effects. Learn C# as you code an awesome retro platformer for the App Store",
      "objectives": [
        "Build a retro CastleMania 2D platform game in Unity®.",
        "Learn the fundamentals of game design.",
        "Create game art in Photoshop.",
        "Code in C#.",
        "Add sound effects to the game."
      ],
      "course_content": {
        "Introduction to the Unity Interface": [
          "Introduction",
          "Unity Editor",
          "Moving a Cube",
          "Materials",
          "Lights",
          "Particle System",
          "Applying Physics",
          "Asset Store"
        ],
        "Introduction to Unity (Coding)": [
          "Introduction",
          "Variables",
          "Methods",
          "If Blocks",
          "Loops"
        ],
        "Introduction to Unity (Inputs)": [
          "Introduction",
          "Key Presses",
          "Moving a Player",
          "Jumping",
          "Moving Forward",
          "Cycling Cameras"
        ],
        "Introduction to Unity (Prefabs)": [
          "Introduction",
          "Introduction to Prefabs",
          "FAQ on Instantiating Objects",
          "Random Angles",
          "FAQ on Destroying Objects",
          "Explosion Effects",
          "Adding Explosion Effects"
        ],
        "Let's Make the Game! (Unity Project)": [
          "Organizing the Project",
          "Player Physics",
          "Moving the Player Horizontally",
          "Jump Logic",
          "Camera Follow",
          "Platform",
          "Creating the First Enemy",
          "Circle Enemy",
          "Wave Enemy",
          "Worm Logic for the Wave Enemy",
          "Destroying far away Objects",
          "Canvas and Events",
          "Throwing Weapons",
          "Throwing Directions",
          "Limited Ammo",
          "Making a Whip"
        ],
        "Introduction to Photoshop": [
          "Build a New File",
          "Navigational Controls",
          "Basic Tools Rundown",
          "Basic Tools Usages",
          "Basic Secondary Tools",
          "Basic Layers",
          "Painting Sample",
          "Adjustment Layers (Part 1)",
          "Adjustment Layers (Part 2)",
          "Adjustment Layers (Part 3)",
          "Transform Tool",
          "Transform Tool (Cont'd)",
          "Colour Range Select",
          "Image Settings",
          "Image Adjustment",
          "Photoshop Fun",
          "Photoshop Fun (Cont'd)",
          "Ruler Usage"
        ],
        "Creating the Game Assets (Photoshop Projects)": [
          "Setting up Photoshop",
          "Background Wall",
          "Broken Background Wall",
          "Window",
          "Old Curtain",
          "Dungeon Torch",
          "Floor",
          "Floating Platform",
          "Pillar",
          "Weapon Battle Axe",
          "Weapon Dagger",
          "Weapon Whip",
          "Ghost",
          "Vampire Bat",
          "Main Character",
          "Running Character",
          "Running Stills",
          "Running Animation",
          "Throwing Animation",
          "Whipping Animation",
          "Exporting Assets"
        ],
        "Finishing the Game (Unity Project)": [
          "Integrating Art",
          "Integrating Weapons",
          "Enemy Animation",
          "Player Idle Running",
          "Weapons Animations",
          "Winning the Game",
          "Audio - Integrating Sound FX",
          "Challenge Time!"
        ],
        "Project Resources": [
          "($2000 value!) Art Assets and Source Code",
          "Please leave us a rating.",
          "Bonus Lecture: Get 155 courses!"
        ]
      },
      "requirements": [
        "Download and install Unity® 2017.2.0f3 and Adobe Photoshop CC 2017.",
        "We recorded on a Mac, but you can use a PC."
      ],
      "description": "\"Very informative, shows how things are done and explaining clearly.\"\nThis course was funded by a wildly successful Kickstarter.\nThis is a retro games masterclass! Learn to code in C# by making a game from scratch. Use Unity® 2017 and Adobe Photoshop CC.\nIn this course, game developer Glauco Pires from Mammoth Interactive teaches you how to build a game in Unity®. This course is unique because we make both the code and the art for the game from scratch. We teach you the fundamentals of designing, coding, and fine-tuning a game.\nLet's make a complete game! Learn to code, make art, and add sound to build a full action-adventure game.\nFirst you design the game and its functionality in Unity®. You learn how to code in C#. Don't worry if you've never coded before. We start simple and add more to the game as the course goes on. We interweave theory with practical examples so that you learn by doing.\nMammoth Interactive game designer Kevin Liao teaches you everything you need to know about Photoshop to make game art. One of the best features is that you can watch the courses at any speed you want. This means you can speed up the or slow down the video if you want to.\nThis course is project-based. You will not learn a bunch of useless coding practices. At the end of this course, you will have an AWESOME game to use in your portfolio. Taking this course means that you learn practical, employable skills immediately.\nLearning how to code is a great way to jump in a new career or enhance your current career. Coding is the new math! Learning to code will propel you forward for any situation. Learn it today and get a head start for tomorrow. People who can master technology will rule the future.\n\"I know nothing about Unity, and this course is at the right level for me (it starts from the ground up).\"\nAll source code and art assets are included with your purchase. What are you waiting for? Your game could make it big. Enroll today to join the Mammoth community of online game dev learners!",
      "target_audience": [
        "Complete beginners. No prior coding or digital art skills necessary.",
        "People who want to make games."
      ]
    },
    {
      "title": "Complete Unity® guide: make an action shooter from scratch!",
      "url": "https://www.udemy.com/course/make-a-mega-dude-action-shooter-game-in-unity-with-pixel-art/",
      "bio": "Our experienced instructors Kevin Liao & Glauco Pires explain everything from a beginner level. No experience necessary!",
      "objectives": [
        "Build a platform shooter game in Unity®.",
        "Learn the fundamentals of game design.",
        "Create artwork in MagicaVoxel and Photoshop.",
        "Code in C#."
      ],
      "course_content": {
        "Introduction (UNITY)": [
          "Introduction to the Course",
          "Intro + Downloading Unity",
          "3D Elements",
          "Building a Player",
          "Input",
          "Horizontal Movement",
          "Jumping"
        ],
        "Shooting (UNITY)": [
          "Game Camera",
          "Shooting Bullets",
          "Particle Effects",
          "Multiple Bullets",
          "Charging Bullets"
        ],
        "Enemies - Part 1 (UNITY)": [
          "Base Enemy Class",
          "Hurt Animation",
          "Killing Effect",
          "Destroying Particle System",
          "Walking Enemy",
          "Knockback Effect",
          "Physics Materials",
          "Collision Improvements"
        ],
        "Enemies - Part 2 (UNITY)": [
          "Flamethrower Enemy",
          "Flames",
          "Shooter Enemy",
          "Enemy Bullet",
          "Spawn Enemy Bullets",
          "Burst Fire",
          "Shooter Enemy Adjustment",
          "Turrets"
        ],
        "Doors and Buttons (UNITY)": [
          "Doors",
          "Button",
          "Trigger Elements",
          "Timed Button"
        ],
        "Platforms and Teleport (UNITY)": [
          "Moving Platforms",
          "Teleporter",
          "Teleporter Loop",
          "Triggering Teleporters",
          "Triggering Platforms"
        ],
        "Cutscenes and Powerups (UNITY)": [
          "Cutscene Trigger",
          "Input Lock",
          "Powerups",
          "Powerup Routine",
          "Supercharge Powerup",
          "Invincibility Powerup"
        ],
        "Interface - Part 1 (UNITY)": [
          "Canvas",
          "Health and Time Texts",
          "Designing a Powerup Bar",
          "Event",
          "Animating a Powerup Bar"
        ],
        "Interface - Part 2 (UNITY)": [
          "Cutscene Animations",
          "Pausing the Game",
          "Scene Navigation"
        ],
        "MagicaVoxel Crash Course": [
          "Introduction",
          "MagicaVoxel Tools Crash Course"
        ]
      },
      "requirements": [
        "Unity® 2017.1.0f3 (for game set-up and coding)",
        "MagicaVoxel and Adobe Photoshop CC 2015.5 (for creating art)",
        "This course was recorded on a Mac computer, but you can use a PC."
      ],
      "description": "Complete Beginner's Guide to Building a Game from Scratch in Unity® with Pixel Art in MagicaVoxel & Photoshop.\nThis course was funded by a wildly successful Kickstarter.\nJoin Mammoth Interactive step-by-step in building a fully featured game from scratch. We show you how to make all the code and art for the game.\nYou don't need any prior coding or digital art experience!\nGlauco Pires takes you through the process of coding a game in Unity® from scratch. Kevin Liao teaches you how to create all the artistic elements you will need to complete the game. Kevin will teach this section of the course in MagicaVoxel and Photoshop to make original art.\nThe beauty of taking an online course like this is the ability to replay any of the lectures at any time. There is no time limit or final tests. You get to learn at your own pace with a practical model method of learning.\nThis course is project-based, so you will not waste time on useless coding practices. We feel that project based training content is the best way to get from A to B. Taking this course means that you learn practical, employable skills immediately.\nLearning how to code is a great way to jump in a new career or enhance your current career. Coding is the new math and learning how to code will propel you forward for any situation. Learn it today and get a head start for tomorrow. People who can master technology will rule the future.\n\nYou get full lifetime access to this course for a single one-time fee. Enroll today to join the Mammoth community!",
      "target_audience": [
        "Complete beginners. No prior coding or digital art skills necessary.",
        "People who want to make games."
      ]
    },
    {
      "title": "Make a Starship Unity Game Powered by AI!",
      "url": "https://www.udemy.com/course/aiunitygame/",
      "bio": "Build a 3D pathfinding game with C#. Mine a unique world using NavMesh artificial intelligence. Make cutting-edge games!",
      "objectives": [
        "learn to code for game development in Unity C#",
        "make a game that uses artificial intelligence",
        "use a navigation mesh to add pathfinding logic to your game",
        "learn cutting-edge tools that will put you ahead of other game developers!"
      ],
      "course_content": {
        "Gameplay": [
          "Gameplay"
        ],
        "Unity Intro": [
          "Have Unity experience? Jump to Section 6!",
          "Unity Intro",
          "Unity Editor",
          "Moving a Cube",
          "Materials",
          "Lights",
          "Particle System",
          "Applying Physics",
          "Asset Store"
        ],
        "C# Coding - Unity Intro": [
          "C# Coding Intro",
          "Variables",
          "Methods",
          "If Blocks",
          "Loops"
        ],
        "Inputs - Unity Intro": [
          "Inputs Intro",
          "Key Presses",
          "Moving a Player",
          "Jumping",
          "Moving Forward",
          "Cycling Cameras"
        ],
        "Prefabs - Unity Intro": [
          "Section Intro",
          "Prefabs Intro",
          "FAQ on Instantiating Objects - Unity",
          "Random Angles",
          "FAQ on Destroying Objects - Unity",
          "Explosion Effects",
          "Adding Explosion Effects"
        ],
        "Starship Unity Game with NavMesh": [
          "(Files) Source Code and Art Assets",
          "Introduction",
          "Project Setup",
          "Building an Environment",
          "Camera Follow",
          "Raycasts",
          "NavMesh",
          "NavMesh Agent",
          "Adjusting Agent Types",
          "Agent Steering",
          "Slopes",
          "Minerals",
          "Mining Ore",
          "Transparency",
          "Interface and Tutorial",
          "Integrating Sounds",
          "Conclusion and Challenge",
          "Please rate this course",
          "Bonus Lecture: Newsletter"
        ]
      },
      "requirements": [
        "Unity 2017.3.0f3 or higher"
      ],
      "description": "Explore with a smart character! Learn to build a spaceship on a planet.\nWelcome to Mammoth Interactive's NavMesh course with Glauco Pires. In this course you will program a spaceship in a three-dimensional game.\nA wildly successful Kickstarter funded this course\nWith artificial intelligence your ship character will learn to explore a planet. The ship will travel around craters, rocks, aliens and buildings in a 3D world.\nYou will make a good pathfinding system to find the best path for the player to navigate to wherever you click.\nGlauco has a decade's experience in game development. He makes games in Unity, Unreal, and HTML languages. He works with languages like C#, C++, and JavaScript.\nstraightforward coding skills\nclean development techniques\nthoughtful developer advice\nWith Glauco you will learn to make games in the most efficient and cleanest way possible.\nWhy you need artificial intelligence in games\nWith artificial intelligence, you can make your games more…\ncomplex\nrandom\ninteresting\nvaluable\n…without putting in more effort thanks to algorithms.\nOld games - the very first computer games - were simple and straightforward.\nThese days, you must make more complex games. Players want to believe they are playing against something complex, something lifelike.\nEnroll now! This course's topic is bulletproof knowledge. Learn to be a technical and creative thinker. Glauco is an innovative instructor who gets great reviews.\nThis offer won't last forever – sign up now to meet Glauco",
      "target_audience": [
        "Take this course if you want to be a game developer with unique skills",
        "Take this course if you want to make games with smart automated features"
      ]
    },
    {
      "title": "How to Script on Roblox (Scripting Tutorial)",
      "url": "https://www.udemy.com/course/how-to-script-on-roblox-scripting-tutorial/",
      "bio": "Learn how to script anything on Roblox with this straight-to-the-point, free tutorial series.",
      "objectives": [],
      "course_content": {},
      "requirements": [
        "You should know the basics of Roblox Studio software, but no scripting experience is needed."
      ],
      "description": "Updated for 2023, this is my all-new Lua tutorial. In this easy Roblox scripting tutorial series, you will be given all the tools you need to become a scripting master!\nRECOMMENDED PLUGIN: Search \"ScriptMate\" in the toolbox to install the plugin to Roblox Studio. With the recommended plugin, learn how to code in Lua much quicker by practising your skills alongside the tutorial series!\n\n\nWhen I was learning to script years ago, I vividly remember finding a lot of the existing tutorials & resources being too difficult for me to sit through.\nI was never able to find anything that just gave me the information I wanted to hear, but I had to learn everything I know today over a long period, through a range of different resources.\nAs a result, I have attempted to create a straight-to-the-point tutorial series, designed to feature everything you need to get into scripting on Roblox.\nWhether you’re brand new to scripting, or looking to improve your skills, the series is designed to be something that everyone can benefit from, without being an unnecessarily difficult experience.\n\n\nOther Notes:\nSome content might seem unnecessary at first, but everything mentioned is an essential part of the learning process, and will heavily affect your ability to write your own scripts if you choose to ignore them.\n\n\nIf you’re using the series as a learning resource, please consider this before skipping anything you don’t understand, or find unimportant!\n\n\nI completely acknowledge that some of you, notably non-native English speakers, might have difficulty understanding everything due to the speed of the content.\n\n\nEach tutorial includes fully scripted subtitles, the ability to reduce the playback speed in the video player settings, and the ability to gain experience directly from the plugin content.\n\n\nIf none of this is of interest to you, I would recommend looking into other tutorials on Udemy that you find more suitable. These tutorials are simply to fill, what I feel is a gap in current resources.",
      "target_audience": [
        "Beginner Roblox developers learning to script, or looking to refresh their knowledge"
      ]
    },
    {
      "title": "Learn to create a 2D Racing car game for FREE PART 1.",
      "url": "https://www.udemy.com/course/learn-to-create-a-2d-racing-car-game-for-free-part-1/",
      "bio": "Learn how to create a cool 2D top down racing car game with the unity game engine.",
      "objectives": [],
      "course_content": {
        "Introduction": [
          "Introduction to my course",
          "Installing the unity engine and also installing visual studio",
          "Explaining how the unity engine works"
        ],
        "Adding the main car to scene with features": [
          "Cutting up car sprite sheet",
          "Adding the car to scene with its components",
          "Moving the car using c# script",
          "Making the front wheels rotate using c# script",
          "Creating the exhaust smoke with the particle system",
          "Mixed Quiz"
        ]
      },
      "requirements": [
        "You will need to download unity and visual studio which is free and then be willing to learn game design.",
        "Basic understanding of the C# language and Unity"
      ],
      "description": "THIS COURSE WILL BE UPLOADED IN PARTS DUE TO VIDEO TIME RESTRICTIONS.\n\n\nIn my course we will start at the bottom and work our way up to advanced game design like AI path finding, we will be creating a car controller and many features with in our game.\nThis course is designed for beginner level and up as i will explain everything in best detail as i can, at the end of the course we will have made a racing car game like micro machines which in the 1980's was an amazing car game.\nIn this part of the course you will learn\nInstalling the unity engine and also installing visual studio\nExplaining how the unity engine works\nCutting up car sprite sheet\nAdding the car to scene with its components\nMoving the car using c# script\nMaking the front wheels rotate using c# script\nCreating the exhaust smoke with the particle system\nAnd a mixed quiz",
      "target_audience": [
        "Students that want to learn to be a game designer."
      ]
    },
    {
      "title": "Game Development with JavaScript for Beginners",
      "url": "https://www.udemy.com/course/game-development-with-javascript-for-beginners/",
      "bio": "Learn about modern JavaScript, TypeScript by building interesting games from scratch.",
      "objectives": [
        "All core features and concepts you need to know in modern JavaScript development",
        "Build 2d games with HTML, CSS & JavaScript",
        "Implement and Practice Object Oriented Programming",
        "Learn game development using javascript",
        "Learn about Typescript and Webpack",
        "All about variables, functions, objects and arrays"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Setup and Installation": [
          "Setup node js",
          "Install Visual Studio"
        ],
        "Introduction to JavaScript": [
          "The 'script' tag",
          "Variables in JavaScript",
          "Comments",
          "Core Types in JavaScript",
          "JavaScript Object Types",
          "JavaScript Array Types",
          "null and undefined types",
          "JavaScript Functions",
          "if-else",
          "switch statements",
          "for loop",
          "while loop",
          "JavaScript \"strict\" mode",
          "this keyword"
        ],
        "Introduction to TypeScript": [
          "Introduction to TypeScript",
          "Why TypeScript",
          "Core Types in TypeScript",
          "Type inference",
          "Object Type",
          "Array Type",
          "const vs let vs var",
          "Arrow function",
          "Closure (in JavaScript)",
          "Introduction to classes and objects",
          "Classes and objects",
          "constructor",
          "class methods",
          "Inheritance"
        ],
        "Introduction to webpack": [
          "What it webpack",
          "Why to use webpack"
        ],
        "Phaser Basics": [
          "Boilerplate code",
          "Configuration of game",
          "Preload Scene",
          "Adding image to Scene",
          "Adding interactive",
          "Making object to move",
          "Adding Tweens"
        ],
        "Animation in Phaser": [
          "Boilerplate code",
          "Loading SpriteSheets",
          "Creating Animation",
          "Adding Tweens",
          "Adding audio to the game"
        ],
        "Physics in Phaser": [
          "Adding physics to the project",
          "Adding Sprite",
          "Adding Collider",
          "Adding Input events"
        ],
        "Follow Camera": [
          "Loading tilemaps",
          "Creating maps",
          "Adding player",
          "Camera following Player"
        ],
        "Platformer 2D": [
          "Introduction to the game",
          "Introduction to project files",
          "Dependencies for the game",
          "Fix dependencies (important)",
          "Project flow",
          "Configuration for the game",
          "Plugins for the game",
          "Game file",
          "Single tile",
          "export default",
          "Tile Group",
          "Player class",
          "Introduction to maps",
          "Create Maps",
          "Create Levels",
          "PreloadScene",
          "Preload setPath",
          "MainScene",
          "Create animation",
          "Spine Animation",
          "Taking Input",
          "Creating Goal Sprite",
          "Player collision",
          "Testing different levels",
          "Removing Loading Screen",
          "Adding Background",
          "Render background properly at center",
          "Create coin",
          "Display Coin",
          "Enemy Class",
          "Bee class",
          "Enemy Group",
          "Adding Bee Enemy",
          "Adding collider",
          "updating collider",
          "Adding update to each Bee enemy",
          "Collision with Bee enemy",
          "Creating Slime Enemy",
          "Adding Full Screen"
        ]
      },
      "requirements": [
        "Any programming language knowledge",
        "Basic web browser knowledge"
      ],
      "description": "Nowadays, JavaScript can be used to make games, it brings the question of how good it is to use it for such tasks?.\nYes Indeed! JavaScript is a great language for game development, depending on the type of game you want to create. JavaScript is best for web-based and mobile games. It’s also a great language for beginners to learn because it’s generally easy to understand and has plenty of libraries and modules available.\nJavaScript games can be played in the browser or mobile phone, so, if that’s your goal, it’s an excellent option. Using platforms and tools can help create both 2D and 3D games that can run directly in your browser.  Aside from only web-based games, JavaScript has been increasing in popularity in mobile game development.\n\n\nMany popular online games were built using JavaScript. Students who want to create JavaScript game coding can start building one taking examples from one of the following:\nTower Building:  is a great way to get started with JavaScript games.\nBejeweled was created as an in-browser game in the early 2000s. It’s similar to Candy Crush where you have to match three jewels in a row to score points.\n2048 is an addicting game that allows you to use your arrow keys to move tiles around in a grid. The idea is to merge tiles until they equal 2048.\nPolycraft is a 3D game that is playable in your browser. Polycraft is full of adventure, exploration, base-building, gathering, crafting, and even fighting. It’s an excellent example of how you can move past 2D games with Javascript.\nWords With Friends 2 is a mobile app game that uses React Native, a framework that utilizes JavaScript to create mobile applications. They chose to use React Native for its ability to create a game that can be played on multiple platforms using JavaScript with one code-base.\nSee, how fun and rewarding it can be using JavaScript for building games, Let us look at some projects we are going to build in this course:\n1. Hill climbing game: Famous android game but its idea of making vehicle move in hills is never old when it comes to web. We uses different concepts such as webpack, and physics module from phaser library to make this game.\n2. Platformer 2D: we will have detail idea about sprites and how to use them in our games. We will create map (environment) and players from scratch. Different levels will be made and triggers/colliders will be added to make player change from one level to another.\n3. Basics of Phaser library: Different programs to load images, follow camera, loading animations will be created.\n\n\nI really enjoyed creating this course. Hope you will also have fun learning. See you at the class!",
      "target_audience": [
        "Beginner web development students who have no or only little JavaScript experience",
        "Everyone interested in learning JavaScript and all about how it works building games"
      ]
    },
    {
      "title": "Complete 3D FPS Zombie Game in Unity for Beginners",
      "url": "https://www.udemy.com/course/complete-3d-fps-zombie-game-in-unity-for-beginners/",
      "bio": "Create Story Based FPS in Unity C# For beginners 2024",
      "objectives": [
        "Player Mechanics: Learn player movement, shooting, and health systems",
        "Enemy AI: Implement basic zombie AI behavior.",
        "Level Design: Create immersive 3D environments.",
        "UI and HUD: Design and implement health bars, ammo counters, and menus."
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Player": [
          "Player Movement",
          "Better Movement",
          "Speed Booster",
          "Jumping",
          "Fix Jumping",
          "Player Camera",
          "Lock Cursor",
          "First person camera",
          "Adding player model"
        ],
        "Shooting": [
          "Shooting mechanics",
          "Impact effect",
          "Gun animations",
          "Automatic Shooting",
          "Muzzleflash",
          "Crosshair",
          "Ammo system",
          "Ammo UI",
          "Reload animation",
          "Extra mags",
          "Fixing"
        ],
        "Enemies": [
          "Adding zombie",
          "Detect Player",
          "Chasing player",
          "Zombie attack",
          "Detecting player part2",
          "Enemy health",
          "Zombie animation",
          "Death effect"
        ],
        "Player Health": [
          "Setting up Health",
          "Healthbar UI",
          "Health mechanics",
          "Damaging player with enemy",
          "Player damage effect"
        ],
        "Navigation": [
          "Enemy AI",
          "Fixing AI"
        ],
        "Environment": [
          "Creating environment",
          "Skybox",
          "Lights"
        ],
        "MENU": [
          "Mainmenu UI",
          "Buttons",
          "Credits scene",
          "Pause UI",
          "Pause Mechanics"
        ],
        "Quest System": [
          "First Quest",
          "Second Quest",
          "Quest UI",
          "Portals",
          "UI Messages",
          "Cut scene",
          "Portal effect",
          "Borders",
          "Creating new level",
          "Fixing bug",
          "Level 2 Quest",
          "Progress bar",
          "Progress bar part2",
          "Changing generator text",
          "Mission failed",
          "Changing detecting range",
          "Player blocker"
        ],
        "Respawning": [
          "Spawnpoints",
          "Adding zombies",
          "Fixing detecting range"
        ]
      },
      "requirements": [
        "Mac or PC capable of running Unity 3D"
      ],
      "description": "Are you ready to dive into the world of game development and create your own thrilling zombie FPS game? Welcome to \"Complete 3D FPS Zombie Game in Unity for Beginners\" This comprehensive course is designed for absolute beginners who want to learn the ins and outs of Unity and game development while creating an exciting and immersive zombie shooter game.\nIn this course, you will start with the basics of Unity and gradually build your skills as you develop a complete first-person shooter game. You’ll begin by learning how to set up your Unity project and create essential gameplay mechanics such as player movement, shooting, and health systems. We’ll guide you step-by-step through the process of implementing these features, ensuring you understand each concept thoroughly.\nNext, you’ll delve into enemy AI development. You will learn how to create zombie enemies that can navigate the game environment, detect the player, and launch attacks. We’ll cover essential AI behaviors like pathfinding, chasing, and attacking, making your game more challenging and engaging.\nLevel design is a crucial aspect of any game, and you’ll master the art of creating immersive 3D environments. You’ll learn how to design and build detailed game levels, complete with obstacles, power-ups, and dynamic lighting, to enhance the gameplay experience.\nFinally, we’ll focus on user interface (UI) and heads-up display (HUD) elements. You’ll learn how to design and implement health bars, ammo counters, and in-game menus, providing players with essential information and a seamless gaming experience.\nBy the end of this course, you will have a complete, playable zombie FPS game and a solid foundation in Unity game development. Join us on this exciting journey and start creating your own games today!",
      "target_audience": [
        "Complete Beginners: This course is perfect for anyone who has never used Unity before and wants to learn 2D game development from scratch.",
        "Aspiring Game Developers: If you have a passion for games and want to turn your ideas into playable projects, this course will provide the essential skills and knowledge you need.",
        "Hobbyists and Enthusiasts: Whether you're a hobbyist looking to develop your first game or an enthusiast wanting to deepen your understanding of Unity, this course offers step-by-step guidance.",
        "Students and Educators: This course is suitable for students seeking practical experience in game development and educators looking for structured content to teach Unity in their classrooms."
      ]
    },
    {
      "title": "Playable Metahumans in Unreal Engine 5.5: Understand the Why",
      "url": "https://www.udemy.com/course/make-metahumans-playable-in-unreal-engine-5-why-it-works/",
      "bio": "Learn from a Gold-tier Unreal Authorized Instructor how Unreal Engine's inheritance system makes MetaHumans playable.",
      "objectives": [
        "Make a MetaHuman fully playable in Unreal Engine 5.5+",
        "Understand Unreal Engine's character architecture",
        "Customize animation retargeting in real-time",
        "Debug, refine, and optimize character setups"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "MODULE 1: Where and Who — Understanding Character Spawn in Unreal Engine": [
          "Third Person Template Project",
          "Bringing in a MetaHuman",
          "Where do you Spawn? Understanding Player Start",
          "Who Spawns? Understanding Game Mode and Default Pawn Class"
        ],
        "MODULE 2: Inheritance and Composition in Unreal Engine": [
          "Inheritance and Composition - Concepts",
          "The Car Analogy - Part 1",
          "Blueprint Visual Scripting Logic vs Blueprint Class",
          "The Car Analogy - Part 2 (and ACharacter Class)"
        ],
        "MODULE 3: Parent Class & Player Controller": [
          "Changing the Parent Class",
          "Adding the Camera Component",
          "Player Controller & MetaHuman Design",
          "Inheriting from BP_ThirdPersonCharacter Blueprint Class",
          "The Illusion of Animation in Unreal Engine"
        ],
        "MODULE 4: Animation Blueprints, State Machine and Live Retargeting": [
          "Options to Animate our MetaHuman",
          "Enhanced Input System & MetaHuman Design",
          "Animation Blueprint and State Machine",
          "Pose Matching Analogy for Live Retargeting",
          "Setting up Live Retargeting for a MetaHuman"
        ],
        "MODULE 5: Improve Retargeting Quality using IKRetargeter Node, Blend to Source": [
          "Up Retargeting Quality using IKRetargeter, Default Pose Match, Blend to Source"
        ],
        "MODULE 6: Advanced Retargeting & Blueprint Debugging": [
          "Deep Dive into MetaHuman Retarget Animation Blueprint",
          "Setting up Source Mesh for Retarget Pose From Mesh node",
          "Debugging a Visual Blueprint Script"
        ],
        "Character Movement Component & Conclusion": [
          "Adjusting Character Movement Component Parameters & Wrapup"
        ]
      },
      "requirements": [
        "Familiarity with Unreal Engine interface and Blueprints",
        "Completion of Epic's \"Your First Hour with Unreal Engine\" and \"Third Person Game Creation\" recommended",
        "Basic understanding of classes and components in Unreal (Actor, Pawn, Character)"
      ],
      "description": "Most Metahuman tutorials teach you how to follow a list of steps. This course teaches you what those steps actually do — and why they matter.\nAs a Gold-tier Unreal Authorized Instructor, an Unreal Animation Fellow, and a generalist focused on all things Unreal Engine, including Virtual Production, Game Design, and Cinematics, I understand just how fast Unreal Engine is developing and changing. Understanding how the engine ticks (pun intended!) is key to your ability to thrive using Unreal Engine and problem solve when things don't work as expected.\nIn this focused, under-2-hour course, you’ll gain an architectural understanding of how Unreal Engine 5 spawns and controls characters, including Metahumans. Instead of overwhelming you with features, we go deep into core principles like:\nInheritance and Composition\nGame Mode and Default Pawn Class\nBlueprint Class Hierarchies\nLive Animation Retargeting\nCharacter Movement Components\nYou’ll learn to bring in a Metahuman and make them playable — not by blindly replacing meshes, but by understanding the engine’s underlying systems. You are encouraged to break things and find your way back again, asking WHY -- that is the way.\nWhether you're working in indie games, virtual production, or animation, these are the Unreal Engine fundamentals that will unlock everything else.\nBy the end, you’ll be confident not just in using Metahumans — but in adapting and extending the system for your own projects.",
      "target_audience": [
        "Intermediate Unreal Engine users looking to make Metahumans playable",
        "Creators interested in Unreal Engine's character systems",
        "Anyone curious about how Unreal handles player input, animation, and character control under the hood"
      ]
    },
    {
      "title": "Master Flame Game Engine: Code The T-Rex Endless Runner Game",
      "url": "https://www.udemy.com/course/master-flame-game-engine-code-the-trex-endless-runner-game/",
      "bio": "Master Mobile Game Development Lifecycle using Flutter and Dart. Reverse-Engineer Trex the Famous endless runner game.",
      "objectives": [
        "Use Flutter and Dart to write a complete 2D Game on top of the Latest (2023) Flame Engine.",
        "Master the Game Development Cycle to learn how to successfully create your own games.",
        "Think like a Software Architect. Go through the complete process of designing, architecting, and coding the game.",
        "Develop a solid foundation for game design and game creation that will empower you to build your own games.",
        "Learn how to use Object Oriented Programming practically and effectively using Design Patterns.",
        "Achieve a higher level understanding of the Flame Game Engine API for Game Development"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Assumptions"
        ],
        "Game Mechanics": [
          "The WHY and HOW of Reverse Engineering an Existing Game",
          "Game Development Cycle",
          "Exercise #1 - Game Mechanics",
          "Exercise #1 Solution"
        ],
        "Game Elements": [
          "Intro - Achieving Detailed Game Mechanics",
          "Detailed Game Mechanics - Jumping And Ducking",
          "Detailed Game Mechanics - Obstacle Generation",
          "Detailed Game Mechanics - Parallax Generation",
          "Detailed Game Mechanics - Speed Increase",
          "Detailed Game Mechanics - Collision Detection",
          "Detailed Game Mechanics - Scoring The Game",
          "Detailed Game Mechanics - Sound and Sound FXs",
          "Detailed Game Mechanics - Horizon Generation"
        ],
        "Architecting The Game Solution": [
          "Development Strategy",
          "Exercise #2 - Creating a Game Element Document",
          "Exercise #2 Solution",
          "Determining Development Priorities",
          "Modular Architecture of the Solution",
          "Reviewing and Researching Flame Game Engine API"
        ],
        "Developing Milestone #1 (Game Manager, Player, Game Widget)": [
          "Scoping the Game Shell and the initial game structure.",
          "Coding the Milestone #1 Elements",
          "A More Detailed Look at The Player Class",
          "Exercise #3 - Adding Ducking to the Player",
          "Exercise #3 Solution - Adding Ducking to the Player"
        ],
        "Developing Milestone #2 (Game Manager, Horizon Manager)": [
          "Scoping the Code for generation of the infinite Horizon line in the game",
          "Smooth Horizon Animation Algorithm Strategy",
          "Coding the Milestone #2 Elements",
          "Exercise #4 - Modifying the Horizon Generation Algorithm"
        ],
        "Developing Milestone #3 (Parallax Cloud Manager)": [
          "Scoping the Code for Generation of the Clouds",
          "Cloud Manager Strategy and Main Code Points",
          "Coding the Milestone #3 Elements",
          "Exercise #4 - Working with the Cloud Generation Algorithm"
        ],
        "Developing Milestone #4 (Score Management)": [
          "Scoping the Code for Score Management",
          "Coding the Milestone #4 Elements",
          "Exercise #5 - Tracking High Score for the Player"
        ],
        "Developing Milestone #5 (Obstacle Generation)": [
          "Scoping the code for Obstacle Generation",
          "Obstacle Manager Strategy and Main Code Points",
          "Coding the Milestone#5 Elements",
          "Exercise #6 - Adding Collision Detection and End-Of-Game/Restart Button"
        ],
        "Developing Milestone #6 (Collision Detection)": [
          "Scoping the Code for Collision Detection.",
          "Coding the Milestone#6 Elements",
          "Exercise #7 - Better Hitbox Accuracy + UML Architectural Challenge"
        ]
      },
      "requirements": [
        "This is a course for students who have some experience with Flutter and Dart and understand the basics of the Flame Engine."
      ],
      "description": "Welcome to the Mobile Game Development Course in which we will Reverse Engineer, Architect, and Develop a mobile version of the famous Chrome Dinosaur Game uing the Flame Game Engine with Flutter and Dart.\n\nWhy Develop Mobile Games?\nMobile Games are by far the largest share of Game Application revenue in the world. More than 50% of all game application development comes from Mobile games.\nBeing able to code Mobile Games offers great potential in such a large market.\n\n\nWhy Flame Engine\nThe Flame Engine is a minimalist 2D game engine that runs on top of the Flutter framework. So it is light-weight with a small footprint.\nThis is perfect for mobile games.\n\n\nAdvantages of The Flutter Framework\nYou work with one code base but get multiple platform deployment. Basically write once, and deploy to both iOS and Android. This is a huge advantage as it saves you time and effort.\nAnd this is great for mobile games since we do not rely on the specific OS GUI as we basically take over the screen and create our own GUI from scratch.\n\n\nWhy Take this course?\nIn this course we will teach you how to go through the full game development cycle and you will learn how to develop a mobile game from scratch.\n\n\nWe will start with the game idea\nWe will then reverse engineer this idea into game requirements\nthey will include the game elements\nand the game mechanics\nWe will then consider the game aesthetics\nWe will create a game architecture\nAnd then we will fully develop the game.\n\n\nAssumptions\nWe assume that you know Flutter/Dart and have worked with it.\nWe also assume that you have some knowledge of the Flame Engine. This could be either through an introductory course such as \"Flame & Flutter with Dart : Build your First 2D Mobile Game\" which is offered on Udemy or through some online tutorials.\nEverything in this course will be explained in detail including the code so you do not have to be an expert.\n\nWhat will you learn?\nThis course will teach you not just to code the game but it will teach you the full scope of the game development cycle.\nThe Chrome Dinosaur game is an example of a very popular game genre which is the Endless Runner Game and also known as Infinite Runner Game.\nDeveloping any game from scratch is a great exercise that will not only make you a better game developer but it will also help you master the Flame Game Engine API so that you will be able to create your own games.\n\n\nReverse Engineering a Game is a very important skill for a game developer and we will look carefully at every detail of the game mechanics and the game elements for the Chrome Dino game, and we will map the mechanics and the elements into an architecture which we will then develop.\n\n\nWe will use efficient sprite animation as well as simple sound design. We will map out all the individual game elements and their mechanics and then we will combine them into more complex behavior. For example we will combine the mechanics of our Dino and the obstacles to include Collision Detection in the most efficient and architecturally sound manner.\n\n\nMilestone approach\nPart of how we teach you in this course revolves around practical case studies. Each case study shows you a full solution to a given element of 2D game coding such as for example Animation or Collision Detection.\n\n\nEach milestone will build on the previous one which is one of the most important skills in software development. We will build for ease of modification and ease of enhancement.",
      "target_audience": [
        "Flutter and Dart developers who want to master the art of Mobile Game development using the flame Game Engine."
      ]
    },
    {
      "title": "How to Develop RPG Games for iPhone [Xcode]",
      "url": "https://www.udemy.com/course/how-to-develop-rpg-games-for-iphone/",
      "bio": "Anyone who wants to develop your own game, you can make it.",
      "objectives": [
        "Learning Xcode to develop RPG game for iPhone."
      ],
      "course_content": {
        "Tutorial": [
          "Introduction to Lecture",
          "Introduction to Xcode",
          "Import External Image"
        ],
        "Control System": [
          "Location & Touch",
          "Update",
          "Control Pad_1",
          "Control Pad_2",
          "Control Button"
        ],
        "Player": [
          "Character Class",
          "Move",
          "Moving Animation",
          "Attack Animation",
          "Item Animation",
          "Skill Animation",
          "Delay Animation",
          "Delay Effect",
          "Game Data"
        ],
        "Monster": [
          "Monster Data",
          "Physics",
          "Mini Map",
          "AI_Random Walk",
          "AI_Chase",
          "AI_Attack",
          "Damage_1",
          "Damage_2",
          "Damage_3",
          "Damage_4",
          "Gold Drop",
          "Level Up"
        ],
        "Field": [
          "Map Data",
          "Transition",
          "Save & Load Data",
          "Game Over",
          "Object",
          "Map"
        ],
        "NPC": [
          "NPC",
          "MSG",
          "Shop"
        ],
        "Supporting File": [
          "Project File",
          "Image File"
        ]
      },
      "requirements": [
        "No, this lecture is for beginner."
      ],
      "description": "This is a very good video lecture for developing RPG games for iPhone.\nWe use Xcode to build iPhone game apps.\nIt is very easy to understand how to build games for iPhone.\nThe target of this lecture is beginner, which means that even if you don't have any experience for CODING, it is totally OK.\nThrough this lecture, you can build not only RPG games but also any types of games because this lecture contains all the information for developing games.\nIf you are interested in this lecture, take it and you will find you can make your own game.",
      "target_audience": [
        "Anyone who wants to learn iPhone Game Development."
      ]
    },
    {
      "title": "Learn Unity 3D for Absolute Beginners",
      "url": "https://www.udemy.com/course/learnunity3d/",
      "bio": "Learn How to Develop 3D Games from Scratch",
      "objectives": [],
      "course_content": {
        "Unity for Absolute Beginners": [
          "Unity 3D Introduction",
          "Unity 3D Fast Facts",
          "Unity Editor Introduction",
          "Scene View Navigation",
          "How to Import 3D Models",
          "Introduction to Unity Asset Store",
          "Adding a SkyBox",
          "Creating and Using Materials",
          "Importing and Using Textures",
          "Texture Size Best Practice Power of 2",
          "How to Add Water",
          "Introduction to Scripting",
          "How to Access GameObject in Script",
          "Introduction to Unity Sound",
          "Ten Quick Unity 3D IDE Tips",
          "Introduction to Physics",
          "Introduction to Collision Detection",
          "Introduction to Triggers",
          "Introduction to Prefabs",
          "Introduction to Animation",
          "Introduction to Animation Parameters",
          "Access Device Camera",
          "How to Get Keyboard Input",
          "Move a GameObject with Keyboard Keys",
          "How to Make the Camera Follow the Player",
          "Moving the Player Using Rigidbody Physics",
          "How to Move and Animate a 3D Character",
          "Difference Between Update and FixedUpdate",
          "OnEnable() and OnDisable() Functions",
          "Scenes Management",
          "How to Detect Mouse Click or Touch on a GameObject",
          "Intelligent Player Movement (Navigation & Path-finding, Navigation Mesh & Agent)",
          "Play Audio Through Multiple Scenes",
          "Audio Only Be Heard in a Certain Radius/Distance",
          "Audio Import Settings, WAV or MP3, Reduce Scene Load Time",
          "How to Save and Load Data",
          "Introduction to Lighting",
          "Assign Materials Using C# Code",
          "Introduction to Particle System",
          "How to Shoot Bullet & Kill Enemy",
          "Introduction to Unity UI",
          "How to Get Name of Button that was Clicked",
          "How to Open Url in Browser on Button Click",
          "Introduction to Terrain",
          "Rotate Camera with Mouse",
          "Move Camera with Mouse",
          "Drag & Drop Game Objects"
        ],
        "Create a Game from Scratch": [
          "Create a Game from Start",
          "Easiest way to Move, Rotate and Jump Player",
          "Make a Touch Screen Virtual Joystick from Scratch"
        ],
        "Quick Videos on Learning Unity 3D": [
          "How to Change Skybox through Code",
          "How to Walk Around a Sphere (Walk on Planet)",
          "How to Continue Firing when Button is Touched?",
          "How to Detect if Running on Mobile or Desktop",
          "How to Hide and Lock the Cursor",
          "How to Read an XML Document",
          "Check Internet Availability",
          "Rotate a Gameobject through Script",
          "LookAt To Only Rotate on Y Axis",
          "Rotate Camera with Mouse, Keyboard Keys and Accelerometer with Single Script",
          "Ask Users to Rate the App",
          "How to Make 3D Text Look Sharp and Smooth",
          "How to Prevent Mouse Click from Passing Through GUI Controls",
          "Unable to Merge Android Manifests Error",
          "Introduction to the Profiler and Quality Settings",
          "Improving Game Performance with Object Pooling",
          "How to Know if Audio Source Finished Playing",
          "Loading and Playing AudioClip at Runtime",
          "Play Audio After Certain Timer",
          "Where Unity Asset Store, Saves the Packages?",
          "How Do I Get the Name of the Active Scene?",
          "Find and Modify Android Manifest File",
          "Make Your Game More Beautiful in 10 Seconds",
          "How to Generate a Random Number",
          "Create Funny Voices for Your Game",
          "Get Royalty Free Music For Your Games",
          "The Execution Order of Events",
          "Tips for an Independent App Developer",
          "Switch Between Cameras",
          "Fog Effect",
          "Occlusion Culling - Improve Game Performance",
          "How to Vibrate Device?",
          "Ten Free Environment Assets",
          "Introduction to Paint 3D & Export the Model to Unity3D",
          "Simple Dynamic Clouds",
          "Skybox from 360 Panorama Image",
          "How to Make a Door Open and Close",
          "Camera or Screen Shake Effect",
          "How to Make Camera Follow Player Position & Rotation",
          "Coroutines in Unity",
          "How to make a Loading Bar & Load Scene Asynchronously",
          "How to Find Size of Game Object",
          "Play Video in Unity 3D",
          "How to Dynamically Create a Cube and Color it?",
          "Rotating Ceiling Fan through Script in Unity 3D",
          "Counter, Timer & Game Over Logic - C# Script",
          "Make an AR app in 5 minutes",
          "How to implement AdMob Banner Ad"
        ],
        "Theory Explanation": [
          "Ten Essential Interview Questions and Answers",
          "Execution Order of Event Functions",
          "Make Your Game Faster",
          "CPU Optimization"
        ],
        "Games Source Code - Learn by Yourself": [
          "Riddles Brain Teasers",
          "Endless Kitten Run",
          "Mushroom Conflict",
          "Maze Warrior",
          "3D Space Museum"
        ]
      },
      "requirements": [
        "Students Need to have beginner level understanding about C#"
      ],
      "description": "In this course. I will teach Unity 3D for absolute beginners. No prior knowledge of Unity is required in order to take this course. You will learn Unity from scratch. If you want to learn how to do 3D game programming in unity this course if for you.\nI will start teaching from scratch like how to download Unity IDE, how to use unity IDE and even what are the tips and tricks for using Unity IDE more efficiently. After that I will introduce you to 3D models and how you can manage those 3D models with scripting. At the end of this course you will get strong knowledge about unity 3d and you will be able to develop games in unity. Below are the some of the tasks that you will learn in this course.\nUnity 3D Introduction\nUnity Editor Introduction\nScene View Navigation\nImport 3D Models into Unity\nCreating and Using Materials in Unity\nImporting and Using Textures in Unity\nIntroduction to Unity Scripting\nIntroduction to Unity Sound\nIntroduction to Physics in Unity 3D\nIntroduction to Collision and Triggers\nIntroduction to Prefabs in Unity\nMoving the Player Using Rigidbody Physics\nIntroduction to Unity UI\nHow to Shoot Bullet & Kill Enemy In Unity3d\nIntroduction to AR augmented reality in Unity\nand many more. I will also show you most of the common tasks in unity and will provide you the source code as well. So if you want to learn how to make games in unity 3D start learning this course.",
      "target_audience": [
        "This course is for absolute beginners who have no knowledge about Unity 3D",
        "This course is for students who want to learn how to make game in Unity 3D from scratch"
      ]
    },
    {
      "title": "Unreal Engine Performance Optimization",
      "url": "https://www.udemy.com/course/unreal-engine-performance/",
      "bio": "Game Development",
      "objectives": [
        "Know what are call draws and bottlenecks",
        "know why we have get fps drops and lags",
        "know how to fix and reduce draw calls and bottlenecks",
        "Learn some tips and tricks to improve the game performance"
      ],
      "course_content": {
        "Introduction": [
          "Introduction To Game Graphics",
          "Introduction To Unreal Engine"
        ],
        "Performance Optimization": [
          "Unreal Engine",
          "Profiling In Unreal Engine",
          "Stat Commands",
          "GPU Profiling",
          "Fixing Bottlenecks and Optimize the scene",
          "Draw Calls",
          "Additional content: Tips and Tricks"
        ]
      },
      "requirements": [
        "basic knowledge of unreal engine interface",
        "no need to know blueprints"
      ],
      "description": "Enhance your Unreal Engine projects by mastering GPU optimization and effective draw call management! This specialized course is tailored for developers who want to boost the graphical performance of their games. You'll learn how to identify and fix GPU bottlenecks while minimizing draw calls to create smoother and more responsive gameplay experiences.\nWhat You’ll Learn:\nUnderstanding GPU Bottlenecks: Discover what GPU bottlenecks are, how they appear in your projects, and their effects on overall performance.\nProfiling GPU Performance: Make use of Unreal Engine’s profiling tools, such as GPU Visualizer and Stat GPU, to pinpoint performance issues related to the GPU.\nReducing Draw Calls: Explore best practices for cutting down on draw calls, including the efficient use of static and skeletal meshes, texture atlases, and instancing techniques.\nUnderstanding Performance Metrics: Grasp the key metrics for evaluating your project’s performance, including frame rates, draw calls, and memory usage.\nCase Studies: Review real-world examples where GPU bottlenecks were identified and resolved, offering practical insights you can apply to your projects.\nWho This Course Is For:\nGame developers aiming to enhance the graphical performance of their Unreal Engine projects.\nArtists and designers keen on grasping the technical aspects of GPU optimization.\nAnyone looking to improve their skills in managing draw calls and optimizing assets.\nPerfect for developers at any level.",
      "target_audience": [
        "unreal engine game developer",
        "Beginner game developer / Unreal engine game developer"
      ]
    },
    {
      "title": "Unity from Zero to Proficiency (intermediate)",
      "url": "https://www.udemy.com/course/unity-from-zero-to-proficiency-intermediate/",
      "bio": "A step-by-step guide to coding your first game in C# with Unity",
      "objectives": [
        "Code confidently in C# for Unity.",
        "Understand common coding mistakes and errors in Unity, and how to avoid them easily.",
        "Use Rigidbody physics to propel projectiles in the air.",
        "Instantiate, use and control Rigidbody objects from your script as well as explosions.",
        "Create a simple weapon management system.",
        "Create weapons (e.g., a gun and a grenade launcher), manage the collection of ammunition, and also implement a user interface to keep track of ammunition.",
        "Use Mecanim and NavMesh navigation to control an animated NPC that detects, follows, or shoot at the player.",
        "Create a fully functional game level with armed and intelligent NPCs looking for and attacking the player.",
        "Use Navmesh navigation so that the NPCs can find their way to the player.",
        "Use Mecanim to animate 3D characters.",
        "Control the animation and states of each NPC through your code.",
        "Create and use prefabs to speed-up your game creation process.",
        "Create and update a user interface.",
        "Create NPCs that can detect the player through vision."
      ],
      "course_content": {
        "Before You Start": [
          "Please download thhese files",
          "Code Solutions"
        ],
        "Adding Simple AI": [
          "Adding a 3rd Person Controller and Cameras",
          "Creating Prefabs for the Projectiles",
          "Instantiating Projectiles",
          "Propelling Projectiles",
          "Targeting the Player",
          "Creating Automatic Fire for the Robots",
          "Adding Explosions",
          "Adding Items to Collect",
          "Collecting Items (Part1)",
          "Collecting Items (Part 2)",
          "Placing the Player at the Start of the Game",
          "Fixing the Colliders for the Platforms",
          "Duplicating the Launcher and Adding Smoke",
          "Adding a User Interface and Completing the Game",
          "Checklist",
          "Quiz",
          "Challenge 1",
          "Challenge 2",
          "Please Leave a Review"
        ],
        "Creating and Managing Weapons": [
          "Introduction",
          "Adding Targets",
          "Casting a Ray for debugging purposes",
          "Casting a Ray and Detecting the Objects Ahead",
          "Firing a weapon",
          "Managing Ammunition",
          "Managing the NPC's Health (Part 1)",
          "Managing the NPC's Health (Part 2)",
          "Collecting Ammnunition (Part 1)",
          "Collecting Ammnunition (Part 2)",
          "Using a Weapon Management System (Part 1)",
          "Using a Weapon Management System (Part 2)",
          "Using a Weapon Management System (Part 3)",
          "Using a Weapon Management System (Part 4)",
          "Using a Weapon Management System (Part 5)",
          "Using a Weapon Management System (Part 6)",
          "Using a Weapon Management System (Part 7)",
          "Using a Weapon Management System (Part 8)",
          "Using a Weapon Management System (Part 9)",
          "Launching Grenades (Part 1)",
          "Launching Grenades (Part 2)",
          "Launching Grenades (Part 3)",
          "Launching Grenades (Part 4)",
          "Checklist",
          "Quiz",
          "Challenge 1",
          "Challenge 2"
        ],
        "Using Finite State Machines": [
          "Introduction",
          "Introduction to FSM",
          "Getting Started with Finite State Machines",
          "Accessing an FSM through C#",
          "Controlling an NPC with an Animator Controller",
          "Using Navmesnavigation and FSMs to control the Idle and Follow States",
          "Adding Sight with Raycasting",
          "Adding and Configuring a 3D Animated Character",
          "Adding and Configuring 3D Animations",
          "Creating Attacks from the NPC",
          "Reusing Scripts from the Previous Section (Part 1)",
          "Reusing Scripts from the Previous Section (Part 2)",
          "Reusing Scripts from the Previous Section (Part 3)",
          "Adding New States to the NPC (Part 1)",
          "Adding New States to the NPC (Part 2)",
          "Controlling the New States from a Script",
          "Returning to Idle After Being Hit",
          "Managing the Player's Health",
          "Ensuring that the NPC is Facing the Player When Shooting",
          "Adding a Gun to the NPC",
          "Displaying and Hiding the Gun",
          "Decreasing the Player's Number of Lives",
          "Reloading the Scene and Keeping the Player",
          "Adding Health Packs",
          "Adding a User Interface for the number of lives and the player's health",
          "Adding a Screen Flash (Part 1)",
          "Adding a Screen Flash (Part 2)",
          "Creating New Prefabs and Amending the Script to Display/Hide the Guns",
          "Checklist",
          "Let's Test Your Knowledge",
          "Challenge 1",
          "Challenge 2",
          "Please Leave a Review"
        ],
        "Putting it All Together": [
          "Introduction",
          "Setting-up the Environment",
          "Adding Prefabs",
          "Checking that the NPC's Guns are Displayed Properly",
          "Adding the Starting and Ending Screens",
          "Accessing Elemens Only When they are Present in the Scene",
          "Well Done!",
          "Bonus Lecture: FREE Book on Procedural Levels"
        ]
      },
      "requirements": [
        "This course assumes no prior knowledge on the part of the reader"
      ],
      "description": "In this course, you will become proficient in C# and some of Unity's core features, by creating a First person Shooter that includes a 3D environment, intelligent Non-Player Characters, and special effects.\nIn the first section of the course entitled \"Adding Simple AI, \", you will use C# for the creation of a simple launcher. You will learn to instantiate, use and control Rigidbody objects from your script as well as creating explosions.\n\n\nIn the second section entitled \"Creating and Managing Weapons \", you will learn to create and manage weapons using a simple inventory system. You will create an automatic gun and a grenade launcher, manage the collection of ammunition, and also implement a user interface to keep track of ammunition. In addition, you will also learn how to include these as prefabs, so that they can be reused in other levels, and to save you some coding too.\n\n\nIn the third section entitled \"Using Finite State Machines\",  you will get an in-depth explanation of how to create and use Finite State Machines (FSM) in Unity. You will create your FSM and use it to control the behavior and movement of an animated Non-Player Character. You will also learn how to employ NavMesh navigation so that your animated NPCs can navigate easily within the scene to either follow the player or go to a specific location. Finally, you will learn how to optimize your assets so that they can be reused seamlessly in other scenes with no or little changes.\n\n\nThe  last section called \"Putting it All Together\", makes it possible to combine the skills you have acquired in the previous chapters, and to reuse and combine all the objects that you have created so far (e.g., NPCs, weapons, inventory systems, ammunition, etc.), and the concepts (e.g., FSM, NavMesh, RigidBody components, User Interface, etc.) that you have mastered, to create a fully functional level.\nAfter completing this course, you will become proficient in the following areas:\nC# programming\nRigidbody Physics.\nObjects' Instantiation.\nAnimating 3D characters.\nArtificial Intelligence for Non-Player Characters\nMecanim and Finite-State Machines.\nPrefabs Creation.\nInventory System.\nRayCasting.\nCollision Detection.\nUser Interface Creation.\nPersistent Objects.",
      "target_audience": [
        "You are a beginners in Unity or programming.",
        "You would like to become proficient in the core functionalities offered by Unity.",
        "You would like to teach students or help your child to understand how to create games, using coding in C#",
        "You would like to start creating games.",
        "Although you may have had some prior exposure to Unity, you would like to delve more into Unity and understand its core functionalities in more detail."
      ]
    },
    {
      "title": "Create an HTML5 Canvas game JavaScript MouseClick Popper",
      "url": "https://www.udemy.com/course/html5-canvas-game/",
      "bio": "Build a JavaScript Canvas Game from Scratch Bubble Popping game HTML5 Canvas Step by step coding to create a game",
      "objectives": [
        "How to apply JavaScript to create a interactive web based game",
        "Explore how to write code to HTML5 Canvas with JavaScript",
        "How to create interactive dynamic web based games with JavaScript",
        "How to Create a HTML5 Canvas Game",
        "How to apply JavaScript to make a simple HTML5 canvas game",
        "Draw with JavaScript in HTML5 Canvas",
        "Apply Game design and logic to make gameplay",
        "How to plan and create a JavaScript game",
        "Creating games with JavaScript"
      ],
      "course_content": {
        "How to Create a Game with JavaScript Introduction": [
          "Introduction how to make a Bubble Popper GAME",
          "Code Editor Update",
          "How to write the code Setup HTML for Game",
          "Source Code Draw a Circle on canvas Code Example JavaScript",
          "How to draw bubbles on canvas Gradient Fill",
          "Create Gradient bubble effect HTML5 Canvas Drawing",
          "How to use JavaScript to Generate Bubbles and make game play",
          "Source Code",
          "How to move items within canvas Moving Bubbles HTML5 canvas",
          "Add animation to Game HTML5 Canvas Code Example",
          "How to make dynamic content for javascript game Making Bubbles More",
          "Create Moving Colourful bubbles on Canvas HTML Code Snippet",
          "How to track and make clicks on canvas Add Moue Clicks on Canvas",
          "Track mouse clicks on Canvas code snippet",
          "How to add Mouse Click Collision Detection",
          "HTML5 Collision detection on HTML5 Canvas Code Example",
          "How to use arrays for the game Multiple Array Collision Detection",
          "Multiple Array Collision Detection Canvas HTML5 Source Code",
          "How to add scoring to your JavaScript game Game Scoring Canvas",
          "Final Code Review Bubble Popper.",
          "Final Source Code"
        ],
        "Additional Learning resources and content for further learning": [
          "PDF Guides and resources for additional learning"
        ]
      },
      "requirements": [
        "Basic JavaScript knowledge",
        "Understanding of coding",
        "Editor and ability to write code",
        "Prior Coding Experience"
      ],
      "description": "Do you want to build a Bubble Popping Game - That is all done with JavaScript on HTML5 Canvas - No libraries no tricks no shortcuts all JavaScript on HTML5 Canvas.  Step by step walkthrough of how to create a game from scratch on an html page.  Then apply JavaScript to create the elements, create interaction, setup dynamic content and make animations.   Explore building Games with JavaScript see how a game can be created from scratch using HTML5 and JavaScript\nOne of KIND game using straight pure JavaScript to draw on canvas and add game controls and interactions.\nSource code included - BUILD YOUR OWN VERSION of THE GAME TODAY!!!! Custom code from start to finish -\nStep by step learning on how to create all the game functionality you need to complete a full functional game.\nProfessional instruction - taught by a developer with over 20 years experience - having developed over 100 web games.\nInstructor is ready to help you learn and answer any questions you may have.\nCourse covers all the core functions needed in a game\nHow to draw on HTML5 canvas with JavaScript\nMaking elements move\nEvent listeners for clicks on canvas\nCollision detection to check if objects are intersecting\nAdding game scoring and making it fun\nMovement and animation of objects\nSource code is included so you can build your own version of the game as you go through the lessons\nExplore how you can create a quick simple game using JavaScript and HTML5 canvas element\nLearn coding with FUN interactive game development - See what you can build with JavaScript!!!",
      "target_audience": [
        "Anyone who wants to create a fun simple game online",
        "Anyone who wants to practice creating games with JavaScript",
        "Anyone who is starting out with game development",
        "HTML5 game developers",
        "JavaScript developers",
        "Web Coders and web designers"
      ]
    },
    {
      "title": "Unity 3D - Create a Reusable UI System",
      "url": "https://www.udemy.com/course/unity-2017-create-a-reusable-ui-system/",
      "bio": "Create a UI System in Unity that is completely Re-usable using C#",
      "objectives": [],
      "course_content": {
        "Introduction": [
          "Introduction",
          "About the Instructor"
        ],
        "Stub in the UI Structure": [
          "Stub in the UI Structure - Part 1",
          "Stub in the UI Structure - Part 2"
        ],
        "Stub in the UI System Scripts": [
          "Stub in the Scripts - Part 1",
          "Logic for the UI System",
          "Logic for the UI Screen",
          "Logic for the Fader"
        ],
        "Completing the UI System": [
          "Setting up Screen Animations",
          "Hooking up Screen Switching",
          "Adding a New Screen Type",
          "Bonus Video: Creating a Menu Setup"
        ]
      },
      "requirements": [
        "You should be comfirtable creating Unity UI Elements",
        "You must have some experience with Unity and Unity C#",
        "A desire to look at ways in which to make your code more reusable"
      ],
      "description": "Have you had some experience with setting UI's inside of Unity? Would you like to know how to make a set of scripts that you can re-use between each project? Then this course is for you!\nThroughout each of the lectures we focus on how we can build a re-usable UI System. One in which you can extend and modify to your project needs.\n\nWe will walk through step by step and build up the components to make a fully modular UI system for Unity 2017!  By the end you will have a basic re-usable UI system to use for any unity project.  Plus you get full source code from the course.\nBest thing is, its free!",
      "target_audience": [
        "A beginner Unity Programmer looking to make their code more reusable",
        "Anyone who needs a Modular UI system to build UI's for games in Unity",
        "A unity User wanting to know more about efficient UI development practices"
      ]
    },
    {
      "title": "Learn How to Craft Game Effects using Houdini 15.5 & UE4.12",
      "url": "https://www.udemy.com/course/game-effects-using-houdini-ue4/",
      "bio": "A guide for experienced film vfx artists to start their journey into real time graphics.",
      "objectives": [],
      "course_content": {
        "Start Here": [
          "Introduction",
          "Example Files"
        ],
        "Real Time Visual Effects using Houdini and UE4": [
          "How do sprite sheets work in Unreal Engine?",
          "Creating a sprite sheet in Houdini",
          "A basic \"power-up\" particle in Unreal Engine",
          "Creating Geometry and Animating in Houdini",
          "Vector Math Basics",
          "Exporting Vertex Animation From Houdini",
          "Using Vertex Animation in Unreal Engine"
        ],
        "Thank You For Watching": [
          "Outro"
        ]
      },
      "requirements": [
        "The audience should be familiar with 3D Visual Effects workflows. This means understanding basic math, and concepts such as UVs, Normals, and node based workflows.",
        "Basic familiarity with Houdini is required to get the most out of the presentation."
      ],
      "description": "UPDATE: While I certainly appreciate that people are still regularly signing up and learning from this content, I'd like to make it clear that this is legacy content that was published in 2016 using versions of Houdini and Unreal which are not the current industry standards used today. I'm leaving the course available as there are still insights (particularly in the explanation of how vertex animation works) that are beneficial to dig into for an expanded understanding of how to work with 3D assets. At the time that this was made, it was not yet a popular workflow. The expected way that an artist might carry out this work today has changed - though understanding the inner workings illustrated here may still be beneficial.\n\nCourse Description:\n\nThis 45 Minute Lecture was originally given to the Vancouver Houdini User Group in August 2016. It is a talk that was designed for an audience familiar with feature film visual effects workflows, specifically those which use Houdini. The goal is to increase awareness of limitations in real-time game environments, and to help film makers take steps towards transitioning into interactive media.\nFeature film effects artists are typically used to working with millions or particles, polygons, and voxels. While it's acceptable for a render farm to chew through heavy data over the course of several hours for film; current game platforms are not designed with this kind of geometry in mind. It's up to the effects artist to understand this and produce visuals that are as light-weight as they are beautiful so that game engines can spend their efforts on more than just the visuals.\nThis is not designed to be a step-by-step tutorial for making a \"pretty\" effect, but rather a general purpose guide geared at introducing a broad topic. If you are interested in transitioning from film to games, this talk may be useful as a primer as we'll introduce concepts such as: sprite sheets, power of two dimensions, texture packing, particle trimming, letting the GPU handle transformations, and vertex animation. Topics are introduced in a way that should build upon concepts that are already familiar to those with training in the motion picture discipline. All examples in this lecture are given using Houdini 15.5.523 and Unreal Engine 4.12.5.\nThe example files may be downloaded and examined at the student's own leisure.",
      "target_audience": [
        "Experienced visual effects artists who have worked in a professional film environment.",
        "Those who are looking for a transition from film to video game visual effects.",
        "Those who are looking for a broad introduction without the slow step-by-step procedures typically offered in tutorials."
      ]
    },
    {
      "title": "Make a mobile video game in 30 minutes",
      "url": "https://www.udemy.com/course/make-a-mobile-video-game-in-30-minutes/",
      "bio": "Make a complete 2D mobile game in just 30 minutes using Fusion 2.5 free edition!",
      "objectives": [],
      "course_content": {
        "Welcome!": [
          "Welcome!"
        ],
        "Introduction": [
          "Introduction"
        ],
        "Project setup": [
          "Setup the Project properties and level grid"
        ],
        "Main Menu Interface setup": [
          "Setup"
        ],
        "Game Interface Setup": [
          "Game Interface Setup"
        ],
        "High Score Interface Setup": [
          "High Score Interface Setup"
        ],
        "Main Menu and Game Events Setup": [
          "Main Menu Events Setup"
        ],
        "High Score Events Setup": [
          "High Score Events Setup"
        ],
        "Exporting to Itch": [
          "Export to itch.io"
        ],
        "Testing the game on mobile phones": [
          "Testing the game on mobile phones"
        ]
      },
      "requirements": [
        "Free edition of fusion 2.5 for windows"
      ],
      "description": "Learn how to make your own 2D video game for mobile phones using fusion 2.5's no-code platform.\n\n\nThis course will teach you how to:\nCreate an HTML5 game project using fusion 2.5\nImport graphics to create User interfaces in fusion 2.5\nUse events to create game functionality without having to code\nExport your game and host it on itch so you can play it from any HTML5 enabled device (iPhone/Android)",
      "target_audience": [
        "Beginner game developers",
        "College students interested in game design",
        "People who want to make a free game"
      ]
    },
    {
      "title": "Unity 3D Car Racing Game Masterclass",
      "url": "https://www.udemy.com/course/unity-3d-car-racing-game-masterclass/",
      "bio": "Build a 3D car racing game using Unity & C#. Includes coding AI self-driving cars, hot pursuit mode, and more!",
      "objectives": [
        "Develop SELF-DRIVING AI CARS that race the player",
        "Build a HOT PURSUIT MODE where AI police cars chase the player car",
        "Implement CAR CUSTOMIZATION logic with a garage feature",
        "Create SAVE + LOAD game slots using SCRIPTABLE OBJECTS",
        "Toggle between the EXTERIOR and INTERIOR car views during a race",
        "Design a fully functioning racing UI including a LEADERBOARD, SPEEDOMETER, and MINIMAP",
        "Bolster your knowledge of DESIGN PATTERNS and ALGORITHMS and implement them hands-on",
        "Master creating 3D ANIMATIONS, CINEMATOGRAPHY, SPECIAL EFFECTS, and more",
        "Implement a BREAKABLE OBJECTS system in the game world to create engaging and immersive game levels",
        "Includes advanced material and lighting design"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Reviewing the Game Design Document (GDD)",
          "A look at the finished game"
        ],
        "Program Installation and Setup": [
          "Section Introduction",
          "Setup & Install Unity on Mac",
          "Setup & Install Unity on Windows",
          "Downloading & Importing the Game Assets",
          "Staying Organized - Project Setup",
          "Section Summary"
        ],
        "Car Driving, Physics, and MVC Logic": [
          "Section Introduction",
          "Model View Controller (MVC) Design Pattern",
          "Coding the Car Model Script (the \"M\")",
          "Coding the Car View Script (the \"V\")",
          "Coding the Car Controller Script (the \"C\")",
          "Unity Car Physics Components",
          "Assembling the Muscle Car",
          "Assembling the Sports Car",
          "Assembling the Luxury Car",
          "Car Driving & Physics",
          "Car Driving, Physics, and MVC Logic",
          "Answers and Explanations",
          "Section Summary"
        ],
        "Scene Navigation System": [
          "Section Introduction",
          "Singleton Design Pattern",
          "Stack Data Structure",
          "Navigation Manager",
          "Using the Scene Manager's sceneLoaded Event",
          "Implementing Back Button Logic",
          "Dictionary Data Structure",
          "Passing Data Between Scenes",
          "Scene Navigation System",
          "Answers and Explanations",
          "Section Summary"
        ],
        "Welcome Screen": [
          "Section Introduction",
          "Creating a Reusable Menu Header Prefab",
          "Creating a Reusable User Data Panel Prefab",
          "Creating a Reusable Menu Button Prefab",
          "High Tech Background Animation",
          "Car Model, Lighting, and Headlight Flare Effect",
          "Coding the Start Menu Controller Script",
          "Welcome Screen",
          "Answers and Explanations",
          "Section Summary"
        ],
        "Save & Load Game Functionality": [
          "Section Introduction",
          "Ways to Save Game Data",
          "Creating the Modal Base Class",
          "Creating a Save Slot Modal",
          "Editor Scripting - Creating a Game Data Editor",
          "Game Data Scriptable Object",
          "Save, Load & Reset Game Data",
          "Save & Load Game Functionality",
          "Answers and Explanations",
          "Section Summary"
        ],
        "Formatted Text - Generic, Stylizable Text Classes": [
          "Section Introduction",
          "Abstract Classes in C#",
          "Formatted Text - our Generic Abstract Class",
          "Date Text - to Display Dates",
          "Time Text - to Display Times",
          "Money Text - to Display In-Game Currency",
          "Lap Text - to Display Laps Completed in the Race",
          "Place Text - to Display What Place a Car is in",
          "Percent Text - to Display a Percentage",
          "Formatted Text - Generic, Stylizable Text Classes",
          "Answers and Explanations",
          "Section Summary"
        ],
        "In-Game Modals and Pop-Ups": [
          "Section Introduction",
          "What is a Modal?",
          "One Button Modal",
          "Enter Username Modal",
          "Finished Race Modal",
          "Two Button Modal",
          "In-Game Modals and Pop-Ups",
          "Answers and Explanations",
          "Section Summary"
        ],
        "Choose a Car Screen": [
          "Section Introduction",
          "ICarousel Interface",
          "Car Carousel Script",
          "Rotate 360 Script",
          "Choose a Car Script",
          "Assembling the Choose A Car Screen",
          "Choose a Car Screen",
          "Answers and Explanations",
          "Section Summary"
        ],
        "Main Menu": [
          "Section Introduction",
          "Coding the Main Menu Controller Script",
          "Assembling the Main Menu",
          "Main Menu",
          "Answers and Explanations",
          "Section Summary"
        ]
      },
      "requirements": [
        "A Mac, Windows, or Linux computer that can run Unity",
        "A basic knowledge of Unity and C#",
        "Note: All software and programs for this course are FREE (Mixamo requires email to sign up)"
      ],
      "description": "This course will walk you through building an entire video game hands-on, and will take you step-by-step through the game development process.\n\n\nDid you grow up playing car racing games like Need For Speed and Gran Turismo? Do you want to learn how to build car racing games in Unity using C# code? Growing up, racing games always fascinated me. I was intrigued by how the in-game physics was so realistic and how they simulated driving in the game so accurately. This course will teach you how to build a full racing game in Unity, even if you are a beginner. By the end of this course, you will have a full car racing game that you built in Unity from the ground up.\n\n\nAs we build this course, you are going to gain a wealth of knowledge in the different areas of the Unity game engine. Some of the core game development techniques this course will teach you are:\nUsing C# logic to create SELF-DRIVING AI CARS driving around the track and competing against the player in races.\nImplementing a HOT PURSUIT MODE where police cars chase the player.\nWorking with Unity's Physics system and understanding how to use components like WHEEL COLLIDERS and Rigidbodies to simulate vehicle movement and interaction with the environment.\nUtilizing Unity's UI system to build a MINI-MAP and other racing heads up displays like a speedometer.\nWriting reusable code that can be applied to several different sections of the game. Object-oriented C# scripting techniques for writing CLEAN, REUSABLE CODE.\nLearn about the different UI components and how they can be used together to build IN-GAME MENUS and selection screens that efficiently and intuitively respond to user input.\nTurn your ideas into code using C# with Unity and build up a set of skills that you can use to build other CAR RACING GAMES and showcase them in your portfolio.\n\n\nBy the end of this course, you will have a full game project you developed from the ground up! You will also have some more C# tips and tricks that you can add to your arsenal.\n\n\nIf you want to learn game development or are aspiring to build a career in the game industry, then this course is for you!",
      "target_audience": [
        "Anyone that wants to learn to build car racing games in Unity",
        "Game development students and aspiring game developers",
        "Anyone with basic to mid-level Unity knowledge that wants to level up"
      ]
    },
    {
      "title": "Unreal Engine: Creating a ChatGPT / Dall-E Plugin",
      "url": "https://www.udemy.com/course/unreal-engine-creating-a-chatgpt-dalle-plugin/",
      "bio": "Learn how to create an OpenAI ChatGPT and Dall-E plugin directly in the Unreal Engine!",
      "objectives": [
        "How to create a custom plugin in Unreal Engine",
        "How to write a Python script to call a ChatGPT prompt",
        "How to write a Python script to call a Dall-E prompt",
        "How to script the Unreal Editor to call custom commands",
        "How to design and spawn a custom Unreal Editor window"
      ],
      "course_content": {
        "Introduction": [
          "Project Primer"
        ],
        "Set Up": [
          "Setting Up Our Project",
          "Creating the Unreal Plugin",
          "Creating an OpenAI Account"
        ],
        "ChatGPT": [
          "Creating the Python Script",
          "Widget Design",
          "Widget Blueprints"
        ],
        "Dall-E": [
          "Creating the Python Script",
          "Widget Design",
          "Widget Blueprints",
          "Combining the Widgets"
        ],
        "Conclusion": [
          "Conclusion",
          "BONUS LESSON: Unreal Engine - Advanced Widgets for UI"
        ]
      },
      "requirements": [
        "Recommended: Basic computer knowledge",
        "Recommended: An understanding of basic navigation for the Unreal Engine",
        "Recommended: A basic understanding of Unreal widgets",
        "Recommended: Some Python scripting experience",
        "Recommended: A credit card to connect to your OpenAI account",
        "Recommended: Unreal Engine 5.1 or higher installed",
        "Recommended: Python compatible IDE installed (Visual Studio, VSCode, etc.)",
        "Recommended: Desktop PC with Windows 7 (or later) 64-bit - OR - a Mac with Mac OS X 10.9.2 or later",
        "Recommended: DirectX 11 compatible video card",
        "Recommended: Quad-core Intel or AMD processor",
        "Recommended: 8 GB RAM"
      ],
      "description": "The future is here.\n\n\nNatural Language Processing and Generative AI have taken the world by storm, enabling automation, code generation, and image generation with a simple text prompt. ChatGPT has allowed users to generate an unlimited amount of content, from code generation, to creative writing, to email and web site templates, and so much more! Dall-E has allowed everyone, no matter their artistic skill, to generate art and design as if they were a professional artist!\n\n\nIn this course, you will learn how to create a custom Unreal Editor plugin which adds ChatGPT and Dall-E functionality to the Unreal Engine! At the end of this course, you will have created an Unreal Engine plugin, ported ChatGPT and Dall-E into the editor using Python, and created a full editor utility widget menu to generate ChatGPT responses and Dall-E imagery directly in the Editor! The imagery you generate in Dall-E will also be imported and saved right in the Content Browser!\n\n\nThis is an intermediate course for those who already know the basics of Unreal Engine. We will not be going over how to download and install the Engine or general navigation of the Editor. We will also not be discussing the principles of programming. However, you will be able to follow along in every step of the creation of a fully functional ChatGPT and Dall-E plugin in Unreal Engine!",
      "target_audience": [
        "Students who want to learn how to create plugins for the Unreal Engine",
        "Students interested in generative AI such as ChatGPT and Dall-E",
        "Students interested in using Python with the Unreal Engine",
        "Students interested in scripting the Unreal Editor workspace"
      ]
    },
    {
      "title": "Unreal Engine 4 FPS Tutorial",
      "url": "https://www.udemy.com/course/unreal-engine-4-fps-tutorial/",
      "bio": "How to make a Basic FPS game in Unreal Engine 4 from Scratch!",
      "objectives": [],
      "course_content": {
        "Making the First Person character": [
          "Opening the Course",
          "Introduction",
          "Making The Third Person into First Person",
          "Asset Migration",
          "Adding In Gun",
          "Making Gun Shoot",
          "Making Night Time Scene",
          "Making Flashlight",
          "Flashlight Functions",
          "Out-Tro",
          "Third Person to First Person."
        ],
        "First Person Character Variables": [
          "Intro",
          "Player Health",
          "Player Respawning 1-2",
          "Player Respawning 2-2",
          "Player Thirst",
          "Player Sprint",
          "Player Sprint Functions",
          "Out-Tro",
          "First Person Character Variables."
        ],
        "Player Pick-Ups": [
          "Inrto",
          "Pick Up Materials",
          "Health Pick Up",
          "Thirst Pick Up",
          "Flashlight Battery Pick up",
          "Furthering Our Pick Ups",
          "Out-Tro",
          "Pick-Ups"
        ],
        "The Selling System": [
          "Intro",
          "More Vairables",
          "Selling",
          "Setting Pick Ups in Map",
          "Out-Tro",
          "Selling System"
        ],
        "Setting up the HUD": [
          "Intro",
          "Setting up HUD + Health",
          "HUD Thirst",
          "HUD Stamina",
          "HUD Flashlight Battery",
          "HUD Lives",
          "HUD Point System",
          "HUD Gold + Silver",
          "Out-Tro",
          "Setting Up the HUD"
        ],
        "Making the Ai Enemy": [
          "Intro",
          "Building the Ai",
          "Ai Roaming",
          "Ai Health + Death",
          "Different Ai Types",
          "Killing the Ai",
          "Ai Spawning",
          "Out-Tro",
          "Ai Enemy"
        ]
      },
      "requirements": [
        "Problem Solving Skills",
        "Creativity!",
        "Have fun making what you want!"
      ],
      "description": "This Course is So Amazing! For the first time on Udemy, There is a Course that shows you how to make a True First Person Shooter from Scratch. From Start to Finish!! In Unreal Engine 4, The Free to use Game development platform used by AAA game developers!\nI will start of super simple so you don't really need prior experience! With my online lectures, you will be on the path of achieving amazing results, along with your own creativity. You will lean how to use the Blueprint system to your advantage making games. if you're a complete beginner, I will teach you all the Blueprinting principles you will need!\nYou will enjoy learning with me! Get this Course, sit back, relax and lets make a game together!!",
      "target_audience": [
        "Someone confident with using a computer.",
        "Beginners who are willing to work hard at learning modern game development.",
        "Existing Unreal Engine 4 developers who want to learn new development tricks."
      ]
    },
    {
      "title": "Blueprints in Unreal Engine 5 for Beginners (2025+)",
      "url": "https://www.udemy.com/course/blueprints-unreal-engine-5-beginners/",
      "bio": "Create Video Games & Interactive Media using Unreal Engine's visual scripting: Blueprints",
      "objectives": [
        "Navigate the Blueprint editor and understand components",
        "Create your first interactive objects that respond to player input",
        "Build game mechanics like bomb planting, spray painting, and color-changing collisions",
        "Use events, variables, and functions to control gameplay",
        "Implement hit detection with Line Trace for shooting mechanics",
        "Debug problems like a pro using proven techniques"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Blueprint Interface"
        ],
        "Blueprint Fundamentals": [
          "Events in Unreal Engine",
          "Controllable Blueprints - Pawn and Character Classes",
          "Exploring Level Blueprint"
        ],
        "Game Mechanics and Dynamic Simulations": [
          "Simple Game Mechanics - Bomb Planting System",
          "Hit Detection with Line Trace",
          "Dynamic Simulation Events"
        ],
        "Blueprint Organization": [
          "Blueprint Functions - Reusable Code",
          "Blueprint Organization Best Practices",
          "Final Projects and Conclusion"
        ]
      },
      "requirements": [
        "Basic knowledge of the user interface of Unreal Engine 5"
      ],
      "description": "Learn Unreal Engine Blueprint visual scripting from zero and bring your static levels to life. This beginner-friendly course teaches you how to create game mechanics and interactive systems without writing code. Through hands-on projects, you'll understand the logic behind Blueprints – not just copy what you see.\nWhat You'll Learn:\nNavigate the Blueprint editor and understand components\nCreate your first interactive objects that respond to player input\nBuild game mechanics like bomb planting, spray painting, and color-changing collisions\nUse events, variables, and functions to control gameplay\nImplement hit detection with Line Trace for shooting mechanics\nOrganize messy Blueprints into clean, professional graphs\nDebug problems like a pro using proven techniques\nWhy Take This Class: Every dynamic element in Unreal Engine – whether it's a door that opens, an enemy that attacks, or a light that flickers – requires Blueprints. Without them, your beautiful levels remain static museums. This course transforms you from someone stuck with lifeless scenes into someone who can create anything interactive.\n\n\nWho This Is For: Perfect for complete beginners who've opened Unreal Engine but feel lost when trying to make things actually do something. No programming experience needed – if you can understand \"when this happens, do that,\" you can master Blueprints.\nWhat You'll Build:\nRotating and color-changing objects\nControllable characters and pawns\nInteractive lighting systems\nSpray paint graffiti mechanic\nPhysics-based bowling pins\nFinal Project: Randomized platform game OR dynamic forest scene for film renders\nWhat You Need:\nUnreal Engine 5 (free)\nBasic computer skills\nDesire to make interactive experiences\nIncluded Resources:\nAll project files with commented Blueprints\nTwo complete final projects with solutions\nStop staring at static scenes. Start creating interactive worlds. Join thousands of students who've unlocked the power of Unreal Engine Blueprints.",
      "target_audience": [
        "Beginner Game Developer",
        "3D artists that use Unreal Engine 5",
        "Digital Video Creators"
      ]
    },
    {
      "title": "Learn to Build Mobile Games using Corona SDK",
      "url": "https://www.udemy.com/course/learn-to-build-mobile-games-using-corona-sdk/",
      "bio": "A Complete Course in Mobile Game Development using Corona",
      "objectives": [],
      "course_content": {
        "Introduction to Game Programming using Corona": [
          "Introduction",
          "Introduction to Corona SDK",
          "Setting up the SDK",
          "Corona Applications",
          "Corona Sample Applications",
          "Editing and Applications",
          "Corona Editor",
          "Hello World",
          "Corona Resources"
        ],
        "Intro to Lua Programming v2": [
          "Intro to Lua",
          "Lua Syntax and Conventions",
          "Variables",
          "Expressions",
          "Statements",
          "Functions",
          "Lua Data Types & Scope",
          "Lua API"
        ],
        "Basic Corona": [
          "Display Objects",
          "Display Groups",
          "Events And Listeners",
          "Widgets",
          "Timers",
          "Transitions"
        ],
        "Advanced Corona": [
          "Animation",
          "Audio",
          "Media",
          "Physics",
          "Serialization",
          "Menu States"
        ],
        "Game In Corona": [
          "Gameplay",
          "Project Setup",
          "Game Objects",
          "Controls",
          "Timer",
          "Score",
          "Game Over",
          "Final"
        ],
        "Course Summary": [
          "Summary",
          "Bonus Lecture: More Interesting Stuff, Offers and Discounts"
        ]
      },
      "requirements": [
        "Basic programming knowledge."
      ],
      "description": "Corona SDK is powerful game development kit developed by Corana labs. This powerful cross platform engine allows game development for iPhone, iPad and Android mobile devices. It uses Lua as the principal scripting language. It is easy to use and allows quick turnaround time for games. It is one of the preferred gaming engines for Indie mobile developers.\nWe have designed this course as one comprehensive tutorial for mastering game development using Corona SDK. The course starts with basic introduction to the engine and will help you get use to the editor. The course will then teach you the important lua scripting concepts. You will get to know all the important features and APIs of the SDK before using it to build a real game.\nThis course is a shortcut to get you up and ready for professional game development for mobility systems.",
      "target_audience": [
        "Mobile Game Developers and Smartphone Programmers"
      ]
    },
    {
      "title": "Build Online Multiplayer 2D RPG Game With Unity And Photon",
      "url": "https://www.udemy.com/course/build-online-multiplayer-2d-rpg-game-with-unity-and-photon/",
      "bio": "Build Online Multiplayer 2D RPG Game With Unity And Photon",
      "objectives": [
        "Learn C#,a modern Programming Language",
        "Understanding the capabilities in 2D development in Unity",
        "Gain an understanding of the game developement progress",
        "Gain understanding of Multiplayer game function"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Photon Setup",
          "Unity Project Setup",
          "Tiled Map"
        ],
        "Network Manager": [
          "Network Manager part 1",
          "Network Manager part 2"
        ],
        "Main Menu": [
          "Main menu Part 1",
          "Main Menu Part 2",
          "Main Menu Part 3",
          "Main Menu Script Part 1",
          "Main Menu Script Part 2",
          "lobby Scripting",
          "Lobby Browser Scripting"
        ],
        "Player": [
          "Player Spawn Point",
          "Player Controller Part 1",
          "Player Attack Animation",
          "Player controller Script part 1",
          "Player Controller Script Part 2",
          "Player Controller Script Part 3"
        ],
        "Camera Follow Player": [
          "Camera Controller"
        ],
        "Health bar": [
          "Health Bar UI",
          "Health bar Script",
          "Health bar Playername fixed"
        ],
        "Chat Box": [
          "Chat Box UI",
          "Chat Box Script",
          "Bug fixed"
        ],
        "Pickup": [
          "Gold UI",
          "Gold/Health Pickup"
        ],
        "Enemy": [
          "Create Enemy",
          "Enemy Script part 1",
          "Enemy Script Part 2",
          "Enemy Spawn Point"
        ]
      },
      "requirements": [
        "mac or pc"
      ],
      "description": "Welcome to the Course!\nyou will learn how to create Tilemap\nWe are going to be creating a multiplayer RPG inside of Unity, using Photon.\nPhoton Unity Networking is a popular networking framework for Unity.\nWe will be creating a player controller, allowing you to move around and attack enemies.\nPickups will grant the player either gold or health.\nThere will be a chat box, allowing players to talk to each other.\nWe’ll be making a lobby system, allowing players to find games to connect up with each other.\nThis will be done using Unity’s UI system.\nLet’s have a look at what we learned and made.\nWe learned how to use Photon inside of Unity We created a player controller which can move, attack, get gold and heal Pickups which can give the player health or gold A chat box which can allow players to talk to each other A lobby system for players to team up together before entering the game This was all done using Unity’s UI system.\nthis course has been designed to be easy understanding to everyone so whether you are beginner or advance  programmer\nLet’s get started  on the project today level up your skill with this course!",
      "target_audience": [
        "Beginner"
      ]
    },
    {
      "title": "Unreal Engine Practice Test",
      "url": "https://www.udemy.com/course/unreal-engine-practice-test/",
      "bio": "For All Users, Exam, Unreal Engine",
      "objectives": [],
      "course_content": {
        "Practice Tests": []
      },
      "requirements": [],
      "description": "Unreal Engine Practice Test for All Skill Levels\nAre you ready to challenge and improve your Unreal Engine skills? Our practice test, featuring carefully crafted questions, is designed for users at all experience levels, from beginners to advanced game developers. This test will help you evaluate your current understanding of Unreal Engine and pinpoint areas for improvement.\nOur Unreal Engine practice test covers a wide range of topics, providing a comprehensive overview of key concepts and functionalities. The questions are categorized into sections focusing on fundamental game development principles, intermediate blueprint scripting, and advanced 3D rendering and physics systems. This well-rounded test will give you the confidence to create, design, and deploy immersive games using Unreal Engine.\nKey Features:\nQuestions spanning all levels of expertise, offering a challenging and engaging experience for users at any skill level.\nTopics covering areas such as Unreal Engine interface, blueprint visual scripting, C++ programming, level design, lighting, materials, animations, physics-based rendering, and AI programming.\nDetailed explanations for each question, helping you understand the correct answers and gain deeper insights into Unreal Engine's best practices and capabilities.\nA progress tracking system to monitor your improvements and focus your efforts where needed.\nUnlimited retakes, allowing you to continuously practice and refine your Unreal Engine skills.\nWhether you're a beginner learning the fundamentals, an intermediate user expanding your game development skills, or an experienced developer looking to test your expertise, our Unreal Engine practice test is designed to meet your needs. With a wide variety of questions and in-depth explanations, this practice test is the perfect tool to help you master Unreal Engine and bring your game development projects to life.",
      "target_audience": [
        "For All Users"
      ]
    },
    {
      "title": "Introduction to Shaders in Unity3D with Shader Graph",
      "url": "https://www.udemy.com/course/introduction-to-shaders-in-unity3d-with-shader-graph/",
      "bio": "Shader Graph or: How I Learned to Stop Worrying and Create Stunning Visual Effects in Unity3D",
      "objectives": [],
      "course_content": {
        "Introduction": [
          "What Are Shaders?"
        ],
        "Unlit Shaders": [
          "Hello Shader",
          "The Only Reason for the Existence of A Shader",
          "Drawing A Line",
          "Adding Properties",
          "Assignment-Drawing A Plus Sign",
          "Solution-Drawing A Plus Sign",
          "Sub-Graphs",
          "Drawing A Circle",
          "Assignment-Circle Position",
          "Solution-Circle Position",
          "Assignment-Background Color",
          "Solution-Background Color",
          "Object Space vs World Space",
          "Texture Mapping",
          "Creating A Gradient",
          "Transparency and Ghost Shader",
          "Time Node and UV Scrolling",
          "Simple Holographic Shader",
          "Vertex Manipulation",
          "Assignment-Wind Effect Shader",
          "Solution-Wind Effect Shader"
        ],
        "Physically Based Rendering": [
          "Creating a Shader with PBR Node",
          "Normal Vector and Dot Product",
          "Normal Mapping",
          "Glow Effect and Changing Properties by C# Script"
        ],
        "The Earth Shader": [
          "Introduction",
          "Albedo and Normal Map",
          "Specular Map",
          "City Lights",
          "Clouds",
          "Final Touches"
        ],
        "References": [
          "References"
        ]
      },
      "requirements": [
        "Intermediate knowledge of Unity3D is a must",
        "A computer which Unity3D 2019.1 or above is installed"
      ],
      "description": "Hello! Welcome to the world of shaders!\n\n\nThis is not only a course on shader graph, this is also an introduction to shader development. Shader development was not so easy in the past. You had to learn how to write shader code and also need mathematical skills. Most indie game developers omit it up to an advanced level. But today this is changed with shader graph.\n\n\nIn this course, we will start from the basics and create complex shaders in later chapters with shader graph. We will also learn several concepts on graphics programming and at the end of the course you will be comfortable to create your own shaders.\n\n\nComplex Shaders which we are going to create are:\n*Ghost Shader\n*Simple Hologram Shader\n*Wind Effect Shader\n*PBR Shader\n*Glowing Effect Shader\n*The Earth Shader\n*Code Rain Effect(Matrix) Shader(Coming soon)\n*Teleport Shader(Coming Soon)\n*Snow Shader(Coming Soon)",
      "target_audience": [
        "Game developers who want to learn shader development",
        "Technical artists"
      ]
    },
    {
      "title": "Make 3D and Virtual Reality Games with Unity",
      "url": "https://www.udemy.com/course/make-3d-and-virtual-reality-games-with-unity/",
      "bio": "NEW! Game development for absolute beginners. No vr headset required.",
      "objectives": [
        "How to place and transform different world geometries",
        "How to add details, effects, and lighting",
        "How to create and apply textures, layers, and materials",
        "How to navigate Unity"
      ],
      "course_content": {
        "Course Overview": [
          "Course Overview",
          "Source Files"
        ],
        "Mammoth Interactive Courses Introduction": [
          "About Mammoth Interactive",
          "How To Learn Online Effectively"
        ],
        "Build a 3D Skydiving Game": [
          "Project Preview - 3D VR Skydiving Game",
          "Install Unity",
          "Build A New Unity Project",
          "How To Debug - Build 3D And VR Games In Unity",
          "Source Files"
        ],
        "Build Landscape and Target": [
          "Build The Landscape",
          "Build A Target",
          "Source Files"
        ],
        "Drop Player from Sky": [
          "Make The Camera Point Downward",
          "Move The Player",
          "Enable User Input To Move Player",
          "Enable WASD Keys For User Input",
          "Check If The Player Reached The Target",
          "Source Files"
        ],
        "04 Restart Game": [
          "01 Stop And Restart Game",
          "02 Build A Restart Timer",
          "03 Move Target To Random Position",
          "Source Files"
        ],
        "05 Add Game Instructions": [
          "01 Build A Text Overlay",
          "02 Change Text Programmatically",
          "Source Files"
        ],
        "06 Add Game Art (70 Models Included)": [
          "01 Add 3D Landscape Models",
          "02 Add 3D Target Model",
          "Source Files"
        ],
        "07 Implement VR for the 3D Skydiver": [
          "01 Install XR Packages",
          "02 Change Active Input Handling",
          "03 Add Default Input Actions",
          "04 Add XR Device Simulator",
          "05 Control Virtual Reality Camera With User Input",
          "Source Files"
        ],
        "01 Build a 3D Zombie First Person Shooter": [
          "00 Project Preview - 3D First Person Shooter Zombie Game",
          "01 Build A New Unity Project",
          "Source Files"
        ]
      },
      "requirements": [
        "No necessary experience required"
      ],
      "description": "This course teaches the core skills for 3D Game Development in Unity. Once you've completed this course you can take your skills even further with our Advanced Unity 3D Game Development course\nThis Unity Game Development training course from Infinite Skills introduces you to the fundamentals of game design with the Unity engine. This tutorial is designed with the absolute beginner in mind; no prior experience with Unity is required.\n\nYou will start by exploring the Unity interface, and learning how to manipulate objects in the editor. Throughout this video training course, you will be putting what you learn to immediate practice by creating an actual game - Coconut Hut. Robert teaches you how to import assets for the game, apply physics to objects in the game, and how to combine assets to create complex objects. You will implement behaviours, learn to develop Boo, JavaScript and C# scripts, add animation and manage lighting for the game. Finally you will render and build the game for distribution.\n\nOnce you have completed this video tutorial for Game Development with Unity, you will have a strong grasp of the fundamentals needed to build a functional game using the Unity engine. Working files are included, allowing you to follow along with the author throughout the lessons.",
      "target_audience": [
        "Complete beginners with no prior experience",
        "Game programmers who want to get into level design",
        "Experienced game developers who want to brush up their skills"
      ]
    },
    {
      "title": "Complete Gaming Masterclass: Learn Unreal and GameMaker",
      "url": "https://www.udemy.com/course/unrealgamemaker/",
      "bio": "*Includes FREE book! Build 30 VR games in Unity3D and 20 games in GameMaker. Tutorials for beginner game developers.",
      "objectives": [
        "Learn to code in C++ in Unreal",
        "Make 6 games in Unreal and 20 games in GameMaker"
      ],
      "course_content": {
        "Unreal 01 - Overview": [
          "01 - Introduction",
          "02 - Setting up the project",
          "03 - Adding a camera",
          "04 - Hero code",
          "05 - Hero visual",
          "06 - Adding a coin",
          "07 - Player collision box",
          "08 - Collision box position",
          "09 - Making a simple interface",
          "10 - Widget code",
          "11 - Game mode",
          "12 - Showing the interface",
          "13 - Collecting all coins",
          "14 - Restarting the game"
        ],
        "Unreal 02 - Shooter": [
          "01 - Introduction",
          "02 - Setting up Unreal",
          "03 - Setting the Camera",
          "04 - Designing a player",
          "Update! Collision Boxes and UGameplayStatics",
          "05 - Moving the Ship",
          "FAQ on Visual Studio",
          "06 - Designing a Bullet",
          "07 - Making bullets move",
          "08 - Converting bullet to blueprint",
          "09 - Spawning Bullets",
          "10 - Making the Enemy",
          "11 - Player-enemy collision",
          "12 - Bullet-enemy collision",
          "13 - Creating the game mode",
          "14 - Spawning enemies",
          "14.2 - Spawning enemies 2",
          "15 - Restarting the game",
          "16 - Game widget",
          "17 - Widget blueprint",
          "18 - Spawning widget",
          "18.2 - Spawning widget",
          "19 - Integrating interface"
        ],
        "Unreal 03 - Platform Switcher": [
          "01 - Introduction",
          "02 - Setting up Unreal",
          "03 - Designing the level",
          "04 - Creating a game mode",
          "05 - Switch mechanic",
          "06 - Creating an orb",
          "07 - Creating obstacles",
          "08 - Game widget",
          "09 - Coding the game widget",
          "10 - Spawning the widget",
          "11 - Game messages",
          "12 - Restarting the game"
        ],
        "04 - FPS Shooter": [
          "01 - Introduction",
          "02 - Setting up project",
          "03 - Making an enemy",
          "04 - Making a game mode",
          "05 - Integrating the game mode",
          "06 - Spawning enemies",
          "07 - Game mode hooks",
          "08 - Making the interface",
          "09 - Integrating interface to game mode",
          "10 - Spawning the interface",
          "11 - Restarting the game"
        ],
        "Unreal 05 - Turret": [
          "01 - Introduction",
          "02 - Setting up project",
          "03 - Constraining the player",
          "04 - Making the enemy",
          "05 - Making the game mode",
          "06 - Integrating the game mode",
          "07 - Health loss",
          "08 - Creating the interface",
          "09 - Interface system",
          "10 - Adding interface and game restart"
        ],
        "Unreal 06 - Runner Switcher": [
          "01 - Introduction",
          "02 - Setting up the project",
          "03 - Runner script",
          "04 - Designing the runner",
          "05 - Making a game mode",
          "06 - Endless runner logic",
          "07 - Game blocks",
          "08 - Integrating the game blocks",
          "09 - Creating the enemy",
          "10 - Overlap collision",
          "11 - Enemy blocks",
          "12 - Game over",
          "13 - Creating a widget",
          "14 - Game widget script",
          "15 - Mode spawning the widget",
          "16 - Restarting the game"
        ],
        "Unreal Resources": [
          "Source Code",
          "Free Book: Build 6 Games in Unreal"
        ],
        "Introduction to GameMaker": [
          "Introduction",
          "02 - Project setup and sprites",
          "03 - Objects",
          "04 - Rooms",
          "05 - Rotation",
          "06 - Movement",
          "07 - Instances"
        ],
        "02 - Deep Dive - Events and Actions": [
          "01 - Introduction",
          "01 - Introduction",
          "02 - Setting up project",
          "03 - Movement",
          "04 - Friction and warping",
          "05 - Jumping and stepping",
          "06 - Spawning",
          "07 - Destroying",
          "08 - Sprite transformations",
          "09 - Alarms",
          "10 - Control",
          "11 - Interface",
          "12 - Collisions"
        ],
        "03 - Deep Dive - Coding": [
          "01 - Introduction",
          "02 - Setting up project",
          "03 - Movement",
          "04 - Rotation",
          "05 - Spawning",
          "06 - Collisions",
          "07 - Destroying"
        ]
      },
      "requirements": [
        "Download GameMaker Studio.",
        "The GameMaker section of this course is recorded on a PC. The Mac version of Game Maker studio is different but can be used.",
        "Install the Unreal Engine."
      ],
      "description": "Have you ever wanted to make your own games? You've come to the right place.\nThe first part of this course is on Game Maker. Learn to build games with Game Maker one of the easiest engines to use on the planet!\nBuild games from scratch and learn to code at the same time.\nAdd more skills to your resume with practical projects.\nThe second part of this course is on the Unreal Engine. Learn to make games from scratch in the popular engine Unreal 4!\n\nIncluded in this course is material for beginners to get comfortable with the interfaces. Please note that we reuse this material in similar courses because it is introductory material. You can find some material in this course in the following related courses:\nLearn how to make games in Game Maker\nComplete Gaming Masterclass: Learn Blender and GameMaker\nFinish 21 Games in GameMaker and Make Professional Art FAST\nBuild 25 Games in Python and GameMaker (and Learn to Code)\nLearn ELM Functional Programming and Make 22 GameMaker Games\nMake 22 GameMaker: Studio Games & 5 Image Data UI Projects\nFinish 26 Games & Apps Quickly (GameMaker: Studio & Xcode)\nComplete Guide to GameMaker Studio and Angular\nBuild 22 Games in GameMaker Studio, C# Unity® & Blender\nMake games in GameMaker & learn to code for the web in Ruby!\nLearn to code by building 6 games in the Unreal Engine\nComplete Unreal & Android Development: Build Games & Code\nComplete 6 Games in Unreal Engine 4 and 20 in Construct 2\nUnreal Engine Game Mechanics Mastery & MakeHuman 3D Modeling\nComplete Developer Masterclass: Learn Angular 2 and Unreal\nMaster Unreal and Xamarin: Build Professional Games and Apps\nUnreal Engine 4 & Android Development: Make 6 Games, 12 Apps\nBeginner's Swift 4 & Unreal Engine - Learn Xcode, Make Games\nThe beauty of taking an online course like this is the ability to replay any of the lectures at any time. There is no time limit or final tests. You get to learn at your own pace with a practical model method of learning.\nOne of the best features is that you can watch the courses at any speed you want. This means you can speed up the or slow down the video if you want to.\n\nThis course is project-based so you will not be learning a bunch of useless coding practices. At the end of this course you will have real world apps to use in your portfolio.\nWe feel that project based training content is the best way to get from A to B. Taking this course means that you learn practical, employable skills immediately.\nYou can use the projects you build in this course to add to your LinkedIn profile. Give your portfolio fuel to take your career to the next level.\nLearning how to code is a great way to jump in a new career or enhance your current career. Coding is the new math and learning how to code will propel you forward for any situation.\nLearn it today and get a head start for tomorrow. People who can master technology will rule the future.\nYou get full lifetime access to this course for a single one-time fee. Your purchase includes the e-book \"Build 6 Games in Unreal \" by Mammoth Interactive.\nSign up right now to get started",
      "target_audience": [
        "Complete beginners. No prior coding or digital art skills necessary.",
        "People who want to make games."
      ]
    },
    {
      "title": "Complete 2D Platformer in Godot 4.3: From Zero to Finished",
      "url": "https://www.udemy.com/course/godot2dplatformer/",
      "bio": "Build a fully playable 2D platformer game from scratch",
      "objectives": [
        "Build a complete 2D platformer game in Godot 4 from start to finish",
        "Implement core game systems like health, lives, score, ammo, and level transitions",
        "Create menus, UI, pause systems, and audio controls with music and sound effects",
        "Export and package your Godot game for Windows, Mac, or Linux"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Creating the Initial Project Folder",
          "Godot: The Basics a Quick Rundown",
          "2D Project Setup Guide"
        ],
        "Tilemaps": [
          "Building Your First Level with Tilemaps",
          "Build Your Second Level"
        ],
        "The Player": [
          "Adding the Player",
          "Improving Player Movement"
        ],
        "Enemies": [
          "Jumping Enemy and Damaging the Player",
          "Patrolling Enemy",
          "Quick Fix to Patrolling Enemy",
          "Create an enemy type of your own"
        ],
        "Level Transitions and Fade Effects": [
          "Level Transition & Fade Effect"
        ],
        "Collectibles and UI": [
          "Gems and Globals",
          "Creating the UI",
          "Health Pickup"
        ],
        "Player Projectiles and Damaging Enemies": [
          "Player Projectiles and Damaging Enemies"
        ],
        "Platforms": [
          "Platforms"
        ],
        "Menus and Screens": [
          "Title Screen",
          "Pause Menu",
          "Gameover Scren",
          "Create a Victory/Win Screen"
        ],
        "Audio System": [
          "Fully Functioning Audio System"
        ]
      },
      "requirements": [
        "No prior programming or game development experience required — everything is taught step-by-step"
      ],
      "description": "Ready to make your own 2D platformer? In this hands-on course, you’ll learn how to build a complete, polished platformer game using Godot 4.3 — even if you’re totally new to game development.\nWe’ll walk step-by-step through designing a full game from the ground up: player movement, combat, enemies, collectibles, menus, audio, scene transitions, and more. You’ll gain practical skills while building real features — and by the end of the course, you’ll have a fully playable game you can share or build on.\nWhether you’re a hobbyist, aspiring indie dev, or a student looking for a final project, this course will guide you through the full game creation process in a beginner-friendly way.\nTools You'll Use:\nGodot Engine 4.3 (completely free and open source)\nGDScript (Godot's easy-to-learn scripting language)\nOptional pixel art assets (provided or use your own)\nWhat You’ll Learn:\nBuild a player character with smooth movement, jumping, and animations\nAdd enemies with patrol, chase, and attack behaviors\nCreate multiple levels with tilemaps and scene transitions\nTrack health, lives, score, ammo, and collectibles\nDesign a pause menu, main menu, game over, and win screen\nAdd background music and sound effects with volume sliders\nExport your game and make it playable on Windows, Mac, or Linux",
      "target_audience": [
        "This course is perfect for beginners, hobbyists, or aspiring indie game developers who want to learn how to build a complete 2D platformer using Godot 4.3. If you've never made a game before or are transitioning from another engine like Unity or GameMaker, this course will guide you through creating an entire game from the ground up."
      ]
    },
    {
      "title": "An Introduction to Moho",
      "url": "https://www.udemy.com/course/doti-introduction-to-moho/",
      "bio": "A beginner's guide to learning Moho",
      "objectives": [],
      "course_content": {},
      "requirements": [
        "You need Moho Debut or Moho Pro."
      ],
      "description": "In this Introduction To Moho video course, Tammy Coron teaches you how to use Moho, an animation tool published by Smith Micro Software.\nHere's a look at what this course covers:\nThe Interface. Discover how to change the basic configuration of the Moho interface, and how to make your way around the app.\nImporting Images. There’s more than one way to import images!\nDrawing Tools. Find out how to effectively use the Draw Tools in Moho, including the selection tool, the transform tool, and the freehand tool.\nThe Layers Panel. Discover how to add layers, delete layers, duplicate layers, and more.\nLayer Management. Find out how to keep layers organized using layer names and group layers.\nLayer Effects. Learn how to use layer effects, like opacity and masking.\nStyle Effects. Take your shapes to the next level, and learn how to use shape effects to add shading.",
      "target_audience": [
        "Anyone interested in learning how to use Moho."
      ]
    },
    {
      "title": "Unity Meta Quest Development: MR & Camera API & Colocation",
      "url": "https://www.udemy.com/course/unity-meta-quest-development-mr/",
      "bio": "Unity, MR",
      "objectives": [
        "Use Unity to develop MR (Mixed Reality) games & applications",
        "Learn MRUK of Meta XR SDK",
        "Use Passthrough Camera API to get camera access",
        "MR Multiplayer Colocation Basics"
      ],
      "course_content": {
        "Meta XR SDK Basics": [
          "Create a Unity project (SDK v72)",
          "Import SDK & Project Setup (SDK v72)",
          "Basic Interaction Setup & Build (SDK v72)",
          "Import SDK Samples",
          "SDK v74 OpenXR"
        ],
        "Mixed Reality Basics": [
          "Passthrough",
          "MRUK & Effect Mesh",
          "MRUK Events",
          "Anchor Prefab Spawner (Replace Real Objects)",
          "Passthrough Material & Occlusion of Room Model",
          "Wall-breaking Theory",
          "Virtual World Preparation",
          "Shooting",
          "Bullet Collision Detection"
        ]
      },
      "requirements": [
        "Unity, Meta Quest 3 or Meta Quest 3s"
      ],
      "description": "This course will introduce how to use the Unity Meta XR SDK officially launched by Meta to develop Quest Mixed Reality (MR)  Applications in Unity. Through systematic learning, you will learn:\nThe mystery of MR interaction: passthrough, collision between virtual objects and real objects, occlusion, spatial anchor ... You will learn useful MR development tools from Meta such as MRUK to accelerate your project!\nThe realization of cool MR visual effects: MR Portal, mesh destruction... These special effects that once only existed in imagination can all be achieved by yourself, infusing your MR Application with boundless creativity and visual impact!\nDevelopment based on camera data: Quest has now opened up camera access. You can use passthrough camera API to realize many wonderful effects such as image tracking, object recognition, and many more cool AI functions can be developed!\nWhether you are:\nA developer with a dream, eager to make a big splash in the MR field\nA creative designer, hoping to turn unrestrained imagination into reality\nAn enthusiast who is full of curiosity about MR Technology and want to explore the infinite possibilities of the integration of the virtual world and the real world\nThis course will open a door to the future for you!",
      "target_audience": [
        "Developers who want to create MR games or applications on Quest"
      ]
    },
    {
      "title": "Build a Marble Shooter Game (Zuma-Style) with Unity & C#",
      "url": "https://www.udemy.com/course/create-an-epic-2d-mobile-tile-matching-game-with-unity/",
      "bio": "Create and Code a Complete Marble Shooter Game While Mastering Unity & C#",
      "objectives": [
        "How to create a marble shooting game with Unity",
        "New coding techniques",
        "How to find and add music and SFX to your game",
        "Get more experience in Unity GameDev"
      ],
      "course_content": {
        "Introduction": [
          "Feedback",
          "What Unity version to choose?"
        ],
        "Core Game Mechanics": [
          "Section Introduction",
          "Core scene setup",
          "Attention challenge",
          "Add Path Creator",
          "Attention challenge",
          "Make balls move",
          "Attention challenge",
          "Spawn balls",
          "Destroy balls",
          "Shoot balls",
          "Add different colors",
          "Land balls",
          "Destroy same colors",
          "Mid-section refactoring!",
          "Move separate balls back",
          "Move back & Destroy cycles",
          "Add special balls",
          "Add Bomb Type balls",
          "Add Reverse Type balls",
          "Add Slow Type balls",
          "Section-end refactoring & bug fixing",
          "Section summary"
        ],
        "Assets Upgrade": [
          "Section introduction",
          "Add new sprites",
          "Activated balls sprites",
          "Shooter active sprite",
          "Add Music & SFX",
          "Add path & spawner sprites",
          "Add destroyer animation",
          "Section summary"
        ],
        "Menus & Tracking Progress": [
          "Section introduction",
          "Main menu",
          "Pause menu",
          "Add levels",
          "Add game over scenario",
          "Start a new game",
          "Fix bugs & optimize",
          "Section summary"
        ],
        "Final": [
          "Congratulations!"
        ]
      },
      "requirements": [
        "Unity v6",
        "Basic prior knowledge of C#",
        "Basic prior knowledge of Unity"
      ],
      "description": "Build a Zuma-Style Marble Shooter and Level Up Your Unity Skills!\nThe best way to grow as a developer is through practice. Just like in games, you only level up by taking on new challenges. This course is designed to give you exactly that — a hands-on project that sharpens your Unity and C# skills while keeping the process fun and engaging.\nUnlike beginner tutorials that walk you through the absolute basics, this course is more like a mission. By completing it, you’ll gain practical tools, refined techniques, and the confidence to tackle bigger projects on your own.\n– What You’ll Do in This Course\nCreate a complete Zuma-inspired marble shooter game step by step\nLearn how to manage object spawning, collision detection, and movement logic in Unity\nImplement match mechanics (balls disappearing when three or more of the same color align)\nAdd scoring, UI elements, and game progression to make it feel like a polished mobile game\nPractice writing clean and reusable C# scripts for common game mechanics\n– Who This Course Is For\nThis course is perfect if you:\nAlready know the basics of Unity and C#\nWant a hands-on project to practice and deepen your game development skills\nLove puzzle games and want to create your own marble shooter for mobile\nLearn best by building a real, playable game rather than just following theory\n– Why Take This Course?\nBy the end, you won’t just have learned new techniques — you’ll have created a complete, fully functional game you can play, share, and expand. The skills you’ll practice here will transfer directly into future projects, whether you want to build more puzzle games, prototypes, or even commercial releases.\nDon’t worry about mistakes along the way — they’re part of the learning journey. You’ll see how to debug, fix, and improve, just like real developers do.",
      "target_audience": [
        "Students that already have some basic experience in making unity games but would like to learn something new"
      ]
    },
    {
      "title": "Scratch Game Programming",
      "url": "https://www.udemy.com/course/scratch-game-programming/",
      "bio": "A fun guide to programming for parents & teachers who want to help kids learn to code.",
      "objectives": [],
      "course_content": {
        "Getting Started": [
          "The Scratch Website and Editor",
          "Lecture 1 Quiz",
          "The Scratch Editor and Using Code Blocks",
          "Lecture 2 Quiz"
        ],
        "Rainbow Lines Project": [
          "Rainbow Lines Project, part 1 of 2",
          "Lecture 3 Quiz",
          "Rainbow Lines Project, part 2 of 2",
          "Lecture 4 Quiz"
        ],
        "The Scratch Help System and Paint Editor": [
          "Finding Help in Scratch",
          "Lecture 5 Quiz",
          "The Paint Editor",
          "Lecture 6 Quiz"
        ],
        "Maze Game Project": [
          "Maze Game, part 1 of 3",
          "Lecture 7 Quiz",
          "Maze Game, part 2 of 3",
          "Lecture 8 Quiz",
          "Maze Game, part 3 of 3",
          "Lecture 9 Quiz"
        ],
        "Extend the Maze Game Project": [
          "Making a Second Player",
          "Lecture 10 Quiz",
          "Adding Traps to the Maze",
          "Lecture 11 Quiz",
          "Adding Cheat Codes to the Maze Game",
          "Lecture 12 Quiz"
        ],
        "Basketball Game Project": [
          "Programming Gravity",
          "Lecture 13 Quiz",
          "Hitboxes and Programming the Hoop",
          "Lecture 14 Quiz",
          "Programming the Basketball",
          "Lecture 15 Quiz"
        ],
        "Extend the Basketball Game Project": [
          "Adding a Second Player",
          "Lecture 16 Quiz"
        ],
        "Brick Breaker Game Project": [
          "Programming the Paddle Movement",
          "Lecture 17 Quiz",
          "Programming the Bouncing Ball",
          "Lecture 18 Quiz",
          "Cloning",
          "Lecture 19 Quiz",
          "Making Text Messages Appear",
          "Lecture 20 Quiz"
        ],
        "Extend the Brick Breaker Game Project": [
          "Adding Colorful Backdrops and Effects",
          "Lecture 21 Quiz",
          "Trail Effects and Animated Text",
          "Lecture 22 Quiz"
        ],
        "Snake Game Project": [
          "Programming a Snake Body with Cloning",
          "Lecture 23 Quiz",
          "Hit Detection for the Snake",
          "Lecture 24 Quiz"
        ]
      },
      "requirements": [
        "How to use a mouse (right-clicking, dragging).",
        "Typing proficiency is helpful but not required.",
        "No previous programming experience is needed."
      ],
      "description": "Scratch is the best educational programming software for kids available today. With Scratch, you can create games and interactive art projects all while having lots of fun! Parents and teachers can use this course's fun projects to guide their children and students to a solid understanding of basic programming concepts while having fun!\nIMPORTANT NOTE: This course was made for Scratch 2.0. On January 1st, 2019, Scratch 3.0 was released on the Scratch website. However, you can still use the Scratch 2.0 Offline Editor. This course will be completed updated for the new 3.0 version in mid-2019. The information here is still relevant to using Scratch 3.0, though it doesn't cover 3.0's new features.\nDesigned by the MIT Media Lab’s Lifelong Kindergarten Group for 8 to 16 year olds, Scratch is a free programming environment that runs in your web browser. But Scratch users consist of people of all ages, including younger children with their parents. The software makes it easy for anyone to start developing their programming and problem-solving skills.\nI’m Al Sweigart, the author of several programming books for kids and beginners. This course follows the content of my latest book Scratch Programming Playground, which you can read for free online under a Creative Commons license. This is my second Udemy course following my highly-rated \"Automate the Boring Stuff with Python Programming\".\nThis course (and supplemental book) covers the creation of several classic games like brick Breaker, Snake, and Fruit Ninja. Instead of memorizing a list of programming concepts, you’re guided through making these games and picking up programming concepts on the way. The lectures follow the 6 game and computer art projects, along with additional content on debugging and experimenting with Scratch.",
      "target_audience": [
        "Parents who want to help their kids learn to program.",
        "Teachers, including non-technical instructors, who want to guide afterschool coding clubs."
      ]
    },
    {
      "title": "Unreal Engine Multiplayer C++ Inventory, Crafting, Building",
      "url": "https://www.udemy.com/course/unreal-engine-multiplayer-c-inventory-crafting-building/",
      "bio": "How to build a Multiplayer ready Inventory, Crafting and Building system using Unreal Engine 5 and C++ Scripting",
      "objectives": [
        "How to Create a C++ Inventory for Unreal Engine",
        "How to Create a C++ Crafting System for Unreal Engine",
        "How to Create a C++ Building System for Unreal Engine",
        "How to add Multiplayer Support for all systems",
        "Drag and drop for widget blueprints"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Project Setup",
          "Plugin Setup",
          "Player and Character Controller Setup"
        ],
        "Inventory System": [
          "Base Item and Data Table",
          "Inventory Item",
          "Storage Component Setup",
          "Adding Items",
          "Removing Items",
          "Has Items",
          "Removing Multiple Items",
          "Storage Replication for Multiplayer",
          "Shared Storage for Multiplayer",
          "UI - Inventory Container",
          "UI - Inventory Item",
          "UI - Drag and Drop",
          "UI - Drop Areas",
          "UI - Shared Storage",
          "Item Cooldowns",
          "Pickup Items",
          "Bug Fixing Pickup Item"
        ],
        "Crafting System": [
          "Crafting Component",
          "Base Recipe",
          "Crafting Time",
          "Cancel Crafting",
          "UI - Crafting Container",
          "UI - Crafting Item",
          "Shared Crafting",
          "Replication For Multiplayer"
        ],
        "Building System": [
          "Building Component",
          "Ray/Line Tracing",
          "Get Hit Location",
          "Placeable Actors",
          "Spawn Actor",
          "Rotate Building",
          "Placing Building",
          "Remove Ingredients",
          "Multiplayer Replication For Building",
          "UI - Build Menu",
          "UI Build Item",
          "UI Bug Fixes"
        ],
        "End": [
          "Final Thoughts"
        ]
      },
      "requirements": [
        "Understanding of Unreal Engine 5 navigation",
        "Basic understanding of Unreal Engines replication would be Ideal",
        "Basic C++ would also be ideal"
      ],
      "description": "Welcome to the course, thanks for stopping by\n\n\nThis is an Unreal Engine 5 development course that will help you on your way to developing games that utilize storage like RPG's and Survival Games where you have to gather resources and craft new items and new weapons\n\n\nHere you will learn how to create an in-game inventory system where you can pick things up from the world and store them for later (ideal for hoarders).\nOnce we have our Inventory I will show you how to create a crafting system that uses those precious resources you have gathered.\nWhen we are done with Crafting we will move onto building, learn how to create a system similar to that of Fortnite or your favourite survival games like Subnautica or Valheim.\n\n\nMultiplayer support is a must in day to day games, I will not show you how to create a multiplayer game but I will show you how to make your inventory/crafting/building systems work for multiplayer games and how you can have shared storage to share those resources you have gathered with your friends who couldn't be bothered to gather them themselves.\n\n\nThis course will primarily be using Unreal Engine 5's C++ scripting so some prior knowledge of C++ is advised as I will not be covering the basics,\nand an understanding of Unreal Engines interface is highly advisable as I wont be covering that either.",
      "target_audience": [
        "Intermediate to Advanced game/indie developers"
      ]
    },
    {
      "title": "Vehicle Modeling in Houdini 16.5 - SciFi Dropship",
      "url": "https://www.udemy.com/course/vehicle-modeling-in-houdini-16-scifi-dropship/",
      "bio": "Learn how to utilize Houdini's Procedural toolset to create Vehicle Models",
      "objectives": [],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Dropship Demo"
        ],
        "Getting setup in Houdini 16.5": [
          "Introduction",
          "Creating Houdini Projects",
          "Setting up the Orthgraphic Grid Graph",
          "Assigning Materials to the Orthographic Grids",
          "Creating a Houdini Digital Asset for the Orthographic Grids",
          "Exploring HDA Properties - Bonus Video!"
        ],
        "Blocking in the Dropship": [
          "Introduction",
          "Blocking - Part 1",
          "Blocking - Part 2",
          "Blocking - Part 3",
          "Creating a Mirror and Clip HDA"
        ],
        "Blockin in the Top of the Dropship": [
          "Introduction",
          "Major Shapes - Part 1",
          "Major Shapes - Part 2",
          "Blocking in the Engine Mounts"
        ],
        "Blocking in the Engines": [
          "Introduction",
          "Major Shapes - Part 1",
          "Major Shapes - Part 2",
          "Using Booleans for Complex Shapes",
          "Placing the Engines",
          "Copying to Points"
        ],
        "Blocking in the Landing Gear": [
          "Introduction",
          "Creating the Main Strut",
          "Creating the Pivot Widget",
          "Creating the Suspension Arms",
          "Completing the Suspension Arms",
          "Creating the Foot",
          "Creating an HDA to Handle Cable Creation",
          "Cable Creation - Part 2"
        ],
        "Detailing the Lower Body": [
          "Introduction",
          "Adding Panel Lines with Booleans",
          "Panel Lines - Part 2",
          "Panel Lines - Part 3",
          "Compound Booleans",
          "VDB's and Smoothing"
        ],
        "Detailing the Upper Body": [
          "Introduction",
          "Creating the Cockpit",
          "Detailing Continued",
          "Creating Sci-Fi Piping",
          "Sci-Fi Piping HDA",
          "Procedural Piping",
          "Creating Sci-Fi Widgets and Placement"
        ],
        "Detailing the Engine": [
          "Introduction",
          "Outer Casing - Part 1",
          "Jets - Part 1",
          "Jets - Part 2",
          "Engine Mounts"
        ],
        "Retopology in Houdini": [
          "Introduction",
          "Understanding the TopoBuild Node - Part 1",
          "Understanding the TopoBuild Node - Part 2",
          "Re-using Topology",
          "Jet Engine Re-Topo",
          "Final Results"
        ]
      },
      "requirements": [
        "Beginner knowledge of Houdini Interface",
        "Beginner knowledge of creating node graphs in Houdini",
        "Houdini Apprentice and above is required",
        "Unity or Unreal is used but not required"
      ],
      "description": "Throughout  this course we will look at ways in which we can begin to insert  procedural modeling workflows, using Houdini 16.5, into your everyday modeling pipeline. We will learn how we  can speed up our traditional vehicle modeling tasks using Houdini  Digital Assets, procedural techniques, and Houdini's surface operators.  By the end of the course, we will have walked through how to create the  Dropship model, how to generate the terrain seen in the demo, and how to  get the Dropship set up inside both Unity 2018 and Unreal 4. Best part is, since Side Effects Software sponsored this course, the course is  free!",
      "target_audience": [
        "A beginning Houdini user who wants to see how to model vehicles inside of Houdini",
        "Someone who would like to see how Houdini's proceduralism can speed up their modeling workflows",
        "A Houdini user who wants to take their skills up a notch to produce complete vehicle models all in Houdini",
        "A modeler who is interested in learning how Houdini can be used to create vehicles"
      ]
    },
    {
      "title": "Make a 2D game in Unity3D",
      "url": "https://www.udemy.com/course/sabotage-game-unity3d/",
      "bio": "Code your own Unity Game!",
      "objectives": [],
      "course_content": {
        "Making a game.": [
          "Setup and Cannon Controls",
          "Firing and Helicopters",
          "Air Traffic Controller",
          "Geronimo! We have Paratroopers.",
          "Blood is shed",
          "Keeping Score",
          "Troops Beat Cannon",
          "Sounds like the end"
        ]
      },
      "requirements": [
        "Basic computer skills"
      ],
      "description": "We will make a game based on an old Apple II game called Sabotage. In the process we will cover several helpful skills in Unity.\nLearn the coordinate system for GameObjects\nTurn images into Sprites and control them on the screen\nRead the mouse position and convert it into rotational value\nChange the pivot point for sprites (images)\nCreating Sprite prefabs and Instantiating them\nCreating smooth movements using Time.deltaTime\nUsing Tags to organize GameObjects and overcoming limitations of prefabs\nCreating child GameObjects to join Sprites together\nCreating particle systems and sub-emmiters\nCreating UI text fields for keeping score\nAdjusting UI canvas to fit the game area\nAdding sounds to GameObjects\nCreating stand-alone game sound objects\nYou won't even realize you learned these things because you will be having so much fun!",
      "target_audience": [
        "Beginner Unity developers"
      ]
    },
    {
      "title": "Learn to create 2D game with unity and C#",
      "url": "https://www.udemy.com/course/learn-to-create-2d-game-with-unity-and-c/",
      "bio": "Learn to create 2D game with unity and C#",
      "objectives": [
        "Beginner C# concepts",
        "Develop a complete 2d Game from scratch using C# and Unity",
        "Discover 2D animation workflows",
        "Unity concept"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Intro to state pattern"
        ],
        "Game": [
          "Create state pattern",
          "Jump",
          "Art Asset",
          "Import Asset",
          "player movement",
          "Player slide",
          "Base Attack",
          "Combo attack",
          "Attack",
          "Tile pallet background",
          "Level design part 1",
          "Level design part 2",
          "Camera",
          "Level Background",
          "parallax",
          "Endless background",
          "Enemy state machine",
          "enemy state",
          "enemy logic",
          "Enemy ledge detection",
          "hit enemies",
          "Battle state",
          "enemy attack",
          "Stats",
          "battle state fix",
          "hurt state",
          "character death",
          "Death animation",
          "Player Death",
          "Health",
          "enemy health",
          "Inventory",
          "Inventory Ui",
          "UI handler",
          "Item pickup",
          "Item description",
          "Use Item",
          "epilogue"
        ]
      },
      "requirements": [
        "pc"
      ],
      "description": "Learn how to create your very own 2D RPG game for mobile or PC using Unity2D, an industry-standard program used by many large gaming studios and indie developers across the world.\nYou won’t just be learning programming concepts in this course, but tying these concepts to real game development uses. You will have access to a course forum where you can discuss the topics covered in the course as well as the next steps to take once the course is complete.\nThis course has been designed to be easily understandable to everyone,we start from scrach,easy codes to hard codes and every code will be explained so whether you’re a complete beginner, an artist looking to expand your game development range or a programmer interested in understanding mobile game design, this course will help you gain a greater understanding of development.\nAt the end of this course you will have developed the ability to create such PC game elements as:\nCreating the world\nMake enemy\nMake player units\nAdvertisement with unity with update 2021\nJumping\nMaking different Enemies\nLearning C# codes\n\n\nStart learning today and let me help you become a mobile and PC game developer!\n\n\n\n\nUnderstand how to earn revenue using advertising in their games\nLearn C#, a modern versatile programming language\nUnderstand the capabilities of mobile development in Unity\nDevelop strong and transferable problem solving skills\nGain an understanding of the game development process\n\n\nMac or PC capable of running Unity 2D\nThe latest version of Unity 2019 or 2020\n\n\nAnyone who wants to make their own mobile and pc games\nAnyone interested in learning to publish apps and games to the Play Store or stream\nComplete beginners with an interest in learning mobile and PC game development\nDevelopers who want to re-skill across to mobile development\nPeople who want to create and publish their own mobile or PC games",
      "target_audience": [
        "everyone"
      ]
    },
    {
      "title": "Create a 2D endless runner game with Cocos Creator",
      "url": "https://www.udemy.com/course/create-a-2d-endless-runner-game-with-cocos-creator/",
      "bio": "Quickly create a 2D endless runner game that has 2D physics using Cocos Creator and a few scripts",
      "objectives": [
        "Students who want to learn how to create a 2D endless runner game",
        "Students who want to be familiar with the world's most popular open source Game Engine Cocos Creator",
        "Students who want to learn the basics of 2D game development",
        "Students who want to create multiplatform games for web, mobile and desktop",
        "Students who want to learn some Cocos Creator scripting or if they are familiar with JavaScript and Typescript, use that knowledge for creating 2D games"
      ],
      "course_content": {
        "Getting Started": [
          "Cocos Creator"
        ],
        "Jumping in": [
          "Creating the project and the scene",
          "Adding some physics properties to the scene",
          "Using the Box Collider"
        ],
        "Creating the Running Effect": [
          "Creating a Moving Ground",
          "Creating the Running Animation"
        ],
        "Creating the Jump Effect": [
          "Making the Player jump",
          "Making the Player jump again"
        ],
        "Adding Obstacles": [
          "Adding the Cactus and the Bushes"
        ],
        "Scenes": [
          "spawning the Cactus and bush dynamically",
          "ending the game",
          "starting the game"
        ],
        "Conclusion": [
          "adding scores",
          "adding sounds",
          "final touches"
        ]
      },
      "requirements": [
        "Basic understanding on how to get around your platform of choice whether windows or Mac",
        "Having any kind of programming or scripting knowledge will be beneficial but is not mandatory",
        "A curiousity to learn",
        "A love for 2D games"
      ],
      "description": "This course teaches you how you can create a 2D endless runner game. The player will be jumping obstacles making sure not to hit any of them. We will see how we can spawn different obstacles dynamically on the scene and even add scores to our game. The obstacles will be coming much faster each time making the game have some difficulty. The game will be based on 2D physics with gravity, double jumps, and collision detection working to make a fun experience. We will include sound effects appropriately and use the animation tool that is built into the cocos creator engine. All the files necessary for the course are included and there are no special requirements to be able to participate in this course. This course goes straight to the point of creating a simple 2D endless runner game but gives a good foundation and understanding of the game development principles of Cocos Creator. At the end of the course, you will have a working 2D endless runner game that can be deployed to your preferred platform of choice. Upon completion, the student should be able to understand how to work with the cocos creator component based development paradigm and should be familiar with the common functions and tools used in the engine.",
      "target_audience": [
        "Cocos Creator fans",
        "Programmers or anyone who can script or wants to learn how to write scripts",
        "Students who want to be able to create physics based 2D games",
        "Students who want to create and endless runner game built with 2D physics",
        "Cocos2d-x users who want an easier way to develop games by using Cocos Creator"
      ]
    },
    {
      "title": "Learn C++ Game Development",
      "url": "https://www.udemy.com/course/learn-c-game-development/",
      "bio": "C++ game development course for beginners.",
      "objectives": [],
      "course_content": {
        "README: Basic information": [
          "Introduction",
          "New course content"
        ],
        "Lesson 1: Setup": [
          "Preparing our environment",
          "Installing Visual C++",
          "Installing SFML"
        ],
        "Lesson 2: The window": [
          "Creating The Project",
          "Creating the window",
          "Game loop",
          "Project zip file"
        ],
        "Lesson 3: Events": [
          "Keyboard Events",
          "States for events",
          "Project zip file for keyboard events and states",
          "Mouse Events",
          "Project zip file for mouse events",
          "Exercises",
          "Solutions for exercises"
        ],
        "Lesson 4: Drawing or rendering": [
          "Basic Shapes",
          "project zip file for simple shapes",
          "Creating an image and rendering it",
          "Downloading an image and preparing it",
          "Project zip file for creating and loading images",
          "Fonts and texts",
          "Project zip file for fonts"
        ],
        "Lesson 5: Sounds and music": [
          "Preparing the project",
          "Create and play sounds",
          "Project zip file for preparing the project and playing sounds",
          "Playing music",
          "Project zip file for playing music"
        ],
        "Lesson 6: Game mechanics": [
          "Simple Logic",
          "Project zip file for simple logic",
          "Simple Movement",
          "Project zip file for simple movement",
          "Simple collision",
          "Project zip file for simple collision"
        ],
        "Lesson 7: Creating the game \"Pong\"": [
          "Part 1 - Resources",
          "Pong resources and project zip file for part 1",
          "Part 2 - Shapes",
          "Pong project zip file for part 2",
          "Part 3 - Movement",
          "Project zip file for part 3",
          "Part 4 - AI And Collision",
          "Project zip file for part 4",
          "Part 5 - Finish",
          "Project zip file for part 5"
        ],
        "New content": [
          "README first: Updates",
          "Preparing out environment on Windows",
          "Preparing out environment on Linux (Ubuntu)",
          "Main game loop",
          "Handling keyboard and mouse events",
          "Drawing basic shapes",
          "Drawing sprites",
          "Using fonts to draw text",
          "Project setup for audio",
          "Playing sound effects and music"
        ]
      },
      "requirements": [],
      "description": "Learn C++ game development is a course I made for everyone who knows how to program, but doesn't know where to start with game development. The course teaches you how to use the SFML library for C++, to start working with graphics, events and sound to create a 2D game. Everything is done step by step with the help of videos, so it's easy to follow along and learn. At the end of the course you will know what you need for game programming and will be able to start making your own games.\nWarning: This course was published more than 2 years ago and the technology used in it progresses fast. The current most updated version of SFML (2.1) doesn't work out of the box with Visual Studio 2013 (or the express editions) and it requires more work to setup. If you want to follow this course easily, then you should use the 2012 or older version of Visual Studio (or the express edition) which can still be officially downloaded from Microsoft site.",
      "target_audience": []
    },
    {
      "title": "Unreal Engine 5: Developing a Realistic Car Racing Game",
      "url": "https://www.udemy.com/course/unreal-engine-5-developing-a-realistic-car-racing-game/",
      "bio": "Learn the basics of Unreal Engine 5 by Making a Realistic Racing Game",
      "objectives": [
        "Learn the basics of making Car Models Drivable in Unreal Engine 5",
        "Learn the basics of Blueprints in Unreal Engine 5",
        "Learn the basics of Creating AI Opponent Racers in Unreal Engine 5",
        "Learn the basics of Using City environments in Unreal Engine 5"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Making the Game": [
          "Rigging the Car Model in Blender 3D",
          "Making the Car Drivable in Unreal Engine 5",
          "Adding Materials to the Car",
          "Tweaking the Driving Physics",
          "Adjusting the Camera and Adding HUD",
          "Adding AI Opponent Cars",
          "Building the Race",
          "Adding Post Processing Effects",
          "Adding Starting Countdown",
          "Creating the Cutscene",
          "Adding Finish Line Logic"
        ]
      },
      "requirements": [
        "Some experience with Unreal Engine 5 will be helpful",
        "Some experience with Blender 3D will be helpful"
      ],
      "description": "Unreal Engine 5 is one of the most powerful and in-demand tools in the game development industry today. However, it can be intimidating for beginners to get started. That’s why this course was created — to help you confidently learn Unreal Engine by building a fully functional, realistic racing game from scratch.\nThis is a hands-on, project-based course where we will walk through every major step of game development. By the end, you’ll have your own racing game complete with core gameplay systems and a polished feel.\nWhat You’ll Learn:\nRigging a car model in Blender 3D\nMaking the car drivable in Unreal Engine 5\nTexturing and applying materials\nIntegrating AI opponent cars to make the race competitive\nSetting up a game environment using a realistic pre-built city, complete with roads, buildings, trees, and lighting\nSolving problems and making creative design decisions as we go — just like a real developer\nThe course is beginner-friendly, though having some prior experience with Unreal Engine or Blender will be helpful. Throughout the course, you'll be exposed to real development challenges and solutions, giving you insight into how a game comes together from the ground up.\n\n\nFinal Project\nAs a final challenge, you’ll build your own version of the game — set in your own city or using a theme of your choice.\nYou can use the same 3D models used in the course or bring in your own assets. To reinforce your learning, be sure to apply all the techniques covered in class. You are encouraged to experiment and make the game your own.\nBonus challenge:\nIf you choose to model the car and buildings yourself in Blender, it will further sharpen your modeling and customization skills.\nAdd your own touches with custom lighting setups, materials, and colors to make your project stand out.\nThis is more than just a tutorial — it’s a complete learning journey where you and I build the game together from start to finish.\nEnroll now and take your Unreal Engine skills to the next level.",
      "target_audience": [
        "Beginner game developers wanting to learn Unreal Engine 5 with a project based approach"
      ]
    },
    {
      "title": "Master Unity: Build a Sci-Fi Tower Defense Game from Scratch",
      "url": "https://www.udemy.com/course/master-unity-build-a-sci-fi-tower-defense-game-from-scratch/",
      "bio": "Learn Unity Game Development by Building a Sci-Fi Tower Defense Game with C# Scripting, AI Programming, and 3D Design.",
      "objectives": [
        "Build a complete Sci-Fi Tower Defense game in Unity.",
        "Implement game mechanics like tower upgrades, enemy waves, and AI.",
        "Master C# scripting for game development.",
        "Design UI for buying, upgrading, and tower management."
      ],
      "course_content": {},
      "requirements": [
        "Basic understanding of Unity and C# programming.",
        "Unity 3D installed on your computer.",
        "No prior game development experience required—beginners welcome!",
        "A passion for learning and creating games."
      ],
      "description": "Are you ready to build your own Sci-Fi Tower Defense Game using Unity? This course will guide you step by step through the process of creating an exciting game while improving your C# scripting, AI programming, and 3D game design skills.\nBy the end of this course, you'll have developed a fully functional Tower Defense game and enhanced your ability to build Unity games from scratch. Whether you're a beginner or looking to refine your skills, this course will equip you with everything you need to succeed.\nWhat You'll Learn:\nHow to Build a Complete Tower Defense Game from start to finish.\nC# Programming techniques for developing game mechanics.\nEnemy AI: Design wave systems and enemy behavior.\nImplement Tower Mechanics: Upgrades, range, slow-down effects, and projectiles.\nCreate an interactive UI system for buying, upgrading, and managing towers.\nMaster Unity’s 3D Tools for designing game levels and assets.\nWhy Enroll in This Course:\nStep-by-step guidance to ensure you build your game with ease.\nLearn real-world game development skills that you can apply to any Unity project.\nBuild a strong foundation in AI, scripting, and game design.\nWho This Course Is For:\nBeginner Unity developers wanting to learn by building a complete game.\nAspiring game developers seeking to improve their C# coding and AI programming.\nIndie developers wanting to create a fun Tower Defense game prototype.\nCourse Materials:\nThe content of this course is solely for educational purposes. Please note that the final game scripts and assets created during the course will not be provided directly in the course material, as you will be building them from scratch throughout the lessons.\nEnroll now to bring your Tower Defense Game to life!",
      "target_audience": [
        "Ideal for aspiring game developers and Unity beginners.",
        "Perfect for anyone wanting to build a complete Tower Defense game.",
        "Suited for those looking to improve C# scripting and 3D game design skills.",
        "Great for hobbyists, students, and professionals.",
        "For anyone passionate about creating Sci-Fi games or turning ideas into reality."
      ]
    },
    {
      "title": "Building Flappy Bird & Ping Pong Games with Godot Engine",
      "url": "https://www.udemy.com/course/building-flappy-bird-ping-pong-games-with-godot-engine/",
      "bio": "Learn how to build flappy bird clone & ping pong games using Godot Engine & GDscript",
      "objectives": [
        "Learning basic fundamentals of Godot engine, getting to know technologies behind it, and its use cases",
        "Exploring Godot dashboard & features",
        "Learning basic GDscript code",
        "Building & designing flappy bird clone game",
        "Building & designing ping pong game",
        "Learning game testing objectives: functional testing, user experience testing, and performance testing",
        "Learning effective marketing strategies to promote your game",
        "Getting to know marketplaces where game developers can sell their game",
        "Learn how to build and design game using Rosebud AI",
        "Learn how to create 3D game asset using Hyper 3D AI"
      ],
      "course_content": {
        "Introduction": [
          "Introduction to the Course",
          "Highlight of the Course",
          "Whom This Course is Intended for?"
        ],
        "Tools & Resources": [
          "Tools & Resources"
        ],
        "Introduction to Godot Engine": [
          "Introduction to Godot"
        ],
        "Installing Godot Engine": [
          "Installing Godot Engine"
        ],
        "Exploring Godot Dashboard & Features": [
          "Exploring Godot Dashboard & Features"
        ],
        "Basics Godot Tutorial": [
          "Adding Nodes to Scene",
          "Adding Script to Scene"
        ],
        "Game Ideas to Build": [
          "Showcase of Games Built Using Godot",
          "Game Ideas to Build"
        ],
        "Building Flappy Bird Clone Game": [
          "General Overview of Game Project 1",
          "Creating Folder for Game Project 1 & Initialising Scene",
          "Downloading Flappy Bird Game Asset",
          "Downloading Flappy Bird Pipe Game Assets",
          "Creating Bird Scene & Adding Nodes",
          "Creating Pipe Obstacle Scene & Adding Nodes",
          "Adding Logics to Bird Scene",
          "Adding Logics to Obstacle Scene",
          "Integrating Bird & Obstacles Scenes to Main Player Scene",
          "Creating Game Over Function",
          "Testing Flappy Bird Clone"
        ],
        "Building Ping Pong Game": [
          "General Overview of Game Project 2",
          "Downloading Ping Pong Paddle & Ball Game Asse",
          "Creating Folder for Game Project 2 & Initialising Scene",
          "Creating Ping Pong Player & Ball Scenes",
          "Adding Logics to Ping Pong Player Scripts",
          "Adding Ping Pong Paddle & Ball Game Assets to the Scenes",
          "Duplicating Player Scene",
          "Adding Logics to Main Script",
          "Adding Logics to Ping Pong Ball Script",
          "Adding Logics to Node2D Script",
          "Testing Ping Pong Game"
        ],
        "Game Testing Objectives": [
          "Game Testing Objectives"
        ]
      },
      "requirements": [
        "No previous experience in Godot Engine or GDscript programming is required",
        "Willingness to learn and be innovative"
      ],
      "description": "Welcome to Building Flappy Bird & Ping Pong Games with Godot Engine course. This is basically an extensive project based course where you will be guided step by step on how to build a dynamic action survival game from scratch using Godot Engine and potentially build a sustainable passive income from selling the game on online Marketplaces. This course will teach you on how to build and design games without having to know extensive programming skill as Godot Engine has a visual scripting feature that allows you to drag and drop objects. In the introduction session, you will learn the basic fundamentals of Godot Engine, technologies used behind it, and its main use cases, then continue with a full step by step tutorial on how to install Godot Engine, tutorial to navigate its dashboard, as well as exploring all features available on that platform. Afterward, you will also be shown a couple examples of games created using Godot Engine and going over all potential game ideas to build. To make the learning experience even more complete, this course also comes with a project where you will be guided step by step on how to build an action survival theme game from scratch using Godot Engine. Once the game has been built, we will be conducting testing to make sure that all features have been fully functioning and most essentially the game has a friendly user interface from the player perspectives. In the testing session, there will be three main objectives that need to be tested, those are functional testing, performance testing, and user experience testing. Lastly, at the end of the course you will also learn effective marketing strategies that you can implement to reach more potential audiences to play your game as well as get to know several marketplace to sell your games like Itch IO and Steam.\nFirst of all, before getting into the course, we need to ask ourselves this question. Why should we learn building games using Godot? Well, the answer might be pretty obvious to some people, this is one of the best platform that you can utilise to build and design game without having very advances programming skills, other than that, there are still many other reasons why, Godot Engine has been well known to offer a comprehensive set of game creation tools, including a visual scripting system, 3D modelling tools, terrain editors, and animation tools. Not only that, Godot also provides social features that allow users to connect, collaborate, and engage with other players and creators. Users can join communities, participate in events, share feedback, and form friendships within the platform's social ecosystem. Last but not least, Godot supports multiple platforms, including Windows, macOS, Linux, iOS, Android, HTML5, and more. It provides a unified development environment that allows developers to create games that can run seamlessly on different operating systems and devices. Hence, when it comes to compatibility testing for the game that you build and design using Godot Engine, most likely it would pass without any issue\nBelow are things that you will learn from the course:\nLearning basic fundamentals of Godot engine, getting to know technologies behind it, and its use cases\nExploring Godot dashboard & features\nLearning basic GDscript code\nBuilding & designing flappy bird clone game\nBuilding & designing ping pong game\nLearning game testing objectives: functional testing, user experience testing, and performance testing\nLearning effective marketing strategies to promote your game\nGetting to know marketplaces where game developers can sell their game\nAdditional Projects\nBuild and Design Maze Solver Game Using Rosebud AI:\nIn this project, you’ll learn how to use Rosebud AI to generate and design a maze solver game. Rosebud AI, an AI-powered text-to-game generator, allows you to input text-based descriptions of game mechanics and environments, and it automatically generates the code and assets required to bring your game concept to life, making game development more accessible.\nCreating 3D Game Asset Using Hyper 3D AI:\nHere, you'll explore how to use Hyper 3D AI to create detailed 3D game assets. With this AI tool, you can input specific requirements for 3D models, such as textures, shapes, and styles, and the AI will generate the assets quickly, enabling efficient game development and reducing the need for complex manual modeling.",
      "target_audience": [
        "People who are interested in building games using Godot Engine",
        "People who are interested to learn GDscript programming language"
      ]
    },
    {
      "title": "Develop FPS Game in 35 Minutes with C# and Unity3D",
      "url": "https://www.udemy.com/course/develop-fps-game-with-unity3d-2021/",
      "bio": "Beginner Friendly Introduction in the World of 3D Game Development",
      "objectives": [
        "Game Development",
        "Unity3D",
        "Game Design",
        "Game Prototyping",
        "C#",
        "Coding",
        "Visual Studio"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Setting Up Basic Mechanics": [
          "Setting Up the Player and Terrain",
          "Looking Around using Mouse",
          "Walking Around using Keyboard",
          "Shooting",
          "Section 2 Summary"
        ],
        "Designing Demo Level": [
          "Level 1",
          "Adding Functionality to the Platforms",
          "Adding Time Limit",
          "Adding Time Bonus Objects",
          "Section 3 Summary"
        ]
      },
      "requirements": [
        "Computer with any OS",
        "Basic Coding Knowledge",
        "Installed Unity3D and Visual Studio (both available free)"
      ],
      "description": "Hi! My name is Domen and this is where you start developing 3D games. I created this class on 3D game development to show how easy it really is to start developing your own games. We will learn how to set up the basic prototype of first person shooter game with Unity. During the class, we will discover how to write scripts for the player and other game objects. We will write code from scratch for everything: movement, mouse rotation, shooting and many more. We will see how to set up a simple level and how to add the user interface to the game. We will create different platforms, from bouncy to deadly ones. We will also learn how to trigger transitions between scenes, how to add bonus objects and so much more. For this course you will need to have installed Unity3D and Visual Studio. I am using Unity version 2020.1, but for this course any should work. Course is beginner friendly and I really try to explain everything that we do in details. If you will have any questions, I will be happy to help. During the course, we will design level 1 and I would love to see you try building level 2.",
      "target_audience": [
        "Beginner Unity developers",
        "Video Game Enthusiasts"
      ]
    },
    {
      "title": "The Complete Unity Multiplayer Bootcamp with C#",
      "url": "https://www.udemy.com/course/unity-multiplayer-intermediate-c-coding/",
      "bio": "Building Online Multiplayer Games with Unity and C#: From Fundamentals to Turn-Based Strategy",
      "objectives": [
        "Learn how to create an online multiplayer game using Unity and C#.",
        "Create simple to complex scripts for multiplayer games using the C#",
        "Gain an understanding of the game development process.",
        "Implement best coding practices for writing maintainable code",
        "Develop strong and transferrable problem solving skills.",
        "Learn the client-server model of making online multiplayer games.",
        "Learn to synchronize game played across various devices"
      ],
      "course_content": {},
      "requirements": [
        "Before starting this course you should understand the basics of Unity. Like saving scenes, navigating the interface, create prefabs and add and modify components inside the inspector.",
        "You should have a understanding of the basics of C#, such as creating variables, modifying those and calling functions.",
        "Mac or PC capable of running Unity",
        "A copy of Unity 2019 or newer",
        "Regular internet access for Q&A and community."
      ],
      "description": "Learn how to create your very own production ready, online multiplayer turn based card game using Unity. We'll be starting from basic multiplayer concepts and creating a production ready turn based online poker game together, which can be published into app stores like Google play store and Apple app store.\n\n\nThis course has been designed to be easily understandable to everyone, only thing which one needs to have is the basic knowledge of Unity and C# as we would be diving into intermediate programming concepts and of course an enthusiasm to learn to create your own online multiplayer games.\n\n\nIn the course we’ll create an online turn based multiplayer poker game but the networking principles and strategies you learn will be applicable to any kind of online game you wish. by the end of the course we would be creating an production ready game having implemented design principles to maintain large codebase and readability of our code.\n\n\nAt the end of this course you will be comfortable with :\nManaging networked games of every genre.\nBasic multiplayer principles guiding a complex game.\nTracking networked players and NPC.\nCreating an in game chat system.\nCreating a Leaderboard System.\nCreate Interactive UI's.\nImplement design principles to large codebases.\nand much more concepts...\nStart learning today and let me help me contribute to your game development journey.\n\n\nWho this course is for:\nStudents interested in learning how to make multiplayer games.\nPeople who want to create and publish their own games.\nThis course is for intermediate Unity users who want to create their own multiplayer games.\nExperienced Game Developers.",
      "target_audience": [
        "Students interested in learning how to make multiplayer games.",
        "People who want to create and publish their own games.",
        "This course is also for those wanting to dive deep into intermediate coding, and program multiplayer experiences using C#"
      ]
    },
    {
      "title": "Oculus Quest and Unity",
      "url": "https://www.udemy.com/course/oculus-quest-and-unity/",
      "bio": "Getting started with VR Game Development",
      "objectives": [],
      "course_content": {
        "Setup Unity and Oculus Quest": [
          "Setup Unity for Oculus Quest Game Development"
        ],
        "Fundamentals of VR Development with the Oculus Quest": [
          "Controls, Hands & Basic Movement",
          "Add Object Grabbing & Interaction"
        ],
        "Best Practices & Quick Tips": [
          "3 Quick Tips to improve development",
          "Debugging Oculus Quest games",
          "Upgrade Oculus Package"
        ]
      },
      "requirements": [
        "A basic understanding of Unity and an Oculus Quest Headset"
      ],
      "description": "If you ever wanted to create your own VR game, now is the best time! The Oculus Quest is the first All-In-One VR headset with no wires and total freedom. With basic knowledge of Unity 3D you are able to create and test your game ideas directly on the Oculus Quest. In this class I will show you how to setup Unity and the Oculus Quest headset to take your first steps in VR game development.",
      "target_audience": [
        "Beginner Unity Game Developers who want wants to start with VR Games and the Oculus Quest as a Headset"
      ]
    },
    {
      "title": "COMPLETE UNITY 3D COURSE (TPC+FPC+ ENEMY AI) BEGINNER TO PRO",
      "url": "https://www.udemy.com/course/complete-first-third-person-course-in-unity-2024-_-beginners/",
      "bio": "Unity third first person controller is a Mega Course created in our studio to give you best experience of learning",
      "objectives": [
        "Students will learn step-by-step how to create any third-person game (from locomotion to shooter) using C# in Unity3D.",
        "Students will learn step-by-step how to create any first-person game (from locomotion to shooter) using C# in Unity3D.",
        "Students will learn step-by-step how to create any Enemy AI (from locomotion to shooter) using C# in Unity3D.",
        "learn how to work with Unity interfaces & How to Work with It",
        "Students will learn the basics of C# programming step-by-step",
        "Students will learn the high level of C# programming step-by-step",
        "Students will learn the step-by-step math and physics of C# programming.",
        "learn how to work with unity animator layers, parameters, behaviors, and much more",
        "Third or First person combat system",
        "Third or First-person Shooter System",
        "Learn how to make a pro Enemy AI (Unarmed, Combat, Shooter)",
        "Learn how to do parkour action and climbing",
        "\"How to Use our Asset in Unity to Create Any Third Person Character\" from any model",
        "Create any third person controller in unity ( unarmed , combat, shooter )"
      ],
      "course_content": {
        "Introduction To the Course": [
          "Introduction To Our Course 1",
          "Presentation",
          "Ready and Easy Asset Included in Our Course"
        ],
        "Download & Setup Unity & Unity Interface": [
          "Downloading Unity & Unity Interface"
        ],
        "Get Our Asset & How to Use It": [
          "Importing Our Asset into Unity & Setup Your Own Character Model",
          "Unity Asset Store and Changing Some Our Asset Models & Animations",
          "TPC_CHANGING INPUTS, INVENTORY, ADD ITEMS",
          "Setup Deferent Parkour Action in Our Asset"
        ],
        "Third Person Locomotion": [
          "Character Customization",
          "Setup Player Camera",
          "Introduction to Unity Input and Player Movement",
          "animator controller set float function and adding the animations to the player",
          "add the rolling and animator set bool function",
          "add crouching to the player",
          "add gravity to the player",
          "introduction to unity classes",
          "add jumping parameters and animation to the player",
          "control the player with joystick - unity input manager"
        ],
        "Third Person Combat System": [
          "Combat system lecture 1 _ Attacking",
          "Scriptable Objects In Unity",
          "Combat system lecture 2 _ attacking 2",
          "Combat system lecture 3 _ Attacking 3",
          "Combat system lecture 4 - attacking 4",
          "Combat system lecture 5 _ Locomotion 1",
          "melee combat attack system",
          "melee combat attack system 2",
          "melee combat running",
          "Melee Combat Dodging"
        ],
        "Inventory System in Unity": [
          "Inventory System Part 1 _ Inventory UI",
          "Inventory System Part 2 _ Coding Inventory"
        ],
        "Simple Enemy AI Zombie": [
          "Zombie Locomotion",
          "Zombie Attacks and Apply Damage To Player"
        ],
        "Third Person Shooter System": [
          "Third Person Shooter Locomotion",
          "Coding & Adjusting Shooter Weapon"
        ],
        "More Content Coming For next 3 Months": [
          "Third Person Shooter System In Unity",
          "Third Person Parkour",
          "Third Person Climbing",
          "Third Person Swimming System in Unity",
          "Third Person Magician System in Unity"
        ]
      },
      "requirements": [
        "no programming or skill is needed for this course",
        "You will get all the necessary information by watching Lectures and Follow Them"
      ],
      "description": "about this course\nEmbark on an exciting journey with our immersive game development mega course, meticulously crafted to empower you in creating captivating third or first-person characters for your games. Gain access to a comprehensive array of top-tier assets, allowing you to personalize your own character controller. The course provides clear and detailed instructions, making the entire process user-friendly and accessible. Whether you're a novice or an intermediate Unity C# programmer, this course is tailored to elevate your skills to a professional level in-game creation.\n\n\nHere's a breakdown of what you'll receive in this mega course:\n1. big knowledge of unity programming using C# language\n2. learn the physics and math's of programming   in Unity\n3. learn how to work with Unity interfaces\n4. learn how to work with unity animator layers, parameters, behaviors, and much more\n5.learn how to create third person or first person any type of game's\n6.learn how to create pro enemy ai foe your games any type ..\n6. Lion Studio TPS asset: A top-quality asset to enhance your game development capabilities.\n7. Beginner documentation: Comprehensive materials perfect for those new to game development.\n\n\nand much more\nyou can connect with us for any information issues or questions on our discord server\nmy site is invitation link to my discord server\nEnjoy your learning experience!",
      "target_audience": [
        "beginners , will learn step by step C# Programming to become expert",
        "beginners, will learn step by step unity input manger, animator, interface, math and physics of programming",
        "intermediates, will improve their skills in C# Programming, Math's & Physics to become expert"
      ]
    },
    {
      "title": "Create an Auto Battler Card Game on the Flow Blockchain",
      "url": "https://www.udemy.com/course/create-an-auto-battler-card-game-on-the-flow-blockchain/",
      "bio": "Build an auto battler style card game using the Unity game engine and the Flow blockchain",
      "objectives": [
        "Create a 2D Game with Unity",
        "Drag and Drop mechanics",
        "Advanced Unity UI",
        "Blockchain integration using the Flow blockchain"
      ],
      "course_content": {
        "Welcome!!!": [
          "Introduction to the course"
        ],
        "Introduction": [
          "Getting Started",
          "I Can't Contain Myself",
          "Buttons",
          "The Card",
          "The UICard Script",
          "The Draw Button",
          "Draw String",
          "Draw UI",
          "What a Drag",
          "Card Controller",
          "Character Prefab",
          "Game Architecture",
          "Refactor",
          "End Drag",
          "Card Drag Game State",
          "Render Field",
          "Character Drag",
          "Mana"
        ],
        "To Battle!": [
          "Battle Field",
          "Battle Character",
          "Battle Systems",
          "Battle Manager",
          "Battle Auto",
          "Battle States",
          "More Battle States",
          "Battle Over",
          "Auto Battle",
          "Team Database",
          "Seed Team Database",
          "Real Battles",
          "Real Battles Cont."
        ],
        "The Flow Blockchain": [
          "Getting Started",
          "Contract Minions",
          "Display Minions",
          "Update Minions",
          "Deploy to Testnet"
        ],
        "Flow / Unity Integration": [
          "The Flow Unity SDK"
        ],
        "Beginning of the End...": [
          "End Game",
          "Game Over"
        ],
        "Additional content - Unity Beginner Course": [
          "Installs",
          "The Unity Editor",
          "Getting Physical",
          "Your First Script",
          "Scenes and GameObjects",
          "Variables",
          "Finished Basic Training!"
        ]
      },
      "requirements": [
        "C# and Unity experience required, this is an intermediate to advanced course"
      ],
      "description": "Create an Auto Battler Card Game using Unity and C#. Then learn how to use the Flow Blockchain to enhance your game.\nWhat you'll learn:\n\n\nHow to use the Unity Editor\nC# Scripting\nAdvanced Unity UI\nDrag and Drop mechanics\nScriptable Objects\nWhat’s included:\n\nUnique character and environment art usable in your own projects\nFull source code to the finished game\nCertificate of completion\nThis course will take you from zero to hero in just a few hours.\nWant to add blockchain functionality to your game but didn't know where to start?  This course has you covered!\n\n\nTestimonials from other courses:\nExactly what I was looking for. Hooks, canvas, and roguelikes. Lots of good design patterns as well, at least so far. I will be going through this course but trying to implement the features using typescript. Please continue with another intermediate course. Thanks much.\nAlex Barber\nVery cool what you can do in under 3.5hrs! Morgan breaks down core concepts and gives you an overview of all the tooling needed to be successful with your game idea. Nice pacing and fairly comprehensive! Would love to see a more in dept discussion about grouping and managing assets and resources in both Tiled and Phaser. Great Tutorial!\nTech Ninja | Web & IT",
      "target_audience": [
        "Unity game developers that want to know how to build an autobattler and optionally add some blockchain functionality."
      ]
    },
    {
      "title": "Unreal Engine 5.6 - Build an RPG using Lyra Framework",
      "url": "https://www.udemy.com/course/unreal-engine-56-build-an-rpg-using-lyra-framework/",
      "bio": "Create Melee, Archer and Magic Abilities along with Artifical Intelligence for the enemies using State Trees",
      "objectives": [
        "Understand and use Unreal Engine 5.6 Lyra Framework Features",
        "Hands-On experience in Lyra Framework with Step-Step instructions",
        "Learn to develop Melee, Archer and Magic abilities",
        "Customize Skeletal Meshes and create unique assets for games",
        "Automate Level Building for the Game Environment"
      ],
      "course_content": {
        "Introduction": [
          "Course Promotional Video",
          "Introduction",
          "About the Course",
          "Release Notes",
          "How to get help ?",
          "Unreal Engine Fundamentals"
        ],
        "Creating a new RPG Experience": [
          "Visual Studio Installation",
          "Download Lyra Starter Game",
          "Build Lyra Starter Game",
          "Create Game Feature Plugin RPGCore",
          "Add Input Mapping",
          "Hero Pawn Data",
          "RPG Experience"
        ],
        "Light weight Lyra Locomotion System": [
          "Locomotion System - Animation Layers - Idle State",
          "Locomotion System - Animation Layers - Cycle State",
          "Locomotion System - Orientation Warping",
          "Locomotion System - Stride Warping",
          "Customize Character Mesh - Skeletal Mesh Editor",
          "Feedback Time"
        ],
        "Environment Creation": [
          "Overview of the RPG Environment",
          "Overview of the Eastern Village Asset",
          "Download Ulag Snap Swap - Free Educational Version",
          "Setup Instructions - Ulag Snap and Swap",
          "Introduction to Ulag Snap and Swap - Level Creation Automation",
          "Making Reusable Blueprint Prefabs from Existing Environment",
          "Complete Environment Creation",
          "Environment Lighting",
          "Feedback Time"
        ],
        "Creating a Great Sword Weapon": [
          "Introducing the Great Sword",
          "Free Blender Add-On to add Root Bone to Mixamo Animations",
          "Animation Layer for Great Sword - Adding Root Bone to Animations",
          "Animation Layer for Great Sword - Settings",
          "Weapon Equipment Definition - Great Sword",
          "Weapon Equipment Definition - Actors to Spawn - Great Sword",
          "Weapon Inventory Definition - Great Sword",
          "Initial Inventory Item",
          "Fix - Initial Inventory Item"
        ],
        "RPGStats - LyraAttributeSet": [
          "Adding the HUD and Health Bar",
          "C++ Changes and PDF Documentation",
          "Creating RPG Stats Attribute and New HealthComponent (C++)",
          "Gameplay Effect Self Damage and Heal",
          "Death Effect",
          "Auto Re-Spawn",
          "The Stamina Attribute"
        ],
        "Creating a Melee Attack Ability": [
          "Gameplay Ability - Basic Attack",
          "Lose and Gain Stamina",
          "Character Lighting",
          "Bot Spawner Component",
          "Sword and Shield Enemy",
          "Sword and Shield Enemy - Continued",
          "Sword and Shield Enemy - Continued2",
          "Dynamic Player and Enemy Spawn Location (C++ Changes)",
          "Dynamic Player and Enemy Spawn Location",
          "Advanced Melee Attack with Interruption",
          "Advanced Melee Attack with Interruption - Continued",
          "Gameplay Effect - Enemy Damage",
          "Damage Popup Numbers",
          "Enemy Death"
        ],
        "Artifical Intelligence and State Trees": [
          "Player Vs Enemies",
          "Adding a Nav Mesh Bounds Volume",
          "Base Enemy AI Controller",
          "Patrol Locations",
          "Enemy Patrol State",
          "AI Perception",
          "AI Focus State",
          "Enemy Strafe Behavior",
          "Enemy Attack Behavior"
        ],
        "Creating an Archer Ability": [
          "Getting Animations for the Archer",
          "Locomotion for Archer",
          "Extracting Bow and Arrow",
          "Bow Actor and Animation Blueprint for the Bow",
          "Bow Inventory Item",
          "Gameplay Ability Bow Aim",
          "Gameplay Ability Bow Aim - Continued",
          "Gameplay Ability Bow Aim - Continued2",
          "Gameplay Ability Bow Fire",
          "Gameplay Ability Bow Fire - Cooldown Effect",
          "Bow - Aim Offset",
          "Arrow - Niagara Effect",
          "Bow Weapon - Reticle Configuration",
          "Arrow - Damage",
          "Damage - Niagara Effect"
        ],
        "Creating the Inventory Quick Bar": [
          "Adding the Quick Bar Widget"
        ]
      },
      "requirements": [
        "Basic Knowledge in Unreal Engine and using the Editor",
        "Basic Knowledge in the Unreal Engine Lyra Framework or Already Completed my First Lyra Course",
        "Lots of Interest to learn modern approaches in Game Development",
        "Windows PC with modern Graphics card which supports Unreal Engine Game Development"
      ],
      "description": "In this Course, You will learn techniques to build your own Single Player RPG game using the Lyra Framework in Unreal Engine 5.6.\nOnly Free Assets are used in this course from the FAB Marketplace and Mixamo website.\nCourse is currently in the Release-1. This Course will be updated with new features in the subsequent releases.\nThis Course is Step-By-Step and to the point. A new Game Feature Plugin RPGCore will be created from Scratch.\nYou will get a very good Hands-On experience by using different features in the Lyra Framework using practical usecases.\nAlong with Lyra Framework, you will also learn innovative techniques to Customize Marketplace assets, Convert Cascade effects to Niagara, and also work in a Professional Level Creation Automation Tool created by myself. I have provided my Ulag-Snap and Swap Tool (Universal Modular Asset Automation) Completely Free for Learning purpose. It is a Blueprint based tool which you can research upon.\n\n\nCurrent Features in the Release 1\nA Light Weight Lyra based Locomotion System which uses Root Motion based animations from Mixamo. Different animation layers for the Weapons.\nLearn how to modify and Customize the Skeletal Meshes and also create weapons.\nAdding RootBone and Retargeting the Animations for different skeletal Meshes.\nUsing the Lyra Equipment manager and Lyra Inventory System for the Weapons.\nAdding the QuickBar for the Widgets\nCreating a new light weight LyraAttributeSystem RPGStats for the Gameplay Ability System with Health and Stamina. Easily Extendable for other needed Attributes.\nReusing the Health Manager and Customizing it to the new RPGStats Attribute system.\nLearn to use Gameplay Effects in a practical way.\nDeath and Respawn abilities\nAdvanced Melee Ability using Animation Notifies and Gameplay Events with Weapon Trace\nPlayer Vs Enemies\nImplementing a Configurable Dynamic Player and Enemy Spawn locations.\nArtificial Intelligence using State Trees\nPatrol, Defence and Attack States\nDamage Popup Numbers and Gameplay Cues\nAdvanced Bow and Arrow System\nConvert Cascade Particle effects to Niagara Effects\nCreating a Front End Screen with Background Level and Character.\nUI Materials and Animations.\nCreating RGBA Masks based Logo like in Lyra.\nEnvironment Level Creation and Automation using Ulag Snap and Swap Tool.\n\n\nThis Course is different from other Unreal Engine Courses. If you are looking for a step by step course in Unreal Engine for Game Development , this course is not for you. The Core focus is on the Unreal Engine 5.6 Lyra Framework and made exclusively for Game Developers who research in the Lyra Framework.\nAlso, Even if you are a complete beginner to Unreal Engine, You will still love this course if you are interested in research and eager to learn modern aspects of Game development and innovation while you continue your Self-Learning in Unreal Engine.",
      "target_audience": [
        "Unreal Engine Game Developers who are interested to know more about the Lyra Framework",
        "Game Developers who are looking for Hands-on Experience using the Lyra Framework and get familiar with it",
        "Researchers who like to explore modern approaches to Game development.",
        "Anyone with lots of interest in Game Development and wants to try something new and keen on improving the research skills",
        "Game Developers and Technical Architects from different domains looking to learn about innovative tools",
        "Environment Artists interested in Automation of Level Creation"
      ]
    },
    {
      "title": "Artificial Intelligence & Augmented Reality in Unity & Xcode",
      "url": "https://www.udemy.com/course/artificial-intelligence-augmented-reality-in-unity-xcode/",
      "bio": "Explode Your Games And Apps To A Professional Level. Learn From Scratch: Build AI and ARKit Projects With C# and Swift",
      "objectives": [
        "Learn to code for game development in Unity C#.",
        "Make a game that uses artificial intelligence.",
        "Use a navigation mesh to add pathfinding logic to your game.",
        "Learn cutting-edge tools that will put you ahead of other game developers!.",
        "Developers who want an introduction to Swift 4 and Xcode 9."
      ],
      "course_content": {
        "Introduction to Unity": [
          "Introduction",
          "Unity Editor",
          "Moving a Cube",
          "Materials",
          "Lights",
          "Particle System",
          "Applying Physics",
          "Asset Store"
        ],
        "Introduction to Coding": [
          "Introduction",
          "Variables",
          "Methods",
          "If Blocks",
          "Loops"
        ],
        "Introduction to Inputs": [
          "Introduction",
          "Key Presses",
          "Moving a Player",
          "Jumping",
          "Moving Forward",
          "Cycling Cameras"
        ],
        "Introduction to Prefabs": [
          "Introduction",
          "Introduction to Prefabs",
          "Random Angles",
          "Explosion Effects",
          "Adding explosion effects"
        ],
        "Make a Unity Game Powered by Artificial Intelligence": [
          "Gameplay",
          "Introduction",
          "Project Setup",
          "Building an Enviroment",
          "Camera Follow",
          "Raycasts",
          "Navmeshes",
          "Navmesh Agent",
          "Adjusting Agent Types",
          "Agent Steering",
          "Slopes",
          "Minerals",
          "Mining Ore",
          "Transparency",
          "Interface and Tutorial",
          "Integrating Sounds",
          "Challenge",
          "Source Code and Art Assets - Mammoth Interactive"
        ],
        "Downloading Xcode": [
          "If You Don't Have a Mac Computer",
          "How to Download Xcode 9",
          "Note That Beta is Free"
        ],
        "Variable and Constants": [
          "Learning Goals",
          "Introduction to Variables and Constants",
          "Primitive types",
          "Strings",
          "Nil Values",
          "Tuples",
          "Type Conversions",
          "Assignment Operators",
          "Conditional Operators",
          "Swift Source Files - Variables and Constants from Mammoth Interactive"
        ],
        "Collection Types": [
          "Learning Objectives",
          "Introduction to Collection Types",
          "Creating Arrays",
          "Common Array Operations",
          "Multidimensional Arrays",
          "Ranges",
          "Swift Source Files - Collection Types - Mammoth Interactive"
        ],
        "Control Flow": [
          "Topics List and Learning Objectives",
          "'If' and 'Else' Statements",
          "'Else If' Statements",
          "Multiple Simultaneous Tests",
          "'Switch' Statements",
          "Advanced Switch Statement Techniques",
          "Testing for Nil Values",
          "'While' Loops",
          "'For...In' Loops",
          "'For...In' Loops 2",
          "Complex Loops and Loop Control statements",
          "Swift Source Files - Control Flow from Mammoth Interactive"
        ],
        "Functions": [
          "Introduction to Functions",
          "Function Parameters",
          "Return Statements",
          "Parameter Variations - Argument Labels",
          "Parameter Variations - Default Values",
          "Parameters Variations - InOut Parameters",
          "Parameter Variations - Variadic Parameters",
          "Returning Multiple Values Simultaneously",
          "Swift Source Files - Functions from Mammoth Interactive"
        ]
      },
      "requirements": [
        "Download and Install Unity, Blender, and Xcode. For Part 2, you will need MacOS software to use Xcode."
      ],
      "description": "Make Smart Navigation With AI For Game Development. Build Your First Augmented Reality Mobile Apps.\n\nPut yourself in the shoes of future-you 10 years from now. Imagine all the games and apps that will have come out over the decade. Simple arcade games filled with colorful, nostalgic pixel art, hyper-realistic virtual reality masterpieces, blockbuster AAA games, you name it. Which of them do you wish you had made?\nThis course was made possible by a #1 Kickstarter project supported by the Mammoth Interactive community.\nCode in C# to create games in Unity\nLearn to build games with artificial intelligence\nUse a navigation mesh to add pathfinding logic to your game\nCreate augmented reality apps with Xcode and Swift\nLearn cutting-edge tools that will put you ahead as a developer\nAnd much more\nEnroll Now In This Huge Collaborative Course\nJoin this course to learn with several Mammoth Interactive instructors how to develop games and apps. In Part 1, you will learn how to explode your games to professional level by using Navmeshes. With artificial intelligence your ship character will learn to explore a planet.\nThe ship will travel around craters, rocks, aliens and buildings in a 3D world. You will make a good pathfinding system to find the best path for the player to navigate to wherever you click.\nIn Part 2, you will learn how to implement augmented reality into iOS apps. We will give you a thorough introduction to coding for Apple. If you want to make games or apps for the iPhone or iPad, learning to code in the Swift programming language is crucial, and you can do so in this course.\n\nIncluded in this course is material for beginners to get comfortable with the interfaces. Please note that we reuse this content in similar courses because it is introductory material. You can find some material in this course in the following related courses:\nMake a Starship Unity Game Powered by Artificial Intelligence\nThe 2D, 3D & AI Games Frontier: NavMesh, Unity & Illustrator\nLearn ARKit: Make an Augmented Reality App\nAll Levels Android and ARKit Developer Guide\nFrom a Mammoth Interactive Interview with Glauco Pires:\n\"The good thing about creating courses is the reach you can achieve with the Internet. One of the best things I’ve seen in my entire career was a review from a student, who lives in another country and was really satisfied about the lessons.\nHe is a father of two kids, and throughout the course, he showed them the results of his learning process. They even had the chance to compare the game he made with the games the kids played at their game consoles.\nBeing able to make a difference in people of all ages and provide fun, family moments like this is something that makes working with games really worth it.\"\nBe Inspired\n\nEnroll now to start your developer journey.",
      "target_audience": [
        "Take this course if you want to be a game developer with unique skills.",
        "Take this course if you want to make games with smart automated features."
      ]
    },
    {
      "title": "Learn Unity® 2018 and C#: Develop Professional Videogames",
      "url": "https://www.udemy.com/course/develop-professional-videogames-with-unity-2018-and-c/",
      "bio": "Learn Unity & C# programming a 3D platformer game from zero until the final boss fight and the monetization in Android",
      "objectives": [
        "Learn the work with Unity and C# from zero in a practical way",
        "Learn the programming methodology",
        "Create and programming a 3D platformer videogame with all the professional aspects",
        "Programming the main character",
        "Programming diferent kinds of enemies with artificial intelligence",
        "Advanced systems of the game such as: items, life systems, obstacles, UI elements, checkpoints, scene navigation, etc...",
        "Programming a final battle with a boss fighting",
        "Virtual controls to mobile devices",
        "Ads insertions to monetize the game"
      ],
      "course_content": {
        "Level & Player Set Up": [
          "101 - Section01 Overview",
          "102 - Initial Considerations",
          "103 - Build the first platform",
          "104 - Introduction to components",
          "105 - Player Set Up",
          "106 - Player horizontal movement",
          "107 - Flip the Player",
          "108 - Player Idle Animation",
          "109 - Player Running Animation",
          "110 - Programing the camera follow",
          "111 - Programing the Jump",
          "112 -Jumping Animation",
          "113 - Programing the Attack",
          "114 - Attack Animation",
          "115 - Animation Event for the Attack",
          "116 - Expand the level"
        ],
        "Programing the first enemy": [
          "201 - Section 02 Overview",
          "202 - Enemy01 Set Up",
          "203 - NavMeshAgent to follow player",
          "204 - Fix Enemy Move Bugs",
          "205 - Enemy01 Animation clips",
          "206 - Enemy01 Idle and Walking Animations",
          "207 -Creation of a GameManager",
          "208 -Enemy01 Attack Function",
          "209 - Player Damage",
          "210 - Player Dead",
          "211- Enemy Damage 01",
          "212- Enemy Damage 02",
          "213- Player HealhtBar",
          "214- Add Audioclips",
          "215 - Student Audio Challenge"
        ],
        "Programming the second enemy (Shooter)": [
          "301 - Section03 Overview",
          "302 - Enemy02 Setup",
          "303 - Programming the attack functionality",
          "304 - Programming the arrow projectile",
          "305 - Programming the damage"
        ],
        "Items": [
          "401 - Section 04 Overview",
          "402 - Creating a Health Item",
          "403 - Programming a Health Item",
          "404 - Create a 3d Item",
          "405 - Create a particle system",
          "406 - Programming the PowerItem 01",
          "407 - Programming the PowerItem 02",
          "408 - Explosion FX for item pick up",
          "409 - Enemies drop items"
        ],
        "Advanced Details": [
          "501 - Section 05 Overview",
          "502 - Mobile platform set up",
          "503 - Mobile platform programming",
          "504 - Create and program a killBox",
          "505 - Respawn Player 01",
          "506 - Respawn Player 02",
          "507 - Respawn Player 03",
          "508 - Respawn Player 04",
          "509 - Multiple Checkpoints",
          "510 - Player Life System",
          "511 - Start screen set up",
          "512 - Start screen programming",
          "513 - GameOver Screen",
          "514 - Fix GameManager issue",
          "515 - Life Item"
        ],
        "Enemy Spawner": [
          "601 - Section 06 Overview",
          "602 - Enemy Cave Set Up",
          "603 - Create animations for EnemyCave",
          "604 - Programming EnemyCave",
          "605 - Enemy spawn type set up",
          "606 - Enemy spawn type health",
          "607 - Programming the spawner",
          "608 - Add music for the game",
          "609 - Programming the pause function"
        ],
        "Battle with the Final Boss": [
          "701 - Section 07 Overview",
          "702 - Boss Set Up",
          "703 - Boss CheckPoint",
          "704 - Boss Awakening Set Up",
          "705 - Programming the camera for the battle",
          "706 - Boss Initial Animations",
          "707 - Reactivate the player movement",
          "708 - Boss Attack System Initial Set Up",
          "709 - Boss Health Script",
          "710 - Boss Attack System",
          "711 - Boss Life Meter Set Up",
          "712 - Boss Life Meter Programming",
          "713 - Boss Attack01 Animation",
          "714 - Boss Reset",
          "715 - Programming the second and third attack",
          "716 - Programming the falling rocks",
          "717 - Programming player rock damage",
          "718 - Programming the random attacks",
          "719 - Hurt and dead boss animations",
          "720 - Disable component for the dead boss",
          "721 - Change the Boss material",
          "722 - Change the Battle music"
        ],
        "Mobile Device implementation": [
          "801 - Section 08 Overview",
          "802 - Instert a video cutScene",
          "803 - Export to windows",
          "804 - Joystick Mobile Device",
          "805 - Buttons Mobile Device",
          "806 - SetUp for Android Export",
          "807 - Implement Adds and apk build"
        ]
      },
      "requirements": [
        "Basic skills in computer",
        "Managing digital files",
        "Self interest in game develop and programming",
        "Clear and logic thinking",
        "Unity3D software (personal edition)"
      ],
      "description": "This course was designed so the students can master the elements of a professional 3D platformer videogame in Unity and with the C# language.\nIn this course you will see the complete functionality of Unity, the programming methodology and the C# language from zero.\nComplete characters functionality, attack systems, graphic user interfase, life systems, navigation, final boss battle and virtual controls for mobile device and monetization.",
      "target_audience": [
        "This course goes to any person who has interest in game development",
        "The student can take this course without any previous knowledge of Unity or programming",
        "If the student has already some knowledge in Unity or programming, this course can help him to improve their skills"
      ]
    },
    {
      "title": "JavaScript Math Games project for learning code from scratch",
      "url": "https://www.udemy.com/course/javascript-math-game/",
      "bio": "JavaScript Game - Explore how YOU can create a fully dynamic Interactive Math Game From Scratch using JavaScript",
      "objectives": [
        "How to apply JavaScript to create an interactive dynamic Math Game",
        "How to create a JavaScript Game",
        "How to use JavaScript to create game play",
        "How to make calculations with JavaScript",
        "How to create elements on the page",
        "How to add interactions to game for player",
        "How to create and generate dynamic Games and randomize content",
        "How to apply Styling to make interesting Games"
      ],
      "course_content": {
        "JavaScript Game Course Introduction to developing a Math Game with JavaScript": [
          "Introduction to creating a JavaScript Math game Math Game Introduction",
          "Source Code for Game Setup and Resources"
        ],
        "JavaScript Introduction to methods and code used to build the game": [
          "Course tips Tools and Resources",
          "How JavaScript querySelector Objects work code example and demo",
          "JavaScript QuerySelector Example Code",
          "How to create HTML elements JavaScript CreateElement Object",
          "Document CreateElement Example Code",
          "How to randomize values in JavaScript Math Random Example",
          "Code Example Math Random in JavaScript",
          "How to use the array sort method JavaScript example Array Sort Method Random.",
          "Array Sort Method Random Sort Array JavaScript Code Example"
        ],
        "Creating a JavaScript Math Game from scratch": [
          "How to setup Math Game HTML code setup and JS Setup of Game HTML JS",
          "JavaScript Game Setup Game Variables and Objects",
          "Setup Game Board Source Code",
          "How to create Game play Start the Game with JavaScript Start Function",
          "Source Code Math game",
          "How to create and Build Question Screen using JavaScript Code",
          "Source Code Randomize Question Options",
          "JavaScript Game Tweaks and Adjustments.",
          "Game Updates adjustments source Code",
          "How to create Player Interactions Question to Player",
          "CSS and Player Question Inputs Source Code",
          "How to apply Game Logic Correct check Check Answer Respond",
          "Enter answer options Source Code",
          "How to check Correct Answers within Math Game",
          "Answer Check Source Code",
          "JavaScript Math Game apply Game Updates and Fixes",
          "Source Code Game Updates",
          "How to add scoring to JavaScript Math Game Game Scoring.",
          "Add Game scoring Source Code",
          "How to get and provide feedback within Game Question Feedback",
          "Update Next Question Options Source Code",
          "Game updates more gameplay making it dynamic Play Game Add options.",
          "Source Code game updates",
          "How to add on to the Math Game all questions Version 2 Updated Version Game",
          "Version 2 All questions on Screen Source Code",
          "Version 2 JavaScript Math Game Question List on Page Version 2 Full Page Game",
          "Version 2 Final Source Code",
          "JavaScript Math Game Review Improvements and code updates",
          "How to create a CSV file from array data using JavaScript Create CSV File",
          "Source Code addition Scoring and Tracking of scores",
          "How to download a CSV file for Game scoring Download CSV File Score.",
          "Create CSV for scoring and tracking test questions",
          "How to add game restart and next game options Restart of Game Bug Fixes",
          "Source Code final Bug Fixes",
          "JavaScript Game Math game final Code Review.",
          "Final Game Code JavaScript Math Game"
        ],
        "JavaScript Code Examples Source Code and Question Responses": [
          "How to use JavaScript Array Methods",
          "Array Methods Coding Examples Add and update Array items code snippet",
          "Array Filter and cleaning",
          "Source Code example filter array values",
          "Additional resources and guide in PDF format to help with learning more."
        ]
      },
      "requirements": [
        "Knowledge of HTML CSS and JavaScript are required",
        "Prior coding experience is required"
      ],
      "description": "Put you JavaScript skills to the test - create a fully functional Math game from scratch - perfect for kids to learn math. Test your kids or anyone who wants to put their math skills to the test, math skills with a dynamic math quiz game built with JavaScript.\nThe lessons of this course will walk you through all the steps to create a fully functional Math game which you can set the parameters.  Top max values in the quiz, number of questions, which operators are presented and even which value in the question will be the missing one.\nJavaScript can be used to create flexible learning games that run directly in your browser.\nSource code is included  so you can create your own version of the game.\nStep by step in game development and planning next functions needed for gameplay.  This is a unique format in learning and applying code to create a REAL WORLD project from start to finish.  Options are also presented YOU Decide what you want in YOUR game.\nExplore how to\nCreate elements with JavaScript\nSelect elements from HTML content\nApply math and conditions for logic\nCreate Randomized outcomes, random array values and more\nApply scoring and logic to output player stats\nApply Game development knowledge to build sequential progress in the game\nNext steps with player messaging and provide player feedback\nCreate different versions of the game showing 1 question or all questions on the screen\nPlayer feedback on response\nBuild a fully dynamic game board selecting the parameters and generate the question.\nTaught by an instructor with over 20 years of web development experience ready to help you learn more about JavaScript\nWhat are you waiting for join now and build you own version of the game.",
      "target_audience": [
        "JavaScript developers",
        "JavaScript coders",
        "Web applications developers"
      ]
    },
    {
      "title": "JavaScript Alien Invaders Game Project Course",
      "url": "https://www.udemy.com/course/javascript-game-project-course/",
      "bio": "Learn JavaScript by applying JavaScript to build a fun interactive Game based on DOM element interaction",
      "objectives": [
        "How to use JavaScript",
        "How to create elements dynamically",
        "Manipulate elements using JavaScript",
        "Explore JavaScript Document Object Model"
      ],
      "course_content": {
        "Introduction to creating JavaScript DOm game from scratch": [
          "Alien Invader JavaScript Game Introduction"
        ],
        "Create JavaScript DOM Game Alien Invaders": [
          "Game Play Setup using HTML and JavaScript",
          "Code setup source",
          "Start Game Action adding JavaScript Event handlers",
          "Source Code",
          "Move Player Keyboard with Keyboard events JavaScript",
          "Source Code",
          "Starting the Game - Game structure and design JavaScript",
          "Source Code",
          "Container Boundary - moving and animation of character JavaScript",
          "Source Code",
          "Fire Away Shooting element style updates JavaScript",
          "Source Code",
          "Start Game Prep Aliens - creating the bad guys JavaScript",
          "Source Code",
          "Create some Alien dynamically add elements to page JavaScript",
          "Source Code",
          "Add Eyes and Features and more complex element structures JavaScript",
          "Source Code",
          "Lets Get Moving animation and movement of aliens JavaScript",
          "Source Code",
          "Tweaks and Fixes apply gameplay fixes",
          "Source Code",
          "Hit Detection collision detection of element overlap JavaScript",
          "Source Code",
          "Hit Target handle element overlap JavaScript",
          "Source Code",
          "Final Code Tweaks and Updates and debugging JavaScript",
          "Source Code",
          "Quick Fix Alien Count - JavaScript",
          "Source Code",
          "Alien Invader Code Review - Game review JavaScript"
        ],
        "Bonus Section": [
          "Bonus Lecture",
          "Expanded Educational Content: Access to Downloads, Applied Examples, and Further"
        ]
      },
      "requirements": [
        "Fundamental JavaScript concepts",
        "Access to computer",
        "Use of editor to write code",
        "HTML and CSS knowledge"
      ],
      "description": "HTML CSS and Fundamental JavaScript IS a prerequisite for this course.\nCourse scope is to practice and explore how to apply JavaScript to build an interactive web based game from scratch\nLearn and see how element can be selected and manipulated to create game effects and animations.  Apply logic to construct the game in a step by step format.\nThis is a FAST PACED course DESIGN FOR STUDENTS WHO WANT TO SEE JAVASCRIPT APPLIED IN A PROJECT FORMAT\nSource code is included so you can build your own version of the game. Step by step lessons constructing the game from a blank page.\nCourse covers\nDOM element selection and element manipulation\nUpdate of style attribute and screen position\nUse of JavaScript methods like Math(), getBoundingClientRect() and others\nCheck element collision detection\nAdding keyboard event listeners and tracking them\nUse of animation frame for smooth animations\nTracking and movement of page elements\nApply JavaScript to create a web based game\n\n\nNo libraries, no shortcuts just learning JavaScript making it DYNAMIC and INTERACTIVE web application.\nStep by step learning with all steps included.\nBeginner JavaScript knowledge is required as the course covers only JavaScript relevant to the building of the game.  Also HTML and CSS knowledge is essential as scope of this course is all JavaScript focused.\nAlong with friendly support in the Q&A to help you learn and answer any questions you may have.\nTry it now you have nothing to lose, comes with a 30 day money back guarantee.\nStart building your own version of the game today!!!!",
      "target_audience": [
        "Beginners to JavaScript",
        "Anyone who wants to practice writing JavaScript",
        "Web developers",
        "Anyone who wants to learn to make a JavaScript game without any libraries",
        "Beginners to JavaScript curious about Document Object Model and JavaScript Methods"
      ]
    },
    {
      "title": "Create a Full 3D Top Down Shooter in Godot 4",
      "url": "https://www.udemy.com/course/create-a-full-3d-top-down-shooter-in-godot-4/",
      "bio": "We will make a zombie horde shooter, covering aspects like Scripting, UI, Level Design and Animations",
      "objectives": [
        "Build a complete, playable 3D top-down zombie shooter in Godot 4 from the ground up.",
        "Program smart zombie AI with pathfinding and attacking behaviors.",
        "Design a modular weapon system for easily adding new guns and abilities.",
        "Create robust game systems for health, damage, and a dynamic user interface (UI).",
        "Import 3D models and animations from Blender and integrate them into Godot.",
        "Accelerate your workflow using Godot plugins for rapid and professional level design.",
        "Structure your project for scalability, making it easy to expand with your own ideas."
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Core Gameplay": [
          "Setting Up the Scene",
          "Player Movement & Aiming",
          "Shooting Bullets",
          "Enemy Navigation & Follow",
          "Enemy Health & Healthbar",
          "Enemy Spawner",
          "Gun Muzzle Flash",
          "3D Camera Shake Effect"
        ],
        "Modular Gun System": [
          "Weapon Data System",
          "Projectiles For Modular Weapons",
          "Picking Up Weapons",
          "Creating a Second Weapon",
          "Player Inventory",
          "Shotgun Shell Spread",
          "Weapon Firing Modes",
          "Weapon Ammo"
        ],
        "User Interface & Interactivity": [
          "Weapons Display",
          "Generating Icons For 3D Weapons From Godot",
          "Adding Icons to Weapon Data",
          "Selected Weapon Indicator",
          "Ammo Amount Display",
          "Click on Button To Select Weapon",
          "Switch Weapons with Mouse Wheel",
          "Adding Health Component to Player",
          "Player HealthBar"
        ],
        "Designing a Level for our Game": [
          "Installing the Scatter Plugin",
          "Placing our First Platform",
          "Adding Trees",
          "Placing Rocks",
          "Elevated Platform",
          "Placing Grass",
          "Final Touches",
          "Level Boundaries",
          "Level Polish (1)",
          "Level Polish (2)"
        ],
        "Character Models and Animations": [
          "Fixing Mixamo Animations in Blender",
          "Giving Our Enemy a Mesh",
          "Incorporating Animations to the Enemy Model",
          "First Attacking Animation for Zombie",
          "Designing a More Complex Zombie Animation",
          "Zombie Animations Affecting the Gameplay",
          "Fixing the Player Animations",
          "Adding a Player Mesh",
          "Adding Player Walking Animation",
          "Placing the Weapon in Player Mesh Hands",
          "Game Final Polish (1)",
          "Game Final Polish (2)"
        ]
      },
      "requirements": [
        "No prior knowledge required to follow along"
      ],
      "description": "Unleash the horde! Learn Godot 4 by building a complete, modular, and action-packed 3D game from scratch.\nReady to dive into 3D game development with the powerful and free Godot Engine?\n+ Welcome to the most thrilling way to learn Godot 4! In this hands-on, project-based course, you’ll build a fully functional 3D Top-Down Zombie Shooter from start to finish. No boring theory—just practical, step-by-step creation that will give you the skills and confidence to build your own games.\n+ Your instructor, Ahmed, will guide you through every part of the process, ensuring you understand not just the \"how\" but also the \"why\" behind each decision. You'll end up with a fantastic portfolio piece that you can play, share with friends, and use as a foundation for your own original game projects.\nBy the end of this journey, you will have mastered:\nCore Gameplay: Code responsive player controls for movement and shooting.\nEnemy AI: Bring the world to life with hordes of AI-controlled zombies.\nGame Systems: Implement health, damage, and a dynamic UI.\nModular Design: Build a flexible weapon system to easily expand your arsenal.\n3D Asset Pipeline: Learn to import and use 3D models and animations.\nLevel Design: Use built-in tools and plugins to create engaging levels.\nWho is this course for?\n+ Absolute Beginners looking for a fun, structured project to start their game dev journey.\n+ Hobbyist Developers from other engines (like Unity or Unreal) who want to explore Godot 4.\n+ Programmers who know how to code but want to learn the specifics of Godot and GDScript.\n+ Anyone who wants to create a cool zombie game and learn valuable, transferable game development skills!\nBy the end of this course, you won't just be following tutorials—you'll be a confident Godot 4 developer with a complete game and the knowledge to build your next big idea.\nEnroll now and let’s start building your zombie-slaying masterpiece!\nWho this course is for:\nAspiring game developers who want to learn Godot 4 through a fun, project-based approach.\nBeginners with little to no coding experience looking for a clear and guided introduction to game development.\nDevelopers from other engines curious about the workflow and power of Godot 4.\nAnyone who wants to create a portfolio-ready 3D game and understand the complete development process.\nRequirements\nA computer capable of running Godot 4 and Blender (both free).\nA willingness to learn! No prior Godot or game development experience is required.",
      "target_audience": [
        "Absolute Beginners to Game Development",
        "Developers New to Godot from Other Engines"
      ]
    },
    {
      "title": "Unity Games Automation Testing For Game Testers & Developers",
      "url": "https://www.udemy.com/course/games-automation-testing/",
      "bio": "Unity Game Testing Made Easy: Build and Run Automated Tests with AltTester® and C#",
      "objectives": [
        "Learn AltTester® SDK automation tool for games testing.",
        "Learn to install all required tools and software.",
        "Design & Develop unity games automation testing framework.",
        "Understand AltTester® Desktop server components.",
        "Learn AltTester® important APIs.",
        "Understand the key properties of AltObject.",
        "Convert repetitive manual tests into automation scripts.",
        "Game automation testing using a project case study.",
        "Understand the basics and definitations of Unity components.",
        "Learn how to build and run WebGL builds on various servers."
      ],
      "course_content": {},
      "requirements": [
        "It is assumed that learners should have knowledge of basic programming in C#."
      ],
      "description": "Learn the AltTester® SDK automation tool for game testing.\nGain hands-on experience with AltTester®, a powerful tool for automating Unity game testing. Understand its features, installation process, and integration with your test scripts.\nConvert manual test into efficient automation scripts.\nLearn how to take existing manual test and transform them into robust, reusable automation scripts using C# and NUnit. Reduce repetitive testing efforts while improving accuracy and efficiency.\nDesign and develop a Unity game automation testing framework.\nBuild a scalable and reusable test automation framework tailored for Unity games. Learn best practices for structuring your test cases, handling game objects, and ensuring maintainability.\nImplement game automation testing through a real-world project case study.\nApply your knowledge by working on a practical case study, simulating real-world testing scenarios. Learn how to automate different gameplay actions, validate UI elements, and handle dynamic game elements.\nUnderstand object identification and interaction in automated tests.\nMaster techniques for identifying and interacting with game objects using AltTester® commands. Learn to handle various game elements, such as buttons, menus, characters, and gameplay automation.\nExecute tests on multiple devices using parallel testing.\nSet up and run tests on multiple devices in parallel to improve test efficiency. Learn how to configure AltTester® for parallel execution.\nGenerate detailed test reports for better analysis and debugging.\nLearn how to create detailed test reports using tools like Allure Reports to track test execution, detect failures, and improve test coverage.\nAutomation Execution in Unity 3D Editor.\nThe course is updated to guide you how to execute tests directly within the Unity 3D Editor, enabling a more efficient and streamlined testing workflow for game developers and testers.\nAutomation Execution Outside Unity 3D Editor (Mobile & Browser)\nThe course is designed to guide you through executing automated tests outside the Unity 3D Editor — including on mobile devices and web browsers — offering a flexible and production-ready approach to game testing. This empowers testers and developers to validate real-world user interactions, hardware behavior, and platform-specific features across diverse environments.\nTest Automation Execution of WebGL Build\nWe will learn how to generate an AltTester® instrumented build and test the WebGL build locally, live, and on both mobile and desktop browsers.\nTest Execution on Cloud Devices using BrowserStack.\nWe have extend the course to cover test execution on cloud-based devices using platforms like BrowserStack, allowing scalability and cross-device testing.\nFuture Plans for the this Course\nWe are committed to continuously improving and expanding this course to provide even more value. Here’s what we plan to add in future updates:\nC# Foundational Tutorials.\nWe will introduce beginner-friendly C# coding tutorials, specifically designed for absolute beginners and manual testers with no prior coding experience.\nMore Testing Projects for Different Game Genres.\nWe will continuously add new automation projects covering different game genres, helping learners gain hands-on experience with diverse testing scenarios.\nStay tuned for these exciting updates to enhance your game automation testing skills!",
      "target_audience": [
        "This course is specifically designed for Game Testers who want to transition into game automation testing.",
        "Also, Game developers who are looking to integrate automation or unit testing into their Unity game projects.",
        "Software testers interested in exploring opportunities in game automation testing.",
        "Gaming enthusiasts who want to enter the gaming industry through game testing.",
        "College students aspiring to build a career in game testing and development."
      ]
    },
    {
      "title": "Unity Game Dev for Beginners | Build a 3D Ball Runner Game",
      "url": "https://www.udemy.com/course/unity-game-dev-tutorials-for-beginners-build-a-ball-runner-game/",
      "bio": "Understand the basic principles of game development inside Unity by building a 3D Ball runner.",
      "objectives": [],
      "course_content": {
        "Unity Installation": [
          "Installation of Unity 2019"
        ],
        "Ball Runner Computer Game": [
          "CREATING THE BALL RUNNER GAME - UNITY BASICS I",
          "UNITY BASICS II",
          "HOW TO SCALE GAMEOBJECTS IN UNITY",
          "HOW TO ADD COLORS TO 3D GAMEOBJECTS",
          "PREFABS IN UNITY",
          "PARENT AND CHILD GAMEOBJECTS",
          "CREATE AND ATTACH SCRIPTS TO GAMEOBJECTS",
          "MOVE THE SPHERE WHITEBOARD ANIMATION LOGIC",
          "MOVE THE SPHERE, SCRIPTING PART",
          "HOW TO MAKE A GAMEOBJECT JUMP IN UNITY",
          "HOW TO MAKE A GAMEOBEJCT JUMP ONLY ONCE IN UNITY",
          "CAMERA FOLLOW SPHERE AS IT'S CHILD",
          "CAMERA FOLLOW SPHERE, WHITEBOARD ANIMATION LOGIC",
          "CAMERA FOLLOW SPHERE, SCRIPTING PART",
          "SET BACKGROUND TEXTURE",
          "RESTART THE MAINSCENE WHEN TRIGGERED",
          "CREATING COIN PREFABS",
          "ROTATING COINS",
          "MAKE THE COINS DISAPPEAR",
          "CANVAS AND UI TEXT",
          "INCREMENTING SCORE",
          "MOVE TO NEXT LEVEL",
          "CUSTOMIZE END SCENE, ADD BACKGROUND IMAGE ON CANVAS",
          "CUSTOMIZE END SCENE - FONTS",
          "CUSTOMIZE MENU SCENE",
          "BUTTON CLICK",
          "PLAY AN AUDIO CLIP",
          "EXIT THE GAME",
          "RESTART AND EXIT THE GAME",
          "BUILD AND RUN THE GAME"
        ]
      },
      "requirements": [
        "Basic understanding of C++ or C# programming will be useful but not necessary",
        "Windows PC running on windows 10 or Mac system for developing the game"
      ],
      "description": "Do you want to make a carrier in Gaming industry or are you interested in building your own games. If the answer to both the questions is YES, then you have come to the right place. This course is for students who are somewhat familiar to C++ or C# programming language and want to develop computer games using unity. The following topics will be covered in this course.\nPosition, rotate and scale gamobjects inside Unity\nAdd colors and background textures to gameobjects\nUnderstand the programming logic for taking input from the keyboard arrow keys and move the sphere in different direction.\nMaking the Ball jump (over the hurdles)\nCreating golden coins and rotating them\nCollecting the coins and decrementing the score once each coind is collected\nSwitching the scene once all the coins are collected\nWorking with 2D Components such as 2D Text, Background textures and 2D  Buttons for developing the Menu scene and End scene.\nAdding Onclick event to the buttons for switching between scenes when button is pressed\nExiting the game once exit button is pressed.\nSo guys what are you waiting for, there are a lot of new things that you will learn from this course. Enroll now and start building your first 3D game inside unity.",
      "target_audience": [
        "Engineering students who want to start their career in gaming industry",
        "Software engineers who want to explore the field of game development"
      ]
    },
    {
      "title": "Unreal Engine 5 - Creating Main Menu for Interactive Archviz",
      "url": "https://www.udemy.com/course/unreal-engine-5-creating-main-menu-for-interactive-archviz/",
      "bio": "\"Designing an Intuitive Main Menu for Seamless Navigation in Interactive Archviz",
      "objectives": [
        "Allow users to dynamically change materials and textures for walls, floors, and furniture.",
        "Enable real-time object customization, letting users swap furniture, decor, or appliances.",
        "Add sliders or interactive controls to adjust the sun’s direction and intensity, simulating various times of the day.",
        "Create an interactive system to turn lights on/off or switch between ambiance presets.",
        "Incorporate immersive background music, with controls to adjust volume, or mute.",
        "Build a clean and intuitive menu system for navigating features like material swaps, object replacements, and lighting controls.",
        "Add a functionality to capture and save screenshots directly from the project.",
        "Include editable project files to allow users to experiment with the implemented features."
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Getting start with Unreal Engine": [
          "Install Unreal Engine"
        ],
        "Start Creating Interactive Main Menu": [
          "Create New Project",
          "Create New Level",
          "Basics of Widget switcher",
          "Menu Section",
          "About section",
          "Sun Section",
          "Change Textures Section",
          "Swap Objects Section",
          "Cost Section",
          "Audio Section",
          "Lights Section",
          "Take Screenshot",
          "Exit Button",
          "Create Empty Canvas Panel",
          "Create Thumbnail"
        ],
        "Create Main Page": [
          "Create Main Page"
        ]
      },
      "requirements": [
        "Windows 10 (Build 1909.1350 or newer) with DirectX 12 support, NVIDIA RTX 2000 series or newer, AMD RX 6000 series or newer, Intel® Arc™ A-Series or newer, Familiarity with Unreal Engine 5, including its interface and basic workflows."
      ],
      "description": "Step into the future of design with this comprehensive course, perfect for aspiring game developers, architects, and 3D artists! Dive into the world of Unreal Engine 5 and learn how to create fully interactive, immersive architectural visualization projects that transform static designs into dynamic, engaging experiences.\nIn this hands-on course, you’ll master:\nReal-Time Customization: Empower users to swap materials and textures for walls, floors, and furniture or dynamically replace objects to personalize interior layouts.\nAdvanced Lighting Control: Simulate different times of the day by adjusting sun direction and intensity. Toggle lights or create ambiance presets like warm, neutral, or cool lighting.\nInteractive Features: Enhance immersion with background music and sound controls. Add a screenshot feature so users can capture and save their designs with ease.\nUser-Friendly Interfaces: Build intuitive menus and in-game navigation systems to ensure seamless interaction for users of all skill levels.\nBlueprint Basics: Learn to leverage Unreal Engine 5 Blueprints to implement interactive functionality and bring your vision to life.\nThe course is designed to guide you step-by-step, starting with project setup and moving through advanced techniques, ensuring you create polished, professional-grade projects. You’ll also gain access to editable project files, enabling you to practice and experiment as you learn.\nBy the end of this course, you’ll have the technical skills and creative confidence to develop interactive architectural visualizations for clients or personal projects. Whether you’re showcasing real estate designs, presenting architectural concepts, or simply exploring the possibilities of Unreal Engine, this course equips you to stand out.\nTake the leap and join today to unlock your creative potential and elevate your design skills to new heights.",
      "target_audience": [
        "Game developers",
        "Architects",
        "Interior designers",
        "3D Visualizers",
        "CG Artist",
        "3D Artist"
      ]
    },
    {
      "title": "Unreal Engine 5: Superhot FPS Game Masterclass",
      "url": "https://www.udemy.com/course/unreal-engine-5-superhot-fps-game-masterclass/",
      "bio": "Learn to build a Superhot-style FPS game using Unreal Engine 5 Blueprints, slow-motion logic & gameplay systems.",
      "objectives": [
        "Build a complete Superhot-style FPS game in Unreal Engine 5",
        "Implement slow-motion mechanics and time-based gameplay logic",
        "Design and develop a first-person shooter from scratch using Blueprints",
        "Polish your FPS game with shooting, enemy AI, UI, and win/lose systems"
      ],
      "course_content": {
        "Getting Started with Unreal Engine": [
          "How to download the Unreal Engine",
          "How to Create the Project",
          "Mastering Viewport Navigation"
        ],
        "Setting Up the Game World": [
          "How to Create the Map and Basic Settings",
          "How to Create the Game Mode",
          "How to Create the Character Class",
          "How to Implement Enhanced Input System"
        ],
        "Player Setup and Weapon Mechanics": [
          "Import All Assets",
          "Attach Weapon to Character",
          "Firing System",
          "Crosshair Functionality",
          "Bullet Trail, Muzzle Flash, and Sound Effect",
          "Slow Motion",
          "Knockback Weapon"
        ],
        "Enemy AI and Behavior": [
          "Enemy Functionality",
          "Attach Weapon to Enemy",
          "Enemy Death",
          "Spawn System",
          "Wave System",
          "Wave UI",
          "Roam System",
          "Noise System",
          "Enemy Firing System"
        ],
        "Game States and Player Experience": [
          "Player Death",
          "Game Over System"
        ],
        "Final Touches and Polish": [
          "How to Create a Level",
          "Main Menu System"
        ]
      },
      "requirements": [
        "No prior game development experience required — everything is taught step-by-step",
        "A computer that can run Unreal Engine 5 smoothly",
        "Basic knowledge of how to use a computer",
        "Willingness to learn and follow along with practical game development tutorials"
      ],
      "description": "Want to build a stylish, slow-motion FPS like Superhot using Unreal Engine 5? This course is for you!\nIn this hands-on masterclass, you'll learn to create a complete first-person shooter game in Unreal Engine 5 — inspired by the unique mechanics of the popular game Superhot. Whether you're a complete beginner or have some game dev experience, this course will guide you step by step to build your own time-control FPS project using Blueprints only (no coding required).\nYou'll learn how to:\nSet up a basic FPS player controller in UE5\nImplement slow-motion gameplay (when you move, time moves!)\nCreate shooting mechanics, weapon systems, and bullet time effects\nDesign and trigger enemy behavior using AI\nBuild win/lose conditions and polish your game\nOrganize your project for best practices and future scalability\nBy the end of this course, you'll have a fully functional Superhot-style game and the confidence to build more advanced games in Unreal Engine 5.\nThis course is perfect for beginners, hobbyists, and anyone excited to bring game ideas to life — even with no prior coding knowledge.\nJoin now and start building a stunning slow-motion FPS game with cinematic mechanics in Unreal Engine 5! Your game dev journey starts today.",
      "target_audience": [
        "Complete beginners who want to learn Unreal Engine 5 through practical projects",
        "Aspiring game developers interested in creating a slow-motion FPS game",
        "Indie developers looking to understand Blueprints and gameplay mechanics",
        "Students or hobbyists who enjoy games like Superhot and want to build their own version"
      ]
    },
    {
      "title": "Make Hitman Game in Unreal Engine 5.3 C++ (Beginner to Pro)",
      "url": "https://www.udemy.com/course/hitmanue53/",
      "bio": "Master Unreal Engine: Create Your Hitman-Style Game",
      "objectives": [
        "Unreal Engine basics and Hitman game concepts.",
        "Create a splash screen for your game.",
        "Animate your splash screen.",
        "Integrate timer and notification UI.",
        "Add zoom functionality and code-based blur.",
        "Begin sniping mechanics development.",
        "Integrate blood effects with Niagara.",
        "Implement headshot visual effects.",
        "Track damage received and provide feedback.",
        "Add gun recoil and screen shake.",
        "Implement distortion and hold breath.",
        "Introduce electric shock for AI.",
        "Implement radial impulse and damage.",
        "Develop AI reactions to bullet shots.",
        "Create a sticky bomb mechanic.",
        "Teach AI characters to search and hide."
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "UI & Shooting": [
          "1. Splash screen",
          "2. Splash screen BG Music and button binding",
          "3. Splash screen Animation",
          "4. Added Scope UI and Blur Shader",
          "5. Adding Timer, Notification UI",
          "6. Add functinality for notification and Set visibility in C++",
          "7. Change Map and Look Functinality",
          "8. Switching Scope UI",
          "9. Update Distance and Zoom in Widget and Blur from Code",
          "10. Scope functionality"
        ],
        "Advance AI Section": [
          "11. Add AI",
          "12. AI locomotion",
          "13 Shooting functionality",
          "14. Bullet and Projective Movement Component",
          "15. Adding Blood Effect Niagara",
          "16. Blood Effect In Code Niagara",
          "17. Head Break effect",
          "18. Cracked Head blood and Damage Receive",
          "19 Gun Recoil",
          "20. Distortion and Hold Breath Effect",
          "21. Bullet Rolling _ Glass Break effect",
          "22. Adding Fire FX for Explosive",
          "23. Adding Explosives part 1",
          "24. Explosive Implement Part 2",
          "25. Adding Electric shock",
          "26. Radial Impulse and Radial Damage",
          "27. Smoke Bomb",
          "28. AI Shot Reaction (Crawling, Walking)",
          "29. Sticky Bomb",
          "30 AI searching place to Hide after shot",
          "31. AI Shock, skull visible",
          "32.AI can see dead body (AI Seight)",
          "33. AI can Dance and Sit Part 1",
          "34. Follow AI Bodyguard",
          "35. Make AI Sit Part 1",
          "36. Make AI Sit Part 2",
          "37. End Condition"
        ]
      },
      "requirements": [
        "Basic Unreal Engine and Basic C++ as we will cover everything here"
      ],
      "description": "Welcome to the exhilarating realm of game development with our comprehensive course, \"Creating Hitman-Style Games in Unreal Engine.\" If you possess a deep passion for gaming and an innate desire to construct your own action-packed, immersive worlds, this course offers the perfect avenue for you.\nThis hands-on learning journey is meticulously crafted to provide you with a profound understanding of game design principles, 3D modeling techniques, and the intricate world of artificial intelligence, all harnessed through the exceptional Unreal Engine. Our mission is to empower you with the knowledge, skills, and creativity to bring your gaming visions to life.\nWhether you're an aspiring game developer poised to enter the industry or an avid gaming enthusiast eager to translate your imaginative ideas into interactive experiences, this course is thoughtfully designed to cater to your aspirations. Our seasoned instructors will be your mentors, guiding you through each stage of the course to ensure you gain the confidence and expertise required to craft captivating Hitman-style games.\nJoin us, and you'll unlock the doors to an exciting world of game development. Let's embark on this journey together, transforming your gaming dreams into a tangible, immersive reality. This is your opportunity to harness your creative potential and become a virtuoso in game development. Don't let your aspirations wait; make them a reality with our \"Creating Hitman-Style Games in Unreal Engine\" course.",
      "target_audience": [
        "Who wants to learn Unreal Engine",
        "Aspiring game developers.",
        "Those interested in Hitman-style games.",
        "Intermediate and advanced developers.",
        "Anyone passionate about game design."
      ]
    },
    {
      "title": "Make a horror Zombie game in Unity",
      "url": "https://www.udemy.com/course/make-a-horror-zombie-game-in-unity/",
      "bio": "Make a horror Zombie game in Unity",
      "objectives": [
        "Easy to undestand coding activities",
        "Create a horror game in unity",
        "Tips of Game Design and indie horror games",
        "A fundamental understanding of Unity"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Make a Horror game": [
          "Makea Floor",
          "Import assets",
          "Player animation",
          "Create a Rigidbody and Script",
          "Movement Script",
          "Movement Animation",
          "Player Shot",
          "Make a Bullet",
          "Create Enemy",
          "Enemy Movement",
          "Enemy Death-Effect",
          "Player Health",
          "Enemy Attack",
          "Make a Game Manager",
          "Make a Main Menu"
        ],
        "Level Design Graveyard": [
          "Make a Floor",
          "Adding Wall&Trees",
          "Adding Lights",
          "Adding Details"
        ]
      },
      "requirements": [
        "it would be good to have a basic undestanding of Unity. you dont need any coding experience as i will cover c# coding in detail.",
        "You need a PcTt"
      ],
      "description": "This game will teach you how to make a horror game ,teaching all skillsets the fundamentals of game creation. you dont need previous experience as i will guiding you through the course step by step.\nthis course has beed designed to be easily undestandable to level game Design,\n\n\nFull 3D Charachter Movement\nPhysics\nCamera\nPlayer Attack System\nScripting\nPeople who want to create and publish their own Games\nPeople interested in working in the game sedign industy\nVompetent and confident with using a Computer.......\nKilling enemies with Bullets,\nlearn C# coding using real world coding activities\nsetting up a third person character\nusing unity 2019\nPeople who want to create and publish their own Games\nPeople interested in working in the game sedign industy\nVompetent and confident with using a Computer.......\nKilling enemies with Bullets,\nlearn C# coding using real world coding activities\nsetting up a third person character\nusing unity 2019\nPeople who want to create and publish their own Games\nPeople interested in working in the game sedign industy\nVompetent and confident with using a Computer.......\nKilling enemies with Bullets,\nlearn C# coding using real world coding activities\nsetting up a third person character\nusing unity 2019\nKilling enemies with Bullets,\nlearn C# coding using real world coding activities\nsetting up a third person character\nusing unity 2019\nKilling enemies with Bullets,\nlearn C# coding using real world coding activities\nsetting up a third person character\nusing unity 2019",
      "target_audience": [
        "This Course is for beginners , who want to learn Unity"
      ]
    },
    {
      "title": "Let's start making games!",
      "url": "https://www.udemy.com/course/lets-start-creating-games/",
      "bio": "Pre planning covers design of game idea, marketpotential, competitors, visuals, platforms, monetization and development.",
      "objectives": [
        "You will learn how to pre plan your game idea to make sure it is ready for development",
        "You will learn best ways to make sure that your game idea is ready for development.",
        "You will learn how to estimate the time and budget needed to make the development.",
        "You will learn how to get better idea of you game ideas graphic style, technics, platform, competitors and publishing ways.",
        "You will learn how to save your time and money with pre planning",
        "You will learn how to evaluate your game ideas market potential"
      ],
      "course_content": {
        "Let's start making games Introduction": [
          "Introduction"
        ],
        "Let's start making games Part 1": [
          "Initial definition of your game idea",
          "Market research and reference games",
          "Monetization and Platforms",
          "Instructions for usage of pre planning document for Part 1",
          "Let's start making games Part 1 Quiz"
        ],
        "Let's start making games Part 2": [
          "Vision of graphic style and technic",
          "First versions of wireframes and flowcharts",
          "Planning on UX and Usability",
          "Instructions for usage of pre planning document for Part 2",
          "Let's start making games Part 2 Quiz"
        ],
        "Let's start making games Part 3": [
          "How to build a team and determine the people needed for development",
          "Production types , timetable and team personnel of game development",
          "How to estimate the price of the development and the game (product or service).",
          "Conclusion of pre planning phase and next steps",
          "Instructions for usage of pre planning document for Part 3",
          "Let's start making games Part 3 Quiz"
        ]
      },
      "requirements": [
        "You want start creating games, you have some game idea or want create one and inspect more deeply to make sure it is valid for development",
        "You need only computer or mobile device and software to write text, this course is about planning no expensive softwares or equipment required.",
        "Course content includes pre planning document template you can use!"
      ],
      "description": "This course is about how to start further developing your game idea, and how to polish this game idea from scratch to a game development plan and how to eventually develop the game!\nPre planning will save your time and money, you won't waste them on projects that are out of scope, outdated or impossible to develop - because you will get good and solid information and data about your game idea by pre planning it first!\nThis pre planning phase includes several parts for you to follow, and after these parts it's much easier to see if your idea is good enough for prototyping or even development.\n\n\nFirst we start with game idea\nMake the initial definition for the Game idea\nDo some Market research and check reference games\nThink about the Platform(s) and Monetization\n\n\nThen we polish the game idea\nCreate vision of graphic style and technic\nDo some first versions of wireframes and flowcharts\nDo some planning on UX and Usability\n\n\nFinally we make the plan more solid\nFind out what kind of team is needed for development\nThink about the general workflow and timetable of game development\nDo an estimate for the price of the development\nPlan the next steps\n\n\nIdeally this course is meant for small and medium sized Indie game teams, starting with their initial game ideas. And to people who dream about making games and building their own team for it, and want to learn the process of developing a game idea into a game development plan - and ultimately to develop the game!",
      "target_audience": [
        "Indie game developers, small or medium sized teams or anyone who wants to start making games.",
        "This course is valuable to anyone how wants to work or already works in game industry, wants to learn how to use pre planning phase properly.",
        "This course is for any person who dreams about making games and building their own team for it."
      ]
    },
    {
      "title": "UNITY 2018 - Learn to create your character and animate it",
      "url": "https://www.udemy.com/course/unity-2017-create-character-and-learn-2d-animation/",
      "bio": "Design Character inside Illustrator, export this Character to Unity, Setup it and Make 3 Animations.",
      "objectives": [
        "Learn to use Illustrator",
        "Learn to Design a Character in Illustrator",
        "Learn to export a Character for Unity",
        "Learn to Use Unity",
        "Learn to Use the Sprite Editor inside Unity",
        "Learn to make a Setup",
        "Learn to Animate Acting and Cycle",
        "Learn to Animate with FX",
        "Learn to use the Animator System",
        "Learn to Play Animation from Coding"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "ILLUSTRATOR - Create a Character for Unity": [
          "Workshop Settings",
          "Layers and References",
          "The Main Shape - Stroke",
          "KIng Stuff - Stroke",
          "Arms - Stroke",
          "Legs - Stroke",
          "Facial Expression - Stroke",
          "Saving File",
          "Filling",
          "Export to Unity"
        ],
        "UNITY - SETUP": [
          "Workshop Settings",
          "Sprite Editor",
          "Body - Controllers",
          "Arms - Controllers",
          "Legs - Controllers",
          "Facial Expression - Controllers",
          "King - Controller",
          "End Of The Setup"
        ],
        "UNITY - Animation n°1 - Acting": [
          "Timeline Settings",
          "Making our first Keys",
          "Arms",
          "Body",
          "Legs",
          "Facial Expression",
          "Cleaning Pass n°1",
          "Cleaning Pass n°2",
          "Shadow"
        ],
        "UNITY - Animation n°2 - Cycle": [
          "New animation",
          "First Pose",
          "Second Pose",
          "Cycle",
          "BreakDown",
          "Body Animation",
          "Arms Animation",
          "Retiming Arms Animation",
          "Legs Animation",
          "Facial Expression Animation"
        ],
        "UNITY - Animation n°3 - Acting + FX": [
          "Settings Hulk Animation",
          "First Pose",
          "BreakDown",
          "Facial Expression",
          "Legs animation",
          "Arms Animation",
          "Shaking Body and Arms",
          "Shaking Legs",
          "Shaking Facial Expression",
          "Color Animation",
          "Fx Animation"
        ],
        "ANIMATOR": [
          "Switch Between Animation",
          "Make Transitions",
          "How Works Transitions",
          "Settings For Scripting",
          "Play Animation With Script c#"
        ],
        "BONUS": [
          "Download"
        ]
      },
      "requirements": [
        "Must have a Mac or PC capable of running Unity 2017"
      ],
      "description": "Full Course Package about How To Create and Design a Character Inside Illustrator and How to Animate this Character inside UNITY 2017.\n\nYou can download the Package this course.\nSome of the things you will learn in the course:\n\nILLUSTRATOR\nWorkshop Settings\nUse References\nVectorized a drawing\nWork with Layers\nSave the file\nExport our Character for Unity\nUNITY\n\nWorkshop Settings\nImport Files\nUse the Sprite Editor\nSetup our Character\nLearn to use the Animation Panel\nLearn to make an Acting Animation\nLearn to make an Cycle Animation\nLearn to make an Animation with FX\nLearn to use the Animator Panel\nWork with Transitions\nPlay Animation from C#",
      "target_audience": [
        "Anyone Who Wants To Learn Game Animation But Does Not Know Where To Start",
        "Beginners with no coding experience",
        "Programmers who want to learn game Animation"
      ]
    },
    {
      "title": "Introduction to Unreal Engine 5.5 for Absolute Beginners",
      "url": "https://www.udemy.com/course/introduction-to-unreal-engine-5-for-absolute-beginners/",
      "bio": "Learn step by step how to create a simple project in Unreal Engine 5",
      "objectives": [
        "Learn the the most basic operations you will use in Unreal Engine 5",
        "Create a simple game mechanic using Blueprints",
        "Learn how to model and create level prototypes",
        "Learn how to use instances to create games and worlds faster"
      ],
      "course_content": {
        "Introduction": [
          "Introduction to Unreal Engine 5.5",
          "Creating our Project",
          "Navigate with the Camera",
          "How to move objects",
          "The Details Panel",
          "Viewport Modes",
          "How to Play the Game"
        ],
        "Creating a simpe project": [
          "Creating a new level",
          "The Content Browser",
          "Prototyping with the CubeGrid",
          "Modeling the house",
          "Static Meshes",
          "Adding Windows",
          "Adding Materials",
          "Types of Lights",
          "Creating our first Blueprint",
          "Construction script",
          "Creating a Door that opens and closes",
          "Creating a moving platform",
          "Creating a simple Landscape",
          "Creating level Instances",
          "Working with modular assets",
          "Working with non modular assets",
          "Using the Level Blueprint to Teleport the Player",
          "Wrap up and project description"
        ]
      },
      "requirements": [
        "No experience needed. You will learn everything you need to know."
      ],
      "description": "Unreal Engine 5 is the leading technology when it comes to real time applications such as games, movies, architectural visualizations, and much more.\nThe tool while easy to use is hard to master, and it can be intimidating at first to create your first project when you have no experience on 3D or programming.\nThis is what this course is about, to turn you into a complete stranger from knowing nothing about games and Unreal Engine to make you confident in your ability to create using this tool.\nYou will learn how to navigate in the Editor, getting familiar with the most common operations and moving on you will learn how to model inside Unreal Engine 5 to create quick prototypes of your levels. Later you will create a simple house by applying different principles like UVs, Materials and Level Instance Blueprints.\nAs you continue to create your world you will be adding more functionality by creating a Lamp that comes with some lights, a door that opens and closes automatically and movable platforms where you can control their direction and speed so that the player can jump to reach the objective.\nBy the end of this project you will feel confident in your ability to start tackling more complex projects in Unreal Engine 5 by applying the fundamentals of game development.",
      "target_audience": [
        "People with no Unreal Engine experience who want to learn how to use the tool but don't know where to start"
      ]
    },
    {
      "title": "C# Unity® and Swift 4 Masterclass: Make Games and Apps",
      "url": "https://www.udemy.com/course/cunitygames-swift4apps/",
      "bio": "Includes FREE eBook, source code, and art assets! Make a 3D Portals game in Unity® and Blender. Make apps for iOS 11.",
      "objectives": [
        "Code in C#.",
        "Create artwork in Blender.",
        "Make a complete 3D game in Unity®.",
        "Make real apps from scratch.",
        "Code in Apple's programming language, Swift 4.0.",
        "Build apps for the iPhone from start to finish."
      ],
      "course_content": {
        "Introduction": [
          "Course Trailer",
          "Unity Portals Gameplay!"
        ],
        "Introduction to Unity": [
          "Downloading Unity",
          "Unity Editor",
          "Hello World",
          "Variables",
          "Methods",
          "Loops",
          "Positioning"
        ],
        "First Person, Boxes": [
          "Enabling first person mode",
          "Adding a Box",
          "Clicking Logic",
          "Raycasts",
          "Grabbing Class",
          "Moving the Box",
          "Adjustments and Prefabs"
        ],
        "Buttons and Doors": [
          "Designing a button",
          "Trigger colliders",
          "Pressure identification",
          "Button Animation",
          "Button Color",
          "Designing the Door",
          "Opening The Door",
          "Connecting the Button and the Door",
          "Orb"
        ],
        "Portals | Unity Project": [
          "Portal Areas",
          "Getting the hit points",
          "Spawning Portals",
          "Normals",
          "Teleporting",
          "Adjusting teleporting angles",
          "Portal Rendering"
        ],
        "Interface and Level Management | Unity Project": [
          "Game Interface",
          "Menu Scene",
          "Starting Level",
          "Finishing Level",
          "Level Flow"
        ],
        "Introduction to Blender": [
          "Overview of Blender"
        ],
        "Portal Gun | Blender Project": [
          "Gun",
          "Gun Unwrap",
          "Portal Gun Base Colors",
          "Portal Gun UV Saving",
          "Portal Gun Texturing",
          "Gun Texturing Cont'd"
        ],
        "Props and Pieces | Blender Project": [
          "Button",
          "Button UV",
          "Button Texturing",
          "Button Crazybump",
          "Cables",
          "Cables Texturing",
          "Cables Crazybump",
          "Simple Block"
        ],
        "Scene Pieces | Blender Project": [
          "Walls",
          "Walls and Floors UV",
          "Walls and Floors Export",
          "Floor and Wall Norm Spec map",
          "Floor Texturing",
          "Wall Texturing",
          "Doors",
          "Door UV Wrap",
          "Door Export",
          "Door Textured",
          "Door Unwrap Fix",
          "Door Normals and Unity Assembly",
          "Unity Wall Texturing",
          "Unity Floor Texturing"
        ]
      },
      "requirements": [
        "To follow along with these tutorials, you will need the following programs: Blender (for 3D modeling and texturing), Photoshop or a free program like Gimp (for 2D art and some texturing), Unity® (for game set-up and coding), and Xcode 9 (for the Swift sections of this course).",
        "This course was recorded on a Mac computer, but you can use Unity® and Blender on a PC. Xcode is made for Mac computers, but you can use MacOS virtual machine software to use Xcode on a PC."
      ],
      "description": "In this course, you learn how to build a Portals game with Unity® and Blender. You also design and code practical apps from start to finish in Xcode 9. Join now to get so many new skills.\nThis course is unique because we make both the code and the art for the game from scratch! We teach you the fundamentals of designing, coding, and modeling a 3D game.\nFirst you design the game and its functionality in Unity®. You learn how to code in C# and build video game levels.\nDon't worry if you've never coded before. We start simple and add more to the games as the course goes on.\nWhy Unity®?\nUnity® is one of the most popular platforms in game development. You can use Unity® to build 2D and 3D games. Unity® is cross-platform, which means it is easy to use with other platforms.\nThen you create the 3D models for the game in Blender. You build all the art assets for the game. You learn how to integrate your art from Blender into Unity®.\nWhy Blender?\nBlender, like Unity®, is a popular production suite that is free to download. Blender is a revolutionary tool for making 3D art digitally. With Blender, you can make art assets for games, like we do in this course.\nIncluded in this course is material for beginners to get comfortable with the interfaces. Please note that we reuse this content in similar courses because it is introductory material. You can find some material in this course in the following related courses:\nComplete your first FPS and game art in Unity® and MakeHuman\nPractical Unity Developer Academy: Make Fully Featured Games\nThe Complete Real World Game Development and Design Bootcamp\nMake a Portals clone in Unity and Blender from scratch\nMake Your 1st 3D Unity® Game & 40 Low Poly Models in Blender\nThe Complete Blender Design & Unity Game Development Course\nC# Unity and Swift 4 Masterclass: Make Games and Apps\niOS 11 & Swift 4.0 - A Beginner's Guide with Projects\nCode in Kotlin & Java for Android and Complete 5 iPhone Apps\nFinish 26 Games & Apps Quickly (GameMaker: Studio & Xcode)\nSwift 4 and ELM Masterclass | Make iOS 11 apps and web apps!\nLearn UI Mobile App Design & Game Mechanics in Construct 2\nThe Ultimate iOS 11 & Swift 4 Course. Learn to Build Apps!\nC# Unity and Swift 4 Masterclass: Make Games and Apps\nXamarin Start to Finish Android & iOS Apps (& Learn to Code)\nNo experience necessary. Even if you’ve never coded before, you can take this course.\nOne of the best features is that you can watch the tutorials at any speed you want. This means you can speed up or slow down the video if you want to.\n\nThis course is project-based, where you follow along with your instructor to build real projects. The best way for you to learn how to make your own app is to follow project-based training content.\nYou learn practical, employable skills immediately. You can put the apps you make in this course in your portfolio!\nWhy Xcode?\nXcode is Apple's FREE software for app development. Xcode is user-friendly and allows you to make complex and creative apps.\nAt the same time Xcode is accessible for beginners who want to make simple apps. Swift 4.0 is the programming language to learn if you want to make apps for Apple products.\nYou will also get access to the eBook \"The Ultimate iOS 10, Xcode 8 Developer Book. Build 30 apps.\" by Mammoth Interactive (normally $89.99).\n\nYour teachers will teach you practical skills using real-world examples. Take this course to build your portfolio today!",
      "target_audience": [
        "Anyone who wants to learn game development and app development.",
        "This course assumes you know a little about Unity Technologies and Blender",
        "Absolute beginners to mobile development who want an introduction to Swift 4 and Xcode 9."
      ]
    },
    {
      "title": "Create Turn Base 2D RPG Game With Unity",
      "url": "https://www.udemy.com/course/create-turn-base-2d-rpg-game-with-unity/",
      "bio": "Create Turn Base 2D RPG Game With Unity",
      "objectives": [
        "Unity",
        "Basic C#"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Project Setup"
        ],
        "Spell": [
          "Spell"
        ],
        "Charachter": [
          "Character script part 1",
          "Character script part 1"
        ],
        "Enemy": [
          "Enemy Script part 1"
        ],
        "Battle": [
          "Battle Launcher part 1",
          "Battle Launcher part 2",
          "spell bug fixed"
        ],
        "UI": [
          "UI Setting",
          "UI Controller"
        ],
        "character and spell build": [
          "Character and Spell build"
        ]
      },
      "requirements": [
        "PC or Mac"
      ],
      "description": "Learn how to create your very own Turn RPG game for mobile or PC using Unity2D, an industry-standard program used by many large gaming studios and indie developers across the world.\nYou won’t just be learning programming concepts in this course, but tying these concepts to real game development uses. You will have access to a course forum where you can discuss the topics covered in the course as well as the next steps to take once the course is complete.\nThis course has been designed to be easily understandable to everyone,we start from scrach,easy codes to hard codes and every code will be explained so whether you’re a complete beginner, an artist looking to expand your game development range or a programmer interested in understanding mobile game design, this course will help you gain a greater understanding of development.\nAt the end of this course you will have developed the ability to create such PC game elements as:\nCreating the world\nMake enemy\nMake player units\nTurn base battle\nHealing\nMaking diffrent Spells\nLearning C# codes\n\n\nStart learning today and let me help you become a mobile and PC game developer!\n\n\n\n\nUnderstand how to earn revenue using advertising in their games\nLearn C#, a modern versatile programming language\nUnderstand the capabilities of mobile development in Unity\nDevelop strong and transferable problem solving skills\nGain an understanding of the game development process\n\n\nMac or PC capable of running Unity 2D\nThe latest version of Unity 2019 or 2020\n\n\nAnyone who wants to make their own mobile and pc games\nAnyone interested in learning to publish apps and games to the Play Store or stream\nComplete beginners with an interest in learning mobile and PC game development\nDevelopers who want to re-skill across to mobile development\nPeople who want to create and publish their own mobile or PC games",
      "target_audience": [
        "Beginners"
      ]
    },
    {
      "title": "Master Unity 3D Game Development",
      "url": "https://www.udemy.com/course/master-unity-3d-game-development/",
      "bio": "Get In-depth and Hands On Learning By Building A Ton Of Games From A Proven Trainer & Game Developer",
      "objectives": [
        "Become proficient with Unity",
        "Become proficient with C# for Unity",
        "Learn how build games from start to finish",
        "Get your game published onto your Android and / or iOS device",
        "Get a job as a game developer"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Unity Introduction and Editor Walkthrough"
        ],
        "Core Unity Game Features": [
          "Lecture 2: Core Unity Game Features",
          "Game 2: Core Unity Game Features",
          "Lecture 3: Advanced Unity Game Features",
          "Game 3: Advanced Unity Game Features"
        ],
        "User Interfaces & Scene Management": [
          "Lecture 4: User Interfaces & Scene Management",
          "Game 4: User Interfaces & Scene Management"
        ],
        "Audio, GameObject Scripting & Minimaps": [
          "Lecture 5: Audio & Minimaps",
          "Game 5: Audio, GameObject Scripting & Minimaps"
        ],
        "Game Physics": [
          "Lecture 6: Physics 1 - Rigidbodies & Colliders",
          "Game 6: Physics 1 - Rigidbodies & Colliders",
          "Lecture 7:Physics 2 - Triggers, Raycasting & Enhancing your UI Canvas Experience",
          "Game 7: Physics 2"
        ],
        "Animations": [
          "Lecture 8: Animations",
          "Game 8: Animations"
        ],
        "Particle Systems": [
          "Lecture 9: Particle Systems",
          "Game 9: Particle Systems"
        ],
        "Publishing To Mobile Devices": [
          "Lecture 10: Publishing To Mobile Devices",
          "Game 10: Publishing to Android and iOS"
        ],
        "Advanced Cameras - Cinemachine": [
          "Lecture 11: Introduction to Cinemachine",
          "Game 11: Creating Cut Scenes and Third Person Cameras With Cinemachine"
        ],
        "Creating Downloadable Game Content Using Addressables": [
          "Lecture 12: Introduction to Addressables",
          "Game 12: Creating and Downloading Content to our Game"
        ]
      },
      "requirements": [
        "Requires access to a computer with Unity (minimum 2019.4, latest preferred) installed",
        "Access to an Android or iOS device for advanced topics is optional but recommended",
        "Some Java or C# programming knowledge is recommended but not required"
      ],
      "description": "Get hands on, deep and master gaming in a whole new way by learning how to build games using Unity 3D - the worlds leading game engine.\nOur philosophy is simple - keep the theory at a minimum and focus heavily with hands on learning.\nWho better to learn how to build games than from a seasoned trainer and accomplished real world game developer.  In this course, we take your existing programming knowledge of other languages and move cutting edge Unity game development.  We get right into the meat and potatoes and start building games step by step.\nDon't waste your time with other courses.  The materials here are based on our live courses taught to 1000's students who have paid thousands of dollars to be there so you're not getting second rated material and you will retain everything as we reinforce the material into you.\nWhat you will get:\nThe experience of building tons of games.\nTake your beginner (or expert for that matter) programming experience and turn it into expert Unity 3D game development.\nGet deep and hands on in the Unity ecosystem with:\nThe Unity Editor\nAnimations & Particle Systems\nCreating incredible cut scenes using Cinemachine\nPushing your game content to the cloud using AWS and Addressables\nArtificial Intelligence for your games using tools like Navmesh and Behaviour Trees\nGame music and sound effects\nPhysics using Rigidbodies, Colliders, Raycasting and more!\nPublishing to your Android and iOS devices\nAugmented Reality\nand much more!\nLearn the basics of game design - we give you tips and tricks on how to make your game look beautiful so that your future users will enjoy your eye-candy.\nWhat are you waiting for?  Get started today!",
      "target_audience": [
        "Anyone looking to publish their own games and / or get a job as a Unity game developer"
      ]
    },
    {
      "title": "How to Add Steam Multiplayer in Unreal Engine 5",
      "url": "https://www.udemy.com/course/how-to-add-steam-multiplayer-in-unreal-engine-5/",
      "bio": "Learn how to add Steam Multiplayer to your Unreal Engine 5 game project. From scratch!",
      "objectives": [],
      "course_content": {},
      "requirements": [
        "No requirements. Everyone can take this course."
      ],
      "description": "Learn how to add Steam Multiplayer to any game!\nAre you looking to add Steam multiplayer to your game projects but don’t know how to get started? Our FREE course takes you through the process step by step, starting with the installation of the Steam Advanced Sessions plugin, and ending with packaging the game project for your friends and family to try out. Our in-depth course ensures that you’ll have all the knowledge you need to successfully add Steam multiplayer to any of your game projects.\nFor complete beginners and aspiring game developers\nWhether you’re a beginner or an experienced game developer, this comprehensive course will guide you step-by-step on how to add Steam Multiplayer to your project. You don’t need any prior knowledge to get started. This course not only demonstrates how to integrate Steam into your game but also teaches you how to utilize Unreal Engine 5 in general, including the visual programming language Blueprint.\nGet hands-on with Unreal Engine 5 and Steam: Learn by doing!\nLearn how to implement Steam in Unreal Engine 5 with these easy-to-follow video tutorials. You will begin with the basics of the Steam Advanced Sessions plugin and progress to more advanced topics such as creating the Server Browser, Host menu, and Server filters. This is the most comprehensive course available on using Steam with Unreal Engine 5, providing detailed instruction and a user-friendly experience.\nThis course will teach you how to:\nInstall the Steam Advanced Sessions plugin\nCreate the Main Menu for online games\nCreate the “Create Server” menu to host servers online.\nCreate the Server Browser and display online servers as well as join others.\nAdd a server filter option to filter for language, server name, LAN and more.\nWhat makes me qualified to teach you?\nMy name is Moustafa Nafei, and I am the director and developer of Farmtale on Steam, made only with Blueprints. With years of game development and teaching experience with 30,000 students across platforms, I will show you the best practices to achieve optimized and game-ready performance.\nEnroll now and join a supportive community with like-minded developers.\nCollaborate, share ideas, and gain inspiration from fellow learners as you embark on this journey together.\nSee you in lesson 1!",
      "target_audience": [
        "Anyone (beginner or intermediate) who wants to add Steam multiplayer in Unreal Engine 5.",
        "Anyone who want to learn how to make multiplayer games in Unreal Engine 5.",
        "Experienced developers who want to brush up on their skills.",
        "Game designers and artists who want to get into game programming."
      ]
    },
    {
      "title": "Learn Construct 2: Creating a Pixel Platformer in HTML5!",
      "url": "https://www.udemy.com/course/learn-construct-2-creating-a-pixel-platformer-in-html5/",
      "bio": "Master Construct 2 Quickly Using this Course! By the end, you will have gone from beginner to advanced in no time !",
      "objectives": [],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Learn the shortcuts!"
        ],
        "Game Setup": [
          "Tilemap Setup"
        ],
        "Player Setup": [
          "Adding our player",
          "Custom Movement",
          "Player State Engine",
          "Player Jump / Fall",
          "Player Run",
          "Player Punch",
          "Player Punch Part 2",
          "Level Parallax",
          "Player Quiz!"
        ],
        "Enemy Setup": [
          "Enemy AI",
          "Enemy AI Part 2",
          "Attacking and Death",
          "Enemy Quiz!"
        ],
        "Congratulations!": [
          "CONGRATULATIONS!",
          "Extra: HUD | Health bar and Punch Energy",
          "Overview Quiz!"
        ]
      },
      "requirements": [
        "Construct 2 [FREE] Edition"
      ],
      "description": "At the end of this course, you will be able to create your own Platformer game in Construct 2. I can't believe I am giving this course away for FREE! So is this course right for you?\nI designed this programming course to be easily understood by absolute beginners but have included further information for those who want to delve deeper into the software.\nWhat is the course about?\nThis is THE course to take if you want to get into Construct 2 game development. It is a free course that will teach you the very basics and the advanced. If you have NEVER programmed before, you will learn how to. If you have always wanted to make a game, you will! This is THE ultimate free course I could possibly provide.\nHow is this course taught?\nThis course is taught directly from me as if you were in the room looking over my shoulder. I prefer to teach in a way that you can get direct results. Each lecture is about getting from one point to another and moving forward. In-game development, it is very easy to get caught up in your 'game ideas', 'what software you are using' etc. I show you exactly the huge benefits of sticking with Construct 2 as well as point out some of its shortcomings.\nWhat material is included?\nThe material included in this course can be downloaded in the resources tab!\nWhat does this course include?\nPlayer and Enemy State engines\nWalking, Running, Jumping, Falling, Punching\nEnemy walking and attacking\nDynamic Animations\nEnemy AI\nLayer Parallax\nHUD Elements\nCollision handling\nI can't stress this enough. I wish this course was available to me when I first started programming! And that was years ago!\nThanks for reading!\nYour future instructor,\nJeremy Alexander",
      "target_audience": [
        "You should take this course if you want to learn Construct 2! You have nothing to lose!",
        "You will learn everything you need to know about Construct 2 and actually developing a game!"
      ]
    },
    {
      "title": "Create a 2D Game in Godot 4.5",
      "url": "https://www.udemy.com/course/create-a-2d-game-in-godot-4-5-learn-by-building-a-complete/",
      "bio": "Learn to create a 2D top-down game in Godot 4.5 with player movement, coins, timer, UI, and effects",
      "objectives": [
        "Learn how to build a complete 2D game project in Godot 4, from setup to final gameplay.",
        "Implement responsive 2D character movement and animation using AnimationPlayer.",
        "Create collectible coins with particle effects, sound, and scoring logic.",
        "Design a functional game UI with a countdown timer, score display, and win condition."
      ],
      "course_content": {},
      "requirements": [
        "Just basic programming or game development experience is needed. Just basic computer skills and a willingness to learn. Godot is free and works on most systems.",
        "Students should install Godot 4.5 (free to download) before starting the course. I’ll guide you through everything else."
      ],
      "description": "Welcome to this hands-on Godot 4.5 course where you'll build a complete 2D top-down game from scratch — no prior experience required!\nThis course is perfect for beginners and anyone curious about how games are made using the Godot engine. Together, we’ll create a fun and interactive game where the player collects coins before the timer runs out. Along the way, you’ll learn essential game development concepts and how to apply them in Godot 4.5.\nWhat you’ll learn:\nSetting up a new 2D project in Godot 4.5\nDesigning and scripting player movement\nAdding coin collectables with animations\nCreating countdown timers and UI elements\nUsing particles for effects and polish\nOrganizing your project and scenes efficiently\nBy the end of the course, you’ll have built a complete playable 2D game, and you'll have the confidence to create your own projects or expand on what you’ve made. You'll also gain a solid understanding of how game mechanics work behind the scenes.\nWhether you want to make your own indie games, prototype ideas, or simply explore game development as a hobby, this course gives you the practical skills to start building today. Let’s turn your ideas into a real game—one step at a time!",
      "target_audience": [
        "This course is for complete beginners who want to learn 2D game development using Godot. It's perfect for aspiring game developers, indie creators, and anyone curious about making their first playable game ."
      ]
    },
    {
      "title": "Complete GML GameMaker Developer 2D: Learn To Make Games",
      "url": "https://www.udemy.com/course/gamemakercourse/",
      "bio": "Learn To Become A Game Developer In GameMaker Studio 2 In This Course",
      "objectives": [
        "Make Games In GameMaker Studio 2",
        "Learn to code in GameMaker Studio 2's programming language, GML",
        "Program a simple calculator, you will learn to work with the basics of GML and GameMaker Studio 2",
        "Build a platformer, program a movable player, and a smart enemy",
        "Make a space shooter! Program a randomized environment the player must survive, and a final boss."
      ],
      "course_content": {
        "Getting Started": [
          "Introduction",
          "Art Assets"
        ],
        "The Absolute Basics": [
          "The Absolute Basics Of GameMaker Studio 2",
          "The Absolute Basics Of GML",
          "The Absolute Basics Of GML 2"
        ],
        "Calculator": [
          "Calculator - Getting Started",
          "Calculator - Hover Over Buttons",
          "Calculator - Drawing Text",
          "Calculator - Identify The Buttons",
          "Calculator - Setting The Values",
          "Calculator - Final",
          "Calculator Download"
        ],
        "Platformer": [
          "Platformer - Getting Started",
          "Platformer - Finishing The Basics",
          "Platformer - Importing Art Assets",
          "Platformer - Changing The Player Sprite",
          "Platformer - Jump Animation",
          "Platformer - Tilesets",
          "Platformer - Collision",
          "Platformer - Change Levels",
          "Platformer - Starting On Enemies",
          "Platformer - More On Enemies",
          "Platformer - AI",
          "Platformer - Cameras",
          "Platformer - Turtle Spawner",
          "Platformer Download"
        ],
        "Space Shooter": [
          "Space Shooter - Importing Sprites",
          "Space Shooter - Creating Our Ship",
          "Space Shooter - Spawning In Meteors",
          "Space Shooter - Modifying Our Meteors",
          "Space Shooter - Shooting",
          "Space Shooter - Destroying Meteors",
          "Space Shooter - Health Bar",
          "Space Shooter - Boss Battle",
          "Space Shooter - Boss Battle Finale",
          "Space Shooter Download"
        ]
      },
      "requirements": [
        "A copy of GameMaker Studio 2, the paid version is preferred, but, you can use the free trial version.",
        "No knowledge of coding required, you will learn to code from scratch",
        "You must have installed GameMaker Studio 2 on your computer"
      ],
      "description": "Welcome to the Complete GML GameMaker Developer 2D course!\nAt the end of this course, you will know how to both code and make games in GameMaker Studio 2!\nWe will be going over the absolute basics of GameMaker Studio 2 and the absolute basics of GML (the programming language for GameMaker Studio 2).\nAnyone can take this course, whether you're an absolute beginner that has never touched a programming language, or a person who has made some small projects in GameMaker Studio 2, but, still has much more to learn.\nHere's What We'll Be Covering\nThe Absolute Basics Of GameMaker Studio 2\nThe Absolute Basics Of GML\nMaking A Calculator\nMaking A Platformer\nMaking A Space Shooter\nThe course will help you create three demos from scratch, a calculator, a platformer, and space shooter.\nCalculator\nGameMaker isn't just for making games, you can build software from it too!\nLearn to create buttons you can hover over, and, build a useful application where you will learn to work with basic arithmetic in programming.\nPlatformer\nIn the platformer, we will make a player that can jump, move left and right, from scratch. You will learn to use the room editor and tile-maps to produce levels for your game.\nNext, we will make an enemy that will walk towards the player, the enemy can jump over walls and gaps.\nSpace Shooter\nWe will produce a spaceship that can shoot, which can be controlled by the player.\nYou will be utilizing the power of randomization, where, you will use the random functions to create the game unique for every time you play the game. Meteors will spawn in random places that you either destroy or dodge.\nThe player must shoot meteors, and, then defeat the boss.\nIn the end, we will program a boss, where the player must fight the boss, and, dodge the attacks of the boss.\nYour Journey Starts Now!\nIf you want to learn to make games in GameMaker Studio 2, this course is for you!\nWe will start out easy, and progress towards finally making an awesome game you can be proud of!\nEnroll Now To Get Started On Your Journey To Learn GameMaker Studio 2!",
      "target_audience": [
        "People who wish to make games or applications in GameMaker Studio 2",
        "People who want to learn to code, or want to enhance their coding skills",
        "Both absolute beginners and beginners are welcome, if you're slightly familiar with GameMaker Studio 2 and need to enhance your skill, or have never programmed or created a single object, this course is for you"
      ]
    },
    {
      "title": "Learn Godot 3 from scratch with zero experience - 2D",
      "url": "https://www.udemy.com/course/learn-godot-from-scratch-with-zero-experience-2d/",
      "bio": "Learn how to create games with the Godot game engine from scratch even without any experience",
      "objectives": [
        "Be able to make a understand the UI of Godot",
        "Understand the most necessary nodes and their uses in godot",
        "Be able to code flexibly in GD script, signals, collisions and many more",
        "Be able to create and style simple UI",
        "Be able to work with animations",
        "Create a simple platformer and top down game",
        "And many more that are not listed here"
      ],
      "course_content": {
        "Introduction": [
          "Download Godot",
          "Interface walkthrough"
        ],
        "Nodes and classes explanation": [
          "Classes and Class inheritance",
          "Common 2D nodes",
          "Common UI nodes"
        ],
        "Introduction to GDscript programming": [
          "Variables and data types",
          "Built-in functions",
          "Custom functions",
          "IF, ELIF, ELSE, AND and OR statements",
          "Other data types (Boolean, Array and Dictionary)",
          "For and While Loops",
          "Randomize functions",
          "Min and Max functions",
          "Inputs and Input map",
          "Accessing nodes from script",
          "Introduction to GD script test"
        ],
        "Creating a Calculator game": [
          "Introduction",
          "Creating the calculator UI",
          "Styling the UI using themes",
          "Game logic",
          "Finishing touches"
        ],
        "Core consepts to know in Godot": [
          "Custom signals",
          "Node groups",
          "Adding Audio",
          "Animation with AnimatedSprite",
          "Animation with AnimationPlayer",
          "Scene transitions",
          "Save and Load game data",
          "Collision layers explanation"
        ],
        "Creating a basic platformer game": [
          "Basic platformer game"
        ],
        "Creating a Ping pong game": [
          "Ping pong game"
        ],
        "Creating a flappy bird game": [
          "Player movement and control",
          "Camera movement and parallax backgrounds",
          "Tunnels and base platform",
          "Infinite tunnel instancing",
          "Bug fixes",
          "Menu screen",
          "Score counter",
          "Adding sound effeccts"
        ],
        "Creating a platformer shooter game": [
          "Section overview",
          "Setup and basics",
          "Player animations",
          "Player gun and screenshake",
          "Autotiles and Parallax backgrounds",
          "Enemies and score counter",
          "Tansition effect and Menu screen",
          "Dead Enemy Effect",
          "Enemy shoot back",
          "Paused and Failed screens",
          "Powerups and spreading bullets"
        ],
        "Export game to different platforms": [
          "Setting up for exports",
          "Android Export ?",
          "HTML5 Export ? (Play in Browser )",
          "Linux Export ?"
        ]
      },
      "requirements": [
        "Windows 7 or newer, macOS 10.10 or newer, Linux (64-bit or 32-bit x86) A computer with at least 2 Cores",
        "Hardware supporting OpenGL 3.3 Core Profile",
        "700 MB of Hard Disk space"
      ],
      "description": "Learn Godot 3 from scratch without any experience - 2D\nThis course will train you step by step on how to be a game developer with the godot game engine\nDavies Nzan, The instructor has thought thousands of students with hundreds of thousands of viewers on YouTube.\nThis course is a completely beginner friendly approach to game development with Godot and programming with GD script.\n\n\nHere you will learn how make 2D games with Godot 3 from scratch\nUnderstand the fundamentals programming and GD script\nAlso and be able to make platformer games and top down games.\n\n\nAt the end of this course, you'll be able to:\nUnderstand the Godot User Interface and its functions\nUnderstand the class inheritance node system\nUse built-in signals and create your own signals\nUnderstand collision layers and collision shapes\nWrite and understand GD script code (variables, loops, functions etc.)\nUnderstand the most common nodes and how to use them\nSaving and loading game data\nWork with scenes as well as scene instances at Runtime\nUse animations (AnimationPlayer, AnimateSprite)\nAdd sound effects to your game\nTiles and Parallax backgrounds\nCreate basic UI elements of your game\nStyle the UI of your game using themes\nCreate a flappy bird clone\nCreate a simple platformer shooter game\nExport your games to Android, Windows, Linux and Mac\nCome join thousands of students who have learned from Davies Nzan, now!",
      "target_audience": [
        "Want to learn game development with Godot from scratch without any programming experience",
        "Want to get started with game development"
      ]
    },
    {
      "title": "Unity Engine intro for absolute beginners!",
      "url": "https://www.udemy.com/course/unity-engine-intro/",
      "bio": "Do you want to get into game development? Want to learn how to use Unity? Look no further!",
      "objectives": [
        "Downloading Unity Hub and installing a Unity Engine version",
        "Navigating the Scene and Game windows in Unity",
        "Using the Hierarchy, Inspector and Project windows",
        "Using the Console for debugging",
        "Using the Profiler to learn more about the game's performance",
        "Making game builds and run them"
      ],
      "course_content": {
        "Introduction": [
          "Downloading Unity",
          "Unity Hub",
          "The Scene window",
          "The Game window & Play button"
        ],
        "Hierarchy, Inspector, and Project": [
          "Hierarchy",
          "Inspector",
          "Project"
        ],
        "Console, Profiler, Builds": [
          "Console",
          "Profiler",
          "Builds"
        ]
      },
      "requirements": [
        "No prior experience needed"
      ],
      "description": "In this course, we will take a first look at the Unity Engine. We'll go through the very basics, such as the most common windows and how to import assets into your game folders, as well as make a build for testing. There will be no programming this time, and you will not leave the course having made a complete game. What you will have is a solid foundation to build on when you keep learning!\nIncluded in the course is:\nDownloading the Unity Hub\nIntro to the Unity Hub\nIntro to the Scene window, including manipulating game objects in the scene\nMoving around in the scene window\nRepositioning game object\nRotating game objects\nScaling game objects\nIntro to the Game window\nHow does it correlate to the Scene window?\nTesting the game in-engine\nLooking at the scene Hierarchy\nParent/child relations\nCreating \"folders\" for structure\nChanging game objects using the Inspector\nActive/Inactive objects\nSetting Tags\nObject name\nGoing through the Transform component\nAdding other predefined components, such as a RigidBody\nIntro to the Project window\nImporting assets into your game folders using the Assets folder\nAdding a material to a 3D object\nAdding a texture to a material\nA quick look at shaders\nUsing the Console to debug code\nLooking at the Profiler, and how it's used to measure the game's performance\nBuilding the game\nA quick look at the many build options\nTesting the game outside the engine",
      "target_audience": [
        "Absolute beginners in the Unity Engine"
      ]
    },
    {
      "title": "An Introduction To Video Game Production",
      "url": "https://www.udemy.com/course/an-introduction-to-video-game-production/",
      "bio": "How Games Get Produced - a tour through the main areas a game producer must manage to ensure a successful game launch",
      "objectives": [],
      "course_content": {},
      "requirements": [
        "A device to be able to view and listen to the lectures",
        "A PDF reader on your device",
        "Office Software of any kind",
        "A notepad and pen",
        "That's it, you're good to go!"
      ],
      "description": "A complete introduction to how video games are produced from what a game producer does everyday to how to build and maintain a backlog, how marketing affects your production plans to the ethics of being a producer, and a whole bunch more.\nThis course is set up for anyone interested in how video games are produced, from fresh producers to game design and production students and indeed anyone who just wants to have a look behind the curtain of video game production.\nIn the course we go through a set of lectures covering all areas of game production, complete with exercises you can try, and at the end we take what we've learned and run through an example project, which can act as a proxy for your own game.\nBy the end of the course you should be equipped to plan and produce your own video game in a conscientious way, aware of and now able to avoid all the pitfalls and problems most teams have to experience for themselves.\nYou get lifetime access to this course for one fee, and the instructor is an experienced games industry producer who's worked on some of the biggest games ever released (like GTA V & Cyberpunk 2077) and wants to share the knowledge they've gained so you can make your own projects in a safer, less risky way.\n\n\nWhat this course ISN'T:\nWe discuss the skills of a video game producer and all the essential knowledge required to PLAN your project effectively, this course is not focused on BUILDING a game (check Udemy for other awesome courses on how to use Unity or Unreal to build a game!)",
      "target_audience": [
        "Game development students",
        "New video game producers",
        "Anyone who'd like to get into the industry as a producer",
        "Gamers who want to see behind the curtain a little",
        "Journalists who may want to do some extra research into the role of a game producer"
      ]
    },
    {
      "title": "Fortnite UEFN Bootcamp: Build & Publish Games",
      "url": "https://www.udemy.com/course/uefn-fortnite/",
      "bio": "Master Unreal Editor for Fortnite: world-building, devices, gameplay & monetization—no coding experience required.",
      "objectives": [
        "Publish a complete Fortnite island—from first block-out to live release—using UEFN’s built-in workflow.",
        "Sculpt terrain, place assets, & light worlds to create visually rich, console-ready environments.",
        "Create gameplay with Verse & devices, adding enemy NPCs, checkpoints, win conditions, and XP rewards.",
        "Produce cinematic cut-scenes with Sequencer, plus custom music, SFX, and materials for polish.",
        "Leverage AI tools to generate level ideas, 3-D meshes, concept art, and high-click thumbnails.",
        "Optimize memory, analytics, & matchmaking to retain players and unlock higher revenue tiers."
      ],
      "course_content": {
        "Introduction": [
          "Intro to Course",
          "Join the Community, Find Resources, Get Help",
          "Creating a Fortnite Creator Account",
          "Building Your Very First Game",
          "Understanding the Fortnite Ecosystem",
          "Official UEFN Tutorials & Documentation"
        ],
        "The Basics of UEFN": [
          "Get Started Easy With UEFN Game Templates",
          "The Basics of UEFN - Move, Scale, Rotate",
          "Understanding the Fortnite Grid System",
          "Island Settings & Changing Time of Day",
          "Intro to Landscaping",
          "Painting Landscape",
          "How to Use Fab and Make a Desert With Foliage",
          "Working With Water in UEFN",
          "Free Fortnite Props and Galleries",
          "Fortnite Creative Devices",
          "How to Make Walking Dead and LEGO Games Part 1",
          "How to Make Walking Dead and LEGO Games Part 2"
        ],
        "Oddly Obby: Building a Full Fortnite Creative Game": [
          "Game Design and Planning",
          "Creating the Tasklist With AI",
          "Creating Colors & Materials",
          "Creating Custom 3D Assets With AI Tools",
          "Creating the Landscape",
          "Foliage Part 1",
          "Foliage Part 2",
          "Volume Teleport Device",
          "Building the Obby",
          "Obby Island Settings",
          "XP Coins & Accolades",
          "Creating the Winners Area",
          "Creating a Cutscene Cinematic",
          "Creating Game Music",
          "Writing Your First Code with Verse",
          "Creating a Jump Tracker With Verse",
          "Creating a Time Tracker with Verse"
        ],
        "Publishing & Marketing": [
          "Researching Competitors & Seeing Creator Revenue",
          "Creating a Fortnite Island Thumbnail",
          "Creating a Fortnite Island Lobby Background",
          "Setting the Ratings for Your Island",
          "Island Meta Data and Publishing",
          "How to Market Your Fortnite Island"
        ],
        "Extra Resources: Learning Verse Programming for Beginners": [
          "Intro to Verse & Variables",
          "Working with Verse Operators",
          "Control Flow in Verse",
          "Simple Verse Loops",
          "Working with Functions in Verse",
          "Understanding Classes & Object Oriented Programming",
          "Using Arrays in Verse"
        ]
      },
      "requirements": [
        "Windows PC that can run Fortnite",
        "Stable internet connection and ≈ 30 GB free disk space to install UEFN.",
        "Free Epic Games account",
        "No coding experience required",
        "No prior coding or game-dev experience needed—everything is taught from scratch."
      ],
      "description": "Welcome to the fastest on-ramp into Fortnite game creation. Epic Games has already paid creators over $700 million for fun, engaging islands—now it’s your turn to step onto the stage with UEFN (Unreal Editor for Fortnite).\nIn this hands-on bootcamp, veteran developer Mark Price—developer on hit Fortnite maps like SUPER Red vs Blue—guides you from total beginner to published creator.\n\n\nWhat you’ll learn:\n\n\nNavigate UEFN like a pro: viewport, transforms, layers & world partition.\nSculpt landscapes, add water volumes, and light vibrant Fortnite-style worlds.\nUse thousands of free assets, including tools themed after LEGO, TMNT, Squid Game & The Walking Dead.\nProduce cinematic end-game cutscenes with the Sequencer device.\nSpawn and script enemy NPCs for PvE and survival challenges.\nLeverage AI & ChatGPT for game and level design, concept art, thumbnails, and ideation.\nGenerate custom 3D meshes with AI and import them into your island.\nConfigure gameplay devices: Round Manager, Scoreboards, Mutator Zones, Volume triggers.\nDesign an Oddly Obby parkour game start-to-finish, with checkpoints & XP rewards.\nCreate custom materials, plus adaptive music and SFX for immersive audio.\nKeep players engaged with smart XP loops, metadata ratings, and lobby images.\nApply straightforward island-marketing tips to boost discovery.\nOptimize memory & performance for smooth console and mobile play.\nPublish your island and set up Epic payout credentials.\nExtra Highlights:\n\n\nBuild inside official Fortnite crossovers—from LEGO escape rooms to TMNT sewer battles—using 100 % legal IP content.\nAdditional Extra Verse programming section at the end for those who want to build crazy things!",
      "target_audience": [
        "Fortnite players who want to turn creative ideas into published, playable islands.",
        "Absolute beginners who want to build games FAST",
        "Indie or Roblox/Unity devs exploring UEFN’s cross-platform reach and Creator payouts.",
        "Teachers, mentors, & after-school clubs looking for engaging STEAM projects.",
        "Content creators aiming to expand their brand with interactive experiences and events.",
        "Indie game developers who want a new way to build and monetize games"
      ]
    },
    {
      "title": "iOS Game Development in Swift 2",
      "url": "https://www.udemy.com/course/ios-game-development-in-swift-2/",
      "bio": "Learn to create a 'tripeak solitaire' card game",
      "objectives": [],
      "course_content": {
        "Before we start": [
          "A quick overview"
        ],
        "Basics": [
          "Starter project overview",
          "How to add a card on screen",
          "How to create a peak",
          "How to create 3 peaks",
          "How to create the last row of cards"
        ],
        "Interaction & peak logic": [
          "How to create the back of the card",
          "How to receive taps on the card",
          "How to work with card managers",
          "How to create a flipping animation"
        ],
        "Game Logic": [
          "How to create the deck",
          "How to create the main game logic",
          "How to keep the score",
          "How to display the score",
          "How to add a started / game over state",
          "How to add overlays"
        ],
        "Extras": [
          "How to animate the dealing",
          "How to add the background",
          "How to add sound effects"
        ],
        "Menu & timed mode": [
          "How to create the menu scene",
          "How to create the buttons",
          "How to add configuration",
          "How to add timed mode"
        ],
        "Finishing touches": [
          "How to pause the game",
          "How to add a parallax effect on the background"
        ],
        "Multi-device support": [
          "How to manage layouts",
          "How to support multiple devices"
        ]
      },
      "requirements": [
        "iOS development is only possible on a Mac",
        "Students need to download XCode 7 or higher (free in the Appstore)"
      ],
      "description": "Lead instructor at codecaptain.io, Sabatino Masala will teach you how to create an entire Tripeaks Card game in Apple's 2D gaming framework called SpriteKit.\nSabatino trained over 900 students in person and improved his teaching approach over the years so students could strengthen their programming skills in an effective and fun course.\n2016 marks his 10th year of being a game developer and over the years he released over 27 games, 18 of which reached over 1 million unique players!\nAll that attention didn't go unnoticed, because recently, one of the biggest companies in the gaming industry reached out to him, and that company was Nintendo. They made him a certified Nintendo developer, so you can rest assured you're in the right hands for learning a thing or two about game development.\nThis course is meant for students with some prior experience in (app) programming and want to start learning game development in iOS. This course will provide the source of every step in the lectures, so no need to worry when you're stuck somewhere!\nAll the assets will be provided and you're free to use them in any other project.\nWhat will I learn in this course?\nThe Model View Controller (MVC) pattern\nThe Swift programming language\nSKScenes for managing the menu and game scene\nSKNodes and SKSpriteNodes\nSKTransitions for transitioning between scenes\nUIMotionEffects for parallax effects\nCreating delegates and subclasses to communicate effectively between UIKit and Spritekit\nDazzling animations in SpriteKit using SKActions\nCross-device compatibility (we'll support all iPhones starting from iPhone 4 as well as the iPad)\nKeeping your code structured and organized\nThe entire game mechanics for creating a Tripeak Solitaire game\nSolving issues that have origins in the Swift compiler\nSquatting bugs in a timely matter\nFocussing on an impeccable user-experience\nThe ideal student has...\n... some prior experience with Xcode\n... some programming experience in Swift or Objective-C\n... a big interest for game development and isn't afraid to get its hands dirty when experiencing an issue",
      "target_audience": [
        "This course is meant for students with a small level of experience in iOS development"
      ]
    },
    {
      "title": "Unreal Engine 4: Introduction to Blueprints",
      "url": "https://www.udemy.com/course/unreal-engine-4-introduction-to-blueprints/",
      "bio": "An introduction to the Blueprints in Unreal Engine",
      "objectives": [],
      "course_content": {
        "Introduction": [
          "Introduction to Classes",
          "Data Types",
          "Appending Data",
          "Public and Private Variables",
          "Conditional Statements, Branch Statements, IF Statements",
          "Nested IF Statements",
          "Case statements and Switch Statements",
          "Boolean Logic, AND, OR, NOT",
          "While Loops",
          "For Loops",
          "For Each Loops",
          "Game Modes",
          "Adding a Player Character",
          "Custom inputs and movement axis",
          "Casting Data from an actor",
          "Custom Events and Functions",
          "Basic Structures",
          "HUDs",
          "Arrays and appending to HUDs",
          "Heath and Progress Bars",
          "Level to Level",
          "Games Instance",
          "Rotation of the Camera, and Forward Vector Movement",
          "Vector Right movement.",
          "Line Tracing towards a target"
        ]
      },
      "requirements": [
        "A copy of the Unreal Engine 4, and a basic understanding of Mathematics."
      ],
      "description": "In these lessons you will start by learning at a beginner level in programming within Blueprints, finding out the basic information needed within all programming development. From this you will start to move into building in more advanced mechanics in an easy to follow step by step approach which will allow you to play around and build your own content to eventually build your own game.\nBlueprints are the in house programming tool used by Unreal as a visual programming. This allows for fast development of systems and mechanics within a game environment. This can be used for rapid prototyping of games development system which might be useful to an new developer, or that of someone looking to transfer from one programming language to Unreal.\n\n\nHopefully this series will be able to help you develop your own mechanics and systems and will lead you to have a greater knowledge of how to use the Unreal Engine 4 Blueprint system.\nAny questions, feel free to ask them, please note I am aware of the audio quality on the videos and this is something that I am looking to address in future videos. Though if you have any questions regarding how to program feel free to ask away.",
      "target_audience": [
        "Beginners looking to start programming in Blueprint for Unreal Engine 4."
      ]
    },
    {
      "title": "From zero to hero Unity course: Make a Marlo game!",
      "url": "https://www.udemy.com/course/unitygamefromscratch/",
      "bio": "Learn to code in C# & make your first complete 2D game in Unity® 2017! This course is perfect for any beginner developer",
      "objectives": [
        "Build a Classic 2D Marlo Bros game in Unity®",
        "Learn the fundamentals of game design.",
        "Create game art in Photoshop.",
        "Code in C#.",
        "Add sound effects to a game."
      ],
      "course_content": {
        "Course Trailer": [
          "Course Trailer"
        ],
        "Introduction to Unity": [
          "Introduction",
          "Unity Editor",
          "Moving a Cube",
          "Materials",
          "Lights",
          "Particle System",
          "Applying Physics",
          "Assets Store"
        ],
        "Introduction to Coding in Unity": [
          "Introduction",
          "Variables",
          "Methods",
          "If Blocks",
          "Loops"
        ],
        "Introduction to Inputs in Unity": [
          "Introduction",
          "Key Presses",
          "Moving a Player",
          "Jumping",
          "Moving Forward",
          "Cycling Camera"
        ],
        "Introduction to Prefabs in Unity": [
          "Introduction",
          "Introduction to Prefabs",
          "FAQ on Instantiating Objects",
          "Random Angles",
          "FAQ on Destroying Objects",
          "Explosion Effect",
          "Adding Explosion Effects"
        ],
        "Starting the Project in Unity": [
          "Organizing the Project",
          "Preparing the Player",
          "Walking and Jumping",
          "Raycasting",
          "Raycast Precision",
          "Making the Camera Follow",
          "Coins",
          "User Interface",
          "Events",
          "Simple Enemy",
          "Enemy Walking Paths",
          "Jumping over Enemies",
          "Making a Shell Enemy",
          "Shell Bouncing",
          "Pipe Enemy",
          "Blocks",
          "Making Powerups",
          "Powerup Feedback",
          "Setting up a Win and Lose"
        ],
        "Introduction to Photoshop": [
          "Build a New File",
          "Navigational Controls",
          "Basic Tools Rundown",
          "Basic Tools Usages",
          "Basic Secondary Tools",
          "Basic Layers",
          "Painting Sample",
          "Adjustment Layers (Part 1)",
          "Adjustment Layers (Part 2)",
          "Adjustment Layers (Part 3)",
          "Transform Tool",
          "Transforms Tool (cont'd)",
          "Colour Range Select",
          "Image Settings",
          "Image Adjustment",
          "Photoshop Fun",
          "Photoshop Fun Continued",
          "Ruler Usage"
        ],
        "Art Asset Creation (Photoshop Projects)": [
          "Old and New Project Interface",
          "Project Set Up",
          "Brick Block Asset",
          "Coin Block Asset",
          "Pipe Asset",
          "Background Objects",
          "Checkpoint Flag",
          "End House",
          "Castle",
          "Power Block",
          "Foundation Block",
          "Shell Enemy",
          "Shroom Enemy",
          "Powerup Shroom",
          "Plant Enemy",
          "Marlo"
        ],
        "Art Asset Animation (Photoshop Projects)": [
          "Animation Setup",
          "Shroom Animation",
          "Shell Enemy Animation",
          "Marlo Idle",
          "Marlo Running Animation",
          "Marlo Running Animation Continued"
        ],
        "Finishing the Game in Unity (Project)": [
          "Importing Art",
          "Background Setup",
          "Infinite Background",
          "Game Element",
          "Integrating Blocks",
          "Adjustments",
          "Finish Line",
          "Enemy Animation",
          "Player Animation",
          "Block Collision Adjustment"
        ]
      },
      "requirements": [
        "Download and install Unity® 2017.2.0f3 and Adobe Photoshop CC 2017.",
        "This course was recorded on a Mac, but you can use a PC."
      ],
      "description": "\"Great course really well explained.\"\nThis course was funded by a wildly successful Kickstarter.\nIf you're as nostalgic for the classic Super Mario as we are, join us in this course! Learn to make a 2D platform runner game. Design and implement power-ups, enemies, game characters, and backgrounds. We interweave theory with practical examples so that you learn by doing.\nGlauco Pires from Mammoth Interactive teaches you how to build a Super MARLO Runner game with Unity®. This course is unique because we make both the code and the art for the game from scratch. We teach you the fundamentals of designing, coding, and fine-tuning a game.\nBeginner's Guide for Aspiring Game Developers\nFirst you design the game and its functionality in Unity®. You learn how to code in C# and build video game levels. Don't worry if you've never coded before. We start simple and add more to the game as the course goes on.\nFurthermore, Kevin Liao teaches you everything you need to know about Photoshop to make game art. One of the best features is that you can watch the courses at any speed you want. This means you can speed up the or slow down the video if you want to.\nThis course is project-based. You will not learn a bunch of useless coding practices. At the end of this course, you will have an AWESOME game to use in your portfolio. Taking this course means that you learn practical, employable skills immediately.\nLearning how to code is a great way to jump in a new career or enhance your current career. Coding is the new math! Learning to code will propel you forward for any situation. Learn it today and get a head start for tomorrow. People who can master technology will rule the future.\nAll source code and art assets are included with your purchase. Enroll today to join the Mammoth community!",
      "target_audience": [
        "Complete beginners. No prior coding or digital art skills necessary.",
        "People who want to make games."
      ]
    },
    {
      "already_crawled_in": "development/Data Science",
      "url": "https://www.udemy.com/course/the-complete-unity-masterclass-build-2d-3d-ai-games/"
    },
    {
      "title": "Build Your Own Nonogram Puzzle Game in Unity (C#)",
      "url": "https://www.udemy.com/course/build-your-own-nonogram-puzzle-game-in-unity-c/",
      "bio": "Learn to create a Nonogram puzzle game using Unity & C# from grid logic to UI design. Perfect for indie devs & hobbyists",
      "objectives": [
        "Learn how Nonogram puzzles work and generate them procedurally.",
        "Build a fully functional Nonogram game in Unity with C#.",
        "Implement puzzle mechanics, validation, and user interaction.",
        "Optimize gameplay with difficulty settings, UI, and polish."
      ],
      "course_content": {
        "Introduction and Basics": [
          "#1 - Nonogram - Introduction",
          "#2 - Nonogram - Conzept",
          "#3 - Nonogram - Unity Overview",
          "#4 - Nonogram - Import ButtonGrafics"
        ],
        "Nonogram Level Designer": [
          "#5 - Nonogram - Cell Button Script",
          "#6 - Nonogram - Cell Button Prefab",
          "#7 - Nonogram - Grid Layout #1",
          "#8 - Nonogram - Grid Layout #2",
          "#9 - Nonogram - Grid Manager #1",
          "#10 - Nonogram - Puzzle #1",
          "#11 - Nonogram - Puzzle #2",
          "#12 - Nonogram - Puzzle #3",
          "#13 - Nonogram - Filling Clues #1",
          "#14 - Nonogram - Filling Clues #2",
          "#15 - Nonogram - Clues UI Manager",
          "#16 - Nonogram - Fixing the Bugs",
          "#17 - Nonogram - Puzzle Scaler",
          "#18 - Nonogram - Saving a Puzzle",
          "#19 - Nonogram - Optimising",
          "#20 - Nonogram - Playfield Panning"
        ],
        "Nonogram Game Scene": [
          "#21 - Nonogram - The Game Scene",
          "#22 - Nonogram - Design Clues",
          "#23 - Nonogram - New Grid Buttons",
          "#24 - Nonogram - Loading Puzzles",
          "#25 - Nonogram - Loading Row Clues",
          "#26 - Nonogram - Loading Column Clues",
          "#27 - Nonogram - Filling the Grid",
          "#28 - Nonogram - Checking for Win"
        ],
        "Nonogram Loading Levels": [
          "#29 - Nonogram - Level Load Concept",
          "#30 - Nonogram - Level Load Layout",
          "#31 - Nonogram - Level Load Prefabs",
          "#32 - Nonogram - Level Load Objects",
          "#33 - Nonogram - Autofill Objects",
          "#34 - Nonogram - Fill Difficulty Buttons",
          "#35 - Nonogram - Fill Level Buttons",
          "#36 - Nonogram - Prepare Level Loading",
          "#37 - Nonogram - Level Loading",
          "#38 - Nonogram - GameOver Screen"
        ],
        "Nonogram Main Menu": [
          "#39 - Nonogram - Main Menu Scene",
          "#40 - Nonogram - Main Menu Buttons",
          "#41 - Nonogram - Exit to Menu Button"
        ],
        "Nonogram WebGL Build": [
          "#42 - Nonogram - Organizing Puzzles",
          "#43 - Nonogram - Creating WebGL Build",
          "#44 - Nonogram - Upload to Itch"
        ],
        "Conclusion and Extra": [
          "#45 - Nonogram - Conclusion"
        ]
      },
      "requirements": [
        "Basic understanding of C# and Unity.",
        "Unity installed (latest stable version recommended).",
        "Familiarity with game development concepts.",
        "Interest in puzzle games and logic-based mechanics.",
        "A PC or Mac capable of running Unity.",
        "No prior experience with Nonograms needed!"
      ],
      "description": "Want to build your own Nonogram puzzle game in Unity? In this course, you will learn how to create a fully functional Nonogram (Picross, Griddler) game using C# and Unity. Nonograms are logic-based puzzles where players fill in a grid based on numerical clues, revealing a hidden pixel-art image. By the end of this course, you will have the skills to design, develop, and expand your own Nonogram puzzle game from scratch!\nThis course is perfect for indie developers, hobbyists, and aspiring game programmers who want to explore game logic, UI development, and level generation. Whether you are new to Unity or already have some experience, this course will guide you through the entire development process, from setting up the grid system to creating an engaging user experience.\nWhat You'll Learn:\nUnderstanding Nonogram Logic – Learn how Nonograms work and how to generate valid puzzles.\nGrid System & UI Design – Implement an interactive game board using Unity’s UI tools.\nPuzzle Validation & Player Interaction – Ensure puzzles are solvable and provide real-time feedback.\nLevel Loading System – Use JSON files to dynamically load and manage puzzle levels.\nDifficulty Settings & Game Progression – Implement multiple difficulty levels for replayability.\nOptimized Performance – Improve efficiency for a smooth and responsive game experience.\nGame Polishing & Expansion Ideas – Add new features like hints, timers, and unlockable content.\nThroughout the course, you will write your own scripts and build the game step by step, gaining a deeper understanding of game development principles along the way.\nImportant: This course material is for educational purposes only. It does not include pre-made scripts but provides the knowledge and structure to write them yourself.\nBy the end of this course, you will have a complete Nonogram game framework, ready to customize, expand, or even publish!",
      "target_audience": [
        "Aspiring game developers interested in puzzle games.",
        "Unity and C# learners looking for a practical project.",
        "Indie developers wanting to create a Nonogram game.",
        "Hobbyists who enjoy logic-based game design.",
        "Game designers exploring procedural puzzle generation.",
        "Anyone curious about building a complete game in Unity!"
      ]
    },
    {
      "title": "Player vs Player tvOS Games",
      "url": "https://www.udemy.com/course/how-to-program-player-vs-player-tvos-games/",
      "bio": "Learn to program one or two player games with external game controllers on the new Apple TV",
      "objectives": [
        "Program a One or Two Player Game with Swift and Sprite Kit",
        "Work with External Game Controllers and the new Apple TV (or iOS apps)",
        "Learn the fundamentals of creating a tvOS app"
      ],
      "course_content": {
        "Swift Programming for External Controllers on tvOS": [
          "Introduction",
          "Connecting an Extended GamePad Controller",
          "Connecting Standard and Micro Gamepad (the remote) Controllers",
          "Project files for Swift 3 / Swift 2.2",
          "Moving Player 1 with the Extended or Micro Gamepad",
          "Rotating with the Extended and MicroGamePad",
          "Wrapping up One-Player Controls with Firing",
          "Project Files 2"
        ],
        "Player vs Player with Multiple Controllers": [
          "Handling Multiple Controllers with tvOS",
          "Project (Before Second Player Added)",
          "Setting up the Second Player (and Creating a Custom Tank Class)",
          "Setting up the Second Player (continued)",
          "Firing from the Second Player",
          "Adding a One-Player Mode with CPU Controlled Second Player",
          "Going Back and Forth Between 1-Player and 2-Player Modes",
          "Going Back and Forth Between 1-Player and 2-Player Modes (continued)",
          "Pause Screens with Options to Resume or go to the Main Menu",
          "Adding a Main Menu",
          "Project Files"
        ],
        "Player vs Player Gameplay": [
          "Detecting Physics Collisions",
          "Creating a Bullet Class",
          "Animated Explosions and Tank with Tank Bumping",
          "Tank with Bullet Collisions and Losing Lives",
          "Loading New Levels and Adding a Lives Label",
          "Making the Camera Track a Central Point Between Players",
          "Adding Walls to Ricochet or Remove Bullets",
          "Project Files",
          "Conclusion"
        ]
      },
      "requirements": [
        "Some basic knowledge of Xcode and Swift / Sprite Kit is preferred"
      ],
      "description": "***SOURCE PROJECT FILES UPDATED FOR SWIFT 3 (see change notes below)\nIn the first section of videos, you'll learn how to find connected controllers, define which buttons do what, set player indexes (i.e. Player 1, Player 2, etc) and work with a basic character.\nIn section 2, you'll learn the Swift  / Sprite Kit code to work with multiple Extended / Standard Gamepad controllers (as well as the Micro Gamepad controller), to go head to head versus players in the same room. After we look at the finer points of connecting and disconnecting controllers and getting each in the right player slot, we'll discuss how to control who is who in any type game, and even go into a one-player mode where the CPU takes control of the second player. This way your two-player game can also be enjoyed by single players. We'll also discuss adding a Pause menu to your game, where players can go back to a Main menu or keep on playing.\nNow that we've covered all our bases in terms of controlling each player and dealing with controllers disconnecting and reconnecting, section 3 allows us to have some fun. This session we'll loosen things up a bit and just talk game play. Topics include collision detection, decrementing health, losing lives / restarting rounds, and other topics worthy of a good two-player game!\n\n***CHANGE NOTES FROM SWIFT 2 to 3\nWe've included updated source files for Swift 3. If you choose to follow along, line-by-line with the video code, you should have no problems, as Xcode 8 will auto-suggest the correct code for Swift 3.",
      "target_audience": [
        "Intermediate Swift and Sprite Kit students",
        "Anyone who wants to start making money in the new Apple TV store!"
      ]
    },
    {
      "title": "Master Godot 4 Mobile Game Dev by Building a 2048 Clone",
      "url": "https://www.udemy.com/course/master-godot-game-development-by-building-a-2048-clone/",
      "bio": "Create a fun and addictive 2048 game from scratch! Scripting, Animations, Touch Input, Sound effects, and More!",
      "objectives": [
        "Understand the core functionalities of the Godot engine",
        "Implement swipe controls using touch input",
        "Build a grid system to organize your game board",
        "Animate tile movements and mergers for a polished look",
        "Integrate sound effects to enhance the gameplay experience",
        "Clarity and Simplicity: Instead of overwhelming you with unnecessary complexity, I’ll show you straightforward approaches to solving problems",
        "Freedom to Experiment: Unlike rigid paradigms, this course encourages a flexible and adaptable style, where you make the rules that suit your projects best",
        "Core Game Programming Concepts: Master topics like animations, input handling, and logic implementation in ways that are intuitive and empowering",
        "A Focus on Understanding: Learn why things work, not just how to make them work, giving you the confidence to apply these skills anywhere"
      ],
      "course_content": {
        "Introduction": [
          "Read Me Before Enrolling",
          "How to Download Godot and Create Your First Project",
          "Learning the Layout of the Godot Engine",
          "Game objects, Nodes, and Sprites",
          "Writing and Managing Scripts in Godot",
          "Understanding the 'extends' Keyword in Godot",
          "Animating Objects with Scripts in Godot",
          "How to Animate Objects in a Circular Path",
          "Animating the Rotation of Nodes in Godot",
          "Exporting Variables to Control their Values from the Editor"
        ],
        "Creating a grid script": [
          "Making a Grid Cell Prefab to build a Grid with it",
          "Building a Grid using only Scripts",
          "Making a texture for the Grid Cell"
        ],
        "Making the tiles": [
          "Creating a Tile Prefab to Spawn Tiles via Script",
          "Changing the Tile Modulation and Font Color"
        ],
        "Touch input swipe": [
          "Input Script to Detect Touch",
          "Calculating the Delta Touch Position on Drag Event",
          "Using Signals to Detect Swipes",
          "Connecting the Swipe Signal"
        ],
        "Moving tiles on the grid": [
          "Dictionary as Logical Representation of Grid Tiles",
          "Finding 'Last Empty' Grid Cell in a Given Direction",
          "Moving Tiles in Grid Dictionary",
          "Using Loops to 'Effectively Move' a Tile Freely on the Board",
          "Using Godot's Tween Engine to Animate Slide Tiles"
        ],
        "Merging tiles": [
          "Syntax Errors and Logic Errors",
          "Fixing Slide Rightwards by Changing Order of Iteration",
          "Fixing Slide Down and Up by adding two more For Loops",
          "Laying out the Plan for Merging Tiles",
          "Keeping Dictionary Synchronized",
          "Removing Tile Nodes from the Scene Tree After They Merge",
          "Debugging, and the Real Meaning of Programming"
        ],
        "Animating the merge action": [
          "Ilusions, Magic and Misdirection",
          "Relative and Global (or absolute) positions and Scale Animation",
          "Finishing Scale Animation, and Premature Optimization",
          "Animating Foreground and Background Colors",
          "Adjusting Merge Animation Timing, and Debugging a Puzzling Bug",
          "Slow Motion, and Fixing the Puzzling Bug"
        ],
        "Implementing the remaining features": [
          "Spawning Tiles at Random Grid Positions",
          "Naive Algorithm for picking Random Grid Positions",
          "Allowing only Tiles with 'Same Value' to Merge",
          "Making Tiles Merge only 'Once Per Swipe'",
          "Fixing bugs, and Pushing Forward to Finish the Game",
          "The Random Bag Algorithm",
          "Per Tile Font Adjustment"
        ],
        "Adding sound effects and Organizing the project": [
          "Adding Sound Effects, and Organizing Assets",
          "Finishing it up"
        ]
      },
      "requirements": [
        "A computer capable of running the Godot game engine",
        "Basic familiarity with computers and software installation",
        "Basic familiarity with programming concepts like variables, functions and loops",
        "Basic high school level math"
      ],
      "description": "Unleash your game development skills with Godot by creating a fun and addictive 2048 game from scratch!\n\n\nHere's what you can expect:\nLay the foundation to become a Godot Game Dev Master: This course is your comprehensive guide to mastering Godot, a powerful and free game engine. Through step-by-step lectures and hands-on exercises, you'll conquer essential concepts like scripting, animation, touch input, and more.\nUnlock Your Game Creation Potential: Even if you're a complete beginner with no prior coding experience, this course welcomes you! We'll leverage the familiar 2048 game as a springboard, not aiming for a perfect replica. Instead, the focus is on building a rock-solid foundation in Godot's core functionalities. By the end, you'll have the skills and confidence to create captivating games that go beyond 2048!\nBy the end of this course: You'll have a functional 2048 game built with Godot and the skills to create even more exciting games in the future!\nHere's what you'll learn:\nDownload and set up Godot for game development.\nUnderstand the core functionalities of the Godot engine.\nScript objects, nodes, and sprites to control game mechanics.\nImplement swipe controls using touch input.\nBuild a grid system to organize your game board.\nCreate tile prefabs and manage their movement on the grid.\nAnimate tile movements and mergers for a polished look.\nImplement core game mechanics like random tile spawning, merging logic, and animations.\nIntegrate sound effects to enhance the gameplay experience.\nOrganize your project for efficient development.",
      "target_audience": [
        "Beginners who want to dive into game development without feeling overwhelmed",
        "Those interested in learning Godot and GDScript programming",
        "Curious minds that prioritize freedom in their coding style and clarity in understanding concepts",
        "Aspiring developers who are ready to explore practical, hands-on techniques instead of strictly adhering to rigid paradigms like OOP"
      ]
    },
    {
      "title": "Complete C# Unity Game Development 3D For Absolute Beginners",
      "url": "https://www.udemy.com/course/complete-c-unity-game-development-3d-for-absolute-beginners/",
      "bio": "Learn C# with Unity and create your own 3D Runner Game",
      "objectives": [
        "Create a 3D environment",
        "Implement player controls",
        "Design obstacles",
        "Implement game mechanics",
        "Add visual effects and animations",
        "Optimize game performance"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Player": [
          "Adding player",
          "Basic Programming",
          "Player Movement",
          "Jumping",
          "fix Jumping",
          "Limit Movement",
          "Animations"
        ],
        "Camera": [
          "Camera"
        ],
        "Obstacles": [
          "Obstacle Design",
          "Moving Obstacles",
          "Restart Level"
        ],
        "Scoring": [
          "Scoring System",
          "Scoring UI"
        ],
        "Design": [
          "Designing map",
          "Designing part2",
          "Skybox",
          "Lights"
        ],
        "Levels": [
          "Adding more levels",
          "Level Transition"
        ],
        "Menu": [
          "Setting up main menu",
          "Main menu Buttons",
          "Pause Menu"
        ],
        "Audio": [
          "Adding sounds"
        ],
        "Final Touches": [
          "Particle System",
          "Game Over screen",
          "Building game"
        ]
      },
      "requirements": [
        "Mac or PC capable of running Unity 3D",
        "Unity 2021 and Higher"
      ],
      "description": "Course Description:\nHave you ever dreamed of creating your own 3D games but didn't know where to start? Look no further! This course is designed for beginners, including complete beginners, who are eager to dive into the exciting world of 3D game development in Unity.\nIn this course, you will learn step-by-step how to create a 3D runner game from scratch. You don't need any prior experience in game development or Unity to enroll. We will start with the basics, guiding you through setting up a 3D environment, designing obstacles, and implementing player controls.\nThroughout the course, you will gain hands-on experience as you build your game from the ground up. You will learn how to program player movement, create and place obstacles, implement game mechanics like scoring and power-ups, and add visual effects and animations to enhance the gameplay experience.\nOne of the highlights of this course is its accessibility. Even if you're a complete beginner, you'll find the content easy to follow and engaging. We use a beginner-friendly approach, breaking down complex concepts into simple, easy-to-understand lessons. By the end of the course, you will have a fully functional 3D runner game that you can share with friends and family or even publish to app stores.\nJoin us on this exciting journey into the world of 3D game development. Enroll now and start turning your game development dreams into reality!\nYou will Learn:\n\n\nSet up a 3D environment in Unity, including terrain, skyboxes, and lighting.\nProgram player controls for a 3D character, including movement and input handling.\nDesign and implement various obstacles, including static and moving obstacles, to create challenging gameplay.\nImplement game mechanics such as scoring, power-ups, and game over conditions to enhance gameplay depth.\nCreate and apply visual effects such as particle systems and animations to improve game aesthetics.\nOptimize game performance through efficient scripting, object pooling, and other optimization techniques.\nUtilize Unity's physics engine to create realistic interactions between game elements.\nImplement a scoring system to track and display player progress.\nDesign and implement sound effects to enhance the overall game experience.\nPublish and share your 3D runner game with others, including on app stores and online platforms.",
      "target_audience": [
        "Beginners interested in learning 3D game development in Unity.",
        "Those with little to no prior experience in game development",
        "Students or hobbyists looking to create their own games",
        "Anyone curious about game development and eager to learn",
        "Complete beginners wanting to explore game development"
      ]
    },
    {
      "title": "Learn Vertex Painting in Unreal Engine 5",
      "url": "https://www.udemy.com/course/learn-vertex-painting-in-unreal-engine-5/",
      "bio": "Learn how to use vertex colors to add more complexity to your 3D models",
      "objectives": [],
      "course_content": {
        "Introduction": [
          "Vertex Color Theory",
          "Basic Vertex color",
          "Basic Vertex Painting",
          "Height Lerp",
          "Modifying Megascans Assets",
          "6. Quixel Master Blend Material"
        ]
      },
      "requirements": [
        "A basic understanding on how to navigate in Unreal Engine 5 is preferred but not mandatory."
      ],
      "description": "Vertex Painting is a tool for 3D Artist to generate data that can be used for many things. The most popular one is to blend different textures.\nIn order to use vertex painting you will learn how to paint inside Unreal Engine 5 using the Vertex Paint Tool. You will learn the basic theory and how to debug different vertex painting channels to visualize the data.\nThen you will learn how to create materials that can use this vertex color information. We will start with one single blend but then we will increase the complexity by adding multiple blends to different channels.\nThis method will allow you to increase the quality and complexity of your 3D models without the need to add more modeling details. It is extremely useful to add variation to your worlds and uniqueness to each asset so that you can create a rich and complex world.\nLast but not least, we will take a look at Quixel's automatic Blending Material that uses Vertex Painting to quickly apply everything we learnt and save time when creating your own materials in the future.\nVertex Painting is widely used in all AAA game projects and it is the secret to make them look like they have rich and complex worlds. After watching this course you will be able to do the same on your own projects.",
      "target_audience": [
        "Beginner Game Developers and 3D Artists who want to improve the quality of their assets"
      ]
    },
    {
      "title": "Unreal Engine 5 Introduction to Lighting by JSFILMZ",
      "url": "https://www.udemy.com/course/unreal-engine-5-introduction-to-lighting-by-jsfilmz/",
      "bio": "Introduction to Unreal Engine 5 Lighting and Lighting systems",
      "objectives": [
        "Introduction to Lighting in Unreal Engine 5.1",
        "Cinematic lighting in Unreal Engine 5.1",
        "Unreal Engine 5 lighting systems",
        "Different lighting techniques in different scenarios"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Lecture 2": [
          "Part Two"
        ],
        "Lecture 3": [
          "Part Three"
        ],
        "Lecture 4": [
          "Part 4"
        ],
        "Lecture 5": [
          "Part 5"
        ]
      },
      "requirements": [
        "Unreal Engine 5 installed",
        "basic knowledge of unreal engine 5",
        "hardware to run unreal engine 5"
      ],
      "description": "PLEASE READ EVERYTHING BELOW BEFORE MAKING THE PURCHASE! ALSO PLEASE MAKE SURE YOUR HARDWARE IS GOOD ENOUGH FOR THIS BEFORE PURCHASING (SEE RECOMMENDED SPECS BELOW)\n\n\nDISCLAIMER: In this course you will learn Unreal Engine 5’s lighting and lighting systems (includes new 5.1 settings). This is not a full explainer video, I WILL NOT go over every settings in Unreal Engine 5.1.\n\n\nProject Files are included in Lecture 2: Part 2 section.\n\n\n*WINDOWS 10 ONLY* *NOT RESPONSIBLE IF YOUR GPU GETS FRIED FOLLOWING THIS TUTORIAL BE CAREFUL*\nRecommended Hardware Specs: Windows 10 64 Bit, 12-core CPU at 3.4 GHz, with an NVIDIA RTX 2080 or AMD Radeon 5700 XT graphics card or higher, and 64 GB of system RAM, atleast 500GB of hard drive space. If you own an Apple computer I am sorry but I am not familiar with Mac computers so I do not know if it works with Unreal. You will need Winrar software to unpack course material. Additionally to follow along the Path Tracer portion you will need:\nOperating System: Windows 10 1809 or later\nGPU: NVIDIA RTX and DXR driver-enabled GTX series graphics cards\nWhat to expect to learn not in order:\nStatic Lighting\nStationary Lighting\nDynamic lighting\nUV Lightmaps\nDifferent Light Types\nUnreal Engine 5’s Visual Effects Volumes\nCPU Lightmass\nGPU Lightmass\nEnvironment Light Mixer\nLumen\nLumen with Hardware Ray Tracing (will require Windows 10 with DirectX 12 Video cards must be NVIDIA RTX-2000 series and higher, or AMD RX 6000 series and higher)\nLumen Software vs Hardware Raytracing\nPath Tracing\nLighting from scratch (Lumen Daylight Exterior)\nLighting from scratch (Lumen Daylight Interior)\nLighting from scratch (Lumen Night Cyberpunk Exterior)\nHow to Optimize your scene’s lighting to prevent crashes and low FPS.\nSKILL LEVEL\nThis Course is well-suited for new Unreal Engine 5 users but can potential benefit others also.\nSOURCE FILES\nThis course will come with all assets needed to follow along.\nYOUR INSTRUCTOR\nJSFILMZ is a multi-award winning Realtime filmmaker/youtuber featured and spotlighted by Epic Games and NVIDIA Omniverse.\nCyberpunk Alley kitbashed by: Pierpaolo from Unreal Environments\n\"PROVIDED ASSETS CAN BE USED FOR EDUCATIONAL PURPOSES ONLY\"",
      "target_audience": [
        "beginner unreal engine 5"
      ]
    },
    {
      "title": "2D Platformer in Unity 6 Beginner to Pro",
      "url": "https://www.udemy.com/course/adaptedlabs2dunity6/",
      "bio": "Master 2D game development in Unity 6 with a full project",
      "objectives": [
        "Build a fully playable 2D platformer game from scratch using Unity 6",
        "Understand core Unity systems and 2D game development workflows",
        "Create and script interactive gameplay elements with C#",
        "Export and build a finished game project you can play, share, or publish"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Getting Started": [
          "The Unity IDE",
          "Setting Up the Project"
        ],
        "The Player": [
          "Adding the Player",
          "Player Movement and Physics",
          "Player Animations, Double Jump & Camera Follow"
        ],
        "Tilemaps": [
          "Tilemaps"
        ],
        "Health System": [
          "Player Damage and Health System",
          "Health UI and Invincibility",
          "Knockback and Player Death"
        ],
        "Checkpoints and Items": [
          "Checkpoints and Respawning",
          "Items & Score System"
        ],
        "Enemies": [
          "Patrolling Enemy Part 1",
          "Patrolling Enemy Part 2",
          "Flying Enemy"
        ],
        "Sound and Level Transitions": [
          "Audio System",
          "Transitioning Between Levels"
        ],
        "Menus": [
          "Title Screen & Pause Menu",
          "Options Menu"
        ],
        "Platforms & Bug Fixes": [
          "Platforms",
          "Bugs Part 1",
          "Bugs Part 2"
        ]
      },
      "requirements": [
        "PC with Access to the Internet, Unity 6.0.37 downloaded (can be later LTS)"
      ],
      "description": "Ready to build your very own 2D platformer from scratch in Unity 6?\nIn this hands-on, beginner-friendly course, you’ll create a fully playable 2D platformer from the ground up — complete with smooth player movement, enemy AI, collectibles, health systems, level transitions, and a full boss fight! Whether you’re new to Unity or want a polished portfolio project, this course will walk you step by step through every part of the development process.\nYou won’t just follow along — you’ll learn how and why things work, building real development skills as you create your own game.\nWhat You’ll Build:\nA fully functional 2D platformer game in Unity 6\nClean, reusable systems for movement, health, audio, enemies, and menus\nA complete boss battle with animation-driven attacks and state logic\nA polished final build you can share or publish\nWhat You’ll Learn:\nUnity 6 basics: interface, project setup, organization\nPlayer movement, jumping, double-jump, and animations\nEnemy AI: patrolling, swooping, dealing damage, and more\nHealth and damage systems with visual feedback and UI\nCollectibles, score tracking, checkpoints, and respawning\nScene transitions, background music, and sound effects\nMenus: title screen, pause menu, options with volume sliders\nFull boss fight with attack phases, animation events, and a win screen\nBuilding and exporting your game to share with others\nWhy Take This Course?\nDesigned for beginners — no prior Unity experience required\nStep-by-step instructions, clearly explained\nBuild as you learn — everything taught is implemented in the project\nFocus on real development principles, not just copy/paste code\nReusable systems you can apply to future games\nBy the end of this course, you won’t just understand Unity 6 — you’ll have your own fully playable 2D platformer and the confidence to keep building from here.",
      "target_audience": [
        "Beginners interested in game development and not sure where to start."
      ]
    },
    {
      "title": "Unreal Complete Scene - Abandoned Train",
      "url": "https://www.udemy.com/course/ucs-abandoned-train/",
      "bio": "Learn how to create an abandoned train environment on UE5",
      "objectives": [
        "Create serval Game-Ready trees (with common LODs/Imposter)",
        "Create 3d branches to use as textures.",
        "Create an atlas to combine several parts in a single texture.",
        "Create ground foliage models optimized for realtime rendering.",
        "Create serval models with different shapes",
        "Complex shaders for Vegetation (trunk and foliage) and ground foliage (for plants, flowers, grass...)",
        "Advanced terrain shader with distance blend texture, Parallax Occlusion Mapping, RVT, automatic logic and spawn foliage with mask.",
        "Complete composition (Procedural Placement with PCG, volumetric clouds & fog, lighting, vfx...)",
        "Create 4k renders with the Movie Render Queue.",
        "Create multiple advanced textures.",
        "Export with the correct packed textures.",
        "Enhance textures quality"
      ],
      "course_content": {},
      "requirements": [
        "The basics on Unreal Engine 5 (Camera movement, import object...)",
        "Winrar or 7zip to decompress files",
        "Owning a computer with Windows 10 or Windows 11"
      ],
      "description": "During this course I will show you, step by step, how to create a scene inspired by my most knowned scene, the Abandoned Train!\nFrom the creation of Cedar, Hickory and Juniper trees to the ground vegetation, all created with Speedtree 9.5.2 and the final composition on UE5.3.2. We will see the creation of textures with Quixel Mixer and we will create all the shaders needed to get the maximum quality. We will finish with the 4k renders with the Movie Render Queue.\nUsing textures allowed in partnership with ScansLibrary.\n\n\nWhat I will learn?\nIn Speedtree 9.5.2:\nCreate serval Game-Ready trees (with common LODs/Imposter)\nCreate 3d branches to use as textures.\nCreate an atlas to combine several parts in a single texture.\nCreate ground foliage models optimized for realtime rendering.\nCreate serval models with different shapes\nIn UE5:\nComplex shaders for Vegetation (trunk and foliage) and ground foliage (for plants, flowers, grass...)\nAdvanced terrain shader with distance blend texture, Parallax Occlusion Mapping, RVT, automatic logic and spawn foliage with mask.\nComplete composition (Procedural Placement with PCG, volumetric clouds & fog, lighting, vfx...)\nCreate 4k renders with the Movie Render Queue.\nIn Quixel Mixer:\nCreate multiple advanced textures.\nExport with the correct packed textures.\nIn Photoshop:\nEnhance the quality\nCombine masks\n\n\nWhat I will get?\n~35 hours of step-by-step video tutorial\n8 dedicated chapters\nSeparate downloadable chapters (.zip)\n1080/30fps resolution\n\n\nSoftware Used:\nSpeedtree 9.5.2\nUnreal Engine 5.3.2\nPhoto/Image Editing Software (Photoshop, Gimp...)\nQuixel Mixer 2022\nPrerequisite:\nOwning a computer with Windows 10 (64Bits) / Not tested on Windows 11\nWinrar or 7zip to decompress files\nThe basics on Unreal Engine\nImportant note :\nThis course was created in version 5.3.2 and it is STRONGLY RECOMMENDED to use THE SAME version! If you choose to use another version, be aware that you may encounter possible errors not covered in this course.\n\n\nAbout copyrights:\nAll you can find in this course are for personal usage only. You cannot share it, sell it or make it available for free on any platform.",
      "target_audience": [
        "Beginners or intermediates wishing to learn how to create an environment in Unreal Engine 5 or vegetation on Speedtree"
      ]
    },
    {
      "title": "Game Development Made Easy: Construct 3 Course for Beginners",
      "url": "https://www.udemy.com/course/game-development-made-easy-construct-3-course-for-beginners/",
      "bio": "From Beginner to Game Developer: Unleash Your Imagination with Construct 3",
      "objectives": [
        "Learn the basics of Construct 3, the video game engine",
        "Learn how to create a simple video game",
        "Learn about the logic behind the commands and programming of a video game",
        "Learn how to make a video game WITHOUT in-depth knowledge of programming languages"
      ],
      "course_content": {
        "Introduction and Getting Started": [
          "Introduction",
          "Initial setup",
          "A New Project",
          "Saving and Backups",
          "Construct 3: Main Interface Elements",
          "Extra Info: Limitations with Events"
        ],
        "Building the Level": [
          "Intro To Tilemaps And Layers",
          "Using A Tiled Background",
          "Using A Tilemap",
          "About Collision Polygons"
        ],
        "The Player Character": [
          "Creating the Player pt 1",
          "Creating the Player pt 2",
          "Animations",
          "Particles, and the Origin Point",
          "Animation Logic pt1",
          "Animation Logic pt2",
          "The Camera"
        ],
        "The Bad Guy": [
          "Quick lesson: Z elevation",
          "Create the Enemy Object",
          "Setting Up the Enemy Object",
          "Adding logic for the Enemy Object pt 1",
          "Adding logic for the Enemy Object pt 2",
          "Something for the next section: Hit Particles"
        ],
        "Respawn with Checkpoints!": [
          "Create the Checkpoint",
          "Checkpoint Particles",
          "Checkpoint Logic pt 1",
          "Checkpoint Logic pt 2",
          "Killzone, Respawn and Functions pt 1",
          "Killzone, Respawn and Functions pt 2",
          "Killzone, Respawn and Functions pt 3",
          "Death by Enemy"
        ],
        "Collectables and the User Interface": [
          "Making the Collectible",
          "Variables: Counting our Collectible",
          "The UI Layer",
          "Sprite Font pt 1",
          "Sprite Font pt 2"
        ],
        "Platforms": [
          "Basic platform",
          "Moving Platform pt 1",
          "Moving Platform pt 2"
        ],
        "Time to Fight Back! - Shooting Mechanics": [
          "Creating the bullet",
          "Breakable wall",
          "Shoot logic",
          "Bullet logic pt 1",
          "Bullet logic pt 2",
          "Bullet Damage logic pt 1",
          "Bullet Damage logic pt 2",
          "Bullet Damage logic pt 3"
        ]
      },
      "requirements": [
        "No programming experience required.",
        "You just need a bit of patience, and the passion to create!"
      ],
      "description": "Have you always dreamed of designing your own video game? Do you lack the coding knowledge to make your dreams a reality? Don't worry, Construct 3, a popular game development software tool, makes it easy and intuitive to create games that are fun and engaging. And this Udemy course, \"How to Make a Game Easily with Construct 3\", will give you the skills and confidence to build your very own video game.\n\n\nThis course is designed for beginners who want to learn game development in an easy and intuitive way. During the course, you’ll learn how to set up a project, design game environments, incorporate game assets, and ultimately publish your creation for others to enjoy.\n\n\nWith easy-to-follow, step-by-step instructions, you'll learn how to use Construct 3's visual scripting language. This language makes coding accessible for everyone, regardless of prior experience, while still providing enough depth to create complex games.\n\n\nYou’ll start with the basics of setting up and using Construct 3, exploring its intuitive drag-and-drop interface and learning how to navigate the game development environment. From there, you'll move on to actually designing your game. You’ll add assets including characters, laying out the game’s levels and setting the rules of gameplay.\n\n\nBy taking this course, you'll have the skills and confidence to create your own games quickly and easily, and you'll expand your creative boundaries with Construct 3's powerful game development tools. Whether you're a hobbyist, an aspiring indie developer, or just someone who loves gaming, this Udemy course is the perfect starting point for your game-making journey.",
      "target_audience": [
        "Those who want to make video games but may not know where to start",
        "Those who want to make video games but don't have much (or ANY) programming language knowledge",
        "Those who want to bring their video game ideas to life with relative ease"
      ]
    },
    {
      "title": "Unity 3D Newbies: Create a game Fast No Coding Mini Class",
      "url": "https://www.udemy.com/course/unitydemo/",
      "bio": "No programing required demo of full Unity Course how to build your game fast and business of game making",
      "objectives": [],
      "course_content": {
        "Welcome to our course": [
          "Introducing Instructor Yohann",
          "Introducing Instructor Sergey",
          "Join the FREE Support Group"
        ],
        "Get inspired running a game business": [
          "Example of app games"
        ],
        "Create Game - Initial Setup": [
          "Important Note: Read this First",
          "Download the latest unity 3d",
          "Install Unity 3d version 5 with web player"
        ],
        "Creating your own game theme": [
          "Modifying the game background images and waves",
          "Creating the captain rocket space robot new title",
          "Designing the main robot character and its walk animation in unity 5"
        ],
        "Using Unity to make Virtual Reality apps": [
          "Fastest way to build Virtual reality games (part 1)",
          "Fastest way to build Virtual reality games (part 2)"
        ],
        "Let's talk about making apps and games": [
          "Is your app idea any good?",
          "Unity at the center of your game business",
          "Example of app games made with Unity"
        ],
        "Marketing using Social Media": [
          "Creating a facebook page (Part I)",
          "Creating a facebook page (Part II)"
        ],
        "Interview with Yohann": [
          "Blab Interview with Instructor Yohann Taieb"
        ],
        "Bonus Lecture": [
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "Be willing to try something new"
      ],
      "description": "Unity 3D Newbies: Create a game fast no coding required mini sampler class\nNote this is a lite version of the full course here you get a taste what the full course is all about for free and therefore no source code will be included. Once you purchased the full course we will also include a section how to market your course once it is published.\nIf you enjoyed this course make sure to get the full course which will include the lectures here plus a lot more content. This course assumes you know nothing about making games, and you will publish your very own game to the apple app store without coding not even a single line of code. Note this is only a demo once you enroll in the full course you will learn the following....\nThe full course will include the following....\nThe game comes with multiple advertising channels to bring your passive income.\nTeaches you how to market by using social media such as Facebook and twitter\nHow to get virtual assistants to outsource some of the tasks for creating the game\nAs a bonus show you how the game also works on Android phones not just macs\nAll it takes is one afternoon to have your very own game join the fan today\n\n\n\n\n************************\nINSTRUCTOR BACKGROUND\nI've been an entrepreneur and ecommerce seller since the year 2001. I have helped and coached thousands of students online and in person and got over 200,000+ students enrolled in all my online classes. I would love to share the secrets of my success with you, it is my personal mission to help get you to be your best. Learn from my experience and expertise so you can take your business to the next level and beyond.\n************************\nBONUSES & OFFICE HOURS\nWith the paid purchase of this course you get the following...\n* Free 15-min GoogleHangout coaching session to help you with any problems you might have with your online business\n* Super fast answers to questions ask me course related questions anytime with responses within 24 hours or less\n* Office hours when I hold 30 min-1 hour free sessions answering any of your questions live\n************************\nCERTIFICATE OF COMPLETION\nFinish 100% of class and get rewarded with a beautiful certificate that would be emailed to you. Use this to enhance your resume, show proof of expertise or extra curricular training. Print it out and frame it on your wall it is something you should be proud of.\n************************\nMONEY-BACK GUARANTEE\nThe course comes with an unconditional backed Udemy 30-day money-back guarantee so you can try this course risk free. I am sure you will love this course, this is not just a guarantee it is my personal promise to you that you will succeed and I will help you out so you too can get great results. With paid purchase you receive lifetime access, any future revisions or additional lectures free of charge plus unlimited instructor support.",
      "target_audience": [
        "If you want to learn how to create a game without needing to code"
      ]
    },
    {
      "title": "Programming and Game Design for DeckBuilding Games",
      "url": "https://www.udemy.com/course/programming-and-game-design-for-card-building-games/",
      "bio": "A Practical Course in Programming and Game Design for DeckBuilding Games",
      "objectives": [
        "Create a card system, with functions for drawing, shuffling, etc",
        "Create UI and animations to display cards and show action feedback, like card going from deck to hand, from hand to discard, being played, etc",
        "Create an Input system for the player be able to Select, Drag, Skip turn, etc",
        "Create units and simple stat systems, as well as interactions with those values",
        "Create a modular effect system for the cards, including different targeting mechanisms, costs and requirements to use",
        "Create a State Machine to control the flux of the game",
        "Create a modifier system to deal with status effects, artifacts, etc and how those alter the stats"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Unity and Preparing the Environment",
          "Text Editor"
        ],
        "Setting up the Environment and UI": [
          "Creating the Project and Getting the Art",
          "Creating the Card Prefab",
          "Creating the Prefab Variants",
          "Solving the Image Order Problem",
          "Adding a Horizontal Layout",
          "CardHolder",
          "Creating the Deck",
          "Moving the Cards",
          "Rotating the Cards",
          "Draw and Discard",
          "Shuffling Cards back into the Deck"
        ],
        "Beginning the Effect System": [
          "Using Interfaces",
          "Using Different Child GameObjects",
          "Discard After Playing"
        ],
        "Inputs": [
          "Adding the Input System",
          "Making the Card Selectable",
          "Drag System",
          "Drag System Pt. 2",
          "Detecting When a Card is Used",
          "Adding a Delay Between Card Movements",
          "Automatically Shuffling",
          "Effect When the Card is Used"
        ],
        "Units, Effects and Targeting": [
          "Unit and Stats",
          "Finding Sprites for the Units",
          "CombatTester and Setting Initial Stats",
          "Starting our Target System",
          "ITarget",
          "TargetPlayer",
          "TargetAllEnemies"
        ],
        "State Machine": [
          "StateMachine and State",
          "Adding Functionality to the LoadState",
          "Initializing Units",
          "Units Queue and TurnBeginState",
          "RecoveryState",
          "Playing Cards in the Correct State",
          "Ending Your Turn",
          "Clicking Units",
          "System for Playing Cards in Sequence",
          "Adding the Possibility of Multiple Effects per Card"
        ],
        "More Effects and Requirement System": [
          "TargetUnit",
          "Visual Feedback for Pointing at an Unit",
          "IPlayability",
          "Spending Energy",
          "Energy UI",
          "Stats Get/Sets",
          "Block Effect",
          "Block Protecting From Damage",
          "Victory and Loss Condition",
          "Status Effect",
          "Duration for Status Effects",
          "Damage Modifier",
          "Damage Modifier with Reference Type",
          "Percentage Status Effect",
          "Separating DoAttackDamage and TakeAttackDamage",
          "Modifying Block Values",
          "Mixing Stat Modifiers and the Percentage Effects",
          "Changing ICardEffect to an Abstract Class",
          "Applying Status Effects",
          "Stacking",
          "Disabling an Unit"
        ],
        "Project Backup": [
          "Project Backup"
        ]
      },
      "requirements": [
        "You need to have a good grasp on Programming Logic",
        "You need to have a good grasp on C#",
        "You need to have a good grasp on OOP",
        "You need to have knowledge of the Unity environment, equivalent to the course Game Development: Basic Games with C# and Unity 3D"
      ],
      "description": "This course is designed for aspiring game developers who want to learn how to create card building games like Slay the Spire and Magic the Gathering. Students will learn the technical skills necessary to build a game from scratch, including programming, effects, targeting cards, and UI design.\nLearn all the way from developing the basics of a card system like having a deck, drawing and shuffling and then having complex modular targeting and effects systems to use on enemy units!\nSo, very briefly, the course teaches how to create basic card system functions; card animations going from hand to deck, shuffling and others; player input like using cards and skipping turns; targeting enemies, your own units or all; requirements to use like energy cost; effect systems that cause damage, heals or gain block; a state machine to controle the flux of game like maintenance phase, draw phase, etc; modifier systems to have status effects like Vulnerable, which increases how much damage the unit takes.\nBy the end of the course, students will have a solid understanding of how to design and program card building games, and will have a working prototype of their own card game. Whether you're interested in pursuing a career in game development or just want to build your own games for fun, this course is a great way to get started!",
      "target_audience": [
        "Game Developers",
        "Recently Graduated Programmers",
        "Programmers with little experience on games",
        "Lovers of card games and deckbuilding games like Slay the Spire/Magic/etc"
      ]
    },
    {
      "title": "Version Control Perforce using Unreal Engine 5 & 4",
      "url": "https://www.udemy.com/course/version-control-perforce-using-unreal-engine-5-4/",
      "bio": "Never lose your progress, always have a BACKUP Mastering Perforce for Unreal Engine Development UE4 and UE5",
      "objectives": [
        "How to Install Perforce (Helix Core) for Free",
        "How to create a solid Backup Server for Unreal Engine Projects",
        "Download and Install any Unreal Engine 5 or 4",
        "Using Source Control of UE5 and UE4",
        "Creating a repository",
        "Committing to the repository",
        "Reverting to previous versions of the project and rewriting commit history",
        "Prepare PERFORCE to UNREAL ENGINE"
      ],
      "course_content": {},
      "requirements": [
        "Computer (Win10)",
        "Internet",
        "No experience necessary"
      ],
      "description": "Why Use Perforce with Unreal Engine?\nPerforce provides the tools needed to manage large, complex projects, while Unreal Engine’s integration makes it accessible for game developers. From version control to team collaboration, this combination ensures that game development workflows remain smooth, organized, and scalable. Whether you’re developing a solo project or managing a large team, Perforce ensures that your Unreal Engine projects remain secure and easy to manage across their entire lifecycle.\nPerforce (Helix Core) is a leading version control system widely used in game development, especially for managing large assets and complex projects. Unreal Engine, one of the most popular game development platforms, seamlessly integrates with Perforce, making it easier for teams to collaborate and manage project files efficiently.\nKey Benefits of Using Perforce with Unreal Engine:\nEfficient Large File Handling: Unreal projects often contain large binary files, like textures, models, and audio assets. Perforce is optimized for handling these large files, ensuring fast and reliable storage and access.\nAsset Locking for Collaboration: With multiple developers working on the same Unreal Engine project, asset conflicts can be common. Perforce's file locking feature prevents team members from overwriting each other’s work by locking assets when someone is working on them.\nComprehensive Version Tracking: Perforce tracks every change made to project files, including who made the changes and when. This ensures a detailed history, making it easier to revert to previous versions or audit changes.\nBranching and Merging: For large projects or teams, branching and merging are essential for testing new features, bug fixing, or working on different parts of the project simultaneously. Perforce’s robust branching and merging capabilities make it ideal for complex Unreal Engine projects.\nSeamless Integration with Unreal Engine: Unreal Engine natively supports Perforce, allowing for an easy setup. Developers can connect their Unreal projects directly to a Perforce repository, enabling smooth version control without leaving the Unreal Engine environment.\nCollaboration Across Teams: Whether working in a small or large team, Perforce enables efficient collaboration. Multiple team members can work on different aspects of the project simultaneously, all while ensuring the integrity of the project files and avoiding conflicts.\nThroughout the course, you'll explore the fundamental concepts of Perforce, including setting up a Perforce server, managing repositories, and dealing with common challenges in game development. You'll also get hands-on experience working with Unreal Engine’s specific version control features UE5 and UE4, ensuring that your projects are well-organized, secure, and easy to scale as they grow.\nBy the end of this course, you'll have a strong understanding of how to use Perforce to effectively manage Unreal Engine projects, collaborate with teams, and ensure smooth development pipelines, making you a more efficient and organized game developer.",
      "target_audience": [
        "Any artist, programmer, game developer using Unreal Engine 5 or UE4",
        "Users learning Unreal Engine",
        "Freelancers and Professionals that need to have a Backup solution for Free",
        "Game developers"
      ]
    },
    {
      "title": "Learn to create a 2D Racing car game for FREE PART 2.",
      "url": "https://www.udemy.com/course/learn-to-create-a-2d-racing-car-game-for-free-part-2/",
      "bio": "Learn how to create a cool 2D top down racing car game with the unity game engine.",
      "objectives": [],
      "course_content": {
        "Adding the main car to scene with features": [
          "Fixing the exhaust smoke effect and explaining the sorting layers",
          "Setting up the cars speedometer",
          "Using c# code to move the speedometer",
          "Adjusting our camera",
          "Creating the cars dust trail effect",
          "Coding our dust trail"
        ],
        "Building our race track": [
          "Creating our race track",
          "Adding tool sprites to build our track with edge colliders",
          "Fixing car collision and showing my track"
        ],
        "Adding lap time features on our track": [
          "Creating lap time & best time in the UI"
        ]
      },
      "requirements": [
        "You will need to download unity and visual studio which is free and then be willing to learn game design.",
        "Basic understanding of the C# language and Unity"
      ],
      "description": "THIS COURSE WILL BE UPLOADED IN PARTS DUE TO VIDEO TIME RESTRICTIONS.\n\n\nIn my course we will start at the bottom and work our way up to advanced game design like AI path finding, we will be creating a car controller and many features with in our game.\nThis course is designed for beginner level and up as i will explain everything in best detail as i can, at the end of the course we will have made a racing car game like micro machines which in the 1980's was an amazing car game.\nIn this part of the course you will learn\nFixing the exhaust smoke effect and explaining the sorting layers\nSetting up the cars speedometer\nUsing c# code to move the speedometer\nAdjusting our camera\nCreating the cars dust trail effect\nCoding our dust trail\nCreating our race track\nAdding tool sprites to build our track with edge colliders\nFixing car collision and showing my track\nCreating lap time & best time in the UI",
      "target_audience": [
        "Students that want to learn to be a game designer."
      ]
    },
    {
      "title": "Learn to make a 2D Angry Bird like game using Unity & C#",
      "url": "https://www.udemy.com/course/how-to-make-a-2d-angry-bird-like-game-using-unity-c-sharp/",
      "bio": "Learn How to make a 2D Angry Bird like game for absolute beginners using the Unity game engine & C# Programming language",
      "objectives": [
        "Creating games",
        "Creating games using unity",
        "Learning C#",
        "Learning Unity",
        "creating games with unity",
        "Learn C# by making 5 games with Unity",
        "Making free games for beginners"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Setting up Unity",
          "Getting Comfortable with Unity's UI",
          "Resources",
          "Importing Assets to unity (optional)"
        ],
        "Building the game (Course 1)": [
          "Adding Sprites and basic Animation",
          "Tool Hotkeys",
          "Animation or Animator?",
          "Background",
          "Physics",
          "Red Tint",
          "Code",
          "OnMouseDrag explanation",
          "OnMouseDrag",
          "AddForce",
          "What's a variable?",
          "AddForce and polishing",
          "Obstacles",
          "LineRenderer",
          "Adding Enemies",
          "Cinemachine",
          "Enemy Script",
          "Particles",
          "Particles 2",
          "Sound Effects",
          "Menu and UI",
          "Programming the Main Menu",
          "Music",
          "Level Controller",
          "End Menu",
          "The End"
        ],
        "Course 2": [
          "Intro Video",
          "Installing Unity",
          "Resources",
          "Importing Assets to unity",
          "Unity and Script",
          "Player Controller",
          "Adding Jump Mechanic",
          "Adding Animations",
          "Cinemachine",
          "Coin Collection",
          "Game Manager",
          "Adding Levels",
          "Polishing",
          "Adding Sound Effects",
          "Creating Menus & UI",
          "Building/Exporting your Game"
        ]
      },
      "requirements": [
        "Having a Pc, Windows 7 or later"
      ],
      "description": "My name is Yousif-Alsewaidi a 15 year old Game developer and Udemy Instructor,\nsometimes Learning Unity Game Development and C# scripting can be really challenging for some people so I made this straight forward course for beginners to learn Game Development basics by watching this step by step course.\nThis course is an introduction to unity Game-Development and making games using C#, So if you want to learn Unity and Game Development but you're lost this is the perfect course for you!\nby purchasing this course you'll learn to make a 2D angry bird like game and Learn how to add more stuff to your game like Music, Sound effects, Particles and more, we won't be covering everything that the Unity Game-Engine has to offer, because beginners tend to suffer from burn-out when learning too much (because I did when I started) so I kept this course simple, easy to follow and straight forward so you can also make a fully-functional and working 2D game by the end of it.\n\n\nit's really easy too! I'm 15 and I can make a 2D game, so imagine what you can make! The sky's the limit really!\n\n\nSo what are you waiting for! enroll now so you can get started making games as soon as possible and start your game design and programming journey,\nSee you on the other side :)\n\n\nthis package includes 2 courses:\n\n\n1. How to make a 2D Angry Bird like game using Unity & C#\n2. Learn to Create a simple 2D Platformer Game using Unity & C#",
      "target_audience": [
        "Beginner in Unity",
        "Beginner in C#",
        "Wanting to learn c# through game development",
        "Wanting to learn unity"
      ]
    },
    {
      "title": "Unity VR Tutorial: Unity XR Interaction Toolkit 3.0",
      "url": "https://www.udemy.com/course/unity-vr-tutorial-unity-xr-interaction-toolkit/",
      "bio": "Unity, XR, VR, Meta Quest, XR Interaction Toolkit 3.0",
      "objectives": [
        "Basic knowledge of VR Development",
        "Fundamental interaction modules of Unity XR Interaction Toolkit (version 3.x)",
        "Direct and Distance Grab",
        "VR locomotion (Teleportation, Continuous Move)",
        "UI Interaction",
        "Ray Interaction",
        "VR Shadow Optimization",
        "Unity Engine Fundamentals",
        "Input System for XR"
      ],
      "course_content": {
        "XR Interaction Toolkit Basics": [
          "OpenXR Setup",
          "XR Interaction Toolkit Setup",
          "Quick Setup: Grab, Move and UI Interaction",
          "Camera Height and Tracking Origin",
          "VR Shadow Optimization"
        ],
        "Input System": [
          "Input System Overview",
          "How To Get Controller Button Input",
          "Detect Input of A/B/X/Y/Menu Button",
          "Detect Whether TOUCH Buttons On Controllers",
          "Thumbstick Input",
          "Controller Tracking"
        ],
        "Grab Interaction": [
          "Grab Interaction Setup: Part 1",
          "Grab Interaction Setup: Part 2",
          "Interaction Attach Controller",
          "Set Grab Point",
          "Interaction Range",
          "Scale Objects By Two Hands",
          "Two-Handed Grab",
          "XR General Grab Transformer",
          "Judge Which Hand Is Interacting (Can Be Used In Grab And Ray Interaction)",
          "Hide Controller When Grabbing"
        ],
        "Ray Interaction": [
          "Change Ray Color",
          "Change Ray Bend Ratio",
          "Hide Ray When Not Hit Objects",
          "Snap Volume",
          "Use Ray To Click Objects (Press trigger button to interact)"
        ],
        "UI Interaction": [
          "UI Interaction",
          "UI Event"
        ],
        "Poke Interaction": [
          "Poke UI",
          "Poke 3D Objects"
        ],
        "Locomotion": [
          "Locomotion Overview",
          "Continuous Move",
          "Fly Move",
          "Snap Turn & Continuous Turn",
          "Teleportation Overview",
          "Teleportation Area & Set Teleportation Orientation",
          "Why can teleportation be triggered when pushing forward thumbstick and releasing",
          "Interactor For Teleportation",
          "Change Teleportation Ray Color",
          "Change Teleportation Reticle",
          "Teleportation Visual Effect: Linear Transmission"
        ],
        "Other Common Interaction Modules": [
          "Controller Input Action Manager",
          "Pause the game when pressing Home button"
        ]
      },
      "requirements": [
        "Basic Knowledge of Unity and C# (There will be few part of coding in this code, but it is letter to learn C# coding to become a senior VR developer)",
        "Have a XR/VR device (In the course, I used Meta Quest 3 for demonstration, but Meta Quest 3s, Meta Quest 2 or other device which supports OpenXR are compatible.)"
      ],
      "description": "This course will show you how to develop XR applications using Unity's XR Interaction Toolkit. Through systematic study, you will learn the development of common interaction modules in XR development, such as grab, ray interaction, UI interaction, player movement, teleportation and poke interaction.\n\n\nAdvantages of this course:\n\n\nThrough systematic class arrangement and high-quality course content, we help students get started with XR development and build their own knowledge system.\nXR Interaction Toolkit is cross-platform and has gradually become a popular standard in the industry. Learning this set of development tools can theoretically develop most devices on the market, such as Quest, Pico, Apple Vision Pro, and PCVR. It is more convenient in cross-platform development. Learning this tutorial and mastering the common interactive development module can reduce the learning cost of developing new devices in the future.\nThis course is the latest systematic development tutorial of XR Interaction Toolkit, because this tool has been updated to version 3.0 or above, and there are big changes compared with previous versions. In addition, new systems and SDKs of many devices are gradually using XR Interaction Toolkit version 3.0 or above.\nThe course has a more concrete explanation of some brief and abstract descriptions in the official developer documentation, and through professional guidance, solves some difficult points that students often encounter in self-study.",
      "target_audience": [
        "Unity Developers who want to learn Virtual Reality Development",
        "Developers who used XR Interaction Toolkit 2.x wants to upgrade to XR Interaction Toolkit 3.x"
      ]
    },
    {
      "title": "How to Make a Soccer Game in Roblox Studio",
      "url": "https://www.udemy.com/course/how-to-make-a-soccer-game-in-roblox-studio/",
      "bio": "Intermediate to Advanced Roblox Course",
      "objectives": [
        "Learn the game structure needed to build a sports game in Roblox Studio",
        "Learn the game mechanics involved in building a soccer game in Roblox Studio",
        "Become comfortable using events in Roblox Studio",
        "Learn advanced Roblox development practices that can be applied to any game"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Setup": [
          "Environment Setup",
          "Player Setup",
          "Game Values",
          "Player Values"
        ],
        "Laying the Foundation": [
          "Creating a Game Loop",
          "Game Loop UI",
          "Reset Positions",
          "Assigning Teams",
          "Resetting Players",
          "Freezing and Unfreezing Players",
          "Setting Players Body Color to Match Team"
        ],
        "Soccer Gameplay Mechanics": [
          "Gaining Possession",
          "Shooting Part 1",
          "Shooting Part 2",
          "Shooting Part 3",
          "Ball Friction",
          "Scoring Goals",
          "Resetting Ball",
          "Goal Score Events",
          "Resetting Score",
          "Shot Bar UI",
          "Out of Bounds",
          "Sliding",
          "Shooting Animation"
        ],
        "Finishing Touches": [
          "Bug Fixing",
          "Audio"
        ],
        "Summary": [
          "Summary"
        ]
      },
      "requirements": [
        "Programming and Roblox experience needed. This course assumes you already know the basics of Roblox Studio and programming in general"
      ],
      "description": "*You can watch this series for free on my YouTube channel (@duckhive_) and download the project files for free on my Patreon (@duckhive_)!  I just want to be upfront about that - only buy this if you want the convenience Udemy offers of having all your content in one place. I've tried making it free here, but it's over 2 hours long and Udemy will not allow a course longer than 2 hours to be free.\nIf you do go the free route, all I ask is that you simply subscribe to me on YouTube!\nWelcome to \"How to Make a Soccer Game in Roblox Studio\"!  In this course, you will learn how to create a fully functional soccer game using the Roblox Studio platform!\nThis course assumes you already know the basics of Roblox Studio, including how to navigate the interface and how to create and manipulate objects. From there, you will dive into the process of building a soccer field, including creating the goals, adding in player characters, and implementing game mechanics such as ball physics, shooting, and scoring.\nThroughout the course, you will have the opportunity to work on a hands-on project to practice and apply what you have learned. By the end of this course, you will have a complete and fully functional soccer game that you can share with your friends and the Roblox community.  But more realistically, you'll have the foundation made of a soccer game - the base of the game, if you will.  You can then take this base, add in an extra features or functionality, polish it up, then BOOM - you'll then have a unique soccer game ready for the world to play!\nThis course is geared towards the experienced developer.  If this is you, and you're looking to add a soccer game to your portfolio, this course has something for you. So why wait? Start creating your very own soccer game in Roblox Studio today!",
      "target_audience": [
        "Intermediate to advanced Roblox developers looking for more complex projects to tackle"
      ]
    },
    {
      "title": "The Godot 4 Tutorial For Complete Beginners",
      "url": "https://www.udemy.com/course/the-godot-4-tutorial-for-complete-beginners/",
      "bio": "Learn the basics of the godot engine interface by creating a flappy bird clone!",
      "objectives": [],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Creating Project"
        ],
        "Step 1- Godot UI": [
          "Importing Assets"
        ],
        "Step 2- Physics and Programming": [
          "Creating Bird",
          "Adding Script to the Bird"
        ],
        "Step 3- Spawning Objects": [
          "Creating Pipes"
        ],
        "Step 4 - Logic and UI": [
          "Fixing Spawning Issues"
        ]
      },
      "requirements": [
        "No experience is needed. You will Learn EVERYTHING from the ground up."
      ],
      "description": "Embark on an exciting journey into the world of game development as you explore the fundamentals of the Godot Engine interface by crafting your very own Flappy Bird clone! In this immersive experience, you'll discover the power of one of the industry's most versatile game development platforms.\nThrough hands-on tutorials and step-by-step guidance, you'll grasp the essential concepts of game design, such as scene creation, player controls, and physics. As you delve into the creation process, you'll gain insights into the art of game programming, scene transitions, and the dynamics of game objects.\nBy the end of this engaging adventure, you'll not only have a functional Flappy Bird replica but also a solid foundation in Godot's interface and game development principles. Whether you're a seasoned developer looking to expand your skills or a complete novice, this course promises a rewarding and educational experience that will set you on the path to creating your own gaming masterpieces.\n\n\nThis interactive journey is designed to be accessible to all, making it perfect for beginners while offering valuable insights to more experienced developers. You'll also explore the art of game asset creation, sound integration, and fine-tuning gameplay mechanics, ensuring your Flappy Bird clone is polished and ready for the world to enjoy. Dive into the world of Godot, and watch your game development skills take flight!",
      "target_audience": [
        "Beginners who are looking to learn Godot 4.0 & Game Programming!"
      ]
    },
    {
      "title": "Learn to create a 2D Action Zombie Game in Unity",
      "url": "https://www.udemy.com/course/learn-to-create-a-2d-action-zombie-game-in-unitypart-1/",
      "bio": "Learn to create a 2D Action Zombie Game in Unity",
      "objectives": [
        "How to create a player , Enemies",
        "How to create Health for player and Enemy",
        "How to add portal for player to move betweens levels",
        "Game level design"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Introduction Apo City",
          "Script file",
          "Introduction Create Items"
        ],
        "Unity Guide": [
          "Layout",
          "Colider",
          "Asset Store",
          "Adding Ground",
          "Sprite Setting",
          "BackGround",
          "Light2D",
          "Adding Shadow 2D",
          "Sprite Shape 2D",
          "Script"
        ],
        "Level Design": [
          "adding flur",
          "Adding Wall",
          "Adding Trees",
          "Adding Gravestones",
          "Adding Items",
          "Create Animation Objects",
          "Movement Objects",
          "Candle Animation"
        ],
        "Create a 2DGame": [
          "Player Animation",
          "Background Movement",
          "NPC Movement",
          "Player Movement",
          "Bullet Destroy",
          "Bullet Sound",
          "Player Health Script",
          "Player Healthbar",
          "Player Healthbar Script",
          "Camera Follow Player",
          "Create Enemy",
          "Enemy Find Player",
          "GameOver",
          "Game Manager",
          "Create a Portal"
        ],
        "Learn to create Apo City": [
          "Create a Terrain",
          "Adding Asphalt",
          "Adding Floors",
          "Adding Probs",
          "Adding Buildings",
          "Adding Cars",
          "Adding Effects",
          "Adding #Trees and Grass",
          "Adding Decals",
          "Adding Lights",
          "Download charachter in Mixamo",
          "Create animator controller for Charachters",
          "Inistall Cinemashine for Timeline",
          "How to move Camera in Timeline",
          "Create animations for Zombies in Timeline",
          "Using Blendshape Face in Timeline",
          "Adding Sounds"
        ],
        "Learn to Create Items in Unity": [
          "Create Gravestone",
          "Create Gravestone",
          "Create a Gravestone C",
          "Create a Gravestone D",
          "Create a Gravestone E",
          "Create a Gravestone F",
          "Create a Fence",
          "Create a Fence another form",
          "Create Wooden Cage",
          "Create a Metal Cage",
          "Create Helipad Sign",
          "Create a Wall",
          "Create a Cage"
        ]
      },
      "requirements": [
        "unity2018"
      ],
      "description": "Welcome to \"Deadland\"! It's a fun game where you get to shoot enemies, keep yourself healthy, and explore magical portals.\nPortal : Adding a portal for the player to move between different Levels.\nIn the game, when you enter a portal, you go to a different place, which is really exciting. But watch out for enemies—they're everywhere! Every time you shoot, you'll see cool effects like blood splatters and big explosions.\n\n\nMake sure to keep an eye on your health bar. When it's full, you're strong and ready to play! But if it goes down to zero, you lose the game. Don't worry, though—you can always start over!\nGame Level Design :\n-Design simple game levels using unitys scene editor.\nHealth and Health Bar :\n-Explaining how to give the player and Enemies health point.\nGame over , Game over Bar:\nExplain after the player is dead  and the game restart it.\nThe levels in the game are full of interesting things like trees, gravestones, lights, clouds that move, walls, and objects that animate. It's like going on a big adventure!\n\n\nSo, grab your controller and let's play \"Deadland\"! It's easy and a lot of fun! And if you want to learn more about making games, you can join our course. It's perfect for anyone who loves games and wants to learn more!",
      "target_audience": [
        "Beginner Course ,who want to learn about games"
      ]
    },
    {
      "title": "Mobile,PC & Web Game Development with Unity 6 & C#-Beginners",
      "url": "https://www.udemy.com/course/full-master-course-unity-6-c-beginners-to-intermediate/",
      "bio": "Full Course How to Make a Game in Unity 6 with C# for Beginners, Mobile game development with Unity 6 & C# - Beginners",
      "objectives": [
        "Basics to Advance of C# & Unity 6",
        "Mobile Game Development with Unity 6 & C#",
        "You will able to make Simple 2D Platformer game, Casual games & Some simple type of 2D Games with Unity 6 & C#",
        "Able to Make Games for PC, Custom Websites & Also you will able to make games for Mobile devices!",
        "Step by step Process to Make your game ready for Publish on Play Store, AAB & APK Build",
        "You will get multiple quizzes along with the game development for making sure you learning from basics",
        "You will be Provided Some simple task to do & Some larger Assignments at the End of the Course!",
        "How to Make Player movement, Jump, Obstacles & so much more... to make The game much fun & Playable",
        "Master C# Basics from Classes to Object etc with Unity 6 game engine!",
        "Animation, UI, Scripting in C#, Components!"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Flappy Bird Game Development": [
          "Unity User Interface & Basics",
          "Player, Player Animations & Animation Transitions",
          "Player C#, Classes, Functions, If Condition & Much more",
          "Player Vertical Movement Restrictions (Y Axis)"
        ],
        "Background, Ground, Pipes Setting & Scripting": [
          "Background, Ground & Ground Move C# Class",
          "Pipes & Tags Assigning",
          "Pipe Move C# Class Scripting",
          "Implementing Player Jump, Player Sleep Mode & Layers Assign",
          "Pipe Spawn C# Class Scripting",
          "Pipe Spawn in X Time Scripting"
        ],
        "Score & UI Unity 6": [
          "Score, Current Score & Score Manager C# Class",
          "UI in Unity, Current Score UI Setup",
          "Game Manager C# Class Scripting",
          "Stopping Pipes, Ground Moving C# Scripting",
          "Game Over UI Setup",
          "Setting Game Over UI to Active with C# Scripting"
        ],
        "High Score & Levels Load(Scenes)": [
          "Scene Management C# Class Scripting to Load Scenes or Levels",
          "High Score Save with PlayerPrefs(Unity in Build System of Save)"
        ],
        "MENU": [
          "Menu Scene Setup",
          "Menu UI Set & C# Script to Load Scenes or Levels"
        ],
        "Audio in Unity": [
          "Audio, Audio Manager C# Class Scripting"
        ],
        "Game Builds & Testing (Pc, Mobile & Website)": [
          "PC Build",
          "Switch to Android, Settings",
          "Mobile Settings for Broadcasting Game on Mobile(USB, Dev Options etc...)",
          "Screen Touch C# Class, Testing on Mobile",
          "APK Build",
          "APK Checking on Mobile",
          "Different Mobile Screen Sizes Fit",
          "AAB Build for Google Play Store Publishing",
          "Webgl, Website Build (Browser Play)",
          "Game Publishing on Itch Process(You can Upload on your custom WEBSITE)"
        ],
        "Dodge The Block Game Development": [
          "Player Setup & Environment",
          "Player Movement C# Class Scripting",
          "Player Horizontal (X Axis) movement clamp"
        ],
        "Blocks & Coroutine in Unity": [
          "Blocks Setup",
          "Block Spawner C# Class Script",
          "Logic of Not Spawning One Block & Scripting",
          "X time Spawning Blocks",
          "Slow Motion Effect in Unity, Coroutine"
        ]
      },
      "requirements": [
        "Have Basics Understanding of Physics & Math example for Vectors, gravity etc... but along the way I will explained all of the things so you don't need to have strong Understanding of it :)"
      ],
      "description": "In this course you will learn How to make a Game in Unity 6 with C# Coding(Latest version of unity game engine), By making 3 games in Unity game engine with C# Programming language for absolute beginners, You will learn How to make a Game for Mobile, for your custom website even for Pc, You will know how to make your game ready to publish it on Google Play store or On your custom website such as itch, This course will teach you basics of Unity 6 & C# Coding for Complete beginners to Intermediate people, In Unity 6 you will learn game objects, Components, How to make animation in Unity 6, How to make animation transition, How to work with UI in Unity game engine and much more in Unity(Latest version of Unity game engine), Also You will learn C# Programming example for Classes in C#, Functions/Methods, Custom function, for loops, variables, start and update function, if  condition and much more things in C# Programming language, Firstly we will make a Flappy bird game in Unity 6, Then we will make dodge the blocks game, And Finally we will make a Simple 2D Platformer game in Unity 6, Also I have taught about how to make this game for any mobile devices, for custom websites(If you do have then you can put this file in your site in order to play the game on a Browser), also we will make this for Pc as well, How touches  work in game, How you can make a button to make a game object fly and much more...\n\n\nThis course is absolutely for beginners who want to make a game with Unity 6 & C# Coding, & Want to make the game for mobile, pc even for websites so users can play the game on their browser without installing it, So don't miss this opportunity and Grab the Course right now to Make your first game in Unity game engine with C# Programming!\n\n\nThanks\nBhairab Roy",
      "target_audience": [
        "Complete beginners to Intermediate people!"
      ]
    },
    {
      "title": "How to become a Game Artist, Designer, or Developer!",
      "url": "https://www.udemy.com/course/gettingstartedingames/",
      "bio": "Everything you need to know to start & succeed in the game industry or as a indie game developer.",
      "objectives": [],
      "course_content": {
        "Introduction": [
          "Creating your own game, can be an exciting adventure!"
        ],
        "GETTING STARTED - HOW GAMES ARE MADE": [
          "How games are made - PreProduction",
          "How games are made - Production",
          "How games are made - Post production"
        ],
        "GETTING STARTED - JOBS & ROLES IN THE GAME INDUSTRY & HOW TO GET THEM": [
          "How to Become a Video Game Producer",
          "How to Become a Video Game Testers & QA",
          "How to Become a Video Game Audio Designer",
          "How to Become a Video Game programmer",
          "How to Become a Video Game Artist",
          "How to Become a Video Game Designer"
        ],
        "Professional Game Development Software": [
          "Game Development Software - For Producers",
          "Game Development Software - For Programmers",
          "Game Development Software - For 3D Artist",
          "Game Development Software - For 2D & Texture Artist-",
          "Game Development Software - Game Design"
        ],
        "Bonus lecture": [
          "How to Make Games without Code & Light like a AAA studio!!"
        ]
      },
      "requirements": [
        "No"
      ],
      "description": "Creating your own game, can be an exciting adventure!\nWatching your ideas come to life on screen & the smiles or frustration it brings to your friends, family, & even possibly the world, as there experiencing your game for the first time, can bring a level of accomplishment and  fulfillment like none other.\nGame design & development can be accessible to anyone who has the drive & motivation to learn. Whether you want to design & develop a game, level, or just create assets to support in a games development.\nNowadays games are found virtually everywhere & played by people of all ages. The game industry continues to grow year after year and is showing no signs of stopping anytime soon.  The game industry earned over $100 billion dollars  in 2017, with the average game developer & designer salaries being well over $80 thousand dollars a year.\nWe want to bring you the knowledge & techniques we’ve learned throughout our careers as modelers, texture artist, animators, & game designers & developers.  As industry professionals & veterans with far more than a decade of game design, development, & asset creation experience, many of us have spent the better parts of our careers specializing in creating interactive training materials as well as games.\nSO JOIN US, as we go through all the steps & processes of game development, in videos, & interactive lessons that are be easy to follow, engaging, entertaining, & accessible, and always remember, Don't Just play.... Create!",
      "target_audience": [
        "Beginner game designers, artist, &/or developers",
        "People looking to get into 3d art or game development",
        "game artist",
        "artist",
        "game designers",
        "game developers"
      ]
    },
    {
      "title": "Unreal Engine Blueprint Automation",
      "url": "https://www.udemy.com/course/unreal-engine-blueprint-automation/",
      "bio": "Create Blueprint Utilities and Unreal Engine tools to speed up and automate your work.",
      "objectives": [
        "How to navigate Blueprint Editor",
        "How to use Events and Functions in Editor Scripted Utilities",
        "How automate repetitive tasks with Blueprints.",
        "How batch process assets. Fix asset naming convention, apply correct compression settings, cleanup projects and more.",
        "How to create Unreal Engine tools with custom UI and Blueprint logic.",
        "How to add a custom menu entry to UE interface.",
        "How to design Editor Utility Widgets with UMG editor.",
        "How to create Lights Manager tool.",
        "How to use Tick and how it influences performance",
        "How to use Data Tables and a data driven approach to avoid hardcoding data in Blueprints and to make them easy to tweak by anyone.",
        "How to create Unreal Blueprint tools"
      ],
      "course_content": {
        "Intro": [
          "Course Overview"
        ],
        "Prerequisites": [
          "Required Plugins",
          "Asset vs Actor. Mind the difference",
          "Scripted Actions (Utilities) vs Editor Utility WIdgets"
        ],
        "Editor Blueprint Utilities": [
          "Hello World",
          "Fix Asset Naming Convention - Simple Batch Rename",
          "Fix Asset Naming Convention - Data Driven Approach",
          "Batch Fix Texture Compression Settings",
          "Remove Unused Assets",
          "Remove Unused Assets - Making it better with Metadata Tags",
          "Create Material Instance From Selected Textures",
          "Assign Material To Selected Asset - Using User Input",
          "Random Actor Rotation",
          "Set Material On Selected Actors",
          "Undo Redo"
        ],
        "Introduction to Utility Widgets": [
          "Our First Widget Utility: Rotate Selected Actors",
          "Set Material Widget - working with Single Property View",
          "Modifying properties of selected Asset - how to use Details View",
          "Detect selected Asset change. What is Tick and how to avoid it."
        ],
        "Lights Manager - Editor Utility Widgets Project": [
          "Lights Manager - Intro",
          "List View",
          "List View - Remove Button (optional tutorial)",
          "List View - Add Button (optional tutorial)",
          "Lights Manager based on List View"
        ],
        "Extending Editor Menus": [
          "Introduction to Extending Editor Menus",
          "Editor Utility Tool Menu Entry",
          "Editor Utility Widget Menu Entry",
          "Menu Entry Icon"
        ],
        "Interfaces, Casting To Classes - Diving Into Technical Details": [
          "What is an Interface?",
          "When to use Cast node and when to use IsA(soft)"
        ],
        "Asset Validation": [
          "Why you need Asset Validation",
          "Square Texture Validator",
          "Power of Two Texture Validator",
          "Number of Triangles Validator",
          "Asset Naming Convention (Prefix) Validator"
        ],
        "Sharing Tools": [
          "Creating an Unreal Engine Plugin"
        ],
        "Source Files": [
          "Zipped Project"
        ]
      },
      "requirements": [
        "You should be already familiar with Unreal Engine. Having experience with gameplay/editor Blueprints is not necessary but will for sure come handy."
      ],
      "description": "This is a zero to hero Blueprints course for automation and tool creation.\n\n\nFollowing well received Unreal Engine 5 Python Automation Course, this course brings automation and tool creation with Blueprints to everyone who wants to start making tools quickly and without any code.\n\n\nThe course begins with introduction to Blueprint editor. While it requires being familiar with Unreal Engine, it's made to suit both beginners and experienced developers.\n\n\nIn first chapters of the course, we will focus on batch operations. We will mass process assets and actors using Scripted Actions.\nWe will dive both into Asset Action Utilities and Actor Action Utilities.\nThose will let you batch rename assets, fix texture compression settings, modify editor properties, remove unused assets, work with metadata tags and more.\nIt should be enough to make you familiar with this kind of Blueprints.\n\n\nThen we will take it to the next level and start creating tools with custom UI.\nWe will explore UMG widget editor, design our own Utility Widgets, create custom list view and then use it in Lights Manager tool.\n\n\nTutorials in this course are not just 'do what I do' videos. I've put effort into making sure that you know why I do certain things and even though there may be some simplifications at the beginning, there are separate videos made to fill the gaps. Expect explanations on Tick function performance, what are Interfaces, or when to use Cast node and when to use Is A node instead.\n\n\n100% of the course content was recorded on Unreal Engine 5.",
      "target_audience": [
        "Intermediates or Professionals who are familiar with Unreal Engine and would like to automate their workflow.",
        "Technical Artists who want to start developing UE tools and need a quick start"
      ]
    },
    {
      "title": "JavaScript Game for beginners Breakout HTML5 Game",
      "url": "https://www.udemy.com/course/html5-game-canvas/",
      "bio": "Make a JavaScript Game - Create your first HTML5 Canvas JavaScript web based game from scratch explore how make a game",
      "objectives": [],
      "course_content": {
        "Introduction to making Games with JavaScript and HTML5": [
          "Introduction to creating a brick breaking game from scratch",
          "Code Editor Update",
          "How to setup a Game Breakout Game Setup",
          "Setup HTML and JS files and Canvas ready to draw code snippet",
          "How to create Player Character Setup Player Paddle",
          "Source Code draw player paddle on screen for game",
          "How to create Player Movement KeyPresses.",
          "Source Code - Add key press listeners to game",
          "How to move player in Game Move Player Paddle.",
          "Source Code Game Animation Frame movement on canvas",
          "How to add Player Mouse Movement Player.",
          "Source Code Move player with Mouse position",
          "How to add to game Add a Bouncing Ball",
          "Source Code Draw Bouncing Ball on HTML5 Canvas Game",
          "How to create Collision Detection within Game",
          "Source Code HTML5 Collision Detection Code",
          "How to generate the game screen Add Bricks to Screen",
          "Source Code Draw bricks to Game",
          "How to add objects to Game Update Bricks.",
          "Brick Collision Detection Source Code",
          "How to add Scoring and Win conditions to game",
          "Source Code Scoring",
          "Final Game tweaks and Adjustments",
          "Source Code Game Updates",
          "Game Bug Fixes and Tweaks",
          "Source Code Debugging Game updates",
          "How to add Bonus Content to your HTML5 Game",
          "Source Code Bonus Blinking Game Updates",
          "Game updates Ball Speed Update",
          "Final Source Code for HTML5 Canvas Breakout Game"
        ],
        "Resources and extra content": [
          "Helpful Guide and downloads"
        ]
      },
      "requirements": [
        "JavaScript and prior coding experience",
        "Access to an editor and browser"
      ],
      "description": "Make your own games online - start with this amazing simple game project creating a Breakout game from scratch\nExplore how you can write code to create GAMEs - Games that run within any browser - Interactive Games that are fun to play and even more fun to make yourself.  Dynamic Games that can be built upon to customize and add your own game ideas. See what you can build within just a few short hours.\nWant to build online games - want to learn more about game creation -  learn from experienced developer who has created over  100 online games. Source Code is included - try the code for yourself and customize it to make your own  version of the game!!!! You will be amazed at how easy it can be.\nCourse covers all the basics of creating a fully functional  game from start to finish!!!\nSetup your game within HTML\nCreate page elements with JavaScript\nExplore how to set objects and values to prepare for game play\nAdd interaction - keyboard arrow keys and mouse movement to move your character on the screen\nAdd animations for smooth game  movement\nCreate conditions for  ball behaviours, player behaviours\nBuild  multiple interactive items in the game\nAdd collision detection to track interactions\nHow to debug your game\nHow to improve upon the game\nHow to add bonus items,\nHow to setup game start conditions and game win conditions.\nExplore how you can create your first game using JavaScript and HTML5 canvas\nApply JavaScript to HTML5 canvas element - drawing on canvas lines and shapes.\nHow you can add animation to your Game with animation frames\nHow to make your game interactive with keyboard event listeners\nDynamic and interactive game project to practice and learn more about JavaScript and HTML5\nSource Code is included\nHow to debug your HTML5 canvas game project\nMaking tweaks and adjustments adding game play , and scoring\nTaught by an instructor with over 20 years of real world experience ready to help you learn more about HTML5 and JavaScript.\nStart building your own version of the game TODAY.",
      "target_audience": [
        "Web developers",
        "Game creators",
        "Web designers",
        "Frontend end developers",
        "Anyone who wants to make a game"
      ]
    },
    {
      "title": "UE5 Environment Art for All Levels: A Comprehensive Course",
      "url": "https://www.udemy.com/course/ue5-environment-art-for-all-levels-a-comprehensive-course/",
      "bio": "Create amazing landscapes, and versatile materials, using UE5 to further your game development.",
      "objectives": [
        "The basics of Unreal Engine, its tools and navigation.",
        "How to create high quality environments quickly.",
        "How to optimize your scenes.",
        "How to render and present your work.",
        "To be able to use the shader graph effectively, and to make custom materials."
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Install_UE5",
          "Setting up a project",
          "Your Navigation Tools",
          "World Settings",
          "The Manage Tab",
          "Landscape Tools",
          "Your Unreal Tools",
          "Shadergraph Introduction"
        ],
        "Beginners Landscape": [
          "Beginner's Landscape",
          "Custom Height Alphas",
          "Gathering References",
          "Tree It Crash Course",
          "CG Textures",
          "Creating Trees In Maya",
          "Tree Setup Unreal Engine",
          "Beginner's Water Shader",
          "Dressing The Beginners Scene"
        ],
        "Intermediate Landscape": [
          "Projection Mapping",
          "Starting our Automatic Landscape Material",
          "Custom Rotator",
          "Distance Blending",
          "Material Functions",
          "Our Auto Material's Functions",
          "Quiz: Checking what you know.",
          "Macro Variation Texturing",
          "Incorporating Triplanar Projection",
          "The Grass Output Node",
          "Foliage Control Setup",
          "Temporal Dithering AA",
          "Finishing Foliage Control",
          "Intermediate Water Shader",
          "Water quiz",
          "Creating a Waterfall",
          "Introducing Niagara",
          "Creating Water Rapids",
          "Creating LODs",
          "Tree Shader for Fall Trees",
          "Dressing the Intermediate Scene",
          "Dressing the Intermediate Scene Pt 2",
          "Intermediate Material overview (for troubleshooting)"
        ],
        "Advanced Landscape": [
          "Gathering Lidar Information",
          "TeraSculptor Height Map",
          "Creating Splat Maps",
          "Advanced Landscape Material Introduction",
          "Material Layer Blending",
          "Quiz: Material Layers",
          "Distance Blending",
          "Fixing Blend Layers and Adjusting our Textures",
          "Adding New Layers",
          "Fixing The Shadow Problems",
          "Advanced Material Foliage Controls",
          "Runtime Virtual Texturing",
          "Dressing Our Advanced Scene"
        ],
        "Cameras": [
          "Introduction to Sequencer and Cameras",
          "Using Rails and Cranes",
          "Recording a Scene"
        ],
        "Bonus": [
          "Lumen Explained",
          "Nanite Explained",
          "Creating Custom Rocks",
          "Packing Textures for Unreal Engine"
        ]
      },
      "requirements": [
        "No programming needed, no experience in Unreal Engine needed, basic understanding of game development, basic knowledge of 3D modeling"
      ],
      "description": "Learning Unreal Engine can be difficult. Especially when you don’t know what to even look for in order to learn. So I put together a course that will guide you from a beginners level, all the way to advanced topics. Not only to teach you, but to give you direction on what you may be interested in studying further.\nI'll show you custom materials for trees. And how to create effects like waterfalls. I'll introduce you to cameras, and particle systems. And will focus on teaching you step by step how to create new types of materials and how to incorporate them into your landscapes. From the basic painting of landscapes, to auto materials, to advanced material layers. I show you everything you'll need to make stunning art. This is an environment art course, but we will not be focusing on modeling hard surface objects like buildings. I will go over creating foliage like trees, as well as show you how to create rocks. I will be bringing in some photoscanned assets for composing our scenes, via quixel. Quixel is a photoscan library free to use in Unreal engine. I’ll use my own assets later on, and show you how to mix Quixel’s textures with your own models to make great looking materials. So lets get to it!",
      "target_audience": [
        "This is meant to cover UE5. From a beginner's level, all the way up to advanced techniques used in the game development industry."
      ]
    },
    {
      "title": "GODOT: Video games math",
      "url": "https://www.udemy.com/course/godot-video-games-math/",
      "bio": "Turn-based game as example for games math",
      "objectives": [],
      "course_content": {},
      "requirements": [
        "There are no requirements for this course."
      ],
      "description": "Course is a good possibility for total Godot beginner to learn about Godot game engine IDE and GDScript are explained in a step by step learning process. Game objects in Godot are nodes, in this course nodes explained are: Node2D, Button, Sprite, Label, Tilemap and AnimationPlayer. Coding with GDScript are also explained in a manner good for beginner understanding. At the course end you will be able to create and code good game elements for turn-based game and understand lot of Game Math.\nCourse is for total beginners, so at the course start you will learn how to download Godot game engine, and how to set it properly. After that you will create new game project and game scene. Also you will learn how to set you first GDScript. Game example for this course is a turn-based game, so in a beginning you will learn to create some simple game elements. Tilemap will allow you to easily add similar graphic elements.\nButton node will be used as game path elements for point click movement. After, you will create sprite character and movement for it. Lot's of coding will expect you in this part of course, but after a while you will be able to create some complex codes based on simple elements. At the course end you will have many good game elements for turn-based video game.",
      "target_audience": [
        "Godot beginners and expireenced students of GDScript."
      ]
    },
    {
      "title": "Unity3d Game Ranking System Panel using online Profiles C#",
      "url": "https://www.udemy.com/course/unity3d-game-ranking-panel-using-facebook-profiles/",
      "bio": "Develop from scratch Unity3D Android & iOS Game Ranking Panel using facebook profiles login to Firebase database (DB)",
      "objectives": [
        "Unity3d",
        "Facebook Login",
        "Debug Logs in Android device",
        "Firebase Database",
        "Listing Profiles",
        "Sort profiles according to score",
        "Reverse Engineering",
        "Firebase",
        "database",
        "noSQL",
        "json",
        "dictionary",
        "lists"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Main": [
          "Facebook Configurations",
          "Facebook Login Button",
          "Build to Android & Get Hash Key",
          "Listing Profiles",
          "Fake Login",
          "Sorting Facebook Profiles List"
        ]
      },
      "requirements": [
        "no requirements"
      ],
      "description": "Develop from scratch Unity3d Android  & iOS Game Ranking Panel using facebook profiles and login:\n\n\nI am an engineer and even the way of thinking is important in this tutorial.\nAlot of things to learn from this course, it may appear simple, but in the end of the course you will be happy to discover new methods to use unity3D , and spatially with fireabse database.\n\n\nGet facebook connected profile id\nSave the connected to database profile using the given id\nList all logged in profiles\nSort all profiles in panel by score\n\n\nUnity3d Android  & iOS Game Ranking Panel using facebook profiles - And it should be clear that when we are developing a Unity3D game for iOS, we want to target that game to a large audience\nAdditional game development experience include successfully developing and publishing Unity3D game on Apple iOS app store independently\nI am making a game for iOS and Android\n\n\ngame is a true representation of what can be done with Unity mobile game development\n\n\nIOS/Android game in UNITY - Beginner Tutorial\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTags:\nUnity3d Android  & iOS Game Ranking Panel using facebook profiles, resocoder, programming tutorial, sdk, game request, app request, app invite, facebook friends, friends, unity3d facebook leaderbaord, unity scoreboard, global leaderboard, unity3d facebook highscores, Learn how to make games, make a mobile game, unity3d highscores, make hyper casual game, mobile game money, phone game money, android game money,unity firebase realtime database, unity2d, serialize, serialization, locked, locked game, sokoban, puzzle, developers, Getting started with realtime database, firecasts, firecasts for firebase, unity firebase realtime database, realtime database, how to, how to create a database in unity, get started with firebase authentication in unity, firebase realtime database, how to add database in unity, how to connect database in unity, how to use firebase with unity, firebase database, adding a database in unity, connecting a database unity tutorial, using firebase realtime database, connecting a database to unity, firebase realtime, Getting started with realtime database, firebase hosting, firebase suite, firebase message, firebase chat, app development, unity database how to, simple database unity tutorial, unity android database tutorial, cloud firestore, unity matchmaking, firebase realtime database multiplayer, firebase cloud functions matchmaking, firecasts for firebase developers, video on firebase realtime database, requests to firebase realtime, firebase sdk, unity firebase integration, unity firebase matchmaking, unity онлайн игра, unity online firebase, unity firebase server, unity multiplayer firebase, unity firebase database, игра на unity, unity cloud bill, Firebase authentication unity, Getting started with Firebase in Unity, simple database unity, unity firebase tutorial, firebase unity tutorial, unity database tutorial, realtime database in unity part, firebase realtime database in unity, firebase and tasks, firecasts for firebase, data integrity, unity мультиплеер, unity online, unity firebase, unity 2020, unity 2019, firebase unity, unity database, and realtime database for only, firebase tutorial, firebase matchmaking, firebase rules, firebase developers, unity3d firebase realtime database, unity firebase realtime, realtime rules, in unity like firebase firebase, a database with unity firebase is, create a database in unity adding, a realtime database with your unity, with realtime database on unity, firebase database in unity rest, use firebase database in unity, my firebase realtime database, a change on the firebase realtime database, a secure firebase realtime database, GDS: Yes;, get started with firebase realtime, Patrick Martin, using the realtime database hope, for your realtime database part, firestore vs the realtime database, unity firebase database realtime, unity firebase sdk realtime, на unity firebase realtime, realtime database on unity, firebase database realtime, firebase sdk realtime database, помощью firebase realtime database, firebase realtime database google, firebase database to store, auth firebase database save, links firebase realtime database, using strong realtime database, and realtime database using, matchmaking system, rest api, puzzle game, online tutorial, online matchmaking, online game, board game, Google Maps, untiy файрбейс, untiy multiplayer, emulator suite, team Firebase, Firebase team, Google Developers",
      "target_audience": [
        "unity3d developers and future developers"
      ]
    },
    {
      "title": "Blender 2.8 : The Ultimate Guide to 3D Modelling",
      "url": "https://www.udemy.com/course/theultimateblendercourse/",
      "bio": "Learn the Ins and Outs of Blender in Under 3 Hours",
      "objectives": [
        "Use Blender and understand it's interface",
        "Build professional 3D models for video games, Animation and much more.",
        "Understand the principles of modelling",
        "UV map and unwrap your models",
        "Export your models to external packages",
        "Create your own materials"
      ],
      "course_content": {
        "Getting Started With Blender": [
          "Introduction",
          "First Look at Blenders New UI",
          "Camera Handling",
          "Basic Components of 3D Meshes",
          "Object Manipulation Using Transformation Tools"
        ],
        "Introducing Primitives": [
          "Section Overview",
          "Setting Up The Reference Images",
          "Adding More Primitive Objects",
          "Expanding With the Primitives"
        ],
        "Box Modeling": [
          "Introducing Box Modeling Technique",
          "More 3D Modeling Tools!",
          "Smooth Shading - Polishing 3D models"
        ],
        "Optimizing 3D Models": [
          "Deleting Unnecessary Geometry",
          "More Selection Tools and Eliminating Un-Optimized Geometry",
          "Final CleanUp"
        ],
        "Applying Materials": [
          "Introducing Materials",
          "Texture Maps",
          "Exploring UVs",
          "UV Unwrapping Tools!"
        ],
        "Scene Organization": [
          "De-Cluttering The Scene",
          "Final Touch up - Rendering And Exporting 3D Model to a Game Engine"
        ]
      },
      "requirements": [
        "There are no specific requirements for this course. Anyone with basic computing skills and a working computer can enroll."
      ],
      "description": "Blender is a fantastic platform which enables you to make AAA-quality models which can be exported to any game engine, 3D printer, or other software. Here are some of the reasons why you want to learn Blender with this online course...\nCreate assets for video games.\nMake unique 3D printed gifts.\nDesign your dream 3D models like house, car, etc\nExpress yourself through 3D artwork.\nLearn how to create 3D Models and Assets for games using Blender, the free-to-use 3D production suite. We start super simple so you'll be ok with little or no experience. With our online course, you'll be amazed what you can achieve.\nThe course is project-based, so you will applying your new skills immediately to real 3D models. All the project files will be included, as well as additional references and resources - you'll never get stuck. There are powerful diagrams, quality screencasts and more.\nFor each of the models that you build you will follow this process...\nBe challenged to build the entire model yourself.\nBe shown step-by-step how to build it.\nApply your knowledge regularly.\nA great way to alleviate the burden of learning a brand new piece of software.\nFrom the perspective of a complete beginner in the Blender software, this course will cover the basics and alleviate the burden of learning a new piece of software. Blender is actually a very intuitive piece of software once you get the basics down, and is easy to pick up on the more complicated aspects after learning the basics. Blender is a great piece of software for new 3D modelers and those wishing to be able to create assets for video games. This course will make you feel confident in using Blender as a complete beginner.",
      "target_audience": [
        "Anyone willing to get started with 3D modeling or get over initial roadblock towards 3D Modeling",
        "One who wants to get familiar with Blender 2.8(The latest addition to the blender family)",
        "Students who are willing to make their own assets for games"
      ]
    },
    {
      "title": "A COMPLETE 3-Hour Introduction to Spatial and GIS Data in R",
      "url": "https://www.udemy.com/course/spatial-data-and-geographic-information-systems-gis-in-r/",
      "bio": "Complete real world projects using R and spatial data. No coding experience necessary!",
      "objectives": [
        "Start a GIS and spatial data project from start to finish, completely in R",
        "Become prepared to enter the GIS workforce by elevating your geospatial skillset",
        "Learn the most popular libraries and tools for working with spatial data in R",
        "No prior coding experience needed, you will learn R from scratch.",
        "Create beautiful web maps and static maps for your projects",
        "Work with a wide variety of spatial data types, including vector and raster data.",
        "Learn how to plot and create beautiful maps",
        "Hands-on learning with step-by-step code walkthroughs after each lecture",
        "Manipulate and summarize raster data to extract information from satellite imagery and other sources"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Introduction to R programming": [
          "Installing R",
          "Installing RStudio",
          "Setting up your RStudio Workspace",
          "Basic R Code",
          "Vectors"
        ],
        "Vector Data": [
          "Accessing data for this course",
          "Install packages and set working directory",
          "Points: Convert a CSV into a points shape file",
          "Points: Plotting points data",
          "Points: Modifying point data frames",
          "Polygons: Importing a shapefile",
          "Polygons: Plotting shape files",
          "Polygons: Exporting data from shape files",
          "Polygons: Modifying data",
          "Lines: Importing and modifying data",
          "Lines: Calculating length of roads in a dataset",
          "Project: Calculate the road length in each neighbourhood"
        ],
        "Raster Data": [
          "Importing raster data",
          "Plotting raster data : land surface temperature",
          "Extracting data from rasters: vegetation data",
          "Using raster math to calculate new rasters",
          "Cropping and masking rasters",
          "Creating a stack of rasters with air pollution data",
          "Creating your own raster"
        ],
        "Making Maps": [
          "Plotting earthquake data in leaflet",
          "Plotting csv data in leaflet",
          "Plotting polygons in leaflet",
          "Plotting raster data in leaflet",
          "Interactive maps in tmap"
        ],
        "Conclusion": [
          "Thanks for watching!"
        ]
      },
      "requirements": [
        "No programming experience needed."
      ],
      "description": "If you are entering the field of GIS and want to learn how to get started with R programming and spatial data, this is the course for you. We go over all the basis of how to work with spatial data in an R environment. This course is designed for academics, consultants and individuals looking to enter the GIS field.\nHere are a few examples of the projects you will work on:\nCalculate vegetation across Washington and extract values at points of interest\nInterpolate air quality values in areas with missing data\nCalculate the average salary across major neighbourhoods using a Census shape file\nAnd more!\nBy the end of this course you will have learnt the following:\nWork with different data types (vector, raster, etc.)\nConduct GIS analysis\nCreate beautiful maps\nWork with real-world data.\nMore benefits:\nAll slides are provided\nAll spatial data sets are provided\nLifetime access to the course, forever.\nNo prior experience is necessary - just bring your enthusiasm to learn and an eagerness to harness the power of spatial data. By the end of this course, you'll be equipped with the essential tools to tackle spatial challenges and confidently venture into more advanced data science pathways.\nMy goal is to help you discover the fascinating intersection of data and location through user-friendly lectures, hands-on exercises, and engaging projects. I will guide you step-by-step, ensuring you feel confident working with Geographic Information Systems (GIS) and exploring diverse spatial datasets.",
      "target_audience": [
        "Individuals interested in R, GIS, or spatial data science."
      ]
    },
    {
      "title": "Unreal PONG, Build Your first Unreal Engine Blueprints game",
      "url": "https://www.udemy.com/course/ue4pong-bp/",
      "bio": "Build a your version of the famous Pong, with local multiplayer, from an empty project to a fully working packaged game",
      "objectives": [
        "Building a full game (console ready) with Unreal Engine 4 with Blueprints only (Local Multiplayer game)",
        "Understand all the Fundamentals of creating a game, starting from having the idea until packaging it into an executable"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Prepare the Project & Create the player Pawn": [
          "Create and prepare the project",
          "The player and it's Pawn"
        ],
        "Building the game Visual identity": [
          "Start building the game Level",
          "The Game Mode",
          "Master Materials",
          "Beautifying the visuals of the Level"
        ],
        "Player Dynamic color Change and Dynamic 3d UI": [
          "Differentiate the players via Dynamic Material Instances",
          "The 3d UI for each player"
        ],
        "The Ball": [
          "Spawn the Ball & Camera procedural animation",
          "Handle the Ball hit events",
          "Sound Cues for SFX variations"
        ],
        "Scoring & End Match detection": [
          "Scores and the End of the Match UI",
          "Scoring goals and score calculations",
          "Accelerate the Ball"
        ],
        "Game Flow (Menu, Start Game & Pause Game)": [
          "The Main Menu",
          "The Game beginning scenario",
          "The Pause Screen"
        ],
        "Packaging, Fixing & Finalizing the project": [
          "Package the game, Test it & Fix it's problems",
          "Finalize the Project and Try it on multiple platforms"
        ],
        "Extras": [
          "Project Files"
        ]
      },
      "requirements": [
        "Passion to game development",
        "Basic idea about Unreal Engine or any other engine is a plus, but not a requirement"
      ],
      "description": "Pong have always been the best practice for anyone breaking into the game industry or even an existent talent who wants to break into a new Engine. Whenever you're able to create pong with the target tech, you can do anything!\nIn this course, we'll be building PONG from scratch, but in a more modern and fancy way & style. The journey will starts from a totally empty Unreal Engine project, ending up with a fully packaged *.exe game. And during this 4 hours journey we'll be touching areas such as Gameplay, UI, VFX, Materials, Physics, SFX, Animations, Camera, Inputs, and much much more.",
      "target_audience": [
        "Unreal Engine beginner users",
        "Unreal Engine intermediate users"
      ]
    },
    {
      "title": "ULTIMATE Unity Game Programmming - Video Game Development",
      "url": "https://www.udemy.com/course/create-epic-games-in-unity/",
      "bio": "Master Game Development with Unity: 5 Games, One Course!",
      "objectives": [
        "Develop Core Game Mechanics – Learn how to implement essential gameplay mechanics",
        "Implement User Interfaces and Game Flow – Understand how to design and incorporate user-friendly interfaces",
        "Explore Basic AI and Object Spawning – Dive into beginner-level artificial intelligence and dynamic spawning techniques to create challenging opponents",
        "Design and Build Multiple Game Types – Gain hands-on experience by creating five classic game genres"
      ],
      "course_content": {
        "Flappy Birb": [
          "Flappy Birb - Bird movement",
          "Flappy Birb - Pipes and UI"
        ],
        "Pong": [
          "Pong - Paddle Movement"
        ],
        "Zombie Shooter": [
          "Zombie Shooter - Player Movement",
          "Zombie Shooter - Shooting",
          "Zombie Shooter - Spawning Zombies and UI"
        ],
        "Endless Runner": [
          "Endless Runner - Player Movement and Spawning Spikes"
        ],
        "Airplane Shooter": [
          "Endless Runner - Game Over and UI",
          "Airplane Shooter - Player Movement",
          "Airplane Shooter - Enemy Spawner and Score",
          "Airplane Shooter - Finishing Touches"
        ]
      },
      "requirements": [
        "Latest version of Unity",
        "A fresh and ready mind to start learning"
      ],
      "description": "Ready to dive into game development but not sure where to start? This course is designed to take you from beginner to confident creator by building five classic games step-by-step in Unity. In just a few hours, you’ll learn core game development skills by making projects inspired by popular genres, from a Flappy Bird clone to an endless runner and even a zombie shooter!\nHere’s what you’ll master:\n\n\nFlappy Bird\nDiscover the essentials of player movement and UI design as you bring the beloved Flappy Bird to life, guiding the bird through obstacles and setting up scoring mechanics.\nPong\nDevelop an interactive Pong game, where you’ll program paddle movement and understand game physics that will form the foundation for more complex mechanics.\n\n\nZombie Shooter Gear up for action by learning shooting mechanics, zombie spawning, and basic AI. This section equips you to create exciting, fast-paced gameplay with a unique shooter style.\n\n\nEndless Runner\nBuild a fast, addictive endless runner where you’ll implement player movement, dynamic obstacle spawning, and game-over mechanics to keep players engaged.\n\n\nAirplane Shooter\nRound out your skills with an airplane shooter, integrating enemy spawners, scoring systems, and finishing touches that polish your game to a professional level.\n\n\nBy the end of this course, you’ll have a portfolio of games and a solid understanding of game development in Unity. Whether you're aiming to become a full-time game developer or looking to pick up game dev as a hobby, this course will give you the hands-on experience you need to get started.",
      "target_audience": [
        "Anyone who wants to start making their own games!"
      ]
    },
    {
      "title": "Unreal Complete Scene - Old West Environment",
      "url": "https://www.udemy.com/course/ucs-old-west-environment/",
      "bio": "Learn how to create an Old West environment on UE5",
      "objectives": [
        "Create an environment from scratch on UE5",
        "Create next-gen trees (Structure in Nanite & Foliage in traditional LOD)",
        "Create multiple optimized shaders",
        "Create different vegetation type on Speedtree 9"
      ],
      "course_content": {},
      "requirements": [
        "Owning a computer with Windows 10 or Windows 11",
        "Winrar or 7zip to decompress files",
        "The basics of Unreal Engine"
      ],
      "description": "During this course I will show you, step by step, how to create a western environment from scratch.\n\n\nFrom the creation of the vegetation with Speedtree 9.4 to the final composition on UE5. We will see the creation of textures with Quixel Mixer, terrain to dress the background of our scene with Gaea (optional) and we will create all the shaders needed to get the maximum quality. We will finish with the 4k renders with the Movie Render Queue. Bulldings and props come from Old West Learning project. More details below.\n\n\nWhat I will learn?\nIn Speedtree 9.4:\nCreate serval Next-gen leaffy trees with hybrid logic (structure with Nanite and foliage with common LODs/Imposter)\nCreate 3d branches to use as textures.\nCreate an atlas to combine several parts in a single texture.\nCreate ground foliage models optimized for realtime rendering.\nIn UE5:\nComplex shaders for trunk, foliage, terrain, Megascans assets and water.\nAdvanced terrain shader with distance blend texture, Parallax Occlusion Mapping, RVT, automatic logic and spawn foliage with mask.\nComplete composition (Procedural Placement, lighting, vfx...)\nCreate renders with the Movie Render Queue\nIn Quixel Mixer:\nCreate multiple advanced textures with and without animated puddles in UE5\nExport with the correct packed textures\nIn Gaea:\nCreate some terrains used to dress the background of our scene\nExport masks to use them for texturing in UE5\nIn Photoshop:\nReplace colors of some textures\nEnhance the quality\nCombine masks\n\n\nWhat I will get?\n~49 hours of step-by-step video tutorial\nSeparate downloadable chapters (.zip)\n1080/30fps resolution\n\n\nSoftware Used:\nSpeedtree 9.3 and 9.4 after the chapter 4\nUnreal Engine 5.1 (5.2 switch in chapter 5.5)\nPhoto/Image Editing Software (Photoshop, Gimp...)\nQuixel Mixer 2022\n\n\nLevel:\nAnyone who wants to learn, improve or fix their skills in environment creation.\n\n\nPrerequisite:\nOwning a computer with Windows 10 (64Bits) / Not tested on Windows 11\nWinrar or 7zip to decompress files\nThe basics on Unreal Engine\nEven if it is not required, it is preferable to have followed the Ultimate Forest Environment Course\n\n\nImportant note :\nThis course was created in version 5.1 and it is STRONGLY RECOMMENDED to use THE SAME version! If you choose to use another version, be aware that you may encounter possible errors not covered in this course.\n\n\nAbout copyrights:\nAll you can find in this course are for personal usage only. You cannot share it, sell it or make it available for free on any platform.",
      "target_audience": [
        "Anyone who wants to learn, improve or fix their skills in environment creation."
      ]
    },
    {
      "title": "Building Chess & Tic Tac Toe Game with Pygame",
      "url": "https://www.udemy.com/course/building-chess-tic-tac-toe-game-with-pygame/",
      "bio": "Build interactive chess and tic tac toe games using Pygame. Train your Chess with Monte Carlo Tree Search algorithm",
      "objectives": [
        "Learn how to build interactive chess game using Pygame",
        "Learn how to build interactive tic tac toe game using Pygame",
        "Learn how to create Monte Carlo Tree Search algorithm and implement it to the chess game",
        "Learn how to create chess game logics, create event handling, and input handling",
        "Learn how to create tic tac toe game logics, create event handling, and input handling",
        "Learn how to initialize Pygame window, set the size, load images, create event handling, and input handling",
        "Learn how to create function to make random chess move",
        "Learn how to implement chess move logics",
        "Learn how to create function to check if a player has won the game",
        "Learn the basic fundamentals of Pygame, such as getting to know its use cases, main features, and some game project ideas that can be built using Pygame",
        "Learn the basic rules of chess and tic tac toe game. Additionally, learn how to implement the games logics into code",
        "Learn about four game testing objectives, functionality testing, user interface testing, compatibility testing, and performance testing",
        "Learn how to build jumping games using Python and Pygame"
      ],
      "course_content": {
        "Introduction": [
          "Introduction to the Course",
          "Table of Contents",
          "Whom This Course is Intended for?"
        ],
        "Tools, IDE, and Libraries": [
          "Tools, IDE, and Libraries"
        ],
        "Introduction to Pygame": [
          "Introduction to Pygame"
        ],
        "Chess & Tic Tac Toe Game Logics": [
          "Chess & Tic Tac Toe Game Logics"
        ],
        "Installing Pygame & Chess": [
          "Installing Pygame & Chess"
        ],
        "Pygame Tutorial": [
          "Pygame Tutorial"
        ],
        "Downloading Chessboard & Chess Piece Images": [
          "Downloading Chessboard & Chess Pieces Images"
        ],
        "Loading Chessboard & Chess Piece Images": [
          "Initializing Pygame & Loading Chessboard Image",
          "Loading Chess Piece Images"
        ],
        "Creating Function to Make Random Chess Move": [
          "Creating Function to Make Random Chess Move"
        ],
        "Creating Chess Game Logics, Event Handling, and Input Handling": [
          "Creating Chess Game Logics, Event Handling, and Input Handling"
        ]
      },
      "requirements": [
        "No previous experience in game development is required",
        "Basic knowledge in Python"
      ],
      "description": "Welcome to Building Chess & Tic Tac Toe Game with Pygame course. This is a comprehensive project based course where you will learn step by step on how to build engaging chess and tic tac toe games using Pygame. This course is a perfect combination between Python and game development, making it an ideal opportunity for you to exercise your programming skills by building interactive game projects. Throughout this course, you'll learn essential skills needed by a game developer, laying a solid groundwork for your future projects. In the introduction session, you will learn the basic fundamentals of Pygame, such as getting to know its use cases, main features, and some game project ideas that can be built using Pygame. Then, in the next section, you will learn about the rules of chess and tic tac toe game and most importantly understand how to implement the logic into the code. Before starting the projects, we will also learn how to operate Pygame and get to know some basic concepts, for example, you will learn how to initialize a Pygame window, you will learn how to set the size of the Pygame window, and you will also learn how to change background color. After learning those basic concepts, we will start the project section. In the first project, we will build an interactive chess game using Pygame. In this section, you will learn how to create a graphical user interface for the chess game, incorporating features like piece movement and piece elimination. Additionally, you'll delve into implementing game logic to enforce rules such as check, checkmate, and stalemate, culminating in a fully functional and interactive chess experience. After completing the first project, we will move on to the second project where you will build an engaging tic tac toe game using Pygame. In this section, you will learn how to develop the game logic for Tic Tac Toe, including checking for win conditions and managing the game state. Additionally, you'll explore methods for handling player input, designing intuitive user interfaces, and refining the game mechanics to ensure a seamless and enjoyable Tic Tac Toe experience. After building a chess and tic tac toe game, we will be conducting testing to make sure that the game has been fully functioning and the game is easy to use. We will be mainly focusing on four testing objectives, those are functionality testing, user interface testing, compatibility testing, and performance testing.\nFirst of all, before getting into the course, we need to ask ourselves this question: why should we build a chess and tic tac toe game? Well, here is my answer. These classic games do not only provide entertainment but also serve as excellent educational tools for improving your problem-solving skills and understanding fundamental game mechanics. By creating these game projects from scratch, you will gain valuable insights into programming logic, user interface design, and game development principles, which will set a solid foundation for more complex projects in the future. Additionally, mastering these skills can open doors to freelance gigs or employment opportunities in the game development industry.\nBelow are things that you can expect to learn from this course:\nLearn the basic fundamentals of Pygame, such as getting to know its use cases, main features, and some game project ideas that can be built using Pygame\nLearn the basic rules of chess and tic tac toe game. Additionally, learn how to implement the games logics into code\nLearn how to initialize Pygame window, set the size, load images, create event handling, and input handling\nLearn how to build interactive chess game using Pygame\nLearn how to create function to make random chess move\nLearn how to create chess game logics, create event handling, and input handling\nLearn how to implement chess move logics\nLearn about four game testing objectives, functionality testing, user interface testing, compatibility testing, and performance testing\nLearn how to create Monte Carlo Tree Search algorithm and implement it to the chess game\nLearn how to build interactive tic tac toe game using Pygame\nLearn how to create tic tac toe game logics, create event handling, and input handling\nLearn how to create function to check if a player has won the game\nLearn how to build jumping games using Python and Pygame",
      "target_audience": [
        "People who are interested in building interactive chess and tic tac toe game using Pygame",
        "People who are interested in developing Monte Carlo Tree Search algorithm"
      ]
    },
    {
      "title": "Learn how to make games from scratch with no programming",
      "url": "https://www.udemy.com/course/learn-how-to-make-games-from-scratch-with-no-programming/",
      "bio": "Learn how to make games without writing a single line of code!",
      "objectives": [
        "Learn how to make games from scratch without programming",
        "Learn how to make money with games"
      ],
      "course_content": {
        "Course Introduction": [
          "Introduction",
          "Introduction to the course"
        ],
        "Learning about stencyl": [
          "Opening up our first game",
          "Adding an actor",
          "Adding a scene",
          "Adding in actors to a scene",
          "Adding Events to an actor",
          "Adding in events to an actor",
          "Actors and events",
          "Stencyl and code",
          "Physical Code",
          "Stencyl and Shapes",
          "12Game loops and moving actors across the screen",
          "When created and placing an object on screen",
          "Attributes part 1",
          "Attributes part 2 local attributes",
          "Attributes part 3",
          "Attributes part 5 setting an attribute",
          "Attributes part 6 - getters and setters",
          "Quiz #1"
        ],
        "Making our first game": [
          "Making our first game",
          "Building our very first game",
          "Building our very first game part 2",
          "Building our very first game part 3 - Building Circles",
          "Building our first game part 4 - Adding the clicks",
          "Building our first game part 5 - Adding the spawn featuere",
          "Building our first game part 6- spawning the stars",
          "Building our first game part 7- Adding in a game font",
          "Building our first game part 8 Adding text to your game",
          "Building our first game part 9- Adding in a score attribute",
          "Building our first game part 10- Adding the scoring functionality",
          "Building our first game part 11 - changing a small mechanic",
          "Building our first game part 13- Adding a timer",
          "Building our first game part 13 - Closing thoughts"
        ],
        "Diving deeper into stencyl and learning how to use all of the commands": [
          "Talking about the rest of the course",
          "Finding the X and the Y co-ordinates of the actor",
          "Setting and finding the direction of an actor",
          "If statements and is the self on screen",
          "Setting and finding the direction of the actor",
          "Rotating an object clockwise or counter clockwise",
          "If, otherwise if and otherwise statements part 1",
          "If, otherwise if and otherwise statements part 2",
          "If, otherwise if and otherwise statements part 3",
          "If, otherwise if and otherwise statements part 4",
          "If, otherwise if and otherwise statements part 5",
          "Making a list",
          "If, otherwise if and otherwise statements part 8",
          "If, otherwise if and otherwise statements part 9",
          "Definite loops",
          "Do after X seconds",
          "Do after and adding in attribute for numbers",
          "Debugging",
          "Advanced coding",
          "For Each loops. For each actor on the screen",
          "For each actor inside a region and for each actor type",
          "For each actor group",
          "Setting region properties",
          "Gravity in games",
          "Making a simple gravity game",
          "Finding the Width of the height of a screen",
          "The Width and tile height",
          "Quiz #3",
          "Scene name",
          "Accessing the camera in stencyl",
          "Moving the camera",
          "Effects- Shake Screen and enable full screne",
          "Layers and manipulating layers",
          "Setting the offscreen bounds",
          "Transitioning",
          "Reloading a scene with a transition",
          "Crossfading a scene",
          "Crossfade and reload a scene",
          "Creating an actor after transition",
          "Scene is transitioning and game is paused",
          "Controls part 1",
          "Controls part 2",
          "Controls part 3",
          "Controls part 4",
          "Math part 1",
          "Math part 2",
          "Math part 3",
          "Math part 4",
          "Math part 5",
          "Math part 6",
          "Sound",
          "Adding a trigger to an event",
          "Triggering an event in another behavior",
          "Another tutorial on triggers",
          "Getting attributes from another area of the program",
          "Setting a remote local attribute",
          "Setting local attributes to a scene",
          "Enabling and disabling behaviors",
          "Opening a link in stencyl",
          "Posting data to a website, saving site specific ads",
          "Adding backgrounds to stencyl",
          "Tilesets",
          "Congratulations on making it this far!",
          "Quiz #4"
        ],
        "Making another game": [
          "Downloading some free assets",
          "Starting to make a new game from scratch",
          "Adding in the stars",
          "Making the stars rotate and quick shortcut tip",
          "Talking about collisions",
          "Adding in the main star",
          "Making the main star change colors",
          "Making the main star change colors part 2",
          "Making playable stars movie",
          "Making the stars stay on the screen",
          "Adding in the walls",
          "Adding a bounce to the walls",
          "Making the stars move on click",
          "Taking away the collisions",
          "Changing the animation",
          "Making the star dissapear when you click on it",
          "Adding in the star color functionality",
          "Adding the score to the screen",
          "Adding in the score functionality",
          "Adding in the star color functionality",
          "Adding boolean variables for spawning stars",
          "Checking the booleans for the when creating",
          "Adding in the isAlive = false logic",
          "Adding in the spawning logic part 1",
          "Adding in the rest of the logic",
          "Giving the player a reason to click the right star",
          "Giving the player a reason to click the right star",
          "Adding in a simple leveling system part 1",
          "Adding in a simple leveling system part 2",
          "Adding in a simple leveling system part 3",
          "Talking about the next course",
          "Changing the size of the image on a mac",
          "Changing the size in GIMP",
          "Adding in the animated actors",
          "Adding in the player and making sure it will follow the mouse",
          "Adding in an offset to make the mouse cursor in the center",
          "Adding in the collision logic part 1",
          "Adding attributes, game font and text to the HUD",
          "Adding in the score and the modifiers",
          "Adding in a special timer",
          "Adding in the level logic",
          "Adding in the modifier logic and talking about the gameplay",
          "Adding in spawn logic and spawn variables",
          "Making sure the player cannot exit the screen",
          "Let's prototype some games",
          "Achievements"
        ],
        "More on physics and collisions": [
          "Talking about physics",
          "Talking about collisions"
        ],
        "More about stencyl": [
          "Talking about the templates",
          "Downloading the source code",
          "Creating a new game with the extended features and fixing a small bug",
          "Talking about the project and level design",
          "Level design part 1",
          "Adding in the background to the level",
          "Adding to the levels",
          "Design 10 levels"
        ],
        "Making money": [
          "Making money with your game"
        ]
      },
      "requirements": [
        "An up-to-date computer with a fairly modern operating system"
      ],
      "description": "FACT: The video game industry is worth 74 billion dollars. http://tinyurl.com/3vz5np8\nFACT: The average programmer makes 92k a year in the video game industry. http://tinyurl.com/7rtp7du\nFACT: This course is the easiest way to start your journey into game development.\nTraditionally game development is viewed as extremely difficult and hard to master. You imagine thousands of lines of code and spending hours infront of a computer screen. Luckily in the past few years technology has made it easier to learn and produce games.\nIn this course you will learn the basics of game programming through a fantastic visual programming language. This way you will learn how to program without the hassle of writing code.\nIn this course you will learn how to start making simple games and I will show you how to make a profit from your games. You can add your game to your resume.\nCourse image by http://ddigitsweb.blogspot.com/",
      "target_audience": [
        "Complete beginners who have never coded but have always wanted to learn",
        "People who want to learn how to make money with software"
      ]
    },
    {
      "title": "The Complete Course of Phaser 2025",
      "url": "https://www.udemy.com/course/phaser-course/",
      "bio": "Learn Phaser in a Professional way from Scratch. Become an expert in creating 2D games, from ZERO to HERO!",
      "objectives": [
        "At the end of the course you will fully master Phaser, unleash your creativity and build captivating HTML games from scratch",
        "You will be able to conduct gaming projects step by step, understanding all the logic and ending with advanced practical examples and complete projects",
        "You will kickstart your game dev adventure with an overview of Phaser and setting up your development environment",
        "You will master the core mechanics of game development, from understanding the game loop to handling user input and creating game objects",
        "You will learn how to bring your games to life with sprites and animations",
        "You will explore techniques for working with spritesheets and texture atlases",
        "You will dive into Phaser's physics engine, tackle collision detection, and apply velocity and gravity to your game elements",
        "You will learn how to organize your game into scenes and states, implement main menus, and manage transitions",
        "You will learn how to enhance player experience with background music and sound effects. Control audio playback like a pro",
        "You will discover the magic of 2D lights and particle systems to add depth and dynamism to your games",
        "You will master the art of drawing graphics and designing in-game UI elements using Phaser",
        "You will Unlock the secrets of optimizing performance and managing memory efficiently",
        "You will be able to practice the content learned in a practical way by following all the steps in the complete exercises and the hands-on projects",
        "You will start with the basics and progressively carry out more complex steps until you reach an advanced level and absolute mastery at the end of the course"
      ],
      "course_content": {
        "Introduction to Phaser": [
          "Course Opener",
          "Introduction to game development with Phaser",
          "Quiz",
          "Setting up development environment (IDE, Node.js, Phaser installation)"
        ],
        "Basic Game Mechanics": [
          "Understanding the game loop",
          "Handling user input (keyboard and mouse)",
          "Creating and manipulating game objects",
          "Quiz"
        ],
        "Sprites and Animations": [
          "Working with sprites and images",
          "Animations using sprites",
          "Managing sprite sheets and texture atlases"
        ],
        "Physics and Collisions": [
          "Phaser's physics engine",
          "Collision Detection",
          "Applying Velocity and Gravity"
        ],
        "Game States and Scenes": [
          "Organizing your game into scenes and states",
          "Transitioning the game states",
          "Implementing a main menu and game over screen",
          "Quiz"
        ],
        "Audio and Sound Effects": [
          "Adding background music and sound effects",
          "Controlling audio playback",
          "Quiz"
        ],
        "Lights & Particle System": [
          "2D Lights",
          "Particle System",
          "Quiz"
        ],
        "Phaser Graphics and in Game UI": [
          "Drawing Graphics in Phaser",
          "Designing and Implementing in Game UI",
          "Quiz"
        ],
        "Performance Optimization & Memory Management": [
          "Profiling and Optimization",
          "Memory Management and Bottlenecks",
          "Quiz"
        ],
        "Final Project": [
          "Building a Game with Phaser Part-1",
          "Building a Game with Phaser Part-2",
          "Building a Game with Phaser Part-3",
          "Course Closure"
        ]
      },
      "requirements": [
        "Having basic notions programming concepts in JavaScript can help, but the course starts from scratch",
        "Install and prepare the software and the needed environment to follow the practical sessions (if you don't know how, don't worry, it's very easy, and I'll explain it to you in the course!)",
        "A decent computer and of course, desire to learn!"
      ],
      "description": "Become a Phaser professional and learn one of employer's most requested skills nowadays!\nThis comprehensive course is designed so that Programmers, Game Enthusiasts, Students, Professionals, Freelancers/Entrepreneurs... can learn Phaser from scratch to use it in a practical and professional way. Never mind if you have no experience in the topic, you will be equally capable of understanding everything and you will finish the course with total mastery of the subject.\nAfter several years working in gaming industry, we have realized that nowadays mastering Phaser for building 2D games using HTML5, JavaScript, and WebGL is very necessary to enhance user engagement and interactivity. Knowing how to use this tool can give you many job opportunities and many economic benefits, especially in the world of entertainment.\nThe big problem has always been the complexity to perfectly understand Phaser requires, since its absolute mastery is not easy. In this course we try to facilitate this entire learning and improvement process, so that you will be able to carry out and understand your own projects in a short time, thanks to the step-by-step, detailed and hands-on examples of every concept.\nWith almost 11 exclusive hours of video, this comprehensive course leaves no stone unturned! It includes both practical exercises and theoretical examples to master Phaser. The course will make you proficient in creating 2D games, and the ability to apply advanced techniques to bring your game ideas to life in a practical way, from scratch, and step by step.\nWe will start with the installation and setup of the needed software and work environment on your computer, regardless of your operating system and computer.\nThen, we'll cover a wide variety of topics, including:\nIntroduction to Phaser and course dynamics\nBasic Game Mechanics\nSprites and Animations\nPhysics and Collisions\nGame States and Scenes\nAudio and Sound Effects\nLights & Particle System\nPhaser Graphics and In-Game UI\nPerformance Optimization & Memory Management\nMastery and application of absolutely ALL the functionalities of Phaser, and the opportunity to implement them on the final project (building a complete game from scratch with Phaser)\nQuizzes, Assignments, Practical exercises, complete projects and much more!\nIn other words, what we want is to contribute our grain of sand and teach you all those things that we would have liked to know in our beginnings and that nobody explained to us. In this way, you can learn to build and manage a wide variety of projects and make versatile and complete use of Phaser. And if that were not enough, you will get lifetime access to any class and we will be at your disposal to answer all the questions you want in the shortest possible time.\nLearning Phaser has never been easier. What are you waiting to join?",
      "target_audience": [
        "Beginners who have never used Phaser before",
        "Programmers, Game Enthusiasts, Students, Professionals, Freelancers/Entrepreneurs and ... who want to learn a new way to create immersive and engaging 2D games with ease",
        "Intermediate or advanced Phaser users who want to improve their skills even more!"
      ]
    },
    {
      "title": "Unity Interview Accelerator & Game Quiz for Game Development",
      "url": "https://www.udemy.com/course/unity-interview-accelerator-game-quiz-for-game-development/",
      "bio": "The fundamentals of Unity, mastering Unity-specific challenges, exam preparation, and creating an impressive portfolio.",
      "objectives": [],
      "course_content": {
        "Practice Tests": []
      },
      "requirements": [],
      "description": "Welcome to the ultimate quiz-based adventure in Unity Game Development! Master Unity fundamentals, tackle challenges. Perfect for all levels, no experience needed. Join us and start your game dev journey today!\nWhether you're an aspiring game developer, a student gearing up for Unity exams, or simply someone passionate about crafting video games, this course is your gateway to mastering Unity and gaining confidence in game development.\nThroughout this engaging quiz-based journey, you'll:\nCement your understanding of Unity fundamentals.\nConquer Unity-specific questions and challenges like a seasoned developer.\nPrepare for Unity Game Development certification exams.\nEnhance your game development portfolio to stand out in the industry.\nAcquire hands-on experience through practical quizzes and projects.\nJoin a vibrant community of like-minded learners, fostering collaboration and sharing your game development odyssey.\nThis course caters to everyone, from beginners to those aiming to become Unity experts. No prior experience is necessary; we'll start from scratch and guide you through each step.\nEmbark on a journey teeming with creative innovation, challenges, and the ability to transform your game development dreams into reality. Join us, and let's commence this incredible adventure together!\nEnroll today to uncover the secrets of Unity Game Development. Your game development future begins here!",
      "target_audience": [
        "Beginners and intermediate learners who are passionate about learning interview questions are in the right place."
      ]
    },
    {
      "title": "Create a 2D Platformer with 3D Assets in Unity® and Blender!",
      "url": "https://www.udemy.com/course/create-a-2d-platformer-with-3d-assets-in-unity-and-blender/",
      "bio": "Learn to create your own 2D action shooting platformer! PLUS learn to create 3D assets for a next-level game look!",
      "objectives": [
        "Build a platform shooter game in Unity®.",
        "Learn the fundamentals of game design.",
        "Create artwork in MagicaVoxel and Photoshop.",
        "Code C#.",
        "Build professional 3D models for video games and more.",
        "Develop with a creative and technical eye.",
        "Design large environments for your character to explore in.",
        "And More!"
      ],
      "course_content": {
        "Intro to Unity": [
          "Introduction",
          "Unity Editor",
          "Moving a Cube",
          "Materials",
          "Lights",
          "Particle System",
          "Applying Physics",
          "Asset Store"
        ],
        "Intro to Coding": [
          "Introduction",
          "Variables",
          "Methods",
          "If Blocks",
          "Loops"
        ],
        "Intro to Inputs": [
          "Introduction",
          "Key Presses",
          "Moving a Player",
          "Jumping",
          "Moving Forward",
          "Cycling Cameras"
        ],
        "Intro to Prefabs": [
          "Introduction",
          "Introduction to Prefabs",
          "Random Angles",
          "Explosion Effects",
          "Adding Explosion Effects"
        ],
        "Intro to VR": [
          "Introduction",
          "Activating VR",
          "Building a Castle",
          "Lowering the Door",
          "Triggering",
          "Interface",
          "UPDATE - Using the Unity Package with Unity 5.6"
        ],
        "Build A Megadude Game From Scratch": [
          "Welcome - Let's Build A Megadude Game",
          "Introduction and Downloading Unity",
          "3D Elements",
          "Building a Player",
          "Enabling Player Input",
          "Horizontal Movement",
          "Jumping"
        ],
        "Shooting": [
          "Game Camera",
          "Shooting Bullets",
          "Particle Effects",
          "Multiple Bullets",
          "Charging Bullets"
        ],
        "Building Enemies": [
          "Base Enemy Class",
          "Hurt Animation",
          "Killing Effect",
          "Destroying Particle System",
          "Walking Enemy",
          "Knockback Effect",
          "Physics Materials",
          "Collision Improvements"
        ],
        "FlameThrower Enemies And More": [
          "FlameThrower Enemy",
          "Flames",
          "Shooter Enemy",
          "Enemy Bullet",
          "Spawn Enemy Bullets",
          "Burst Fire",
          "Shooter Enemy Adjustment",
          "Turrets"
        ],
        "Doors and Buttons": [
          "Doors",
          "Button",
          "Trigger Elements",
          "Timed Button"
        ]
      },
      "requirements": [
        "Unity® 2017.1.0f3 (for game set-up and coding)",
        "MagicaVoxel and Adobe Photoshop CC 2015.5 (for creating art)",
        "Blender is free to download. Please download and install Blender before purchasing this course",
        "This course was recorded on a Mac computer, but you can use a PC."
      ],
      "description": "We at Mammoth Interactive value input from students like you. Feel free to leave us your feedback.\nComplete Beginner's Guide to Building a Game from Scratch in Unity® with Pixel Art in MagicaVoxel & Photoshop and 3D Modelling with Blender.\nThis course was funded through a massively successful Kickstarter campaign.\nJoin Mammoth Interactive step-by-step in building a fully featured game from scratch. We show you how to make all the code and art for the game.\nYou don't need any prior coding or digital art experience!\nOur Instructors will take your through the project-based first to created a 2D Action Platformer through Unity, Voxel, and Photoshop, and as an added plus we’ll now also include multiple lectures on creating 3D models using Blender which you can use to add to your game!\nWhy Blender?\nBlender, like Unity®, is a popular production suite that is free to download. Blender is a revolutionary tool for making 3D art digitally. With Blender, you can make art assets for games, like we do in this course.\nThese courses are project-based . You will not learn a bunch of useless coding practices. At the end of this course, you will have an AWESOME game to use in your portfolio. Taking this course means that you learn practical, employable skills immediately .\nLearning how to code is a great way to jump in a new career or enhance your current career. Coding is the new math! Learning to code will propel you forward for any situation. Learn it today and get a head start for tomorrow. People who can master technology will rule the future.\nThe beauty of taking an online course like this is the ability to replay any of the lectures at any time. There is no time limit or final tests. You get to learn at your own pace with a practical model method of learning.\nThis course is project-based, so you will not waste time on useless coding practices. We feel that project based training content is the best way to get from A to B. Taking this course means that you learn practical, employable skills immediately.\nYou get full lifetime access to this course for a single one-time fee. Enroll today to join the Mammoth community!\nEnroll now to join the Mammoth community!",
      "target_audience": [
        "Complete beginners. No prior coding or digital art skills necessary.",
        "Anyone who wants their start at making 3D or 2D video games.",
        "People who want to make games."
      ]
    },
    {
      "title": "Creating your first game in Unity | 2D space shooter",
      "url": "https://www.udemy.com/course/creating-your-first-game-in-unity-2d-space-shooter/",
      "bio": "From zero to first results in Unity and game development! Develop your first game and share with your friends!",
      "objectives": [
        "Install the Unity game engine",
        "Learn to use the core Unity interface",
        "Learn the C# programming language from scratch",
        "Learn what reactive programming is and learn how to use the UniRx library",
        "Create your first game and share it with your friends"
      ],
      "course_content": {
        "Overview of the Unity cross-platform development environment": [
          "Installing Unity and the Code Editor",
          "Introduction. Overview of the Unity platform",
          "Exploring the editor interface part 1",
          "Learning the editor interface part 1. Test",
          "Exploring the editor interface part 2",
          "Studying the editor interface part 2. Test",
          "Editor settings",
          "Editor settings. Test"
        ],
        "C# programming language": [
          "Program understanding",
          "Understanding the program.Test",
          "Writing styles",
          "Writing styles.Test",
          "History of C# and Variables",
          "Functions",
          "Classes",
          "Comments, keyword var, constant",
          "Operators",
          "Logical operators",
          "Swithc, break statements",
          "Cycles",
          "Arguments, overloading, recursive methods",
          "Strings",
          "Encapsulation.Constructors and Properties",
          "Arrays"
        ],
        "3.Game development": [
          "Introduction",
          "Project preparation",
          "Creating the main menu",
          "Adding Music to a Project",
          "Creating a game scene",
          "Creation of the ship and its logic",
          "Ship flight illusion",
          "Ship rotation",
          "AI",
          "AI part 2",
          "AI part 3",
          "UI game scene",
          "Beautiful scene switching",
          "Life Bonus",
          "Particle System",
          "Adding a gunshot sound",
          "Exit to the main menu by pressing Esc",
          "Animation and assembly of the project",
          "Summarizing"
        ]
      },
      "requirements": [
        "Programming skills are not required, all you need is a computer and desire!"
      ],
      "description": "Want to create games in Unity? Try your hand!\n\n\nThis course will take you step by step from installation to your first game.\nIn the first module:\nYou will install the Unity game engine.\nDisassemble UnityHub and all additional resources installed in it.\nLearn about the Unity interface. What is it divided into and what is each part used for.\n\n\nIn the second module, master from the very beginning:\nC# programming language\nIts features\nOperators, loops and more\n\n\nin the third module.\nYou will create your space shooter game in stages:\nCreating the main menu\nUI layout\nCreating a game scene\nAdding 2D and 3D object to the scene\nObject Collision Handling\nAdding Effects\nAdding animations\nAdding sounds\nLearning Reactive Programming\n\n\nTo begin with, I want to tell you general information about the GameDev sphere.\nThe development team consists of various positions:\nGame designer - develops the main idea of the game, as well as ideas for all game mechanics with which the player interacts.\nThe director thinks over the plot and dialogues of the game\nDesigners, 2D and 3D artists are working on the visual component of the project\nAnd the developer combines all these elements into a single whole, collecting models, forcing the game world to come to life.\n\n\nThe term \"game engine\" is a direct copy of the English \"Game Engine\".\nIn fact, this is a complex of programs combined into a single whole, with the help of which visualization, sound accompaniment, movement of game characters, their actions in accordance with scripts, and much more are provided.\n\n\nThis term first appeared in the mid-1990s. It was associated with games in the genre of \"first-person shooter\",\nor rather, with the most popular at that time Doom. The source code of this game was built very thoughtfully, with the main components highlighted: 3D graphics system, sounds, collision calculations, scripts. This led to the fact that game programmers did not write their own code, but used the achievements of the Doom developers,\nhaving made some changes to the code: drawing other levels, changing the graphics and appearance of weapons, adjusting the rules and releasing new games based on the same code from Doom.\n\n\nThis is a translated course.",
      "target_audience": [
        "For those who like games",
        "For those who dream of creating their own worlds and sharing them with people",
        "For those who want to work as a game developer but don't know where to start"
      ]
    },
    {
      "title": "Unreal Engine 5 Blueprint: Santa Flappy 2D Game Course",
      "url": "https://www.udemy.com/course/unreal-engine-5-blueprint-santa-flappy-2d-game-course/",
      "bio": "Build a complete 2D mobile game in Unreal Engine 5 using Blueprint.",
      "objectives": [
        "Students will be able to create a complete 2D mobile game in Unreal Engine 5 using Blueprint visual scripting without writing a single line of code.",
        "Students will be able to implement Android touch controls, scoring, and player mechanics using Unreal Engine 5 Blueprints.",
        "Students will be able to design and integrate game UI elements such as main menu, coin system, and game over screen in Unreal Engine 5.",
        "Students will be able to package, export, and test their 2D Unreal Engine 5 game on real Android mobile devices and publish it on play store."
      ],
      "course_content": {},
      "requirements": [
        "No prior game development experience required — perfect for beginners. A computer (Windows recommended) capable of running Unreal Engine 5."
      ],
      "description": "Welcome to the Unreal Engine 5 Blueprint 2D Game – Santa Flappy for Android course! If you've ever wanted to build and publish your own mobile game without writing a single line of code, this course is the perfect place to start.\nIn this project-based course, you’ll create a fully functional 2D side-scrolling mobile game called Santa Flappy using Unreal Engine 5 and Blueprint visual scripting. Santa Flappy is no ordinary flappy-style game — it features stunning sky visuals, smooth gameplay, and multiple fun mechanics to keep players engaged.\nYour main character, Santa, will fly through the air, jumping over deadly log obstacles while collecting coins. You’ll also implement an exciting fireball ability that allows Santa to break obstacles in his path. The game includes a score-based level progression system with 20 levels — after reaching the target score in each level, Santa advances to the next one. You’ll also build a coin system, unlock multiple Santa characters, and design an intuitive UI with menus and HUDs.\nEverything is built using Blueprints — no coding required. You’ll learn to handle touch input, create visual effects, package for Android, and even test your game on real devices.\nBy the end of this course, you’ll have a complete, polished Android game and the skills to make many more. Whether you’re a beginner or just curious about mobile game development in UE5, this course is a perfect hands-on starting point.",
      "target_audience": [
        "Beginners who want to learn 2D game development using Unreal Engine 5",
        "Aspiring mobile game developers interested in creating Android games",
        "Unreal Engine users who want to build games using Blueprint visual scripting only",
        "Game design students or hobbyists looking for a hands-on project to publish their first game",
        "Anyone who wants to create and test their own mobile game without writing code"
      ]
    },
    {
      "title": "Complete Introduction to Unity Engine 2021",
      "url": "https://www.udemy.com/course/complete-introduction-to-unity-engine/",
      "bio": "Want to develop games, but don't know where to start? Then this course is for you!",
      "objectives": [],
      "course_content": {
        "Introduction": [
          "Course Overview",
          "How To Follow The Course?",
          "What is Unity?",
          "Why Unity?",
          "Licensing"
        ],
        "Exploration": [
          "Version Types",
          "Version Information",
          "Unity ID",
          "Unity Learn",
          "Unity Documentation",
          "Setting Up and Creating a New Project"
        ],
        "Understanding The Editor": [
          "Main Windows",
          "Gameobjects and Components",
          "The Play Controls",
          "The Toolbar",
          "The Package Manager and Asset Store",
          "The Build Menu",
          "Project Settings and Preferences"
        ],
        "Outro": [
          "Farewell",
          "What Now?",
          "Join my Discord!"
        ]
      },
      "requirements": [
        "Computer Capable of Running Unity is Required For The Last Part of The Course."
      ],
      "description": "Are you looking for an entryway to creating your own games?\nMany people feel overwhelmed when starting out developing games, many people quit because of the huge amount of new knowledge flowing in rapid succession. With this course, I want to help you succeed in starting your own game developer career by providing you with the tools to properly start using the Unity Engine and master it in the shortest time possible.\nUnity is a cross-platform game engine publicly available for use. It is used in game production, film production, and various industries that require some sort of 3D interactivity or visualization. Unity Engine was launched in 2005 with the vision to \"democratize\" game development by making it accessible to more developers. This year, 50% of the games that were launched on major platforms were made with Unity Engine. As of today, Unity Engine supports over 20 platforms, placing itself as the leader in terms of flexibility and availability.\nIn this FREE course, we will be going through everything you need to know to get started with the Unity Engine in 2020. From licensing to creating a project to navigating the Editor environment. This course has everything you need to hit the ground running when it comes to learning how to make your own games.",
      "target_audience": [
        "Anyone interested In Game Development"
      ]
    },
    {
      "title": "Game Dev Math: Ultimate guide to polishing your game!",
      "url": "https://www.udemy.com/course/game-dev-math-ultimate-guide-to-polishing-your-game/",
      "bio": "Learn the fundamental game development math skills and apply them to exciting game development problems",
      "objectives": [
        "Learn core math skills needed for games",
        "Learn how to apply your math skills to achieve different effects in games",
        "Make better looking and feeling games",
        "Apply math to polish games",
        "Coordinate spaces",
        "Vector math",
        "2D graphics effects like Screen Shake, and animations",
        "Trigonometry and how it relates to vectors"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Installing Dependencies",
          "Building the source code",
          "Tour of the source code",
          "How exercises work in the course"
        ],
        "Sine, Cosine, and Vectors": [
          "Sine and Cosine",
          "Radians and the Unit Circle",
          "Sine, Cosine and the Unit Circle",
          "Vectors",
          "The Dot Product",
          "Matrices",
          "Application 1 - Pulse",
          "Application 2 - Rotation",
          "Exercise - Screen Shake",
          "BONUS - Application 3 - Ball Bounce"
        ],
        "Linear Interpolation": [
          "Mapping to the 0 to 1 range",
          "Linear Interpolation",
          "Easing functions",
          "Application 1 - UV Mapping",
          "Application 2 - Alpha Blending",
          "Application 3 - Button Effects",
          "Application 4 - Bi-linear Filtering",
          "Exercise 1 - Smooth Step",
          "Exercise 2 - Gradient",
          "Exercise 3 - More button effects"
        ],
        "Rays": [
          "Introduction to Rays",
          "Vector Formula for Circles",
          "Quadratic Equation",
          "Ray - Circle intersection",
          "Application - Lasers",
          "Exercise - Cutting Asteroids in half!"
        ],
        "Finale": [
          "Wrapping Up and what's next"
        ]
      },
      "requirements": [
        "C++ programming experience",
        "High school math is an asset but not necessary",
        "Internet access to download the source code"
      ],
      "description": "Video games need math to work - there's no getting around it. 2D and 3D graphics, AI, sound, animations, physics are all applications of math and knowing how the core principles of math work is required in order to have a good grasp on all of them.\nWe're going to learn core math concepts used in game development. Unlike other courses that teach math, we're going to apply the math we learn by programming challenging exercises to achieve interesting effects in 2D graphics and animation that give real polish to our game - Asteroids. These techniques are fundamental and can be used for a variety of applications through all of game development.\nThis isn't a typical a boring math class where I write equations on the board. Pretty much all of the math lectures and applications use fun animations that give you a good VISUAL intuition behind the math. This is more important than just memorizing formulas like you did in high school. I show you why a math concept is important, the intuition behind it through fun animations, the applications of the concepts in a real game you'll have the source code to, THEN you'll use those concepts to make the game even better by applying your knowledge to make fun 2D graphic effects.\nIn the course you'll learn:\nSine and Cosine\nRadians\nLinear Interpolation\nVectors\nRays\nHow to apply your math knowledge\nLots more!\nBy the end of the course, you'll have a better understanding of how to apply math in video games and the intuition behind core math concepts in games. You'll even have enough math knowledge to figure out how to cut an asteroid in half!\n\n\nThere’s no risk!\nThis course comes with a full 30 day money-back guarantee. If you are not completely satisfied with the course, Udemy will refund you what you paid - no questions asked.\nRegister for the course today!",
      "target_audience": [
        "Game developers who want to learn the application of math in games",
        "Game developers interested in making better, more polished games",
        "Those interested in learning math in a more fun visual way"
      ]
    },
    {
      "title": "Create a Horror Zombie game in Unity",
      "url": "https://www.udemy.com/course/create-a-horror-zombie-game-in-unity/",
      "bio": "Make a Zombie game in Unity",
      "objectives": [
        "Easy to undestand coding activities",
        "Create a horror game in unity",
        "Tips of Game Design and indie horror games",
        "A fundamental understanding of Unity"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Make a Horror Game": [
          "Create a Floor",
          "Adding Soldiers and Rigidbody",
          "Make Animator for Player",
          "Create PlayerMovement Script",
          "Create a Bullet",
          "Create Bullet Script",
          "Adding MuzzleFlash",
          "Download Charachter from Mixamo",
          "Create animation Controller for Enemy",
          "Create Enemy movement Script",
          "Enemy Health",
          "Enemy Death-Effect",
          "Player Health",
          "Create HealthBar",
          "Adding Shot Sound",
          "Main Menu"
        ],
        "Create Prison LevelDesign": [
          "Create a Floor and Wall",
          "Adding Bed and Probs",
          "Adding Pipes",
          "Adding Sky",
          "Adding Light",
          "Adding Probs"
        ]
      },
      "requirements": [
        "it would be good to have a basic undestanding of Unity. you dont need any coding experience as i will cover c# coding in detail.",
        "You need a Pc"
      ],
      "description": "This game will teach you how to make a horror game ,teaching all skillsets the fundamentals of game creation. you dont need previous experience as i will guiding you through the course step by step.\nthis course has beed designed to be easily undestandable to level game Design,\n\n\nFull 3D Charachter Movement\nPhysics\nCamera\nPlayer Attack System\nScripting\nPeople who want to create and publish their own Games\nPeople interested in working in the game sedign industy\nVompetent and confident with using a Computer.......\nKilling enemies with Bullets,\nlearn C# coding using real world coding activities\nsetting up a third person character\nusing unity 2019\nPeople who want to create and publish their own Games\nPeople interested in working in the game sedign industy\nVompetent and confident with using a Computer.......\nKilling enemies with Bullets,\nlearn C# coding using real world coding activities\nsetting up a third person character\nusing unity 2019\nPeople who want to create and publish their own Games\nPeople interested in working in the game sedign industy\nVompetent and confident with using a Computer.......\nKilling enemies with Bullets,\nlearn C# coding using real world coding activities\nsetting up a third person character\nusing unity 2019\nKilling enemies with Bullets,\nlearn C# coding using real world coding activities\nsetting up a third person character\nusing unity 2019\nKilling enemies with Bullets,\nlearn C# coding using real world coding activities\nsetting up a third person character\nusing unity 2019",
      "target_audience": [
        "This Course is for beginners , who want to learn Unity"
      ]
    },
    {
      "title": "Game Development Essentials in Godot!",
      "url": "https://www.udemy.com/course/game-dev-essentials-godot/",
      "bio": "Add elements to your Godot game project that are essential for any game genre; menus, music, and data persistence.",
      "objectives": [
        "Learn how to transition between multiple scenes in your Godot project. Transition smoothly with visual and audio fades.",
        "Use data persistence to pass information between scenes.",
        "Build menus and interfaces with a varity of button types and consistent themes.",
        "Save game settings and progress between game sessions with custom resource files."
      ],
      "course_content": {
        "Essentials": [
          "Pause",
          "Title",
          "Transition",
          "Autoload",
          "Music",
          "Settings",
          "Exit",
          "Enter",
          "Save",
          "Credits"
        ]
      },
      "requirements": [
        "Students should have completed \"Introduction to 3D Game Development in Godot.\"",
        "Or have a Godot project ready with multiple levels and a character to move between them."
      ],
      "description": "This course is a continuation of Introduction to 3D Game Development in Godot, but can be followed & applied to any project that contains a character the player can control to move through multiple levels.\nJoin our discord server to work on this course alongside your peers!\nIn this course, we will cover essential elements that are common to almost any game of any genre; pausing, menus, changing scenes, data persistence, music, settings, and moving a character between different areas of your game.  When you're done, you'll have a good basic structure of a game that you can further develop into something of your own design of any genre.\nYou'll also learn useful skills for working with the Godot game engine, organizing, and designing your projects to be more scalable.  You will be learning how to code with GDscript, with everything explained in detail.  Our scripts will be written to be highly customizable and reusable.  All of the project files will also be available on GitHub if you need to review the project as it was after completing each lesson.  These videos were recorded using Godot version 4.2.2.\nThis course will be part of a series designed to teach bite-sized pieces of game development that can all be used interchangeably with each other.  So let me know what types of games you're interesting in learning how to make and I'll try to include them in future courses in this series.",
      "target_audience": [
        "First time game developers, or anyone switching over to the Godot engine from other engines.",
        "Experienced 2D game developers who are interested in learning about 3D.",
        "Anyone who has completed beginner tutorials but would like to learn real game infrastructure that is scalable."
      ]
    },
    {
      "title": "Unreal Engine 5 Blueprint: Rapid Prototyping for Beginners!",
      "url": "https://www.udemy.com/course/unreal-engine-5-blueprint-rapid-prototyping-for-beginners/",
      "bio": "Make your own games from scratch with UE5! Make 3 prototypes, no coding required! Learn Video Game Development",
      "objectives": [
        "Basics of Game Creation within Unreal Engine 5",
        "How to use Blueprint, Unreal Engines Visual Scripting tool to create multiple different games",
        "The basics of debugging and problem solving for Video Game Development",
        "Learn how to use events, move objects and create characters to make differnet mechanics!",
        "Pivotable File Managerment skills",
        "How to naviagate the varied toolset available within Unreal Engine 5",
        "The basics of debugging blueprints within Unreal Engine 5"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "How to use the Udemy Video Editor",
          "*New* How to get lesson support"
        ],
        "Unreal Fundamentals": [
          "How to download Unreal Engine",
          "Editor Tour",
          "What are Classes?",
          "What is Blueprint?",
          "What is a Variable?",
          "What is a Component?",
          "What is an Input Mapping Context?",
          "What is a material?"
        ],
        "Breakout": [
          "Section Overview",
          "Creating the project",
          "Lighting the Arena",
          "Creating a Paddle",
          "Creating a Paddle: Refining (Optional)",
          "Creating a ball",
          "Creating Blocks",
          "Failure State",
          "Win State",
          "Score Counter"
        ],
        "Slot Car Racer": [
          "Section Overview",
          "Creating the project",
          "Creating a track",
          "GameMode and Inputs",
          "Creating a Car",
          "Lap",
          "Car momentum and decelerate",
          "Punishing the player for taking a corner to fast",
          "Adding Multiplayer",
          "Adding Colours",
          "Adding UI",
          "Win Condition"
        ],
        "Rock Paper Scissors": [
          "Section Overview",
          "Creating the project",
          "Base Logic + Base UI",
          "Further UI Elements + Counters",
          "Modifing the CPU's choices",
          "Adding Characters (Animations)"
        ],
        "Extra Content": [
          "Mixamo"
        ]
      },
      "requirements": [
        "A computer powerful enough to run Unreal Engine 5.",
        "Basic Computer Literecy",
        "Zero programming experience required!"
      ],
      "description": "Updated for Unreal Engine 5.4!\nLearn Unreal Engine 5 from scratch by making three different prototype games.\nThis fast-paced course will take you from complete beginner to novice in a fun interactive way! All content within this course has been adapted from my teaching content taught in award-winning academia in England, designed to take anyone who has used a computer to prepare, teach and push them into the world of game development. This fast-paced course will be split into three prototype projects that will teach you the fundamentals and core principles of game design and scripting.\n\n\nBreakout:\nDevelop a simple prototype similar to the classic retro title! You will learn concepts such Level Management, Collision, Cameras and Simple Game Logic. All done within the powerful blueprint scripting language packaged for free within Unreal Engine 5!\nSlot Car Racer:\nRemember playing with slot cars as a child? Maybe you have played a flash version in school? Well, you can make your own! Developing a local multiplayer game that only requires one keyboard! You will learn concepts such as Splines, Input Management, Events, Functions and Game Logic\nRock Paper Scissors:\nThe ultimate decidor! This project might seem like a simple playground game but in fact, it holds a great lesson within some core gameplay pillars that every developer should know! You will learn concepts such as Blueprint Communication, RandomLogic, and Win&FailureStates. We can go even further with this project and turn it into a turn-based battle game!\n\n\nThis course contains recordings from multiple teaching livestreams given.\n\nPlus:\nNew for 2024. Access to new discord community for faster support.\nUnleash your creativity using Unreal Engine, known as the \"Best Game Engine\" by many as well as the Develop Industry Excellence Awards and Game Developer Magazine.\nPowerful and revered, Unreal Engine has played a pivotal role in crafting blockbuster games and iconic franchises, from the vibrant realms of Fortnite to the immersive narratives of BioShock and the gripping action of Gears of War. Its influence extends to a myriad of acclaimed titles, including Splinter Cell, Rainbow Six, Borderlands, Dishonored, Mass Effect, Batman: Arkham Asylum, and countless others.\nGone are the days when Unreal Engine was exclusive to large corporations – now, with the liberating Unreal Engine 5, the game-changer is accessible to all, offering its cutting-edge features for free. Dive into the future of game development, and when your creation soars beyond $1 million in sales, Epic Games merely asks for a 5% share, making your dreams of crafting exceptional games more achievable than ever.\n\n\nFast-paced to give you the information you need now\nWithin 5 hours you will have not just one project, but 3 different unique projects for you to expand upon and make your own! I have spent over a decade using Unreal Engine and have taught the engine in multiple schools and universities across England and Europe! Start off with my 30-minute fundamentals module that takes you through the editor and basic concepts within the Unreal Engine, then learn everything you need to know by... doing it! I will be there every step of the way to guide you through this. You may even get some comments from my own experience making blockbuster videos games!",
      "target_audience": [
        "Complete beginners looking to start their game dev journey",
        "Those who wish to learn the basics of Unreal Engine",
        "Those who wish to know core concepts of game design",
        "Hobbyist Game Developers who want to learn from an active developer",
        "Those who want to have at least three prototypes to expand",
        "Teachers gain new content to teach within their own curriculum"
      ]
    },
    {
      "title": "Creating a Concentration Game Using Unity and C#",
      "url": "https://www.udemy.com/course/creating-a-concentration-game-using-unity/",
      "bio": "Learn Unity C# from 40 year programming veteran creating a Concentration card game in this beginner level course",
      "objectives": [
        "Learn to download, install and configure Unity and Visual Studio",
        "Learn to build a scene using a canvas, panels and objects",
        "Learn to code in C# to control how objects behave",
        "Learn about raycasting and collison detection, one of the most fundamental elements of video game development",
        "Learn to create elements of game UI including game timer, buttons and message display",
        "Learn how to swap graphics for a game object to display playing cards with differnt ranks and suits",
        "Learn how to publish a complete system that can be run outside of Unity and shared with others",
        "Create your very own Concentration card game"
      ],
      "course_content": {
        "Getting Started": [
          "Introduction",
          "Installing Unity",
          "Creating a Project",
          "Unity Editor Configuration"
        ],
        "Creating The Game": [
          "Add a Canvas",
          "Add Game Panel",
          "Download Asset Packages",
          "Asset Packages",
          "Import Asset Packages",
          "Create Playing Cards",
          "Add GameScript Code to Deal Cards",
          "Add CardScript Code to Deal Cards",
          "Add Game Logic to CardScript",
          "Add Game Logic to GameScript",
          "Test Playing a Game"
        ],
        "Creating the User Interface": [
          "Creating UI Elements",
          "Add GameUIScript Timer and Selections Code",
          "Add GameScript Timer and Selections Code",
          "Test Game Timer and Selections Counter",
          "Add GameUIScript Code for New Game and Exit Game Buttons",
          "Add GameScript Code for New Game and Exit Game Buttons",
          "Test New Game and Exit Game Buttons",
          "Add MessageScript Code for Messages",
          "Test Messages"
        ],
        "Creating Dialogs": [
          "Create Dialog Objects",
          "Add Code for Dialog Buttons",
          "Add GameUIScript Dialog Code",
          "Add GameScript Dialog Code",
          "Test Dialogs"
        ],
        "Finishing Up": [
          "Build Application",
          "Conclusion",
          "Project Files"
        ]
      },
      "requirements": [
        "No Unity or programming experience needed. You just follow what the instructor does."
      ],
      "description": "All software and resources used in this course are free.\n\n\nIn this course, you will learn from an instructor with 40 years application development experience how to create a single scene application in the Unity game engine.  You will build the scene starting with a canvas and adding to it panels and objects.  You will learn to write C# code in Visual Studio to control how the objects you create in Unity behave.  When done, you will have your very own, fully featured Concentration card game.  No unity or programming experience needed.  All you need to do is follow what the instructor does.  This is what you will learn in the course.\n- How to download, install and configure Unity and Visual Studio for C#\n- How to use the different panes in the Unity editor\n- How to use the controls in the Scene pane\n- How to create a canvas\n- How to create a panel\n- How to create objects\n- Game Objects\n- Text Mesh Pro objects\n- Image objects\n- Button objects\n- How to import asset packages\n- How to create and use prefabs\n- How to assign objects to public variables\n- How to create and assign scripts to objects\n- How to set script functions to be called when buttons are clicked\n- How to investigate and resolve errors\n- How to test the application throughout the development process\n- How to build the application into a stand alone, executable program\n- How to write C# scripts in Visual Studio\n- Directives\n- Variables\n- Statements\n- Conditional logic (IF...ELSE blocks)\n- Loops (For,  While)\n- Standard functions\n- IEnumerator functions (wait for something to happen)\n- Functions that accept and return values as parameters\n- The Start, Awake and Update functions\n- Nested logic\n- Sharing data between scripts\n- Using raycasting to determine when a user left clicks on an object\n- Swapping game object graphics to present playing cards with different ranks and suits",
      "target_audience": [
        "Anyone curious about the Unity game development engine and how to write programs using C#",
        "Anyone wanting to learn how to create computer games using Unity and C#"
      ]
    },
    {
      "title": "Tic-Tac-Toe Game with AI - The Complete Qt C++ Game Course",
      "url": "https://www.udemy.com/course/tictactoe-game-with-ai-the-complete-qt-c-game-course/",
      "bio": "Learn Game Development step by step by creating a Tic Tac Toe Game with Artificial Intelligence (AI) using C++ and Qt",
      "objectives": [
        "Learn step by step how to plan and create a fully-functional Game",
        "Learn how to use C++ to create a Graphical User Interface (GUI) Application",
        "Learn how to use the Qt framework to create a coherent user interface for a Game",
        "Learn how to implement Game Logic with C++",
        "Get the source code after each section and the overall source code at the end",
        "Learn how to navigate and understand the documentation of the Qt framework",
        "Learn how a TicTacToe Game is implemented with C++ and Qt",
        "Learn how Artificial Intelligence (AI) can be added to the implementation of a Game",
        "Learn how to create a cross-platform game with C++ and Qt"
      ],
      "course_content": {
        "Course Introduction": [
          "Introduction",
          "Course Structure"
        ],
        "Project Setup": [
          "Project Setup"
        ],
        "Creation of the TicTacToe Board": [
          "Creation of a blank Window",
          "The Project File",
          "Creation of the TicTacToe board",
          "Reset of The TicTacToe Board",
          "Source Code"
        ],
        "Handling of Moves on the TicTacToe board": [
          "Creation of the Player",
          "Determination of the Player Move",
          "Handling of the Player Move",
          "Source Code"
        ],
        "Determination of a Game Session Outcome": [
          "Board Decoration",
          "The Type of the Winner",
          "Determination of the Winner - Horizontal check",
          "Minor Code improvements",
          "Determination of the Winner - Vetical check",
          "Determination of the Winner - Back slash diagonal check",
          "Determination of the Winner - Forward slash diagonal check",
          "Determination of the game session outcome - Draw Game check",
          "Source Code"
        ],
        "Handling of the Win or Draw Scenario": [
          "Handling of the Win or Draw scenario",
          "Source Code"
        ],
        "Handling of the End of the Game": [
          "Clearing of the Game Window",
          "Layout for announcing the game session outcome | Part 1",
          "Layout for announcing the game session outcome | Part 2",
          "Source Code"
        ],
        "Handling of the Restart of the Game": [
          "Handling of the restart of the Game",
          "Source Code"
        ],
        "Game Configuration": [
          "Game Configuration Window in Qt Designer",
          "Game Configuration - Mandatory Player Names",
          "Game Configuration - Functions for player names",
          "Game Configuration - Singleton Pattern",
          "Game Configuration - Game Side",
          "Game Configuration - Game Mode",
          "Source Code"
        ],
        "The Main Window": [
          "Creation of the Main Window",
          "Promotion of Widgets and creation of Actions",
          "Enabling of Actions - Start Game & Quit Game",
          "Creation of TicTacToe Boards with Different Sizes",
          "Add-on - Widget Alignment",
          "Mechanism to ensure that the current player name is bold",
          "Mechanism to determine the game outcome message",
          "Bug Fixes",
          "Source Code"
        ]
      },
      "requirements": [
        "A very basic understanding of C++"
      ],
      "description": "This practical course aims at teaching you step by step how to create a game using C++ and Qt. C++ is a very powerful programming language very suitable for making games, whilst Qt is a very large graphical user interface (GUI) framework fully based on C++. In this course you learn how to practically use C++ to create a GUI application and you also learn how to use and get familiar with the very powerful Qt framework.\nThe first aim of the course is to teach you how to plan a game. Essentially, you are going to learn how to turn your game ideas into Game Requirements for your Game application. You also learn how to meticulously organise them so as to be able to implement them incrementally, in a logical manner.\nSecondly, you thoroughly learn about the Qt framework. Essentially, you learn how to navigate the massive documentation of the Qt framework, in order to be able to get the functionality that you need for your Game. Additionally, you learn step by step how to create a beautiful, coherent, and interactive graphical user interface with the Qt framework.\nThirdly, you methodically learn how to implement Game Logic using C++. Essentially, you finally become able to apply the theory of C++ in an actual GUI application, in order to create a very entertaining TicTacToe Game. Quite simply, you learn how to practically use concepts like selection control structures, repetition control structures, functions, pointers, references, classes, objects, lifetime of objects, inheritance, polymorphism, etc.\nFourthly, you learn how to add Artificial Intelligence (AI) to a Game Logic. Essentially, in this course, you learn how to create AI opponents that a human player can play against. You first learn how to create a weak AI opponent that a human player can easily defeat. Then you learn, step by step, thoroughly, how a tough AI opponent can be created, how it can be made to be very smart, and therefore very hard to defeat.\nFinally, you get to have a go at the TicTacToe Game by yourself. Essentially, at the end of the course, you get a couple of Assignments where your tasks are about ameliorating and extending the Game. This is a means for you to test how much you have understood from the course.\nRegarding the course itself, it is structured in a way that one section builds upon the previous ones. So this is essentially to tell you that not every section adds something new in the user interface or in the game logic. The sections are all interconnected, and in order to create the TicTacToe Game exhibited in the introduction video, you will have to go through the entire course, one video after the other.\nI wish you a pleasant time as you navigate through the course.\n\n\nHappy learning,\nAlex",
      "target_audience": [
        "Beginner C++ Programmers who would like to start creating GUI applications using C++",
        "C++ developers interested in learning about Game development",
        "TicTacToe Fans who would like to know how their beloved game is implemented",
        "Students studying Game Development or Game Engineering",
        "Anyone interested in how a game is actually made"
      ]
    },
    {
      "title": "Create a 2.5D survival Metroidvania Game in unity and C#",
      "url": "https://www.udemy.com/course/learn-to-make-a-sound-system-for-your-game/",
      "bio": "Ccreate a 2.5D survival Metroidvania Game in unity and C#",
      "objectives": [
        "C#",
        "sound Setting",
        "Main Menu",
        "Game UI"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "New 3D project and Asset",
          "Importing Charachters",
          "Player Physics",
          "Player Movement",
          "Player Flip",
          "Movement Animation",
          "player jump Script",
          "jump Animation",
          "Camera Follow",
          "Weapon Holder",
          "Weapon",
          "Player Health",
          "14)Enemy Health & weapon damage fixed",
          "Bring Environment to game",
          "Enemy Controller",
          "Enemy Movement",
          "Enemy Death",
          "Enemy Damage",
          "Weapon raycast improved",
          "Muzzle Flash",
          "Zombie death animation improved",
          "Blood effect",
          "Helicopter Flying",
          "Dialog UI",
          "Dialog Manager",
          "Dialog trigger",
          "Quest Item",
          "Ammo",
          "Ammo UI",
          "Pickup items",
          "Fire damage and electricity damage",
          "Explosion Effect",
          "Player Death & Changing Level",
          "Main Menu"
        ]
      },
      "requirements": [
        "no need"
      ],
      "description": "Are you looking for an intermediate Unity course where you will build a small 3d game, from scratch ? In this course we will create a  game with lots of important things that any game should have like, player quest system, animations, , shooting system and enemy AI,making main menu and much  more ..\n\n\nIf you have completed few beginner courses on Unity and c# and you feel comfortable using them together I believe that you will benefit greatly from this course.\nWe will use multiple 2d models, animations and tools which have high quality\nMy hope is that at the end of the course you will have a bigger picture on how to structure the code for your game and make a game for yourself .\nIf you think that you could benefit from this course don't hesitate to purchase it.  Saying that I have really put a lot of effort to make sure that you will benefit from the course and learn some useful techniques from setting up enemy AI and more\nWhat you will learn at the end of this course\n1)make player  from scratch and able to transform it\n2)Player Movement Animations\n3)Pickup Items\n4)Gathering items\n5)Main Menu\n6)Dialog system\n7) Follow Camera\n8) quest system\n9)and more",
      "target_audience": [
        "Everyone"
      ]
    },
    {
      "title": "UNITY 6: Way To Create Hyper Casual Game",
      "url": "https://www.udemy.com/course/unity-6-way-to-create-hyper-casual-game/",
      "bio": "A Journey Through Coding, Character Animation, And Game Optimization",
      "objectives": [
        "Master the full game creation cycle—from idea to app store publishing.",
        "Learn to program in C# and create gameplay mechanics and control systems.",
        "Master trending graphics – learn how to work with low-poly models",
        "Add sounds and animations to make the game feel alive and responsive to the player.",
        "Optimize your game and prepare it for launch on any smartphone."
      ],
      "course_content": {
        "Getting Started with Unity 6": [
          "Download Unity 6 + Working with the Interface",
          "Mechanics of Movement",
          "Creating gate mechanics"
        ],
        "Visualization || Great Mechanics": [
          "Importing Main Assets to the Scene",
          "Player Duplication Mechanics + Sorting",
          "Shooting Mechanics + Enemy Creation",
          "Health Mechanics for Enemies",
          "Weapon Swap Mechanics + ScriptableObject (SO)",
          "Decor Animation + Running Animation with Different Weapons",
          "Advanced Health System"
        ],
        "More Advanced Mechanics": [
          "Particles + Import Sprites",
          "Cinemachine + Fix Bugs",
          "ObjectPool Pattern",
          "Enemy Spawn Mechanics + Making the Level Larger",
          "\"Checking the Distance from a Group of Players to a Wall\" Mechanic"
        ],
        "Final Improvements": [
          "Creating the Entire UI",
          "PlayerPrefs + Working Kill and Health Counter + Bug Fixes",
          "Creating an AudioManager to Play Sound Effects",
          "Importing DOTween",
          "Camera Occlusion + Visual for the Main Menu + Bug Fixes"
        ],
        "Course Summary": [
          "Summary + My Further Recommendations"
        ]
      },
      "requirements": [
        "No beginner level required – the course is suitable for beginners.",
        "No programming skills required ;)",
        "A computer is all you need :).",
        "You'll learn everything you need step by step, right during the course."
      ],
      "description": "This course will guide you step by step, from your first line of code to publishing a finished project. You won't just master Unity 6 tools; you'll create a fully-fledged game worthy of a portfolio.\n\n\nWe'll start with the basics and gradually move on to professional techniques:\nGame Mechanics and Gameplay: Master the creation of engaging gameplay loops that keep players engaged. We'll explore a popular mechanic—the runner—and implement it from scratch.\nC# for Hyper-Casual Games: Learn to write neat and efficient code for controls, game states, progression, and physics. No prior programming knowledge is required.\nUI/UX for Player Retention: We'll design user-friendly interfaces, tutorial elements, and reward systems that make the game as engaging as possible.\nNew Features in Unity 6: Explore the latest engine tools that will help speed up development and improve project quality.\n\n\nThanks to our practical approach, you'll be able to confidently create your own projects or apply for a position as a junior mobile developer.\nThe course curriculum takes into account current trends and practices for 2025. All materials are presented clearly and concisely—only useful methods and real results.\n\n\nWant to improve your skills and reach the next level? Then let's get started with the first lesson!",
      "target_audience": [
        "New to Unity: Want to learn the engine hands-on by creating a real project, not boring tutorials.",
        "Entrepreneur: Looking for an opportunity to launch your product in the hottest mobile niche with potential for profit.",
        "Designer or Artist: Want to bring your ideas and assets to life by turning them into a working game."
      ]
    },
    {
      "title": "Unity 2D Platformer Game Development",
      "url": "https://www.udemy.com/course/unity-2017-new-2d-tools-and-game-development-workflow/",
      "bio": "Learn to build a full 2D game level hands-on in Unity with tools like Tilemap and Cinemachine",
      "objectives": [
        "Have hands on experience building a 2d game level.",
        "Have an understanding of Unity 2017’s new Tilemap and Timeline Editor tools.",
        "Be able to program 2d character movement, AI enemies, and environment scripting such as moving platforms."
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Course Overview"
        ],
        "Tilemap Tool": [
          "Section Introduction",
          "Sprites",
          "Project Setup",
          "Tiles",
          "Tilemaps",
          "Palettes",
          "Physics",
          "Assembling Our Level",
          "Adding Lava",
          "Assembling Background Graphics",
          "Creating a Game State Script",
          "Section Summary",
          "Tilemap Tool Quiz"
        ],
        "Animation and Timeline Editor Tools": [
          "Section Introduction",
          "Animation Window",
          "Animating Player Run",
          "Animating Player Jump",
          "Animator Window",
          "Setup the Player Controller",
          "Scripting Player Movement, Part 1",
          "Scripting Player Movement, Part 2",
          "Scripting Camera Movement",
          "Animated Platforms",
          "Animating Enemy Movement",
          "Scripting Enemy States",
          "Animating Coins",
          "Lava Splash Animation",
          "Timeline Editor",
          "Creating An Animated Cutscene",
          "Section Summary",
          "Animation and Timeline Editor Tool Quiz"
        ],
        "Unity's UI Tools": [
          "Section Introduction",
          "Creating a Splash Screen",
          "Game Over Modal",
          "You Win Modal",
          "Adding a door to our level",
          "Displaying Lives on Screen",
          "Displaying Coin Count on Screen",
          "Section Summary",
          "Unity's UI Tools Quiz"
        ],
        "Course Summary and Wrap-Up": [
          "Final Game Level",
          "Course Summary",
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "Basic Unity knowledge"
      ],
      "description": "This course teaches the new 2d tools and features of Unity 2017, including the Tilemap and Timeline Editor tools. These features are completely new to Unity and allow developers to develop 2d games quicker and more effectively. This course is geared towards beginners but is a great choice for any Unity developer looking to learn how to use Unity’s latest tools and features.\nThe Tilemap Tool allows users to paint sprites onto a grid to facilitate rapid and more precise prototyping and 2d level design. The Timeline Editor, powered by cinemachine, allows developers and animators to easily coordinate complex cutscenes by providing one timeline that can visually layout the animations of several game objects at once.\nIn this course, we will use these two core features of Unity 2017 to build a 2d platformer game level. We will build a splash screen, animated cutscene, playable third person character, artificially intelligent enemies, in-game collectibles, and a 2d level. By the end of this course you will have hands-on experience implementing all of these game features using Unity’s latest 2d tools.\nThe full project made in this course is attached as a resource to the course. So if you get stuck for any reason, you have both the full project as well as myself that you can reach out to for help!",
      "target_audience": [
        "Any Unity developer looking to learn how to use the new Unity 2017 tools for 2d game development.",
        "Anyone looking to speed up their 2d game design workflow in Unity.",
        "Beginners who want to learn how to build a 2d platformer game from start to finish."
      ]
    },
    {
      "title": "Unreal Engine: Cliff and Rock Shader with Tileable Textures",
      "url": "https://www.udemy.com/course/unreal-engine-cliff-and-rock-shader-with-tileable-textures/",
      "bio": "Create a game ready Rock and Cliff Shader in Unreal Engine using Tileable Textures and Masks",
      "objectives": [
        "Setting up base materials in Unreal Engine with Object Scaling",
        "Use tileable textures for large scale assets",
        "Blending between multiple materials using masks",
        "Practical use of Material Functions inside of Unreal",
        "Creating and packing masks in Substance Painter",
        "Setting up a flexible and user-friendly shader"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Overview of the project"
        ],
        "Project Set-up": [
          "Project Set-up and Base Material",
          "Setting up the Normal Map"
        ],
        "Setting up Masking Functions": [
          "Mask Set-up",
          "Blending Materials",
          "Mask Blending and Dirt Material",
          "Dirt Blend",
          "Top Down Blending"
        ],
        "Finishing up the shader, making refinements and building rock formations": [
          "Finishing the Shader",
          "Refining the Blend Mask in Substance Painter",
          "Finishing the Mask and creating Rock Formations"
        ]
      },
      "requirements": [
        "This tutorial can be used at any skill level, but assumes a basic understanding of 3D content creation and how to navigate software. The techniques discussed in this tutorial are used in many studios throughout the games industry and can be useful at any skill level."
      ],
      "description": "Learn how to create a game-ready shader for use with rock meshes inside of Unreal Engine. With a full breakdown and follow-along style tutorial, create your own shader to use in games and personal projects. Follow along in real-time with full explanations to help understand how the shader is being put together. This tutorial is created using Unreal 4.27, but all information is still applicable for use in Unreal Engine 5.\n\nSkill Level:\nThis tutorial can be used at any skill level, but assumes a basic understanding of 3D content creation and how to navigate software. The techniques discussed in this tutorial are used in many studios throughout the games industry and can be useful at any skill level.\n\n\nThis tutorial covers:\n- Setting up base materials in Unreal Engine\n- Object scaling\n- How to use tileable textures for large assets\n- Blending between multiple materials using masks\n- Setting up a flexible and user-friendly shader\n- Practical use of Material Functions inside of Unreal\n- Creating and packing masks in Substance Painter\n\n\nSoftware used:\n- Unreal Engine 4 (4.27)\n- Photoshop\n- Substance Painter\n- Quixel Bridge\n\n\n(Although the software above in some cases requires purchasing, all the instructions in this video can be achieved with free software. Channel packing (in Photoshop and Substance Painter can be achieved with gimp and Quixel bridge, and asset masking can be created with Quixel Mixer)",
      "target_audience": [
        "Beginner and Intermediate games developers looking to set up efficient and performant shaders for their Unreal Engine project"
      ]
    },
    {
      "title": "Creating a Breakout Game Using Unity and C#",
      "url": "https://www.udemy.com/course/creating-a-breakout-game-using-unity-and-c-sharp/",
      "bio": "Learn how to create a complete Breakout arcade game in Unity from a 40 year programming veteran",
      "objectives": [
        "How to create a complete Breakout game in Unity",
        "How to create and use colliders in Unity",
        "How to create and use a rigidbody in Unity",
        "How to add a physics material to an object's rigidbody to make it bounce off other objects",
        "How to give an object a constant velocity",
        "How to make objects disappear when hit",
        "How to add walls to an arcade game",
        "How to detect when an object collides with another object and determine what type of object it collided with",
        "How to add You Win, Game Over and Exit Game dialogs to a game"
      ],
      "course_content": {
        "Getting Started": [
          "Introduction",
          "Create a Unity Project"
        ],
        "Create the Game": [
          "Create Paddle",
          "Add Movement to the Paddle",
          "Restrict Paddle Movement",
          "Create the Ball - CHALLENGE",
          "Give the Ball a Constant Velocity",
          "Resetting the Ball",
          "Allow Player to Reset the Ball",
          "Create the Walls",
          "Create Bricks",
          "Draw Bricks - Variables",
          "Draw Bricks - Code",
          "Make Bricks Disappear When Hit"
        ],
        "Create the User Interface": [
          "Add Score Display",
          "Add Lives",
          "Add Score and LIves - Variables",
          "Add Score and LIves - Code",
          "Add You Win Dialog",
          "Add You Win Dialog - Variables",
          "Add UnhideBricks Function",
          "Add Restart Function",
          "Add Code to Trigger the You Win Panel",
          "Add Game Over Dialog - CHALLENGE",
          "Add Exit Game Panel",
          "Add Exit Game Code"
        ],
        "Wrapping Up": [
          "Conclusion",
          "Project Files"
        ]
      },
      "requirements": [
        "No Unity or programming experience needed. You just follow what the instructor does"
      ],
      "description": "All software and resources used in this course are free.\n\n\nIn this course, you will learn how to create a complete Breakout game in Unity from an instructor with 40 years application development experience.  No unity or programming experience needed.  All you need to do is follow what the instructor does.  This is what you will learn in the course.\n- How to create a Unity project\n- How to change the layout of the panes in the Unity editor\n- How to create the paddle, ball and bricks in a Breakout game\n- How to add a rigidbody to an object\n- How to turn off the gravity in an object's rigidbody and give the object a constant velocity\n- How to add a physics material to a rigidbody and configure the physics material to make the object  bounce off other objects\n- How to detect when an object has collided with another object and determine what type of object it has collided with\n- How to add walls for the ball to bounce off of\n- How to determine when the game is won\n- How to determine when the game is lost\n- How to create You Win, Game Over and Exit Game dialogs\n- How to test a game throughout the development process\n- How to investigate and correct errors",
      "target_audience": [
        "Anyone who wants to learn how to create a complete Breakout game in Unity",
        "Anyone who wants to learn the basics of creating an arcade game in Unity"
      ]
    },
    {
      "title": "Making VideoGames in Godot 4: Contra",
      "url": "https://www.udemy.com/course/making-videogames-in-godot-4-contra/",
      "bio": "Making VideoGames in Godot 4: Contra",
      "objectives": [
        "How to create VideoGames in Godot Engine 4",
        "Recreate a Video Game Classic",
        "How to Create Your Own Platform Game",
        "How to Use Godot Engine 4",
        "Programming Scripts in Godot 4 (GDScript Language)",
        "Manipulate Different and Typical Algorithms for Video Game Development"
      ],
      "course_content": {
        "Course": [
          "Setup & Resources",
          "Nodes",
          "Unpacking Resources",
          "Sprites",
          "Hierarchies",
          "Camera",
          "Spritesheets",
          "Physic Bodies",
          "Colision Shape",
          "Character Script",
          "Animations",
          "State Machine",
          "Aiming Animations",
          "Swiming Animation",
          "Water & Platforms",
          "Polish & Debugging Phase",
          "Shot Action",
          "Bullet Directions",
          "Power Up Container",
          "Power Ups & Bullets",
          "Laser Weapon",
          "Connecting Weapons & Power Up Behaviours",
          "Power Up Machine",
          "Base Enemy",
          "Death State",
          "Respawn",
          "Player 2",
          "Players & Camera",
          "Bridge",
          "Turret",
          "Boss",
          "UI (User Interface)",
          "Main Menu",
          "Sounds & Final Project"
        ]
      },
      "requirements": [
        "A Computer"
      ],
      "description": "In this course we teach how to use Godot 4 to create free video games, in a simple way and explained without unnecessary technicalities, seeking the best possible results through experience.\n\n\nOn this occasion, recreating the Contra game, we will learn the basic fundamentals that will allow us to design a platform game (even for 2 players), both basic and complex, understanding the fundamental characteristics to carry it out.\n\n\nWe also recreate the different actors from the first level of the game, as well as the scene in its entirety, including the explosion of the bridge.\n\n\nFundamentals of the Godot interface, logic and algorithms are exhibited before different aspects of platform video games, and management of the GDScript language.\n\n\nWith this knowledge you will be able to create the other levels and also most of the 2D platform videogames that you know.\n\nThat's why is so important to learn how to create videogames, creating a classic. Because classic and older videogames, has a lot of features and mechanics. Modern-day games are based on different mechanics from old videogames. Some games, with a simple twist to this type of mechanics, manage to become a success. Thousands have been born from this classic video game, so it is a great starting point for success.",
      "target_audience": [
        "Who wants to learn how to create a classic video game"
      ]
    },
    {
      "title": "Animations In Unity using Unity Timeline",
      "url": "https://www.udemy.com/course/animations-in-unity-using-unity-timeline/",
      "bio": "Learn Professional Cutscene Animations With Timeline Unity 3d",
      "objectives": [],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Setting Up Project": [
          "Downloading And Installing Unity",
          "Setting Up Project Importing Assets"
        ],
        "Timeline": [
          "Activation Track Basics",
          "Activation Track Practical",
          "Animation Track",
          "Audio Track",
          "Signal Track"
        ]
      },
      "requirements": [
        "You will be downloading the free version of Unity in the course and free 3D characters from Mixamo",
        "Ensure your computer (PC, Mac) has the minimum specifications to run Unity 2019",
        "Basic Unity Interface Knowledge"
      ],
      "description": "Build professional animations in unity in minutes. no more waiting for hours or even days to render out that 30 second animation!\nI will be showing you step by step how to use the Unity 3D engine to achieve the following:\nImport free 3D characters and props from the Unity asset store\nImport 3d realistic environment\nBring characters to unity from mixamo\nLearn about activation track in timeline unity\nLearn about animation track in timeline unity\nLearn about audio track in timeline unity\nLearn about signal track in timeline unity\nAnimate a 20 second sequence using the Timeline, which doesn't require any coding whatsoever!!\nI will show you how to cut between cameras to switch shots\n\n\nYou will develop the skills in this series which will allow you to go on to create your own 3D animated movies in Unity and export them as videos to share online.\nIt is also useful for people wanting to learn how to create animated cut scenes for games (But remember, this is not a game design course, it focuses only on animation)\nSo, if you want to be an unity animator, enroll today and I look forward to seeing you in the course\nLearn 3d animations and cutscenes in unity using timeline. we will learn Activation Track, Animation Track, Audio Track, Signal Track in unity timeline as well.",
      "target_audience": [
        "This course will help 3D animators using a small project in Unity 3D",
        "I will be covering everything in comprehensive detail, step by step, to help you to learn",
        "Unity developers who want to accelerate in unity animations and cutscenes"
      ]
    },
    {
      "title": "Make 4 Mobile Game with Playmaker in Unity with ads",
      "url": "https://www.udemy.com/course/make-4-mobile-game-with-playmaker-in-unity-with-ads/",
      "bio": "Create 4 mobile games in with Playmaker",
      "objectives": [
        "How to build a game from start to finish aimed at mobile devices",
        "How to include and set up ads in your game",
        "How to publish your game on an app store Such as the Google Play Store",
        "How to fix bugs which may occur when creating a game"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Important! Watch this first.": [
          "Important About Unity Ads",
          "IMPORTANT Unity Ads in 2024"
        ],
        "Game 1 Brick Break / Break Out": [
          "Lesson 1 Player Movement",
          "Lesson 2 Ball Movement",
          "Lesson 3 Blocks",
          "Lesson 4 Death Zone",
          "Lesson 5 UI",
          "Lesson 6 UI Hook Up",
          "Lesson 7 Player Lives",
          "Lesson 8 Lives UI",
          "Lesson 9 Parent & Child Objects",
          "Lesson 10 Building The Level",
          "Lesson 11 Customization",
          "Lesson 12 Unlocking Levels",
          "Lesson 13 Touch Input",
          "Lesson 14 Possible Issue with first ball parent",
          "Lesson 15 Sound & Vibration",
          "Lesson 16 Level Select",
          "Lesson 17 Sound Control UI Part 1",
          "Lesson 18 Sound Control UI part2",
          "Fixing Ball Parent Issue",
          "Lesson 19 Level Select Hook Up and Sound Settings Adjustments",
          "Lesson 20 Title Screen, Saving & Loading",
          "Lesson 21 Adding Levels locking and Unlocking them",
          "Lesson 22 Ads(Outdated Watch Unity Ads 2024(Lecture 98))",
          "Lesson 23 Loose Ends",
          "Lesson 24 Building your game",
          "Lesson 26 Things We Missed",
          "Lesson 27 Giving Credit",
          "Project"
        ],
        "Game 2 Doodle Jump": [
          "Game Introduction",
          "Lesson 1 Player Jumping",
          "Lesson 2 Player Movement",
          "Lesson 3 Passing Through Platforms",
          "Lesson 4 Animation",
          "Lesson 5 Teleporting",
          "Lesson 6 Death Zone",
          "Lesson 7 Spawning Platforms",
          "Lesson 8 Camera Movement",
          "Lesson 9 Background",
          "Lesson 10 Different Platforms",
          "Lesson 11 Spawning Different Platforms",
          "Lesson 12 Points and Clean Up",
          "Lesson 13 Score UI",
          "Lesson 14 Game Over UI",
          "Lesson 15 Start Screen UI",
          "Lesson 16 High Scores",
          "Lesson 17 Saving & Loading",
          "Lesson 18 Gyro Controls",
          "Lesson 19 Sounds Part 1",
          "Lesson 20 Sounds Part 2",
          "Lesson 21 Ads(Outdated Watch Unity Ads 2024(Lecture 98))",
          "Lesson 22 Building the Game (Apk)",
          "Project",
          "Extra Lesson 1"
        ],
        "Game 3 Duck Shoot Gallery": [
          "Lesson 1 Background",
          "Lesson 2 Player Movement",
          "Lesson 3 Foreground",
          "Lesson 4 Water Animation",
          "Lesson 5 First Target",
          "Lesson 6 Shooting",
          "Lesson 7 Target Damage",
          "Lesson 8 Creating More Targets",
          "Lesson 9 Spawner Part 1",
          "Lesson 10 Spawner Part 2",
          "Lesson 11 Score UI",
          "Lesson 12 Ammo UI & Reloading",
          "Lesson 13 Timer UI",
          "Lesson 14 Time Up UI",
          "Lesson 15 High Scores",
          "Lesson 16 Start UI",
          "Lesson 17 Fixes",
          "Lesson 18 Saving & Loading",
          "Lesson 19 Sound",
          "Lesson 20 Shoot Button",
          "Lesson 21 Gyro Aiming",
          "Lesson 22 Ads(Outdated Watch Unity Ads 2024(Lecture 98))",
          "Lesson 23 Building The Game",
          "Project",
          "Extra Lesson: Touch Controls"
        ],
        "Game 4 Rolling Maze": [
          "Lesson 1 Player Movement",
          "Lesson 2 Adding Walls",
          "Lesson 3 Building The Maze",
          "Lesson 4 keys Pick-Up",
          "Lesson 5 Locked Door",
          "Lesson 6 Creating The Goal",
          "Lesson 7 Main UI",
          "Lesson 8 Pause UI",
          "Lesson 9 Level Complete UI & Fastest Time",
          "Lesson 10 Menu UI",
          "Lesson 11 Sounds Part 1",
          "Lesson 12 Sounds Part 2",
          "Lesson 13 Adding Maze 2 & 3",
          "Lesson 14 Title UI & Loading",
          "Lesson 15 Gyro Controls",
          "Lesson 16 Touch Screen Controls",
          "Lesson 17 Ads(Outdated Watch Unity Ads 2024(Lecture 98))",
          "Lesson 18 Building The Game"
        ],
        "Course Updates": [
          "Updating Unity Ads",
          "Unity Ads 2024 With IronSource (Level play) Recommended method"
        ],
        "Building and Publishing to Google Play Store": [
          "Lesson 1 Building an aab (Android App Bundle)",
          "Uploading to Google Play"
        ],
        "The End!": [
          "The End"
        ]
      },
      "requirements": [
        "None, you can be a complete beginner to making games and you will be able to follow this course"
      ],
      "description": "In this course we will create 4 different mobile games in Unity using the Playmaker visual scripting add-on.\nYou will learn to make these 4 games:\nBreak-Out\nDoodle Jump\nDuck Shoot\nRolling Maze\n\n\nWe will also add ads in to each game so you can earn a small amount of ad revenue from your games.\n\n\nWe will look at things such as how to use touch screen controls, gyro controls so you can tilt the phone to move the player.\n\n\nHow to use different types of ads such as banner ads which will show to the player.\n\n\nWe will look at how to add eco system to playmaker so we can add custom actions to playmaker such as support for Text Mesh Pro so our scores will show up nice and clear.\n\n\nWe will look at how to save and load our high scores so the player as something to aim to beat each time they play. We will also look at how to save and load levels which have been unlocked so the player can resume playing from the last level they unlocked.\n\n\nAt the end of the course you will learn how to build your games as tab or Android App Bundles and how to upload your game to the Google Play Store so people from around the world can play your games.",
      "target_audience": [
        "Unity users who want to learn how to use Playmaker"
      ]
    },
    {
      "title": "Godot 4: Introduction to 2D Game Development",
      "url": "https://www.udemy.com/course/godot-4-introduction-to-2d-game-development/",
      "bio": "Learn programming and software engineering principals through developing a 2D game in Godot 4",
      "objectives": [
        "Fundamental Godot concepts, such as Nodes, Scenes, and Resources",
        "Basics of Godot's programming language, GDScript",
        "How to create a project in Godot 4",
        "How to debug in Godot to solve complex, unexpected behavior",
        "How to use Godot's UI system to build customized user interfaces",
        "How to build the complete game to an executable file"
      ],
      "course_content": {
        "Getting Godot and Setting Up Our Project": [
          "Download Godot",
          "Creating your first project",
          "Getting familiar with the Godot Editor",
          "Introduction to GDScript best practices and style guide",
          "Style Guide Quiz",
          "(Optional) Working with Source Control",
          "Creating our game project",
          "(Optional) Creating your first commit"
        ],
        "Building Our Game": [
          "Introduction to Project Settings",
          "Creating our game scene",
          "Introduction to Nodes and Scenes",
          "Adding a camera",
          "Creating the paddle",
          "Creating our first script",
          "Getting input and programming our paddle",
          "Creating the ball",
          "Creating the paddle-bounce logic",
          "Adding edges to the game and introduction to debugging",
          "Programming the paddle AI",
          "Integrating the AI behavior through custom signals",
          "Refactoring our AI paddle code",
          "Integrating our ball and paddles into a level manager",
          "Adding reset match logic to our level manager",
          "Creating our score manager and tracking scores",
          "(Optional) Commiting and pushing your work to GitHub",
          "(Optional) Creating and merging your first pull request"
        ],
        "Adding a User Interface (UI)": [
          "Creating our in-game UI",
          "Drawing the midline",
          "Connecting our in-game UI with our score manager",
          "Improving our text with a custom font",
          "(Optional) Commiting the UI and font files",
          "Creating the main menu",
          "Styling our game through a custom theme"
        ],
        "Polish": [
          "AI polish - making our AI beatable through random number generation",
          "Saving and loading player high scores with a save and load manager",
          "Integrating our save and load manager with our high score manager",
          "Displaying high scores on the main menu",
          "Creating the pause manager",
          "Creating the pause menu"
        ],
        "Exporting to an Executable and Conclusion": [
          "Building our complete game to an executable",
          "Conclusion - thank you for watching"
        ]
      },
      "requirements": [
        "No prior experience with programming or Godot is required.",
        "A Windows or Linux machine to develop on. While most of this should work on Mac as well, I have not been able to test on it."
      ],
      "description": "This course will teach everything you need to build a complete 2D game in Godot 4! We start from the very basics, downloading Godot 4 and program every single line together until building the game out to a .exe file. Some of the topics we will cover are:\nWorking with player input\nWorking across multiple scenes\nSignals and subscribers\nCreating and customizing the user interface\nSaving and loading\nDebugging\n& more\nThe goal of this course is to familiarize yourself with the complete game development workflow through Godot. By the end of this course you should have a functional proficiency with GDScript and basic software engineering principals. You will be able to improve upon the game you have built in this course, build your own games, or even take your new skill set to other game engines or software projects entirely.\nThis course is ideal for you if you are looking to get into programming or game development. 2D games are a critical introduction to game development, even if you are looking to get into 3D game development. While this course was recorded on Windows, these processes are identical on Linux as well.\nThis course is action oriented and focused on the process of creating a classic 2D game from start to finish. While the game allows us to cover a wide range of topics in Godot, we do not cover things such as networked multiplayer, 3D, art and animations, etc. Please review the course content to see if the course would be helpful for you.\nThere are several lessons that are available for preview here on Udemy, please check them out ahead of time to see if my teaching style or the content of the course is right for you!",
      "target_audience": [
        "Beginners new to Godot or to programming",
        "People interested in game development, whether they want to build their own games or just to learn how games are built"
      ]
    },
    {
      "title": "Learn Basics of Unity & C# in 8h",
      "url": "https://www.udemy.com/course/freelancewithunity/",
      "bio": "Learn C# Scripting for Unity Game Development from Absolute Basics, Create your own 3D & 2D Games With Unity using C#",
      "objectives": [
        "Build Real 2D & 3D Example Games With C# & Unity",
        "Build A Mobile Game To A Client On \"Fiverr\"",
        "Use C# Skills for Building Mobile / Android Games",
        "Learn C# Scripting With Practical Examples in Unity",
        "Get A Solid Understanding of C# & Basic Programming Concepts"
      ],
      "course_content": {
        "Introduction": [
          "Section 1 Sammary",
          "How to install Unity 2019.3 And Visual Studio 2017 ?",
          "what is Level design 2D & rigidbody 2D & Colliders 2D ?",
          "What is function awake start update and how to make Freeze rotation mvt?",
          "what is private public functions and how to make Rotations ?",
          "How to flip the player and make Enemy Translating and what is circle collider ?",
          "How to jump and make the player mouve",
          "Tilemap ? What is it for ?",
          "How to shoot ?",
          "How to animate in 2D ?",
          "How to make bullets and how to Fire ?",
          "How to make Fire rate (Fire Speed) ?",
          "How to make the enemy Shoot?",
          "How to make Damage and Health (HP) ? Part1",
          "How to make Damage and Health (HP) ? Part2",
          "How to make Damage and Health (HP) ? Part3",
          "How to make Damage and Health (HP) ? Part4",
          "How to make floating 3D object ?",
          "What is the \"Instance\" for ?"
        ],
        "Make a 2D game from scratch": [
          "Section 2 Sammary",
          "Create Animation and rigidbody introduction",
          "introduction (Convert Sprites 2D and Multiple)",
          "JUMP",
          "damage and HP",
          "Obtacles",
          "Ground intantiating",
          "BG colors and mvt",
          "Three Grounds prefabs",
          "TreesSpawning",
          "Dead Zones",
          "after loose Panel",
          "make IEnumerator function",
          "add Random loose sounds and restart the scene",
          "add Other enemy (Green drake)",
          "Add Spawner Point",
          "Change Player animation and add multiple obtacles",
          "Spawn Obtacles",
          "Health and score system",
          "highest score",
          "Adding wing hit and spawn sounds",
          "Pre Last Episode",
          "Last Episode"
        ]
      },
      "requirements": [
        "Unity 2019.3 or higher",
        "Visual studio community 2017 or higher"
      ],
      "description": "Unity C# Scripting Course Overview\nThe Course Divided in two Sections, the first section is to learn the unity basics in around 4 hours and the Section two is a Fiverr project I created and shared with you In, the Client was so happy with the game, I hope after watching this tutorial you will make simple and amazing games to satisfy your needs. The game showcased here took me just 4 hours to develop from scratch using Unity and C#. Below is the full outline of the course I designed to teach others how to do the same — step by step.\nWhat You’ll Learn:\nLearn C# from the ground up — no experience required\nUnderstand core programming concepts\nBuild reusable C# scripts\nCreate fully functional Android/mobile games in Unity\nLearn how to apply C# skills within real Unity projects\nWhy This Course?\nWith over 23,000 students on Udemy, I’ve taught C# scripting in Unity in the simplest, clearest way possible. Even if you’ve never coded before, I will guide you from the basics to advanced Unity scripting — all in the right order.\nYou’ll start by installing Unity and Visual Studio, then move through hands-on lessons, real scripts, and finally build your own Unity games.\nCourse Highlights:\n30+ lectures, 4+ hours of detailed content\nBuild solid foundations in C# and Unity\nWork on real example games\nLearn how to build Android games\nStep-by-step guidance with working files\nCertificate of completion included\nWho Is This For?\nBeginners new to Unity or programming\nC# learners wanting to apply skills to games\nDevelopers from other languages exploring Unity\nAnyone curious about 2D game development",
      "target_audience": [
        "Beginners with 0 experience on Unity and C#"
      ]
    },
    {
      "title": "Learn Mobile Game Design From Scratch",
      "url": "https://www.udemy.com/course/learn-mobile-game-design-from-scratch/",
      "bio": "I will explain how you can design popular Mobile and Hypercasual games and become a Game Designer in this field.",
      "objectives": [
        "Learn to Be a Mobile Game Designer",
        "Learn Basic Game Development Terms",
        "Learn to Create Game Design Documentation",
        "Learn Apps That Can Help You When Designing Games",
        "Master Digital Marketing Terms such as CPI, CTR, Retention etc...",
        "Learn How to Research Ideas for Hypercasual Games",
        "Explore Your Job Options as a Game Designer",
        "Start Building Your Portfolio"
      ],
      "course_content": {
        "Introduction To Basics": [
          "Introduction To Everything",
          "Disclaimer",
          "What Game Designers Do And What Are Their Fields of Work",
          "How Things Work in Mobile Games",
          "Basic Game Development Terms And Definitions",
          "Introduction to Mobile Game Types such as Casual / Hyper-casual and so on",
          "Game Core Loop",
          "Popular Mobile Game Mechanics Over Years"
        ],
        "Generating and Documenting Ideas": [
          "Where To Find New Game Ideas",
          "Where To Find Hyper-casual Game Ideas",
          "What is A Game Design Document (GDD)",
          "Making A GDD For Hyper-casual Games"
        ],
        "Mobile Marketing Terms": [
          "Introduction To Digital Marketing",
          "CPI",
          "Retention",
          "CTR",
          "LTV"
        ],
        "Developing Your Skills": [
          "Explore Job Options",
          "Preparing Your Portfolio"
        ],
        "Mobile Game Designer's Toolkit": [
          "Sites and Applications That Can Help You While Designing Games",
          "Meet Miro",
          "Meet Milanote",
          "Some Applications Used by Gaming Companies"
        ]
      },
      "requirements": [
        "Anyone who wants to become a mobile game designer can benefit from this course.",
        "The person taking the course needs to know English",
        "No computer software or programming knowledge is required for the course, but it is recommended to have a phone to test mobile games.",
        "It's a big advantage if you have an interest in designing mobile games."
      ],
      "description": "Today, there are hundreds of thousands of Mobile Games, and with that comes new job opportunities in the Gaming Industry!\nIn this course, each video of which is carefully and concisely designed, I will teach you the Design of Mobile Games, which is very popular in the game industry, and all the information necessary to be able to do this profession.\nThis way, you can start Becoming a Mobile Game Designer with Zero knowledge. And you can discover different information that you can't see everywhere, which is not easy to find! In addition, I will tell you about my own experiences that I gained during the years I worked, and I will try to show you the tricks of the work.\nGame Designer job postings can be found around the world. Although it is not preferred as a software developer, many companies need Game Designers to make quality games. Because the game designer is the person who determines the theme, chapters, story, interaction with the environment and gameplay systems of a game. Of course, everyone can do these things, but not everyone can do it expertly. Because, just like other major branches of game development, Game Designer has its own professional field.\nIn this course, you will learn where and how you can enter this field and what you need to know.\nIf you want to ask questions, you can always contact me.\n\n\nWith this course\nRequirements to be a Mobile Game Designer\nWhere and how you can find ideas while searching for Mobile Games\nFrequently used terms for mobile games such as CPI, CTR, Retention\nApplications used by game designers\nYou Will Build Your Portfolio\nAnd many more, discover extra resources and references.\nLet's start being a Mobile Game Designer!",
      "target_audience": [
        "Anyone who wants to be a mobile game designer.",
        "Anyone who wants to learn about the Mobile game industry from scratch"
      ]
    },
    {
      "title": "Create Horror Survival Game In Unity & C# Part2(Craft/Quest)",
      "url": "https://www.udemy.com/course/create-horror-survival-game-in-unity-c-part-2/",
      "bio": "Create Horror Survival Game In Unity & C# Part 2(Craft/Quest)",
      "objectives": [
        "progarmming with C#",
        "work with unity",
        "design in 3D",
        "Create a full game"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Puzzle Missions": [
          "Keypad UI and game Asset",
          "Keypad Script",
          "Door Animation",
          "Door Script",
          "Normal Door",
          "Hint info about a door code with a paper",
          "Generator",
          "TV",
          "Pipe open",
          "Scare moment in game",
          "Flash Light"
        ],
        "Crafting System": [
          "Crafting UI",
          "Crafting Scriptable Object",
          "Crafting Script Part 1",
          "Crafting Script Part 2",
          "Crafting Script Open/Close Craft Panel"
        ],
        "Enemy": [
          "Raycast Hit",
          "Enemy Scipt",
          "Navmesh",
          "Enemy Walking Around",
          "Enemy Fleeing",
          "Enemy Take Damage",
          "Player Take Damage",
          "Enemy Animations",
          "Enem Attack Animation fixed",
          "27)Blood Hit Effect",
          "Hurt & Death Animation",
          "29)Muzzle flash Light"
        ]
      },
      "requirements": [
        "Have a PC or Mac"
      ],
      "description": "Learn how to create and program your very own 3D Platformer game using Unity, an industry-standard game development program used by many large gaming studios and indie developers across the world.\nIn this course you won’t just be learning programming concepts, but tying these concepts to real game development uses.\nThis course has been designed to be easily understandable to everyone, so whether you’re a complete beginner, Or expand their game development range or a programmer interested in understanding game design, this course will help you gain a greater understanding of development.\n\nAt the end of this course you will have developed the ability to create such game elements as:\n\n\n\n\nFull 3D Character Movement\nUnity Installation and setup\nphysics\ncamera\nComplete Health System\nPlayer Attack system\nPlayer diffrent Weapon\nCamera Look System\nPlayer Jump\nScripting,Scripting and Scripting\nCreating basic horor survival  game\nand a tone more\nStart learning today and let me help you become a game developer!\nWho this course is for:\nAnyone who wants to make their own 3D games.\nPeople who want to create and publish their own games.\nComplete beginners with an interest in learning game development.\nDevelopers who want to re-skill across to game development.\nPeople interested in working in the game design industy.\nCompetent and confident with using a computer...",
      "target_audience": [
        "Beginners to advance"
      ]
    },
    {
      "title": "Roblox VFX : Beginner's Guide to Stunning Visual Effect",
      "url": "https://www.udemy.com/course/roblox-vfx-beginners-guide-to-stunning-visual-effect/",
      "bio": "Lean Roblox Vfx For all levels",
      "objectives": [
        "Understand the Basics of Roblox VFX Learn what VFX is and how to use Roblox Studio tools to create simple visual effects.",
        "Create Basic Effects Like Fire, Smoke, and Magic Follow step-by-step tutorials to make common effects that can be used in your games.",
        "Add Effects to Your Roblox Games Learn how to place and test your VFX in a Roblox game to make it look more exciting.",
        "Gain Confidence to Experiment with Your Own Ideas By the end of the course, you’ll have the skills and confidence to try creating your own custom effects."
      ],
      "course_content": {
        "Introduction To Roblox VFX": [
          "Downloading And Setting up Roblox Studio",
          "Understanding Roblox Studio",
          "Basic Understanding Of The Particle System",
          "Making Basic Vfxs & Basic Effects Part 1",
          "Making Basic Vfxs & Basic Effects Part 2"
        ]
      },
      "requirements": [
        "No prior experience is needed! This course is designed for absolute beginners. Whether you're new to Roblox or VFX, I'll guide you step-by-step from the ground up. All you need is a computer, Roblox Studio installed, and a willingness to learn!"
      ],
      "description": "Unlock the Power of Visual Effects in Roblox!\nWelcome to Roblox VFX for Beginners, your ultimate guide to creating stunning visual effects for Roblox games! Whether you’re a complete beginner or an aspiring game developer, this course will teach you everything you need to know to bring your Roblox worlds to life with eye-catching VFX.\nWhat You’ll Learn:\nRoblox Studio Basics: Get comfortable with the Roblox Studio interface and tools.\nVFX Fundamentals: Learn the core principles of creating visual effects, including particles.\nWhy Take This Course?\nBeginner-Friendly: No prior experience needed! I’ll guide you from the ground up.\nHands-On Learning: Follow along with practical, easy-to-understand tutorials.\nReal-World Skills: Gain the confidence to create and share your own VFX in Roblox.\nExpert Guidance: Learn from a Roblox VFX developer with 5+ years of experience.\nWho Is This Course For?\nAspiring Roblox developers who want to add professional-quality VFX to their games.\nBeginners who are new to Roblox Studio or visual effects.\nGame enthusiasts who want to explore the creative side of Roblox.\nYoung creators looking to learn a fun and valuable skill in game development.\nRequirements:\nA computer with Roblox Studio installed (I’ll show you how!).\nA willingness to learn and experiment!\nBy the end of this course, you’ll have the skills and confidence to create your own  VFX and take your Roblox games to the next level. Let’s get started and make some magic together!\"",
      "target_audience": [
        "Aspiring Roblox Developers who want to add eye-catching visual effects to their games. Beginners with no prior experience in VFX or Roblox Studio who want to learn from scratch. Game Enthusiasts looking to explore the creative side of Roblox and bring their ideas to life. Young Creators who want to learn a fun and valuable skill in game development."
      ]
    },
    {
      "title": "Make 2D Games In Unreal Engine!",
      "url": "https://www.udemy.com/course/learn-how-to-make-a-beginner-simple-top-down-action-rpg/",
      "bio": "Begin Your Game Dev Journey with 2D features in Unreal Engine 5!",
      "objectives": [
        "Basics of top down Games in Unreal Engine: movement, sprites, flipbooks, and more!",
        "Basic damage system, healthbars, hitboxes, death andrespawns",
        "Game loop and progression. Where to go from here?",
        "Extra: Game design"
      ],
      "course_content": {
        "2D SOULS LIKE Platformer!": [
          "Intro"
        ],
        "RPG Top down 2d game": [
          "Introduction",
          "Intro: Installing latest Unreal EngineVersion",
          "Intro: Creating Your Project!",
          "Intro: Visual Studio Note*",
          "Section 1: Creating first level",
          "Section 1: Adding Required Ue Plugins",
          "Section 1: Best 2d Settings for your Project",
          "Section 1: Creating our First Tilemap",
          "Section 1: Creating Game Mode and Player Controller",
          "Section 2: Intro to Hierarchies and Character Structure",
          "Section 2: Creating Base Parent Character",
          "Section 2: Creating Input Actions and your IMC",
          "Quick Tip! Alter Editor Graph Colors",
          "Section 2: Creating Camera and Setting Up Player Start",
          "Section 2: Making the character Move!",
          "Section 2: Creating Character Animations",
          "Section 2: Creating Character Animations: Pt. 2",
          "Section 2: AnimBP Transitions Idle To Walk - Final in Section 2!",
          "Section 3: Sort Priority for Y Sorting",
          "Section 3: Intro To behavior Trees",
          "Section 3: Adding AI Controller to Ai Base",
          "Section 3: Nav Mesh!",
          "Section 3: Slime Animation Setup",
          "Section 3: Creating Hitbox and Setting Its Position",
          "Section 3: Completing Hitboxes - Started Damage System",
          "Section 3: Damage System and Damaging Enemies",
          "Section 3: Making dmg Anims for Slime - Fixing Shadows on UI",
          "Section 3: Making Base Enemy Follow Player",
          "Section 3: Making Slime Face Player While Attacking",
          "Section 3: Handling Enemy Damaging Player",
          "Section 4: Creating the Enemy Spawner",
          "Section 4: Creating HUD for Game Goal",
          "Section 4: Complete Spawner and Adding Stun to slime",
          "Section 4: Creating visual FX, Knockback and Polishing Death Sequence for Slime",
          "Section 4: Debugging Intro, polishing Spawner and Creating Portal",
          "Section 4: Making new levels and creating Game Loop",
          "Section 5: Main Menu and PACKAGING LETS GOO",
          "COMPLETE: Final Words",
          "Extra Resources"
        ]
      },
      "requirements": [
        "No programming experience needed! This is designed for people with all experiences who just want to learn paperzd/2d"
      ],
      "description": "Welcome! In this course, we will create small games from start to finish! It will teach you everything from opening an unreal engine for the first time to packaging and best practices for optimizing your final product!\n\n\nMy goal is to help new developers experience the process of creating their first small game! From opening the engine for the first time to packaging the project they can send it to friends and family and say \"I made this\". My dream is to help other people make games and I feel this course is just the beginning.\n\nIf I get over 500 students I will create an additional boss fight tutorial for no extra cost! It will just be uploaded here. It will be a celebratory \"thank you\" from me to you.\n\nI hope this is helpful!\n\nAny feedback I receive I will do my best to update and adjust anything unclear and/ or provide extra videos as people need them <3\n\nYou all are awesome.\n\n\n<3 GO MAKE GAMES! <3\n\nWe will Cover:\nImporting sprites\ncreating flipbooks\nImporting tilemaps\nextra content of two options:\ncreating tilemaps\nusing Tiled\ncreating maps in aseprite\nAdding proper materials for a top-down game for Y sorting\nCreating Base BP for all characters\nCreating Player controller\nCreating our first child class\nMaking a damage component.\nmy two favorite ways to make levels\nsprite-based level from either Aseprite or Tiled\nCreating tilemaps in the engine\nintro to tilesets and tile maps - includes tileset padding if making maps in the engine\nUsing sprite sorting and going over origin points\nEnemies\nai\nbehavior trees\nEnemy spawner\nknockback mechanics\nattack mechanics\nLevel-to-level game loop\nMain menu\nPackaging\nPlaytest and repackage",
      "target_audience": [
        "Beginners/ Intermediates who want to make 2d games in Unreal Engine!"
      ]
    },
    {
      "title": "Make Death Race Unreal Engine C++ | beginner - Moderate",
      "url": "https://www.udemy.com/course/make-death-race/",
      "bio": "Make Death Race game using Unreal Engine 5 C++",
      "objectives": [
        "Basics of Unreal core frame work",
        "Unreal C++ from scratch with proper understanding of each class",
        "You will have proper understanding where we should use C++ and where we should use blueprint.",
        "About Chaos vehicle with Wheel suspension in Cpp",
        "Smoke Exhaust system with Niagara concepts",
        "Vehicle Skid system",
        "Nitrous System",
        "Speedometer with Cpp and UI system",
        "Rear Mirror system",
        "Radio System",
        "Target Missile"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Create Vehicle base with Suspension": [
          "Project Setup and Car Import",
          "Chaos Vehicle Class",
          "Vehicle Suspension, Wheel & Key binding"
        ],
        "Add Vehicle addon (Engine, Smoke system, Skid system, Nitrous system)": [
          "Engine Sound using RPM",
          "Car Back Light , Material Parameter Collection",
          "Smoke Exhaust System, Niagara Smoke",
          "Vehicle Skid System",
          "Nitrous system part 1_2",
          "Nitrous System Part 2_2",
          "Speedometer part 1",
          "Speedometer part 2",
          "Speedometer part 3",
          "Speedometer part 4",
          "Rear Mirror in Car",
          "New free Map with Race track",
          "Advance Map System",
          "Radio System",
          "Rocket Launcher",
          "Target Missile",
          "Car Wrecked Damage System",
          "Car AI with Colors"
        ]
      },
      "requirements": [
        "Basic Understanding of Unreal Blueprint",
        "You don't need to have much knowledge of C++."
      ],
      "description": "Hi all,\nHere you will learn about Unreal C++ basics. We will start by comparing why we should use C++ over the blueprint and what architecture does Unreal C++ uses and What is the basic functionality of all the classes and their hierarchy.\nWe will start making a Car Race game and make a Generic Car base with Wheel Suspension.\nWe will learn how to add a Car light system with Material Parameter Collection in Cpp.\nWe will add the smoke exhaust system, Skid system, Nitrous System.\nWe will add Speedometer with Material and C++ implementation.\nWe will add Rear Mirror System.\nWe will radio system which can be changed runtime.\nFor attack, We will add a Rocket launcher and target missile launcher.\nWe will make the Behavior tree component all in C++ with coving all the basics of behavior trees.\nWe will Add Car AIs\nWe will add Vehicle damage System\nBy the end of the course, you can use your knowledge of C++ and Blueprints to build your own dream games. You can use the games built during this course for your personal projects moving forward, as you add more advanced features. Even if you thought C++ was difficult or intimidating before taking this course, you will learn how easy it is to code C++ within Unreal Engine 4 once you go through these lectures. Even if you are only interested in single-player type games, this course will be a great fit as it teaches many other concepts besides programming for multiplayer games.\nWhy Learn From Me\nIn this course, you will learn more than just programming in Unreal Engine 4. You will actually follow the ‘Unreal Way’ of making games in this Epic Games-approved course. Start off on the right foot and write effective C++ code using methods the engine creators have used themselves! I have been working with Unreal Engine 4 and creating game development tutorials since day one. Through this partnership with Epic Games, you will gain the skills to create stunning new projects and advance your professional aspirations in game development.\nWho this course is for:\nPeople who have tried C++ with Unreal before but could not find the right tutorial to support their hands-on learning style. This course offers step-by-step guidance and lots of activities so you can master making games with C++.\nDevelopers from Unity3D and other engines looking to dive into Unreal Engine programming.\nIf you have never touched a programming language before this course may not be for you. However, proficiency in Unreal’s Blueprint visual scripting also counts as a valid foundation for this course as it shares the same concepts as languages like C++.\nIf you are an artist who wants to bring your ideas to life in a game, a Blueprint-focused course might be a better fit for you. Skim the course curriculum to see if you’re interested in using the power of C++, networking, and AI programming to build out the technical structure of your game.",
      "target_audience": [
        "Anyone who wants to learn Unreal C++ ( from beginner to intermediate)"
      ]
    },
    {
      "title": "The Ultimate Unity AI Course - Build Autonomous Game",
      "url": "https://www.udemy.com/course/unity-ai-guide-create-a-autonomous-game-with-adaptive-npcs/",
      "bio": "Develop adaptive AI with Behavior Trees, guiding characters to think, act and learn autonomously in your Unity games.",
      "objectives": [
        "Master the fundamentals of AI in Unity by building intelligent agents using Behavior Trees and Behavior Designer",
        "Design and implement AI-driven characters that think and act autonomously in dynamic game environments.",
        "Simulate complex, lifelike behavior in your game characters, making them responsive and unpredictable.",
        "Develop a fully autonomous \"Hide and Seek\" game, where AI-driven players interact without any human intervention.",
        "Create adaptive AI that evolves over time, learning from past experiences to improve its strategies.",
        "Build advanced Behavior Trees with sophisticated branching and logic, taking your AI design to the next level.",
        "Elevate your Behavior Tree skills using a powerful node-based editor, making complex AI development intuitive and visual."
      ],
      "course_content": {},
      "requirements": [
        "Basic understanding of Unity",
        "Basic understanding of C#"
      ],
      "description": "Unlock the potential of Artificial Intelligence in Unity by mastering Behavior Trees in this hands-on, practical course. Together, we’ll build a fully autonomous \"Hide and Seek\" game with Adaptive AI that learns and evolves.\nDesigned for beginner and intermediate game developers and designers with a passion for AI, this step-by-step course will guide you from the basics to advanced techniques.\nWe'll begin by exploring the fundamentals of Behavior Trees using the Behavior Designer plugin for Unity, setting a solid foundation. Then, we'll get our hands dirty by building simple AI examples to understand core concepts. From there, we’ll dive deep into the advanced area by creating our fully autonomous \"Hide and Seek\" game, where AI-driven characters will strategize and adapt without any player input. To enhance the gameplay experience, we'll create a UI that displays stats and information, making it easier to analyse AI behaviour. Finally, we'll take things to the next level by implementing AI adaptation, allowing our agents to learn from their experiences and adjust their behaviour dynamically using database techniques similar to machine learning.\nThis course includes a demo version of Behavior Designer, ensuring you have all the tools you need to succeed. Plus, you'll enjoy lifetime access to the course, allowing you to learn at your own pace and revisit the material whenever you need.\nJoin us on this exciting journey and take your AI development skills to new heights!",
      "target_audience": [
        "Game Developers looking to expand their knowledge of Behavior Trees and AI that can learn from previous experience.",
        "AI enthusiasts interested in applying advanced AI concepts to real-world game development.",
        "Anyone with basic Unity experience seeking to take their game AI to the next level."
      ]
    },
    {
      "title": "Mini Games with ChatGPT for Curious Kids [2025]",
      "url": "https://www.udemy.com/course/mini-games-with-chatgpt-2025/",
      "bio": "Reignite the memory of Flash Mini Games of the 90s to teach mini lessons to children through animated gameplay",
      "objectives": [
        "Master the art of crafting clear, dynamic prompts for in-game decisions and feedback.",
        "Learn how to define game goals, rules, and user feedback loops.",
        "Use ChatGPT to brainstorm variations or expand mechanics (e.g. power-ups, penalties).",
        "Combine HTML/CSS/JavaScript with ChatGPT-generated content (e.g. riddles, storylines, challenges)."
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "A bit about myself",
          "Play the games online!"
        ],
        "LEVEL 1": [
          "Color Hunt Adventure - ChatGPT v2025.05",
          "Prompt for ChatGPT - Color Hunt Adventure",
          "Star Catcher - Gemini v2025.05",
          "Prompt for Gemini - Star Catcher",
          "Balloon Pop - Claude v2025.05",
          "Prompt for Claude - Balloon Pop"
        ],
        "LEVEL 2": [
          "Color Sequence Game - ChatGPT v2025.05",
          "Prompt for ChatGPT - Color Sequence Game",
          "Memory Match Game - Gemini v2025",
          "Minor Correction",
          "Prompt for Gemini - Memory Match Game",
          "Space Explorer Game - Claude v2025",
          "Prompt for Claude - Space Explorer Game"
        ],
        "LEVEL 3": [
          "2D Platformer Game - Gemini v2025.05",
          "Minor Update",
          "Prompt for Gemini",
          "Space Defender - DeepSeek v2025",
          "Prompt for DeepSeek",
          "Maze Escape - ChatGPT v2025",
          "Prompt for ChatGPT"
        ],
        "MORE GAMES": [
          "Board Games",
          "Jigsaw Puzzle",
          "Battleship"
        ],
        "Conclusion": [
          "Current State of Meta AI, Grok AI, Perplexity AI",
          "Game ON!"
        ]
      },
      "requirements": [
        "Beginner's knowledge of how to work with ChatGPT"
      ],
      "description": "“Let’s Make Mini Games with ChatGPT!”\nA Fun Way to Learn Coding, Creativity, and Game Design\nCourse Description:\nDo you love playing games? What if you could make your own? In this exciting and beginner-friendly course, you’ll learn how to build mini-games right in your web browser—no experience needed! With the help of ChatGPT, a super-smart AI assistant, you’ll learn how to write simple code, create fun challenges, and design games that you and your friends can play.\nYou’ll use HTML and JavaScript (don’t worry, we’ll explain it step-by-step) to create games like quizzes, memory cards, story adventures, puzzles, and more. ChatGPT will help you come up with cool ideas, fix your code, and even write game dialogue!\nThis course is perfect for:\nKids aged 10+ who love games and want to learn how they’re made.\nTeachers who want to add creativity to the classroom.\nParents who want fun, educational screen time.\nWhat you’ll learn:\nHow to build games using simple code.\nHow to think like a game designer.\nHow to use ChatGPT to get ideas and solve problems.\nHow to make your games look cool with colors and animations.\nBy the end of the course, you’ll have a collection of games you built yourself—and the skills to keep creating more!\nGet ready to code, create, and play. Your game-making adventure starts here!",
      "target_audience": [
        "For teachers, to make lessons more engaging through educational mini-games.",
        "For indie developers, to prototype and test game ideas quickly.",
        "For homeschool parents, to create personalized educational activities for kids."
      ]
    },
    {
      "title": "Unreal Engine 5 - Stylized Landscape creation",
      "url": "https://www.udemy.com/course/unreal-engine-5-for-beginners/",
      "bio": "Learn Unreal Engine from scratch",
      "objectives": [
        "Unreal Engine Basics",
        "Materials in Unreal Engine 5",
        "Sculpting technics",
        "and more"
      ],
      "course_content": {
        "Unreal Engine basics": [
          "Introduction"
        ],
        "Sculpting in Unreal Enigne 5": [
          "Landscape Stamping Tool"
        ],
        "Creating a stylized scene": [
          "Resources",
          "Creating Landscape",
          "Creating a river 01",
          "Creating a river 02",
          "Adding rocks and stones",
          "Creating a small village 01",
          "Creating a smal village 02",
          "Folliage system - Trees",
          "Creating windmills Area 01",
          "Creating windmills Area 02",
          "Making variation of Trees",
          "Using Decals for painting the Village",
          "Lightning System",
          "Creating stylized Sky",
          "Adding landscape backgrounds",
          "Adding a castle",
          "Polishing the Castle Area"
        ]
      },
      "requirements": [
        "If you are a beginner and want to learn Unreal Engine 5 from scratch, then you are in the right place"
      ],
      "description": "In this Tutorial you will learn Unreal Engine 5 from scratch.\nAt the moment we have a section for stylized scene, its not finished it, but i am working on that.\nYou will learn creating landscapes and a lot of stuff through this course.\n- Learning the basics of Unreal Engine 5\n- Creating materials\nBecause materials hold the visual power of any rendering, we will create one by one all the materials needed for our scenes.\nIt means one shader for vegetation, landscape, decals or Megascans assets.\nWe will implement everything from material functions to Master Materials, ending with easy-to-configure Material Instances.\nOnce we have acquired the basics with our first scene, we will go further with a second one to show you that it is possible to create optimized models.\n- We will go through the lightnig system and lumen\n- Post processing volume to make the scene looks like more stylized\n- Creating landscapes\n- Using height maps to make mountains\n- Creating small village\n- Using folliage System\n- Creating Stylized Scene\n- Use the sculpting tools\n- Learn how to use the Spline System\n- We will use through the stylized scene creation three Stuff from the marketplace, and solve its issues. Thus we can create wonderfull scene.\n- Make more variations to make ou scene looks like more realistic\n- i hope you learn with me a lot of technics by follwing my course.",
      "target_audience": [
        "3D Designer",
        "Level creator"
      ]
    },
    {
      "title": "Unity 5 Build a chat system for online multiplayer games",
      "url": "https://www.udemy.com/course/unity-5-build-a-chat-system-for-online-multiplayer-games/",
      "bio": "Smart approach to add multiplayer chat system to any Unity games. Bonus: All Code & assets included",
      "objectives": [
        "Build a professional online multiplayer chat system for your video games, just like professional games",
        "Design the chat system user interface in Unity",
        "Program the code to send messages to other players in their own computers",
        "Receive chat messages coming from the internet",
        "Design the scrolling view to view and scroll through the messages log",
        "Adding rich colored text messages (color coded messages)"
      ],
      "course_content": {
        "Course Overview": [
          "Instructor greetings and overview"
        ],
        "Project Setup": [
          "Download and Open the Unity project",
          "How to play the game server and client and test them",
          "Overview of the scene assets and resources"
        ],
        "Design": [
          "Designing the chat window containers User Interface",
          "Working on the chat window header UI",
          "Adding the chat text input elements"
        ],
        "Dive into programming": [
          "Making latest chat messages appear first",
          "Programming the chat window dragging",
          "Programming the Chat Message system - part 1",
          "Programming the Chat Message system - part 2",
          "Registering client and server message delegates",
          "Programming chat message relay",
          "Debugging the code while the game is running",
          "Debugging the isServer network missing"
        ],
        "Exercise: Debugging code": [
          "Exercise on Debugging Host instance",
          "Solution- Debugging the host server instance",
          "Testing multiplayer chat"
        ],
        "Making code and UI pro features": [
          "Clearing chat input after sending message",
          "Chat window adjust LIVE chat messages",
          "Adding the name of the player sending the message",
          "Having each player their own chat message color",
          "Preventing character interaction while typing chat messages"
        ],
        "Bonus": [
          "Bonus"
        ]
      },
      "requirements": [
        "How to download and open a project in Unity",
        "Basics of the Unity editor"
      ],
      "description": "Important: all software used are FREE to download and use on PC, LINUX and MAC computers (no need to pay, cheers!)\nIn this course you will learn how to use Unity3D to build a professional multiplayer chat system.\nWhy would you want to learn how to build a chat system? Because any good online multiplayer game out there uses a chat system where players can easily interact with eachother by sending text messages and receiving other player's messages back. This is a must-have in any online multiplayer games.\nAll the great games out there are using it, look at Star Wars, or World of Warcraft or MineCraft or even Pokemon. That's exactly what you will be making by taking this course.\nThe majority of the courses out there will only teach you how to create a chat system on one computer, but this course goes the beyond by have the chat system work on dozens of players texting eachother at the same time.\nYou will start learning how to design the chat window user interface, then you will get to program the code logic to send messages to other players. You will also get to program the code to receive messages from other players and create a chat window where you can scroll through the chat log. We will also go beyond and have the player name of the person sending the message, as well as add color coding to easily know who is sending the messages.\n***\nThis course provides all the necessary assets for you. The only tool we use in this course is Unity 3D, and it's completely free to use. No need to spend extra money.\nThis course is easy to follow along since all the steps are shown to you in the video lectures, so you can't possibly miss a step.\nPlease join the course now. You've got nothing to lose because if i don't deliver, you'll get a full refund. I'll see you in the course.",
      "target_audience": [
        "people that want to lear about Unity",
        "People that want to make pro games",
        "computer students",
        "software engineer",
        "graphic designes",
        "web designers",
        "art students",
        "gamers",
        "Anyone with no programming skills",
        "This course is meant for non-artists, meaning you don't have to be an artist to be able to use 3D pixel art graphics provided in this course"
      ]
    },
    {
      "title": "Artificial Intelligence & Machine Learning with Unity3D",
      "url": "https://www.udemy.com/course/artificial-intelligence-machine-learning-unity3d/",
      "bio": "Learn how to create a Self-driving Car or an A.I. that learns to play Flappy Bird",
      "objectives": [
        "How a neural-network works",
        "Set-up of the ML-Agents toolkit with Unity3D & Python",
        "Different machine-learning techniques: Reinforcement Learning & Imitation Learning",
        "Several practical examples: A.I. learns to play FlappyBird, Self-driving Car & 3D-Roller Ball Agent",
        "The ML-Agents components"
      ],
      "course_content": {
        "Introduction": [
          "Intro",
          "Set up of the ML-Agents Toolkit",
          "What is a Neural-Network?",
          "ML-Agents Key Components"
        ],
        "3D Roller-Ball A.I - Reinforcement Learning": [
          "3D - RollerBall Project Overview",
          "RollerBall Set up",
          "Training the AI",
          "Project Files"
        ],
        "A.I. learns to play FlappyBird": [
          "Flappy Bird Project Overview",
          "Explanation of the basic Scene",
          "Set Up of the ML Agents Components",
          "Training FlappyBird",
          "Project Files"
        ],
        "Self-driving Car - Imitation Learning": [
          "Self-driving Car Overview",
          "Explanation of the basic Scene",
          "Set Up of the ML Agents Components",
          "Training the Car",
          "Project Files"
        ]
      },
      "requirements": [
        "A basic understanding of C# and Unity3D is helpful"
      ],
      "description": "This crash-course is about machine Learning & Artificial Intelligence with Unity3D.\nWhy using Unity3D for Artificial Intelligence?\nUnity3D is the perfect environment in order to train your own AIs. Let’s take the example of a Self-driving Car. What you need is complex environments where there are a lots of realistic physical interactions. You could provide these datas from interactions with the real world, but this is extreme inefficient and time consuming.\nSince games become more and more realistic you can provide these informations from virtual environments. And for that Unity is perfectly positioned.\nSo, no matter if you are a game developer who wants to create AIs for games or if you are a hobby researcher who just want to play with machine Learning … The ML-Agents toolkit is the perfect start in order to create your own AIs.\n\nWhat do we learn in this crash-course?\nThis course is structured into 4 major sections:\nIntroduction\nThis section covers everything in order to get a quick start with the ML-Agents Toolkit. You will learn:\n-Set up of the ML-Agents toolkit with Tensorflow\n-What is a neural-network?\n-The Key Components of the Ml-Agents toolkit\n3D Roller Ball AI\nThis lecture will give you a first impression of the Ml-Agents toolkit in practice. You will learn how to set up the environment and all the necessary components in order to train the AI.\nA.I. learns to play Flappy Bird\nInstead wasting your time with playing this game, we will code our own A.I. that learns to play Flappy Bird by using Reinforcement Learning.\nAfter training the AI is able to achieve an unlimited score in this game.\n\nSelf-driving Car\nThe Self-driving Car is the probably the most famous example for Artificial Intelligence, so we will cover this as well. To train the Car we will use a technique called Imitation Learning.\nImitation Learning is special, because this method uses the inputs from a human Player in order to train the neural network.",
      "target_audience": [
        "Anyone who wants to learn artificial intelligence in practice"
      ]
    },
    {
      "title": "Learn To Create A Complete Menu System in Unity",
      "url": "https://www.udemy.com/course/unitymenus/",
      "bio": "Game development made easy. Learn Unity's UI and create your very own menu system!",
      "objectives": [],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Asset Download"
        ],
        "Main Menu": [
          "Setting Up The UI",
          "Making The UI Stand Out",
          "Adding Buttons",
          "Showing Button Interactions",
          "Adding Menu Functionality"
        ],
        "Options Menu": [
          "Laying Out Options Screen",
          "Adding Interactible Options",
          "Adding Options Screen Functionality",
          "Setting The Resolution",
          "Setting Graphics Options On Start"
        ],
        "Audio Options": [
          "Setting Up Audio System",
          "Adjusting Volumes with the Menu",
          "Playing Sound Effects While Adjusting Volume",
          "Saving & Loading Volume Levels",
          "Finishing the Main Menu"
        ],
        "Pause Menu": [
          "Creating the Pause Menu"
        ],
        "Loading Screen": [
          "Creating a Loading Screen"
        ],
        "Course Completion": [
          "Course Completion",
          "Completed Project Files"
        ]
      },
      "requirements": [
        "Mac or PC capable of running Unity 3D",
        "A copy of Unity 2019.1 or newer",
        "Basic familiarity with the Unity game engine"
      ],
      "description": "Learn how to create and program a complete UI Menu System in Unity, an industry-standard game development program used by many large gaming studios and indie developers across the world.\nIn this course you won’t just be learning programming concepts, but tying these concepts to real game development uses. You will have access to a course forum where you can discuss the topics covered in the course as well as the next steps to take once the course is complete.\nAt the end of this course you will have developed the ability to create such elements as:\nTitle Screen\nOptions Menu\nComplete Audio Control System\nAdjust Graphics Settings in your games\nPause Menu\nAnimated Loading screens\nStart learning today and let me help you become a game developer!",
      "target_audience": [
        "Anyone who wants to create a UI system in Unity",
        "People who want to create and publish their own games.",
        "Developers who want to re-skill across to game development.",
        "People interested in working in the game design industy.",
        "Competent and confident with using a computer."
      ]
    },
    {
      "title": "Learn C# Unity Detailed for beginners",
      "url": "https://www.udemy.com/course/csharpforbeginners/",
      "bio": "Master Unity game development while learning C# step-by-step—perfect for total beginners.",
      "objectives": [
        "This isn’t just a copy-my-code course. You’ll understand what you're doing and why",
        "Learn C# from scratch while building real games in Unity—no prior coding needed.",
        "Visualize core coding concepts in Unity to truly understand how they work behind the scenes.",
        "Master Unity’s interface, tools, and workflows to create professional-quality games.",
        "Build and script game mechanics like movement, health, AI, and shooting.",
        "Transfer your C# skills to other dev environments and software projects.",
        "Create a 3D top down shooter with levels, deaths, lives, etc.",
        "Create enemies with complex behavior using state machines and clean code architecture.",
        "Design a modular level and enemy spawning system to support infinite gameplay.",
        "Learn how to structure game logic that’s reusable, readable, and scalable."
      ],
      "course_content": {
        "Introduction": [
          "Getting Started",
          "Let's get to know Unity"
        ],
        "The Absolute Basics of C# in Unity - the Fundamentals": [
          "TextMeshPro how to use it to write Hello World",
          "Visually learn how variables work",
          "Variable types and their scope",
          "Variable examples",
          "Visually learn how Methods work",
          "Methods - learn what they are",
          "Methods continue",
          "Methods with parameters",
          "Methods Return Type",
          "Methods Return Type part 2",
          "If statements visualized",
          "else if statements visualized",
          "Nested if statements visualized",
          "Operators",
          "Classes visualized",
          "Classes Part 1",
          "Classes Part 2",
          "While loops visualized",
          "Coroutines visualized IEnumerator",
          "For loops visualized",
          "Foreach loop visualized"
        ],
        "Core Coding Mechanics in Unity": [
          "Transform Position",
          "Transform Rotation",
          "Transform Rotation part 2",
          "Transform Scale",
          "Else if simple state machine",
          "Switch Case state machine part 1",
          "Switch Case state machine part 2",
          "Switch Case state machine part 3"
        ],
        "Get the player moving": [
          "Movement code variables",
          "Movement code - getting inputs",
          "Movement code - adding force with vectors",
          "Movement code - Physics material",
          "Movement code - drag max speed",
          "Movement code - Writing speed to screen",
          "Movement code - Normalizing Speed"
        ],
        "Aiming and Shooting": [
          "Aiming part 1",
          "Aiming part 2",
          "Some Updates to get shooting working",
          "Shooting",
          "Creating bullets part 1",
          "Creating bullets part 2",
          "Creating bullets part 3",
          "Bullet particle effects",
          "Bullet particle effects",
          "Gun Recoil",
          "Player vibrating and Xbox controller settings",
          "Adding Gun Sounds"
        ],
        "Creating Enemies and a state machine": [
          "Very basic enemies that chase player",
          "No Spinning Update",
          "Adding Juice to enemies",
          "Fixing Collisions",
          "Enemy State Machine setting it up",
          "Enemy State Machine - Idle",
          "Enemy State Machine - Chase",
          "Enemy State Machine - Pause",
          "Enemy State Machine - Dive Attack",
          "Enemy State Machine - Recovery",
          "Enemy State Machine - Collisions",
          "Enemy State Machine - Collision Update",
          "Enemy State Machine - Death",
          "Playing a death sound when enemies die",
          "Clean up enemies",
          "Random Enemy Death Sounds"
        ],
        "Handling the death of the player": [
          "Teleporting the player when he dies.",
          "Player Death intermediate",
          "Player Death advanced.",
          "Adding player lives.",
          "Switching Scenes"
        ],
        "Making the Spawner and Level manager": [
          "Spawner part 1",
          "Spawner part 2",
          "Spawner part 3",
          "Spawner part 4",
          "Level Manager",
          "Level Manager Randomizer",
          "Level Manager Levels",
          "Level Manager Level part 2"
        ]
      },
      "requirements": [
        "No programming experience needed. This course is beginner-friendly and will guide you step-by-step through C# and Unity. All you need is a computer and a willingness to learn."
      ],
      "description": "Ever dreamed of creating your own video game but felt overwhelmed by coding? This beginner-friendly course is exactly what you need. With zero experience required, you'll learn to build engaging games using Unity and C#, guided every step of the way.\nUnlike typical \"copy-and-paste\" tutorials, you'll genuinely grasp each concept. Through clear, visual explanations and interactive projects, we'll ensure the fundamentals—like variables, loops, methods, classes, and state machines—become second nature.\nYou'll quickly transition from theory to practical Unity mechanics, mastering movement, shooting mechanics, enemy AI, scene transitions, and spawning systems. Learn to code responsive and satisfying game experiences, complete with realistic bullet physics, player recoil, immersive gamepad feedback, and dynamic audio cues. Your games won't just work; they'll feel great to play.\nPerfect for creatives, aspiring developers, or anyone curious about how games are made, this course empowers you to turn ideas into reality. By the end, you'll proudly showcase your fully playable game and have the confidence and skills to continue creating independently. With supportive community interaction and instructor feedback, you're never alone on your game development journey.\nNo prior coding knowledge? No problem—just bring your curiosity. Start your journey today, and unlock your potential as a game developer.",
      "target_audience": [
        "Beginners who want to learn game dev with Unity and C# from the ground up.",
        "Artists or designers who want to break into coding their own games.",
        "Students coming from other engines like GameMaker or Scratch who want to level up.",
        "Anyone tired of tutorials that just say “copy this code” with no explanation."
      ]
    },
    {
      "title": "Unreal Engine For Beginners",
      "url": "https://www.udemy.com/course/unreal-engine-for-beginners-v/",
      "bio": "Learn the Power of Unreal Engine: A Comprehensive Guide for Beginners",
      "objectives": [],
      "course_content": {
        "Introduction": [
          "Introduction ( Installing Unreal Engine )",
          "Viewport Controls",
          "Viewport, Outlier And Details Panel",
          "View Modes",
          "Quixel Bridge",
          "Nanite",
          "Community"
        ],
        "Variables": [
          "Booleans",
          "Intergers",
          "Name and Text",
          "Vector, Rotation and Transform"
        ],
        "Nodes": [
          "Delay Nodes",
          "FlipFlop",
          "Sequence",
          "Do Once",
          "Branches",
          "On Component",
          "For Loop",
          "Timelines",
          "Functions",
          "Macros",
          "Custom Events",
          "Set Timer",
          "Extra Tip"
        ],
        "Blueprint Communication": [
          "Casting",
          "Blueprint Interfaces",
          "Event Dispatchers"
        ],
        "Widget Blueprints": [
          "Widget Blueprints"
        ],
        "What To Do Next": [
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "A PC Capable of Running Unreal Engine"
      ],
      "description": "This Course in a Nutshell\nIn this course, we are going to learn how to navigate and use the different tools in Unreal Engine.\nWe will get you familiar with Blueprints a visual scripting language that allows you to create gameplay systems without writing a single line of code (Complete video games can be made with the system)\n\n\nCourse Overview\nThis course is split into 5 sections. First we will get you familiar with the layout of Unreal Engine so you know how to access and use the main tools it provides. In the next section we go over how to create and use variables.\nThen I go over all the essential nodes that I think everyone needs to know when working with Unreal Engine.\nPenultimately I go over how to we can make blueprints communicate with each other. ( For example if we have a player character and a door if the play goes up and interacts with door, using blueprint communication we can make the door open when the player interacts with it.\nFinally I go over how to create and use Widget Blueprints to display HUDs.\n\n\nTable Of Contents\nThis course covers the following topics:\nIntroduction To Unreal Engine\nVariables\nEssential Nodes\nBlueprint Communication\nWidget Blueprints\nWhat To Do Next\n\n\nWhat Will You Learn In this Course?\nThis course will give you a practical hands-on introduction to Unreal. After taking this course you will feel very comfortable navigating and using the different tools within Unreal Engine.",
      "target_audience": [
        "Beginner Unreal Engine Game Developer who wants to learn how to use Unreal Engine"
      ]
    },
    {
      "title": "Create 2D Shooter Game With Unity",
      "url": "https://www.udemy.com/course/create-2d-shooter-game-with-unity/",
      "bio": "Unity Education and 2D Shooter Game (C# , UI , Shop , Save And Load , Shooting , JoyStick , Power Ability)",
      "objectives": [
        "Teaching Ui structures to create menus, shops and...",
        "Learn Complete C# from Basic to advanced",
        "Implementation of the Shop structure in Unity completely",
        "Implementation of load and save structure",
        "Teaching how to make special abilities such as slow motion and Angry Mode, etc",
        "Learning how to work professionally with a joystick (with 2 joysticks at the same time)",
        "Teaching how to make different AI bots as Enemy",
        "Get the full experience of making a 2D action game"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Switch Platform & Sprite Editing",
          "Creating loading page with UI",
          "Create Menu - Part 1",
          "Create Menu - Part 2 (Buttons , Slider , Animation)",
          "Particle Effect for Menu",
          "Implementing GamePlay",
          "Manage Animations & Ground Structure",
          "Control Character Aiming",
          "Jump and Movement Structure",
          "Limit Character Movement and Aiming",
          "Adding Light , URP and Implementing Shooting",
          "Particle effect for Bullets",
          "Create Enemy & adding GlobalVolume",
          "Enemies Gun Settings",
          "Enemies Shooting Structure",
          "Destroying Bullets after Collision",
          "Creating HealthBar - Enemy",
          "Follow Structure for Enemies",
          "Creating HealthBar - Player",
          "Death Particle for Player",
          "Shake Camera in Unity",
          "Producing Enemies (Animation , Particle etc...)",
          "Creating Different Enemies",
          "Currency in GamePlay (Coin)",
          "Producing Coin After Killing Enemies",
          "Creating Lose Menu",
          "Dying Player Structure",
          "LevelUp Structure",
          "Health Item For Player",
          "Angry MODE Structure (Rage Mode)",
          "Make PAUSE Menu for Game",
          "Create New Map",
          "Get Camera Sides",
          "LoadLevel",
          "LoadLevel in LosePage",
          "Add Game Currency to Code",
          "Energy-Per-Play System",
          "No Life (Energy) Page",
          "Shop Structure",
          "Shop Buttons",
          "Shop Code System - Part 1",
          "Shop Code System - Part 2",
          "Shop Code System - Part 3",
          "Set Shop Items on Player - Part 1",
          "Set Shop Items on Player - Part 2",
          "Set Gun Damages and Health (Effect of Shop Items)",
          "Make Shop Items Usable in GamePlay",
          "Displaying Hit Damage",
          "Shop Items Effect in Gameplay",
          "Completing ANGRY MODE",
          "Creating Level Up page",
          "Creating Different Enemies",
          "Practice Lecture",
          "2D Light for Candle",
          "Enemy Auto-Jump Structure",
          "Creating Main Loading Page",
          "Adding Sound Effects",
          "Displaying Cool Messages(TM PRO)",
          "Animating Whole Game!",
          "Info and No-Money Page",
          "CoolDown For Items",
          "Adding Maps For Game"
        ]
      },
      "requirements": [
        "Unity in basic form (Previous course of Budgames group)"
      ],
      "description": "Course Description: Create 2D Shooter Game With Unity\nIntroduction: Embark on an exciting journey into game development with Unity, where you'll learn to craft your own 2D shooter game from scratch. This comprehensive course will equip you with the skills needed to bring your game ideas to life, from basic concepts to advanced gameplay mechanics.\n1. Learning Complete C# from Basic to Advanced: Get started with the fundamentals of C# programming language, the backbone of Unity game development. From variables and control flow to object-oriented programming, master the essential building blocks to create powerful game logic.\n2. Teaching UI Structures to Create Menus, Shops, and More: Unlock the secrets of user interface design as you delve into creating captivating menus, dynamic shops, and immersive in-game interfaces. Learn to seamlessly integrate UI elements with gameplay mechanics to enhance player experience.\n3. Implementation of the Shop Structure in Unity: Discover the ins and outs of designing and implementing a fully functional shop system in Unity. From item inventories to currency management, gain hands-on experience in creating a seamless shopping experience for players.\n4. Implementation of Load and Save Structure: Learn the importance of data persistence in game development and explore techniques for implementing robust load and save systems. From player progress to game settings, ensure that your players can pick up right where they left off.\n5. Crafting Special Abilities: Unleash your creativity by mastering the art of designing special abilities such as slow motion and Angry Mode. Explore advanced gameplay mechanics and learn how to implement these unique features to add depth and excitement to your game.\n6. Professional Joystick Handling: Take your game controls to the next level as you learn to work professionally with joysticks, including managing input from multiple joysticks simultaneously. Master the art of responsive and intuitive controls to provide players with a seamless gaming experience.\n7. Creating Dynamic AI Bots as Enemies: Dive into the world of artificial intelligence and learn to create dynamic and challenging enemy bots for your game. From basic movement patterns to advanced decision-making algorithms, unleash the full potential of Unity's AI tools to create engaging gameplay experiences.",
      "target_audience": [
        "For all people who want to learn the basic structure of 2D action games and want to implement features such as slow motion, AngryMode, shop, shooting, and making smart bots in Unity."
      ]
    },
    {
      "title": "Create Your First Game with Unity Engine and C#",
      "url": "https://www.udemy.com/course/create-your-first-game-with-unity-engine-and-c/",
      "bio": "Beginner Friendly Course",
      "objectives": [
        "Learn how Unity 3D game engine works",
        "Learn how to design a simple level with user interface",
        "Learn how to create, code and animate player, and other objects",
        "Learn how to export Your finished game"
      ],
      "course_content": {
        "Introduction of the Course": [
          "Introduction",
          "Quiz #1"
        ],
        "Preparing the Project": [
          "Preparing the Project",
          "Scene Setup",
          "Quiz #2"
        ],
        "User Interface": [
          "Texts, Buttons and Health Bars",
          "Quiz #3"
        ],
        "Coding": [
          "Player Stats",
          "Game Logic",
          "Quiz #4"
        ],
        "Animations": [
          "Animations",
          "Quiz #5"
        ],
        "Final Chapter": [
          "Export the Game"
        ]
      },
      "requirements": [
        "Only basic programming knowledge needed, you will learn everything here",
        "Installed Unity game engine"
      ],
      "description": "Do you want to develop video game but don't know how?\nHi, my name is Domen and today we will discover how to create video games with Unity3D and C#.\nWe will learn how to develop turn-based combat game with animations.\nVIdeo games are super popular, so why wouldn't we develop one?\nThis class will cover 3 main topics:\n1. Player controller - basic game logic - setup and code,\n2. Animations - adding animations - animator controller,\n3. UI - dialogue window, buttons and health bar.\nWe will learn how to setup game controller in Unity, including animations, how to write code for it and how to add user interface to the game.\nWith this knowledge you will be able to start developing your own games.\nYou can also join my discord server to connect with other students and share your work:\nJoin our discord server to share your work and connect with community - link under every lesson.\nSo, if you are willing to learn Unity fundamentals and start game development journey, welcome to my class. If you like this class, please leave a review, it really helps me and it is very appreciated. :)\nDownload class assets - links under every lesson.\nSoftware required to participate in this class: Unity 3D and Visual Studio, both available for free.",
      "target_audience": [
        "Beginner game developers curious about mobile game development"
      ]
    },
    {
      "title": "Make Your First Game In Godot Engine 4",
      "url": "https://www.udemy.com/course/godot-first-game/",
      "bio": "Learn how to create an awesome space shooter game in Godot 4 by the end of the day!",
      "objectives": [],
      "course_content": {
        "Space Shooter Game": [
          "Player Controller",
          "Shooting Lasers!",
          "The Enemy Scene",
          "Enemy Types & Enemy Spawning",
          "Scoring & Clamping Players Position",
          "High Score & Game Over Screen",
          "Finishing Touches",
          "What To Do Next?"
        ]
      },
      "requirements": [
        "Basic understanding of Godot",
        "Basic understanding of programming concepts like variables, loops, functions"
      ],
      "description": "In this course you will learn how to make a classic space shooter with the Godot Engine version 4. We will start with an empty project and make our way until we have a full game that you can export to any platform you want. If you haven't made a complete game before in Godot this is the perfect opportunity for you to create something that you can share with others! After you finish the course you can take your game and turn it into your own unique game.\nA little bit about what we are going to cover in the course: You will learn how to create a top-down player controller that is controlled with keyboard input. You'll learn how to clamp the position of the player so that it stays in the game area. You're going to create a laser scene and shoot this laser from the player space ship. You will create an enemy scene and write the spawning logic to spawn enemies. In the course you will see 2 different types of enemies with different behaviors. You'll learn how to implement a scoring system, in-game user interface, game over menu and more!\nGodot 4 is an amazing engine and this short FREE course is the perfect place to start learning it! Start your game development journey today! Looking forward to teaching you, see you inside :)",
      "target_audience": [
        "Absolute beginners to Godot and programming",
        "Absolute beginners to Godot who know some programming",
        "Beginner and lower intermediate users of Godot"
      ]
    },
    {
      "title": "Open Source Coding Lessons",
      "url": "https://www.udemy.com/course/open-source-coding-lessons/",
      "bio": "For all the interested in learning open source technology",
      "objectives": [
        "Programming using professional utilities and tools",
        "More professional software development approach",
        "Using the open-source software",
        "Open source programming tools and programs for definitive software creation and delivery"
      ],
      "course_content": {
        "Introduction": [
          "Ant Colony Optimisation for Travelling Salesman Problem",
          "Regex+ - Extended Regular Expression Engine",
          "Scientific Software in Your Hand",
          "Coding Exam"
        ],
        "Experienced Level of Open Source": [
          "PHP, VBA and SQL Useful Scripts",
          "In-Depth Network Programming in C++",
          "Three Useful Programs with Open Storage"
        ],
        "Game Design and System Programming": [
          "MollyMage - Turn-based Strategy Approach",
          "Real-time Strategy Engine in MonoGame",
          "Lavoro - Web-based Approach for Operating System Development",
          "Before You Learn"
        ]
      },
      "requirements": [
        "Only basic programming skills"
      ],
      "description": "Teach yourself for open source programming experience. You will learn the basics of Open Source programming environment and technologies. Meanwhile being able to create the code which doesn't need to be paid.\nOur lessons include the parts for algorithm design and evaluation as well as the part to know how to code effectively without any relying options which lead to the result of the programming and development made easy.\nYou will learn of how to work with data structures and how to make the best experience from your next hobby on the shelf, be patient and all the knowledge obtained by me will be in your hands.\nHere's the teaching experience as follows:\nWe propose the solution for web-based operating systems like Lavoro project which utilizes the COM interoperability for better handling of the URL-based file system.\nThe modern trends are of big computer resources consumption due to the specific storage of data - we create open storage for everyday use.\nWe present effective algorithms for typical program solutions.\nWe provide the system primitives on the example of two networking programs, or utilities, which work on the Transfer Control Protocol (TCP) and User Datagram Protocol (UDP) for basic and system operations\nWe present the novel algorithm realization on object-oriented basis with optimal performance for solving TSP using ACO.\nRecent work in the field of the development of regular expression engines doesn't adhere to the extended regular expressions with the support of intersection, subtraction and complement operators in linear time and memory. New development idea and elaborate efforts makes it possible to use the extended operators in regular expression.\nWe present the social network (PHP) with Android client utilizing the mobile design in WebView controller. The SQL scripts for data modelling and data validation are presented as well as Visual Basic for Applications (VBA) scripts in Excel workbooks\nThis article is about game-engines and object-oriented programming.\nWe build random strategy for MollyMage in Java",
      "target_audience": [
        "Beginning learners interested in becoming patron of open source software realm"
      ]
    },
    {
      "title": "Introduction to Materials in Unreal Engine 5",
      "url": "https://www.udemy.com/course/introduction-to-materials-in-unreal-engine-5/",
      "bio": "Learn to create Materials in Unreal Engine 5 like a professional Environment Artist",
      "objectives": [
        "Get to know the most important nodes inside the Material Editor in Unreal Engine 5",
        "Have a great understanding on how to use Materials as an Environment Artist",
        "Create a Rock Master Material to use in your projects",
        "Learn Updated tools in Unreal Engine 5.5"
      ],
      "course_content": {
        "Introduction to Materials in Unreal Engine 5": [
          "Introduction to Materials in Unreal Engine 5",
          "What are Materials",
          "Creating your first Material",
          "Understanding PBR",
          "Using Textures",
          "Multiply and Lerp Nodes",
          "Add and Clamp Nodes",
          "Material Instances",
          "How to import textures from Fab",
          "How to combine Texture channels",
          "Creating the Rock Master Material",
          "Adding Texture Color controls",
          "Creating our first function",
          "Using Static Switch Parameters",
          "Changing the Normal map intensity",
          "Blending Between 2 Materials",
          "Creating a function for our Simple Material",
          "Blending with Vertex Colors",
          "Introduction to height Contrast",
          "Using the HeightLerp node",
          "Using World Aligned Textures",
          "Adding Global color tint",
          "Adding the moss Material",
          "Creating the Slope Mask",
          "Vertex Painting on Nanite meshes",
          "Updating the Texture Tiling",
          "Object scale tiling",
          "Adding the Object Scale tiling to our function",
          "Updating the textures with new parameters",
          "Memory usage",
          "Wrap up"
        ]
      },
      "requirements": [
        "No previous Unreal Engine experience. A good understanding on how to navigate the interface is good but not mandatory."
      ],
      "description": "In this course you will be introduced to the world of Materials inside Unreal Engine 5. If you’re an aspiring environment artist or just curious about game art, this course will teach you the fundamentals of material creation inside the Unreal Editor.\nYou will start from the very beginning from knowing what a Material is, what are their use cases and understanding how Physically Based Rendering affects your workflow to create believable surfaces.\nAs we progress, you will learn how to blend different texture maps, utilize slope masks to add natural variation, and master height-based lerping for realistic layering effects. We’ll delve into vertex painting techniques, enabling you to dynamically paint subtle details and wear onto your models, bringing them to life with true artistic control. Each lesson is carefully structured to mirror real-world workflows and expectations, ensuring you are ready to tackle the job at a Game studio.\nDuring this course you will be building a real world case application where you create a Rock Master Material, where you will be applying all the new concepts to create a flexible and good looking rock material to use in any kind of 3D Model.\nIf you are an aspiring 3D environment artist looking to break into the Game Industry, creating your own Materials is a task that is required for every position. By the end of this course you should be feeling very confident on how to create your own materials for Environment Art.",
      "target_audience": [
        "Beginner Game Developers who want to aspire to become Environment Artists in the field"
      ]
    },
    {
      "title": "Make Stylized Grass by using Blender and Unity",
      "url": "https://www.udemy.com/course/make-stylized-grass-by-using-blender-and-unity/",
      "bio": "Modeling in Blender, Make Shader in Unity",
      "objectives": [],
      "course_content": {
        "Blender Part": [
          "Make Grass Model in Blender",
          "Change Grass Normal in Blender"
        ],
        "Unity Part": [
          "Export Model and Set up Universal Render Pipeline in Unity",
          "Make Grass Wave in Unity",
          "Set Grass LOD in Unity",
          "Paint Grass on Terrain"
        ]
      },
      "requirements": [
        "No modeling and game development experience needed. You will learn everything you need to know"
      ],
      "description": "This one hour long course is made for new beginners of Blender & Unity. I will show you some tricks when using Blender and Unity, all my actions and short keys will show you in the video! Don't worry even though you are not familiar with these softwares!\nCourse contents:\nCreate grass model in Blender\nChange grass normal for stylized shadow in Blender\nExport grass model to Unity, set up Universal Render Pipeline\nMake Grass shader by using Universal Render Pipeline Shader Graph\nMake Grass wave by using vertex animation and uv animation\nSet Grass LOD then paint on Unity Terrain\nSoftwares:\nBlender\nUnity\nSoftware instructions:\nUnity is a cross-platform game engine developed by Unity Technologies, first announced and released in June 2005 at Apple Inc.'s Worldwide Developers Conference as a Mac OS X-exclusive game engine. The engine has since been gradually extended to support a variety of desktop, mobile, console and virtual reality platforms. It is particularly popular for iOS and Android mobile game development and used for games such as Pokémon Go, Monument Valley, Call of Duty: Mobile, Beat Saber and Cuphead. It is considered easy to use for beginner developers and is popular for indie game development.\nBlender is a free and open-source 3D computer graphics software toolset used for creating animated films, visual effects, art, 3D printed models, motion graphics, interactive 3D applications, virtual reality, and computer games. Blender's features include 3D modeling, UV unwrapping, texturing, raster graphics editing, rigging and skinning, fluid and smoke simulation, particle simulation, soft body simulation, sculpting, animating, match moving, rendering, motion graphics, video editing, and compositing.",
      "target_audience": [
        "Beginner Blender Developers",
        "Beginner Unity Developers",
        "Beginner Game Developers"
      ]
    },
    {
      "title": "HOT & NEW :Learn Construct 2 From Scratch and build games",
      "url": "https://www.udemy.com/course/learn-construct-2-from-scratch-and-build-games/",
      "bio": "Create Game Without Having any Prior Coding Experience",
      "objectives": [],
      "course_content": {
        "Introduction": [
          "Introduction to construct 2",
          "Introduction to construct layouts"
        ],
        "Objects": [
          "How to create Objects",
          "Learning About Object's Behaviours",
          "Concept of Layout Size And WIndow Size",
          "How to Create New EventSheets and Layouts",
          "Learning About Layers",
          "Understanding About Templates And Empty Projects"
        ],
        "Understanding and Introducing with the concepts of Flappy Bird Game": [
          "Introducing With Flappy Bird Game",
          "Seeing How Layout is Created",
          "Working With Start Events",
          "Understanding Game Layout",
          "Understanding Game Events - Start",
          "Understanding Global And Local Variables",
          "Working With Movement Events",
          "Working WIth Collision Events",
          "Working With Scoring Events",
          "Working With Background Events",
          "Working With Obstacle Events"
        ],
        "Creating YourOwn Game": [
          "Changing Layout Size and Window Size",
          "Adding Background Image To The Layout",
          "Adding Some More Cool Objects To The Layout",
          "Adding Behaviours To The Objects",
          "Changing Property Values Of The Object Behaviours",
          "Adding Game Events Part 1",
          "Adding New Blocks Again",
          "Adding Game Events Part 2",
          "Adding Game Events Part 3",
          "Adding Game Events Part 4",
          "Adding Game Events Part 5",
          "Adding Sounds to Our Game",
          "Discussing MultiPlatform Behaviour of Construct 2",
          "Testing And Publishing Construct 2 Game",
          "How to Export Your Game to .exe File",
          "Publishing Html5 Game To Web",
          "How to Publish Your Game on to Facebook",
          "How to Publish Your Game on to Playstore",
          "How to Publish Your Game on to WIndows Store",
          "Ebook TO Learn Construct 2 Deeply"
        ]
      },
      "requirements": [
        "You Don't Need Any Prior Knowledge In Terms Of Programming"
      ],
      "description": "This course is for those who want to create games but don't have enough  Knowledge of programming Language , in this course we will discuss a coll drag and drop technology provided by construct game engine.\nYou can create cool games with construct 2 and then publish them on to different platforms , also you can monetize and earn money from them.\nwe will guide you to create games in this course and the publish those games on to differenet platforms.",
      "target_audience": [
        "any one who knows how to work on computer and have zeal to learn game development in construct 2"
      ]
    },
    {
      "title": "Temple Run Clone for iOS & Android | Top Unity and C# Course",
      "url": "https://www.udemy.com/course/templerun_clone/",
      "bio": "Make a cross-platform, endless runner game for iOS and Android using the Unity3D game engine in UNDER 5 hours",
      "objectives": [
        "3D game development using Unity",
        "C# syntax, so that you could manipulate the behavior of your game objects (assets) inside Unity.",
        "Learn to port your game to both iOS and Android, as well as make it receive input from your phone's accelerometer and touch-gestures.",
        "The mechanics and logic of endless runner games like Temple Run.",
        "How 3D models are imported and rigged inside of Unity, so that you could create your own game environment.",
        "How to animate your character using the Unity Mechanim system to bring your game to life and make it more interactive."
      ],
      "course_content": {
        "Part 0: Course Introduction": [
          "Installing Unity and Visual Studio on Windows",
          "Installing Unity and Visual Studio on macOS"
        ],
        "Part 1: Unity Basics": [
          "Setting-up Our Virtual Scene and Importing Our 3D Character Model",
          "Prefabs and Object Oriented Programming (OOP) in Unity"
        ],
        "Part II: Game Mechanics": [
          "Player Logic I: Propelling the Character Forward",
          "Player Logic I (Cont'd): Implementing Gravity Effect",
          "Player Logic II: Left and Right Turns; and Getting Input from the Keyboard",
          "Game Mechanics (GM) I: Camera Behavior Script",
          "GM II: Spawning Infinite Random Segments Forward",
          "GM III: Generating Random Segments & Spawning them in Different Directions",
          "Player Animation: Importing Animations and Unity Animation System Basics",
          "VFX: Adding Water and a Clearing Fog Effect",
          "Player Logic III: Death Condition, Collision Detection, and Player Respawning",
          "Adding Sound to the Game"
        ],
        "Part III: Additional Features": [
          "Reward System: Coin Collection & Running Distance Tracking & Score Saving",
          "Game Menus",
          "Game User Interface (UI)",
          "Mobile Port: Touch Input Integration",
          "Mobile Port: Accelerometer Input Integration",
          "Mobile Port: Build for iOS & Android"
        ]
      },
      "requirements": [
        "Past exposure to basic programming knowledge like variable types and declarations, for loops, etc at any language.",
        "A PC or a Mac with modest specs",
        "A pre-installed version of Unity (free)",
        "A pre-installed version of Visual Studio (for Mac and Windows users)"
      ],
      "description": "Requirements:\nCourse Prerequisites: Basic programming knowledge (variable types and declarations, for loops, etc.)\nCourse Requirements: A PC or a Mac with modest specs, a pre-installed version of Unity (free), a pre-installed version of Visual Studio (for Mac and Windows users) .\nCourse Description:\nThis project-based course will serve as your entrance to 3D graphics, which are at the core of game development, virtual worlds creation, and character animation. If you complete this course, you will have a fully working Temple Run clone that is cross-platform and portable to mobile phones with amazing, smooth graphics and animation (not like those cheap ones you find in blogs ;)\n\n\nGame Development Topics Covered in Great Detail in this Course:\nObject oriented programming (OOP) including: Classes, objects, public & private data members, constructors, inheritance, and many more.\nC# arrays.\nC# lists.\nC# Strings.\nFunctions in C#.\nIf & switch statements in C#.\nAll the major C# variables types like ints, floats, bools, etc.\nUnity GameObjects & Components.\nThe concept of assets in game development.\nThe concept of prefabs in Unity.\nUtilizing the Unity Asset Store to its full potential.\n3D models basics like polygon counts, textures & materials.\nThe concept of a skybox.\nCharacter animation using the Unity Animation System (Mechanim).\nAnimation state machines.\nUnity Animation Events\nC# scripts in Unity.\nDifferent Unity user interface (UI) elements like texts, images and buttons.\nDifferent Unity classes like Vector3, Vector2, Animator, Transform, CharacterController, and many others.\nCollision Detection.\nUnity's random logic.\nThe concept of a camera in video games.\nDifferent input systems for the game like keyboard keys, as well as mobile touch input and accelerometer input.\nReading the Unity Documentation as a guide for knowing how to use Unity competently.\nDebugging the game using the Unity Console window.\nLoading different scenes (levels).\nBuilding or exporting the game from a project in the Unity engine to an app that can work natively on Android & iOS.\nC# syntax.\nFor-loops.\nTypecasting in C#.\nC# enumeration structures like enum.\nC# co-routines and interfaces like IEnumerator.\nDesigning a user interface (UI) in Unity for the game using different UI elements like images, texts, panels, and buttons.\nC# namespaces.\nThe concept of local (automatic) and global variables in C#\nUnity game save feature.\nUnity immediate graphical user interface (IMGUI).\nThe mechanics of the endless runner game genre.\nSound effects (SoundFX).\nUnity script-to-script communication.\nGame Development Topics Covered Partially in this Course:\n3D coordinate math.\n3D rotation math like quaternions and Euler angles.\nModular arithmetic.\nThe concept of particle systems in game development & the Unity Fog System.\nVisual effects (VFX) in video games.\nMore advanced data structures like dictionaries and keys.\nOperator overloading.\nThe concept of linear interpolation.\nSkills You'll Hone If You Complete this Course (Besides Learning 3D Game Development in Unity):\nProblem solving.\nAbstract & logical thinking.",
      "target_audience": [
        "People who which to kickstart their indie development careers.",
        "People who just like making things."
      ]
    },
    {
      "title": "Welcome To Game Design - Introduction to Game Design Theory",
      "url": "https://www.udemy.com/course/welcome-to-game-design-introduction-to-game-theory/",
      "bio": "Digital, Board Games and Gamification: find your ideal Game Role in the Game Industry while learning about all areas.",
      "objectives": [],
      "course_content": {
        "Game Structure": [
          "Download The Class Presentation",
          "Introduction",
          "What is a Game?",
          "How to Rate the course",
          "Join Our Discord Server ?",
          "Game Types (Digital, Analog, Gamification)",
          "Game Loops",
          "Game Arcs",
          "Quizz 1"
        ],
        "Game Industry": [
          "Game Careers (Part 1)",
          "Game Careers (Part 2)",
          "Game Industry",
          "Game Purposes",
          "Quizz 2"
        ],
        "Game Layers": [
          "Game Layers - How to separate elements",
          "Tutorials - How to teach the player",
          "Licensing - How to get free assets",
          "Quizz 3"
        ],
        "Development": [
          "Game Design Document",
          "Game Design Document - Template",
          "Examples of Game Design Documents",
          "Crowdfunding",
          "Publishing",
          "Top 10 Game Designer Mistakes",
          "Quizz 4",
          "Thank You and Congratulations"
        ]
      },
      "requirements": [
        "There are absolutely no prerequisites to take this course."
      ],
      "description": "[Com Legendas em Português]\nThis is NOT a Programming course, the Goal is to understand the theory behind the creation of games.\nYou will learn about many different aspects of Game Design and how they work, such as:\nWhat a Game is (Goal, Interaction, Obstacles and Rules)\nTypes of Games (Digital, Analog and Gamification)\nGame Loops\nGame Arcs\nGame Roles\nGame Industry (Publishers, Game Studios and Indie Game Studios)\nGame Purposes\nLayers of a Digital Game\nTutorials (Explicit, Implicit)\nLicensing (Royalty free, Creative Commons)\nGame Design Document (+ Template)\nCrowdfunding\nPublishing Games (Google Play, App Store, Steam and Itch io)\nBy the end of some classes, I’ll challenge you to do some exercises, to help you learn better. They are not mandatory, but they can make you become a better game designer.\nYou will also answer some Quizzes, to help you memorize what you learnt even more.\nYou’ll also be able to download the presentation used in this course.\nThis course will help you create a bionic eye, after your know how games are made, playing them will never be the same again.\nEnroll Now and I See you in the course!",
      "target_audience": [
        "People who want to learn about the Game Industry",
        "People who want to understand Game Theory",
        "Anyone who plans to work with Games in any area",
        "Humans that want to create a Bionic eye and play games as a Game Designer",
        "Teams who want to learn how to earn money by making games"
      ]
    },
    {
      "title": "Unity 3d | Using Light and Shadow in Game Development",
      "url": "https://www.udemy.com/course/unity-3d-using-light-and-shadow-in-game-development/",
      "bio": "Learn how to use light and shadow to create amazing game levels and scenes.",
      "objectives": [],
      "course_content": {
        "Introduction to the Course": [
          "Introduction",
          "Historical Background"
        ],
        "Light and Shadow In Unity 3D Game Development": [
          "Normals Part 1",
          "Normals Part 2",
          "Realtime Lighting",
          "Light Mapping Part 1",
          "Light Mapping Part 2"
        ],
        "Game Lighting Exercises": [
          "Light Mapping the Airlock Part 1",
          "Light Mapping the Airlock Part 2",
          "Illuminating Mars"
        ],
        "Getting the End Result": [
          "Post Processing"
        ],
        "Conclusion": [
          "Conclusion"
        ],
        "Bonus Material": [
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "Free version of Unity 3D"
      ],
      "description": "This course discusses how to work with lights and shadows in game development, including processing posts, light mapping and illumination are taught in-depth.\nYou will learn by creating real game scenes light the Unity Airlock scene. You will also venture out to Mars and light the Red Planet in stunning ways.\n* This course teaches Unity version 4.x",
      "target_audience": [
        "Beginning game developers",
        "Unity game developers"
      ]
    },
    {
      "title": "Develop Combat Game for 2 Players in 45 Minutes",
      "url": "https://www.udemy.com/course/develop-combat-game-for-2-players-in-45-minutes/",
      "bio": "Learn C# and Unity 3D",
      "objectives": [
        "Learn how to create animation trees and how to trigger animations",
        "Learn how to write code for player controller / movement",
        "Learn how to create simple user interface with added functionality",
        "Learn how to export your game to any platform you want",
        "Learn how to add gamepads / joysticks to your game",
        "Learn how to make multiplayer game"
      ],
      "course_content": {
        "Introduction & Preparation": [
          "Introduction & Preparation",
          "Preparing the Project"
        ],
        "Player 1 & Player 2": [
          "Player 1",
          "Player 2"
        ],
        "Final Touches": [
          "Final Touches",
          "Quiz"
        ]
      },
      "requirements": [
        "No programming experience needed ... You will learn everything you need to know",
        "Unity3D, available for free, link provided below first chapter"
      ],
      "description": "Hi, my name is Domen and today we will learn how to develop 2D combat game!\nIn this class, I would like to show you how easy it is to develop multiplayer combat game.\nHere's what we will learn:\nwe will learn about Unity3D engine and how to develop your games with it,\nwe will learn about programming basics with C# programming language.\nI strongly believe that, after finishing this class, you will be able to start your game development journey. You will finally have tools to create games that you always wanted to make. Who knows, maybe you even start your career as professional game developer one day.\nTogether, we will create simple 2D combat game for 2 players. All the assets from this class are available to download from links provided below each video lesson.\n\n\nChapters in this class:\n1. Introduction & Preparation\nquick introduction,\nwhat we will learn,\nhow to prepare for this class.\n2. Player 1\nhow to modify prefab,\nhow to add animations,\nhow to code/write scripts.\n3. Player 2\nhow to modify prefab,\nhow to add animations,\nhow to code/write scripts,\nhow to connect controllers.\n4. Final Touches\nhow to add user interface,\nhow to connect UI with scripts,\nhow to export the game.\nFor all of my students, I have created Discord server, where you can share your projects, hang out with other students or ask for help, if you have any questions about game development.\n\nRequired software to participate in this class: Unity3D. (Free; download link below class introduction)\n\nIf you have any questions or problems, I would be happy to help! If you like this class, please leave a review, it really helps me and it is very appreciated. :)\nI really hope to see you in my class. Domen",
      "target_audience": [
        "Beginner game developers curious to learn and experiment"
      ]
    },
    {
      "title": "Unity 2D: Creative Game Development for Beginners",
      "url": "https://www.udemy.com/course/unity-2d-creative-game-development-for-beginners/",
      "bio": "Unlock your potential with Unity 2D, design & deploy your first game!",
      "objectives": [
        "Learn how to build fully functional games",
        "Understand key concepts in game development and get comfortable navigating the Unity interface",
        "Develop a creative mindset by working through challenges like designing fun gameplay, building user-friendly interfaces, and implementing unique game mechanics",
        "Take your game from development to publishing on various platforms (Windows, web)"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Test the final playable version"
        ],
        "Base Game": [
          "Project Setup",
          "Parallax Backgrounds",
          "Player Movement and Animations",
          "Energy Management",
          "Asteroids and Obstacles",
          "Object Spawner",
          "Player Health and Collisions",
          "Pause and Un-pause",
          "Main Menu Screen",
          "Game Over Screen",
          "Particle Smoke",
          "Mission Complete Screen",
          "Win Condition",
          "Music and Sound Effects",
          "Damage Flash",
          "Phaser Weapon",
          "Object Pools",
          "Control Particles with Code",
          "Destructible Obstacles",
          "Harmless Space Critters",
          "Plasma vs Critters",
          "Heat vs Critters",
          "Secret Boss",
          "Cleaning-up and Refactoring",
          "Boss Behavior",
          "Utility functions",
          "Code Consistency",
          "Debugging and Game Balancing",
          "Export and Deploy Your Game"
        ],
        "Source Code Checkpoint": [
          "Source Code Checkpoint 1"
        ],
        "Advanced Features": [
          "Performance Optimizations",
          "Everything is an Object Pool",
          "Weapon Leveling",
          "Experience Bar"
        ],
        "Experiments with Enemy Types": [
          "Swarms of Enemies",
          "Enemies and Sine Waves",
          "Charging Enemy",
          "More Boss Types",
          "Enemy that Follows the Player",
          "Enemy that Shoots",
          "Boss that Shoots"
        ],
        "What's Next?": [
          "What's Next?",
          "Share Your Game With The World"
        ]
      },
      "requirements": [
        "No prior experience is required, but it's expected that you've built at least one small project in Unity before."
      ],
      "description": "Welcome explorer, I have a quest for you. Are you ready to create your very own space game? Let's learn how to build a classic 2D side-scrolling shoot 'em up game in Unity, and have a blast while doing it!\nYou’ll start by mastering the basics—setting up your project, getting comfortable with Unity’s tools, and designing smooth player controls. Then, you’ll dive into making enemies like asteroids, aliens, and living space machines, each with their own unique animations and behaviors. You’ll even design some unique mechanics to make your game challenging and exciting!\nBut it’s not just about gameplay—we’ll also cover creating awesome UI screens, like the Main Menu, Pause, and Game Over, and add cool sound effects to make everything pop. By the end of the course, you’ll have a fully functional space shooter game ready to show off.\nNo prior experience is needed, but it helps if you've built a Unity project or two before. Get ready to have fun, learn new skills, and bring your game ideas to life!\n\n\nThroughout the course, you'll also pick up some valuable game design tips, like how to create smooth difficulty curves and keep players engaged. Plus, you'll gain practical experience in animation, sound design, and performance optimization skills that will come in handy for any future game development projects you tackle. It’s the perfect way to get creative, have fun, and get good at Unity!",
      "target_audience": [
        "Aspiring game developers who want to create their own games from scratch.",
        "Beginners who have some experience with Unity and want to deepen their skills in game mechanics and programming.",
        "Anyone looking to get hands-on experience in Unity while building a complete, playable game from start to finish."
      ]
    },
    {
      "title": "Megascans Scene - Lost Road",
      "url": "https://www.udemy.com/course/mgs-scene-lost-road/",
      "bio": "Learn step-by-step how to create a destroyed road environment.",
      "objectives": [
        "Advanced Terrain Creation with Landmass Plugin",
        "Fully customizable PCG tools for Trees, Decals and Spline Decals (all included)",
        "Drawing a road with Nanite Tessellation",
        "Painting Vertex on Nanite Assets",
        "Using Nanite/Megascans assets",
        "Add details such as decals for dead leaves and debris.",
        "Add Volumetric Clouds",
        "Automatic Foliage Setup with Landscape Grass Types",
        "Create a realistic and natural lighting"
      ],
      "course_content": {
        "Introduction": [
          "Introduction & Provided Project Overview"
        ],
        "Landscape": [
          "Add Terrain",
          "Increase Resolution",
          "Set Textures for First Layer",
          "Road - Add First Road Segment",
          "Road - Drawing Road Spline",
          "Road - Set up Road Edge Falloff",
          "Road - Paint Terrain"
        ],
        "Add Mountains (Landmass Plugin)": [
          "Add First Mountain",
          "Set First Mountain Details",
          "Add Left Mountains",
          "Add Right Mountains",
          "Add Rock Texture on Slopes",
          "Fix Sharp Slopes"
        ],
        "Play with PCGs": [
          "Add Big Trees",
          "How Editor Parameters Work",
          "Add Medium Trees",
          "Add Small and Sapling Trees",
          "Optimizing Sapling Trees",
          "Add Road PCG Blocker",
          "Convert Sapling Trees as Nanite",
          "Add Seedling Trees"
        ],
        "Automatic Foliage (Landcape Grass Type / LGT)": [
          "Add Grass",
          "Add Purple Flowers",
          "Add Dry Plants",
          "Add Yellow Flowers"
        ],
        "Road Enhancement": [
          "Add Gravel Decals",
          "Set Edges with the Decals Spline Tool",
          "Merge Road - Convert Segments as One Static Mesh",
          "Merge Road - Weld Extra Vertices",
          "Merge Road - Enable Nanite",
          "Set Vertex Textures in Material Instance",
          "Set Middle Potholes",
          "Set Center Potholes",
          "Fix Landscape Holes",
          "Add Puddles",
          "Better Transition between Textures",
          "Add Foliage on Edges with the Foliage Tool"
        ],
        "Add Details": [
          "Import Decal Textures",
          "Play with PCG Decals Tool",
          "Add Small Stones"
        ],
        "Lighting": [
          "Set Sun Position",
          "Add Volumetric Fog",
          "Set up Sky Atmosphere",
          "Set up Post Process Volume",
          "Get a better Lighting (Local Exposure)",
          "Randomize Tree Placement & Set up Road Specular",
          "Set up Decals Specular & Improve Blending with Road",
          "Add Some PCG Blockers",
          "Fix Dark Shadows",
          "Things to know about Renderings",
          "New Random PCG Placement",
          "Improve Fog & Sun Position",
          "Add Volumetric Clouds",
          "Set up Volumetric Clouds",
          "Improve Water Reflection",
          "Set Leaves Specular & Outro"
        ]
      },
      "requirements": [
        "Owning a computer with Windows 10 or Windows 11",
        "Winrar or 7zip to decompress files",
        "The basics on Unreal Engine (Camera movements, working with material instances...)"
      ],
      "description": "Here is the second Megascans course! The goal is to get straight to the point and focus on composition and lighting only thanks to Megascans assets, provided shaders and tree packs.\n\n\nWhat I will learn?\nIn Unreal Engine 5.4.1:\nAdvanced Terrain Creation with Landmass Plugin\nFully customizable PCG tools for Trees, Decals and Spline Decals (all included)\nDrawing a road with Nanite Tessellation\nPainting Vertex on Nanite Assets\nUsing Nanite/Megascans assets\nAdd details such as decals for dead leaves and debris.\nAdd Volumetric Clouds\nAutomatic Foliage Setup with Landscape Grass Types\nCreate a realistic and natural lighting\nWorking with Quixel Bridge plugin natively available in UE5\n\n\nWhat I will get?\n~4h30 of step-by-step video tutorial\n~55 videos\n1080/30fps resolution\nSoftware Used:\nUnreal Engine 5.4.1\nLevel:\nAnyone who wants to learn, improve or fix their skills in environment creation.\nPrerequisite:\nOwning a computer with Windows 10 (64Bits) / Not tested on Windows 11\nWinrar or 7zip to decompress files\nThe basics on Unreal Engine (Camera movements, working with material instances...)\nImportant note :\nThis course was created in version 5.4.1 and it is STRONGLY RECOMMENDED to use THE SAME version! If you choose to use another version, be aware that you may encounter possible errors not covered in this course.\n\n\nAbout copyrights:\nAll you can find in this course are for personal usage only. You cannot share it, sell it or make it available for free on any platform.",
      "target_audience": [
        "Anyone who wants to learn, improve or fix their skills in environment creation."
      ]
    },
    {
      "title": "Game Dev: BomberMan with Python, Pygame and Oop!",
      "url": "https://www.udemy.com/course/game-dev-bomberman-with-python-pygame-and-oop/",
      "bio": "Develop a game using Python and Object oriented programming",
      "objectives": [
        "Expand your understanding and use of variables, lists, dictionaries, for loops and while loops.",
        "Expand your understanding and use of object oriented programming",
        "Conceptualize programming challenges and discover solutions and methods for implementing these solutions to those challenges",
        "Progress your python learning beyond learning the basics to a more advanced beginner project, gain confidence in tackling bigger projects.",
        "Work on importing various modules into your program, as well as importing data between various python files",
        "Sharing and updating data between the various objects within your program, updating the different objects when required, also updating the game stage",
        "Implementing various solutions to typical game development challenges, such as collision detection, animations, power-ups etc.",
        "Creating a Start Screen, a Menu Screen, a Game Screen, A Level Editor screen, allowing for user level development."
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "BomberMan Class",
          "Assets Class",
          "Game Class"
        ],
        "Creating the Player Character": [
          "Creating the Player Class",
          "Moving the Player Character",
          "Getting the Player Images",
          "Animating the Player Character"
        ],
        "Creating the Level": [
          "Creating the Level Matrix",
          "Creating the Block and Hard Block Class",
          "Creating the Soft block Class.",
          "Filling in the background, and Refactoring"
        ],
        "Player Movement Restrictions and Camera Movement": [
          "Performing Collision Detection",
          "Easier Navigation through the Game Area",
          "Creating the \"Camera\" and scrolling around the screen"
        ],
        "Setting the Bombs, Bomb Animations, Explosions, Explosion animations.": [
          "Creating the Bombs",
          "Inserting the Bombs into the level matrix, and Animating the Bombs",
          "Updating the Bomb Timer, exploding the Bomb, Updating the Player bomb count",
          "Limitng the Bomb Count, and Detonating the bomb at will"
        ],
        "Creating the Explosions and Fireballs": [
          "The Explosions",
          "Creating and Animating the Explosion",
          "Calculating the Flame Path 1",
          "Calculating the Flame Path 2",
          "Calculating the Flame Path 3",
          "Creating the Fireball Element",
          "Destroying the Soft Blocks in Game"
        ],
        "Creating Enemies, Enemy animation, Enemy Movement, Enemy Destruction": [
          "Creating the First Enemy - Ballom",
          "Moving the Enemy Character",
          "Changing Movement Direction after a Collision Detection",
          "Incorporating random Direction changes",
          "Animating the Enemy",
          "Populating the stage with Enemies"
        ],
        "Creating the More Advanced Enemies, Player Death and Respawn": [
          "Creating the Line Of Sight for Enemy Characters",
          "Refactoring the Enemy Class, loading in the Onil Enemy Character",
          "Chasing the Player Character",
          "Loading in the Remaining Enemies, adding the Enemy Specials",
          "Refactoring the Player Code",
          "Regenerating the Stage, Structuring the Enemy Load order"
        ],
        "Creating and Implementing the Special Power Up Items": [
          "Creating the Power Up Class",
          "Creating the Special Soft Blocks, Inserting them into the level matrix",
          "Creating each of the Special Power Up Methods, and calling them when needed.",
          "Ensuring all of the Power Abilities Work.",
          "Making the Invincibility Power up work, and Additional Collision detection.",
          "Implementing the Stage Exit item, and generating a New Stage",
          "Spawning new Enemies if exploding the special Items"
        ],
        "Creating the Information Panel": [
          "Importing the necessary images for the Info Panel",
          "Creating and Updating the Level Timer, and ensuring the countdown takes place",
          "Creating and updating the Player Lives info, and the player Score info",
          "Implementing Scoring into the game"
        ]
      },
      "requirements": [
        "Basic understanding of Python Programming, ie- variables, lists, dictionaries, classes.",
        "Basic understanding of importing modules, such as the pygame module",
        "Already have the pygame module installed (comes with python)"
      ],
      "description": "I have done so many of the regular projects out there, such as a tic tac toe, chess, hangman, asteroids, connect 4, but all of these projects felt small and I found there to not be much variety when it comes to game tutorials.\nMost tutorials all cover the same games, with only variations in how they are coded. I also found that most tutorials, do not go through every element of a game, such as the start screen, all of the power ups, the score screens, etc.\nThey usually only take you as far as the basic building blocks, and then leave you to create the rest, should you wish to continue.\nMost of these tutorials, have left me with a directory filled with what would be deemed as unfinished games.\nHence I thought it would be great to put together a course on creating a game, with all of the game elements created and implemented in a step by step process, that leaves you at the end of the course, with a fully functional, and complete game.\nMy hope is that you are able to understand how each element of this game is created and implemented, so that you gain further insight when deciding to tackle a challenge of your own.\nI also find the old games from the 80's and 90's as fantastic coding challenges, in particular when it comes to trying to understand how something may have been implemented.",
      "target_audience": [
        "Beginner Python Developers and enthusiasts",
        "Game Developers, Beginners and Hobbyists."
      ]
    },
    {
      "title": "The Complete 2020 Unreal Masterclass: Build 2D and 3D Games",
      "url": "https://www.udemy.com/course/the-complete-2020-unreal-masterclass-build-2d-and-3d-games/",
      "bio": "Learn video game development and how to build impressive games from scratch with the Unreal Engine",
      "objectives": [
        "Build classic 2D and 3D platformer games in Unreal engine 4",
        "Create multiple small games of different genres",
        "Develop games from scratch"
      ],
      "course_content": {
        "Unreal Overview": [
          "Unreal Overview - Part 1",
          "Unreal Overview - Part 2",
          "Unreal Overview - Part 3"
        ],
        "Create a quick shooter game": [
          "Crash course - Shooter - Part 1",
          "Crash course - Shooter - Part 2",
          "Crash course - Shooter - Part 3",
          "Crash course - Shooter - Part 4",
          "Crash course - Shooter - Part 5"
        ],
        "Unreal Platform Switcher": [
          "Crash course - Platform Switcher - Part 1",
          "Crash course - Platform Switcher - Part 2",
          "Crash course - Platform Switcher - Part 3",
          "Crash course - Platform Switcher - Part 4"
        ],
        "Unreal FPS": [
          "Crash Course - FPS Shooter - Part 1",
          "Crash Course - FPS Shooter - Part 2",
          "Crash Course - FPS Shooter - Part 3"
        ],
        "Developing a Turret-Based Game": [
          "Crash Course - Turret - Part 1",
          "Crash Course - Turret - Part 2",
          "Crash Course - Turret - Part 3",
          "Crash course - Turret - Part 4"
        ],
        "Create a Runner Switcher": [
          "Crash course - Runner Switcher - Part 1",
          "Crash Course - Runner Switcher - Part 2",
          "Crash Course - Runner Switcher - Part 3",
          "Crash course - Runner Switcher - Part 4",
          "Course Files"
        ],
        "Learning more about the Unreal engine": [
          "Getting Started In The Unreal Engine",
          "Moving around the Unreal Engine",
          "Moving Objects Around",
          "Adding Objects to the Scene",
          "Adding in Lights",
          "Adding Components to Objects",
          "Saving work",
          "Intro to Blueprints",
          "Level Blueprints and Object Blueprints",
          "Changing Components in the Object Tree",
          "Introduction to the Common Kinds of Variables",
          "Setting Variables and Capitalization",
          "Getting Setting and Converting Variables",
          "Printing to the Log and Using Variables"
        ],
        "Learning about Rapid Prototyping": [
          "Prototyping the Level",
          "Making a playable game",
          "Adding Hit Logic",
          "Counter to Cube Destructions",
          "Adding a Timer",
          "Rounding up",
          "Light on the Projectile",
          "Random Color",
          "Spot Lights",
          "Wrapping Up Project"
        ],
        "Prototyping a Shooting game": [
          "Setting up Prototype",
          "Shoot Gallery",
          "Set up levels",
          "Ball Physics",
          "Create a Spawner",
          "Impulses",
          "Destroying the balls",
          "Adding Explosion to the ball",
          "More on Spawning objects",
          "Heads up display",
          "Refactoring",
          "Adding Timer",
          "Testing Prototype-Fix",
          "Wrapping up"
        ],
        "Prototyping a Shootdown game": [
          "Prototyping the Level",
          "Changing the FPS character",
          "Disabling the barrier collision",
          "A target to fire at",
          "Ball Health and Transform",
          "Adding Spawner",
          "Ball above the spawner",
          "Scoring System",
          "Refactoring Code",
          "Kill all Ball",
          "Fixing Explosion problem",
          "Optimizing Explosions",
          "Adding Final ball",
          "Testing the No Gravity",
          "Spawner Bouncing ball",
          "Adding impulse",
          "Adding timer",
          "Destroying classes",
          "Purple Kill all",
          "Conclusion of Section"
        ]
      },
      "requirements": [
        "The (free) Unreal Engine 4. We will walk you through the simple installation and setup process.",
        "A computer with an Internet connection. This course is suitable for Mac or PC."
      ],
      "description": "This project is the world's biggest on-demand tutorial series designed to teach ANYONE how to code and build impressive games with the Unreal Engine.\nBenefits of Learning Unreal\nPopular - Unreal is a free game development engine used by developers all the way from beginner indie developers to AAA studios. The community is large and available for help.\nPowerful - Unreal is a powerful engine, with a huge library of image assets available for you to use as much as humanly possible, saving hours of development time.\nHigh Definition - Unreal is one of the main engines to use because it is so good at making good looking and high quality games. Unreal has high fidelity, meaning you can zoom in and still have high quality images.\nCoding Optional - The best part about Unreal is their blueprint system, letting you build games without coding. We have been using Unreal technologies since UDK and are delighted to see that the blueprint system is incredibly robust and resource-efficient.\nResource-Efficient - You can minimize loss of performance by a large amount simply by using Blueprints.\nOther Industries - Unreal is for more than just game development. You can get hired in filmmaking, architectural design and product visualization, to name a few.\nFor instance, Mcclaren Automotive uses Unreal to let users visualize their own unique luxury car before building it. Unreal Engine has even been used to build Star Wars-themed areas in Disney World and Disneyland.\nThe Weather Channel used mixed reality to visualize Hurricane Florence's floods.",
      "target_audience": [
        "You're an absolute beginner who needs to build a larger portfolio",
        "You're a programmer who wants to upskill to game development",
        "You're curious about the Unreal Engine but have struggled to find a clear series of tutorials to finish a project",
        "You want to build a game to show your friends and family",
        "You want to learn to code by building hands-on projects",
        "You're a professor/teacher who needs to make a game development curriculum",
        "You want to take your education into your hands by learning online"
      ]
    },
    {
      "title": "Unity C# Game Development 101: Learn by making games (2022)",
      "url": "https://www.udemy.com/course/unity-game-development-101/",
      "bio": "Design & Develop Video Games in Unity 101 . Learn the fundamentals by creating a fun game.",
      "objectives": [
        "Learn and improve your knowledge of C#.",
        "Learn the fundamentals of the Unity Engine (audio, AI, GUI etc.), a powerful game engine.",
        "Learn how the process of designing a game from scratch (video game design).",
        "Learn basic programing patterns especially useful for game development.",
        "Practice and learn with CHALLENGES which are given in almost every lecture video.",
        "Make a fun and engaging 3D game in Unity",
        "Learn the basics of Object Oriented Programing",
        "The code is always attached to the lectures as resources."
      ],
      "course_content": {
        "Introduction": [
          "Intro & Overview (+ Game Showcase)",
          "Unity Engine Version (important)"
        ],
        "Unity 3D 101: Learn by making games": [
          "GAME DESIGN 101: Preparing, planning, organization & GDD",
          "Project Setup",
          "GAMEOBJECTS? Creating our Player & Getting the player input",
          "OBJECTS, COMPONENTS, PHYSICS 101: Implementing Player Movement",
          "CAMERAS 101: Creating the camera system",
          "Creating the enemy",
          "IMAGE EFFECTS 101: Post-Processing",
          "Spawning enemies (Instantiation)",
          "COLLISION 101: Registering Collision & Player health",
          "USER INTERFACE 101 (GUI): Health and Score",
          "Player Movement Part 2: Jumping",
          "AUDIO 101: Adding sound effects, music etc.",
          "PARTICLE EFFECTS 101: Adding particles"
        ]
      },
      "requirements": [
        "No prerequisites, knowing the basics of programing is a plus."
      ],
      "description": "This Unity 101 course is taught by the lead developer of Coreffect Interactive, a professional indie game studio that has released a successful title on Steam, and is currently developing a large scale game in partner with a prominent publisher.\n\nUnity is one of the most popular 3D tools used to make video games, movies and more. You will learn how to use most aspects of this powerful engine by creating a game.\n\n\nEven if you have no experience with coding and game development tools, we will guide you through every aspects of game development and will teach you how to navigate Unity.\n\n\nThis course is project-based, which means that you will learn everything BY creating your own game. This method of teaching has been proven to be a lot more effective than traditional techniques. All the project files are included, as well as additional references and resources to make sure that you will never get stuck.\n\n\nAlmost every lecture contains a challenge, which will make sure you understand the material. In theses challenges, you will implement what you have learned.\n\n\nYou will get full lifetime access for a fee and can refund the course within 30 days! We are professional qualified and experienced game developers, and are able to explain our knowledge effectively.\n\n\nThis course is for anyone who wants to turn there ideas into games, and the knowledge you learn will apply to many other fields.\nWe guarantee you will be satisfied with the course!",
      "target_audience": [
        "Anyone who wants to learn to code by making games.",
        "People who want to learn to make video games.",
        "People who are new to Unity"
      ]
    },
    {
      "title": "Unreal Engine & SpeedTree Growth Animation",
      "url": "https://www.udemy.com/course/unreal-engine-speedtree-growth-animation/",
      "bio": "Bring animations of SpeedTree foliage to Unreal Engine",
      "objectives": [
        "Create growth animation to Unreal Engine"
      ],
      "course_content": {
        "SpeedTree": [
          "Introdução",
          "Export Tree Animation"
        ],
        "Unreal Engine": [
          "Import Tree",
          "Level Sequencer",
          "Configuring Tree Animation inside Level Sequencer",
          "Fixing Textures Leaf",
          "\"BULK EDIT\" Editing textures with one click",
          "Fixing Blink animation Pt.1",
          "Fixing Blink animation Pt.2",
          "Illumination",
          "Sequence Display Rate",
          "Multiple Trees",
          "How to do a small forest",
          "Tree size Variation",
          "Tree time variation"
        ]
      },
      "requirements": [
        "Unreal Engine and SpeedTree users"
      ],
      "description": "SpeedTree have a nice feature for create growth animation foliage, before was just possible use the animation for 3ds Max renders, in this course you will learn how to bring all frames of your animation to Unreal Engine and create a beautiful Growth Animation using UE4 or UE5.\nThis course was inpired by the making of \"Noah (2014) Behind The Magic - The Visual Effects\" video from youtube.\nI've always want to do some VFX of SpeedTree animation to my own Projects of Unreal Engine 4, and after a Livestream of SpeedTree in his Youtube Channel about Growth Animation, i've tried again to use the features of animation to Level Sequencer of UE4 and UE5, and the result is fantastic.\nUnreal Engine is a complete suite of development tools for anyone working with real-time technology. It gives creators the freedom and control, compelling visualizations, and immersive virtual worlds. UE4 - UE5 can be used in Games, Architecture, Automotive & transportation, Broadcast & live events, Film & television and more...\nSpeedTree is a procedural 3D vegetation modeling for VFX and Games, was used in so many Films, TV Shows, and AAA Games like: Red Dead Redemption 2, Battlefield Series, The Last of Us, Far Cry, Forza, Days Gone, Death Stranding, A Plague Tale: Innocence, Metro Exodus, Gears of War, PUBG, Escape from Tarkov, Call of Duty... and much more.\nSpeedTree allow 3D artist to create with procedural tools all types of vegetation assets like: grass, plants, trees, ivy, ground foliage and with Unreal Engine we can render our Growth animation to be used in many different places especially with Games.",
      "target_audience": [
        "Game Developers"
      ]
    },
    {
      "title": "Unity from Zero to Proficiency (Foundations)",
      "url": "https://www.udemy.com/course/unity-from-zero-to-proficiency-foundations/",
      "bio": "A step-by-step guide to creating your first game with Unity",
      "objectives": [],
      "course_content": {
        "Introduction": [
          "Update for Unity 2019",
          "Learning objectives for this section",
          "Downloading Unity",
          "Installing Unity",
          "Launching Unity",
          "Checklist"
        ],
        "Part 2: Becoming Familiar with the Interface": [
          "Learning objectives for this section",
          "Understanding the different views and layouts",
          "Using the Transform Tools",
          "Quiz"
        ],
        "Part 3: Creating and Manipulating Built-In Objects": [
          "Reminder about Unity 2019",
          "Learning objectives for this section",
          "Adding shapes and textures",
          "Using a First-Person Controller",
          "Duplicating objects, and applying colors",
          "Creating a staircase with boxes",
          "Using and following a Third-Person Controller",
          "Please leave a Review"
        ],
        "Part 4: Managing your assets": [
          "Learning objectives for this section",
          "Searching for assets and objects",
          "Exporting the scene to WebGL (part 2)",
          "Exporting the scene to WebGL (part 2)",
          "Exporting the scene to WebGL (part 3)",
          "Exporting the scene to WebGL (part 4)",
          "Checklist",
          "Quiz"
        ],
        "Part 5: Creating Indoors Environments (Maze)": [
          "Learning objectives for this section",
          "Creating a 3D Maze (part 1)",
          "Creating a 3D Maze (part 2)",
          "Creating a 3D Maze (part 3)",
          "Tidying-up the maze",
          "Challenge 1",
          "Challenge 2",
          "Checklist",
          "Quiz"
        ],
        "Creating Outdoors Environments": [
          "The Plan for the island",
          "Learning objectives for this section",
          "Adding and setting-up a new terrain",
          "Adding Water",
          "Adding trees and hills and texturing the island",
          "Erazing textures and adding realistic grass",
          "Adding Grass",
          "Adding buildings",
          "Adding Vehicles",
          "Controlling the Plane",
          "Challenge 1",
          "Challenge 2",
          "Quiz",
          "Checklist"
        ],
        "Frequently Asked Questions (FAQ)": [
          "Navigation",
          "Transformations and Assets",
          "Creating, organizing and Searching for objects and assets",
          "Bonus Lecture: FREE Book on C# Programming with Unity"
        ]
      },
      "requirements": [
        "No prior material is required. We will learn how to install and launch the software in the first lessons.",
        "No prior programming experience or knowledge of Unity is required.",
        "You just need to be able to perform common computer tasks such as downloading items, opening and saving files, and be comfortable with dragging and dropping items and typing."
      ],
      "description": "Unity is a great software to create video games; however, it includes so many options and features that getting started can feel overwhelming.\nWithout my course, most people spend too long trying to learn how to use Unity the hard way. This course is the only one that will get you to learn Unity fast without wasting so much time. This course is the first course in the series \"Unity from Zero to Proficiency\" where you will learn to code fast and be able to create your own video games with Unity in no time.\n\n\nWhat you will learn\nAfter completing this course, you will be able to:\nKnow and master the features that you need to create 2D and 3D environments for your games.\n\nQuickly create (and navigate through) realistic 3D indoors and outdoors environments.\n\nCreate a 3D Maze with lights, walls, and textures.\n\nUse ProBuilder to create a house.\n\nCreate an island with trees, sandy beaches, mountains, and water.\n\nInclude and control a car and a plane.\n\nCreate a 2D platform game (with no scripting needed).\n\nExport your games to the web.\n\n\n\nWho this course is for\nThis course is for:\nHobbyists who need a book that gets them started with Unity and game development easily.\n\nParents looking for a course that introduces their children to game programming painlessly.\n\nTeachers looking for a complete and clear resource on programming through the creation of games.\n\nAspiring indie game developers.\n\n\n\nHow this course is different\nThis is the only course that you need to get started with Unity fast and to enjoy the journey without frustration. This course includes tutorials that painlessly guide you through the necessary skills to master Unity's interface, use its core features, and create and navigate through realistic 2D and 3D environments. It assumes no prior knowledge on your part and ensures that you have all the information and explanations that you need every step of the way.\n\n\n\n\nWhat this course offers\nThis book includes all the features that you need to get started with Unity and game development:\nLearn without the headaches: This course assumes that you can't be expected to learn everything at once; this is why you will build all your skills incrementally.\n\nMake your dream of creating your own games come true: This course ensures that you stay motivated by giving you the right amount of information and challenge in each chapter; we all know that it's hard to keep motivated when learning a new skill, so this course always contextualizes the knowledge with an example (so that you feel it's relevant), and also makes sure that you get to challenge yourself, if you need to, with optional challenges present at the end of each chapter.\n\nProgress and feel confident in your skills: You will have the opportunity to learn and to use Unity at your own pace and to become comfortable with its interface. This is because every single new concept introduced will be explained in great detail so that you never feel lost. All the concepts are introduced progressively so that you don't feel overwhelmed.\n\nCreate your own games and feel awesome: With this course, you will build your own 2D and 3D environments and you will spend more time creating than reading, to ensure that you can apply the concepts covered in each section. All chapters include step-by-step instructions with examples that you can use straight-away",
      "target_audience": [
        "Aspiring game developer with no experience in game development.",
        "Total beginner in Unity.",
        "Anyone who would like to become familiar with Unity and use some of the most commonly-used built-in features.",
        "Experinced C# coder who would like to start creating games but with no experience of Unity.",
        "Anyone who want to become proficient in the core functionalities offered by Unity."
      ]
    },
    {
      "title": "Master Flame Game Engine with Flutter: Build 2D Mobile Games",
      "url": "https://www.udemy.com/course/master-flame-game-engine-with-flutter-build-2d-mobile-games/",
      "bio": "A practical guide to creating 2D games with Flutter & Flame for Android & iOS—animations, collisions, physics, and more.",
      "objectives": [
        "Build 2D mobile games from scratch using Flutter, the Flame engine, and Forge2D physics.",
        "Implement realistic game mechanics with physics-based movement, gravity, collisions, and object interactions.",
        "Work with sprites, sprite sheets, animations, audio, and parallax backgrounds to create polished and engaging gameplay.",
        "Develop interactive game mechanics like shooting, scoring, health systems, enemies, and levels.",
        "Apply best practices in game architecture with Flutter for scalable and maintainable projects."
      ],
      "course_content": {},
      "requirements": [
        "Basic knowledge of Flutter & Dart programming (building simple apps, using widgets, and running them on a device/emulator).",
        "A computer (Windows, macOS, or Linux) with Flutter installed.",
        "An Android or iOS device/emulator for testing games.",
        "No prior game development experience is required — you’ll learn everything step by step with Flame."
      ],
      "description": "Master Flame Game Engine with Flutter: Build 2D Mobile Games is the ultimate hands-on course for Flutter developers who want to step into the world of game development. Whether you’ve built apps before or are completely new to game programming, this course will guide you step by step in building fun and interactive 2D games using the Flame game engine.\nWe’ll start with an introduction to Flame and explore the essential building blocks like text, shapes, movement, timers, tap events, and collision detection. From there, you’ll put your skills into practice by creating Ramp Hit Game, a brick-breaker style game with collisions, reflections, obstacles, and sound effects.\nNext, you’ll learn how to work with sprites, sprite sheets, animations, and parallax backgrounds, and then dive into an action-packed Space Shooter Game complete with enemies, shooting mechanics, explosions, scoring, and a camera that follows the player.\nIn the advanced sections, we’ll explore Forge2D, Flame’s physics engine, where you’ll learn about bodies, gravity, and physics-driven components. You’ll then apply these concepts by building Color Catch Game, where balls must be sorted into the correct buckets using physics, collisions, and creative rendering techniques.\nBy the end of this course, you won’t just know Flame basics—you’ll have built multiple complete games and gained the confidence to design and develop your own unique 2D games with Flutter and Flame.",
      "target_audience": [
        "Flutter developers who want to expand their skills into 2D game development.",
        "Beginners in game development who already know Flutter basics and want a step-by-step introduction to the Flame engine."
      ]
    },
    {
      "title": "Introduction to Sprite Kit with Swift 3",
      "url": "https://www.udemy.com/course/introduction-to-sprite-kit-with-swift-3/",
      "bio": "Learn the basics of game development using Xcode",
      "objectives": [],
      "course_content": {
        "Introduction to Sprite Kit with Swift 3": [
          "The Sprite Kit Starting Template",
          "Adding a Player with Physics Properties",
          "SKActions and Detecting Touches",
          "SKAction Groups / Sequences and Run Blocks",
          "Short Interlude to look at a Cross Platform Project",
          "Adding Gesture Recognizers",
          "Detecting Physics Contacts Between Bodies",
          "Changing zPositions at RunTime, Custom Classes and Conclusion"
        ]
      },
      "requirements": [
        "Download Xcode 8 or higher",
        "Have a burning desire to learn one of the best game development platforms!"
      ],
      "description": "Jump right into game development with this hands-on style approach to learning Sprite Kit.\nLecture 1 - This video is a quick tour of the general settings in Xcode 8, and the GameScene.sks file. We'll tinker a bit with some physics properties and run the Simulator a few times to experiment. If you already have some experience with Xcode, you can skip this intro video.\nLecture 2 - In this video tutorial we'll jump right in by adding player art assets to the game, then use them in our Sprite Kit Scene file by setting physics properties on an SKSpriteNode. We'll tinker with some of the physics, then look at how to declare / cast an SKSpriteNode variable in the GameScene.swift which equals the child node setup in the Scene (.sks file).  Sounds like a lot, but its a quick and painless introduction to the power of Sprite Kit and the Scene Editor.\n\nLecture 3 - In this video tutorial, we'll continue where we left off in the last video and run SKActions on our player. We'll work both with programmatically setup SKActions as well as Actions created using the Timeline in the Scene Editor. Then we'll work with detecting touch locations as well as using the update function to check on the player's location.\n\nLecture 4 - In this video, we'll continue working with SKActions, by changing the previous lesson's walk actions into a sequence of actions. This will allow you to run code at the end of a sequence. In this example, when the player begins walking we'll make gravity affect him (creating an effect like wind is pushing him), then when the player has stopped walking, gravity will no longer be in affect. We'll also look at create a speed variable for movements and frame animations of the player.\nLecture 5 - We'll take a short break from the previous project and explore the Cross Platform Sprite Kit template included with Xcode. This is a project that has an iOS, tvOS, WatchOS and MacOS Target. The neat thing about this template is all four device types use the same GameScene.swift and GameScene.sks files. So ideally, you can code once and deploy to all those devices. We'll also look at how to add files to a particular device Target after they've already been imported or created (this is done in Xcode's Build Phases tab)\nLecture 6 - In this video tutorial we'll add Swipe, Tap and Rotation gestures recognizers to the scene. We'll discuss properties and related functions for each, as well as converting radians to degrees and removing all gestures from the scene.\nLecture 7 - In this video tutorial, we'll add an SKPhysicsContactDelegate to the class, then add a didBegin contact statement to listen out for physics notifications from bodies. This requires setting the categoryBitMask and contactTestBitMask on the player and a hypothetical building object that we add this lesson.\nLecture 8 - In this final video, we'll use the update method to check where the player is and then change the zPosition (layering) of buildings based on that value. This will make it look like the player is visually in front of or in back of a particular building. Then finally we'll create a Castle class, or subclass of SKSpriteNode, and demonstrate how this custom class can have it's own functions and properties.",
      "target_audience": [
        "New developers to iOS, Swift or Sprite Kit",
        "Existing app developers that want to learn game development"
      ]
    },
    {
      "title": "Unreal Engine & Git - Free and easy source control",
      "url": "https://www.udemy.com/course/free-easy-source-control/",
      "bio": "How to combine Unreal Engine with Git and GitHub in order to have a full source control setup for your projects.",
      "objectives": [
        "How to combine Unreal Engine with Git and GitHub in order to have a full source control setup for your projects.",
        "Everything you need to know for the start about Git, GitHub, Sourcetree and Source control",
        "How to create your REPO and how to create your project and clone repo from Github",
        "How to Push/Pull changes on your project",
        "How to collaborate with your colleagues/peers/clients and work on the same project using GitHub",
        "And other things needed to be completely ready to start using Git and have more control on your Unreal Engine projects"
      ],
      "course_content": {
        "Welcome": [
          "Welcome"
        ],
        "Overview": [
          "Introduction",
          "Requirements",
          "What is VSC, GitHub and Git GUI",
          "Source control graphical overview",
          "Required steps"
        ],
        "Installing Git and Sourcetree": [
          "Installing GIT",
          "Installing Sourcetree"
        ],
        "Repository": [
          "Creating Repository (repo) on GitHub",
          "Creating Unreal engine project",
          "Cloning repo from GitHub",
          "Adding project files to local repository",
          "Initial commit",
          "Make and Push more changes"
        ],
        "Another PC clone and Push": [
          "Cloning the repo to another PC",
          "Making Changes from another PC"
        ],
        "Pulling the changes": [
          "Pulling the changes"
        ],
        "Alternative way for cloning repository": [
          "Alternative way for cloning repository"
        ],
        "Big commits": [
          "Forcing push to fail",
          "Setting the commit correctly",
          "How to reset branch to earlier commit",
          "How to reset commit that failed to push",
          "How to work on the same level at the same time"
        ],
        "Additional lessons": [
          "How to set Sourcetree Dark theme",
          "GitHub and Telegram integration",
          "Adding GitHub notification bot to your Discord server"
        ]
      },
      "requirements": [
        "No programming knowledge.",
        "Unreal Engine installed"
      ],
      "description": "In this course you can learn how to combine Unreal Engine with Git and GitHub in order to have a full source control setup for your Unreal Engine projects. Benefits of having a source control is so that you can have your projects backed up in a cloud, you can access them from multiple devices, collaborate with other developers on the same projects and have your projects better organized. This course is all in one if you are a beginner or just want to understand Source Control more in depth. Free and Easy Source control for Unreal Engine course is made for Unreal Engine projects, but you can use source control for any software and the process is the same as it's shown here. You can use source control for Adobe, 3ds max, Premiere...\n\n\nIn this course you will learn:\n\n\nHow to combine Unreal Engine with Git and GitHub in order to have a full source control setup for your projects.\n\nWhat is Git?\nWhat is GitHub?\nWhat is Sourcetree?\nWhat do you need for the start?\nHow to create your repo?\nHow to create your project and clone repo from GitHub?\nHow to Push/Pull changes on your project?\nHow to collaborate with your colleagues/peers/clients and work on the same project using GitHub?\nGitHub and Telegram integration\n\nAnd other things needed to be completely ready to start using Git and have more control on your Unreal Engine projects.",
      "target_audience": [
        "This course is all in one if you are a beginner or just want to understand Source Control more in depth."
      ]
    },
    {
      "title": "Create a Dark Moody Atmospheric 2D game with Unity & C#",
      "url": "https://www.udemy.com/course/create-a-moody-atmospheric-dark-2d-game-with-unity-c/",
      "bio": "Learn how to create 2D video games by making a Moody Dark Atmospheric 2D Game with Unity 2022 and C#",
      "objectives": [
        "Creating Games Using Unity",
        "Creating Games With C# Programming Language and Unity",
        "C# Fundamentals",
        "Unity Fundamentals",
        "Logical Thinking",
        "Animating Characters In Games",
        "Lighting in games",
        "Sound effects for Video-Game Development",
        "Learn basic game logic",
        "Create Video Game Animations",
        "Create basic physics for your characters"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Installing the Unity Game Engine",
          "Understanding Unity's UI",
          "Hotkey Shortcuts",
          "What are Components? + Game FIles"
        ],
        "Player Controller": [
          "Left and Right Movement",
          "Adding Player Sprite",
          "Jump Mechanic",
          "Double Jump Mechanic",
          "Animating The Player",
          "Dash Functionality",
          "Trail Renderer",
          "Fixing Dash and Bugs",
          "Removing Player's Control While Dashing",
          "Wall Jump Mechanic",
          "Tile Map Editor",
          "Adding Lights",
          "Cinemachine",
          "Decorating The Game's Environment",
          "Particle Effects",
          "Sounds",
          "Collectable Items",
          "Sound Effects",
          "Invisible Wall",
          "Player Destroy Effect",
          "Main And Credits Menu",
          "Pause Menu",
          "Fixing Pause Bug",
          "Building The Game",
          "Conclusion"
        ]
      },
      "requirements": [
        "No programming Experience needed",
        "No Game Development Experience needed",
        "Have a working PC/MAC",
        "Being Creative and Having Fun!"
      ],
      "description": "This course is designed to ensure that you learn the fundamentals of Unity and the C# scripting language it uses specifically we'll be making a Dark/Atmospheric 2D game.\nThings you'll learn in this course:\nLearning how to Implement 2D Lighting to your game.\nLearning How to Implement and use Unity's Particle System to create some nice looking effects.\nProgramming a Player Controller that Double Jumps, Dashes, Wall Jumps and more!\nLearning How to add Trails and to specify when to use it.\nAdding Tiles using Unity's Built-In Tile set Editor.\nAdding a Pause Menu.\nUsing A smart camera (Cinemachine) to follow out player.\nBasic Unity Animation and when to tell our game to start animating.\nUnderstanding how physics and Rigidbodies work in Unity.\nUnderstanding how variables and functions work in C#.\nAdding a basic score system.\nlearning how to add buttons and making a full main menu.\nand finally building and exporting your game to android.\nAnd More You will discover in the course.\nas well as you'll also gain a deeper understanding of how things work in unity and understanding how to make an Artmospheric 2D game like what we'll be making in this course.\n\n\nNOTE: This course is NOT for who is advanced in unity game development, it will only waste your time.",
      "target_audience": [
        "Anyone Wanting to learn Unity Game Development",
        "Anyone Wanting to learn C#",
        "Anyone wanting to make a game",
        "Programmers that want to learn Game Development"
      ]
    },
    {
      "title": "Unity Mobile Game - Create Hyper Casual Game Stickman Hook",
      "url": "https://www.udemy.com/course/unity-mobile-game-create-hyper-casual-game-stickman-hook/",
      "bio": "Learn, Create, Stickman Hook Hyper casual mobile game from scratch in unity",
      "objectives": [
        "How to setup your project for mobile",
        "How to create a simple Hyper Casual Game from scratch",
        "How to get / make the assets you'll need for your Game",
        "Create a Logic for your Game"
      ],
      "course_content": {
        "Introduction": [
          "Intro"
        ],
        "Create and Setup Project": [
          "Create a Project",
          "Setup Project Layout",
          "Adding Sprite Into the Scene"
        ],
        "Lets Start Making Our Game": [
          "Add Player and Joint into the scene",
          "Time to Write Some Code",
          "Write a Code For Our Joints",
          "Continue to Code Stickman",
          "Change the Sprite Using Code"
        ],
        "Camera Movement": [
          "Adding Camera Movement Logic"
        ],
        "GameManager": [
          "Adding Game Manager Script"
        ],
        "Particle System and Trail Effect": [
          "Make a Player Win Particle Effect",
          "Add Trail Effect"
        ],
        "Lets Polish Our Game": [
          "Add Shadow to the Object Using Code",
          "Make Dynamic Shadow For Player",
          "Tiles Animation and Bounce"
        ]
      },
      "requirements": [
        "The will to understand and finish this course",
        "basic Unity knowledge is appreciated but not compulsory",
        "A Computer with an internet connection"
      ],
      "description": "In this course, you'll learn how to create a cool and fun hyper-casual game using Unity. We will cover everything from creating variables and methods to integrating sprite images into your game. By the end of the course, you'll put all of this knowledge together to develop a complete mobile game that you can play and even publish on the App Store and Google Play Store.\n\n\nBy the end of this course, you'll be able to:\n\n\nCreate your own similar game from scratch\nAnimate sprites using code\nControl the flow of your game with ease\nDevelop game managers to help you manage game states, just like in real-life projects\nWhy This Course is For You:\nThis course is designed to be comprehensive yet easy to follow, making it perfect for beginners and those looking to expand their game development skills. I will be there to support you every step of the way, answering questions and providing guidance to ensure you understand every concept and technique.\nMost importantly, I want you to enjoy the process of making games. Game development is not just about coding; it's about creativity, problem-solving, and bringing your ideas to life. Throughout this course, you'll gain a deeper understanding of game design principles and have fun experimenting with different mechanics and features.\n\n\nMost importantly, you'll learn a lot! And if you have any questions along the way, I’ll be there to\nguide you and ensure you understand every step of the process. I want you to succeed because making games is both easy and fun!\nDon’t wait any longer—enroll now and start creating your game today!",
      "target_audience": [
        "Person who want to learn how to make their own mobile game from scratch",
        "Person who want to create something and share that with their family and friends",
        "Person who want to publish their games in playstore appstore and steam"
      ]
    },
    {
      "title": "Let's Make a Car Racing Game in Python",
      "url": "https://www.udemy.com/course/lets-make-a-car-racing-game-in-python/",
      "bio": "Learn to make a Car Racing Game using PyGame Module + Learn Tkinter: The GUI Module for making visually appealing Games",
      "objectives": [
        "Learn to make a Car Racing Game in Python",
        "Learn to make many types of other Games as well",
        "Learn Tkinter : The GUI Module",
        "Learn PyGame : The Module for Game Development in Python"
      ],
      "course_content": {
        "Installing Python and Setting up the Python IDE": [
          "Installing Python and Setting up the Python IDE"
        ],
        "Car Racing Game in Python Part - 1": [
          "Loading Images and Clock for the Game",
          "Creating the Dodge Car Class",
          "Creating the Game Loop and Displaying the Front Window"
        ],
        "Car Racing Game in Python Part - 2": [
          "Working on the Events Part of the Game",
          "Working on the Opponent Cars and Score in the Game",
          "Working on the Crash and Explosion Part of the Game",
          "Working on the Road"
        ],
        "Car Racing Game in Python Part - 3": [
          "Working on the Main Function and Coordinates of Different Objects",
          "Pause and Un Pause the Game",
          "Game Over Part",
          "Changing Opponent Cars Speed",
          "Checking Crash with the Opponent Cars",
          "Game Complete : Final Explanation and Execution"
        ],
        "PyGame Crash Course": [
          "Introduction to PyGame",
          "PyGame vs Pyglet",
          "Import Pygame",
          "Foundation Concepts on PyGame",
          "PyGame Clock and Blit",
          "Loading an Image",
          "Displaying Text",
          "Key Detection in PyGame",
          "Primitive Drawing Shapes",
          "Making an Object Jump",
          "Load or Play Audio",
          "Moving an Object",
          "Creating Interactable Buttons",
          "Adding Boundaries to an Object",
          "Snow Display using PyGame",
          "Bubble Sort Visualizer"
        ],
        "Tkinter Crash Course": [
          "Introduction to Tkinter",
          "PyQt vs Tkinter",
          "Tkinter Widgets",
          "Tkinter Standard Attributes Part - 1",
          "Tkinter Standard Attributes Part - 2",
          "Buttons Part - 1",
          "Geometry Management",
          "Tkinter Standard Attributes Part - 3",
          "Buttons Part - 2",
          "Tkinter Canvas",
          "Tkinter CheckButton",
          "Entry Widget",
          "Tkinter Frame",
          "Tkinter Label",
          "Tkinter ListBox",
          "Tkinter MenuButton",
          "Tkinter Menus",
          "Tkinter Message",
          "Tkinter RadioButton",
          "Tkinter Scale",
          "Tkinter Scrollbar",
          "Text Widget",
          "Top Level Widget",
          "Calculator Application Part - 1",
          "Calculator Application Part - 2"
        ],
        "Python Crash Course": [
          "Python Crash Course Part - 1",
          "Python Crash Course Part - 2"
        ]
      },
      "requirements": [
        "Basics of any Programming Language is Required"
      ],
      "description": "In this course, we have made a visually appealing Car Racing Game in Python. The Game has covered almost all the concepts for making Game Applications in Python. In Game Development, we need to learn how objects move and updates their positions, how collisions between different objects are detected, what are the boundary lines of the Game, speed of different objects in the Game and much more. We have covered all these concepts in this Game, thus, by taking this course, you will not only learn how to make this Game but you will then be able to make many stunning Games using the Knowledge you will get in this Course.\n\nIn addition to it, we have crash course on Tkinter and PyGame. Tkinter is the module in Python used to make Visually Appealing Applications. Tkinter is very popular as it is very simple and easy to write. We can write very little code in Tkinter and the result of it is just Phenomenal. We have covered almost everything related to Tkinter so that in the future, if you want to make Games or any other Applications in Python, you can use these concepts to make your Applications look Just Awesome with Tkinter.\n\n\nPyGame is the most popular Module in Python for Game Development. It has made the Game Development in Python very easily. We have a separate Section covering PyGame almost every Concept so that if you want to make more High Level Games in Python, you can have the knowledge of PyGame to make things very simpler for yourself.\n\n\nYou have so much to Learn in this Course.\n\n\nBest of Luck",
      "target_audience": [
        "Anyone who wants to make a Car Racing Game in Python",
        "Anyone who wants to make different types of Games in Python",
        "Anyone who wants to learn Tkinter : The GUI Module for Making Visually Appealing Games",
        "Anyone who wants to learn PyGame : The GUI Module for Making Games in Python"
      ]
    },
    {
      "title": "Practical Game Development in Unity 4: Level 1",
      "url": "https://www.udemy.com/course/practical-game-development-in-unity-4-level-1/",
      "bio": "A beginner-friendly, pragmatic approach to building video games in the Unity game engine!",
      "objectives": [],
      "course_content": {
        "Unity 4 Basics": [
          "VTM Introduction",
          "Overview of Unity 4",
          "Game Objects, Components, Meshes, Materials and Lights",
          "Introduction to Unity Scripting"
        ],
        "Enemy Missiles": [
          "Missiles - Part 1",
          "Missiles - Part 2",
          "Dealing with Pivot Points in Unity"
        ],
        "Friendly Missiles and Buildings": [
          "Missile Silos - Part 1",
          "Missile Silos - Part 2",
          "Missile Silos - Part 3"
        ],
        "Tying it all Together": [
          "Level Management",
          "Points, Wining and Losing"
        ],
        "Making it Pretty, and Wrapping it Up": [
          "Particle Effects",
          "Conclusion"
        ]
      },
      "requirements": [
        "Beginner-level understanding of C#",
        "Unity Standard (the free edition) available on Unity's homepage",
        "Visual Studio or MonoDevelop (which comes bundled, free, with Unity standard)"
      ],
      "description": "This video series is all about the practical approach to using the tools made available to us in Unity 4 to create our very own video game! We will be creating a Missile Commander clone; which allows us to explore many of the techniques we can employ in our own projects: such as collision detection, asset management, level management, basic GUI implementation, particle effects and more!\nThe purpose of this series is to lead by example; and as a result, everything we discuss will be put to immediate use in the form of completing our game.",
      "target_audience": [
        "Beginner-level programmers who want to learn how to create games using Unity",
        "People who have never even touched Unity before",
        "People who have used Unity to some extent, but want to explore new techniques for authoring games"
      ]
    },
    {
      "title": "Hands-On Clickteam Fusion 2.5 Mini-Degree",
      "url": "https://www.udemy.com/course/hands-on-clickteam-fusion-25-mini-degree/",
      "bio": "An in-depth guide to Clickteam Fusion 2.5",
      "objectives": [
        "Working with 2D assets",
        "Gameplay flow with ClickCode",
        "Player and Enemy Combat",
        "Item Collection and UI Systems",
        "Strategy and Platformer Mechanics"
      ],
      "course_content": {
        "Basic Platformer": [
          "Introduction",
          "Installing Clickteam Fusion 2.5",
          "Knowing Clickteam Fusion 2.5",
          "Creating the Player",
          "Coding the Player - Part 1",
          "Coding the Player - Part 2",
          "The Quick Backdrop Object",
          "Enemy - Part 1",
          "Enemy - Part 2",
          "Camera Controller",
          "Collecting Coins",
          "Creating the UI - Part 1",
          "Creating the UI - Part 2",
          "Playing Audio",
          "Conclusion"
        ],
        "Create a 2D RPG": [
          "Introduction",
          "Project Setup",
          "The Player",
          "Player Movement - Part 1",
          "Player Movement - Part 2",
          "Animating the Player",
          "Backdrops",
          "Camera Follow",
          "Creating the Enemy - Part 1",
          "Creating the Enemy - Part 2",
          "Setting up Interactions",
          "Creating the UI",
          "Click Coding the UI",
          "Conclusion"
        ],
        "Advanced Platformer - Platform Movement Object": [
          "Introduction",
          "Setting up the PMO",
          "Project Setup",
          "Setting up a Player Mask",
          "Setting up the Player Sprites & Animations",
          "Fixing Some Bugs",
          "Double Jump & Camera Follow",
          "Let's Sprint",
          "Coins & More",
          "Parallax Scrolling",
          "Goals",
          "New Frame + Moving Platforms",
          "Firing Arrows",
          "Icons and Building our Application",
          "Conclusion"
        ]
      },
      "requirements": [
        "Absolutely nothing! We will go through everything together. From beginner to game development pro!"
      ],
      "description": "If you want to build games with a lightweight engine, look no further than Clickteam Fusion 2.5. Designed to get you to prototype your games quickly and easily. With its custom visual coding, or as I like to call it, Click Code language, Clickteam Fusion 2.5 is both easy to learn for beginners and flexible enough to keep more experienced developers engaged.\nThe initial lessons can be done by using the free edition of Clickteam Fusion 2.5, but at least the desktop license is recommended once you go onto module 2.\nThe Hands-on Clickteam Fusion 2.5 Mini-Degree will give you the skills needed to create cross-platform 2D games. You'll learn by building real portfolio-ready projects, including 2D platformers, FPS games, RPGs, strategy games, and more - all while mastering in-demand skills that will set you up for success as a game developer.\n- Learn how to design a game by working on the game mechanics\n- Learn how to put game ideas to the test by making quick and easy prototypes and testing them before moving into full production\n- Learn how to use scripting to empower your game with the power of programming\n- Learn the best practices of the industry\n- Learn the best sources for obtaining and making assets like sounds, music, and animations",
      "target_audience": [
        "This course is for anyone looking to either get into, or further their education in Clickteam Fusion 2.5. Whether you are a complete beginner or even an advanced user, there is something for everyone in this course."
      ]
    },
    {
      "title": "UE5 Sci-Fi VFX Series - Part 2 - Laser & Plasma Blaster VFX",
      "url": "https://www.udemy.com/course/ue5-sci-fi-vfx-series-part-2-laser-plasma-blaster-vfx/",
      "bio": "Create & Prototype Real-Time VFX for Game Production",
      "objectives": [
        "Create Real-Time VFX in UE5 using current video game studio production pipeline practices",
        "Create Simulations in Houdini and EmberGen for optimized and game production ready workflows",
        "Create high quality and game ready Textures and Meshes using Blender and Substance Designer",
        "Create Blueprint logic and Niagara Systems for executing FX in gameplay",
        "Dive into more advanced techniques for creating materials for VFX in UE5"
      ],
      "course_content": {
        "Series Introduction and Setup": [
          "Series Introduction",
          "Starting with Part 2 and Skipped Part 1 - Watch This!",
          "Unreal Project Setup"
        ],
        "Laser Beam VFX": [
          "Section Introduction",
          "Concept Breakdown",
          "Concept Timelapse",
          "Textures Part 1 - Front Muzzle Flash",
          "Textures Part 2 - Side Muzzle Flash",
          "Textures Part 3 - Impact Decal",
          "VFX Naming Conventions for Production",
          "Meshes Part 1 - Muzzle Flash",
          "Meshes Part 2 - Laser Beam",
          "Simulations - Hit Smoke Part 1 - Houdini Setup",
          "Simulations - Hit Smoke Part 2 - Houdini Simulation",
          "Simulations - Hit Smoke Part 3 - Houdini Export for Unreal",
          "Simulations - Explosive Part 1 - EmberGen Simulation",
          "Simulations - Explosive Part 2 - EmberGen Export for Unreal",
          "Importing Assets into Unreal",
          "Materials Part 1 - Laser Beam and Sparks",
          "Materials Part 2 - Impact Decal",
          "Materials Part 3a - Muzzle Flashes",
          "Materials Part 3b - Function and Material Wrap Up",
          "Materials Part 4a - Impact Smoke",
          "Materials Part 4b - Function and Material Wrap Up",
          "Materials Part 5 - Laser Impact Hit",
          "Blueprints Part 1 - Test Spawner and Projectile",
          "Blueprints Part 2 - Projectile Collision and Impact Setup",
          "Blueprints Part 3 - Material and Light Setup",
          "Blueprints Part 4 - Final Laser Beam Logic Setup",
          "Blueprints Part 5 - Impact Decal Logic",
          "Blueprints Part 6 - Character Logic",
          "Niagara Part 1a - Muzzle Flash - Blockout",
          "Niagara Part 1b - Muzzle Flash - Animation",
          "Niagara Part 1c - Muzzle Flash - Sparks",
          "Niagara Part 2a - Impact Hit - Sparks",
          "Niagara Part 2b - Impact Hit - Flash",
          "Niagara Part 2c - Impact Hit - Flash Smoke",
          "Niagara Part 2d - Impact Hit - Smoke",
          "Laser Beam VFX Polish Pass",
          "Assignment"
        ],
        "Plasma Blaster VFX": [
          "Section Introduction",
          "Concept Breakdown",
          "Concept Timelapse",
          "Textures",
          "Meshes Part 1 - Plasma Ball",
          "Meshes Part 2 - Plasma Disc",
          "Importing Assets into UE5",
          "Materials Part 1 - Reusing Materials",
          "Materials Part 2 - Plasma Ball",
          "Materials Part 3 - Plasma Trail",
          "Materials Part 4a - Plasma Disc",
          "Materials Part 4b - Plasma Disc - Masks & Animation",
          "Materials Part 4c - Plasma Disc - Refraction & Material Wrap Up",
          "Blueprints Part 1 - Plasma Impact Decal",
          "Blueprints Part 2 - Plasma Ball Projectile",
          "Blueprints Part 3 - Projectile Collision",
          "Blueprints Part 4 - Character Logic and Animation Montage FX Hookups",
          "Niagara Part 1 - Initial System Balance",
          "Niagara Part 2 - Muzzle Flash and Energy Burst",
          "Niagara Part 3 - Plasma Impact Hit System",
          "Niagara Part 4 - Plasma Trail",
          "Plasma Blaster VFX Polish Pass",
          "Assignment"
        ],
        "Part 2 Conclusion": [
          "Part 2 Conclusion and Part 3 Announcement"
        ],
        "Extra": [
          "Cutout Textures for Niagara Optimization"
        ]
      },
      "requirements": [
        "UE5 Sci-Fi VFX Series - Part 1 - Respawn & Ammo Pickup VFX (Recommended)",
        "Part 1 is not completely necessary to have taken for this course as the project file will be available in Part 2 as well. But you will be missing a few assets from Part 1 in this course should you decide to jump straight into Part 2."
      ],
      "description": "This is part 2 In a 3 part series where you will learn how to take an effect from concept to completion and be ready for gameplay implementation. You will learn my production pipeline that has been used in many of my FX throughout AA and AAA game production.\nIn Part 2 you will focus more on weapons FX, how they interact with the world, spawn from player logic and animation montages and go deeper into video game production practices. We will dive into using various projectiles and collision responses through blueprint logic. We will tackle different ways of handling projectiles and focus on troubleshooting methods to help better navigate problems that can arise while in a production environment.\nWe will dive deeper into materials, exploring more challenging techniques for creating FX. Including multiple UV Maps on FX meshes, animating our muzzle flashes with only one parameter, creating more Material Functions and exposing dynamic and scalar parameters for deeper animation practices for use in our Niagara Systems.\nWe will also tackle simulations in Houdini and EmberGen. You will be shown how to pack and export flipbook textures in a way that will help you stay optimized and performant while still delivering high quality gameplay FX. If you do not have access to any of the external software packages used, all of the final textures and meshes will be provided in the course.\nWhile I recommend starting with Part 1, should you choose to skip it, you will still receive the project file for use along with this course. There will be several things that carry over from Part 1, but you should still be able to manage without them.\nPart 2 is the most massive section of this series and will provide a feature rich learning experience that should give you a more advanced knowledge of how to pull off AAA quality FX for Game Production, so that you can create that stunning portfolio piece that will be sure to catch a recruiters eye.\nSo dive on in and lets get crafting!",
      "target_audience": [
        "Those looking to get a job in the game industry as a VFX Artist",
        "VFX Artists looking to develop their skills further in Unreal",
        "VFX Artists looking to switch to Unreal and understand pipelines for game production"
      ]
    },
    {
      "title": "Unity Game Mechanics Mastery and Blender 3D Modeling",
      "url": "https://www.udemy.com/course/unityblendercourse/",
      "bio": "+FREE gift! Learn game design, game physics, 3D animation, character art, C#, pixel art, Photoshop and MagicaVoxel!",
      "objectives": [
        "Build a 3D MegaDude-inspired platform shooter game in Unity®",
        "Learn game design fundamentals",
        "Create game artwork in MagicaVoxel and Photoshop",
        "Code in C#",
        "Navigate Blender, Unity, MagicaVoxel and Photoshop",
        "Create 6 low poly 3D models of different types of rocks",
        "Put the art you make in this course into your portfolio",
        "Get a FREE bonus webinar"
      ],
      "course_content": {
        "Course Trailer": [
          "Course Trailer"
        ],
        "Introduction to Unity": [
          "Welcome to the Course",
          "Introduction and Downloading Unity",
          "3D Elements",
          "Building a Player",
          "Input",
          "Horizontal Movement",
          "Jumping"
        ],
        "Shooting in Unity": [
          "Setting up a Game Camera",
          "Shooting Bullets",
          "Particle Effects",
          "Multiple Bullets",
          "Charging Bullets"
        ],
        "Making Enemies in Unity": [
          "Making a Base Enemy Class",
          "Hurt Animation",
          "Killing Effect",
          "Destroying Particle System",
          "Walking Enemy",
          "Knockback Effect",
          "Physics Materials",
          "Improving Collisions"
        ],
        "Making More Enemies in Unity": [
          "Flamethrower Enemy",
          "Making Flames",
          "Shooter Enemy",
          "Enemy Bullet",
          "Spawn Enemy Bullets",
          "Burst Fire",
          "Adjusting Shooter Enemy",
          "Turrets"
        ],
        "Making Doors and Buttons in Unity": [
          "Doors",
          "Button",
          "Trigger Elements",
          "Timed Button"
        ],
        "Making Platforms and Teleporting in Unity": [
          "Moving Platforms",
          "Teleporter",
          "Teleporter Loop",
          "Triggering Teleporters",
          "Triggering Platforms"
        ],
        "Making Cutscenes and Powerups in Unity": [
          "Triggering a Cutscene",
          "Input Lock",
          "Powerups",
          "Powerup Routine",
          "Supercharge Powerup",
          "Invincibility Powerup"
        ],
        "Setting up a Game Interface in Unity": [
          "Canvas",
          "Health and Time Texts",
          "Designing a Powerup Bar",
          "Events",
          "Animating a Powerup Bar"
        ],
        "Finalizing a Game Interface in Unity": [
          "Animating a Cutscene",
          "Pausing the Game",
          "Scene Navigation"
        ]
      },
      "requirements": [
        "Unity® 2017.1.0f3 (for game set-up and coding)",
        "MagicaVoxel, Adobe Photoshop CC 2015.5 and Blender 2.78c (for creating art)",
        "This course was recorded on a Mac, but you can use a PC"
      ],
      "description": "Join Mammoth Interactive step-by-step in building a fully featured game from scratch! We show you how to make all the code and art for the game. You'll also design rock scenes quickly for use in game backgrounds.\n\nThis course was funded by a #1 project on Kickstarter\nOur experienced instructors Kevin Liao and Glauco Pires explain everything from a beginner level. That means you don't need any prior coding or digital art experience!\nMake epic games\nGlauco takes you through the process of coding a game in Unity® from scratch. Kevin teaches you how to create all the artistic elements you will need to complete the game. Kevin will teach this section of the course in MagicaVoxel and Photoshop to make original art.\nMake jaw-dropping 3D models\nKevin will also teach you how to use Blender to make low-poly art. You draw 6 3D models of rocks for use in game development or other creations of your choice.\nIncluded in this course is material for beginners to get comfortable with the interfaces. Please note that we reuse this content in similar courses because it is introductory material. You can find some material in this course in the following related courses:\n\nMake a MegaDude Action Shooter Game in Unity® with Pixel Art\nProfessional Game Development: 3D Modeling and Unity® C#\nCreate 6 low poly rock models in Blender for 3D environments\nSource files for all projects are included!\nBonus\nAlso included is the webinar How To Master Anything by Mammoth Interactive founder John Bura.\nReviews\nI really like the approach the presenter takes – not just the technical details, but also the very human, personal development information and recommendations he provides.\nThe instructor is very good at teaching. He teaches at a great pace and covers anything a beginner would need to understand (every little detail). I am already learning a lot and I just started yesterday.\nSign up now to join the Mammoth community!",
      "target_audience": [
        "Complete beginners. No prior coding or digital art skills necessary.",
        "People who want to make games.",
        "Beginners who want to learn 3D modelling.",
        "Beginners who want to learn how to use Blender, Unity, Photoshop or MagicaVoxel",
        "Game developers who need art assets for a game."
      ]
    },
    {
      "title": "Learn to Make an Alien Farm Game With C++ SDL2 From Scratch",
      "url": "https://www.udemy.com/course/alien-farm-game-cpp-sdl2-from-scratch/",
      "bio": "You can construct paths and waterways, plant alien crops and trees, and colorful animals that move.",
      "objectives": [
        "Create a farm game with an alien theme",
        "A tiling system that allows you to place dirt, water which makes surrounding dirt wet, and different colored \"grass\"",
        "Plants of different types and sizes that have shadows, move up and down, start small and grow, and can only exist on the correct types of tiles",
        "Animals of different types and sizes that have shadows, start small and grow, move around without overlapping plants, other animals, the wrong types of tiles",
        "Improve your C++ game development skills"
      ],
      "course_content": {
        "Introduction": [
          "Intro",
          "Download and Setup Software",
          "Basic Engine Overview"
        ],
        "Tiles": [
          "Intro",
          "Checkered Grid",
          "Tiling System",
          "More Colors",
          "Shadows",
          "Improve Code",
          "Wet Dirt",
          "End Result"
        ],
        "Plants": [
          "Intro",
          "Basic Plants",
          "Multiple Plants",
          "Plant Movement",
          "Plant Growth",
          "More Plants",
          "Improve Shadows",
          "Check Tile Types",
          "End Result"
        ],
        "Animals": [
          "Intro",
          "Basic Animals",
          "Basic Movement",
          "Improve Movement",
          "Overlap Checks 1",
          "Overlap Checks 2",
          "Fix Placement",
          "End Result"
        ]
      },
      "requirements": [
        "Basic C++ programming skills",
        "Basic understanding of game development",
        "Windows 7 or newer OR if you use a different OS (eg. macOS) you must have a C++ compiler and SDL2 already installed. This is because the instructions to download and setup this software are only provided for windows."
      ],
      "description": "Overview\nYou’ll be able to place dirt, water which makes surrounding dirt wet, and different colored grass. Add and remove plants of different types and sizes that have shadows, move up and down, start small and grow, and can only exist on the correct types of tiles. Add and remove animals of different types and sizes that have shadows, start small and grow, move around, and avoid overlapping plants, other animals, and certain tiles like water.\nTiling System\nStart by adding a simple purple checkered grid to get the basics setup.\nThen it will be improved by adding a tiling system that allows placement of different colored tiles.\nNext an algorithm that automatically generates shadows, to give a sense of depth, will be added to the game.\nFinally when water tiles are added or removed, the surrounding dirt tiles become wet or dry depending on how far away they are from water.\nPlants\nStart by setting up simple plants that can be added and removed with the mouse and keyboard.\nThen they will be improved so that they look like they’re moving up and down, and start small then grow to their full size.\nNext more plants/trees of different sizes will get added to the game, and their shadows improved to be lighter and remove overlap with other images.\nFinally an algorithm will be added that checks tile types underneath them. That way they can only get placed on the correct ones, and if tiles are changed to types that they shouldn’t exist on, they get removed.\nAnimals\nStart by setting up simple animals that can be added with the mouse and keyboard, that start small then grow to their full size.\nThen they will be improved so that sometimes they either pick random points to move to, or random angles to rotate to.\nNext their movement will be improved further so that they avoid overlapping other animals, plants, and tile types that they shouldn’t exist on, for example water.\nFinally more overlap checks will be added so that animals can no longer be placed on plants, other animals, or the wrong types of tiles. Also an overlap check so that plants can’t be placed on animals. In addition code will be added so that animals can be remove with the mouse, or if the tiles under them are changed to types they shouldn’t exist on.",
      "target_audience": [
        "Anyone who wants to learn how to create a farm game with an alien theme",
        "Anyone who wants to improve their C++ game development skills"
      ]
    },
    {
      "title": "Godot 4: Build a Digital Coloring Book from Scratch",
      "url": "https://www.udemy.com/course/godot-4-build-a-digital-coloring-book-from-scratch/",
      "bio": "Create Interactive Coloring Experiences with Drawing, UI, and Save/Load",
      "objectives": [
        "How to load and display line art images for coloring",
        "How to implement drawing tools",
        "How to implement a bucket fill tool that respects line art boundaries",
        "How to manage multiple coloring pages with navigation",
        "How to add undo/redo functionality with history stacks",
        "How to save and load user progress to disk",
        "How to build a simple UI that prevents drawing over toolbars"
      ],
      "course_content": {},
      "requirements": [
        "Basic programming knowledge (variables, functions, loops, conditionals)",
        "Familiarity with the Godot editor (adding nodes, running a scene)",
        "Godot 4.x installed on your computer"
      ],
      "description": "Easily bring your creative ideas to life with Godot 4 by creating a complete digital coloring book app from scratch! This comprehensive course guides you step-by-step to build a fully functional, interactive coloring app, perfect for kids, hobby projects, or educational tools.\nYou’ll learn how to:\nSet up a Godot 4 project and properly organize your scenes and nodes\nLoad and display line art images fully ready for coloring\nImplement brush and bucket fill tools that correctly respect line art boundaries\nManage multiple coloring pages with easy next/previous navigation\nAdd undo/redo functionality to allow users to freely correct mistakes\nSave and load user progress so work is never lost or overwritten\nBuild a simple, polished, and intuitive UI for an enjoyable user experience\nThis course is completely hands-on and practical. By the end, you’ll have a working coloring book app you can expand with your own art, stickers, or other interactive elements.\nWho this course is for:\nDevelopers with basic programming knowledge looking to make full Godot projects\nHobbyists or educators interested in creative apps for children or students\nAnyone wanting to learn Godot by building a complete, functional, and enjoyable project\nRequirements:\nBasic programming knowledge (variables, functions, loops, conditionals)\nGodot 4 installed on your computer\nTake this course today and start building your interactive coloring book app right away!",
      "target_audience": [
        "Beginner to intermediate Godot users who want to build a complete project",
        "Developers interested in making apps (not just games) with Godot 4",
        "Hobbyists who want to create an interactive coloring book for kids or personal projects",
        "Educators or parents who want to explore making simple creative tools"
      ]
    },
    {
      "title": "Develop Desktop / Mobile Quiz Game in Clickteam Fusion 2.5",
      "url": "https://www.udemy.com/course/quiz-game-app-clickteam-fusion/",
      "bio": "Design and Develop a dynamic Quiz Engine (Cross-Platform) in Clickteam Fusion 2.5",
      "objectives": [
        "Build your very own dynamic, linear-event Quiz Engine",
        "How to develop a dynamic one-frame engine",
        "How to develop your own external Quiz Editor",
        "How to create Player Profiles (create/save/load) data"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Prepping the App": [
          "The Fusion 2.5 App Makeup",
          "App Design - Part 1",
          "App Design - Part 2",
          "App Design - Part 3"
        ],
        "Quiz Game Development": [
          "Starting the Development",
          "Generating a New Question",
          "Generating the Answers",
          "Letting the User Select an Answer",
          "Highlighting Chosen Answer and De-Highlighting the Rest",
          "Showing Correct and Incorrect Answers",
          "Building in a real-frame timer (and countdown)",
          "Finalising the Answer Approach and Finishing Up"
        ],
        "Expanding our Quiz Engine (Game/App)": [
          "Setting topics and additional questions...",
          "Building a Quiz Editor (Questions / Answers)",
          "Finishing Up the Quiz (Final Engine Step)",
          "Adding an Intro Screen and Setting Player Scores",
          "Adding Player Profiles"
        ],
        "Conclusion": [
          "Conclusion"
        ],
        "Polish and Special Effects": [
          "Out of Time!",
          "Cool Background Effect",
          "Saving Data & Profile Information",
          "Adding Sound Effects and Music"
        ]
      },
      "requirements": [
        "Clickteam Fusion 2.5 Free Edition",
        "Clickteam Fusion 2.5 Standard",
        "Clickteam Fusion 2.5 Developer"
      ],
      "description": "Learn how to create your very own Quiz Game Engine using Clickteam Fusion 2.5, an industry-standard, rapid application game development tool from Clickteam used by many Indie Game Developers and Large companies worldwide.\nIn this game development course you will learn a lot of Game Design and Game Development concepts but will also learn how to implement these concepts into your very own Quiz Game Engine using Data Saving/Loading, Custom Layout Design  and a whole new game design approach. You will have access to the Course Forum where you can also discuss topics covered in the course and topics that aren't covered.\nThis game design course has been designed with all three levels in mind, beginner, intermediate and advanced. The reason this course offers a whole new game design approach is to ready-prepare you to develop a more intuitive game design along with learning some more in-depth routines which will guarantee to take you from beginner level to intermediate.\nIf you consider yourself an already-experienced user with Clickteam Fusion 2.5 then this course will take you to new heights in terms of game design and development. Orientated around designing a one-frame game engine with Clickteam Fusion 2.5, you will be creating a complete and cross-platform quiz game engine, where the entire game consists of just one frame, with potential for unlimited topics/rounds.\nBy the end of this course you will have developed the ability to:\nDesign a fully-fledged, linear Quiz Engine\nDevelop your own external Question/Answer Editor\nLearn how to save/load topics into lists\nLearn how to let the user choose the topic (all automated from there)\nLearn Fastloops\nLearn how to implement features such as a countdown timer\nLearn how to create ending screens\nLearn how to create Player Profiles\nLearn how to create/save/load Player Profile Information\nAnd so much more!\nThis course also contains an additional polish/special effects section, so when you have completed the course, new ideas, suggestions and new videos will be added so you can further your development with your completed quiz engine and add new ideas and polish to your Cross-Platform Quiz Engine.\nStart learning more about Game Development today with this course from OneClick Training!",
      "target_audience": [
        "Anyone who wants to build a Quiz Engine (Game/App)",
        "Anyone who wants to learn Mobile App Development",
        "Anyone who wants to learn Web App Development",
        "Anyone who wants to learn more intermediate/advanced techniques",
        "Anyone who wants to learn the concept of dynamic, linear game engine development"
      ]
    },
    {
      "title": "Character Animation in Unreal Engine 5 and UEFN",
      "url": "https://www.udemy.com/course/character-animation-in-unreal-engine-5-and-uefn/",
      "bio": "Create fun, awesome animations using Unreal Engine 5 and Unreal Editor for Fortnite (UEFN)",
      "objectives": [
        "You will learn the basics of character animation in Unreal Engine 5 and Unreal Editor for Fortnite",
        "You will learn how to use powerful AI motion-capture tools to assist with the creation of your animations - no suit, stage or difficult software required",
        "You will learn how to create dialogue tracks for your characters and how to lip-sync the dialogue to your characters using the 'Audio-to-Animation' tool",
        "You will learn how to edit and revise existing animations",
        "You will learn how to use the Sequencer tool inside of Unreal Engine and Unreal Editor for Fortnite (UEFN)",
        "You will learn how to seamlessly blend multiple animations together",
        "You will learn how to gain access to over 2,500 free animations through Mixamo, and you will learn how to retarget these animations to the Fortnite characters",
        "At the conclusion of the course, you will have a clear understanding of how to access over 1,200 Fortnite characters and how to get them to talk, sing and dance"
      ],
      "course_content": {
        "Introduction to Unreal Engine 5 | Unreal Editor for Fortnite": [
          "Introduction to Character Animation in Unreal Engine 5 & UEFN",
          "The Animation We Will Create in This Course",
          "The Tools We Will Be Using",
          "Download and Install Unreal Engine 5 and UEFN (text instructions)",
          "Download and Install Unreal Engine 5",
          "Download and Install Unreal Editor for Fortnite (UEFN)"
        ],
        "Let's Create Our UEFN Fortnite Project": [
          "Create Your Project Using the 'Animation Template'",
          "Create project using 'Animation Template'",
          "Next, we will create a Level Sequence and then add an audio track to it",
          "Now Let's Import Audio File"
        ],
        "Let's Animate Your Fortnite Character": [
          "The MetaHuman Identity",
          "How To Create the MetaHuman Identity",
          "The Magical, Amazing Audio-to-Animation Tool",
          "Let's create our Audio-to-Animation Performance",
          "Export the animation from the MetaHuman Performance",
          "The Character Device - All the Magic Starts Here",
          "The Character Device",
          "The Facial Control Rig - Baking the animation to the Control Rig",
          "We now bake the facial animation to the facial control rig",
          "Let's Add the Body Animation",
          "Now we will add the body animation",
          "Create a NEW animation combining the facial and body animations",
          "Export animation of combined facial and body animation"
        ],
        "Animation Techniques: Refining and Editing an Existing Animation": [
          "Facial Animation: Let's add blinks",
          "Let's animate eye blinks",
          "Eye Movement: one of the keys to a great animation",
          "Next, we will animate the eye movement",
          "Correcting the tongue, if needed",
          "How to correct the tongue poking through the mesh",
          "Body Animation: First, let's activate the IK Hand/Arm controls",
          "Find and activate IK Hand/Arm Controls",
          "Editing the Body Animation: Let's start with the head",
          "Let's revise the head animation",
          "The Body Control: Inverse Kinematics is cool",
          "The body control"
        ],
        "Blending and Layering Animations": [
          "How to blend multiple animations together seamlessly",
          "How to blend animations smoothly and seamlessly",
          "How to fine-tune the blend"
        ],
        "MIXAMO - Want high-quality animations for FREE? Mixamo to the rescue": [
          "Mixamo Animations by Adobe - Let's download our first animation",
          "Let's download our first Mixamo animation",
          "Next, we will import and retarget our Mixamo animation to the Fortnite character"
        ],
        "AI Motion-Capture - suit, stage or expensive software no longer needed": [
          "Resource files for this section - video of character dancing and mocap file",
          "Let's create our motion-capture file with QuickMagic",
          "Now let's export our mocap animation and import it into UEFN or UE5",
          "Next, we'll retarget the animation to our Fortnite skeleton",
          "Finally, we'll create a Level Sequence, import our character and animation"
        ],
        "Congratulations on finishing the course": [
          "Congratulations on finishing the course - next steps...",
          "What's next?"
        ]
      },
      "requirements": [
        "A computer capable of running Unreal Engine 5, and an internet connection"
      ],
      "description": "“This course contains the use of artificial intelligence.”\nLearn how to animate in Unreal Engine 5 using Fortnite Characters - with a cast of over 1,200 characters.\n\n\nIn this course you will learn the basics of character animation using Unreal Engine 5 and Unreal Editor for Fortnite (UEFN).  We will dive into very powerful animation tools such as the new 'Audio-to-Animation' feature which will automatically create a realistic facial animation including dialogue with just a sound file.  It will even create different moods such as Happy, Sad, Angry, and Afraid.  This tool is part of the MetaHuman Performance asset, which we will later use.\n\n\nWe will also cover how to use the Level Sequencer which is like an editing timeline where we can add characters, animations, sound and effects.   It is here that we will import the facial animation and combine it with a body animation.  You will also learn how to create the dialogue track using a powerful tool called 'ElevenLabs,' an AI tool that will generate amazing quality dialogue tracks for you to use inside of Unreal Engine.\n\n\nThis course will quickly take you through the necessary steps to achieve high-quality animations in a short amount of time.  Now is the perfect time to jump in and get started.  See you on the inside.",
      "target_audience": [
        "If you have ever had the desire to create awesome character animations, this course will get you off to a quick start, while having fun at the same time"
      ]
    },
    {
      "title": "Unity 3D - Create a Top Down Camera with Editor Tools",
      "url": "https://www.udemy.com/course/unity-2017-create-a-top-down-camera-with-editor-tools/",
      "bio": "Learn to create a Camera for your Top Down Games",
      "objectives": [],
      "course_content": {
        "Introduction": [
          "Introduction",
          "About the Instructor"
        ],
        "Creating the Camera Logic": [
          "Coding up the Top Down Functionality",
          "Creating a Basic Editor Tool"
        ],
        "Automating the Camera Setup": [
          "Create the Menu Setup Feature",
          "Making a Reusable Camera System"
        ]
      },
      "requirements": [
        "You should have some experience with Unity 3D and at least know how to use its interface",
        "You should have a beginner level knowledge of C# for Unity",
        "An interest in learning how to automate setups in Unity and build Editor Tools"
      ],
      "description": "Welcome to the Top Down Camera Course! Brought to you by Indie-Pixel. In this course we will walk through the process of creating a Top Down Camera like those seen in orthographic games. We will walk through the code logic, step by step. We will then Create a basic editor tool to make it easier for anyone to edit. Finally we will look at ways to automate the setup of the camera and how to make the code more re-usable by basing our classes. By the end you will have your very own Top Down Camera components that you can use in any Unity project!  Best thing is that its free!",
      "target_audience": [
        "The Unity user who wants to take thier beginner skills to the next level",
        "A Unity developer who wants to get into tools development",
        "Anyone interested in camera setups within Unity 3d"
      ]
    },
    {
      "title": "Learn Game Dev by Coding Legend of Zelda From Scratch!",
      "url": "https://www.udemy.com/course/learn-game-dev-by-coding-legend-of-zelda-from-scratch/",
      "bio": "Learn Professional Game Dev Techniques and Add The Legend of Zelda to Your Resume!",
      "objectives": [
        "Learn How to Code the Legend Of Zelda",
        "Learn How To Code Video Games From Scratch",
        "Learn ECS (Entity-Component-System) Design & Implementation",
        "Learn Enemy Artificial Intelligence Pattern & Design",
        "Learn Data Structures & Algorithms",
        "Learn Sprite Animation"
      ],
      "course_content": {
        "Introduction To Game Development & The ECS": [
          "Introduction",
          "Code Environment & ECS Setup",
          "Create ECS Architecture & Handle User Input"
        ],
        "Graphics": [
          "Breathing Life Into Link!",
          "Render the World and Add Collision!",
          "Expand the Map! Enter the 1st Dungeon"
        ],
        "Magical Weapons & Inventory": [
          "Begin The Adventure! Acquire the Magical Sword!",
          "What's in Link's Pocket?"
        ],
        "Expand the World Map!": [
          "Let's Add New Areas To Explore"
        ],
        "Finally, Let's Add Enemies!": [
          "Enemy AI & Decision Making",
          "Complex Enemy Behavior"
        ],
        "We're Ready To Fight": [
          "The Necessities of Battle",
          "The Spoils of Victory",
          "Polishing Some Mechanics & Adding Projectiles"
        ]
      },
      "requirements": [
        "An Intermediate Understanding of Javascript and OOP principles is Recommended"
      ],
      "description": "In this comprehensive video series, you will learn Game Design by coding the 1987 NES classic: The Legend Of Zelda!\nThe following concepts you will learn include, but are not limited to:\n~ ECS (Entity-Component-System) Design & Implementation\n~ Javascript Context\n~ 2D Sprite Animation\n~ Debug System Design\n~ Enemy Artificial Intelligence\n~ Data Structures & Algorithms\n~ Inventory Design Pattern\n~ And More!\n\n\nThroughout the journey, we'll be analyzing the original game's mechanics and design choices to better understand the foundations of effective game design. We will also explore how to adapt and modernize these concepts for contemporary gaming platforms and technologies.\n\n\nYou and I will be coding out the beginning of The Legend Of Zelda to learn the above concepts and implementations. We will not finish it together, but you will be able to finish it yourself, or use these techniques to create another game!\n\n\nThis is not a video about Javascript, but about Game Design and Principles. It is not necessary, but it is recommended that you have at least an intermediate knowledge of Javascript & The Object Oriented Paradigm (OOP) in order to get 100% out of these videos.\n\n\nBy the end of this series, you'll have the skills and knowledge to create your own captivating game projects, or even embark on a rewarding career in the gaming industry. So grab your keyboard, fuel your creativity, and let's dive into the magical world of The Legend of Zelda, and the art/science of Game Design!",
      "target_audience": [
        "Intermediate Programmers who are interested in learning Game Development"
      ]
    },
    {
      "title": "HTML5 Simple Game Programming Preparation",
      "url": "https://www.udemy.com/course/free-prep-for-html5-game-development/",
      "bio": "Free overview of HTML, CSS, and JavaScript for my HTML5 Game Development course.",
      "objectives": [],
      "course_content": {
        "Building a basic page - and an epic adventure": [
          "Introduction to the Free HTML5 Preparation class",
          "Overview of the adventure game",
          "Creating a basic HTML page",
          "Adding Pictures and Links",
          "Modifying a page with CSS",
          "Adding Audio and Building the Adventure Game",
          "Building an adventure game with basic HTML and CSS"
        ],
        "Talking to the Page": [
          "Introducing the word game",
          "Building a basic form",
          "Basic Input and Output",
          "Creating a good-looking form with CSS",
          "Building the word story game",
          "Basic input and output"
        ],
        "Coding Like a Pro": [
          "Managing Data Types",
          "Adding Branching Behavior",
          "Looping with the For Loop",
          "More flexible loops with While",
          "Enhancing functions with parameters and return values",
          "Using arrays",
          "Coding like a pro"
        ],
        "Building a text-based game": [
          "Designing the number guesser",
          "Generating random numbers",
          "Building the number guesser"
        ],
        "Introducing the Game Engine": [
          "Introduction to the SimpleGame Engine",
          "SimpleGame Overview",
          "Basic Keyboard Interaction",
          "Using the simpleGame Practice Tool"
        ]
      },
      "requirements": [
        "Access to an HTML5 - compliant browser (Google Chrome 23 or greater recommended)",
        "Access to a higher-end text editor (specific examples linked in course)",
        "Any major operating system (Windows 7+, Mac OSX, Linux)"
      ],
      "description": "Learn to build web and mobile games with HTML5. Even if you have no experience in programming or web development, you can create your own games.\nThis course begins with a quick overview of web development in HTML5 and shows you the basic web framework used in all modern pages. It then teaches essential programming concepts using the JavaScript language embedded in all modern browsers.\nIt introduces the simpleGame.js engine, showing you how the engine works and introducing a free online game development tool. For more information on game programming, please see my other course.",
      "target_audience": [
        "Anyone interested in game development.",
        "Suitable for middle school, high school, or adult learners. Motivated younger students will also enjoy the course, but they may need help from an adult. Perfect course for kids and parents to take together!",
        "No prior experience in web development or programming is necessary, although it can be useful.",
        "Programming is NOT a spectator sport! You'll only learn if you're willing to do some exercises on your own."
      ]
    },
    {
      "title": "Make Subway Surfers Clone in Unity | Mobile Game Development",
      "url": "https://www.udemy.com/course/make-subway-surfers-clone-in-unity-mobile-game-development/",
      "bio": "Build a Fast Paced Endless Runner Game in Unity and C# | Mobile Ready for Android & iOS | Subway Runner 3D Game 2025",
      "objectives": [
        "Build a complete 3D endless runner mobile game using Unity and C#",
        "Implement player mechanics like running, jumping, sliding, and lane switching",
        "Create swipe-based controls optimized for mobile devices",
        "Use procedural generation to build infinite game environments",
        "Design and animate a player character with obstacle detection",
        "Create a coin collection and scoring system",
        "Build responsive UI elements like start, pause, and game over menus",
        "Export the game to Android and iOS platforms",
        "Apply clean C# scripting and organize Unity scenes efficiently"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Download Game Environment and Assets": [
          "Download Game Environment and Assets"
        ],
        "Create and Setting up New Project": [
          "Creating Project",
          "How to add Game Assets & Game Environment"
        ],
        "Player Movement": [
          "Setting up player character",
          "Player Movement",
          "Movement using keys",
          "Character Jump and Slide"
        ],
        "Make Infinite Game Environment": [
          "Camera Follower Script",
          "Making Infinite Environment"
        ],
        "Coins System | Score System": [
          "Detecting Obstacles",
          "Collecting Coins",
          "Add Score System"
        ],
        "Mobile Touch Controls | Game UI | Menu System": [
          "Swipe Mobile Controls",
          "Tap to play Menu",
          "Game UI",
          "Adding Tap to Play - To Start Game",
          "Restart Game",
          "Pause and UnPause",
          "Showing Score and Coins UI"
        ],
        "Choose Different Characters": [
          "Character Selection UI",
          "Showing Character Selection Menu",
          "Buying and Selecting Characters",
          "Fixing Bugs"
        ],
        "Audio and Missions System": [
          "Settings Menu UI",
          "Adding Sound Effects and Controls",
          "Adding Missions Menu and Fixing Bugs",
          "Updating Missions"
        ]
      },
      "requirements": [
        "No prior game development experience required",
        "No programming experience needed — everything is explained step by step",
        "A computer (Windows or macOS) with internet access",
        "Unity installed"
      ],
      "description": "Are you ready to build your own mobile game and break into the booming world of game development?\nIn this hands-on course, you’ll learn how to create a fully functional 3D endless runner game — inspired by top mobile hits — using Unity and C#, the industry-standard tools for game development. Whether you’re an absolute beginner or an aspiring indie developer, this project-based course will teach you everything you need to bring your game idea to life.\nWe’ll walk step-by-step through the process of building a fast-paced, swipe-controlled mobile runner game — similar to the style of games like Subway Surfers, Temple Run, and Blades of Brim. You'll master essential game mechanics such as lane switching, jumping, sliding, and obstacle dodging — all controlled by mobile-friendly touch input.\nBut we won’t stop at just movement! You’ll also build:\nProcedural level generation for infinite gameplay\nA working coin and score system\nUI menus (start, pause, game over)\nSound effects and animations\nMobile build and testing for Android and iOS\nAlong the way, you’ll sharpen your skills in C# scripting, Unity scene management, physics, and UI/UX design — all while working on a game you can proudly showcase in your portfolio or publish to the App Store or Google Play.\nThis course is beginner-friendly, but packed with industry-relevant techniques that even experienced developers can benefit from. You’ll learn how to structure your code, optimize performance for mobile, and build features that keep players engaged.",
      "target_audience": [
        "Beginners who want to learn Unity by building a real mobile game",
        "Anyone interested in creating games similar to popular endless runners",
        "Hobbyists and indie developers looking for a mobile game project",
        "Students or coders who want to apply their C# skills in game development"
      ]
    },
    {
      "title": "3D platformer game using Unity",
      "url": "https://www.udemy.com/course/3d-platformer-game-using-unity/",
      "bio": "Build a basic 3D platformer in Unity. Learn about coding Player Movement , Animation, IK , Enemy AI , Weapon System,.etc",
      "objectives": [
        "Handling Player Movement with Forward Crouch and Jump.",
        "Inverse Kinematics",
        "Basic Weapon System",
        "Basic enemy AI",
        "Health and Damage System",
        "UI Integration"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Project Setup"
        ],
        "Player Setup and Movement": [
          "Player Setup - Part I",
          "Player Setup - Part II",
          "Player Movement - Part I",
          "Player Movement - Part II",
          "Camera Movement",
          "Inverse Kinematics - I",
          "Inverse Kinematics - II",
          "Inverse Kinematics - III",
          "Inverse Kinematics - IV",
          "Crouch Movement",
          "Jump Movement"
        ],
        "AI": [
          "Create basic Enemy AI"
        ],
        "Weapon System": [
          "Weapon System - I ( Raycast Firing )",
          "Weapon System - II ( Fix muzzle flash issues and AI firing)"
        ],
        "Health and Damage System": [
          "Character Heath and Damage Implementation",
          "Death Animation and Small Fixes"
        ]
      },
      "requirements": [
        "Use Unity 2018.3.2f1 and above",
        "Beginner to Intermediate level Unity3D knowledge",
        "Microsoft Windows/Mac OS",
        "Updated DirectX Version"
      ],
      "description": "Build your own 3D platformer game using Unity3D, a high-quality 3D game engine used by many indie developers and AAA game studios around the world.\nIn this course you won't just learn Unity3D but also understand the concept with few tips and tricks to solve problems that a game developer uses. You will have access to course forum where you can discuss topics once the course is complete.\nThe course is well designed for who has a little grasp of Unity3D before or an artist who is looking to expand their knowledge of game development or a developer who is understanding game development as a whole.\nSo the course will cover the following topics of game mechanics such as:\nPlayer Movement Control (Move , Crouch and Jump)\nWeapon System\nInverse Kinematics\nEnemy AI\nHealth and Damage System\nUI Integration\n\n\nTime to learn game development in developers way!\n\n\n\"A lot of indie developers who became 'Overnight Successes' were working at it for ten years.\" - Dan Adelman\n\n\nNOTE: The project resource in this course uses Aura Shader Plugin for the 3D environment. Unity might look stuck at importing ComputeDataComputeShader.compute but PLEASE DO NOT KILL UNITY, WAIT FOR THE IMPORT TO COMPLETE. It usually takes 20 minutes to an hour.",
      "target_audience": [
        "Passionate Game Developers",
        "Beginner level Unity3d Developer",
        "Intermediate Unity Developer who wants to create their own 3D platformer game",
        "Artist who wants to expand their knowledge in Game Development"
      ]
    },
    {
      "title": "Megascans Scene - Black Alder Forest",
      "url": "https://www.udemy.com/course/mgs-scene-black-alder-forest/",
      "bio": "Learn how to create a detailed scene on Unreal Engine 5 using meg",
      "objectives": [
        "Working on Terrain Creation with Landmass Plugin",
        "Using Procedural Foliage Volume to spawn trees across the scene",
        "Using Automatic Foliage Setup thanks to Landscape Grass Type",
        "Dressing up lake borders and setting up water shader",
        "Using Nanite/Megascans assets",
        "Create a realistic and natural lighting",
        "Add details such as stumps and rocks"
      ],
      "course_content": {
        "Introduction": [
          "Intro & Provided Project Overview"
        ],
        "Landscape Creation": [
          "Add Terrain & First Brush",
          "Add Other Brushes",
          "Assign Material Instance",
          "Kill Texture Repetition (Texture Bombing)",
          "Add Texture to First Layer",
          "Add Texture to Other Layers",
          "Smoothing Edges",
          "Manual Painting- Explanations",
          "Manual Painting - Terrain & Lakebed"
        ],
        "Procedural Foliage": [
          "Enable Plugin & Add Volume",
          "Tall Trees - Create Spawner & First Generation",
          "Tall Trees - Set Density",
          "Tall Trees - Set Angle",
          "Tall Trees - Set Z Offset",
          "Tall Trees - Set Scale",
          "Tall Trees - Steps & Number Per Step",
          "Tall Trees - Add Other Tall Trees",
          "Tall Trees - Improve Tile Overlap",
          "Tall Trees - Exclude Landscape Layer & Set Max Height",
          "Add Medium Trees",
          "Add Small Trees",
          "Growing in Shade"
        ],
        "Optimization": [
          "Set Minimum LOD on First Tree",
          "Set Minimum LOD on Other Trees"
        ],
        "Automatic Foliage (LGT)": [
          "Explanations",
          "First Layer - Add Sorrels",
          "First Layer - Improve Specular",
          "First Layer - Add Frens",
          "First Layer - Add Nettles",
          "Set Second Layer"
        ],
        "Lake Creation": [
          "Download Assets",
          "Dress up Edges",
          "Add Cliffs",
          "Set Mesh Edges Material Instances",
          "Set Water Parameters",
          "Vegetation - Rework Edges",
          "Vegetation - Add Grass",
          "Vegetation - Set Grass Material Instance",
          "Vegetation - Add Cabbage"
        ],
        "Lighting": [
          "Add Fog & HDRI",
          "Set Sun Direction",
          "Set Volumetric Fog",
          "Remove a few Trees",
          "Terrain Height Rework",
          "Add Sky"
        ],
        "Add Details": [
          "Explanations",
          "Download Rocks",
          "Add Rocks",
          "Add Stumps",
          "Add Water Rocks",
          "Use Megascans Blueprint",
          "Set Contact Shadows",
          "Outro"
        ]
      },
      "requirements": [
        "Owning a computer with Windows 10 or Windows 11",
        "Winrar or 7zip to decompress files",
        "The basics on Unreal Engine (Camera movements, create Materials, Import assets...)"
      ],
      "description": "You have always wanted to create a scene in Unreal without spending hours creating complex shaders, vegetation and going straight to the point to focusing only on composition? This course is for you!\n\n\nWhat I will learn?\nIn Unreal Engine 5.3.2:\nWorking on Terrain Creation with Landmass Plugin\nUsing Procedural Foliage Volume to spawn trees across the scene\nUsing Automatic Foliage Setup thanks to Landscape Grass Type\nDressing up lake borders and setting up water shader\nUsing Nanite/Megascans assets\nCreate a realistic and natural lighting\nAdd details such as stumps and rocks\nWorking with Quixel Bridge plugin\n\n\nWhat I will get?\n3h30 of step-by-step video tutorial\n1080/30fps resolution\n\n\nSoftware Used:\nUnreal Engine 5.3.2\n\n\nLevel:\nAnyone who wants to learn, improve or fix their skills in environment creation.\n\n\nPrerequisite:\nOwning a computer with Windows 10 (64Bits) / Not tested on Windows 11\nWinrar or 7zip to decompress files\nThe basics on Unreal Engine (Camera movements, create Materials, Import assets...)\n\n\nImportant note :\nThis course was created in version 5.3.2 and it is STRONGLY RECOMMENDED to use THE SAME version! If you choose to use another version, be aware that you may encounter possible errors not covered in this course.\n\n\nAbout copyrights:\nAll you can find in this course are for personal usage only. You cannot share it, sell it or make it available for free on any platform.",
      "target_audience": [
        "Beginners wishing to learn how to create a detailed scene on Unreal Engine 5"
      ]
    },
    {
      "title": "Mastery in Roblox Studio: All important Skills",
      "url": "https://www.udemy.com/course/learn-to-code-in-roblox-studio-2023/",
      "bio": "Become a Pro at Roblox Game Development - Beginner To Pro Course for Roblox Studio",
      "objectives": [
        "Will Be Able to Make High Quality Builds",
        "Can Write Beginner to Advanced level coding",
        "How To Animate efficiently",
        "A lot of stuff from which you would have a idea of scripting and you would be able to make a basic or good game",
        "How To Make Beautiful Map With Terrain",
        "How To Grow and Market Your Roblox Game",
        "Will Be Able To Make Professional Ui",
        "Will be able to do Roblox Game Development"
      ],
      "course_content": {
        "Starting": [
          "Introduction",
          "Creating A Game",
          "Getting Started",
          "Saving A Game",
          "How Scripts Work",
          "Types of Scripts",
          "Some Basics",
          "Part Properties",
          "Lightning",
          "How Scripts Work Quiz"
        ],
        "Beginner": [
          "Variables",
          "Variables quiz",
          "If Statements",
          "If Statements",
          "Else and ElseIf",
          "in pairs loops",
          "Instances",
          "Instances",
          "While loops",
          "While Loops Quiz",
          "Cloning & Destroying",
          "Questions",
          "Purchasing Item",
          "Tables",
          "Animations",
          "Tools",
          "Quiz!"
        ],
        "How To Do Intermediate Scripting": [
          "CFrame",
          "Random",
          "Random Quiz",
          "Tween Service",
          "Kill part and particles",
          "Descendants",
          "Questions",
          "Descendants Quiz"
        ],
        "How To Do Advanced Coding": [
          "Mouse",
          "User Input Service",
          "Teams",
          "Math Functions",
          "Tick"
        ],
        "Game Stuff": [
          "Clothing ui",
          "Different Functions",
          "Monetization",
          "Tools Animation",
          "Data Store"
        ],
        "How to make a obby": [
          "Getting Started",
          "Scripting Cash Shop Ui",
          "Decorating",
          "Finishing"
        ],
        "How to make good Roblox UI": [
          "Fitting Ui On All Devices",
          "Making A Beautiful Ui",
          "Loading Screen",
          "Ui Gradients"
        ],
        "How to make professional Buildings in Roblox": [
          "Basics",
          "Making A build",
          "Reducing Lag",
          "Plugins For Building",
          "Streaming Enabled",
          "Decals and Textures"
        ],
        "How to use Terrain": [
          "Making A Land",
          "Basics",
          "Island",
          "Materials"
        ],
        "How to animate in Roblox Studio": [
          "Getting Started",
          "Using Live Animation Creator",
          "Jump, Anime Jump and Punch Animation"
        ]
      },
      "requirements": [
        "A Pc or Laptop with Internet",
        "No Programming Experience Needed",
        "No experience is needed about anything"
      ],
      "description": "USE CODE LETS_LEARN FOR A 100% DISCOUNT\nIn this course, I teach about scripting / lua programming, building, UI designing, animating, and growing your game. You will also learn to make an Obby. You need no experience to watch this course, but if you have some experience, you are still invited to dive into this Roblox course to enhance your skills.\nWhat You Will Learn:\nBuilding: How to create buildings easily and make them look good in Roblox.\nScripting: Basic, intermediate, and advanced level scripting in Roblox.\nUI Design: How to create awesome UI in Roblox Studio.\nAnimation: How to use the live animation creator and make great animations in Roblox.\nGrowing: How to make your game famous in Roblox Studio.\nTerrain: How to use terrain in Roblox Studio.\nWhy Choose Me?\nThe videos are of high quality, providing a better learning experience.\nI explain everything clearly in this Roblox course.\nI have more than 3 years of experience with Roblox Studio.\nI will teach you not only how to create your game but also how to grow it.\nI cover multiple topics in a concise manner.\nIf you have any questions, feel free to ask, and I will respond very soon. There are also question exercises in this course, allowing you to practice what you have learned. You can easily download Roblox studio from Roblox website and get started",
      "target_audience": [
        "Beginner roblox developers who want to get started",
        "Intermediate level roblox developers who want to learn",
        "Advanced Roblox Developers who want to Max Their Skills"
      ]
    },
    {
      "title": "Introduction to Game Dynamics with Unity 3D",
      "url": "https://www.udemy.com/course/introduction-to-game-dynamics/",
      "bio": "Learn professional game development techniques using the Unity 3D platform.",
      "objectives": [],
      "course_content": {
        "Introduction to the Course": [
          "Introduction"
        ],
        "Introduction to Game Dynamics": [
          "Hard Rocks, Soft Feathers",
          "Cloth",
          "Swapping Rigid to Soft Bodies",
          "Movement Controllers",
          "Three Approaches to Movement"
        ],
        "Integrating Dynamics and Animation": [
          "Adding Animation with Mecanim",
          "Creating a Ragdoll",
          "Integrating Animation with Dynamics"
        ],
        "Conclusion": [
          "Bringing It All Together"
        ],
        "Bonus Material": [
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "Free version of Unity 3D"
      ],
      "description": "From explosion blasts to motorcycle crashes, games are riddled with physical reactions. Find out how to trigger these events, and how to take your character movement beyond walk cycles.\nFor some visuals, take this random youtube video of GTA V motorcycle crashes. How do you know when a character is supposed to react? And if you do know, how can you make it look realistic? You can’t resort to some crouching position set up by an animator, there’s a de facto infinite amounts of ways on how a character can get impacted. Or this MK clip. Uppercutted someone and then set up a combo to slam them back to the ground? Can’t do it without dynamics.\nIf you want to create games that people really love, you need to know game dynamics. In this course you will learn game dynamics from a professional game developer using the free and popular Unity 3D game development platform.\nWhat Is Game Dynamics?\nGame Dynamics (sometimes confused with Game Mechanics) has been difficult for the game development world to describe using words. The best definition consists of three parts in order to understand the whole idea of Game Dynamics:\nMechanics are the formal rules of the game. The agents, objects, elements and their relationships in the game. They define the game as a rule-based system, specifying what there is, how everything behaves, and how the player can interact with the gameworld.\nDynamics are the emergent behavior that arises from gameplay, when the Mechanics are put into use.\nAesthetics are the emotional response from the players to the gameplay.\nMore About the Course\nThis course aims to give you a solid overview of how Game Dynamics can be integrated into any game you're creating, as well as how to use Unity 3D tools such as the Mecanim Animation System to achieve a dynamic game environment.",
      "target_audience": [
        "Beginning game developers",
        "Seasoned game developers"
      ]
    },
    {
      "title": "UE5 Sci-Fi VFX Series - Part 3 - Energy Shield & Grenade VFX",
      "url": "https://www.udemy.com/course/ue5-sci-fi-vfx-series-part-3-energy-shield-grenade-vfx/",
      "bio": "Create & Prototype Real-Time VFX for Game Production",
      "objectives": [
        "Create Real-Time VFX in UE5 using current video game studio production pipeline practices",
        "Become proficient in Unreal materials using industry techniques for FX creation",
        "Create Blueprint logic and Niagara Systems for executing FX in gameplay",
        "Create materials in a modular way for faster iteration and alteration",
        "Use Niagara Beam emitters with Blueprints to create dynamic lightning VFX"
      ],
      "course_content": {},
      "requirements": [
        "Basic understanding of Unreal Materials, Blueprints and Niagara Systems.",
        "Have taken UE5 Sci-Fi VFX Series - Part 2 - Laser & Plasma Blaster VFX (Highly Recommended, Will need those assets)",
        "Have Taken UE5 Sci-Fi VFX Series - Part 1 - Respawn & Ammo Pickup VFX (Recommended)"
      ],
      "description": "This. Is. It. Part 3 and The final chapter in our UE5 Sci-Fi VFX Series for Game Production. And we’re going out with a Bang. We’ll be diving into more advanced material work with our Energy Shield and deeper methods for prototyping VFX in our Blueprints and Niagara Systems for our Energy shield.\n\n\nFirst we are going to focus on creating our sci-fi energy shield and hook up our automated Turret VFX.\n\n\nThe focus will be all about more complex material creation through detailed, animated masks and implementing a modular based structure for faster iteration and alteration in order to strike a balance between art direction and gameplay needs. We will wrap that section up in our blueprints by creating spawn logic from our Player Character. We will work on defining proper collision logic and drive certain material parameters through timelines to animate our shield kicking on and off. And of course we will make sure to hook up all of our VFX for our turrets to properly test our shield against enemies.\n\n\nIn the final section we will make a really satisfying Pulse Grenade.\n\n\nWe will reuse assets we created in Part 2 of the course from our Laser Beam and Plasma Blaster VFX. You will still be able to follow along if you missed that part, but you will be missing assets that will be used heavily in this course. You may create your own, however, if you wish to fill in the gaps and apply knowledge you already have. We will have a lot of fun creating ways for our Blueprints to be used to create dynamically changing strike points for our lightning arcs by exposing parameters in our Niagara Systems. We will go through some preliminary tests to make sure our beams are working correctly.\n\n\nThen we will add more detail to our lightning arcs in our Niagara systems to give them some more shape and dynamic animation. We will even explore some additional material logic in our bonus section by creating a function to make sure our beams stay consistent in their emissive values from various distances.\n\n\nBy the end of Part 3 you will not only have some really cool portfolio pieces, but a better understanding of how to create and prototype many other VFX by leveraging the power of Unreal Materials, Blueprints and Niagara Systems.\n\n\nSo, hop on in and lets get crafting!",
      "target_audience": [
        "Advanced beginners to intermediate",
        "Those who want a deeper understanding of how to create VFX for games in Unreal",
        "VFX Artists looking to switch to Unreal and understand pipelines for game production",
        "Those who want to be production ready for video game development",
        "Those looking to get a job in the game industry as a VFX Artist"
      ]
    },
    {
      "title": "Make an HTML5 City Builder Game with Godot 4!",
      "url": "https://www.udemy.com/course/make-an-html5-city-builder-game-with-godot-4/",
      "bio": "Explore intermediate topics such as the AStar algorithm, packed arrays, vertex animated textures (VAT)",
      "objectives": [
        "Learn technical art workflows with Blender and Godot (including Vertex Animated Shaders)",
        "Optimize Godot games for web builds using multimeshes, VAT, and packed arrays",
        "Level-up your Godot workflow and pipeline skills",
        "Develop and iterate on practical game design documents that give you a great starting point for a game"
      ],
      "course_content": {
        "Game Design and Blender/Godot Workflows": [
          "Starting from Scratch. How to create a new game",
          "Tech Art. How to reduce poly counts and preserve detail",
          "Time Lapse: optimization a store front model",
          "Tech Art. Creating the road asset, and finishing up"
        ],
        "Godot Game Programming": [
          "Game Programming. Creating a new project in Godot",
          "Game Programming. Multimesh object placement",
          "Game Programming. Iterating on the build system",
          "Game Programming. Fixing the \"rotation\" issue",
          "Game Programming. Developing the simulation",
          "Game Programming. Data oriented design.",
          "Game Programming. Linking BuildInstances to data, and setting up build timers.",
          "Game Programming. Implementing the AStar algorithm (AStarGrid)"
        ],
        "Vertex Animated Textures and Polishing the Vertical Slice": [
          "Tech Art. Vertex animated textures (part 1)",
          "Tech Art. Vertex animated textures (part 2)",
          "Polishing the Vertical Slice. Videos and ffmpeg in Godot",
          "Tech Art. Vertex animated textures (part 3)",
          "Polishing the Vertical Slice. Fixing up the road asset.",
          "Polishing the Vertical Slice. Last iteration of polish and closing the course."
        ],
        "Additional Content": [
          "Why even bother with a game design document?"
        ]
      },
      "requirements": [
        "Basic Godot 4 development experience",
        "Basic Blender experience"
      ],
      "description": "This course details my development process of the web-based city builder game called ZTown.\nEach lecture is approximately an hour long, some longer, some shorter- you will see nearly everything I do, with very little content cut from the process. I often talk through why I am doing something, not only what I am doing, and I include when I make mistakes. This will allow you to get a viewpoint on how I design games, and you can think about how you might do things differently, or maybe there are certain things you would like to borrow from my practice (please do!).\n\n\nThe course will take you through all of my major design and development activities to produce a working vertical slice:\nGame design inception and game design doc creation\nThinking out design problems with design problems\nDeveloping 3D art pipelines and workflows that suit complex topics such as vertex animated textures, and vertex paint masks for instanced rendering and animating\nIterate and develop a complete Godot 4.4 project designed for web\nImplementation of the AStar algorithm for path finding in a city building game\nA complete breakdown of in-gamer shaders and multimesh instancing algorithms for Vertex Animated Textures (VAT)\nThe process for finalizing and polishing the game, including adding sound effects, an end screen, and tweaking all of the game design variables.\n\n\nAt the beginning of each video, you will get a brief description of the lecture as well as suggestions on how best to approach the videos.\nSome of these learning suggestions include:\nPausing the video at key moments and repeating the steps for yourself so you understand how to work in Blender, Godot, or other pieces of software used\nListening along and taking notes, to see how certain things might be implemented in your design practice\nJumping to important timestamps to find and gather specific bits of knowledge contained in the videos.",
      "target_audience": [
        "Beginner to intermediate Godot developers who are looking to level-up their programming and game development skills.",
        "Game designers interested in learning more about the development process",
        "3D modelers and texture artists interested in tech-art and pipelines"
      ]
    },
    {
      "title": "LEARNING GODOT BY CREATING SIMPLE GAMES",
      "url": "https://www.udemy.com/course/learning-godot-by-creating-simple-games/",
      "bio": "Examples of games and scripts",
      "objectives": [
        "Exploring Godot 4.",
        "Learning creative and logical thinking.",
        "Principles and rules for creating simple games.",
        "Solid foundations for further learning programming."
      ],
      "course_content": {
        "Wstęp": [
          "Introduction",
          "Godot versions"
        ],
        "A retro-style Arkanoid game.": [
          "Introduction, main screen and player creation.",
          "Sterring of the player and borders of the screen.",
          "Bouncing Ball",
          "Bricks on the Screen",
          "List of Bricks.",
          "Timer and waiting for the start of a new game."
        ],
        "Endless Runner": [
          "Where to get graphics, sounds and backgrounds.",
          "Player, floor and images Import",
          "Falling, jumping and animation's hero .",
          "Obstacle and collisions",
          "Points and own Signal",
          "Restart games, timer and moving floor."
        ],
        "Car Game": [
          "Introduction to Car Game",
          "Sterring with Car",
          "Background and collision road",
          "Graphics, checkpoints and finish line",
          "Restart and Start Timer",
          "Checkpoints and End Game"
        ],
        "TIC TAC TOE": [
          "Introductions: Buttons and GridContainer",
          "Players' turn",
          "Check who won",
          "GUI, Restart and the case when no one wins"
        ],
        "Ship Lander": [
          "Introduction to Ship Lander",
          "Sterring of Ship",
          "Good Landing",
          "Introduction to Tilemap Node",
          "Collision in Tilemap",
          "Creating Levels",
          "Changing Levels"
        ],
        "Drawing in Godot": [
          "Introduction and simple shapes.",
          "Circular motion in real time.",
          "Wave and Spiral",
          "Line_2d Node.",
          "Sierpinski Triangle: Episode 1",
          "Sierpinski Triangle: Episode 2",
          "Sierpinski Triangle: Episode 3",
          "Right Triangle in Circle",
          "Sinus and Cosinus"
        ],
        "How to create Simple Quiz": [
          "Introduction and main scene.",
          "First Question.",
          "Script for question.",
          "More questions and putting it all together."
        ],
        "Find the Difference - Tarot Cards": [
          "Introduction and graphics of the selected card.",
          "Invisible buttons.",
          "Bad choice.",
          "End of game condition."
        ]
      },
      "requirements": [
        "Computer and internet access."
      ],
      "description": "GODOT 4 is an increasingly popular and, above all, completely free program not only for creating games. Thanks to its unique GDScript language and accessible interface, it is gaining an increasing number of fans.\nIn the course, I would like to familiarize you with the basics of using Godot 4 and do it not on the example of dry theories, but on practical short games in which all our attention will be focused on programming and the interface, without unnecessary and time-consuming bells and whistles.\nIn the course, you will learn the basics thoroughly, presented in many practical examples, in gradually increasing order of difficulty. Additional modules in the form of prototypes of simple games will allow you to understand when and how given patterns are used.\nSome examples from the course:\n- How to create an Arkanoid game quickly.\n- How to create an endless runner game.\n- Simple top view car game.\n- Some math and drawing in Godot.\n- Tic Tac Toe.\n- Landing on the platform with a spaceship.\n- Simple Quiz.\nGodot version 4 allows you to create games in both 2D and 3D. The special Tiles map system and many other amenities attract especially Indie programmers who create mainly in two dimensions.\nProgramming will be taught in GDScript, a language similar to Python and extremely intuitive in its own way. The user-friendliness of the hint system and the encyclopedia of Methods and Classes in GDScript will significantly speed up the learning process. I invite.",
      "target_audience": [
        "Beginner programmers interested in creating games."
      ]
    },
    {
      "title": "How to Build a Game with HTML, CSS, and JavaScript",
      "url": "https://www.udemy.com/course/how-to-build-javascript-games/",
      "bio": "Learn how to create HTML5 and JavaScript games from scratch Step by step tutorials with real HTML5 code examples",
      "objectives": [
        "create animations using javascript",
        "use html5 to interact between JavaScript and canvas",
        "create basic games",
        "add objects to the canvas",
        "understand concepts on html5 game creation"
      ],
      "course_content": {
        "Start Here": [
          "What you need at the start and what you will receive in the end.",
          "Pong game, how to create a base class",
          "Pong game base methods",
          "Pong game how trigger events",
          "Tetris game, initialization",
          "Tetris game, base methods",
          "Tetris game how trigger events"
        ]
      },
      "requirements": [
        "You should be able to have knowledges at least in one programming languages",
        "You should be able to know how to work with javascript",
        "You should be able to know base commands for javascript programming language"
      ],
      "description": "Requirements\na computer\ndesire to learn\nDescription\nCrash course to learn how to build js games.\nCore HTML5 training using canvas and setting a gameboard. Adding text and dynamic variables. Using event listeners to determine keyboard actions and create movement. Interacting with game items like a power up pill. Collision detection to determine multiple reactions to object interactions on the game board. Tweaking and fine tuning game interactions for better game play.\nThis course is designed for anyone who wants to better understand how to create their own HTML5, within this course we show you how to make a basic HTML5 game from scratch. You can reuse and practice with the sample code in the course.\nI start with a blank document, add in html and then JavaScript to create the game.\nI walk you through step by step with detailed explanations of code and more.\nquick lessons get right to the point\nfully covered topics with real world examples\nsource files downloadable to work along\nfull HD easy to read source coding\nquick response support to students\nregular discussions\nI teach you the latest techniques and tools to use in order to create html5 canvas animations and content. Everything you need to know is included in this course. Learn at your own pace, lifetime access to this course.\nWho is the target audience?\nanyone interested in learning about HTML5 game development\nusing JavaScript and html5 canvas\nonline web developers\napplication developers",
      "target_audience": [
        "Anyone who wants to learn a code",
        "This is a developers who had expirience in different languages.",
        "This course is ideal for is want to build games with html5 canvas and javascript",
        "This course is perfect for experienced programmers wanting to fill in gaps in their programming knowledge"
      ]
    },
    {
      "title": "Actionscript 3 Side Scrolling Games",
      "url": "https://www.udemy.com/course/as3sidescroller/",
      "bio": "Use Flash and Actionscript 3 to program a side scrolling game that could be played online, on Android, or iOs devices.",
      "objectives": [
        "Program at least one level of a side scrolling game"
      ],
      "course_content": {
        "Introduction and Programming Your First AS3 Class": [
          "Introduction",
          "Creating a Custom Timer Class"
        ],
        "Programming an Actionscript 3 Side Scroller": [
          "Programming the Main Engine, Player, Enemy, and More",
          "Spawning More Enemies, Dealing with Enemy Death, Player Jumping, etc.",
          "The Coin Class and Mobile-friendly Accelerometer Code",
          "Alternate Source Files"
        ]
      },
      "requirements": [
        "Adobe Flash CS5, CS5.5, CS6, CC (or any version with Actionscript 3)"
      ],
      "description": "Justin Dike, lead developer and owner of CartoonSmart.com teaches every step in programming a side scrolling Flash game with Actionscript 3. Use the arrow keys to move a character around and attack while traversing a vector based environment (you can easily draw the entire level to play on using vector shapes or movie clips.\nAlso included is alternate code to use with a mobile device's accelerometer (tested on the Android & iPhone OS). Topics include:\nAdd new classes for different enemies.\nAdd new classes for objects like coins to collect.\nSwap in new art to easily create new levels (just cut and paste, or draw in new art).\nAdd more levels, including animation that the player could collide with.\nAdd more objectives (items to pick up or areas on the board to go to)\nAdjust how many enemies are on stage, where they spawn from, and how often they appear.\nChange the physics of the game, speed or attack intensities of the enemies\nAs usual with Justin's tutorials, source files are included.",
      "target_audience": [
        "Anyone"
      ]
    },
    {
      "title": "How to make 3D RPG game without coding - unity game builder",
      "url": "https://www.udemy.com/course/how-to-make-3d-rpg-game-without-coding-fastest-and-simplest/",
      "bio": "3D smile video game development and design course for beginner,export to PC,Mac,mobile,ios,android app.like RPG maker MV",
      "objectives": [
        "Create 3D games and can upload them to Steam,Appstore, Google Play and other platforms."
      ],
      "course_content": {
        "Map Basic": [
          "Map Basic",
          "Map Edit"
        ],
        "NPC": [
          "Doors,Shops and INNS"
        ],
        "Battle": [
          "4.Battle Setting"
        ],
        "Advanced Map editing.": [
          "Map Setting"
        ],
        "Variable": [
          "Variable"
        ],
        "Game Flow": [
          "Control Game Flow by Variable"
        ],
        "Advanced Events": [
          "Event Detail",
          "Player and Movement",
          "Item And Stats",
          "Other Events and Music",
          "Advanced Variable",
          "Settings",
          "Branches",
          "Miscellaneous"
        ],
        "Export Game to Unity3D": [
          "Export Game to Unity3D in 1 minute"
        ]
      },
      "requirements": [
        "You can learn without additional knowledge. Need to prepare 3D GAME BUILDER software."
      ],
      "description": "Make 3d RPG game without coding.\nFor example, it only takes a month to rewrite RPG game like Dragon Quest or Final Fantasy.\nCross-platform operation, Windows, IOS, Mac OS X, Linux, Android, Xbox, TVos, PS, WEBGL, facebook.\nYou can upload to STEAM, APPSTORE, GOOGLE PLAY, AMAZON, GOG and other platforms to get passive income.\nThe tutorial details the steps of game development and does not require a programming foundation.\nEveryone can learn!",
      "target_audience": [
        "Game developer"
      ]
    },
    {
      "title": "Learn Game Developement from Unity 3D",
      "url": "https://www.udemy.com/course/learn-game-developement-from-unity-3d/",
      "bio": "Learn All the Basic requirements to start your career as a Game Developer with this awesome course.",
      "objectives": [
        "Fundamentals of Unity",
        "Expertise in using Unity",
        "Learn C sharp for Game developement",
        "Learn to Make Professional Level Game AAA+ Quality",
        "Project Making and Simplified Explanation of Task."
      ],
      "course_content": {
        "Selection Tools and Assets": [
          "Basics of Unity",
          "Basics of Unity 2"
        ],
        "Object Manipulation and Environment Creation": [
          "Co-ordinate system and Scaling",
          "Objects and Environment"
        ],
        "Basic Input Controls": [
          "Input Controls",
          "Input Controls 2"
        ],
        "Top Free Assets from Unity": [
          "How to Import Assets ?",
          "Top Free Assets from Unity"
        ],
        "Make Your Own Terrain": [
          "Beach Terrain",
          "Making our Own Terrain Part 1",
          "Finishing our Own Terrain Part 2",
          "PostProcessing Our Scene"
        ],
        "Advanced C# Control Inputs": [
          "C# Scripting 1.0",
          "Unity Scene Management",
          "Lecture 18 : C# Scripting 2.0",
          "Simple Unity Game 1",
          "Simple Unity Game 2"
        ]
      },
      "requirements": [
        "No programming experience is needed , I will teach you everything you need to know",
        "Perfect explanation of each segments will be given"
      ],
      "description": "Do you want to create a professional looking horror survival game in Unity? Well you've found the right course. This is aimed at anybody who loves game design and wants to make awesome games.\nMy name is shantanu sahay and I have taught game design for over 2 years. In this series we will be making a game where your first person character has to try and survive against a gang of zombies.\nYou don't need previous experience as I will be guiding you through the course step by step, showing you how to make the game and to write the code using C#. I will be giving you interesting assignments throughout to build your experience and knowledge in game design.\nYou will need a powerful computer to complete this project, so please ensure your computer meets the minimum specifications as displayed on the course home page.\n\n\n\n\nBy the end of this course you will have a completed horror survival game which you can export out as a finished product. You will have developed the skills, confidence and understanding of how to make your own games in Unity.\n\n\nThis course includes the following free assets:\nFree horror environment 3D scene\nFree weapons\n6 free realistic animated enemy characters\nFree sounds and music\nFree music by Bensound\nWhat you’ll learn\nUse post processing to create amazing graphics\nCreate a unique horror survival game in Unity 2019\nEasy to understand coding activities\nCreate intelligent AI\nCreate stealth and combat mechanics\nUse a custom load screen\nCreate a main menu and options menus\nCreate an interactive inventory menu\nMechanism and Timeline based animations\nAre there any course requirements or prerequisites?\nIt would be good to have a basic understanding of Unity. You do not need any coding experience as I will cover C# coding in detail\nThe game is very detailed and in order to follow along with the project you will need a fast computer that meets the following minimum specifications\nPC or Mac with at least a 2.5GHz processor\nAt least 4GB RAM\nAt least 10GB available space on your Hard Drive\nVideo Graphics Card with at least 2GB onboard RAM\nMy computer Specs when creating this tutorial:\nWindows 10, i7 processor 4GHz, 32GB RAM, Nvidea Geforce 1070 graphics card with 8GB RAM\nThis allows me to get 60fps in the game, however, even at 30fps the game runs fine.\nWho this course is for:\nThis course is aimed at anyone who wants to make awesome games in Unity\nCreative game designers will enjoy the course\nI make the coding very easy, so it should be fun, even for people who are put off by C# coding\nAll user levels of Unity, from beginners to advanced will learn something from this tutorial\nThere are a range of fun activities to help you make the game your own throughout development",
      "target_audience": [
        "Beginners who want to start off their career in game developement"
      ]
    },
    {
      "title": "Ultimate C# & Unity Game Development Course for Beginners",
      "url": "https://www.udemy.com/course/ultimate-c-unity-game-development-course-for-beginners-u/",
      "bio": "How to make a game in unity with c# programming for complete beginners to Intermediate",
      "objectives": [
        "You will learn how to make simple 2d game in unity",
        "You will learn basics of unity game engine",
        "You will c sharp scripting in unity game engine",
        "You will learn everything in unity game engine from basics to advance"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Creating Project, Unity Basics Overview & Player Setup",
          "Player Scripting & Player component setup",
          "Player x position clamp, Shooting function & If condition etc...",
          "Player bullet spawn scripting",
          "Player Bullet Moving Scripting",
          "Background & Enemy Setup with Enemy Scripting",
          "Enemy Moving Scripting & Bullet Collision",
          "Enemy Damage & Destroy Scripting",
          "Enemy Bullet Spawn Scripting & Shoot function",
          "Enemy Bullet Moving & X Time Spawn Scripting",
          "Player Damage & Health Scripting",
          "UI in UNITY & Player health UI Setup",
          "Enemy Spawn Scripting, Chasing Bug Fixing & Enemy Collision Between them",
          "Game Over MENU Setup",
          "Loading Game Over & Scene Management Scripting",
          "MENU Scene Setup & Switching Scenes",
          "AUDIO in UNITY & Audio Manager Script",
          "Making The Game Difficult Over TIME",
          "Building The Game (Application)"
        ]
      },
      "requirements": [
        "Should have a little bit of math physics knowledge such axis, vectors etc... But along the way i will teach everything that you need to make your first game in unity game engine!"
      ],
      "description": "This course is for complete beginners or who just started out learning unity game engine with c sharp programming language, In this course you will learn everything that you need to make a game in unity game engine with C#  coding, You will learn about game objects, components, UI, Audio, scripting and lot more other things in unity game engine such as how to add audio to the game or how to make player game object move with the help of c sharp coding, In C# you will learn about classes, variables, functions, if condition, comments & much more things in c sharp  programming language, I have explained everything from scratch from game objects in unity to classes in C# programming. If you never touched unity game engine then don't worry this course is absolutely for you.\nThis course will teach everything that you need to make your first 2d game in unity game engine with the help of c sharp programming language, You will learn all the basics of game development in unity game engine with c sharp programming, From game objects to component, gravity, player movement mechanics, player shooting, enemy spawn everything you can think of to make a game in unity with C#!",
      "target_audience": [
        "Complete beginners to Intermediate people!"
      ]
    },
    {
      "title": "UE4 Game Loops: Block Breaker",
      "url": "https://www.udemy.com/course/ue4-game-loops-block-breaker/",
      "bio": "Discover how to assemble a block breaker game using Unreal Engine 4",
      "objectives": [],
      "course_content": {
        "Block Breaker Game Creation": [
          "Project Setup",
          "Player Paddle & Input",
          "Ball & Collision",
          "Game Mode & Respawn",
          "Creating the Blocks",
          "Looping Our Game",
          "Creating Collectables",
          "Adding the Menu",
          "Creating the HUD",
          "Adding the HUD Collectables",
          "Finalising Win Condition"
        ]
      },
      "requirements": [
        "You will need to have prior experience using Unreal Engine 4 and a basic understanding of Editor systems."
      ],
      "description": "This course will cover all the necessary steps to assemble a block breaker game using Unreal Engine 4. This course is intended for developers that are already familiar with the UE4 interface and can move between systems to construct a game. The videos have been kept to a minimum in length and have been structured to outline the steps with less theory explained.\n\nI recommend that as a developer you watch a fundamentals course prior to this course if you are interested in the basics of moving about inside of the Editor. Many systems will be used within Unreal Engine and the course would exceed the 2 hour threshold for a free course if I were to teach how to move inside of the Editor along with the basic construction of the core game loop.\n\nWhen considering the construction of a game you must use certain programming principles like inheritance and parent classes which will be shown in this series to allow for re-usability of code and cleanliness of construction of the project.\nWe will cover the following tasks in the series:\nImporting of assets into a scene\nCreation of a player and input controls\nControlling the game flow through the game mode and respawn of player\nCollectables\nMenu and HUD\nWin condition\nBy the time you have finished the series you will be knowledgeable enough to create and publish a simple block smashing game designed inside of Unreal Engine 4.",
      "target_audience": [
        "This course is for beginner to intermediate Unreal Engine or Game Developers interested in creation of a basic game application loop."
      ]
    },
    {
      "title": "JavaScript DOM Game Blackjack JavaScript Game from Scratch",
      "url": "https://www.udemy.com/course/javascript-game-code/",
      "bio": "Explore JavaScript Document Object Model web page element updates manipulation using JavaScript code to create a GAME",
      "objectives": [
        "how to apply JavaScript to create DOM based Game",
        "JavaScript coding",
        "Update and manipulate web page element using JavaScript"
      ],
      "course_content": {
        "Introduction create a BlackJack Game from scratch with JavaScript": [
          "Introduction to JavaScript BlackJack game",
          "Web Developer Setup HTML.",
          "HTML Source Code",
          "Get coding JavaScript",
          "Source Code",
          "DOMContentLoaded run app code",
          "JavaScript App Source Code",
          "Game Variables Element Building",
          "Source JS",
          "Remove HTML only JavaScript",
          "Create Elements JavaScript Source",
          "HTML buttons with JavaScript",
          "Source Code JS document maker",
          "Deck of Cards.",
          "Source Code",
          "Shuffle Deck of Cards.",
          "Source Code Sort Random",
          "Add Event listeners to Buttons.",
          "Button Toggle On Off.",
          "Source Code Event Listeners",
          "Dealing of Cards",
          "Source Code",
          "Show card on WebPage",
          "Source Code",
          "Element CSS",
          "CSS Source Code",
          "Hide Top Card",
          "Source Code",
          "Begin Game Play Conditions Part 1.",
          "Source Code",
          "Begin Game Play Conditions part 2",
          "Source Code",
          "Add Game Player options",
          "Source Code",
          "Dealer Playing Game",
          "Source Code",
          "Find the Game Winner",
          "Source Code",
          "Game Tweaks and Adjustments.",
          "Source Code",
          "Game Bets and scoring",
          "Source Code",
          "GamePlay Updates.",
          "Source Code JS",
          "Final Updates",
          "Final JS Source Code",
          "Final Code Review"
        ],
        "Course Questions and Answers JavaScript code examples": [
          "How to use JavaScript Try and Catch",
          "Try and Throw error debugging coding example with JavaScript catch finally",
          "Learn more with PDF guides and Resources for additional learning"
        ]
      },
      "requirements": [
        "HTML and CSS",
        "Basic JavaScript core fundamentals",
        "Computer access",
        "Programming expereince"
      ],
      "description": "Explore how you can create a JavaScript DOM based game from scratch using JavaScript\nUpdate and manipulate web page element with JavaScript Code - No libraries No tricks all JavaScript\nThis course focuses on JavaScript\nCreate elements and add them to your web page using JavaScript - Yes loaded with examples and way to do this easily.\nAdd event listeners to create interactive content using JavaScript\nDynamic content and interactions updating web page elements\nDo more with JavaScript - Learn to apply JavaScript best of all while build a FUN INTERACTIVE GAME\nBlackjack game - Easy to create with simple rules\nCreate visual cards using CSS\nApply styles, classes and interactions to elements\nStep by step learning - everything you need to create YOUR OWN VERSION OF THIS GAME!!!!\nLearn how to add functions that run the code in sequence to make a game\nLearn more about game design along the way\nTaught by an instructor with many years of REAL WORLD web development experience - READY to HELP YOU LEARN\nFast friendly support is always available within the Q&A section\nWhat are you waiting for - you have nothing to lose!!!\nBUILD YOUR OWN VERSION of the GAME TODAY!!!!\nSource code is included step by step so you can copy the code try it out and get a feel for what JavaScript is doing.",
      "target_audience": [
        "JavaScript developers",
        "Application developers",
        "Anyone who wants to create a project with JavaScript"
      ]
    },
    {
      "title": "Unity Virtual Reality Dev: Beat Boxer, a Rhythm Fitness Game",
      "url": "https://www.udemy.com/course/unity-virtual-reality-vr-development-a-beat-boxer-game/",
      "bio": "Build your very own Virtual Reality (VR) rhythm fitness game, Beat Boxer, using Unity 3D, C# and VRTK.",
      "objectives": [
        "Learn to create a rhythm fitness game called 'Beat Boxer', similar to games like Beat Saber and Super Natural.",
        "Learn to create advanced mechanics, as seen in games like Beat Saber and Super Natural.",
        "Learn to create a sophisticated Diegetic UI, providing the player with a host game stats.",
        "Learn to write C# Event driven Code."
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "How to approach the Course"
        ],
        "Setting Up Your Devices for VR Development": [
          "Introduction",
          "Advantages of using VRTK 4 over Alternative SDKs for VR Development",
          "Download the Beat Boxer Unity Package and setup XR Plugin Management",
          "Setting up Oculus",
          "Importing the VRTK 4 packages"
        ],
        "Setting Up Your VRTK Rig": [
          "Introduction",
          "Setting up individual Camera Rigs",
          "Setting Up VRTKs Tracked Alias",
          "Configure your Oculus, OVR Camera Rig, and Test Spatial movement using your HMD"
        ],
        "Interactors verses Interactables": [
          "Introduction",
          "Interactors verses Interactables",
          "Setting up your Interactors and Virtual Hands"
        ],
        "Setting Up Your Cube Blocks, as Interactable Objects": [
          "Introduction",
          "Setting up Cube Blocks as Interactables"
        ],
        "Setting Up Your Diegetic UI and Countdown Visuals": [
          "Introduction",
          "Setting up Countdown Visuals",
          "Setting up a Diegetic UI"
        ],
        "C# Scripting": [
          "Introduction",
          "Understanding C# Action Events",
          "The Dead Wall Script",
          "The Boxes Missed Script",
          "The Total Boxes In Level Script",
          "The Boxes Hit Script",
          "The Timer Script",
          "The Countdown Controller Script",
          "The Game Manager Script",
          "The Cube Spawner Script",
          "The Punch Script",
          "The Generate Haptic Feedback Script",
          "The Cube Movement Script",
          "Play Test Your Game using your VR Headset"
        ],
        "Completed Course Download Zip File": [
          "Download the Completed Course Project"
        ],
        "Conclusion": [
          "Course Conclusion"
        ]
      },
      "requirements": [
        "An Oculus Rift, or HTC Vive headset or an Oculus Quest with a link cable.",
        "A computer that supports your VR headset, in terms of hardware required.",
        "Know how to setup your VR device for development.",
        "Comfortable with using the Unity editor for basic scene editing.",
        "Basic C# knowledge for Unity."
      ],
      "description": "Welcome to the 'VR Beat Boxer', game development course, where you will learn to create a clone, of the extremely popular rhythm fitness games like Beat Saber, and Super Natural.\nBuild once and deploy to both Oculus and Steam VR devices, with ease.\nThis course, teaches you everything you need to know, to build your very own VR Beat Boxer rhythm fitness game, using the world class Unity Engine, latest LTS version 2020.4.x.\nI am an Emeritus certified iDTech instructor and also the author of the book 'Unity® Virtual Reality Development with VRTK4: A No-Coding Approach to Developing Immersive VR Experiences, Games, & Apps' published by Apress and available world wide on the Amazon and Springer stores.\nUnity is the top rated game engine, when it comes to developing VR apps and games. VRTK on the other hand is a battle-tested VR solution for Unity. Several block buster games have been made using Unity and VRTK.\nVRTK 4 in conjunction with Unity, has changed the dynamics of VR development. No other game engine comes even close, to providing you with such advanced functionality for VR development, as does VRTK 4 with Unity.\nThis course makes understanding VRTK 4, super easy, and the Beat Boxer game you develop, will be a complete game, you could even publish to both Oculus and Steam.\nThe VRTK 4 framework takes care of  all the heavy lifting, in terms of VR Mechanics required. You only add a little extra code, to pull it all together, the way you want it to work.\nOnce you have taken this course, you will be poised, to create amazing rhythm fitness games, like Super Natural an Beat Saber.\nThis course is aimed at beginner to intermediate Unity users, who need to know their way about the Unity editor, for basic scene editing. A basic knowledge of C# programming for Unity is also required, where you need to know what a Class is, what a method is, have knowledge about C#'s basic variable types, if statements and loops.\nThis course will take you through everything, step by step and give you plenty of practice along the way.\nYou will need to have access to a 6 DOF (degrees of freedom) headset, for Steam VR or Oculus only.\nYou could use a Steam VR headset like the HTC Vive, or an Oculus Rift, or an Oculus Quest (both 1 and 2 will work fine), which are some of the more popular, 6 DOF headsets available, and the ones this course has been tested against.\nIf using the Oculus Quest, it would be advisable to have a link cable, as deploying a build to the headset, each time you test is not very practical, and would be time consuming.\nPlease use Udemy's Q & A, for any explanations you seek from my end, related to this course.\nThis course will continue to be updated, as new VR mechanics evolve.\nBecome a VR Game Developer now, and create some amazing Games!\n- Chris,\nGame Works",
      "target_audience": [
        "Beginning to Intermediate Unity developers, looking for a fun way to enhance their skills, by building a rhythm fitness game.",
        "Oculus Quest, Rift or HTC Vive owners wanting to create their very own VR game.",
        "A VR Hobbyist, wanting to get into VR game development."
      ]
    },
    {
      "title": "Learn about Game Development Kits with ARkit and Spritekit!",
      "url": "https://www.udemy.com/course/learn-about-game-development-kits-with-arkit-and-spritekit/",
      "bio": "Learn to use SpriteKit and ARKit to build 2D games and AR Games respectively.",
      "objectives": [
        "Build 2D games in SpriteKit.",
        "Create AR Games with ARKit",
        "Navigate Xcode's interface.",
        "Organize your project and animate sprites",
        "Code in Swift.",
        "Plan, design, and develop games from scratch."
      ],
      "course_content": {
        "Introduction to Xcode": [
          "Downloading and Installing Xcode",
          "Exploring XCode's Interface"
        ],
        "Xcode Fundamentals": [
          "Intro and Demo",
          "General Interface",
          "Files System",
          "ViewController",
          "Storyboard File",
          "Connecting Outlets and Actions",
          "Running an Application",
          "Debugging an Application",
          "Source Code and Art Assets"
        ],
        "Introduction to ARKit": [
          "Introduction to ARkit",
          "Talking About the View Controller and Scenes",
          "Talking about Scenes and Object Properties",
          "Moving Around the Scene",
          "Adding Primitives to your scene",
          "Adding Primitives to your Scenes",
          "Adding Primitives to your Scenes (cont'd)",
          "Adding Nodes and Primitives Programmatically",
          "Adding other Primitives"
        ],
        "Intro to SpriteKit": [
          "Intro and Demo",
          "Learning Goals",
          "Intro to SpriteKit Interface",
          "Intro to SKView",
          "Intro to SKScene",
          "Intro to SKNode",
          "Accessing Nodes via Swift File",
          "Node Section Wrap up",
          "Intro to SKActions",
          "Attaching Actions to Nodes Through Code",
          "Intro to Physics Bodies",
          "Modifying Physics Body Attributes Through Code",
          "Fixing Contact Collision Problem with Physics Bodies",
          "Intro to Field Nodes"
        ],
        "Breakout Game Tutorial": [
          "Intro and Demo",
          "Learning Goals",
          "Setting up the Main Game Scene",
          "Initializing Scene Variables and Creating a Boundary",
          "Implementing Player Movement and Brick Removal",
          "Implementing Game Over Logic",
          "Fixing Collision Issues",
          "Summary"
        ],
        "Pong Clone Tutorial": [
          "Intro and Demo",
          "Learning Goals",
          "Building Scene in sks File",
          "Finishing Set up in GameScene.swift",
          "Implementing Player and Opponent Movement",
          "Adding a Scoring System",
          "Fixing Slow Moving Collision Issues",
          "Summary",
          "Bonus - Modded Paddle Collision"
        ],
        "Space Invaders": [
          "Intro and Demo",
          "Learning Goals",
          "Setting up the Scene",
          "Finishing Set up in Swift File",
          "Implementing Player and Alien Movement",
          "Spawning and Firing Bullets",
          "Implementing Bullet Contact",
          "Implementing End Game Logic",
          "Pixelart Scene Setup",
          "Pixelart UFO",
          "Pixelart Spacecraft",
          "Pixelart Resize and Exporting",
          "Space Background",
          "Adding Textures and Summary",
          "Bonus Features"
        ],
        "Source Code": [
          "Intro to SpriteKit",
          "Breakout Clone Tutorial",
          "Pong Clone Tutorial",
          "Space Invaders Clone Tutorial"
        ],
        "Sketch": [
          "Course Intro and Sketch Tools",
          "Sketch Files - Sketch Tools",
          "Sketch Basics and Online Resources",
          "Plug-ins and Desigining your First Mobile app",
          "Your First Mobile App Continued",
          "Sketch Files - Your First Mobile App",
          "Shortcuts and Extra tips",
          "Sketch Files - Shortcuts by Mammoth Interactive"
        ],
        "Learn to Code in HTML": [
          "Intro to HTML",
          "Writing our first HTML",
          "Intro to Lists and Comments",
          "Nested Lists",
          "Loading Images",
          "Loading Images in Lists",
          "Links",
          "Images as Link",
          "Mailto Link",
          "Div Element"
        ]
      },
      "requirements": [
        "To follow along in Xcode 9, you must have a Mac computer or MacOS software",
        "Blender (we show you how to import a model for AR)",
        "You will need SpriteKit, Apple's free framework for making 2D games."
      ],
      "description": "\"I am learning the basics of SpriteKit and XCode. Great teacher.\" - James M, Mammoth student\nWe at Mammoth Interactive value input from students like you. Feel free to leave us your feedback.\nWhy SpriteKit?\nSpriteKit is the framework for making 2D games for Apple products. It's free ! You can make cool games, from super simple to more complex, in SpriteKit. SpriteKit provides support for cool special effects and physics. It's a fun interface to express your creativity. Before you know it, you could see a game you built in SpriteKit in the App Store!\nTo give a game functionality, you add code to your game's objects in Xcode. Xcode is a user-friendly programming language that is easy to understand.\nAnyone can use SpriteKit.\nIn this course, you learn how to make simple 2D games using Apple's SpriteKit. You build the following games: Breakout Clone, Pong Clone, and Space Invaders. This course is unique because we make both the code and the design for the games from scratch.\nOther tutorials only show you how to make the functionality or design of a game. We at Mammoth Interactive show you how to do both.\nDon't worry if you've never coded before. We start simple and add more to the game as the course goes on. This course begins with an introduction to SpriteKit for those who have never used it before. You will learn how to navigate SpriteKit's interface.\nWhy Should I Learn Xcode?\nXcode is Apple's FREE software for app development. Xcode is so convenient to use. We love it, and you will, too!\nXcode allows you to make complex and creative apps. At the same time, it is accessible for beginners who want to make simple apps. Swift 4.0 is the programming language to learn if you want to make apps for Apple products.\nIs this course for me?\nEven if you're not an artist, you can design basic games. You may have heard of Axiom Verge and Stardew Valley. These games are million-dollar successes. But did you know that only one person made each?\nUsually it takes a whole team of people to build a game. But creators Thomas Happ and Eric Barone developed and designed their games by themselves. Now they're millionaires. You can do it, too.\nBy taking this course, you will gain the tools you need continue improving yourself in the field of game development. You will be able to apply what you learned to further experiment in SpriteKit or any other game development framework.\nLet's get started!\nAlso, now included in this course are bonus courses of other related topics, such as C# and Java! You get more content at a great price!\nEnroll now to join the Mammoth community!",
      "target_audience": [
        "Anyone who wants to learn to use SpriteKit",
        "Anyone who wants to learn game development.",
        "This course is targeted towards complete beginners.",
        "Complete beginners who want to learn to code",
        "Beginners who want to be iOS developers",
        "If you're an experienced coder, you can use this course to learn AR",
        "Mobile developers who want an introduction to Swift 4 and Xcode 9"
      ]
    },
    {
      "title": "Unreal Engine Multiplayer Capture the Flag",
      "url": "https://www.udemy.com/course/unreal-engine-multiplayer-capture-the-flag/",
      "bio": "Professional Blueprint Technical Designer Course",
      "objectives": [
        "Learn how to create Blueprints like a AAA technical designer from a working professional.",
        "Create a fully functional multiplayer capture the flag game.",
        "Covers capture point creation, scoring calculations, user interface implementation, weapon and damage system, respawn logic, and animation setup.",
        "In depth explanation of replication concepts and strategies to prevent common bugs and racing conditions.",
        "Demonstrates the proper use of the various variable types and containers such as custom structs and enums, event dispatchers, arrays, and maps."
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Create Project and Base Classes": [
          "Create Project and Base Classes"
        ],
        "Start Capture Point Logic": [
          "Capture Point Logic"
        ],
        "Add World Widget to the Capture Point Class": [
          "Add the world widget to the capture point class."
        ],
        "Determine Scoring Team for Capture Point": [
          "Determine Scoring Team for Capture Point"
        ],
        "Update Team Progress for Capture Point": [
          "Update Team Progress for Capture Point"
        ],
        "Setup for First Round of Testing": [
          "Setup for First Round of Testing"
        ],
        "Assigning Player Teams": [
          "Assigning Player Teams"
        ],
        "Game Mode Configuration": [
          "Game Mode Configuration"
        ],
        "Game State Logic": [
          "Game State Logic"
        ]
      },
      "requirements": [
        "A computer capable of running Unreal Engine 5.",
        "Students should already know how to install Unreal Engine through the Epic Launcher.",
        "Students should have a basic understanding of how to navigate the editor."
      ],
      "description": "Learn to create a multiplayer capture the flag game with Unreal Engine. You will be taught how to script your game like a AAA technical designer from a professional in the games industry. We’ll go through the entire process of making the core game logic with tips along the way that will ensure your project meets professional standards. My objective is to prepare students who want to work in the industry by demonstrating how blueprint scripting should be formatted to pass code review and minimize bugs.\n\n\nThis course will cover the creation of capture points that can be placed anywhere in the world in any desired quantity. Each capture point will be represented by an in-world UI widget in addition to a heads-up display that will show a team’s capture progress. Capture logic will be created in such a way that grants faster progress for teams with more players on a point. Each captured point will grant its team a specified number of points until a winning score is achieved and a winner declared. Each team’s total points will be represented by progress bars at the top of the screen similar to capture the flag games like Battlefield or Battlefront. The game will then restart to complete the game loop.\n\n\nAdditionally, this course will cover creating a basic weapon and damage system. Players will be able to shoot projectiles from a weapon that will damage an opponent when hit. When a player’s health is depleted, they will respawn at the team’s respawn point.\n\n\nThis game will be created in the first person perspective and students will be shown how to manage the associated animation systems involved.",
      "target_audience": [
        "Aspiring game designers who want to learn the more technical aspects of game creation."
      ]
    },
    {
      "title": "Machine Learning in Game Design",
      "url": "https://www.udemy.com/course/machine-learning-in-game-design/",
      "bio": "Learn AI And reinforcement learning through the lens of game development in Unity.",
      "objectives": [
        "Students will learn to code with Unity at an intermediate level: they will learn basic programming concepts and how to create computer games.",
        "Students will learn to train a simple Reinforcement Learning algorithm do a wanted task.",
        "Student will be able to train combination of policy optimization algorithms to train an agent to walk and reach the objective",
        "You will be able to create your own game environment and agent.",
        "You will be able to train evolutionary algorithm to balance the ball on characters head.",
        "Introduction to machine learning with python",
        "Students will be able to train a combination of CNN and PPO algorithms."
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "A welcome word",
          "Introduction to the course",
          "Installation & Software setup"
        ],
        "Lesson 1. Introduction to machine learning with python": [
          "Introduction to lesson objective",
          "2 - Introduction to machine learning",
          "Introduction to linear regression",
          "Implementing linear regression in Python",
          "Introduction to multiple linear regression",
          "Implementing MLR in Python",
          "Introduction to polynomial regression",
          "Implementing polynomial regression in Python",
          "Conclusion"
        ],
        "Lesson 2. Introduction to Reinforcement Learning": [
          "Introduction to reinforcement learning",
          "Introduction to Q-learning",
          "Implementing Q-learning algorithm in Python & Unity",
          "Introduction to SARSA",
          "Implementing SARSA algorithm in Python & Unity",
          "Lesson Overview"
        ],
        "Lesson 3. Evolutionary Algorithms": [
          "Evolutionary algorithms theory",
          "Implementing evolutionary algorithm in Python & Unity",
          "Lesson Overview"
        ]
      },
      "requirements": [
        "Basic knowledge of programming",
        "You will need a Desktop or Laptop computer.",
        "You must be willing and eager to learn.",
        "Beginner level of python."
      ],
      "description": "In this course you will be introduced to the basics of Machine Learning through game design in Unity and Python. First you will be introduced to the very basics of ML and python, you will learn such simple ML concepts such as supervised learning, regression and gradient descent. After that you will get acquainted with reinforcement learning and will try to understand and apply a combination of Reinforcement Learning, Deep Neural Networks and other algorithms in the Unity environment to help your agent accomplish complex and dynamic tasks. Lastly you will learn how to build dynamic full featured RL environments and agents for you to train later in your games. You will not only be able to create your own RL algorithms from scratch (such as Q-learning, SARSA and PPO), but also customize them to fit the needs of your environment and train your agents in Unity. You will gain experience with widely used tools and libraries in the industry of ML, such as: Unity3D, Pytorch, mlagents-learn, scikit-learn and more. We hope that this course will help you to better understand and prepare for your journey of developing truly intelligent agents and characters in your own games. Let's get started!",
      "target_audience": [
        "Beginner programmers who want to delve into AI.",
        "For everyone who want to create their own reinforcement learning algorythms in Unity by using python.",
        "For people who want to delve into game development and AI"
      ]
    },
    {
      "title": "Houdini 19.5, UE5 - Procedural Stylized Pencil Case(s) + RBD",
      "url": "https://www.udemy.com/course/houdini-19-ue5-procedural-stylized-pencil-cases-rbd/",
      "bio": "In this project-based Houdini & UE5 course we'll create 4 HDAs and go over common procedural modeling approaches.",
      "objectives": [
        "Better understand procedural modeling in Houdini with provided examples.",
        "Increase understanding of Houdini.",
        "Houdini's For Each Loop.",
        "How to randomize shape, colors, etc.",
        "How to create Houdini Digital Asset specifically for Unreal Engine 5.",
        "How to add Rigid Body Simulation to pencils per case.",
        "How to create Unreal Engine 5 specific attributes (Nanite, LOD screen size).",
        "How to create Unreal Engine 5 collision and LODs groups.",
        "How to add vertex colors to procedural model(s).",
        "How to create procedural pencil.",
        "How to scatter pencils within pencil case.",
        "How to create procedural pencil case.",
        "How to scatter pencil cases within area bounds and randomize each case/pencil."
      ],
      "course_content": {
        "Creating procedural pencil with RBD support": [
          "Creating base shape",
          "Creating wood and tip",
          "Closing bottom hole, modifying base shape",
          "Creating groups",
          "Adding shaving effect",
          "Polishing shaving effect",
          "Finishing tip",
          "Adding bottom circle (pencil lead part)",
          "Fixing bottom circle open hole",
          "Polish base shape (get rid of harsh edges)",
          "Organizing node graph",
          "Adding vertex color",
          "Rigid Body: preparation",
          "Rigid Body preparation: making pencil as a single mesh",
          "Creating Rigid Body Simulation",
          "Rigid body: dynamically place pencil on top of any input geometry",
          "Finalize: creating normals",
          "Finalize: additional cleaning",
          "Finalize: creating collision group",
          "Finalize: creating Nanite attribute",
          "Finalize: creating LODs",
          "Finalize: creating LOD Screen Size",
          "Finalize: organize graph",
          "HDA: Creating HDA",
          "HDA: creating shape parameters",
          "HDA: controlling parameter(s) visibility with \"hide when\" parameter option",
          "HDA: creating color parameters",
          "HDA: creating nanite parameter",
          "HDA: adding simulation parameters",
          "Unreal Engine: creating project",
          "Unreal Engine: testing HDA",
          "Unreal Engine: enabling Nanite and LODs",
          "End of the Section"
        ],
        "Creating pencil case and adding RBD simulation to pencils": [
          "Creating Pencil Case Part 1",
          "Creating Pencil Case Part 2",
          "Adding Vertex Colors, Unreal Attributes, Collision Group, Low Poly",
          "Creating Case HDA",
          "Case HDA - part 1",
          "Case HDA - creating parameters - part 2",
          "Case HDA - creating parameters - part 3 (controlling UI with toggles)",
          "Preparation for scattering pencils within the case bounds",
          "Creating For Each Loop with For Each Metadata node",
          "Copying (scattering) pencils inside case shape",
          "Creating randomization controller (Null node)",
          "Randomizing pencils/case colors/etc",
          "Adding RBD and fixing attributes mismatch on Merge",
          "Sped up RBD simulation",
          "Clean up, normals and collision group",
          "Creating group LODs and lodx_screensize attributes",
          "Organizing node graph",
          "Pencil case HDA - creating parameters - part 1",
          "Pencil case HDA - creating parameters and testing - part 2",
          "Testing Pencil Case HDA in Unreal Engine 5 and creating two variations"
        ],
        "Scattering pencils cases with pencils RBD simulation": [
          "Preparation: creating scatter area bounds",
          "Creating For Each Loop",
          "Creating Debug Plane",
          "Creating randomization controller (Null node)",
          "For each loop: randomizing pencils (shape, shaving, etc.)",
          "For each loop: randomizing case shape (height, radius)",
          "For each loop: randomizing case channel ramp shape",
          "For each loop: randomizing colors (pencils and cases)",
          "Creating Rigid Body simulation",
          "RBD: troubleshooting (when object passing through geometry)",
          "Cleaning attributes, etc",
          "Creating LODs",
          "Creating HDA parameters",
          "Testing inside Unreal Engine",
          "Creating a scene for renders (timelapse)"
        ]
      },
      "requirements": [
        "A basic knowledge of Houdini interface.",
        "A basic understanding of Houdini channel (parameter) reference.",
        "A basic understanding of what attributes in Houdini is.",
        "A basic understanding of Houdini For Each Loops (nothing crazy).",
        "Created at least few basic Houdini models (procedural or in traditional way). Optional.",
        "A basic knowledge of Unreal Engine 5.",
        "Unreal Engine 5 and Houdini Engine plugin installed."
      ],
      "description": "Grateful for you taking a look.\n\nTo adjust your expectations, I won't be sharing source files (HDA and HIP). This is done on purpose so you can practice and get a better feel using Houdini.\n\nMy personal mission is to do my best to help people actually get a feel of Houdini and use its power. There's no shortcut to understand something without practice.\n\nThe course is fully narrated. The only very last video is a timelapse.\n\nHoudini is all about efficiency. You create a tool once, use it on multiple projects, and polish it to suit different tasks.\nEven though the final models look simple, this course covers some common procedural modeling approaches such as randomization, for each loops, and other faced things when making procedural models. Understanding similar techniques will help to approach any other model that you need to create.\n\nThis course starts from the upper beginner level and \"climbs\" to the intermediate-advanced level. The course is split into small parts so it doesn't feel overwhelming.\nThis course is aimed to:\n- provide examples that might be used in a real-world scenario rather than creating an abstract model.\n- increase your understanding of Houdini and how certain things work.\n- increase your understanding of uses cases of Houdini Engine for Unreal Engine 5.\n\nThis is a project-based course where we'll create 4 Houdini Digital Assets (HDA) that you can reuse in different projects:\n1. Pencil HDA.\n2. Case HDA.\n3. Case + Pencil HDA (scatter pencils within the case).\n4. Scatter cases with pencils within area bounds HDA.\n\n\nAll HDAs expect \"Case HDA\" will have support for Rigid Body Simulation, in other words, pencils will interact with collision geometry. I've created this model for my own environment project and thus decided to share my approach to creating it.\n\nThe course has 3 sections:\n1. Pencil HDA creation + RBD.\n2. Pencil case HDA + scattering pencil HDA within that case and randomizing pencils + RBD.\n3. Scatter pencil cases, randomizing cases/pencils RBD.\n\nSome of the lectures contain additional description with the information I missed explaining. Such as what's the purpose of certain node(s).",
      "target_audience": [
        "Environment artists who want to speed up/automate their workflow.",
        "Indie developers.",
        "3D modelers from other software (Blender, C4D, 3DS Max, Maya, Modo).",
        "Beginner Houdini users."
      ]
    },
    {
      "title": "Building Unity 2D Platformer",
      "url": "https://www.udemy.com/course/building-unity-2d-platformer/",
      "bio": "Making 2D Platformer From Scratch",
      "objectives": [],
      "course_content": {
        "Introduction": [
          "Preview of the game",
          "Improting Assets And Adding Our Player",
          "Player Movement",
          "Jump",
          "Adding Animations",
          "Player Attack",
          "Finishing Attack",
          "Skeleton Patrol",
          "Skeleton Hit And Death",
          "Skeleton Attack",
          "Finishing Players Attack",
          "Mapping",
          "Camera Follow",
          "Making The Dragon",
          "Camera Shake",
          "PlayerHit",
          "Player SoundFX",
          "The Rest of SoundFX.",
          "Theme Songs And Dragon Death",
          "Health UI, Players Death And Health Pot",
          "Gameplay Manager"
        ]
      },
      "requirements": [
        "Unity 3D"
      ],
      "description": "The main point you will learn in this course is the fundamentals of Game Development and how to make an amazing 2D Platformer.\n\n\nWe will start strong off with learning a bit of Unity and its interface, one of the most popular game engines for game development, so if you have never used Unity before I got you covered.\nThis is course is friendly familiar with those who have never used Unity before, but if you have ever used it before or did some programming it will help you out to understand better, but without fear come and step inside into the course even if you have only wished to learn Game Development.\nSo what is you waiting for, come inside and let's start learning on how to make an amazing 2D Platformer.",
      "target_audience": [
        "Complete Beginners",
        "Anyone who wants to become a Game Developer"
      ]
    },
    {
      "title": "Introduction to Game Development with Unity",
      "url": "https://www.udemy.com/course/introduction-to-game-development-with-unity/",
      "bio": "Quick and simple video guide to get you up and running with Unity game development",
      "objectives": [],
      "course_content": {
        "Introduction": [
          "Get to know your instructor",
          "Download and install Unity"
        ],
        "Working with the user interface": [
          "Unity new project interface",
          "Open and close Unity projects and scenes",
          "Essential interface windows and tabs",
          "overview of the Game Tab",
          "Object control panel",
          "Manipulating the scene"
        ],
        "Object creation and manipulation": [
          "Adding 2d game objects",
          "Essential 3d game objects"
        ],
        "Lightings, Camera, and Physics": [
          "Unity Lightings (part 1)",
          "Unity Lightings (part 2)",
          "Introduction to physics",
          "Introduction to scripting and programming"
        ],
        "Menus": [
          "Adding menus with Graphic User Interfaces (part 1)",
          "Adding menus with Graphic User Interfaces (part 2)"
        ],
        "Bonus": [
          "Apply colors and materials on game objects",
          "Where to go from here"
        ]
      },
      "requirements": [
        "have a windows computer, or MAC OS, or Linux"
      ],
      "description": "This course is the fastest way to get into making games. We will be using the Unity engine because it's powerful and free.\nWe'll start learning how to download and install Unity on your computer. Then we will get familiar with the user interface.\nWe will then go over building levels by adding 3d objects of all shapes, such as spheres, cubes and cylinders.\nThen we'll go over the different lighting effects and cameras to make the game look fantastic.\nFinally, we'll go over physics and materials to have the game behave like in the real world\nEnough said, let's get started.\nImportant: This course is part of a the world's one and one series on Unity professional multiplayer games.",
      "target_audience": [
        "tech students",
        "art students",
        "cool kids",
        "seasoned engineers who want to make games for fun or for profit"
      ]
    },
    {
      "title": "Godot 3D: The Game Prototype Course for beginner",
      "url": "https://www.udemy.com/course/3d-game-development-with-godot-no-experience-needed/",
      "bio": "Learn by building simple versions of popular games – updated regularly.",
      "objectives": [
        "Understand the basics of Godot Engine and its workflow",
        "You will learn how to navigate the Godot interface, set up a project, and work with 3D game development tools",
        "You will master building 3D scenes, including adding terrain, lighting, and interactive objects",
        "You will learn to code character movements, interactions, and basic game logic using Godot’s scripting language",
        "GDScript programming in a simple, beginner-friendly way"
      ],
      "course_content": {
        "Getting Started with Godot": [
          "Introduction to Godot Engine",
          "How to Download and Install Godot",
          "Exploring the Godot Interface – Your First Steps",
          "Creating Your First Scene in Godot"
        ],
        "GDScript Basics": [
          "Writing Your First Line of GDScript Code",
          "GDScript Essentials",
          "Using If/Else – Making Decisions in Code",
          "if else multi-choice",
          "For & While Loops – Repeating Actions with Logic"
        ],
        "Programming the Player – Movement": [
          "Preparing the Scene Before Scripting",
          "Character Movement",
          "multiple-choice question",
          "Camera Control",
          "Fixing the Camera",
          "Creating a Victory Zone",
          "Godot UI – Add Buttons",
          "Bug Fixes – Let's Troubleshoot",
          "Multiple-choice question"
        ],
        "Level Design": [
          "CSG Basics – Start Building Your Level",
          "Working with AnimatableBody3D – Dynamic Objects",
          "Scene Switching",
          "Global Variables & Coin Collection Logic",
          "Display Coins on Screen",
          "Packed Scenes – Organize and Reuse Content"
        ],
        "Sound Effects, Music & Game Export": [
          "Before studying this section",
          "Animations character",
          "Character - Syncing with Audio",
          "Creating a Pause Function – Stop the Action",
          "Building the Main Menu Scene",
          "Adding More Sounds",
          "Exporting Your Game as .EXE File"
        ],
        "New Update - Mage Arena Prototype game (godot 4.4.1)": [
          "part1 - Mage Arena create scene",
          "part2 - Spellmanager and voice reconition"
        ]
      },
      "requirements": [
        "No prior experience needed, just a computer and enthusiasm",
        "This course is designed for complete beginners",
        "No prior knowledge of programming, everything will be taught"
      ],
      "description": "Are you passionate about games and always dreamed of creating your own, but feel overwhelmed by code or complex engines?\nDon’t worry — this beginner-friendly course is made just for you.\nWelcome to “Godot 3D Game Prototypes for Beginners”, a hands-on, step-by-step course where you’ll learn game development by creating simple, playable 3D prototypes inspired by famous titles — all with no prior experience.\nGodot is a powerful, free, and beginner-friendly engine — perfect for rapid prototyping. In this course, you’ll learn how to build your own 3D gameplay mechanics using GDScript, Godot’s easy-to-learn scripting language.\nBut instead of learning in the abstract, you’ll build prototypes based on popular games like Only Up and Chained Together, so you can practice recreating real-world gameplay systems in a simplified, beginner-friendly way.\nWhat you’ll learn:\nBuild smooth 3D movement and jumping\nDesign vertical or themed levels\nCreate player checkpoints and falling mechanics\nExport and test your own playable prototypes\nUnderstand how real game mechanics are built — one step at a time\nImportant Note: This course will not help you create a fully polished, commercial game right away. Game development is a long journey — and mastering a game engine like Godot takes consistent effort and time.\nThis course is designed to give you a strong foundation through small, focused prototypes — to help you understand core concepts, not to finish a complete game.\nIf you skip lessons or rush through them, you’ll miss key ideas. So please, take your time — don’t skip, don’t fast-forward. Every lesson builds your skills.",
      "target_audience": [
        "The course is for those who are passionate about 3D game programming but have no programming experience, or for those who already have programming experience but want to learn more about the Godot Engine.",
        "Beginner game developers looking to start their career making video games"
      ]
    },
    {
      "title": "Unity 3D Horror Survival Game development Part 3(Save/Load)",
      "url": "https://www.udemy.com/course/create-horror-survival-game-in-unity-c-part-3/",
      "bio": "Unity 3D Horror Survival Game development Part 3(Save/Load)",
      "objectives": [
        "progarmming with C#",
        "work with unity",
        "design in 3D",
        "Create a full game"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "The game that i did sofar"
        ],
        "Save/Load System": [
          "Object IDs",
          "Game Manager",
          "Save Data",
          "Save Manager Part 1",
          "Save Manager Part 2",
          "Loading Game Part 1",
          "Loading Game Part 2",
          "Loading game bug fixed"
        ],
        "Main Menu": [
          "Main Menu",
          "Main Menu Design"
        ],
        "Portal Change Scene": [
          "Portal Change Scene",
          "Loading Inventory to another Scene"
        ],
        "Game Timeline": [
          "Game Timeline"
        ],
        "Player Death": [
          "Player Death",
          "Check Point Saving Game",
          "SFX Sound",
          "Prefab Object For New Scene"
        ],
        "Shop System": [
          "Increase Ammo Capacity Script",
          "Money UI",
          "Shop UI"
        ],
        "Course Improvement and fixes": [
          "Fixing scope weapon and using inventory",
          "Equip Weapon check icon",
          "Enemy State Improvement(Death Sliding Fixed)",
          "Headshot Damage",
          "Saving Bool Value",
          "AutoFire Shooting"
        ],
        "Mobile Controller": [
          "Mobile Controller"
        ]
      },
      "requirements": [
        "Have a PC or Mac"
      ],
      "description": "Learn how to create and program your very own 3D Platformer game using Unity, an industry-standard game development program used by many large gaming studios and indie developers across the world.\nIn this course you won’t just be learning programming concepts, but tying these concepts to real game development uses.\nThis course has been designed to be easily understandable to everyone, so whether you’re a complete beginner, Or expand their game development range or a programmer interested in understanding game design, this course will help you gain a greater understanding of development.\n\nAt the end of this course you will have developed the ability to create such game elements as:\n\n\n\n\nFull 3D Character Movement\nUnity Installation and setup\nphysics\ncamera\nComplete Health System\nPlayer Attack system\nPlayer diffrent Weapon\nCamera Look System\nPlayer Jump\nScripting,Scripting and Scripting\nCreating basic horor survival  game\nand a tone more\nStart learning today and let me help you become a game developer!\nWho this course is for:\nAnyone who wants to make their own 3D games.\nPeople who want to create and publish their own games.\nComplete beginners with an interest in learning game development.\nDevelopers who want to re-skill across to game development.\nPeople interested in working in the game design industy.\nCompetent and confident with using a computer...",
      "target_audience": [
        "Beginners to advance"
      ]
    },
    {
      "title": "Java Game Dev Mastery: From Classic to Creative",
      "url": "https://www.udemy.com/course/java-game-dev-mastery-from-classic-to-creative/",
      "bio": "Creating 2D Games with Java for Beginners and Intermediates From Classic to Creative with Real Project Towards Steam",
      "objectives": [
        "Learning programming logic with Java applied to games",
        "Create classic games like Pong, Tetris, Arkanoid and Space Invaders",
        "Using good object-oriented practices",
        "Producing professional looking games",
        "Follow the publishing process of a real game"
      ],
      "course_content": {
        "Welcome and Overview": [
          "What You Will Learn",
          "How the Course is Structured",
          "Final Project Presentation: The Carrot Game"
        ],
        "Setting Up The Development Environment": [
          "Installing JDK",
          "Installing Eclipse IDE",
          "How to Apply Dark Theme in Eclipse"
        ],
        "Getting Started with Java": [
          "Basic Java Syntax - Part 1",
          "Basic Java Syntax - Main Method",
          "Basic Java Syntax : Hello World",
          "Primitive Types - Part 1",
          "Primitive Types - Part 2",
          "Data Input and Output - Part 1",
          "Data Input and Output - Part 2",
          "Conversion Between Types",
          "Arithmetic Operators - Part 1",
          "Arithmetic Operators - Part 2",
          "Relational Operators",
          "Logical Operators",
          "Simple Conditional Structures",
          "Compound Conditional Structures",
          "SWITCH",
          "Repetition Structures",
          "Introduction to Arrays"
        ],
        "Mastering OOP": [
          "What Is OOP",
          "What is an object",
          "Access Modifiers",
          "Special Methods - Part 1",
          "Special Methods - Part 2",
          "Pillars of OOP - Part 1",
          "Pillars of OOP - Part 2"
        ],
        "Understand the Logic of Programming for Games": [
          "Creating the Game Environment",
          "Adding Details to the Game Screen",
          "Reviewing Important Parts",
          "Starting to Move Objects",
          "Manipulating the Direction of Objects",
          "Keyboard Movement",
          "More About the Keyboard",
          "Manipulating Positions and Formats"
        ],
        "Creating Classics - Pong": [
          "Organizing Game Objects",
          "Setting Up the Player and Enemy",
          "Adding the Ball",
          "Giving the Ball Movement",
          "Understanding Collisions",
          "Resolving Collision Problems",
          "Collision with walls",
          "Fixing Bugs",
          "Player Collision",
          "Enemy Movement",
          "Ball Return",
          "Adding Scoring System-HUD",
          "Adjusting Score On Screen",
          "Improving The Increment",
          "Manipulating Ball Speed",
          "More About Ball Speed",
          "Improving Game Identity- Parte 1",
          "Improving Game Identity - Part 2",
          "Rectifying the Ball's Collision with Walls",
          "Rectifying the Ball's Collision with Walls - Part 2",
          "Limiting Each Game Match",
          "Adjusting the End of Match HUD",
          "Game States",
          "Learn to Use Game States Within the Game",
          "Power-Up",
          "Adding the PowerUp Object to the Game Screen",
          "Removing Power-Up",
          "Setting Player Collision with Power-Up",
          "Player Collision with Power Up - SPEED 1",
          "Player Collision with Power Up - SPEED 2",
          "Player Collision With Power Up - Multiple Balls 1",
          "Player Collision With Power Up - Multiple Balls 2",
          "Player Collision With Power Up - Multiple Balls 3",
          "Solving Problems with the Second Ball - Part 1",
          "Solving Problems with the Second Ball - Part 2",
          "Testing the Points",
          "Adjusting the Birth of the Ball",
          "Player Collision with Power Up - SIZE 1",
          "Player Collision with Power Up - SIZE 2",
          "Third Power-Up Fixes",
          "Introducing a Powerful Tool"
        ],
        "Creating Classics - Space Invaders": [
          "Naming Packages the Professional Way"
        ],
        "Creating Classics - Arcanoid": [
          "Reusing Project",
          "Modifying the Collision System",
          "Enemy List"
        ],
        "Creating Classics - Tetris": [
          "Tetromino"
        ],
        "Final Module": [
          "Taking the First Steps with the Final Project"
        ]
      },
      "requirements": [
        "No previous programming experience is required",
        "Internet connection",
        "Willingness to learn by creating"
      ],
      "description": "Do you want to learn Java in a practical, fun way, with real results? This course was made for you! Here, you will create classic games like Pong, Space Invaders, Break Breaker and Tetris — all step by step, with clear explanations, even if you have never programmed before.\nBut this is not just another game clone course: you will learn how to transform code into a visual experience, with beautiful art, polish and attention to detail.\nIn addition, you will follow the real development of an original game — “The Protector of the Crop”, a creative project that will be published on Steam. You will see what it is like to create a playable, fun game with engaging mechanics, going from the basics to a more daring project.\nThroughout the course, you will be exposed to the fundamentals of Java and object-oriented programming, in addition to understanding how to think like a game developer.\nThis course is ideal for beginners, programming students, game enthusiasts and anyone who wants to learn by creating.\nBy the end, you won't have just attended classes — you'll have created real games and been part of a project with real market potential.\nIf you want to learn, create, and see results... then this course is for you.",
      "target_audience": [
        "Beginner developers interested in entering the gaming market the right way",
        "Developers interested in acquiring and improving their programming logic"
      ]
    },
    {
      "title": "How To Sell Your Game Online: Game Marketing Basics",
      "url": "https://www.udemy.com/course/game-marketing-complete/",
      "bio": "Learn to market your video game effectively with real-life strategies from keyword research to promotion.",
      "objectives": [
        "Learn the foundations of video game marketing and why it’s essential for success.",
        "Master research methods to identify profitable markets and define your target gamers.",
        "Develop high-converting media assets including sales pages, descriptions, and trailers.",
        "Apply social media, influencer, and pricing strategies to maximize reach and revenue."
      ],
      "course_content": {
        "Video Game Marketing Basics": [
          "The Importance of Marketing in Game Development",
          "Market Positioning 101 - Markets and Niches",
          "Understanding Monetization Options",
          "Understanding Traffic Funneling Strategies"
        ],
        "Game Marketing - Market Research & Target Gamer Definition": [
          "Market Research Part 1 - Rating/Revenue-Based Research",
          "Market Research Part 2 - Search Volume-Based Research",
          "Defining Your Target Gamer",
          "Influence Principles of Persuasion for Game Marketing"
        ],
        "Game Marketing - Creating Media": [
          "Building a Game Sales Page",
          "Writing an Engaging Game Description",
          "Developing a Game Trailer That Sells"
        ],
        "Game Marketing - Social Media Marketing": [
          "Engaging on Social Media, Forums and Communities",
          "Working with Influencers and Streamers",
          "Creating Social Media Ads"
        ],
        "Game Marketing - Pricing & Performance Analysis": [
          "Game Marketing - Pricing & Promotions Strategies",
          "Game Marketing - Key Performance Indicators"
        ]
      },
      "requirements": [
        "None."
      ],
      "description": "Marketing is just as important as development when it comes to creating a successful video game. Even the most innovative and polished games can fail without a clear strategy to reach the right players. This course is designed to guide game developers, indie creators, and small studios through the entire process of game marketing—equipping you with the tools and knowledge to make your game stand out in today’s competitive market.\nWe begin with the fundamentals of marketing, including positioning your game in the right market, understanding monetization options, and mapping traffic funneling strategies. From there, you’ll explore in-depth market research techniques, learning how to evaluate games by revenue, analyze search volume data, and define your target gamer profiles.\nYou’ll then move into the creation of marketing assets, such as compelling sales pages, effective game descriptions, and persuasive trailers that drive conversions. The course also covers social media marketing and influencer collaboration, helping you leverage communities, ads, and partnerships to boost visibility.\nFinally, we’ll discuss pricing strategies, promotions, and performance analysis, so you can make informed decisions and measure success. By the end of this course, you’ll have a clear, actionable roadmap to market your game effectively and maximize its potential.",
      "target_audience": [
        "Anyone wanting to improve their ability to sell a virtual game"
      ]
    },
    {
      "title": "Build Weapons Automatically Unity . Fantasy Edition",
      "url": "https://www.udemy.com/course/build-weapons-automatically-unity-fantasy-edition/",
      "bio": "All you need to create an automatic weapon builder in Unity. Fun times ahead!",
      "objectives": [
        "Build weapons in 1 click and use them in any Unity projects. Understand how to modify the weapons to come up with new and uniques ones.",
        "Equip the weapons on any characters to use in your games."
      ],
      "course_content": {
        "Overview": [
          "Get to know your instructor",
          "Download and open Unity project files",
          "Overview of Unity project files and gameplay",
          "Importing weapon packs"
        ],
        "Core functionality": [
          "Creating the weapon builder script",
          "Weapon builder script property bags",
          "Creating a pummel prefab",
          "Spawning the sword pummel",
          "Spawning guard and blade",
          "Programming the hooking script",
          "Adding hooks to guard and pummel prefabs",
          "Programming the hook connection",
          "Adding hook functionality to the blade",
          "Easily create new weapon grips",
          "Launching the weapon builder from the editor menu",
          "Creating more weapon pummels",
          "Creating many sword guards quickly",
          "Adding blades to the weapon builder",
          "Easily add color variations to the weapons",
          "Strategy to add glowing aura to weapon and import",
          "Strategy to add glowing aura to weapon (part 2)",
          "Creating custom glowing effect materials",
          "Spawning the glowing mesh programmatically",
          "Applying the red glow effect programmatically",
          "Creating the blade effect script (part 1)",
          "Programming the special effect script",
          "Programming the random effect selection",
          "Programming the weapon glow animation",
          "Adding the glow animation script programmatically",
          "Adding the weapon text user interface object",
          "Randomize weapon names (part 1)",
          "Randomize weapon names",
          "Creating multiple weapon prefabs",
          "Storing the weapon names for later use",
          "Import and use custom fonts",
          "Adding shadow to the weapon name",
          "Creating new color palettes",
          "Quickly create more materials",
          "Create new blades and guard parts fromt custom materials",
          "Creating new glowing effect colors"
        ],
        "Advanced - optional": [
          "optional- camera background settings",
          "Designing weapon accessories (part 1)",
          "Programming the accessory hooks",
          "Programming the accessory hooks (part 2)",
          "Adding left and right hooks to the guard prefabs",
          "Creating a new weapon guard accessory",
          "Rotating the weapon on itself with orthographic camera",
          "Randomize accessory colors",
          "How to build axes and maces automatically",
          "Modifying weapon builder script to bypass guard objects",
          "Creating the axe blade prefab",
          "building automatic axes pummels grps",
          "Building more axe prefabs",
          "Building more axe prefabs",
          "Creating more maces parts",
          "Automatic pummel accesories",
          "Equipping weapons on characters"
        ],
        "BONUS": [
          "BONUS FILES"
        ]
      },
      "requirements": [
        "program a system that generates unique weapons in one click",
        "add accessories to the weapons such as skulls and jewels",
        "add special effects such as glowing ice, fire, light, just like in Diablo or Warcraft",
        "save your weapons to reuse them in other unity projects",
        "equip the weapon on an actual character ready for combat",
        "generate hundreds of original medieval fantastic names for the weapons"
      ],
      "description": "What you see here in the Unity editor is a system that lets you create an unlimited amount of weapons in just one click!\nThis course will teach you every single step to build and use this fantastic program weapon builder. You will be able to make all types of swords, axes, maces, hammers, magic staffs and much more.\nAll steps are shown to you in the video lectures, and as a bonus, you get the completed project.\nToday, the majority of top games all use some kid of weapons. It's impossible for a small team of developers to create a hundreds of weapons quickly unless you use a system like the one built in this course. It will save you time and money on the long run.\nThis tool is a must have for all your future Unity game projects.\nDid i forget to mention it's also super fun?!",
      "target_audience": [
        "gamers",
        "game enthusiats",
        "graphic designers",
        "computer students",
        "MMO players",
        "cool kids"
      ]
    },
    {
      "title": "Learn the Unity 3D Shuriken Particle System",
      "url": "https://www.udemy.com/course/learn-the-unity-3d-shuriken-particle-system/",
      "bio": "Learn how to create game effects with the famous Shuriken Particle System on Unity 3D.",
      "objectives": [],
      "course_content": {
        "Shuriken Particle System": [
          "Introduction",
          "Sprites, Voxels and Textures",
          "Creating an Emitter",
          "Working with Modules",
          "Creating Jet Fire",
          "Creating Smoke Plumes",
          "Muzzle Flashes",
          "Bringing It All Together"
        ],
        "Conclusion": [
          "Conclusion"
        ],
        "Bonus Material": [
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "Free version of Unity 3D"
      ],
      "description": "Create awesome particle effects with Unity 3Ds Shuriken Particle system. Send rockets blazing into space, create muzzle blast shooting effects, create particle emitters and much more.\nThis course seeks to teach students how to work with the Shuriken Particle System in Game development. The lectures include working with textures and voxels, emitters, modules, smoke plumes and muzzle flashes; all of which are crucial to the success of any game development projects.\n* This course teaches Unity version 4.x",
      "target_audience": [
        "Beginning game developers",
        "Unity 3D game developers"
      ]
    },
    {
      "title": "Make a Game for Mobile, Pc & Web with Unity 6 & C#-Beginners",
      "url": "https://www.udemy.com/course/unity6-c-complete-course-beginner-to-intermediate/",
      "bio": "Full Course On Mobile, PC & Web game development for Complete Beginners with Unity 6 & C# Programming",
      "objectives": [
        "Unity 6 & C# Programming Basics & Advance",
        "Step by Step guide on How to Upload your game on Itch or on Your Custom website",
        "Build APK & AAB for Play Console",
        "Many Quizzes around game development, You need to answer the correct to see how much progress you made so far!",
        "Make a Game for Website or even for your Custom Website",
        "Master Unity 6 Basics",
        "Able to Make Engaging & Much fun 2D Game with this Course!",
        "Walk you through Every settings for APK & AAB Build for Mobile devices(Ready AAB for Play Store)",
        "At the end of the course you will be provided some assignments & If you wish can share with me as well!",
        "Solid & Basics understanding of C# & Unity such as How to add audio to the Game etc...",
        "Able to Make a Game for Mobile devices(Android)",
        "Step by Step Guide & in Details Unity 6 & C#"
      ],
      "course_content": {
        "Introduction": [
          "Introduction to The Course!",
          "Unity User Interface & Basics Overview"
        ],
        "Player": [
          "Basics & Player Setup(Game Objects, Components etc...)",
          "Player C# Script & Basics(Variables, Functions, Class etc...)",
          "Player Character Flip C# Scripting",
          "Player Jump, Collisions in Unity, Tags etc...",
          "Player Animation in Unity, Player Animation Clips",
          "Player Animation Transitions",
          "Animation Transitions C# Scripting"
        ],
        "Environment": [
          "Tile Map Unity",
          "Process of Making The Environment with Tiles!",
          "Camera Follow with Cinemachine & Parallax Effect"
        ],
        "Enemy": [
          "Enemy Setup with Animation",
          "Enemy C# Script, Patrol Scripting",
          "Enemy Attack Scripting on Player",
          "Enemy Animation Transitions",
          "Enemy Animation Transition through C# Scripting",
          "Enemy Hurt Animation & Damage C# Script",
          "Attack Scripting (Player on Enemy to Take Damage)",
          "Explosion Effect(Enemy Die)",
          "Camera Shake C# Script with Cinemachine & Singleton",
          "Enemy Attack C# Scripting & Player Health C#"
        ],
        "Collectable Items & UI": [
          "UI in UNITY, Player Health UI",
          "Player Health UI & C# Scripting",
          "Heart Item Setup with Animation(Collectable Items)",
          "Heart Item Collection C# Scripting",
          "Diamond Item Setup with Animation(Collectable Items)",
          "C# Scripting Current Diamond(Collectable Item)",
          "UI Setup Current Diamond & Scripting"
        ],
        "Traps": [
          "Fire Trap Setup with Animation(Traps)",
          "Colliding with Fire Trap & Damage Player C# Scripting",
          "Suriken Trap & C# Script to Move",
          "Player Respawn C# Scripting"
        ],
        "Menus": [
          "Game Over UI Setup",
          "Game Manager C# Script to Retry The Level & Load",
          "Game Active Logic C# Scripting",
          "Main MENU Setup",
          "Scene Management C# Script to Load Scenes",
          "About MENU Setup & Load"
        ],
        "Audio": [
          "Audio in UNITY & Audio Manager C# Script"
        ],
        "Level & Build": [
          "Level Making",
          "Building The GAME!"
        ],
        "Exercise": [
          "Visibility Unity",
          "Movement",
          "Short Cut Keys",
          "Pixel per unit",
          "Blurry",
          "Collision Unity",
          "C# Script",
          "Component!",
          "Tabs!",
          "Game Object"
        ]
      },
      "requirements": [
        "Have Basics Understanding of Physics & Math example for Vectors, gravity etc... but along the way I will explained all of the things so you don't need to have strong Understanding of it :)"
      ],
      "description": "This course is for Complete Beginners even Intermediate people can take this course,  If you never touched unity then this course is absolutely for you, In this course you will learn to make some simple 2d games by using unity6 & C# coding, I have explained all of the Basics things that you need to know in order to make a game in unity6 with the help of C# programming, You will learn about unity6 user interface, game objects, components, animation in unity engine, collision in unity, how to add audio to a game in unity6, How to use  cinemachine camera in order to follow player game objects & lots of other things in unity game engine.\nIn c sharp programming you will learn classes, functions, variables, If condition, start and update functions, how to call a function what is public and private means in C# programming, how to use collision functions and lot's things, this course will teach you the basics of unity & C# for making your first game in unity 6 with c sharp coding, Pretty easy & straight forward to follow this course, I have divided into many chapters so you don't get mess up, Also I have put all of the necessary things in the resources!\nThanks\nBhairab Roy",
      "target_audience": [
        "Complete beginners to Intermediate people!"
      ]
    },
    {
      "title": "Construct 2: Learn to Build Mobile Games in 2 Hours!",
      "url": "https://www.udemy.com/course/construct-2-learn-to-build-mobile-games-in-2-hours/",
      "bio": "Easy guide to create mobile games for beginners! Create your first game today!",
      "objectives": [
        "Create your own mobile games using Construct 2"
      ],
      "course_content": {},
      "requirements": [
        "Just basic computer skills"
      ],
      "description": "Course Description\nLearn to create cross-platform mobile games in 2 hours! Start your journey and create the next big game to hit the market!\nOverview:\nStart building your own mobile games without having any experience in programming or game development. This complete course is designed for anyone and everyone who is passionate about creating their own mobile games and doing it quickly. This course will teach you the basics of Construct 2 by creating your very own platform game!\nAbout Construct 2:\nConstruct 2 is a powerful ground breaking HTML5 game creator designed specifically for 2D games. It allows anyone to build games — no coding required! It has even won the 1st Annual International Best Game Creator Award of 2014. This engine allows anyone to create games easily and publish them on multiple platforms (Android, iOS, Windows, Mac, Linux, HTML5, Wii U, Facebook, Amazon Appstore and much more) without writing a single line of code.\n\nWhat's Included?\nOver 30 High Quality (HD) Step-By-Step Video Tutorials.\nOver 120+ minutes of High Quality Video Content.\nComplete Workshop Files (.capx), Graphics and Resources.\nWhat You Will Learn From This Course?\nCreating Objects with Basic AI\nFinding Objects and Finding Paths\nOn Screen Touch Controls\nMastering the Use of Variables\nAdding Music and Sound Effects\nCreating and Adding New Levels\nAdding Load and Save Features to Your Game\nCreating Buttons, Menus and Title Screens\nCourse Objective:\nAfter completing this course, you will be able to build and sell your own video games on several platforms like Web (HTML), Windows, Mac, Linux, iOS, Android and much more without restrictions.\nWhat are the requirements?\nFree or Paid edition of Construct 2 is required\nWhat am I going to get from this course?\nOver 30 lectures and 2 hours of content!\nCreate a Complete 2D Cross-Platform Video Game From Scratch without Coding or Prior Experience\nGain various essential skills in game design and development\nGain a good understanding of Construct 2 and its features while learning about game development\nLearn everything you need to create your own advanced platformer game\nWhat is the target audience?\nComplete beginners who want to create video games\nDesigners who wants to create games without coding\nAnyone who is interested in learning on Construct 2\nBeginners of Construct 2 that need to learn more about it\nAny developer who is interested in creating 2D cross platform video games",
      "target_audience": [
        "Anyone who is interested in game development"
      ]
    },
    {
      "title": "Complete 2D Runner game in Unity for Beginners 2024",
      "url": "https://www.udemy.com/course/complete-2d-runner-game-in-unity-for-beginners-2024/",
      "bio": "Learn C# with Unity and create your own 2D Runner Game for Absolute Beginners",
      "objectives": [
        "Unity Fundamentals: Learn Unity basics and navigation",
        "2D Environment Design: Create immersive 2D environments using Unity's Tilemap system.",
        "Polished Gameplay: Enhance gameplay with visual effects and audio cues.",
        "Audio Atmosphere Design: Craft immersive audio experiences for heightened gameplay immersion.",
        "2D Character Controller",
        "Fully working Scoring and Health System",
        "C# Programming"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Player": [
          "Adding player",
          "Basic Programming",
          "Player Movement",
          "Jumping",
          "Fix Jump",
          "Adding animations",
          "Setting up animator",
          "Player Camera"
        ],
        "Environment": [
          "Adding Tileset",
          "Making environment",
          "Setting up Environment",
          "Background"
        ],
        "Health": [
          "Setting up Health",
          "Damaging player",
          "Health UI",
          "Health mechanics",
          "Damage effects"
        ],
        "Respawn": [
          "Respawning",
          "Checkpoints"
        ],
        "Scoring": [
          "Scoring",
          "ScoringUI"
        ],
        "Levels": [
          "Adding new levels",
          "Level transition"
        ],
        "Menu": [
          "Main menu UI",
          "Menu buttons",
          "Credits",
          "Pausemenu"
        ],
        "Audio": [
          "Adding sound effects",
          "BGM"
        ],
        "Final Details": [
          "Dashing",
          "Lights",
          "Background lights",
          "Winning scene",
          "DialogueUI",
          "DialogueMechanics",
          "Activate Button",
          "Fix Bugs",
          "Testing",
          "Building game"
        ]
      },
      "requirements": [
        "Mac or PC capable of running Unity 3D",
        "Unity 2021 or Higher"
      ],
      "description": "Welcome to the Unity 2D Runner Game Development course for beginners! If you've ever wanted to create your own exciting and addictive endless runner game like Temple Run or Subway Surfers, this course is for you.\nIn this comprehensive course, you will learn step-by-step how to create a 2D endless runner game from scratch using Unity, the leading game development platform. No prior experience with Unity or game development is required - we'll start from the basics and gradually build up your skills.\nYou'll begin by setting up your development environment and familiarizing yourself with the Unity interface. Then, you'll dive into the fundamentals of game development, including player controls, game mechanics, and level design.\nNext, you'll learn how to create dynamic and challenging obstacles, implement scoring and game over mechanics, and add visual effects to make your game come to life. You'll also explore techniques for optimizing your game for performance and mobile devices.\nThroughout the course, you'll receive expert guidance from industry professionals who have years of experience in game development. By the end of the course, you'll have a complete 2D runner game that you can publish to app stores or share with friends and family.\nWhether you're a hobbyist looking to explore game development or aspiring to start a career in the gaming industry, this course will provide you with the skills and knowledge you need to create your own 2D runner game in Unity. Join us on this exciting journey and unleash your creativity in game development!\n\n\nBy the end of this course, you will:\nHave a fully functional 2D endless runner game that you can customize and expand upon.\nUnderstand the core principles of game development, including player controls, game mechanics, and level design.\nBe able to create dynamic and challenging obstacles for your game.\nImplement scoring and game over mechanics to enhance the player experience.\nAdd visual effects and polish to your game to make it more engaging and immersive.\nHave the skills and knowledge to continue learning and growing as a game developer.",
      "target_audience": [
        "Individuals new to game development looking to learn Unity and create their first 2D action game.",
        "Developers with some experience in Unity seeking to expand their skills in creating action-packed gameplay mechanics.",
        "Those interested in understanding the intricacies of designing and developing 2D action games, from mechanics to level design.",
        "Anyone passionate about game development as a hobby or potential career path, eager to delve into the specifics of creating sword-based action games in Unity."
      ]
    },
    {
      "title": "GameDev Boot Camp to be a professional game programmer",
      "url": "https://www.udemy.com/course/gamedev-boot-camp-to-be-a-professional-game-programmer/",
      "bio": "Learn the foundations that professionals software programmers use to work synchronized and be ready to join them.",
      "objectives": [
        "Fundamentals of software development to become a member of professional team of developers",
        "Universal architectural patterns used as the foundation of computer engineering in any professional software project",
        "Workflow used from the concept definition up to the full implementation of software features",
        "Advanced programming techniques, multiplayer programming, VR programming, mobile programming, Unity DOTS programming"
      ],
      "course_content": {},
      "requirements": [
        "Basic knowledge about arithmetic and trigonometry concepts and basics concepts about programming"
      ],
      "description": "This course is targeted for the people who want to be a part of a professional team of developers. Like students that are\nconsidering to study computer engineering and want a boost to know the basics of professional software development.\n\n\nThe reason why this course is called 1 to 7 is because:\n\n\nIn the case of 1, I've used it instead of 0 because in order to start this course you would need to know some basic arithmetic and trigonometry concepts that are learnt in high school.  Also it's recommended, not required, that you have done some basic tutorials about the most basic programming concepts like variables.\nOn the other side, I've used 7 because, in the scale from 0 to 10, seven could be considered the necessary knowledge in order to be a junior software programmer that could consider to apply to software development entry level job.\n\n\nThe knowledge learnt in this course could be classified in 4 areas:\n\n\nTeam workflow: You will learn about the software development team workflow and how you can work synchronized with your colleagues.\nArchitecture: High level concepts not connected with any tool or programming language that software programmers use as a foundation to work together.\nTools: The framework or game development tool that we are using to apply the previous architectural concepts.\nBasic programming syntax: The syntax of a programming language.\n\n\nThe lessons this course are:\n\n\nLesson 0: Introduction and first unity project.\nLesson 1: Basic programming concepts: public/private variables, methods, bucles\nLesson 2: Methods, Functions and Class Player\nLesson 3: Expanding Class Player: Members and Methods\nLesson 4: Inheritance\nLesson 5: Inheritance Gaming\nLesson 6: Design Pattern: The finite state machine.\nLesson 7: GameController Script.\nLesson 8: Design Pattern: Singleton pattern.\nLesson 9: Design Pattern: Component pattern.\nLesson 10: Design Pattern: Observer pattern.\nLesson 11: Unity: Prefabs and animations\nLesson 12: CameraController, 3rd person camera\nLesson 13: Version Control System.\nLesson 14: Pathfinding\nLesson 15: Design Pattern: The Command pattern.\nLesson 16: SOLID principles\nLesson 17: Design Pattern: Model View Controller and ScriptableObjects\nLesson 18: Multiplayer Development: Photon.\nLesson 19: Virtual Reality Development.\nLesson 20: Mobile development.\nLesson 21: Namespaces and libraries.\nLesson 22: Unity DOTS, ECS.\nLesson 23: Team Workflow.\n\n\nThe way this course works is like this:\n\n\nI will introduce a concept and then I will ask you to do progress related to that concept. Every time you see \"Motivational Shia\" is the moment you will be asked to work on that concept.\nSince I won't be next to you to solve all your doubts I've recorded all the coding process of the tasks I ask you to do. You can change the video speed in order to go through all the typing that I've done, but all these exercises are meant to be done by you, so you should have all the necessary knowledge up to that point.\nThere will be always links to the source code always at the start and end of each lesson, so you will always have the code available to compare it with your progress.\n\n\nFinally thank you for your interest in this course and I hope it helps you to be a good member of a professional team of developers.",
      "target_audience": [
        "Students or people who want to be a part of a professional team of developers and learn how they can work synchronized with the other team members"
      ]
    },
    {
      "title": "Learn to create advance Metroidvania game with Unity & C#",
      "url": "https://www.udemy.com/course/learn-to-create-advance-metroidvania-game-with-unity-c/",
      "bio": "Learn to create advance Metroidvania game with Unity & C#",
      "objectives": [
        "Build 2D Unity Game",
        "programming with C#",
        "Making 2D Side scroller Design",
        "Making Dialogue",
        "Making Timeline"
      ],
      "course_content": {},
      "requirements": [
        "PC"
      ],
      "description": "Are you looking for an  Unity course where you will build a  2d game from scratch ? In this course we will create a  game with lots of important things that any game should to make that game nice and beautiful.\n\n\nIf you have completed few beginner courses on Unity and C# and you feel comfortable using them together I believe that you will benefit greatly from this course.\nWe will use multiple 2d models, animations and tools which have high quality\nMy hope is that at the end of the course you will have a bigger picture on how to structure the code for your game and make a great game for yourself .\nIf you think that you could benefit from this course don't hesitate to purchase it.  Saying that I have really put a lot of effort to make sure that you will benefit from the course and learn some useful techniques from setting up lights, Shaders and more\nWhat you will learn at the end of this course\n1)make player  that moving around\n2)NPC movement and animations\n3)Lighting system in 2D game\n4)Design Level\n5)Transition between Scenes\n6)Professional Dialog system with ability to add voice to it\n7) Follow Camera\n8) How to make Timeline\n9)and more",
      "target_audience": [
        "Everyone"
      ]
    },
    {
      "title": "create advance side scroller shooting game with Unity",
      "url": "https://www.udemy.com/course/create-advance-side-scroller-shooting-game-with-unity-c/",
      "bio": "create advance side scroller shooting game with Unity",
      "objectives": [
        "Beginner C# concepts",
        "Develop a complete 2d Game from scratch using C# and Unity",
        "Discover 2D animation workflows",
        "Unity concept",
        "Inventory System",
        "Craft System",
        "Save & Load Game",
        "Making AI Enemies"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "New 2D Project"
        ],
        "Main Menu & Game Assets": [
          "Main Menu"
        ],
        "Player Health": [
          "Player Health"
        ],
        "Inventory": [
          "Inventory UI Canvas",
          "Scriptable Object",
          "Item Slot UI Script",
          "Inventory script Variable and functions",
          "Inventory Script",
          "Weapon Damage"
        ],
        "Shop": [
          "Shop Item UI Canvas",
          "Shop Item Script"
        ],
        "Save system": [
          "Saving and loading Inventory",
          "Player damage and Enemy Damage",
          "Continue button in main menu",
          "Player Revive after Death",
          "design Inventory",
          "Craft System UI",
          "crafting scripts",
          "Item pickup and save and load item in scene",
          "21)Player movement left & Right",
          "Player jump",
          "Enemy controller script",
          "Player shooting",
          "Player Animation shooting",
          "Enemy animation design"
        ]
      },
      "requirements": [
        "pc",
        "Unity"
      ],
      "description": "Learn how to create your very own 2D RPG game for mobile or PC using Unity2D, an industry-standard program used by many large gaming studios and indie developers across the world.\nYou won’t just be learning programming concepts in this course, but tying these concepts to real game development uses. You will have access to a course forum where you can discuss the topics covered in the course as well as the next steps to take once the course is complete.\nThis course has been designed to be easily understandable to everyone, we start from scratch, easy codes to hard codes and every code will be explained so whether you’re a complete beginner, an artist looking to expand your game development range or a programmer interested in understanding mobile game design, this course will help you gain a greater understanding of development.\nAt the end of this course you will have developed the ability to create such PC game elements as:\nCreating the world\nMake different enemies\nMake player units\nCrafting items\nInventory\nSave and load the game and inventory\nLearning C# codes\n\n\nStart learning today and let me help you become a mobile and PC game developer!\n\n\n\n\nUnderstand how to earn revenue using advertising in their games\nLearn C#, a modern versatile programming language\nUnderstand the capabilities of mobile development in Unity\nDevelop strong and transferable problem solving skills\nGain an understanding of the game development process\n\n\nMac or PC capable of running Unity 2D\nThe latest version of Unity\n\n\nAnyone who wants to make their own mobile and pc games\nAnyone interested in learning to publish apps and games to the Play Store or stream\nComplete beginners with an interest in learning mobile and PC game development\nDevelopers who want to re-skill across to mobile development\nPeople who want to create and publish their own mobile or PC games.",
      "target_audience": [
        "everyone"
      ]
    },
    {
      "title": "Maya & Unreal: 3D Character Animation Jump Flip Fundamentals",
      "url": "https://www.udemy.com/course/maya-unreal-3d-character-animation-jump-flip-fundamentals/",
      "bio": "Complete Guide from Beginners to Pros Body Mechanics: Autodesk Maya, Unreal Engine, Unity, Game Development & Design",
      "objectives": [
        "Animating with Keyframes using Autodesk Maya",
        "Understanding Unreal Engine's A.R.T. rigging tools for Autodesk Maya Animation Creation Process",
        "Animating Production Ready Jump Flip Animation Cycle",
        "Learn Step by Step How to Animation in Layers Using VIdeo Reference to Create Pro Level Game Animations in Maya",
        "Exporting Character Animation to Unreal Engine or Unity Game Engine",
        "Understanding Production Process of Animation Using Unreal Engine's A.R.T. rigging tools for Autodesk Maya"
      ],
      "course_content": {
        "JUMP FLIP INTRO": [
          "Jump Flip Course Introduction",
          "Course Setup Getting Started with Autodesk Maya",
          "Udemy Rating System Very Important Info!",
          "Overview of the Project",
          "Creating Idle Start Pose",
          "Anticipation Extreme Pose",
          "Adding Breakdown Transitions",
          "Take Off Keypose",
          "Advanced Skeleton Vs. ARTv1 | Python 3 & Post Maya 2022 Unreal Mannequin",
          "Frequently Asked Questions"
        ],
        "ANIMATING THE JUMP": [
          "Switching IK/FK Leg Pose",
          "Animating the Spin Flip",
          "Adjusting Timing, Landing Prep, & IK Transition",
          "Euler Filter for the Flip",
          "Additional Spin Breakdowns & Landing Prep",
          "IK/FK Settings and Options"
        ],
        "ANIMATING THE LANDING": [
          "Transitioning Flip to Landing Pose",
          "Footwork on the Landing",
          "Full Body First Pass Animation"
        ],
        "ADDITIONAL BREAKDOWN POLISH": [
          "Sculpting Breakdown Poses for the Arm & Shoulders",
          "Arc Tracking & Leg Breakdowns",
          "Adding Breakdowns to Anticipation Pose",
          "Neck, Head, Root, & Feet Breakdown Polish",
          "Animation Break-Down Posing"
        ],
        "REFINING DETAILS & FINAL POLISH": [
          "Animating Finger Drag & Arcs",
          "Final Details & Refinement",
          "Onion Skinning, Mesh Duplication, & Arc Tracking",
          "Final Graph Editor Curves",
          "Duplicating Limbs for Smear Frame Effect",
          "Polish Refinement"
        ],
        "EXPORTING ANIMATION FOR UNREAL": [
          "Snapping Export Node to Root for Export",
          "Export Settings"
        ],
        "BONUS Lecture": [
          "BONUS: Maya & Unreal First Person Shooter Animation for Beginners"
        ]
      },
      "requirements": [
        "No prior knowledge of Autodesk Maya, Unity, or Unreal Engine needed.",
        "The course utilizes Maya 2018, but prior knowledge of any 3d animation/modeling package is a plus.",
        "Programming is a plus, but not required.",
        "All Concepts Taught Can Be Applied to Any Animation Software or Animation Creation Process of User's Choice"
      ],
      "description": "Hi there!\nWelcome, and thanks for choosing Class Creative’s Maya & Unreal: 3D Animation Jump Flip Fundamentals | Complete Guide From Beginners to Pros | Body Mechanics!!\nIn this foundation course we will be learning the fundamentals of Character Animation for games (specifically for the Unreal engine, but this method will also work for other game engines such as Unity).\nLearn everything necessary for a Character Animation Jump Flip utilizing Autodesk Maya taught by a AAA game professional with university level accredited instruction!\nAutodesk Maya is the industry standard 3D animation software, understanding the concepts in this course will help you land a job in the game, film, tv, or music industry.  In this course you will learn how to animate your custom created character from scratch.\n\n\nWe will cover the following core skill sets:\nGetting started with Maya and understanding the animation process\nUnderstanding how to utilize the reference image plane in Maya to create a realistic game engine ready Jump Flip Animation\nStrong Fundamentals of Animation Body Mechanics\nProcess of using IK/FK controllers and best practices of Unreal Engine's A.R.T. tools for Autodesk Maya\nHow to Blend Custom Animations to Existing Idle to Create a Loophole and Programmable Animation\nUnreal Engine's A.R.T. rigging tools for Autodesk Maya\nUnderstanding hotkeys to animate and rig quickly\nAnimating with keyframes\nAnimating a production ready jump flip quickly and efficiently\nExporting the character rig, and animation to the Unreal Engine\nNOTE - Course does NOT include custom character mesh.  ART tools will include mannequin mesh which will allow all animation and lessons to be animated without a mesh or completing a custom rig.  Course is strictly showing the process of animating a character of choice,  for ANY character regardless of software or rig limitations.  Maya 2022 for Mac OS (Pc/Linux Maya 2022 both currently support Python 2) currently only supports Python 3; the Art tools will require Python 2 which is currently only supported in Maya 2020 on Mac OS.\nUPDATE  - We now provide and support current versions of Maya with a provided Advanced Skeleton Unreal Mannequin rig for the animation course if you choose not to use the ART tools Mannequin rig for Maya 2022.\n\nWe’ll be utilizing the latest software packages that top tier gaming studios of today use to create all of your favorite titles!\nAutodesk Maya, Unreal Engine’s Maya Animation Rigging Toolset (A.R.T. for short), and the Unreal game engine.\n\n\nWhy Learn From Class Creatives?\nThis course features an accredited university level animation instructor who has over 15 years of experience animating both keyframe, and motion capture for studios such as Naughty Dog, Insomniac, Guerilla Games, Sucker Punch, Google, Disney and more.  Whether it be a complex hyper realistic animation or a cartoony stylized “Disney” character animation it ALL starts with the fundamentals which we cover in these lectures.\nWho This Course is For:\nWhether you are just a beginner interested in Character Rigging and Animation, or a Master professional looking to brush up on your current skill set, this course has material you surely won’t want to miss!\nAs with all Class Creative’s courses, we’ve laid out a structure that covers the full spectrum of industry standard character workflows from start to finish.\nPlease remember, if this is your first time creating rigging or animating a 3D character, we highly recommend that you follow the outline carefully, according to how our instructor’s have structured the course. We wouldn’t want you to miss out on any details!\nHowever, if you are an advanced user and are looking for something specific to add to your repertoire feel free to dive in and skip to any sections you’d like to focus on.",
      "target_audience": [
        "Competency using a computer.",
        "Developers who want to add game development to their skill-set.",
        "Anyone with a passion for learning game development.",
        "Anyone who wants the ability to create assets for games.",
        "Anyone Interested in Character Animation",
        "Anyone Wanting to Develop New Skills for Unreal Engine, or Unity"
      ]
    },
    {
      "title": "Unity Development - The Basics of the Unity Game Engine",
      "url": "https://www.udemy.com/course/the-basics-of-unity/",
      "bio": "Become an intermediate game developer today, by learning the basics of the Unity Game Engine!",
      "objectives": [
        "A detailed explanation of the basics of the Unity Game Engine!",
        "Basic game design concepts including Sprites, Animation, Physics Engines and an Introduction into C#!",
        "Advanced game design tools, including Player Feedback Concepts and Analysis Methods!",
        "A full tutorial on the Unity Game Engine, and how to develop using Unity and C#!"
      ],
      "course_content": {
        "Unity's Interface": [
          "Unity's Layout",
          "Asset Workflow"
        ],
        "The Basics of Unity": [
          "Sprites",
          "Physics",
          "Animation"
        ],
        "Scripts": [
          "Intro to Scripts",
          "Movement Scripts",
          "Active Scripts",
          "Passive Scripts",
          "Saving Data"
        ],
        "Feedback Concepts": [
          "Sound Design",
          "Particle Systems",
          "User Interface"
        ],
        "Analysis Tools": [
          "Profiler Analysis"
        ],
        "Building your Game": [
          "Building in Unity"
        ],
        "Conclusion": [
          "Conclusion"
        ]
      },
      "requirements": [
        "No programming or game development experience needed! You'll learn everything you need to know!"
      ],
      "description": "Hey there, and welcome to my course on the basics of Unity!\n\n\nIn this course, we will be covering all of the basics of the well-known Unity Game Engine, ranging from Unity's workflow to C#, and from Sound Design to Particle Systems and Feedback Concepts. This course will cover everything you need to know when creating your first game in Unity.\n\n\nOver the last few years, I have created 4 mobile games, entirely on my own, and released them for free on Google's Play Store. Now, using the knowledge I acquired, I created this course, as a concise yet detailed tutorial on how to develop games in Unity.\n\nLearning a game engine entirely from scratch can be a difficult task, and I for one have spent many hours reading through forum posts and manuals in the hopes that someone can explain a concept I was struggling with. Fortunately, learning these concepts got easier with time, and allowed me to gain a relatively detailed understanding of how Unity works. In this course, I'll be passing on everything that I learned to you.\n\n\nIf you decide to enrol, you'll be making a wise choice, as knowing how to develop games, especially in Unity, is an incredibly useful skill to have in today's world, and by learning this skill, you'll be making a smart investment in your future. Additionally, creating your own games in Unity is an amazing experience and an incredible creative outlet. By enrolling in this course, you'll be accelerating the time it takes for you to become an adept game developer by an exceptional amount, allowing you to get started on your masterpiece as soon as possible.\n\n\nI hope I get to teach you this valuable skill and thank you for taking the time to read my course's description. Your interest is greatly appreciated!\n\n\nHave a great day! :)",
      "target_audience": [
        "Those looking to enter the world of game development with no prior experience!",
        "Novice programmers looking to enter a new field!",
        "Those wanting to learn the incredibly popular Unity Game Engine!",
        "Game developers looking to expand their knowledge and learn a new engine!",
        "Software engineers keen to apply their coding knowledge to game development!",
        "Those looking for an introduction into the world of game development!"
      ]
    },
    {
      "title": "A Crash Course in Binary Space Partitioning",
      "url": "https://www.udemy.com/course/binary-space-partitioning/",
      "bio": "Learn about 3D space division for game map generation and fast rendering",
      "objectives": [],
      "course_content": {
        "Introduction": [
          "A Quick Welcome"
        ],
        "Section 1": [
          "Building a Binary Tree from a Polygon World",
          "Traversing a Binary Tree",
          "Dividing a Game Map with a BSP Part 1",
          "Dividing a Game Map with a BSP Part 2",
          "Dividing a Game Map with a BSP Part 3",
          "Dividing a Game Map with a BSP Part 4",
          "Drawing Final Divisions Only",
          "Controlling Division Sizes",
          "Carving Rooms",
          "Joining Rooms with Corridors",
          "Forcing Vertical and Horizontal Corridors",
          "Adding Random Corridors and Rooms"
        ]
      },
      "requirements": [
        "Students should have a firm understanding of C#",
        "Students should be familiar with the Unity Game Engine"
      ],
      "description": "Binary Space Partitioning is a technique that's been around for a while and has been used for a number of purposes, in particular 3D polygon divisions, optimised physics collisions, and world map creation within games. Most notably it was used by John Carmack in the creation of the game engine for Doom.\nThis course uses Unity 2020.\nLearn how to program and work with:\nspace division\npolygon ordering for fast rendering and occlusion\nbinary trees\nrecursive search algorithms\ndungeon map creation\nWhat people are saying about Penny's courses:\nDr. Penny is a wonderful person and a true expert. All of her courses I've taken have been top notch and in my opinion there is no better teacher out there.\nAllow me to say how hugely important this is for a person who is interested in certain types of game design. Creating games where you can create AI behaviors that support emergent situations.\nI honestly love Holistic's teaching approach and I've never learned so much within a few hours about coding effectively with such detailed explanations!\nIn this short course, you will gain an overview of the algorithm and how it is used to partition 3D space for optimised polygon drawing as well as get your hands dirty using BSPs to create a game environment dungeon map",
      "target_audience": [
        "Anyone interested in learning about the binary space partititioning technique.",
        "Anyone wanting to expand their skill set in procedural game environment generation."
      ]
    },
    {
      "title": "Master ROBLOX (2025) LUAU Nil to Fill , LOVE2D, LoVR, LUA",
      "url": "https://www.udemy.com/course/advance-lua-oop-networking/",
      "bio": "Advance Lua Programming",
      "objectives": [
        "LUA and LUAU",
        "Master Roblox , Love2D and LOVR",
        "Networking",
        "Game Development",
        "Function Programming",
        "Animation and Sound",
        "Roblox, Bit32 Bitwise operations and lua 5.4",
        "Physics",
        "Advance Programming Concepts",
        "Blender 4.2",
        "Advance Datastore"
      ],
      "course_content": {
        "Lecture 1: Introduction": [
          "Introduction",
          "Roblox Studio Update",
          "Best Experienced Using Headset",
          "Issues In Sync Captions",
          "My Teaching Style"
        ],
        "Basics": [
          "Lecture 2: Variables",
          "Tables",
          "For Loop Part 1",
          "For Loop Part 2",
          "For Loop Part 3",
          "For Loop Part 4",
          "While Loop",
          "Repeat Until loop",
          "If and else if",
          "Operators",
          "Functions",
          "Coroutine",
          "Go To",
          "OOP - Basics"
        ],
        "Basics - Strings": [
          "Install ZeroBrane",
          "string.reverse()",
          "string.find()",
          "string.rep()",
          "string.gsub()",
          "string.match()",
          "string.gmatch()",
          "string.lower() string.upper() string.len() string.byte() string.char()",
          "string.dump()"
        ],
        "Basics - Tables": [
          "table.concat",
          "table.insert",
          "table.move",
          "table.pack",
          "table.remove",
          "table.sort",
          "table.unpack"
        ],
        "Into To LOVE2D": [
          "Love2D",
          "Complete Lua Basic Revision in Love2d and Advance Tables"
        ],
        "Basic - Math": [
          "Math.Exp()",
          "Math.Log()",
          "Math.Abs()",
          "Math.Floor() and Math.Ceil()",
          "Math.Deg() and Math.Rad()",
          "Math.Huge",
          "Math.Mininteger and Math.Maxinteger",
          "Math.Min() and Math.Max()",
          "math.pi() , math.ult() , math.tointeger() , math.type()",
          "math.type()",
          "Math.Sin() and Math.Cos()",
          "Solution to Math.Sin() and Math.Cos()",
          "Math.Tan()",
          "Math.Sqrt() , Math.Asin() , Math.Acos()",
          "Angle and Distance between Points"
        ],
        "Intermediate": [
          "Intro To Roblox Part 2",
          "Few More Patterns using Strings and Math",
          "Few More Patterns Solutions",
          "Procedurally generating a room with door and windows using ROBLOX",
          "Introduction - Sound and Animation",
          "love.filesystem - Simple Project",
          "Introduction - Procedural Generation 1",
          "Introduction - Procedural Generation 2",
          "Introduction - Procedural Generation 3"
        ],
        "Pure Random Generator": [
          "A Pure and Unique Random Number/Object Generator",
          "GitHub"
        ],
        "Blender 4.1 and 4.2": [
          "Lesson 1 - 2D Animation",
          "Blender Basics Part 1",
          "Chapter 2 - Tier",
          "Chapter 3 - Modeling the Rim",
          "Chapter 2 and 3 Render",
          "Blender Basics - Selections - Part 2 HomeWork",
          "Modelling a combat vehicle Part 1",
          "Modelling a combat vehicle Part 2",
          "Modelling a combat vehicle Part 3",
          "Unwarping and Texturing Combat Vehicle",
          "Simple Render - Space Combat Vehicle",
          "Exporting to Roblox",
          "Imported Model Roblox Showcase"
        ],
        "Roblox Physics - Advance": [
          "What are Attachments? Making an Attachment Via Code",
          "Coding : Rigid Constraint",
          "Coding : Ball in Socket",
          "Coding : Prismatic Constraint",
          "Coding : Cylindrical Constraint",
          "Coding : Plane Constraint",
          "Coding : Universal Constraint",
          "Coding : Rope",
          "Coding : Rod",
          "Coding : Spring",
          "Coding : Hinge",
          "Coding : Torsion Spring",
          "Coding : Weld",
          "No Collision",
          "Coding : Align Position",
          "Coding : Align Orientation",
          "Coding : Vector Force",
          "Coding : Line Force",
          "Coding : Torque",
          "Coding : Angular Velocity",
          "Coding : Linear velocity"
        ]
      },
      "requirements": [
        "No Programming Experience Needed."
      ],
      "description": "Elevate your game development skills by learning advanced programming techniques, coupled with in-depth asset creation using Blender and the creation of sophisticated game GUIs. This course focuses on advanced programming concepts essential for game development.\n\nMany courses prioritize the visual aspects of game development, such as applying 3D assets and GUIs, but neglect to adequately teach crucial and advanced game programming concepts.\n\nWhat are we programming?\nThis simulation is a gamified experience that teaches team management and the importance of being a team player. The game is designed in such a way that it cannot be won unless the entire team works together as a cohesive unit. Players are faced with various challenges that require effective communication, collaboration, and strategic decision-making. The game also incorporates elements of stress and risk, simulating real-world scenarios where team members must work together under pressure to achieve a common goal.\nThe simulation is set in a high-stakes environment, where the risk of failure is ever-present. Players must navigate through complex challenges, making quick decisions and adapting to changing circumstances. The game emphasizes the importance of trust, accountability, and mutual support, as players rely on each other to overcome obstacles and achieve success.\nThrough this simulation, players learn valuable skills such as leadership, communication, and problem-solving. They also gain a deeper understanding of the importance of teamwork and the role it plays in achieving success. By providing a realistic and engaging experience, this simulation offers a unique and effective way to teach team management and team player skills.\n\nThis comprehensive course covers game development using Roblox, Love2D, LoVR, Lua programming, and Blender 4.2. Master 3D math, springs, constraints, and advanced GUI elements in Roblox to unlock its full potential. Gain expertise in Love2D and LoVR, focusing on shaders and advanced techniques. Through Lua networking and object-oriented programming, create projects from scratch, such as a random generator, mini-games, and complex simulations that embody gamification principles, teaching valuable team and leadership skills. Design custom assets in Blender 4.2, incorporate sound effects, and delve deeper into programming concepts. This engaging and practical course offers a creative journey that merges innovation and mastery in game development.\n\nRoblox physics encompasses a wide range of elements, including hinge, cylindrical, prismatic, plane, and spring constraints. Hinge constraints allow objects to rotate around a fixed point, while cylindrical and prismatic constraints enable linear motion along a specified axis. Plane constraints restrict movement to a specific plane, and spring constraints simulate the behavior of real-world springs. Additionally, Roblox supports advanced physics features like collision detection, gravity manipulation, and force application.\nAnimation in Roblox can be achieved through the use of Animation Controllers and Animation Tracks, which allow for the creation of complex character movements and interactions. Sound integration is also possible, with support for various audio formats and effects, enabling the creation of immersive game environments.\nAdvanced data saving in Roblox can be accomplished through the use of DataStores, which provide a persistent storage solution for game data. This allows for the creation of complex game mechanics, such as player progression, inventory management, and game state persistence. By mastering these features, developers can create engaging and dynamic games that offer a rich and immersive experience for players.\n\nRoblox offers a wide range of advanced GUI features, including keyboard, gamepad, and touch controls. The GUI can be customized to respond to various inputs, allowing for a more immersive and interactive gameplay experience. Additionally, Roblox supports remote events and bindable events, enabling developers to create complex and dynamic GUI elements. The platform also offers advanced team management controls for team leaders, as well as advanced GUI features for team players. These features allow for greater flexibility and customization in game development, enabling developers to create engaging and dynamic games.",
      "target_audience": [
        "Beginners to Expert"
      ]
    },
    {
      "title": "Game Designer Briefcase: Virtual Reality & Character Sculpt",
      "url": "https://www.udemy.com/course/mammothinteractive-vr-charactersculpting/",
      "bio": "Learn VR, Blender, and MakeHuman. Make games and 3d models of humans",
      "objectives": [
        "Build Virtual Reality games in Unity Technologies.",
        "Create artwork in Blender.",
        "Code in C#.",
        "Make 3D models of humans in MakeHuman and import them into Blender and Unity."
      ],
      "course_content": {
        "Course Trailer": [
          "Course Trailer"
        ],
        "30 3D Virtual Reality Unity Games": [
          "5 Reasons To Learn Virtual Reality",
          "Unity VR Games Preview",
          "Download and Install Unity"
        ],
        "Unity Introduction": [
          "Have Unity experience? Jump to Section 7!",
          "Unity Intro",
          "Unity Editor",
          "Moving a Cube",
          "Materials",
          "Lights",
          "Particle Systems",
          "Game Physics",
          "Asset Store"
        ],
        "C# Coding - Unity Introduction": [
          "C# Coding Introduction",
          "Variables",
          "Methods",
          "If Blocks",
          "Loops"
        ],
        "Inputs - Unity Introduction": [
          "Inputs Introduction",
          "Handing User Input",
          "Moving a Player",
          "Jumping",
          "Moving Forward",
          "Cycling Cameras"
        ],
        "Prefabs - Unity Introduction": [
          "Let's Talk About Prefabs",
          "Prefabs Introduction",
          "FAQ on Instantiating Objects",
          "Random Angles",
          "FAQ on Destroying Objects",
          "Explosions",
          "Explosion Effects"
        ],
        "Virtual Reality (VR) - Unity Intro": [
          "VR Introduction",
          "FAQ: How to move?",
          "Activating VR",
          "Building a Castle",
          "Camera Changing Position?",
          "Lowering Castle Doors",
          "Triggering Events",
          "Interface"
        ],
        "SDK Update of June 2017": [
          "Notes about the Update",
          "Using Unity Package with Unity 5.6+"
        ],
        "(Files) Code & Art - Unity VR": [
          "Source Code & Art Assets - Unity VR"
        ],
        "Whack a Mole": [
          "Whack a Mole (Introduction)",
          "Whack a Mole (Coding) - Part 1",
          "GvrViewer.Instance.Triggered Equivalent",
          "Whack a Mole (Coding) - Part 2",
          "Whack a Mole (Coding) - Part 3"
        ]
      },
      "requirements": [
        "Please download and install the free programs MakeHuman, Blender, and Unity 5.4.3f1.",
        "This course was recorded on a Mac, but you can use a PC."
      ],
      "description": "Have you ever wanted to make your very own games? Well, you've come to the right place!\nAfter purchasing this course, you'll be taken step-by-step through every process needed to do just that. Our two very talented instructors, Kevin Liao and Glauco Pires, explain everything from a basic, beginner level. That means, you don't have to have any prior coding or digital art experience to succeed here.\nGlauco Pires will take you through the process of coding a game in Unity® from scratch. You will make 2D, 3D and VR games.\nKevin Liao will teach you how to create all the artistic elements you will need to complete the game. Kevin will teach this section of the course in Blender; the wonderful, free 3D modeling program.\nThe final section will teach you how to integrate the art you created in Blender to the game in Unity!\nIncluded in this course is material for beginners to get comfortable with the interfaces. Please note that we reuse this content in similar courses because it is introductory material. You can find some material in this course in the following related courses:\nComplete your first FPS and game art in Unity® and MakeHuman\nMake 3D characters easily with MakeHuman and Blender3D\nAlter images in Xcode and create 3D characters for games\nBuild 2D, 3D, and VR Games in Unity and Unreal *Masterclass*\nThe Complete VR Course: Build 3D Models and Unity Games\nMaster Unity VR: Make 30 Mini Games in 3D!\n2D Game Development & 3D Rendering in Construct & MakeHuman\nUnreal Engine Game Mechanics Mastery & MakeHuman 3D Modeling\nThe Complete Ruby on Rails & 3D Rendering Humans for Games\nMaster Game Development - 90 Games in Unity & Construct 2\nMake 30 VR Games in Unity and Learn to Code\nComplete 35 Projects: Unity VR Games with C# & iPhone Apps\nComplete 3D Modeler & C# Unity VR Game Developer Masterclass\nYou get full lifetime access to this course for a single one-time fee. Your purchase includes an e-book from Mammoth Interactive: \"Build a 3D Virtual Reality Whackamole Game.\"\nThis course is project-based so you will not be learning a bunch of useless coding practices. At the end of this course you will have real world apps to use in your portfolio. We feel that project based training content is the best way to get from A to B. Taking this course means that you learn practical, employable skills immediately.\n\nYou can use the projects you build in this course to add to your LinkedIn profile. Give your portfolio fuel to take your career to the next level.\nLearning how to code is a great way to jump in a new career or enhance your current career. Coding is the new math and learning how to code will propel you forward for any situation. Learn it today and get a head start for tomorrow.\nPeople who can master technology will rule the future.",
      "target_audience": [
        "People who want to make games and 3D digital art.",
        "Complete beginners to intermediates."
      ]
    },
    {
      "title": "Blender - Low Poly Modeling/Texturing",
      "url": "https://www.udemy.com/course/blender-low-poly-modelingtexturing/",
      "bio": "Create Low Poly 3D Assets for your Projects in a PSX/PS1 Style",
      "objectives": [
        "How to model a low poly asset in blender",
        "How to texture it with low resolution textures",
        "How to prepare those models for exporting to a game engine",
        "PSX style"
      ],
      "course_content": {
        "Introduction": [
          "Section 1: Introduction",
          "Some Links",
          "Basics"
        ],
        "Onigiri Plate": [
          "Onigiri Modeling - 1",
          "Onigiri Modeling - 2",
          "Onigiri Modeling - 3",
          "Onigiri Texturing - 1",
          "Onigiri Texturing - 2",
          "Onigiri Clean up"
        ],
        "Tori Gate": [
          "Tori Gate Modeling - 1",
          "Tori Gate Modeling - 2",
          "Tori Gate Modeling - 3",
          "Tori Gate UV - 1",
          "Tori Gate UV - 2",
          "Tori Gate Texture - 1",
          "Tori Gate Texture - 2",
          "Tori Gate Clean up"
        ],
        "Old Phone": [
          "Old Phone"
        ],
        "Old Tube TV": [
          "Old Tube TV"
        ]
      },
      "requirements": [
        "You don't need prior knowledge in blender to take this course"
      ],
      "description": "Out of nowhere came the interest in Game Dev and 3D Low Poly Modeling.\nNow I'll try to teach you everything I've learned with all the time I spent messing around blender and looking for tutorials on YouTube, because I didn't like any of them, they were so weird and boring, so hopefully I'm doing a slightly better job here.\nIn this course the objective is to show you the core tools and mechanics we're going to use along the modeling process and then just practice what we have learned with the other objects\n\n\nFor this course we are going to focus on a Japanese aesthetic, starting with an onigiri plate, learning the basics, after that we are going for a tori gate, an old phone, an old tube tv and a chainsaw!\nIn this course I'll try to make short and straight to the point videos, while trying to give you the info and guidance needed to model a perfect PSX style prop for your desired end goal!\n\n\nAfter completing the course you can keep studying and practicing, just look around you and model! you are surrounded by possible PSX /1 objects, so just keep those brain fluids running",
      "target_audience": [
        "3D modeling beginners"
      ]
    },
    {
      "title": "Learn 3D Game Development and Programming with Unity",
      "url": "https://www.udemy.com/course/learn-3d-game-development-and-programming-with-unity/",
      "bio": "Learn to develop your own 3D games in this comprehensive introduction to game development and programming with Unity 3D",
      "objectives": [
        "Learn the Unity interface",
        "Navigate 3D views",
        "Use orthographic views",
        "Build modular levels using grid and vertex snapping",
        "Learn programming principles",
        "program game logic, game mechanics, and gameplay",
        "Create GUI and HUD elements",
        "Learn physics programming by coding a Helicopter control system from scratch!"
      ],
      "course_content": {
        "Introduction": [
          "Welcome to The Course",
          "Hello World - Unity Interface and Scripting"
        ],
        "Basic Concepts": [
          "Moving Objects Using Code",
          "Rotating Objects using Code",
          "Parenting - Simple Third Person Camera",
          "Collider and RigidBody Components",
          "Basic Materials: Color",
          "Downloadin the Project Files",
          "Importing Game Assets",
          "Materials - Texture Maps"
        ],
        "Modular Level Design": [
          "Mesh Import and Snap Settings",
          "Vertex Snapping - Building A City Block",
          "Building Pathways Using Tile Blocks",
          "Buliding Road Networks"
        ],
        "Improving the City": [
          "Sculpting and Paiting Terrains",
          "First Person Controller - Exploring Your First City!",
          "Enlarging the City",
          "Normal Maps - Faking Extra Detail",
          "Aesthetic Adjustments"
        ],
        "Avatars and Control Systems": [
          "Setting Up the Helicopter",
          "Customizing Virtual Input Axes",
          "Helicopter Physics Settings",
          "Helicopter Controller - Variables and Types",
          "Assigning Variable Values - In Editor and In Code",
          "Welcome to the Course",
          "Physics Update - Physics Steps",
          "Conditionals and Relative Forces",
          "Update Function - Input and Animation"
        ],
        "Game Rules and Gameplay": [
          "Debugging and Testing",
          "Camera Controller Script",
          "Refining the Helicopter Controls",
          "Programmatically Animated Pickups",
          "Prefabs and Particle Effects",
          "OnTriggerEnter and The Game Script",
          "OnCollisionEnter - Rotor Collisions"
        ]
      },
      "requirements": [
        "Nothing. Everything is covered."
      ],
      "description": "In this Unity based 3D game development course, you will learn everything you need to know, from the ground up, to start building your own game worlds, and programming gameplay, using all of the tools and utilities of the industry standard Unity 3D game engine!\nIn addition to lots of other things, you will learn:\nNavigating the Unity interface and 3D views\nWorking with game objects\nUsing components of all kinds to modify your game objects\nimporting game assets, such as meshes, textures and audio files\nProgramming game mechanics\nCreating game logic and gameplay\nDesigning levels\nUsing snapping to create modular level designs\nPlaying sound effects and music\nMuch, much more...\n\n\nBy the end of this course, you will know how to develop and program your own 3D games of various genres, using Unity 3D various tools and utilities, as well effective, universal good-practice game design principles. So what are you waiting for? Sign up now and start making your own great 3D games!",
      "target_audience": [
        "Beginners",
        "2D game developers looking to take their first steps into 3D game dev"
      ]
    }
  ]
}